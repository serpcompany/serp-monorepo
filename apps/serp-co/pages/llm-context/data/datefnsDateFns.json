[
  {
    "owner": "date-fns",
    "repo": "date-fns",
    "content": "TITLE: Implementing index.js for a New Locale in date-fns\nDESCRIPTION: This snippet shows how to create the index.js file for a new locale in date-fns. It includes importing necessary functions, setting locale metadata, and exporting the locale object.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n *\n * // Name of the locale.\n * // Inside the parentheses - name of the country - if the locale uses the four letter code, e.g. en-US, fr-CA or pt-BR.\n * @summary English locale (United States).\n *\n * // Name of the language (used by https://date-fns.org/ website)\n * @language English\n *\n * // ISO 639-2 code. See the list here:\n * // https://www.loc.gov/standards/iso639-2/php/code_list.php\n * // Used by https://date-fns.org/ to detect the list of the countries that uses the language.\n * @iso-639-2 eng\n *\n * // Authors of the locale (including anyone who corrected or fixed the locale)\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  code: \"en\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    // Index of the first day of the week.\n    // Sunday is 0, Monday is 1, Saturday is 6.\n    weekStartsOn: 0,\n\n    // Nth of January which is always in the first week of the year. See:\n    // https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n    // http://www.pjh2.de/datetime/weeknumber/wnd.php?l=en\n    firstWeekContainsDate: 1,\n  },\n};\n\nexport default locale;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using date-fns for Date Formatting and Comparison in JavaScript\nDESCRIPTION: This example demonstrates how to import specific functions from date-fns, format a date in 'yyyy-MM-dd' pattern, and sort an array of dates in ascending order using the compareAsc function.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { compareAsc, format } from \"date-fns\";\n\nformat(new Date(2014, 1, 11), \"yyyy-MM-dd\");\n//=> '2014-02-11'\n\nconst dates = [\n  new Date(1995, 6, 2),\n  new Date(1987, 1, 11),\n  new Date(1989, 6, 10),\n];\ndates.sort(compareAsc);\n//=> [\n//   Wed Feb 11 1987 00:00:00,\n//   Mon Jul 10 1989 00:00:00,\n//   Sun Jul 02 1995 00:00:00\n// ]\n```\n\n----------------------------------------\n\nTITLE: Creating an en-GB Locale by Extending en-US in date-fns\nDESCRIPTION: This example demonstrates how to create a new locale (en-GB) by reusing components from an existing locale (en-US) while only implementing unique properties. The implementation imports shared formatting functions from en-US and adds GB-specific formatting and options.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// Same as en-US\nimport formatDistance from \"../en-US/_lib/formatDistance/index.js\";\nimport formatRelative from \"../en-US/_lib/formatRelative/index.js\";\nimport localize from \"../en-US/_lib/localize/index.js\";\nimport match from \"../en-US/_lib/match/index.js\";\n\n// Unique for en-GB\nimport formatLong from \"./_lib/formatLong/index.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United Kingdom).\n * @language English\n * @iso-639-2 eng\n * @author John Doe [@example]{@link https://github.com/example}\n */\nvar locale = {\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n\n  // Unique for en-GB\n  options: {\n    weekStartsOn: 1,\n    firstWeekContainsDate: 4,\n  },\n};\n\nexport default locale;\n```\n\n----------------------------------------\n\nTITLE: Importing Functions from date-fns Submodules in JavaScript\nDESCRIPTION: This snippet shows how to import functions from the main date-fns module and its FP (functional programming) submodule.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/gettingStarted.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// The main submodule:\nimport { addDays } from \"date-fns\";\n\n// FP variation:\nimport { addDays, format } from \"date-fns/fp\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Locale-Aware Format Wrapper for date-fns\nDESCRIPTION: Shows how to create a wrapper function that simplifies locale switching when formatting dates. The wrapper imports multiple locales, stores the current locale in a global variable, and applies it automatically to all date formatting operations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18n.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// app/_lib/format.js\n\nimport { format } from \"date-fns\";\nimport { enGB, eo, ru } from \"date-fns/locale\";\n\nconst locales = { enGB, eo, ru };\n\n// by providing a default string of 'PP' or any of its variants for `formatStr`\n// it will format dates in whichever way is appropriate to the locale\nexport default function (date, formatStr = \"PP\") {\n  return format(date, formatStr, {\n    locale: locales[window.__localeId__], // or global.__localeId__\n  });\n}\n\n// Later:\n\nimport format from \"app/_lib/format\";\n\nwindow.__localeId__ = \"enGB\";\nformat(friday13, \"EEEE d\");\n//=> 'Friday 13'\n\nwindow.__localeId__ = \"eo\";\nformat(friday13, \"EEEE d\");\n//=> 'vendredo 13'\n\n// If the format string is omitted, it will take the default for the locale.\nwindow.__localeId__ = \"enGB\";\nformat(friday13);\n//=> Jul 13, 2019\n\nwindow.__localeId__ = \"eo\";\nformat(friday13);\n//=> 2019-jul-13\n```\n\n----------------------------------------\n\nTITLE: Using formatDistance and subDays Functions from date-fns in JavaScript\nDESCRIPTION: This snippet shows how to import and use the formatDistance and subDays functions from date-fns to calculate and format the difference between two dates.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/gettingStarted.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { formatDistance, subDays } from \"date-fns\";\n\nformatDistance(subDays(new Date(), 3), new Date(), { addSuffix: true });\n//=> \"3 days ago\"\n```\n\n----------------------------------------\n\nTITLE: Formatting and Comparing Dates with date-fns in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the format and compareAsc functions from date-fns to format a date and sort an array of dates in ascending order.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/gettingStarted.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { format, compareAsc } from \"date-fns\";\n\nformat(new Date(2014, 1, 11), \"MM/dd/yyyy\");\n//=> '02/11/2014'\n\nconst dates = [\n  new Date(1995, 6, 2),\n  new Date(1987, 1, 11),\n  new Date(1989, 6, 10),\n];\ndates.sort(compareAsc);\n//=> [\n//   Wed Feb 11 1987 00:00:00,\n//   Mon Jul 10 1989 00:00:00,\n//   Sun Jul 02 1995 00:00:00\n// ]\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Date Representations\nDESCRIPTION: Generates human-readable relative date strings based on proximity to a reference date\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-US/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## `formatRelative`\n\nIf now is January 1st, 2000, 00:00.\n```\n\n----------------------------------------\n\nTITLE: Installing date-fns via npm\nDESCRIPTION: This snippet shows the npm command to install date-fns as a project dependency. The --save flag ensures the dependency is added to package.json.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install date-fns --save\n```\n\n----------------------------------------\n\nTITLE: Using TZDate Extension with date-fns Functions\nDESCRIPTION: Demonstrates how to use TZDate extension to handle DST transitions correctly across different time zones. Shows the difference between system time zone and specified time zone behavior.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/timeZones.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TZDate } from \"@date-fns/tz\";\nimport { addHours } from \"date-fns\";\n\n// Given that the system time zone is America/Los_Angeles\n// where DST happens on Sunday, 13 March 2022, 02:00:00\n\n// Using the system time zone will produce 03:00 instead of 02:00 because of DST:\nconst date = new Date(2022, 2, 13);\naddHours(date, 2).toString();\n//=> 'Sun Mar 13 2022 03:00:00 GMT-0700 (Pacific Daylight Time)'\n\n// Using Asia/Singapore will provide the expected 02:00:\nconst tzDate = new TZDate(2022, 2, 13, \"Asia/Singapore\");\naddHours(tzDate, 2).toString();\n//=> 'Sun Mar 13 2022 02:00:00 GMT+0800 (Singapore Standard Time)'\n```\n\n----------------------------------------\n\nTITLE: Transposing Date Values Between Time Zones\nDESCRIPTION: Shows how to transpose date values between different time zones while maintaining the same local time using the transpose function.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/timeZones.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transpose } from \"date-fns\";\nimport { tz } from \"@date-fns/tz\";\n\n// Singapore is the system time zone:\nconst sgDate = new Date(2024, 8 /* Sep */, 7, 6, 5, 4);\n//=> 'Wed Sep 07 2024 06:05:04 GMT+0800 (Singapore Standard Time)'\n\n// Transpose the date to Los Angeles time zone:\nconst laDate = transpose(sgDate, tz(\"America/Los_Angeles\"));\n//=> 'Wed Sep 07 2024 06:05:04 GMT-0700 (Pacific Daylight Time)'\n\n// Transpose back to local time zone using Date:\nconst systemDate = transpose(laDate, Date);\n//=> 'Wed Sep 07 2024 06:05:04 GMT+0800 (Singapore Standard Time)'\n```\n\n----------------------------------------\n\nTITLE: Matching Localized Values (en-US)\nDESCRIPTION: This snippet defines the `match` object for the `en-US` locale, used by the `parse` function.  It includes regular expressions and utility functions for matching and parsing ordinal numbers, eras, quarters, months, days, and day periods. The `buildMatchPatternFn` and `buildMatchFn` functions are assumed to be imported from other modules within the library.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// In `en-US` locale:\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nimport buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\n\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\n\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nvar parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    },\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: function (index) {\n      return index + 1;\n    },\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n\nexport default match;\n```\n```\n\n----------------------------------------\n\nTITLE: Comparing Wrong vs Correct Date Formatting in JavaScript\nDESCRIPTION: Demonstrates the correct and incorrect usage of date formatting tokens, specifically contrasting YYYY-MM-DD vs yyyy-MM-dd format patterns and D.MM.YY vs d.MM.yy parsing patterns.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/unicodeTokens.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Wrong!\nformat(new Date(), \"YYYY-MM-DD\");\n//=> 2018-10-283\n\n// ✅ Correct\nformat(new Date(), \"yyyy-MM-dd\");\n//=> 2018-10-10\n\n// ❌ Wrong!\nparse(\"11.02.87\", \"D.MM.YY\", new Date()).toString();\n//=> 'Sat Jan 11 1986 00:00:00 GMT+0200 (EET)'\n\n// ✅ Correct\nparse(\"11.02.87\", \"d.MM.yy\", new Date()).toString();\n//=> 'Wed Feb 11 1987 00:00:00 GMT+0200 (EET)'\n```\n\n----------------------------------------\n\nTITLE: Implementing era Localization Function for en-US Locale in date-fns\nDESCRIPTION: This snippet demonstrates how to implement the era localization function for the en-US locale in date-fns using the buildLocalizeFn helper function.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// In `en-US` locale:\nimport buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\n\nvar eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nvar localize = {\n  // ...\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n  // ...\n};\n\nexport default localize;\n```\n\n----------------------------------------\n\nTITLE: Mixing Different Time Zone Date Objects\nDESCRIPTION: Shows how to work with multiple date objects in different time zones for business day calculations. Demonstrates how date-fns normalizes arguments based on the reference type.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/timeZones.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TZDate } from \"@date-fns/tz\";\nimport { differenceInBusinessDays } from \"date-fns\";\n\nconst laterDate = new TZDate(2025, 0, 1, \"Asia/Singapore\");\nconst earlierDate = new TZDate(2024, 0, 1, \"America/New_York\");\n\n// Will calculate in Asia/Singapore\ndifferenceInBusinessDays(laterDate, earlierDate);\n//=> 262\n\n// Will calculate in America/New_York\ndifferenceInBusinessDays(earlierDate, laterDate);\n//=> -261\n```\n\n----------------------------------------\n\nTITLE: Using Locales with date-fns formatDistance Function\nDESCRIPTION: Demonstrates how to import and use a specific locale (Esperanto) with the formatDistance function. Shows how to pass the locale as an option to properly format date differences in different languages.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18n.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { formatDistance } from \"date-fns\";\n// Require Esperanto locale\nimport { eo } from \"date-fns/locale\";\n\nconst result = formatDistance(\n  new Date(2016, 7, 1),\n  new Date(2015, 0, 1),\n  { locale: eo }, // Pass the locale as an option\n);\n//=> 'pli ol 1 jaro'\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Dates (ru)\nDESCRIPTION: This snippet provides a more complex implementation of `formatRelative` for the `ru` locale, handling grammatical genders and cases. It includes helper functions `lastWeek`, `thisWeek`, and `nextWeek` to format dates relative to the current week.  The `formatRelative` function selects and applies the appropriate format based on the token and date context.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// In `ru` locale\nvar accusativeWeekdays = [\n  \"воскресенье\",\n  \"понедельник\",\n  \"вторник\",\n  \"среду\",\n  \"четверг\",\n  \"пятницу\",\n  \"субботу\",\n];\n\nfunction lastWeek(day) {\n  var weekday = accusativeWeekdays[day];\n\n  switch (day) {\n    case 0:\n      return \"'в прошлое \" + weekday + \" в' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'в прошлый \" + weekday + \" в' p\";\n    case 3:\n    case 5:\n    case 6:\n      return \"'в прошлую \" + weekday + \" в' p\";\n  }\n}\n\nfunction thisWeek(day) {\n  // ...\n}\n\nfunction nextWeek(day) {\n  // ...\n}\n\nvar formatRelativeLocale = {\n  lastWeek: function (date, baseDate, options) {\n    var day = date.getDay();\n    if (isSameUTCWeek(date, baseDate, options)) {\n      return thisWeek(day);\n    } else {\n      return lastWeek(day);\n    }\n  },\n  yesterday: \"'вчера в' p\",\n  today: \"'сегодня в' p\",\n  tomorrow: \"'завтра в' p\",\n  nextWeek: function (date, baseDate, options) {\n    var day = date.getDay();\n    if (isSameUTCWeek(date, baseDate, options)) {\n      return thisWeek(day);\n    } else {\n      return nextWeek(day);\n    }\n  },\n  other: \"P\",\n};\n\nexport default function formatRelative(token, date, baseDate, options) {\n  var format = formatRelativeLocale[token];\n\n  if (typeof format === \"function\") {\n    return format(date, baseDate, options);\n  }\n\n  return format;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using date-fns with All Locales Bundle\nDESCRIPTION: Shows how to load the main date-fns module along with all locales bundle for internationalization support.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/cdn.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/date-fns@3.6.0/cdn.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/date-fns@3.6.0/locale/cdn.min.js\"></script>\n<script>\n  dateFns.formatRelative(dateFns.subDays(new Date(), 3), new Date(), {\n    locale: dateFns.locale.es,\n  });\n  //=> \"el viernes pasado a las 19:26\"\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Additional Token Options in JavaScript Date Formatting\nDESCRIPTION: Shows how to properly use D, DD, YY, and YYYY tokens with the useAdditionalDayOfYearTokens and useAdditionalWeekYearTokens options.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/unicodeTokens.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nformat(new Date(), \"D\", { useAdditionalDayOfYearTokens: true });\n//=> '283'\n\nparse(\"365+1987\", \"DD+YYYY\", new Date(), {\n  useAdditionalDayOfYearTokens: true,\n  useAdditionalWeekYearTokens: true,\n}).toString();\n//=> 'Wed Dec 31 1986 00:00:00 GMT+0200 (EET)'\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Dates (en-US)\nDESCRIPTION: This snippet defines the `formatRelative` function and the `formatRelativeLocale` object for the `en-US` locale. It specifies how relative date tokens like 'lastWeek', 'yesterday', 'today', 'tomorrow', 'nextWeek', and 'other' should be formatted. The function returns the corresponding format string based on the provided token.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// In `en-US` locale\nvar formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport default function formatRelative(token, date, baseDate, options) {\n  return formatRelativeLocale[token];\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing date-fns via npm or yarn in Bash\nDESCRIPTION: This snippet demonstrates how to install the date-fns package using either npm or yarn package managers.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/gettingStarted.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install date-fns --save\n# or\nyarn add date-fns\n```\n\n----------------------------------------\n\nTITLE: Using formatDuration in date-fns for JavaScript\nDESCRIPTION: The formatDuration function formats a duration object into a human-readable string. It properly handles singular/plural units and can format durations with different time components.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nformatDuration(duration, [options])\n```\n\n----------------------------------------\n\nTITLE: Basic FP Usage with date-fns\nDESCRIPTION: Demonstrates basic usage of FP functions from date-fns including currying, formatting with options, and array operations. Shows how to use addYears and formatWithOptions with locale support.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/fp.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addYears, formatWithOptions } from \"date-fns/fp\";\nimport { eo } from \"date-fns/locale\";\nimport toUpper from \"lodash/fp/toUpper\"; // 'date-fns/fp' is compatible with 'lodash/fp'!\n\n// If FP function has not received enough arguments, it returns another function\nconst addFiveYears = addYears(5);\n\n// Several arguments can be curried at once\nconst dateToString = formatWithOptions({ locale: eo }, \"d MMMM yyyy\");\n\nconst dates = [\n  new Date(2017, 0 /* Jan */, 1),\n  new Date(2017, 1 /* Feb */, 11),\n  new Date(2017, 6 /* Jul */, 2),\n];\n\nconst formattedDates = dates.map(addFiveYears).map(dateToString).map(toUpper);\n//=> ['1 JANUARO 2022', '11 FEBRUARO 2022', '2 JULIO 2022']\n```\n\n----------------------------------------\n\nTITLE: Basic date-fns CDN Usage\nDESCRIPTION: Shows how to load the main date-fns module via CDN and use basic date manipulation functions.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/cdn.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/date-fns@3.6.0/cdn.min.js\"></script>\n<script>\n  dateFns.addDays(new Date(2014, 1, 11), 10);\n  //=> Tue Feb 21 2014 00:00:00\n</script>\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Distances with date-fns in JavaScript\nDESCRIPTION: This code snippet illustrates the expected outputs when calculating the distance between a fixed date (January 1st, 2000) and various date inputs. It demonstrates how to include seconds and suffixes in the results.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-CA/snapshot.md#2025-04-17_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n| Date                     | Result             | `includeSeconds: true` | `addSuffix: true`      |\n| ------------------------ | ------------------ | ---------------------- | ---------------------- |\n| 2006-01-01T00:00:00.000Z | about 6 years      | about 6 years          | in about 6 years       |\n| 2005-01-01T00:00:00.000Z | about 5 years      | about 5 years          | in about 5 years       |\n| 2004-01-01T00:00:00.000Z | about 4 years      | about 4 years          | in about 4 years       |\n| 2003-01-01T00:00:00.000Z | about 3 years      | about 3 years          | in about 3 years       |\n| 2002-01-01T00:00:00.000Z | about 2 years      | about 2 years          | in about 2 years       |\n| 2001-06-01T00:00:00.000Z | over a year        | over a year            | in over a year         |\n| 2001-02-01T00:00:00.000Z | about a year       | about a year           | in about a year        |\n| 2001-01-01T00:00:00.000Z | about a year       | about a year           | in about a year        |\n| 2000-06-01T00:00:00.000Z | 5 months           | 5 months               | in 5 months            |\n| 2000-03-01T00:00:00.000Z | 2 months           | 2 months               | in 2 months            |\n| 2000-02-01T00:00:00.000Z | about a month      | about a month          | in about a month       |\n| 2000-01-15T00:00:00.000Z | 14 days            | 14 days                | in 14 days             |\n| 2000-01-02T00:00:00.000Z | a day              | a day                  | in a day               |\n| 2000-01-01T06:00:00.000Z | about 6 hours      | about 6 hours          | in about 6 hours       |\n| 2000-01-01T01:00:00.000Z | about an hour      | about an hour          | in about an hour       |\n| 2000-01-01T00:45:00.000Z | about an hour      | about an hour          | in about an hour       |\n| 2000-01-01T00:30:00.000Z | 30 minutes         | 30 minutes             | in 30 minutes          |\n| 2000-01-01T00:15:00.000Z | 15 minutes         | 15 minutes             | in 15 minutes          |\n| 2000-01-01T00:01:00.000Z | a minute           | a minute               | in a minute            |\n| 2000-01-01T00:00:25.000Z | less than a minute | half a minute          | in less than a minute  |\n| 2000-01-01T00:00:15.000Z | less than a minute | less than 20 seconds   | in less than a minute  |\n| 2000-01-01T00:00:05.000Z | less than a minute | less than 10 seconds   | in less than a minute  |\n| 2000-01-01T00:00:00.000Z | less than a minute | less than 5 seconds    | less than a minute ago |\n| 1999-12-31T23:59:55.000Z | less than a minute | less than 10 seconds   | less than a minute ago |\n| 1999-12-31T23:59:45.000Z | less than a minute | less than 20 seconds   | less than a minute ago |\n| 1999-12-31T23:59:35.000Z | less than a minute | half a minute          | less than a minute ago |\n| 1999-12-31T23:59:00.000Z | a minute           | a minute               | a minute ago           |\n| 1999-12-31T23:45:00.000Z | 15 minutes         | 15 minutes             | 15 minutes ago         |\n| 1999-12-31T23:30:00.000Z | 30 minutes         | 30 minutes             | 30 minutes ago         |\n| 1999-12-31T23:15:00.000Z | about an hour      | about an hour          | about an hour ago      |\n| 1999-12-31T23:00:00.000Z | about an hour      | about an hour          | about an hour ago      |\n| 1999-12-31T18:00:00.000Z | about 6 hours      | about 6 hours          | about 6 hours ago      |\n| 1999-12-30T00:00:00.000Z | 2 days             | 2 days                 | 2 days ago             |\n| 1999-12-15T00:00:00.000Z | 17 days            | 17 days                | 17 days ago            |\n| 1999-12-01T00:00:00.000Z | about a month      | about a month          | about a month ago      |\n| 1999-11-01T00:00:00.000Z | 2 months           | 2 months               | 2 months ago           |\n| 1999-06-01T00:00:00.000Z | 7 months           | 7 months               | 7 months ago           |\n| 1999-01-01T00:00:00.000Z | about a year       | about a year           | about a year ago       |\n| 1998-12-01T00:00:00.000Z | about a year       | about a year           | about a year ago       |\n| 1998-06-01T00:00:00.000Z | over a year        | over a year            | over a year ago        |\n| 1998-01-01T00:00:00.000Z | about 2 years      | about 2 years          | about 2 years ago      |\n| 1997-01-01T00:00:00.000Z | about 3 years      | about 3 years          | about 3 years ago      |\n| 1996-01-01T00:00:00.000Z | about 4 years      | about 4 years          | about 4 years ago      |\n| 1995-01-01T00:00:00.000Z | about 5 years      | about 5 years          | about 5 years ago      |\n| 1994-01-01T00:00:00.000Z | about 6 years      | about 6 years          | about 6 years ago      |\n```\n\n----------------------------------------\n\nTITLE: Date Format Token Examples in Markdown Table\nDESCRIPTION: Reference table showing date formatting tokens and their output patterns for both format and parse functions. Demonstrates formatting for calendar years, week-numbering years, quarters, and months with various token patterns.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nb/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                      | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ---------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987.                                                | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5.                                                   | 0005-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Locales with date-fns CDN\nDESCRIPTION: Demonstrates loading date-fns core and multiple locale files via CDN and using them for relative date formatting in different languages.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/cdn.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/date-fns@3.6.0/cdn.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/date-fns@3.6.0/locale/es/cdn.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/date-fns@3.6.0/locale/ru/cdn.min.js\"></script>\n<script>\n  dateFns.formatRelative(dateFns.subDays(new Date(), 3), new Date());\n  //=> \"last Friday at 7:26 p.m.\"\n\n  dateFns.formatRelative(dateFns.subDays(new Date(), 3), new Date(), {\n    locale: dateFns.locale.es,\n  });\n  //=> \"el viernes pasado a las 19:26\"\n\n  dateFns.formatRelative(dateFns.subDays(new Date(), 3), new Date(), {\n    locale: dateFns.locale.ru,\n  });\n  //=> \"в прошлую пятницу в 19:26\"\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using 'in' Option for Time Zone Context\nDESCRIPTION: Demonstrates how to use the 'in' option to explicitly specify the time zone context for calculations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/timeZones.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tz } from \"@date-fns/tz\";\n\n// Will calculate in Asia/Singapore\ndifferenceInBusinessDays(laterDate, earlierDate);\n//=> 262\n\n// Will normalize to America/Los_Angeles\ndifferenceInBusinessDays(laterDate, earlierDate, {\n  in: tz(\"America/Los_Angeles\"),\n});\n//=> 261\n```\n\n----------------------------------------\n\nTITLE: Formatting with Custom Localized Date and Time - JavaScript\nDESCRIPTION: This snippet customizes date formatting to display a combination of day, month names, and time in Portuguese. It processes standard date strings and alters the output to fit local user preferences. This is particularly useful for applications catering to Portuguese-speaking users.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/pt-BR/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n|                                 | PPpp         | 1987-01-11T12:13:14.015Z | 11 jan 1987, 12:13:14                                       | 1987-01-11T12:13:14.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Documentation Table\nDESCRIPTION: A markdown table showing various date formatting patterns and their outputs. Includes examples for hours (0-23, 0-11, 1-24), minutes, seconds, and different levels of localized date formatting (P, PP, PPP, PPPP).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/gd/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Hour [0-23]                     | Ho           | 2019-02-11T11:13:14.015Z | 11mh                                                            | 2019-02-11T11:00:00.000Z |\n|                                 |              | 2019-02-11T23:13:14.015Z | 23mh                                                            | 2019-02-11T23:00:00.000Z |\n| Hour [0-11]                     | Ko           | 2019-02-11T11:13:14.015Z | 11mh                                                            | 2019-02-11T11:00:00.000Z |\n|                                 |              | 2019-02-11T23:13:14.015Z | 11mh                                                            | 2019-02-11T23:00:00.000Z |\n| Hour [1-24]                     | ko           | 2019-02-11T11:13:14.015Z | 11mh                                                            | 2019-02-11T11:00:00.000Z |\n|                                 |              | 2019-02-11T23:13:14.015Z | 23mh                                                            | 2019-02-11T23:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Time Zone String Representation\nDESCRIPTION: Illustrates how dates are represented when converted between different time zones using the withTimeZone method.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/timeZones.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlaterDate.withTimeZone(\"Asia/Singapore\").toString();\n//=> 'Wed Jan 01 2025 00:00:00 GMT+0800 (Singapore Standard Time)'\nearlyDate.withTimeZone(\"Asia/Singapore\").toString();\n//=> 'Mon Jan 01 2024 13:00:00 GMT+0800 (Singapore Standard Time)'\n\nlaterDate.withTimeZone(\"America/New_York\").toString();\n//=> 'Tue Dec 31 2024 11:00:00 GMT-0500 (Eastern Standard Time)'\nearlyDate.withTimeZone(\"America/New_York\").toString();\n//=> 'Mon Jan 01 2024 00:00:00 GMT-0500 (Eastern Standard Time)'\n```\n\n----------------------------------------\n\nTITLE: Implementing Quarter Localization in JavaScript for date-fns\nDESCRIPTION: This snippet demonstrates how to localize quarters using the buildLocalizeFn function. It includes narrow, abbreviated, and wide formats for quarters, and uses an argumentCallback to adjust the index.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\n\nvar quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\nvar localize = {\n  // ...\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1;\n    },\n  }),\n  // ...\n};\n\nexport default localize;\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Distance Calculations\nDESCRIPTION: Tests the formatDistance method with different temporal distances, demonstrating how the function calculates and presents time differences between dates. Includes options for including seconds and adding suffixes.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-GB/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nformatDistance(baseDate, comparisonDate, options)\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Time Formats in JavaScript for date-fns\nDESCRIPTION: This snippet demonstrates how to implement long time formats using the buildFormatLongFn function. It includes full, long, medium, and short time formats for the en-US locale.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\n\nvar timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nvar formatLong = {\n  // ...\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n  // ...\n};\n\nexport default formatLong;\n```\n\n----------------------------------------\n\nTITLE: Implementing ordinalNumber Function for en-US Locale in date-fns\nDESCRIPTION: This snippet demonstrates how to implement the ordinalNumber function for the en-US locale in date-fns. It handles the conversion of numbers to their ordinal form (e.g., 1st, 2nd, 3rd).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In `en-US` locale:\nfunction ordinalNumber(dirtyNumber, dirtyOptions) {\n  var number = Number(dirtyNumber);\n\n  var rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Time Zones and Formatting with GMT Offset - JavaScript\nDESCRIPTION: This snippet manages date-time representation with GMT offsets as part of the formatted output. The function takes ISO date strings, processes them, and provides outputs adjusted for GMT time zones. Outputs include the date and time formatted in GMT, catering to applications that operate across different time zones.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/pt-BR/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n|                                 |              | 1987-01-11T12:13:14.015Z | 12:13:14 GMT+0                                              | Errored                  |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating `formatRelative` in date-fns\nDESCRIPTION: This section illustrates the behavior of the `formatRelative` function in date-fns. The examples showcase how dates are formatted relative to January 1st, 2000, showing outputs such as 'today', 'yesterday', and specific dates.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IE/snapshot.md#2025-04-17_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Implementing Long DateTime Formats in JavaScript for date-fns\nDESCRIPTION: This snippet shows how to implement long date and time combination formats using the buildFormatLongFn function. It includes full, long, medium, and short datetime formats for the en-US locale.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\n\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nvar formatLong = {\n  // ...\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n\nexport default formatLong;\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Date Formats in JavaScript for date-fns\nDESCRIPTION: This snippet shows how to implement long date formats using the buildFormatLongFn function. It includes full, long, medium, and short date formats for the en-US locale.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\n\nvar dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n  // ...\n};\n\nexport default formatLong;\n```\n\n----------------------------------------\n\nTITLE: Implementing Month Localization in Spanish for date-fns\nDESCRIPTION: This snippet demonstrates how to localize months in Spanish, showcasing the difference in capitalization compared to English. It includes narrow, abbreviated, and wide formats for months.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar monthValues = {\n  narrow: [\"E\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"ene.\",\n    \"feb.\",\n    \"mar.\",\n    \"abr.\",\n    \"may.\",\n    \"jun.\",\n    \"jul.\",\n    \"ago.\",\n    \"sep.\",\n    \"oct.\",\n    \"nov.\",\n    \"dic.\",\n  ],\n  wide: [\n    \"enero\",\n    \"febrero\",\n    \"marzo\",\n    \"abril\",\n    \"mayo\",\n    \"junio\",\n    \"julio\",\n    \"agosto\",\n    \"septiembre\",\n    \"octubre\",\n    \"noviembre\",\n    \"diciembre\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Finnish Locale for date-fns in JavaScript\nDESCRIPTION: This code snippet defines the Finnish locale configuration for the date-fns library. It includes translations for months, days, relative time words, and ordinal number functions specific to the Finnish language.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fi/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport formatDistance from '../_lib/formatDistance/index.js'\nimport formatLong from '../_lib/formatLong/index.js'\nimport formatRelative from '../_lib/formatRelative/index.js'\nimport localize from '../_lib/localize/index.js'\nimport match from '../_lib/match/index.js'\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary Finnish locale.\n * @language Finnish\n * @iso-639-2 fin\n * @author Pyry-Samuli Lahti [@Pyppe]{@link https://github.com/Pyppe}\n * @author Edo Rivai [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}\n * @author Samu Juvonen [@sjuvonen]{@link https://github.com/sjuvonen}\n */\nvar locale = {\n  code: 'fi',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 4\n  }\n}\n\nexport default locale\n```\n\n----------------------------------------\n\nTITLE: Lodash Flow Pattern\nDESCRIPTION: Shows how to use lodash's flow function for natural-order function composition. Functions are composed in the same order they will be executed.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/fp.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport flow from \"lodash/fp/flow\";\n\nconst formattedDates = dates.map(flow(addFiveYears, dateToString, toUpper));\n```\n\n----------------------------------------\n\nTITLE: Defining Norwegian Nynorsk Locale for date-fns in JavaScript\nDESCRIPTION: This code snippet defines the Norwegian Nynorsk (nn) locale for use with the date-fns library. It includes translations for months, days of the week, and various date-related terms and formats.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nn/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst locale = {\n  code: 'nn',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 4\n  }\n}\n\nexport default locale\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Date Formatting and Parsing with date-fns\nDESCRIPTION: This markdown table provides examples of how different date components are formatted and parsed using date-fns. It includes various token strings for calendar year, week-numbering year, quarter, and month, showing the format and parse results for different date inputs.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-US/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                         | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ------------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987th                                                  | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5th                                                     | 0005-01-01T00:00:00.000Z |\n| Local week-numbering year       | Yo           | 1987-02-11T12:13:14.015Z | 1987th                                                  | 1986-12-28T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5th                                                     | 0004-12-26T00:00:00.000Z |\n| Quarter (formatting)            | Qo           | 2019-01-01T12:13:14.015Z | 1st                                                     | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2nd                                                     | 2019-04-01T00:00:00.000Z |\n|                                 | QQQ          | 2019-01-01T12:13:14.015Z | Q1                                                      | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | Q2                                                      | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQ         | 2019-01-01T12:13:14.015Z | 1st quarter                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2nd quarter                                             | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQQ        | 2019-01-01T12:13:14.015Z | 1                                                       | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2                                                       | 2019-04-01T00:00:00.000Z |\n| Quarter (stand-alone)           | qo           | 2019-01-01T12:13:14.015Z | 1st                                                     | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2nd                                                     | 2019-04-01T00:00:00.000Z |\n|                                 | qqq          | 2019-01-01T12:13:14.015Z | Q1                                                      | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | Q2                                                      | 2019-04-01T00:00:00.000Z |\n|                                 | qqqq         | 2019-01-01T12:13:14.015Z | 1st quarter                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2nd quarter                                             | 2019-04-01T00:00:00.000Z |\n| Month (formatting)              | Mo           | 2019-01-11T12:13:14.015Z | 1st                                                     | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2nd                                                     | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | 3rd                                                     | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | 4th                                                     | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | 5th                                                     | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | 6th                                                     | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | 7th                                                     | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | 8th                                                     | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | 9th                                                     | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | 10th                                                    | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | 11th                                                    | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | 12th                                                    | 2019-12-01T00:00:00.000Z |\n|                                 | MMM          | 2019-01-11T12:13:14.015Z | Jan                                                     | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | Feb                                                     | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | Mar                                                     | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | Apr                                                     | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | May                                                     | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | Jun                                                     | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | Jul                                                     | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | Aug                                                     | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | Sep                                                     | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | Oct                                                     | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | Nov                                                     | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | Dec                                                     | 2019-12-01T00:00:00.000Z |\n|                                 | MMMM         | 2019-01-11T12:13:14.015Z | January                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | February                                                | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | March                                                   | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | April                                                   | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | May                                                     | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | June                                                    | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | July                                                    | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | August                                                  | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | September                                               | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | October                                                 | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | November                                                | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | December                                                | 2019-12-01T00:00:00.000Z |\n|                                 | MMMMM        | 2019-01-11T12:13:14.015Z | J                                                       | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | F                                                       | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | M                                                       | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | A                                                       | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | M                                                       | 2019-03-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Examples in date-fns\nDESCRIPTION: Reference table showing date formatting patterns and their outputs for different date inputs. Includes stand-alone month formatting (Lo, LLL, LLLL, LLLLL), local week of year (wo), ISO week of year (Io), and day of month (do) patterns.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-US/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Month (stand-alone)             | Lo           | 2019-01-11T12:13:14.015Z | 1st                                                     | 2019-01-01T00:00:00.000Z |\n|                                 | LLL          | 2019-01-11T12:13:14.015Z | Jan                                                     | 2019-01-01T00:00:00.000Z |\n|                                 | LLLL         | 2019-01-11T12:13:14.015Z | January                                                 | 2019-01-01T00:00:00.000Z |\n|                                 | LLLLL        | 2019-01-11T12:13:14.015Z | J                                                       | 2019-01-01T00:00:00.000Z |\n| Local week of year              | wo           | 2019-01-01T12:13:14.015Z | 1st                                                     | 2018-12-30T00:00:00.000Z |\n| ISO week of year                | Io           | 2019-01-01T12:13:14.015Z | 1st                                                     | 2018-12-31T00:00:00.000Z |\n| Day of month                    | do           | 2019-02-01T12:13:14.015Z | 1st                                                     | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Basic Date Formatting Pattern Examples\nDESCRIPTION: Table showing the results of applying different date formatting patterns to various input dates. Demonstrates the output of P, PP, PPP, PPPP, p, and pp format strings.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-CA/snapshot.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 1987-03-11T12:13:14.015Z | 1987-03-11                                              | 1987-03-11T00:00:00.000Z |\n|                                 |              | 1987-04-11T12:13:14.015Z | 1987-04-11                                              | 1987-04-11T00:00:00.000Z |\n|                                 |              | 1453-05-29T23:59:59.999Z | 1453-05-29                                              | 1453-05-29T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Implementing Month Localization in JavaScript for date-fns\nDESCRIPTION: This snippet shows how to localize months using the buildLocalizeFn function. It includes narrow, abbreviated, and wide formats for months in English, with a note on capitalization for other languages.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\n\nvar monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nvar localize = {\n  // ...\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n  // ...\n};\n\nexport default localize;\n```\n\n----------------------------------------\n\nTITLE: Formatting and Analyzing Date Distances using date-fns in JavaScript\nDESCRIPTION: Demonstrates the use of the date-fns library to transform and analyze dates. It covers date formatting and calculating human-readable time distances, such as 'about 1 year' from past or future dates. This requires the date-fns library as a dependency. Inputs include ISO 8601 date strings, and outputs are readable strings indicating the relative time distance.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst formatDistanceExample = () => { \n  // Example using date-fns formatDistance \n  const now = new Date('2000-01-01T00:00:00.000Z'); \n  const dates = [ \n    '2006-01-01T00:00:00.000Z', '2005-01-01T00:00:00.000Z', '2004-01-01T00:00:00.000Z', \n    '2003-01-01T00:00:00.000Z', '2002-01-01T00:00:00.000Z', '2001-06-01T00:00:00.000Z' \n  ]; \n  const results = dates.map(date => ({ \n    date, \n    result: formatDistance(new Date(date), now, { includeSeconds: true, addSuffix: true }) \n  })); \n  console.log(results);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Day Period Localization in JavaScript for date-fns\nDESCRIPTION: This snippet demonstrates how to localize day periods using the buildLocalizeFn function. It includes narrow, abbreviated, and wide formats for various day periods in English.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\n\nvar dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nvar localize = {\n  // ...\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n  }),\n};\n\nexport default localize;\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Token Examples - Markdown Table\nDESCRIPTION: A markdown table demonstrating various date formatting tokens and their corresponding outputs when used with format() and parse() functions. Shows examples for calendar years, quarters, and months in different formats including ordinal, abbreviated, and full names.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fi/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                           | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | --------------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987.                                                     | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5.                                                        | 0005-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Examples in French Locale\nDESCRIPTION: Examples of date formatting using different pattern tokens (p, pp, ppp, PPP, PPPP) showing French locale output for dates and times. Includes various formatting options from time-only to full date-time with weekday names.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr-CH/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n|                                 |              | 1987-03-11T12:13:14.015Z | 11 mars 1987                                    | 1987-03-11T00:00:00.000Z |\n|                                 |              | 1987-04-11T12:13:14.015Z | 11 avr. 1987                                    | 1987-04-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Defining English (en-IE) Locale for date-fns in JavaScript\nDESCRIPTION: This code snippet defines the locale object for English (en-IE) to be used with the date-fns library. It includes localized names for months, days, time units, and formatting patterns for dates and times.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IE/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst locale = {\n  code: 'en-IE',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 4\n  }\n}\n\nexport default locale\n```\n\n----------------------------------------\n\nTITLE: Date-Time Format Test Table in Markdown\nDESCRIPTION: Table showing test cases for different date formatting patterns including basic time (p), time with timezone (ppp/pppp), and combined date-time formats (Pp/PPpp/PPPppp). Each row shows input timestamp, format pattern, and expected output.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-CA/snapshot.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 1987-04-11T12:13:14.015Z | 12:13:14 PM                                             | 1987-04-11T12:13:14.000Z |\n|                                 |              | 1453-05-29T23:59:59.999Z | 11:59:59 PM                                             | 1453-05-29T23:59:59.000Z |\n```\n\n----------------------------------------\n\nTITLE: Hour Token Variations\nDESCRIPTION: Illustrates different hour representation tokens with specific numeric ranges and formatting behaviors, showing how hours can be displayed in 12-hour and 24-hour formats\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/zh-CN/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| ho | Hour in 1-12 range\n| Ho | Hour in 0-23 range\n| Ko | Hour in 0-11 range\n| ko | Hour in 1-24 range\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Token Examples in date-fns\nDESCRIPTION: Reference table demonstrating various date formatting tokens and their corresponding outputs when used with format() and parse() functions. Shows formatting patterns for years, quarters, and months with different token variations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nn/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                      | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ---------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987.                                                | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5.                                                   | 0005-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Using REPL for Testing date-fns Functions\nDESCRIPTION: Instructions for using tsx to test date-fns functions in a REPL environment, including how to require and use individual functions.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsx\n```\n\nLANGUAGE: javascript\nCODE:\n```\n> const toDate = require('./src/toDate').default\nundefined\n> toDate(1392098430000).toString()\n'Tue Feb 11 2014 14:00:30 GMT+0800 (Singapore Standard Time)'\n>\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Pattern Tests - date-fns\nDESCRIPTION: Test cases demonstrating different date formatting patterns and their outputs. The table shows pattern identifiers (a, b, B, etc.), sample input timestamps, expected formatted outputs, and reference timestamps. Tests cover AM/PM markers, flexible day periods, hours (12/24), minutes, seconds and localized dates.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/et/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n|                                 | aaaaa        | 2019-02-11T11:13:14.015Z | AM                                                   | 2019-02-11T00:00:00.000Z |\n|                                 |              | 2019-02-11T14:13:14.015Z | PM                                                   | 2019-02-11T12:00:00.000Z |\n|                                 |              | 2019-02-11T19:13:14.015Z | PM                                                   | 2019-02-11T12:00:00.000Z |\n|                                 |              | 2019-02-11T02:13:14.015Z | AM                                                   | 2019-02-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Defining Kannada Locale Configuration for date-fns in JavaScript\nDESCRIPTION: This code snippet defines the Kannada locale configuration object for the date-fns library. It includes translations for months, days, ordinal numbers, and various date formats specific to the Kannada language.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/kn/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst locale = {\n  code: 'kn',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n}\n\nexport default locale\n```\n\n----------------------------------------\n\nTITLE: Defining Lithuanian Locale for date-fns in JavaScript\nDESCRIPTION: This code snippet exports an object containing Lithuanian locale settings for the date-fns library. It includes translations for months, days, time of day, and relative time expressions, as well as formatting patterns for dates and times.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lt/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst locale = {\n  code: 'lt',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 4\n  }\n}\n\nexport default locale\n```\n\n----------------------------------------\n\nTITLE: Exporting Georgian Locale Configuration for date-fns\nDESCRIPTION: Defines and exports the Georgian (ka) locale configuration object for use with date-fns. It includes settings for various date and time formatting options specific to the Georgian language and culture.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ka/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport formatDistance from '../_lib/formatDistance/index.js'\nimport formatLong from '../_lib/formatLong/index.js'\nimport formatRelative from '../_lib/formatRelative/index.js'\nimport localize from '../_lib/localize/index.js'\nimport match from '../_lib/match/index.js'\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary Georgian locale.\n * @language Georgian\n * @iso-639-2 geo\n * @author Lado Lomidze [@Landish]{@link https://github.com/Landish}\n */\nvar locale = {\n  code: 'ka',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1,\n  },\n}\n\nexport default locale\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Examples\nDESCRIPTION: Table showing date formatting patterns and their corresponding outputs. Includes examples for short dates (P), medium dates (PP), long dates (PPP), full dates (PPPP), and time formats (p, pp). Shows input dates, pattern, formatted output and normalized date.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/da/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n|                                 |              | 1987-07-11T12:13:14.015Z | 11/07/1987                                           | 1987-07-11T00:00:00.000Z |\n|                                 |              | 1987-08-11T12:13:14.015Z | 11/08/1987                                           | 1987-08-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Relative Date Formatting in Icelandic\nDESCRIPTION: Generates human-readable relative date representations for different temporal contexts, including past and future dates\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/is/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## `formatRelative`\n```\n\n----------------------------------------\n\nTITLE: Localized Date Formatting - JavaScript\nDESCRIPTION: This snippet formats dates in localized styles suitable for different cultures. It transforms date strings into formats that include localized month names and day structures. Inputs are standard ISO date strings, and outputs vary based on the specified localization, enhancing usability for international applications.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/pt-BR/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n| Combination of date and time    | Pp           | 1987-01-11T12:13:14.015Z | 11/01/1987, 12:13                                           | 1987-01-11T12:13:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Defining Arabic Locale Configuration for date-fns in JavaScript\nDESCRIPTION: This code snippet defines the locale object for Modern Standard Arabic in the date-fns library. It includes translations for months, days, various time-related terms, and formatting options specific to Arabic language and culture.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ar/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar localeAr = {\n  code: 'ar',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 6 /* Saturday */,\n    firstWeekContainsDate: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating `formatDuration` in date-fns\nDESCRIPTION: This section provides examples of how the `formatDuration` function in date-fns works. It showcases the formatting of different duration objects (years, months, weeks, days, hours, minutes, seconds) and their respective outputs.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IE/snapshot.md#2025-04-17_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Demonstrating `formatDistanceStrict` in date-fns\nDESCRIPTION: This section provides examples of how the `formatDistanceStrict` function works in date-fns. It shows how different dates are formatted relative to a fixed date (January 1st, 2000) with and without the `addSuffix` option, and also with a forced unit.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IE/snapshot.md#2025-04-17_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Date-Time Formatting Test Table\nDESCRIPTION: Table showing test cases for date formatting patterns including simple time (p), time with timezone (ppp/pppp), and combined date-time formats (Pp/PPpp/PPPppp). Each row shows input timestamp, formatting result, and expected output.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IN/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 1987-09-11T12:13:14.015Z | 12:13:14 PM                                          | 1987-09-11T12:13:14.000Z |\n|                                 |              | 1987-10-11T12:13:14.015Z | 12:13:14 PM                                          | 1987-10-11T12:13:14.000Z |\n|                                 |              | 1987-11-11T12:13:14.015Z | 12:13:14 PM                                          | 1987-11-11T12:13:14.000Z |\n```\n\n----------------------------------------\n\nTITLE: Calculating Relative Time Formatting with formatDistance\nDESCRIPTION: A utility function in date-fns that generates human-readable relative time descriptions between two dates, supporting options like includeSeconds and addSuffix\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/pt/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nformatDistance(date, baseDate, options)\n```\n\n----------------------------------------\n\nTITLE: Formatting Durations with date-fns in JavaScript\nDESCRIPTION: The formatDuration function translates duration objects into human-readable strings, such as '2 months' or '3 days.' It takes an object outlining the duration in various units (years, months, weeks, etc.) and outputs the formatted string representation. The function relies on date-fns to ensure consistent formatting.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/pl/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Sample output for formatDuration\n// Duration objects translate to formatted strings showing years, months, days, etc.\n```\n\n----------------------------------------\n\nTITLE: Configuring Japanese Locale for date-fns\nDESCRIPTION: This code snippet exports the Japanese locale configuration for date-fns. It includes settings for ordinal numbers, weekday and month names, time of day, and various date formats specific to the Japanese language.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ja/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar formatRelativeLocale = {\n  lastWeek: '先週のeeeeのp',\n  yesterday: '昨日のp',\n  today: '今日のp',\n  tomorrow: '明日のp',\n  nextWeek: '翌週のeeeeのp',\n  other: 'P'\n}\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token]\n}\n\nvar eraValues = {\n  narrow: ['BC', 'AC'],\n  abbreviated: ['紀元前', '西暦'],\n  wide: ['紀元前', '西暦']\n}\n\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['第1四半期', '第2四半期', '第3四半期', '第4四半期']\n}\n\nvar monthValues = {\n  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n  abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],\n  wide: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']\n}\n\nvar dayValues = {\n  narrow: ['日', '月', '火', '水', '木', '金', '土'],\n  short: ['日', '月', '火', '水', '木', '金', '土'],\n  abbreviated: ['日', '月', '火', '水', '木', '金', '土'],\n  wide: ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日']\n}\n\nvar dayPeriodValues = {\n  narrow: {\n    am: '午前',\n    pm: '午後',\n    midnight: '深夜',\n    noon: '正午',\n    morning: '朝',\n    afternoon: '午後',\n    evening: '夜',\n    night: '深夜'\n  },\n  abbreviated: {\n    am: '午前',\n    pm: '午後',\n    midnight: '深夜',\n    noon: '正午',\n    morning: '朝',\n    afternoon: '午後',\n    evening: '夜',\n    night: '深夜'\n  },\n  wide: {\n    am: '午前',\n    pm: '午後',\n    midnight: '深夜',\n    noon: '正午',\n    morning: '朝',\n    afternoon: '午後',\n    evening: '夜',\n    night: '深夜'\n  }\n}\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: '午前',\n    pm: '午後',\n    midnight: '深夜',\n    noon: '正午',\n    morning: '朝',\n    afternoon: '午後',\n    evening: '夜',\n    night: '深夜'\n  },\n  abbreviated: {\n    am: '午前',\n    pm: '午後',\n    midnight: '深夜',\n    noon: '正午',\n    morning: '朝',\n    afternoon: '午後',\n    evening: '夜',\n    night: '深夜'\n  },\n  wide: {\n    am: '午前',\n    pm: '午後',\n    midnight: '深夜',\n    noon: '正午',\n    morning: '朝',\n    afternoon: '午後',\n    evening: '夜',\n    night: '深夜'\n  }\n}\n\nvar ordinalNumber = function (dirtyNumber, options) {\n  var number = Number(dirtyNumber)\n  var unit = options === null || options === void 0 ? void 0 : options.unit\n\n  switch (unit) {\n    case 'year':\n      return \"\" + number + \"\\u5E74\"\n    case 'quarter':\n      return \"\\u7B2C\" + number + \"\\u56DB\\u534A\\u671F\"\n    case 'month':\n      return \"\" + number + \"\\u6708\"\n    case 'week':\n      return \"\\u7B2C\" + number + \"\\u9031\"\n    case 'date':\n      return \"\" + number + \"\\u65E5\"\n    case 'hour':\n      return \"\" + number + \"\\u6642\"\n    case 'minute':\n      return \"\" + number + \"\\u5206\"\n    case 'second':\n      return \"\" + number + \"\\u79D2\"\n    default:\n      return \"\" + number\n  }\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n}\n\nexport default localize\n```\n\n----------------------------------------\n\nTITLE: Defining Indonesian Locale Configuration for date-fns\nDESCRIPTION: This code snippet defines the Indonesian locale configuration object for use with the date-fns library. It includes settings for months, days, time of day, and other date-related formatting options specific to the Indonesian language.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/id/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar formatRelativeLocale = {\n  lastWeek: \"'hari' eeee 'lalu pukul' p\",\n  yesterday: \"'kemarin pukul' p\",\n  today: \"'hari ini pukul' p\",\n  tomorrow: \"'besok pukul' p\",\n  nextWeek: \"eeee 'pukul' p\",\n  other: 'P'\n}\n\nvar locale = {\n  code: 'id',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: function (token, date, baseDate, options) {\n    return formatRelativeLocale[token]\n  },\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1\n  }\n}\n\nmodule.exports = locale\n```\n\n----------------------------------------\n\nTITLE: Calculating Human-Readable Date Distance - JavaScript\nDESCRIPTION: The `formatDistance` function calculates the distance between two dates and formats it as a human-readable string. It has options to include seconds and to add a suffix specifying whether the time is in the past or future.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/eo/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example data displaying the results of `formatDistance` */\n\n| Date                     | Result              | `includeSeconds: true` | `addSuffix: true`         |\n| ------------------------ | ------------------- | ---------------------- | ------------------------- |\n| 2006-01-01T00:00:00.000Z | proksimume 6 jaroj  | proksimume 6 jaroj     | post proksimume 6 jaroj   |\n| 2005-01-01T00:00:00.000Z | proksimume 5 jaroj  | proksimume 5 jaroj     | post proksimume 5 jaroj   |\n| 2004-01-01T00:00:00.000Z | proksimume 4 jaroj  | proksimume 4 jaroj     | post proksimume 4 jaroj   |\n| 2003-01-01T00:00:00.000Z | proksimume 3 jaroj  | proksimume 3 jaroj     | post proksimume 3 jaroj   |\n| 2002-01-01T00:00:00.000Z | proksimume 2 jaroj  | proksimume 2 jaroj     | post proksimume 2 jaroj   |\n| 2001-06-01T00:00:00.000Z | pli ol 1 jaro       | pli ol 1 jaro          | post pli ol 1 jaro        |\n| 2001-02-01T00:00:00.000Z | proksimume 1 jaro   | proksimume 1 jaro      | post proksimume 1 jaro    |\n| 2001-01-01T00:00:00.000Z | proksimume 1 jaro   | proksimume 1 jaro      | post proksimume 1 jaro    |\n// ... more examples ...\n```\n\n----------------------------------------\n\nTITLE: Long Localized Date Formatting in Latvian with date-fns\nDESCRIPTION: Examples of formatting dates in long localized formats using the 'P', 'PP', 'PPP', and 'PPPP' format specifiers in the Latvian locale. The examples demonstrate different levels of verbosity for date presentation throughout all months of the year.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lv/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Long localized date             | P            | 1987-01-11T12:13:14.015Z | 11.01.1987.                                                    | 1987-01-11T00:00:00.000Z |\n|                                 |              | 1987-02-11T12:13:14.015Z | 11.02.1987.                                                    | 1987-02-11T00:00:00.000Z |\n|                                 |              | 1987-03-11T12:13:14.015Z | 11.03.1987.                                                    | 1987-03-11T00:00:00.000Z |\n|                                 |              | 1987-04-11T12:13:14.015Z | 11.04.1987.                                                    | 1987-04-11T00:00:00.000Z |\n|                                 |              | 1453-05-29T23:59:59.999Z | 29.05.1453.                                                    | 1453-05-29T00:00:00.000Z |\n|                                 |              | 1987-06-11T12:13:14.015Z | 11.06.1987.                                                    | 1987-06-11T00:00:00.000Z |\n|                                 |              | 1987-07-11T12:13:14.015Z | 11.07.1987.                                                    | 1987-07-11T00:00:00.000Z |\n|                                 |              | 1987-08-11T12:13:14.015Z | 11.08.1987.                                                    | 1987-08-11T00:00:00.000Z |\n|                                 |              | 1987-09-11T12:13:14.015Z | 11.09.1987.                                                    | 1987-09-11T00:00:00.000Z |\n|                                 |              | 1987-10-11T12:13:14.015Z | 11.10.1987.                                                    | 1987-10-11T00:00:00.000Z |\n|                                 |              | 1987-11-11T12:13:14.015Z | 11.11.1987.                                                    | 1987-11-11T00:00:00.000Z |\n|                                 |              | 1987-12-11T12:13:14.015Z | 11.12.1987.                                                    | 1987-12-11T00:00:00.000Z |\n|                                 | PP           | 1987-01-11T12:13:14.015Z | 11.01.1987.                                                    | 1987-01-11T00:00:00.000Z |\n|                                 |              | 1987-02-11T12:13:14.015Z | 11.02.1987.                                                    | 1987-02-11T00:00:00.000Z |\n|                                 |              | 1987-03-11T12:13:14.015Z | 11.03.1987.                                                    | 1987-03-11T00:00:00.000Z |\n|                                 |              | 1987-04-11T12:13:14.015Z | 11.04.1987.                                                    | 1987-04-11T00:00:00.000Z |\n|                                 |              | 1453-05-29T23:59:59.999Z | 29.05.1453.                                                    | 1453-05-29T00:00:00.000Z |\n|                                 |              | 1987-06-11T12:13:14.015Z | 11.06.1987.                                                    | 1987-06-11T00:00:00.000Z |\n|                                 |              | 1987-07-11T12:13:14.015Z | 11.07.1987.                                                    | 1987-07-11T00:00:00.000Z |\n|                                 |              | 1987-08-11T12:13:14.015Z | 11.08.1987.                                                    | 1987-08-11T00:00:00.000Z |\n|                                 |              | 1987-09-11T12:13:14.015Z | 11.09.1987.                                                    | 1987-09-11T00:00:00.000Z |\n|                                 |              | 1987-10-11T12:13:14.015Z | 11.10.1987.                                                    | 1987-10-11T00:00:00.000Z |\n|                                 |              | 1987-11-11T12:13:14.015Z | 11.11.1987.                                                    | 1987-11-11T00:00:00.000Z |\n|                                 |              | 1987-12-11T12:13:14.015Z | 11.12.1987.                                                    | 1987-12-11T00:00:00.000Z |\n|                                 | PPP          | 1987-01-11T12:13:14.015Z | 1987. gada 11. janvārī                                         | 1987-01-11T00:00:00.000Z |\n|                                 |              | 1987-02-11T12:13:14.015Z | 1987. gada 11. februārī                                        | 1987-02-11T00:00:00.000Z |\n|                                 |              | 1987-03-11T12:13:14.015Z | 1987. gada 11. martā                                           | 1987-03-11T00:00:00.000Z |\n|                                 |              | 1987-04-11T12:13:14.015Z | 1987. gada 11. aprīlī                                          | 1987-04-11T00:00:00.000Z |\n|                                 |              | 1453-05-29T23:59:59.999Z | 1453. gada 29. maijā                                           | 1453-05-29T00:00:00.000Z |\n|                                 |              | 1987-06-11T12:13:14.015Z | 1987. gada 11. jūnijā                                          | 1987-06-11T00:00:00.000Z |\n|                                 |              | 1987-07-11T12:13:14.015Z | 1987. gada 11. jūlijā                                          | 1987-07-11T00:00:00.000Z |\n|                                 |              | 1987-08-11T12:13:14.015Z | 1987. gada 11. augustā                                         | 1987-08-11T00:00:00.000Z |\n|                                 |              | 1987-09-11T12:13:14.015Z | 1987. gada 11. septembrī                                       | 1987-09-11T00:00:00.000Z |\n|                                 |              | 1987-10-11T12:13:14.015Z | 1987. gada 11. oktobrī                                         | 1987-10-11T00:00:00.000Z |\n|                                 |              | 1987-11-11T12:13:14.015Z | 1987. gada 11. novembrī                                        | 1987-11-11T00:00:00.000Z |\n|                                 |              | 1987-12-11T12:13:14.015Z | 1987. gada 11. decembrī                                        | 1987-12-11T00:00:00.000Z |\n|                                 | PPPP         | 1987-01-11T12:13:14.015Z | svētdienā, 1987. gada 11. janvārī                              | 1987-01-11T00:00:00.000Z |\n|                                 |              | 1987-02-11T12:13:14.015Z | trešdienā, 1987. gada 11. februārī                             | 1987-02-11T00:00:00.000Z |\n|                                 |              | 1987-03-11T12:13:14.015Z | trešdienā, 1987. gada 11. martā                                | 1987-03-11T00:00:00.000Z |\n|                                 |              | 1987-04-11T12:13:14.015Z | sestdienā, 1987. gada 11. aprīlī                               | 1987-04-11T00:00:00.000Z |\n|                                 |              | 1453-05-29T23:59:59.999Z | svētdienā, 1453. gada 29. maijā                                | 1453-05-29T00:00:00.000Z |\n|                                 |              | 1987-06-11T12:13:14.015Z | ceturtdienā, 1987. gada 11. jūnijā                             | 1987-06-11T00:00:00.000Z |\n|                                 |              | 1987-07-11T12:13:14.015Z | sestdienā, 1987. gada 11. jūlijā                               | 1987-07-11T00:00:00.000Z |\n|                                 |              | 1987-08-11T12:13:14.015Z | otrdienā, 1987. gada 11. augustā                               | 1987-08-11T00:00:00.000Z |\n|                                 |              | 1987-09-11T12:13:14.015Z | piektdienā, 1987. gada 11. septembrī                           | 1987-09-11T00:00:00.000Z |\n|                                 |              | 1987-10-11T12:13:14.015Z | svētdienā, 1987. gada 11. oktobrī                              | 1987-10-11T00:00:00.000Z |\n|                                 |              | 1987-11-11T12:13:14.015Z | trešdienā, 1987. gada 11. novembrī                             | 1987-11-11T00:00:00.000Z |\n|                                 |              | 1987-12-11T12:13:14.015Z | piektdienā, 1987. gada 11. decembrī                            | 1987-12-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Formatting Strict Date Distances in French with date-fns\nDESCRIPTION: This code snippet demonstrates the use of formatDistanceStrict function from date-fns to format date distances in French. It includes examples with different options like addSuffix and forced unit (hour).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr-CA/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## `formatDistanceStrict`\n\nIf now is January 1st, 2000, 00:00.\n\n| Date                     | Result      | `addSuffix: true`  | With forced unit (i.e. `hour`) |\n| ------------------------ | ----------- | ------------------ | ------------------------------ |\n| 2006-01-01T00:00:00.000Z | 6 ans       | dans 6 ans         | 52608 heures                   |\n| 2005-01-01T00:00:00.000Z | 5 ans       | dans 5 ans         | 43848 heures                   |\n| 2004-01-01T00:00:00.000Z | 4 ans       | dans 4 ans         | 35064 heures                   |\n| 2003-01-01T00:00:00.000Z | 3 ans       | dans 3 ans         | 26304 heures                   |\n| 2002-01-01T00:00:00.000Z | 2 ans       | dans 2 ans         | 17544 heures                   |\n| 2001-06-01T00:00:00.000Z | 1 an        | dans 1 an          | 12408 heures                   |\n| 2001-02-01T00:00:00.000Z | 1 an        | dans 1 an          | 9528 heures                    |\n| 2001-01-01T00:00:00.000Z | 1 an        | dans 1 an          | 8784 heures                    |\n| 2000-06-01T00:00:00.000Z | 5 mois      | dans 5 mois        | 3648 heures                    |\n| 2000-03-01T00:00:00.000Z | 2 mois      | dans 2 mois        | 1440 heures                    |\n| 2000-02-01T00:00:00.000Z | 1 mois      | dans 1 mois        | 744 heures                     |\n| 2000-01-15T00:00:00.000Z | 14 jours    | dans 14 jours      | 336 heures                     |\n| 2000-01-02T00:00:00.000Z | 1 jour      | dans 1 jour        | 24 heures                      |\n| 2000-01-01T06:00:00.000Z | 6 heures    | dans 6 heures      | 6 heures                       |\n| 2000-01-01T01:00:00.000Z | 1 heure     | dans 1 heure       | 1 heure                        |\n| 2000-01-01T00:45:00.000Z | 45 minutes  | dans 45 minutes    | 1 heure                        |\n| 2000-01-01T00:30:00.000Z | 30 minutes  | dans 30 minutes    | 1 heure                        |\n| 2000-01-01T00:15:00.000Z | 15 minutes  | dans 15 minutes    | 0 heures                       |\n| 2000-01-01T00:01:00.000Z | 1 minute    | dans 1 minute      | 0 heures                       |\n| 2000-01-01T00:00:25.000Z | 25 secondes | dans 25 secondes   | 0 heures                       |\n| 2000-01-01T00:00:15.000Z | 15 secondes | dans 15 secondes   | 0 heures                       |\n| 2000-01-01T00:00:05.000Z | 5 secondes  | dans 5 secondes    | 0 heures                       |\n| 2000-01-01T00:00:00.000Z | 0 secondes  | il y a 0 secondes  | 0 heures                       |\n| 1999-12-31T23:59:55.000Z | 5 secondes  | il y a 5 secondes  | 0 heures                       |\n| 1999-12-31T23:59:45.000Z | 15 secondes | il y a 15 secondes | 0 heures                       |\n| 1999-12-31T23:59:35.000Z | 25 secondes | il y a 25 secondes | 0 heures                       |\n| 1999-12-31T23:59:00.000Z | 1 minute    | il y a 1 minute    | 0 heures                       |\n| 1999-12-31T23:45:00.000Z | 15 minutes  | il y a 15 minutes  | 0 heures                       |\n| 1999-12-31T23:30:00.000Z | 30 minutes  | il y a 30 minutes  | 1 heure                        |\n| 1999-12-31T23:15:00.000Z | 45 minutes  | il y a 45 minutes  | 1 heure                        |\n| 1999-12-31T23:00:00.000Z | 1 heure     | il y a 1 heure     | 1 heure                        |\n| 1999-12-31T18:00:00.000Z | 6 heures    | il y a 6 heures    | 6 heures                       |\n| 1999-12-30T00:00:00.000Z | 2 jours     | il y a 2 jours     | 48 heures                      |\n| 1999-12-15T00:00:00.000Z | 17 jours    | il y a 17 jours    | 408 heures                     |\n| 1999-12-01T00:00:00.000Z | 1 mois      | il y a 1 mois      | 744 heures                     |\n| 1999-11-01T00:00:00.000Z | 2 mois      | il y a 2 mois      | 1464 heures                    |\n| 1999-06-01T00:00:00.000Z | 7 mois      | il y a 7 mois      | 5136 heures                    |\n| 1999-01-01T00:00:00.000Z | 1 an        | il y a 1 an        | 8760 heures                    |\n| 1998-12-01T00:00:00.000Z | 1 an        | il y a 1 an        | 9504 heures                    |\n| 1998-06-01T00:00:00.000Z | 2 ans       | il y a 2 ans       | 13896 heures                   |\n| 1998-01-01T00:00:00.000Z | 2 ans       | il y a 2 ans       | 17520 heures                   |\n| 1997-01-01T00:00:00.000Z | 3 ans       | il y a 3 ans       | 26280 heures                   |\n| 1996-01-01T00:00:00.000Z | 4 ans       | il y a 4 ans       | 35064 heures                   |\n| 1995-01-01T00:00:00.000Z | 5 ans       | il y a 5 ans       | 43824 heures                   |\n| 1994-01-01T00:00:00.000Z | 6 ans       | il y a 6 ans       | 52584 heures                   |\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Testing Table\nDESCRIPTION: Test table showing date formatting results for different format patterns (p, pp, ppp, pppp, Pp, PPpp, PPPppp). Each row contains an input timestamp, formatted output, and expected result.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/da/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 1987-09-11T12:13:14.015Z | 12:13:14                                             | 1987-09-11T12:13:14.000Z |\n|                                 |              | 1987-10-11T12:13:14.015Z | 12:13:14                                             | 1987-10-11T12:13:14.000Z |\n```\n\n----------------------------------------\n\nTITLE: Defining Armenian Locale for date-fns in JavaScript\nDESCRIPTION: This code snippet defines the Armenian locale configuration for the date-fns library. It includes translations for months, days, and various date formatting options specific to the Armenian language.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/hy/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar locale = {\n  name: 'hy',\n  weekdays: 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),\n  weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),\n  weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),\n  months: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_'),\n  monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),\n  weekStart: 1,\n  yearStart: 4,\n  formats: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD.MM.YYYY',\n    LL: 'D MMMM YYYY թ.',\n    LLL: 'D MMMM YYYY թ., HH:mm',\n    LLLL: 'dddd, D MMMM YYYY թ., HH:mm'\n  },\n  relativeTime: {\n    future: '%s հետո',\n    past: '%s առաջ',\n    s: 'մի քանի վայրկյան',\n    m: 'րոպե',\n    mm: '%d րոպե',\n    h: 'ժամ',\n    hh: '%d ժամ',\n    d: 'օր',\n    dd: '%d օր',\n    M: 'ամիս',\n    MM: '%d ամիս',\n    y: 'տարի',\n    yy: '%d տարի'\n  },\n  ordinal: function (n) {\n    return n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time for Standard ISO Strings - JavaScript\nDESCRIPTION: This snippet formats the date and time according to ISO 8601 standards. It converts given date strings into standard outputs showing date and time in a predictable format. Inputs are ISO date strings, and the output is formatted time strings. This is useful for applications needing consistency in date representation.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/pt-BR/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n|                                 |              | 1987-06-11T12:13:14.015Z | 12:13                                                       | 1987-06-11T12:13:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Extended Date and Time with Month Names\nDESCRIPTION: Formats date with abbreviated month names and time using pattern 'PPpp', displaying date with localized month names and full time.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fi/snapshot.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 | PPpp         | 1987-01-11T12:13:14.015Z | 11. tammi 1987 12.13.14                                   | 1987-01-11T12:13:14.000Z |\n```\n\n----------------------------------------\n\nTITLE: Duration Formatting in Icelandic\nDESCRIPTION: Converts duration objects into localized Icelandic text representations across multiple time units like years, months, days, hours, minutes, and seconds\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/is/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## `formatDuration`\n```\n\n----------------------------------------\n\nTITLE: Implementing month Localization Function for Russian Locale in date-fns\nDESCRIPTION: This snippet shows how to implement the month localization function for the Russian locale in date-fns, handling both stand-alone and formatting cases with different grammatical cases.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// In `ru` locale:\nvar monthValues = {\n  narrow: [\"Я\", \"Ф\", \"М\", \"А\", \"М\", \"И\", \"И\", \"А\", \"С\", \"О\", \"Н\", \"Д\"],\n  abbreviated: [\n    \"янв.\",\n    \"фев.\",\n    \"март\",\n    \"апр.\",\n    \"май\",\n    \"июнь\",\n    \"июль\",\n    \"авг.\",\n    \"сент.\",\n    \"окт.\",\n    \"нояб.\",\n    \"дек.\",\n  ],\n  wide: [\n    \"январь\",\n    \"февраль\",\n    \"март\",\n    \"апрель\",\n    \"май\",\n    \"июнь\",\n    \"июль\",\n    \"август\",\n    \"сентябрь\",\n    \"октябрь\",\n    \"ноябрь\",\n    \"декабрь\",\n  ],\n};\nvar formattingMonthValues = {\n  narrow: [\"Я\", \"Ф\", \"М\", \"А\", \"М\", \"И\", \"И\", \"А\", \"С\", \"О\", \"Н\", \"Д\"],\n  abbreviated: [\n    \"янв.\",\n    \"фев.\",\n    \"мар.\",\n    \"апр.\",\n    \"мая\",\n    \"июн.\",\n    \"июл.\",\n    \"авг.\",\n    \"сент.\",\n    \"окт.\",\n    \"нояб.\",\n    \"дек.\",\n  ],\n  wide: [\n    \"января\",\n    \"февраля\",\n    \"марта\",\n    \"апреля\",\n    \"мая\",\n    \"июня\",\n    \"июля\",\n    \"августа\",\n    \"сентября\",\n    \"октября\",\n    \"ноября\",\n    \"декабря\",\n  ],\n};\n\nvar localize = {\n  // ...\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingMonthValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n  // ...\n};\n\nexport default localize;\n```\n\n----------------------------------------\n\nTITLE: Using date-fns with Individual Locale\nDESCRIPTION: Demonstrates loading the main date-fns module with a single specific locale file for targeted language support.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/cdn.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/date-fns@3.6.0/cdn.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/date-fns@3.6.0/locale/es/cdn.min.js\"></script>\n<script>\n  dateFns.formatRelative(dateFns.subDays(new Date(), 3), new Date(), {\n    locale: dateFns.locale.es,\n  });\n  //=> \"el viernes pasado a las 19:26\"\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Italian (Switzerland) Locale for date-fns\nDESCRIPTION: This code snippet exports an object containing locale-specific settings for Italian as used in Switzerland. It includes translations for months, days, ordinal numbers, and various date-related terms.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/it-CH/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst locale = {\n  code: 'it-CH',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 4\n  }\n}\n\nexport default locale\n```\n\n----------------------------------------\n\nTITLE: Implementing Day Localization in JavaScript for date-fns\nDESCRIPTION: This snippet shows how to localize days of the week using the buildLocalizeFn function. It includes narrow, short, abbreviated, and wide formats for days in English.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\n\nvar dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nvar localize = {\n  // ...\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n  // ...\n};\n\nexport default localize;\n```\n\n----------------------------------------\n\nTITLE: Formatting Distance Strictly with date-fns in JavaScript\nDESCRIPTION: The formatDistanceStrict function returns a string that represents the distance between two dates in a strict format, optionally adding a suffix for clarity. This function requires the date-fns library and is typically used when translating date differences into human-readable distances, accommodating both strict and loose formatting.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/pl/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Sample output for formatDistanceStrict with 'now' as January 1st, 2000\n// Results for various historical dates in comparison to the reference date.\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Table - Hour Formats\nDESCRIPTION: Shows different hour formatting patterns using 'ho', 'Ho', 'Ko', and 'ko' tokens. Includes variations for 12-hour and 24-hour formats with ordinal indicators.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Hour [1-12] | ho | 2019-02-11T11:13:14.015Z | 11th | 2019-02-11T11:00:00.000Z |\n| Hour [0-23] | Ho | 2019-02-11T23:13:14.015Z | 23rd | 2019-02-11T23:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Flexible Day Period Formatting\nDESCRIPTION: Demonstrates how different tokens (B, BB, BBB, BBBB, BBBBB) handle day period localization in Chinese, with varying levels of specificity for morning, afternoon, evening, and night periods\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/zh-CN/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n| B       | Flexible day period token with localized day segments\n| BB      | More specific day period representation\n| BBB     | Detailed day period naming\n| BBBB    | Extended day period description\n| BBBBB   | Condensed day period indicator\n```\n\n----------------------------------------\n\nTITLE: Formatting Strict Date Distances\nDESCRIPTION: Calculates precise time differences between dates with options for suffix and forced units\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-US/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## `formatDistanceStrict`\n\nIf now is January 1st, 2000, 00:00.\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Table in Markdown\nDESCRIPTION: A markdown table demonstrating different date formatting tokens (yo, Yo, Qo, QQQ, QQQQ, etc.) and their corresponding format and parse results for various date inputs. Shows formatting patterns for years, quarters, and months with examples.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nl-BE/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                 | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ----------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987e                                           | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5e                                              | 0005-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Nested Function Composition\nDESCRIPTION: Shows how to compose multiple date-fns functions using nested function calls. Demonstrates the traditional way of function composition without utility functions.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/fp.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst formattedDates = dates.map((date) =>\n  toUpper(dateToString(addFiveYears(date))),\n);\n```\n\n----------------------------------------\n\nTITLE: Building date-fns with Rollup\nDESCRIPTION: Commands to install dependencies and build the project using npm. The build output will be available in the ./dist directory.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/examples/rollup/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Checking Minimal Build Size\nDESCRIPTION: Command to check the gzipped size of the minimal build when using a single function from date-fns. Uses gzip-size and pretty-bytes to format the output.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/examples/rollup/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngzip-size dist/example.min.js | pretty-bytes\n#=> 6.22 kB\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Pattern Examples for date-fns\nDESCRIPTION: Table showing various date formatting patterns and their corresponding outputs. Includes examples for AM/PM markers (b), flexible day periods (B), hours in different formats (h, H, K, k), minutes (m), seconds (s), and localized dates (P). Each example shows the input date, pattern, formatted output and parsed result.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ht/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n|                                 |              | 2019-02-11T02:13:14.015Z | AM                                                 | Invalid Date             |\n| AM, PM, noon, midnight          | b            | 2019-02-11T11:13:14.015Z | AM                                                 | 2019-02-11T00:00:00.000Z |\n|                                 |              | 2019-02-11T14:13:14.015Z | PM                                                 | 2019-02-11T12:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Matching Month Patterns (ru)\nDESCRIPTION: This snippet illustrates `matchMonthPatterns` configuration for the `ru` (Russian) locale, considering grammatical cases.  The patterns accommodate variations in month names, ensuring comprehensive matching.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// In `ru` locale:\nvar matchMonthPatterns = {\n  narrow: /^[яфмаисонд]/i,\n  abbreviated:\n    /^(янв|фев|март?|апр|ма[йя]|июн[ья]?|июл[ья]?|авг|сент?|окт|нояб?|дек)/i,\n  wide: /^(январ[ья]|феврал[ья]|марта?|апрел[ья]|ма[йя]|июн[ья]|июл[ья]|августа?|сентябр[ья]|октябр[ья]|октябр[ья]|ноябр[ья]|декабр[ья])/i,\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Lodash Compose Pattern\nDESCRIPTION: Demonstrates using lodash's compose function to create a more idiomatic function composition. The functions are composed in reverse order of execution.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/fp.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { compose } from \"lodash/fp/compose\";\n\nconst formattedDates = dates.map(compose(toUpper, dateToString, addFiveYears));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Date Formatting and Parsing in Markdown Table\nDESCRIPTION: This snippet shows a markdown table with examples of using different date formatting tokens with the `format` and `parse` functions. It covers various date components like year, quarter, and month, displaying both the formatted output and parsed result for each token.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lv/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                                | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | -------------------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987.                                                          | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5.                                                             | 0005-01-01T00:00:00.000Z |\n| Local week-numbering year       | Yo           | 1987-02-11T12:13:14.015Z | 1987.                                                          | 1986-12-29T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 4.                                                             | 0003-12-29T00:00:00.000Z |\n| Quarter (formatting)            | Qo           | 2019-01-01T12:13:14.015Z | 1.                                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2.                                                             | 2019-04-01T00:00:00.000Z |\n|                                 | QQQ          | 2019-01-01T12:13:14.015Z | 1. cet.                                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2. cet.                                                        | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQ         | 2019-01-01T12:13:14.015Z | pirmajā ceturksnī                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | otrajā ceturksnī                                               | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQQ        | 2019-01-01T12:13:14.015Z | 1                                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2                                                              | 2019-04-01T00:00:00.000Z |\n| Quarter (stand-alone)           | qo           | 2019-01-01T12:13:14.015Z | 1.                                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2.                                                             | 2019-04-01T00:00:00.000Z |\n|                                 | qqq          | 2019-01-01T12:13:14.015Z | 1. cet.                                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2. cet.                                                        | 2019-04-01T00:00:00.000Z |\n|                                 | qqqq         | 2019-01-01T12:13:14.015Z | pirmais ceturksnis                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | otrais ceturksnis                                              | 2019-04-01T00:00:00.000Z |\n| Month (formatting)              | Mo           | 2019-01-11T12:13:14.015Z | 1.                                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2.                                                             | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | 3.                                                             | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | 4.                                                             | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | 5.                                                             | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | 6.                                                             | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | 7.                                                             | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | 8.                                                             | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | 9.                                                             | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | 10.                                                            | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | 11.                                                            | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | 12.                                                            | 2019-12-01T00:00:00.000Z |\n|                                 | MMM          | 2019-01-11T12:13:14.015Z | janv.                                                          | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | febr.                                                          | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | martā                                                          | Invalid Date             |\n|                                 |              | 2019-04-10T12:13:14.015Z | apr.                                                           | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | maijs                                                          | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | jūn.                                                           | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | jūl.                                                           | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | aug.                                                           | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | sept.                                                          | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | okt.                                                           | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | nov.                                                           | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | dec.                                                           | 2019-12-01T00:00:00.000Z |\n|                                 | MMMM         | 2019-01-11T12:13:14.015Z | janvārī                                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | februārī                                                       | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | martā                                                          | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | aprīlī                                                         | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | maijā                                                          | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | jūnijā                                                         | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | jūlijā                                                         | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | augustā                                                        | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | septembrī                                                      | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | oktobrī                                                        | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | novembrī                                                       | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | decembrī                                                       | 2019-12-01T00:00:00.000Z |\n|                                 | MMMMM        | 2019-01-11T12:13:14.015Z | J                                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | F                                                              | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Defining Dutch Locale Configuration for date-fns\nDESCRIPTION: This code snippet defines the Dutch (nl) locale configuration object for the date-fns library. It includes localized names for months, days, time of day, and various date and time formatting options specific to the Dutch language.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nl/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst locale = {\n  code: 'nl',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 4\n  }\n}\n\nexport default locale\n```\n\n----------------------------------------\n\nTITLE: Long Localized Date Formatting\nDESCRIPTION: Illustrates long localized date formatting with the 'P' token, showing date representations across multiple years and months\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ro/snapshot.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Token: P\n// Shows localized date formatting with day.month.year pattern\n```\n\n----------------------------------------\n\nTITLE: Parsing Day Patterns (en-US)\nDESCRIPTION: This snippet showcases an example of `parseDayPatterns` configuration for the `en-US` locale. The patterns define regular expressions to match day names in narrow and wide formats.  The case-insensitive flag `/i` is used to allow for flexible matching of user input.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// In `en-US` locale:\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Time Format Pattern Tests\nDESCRIPTION: Test cases for time formatting patterns showing different levels of detail from hours:minutes to full time with timezone\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/bs/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Long localized time             | p            | 1987-01-11T12:13:14.015Z | 12:13                                              | 1987-01-11T12:13:00.000Z |\n|                                 | pp           | 1987-01-11T12:13:14.015Z | 12:13:14                                           | 1987-01-11T12:13:14.000Z |\n|                                 | ppp          | 1987-01-11T12:13:14.015Z | 12:13:14 GMT+0                                     | Errored                  |\n```\n\n----------------------------------------\n\nTITLE: Date Formatting and Parsing Reference Table in Markdown\nDESCRIPTION: A markdown table showing the behavior of date-fns format and parse functions with various tokens. The table includes examples of calendar years, week-numbering years, quarters, and months in different formats with their corresponding output strings and parsed date objects.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/de/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                   | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987.                                             | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5.                                                | 0005-01-01T00:00:00.000Z |\n| Local week-numbering year       | Yo           | 1987-02-11T12:13:14.015Z | 1987.                                             | 1986-12-29T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 4.                                                | 0003-12-29T00:00:00.000Z |\n| Quarter (formatting)            | Qo           | 2019-01-01T12:13:14.015Z | 1.                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2.                                                | 2019-04-01T00:00:00.000Z |\n|                                 | QQQ          | 2019-01-01T12:13:14.015Z | Q1                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | Q2                                                | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQ         | 2019-01-01T12:13:14.015Z | 1. Quartal                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2. Quartal                                        | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQQ        | 2019-01-01T12:13:14.015Z | 1                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2                                                 | 2019-04-01T00:00:00.000Z |\n| Quarter (stand-alone)           | qo           | 2019-01-01T12:13:14.015Z | 1.                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2.                                                | 2019-04-01T00:00:00.000Z |\n|                                 | qqq          | 2019-01-01T12:13:14.015Z | Q1                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | Q2                                                | 2019-04-01T00:00:00.000Z |\n|                                 | qqqq         | 2019-01-01T12:13:14.015Z | 1. Quartal                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2. Quartal                                        | 2019-04-01T00:00:00.000Z |\n| Month (formatting)              | Mo           | 2019-01-11T12:13:14.015Z | 1.                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2.                                                | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | 3.                                                | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | 4.                                                | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | 5.                                                | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | 6.                                                | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | 7.                                                | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | 8.                                                | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | 9.                                                | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | 10.                                               | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | 11.                                               | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | 12.                                               | 2019-12-01T00:00:00.000Z |\n|                                 | MMM          | 2019-01-11T12:13:14.015Z | Jan.                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | Feb.                                              | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | März                                              | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | Apr.                                              | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | Mai                                               | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | Juni                                              | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | Juli                                              | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | Aug.                                              | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | Sep.                                              | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | Okt.                                              | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | Nov.                                              | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | Dez.                                              | 2019-12-01T00:00:00.000Z |\n|                                 | MMMM         | 2019-01-11T12:13:14.015Z | Januar                                            | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | Februar                                           | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | März                                              | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | April                                             | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | Mai                                               | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | Juni                                              | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | Juli                                              | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | August                                            | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | September                                         | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | Oktober                                           | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | November                                          | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | Dezember                                          | 2019-12-01T00:00:00.000Z |\n|                                 | MMMMM        | 2019-01-11T12:13:14.015Z | J                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | F                                                 | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | M                                                 | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | A                                                 | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | M                                                 | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | J                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | J                                                 | 2019-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Format/Parse Token Reference Table\nDESCRIPTION: Markdown table demonstrating various date formatting tokens and their results in French locale. Shows both format and parse examples for calendar years (yo), week-numbering years (Yo), quarters (Qo, QQQ, QQQQ, QQQQQ), and months (Mo, MMM, MMMM, MMMMM) with French ordinal indicators and abbreviations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr-CH/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                 | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ----------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987ème                                         | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5ème                                            | 0005-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Long Localized Date Formatting\nDESCRIPTION: Demonstrates long date format tokens for representing dates in different styles, showing year, month, and day representations across various date ranges\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/zh-CN/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n| P  | Short localized date format (YY-MM-DD)\n| PP | Full year localized date format (YYYY-MM-DD)\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Token Examples in Markdown Table\nDESCRIPTION: Reference table demonstrating how different date formatting tokens (yo, Yo, Qo, QQQ, etc.) behave with format and parse functions across various dates. Includes examples for calendar years, week-numbering years, quarters (formatting and stand-alone), and months (formatting).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IE/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                   | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987th                                            | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5th                                               | 0005-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Date Formatting and Parsing in Welsh using date-fns\nDESCRIPTION: This markdown table shows how different date components are formatted and parsed in Welsh using various tokens. It includes examples for calendar year, local week-numbering year, quarter, and month formatting.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/cy/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## `format` and `parse`\n\n| Title                           | Token string | Date                     | `format` result                                          | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | -------------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987fed                                                  | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5ed                                                      | 0005-01-01T00:00:00.000Z |\n| Local week-numbering year       | Yo           | 1987-02-11T12:13:14.015Z | 1987fed                                                  | 1986-12-28T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5ed                                                      | 0004-12-26T00:00:00.000Z |\n| Quarter (formatting)            | Qo           | 2019-01-01T12:13:14.015Z | 1af                                                      | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2ail                                                     | 2019-04-01T00:00:00.000Z |\n|                                 | QQQ          | 2019-01-01T12:13:14.015Z | Ch1                                                      | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | Ch2                                                      | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQ         | 2019-01-01T12:13:14.015Z | Chwarter 1af                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2ail chwarter                                            | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQQ        | 2019-01-01T12:13:14.015Z | 1                                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2                                                        | 2019-04-01T00:00:00.000Z |\n| Quarter (stand-alone)           | qo           | 2019-01-01T12:13:14.015Z | 1af                                                      | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2ail                                                     | 2019-04-01T00:00:00.000Z |\n|                                 | qqq          | 2019-01-01T12:13:14.015Z | Ch1                                                      | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | Ch2                                                      | 2019-04-01T00:00:00.000Z |\n|                                 | qqqq         | 2019-01-01T12:13:14.015Z | Chwarter 1af                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2ail chwarter                                            | 2019-04-01T00:00:00.000Z |\n| Month (formatting)              | Mo           | 2019-01-11T12:13:14.015Z | 1af                                                      | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2ail                                                     | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | 3ydd                                                     | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | 4ydd                                                     | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | 5ed                                                      | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | 6ed                                                      | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | 7fed                                                     | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | 8fed                                                     | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | 9fed                                                     | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | 10fed                                                    | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | 11eg                                                     | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | 12fed                                                    | 2019-12-01T00:00:00.000Z |\n|                                 | MMM          | 2019-01-11T12:13:14.015Z | Ion                                                      | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | Chwe                                                     | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | Maw                                                      | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | Ebr                                                      | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | Mai                                                      | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | Meh                                                      | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | Gor                                                      | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | Aws                                                      | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | Med                                                      | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | Hyd                                                      | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | Tach                                                     | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | Rhag                                                     | 2019-12-01T00:00:00.000Z |\n|                                 | MMMM         | 2019-01-11T12:13:14.015Z | Ionawr                                                   | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | Chwefror                                                 | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | Mawrth                                                   | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | Ebrill                                                   | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | Mai                                                      | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | Mehefin                                                  | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | Gorffennaf                                               | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | Awst                                                     | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | Medi                                                     | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | Hydref                                                   | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | Tachwedd                                                 | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | Rhagfyr                                                  | 2019-12-01T00:00:00.000Z |\n|                                 | MMMMM        | 2019-01-11T12:13:14.015Z | I                                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | Ch                                                       | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | Ma                                                       | Invalid Date             |\n|                                 |              | 2019-04-10T12:13:14.015Z | E                                                        | 2019-04-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Time Format Testing Matrix\nDESCRIPTION: Test table showing formatting patterns for different time components including AM/PM markers (a/b patterns), flexible day periods (B pattern), and hour formatting with ordinal numbers in Gaelic.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/gd/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 | aa           | 2019-02-11T11:13:14.015Z | M.                                                              | Invalid Date             |\n|                                 |              | 2019-02-11T14:13:14.015Z | F.                                                              | Invalid Date             |\n|                                 |              | 2019-02-11T19:13:14.015Z | F.                                                              | Invalid Date             |\n|                                 |              | 2019-02-11T02:13:14.015Z | M.                                                              | Invalid Date             |\n```\n\n----------------------------------------\n\nTITLE: Hour Representation Tokens\nDESCRIPTION: Tokens for formatting hours in different ranges and styles, including 1-12, 0-23, 0-11, and 1-24 hour formats\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ru/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Tokens: ho, Ho, Ko, ko\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Token Examples in Markdown Table\nDESCRIPTION: Extensive markdown table demonstrating the behavior of date formatting tokens in date-fns, including examples of formatting and parsing dates with different patterns. Shows results for calendar years, quarters, and months with various format specifiers.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/it-CH/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                               | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | --------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987                                          | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5                                             | 0005-01-01T00:00:00.000Z |\n| Local week-numbering year       | Yo           | 1987-02-11T12:13:14.015Z | 1987                                          | 1986-12-29T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Test Table\nDESCRIPTION: Table showing test cases for different date formatting tokens including AM/PM markers, day periods, time components and localized dates. Each row shows the token pattern and its corresponding output for different timestamps.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/da/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 | aaaaa        | 2019-02-11T11:13:14.015Z | a                                                    | 2019-02-11T00:00:00.000Z |\n|                                 |              | 2019-02-11T14:13:14.015Z | p                                                    | 2019-02-11T12:00:00.000Z |\n|                                 |              | 2019-02-11T19:13:14.015Z | p                                                    | 2019-02-11T12:00:00.000Z |\n|                                 |              | 2019-02-11T02:13:14.015Z | a                                                    | 2019-02-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Defining Afrikaans Locale Configuration for date-fns\nDESCRIPTION: This code snippet defines the Afrikaans locale configuration for the date-fns library. It includes settings for month names, day names, date ordinal function, and various date formats specific to the Afrikaans language.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/af/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst locale = {\n  code: 'af',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n}\n\nexport default locale\n```\n\n----------------------------------------\n\nTITLE: Defining Icelandic Locale Configuration for date-fns\nDESCRIPTION: This code snippet exports the Icelandic locale configuration object for use with the date-fns library. It includes definitions for weekdays, months, time of day, and ordinal number formatting specific to the Icelandic language.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/is/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar locale = {\n  code: 'is',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 4\n  }\n}\n\nexport default locale\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Pattern Examples with date-fns\nDESCRIPTION: Table showing date format pattern outputs with different formatting tokens (P, PP, PPP, PPPP, p, pp) and their results across various dates. Demonstrates formatting of dates from different months and times with varying levels of detail.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-AU/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 1987-07-11T12:13:14.015Z | 11/07/1987                                           | 1987-07-11T00:00:00.000Z |\n|                                 |              | 1987-08-11T12:13:14.015Z | 11/08/1987                                           | 1987-08-11T00:00:00.000Z |\n|                                 |              | 1987-09-11T12:13:14.015Z | 11/09/1987                                           | 1987-09-11T00:00:00.000Z |\n|                                 | PP           | 1987-01-11T12:13:14.015Z | 11 Jan 1987                                          | 1987-01-11T00:00:00.000Z |\n|                                 | PPP          | 1987-01-11T12:13:14.015Z | 11 January 1987                                      | 1987-01-11T00:00:00.000Z |\n|                                 | PPPP         | 1987-01-11T12:13:14.015Z | Sunday, 11 January 1987                              | 1987-01-11T00:00:00.000Z |\n| Long localized time             | p            | 1987-01-11T12:13:14.015Z | 12:13 PM                                             | 1987-01-11T12:13:00.000Z |\n|                                 | pp           | 1987-01-11T12:13:14.015Z | 12:13:14 PM                                          | 1987-01-11T12:13:14.000Z |\n```\n\n----------------------------------------\n\nTITLE: Formatting Long Localized Time with 'pp' Token - JavaScript\nDESCRIPTION: This snippet illustrates the formatting of dates with the 'pp' token in date-fns, which includes seconds and provides a more precise time output.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/gd/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n|                                 | pp           | 1987-01-11T12:13:14.015Z | 12:13:14 F.                                                     | Invalid Date             |\n|                                 |              | 1987-02-11T12:13:14.015Z | 12:13:14 F.                                                     | Invalid Date             |\n|                                 |              | 1987-03-11T12:13:14.015Z | 12:13:14 F.                                                     | Invalid Date             |\n|                                 |              | 1987-04-11T12:13:14.015Z | 12:13:14 F.                                                     | Invalid Date             |\n|                                 |              | 1453-05-29T23:59:59.999Z | 11:59:59 F.                                                     | Invalid Date             |\n|                                 |              | 1987-06-11T12:13:14.015Z | 12:13:14 F.                                                     | Invalid Date             |\n|                                 |              | 1987-07-11T12:13:14.015Z | 12:13:14 F.                                                     | Invalid Date             |\n|                                 |              | 1987-08-11T12:13:14.015Z | 12:13:14 F.                                                     | Invalid Date             |\n|                                 |              | 1987-09-11T12:13:14.015Z | 12:13:14 F.                                                     | Invalid Date             |\n|                                 |              | 1987-10-11T12:13:14.015Z | 12:13:14 F.                                                     | Invalid Date             |\n|                                 |              | 1987-11-11T12:13:14.015Z | 12:13:14 F.                                                     | Invalid Date             |\n|                                 |              | 1987-12-11T12:13:14.015Z | 12:13:14 F.                                                     | Invalid Date             |\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Token Examples in Markdown Table\nDESCRIPTION: Comprehensive table showing date formatting tokens and their corresponding output when used with date-fns format and parse functions. Includes examples for calendar years, quarters, and months in various formats.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/it/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                               | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | --------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987                                          | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5                                             | 0005-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Pattern Table\nDESCRIPTION: Table showing date formatting patterns and their outputs for different format tokens including AM/PM markers (b), flexible day periods (B), hours in various formats (h, H, K, k), minutes (m), seconds (s), and localized dates (P). Each row demonstrates the pattern output with example timestamps.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/af/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 2019-02-11T02:13:14.015Z | vm                                                | 2019-02-11T00:00:00.000Z |\n| AM, PM, noon, midnight          | b            | 2019-02-11T11:13:14.015Z | vm                                                | 2019-02-11T00:00:00.000Z |\n|                                 |              | 2019-02-11T14:13:14.015Z | nm                                                | 2019-02-11T12:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Date Formatting and Parsing in Frisian (Markdown Table)\nDESCRIPTION: A markdown table showcasing the behavior of date-fns `format` and `parse` functions for various date tokens in the Frisian locale. It includes examples for calendar year, local week-numbering year, quarter, and month formatting.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fy/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                   | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987e                                             | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5e                                                | 0005-01-01T00:00:00.000Z |\n| Local week-numbering year       | Yo           | 1987-02-11T12:13:14.015Z | 1987e                                             | 1986-12-29T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 4e                                                | 0003-12-29T00:00:00.000Z |\n| Quarter (formatting)            | Qo           | 2019-01-01T12:13:14.015Z | 1e                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2e                                                | 2019-04-01T00:00:00.000Z |\n|                                 | QQQ          | 2019-01-01T12:13:14.015Z | K1                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | K2                                                | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQ         | 2019-01-01T12:13:14.015Z | 1e fearnsjier                                     | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2e fearnsjier                                     | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQQ        | 2019-01-01T12:13:14.015Z | 1                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2                                                 | 2019-04-01T00:00:00.000Z |\n| Quarter (stand-alone)           | qo           | 2019-01-01T12:13:14.015Z | 1e                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2e                                                | 2019-04-01T00:00:00.000Z |\n|                                 | qqq          | 2019-01-01T12:13:14.015Z | K1                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | K2                                                | 2019-04-01T00:00:00.000Z |\n|                                 | qqqq         | 2019-01-01T12:13:14.015Z | 1e fearnsjier                                     | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2e fearnsjier                                     | 2019-04-01T00:00:00.000Z |\n| Month (formatting)              | Mo           | 2019-01-11T12:13:14.015Z | 1e                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2e                                                | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | 3e                                                | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | 4e                                                | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | 5e                                                | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | 6e                                                | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | 7e                                                | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | 8e                                                | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | 9e                                                | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | 10e                                               | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | 11e                                               | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | 12e                                               | 2019-12-01T00:00:00.000Z |\n|                                 | MMM          | 2019-01-11T12:13:14.015Z | jan.                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | feb.                                              | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | mrt.                                              | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | apr.                                              | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | mai.                                              | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | jun.                                              | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | jul.                                              | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | aug.                                              | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | sep.                                              | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | okt.                                              | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | nov.                                              | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | des.                                              | 2019-12-01T00:00:00.000Z |\n|                                 | MMMM         | 2019-01-11T12:13:14.015Z | jannewaris                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | febrewaris                                        | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | maart                                             | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | april                                             | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | maaie                                             | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | juny                                              | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | july                                              | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | augustus                                          | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | septimber                                         | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | oktober                                           | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | novimber                                          | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | desimber                                          | 2019-12-01T00:00:00.000Z |\n|                                 | MMMMM        | 2019-01-11T12:13:14.015Z | j                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | f                                                 | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | m                                                 | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | a                                                 | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | m                                                 | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | j                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | j                                                 | 2019-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Defining Moroccan Arabic (ar-MA) Locale for date-fns in JavaScript\nDESCRIPTION: This code snippet defines the Moroccan Arabic locale for the date-fns library. It includes translations for months, days, ordinal numbers, and various date formatting options specific to Moroccan Arabic.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ar-MA/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport formatDistance from '../_lib/formatDistance/index.js'\nimport formatRelative from '../_lib/formatRelative/index.js'\nimport localize from '../_lib/localize/index.js'\nimport match from '../_lib/match/index.js'\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary Moroccan Arabic locale.\n * @language Moroccan Arabic\n * @iso-639-2 ara\n * @author Achraf Rrami [@rramiachraf]{@link https://github.com/rramiachraf}\n */\nvar locale = {\n  code: 'ar-MA',\n  formatDistance: formatDistance,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1\n  }\n}\n\nexport default locale\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Tests\nDESCRIPTION: Test table showing various date format patterns (P, PP, PPP, PPPP) and time patterns (p, pp, ppp) with their input dates and expected outputs. Includes localized month names and weekday representations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/bs/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 1987-11-11T12:13:14.015Z | 11. 11. 87.                                        | 1987-11-11T00:00:00.000Z |\n|                                 | PP           | 1987-01-11T12:13:14.015Z | 11. jan 87.                                        | 1987-01-11T00:00:00.000Z |\n|                                 | PPP          | 1987-01-11T12:13:14.015Z | 11. januar 1987.                                   | 1987-01-11T00:00:00.000Z |\n|                                 | PPPP         | 1987-01-11T12:13:14.015Z | nedjelja, 11. januar 1987.                         | 1987-01-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Implementing ordinalNumber Function for Russian Locale in date-fns\nDESCRIPTION: This snippet shows how to implement the ordinalNumber function for the Russian locale in date-fns. It handles different suffixes based on the grammatical unit of the number.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// In `ru` locale:\nfunction ordinalNumber(dirtyNumber, dirtyOptions) {\n  var options = dirtyOptions || {};\n  var unit = String(options.unit);\n  var suffix;\n\n  if (unit === \"date\") {\n    suffix = \"-е\";\n  } else if (unit === \"week\" || unit === \"minute\" || unit === \"second\") {\n    suffix = \"-я\";\n  } else {\n    suffix = \"-й\";\n  }\n\n  return dirtyNumber + suffix;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Date Formatting and Parsing in date-fns\nDESCRIPTION: This markdown table illustrates the behavior of various date formatting tokens when used with the `format` and `parse` functions in date-fns. It shows the output for different date components across various scenarios, including edge cases.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ar-MA/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                    | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | -------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987                                               | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5                                                  | 0005-01-01T00:00:00.000Z |\n| Local week-numbering year       | Yo           | 1987-02-11T12:13:14.015Z | 1987                                               | 1986-12-29T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5                                                  | 0004-12-27T00:00:00.000Z |\n| Quarter (formatting)            | Qo           | 2019-01-01T12:13:14.015Z | 1                                                  | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2                                                  | 2019-04-01T00:00:00.000Z |\n|                                 | QQQ          | 2019-01-01T12:13:14.015Z | ر1                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | ر2                                                 | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQ         | 2019-01-01T12:13:14.015Z | الربع الأول                                        | Invalid Date             |\n|                                 |              | 2019-04-01T12:13:14.015Z | الربع الثاني                                       | Invalid Date             |\n|                                 | QQQQQ        | 2019-01-01T12:13:14.015Z | 1                                                  | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2                                                  | 2019-04-01T00:00:00.000Z |\n| Quarter (stand-alone)           | qo           | 2019-01-01T12:13:14.015Z | 1                                                  | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2                                                  | 2019-04-01T00:00:00.000Z |\n|                                 | qqq          | 2019-01-01T12:13:14.015Z | ر1                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | ر2                                                 | 2019-04-01T00:00:00.000Z |\n|                                 | qqqq         | 2019-01-01T12:13:14.015Z | الربع الأول                                        | Invalid Date             |\n|                                 |              | 2019-04-01T12:13:14.015Z | الربع الثاني                                       | Invalid Date             |\n| Month (formatting)              | Mo           | 2019-01-11T12:13:14.015Z | 1                                                  | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2                                                  | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | 3                                                  | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | 4                                                  | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | 5                                                  | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | 6                                                  | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | 7                                                  | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | 8                                                  | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | 9                                                  | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | 10                                                 | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | 11                                                 | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | 12                                                 | 2019-12-01T00:00:00.000Z |\n|                                 | MMM          | 2019-01-11T12:13:14.015Z | ينا                                                | Invalid Date             |\n|                                 |              | 2019-02-11T12:13:14.015Z | فبر                                                | Invalid Date             |\n|                                 |              | 2019-03-11T12:13:14.015Z | مارس                                               | Invalid Date             |\n|                                 |              | 2019-04-10T12:13:14.015Z | أبريل                                              | Invalid Date             |\n|                                 |              | 2019-05-10T12:13:14.015Z | ماي                                                | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | يونـ                                               | Invalid Date             |\n|                                 |              | 2019-07-10T12:13:14.015Z | يولـ                                               | Invalid Date             |\n|                                 |              | 2019-08-10T12:13:14.015Z | غشت                                                | Invalid Date             |\n|                                 |              | 2019-09-10T12:13:14.015Z | شتنـ                                               | Invalid Date             |\n|                                 |              | 2019-10-10T12:13:14.015Z | أكتـ                                               | Invalid Date             |\n|                                 |              | 2019-11-10T12:13:14.015Z | نونـ                                               | Invalid Date             |\n|                                 |              | 2019-12-10T12:13:14.015Z | دجنـ                                               | Invalid Date             |\n|                                 | MMMM         | 2019-01-11T12:13:14.015Z | يناير                                              | Invalid Date             |\n|                                 |              | 2019-02-11T12:13:14.015Z | فبراير                                             | Invalid Date             |\n|                                 |              | 2019-03-11T12:13:14.015Z | مارس                                               | Invalid Date             |\n|                                 |              | 2019-04-10T12:13:14.015Z | أبريل                                              | Invalid Date             |\n|                                 |              | 2019-05-10T12:13:14.015Z | ماي                                                | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | يونيو                                              | Invalid Date             |\n|                                 |              | 2019-07-10T12:13:14.015Z | يوليوز                                             | Invalid Date             |\n|                                 |              | 2019-08-10T12:13:14.015Z | غشت                                                | Invalid Date             |\n|                                 |              | 2019-09-10T12:13:14.015Z | شتنبر                                              | Invalid Date             |\n|                                 |              | 2019-10-10T12:13:14.015Z | أكتوبر                                             | Invalid Date             |\n|                                 |              | 2019-11-10T12:13:14.015Z | نونبر                                              | Invalid Date             |\n|                                 |              | 2019-12-10T12:13:14.015Z | دجنبر                                              | Invalid Date             |\n|                                 | MMMMM        | 2019-01-11T12:13:14.015Z | ي                                                  | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | ف                                                  | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | م                                                  | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | أ                                                  | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | م                                                  | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | ي                                                  | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | ي                                                  | 2019-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Timestamp Format Pattern Tests\nDESCRIPTION: Comprehensive test cases showing how different date format patterns (b, B, h, H, K, k, m, s, P) transform timestamps into formatted strings. Includes AM/PM indicators, flexible day periods, hours in different ranges, minutes, seconds, and localized date formats.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr-CH/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n|                                 |              | 2019-02-11T19:13:14.015Z | PM                                              | 2019-02-11T12:00:00.000Z |\n|                                 |              | 2019-02-11T02:13:14.015Z | AM                                              | 2019-02-11T00:00:00.000Z |\n|                                 | bb           | 2019-02-11T11:13:14.015Z | AM                                              | 2019-02-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: French Date Format/Parse Token Reference Table\nDESCRIPTION: Markdown table showing format tokens (yo, Yo, Qo, etc.) and their corresponding output in French locale. Includes calendar year, week-numbering year, quarter formatting (standalone and formatting variants), and month formatting with examples and parse results.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                 | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ----------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987ème                                         | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5ème                                            | 0005-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Defining Belarusian Classic Locale for date-fns in JavaScript\nDESCRIPTION: This code snippet defines the locale object for Belarusian Classic (be-tarask) to be used with the date-fns library. It includes translations for months, days, date ordinals, and various date format strings.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/be-tarask/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport formatDistance from '../_lib/formatDistance/index.js'\nimport formatLong from '../_lib/formatLong/index.js'\nimport formatRelative from '../_lib/formatRelative/index.js'\nimport localize from '../_lib/localize/index.js'\nimport match from '../_lib/match/index.js'\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary Belarusian Classic locale.\n * @language Belarusian Classic\n * @iso-639-2 bel\n * @author Nik LePage [@nlepage]\n */\nconst locale = {\n  code: 'be-tarask',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1,\n  },\n}\n\nexport default locale\n\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Distances in Occitan\nDESCRIPTION: Test cases for formatDistance function showing how time differences are represented in Occitan language, covering scenarios from seconds to years with different formatting options\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/oc/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nformatDistance(baseDate, comparedDate, options)\n```\n\n----------------------------------------\n\nTITLE: Flexible Day Period Formatting\nDESCRIPTION: Patterns for formatting flexible day periods (morning, afternoon, evening, night) with varying levels of detail (B, BB, BBB, BBBB, BBBBB).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/hy/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nB     -> առավոտը (morning)\n       ցերեկը (afternoon)\n       երեկոյան (evening)\n       գիշերը (night)\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Token Examples in Markdown Table\nDESCRIPTION: Markdown table demonstrating the behavior of various date formatting tokens with format() and parse() functions. Shows token patterns for calendar years, quarters, and months with examples of input dates and their corresponding formatted and parsed outputs.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                      | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ---------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987th                                               | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5th                                                  | 0005-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Displaying Date Formatting and Parsing Examples in Markdown Table\nDESCRIPTION: This markdown table demonstrates various date formatting and parsing examples using the date-fns library. It shows how different token strings are used to format dates and how the parse function interprets these formatted strings.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/mt/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                 | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ----------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987º                                           | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5º                                              | 0005-01-01T00:00:00.000Z |\n| Local week-numbering year       | Yo           | 1987-02-11T12:13:14.015Z | 1987º                                           | 1986-12-29T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 4º                                              | 0003-12-29T00:00:00.000Z |\n| Quarter (formatting)            | Qo           | 2019-01-01T12:13:14.015Z | 1º                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2º                                              | 2019-04-01T00:00:00.000Z |\n|                                 | QQQ          | 2019-01-01T12:13:14.015Z | K1                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | K2                                              | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQ         | 2019-01-01T12:13:14.015Z | 1. kwart                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2. kwart                                        | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQQ        | 2019-01-01T12:13:14.015Z | 1                                               | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2                                               | 2019-04-01T00:00:00.000Z |\n| Quarter (stand-alone)           | qo           | 2019-01-01T12:13:14.015Z | 1º                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2º                                              | 2019-04-01T00:00:00.000Z |\n|                                 | qqq          | 2019-01-01T12:13:14.015Z | K1                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | K2                                              | 2019-04-01T00:00:00.000Z |\n|                                 | qqqq         | 2019-01-01T12:13:14.015Z | 1. kwart                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2. kwart                                        | 2019-04-01T00:00:00.000Z |\n| Month (formatting)              | Mo           | 2019-01-11T12:13:14.015Z | 1º                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2º                                              | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | 3º                                              | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | 4º                                              | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | 5º                                              | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | 6º                                              | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | 7º                                              | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | 8º                                              | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | 9º                                              | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | 10º                                             | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | 11º                                             | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | 12º                                             | 2019-12-01T00:00:00.000Z |\n|                                 | MMM          | 2019-01-11T12:13:14.015Z | Jan                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | Fra                                             | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | Mar                                             | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | Apr                                             | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | Mej                                             | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | Ġun                                             | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | Lul                                             | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | Aww                                             | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | Set                                             | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | Ott                                             | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | Nov                                             | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | Diċ                                             | 2019-12-01T00:00:00.000Z |\n|                                 | MMMM         | 2019-01-11T12:13:14.015Z | Jannar                                          | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | Frar                                            | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | Marzu                                           | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | April                                           | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | Mejju                                           | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | Ġunju                                           | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | Lulju                                           | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | Awwissu                                         | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | Settembru                                       | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | Ottubru                                         | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | Novembru                                        | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | Diċembru                                        | 2019-12-01T00:00:00.000Z |\n|                                 | MMMMM        | 2019-01-11T12:13:14.015Z | J                                               | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | F                                               | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | M                                               | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | A                                               | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | M                                               | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | Ġ                                               | Invalid Date             |\n|                                 |              | 2019-07-10T12:13:14.015Z | L                                               | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | A                                               | 2019-04-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Format Test Table in Markdown\nDESCRIPTION: A markdown table containing test cases for date formatting patterns. Shows input dates, format patterns, expected outputs and actual results including error cases. Demonstrates handling of different date components and localization patterns.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/af/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 1987-02-11T12:13:14.015Z | 12:13:14 GMT+0                                    | Errored                  |\n|                                 |              | 1987-03-11T12:13:14.015Z | 12:13:14 GMT+0                                    | Errored                  |\n|                                 |              | 1987-04-11T12:13:14.015Z | 12:13:14 GMT+0                                    | Errored                  |\n```\n\n----------------------------------------\n\nTITLE: Defining Kazakh Locale Configuration for date-fns\nDESCRIPTION: This code snippet exports a configuration object for the Kazakh locale in date-fns. It includes translations for months, days, time periods, and formatting options specific to the Kazakh language.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/kk/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar formatRelativeLocale = {\n  lastWeek: \"'өткен' eeee p\",\n  yesterday: \"'кеше' p\",\n  today: \"'бүгін' p\",\n  tomorrow: \"'ертең' p\",\n  nextWeek: \"eeee p\",\n  other: 'P'\n}\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token]\n}\n\nvar locale = {\n  code: 'kk',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1\n  }\n}\n\nmodule.exports = locale\n```\n\n----------------------------------------\n\nTITLE: Displaying Date Formatting and Parsing Examples in Markdown\nDESCRIPTION: This markdown table illustrates the behavior of date-fns `format` and `parse` functions with various token strings. It covers formatting for calendar year, local week-numbering year, quarters, and months in different styles.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lb/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                   | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987.                                             | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5.                                                | 0005-01-01T00:00:00.000Z |\n| Local week-numbering year       | Yo           | 1987-02-11T12:13:14.015Z | 1987.                                             | 1986-12-29T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 4.                                                | 0003-12-29T00:00:00.000Z |\n| Quarter (formatting)            | Qo           | 2019-01-01T12:13:14.015Z | 1.                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2.                                                | 2019-04-01T00:00:00.000Z |\n| Quarter (stand-alone)           | qo           | 2019-01-01T12:13:14.015Z | 1.                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2.                                                | 2019-04-01T00:00:00.000Z |\n| Month (formatting)              | Mo           | 2019-01-11T12:13:14.015Z | 1.                                                | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2.                                                | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Day of Week Formatting Tokens\nDESCRIPTION: Multiple tokens for representing days of the week with varying levels of detail and localization\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fy/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nE - Day of week (formatting)\ni - ISO day of week\ne - Local day of week\nc - Local day of week (stand-alone)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating date-fns format and parse functions with various tokens\nDESCRIPTION: This markdown table illustrates the usage of different date and time formatting tokens in date-fns, showing the input date, the token string, and the resulting output for both 'format' and 'parse' functions. It covers various aspects of date formatting including years, quarters, months, and their variations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/gl/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                     | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | --------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987º                                               | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5º                                                  | 0005-01-01T00:00:00.000Z |\n| Local week-numbering year       | Yo           | 1987-02-11T12:13:14.015Z | 1987º                                               | 1986-12-29T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5º                                                  | 0004-12-27T00:00:00.000Z |\n| Quarter (formatting)            | Qo           | 2019-01-01T12:13:14.015Z | 1º                                                  | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2º                                                  | 2019-04-01T00:00:00.000Z |\n|                                 | QQQ          | 2019-01-01T12:13:14.015Z | T1                                                  | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | T2                                                  | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQ         | 2019-01-01T12:13:14.015Z | 1º trimestre                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2º trimestre                                        | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQQ        | 2019-01-01T12:13:14.015Z | 1                                                   | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2                                                   | 2019-04-01T00:00:00.000Z |\n| Quarter (stand-alone)           | qo           | 2019-01-01T12:13:14.015Z | 1º                                                  | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2º                                                  | 2019-04-01T00:00:00.000Z |\n|                                 | qqq          | 2019-01-01T12:13:14.015Z | T1                                                  | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | T2                                                  | 2019-04-01T00:00:00.000Z |\n|                                 | qqqq         | 2019-01-01T12:13:14.015Z | 1º trimestre                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2º trimestre                                        | 2019-04-01T00:00:00.000Z |\n| Month (formatting)              | Mo           | 2019-01-11T12:13:14.015Z | 1º                                                  | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2º                                                  | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | 3º                                                  | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | 4º                                                  | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | 5º                                                  | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | 6º                                                  | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | 7º                                                  | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | 8º                                                  | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | 9º                                                  | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | 10º                                                 | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | 11º                                                 | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | 12º                                                 | 2019-12-01T00:00:00.000Z |\n|                                 | MMM          | 2019-01-11T12:13:14.015Z | xan                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | feb                                                 | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | mar                                                 | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | abr                                                 | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | mai                                                 | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | xun                                                 | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | xul                                                 | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | ago                                                 | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | set                                                 | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | out                                                 | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | nov                                                 | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | dec                                                 | 2019-12-01T00:00:00.000Z |\n|                                 | MMMM         | 2019-01-11T12:13:14.015Z | xaneiro                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | febreiro                                            | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | marzo                                               | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | abril                                               | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | maio                                                | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | xuño                                                | Invalid Date             |\n|                                 |              | 2019-07-10T12:13:14.015Z | xullo                                               | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | agosto                                              | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | setembro                                            | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | outubro                                             | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | novembro                                            | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | decembro                                            | 2019-12-01T00:00:00.000Z |\n|                                 | MMMMM        | 2019-01-11T12:13:14.015Z | e                                                   | Invalid Date             |\n|                                 |              | 2019-02-11T12:13:14.015Z | f                                                   | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | m                                                   | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | a                                                   | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | m                                                   | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | j                                                   | Invalid Date             |\n```\n\n----------------------------------------\n\nTITLE: Matching Ordinal Number Pattern (en-US)\nDESCRIPTION: This snippet demonstrates `matchOrdinalNumberPattern` for the `en-US` locale, which includes both ordinal and non-ordinal numbers. The regex matches numbers followed by 'th', 'st', 'nd', or 'rd'.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// In `en-US` locale:\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\n```\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Reference Table\nDESCRIPTION: A markdown table demonstrating the behavior of various date formatting tokens including yo, Yo, Qo, QQQ, QQQQ, QQQQQ, Mo, MMM, MMMM, and MMMMM with Indonesian locale. Shows both format and parse results for different date inputs.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/id/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                         | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | --------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | ke-1987                                 | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | ke-5                                    | 0005-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Defining Croatian Locale for date-fns in JavaScript\nDESCRIPTION: This code snippet exports the Croatian locale configuration for date-fns. It includes definitions for month names, day names, and various date formatting options specific to the Croatian language.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/hr/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst locale = {\n  code: 'hr',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1\n  }\n}\n\nexport default locale\n```\n\n----------------------------------------\n\nTITLE: Formatting Long Localized Time with 'p' Token - JavaScript\nDESCRIPTION: This code snippet demonstrates how to format dates using the 'p' token in date-fns, which outputs the time in short format (12-hour clock) without seconds.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/gd/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n| Long localized time             | p            | 1987-01-11T12:13:14.015Z | 12:13 F.                                                        | Invalid Date             |\n|                                 |              | 1987-02-11T12:13:14.015Z | 12:13 F.                                                        | Invalid Date             |\n|                                 |              | 1987-03-11T12:13:14.015Z | 12:13 F.                                                        | Invalid Date             |\n|                                 |              | 1987-04-11T12:13:14.015Z | 12:13 F.                                                        | Invalid Date             |\n|                                 |              | 1453-05-29T23:59:59.999Z | 11:59 F.                                                        | Invalid Date             |\n|                                 |              | 1987-06-11T12:13:14.015Z | 12:13 F.                                                        | Invalid Date             |\n|                                 |              | 1987-07-11T12:13:14.015Z | 12:13 F.                                                        | Invalid Date             |\n|                                 |              | 1987-08-11T12:13:14.015Z | 12:13 F.                                                        | Invalid Date             |\n|                                 |              | 1987-09-11T12:13:14.015Z | 12:13 F.                                                        | Invalid Date             |\n|                                 |              | 1987-10-11T12:13:14.015Z | 12:13 F.                                                        | Invalid Date             |\n|                                 |              | 1987-11-11T12:13:14.015Z | 12:13 F.                                                        | Invalid Date             |\n|                                 |              | 1987-12-11T12:13:14.015Z | 12:13 F.                                                        | Invalid Date             |\n```\n\n----------------------------------------\n\nTITLE: Time Period Formatting (AM/PM)\nDESCRIPTION: Tests different formatting tokens for representing morning and afternoon periods, including variations in capitalization and punctuation\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ro/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Tokens: a, b, bb, bbb, bbbb, bbbbb\n// Demonstrates formatting of AM/PM periods with different styles\n```\n\n----------------------------------------\n\nTITLE: Formatting and Parsing Date Components in Esperanto\nDESCRIPTION: This table demonstrates how different date components are formatted and parsed using various token strings in the Esperanto locale. It covers calendar year, local week-numbering year, quarter (formatting and stand-alone), and month (formatting).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/eo/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                                | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | -------------------------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987-a                                                         | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5-a                                                            | 0005-01-01T00:00:00.000Z |\n| Local week-numbering year       | Yo           | 1987-02-11T12:13:14.015Z | 1987-a                                                         | 1986-12-29T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 4-a                                                            | 0003-12-29T00:00:00.000Z |\n| Quarter (formatting)            | Qo           | 2019-01-01T12:13:14.015Z | 1-a                                                            | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2-a                                                            | 2019-04-01T00:00:00.000Z |\n|                                 | QQQ          | 2019-01-01T12:13:14.015Z | K1                                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | K2                                                             | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQ         | 2019-01-01T12:13:14.015Z | 1-a kvaronjaro                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2-a kvaronjaro                                                 | 2019-04-01T00:00:00.000Z |\n|                                 | QQQQQ        | 2019-01-01T12:13:14.015Z | 1                                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2                                                              | 2019-04-01T00:00:00.000Z |\n| Quarter (stand-alone)           | qo           | 2019-01-01T12:13:14.015Z | 1-a                                                            | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2-a                                                            | 2019-04-01T00:00:00.000Z |\n|                                 | qqq          | 2019-01-01T12:13:14.015Z | K1                                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | K2                                                             | 2019-04-01T00:00:00.000Z |\n|                                 | qqqq         | 2019-01-01T12:13:14.015Z | 1-a kvaronjaro                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-04-01T12:13:14.015Z | 2-a kvaronjaro                                                 | 2019-04-01T00:00:00.000Z |\n| Month (formatting)              | Mo           | 2019-01-11T12:13:14.015Z | 1-a                                                            | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2-a                                                            | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | 3-a                                                            | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | 4-a                                                            | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | 5-a                                                            | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | 6-a                                                            | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | 7-a                                                            | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | 8-a                                                            | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | 9-a                                                            | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | 10-a                                                           | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | 11-a                                                           | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | 12-a                                                           | 2019-12-01T00:00:00.000Z |\n|                                 | MMM          | 2019-01-11T12:13:14.015Z | jan                                                            | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | feb                                                            | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | mar                                                            | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | apr                                                            | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | maj                                                            | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | jun                                                            | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | jul                                                            | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | aŭg                                                            | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | sep                                                            | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | okt                                                            | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | nov                                                            | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | dec                                                            | 2019-12-01T00:00:00.000Z |\n|                                 | MMMM         | 2019-01-11T12:13:14.015Z | januaro                                                        | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | februaro                                                       | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | marto                                                          | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | aprilo                                                         | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | majo                                                           | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | junio                                                          | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | julio                                                          | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | aŭgusto                                                        | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | septembro                                                      | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | oktobro                                                        | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | novembro                                                       | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | decembro                                                       | 2019-12-01T00:00:00.000Z |\n|                                 | MMMMM        | 2019-01-11T12:13:14.015Z | J                                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | F                                                              | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Using formatRelative in date-fns for JavaScript\nDESCRIPTION: The formatRelative function formats a date relative to the given base date (typically now). It returns different formatted strings based on how close the date is to the base date.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nformatRelative(date, baseDate, [options])\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Table in Markdown\nDESCRIPTION: A markdown table showing different date formatting patterns with example inputs and outputs. Includes patterns for day of week formatting (E, EE, EEE, etc.), ISO day of week (io), local day of week (eo, eee, etc.), and AM/PM formatting (a, aa, aaa, etc.).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr-CA/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of week (formatting)        | E            | 2019-02-11T12:13:14.015Z | lun.                                            | 2019-02-11T00:00:00.000Z |\n|                                 |              | 2019-02-15T12:13:14.015Z | ven.                                            | 2019-02-15T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: ISO and Local Day of Week Patterns\nDESCRIPTION: Shows formatting patterns for ISO (i) and local (e) day of week representations with various format lengths.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IE/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| ISO/Local day of week | io/eo-iiiiii/eeeeee | 2019-02-11T12:13:14.015Z | 1st/Mon/Monday/M/Mo | 2019-02-11T00:00:00.000Z |\n|                      |                    | 2019-02-15T12:13:14.015Z | 5th/Fri/Friday/F/Fr | 2019-02-15T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Formatting Time Distance in Frisian Language\nDESCRIPTION: Test suite for formatDistance function showing localized time interval descriptions in Frisian with different configuration options\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fy/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nformatDistance(baseDate, comparisonDate, { includeSeconds: true, addSuffix: true })\n```\n\n----------------------------------------\n\nTITLE: Formatting Date in Locale EN\nDESCRIPTION: This snippet formats dates into a standard English representation, suitable for date-fns localization. It takes an ISO date string and outputs a formatted date string in English.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/sv/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n|                                 |              | 1987-07-11T12:13:14.015Z | 1987-07-11                                          | 1987-07-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Handling Date Formatting with Date-Fns in JavaScript\nDESCRIPTION: This snippet illustrates how to format dates into different string formats using the date-fns library. It shows the expected input as an ISO date string and outputs a formatted date string. Dependencies include the date-fns library for date manipulation. Inputs should be ISO formatted dates, and the output will be a string representation of the date and time, formatted according to different locales.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nl/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { format } = require('date-fns');\n\nconst formattedDate = format(new Date('1987-01-11T12:13:14.015Z'), 'dd-MM-yyyy HH:mm');\nconsole.log(formattedDate); // outputs formatted date\n```\n\n----------------------------------------\n\nTITLE: Formatting Strict Distance Between Dates\nDESCRIPTION: Test cases for formatDistanceStrict function showing time differences in various units with Occitan language pluralization\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/oc/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dates\": [\n    \"2006-01-01T00:00:00.000Z\",\n    \"2000-01-01T00:00:00.000Z\"\n  ],\n  \"result\": \"6 ans\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building date-fns TypeScript Examples\nDESCRIPTION: Commands to install dependencies and build the date-fns TypeScript examples. After running these commands, the compiled output will be available in the ./dist directory.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/examples/typescript/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Month Abbreviations Format (LLL pattern)\nDESCRIPTION: Testing three-letter month abbreviations (Jan through Dec) using the LLL pattern for standalone month representations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-ZA/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| | LLL | 2019-01-11T12:13:14.015Z | Jan | 2019-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Day of Week Formatting Tokens in Russian\nDESCRIPTION: Demonstrates different formatting tokens for representing days of the week in Russian locale, with variations in length and style\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ru/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Day of week formatting tokens (E)\n'E', 'EE', 'EEE': 'пнд'\n'EEEE': 'понедельник'\n'EEEEE': 'П'\n'EEEEEE': 'пн'\n```\n\n----------------------------------------\n\nTITLE: Formatting Time in Full\nDESCRIPTION: This snippet formats the time in a detailed format (HH:mm:ss), perfect for showing complete time information in a localized context.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/sv/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n|                                 | pp           | 1987-01-11T12:13:14.015Z | 12:13:14                                            | 1987-01-11T12:13:14.000Z |\n```\n\n----------------------------------------\n\nTITLE: Long Date Formatting in Spanish - Various Format Lengths\nDESCRIPTION: Demonstrates different levels of date formatting verbosity using P, PP, PPP, and PPPP patterns. Shows progression from numeric dates to full written dates with day names in Spanish.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/es/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Basic date format (P)\n1987-01-11T12:13:14.015Z → 11/01/1987\n\n// Abbreviated month format (PP)\n1987-01-11T12:13:14.015Z → 11 ene 1987\n\n// Full month format (PPP)\n1987-01-11T12:13:14.015Z → 11 de enero de 1987\n\n// Complete date format with day name (PPPP)\n1987-01-11T12:13:14.015Z → domingo, 11 de enero de 1987\n```\n\n----------------------------------------\n\nTITLE: Formatting Time Duration Representations\nDESCRIPTION: Converts duration objects into human-readable string representations of time periods\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-US/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## `formatDuration`\n```\n\n----------------------------------------\n\nTITLE: Month and Week Formatting Examples in Welsh\nDESCRIPTION: Table showing different date format patterns (Lo, LLL, LLLL, LLLLL, wo, Io) with their Welsh language outputs and corresponding date values. Includes stand-alone month names, abbreviated forms, and week numbering.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/cy/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Month (stand-alone)             | Lo           | 2019-01-11T12:13:14.015Z | 1af                                                      | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2ail                                                     | 2019-02-01T00:00:00.000Z |\n|                                 | LLL          | 2019-01-11T12:13:14.015Z | Ion                                                      | 2019-01-01T00:00:00.000Z |\n|                                 | LLLL         | 2019-01-11T12:13:14.015Z | Ionawr                                                   | 2019-01-01T00:00:00.000Z |\n|                                 | LLLLL        | 2019-01-11T12:13:14.015Z | I                                                        | 2019-01-01T00:00:00.000Z |\n| Local week of year              | wo           | 2019-01-01T12:13:14.015Z | 1af                                                      | 2018-12-30T00:00:00.000Z |\n| ISO week of year                | Io           | 2019-01-01T12:13:14.015Z | 1af                                                      | 2018-12-31T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Time Period Formatting Test Cases\nDESCRIPTION: Test cases showing different formatting options for AM/PM time periods using various format tokens (a, aaaaa, b, bb, bbb, bbbb, bbbbb).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-CA/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| AM, PM, noon, midnight | b | 2019-02-11T11:13:14.015Z | AM | 2019-02-11T00:00:00.000Z |\n| | | 2019-02-11T14:13:14.015Z | PM | 2019-02-11T12:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Localized Date Formatting Test Cases\nDESCRIPTION: Test data for verifying date formatting with different tokens and locales in Portuguese\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/pt/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: test_data\nCODE:\n```\nDate formatting test matrix for Portuguese locale with various dates from 1453 to 1987\n```\n\n----------------------------------------\n\nTITLE: Formatting Time in Short\nDESCRIPTION: This snippet outputs the time in a short format (HH:mm). It converts the time from the ISO date format into a localized hour and minute string.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/sv/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n| Long localized time             | p            | 1987-01-11T12:13:14.015Z | 12:13                                               | 1987-01-11T12:13:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Examples\nDESCRIPTION: Examples showing how different format patterns (b, bb, bbb, bbbb, bbbbb, B, BB, BBB, BBBB, BBBBB, ho, Ho, Ko, ko, mo, so, P) affect date output formatting. Includes AM/PM indicators, flexible day periods, hour formats, and localized dates.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/bs/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n|                                 |              | 2019-02-11T02:13:14.015Z | AM                                                 | 2019-02-11T00:00:00.000Z |\n| AM, PM, noon, midnight          | b            | 2019-02-11T11:13:14.015Z | AM                                                 | 2019-02-11T00:00:00.000Z |\n|                                 |              | 2019-02-11T14:13:14.015Z | PM                                                 | 2019-02-11T12:00:00.000Z |\n|                                 |              | 2019-02-11T19:13:14.015Z | PM                                                 | 2019-02-11T12:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Strict Date Distance Calculation - JavaScript\nDESCRIPTION: The `formatDistanceStrict` function calculates the distance between two dates without approximations, providing the exact difference in specified units such as hours. It includes options for adding a suffix to indicate past or future.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/eo/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example data displaying the results of `formatDistanceStrict` */\n\n| Date                     | Result      | `addSuffix: true` | With forced unit (i.e. `hour`) |\n| ------------------------ | ----------- | ----------------- | ------------------------------ |\n| 2006-01-01T00:00:00.000Z | 6 jaroj     | post 6 jaroj      | 52608 horoj                    |\n| 2005-01-01T00:00:00.000Z | 5 jaroj     | post 5 jaroj      | 43848 horoj                    |\n| 2004-01-01T00:00:00.000Z | 4 jaroj     | post 4 jaroj      | 35064 horoj                    |\n| 2003-01-01T00:00:00.000Z | 3 jaroj     | post 3 jaroj      | 26304 horoj                    |\n| 2002-01-01T00:00:00.000Z | 2 jaroj     | post 2 jaroj      | 17544 horoj                    |\n| 2001-06-01T00:00:00.000Z | 1 jaro      | post 1 jaro       | 12408 horoj                    |\n| 2001-02-01T00:00:00.000Z | 1 jaro      | post 1 jaro       | 9528 horoj                     |\n// ... more examples ...\n```\n\n----------------------------------------\n\nTITLE: Building date-fns with Webpack 4.x\nDESCRIPTION: Commands to install dependencies and build the date-fns project. The build output will be generated in the ./dist directory.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/examples/webpack/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Date Format Test Cases - Time Period Formatting\nDESCRIPTION: Test table demonstrating various date formatting patterns for time periods and numerical time components in Icelandic locale. Shows different format lengths and their corresponding outputs at various times of day.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/is/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 | aaaa         | 2019-02-11T11:13:14.015Z | fyrir hádegi                                               | 2019-02-11T00:00:00.000Z |\n|                                 |              | 2019-02-11T14:13:14.015Z | eftir hádegi                                               | 2019-02-11T12:00:00.000Z |\n|                                 |              | 2019-02-11T19:13:14.015Z | eftir hádegi                                               | 2019-02-11T12:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Time Formatting in Spanish - 24-hour Format\nDESCRIPTION: Shows time formatting using the 'p' pattern which outputs time in 24-hour format.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/es/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Time format (p)\n1987-01-11T12:13:14.015Z → 12:13\n1453-05-29T23:59:59.999Z → 23:59\n```\n\n----------------------------------------\n\nTITLE: Formatting Date in Locale PPP\nDESCRIPTION: This snippet provides a more detailed Swedish date format tailored to a conversational context. It is focused on transforming an ISO date into a full Swedish date representation.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/sv/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n|                                 | PPP          | 1987-01-11T12:13:14.015Z | 11 januari 1987                                     | 1987-01-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Month Formatting with Localized Tokens\nDESCRIPTION: Demonstrates month formatting using numeric and textual representations in Tamil, showcasing different token patterns for month display\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ta/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Month Tokens: Mo, MMM, MMMM, MMMMM\nformat(new Date('2019-01-11'), 'Mo') // Outputs: '1'\nformat(new Date('2019-01-11'), 'MMMM') // Outputs: 'ஜனவரி'\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Tests in Table Format\nDESCRIPTION: Table showing test cases for different date formatting patterns including basic (Pp), extended (PPpp), long (PPPppp) and full (PPPPpppp) formats. Each row shows an input date, the formatted output, and expected result or error status.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr-CH/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 | Pp           | 1987-01-11T12:13:14.015Z | 11.01.1987, 12:13                               | 1987-01-11T12:13:00.000Z |\n|                                 | PPpp         | 1987-01-11T12:13:14.015Z | 11 janv. 1987, 12:13:14                         | 1987-01-11T12:13:14.000Z |\n|                                 | PPPppp       | 1987-01-11T12:13:14.015Z | 11 janvier 1987 à 12:13:14 GMT+0                | Errored                  |\n|                                 | PPPPpppp     | 1987-01-11T12:13:14.015Z | dimanche 11 janvier 1987 à 12:13:14 GMT+00:00   | Errored                  |\n```\n\n----------------------------------------\n\nTITLE: Day of Week Formatting Patterns\nDESCRIPTION: Demonstrates various day of week formatting patterns (E, EE, EEE, EEEE, EEEEE, EEEEEE) and their outputs. Shows how different lengths of the pattern affect the formatted result.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/de-AT/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nE     // Mo.\nEE    // Mo.\nEEE   // Mo.\nEEEE  // Montag\nEEEEE // M\nEEEEEE // Mo\n```\n\n----------------------------------------\n\nTITLE: Date Format Testing - Flexible Day Periods\nDESCRIPTION: Test cases for flexible day period formatting using B tokens (B, BB, BBB, BBBB, BBBBB). Shows how times are formatted into morning, afternoon, and evening periods in French.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n2019-02-11T11:13:14.015Z | matin | Invalid Date\n2019-02-11T14:13:14.015Z | après-midi | Invalid Date\n2019-02-11T19:13:14.015Z | soir | 2019-02-11T17:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Month Stand-alone Format Patterns (Lo, LLL, LLLL, LLLLL)\nDESCRIPTION: Examples of different month formatting patterns showing ordinal numbers, abbreviated months, full month names, and single-letter representations in Danish locale\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/da/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Month (stand-alone)             | Lo           | 2019-01-11T12:13:14.015Z | 1.                                                   | 2019-01-01T00:00:00.000Z |\n|                                 | LLL          | 2019-01-11T12:13:14.015Z | jan.                                                 | 2019-01-01T00:00:00.000Z |\n|                                 | LLLL         | 2019-01-11T12:13:14.015Z | januar                                               | 2019-01-01T00:00:00.000Z |\n|                                 | LLLLL        | 2019-01-11T12:13:14.015Z | J                                                    | 2019-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Formatting Date in Locale PPPP\nDESCRIPTION: This snippet formats dates into an even more verbose Swedish representation, presenting weekdays and complete date formats. It is mainly used for displaying full date information in Swedish.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/sv/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n|                                 | PPPP         | 1987-01-11T12:13:14.015Z | söndag 11 januari 1987                              | 1987-01-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Quarter Formatting with Localized Tokens\nDESCRIPTION: Illustrates quarter formatting using various token patterns (Q, q) with different levels of verbosity and localization, showing quarter representations in Tamil\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ta/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Quarter Tokens: Qo, QQQ, QQQQ, QQQQQ\nformat(new Date('2019-01-01'), 'QQQQ') // Outputs: 'ஒன்றாம் காலாண்டு'\nformat(new Date('2019-04-01'), 'QQQ') // Outputs: 'காலா.2'\n```\n\n----------------------------------------\n\nTITLE: Date-Time Format Pattern Testing in Estonian\nDESCRIPTION: A comprehensive test table showing various date-time format patterns (p, pp, ppp, pppp, Pp, PPpp, PPPppp) and their outputs in Estonian locale. Each row shows the input ISO timestamp, formatted output, and expected result.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/et/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n|                                 |              | 1987-01-11T12:13:14.015Z | 12:13:14                      | 1987-01-11T12:13:14.000Z |\n|                                 | ppp          | 1987-01-11T12:13:14.015Z | 12:13:14 GMT+0                | Errored                  |\n|                                 | pppp         | 1987-01-11T12:13:14.015Z | 12:13:14 GMT+00:00            | Errored                  |\n| Combination of date and time    | Pp           | 1987-01-11T12:13:14.015Z | 11.01.1987. 12:13             | 1987-01-11T12:13:00.000Z |\n|                                 | PPpp         | 1987-01-11T12:13:14.015Z | 11. jaan 1987. 12:13:14       | 1987-01-11T12:13:14.000Z |\n|                                 | PPPppp       | 1987-01-11T12:13:14.015Z | 11. jaanuar 1987 kell 12:13:14 GMT+0 | Errored                  |\n```\n\n----------------------------------------\n\nTITLE: Week Numbering Formats\nDESCRIPTION: Shows different methods of calculating week numbers including local and ISO week numbering standards\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ro/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: date-fns\nCODE:\n```\nwo: Local week of year\nIo: ISO week of year\n```\n\n----------------------------------------\n\nTITLE: Formatting Date in Locale PP\nDESCRIPTION: This snippet formats dates into a localized Swedish representation, handling specific formats and linguistic adjustments. It converts an ISO date string into a specific format for the Swedish locale.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/sv/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n|                                 | PP           | 1987-01-11T12:13:14.015Z | 11 jan. 1987                                        | 1987-01-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Format Testing - Hour Formats\nDESCRIPTION: Test cases showing different hour format patterns including 12-hour clock, 24-hour clock, and variations with ordinal numbers in French.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n2019-02-11T11:13:14.015Z | 11ème | 2019-02-11T11:00:00.000Z\n2019-02-11T23:13:14.015Z | 23ème | 2019-02-11T23:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: ISO Day of Week Formatting\nDESCRIPTION: Demonstrates ISO day of week formatting patterns (io, iii, iiii, iiiii, iiiiii) showing different representations from ordinal numbers to abbreviated names.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IN/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nio-iiiiii | 2019-02-11T12:13:14.015Z | 1st-Mon-Monday-M-Mo\nio-iiiiii | 2019-02-15T12:13:14.015Z | 5th-Fri-Friday-F-Fr\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Table - AM/PM Variations\nDESCRIPTION: Shows different formatting options for AM/PM markers using tokens 'a', 'b', 'bb', 'bbb', 'bbbb', and 'bbbbb'. Demonstrates various representations from single letter to full spelled-out versions.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| AM, PM, noon, midnight | b | 2019-02-11T11:13:14.015Z | AM | 2019-02-11T00:00:00.000Z |\n| | | 2019-02-11T14:13:14.015Z | PM | 2019-02-11T12:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Week Formatting Patterns\nDESCRIPTION: Shows patterns for formatting local and ISO week of year using ordinal format (wo, Io). Demonstrates week numbering for start and end of year.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fi/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Local week of year              | wo           | 2019-01-01T12:13:14.015Z | 1.                                                        | 2018-12-31T00:00:00.000Z |\n|                                 |              | 2019-12-01T12:13:14.015Z | 48.                                                       | 2019-11-25T00:00:00.000Z |\n| ISO week of year                | Io           | 2019-01-01T12:13:14.015Z | 1.                                                        | 2018-12-31T00:00:00.000Z |\n|                                 |              | 2019-12-01T12:13:14.015Z | 48.                                                       | 2019-11-25T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Localized Date Formatting\nDESCRIPTION: Long localized date formatting demonstrating date representation in day.month.year format\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ru/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Token: P\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Tests - Weekdays and Time Periods\nDESCRIPTION: Test cases showing the formatting of dates using different patterns for weekdays (EE, EEE, EEEE, etc.), ISO weekdays (io, iii, iiii), local weekdays (eo, eee, eeee), and time period indicators (AM/PM).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/it/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 | EE           | 2019-02-11T12:13:14.015Z | lun                                           | 2019-02-11T00:00:00.000Z |\n|                                 |              | 2019-02-15T12:13:14.015Z | ven                                           | 2019-02-15T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Time Format Pattern Table - Date-fns\nDESCRIPTION: A detailed table showing various time format patterns and their outputs when applied to different timestamps. Includes patterns for AM/PM indicators, flexible day periods, and hour formatting.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/eu/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 2019-02-11T02:13:14.015Z | AM                                                               | 2019-02-11T00:00:00.000Z |\n|                                 | aa           | 2019-02-11T11:13:14.015Z | AM                                                               | 2019-02-11T00:00:00.000Z |\n|                                 |              | 2019-02-11T14:13:14.015Z | PM                                                               | 2019-02-11T12:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: AM/PM Period Formatting\nDESCRIPTION: Illustrates different formats (a, aa, aaa, aaaa, aaaaa) for displaying AM/PM period indicators, from standard to narrow representations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IE/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| AM, PM | a-aaaaa | 2019-02-11T11:13:14.015Z | AM/am/a.m./a | 2019-02-11T00:00:00.000Z |\n|         |         | 2019-02-11T14:13:14.015Z | PM/pm/p.m./p | 2019-02-11T12:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Table - Localized Dates\nDESCRIPTION: Shows localized date formatting using the 'P' token, demonstrating how dates are formatted in different months and years.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Long localized date | P | 1987-01-11T12:13:14.015Z | 11/01/1987 | 1987-01-11T00:00:00.000Z |\n| | | 1453-05-29T23:59:59.999Z | 29/05/1453 | 1453-05-29T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Day of Month Formatting\nDESCRIPTION: Illustrates various ways to format and display the day of the month with different contextual representations\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ro/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: date-fns\nCODE:\n```\ndo: Ordinal day of month\ndo MMMM: Day with full month name\n```\n\n----------------------------------------\n\nTITLE: Formatting Time Distance in date-fns\nDESCRIPTION: Demonstrates the formatDistance function from date-fns library with multiple time intervals and formatting options using Polish language\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/pl/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nformatDistance(baseDate, comparisonDate, options)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Browser in date-fns\nDESCRIPTION: Commands to run unit tests for date-fns in a browser environment, including options for regular and watch mode execution.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx vitest run --browser\n\n# Or in the watch mode:\nnpx vitest watch --browser\n```\n\n----------------------------------------\n\nTITLE: French Month Formatting Patterns - date-fns\nDESCRIPTION: Shows various patterns for formatting months in French, including ordinal numbers (Lo), abbreviated names (LLL), full names (LLLL), and single-letter representations (LLLLL). Demonstrates French-specific ordinal suffixes like 'er', 'ème'.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Month (stand-alone)             | Lo           | 2019-01-11T12:13:14.015Z | 1er                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2ème                                            | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Format Testing - Long Localized Dates\nDESCRIPTION: Test cases for long localized date formatting using P and PP tokens, showing different date representations in French format.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr/snapshot.md#2025-04-17_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n1987-01-11T12:13:14.015Z | 11/01/1987 | 1987-01-11T00:00:00.000Z\n1987-02-11T12:13:14.015Z | 11 janv. 1987 | 1987-01-11T00:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Pattern: AM/PM Indicators\nDESCRIPTION: Shows various AM/PM format patterns (a, aa, aaa, aaaa, aaaaa) with different styles from single letter to full periods with dots.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-ZA/snapshot.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nformat(new Date('2019-02-11T11:13:14.015Z'), 'a') // returns 'AM'\nformat(new Date('2019-02-11T14:13:14.015Z'), 'aaaa') // returns 'p.m.'\nformat(new Date('2019-02-11T19:13:14.015Z'), 'aaaaa') // returns 'p'\n```\n\n----------------------------------------\n\nTITLE: Indonesian Day Formatting Patterns\nDESCRIPTION: Illustrates patterns for day of month, full date formats with month names, and day of week in Indonesian\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/id/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ndo: ke-1, ke-11, ke-28\ndo MMMM: ke-1 Februari, ke-11 Februari, ke-28 Februari\nE/EE/EEE: Sen, Jum\nEEEE: Senin\n```\n\n----------------------------------------\n\nTITLE: Quarter Formatting Variations\nDESCRIPTION: Explores different quarter formatting tokens (Q series) with various representation styles, including numeric, abbreviated, and full text representations\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/tr/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Quarter formatting tokens: Qo, QQQ, QQQQ, QQQQQ\nformat(new Date('2019-01-01'), 'Qo')   // Returns '1.'\nformat(new Date('2019-01-01'), 'QQQ')  // Returns '1Ç'\nformat(new Date('2019-01-01'), 'QQQQ') // Returns 'İlk çeyrek'\nformat(new Date('2019-01-01'), 'QQQQQ') // Returns '1'\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Dates with date-fns in JavaScript\nDESCRIPTION: The formatRelative function outputs relative dates based on a reference date (e.g., 'now'). It formats dates into a form that describes their relationship to 'now,' such as 'yesterday' or 'next week.' Required dependencies include the date-fns library for proper functioning.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/pl/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Sample output for formatRelative with 'now' as January 1st, 2000\n// Results include how various dates relate to the current date.\n```\n\n----------------------------------------\n\nTITLE: Month Formatting Test Cases\nDESCRIPTION: Test cases showing various month formatting patterns including ordinal (Lo), abbreviated (LLL), full name (LLLL), and single letter (LLLLL) formats. Each test case includes input date, expected output, and expected parsed date.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/gd/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n|                                 | Lo           | 2019-01-11T12:13:14.015Z | 1d                                                              | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2na                                                             | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Combining Date and Time Formatting - JavaScript\nDESCRIPTION: This snippet showcases the combination of date and time in a specific localized format (Pp) to achieve a comprehensive date-time representation.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/gd/snapshot.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n| Combination of date and time    | Pp           | 1987-01-11T12:13:14.015Z | 01/11/1987, 12:13 F.                                            | Invalid Date             |\n|                                 |              | 1987-02-11T12:13:14.015Z | 02/11/1987, 12:13 F.                                            | Invalid Date             |\n|                                 |              | 1987-03-11T12:13:14.015Z | 03/11/1987, 12:13 F.                                            | Invalid Date             |\n|                                 |              | 1987-04-11T12:13:14.015Z | 04/11/1987, 12:13 F.                                            | Invalid Date             |\n|                                 |              | 1453-05-29T23:59:59.999Z | 05/29/1453, 11:59 F.                                            | Invalid Date             |\n|                                 |              | 1987-06-11T12:13:14.015Z | 06/11/1987, 12:13 F.                                            | Invalid Date             |\n|                                 |              | 1987-07-11T12:13:14.015Z | 07/11/1987, 12:13 F.                                            | Invalid Date             |\n|                                 |              | 1987-08-11T12:13:14.015Z | 08/11/1987, 12:13 F.                                            | Invalid Date             |\n|                                 |              | 1987-09-11T12:13:14.015Z | 09/11/1987, 12:13 F.                                            | Invalid Date             |\n|                                 |              | 1987-10-11T12:13:14.015Z | 10/11/1987, 12:13 F.                                            | Invalid Date             |\n```\n\n----------------------------------------\n\nTITLE: Time Components Format Examples\nDESCRIPTION: Examples of formatting minutes and seconds with ordinal indicators using 'mo' and 'so' patterns.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-GB/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Minute                          | mo           | 2019-01-01T12:01:14.015Z | 1st                                               | 2019-01-01T12:01:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Day of Week Formatting Patterns in Indonesian\nDESCRIPTION: Shows different formats for days of the week in Indonesian, including full names (Senin, Jumat), abbreviated forms (Sen, Jum), and single letter representations (S, J)\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/id/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nEEEE: Senin, Jumat\nEEEEE: S, J\nEEEEEE: Sen, Jum\nio: ke-1, ke-5\niii: Sen, Jum\niiii: Senin, Jumat\n```\n\n----------------------------------------\n\nTITLE: Calendar Year Formatting and Parsing\nDESCRIPTION: Illustrates how calendar year tokens (yo) work with format and parse methods, showing different year representations including single and multi-digit years\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/tr/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Calendar year tokens: yo\nformat(new Date('1987-02-11'), 'yo') // Returns '1987.'\nparse('1987.', 'yo', new Date()) // Returns 1987-01-01T00:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Month Formatting Patterns with date-fns\nDESCRIPTION: Demonstrates different month formatting patterns including ordinal (1st-12th), short form (Jan-Dec), full names (January-December), and single letter (J-D) representations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-CA/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Month (stand-alone)             | Lo           | 2019-01-11 | 1st      |\n| Month (stand-alone)             | LLL          | 2019-01-11 | Jan      |\n| Month (stand-alone)             | LLLL         | 2019-01-11 | January  |\n| Month (stand-alone)             | LLLLL        | 2019-01-11 | J        |\n```\n\n----------------------------------------\n\nTITLE: Long Localized Date Parsing\nDESCRIPTION: Test scenarios for parsing long-format localized dates, showing date representation across different months and years.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/vi/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n| Long localized date | P |\n```\n\n----------------------------------------\n\nTITLE: French Week Formatting Patterns - date-fns\nDESCRIPTION: Demonstrates formatting patterns for local and ISO week numbers in French, showing ordinal number formatting with feminine endings ('ère', 'ème').\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Local week of year              | wo           | 2019-01-01T12:13:14.015Z | 1ère                                            | 2018-12-31T00:00:00.000Z |\n|                                 |              | 2019-12-01T12:13:14.015Z | 48ème                                           | 2019-11-25T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date and Time Combination Pattern\nDESCRIPTION: Formats date and time together using pattern 'Pp', showing date in DD.MM.YYYY format followed by time in 24-hour format.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fi/snapshot.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Combination of date and time    | Pp           | 1987-01-11T12:13:14.015Z | 11.1.1987 12.13                                           | 1987-01-11T12:13:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: AM/PM Format Patterns\nDESCRIPTION: Shows various formats for displaying AM/PM markers (a, b, bb, bbb, bbbb, bbbbb) with different levels of abbreviation and formatting.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-AU/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFormat 'a': AM -> a, PM -> p\nFormat 'b'/'bb': AM -> AM, PM -> PM\nFormat 'bbb': AM -> am, PM -> pm\nFormat 'bbbb': AM -> a.m., PM -> p.m.\nFormat 'bbbbb': AM -> a, PM -> p\n```\n\n----------------------------------------\n\nTITLE: AM/PM Format Patterns in Indonesian\nDESCRIPTION: Demonstrates various AM/PM format patterns including standard AM/PM markers, lowercase variations (am/pm), and their usage across different times of day\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/id/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: text\nCODE:\n```\na: AM, PM\naa: AM, PM\naaa: am, pm\naaaa: AM, PM\naaaaa: AM, PM\n```\n\n----------------------------------------\n\nTITLE: Local Week-Numbering Year Processing\nDESCRIPTION: Demonstrates local week-numbering year tokens (Yo) and their behavior in format and parse operations, showing how they differ from standard calendar year tokens\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/tr/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Local week-numbering year tokens: Yo\nformat(new Date('1987-02-11'), 'Yo') // Returns '1987.'\nparse('1987.', 'Yo', new Date()) // Returns 1986-12-29T00:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Date Localization Test Matrix for Indonesian Formats\nDESCRIPTION: Test suite for date formatting tokens demonstrating localized date representations across various formats and time periods\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/id/snapshot.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Test cases for date formatting tokens\n// Covers day periods, hours, minutes, seconds, and long date formats\n```\n\n----------------------------------------\n\nTITLE: Formatting Long Localized Time with 'pppp' Token - JavaScript\nDESCRIPTION: This snippet shows how to use the 'pppp' token in date-fns for formatting that includes detailed time zone information.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/gd/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n|                                 | pppp         | 1987-01-11T12:13:14.015Z | 12:13:14 F. GMT+00:00                                           | Invalid Date             |\n|                                 |              | 1987-02-11T12:13:14.015Z | 12:13:14 F. GMT+00:00                                           | Invalid Date             |\n|                                 |              | 1987-03-11T12:13:14.015Z | 12:13:14 F. GMT+00:00                                           | Invalid Date             |\n|                                 |              | 1987-04-11T12:13:14.015Z | 12:13:14 F. GMT+00:00                                           | Invalid Date             |\n|                                 |              | 1453-05-29T23:59:59.999Z | 11:59:59 F. GMT+00:00                                           | Invalid Date             |\n|                                 |              | 1987-06-11T12:13:14.015Z | 12:13:14 F. GMT+00:00                                           | Invalid Date             |\n|                                 |              | 1987-07-11T12:13:14.015Z | 12:13:14 F. GMT+00:00                                           | Invalid Date             |\n|                                 |              | 1987-08-11T12:13:14.015Z | 12:13:14 F. GMT+00:00                                           | Invalid Date             |\n|                                 |              | 1987-09-11T12:13:14.015Z | 12:13:14 F. GMT+00:00                                           | Invalid Date             |\n|                                 |              | 1987-10-11T12:13:14.015Z | 12:13:14 F. GMT+00:00                                           | Invalid Date             |\n|                                 |              | 1987-11-11T12:13:14.015Z | 12:13:14 F. GMT+00:00                                           | Invalid Date             |\n|                                 |              | 1987-12-11T12:13:14.015Z | 12:13:14 F. GMT+00:00                                           | Invalid Date             |\n```\n\n----------------------------------------\n\nTITLE: Time Formatting Token pp\nDESCRIPTION: Demonstrates detailed localized time formatting with hours, minutes, and seconds\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lb/snapshot.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Example: 12:13:14, 23:59:59\n```\n\n----------------------------------------\n\nTITLE: Indonesian Month Formatting Patterns\nDESCRIPTION: Demonstrates different formatting patterns for months in Indonesian, including ordinal (ke-), abbreviated (Jan, Feb), full names (Januari, Februari), and single letter representations\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/id/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nLo: ke-1 to ke-12\nLLL: Jan, Feb, Mar, Apr, Mei, Jun, Jul, Agt, Sep, Okt, Nov, Des\nLLLL: Januari, Februari, Maret, April, Mei, Juni, Juli, Agustus, September, Oktober, November, Desember\nLLLLL: J, F, M, A, M, J, J, A, S, O, N, D\n```\n\n----------------------------------------\n\nTITLE: Month Stand-alone Formatting Tokens\nDESCRIPTION: Demonstrates different formatting tokens for representing months in stand-alone format, including numeric and abbreviated representations\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/sk/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: tokens\nCODE:\n```\nLo: Numeric month (1., 2., 3...)\nLLL: Abbreviated month name (jan, feb, mar...)\nLLLL: Full month name (január, február, marec...)\nLLLLL: Single character month initial (j, f, m...)\n```\n\n----------------------------------------\n\nTITLE: Hour Token Parsing\nDESCRIPTION: Test suite for parsing hour tokens with different range representations, including [1-12], [0-23], [0-11], and [1-24] formats.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/vi/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n| Hour [1-12], [0-23], [0-11], [1-24] | ho, Ho, Ko, ko |\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Pattern Reference Table\nDESCRIPTION: Table showing formatted output for different date-fns patterns including 'p', 'pp', 'ppp', 'pppp', and 'Pp' formats. Demonstrates time formatting with varying levels of detail and timezone information.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/az/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Long localized time             | p            | 1987-01-11T12:13:14.015Z | 12:13                    | 1987-01-11T12:13:00.000Z |\n|                                 |              | 1987-02-11T12:13:14.015Z | 12:13                    | 1987-02-11T12:13:00.000Z |\n|                                 | pp           | 1987-01-11T12:13:14.015Z | 12:13:14                 | 1987-01-11T12:13:14.000Z |\n|                                 | ppp          | 1987-01-11T12:13:14.015Z | 12:13:14 GMT+0           | Errored                  |\n|                                 | pppp         | 1987-01-11T12:13:14.015Z | 12:13:14 GMT+00:00       | Errored                  |\n| Combination of date and time    | Pp           | 1987-01-11T12:13:14.015Z | 11.01.1987, 12:13        | 1987-01-11T12:13:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Week and Day of Month Formatting\nDESCRIPTION: Shows formatting tokens for local and ISO week numbers, and day of month representations with ordinal suffixes\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/gl/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Week of year tokens\\n// wo: Local week number with ordinal suffix\\n// Io: ISO week number with ordinal suffix\\n// do: Day of month with ordinal suffix\n```\n\n----------------------------------------\n\nTITLE: Using formatDistanceStrict in date-fns for JavaScript\nDESCRIPTION: The formatDistanceStrict function formats the distance between two dates in a strict way. It can display the distance in various units (years, months, days, hours, minutes, seconds) and can optionally add a suffix.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nformatDistanceStrict(date, baseDate, [options])\n```\n\n----------------------------------------\n\nTITLE: Long Localized Date Format Examples\nDESCRIPTION: Demonstrates long localized date formatting using the 'P' pattern across different months and years.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-GB/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Long localized date             | P            | 1987-01-11T12:13:14.015Z | 11/01/1987                                        | 1987-01-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Localized Date Pattern\nDESCRIPTION: Long localized date format (P) showing date in DD/MM/YYYY format.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-AU/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nFormat 'P': DD/MM/YYYY\nExample: 29/05/1453\n```\n\n----------------------------------------\n\nTITLE: Parsing Slovenian Date Formats\nDESCRIPTION: Demonstrates various date format patterns using localized Slovenian month names and formatting tokens\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/sl/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Date Formatting Patterns\n// PPP: Day, Month with Date, Year (e.g., \"nedelja, 11. januar 1987\")\n// p: Short time format (e.g., \"12:13\")\n// pp: Time with seconds (e.g., \"12:13:14\")\n// ppp: Time with timezone (e.g., \"12:13:14 GMT+0\")\n```\n\n----------------------------------------\n\nTITLE: Flexible Day Period Parsing\nDESCRIPTION: Test cases for parsing flexible day period tokens in alternative languages, showing localized representations of time segments.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/vi/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| Flexible day period | B, BB, BBB, BBBB, BBBBB |\n```\n\n----------------------------------------\n\nTITLE: Flexible Day Period Format Examples\nDESCRIPTION: Demonstrates flexible day period formatting with variations like 'in the morning', 'in the afternoon', 'in the evening', and 'at night' using B, BB, BBB, BBBB, and BBBBB patterns.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-GB/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Flexible day period             | B            | 2019-02-11T11:13:14.015Z | in the morning                                    | 2019-02-11T04:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Flexible Day Period Tokens\nDESCRIPTION: Tokens for representing flexible day periods in Russian with variations of morning, afternoon, evening, and night\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ru/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Tokens: B, BB, BBB, BBBB, BBBBB\n```\n\n----------------------------------------\n\nTITLE: French Day Formatting Patterns - date-fns\nDESCRIPTION: Shows patterns for formatting days of month and year in French, including combinations with month names and ordinal numbers with appropriate French suffixes.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of month                    | do           | 2019-02-01T12:13:14.015Z | 1er                                             | 2019-02-01T00:00:00.000Z |\n|                                 | do MMMM      | 2019-02-01T12:13:14.015Z | 1er février                                     | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Formatting Long Localized Time with 'ppp' Token - JavaScript\nDESCRIPTION: This snippet demonstrates formatting with the 'ppp' token in date-fns to produce a timestamp with seconds and timezone information.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/gd/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n|                                 | ppp          | 1987-01-11T12:13:14.015Z | 12:13:14 F. GMT+0                                               | Invalid Date             |\n|                                 |              | 1987-02-11T12:13:14.015Z | 12:13:14 F. GMT+0                                               | Invalid Date             |\n|                                 |              | 1987-03-11T12:13:14.015Z | 12:13:14 F. GMT+0                                               | Invalid Date             |\n|                                 |              | 1987-04-11T12:13:14.015Z | 12:13:14 F. GMT+0                                               | Invalid Date             |\n|                                 |              | 1453-05-29T23:59:59.999Z | 11:59:59 F. GMT+0                                               | Invalid Date             |\n|                                 |              | 1987-06-11T12:13:14.015Z | 12:13:14 F. GMT+0                                               | Invalid Date             |\n|                                 |              | 1987-07-11T12:13:14.015Z | 12:13:14 F. GMT+0                                               | Invalid Date             |\n|                                 |              | 1987-08-11T12:13:14.015Z | 12:13:14 F. GMT+0                                               | Invalid Date             |\n|                                 |              | 1987-09-11T12:13:14.015Z | 12:13:14 F. GMT+0                                               | Invalid Date             |\n|                                 |              | 1987-10-11T12:13:14.015Z | 12:13:14 F. GMT+0                                               | Invalid Date             |\n|                                 |              | 1987-11-11T12:13:14.015Z | 12:13:14 F. GMT+0                                               | Invalid Date             |\n|                                 |              | 1987-12-11T12:13:14.015Z | 12:13:14 F. GMT+0                                               | Invalid Date             |\n```\n\n----------------------------------------\n\nTITLE: Month Stand-alone Formatting Patterns in Finnish\nDESCRIPTION: Demonstrates different patterns for formatting months in Finnish using stand-alone format (Lo, LLL, LLLL, LLLLL). Shows variations from ordinal numbers to full month names.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fi/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Month (stand-alone)             | Lo           | 2019-01-11T12:13:14.015Z | 1.                                                        | 2019-01-01T00:00:00.000Z |\n|                                 | LLL          | 2019-01-11T12:13:14.015Z | tammi                                                     | 2019-01-01T00:00:00.000Z |\n|                                 | LLLL         | 2019-01-11T12:13:14.015Z | tammikuu                                                  | 2019-01-01T00:00:00.000Z |\n|                                 | LLLLL        | 2019-01-11T12:13:14.015Z | T                                                         | 2019-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Calendar Year Formatting with Token yo\nDESCRIPTION: Demonstrates formatting and parsing of calendar years using the 'yo' token, showing how different years are represented with ordinal suffixes\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ta/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Calendar Year Token: yo\nformat(new Date('1987-02-11'), 'yo') // Outputs: '1987'\nparse('1987', 'yo', new Date()) // Parses to 1987-01-01\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Test Matrix for date-fns\nDESCRIPTION: Test cases demonstrating various date formatting scenarios using different format tokens (pppp, Pp, PPpp, PPPppp, PPPPpppp) with ISO timestamp inputs across multiple years and months\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IE/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"testCases\": [\n    {\n      \"formatToken\": \"pppp\",\n      \"inputDate\": \"1987-01-11T12:13:14.015Z\",\n      \"expectedOutput\": \"12:13:14 GMT+00:00\"\n    },\n    {\n      \"formatToken\": \"Pp\",\n      \"inputDate\": \"1987-01-11T12:13:14.015Z\",\n      \"expectedOutput\": \"11/01/1987, 12:13\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Day Patterns (ru)\nDESCRIPTION: This snippet presents `matchDayPatterns` for the `ru` (Russian) locale, showcasing variations in short weekdays and months. The abbreviated pattern matches both 'вск' and 'вос' as abbreviations for воскресенье (Sunday).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// In `ru` locale:\nvar matchDayPatterns = {\n  narrow: /^[впсч]/i,\n  short: /^(вс|во|пн|по|вт|ср|чт|че|пт|пя|сб|су)\\.?/i,\n  abbreviated: /^(вск|вос|пнд|пон|втр|вто|срд|сре|чтв|чет|птн|пят|суб).?/i,\n  wide: /^(воскресень[ея]|понедельника?|вторника?|сред[аы]|четверга?|пятниц[аы]|суббот[аы])/i,\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Distances in French with date-fns\nDESCRIPTION: This code snippet shows a table of date distances formatted in French using the formatDistance function from date-fns. It includes examples with different options like includeSeconds and addSuffix.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr-CA/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## `formatDistance`\n\nIf now is January 1st, 2000, 00:00.\n\n| Date                     | Result             | `includeSeconds: true` | `addSuffix: true`         |\n| ------------------------ | ------------------ | ---------------------- | ------------------------- |\n| 2006-01-01T00:00:00.000Z | environ 6 ans      | environ 6 ans          | dans environ 6 ans        |\n| 2005-01-01T00:00:00.000Z | environ 5 ans      | environ 5 ans          | dans environ 5 ans        |\n| 2004-01-01T00:00:00.000Z | environ 4 ans      | environ 4 ans          | dans environ 4 ans        |\n| 2003-01-01T00:00:00.000Z | environ 3 ans      | environ 3 ans          | dans environ 3 ans        |\n| 2002-01-01T00:00:00.000Z | environ 2 ans      | environ 2 ans          | dans environ 2 ans        |\n| 2001-06-01T00:00:00.000Z | plus d'un an       | plus d'un an           | dans plus d'un an         |\n| 2001-02-01T00:00:00.000Z | environ 1 an       | environ 1 an           | dans environ 1 an         |\n| 2001-01-01T00:00:00.000Z | environ 1 an       | environ 1 an           | dans environ 1 an         |\n| 2000-06-01T00:00:00.000Z | 5 mois             | 5 mois                 | dans 5 mois               |\n| 2000-03-01T00:00:00.000Z | 2 mois             | 2 mois                 | dans 2 mois               |\n| 2000-02-01T00:00:00.000Z | environ 1 mois     | environ 1 mois         | dans environ 1 mois       |\n| 2000-01-15T00:00:00.000Z | 14 jours           | 14 jours               | dans 14 jours             |\n| 2000-01-02T00:00:00.000Z | 1 jour             | 1 jour                 | dans 1 jour               |\n| 2000-01-01T06:00:00.000Z | environ 6 heures   | environ 6 heures       | dans environ 6 heures     |\n| 2000-01-01T01:00:00.000Z | environ 1 heure    | environ 1 heure        | dans environ 1 heure      |\n| 2000-01-01T00:45:00.000Z | environ 1 heure    | environ 1 heure        | dans environ 1 heure      |\n| 2000-01-01T00:30:00.000Z | 30 minutes         | 30 minutes             | dans 30 minutes           |\n| 2000-01-01T00:15:00.000Z | 15 minutes         | 15 minutes             | dans 15 minutes           |\n| 2000-01-01T00:01:00.000Z | 1 minute           | 1 minute               | dans 1 minute             |\n| 2000-01-01T00:00:25.000Z | moins d'une minute | 30 secondes            | dans moins d'une minute   |\n| 2000-01-01T00:00:15.000Z | moins d'une minute | moins de 20 secondes   | dans moins d'une minute   |\n| 2000-01-01T00:00:05.000Z | moins d'une minute | moins de 10 secondes   | dans moins d'une minute   |\n| 2000-01-01T00:00:00.000Z | moins d'une minute | moins de 5 secondes    | il y a moins d'une minute |\n| 1999-12-31T23:59:55.000Z | moins d'une minute | moins de 10 secondes   | il y a moins d'une minute |\n| 1999-12-31T23:59:45.000Z | moins d'une minute | moins de 20 secondes   | il y a moins d'une minute |\n| 1999-12-31T23:59:35.000Z | moins d'une minute | 30 secondes            | il y a moins d'une minute |\n| 1999-12-31T23:59:00.000Z | 1 minute           | 1 minute               | il y a 1 minute           |\n| 1999-12-31T23:45:00.000Z | 15 minutes         | 15 minutes             | il y a 15 minutes         |\n| 1999-12-31T23:30:00.000Z | 30 minutes         | 30 minutes             | il y a 30 minutes         |\n| 1999-12-31T23:15:00.000Z | environ 1 heure    | environ 1 heure        | il y a environ 1 heure    |\n| 1999-12-31T23:00:00.000Z | environ 1 heure    | environ 1 heure        | il y a environ 1 heure    |\n| 1999-12-31T18:00:00.000Z | environ 6 heures   | environ 6 heures       | il y a environ 6 heures   |\n| 1999-12-30T00:00:00.000Z | 2 jours            | 2 jours                | il y a 2 jours            |\n| 1999-12-15T00:00:00.000Z | 17 jours           | 17 jours               | il y a 17 jours           |\n| 1999-12-01T00:00:00.000Z | environ 1 mois     | environ 1 mois         | il y a environ 1 mois     |\n| 1999-11-01T00:00:00.000Z | 2 mois             | 2 mois                 | il y a 2 mois             |\n| 1999-06-01T00:00:00.000Z | 7 mois             | 7 mois                 | il y a 7 mois             |\n| 1999-01-01T00:00:00.000Z | environ 1 an       | environ 1 an           | il y a environ 1 an       |\n| 1998-12-01T00:00:00.000Z | environ 1 an       | environ 1 an           | il y a environ 1 an       |\n| 1998-06-01T00:00:00.000Z | plus d'un an       | plus d'un an           | il y a plus d'un an       |\n| 1998-01-01T00:00:00.000Z | environ 2 ans      | environ 2 ans          | il y a environ 2 ans      |\n| 1997-01-01T00:00:00.000Z | environ 3 ans      | environ 3 ans          | il y a environ 3 ans      |\n| 1996-01-01T00:00:00.000Z | environ 4 ans      | environ 4 ans          | il y a environ 4 ans      |\n| 1995-01-01T00:00:00.000Z | environ 5 ans      | environ 5 ans          | il y a environ 5 ans      |\n| 1994-01-01T00:00:00.000Z | environ 6 ans      | environ 6 ans          | il y a environ 6 ans      |\n```\n\n----------------------------------------\n\nTITLE: AM/PM Period Formatting Patterns\nDESCRIPTION: Illustrates different AM/PM period formatting patterns (a, aa, aaa, aaaa, aaaaa) and their outputs. Shows how the format length affects the representation of time periods.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/de-AT/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\na     // vorm./nachm.\naa    // vorm./nachm.\naaa   // vorm./nachm.\naaaa  // vormittags/nachmittags\naaaaa // vm./nm.\n```\n\n----------------------------------------\n\nTITLE: Minute and Second Localization\nDESCRIPTION: Tokens for formatting minutes and seconds with localized ordinal representations\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ru/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Tokens: mo, so\n```\n\n----------------------------------------\n\nTITLE: Extended Time Formatting Pattern\nDESCRIPTION: Shows time formatting with seconds using pattern 'pp', displaying hours, minutes and seconds in 24-hour format with dots as separators.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fi/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 | pp           | 1987-01-11T12:13:14.015Z | 12.13.14                                                  | 1987-01-11T12:13:14.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Token PP\nDESCRIPTION: Demonstrates short localized date formatting with day, month, and year in abbreviated format\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lb/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Example: 11. Jan 1987, 11. Feb 1987, etc.\n```\n\n----------------------------------------\n\nTITLE: Month Formatting Patterns in Italian\nDESCRIPTION: Examples of different month formatting patterns using various format tokens (Lo, LLL, LLLL, LLLLL) showing numeric, abbreviated, full, and single-letter representations of months in Italian.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/it/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Month (stand-alone)             | Lo           | 2019-01-11T12:13:14.015Z | 1                                             |\n|                                 | LLL          | 2019-01-11T12:13:14.015Z | gen                                           |\n|                                 | LLLL         | 2019-01-11T12:13:14.015Z | gennaio                                       |\n|                                 | LLLLL        | 2019-01-11T12:13:14.015Z | G                                             |\n```\n\n----------------------------------------\n\nTITLE: Formatting Month Stand-alone Tokens in Dutch\nDESCRIPTION: Demonstrates different month representation tokens for standalone month formatting, including numeric, abbreviated, and full month names\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nl-BE/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Month stand-alone tokens (Lo, LLL, LLLL, LLLLL)\n// Examples: '1e', 'jan.', 'januari', 'J'\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Pattern: Day of Week\nDESCRIPTION: Demonstrates various weekday formatting patterns (E, EE, EEE, EEEE, EEEEE, EEEEEE) showing different lengths of day names from single letter to full name.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-ZA/snapshot.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nformat(new Date('2019-02-11T12:13:14.015Z'), 'EEEE') // returns 'Monday'\nformat(new Date('2019-02-11T12:13:14.015Z'), 'EEEEE') // returns 'M'\nformat(new Date('2019-02-11T12:13:14.015Z'), 'EEEEEE') // returns 'Mo'\n```\n\n----------------------------------------\n\nTITLE: Local Week of Year Format (wo pattern)\nDESCRIPTION: Testing local week of year formatting with ordinal numbers using the wo pattern.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-ZA/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Local week of year | wo | 2019-01-01T12:13:14.015Z | 1st | 2018-12-30T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Time with Timezone Formatting\nDESCRIPTION: Displays time with GMT timezone indicator using pattern 'ppp', showing hours, minutes, seconds and timezone offset.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fi/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 | ppp          | 1987-01-11T12:13:14.015Z | 12.13.14 GMT+0                                            | Errored                  |\n```\n\n----------------------------------------\n\nTITLE: Month Stand-alone Numeric Formatting (Lo)\nDESCRIPTION: Displays month as a numeric value, ranging from 1-12, using stand-alone formatting token Lo\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/uz/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Lo token: Month as numeric stand-alone value\n// Example formats: 1, 2, 3, ..., 12\n```\n\n----------------------------------------\n\nTITLE: Month Representations in Date Formatting\nDESCRIPTION: Demonstrates different month representation tokens including numeric, abbreviated, and full month names for localization\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nl/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Month formatting tokens:\n// Lo: Numeric month (1e, 2e, 3e...)\n// LLL: Abbreviated month names (jan., feb., mrt...)\n// LLLL: Full month names (januari, februari, maart...)\n// LLLLL: Single letter month abbreviations (J, F, M...)\n```\n\n----------------------------------------\n\nTITLE: Month Formatting Tokens\nDESCRIPTION: Demonstrates month formatting tokens with different representation styles, including numeric, abbreviated, and full month names\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/tr/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Month formatting tokens: Mo, MMM, MMMM, MMMMM\nformat(new Date('2019-01-11'), 'Mo')    // Returns '1.'\nformat(new Date('2019-01-11'), 'MMM')   // Returns 'Oca'\nformat(new Date('2019-01-11'), 'MMMM')  // Returns 'Ocak'\nformat(new Date('2019-01-11'), 'MMMMM') // Returns 'O'\n```\n\n----------------------------------------\n\nTITLE: Formatting Strict Time Distance in Icelandic\nDESCRIPTION: Calculates and formats time differences between dates with precise unit representation, supporting various time units and optional suffix\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/is/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## `formatDistanceStrict`\n```\n\n----------------------------------------\n\nTITLE: AM/PM Period Formatting\nDESCRIPTION: Different patterns (a-aaaaa) for formatting AM/PM period indicators with varying cases and formats.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/bs/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| AM, PM | a-aaaaa | 2019-02-11T11:13:14.015Z | AM/am | 2019-02-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Minute and Second Formatting\nDESCRIPTION: Tests minute and second formatting with token 'mo' and 'so', showing single and double-digit representations\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ro/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Tokens: mo, so\n// Demonstrates formatting of minutes and seconds\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Token PPPP\nDESCRIPTION: Demonstrates full localized date formatting including day of week, day, month, and year\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lb/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Example: Sonndeg, 11. Januar 1987, Mëttwoch, 11. Februar 1987, etc.\n```\n\n----------------------------------------\n\nTITLE: Month Abbreviated Formatting (LLL)\nDESCRIPTION: Provides abbreviated month names in a specific localization, showing shortened month representations\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/uz/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// LLL token: Abbreviated month names\n// Example formats: Yan, Fev, Mar, Apr, ...\n```\n\n----------------------------------------\n\nTITLE: Localized Date Formatting Test Matrix\nDESCRIPTION: A collection of test cases demonstrating date formatting for different dates, tokens, and locales, primarily focusing on International and Sami language representations\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/se/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: locale\nCODE:\n```\nTest matrix for date formatting with tokens like PPpp, PPPppp, and PPPPpppp\n```\n\n----------------------------------------\n\nTITLE: Week Formatting Patterns in Italian\nDESCRIPTION: Examples showing local and ISO week of year formatting using 'wo' and 'Io' tokens, demonstrating ordinal number representations in Italian.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/it/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Local week of year              | wo           | 2019-01-01T12:13:14.015Z | 1                                             |\n| ISO week of year                | Io           | 2019-01-01T12:13:14.015Z | 1                                             |\n```\n\n----------------------------------------\n\nTITLE: Hour Formatting Patterns\nDESCRIPTION: Different patterns for formatting hours: 12-hour format (ho), 24-hour format (Ho), 0-11 format (Ko), and 1-24 format (ko).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/hy/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nho -> 11֊րդ (1-12 format)\nHo -> 23֊րդ (0-23 format)\nKo -> 11֊րդ (0-11 format)\nko -> 23֊րդ (1-24 format)\n```\n\n----------------------------------------\n\nTITLE: Using date-fns FP Submodule via CDN\nDESCRIPTION: Demonstrates loading and using the functional programming (FP) submodule of date-fns via CDN.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/cdn.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/date-fns@3.6.0/fp/cdn.min.js\"></script>\n<script>\n  dateFns.fp.addDays(10, new Date(2014, 1, 11));\n  //=> Tue Feb 21 2014 00:00:00\n</script>\n```\n\n----------------------------------------\n\nTITLE: Month Formatting Table in Estonian\nDESCRIPTION: Table showing different month formatting patterns including stand-alone month formats (Lo, LLL, LLLL, LLLLL) with example dates and their Estonian representations\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/et/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Month (stand-alone)             | Lo           | 2019-01-11T12:13:14.015Z | 1.                                                   | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2.                                                   | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Month Single Letter Formatting (LLLLL)\nDESCRIPTION: Displays month as a single letter representation, useful for compact date displays\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/uz/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// LLLLL token: Single letter month representations\n// Example formats: Y, F, M, A, ...\n```\n\n----------------------------------------\n\nTITLE: Hour Format Test Cases\nDESCRIPTION: Test cases for different hour format patterns including [1-12], [0-23], [0-11], and [1-24] using ho, Ho, Ko, and ko tokens.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-CA/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Hour [1-12] | ho | 2019-02-11T11:13:14.015Z | 11th | 2019-02-11T11:00:00.000Z |\n| Hour [0-23] | Ho | 2019-02-11T23:13:14.015Z | 23rd | 2019-02-11T23:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Displaying Hour Formatting in Latvian Locale with date-fns\nDESCRIPTION: Examples of formatting hours in different patterns (0-23, 0-11, 1-24) using the 'Ho', 'Ko', and 'ko' format specifiers in the Latvian locale. Each example shows the input timestamp, formatted output, and normalized result.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lv/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Hour [0-23]                     | Ho           | 2019-02-11T11:13:14.015Z | 11.                                                            | 2019-02-11T11:00:00.000Z |\n|                                 |              | 2019-02-11T23:13:14.015Z | 23.                                                            | 2019-02-11T23:00:00.000Z |\n| Hour [0-11]                     | Ko           | 2019-02-11T11:13:14.015Z | 11.                                                            | 2019-02-11T11:00:00.000Z |\n|                                 |              | 2019-02-11T23:13:14.015Z | 11.                                                            | 2019-02-11T23:00:00.000Z |\n| Hour [1-24]                     | ko           | 2019-02-11T11:13:14.015Z | 11.                                                            | 2019-02-11T11:00:00.000Z |\n|                                 |              | 2019-02-11T23:13:14.015Z | 23.                                                            | 2019-02-11T23:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date-fns Time Format Test Table\nDESCRIPTION: A test table showing different time format patterns and their outputs for various dates. The table includes input timestamps, format patterns, expected formatted strings, and actual results.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/es/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 1987-06-11T12:13:14.015Z | 12:13                                                       | 1987-06-11T12:13:00.000Z |\n|                                 |              | 1987-07-11T12:13:14.015Z | 12:13                                                       | 1987-07-11T12:13:00.000Z |\n|                                 |              | 1987-08-11T12:13:14.015Z | 12:13                                                       | 1987-08-11T12:13:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Day of Week Formatting Patterns in date-fns\nDESCRIPTION: Shows various format patterns (E, EE, EEE, EEEE, EEEEE, EEEEEE) for displaying days of the week, ranging from single character to full name representations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// E/EE/EEE -> Mon, Fri\n// EEEE -> Monday, Friday\n// EEEEE -> M, F\n// EEEEEE -> Mo, Fr\n```\n\n----------------------------------------\n\nTITLE: AM/PM Period Formatting\nDESCRIPTION: Shows different AM/PM formatting patterns (a, aa, aaa, aaaa) with variations in capitalization and punctuation.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IN/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\na-aaaa | 2019-02-11T11:13:14.015Z | AM-AM-am-a.m.\na-aaaa | 2019-02-11T14:13:14.015Z | PM-PM-pm-p.m.\n```\n\n----------------------------------------\n\nTITLE: Hour Representation Tokens in Telugu\nDESCRIPTION: Demonstrates different hour formatting tokens showing how hours are represented with ordinal numbers in Telugu language\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/te/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: tel\nCODE:\n```\nho, Ho, Ko tokens for hour representation\n```\n\n----------------------------------------\n\nTITLE: Day of Year Formatting (Do)\nDESCRIPTION: Calculates and displays the sequential day number within the current year\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/uz/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Do token: Day of year numbering\n// Example formats: 42, 365\n```\n\n----------------------------------------\n\nTITLE: Date Format Testing - AM/PM Markers\nDESCRIPTION: Test cases showing AM/PM formatting with different token lengths (b, bb, bbb, bbbb, bbbbb). Demonstrates how the same time is formatted differently based on the token used.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n2019-02-11T19:13:14.015Z | PM | 2019-02-11T12:00:00.000Z\n2019-02-11T02:13:14.015Z | AM | 2019-02-11T00:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Formatting Minutes and Seconds in Latvian Locale with date-fns\nDESCRIPTION: Examples of formatting minutes and seconds using the 'mo' and 'so' format specifiers in the Latvian locale. The table shows different timestamps with their corresponding formatted minute and second values.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lv/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Minute                          | mo           | 2019-01-01T12:01:14.015Z | 1.                                                             | 2019-01-01T12:01:00.000Z |\n|                                 |              | 2019-04-01T12:55:14.015Z | 55.                                                            | 2019-04-01T12:55:00.000Z |\n| Second                          | so           | 2019-01-01T12:13:01.015Z | 1.                                                             | 2019-01-01T12:13:01.000Z |\n|                                 |              | 2019-04-01T12:13:55.015Z | 55.                                                            | 2019-04-01T12:13:55.000Z |\n```\n\n----------------------------------------\n\nTITLE: Week Formatting Patterns\nDESCRIPTION: Examples showing local and ISO week of year formatting using wo and Io patterns. Shows ordinal number representations of weeks.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lb/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Local week of year              | wo           | 2019-01-01T12:13:14.015Z | 1.                                                | 2018-12-31T00:00:00.000Z |\n| ISO week of year                | Io           | 2019-01-01T12:13:14.015Z | 1.                                                | 2018-12-31T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Table - Flexible Day Periods\nDESCRIPTION: Demonstrates flexible day period formatting using 'B' tokens of varying lengths. Shows how times are represented as 'in the morning', 'in the afternoon', 'in the evening', and 'at night'.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Flexible day period | B | 2019-02-11T11:13:14.015Z | in the morning | 2019-02-11T04:00:00.000Z |\n| | | 2019-02-11T14:13:14.015Z | in the afternoon | 2019-02-11T12:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Month Representation - Full Name (LLLL)\nDESCRIPTION: Displays complete month names in Tamil for each month of the year, using full month name format\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ta/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: DateToken\nCODE:\n```\nLLLL\n```\n\n----------------------------------------\n\nTITLE: Matching Day Patterns (eo)\nDESCRIPTION: This snippet provides an example of `matchDayPatterns` and `parseDayPatterns` configuration for the `eo` (Esperanto) locale, demonstrating handling of diacritical marks.  The patterns aim to match various forms of day names including grammatically incorrect versions.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// In `eo` locale:\nvar matchDayPatterns = {\n  narrow: /^[dlmĵjvs]/i,\n  short: /^(di|lu|ma|me|(ĵ|jx|jh|j)a|ve|sa)/i,\n  abbreviated: /^(dim|lun|mar|mer|(ĵ|jx|jh|j)a(ŭ|ux|uh|u)|ven|sab)/i,\n  wide: /^(diman(ĉ|cx|ch|c)o|lundo|mardo|merkredo|(ĵ|jx|jh|j)a(ŭ|ux|uh|u)do|vendredo|sabato)/i,\n};\nvar parseDayPatterns = {\n  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^(j|ĵ)/i, /^v/i, /^s/i],\n  any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^(j|ĵ)/i, /^v/i, /^s/i],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Hour Format Patterns\nDESCRIPTION: Various hour formatting options including 12-hour (ho), 24-hour (Ho), 0-11 (Ko), and 1-24 (ko) formats with ordinal indicators.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-AU/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nFormat 'ho': 1-12 with ordinal (11th)\nFormat 'Ho': 0-23 with ordinal (23rd)\nFormat 'Ko': 0-11 with ordinal (11th)\nFormat 'ko': 1-24 with ordinal (23rd)\n```\n\n----------------------------------------\n\nTITLE: Basic Time Formatting Pattern\nDESCRIPTION: Demonstrates basic time formatting using pattern 'p' showing hours and minutes in 24-hour format with dots as separators.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fi/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 1987-11-11T12:13:14.015Z | 12.13                                                     | 1987-11-11T12:13:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Time Formatting Token ppp\nDESCRIPTION: Demonstrates time formatting with timezone information\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lb/snapshot.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Example: 12:13:14 GMT+0\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Token Examples in date-fns\nDESCRIPTION: Markdown table demonstrating the behavior of date-fns format() and parse() functions with different tokens for formatting years, quarters, and months. Shows input dates, token strings, and their corresponding formatted and parsed outputs.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nl/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                           | Token string | Date                     | `format` result                                 | `parse` result           |\n| ------------------------------- | ------------ | ------------------------ | ----------------------------------------------- | ------------------------ |\n| Calendar year                   | yo           | 1987-02-11T12:13:14.015Z | 1987e                                           | 1987-01-01T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 5e                                              | 0005-01-01T00:00:00.000Z |\n| Local week-numbering year       | Yo           | 1987-02-11T12:13:14.015Z | 1987e                                           | 1986-12-29T00:00:00.000Z |\n|                                 |              | 0005-01-01T12:13:14.015Z | 4e                                              | 0003-12-29T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: French Month Formatting Table\nDESCRIPTION: Table showing date formatting patterns for months in French, including full names, abbreviations, and ordinal numbers. Includes format codes Lo, LLL, LLLL, and LLLLL.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr-CA/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Month (stand-alone)             | Lo           | 2019-01-11T12:13:14.015Z | 1er                                             | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2ème                                            | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Day of Month Format (do pattern)\nDESCRIPTION: Testing day of month formatting with ordinal numbers using the do pattern and combined do MMMM pattern for full date representation.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-ZA/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of month | do | 2019-02-01T12:13:14.015Z | 1st | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Flexible Day Period Patterns\nDESCRIPTION: Demonstrates the B/BB/BBB/BBBB/BBBBB formats for showing time of day in natural language (morning, afternoon, evening, night).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-AU/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMorning (4:00-12:00): 'in the morning'\nAfternoon (12:00-17:00): 'in the afternoon'\nEvening (17:00-21:00): 'in the evening'\nNight (21:00-4:00): 'at night'\n```\n\n----------------------------------------\n\nTITLE: Matching Ordinal Number Pattern (ru)\nDESCRIPTION: This snippet illustrates `matchOrdinalNumberPattern` for the `ru` (Russian) locale, considering grammatical genders.  The pattern captures ordinal numbers and their gender-specific suffixes.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/i18nContributionGuide.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// In `ru` locale:\nvar matchOrdinalNumberPattern = /^(\\d+)(-?(е|я|й|ое|ье|ая|ья|ый|ой|ий|ый))?/i;\n```\n```\n\n----------------------------------------\n\nTITLE: Flexible Day Period Test Cases\nDESCRIPTION: Test cases for flexible day period formatting using B, BB, BBB, BBBB, BBBBB tokens showing periods like 'in the morning', 'in the afternoon', 'in the evening', and 'at night'.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-CA/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Flexible day period | B | 2019-02-11T11:13:14.015Z | in the morning | 2019-02-11T04:00:00.000Z |\n| | | 2019-02-11T14:13:14.015Z | in the afternoon | 2019-02-11T12:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: AM/PM and Day Period Tokens\nDESCRIPTION: Demonstrate formatting tokens for representing morning, afternoon, and evening periods in different styles\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ru/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Tokens: b, bb, bbb, bbbb, bbbbb\n```\n\n----------------------------------------\n\nTITLE: Month Formatting Patterns in Italian\nDESCRIPTION: Examples of month formatting using Lo (numeric), LLL (abbreviated), LLLL (full name), and LLLLL (narrow) patterns with Italian locale settings. Shows output for all 12 months of the year.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/it-CH/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Month (stand-alone)             | Lo           | 2019-01-11 | 1 |\n| Month (stand-alone)             | LLL          | 2019-01-11 | gen |\n| Month (stand-alone)             | LLLL         | 2019-01-11 | gennaio |\n| Month (stand-alone)             | LLLLL        | 2019-01-11 | G |\n```\n\n----------------------------------------\n\nTITLE: Minute and Second Format Test Cases\nDESCRIPTION: Test cases for formatting minutes and seconds with ordinal numbers using mo and so tokens.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-CA/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Minute | mo | 2019-01-01T12:01:14.015Z | 1st | 2019-01-01T12:01:00.000Z |\n| Second | so | 2019-01-01T12:13:01.015Z | 1st | 2019-01-01T12:13:01.000Z |\n```\n\n----------------------------------------\n\nTITLE: Week of Year Formatting (wo and Io)\nDESCRIPTION: Provides week numbering using local and ISO week calculation methods, showing week position within the year\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/uz/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// wo/Io tokens: Week of year numbering\n// Example formats: Local and ISO week numbers (1-52)\n```\n\n----------------------------------------\n\nTITLE: Month Representation - Single Character (LLLLL)\nDESCRIPTION: Represents months using a single Tamil character abbreviation\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ta/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: DateToken\nCODE:\n```\nLLLLL\n```\n\n----------------------------------------\n\nTITLE: Relative Date Formatting\nDESCRIPTION: Test scenarios for formatRelative function demonstrating how dates are represented in Occitan relative to a reference date\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/oc/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"referenceDate\": \"2000-01-01T00:00:00.000Z\",\n  \"testDate\": \"2000-01-10T00:00:00.000Z\",\n  \"result\": \"10/01/2000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Month Stand-alone Formatting\nDESCRIPTION: Demonstrates different month formatting tokens (Lo, LLL, LLLL, LLLLL) with variations in month representation for localized date formatting\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/gl/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Month stand-alone tokens\\n// Lo: Numeric month with ordinal suffix\\n// LLL: Short month abbreviation\\n// LLLL: Full month name\\n// LLLLL: Single letter month representation\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Test Matrix\nDESCRIPTION: Explores various date-fns formatting tokens with different localization and precision levels, using multiple date samples across different years\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/pl/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Test cases for date-fns formatting tokens\n// Tokens tested: pppp, Pp, PPpp, PPPppp, PPPPpppp\n```\n\n----------------------------------------\n\nTITLE: Month Formatting with Ordinal Numbers (Lo pattern)\nDESCRIPTION: Testing month format with ordinal numbers (1st through 12th) using the Lo pattern. Shows standalone month representations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-ZA/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Month (stand-alone) | Lo | 2019-01-11T12:13:14.015Z | 1st | 2019-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Node.js in date-fns\nDESCRIPTION: Commands to run unit tests for date-fns in Node.js environment, including options for regular and watch mode execution.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx vitest run\n\n# Or in the watch mode:\nnpx vitest watch\n```\n\n----------------------------------------\n\nTITLE: Day of Month Formatting Patterns (do)\nDESCRIPTION: Examples of day of month formatting with ordinal numbers and combined formats\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/da/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of month                    | do           | 2019-02-01T12:13:14.015Z | 1.                                                   | 2019-02-01T00:00:00.000Z |\n|                                 | do MMMM      | 2019-02-01T12:13:14.015Z | 1. februar                                           | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Flexible Day Period Tokens in Telugu\nDESCRIPTION: Shows flexible day period tokens representing different times of day in Telugu language such as morning, noon, evening, and night\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/te/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: tel\nCODE:\n```\nB, BB, BBB, BBBB, BBBBB tokens for day period representation\n```\n\n----------------------------------------\n\nTITLE: Week and Day Formatting Tokens\nDESCRIPTION: Illustrates tokens for representing week numbers, local weeks, ISO weeks, and day of month/year formatting options\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/sk/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: tokens\nCODE:\n```\nwo: Local week of year (1., 48...)\nIo: ISO week of year (1., 48...)\ndo: Day of month (1., 11., 28...)\nDo: Day of year (42., 365...)\nE: Day of week abbreviation (po, pi...)\n```\n\n----------------------------------------\n\nTITLE: Time Component Ordinal Patterns\nDESCRIPTION: Formatting patterns for minutes (mo) and seconds (so) with ordinal indicators.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-AU/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nMinutes 'mo': 1st, 55th\nSeconds 'so': 1st, 55th\n```\n\n----------------------------------------\n\nTITLE: French Week Formatting Table\nDESCRIPTION: Table showing date formatting patterns for week numbers in French, including local week of year and ISO week of year with ordinal numbers. Uses format codes wo and Io.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr-CA/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Local week of year              | wo           | 2019-01-01T12:13:14.015Z | 1ère                                            | 2018-12-30T00:00:00.000Z |\n| ISO week of year                | Io           | 2019-01-01T12:13:14.015Z | 1ère                                            | 2018-12-31T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Day of Year Formatting Pattern\nDESCRIPTION: Shows how the 'Do' format pattern outputs the day of year with ordinal suffix. Examples show different dates and their corresponding day number in the year.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/de-AT/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDo // 2019-02-11 -> 42.\nDo // 2019-12-31 -> 365.\n```\n\n----------------------------------------\n\nTITLE: ISO Week of Year Format (Io pattern)\nDESCRIPTION: Testing ISO week of year formatting with ordinal numbers using the Io pattern.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-ZA/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| ISO week of year | Io | 2019-01-01T12:13:14.015Z | 1st | 2018-12-31T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: AM/PM Localization in Russian\nDESCRIPTION: Illustrates different formatting tokens for representing morning and afternoon/evening periods in Russian locale\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ru/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// AM/PM tokens (a)\n'a', 'aa': 'ДП' (morning)\n'a', 'aa': 'ПП' (afternoon/evening)\n'aaa': 'дп', 'пп'\n'aaaa': 'ДП', 'ПП'\n```\n\n----------------------------------------\n\nTITLE: Day Formatting Patterns in Italian\nDESCRIPTION: Examples of day formatting using do (day of month), Do (day of year), and E (day of week) patterns with Italian locale. Includes variations with month names and ordinal numbers.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/it-CH/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of month                    | do           | 2019-02-01 | 1 |\n| Day of month                    | do MMMM      | 2019-02-01 | 1 febbraio |\n| Day of year                     | Do           | 2019-02-11 | 42 |\n| Day of week (formatting)        | E            | 2019-02-11 | lun |\n```\n\n----------------------------------------\n\nTITLE: Flexible Day Period Localization\nDESCRIPTION: Explores localized day period representations using flexible tokens, specifically showing Romanian language variations for different times of day\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ro/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Tokens: B, BB, BBB, BBBB, BBBBB\n// Shows morning, afternoon, evening, night representations\n```\n\n----------------------------------------\n\nTITLE: Week Formatting Patterns in Italian\nDESCRIPTION: Examples of week formatting using wo (local week of year) and Io (ISO week of year) patterns. Shows how week numbers are formatted in the Italian locale.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/it-CH/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Local week of year              | wo           | 2019-01-01 | 1 |\n| ISO week of year                | Io           | 2019-01-01 | 1 |\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Pattern: Day of Year\nDESCRIPTION: Shows how the 'Do' pattern formats the day of year, returning values like '42nd' for Feb 11 and '365th' for Dec 31.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-ZA/snapshot.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nformat(new Date('2019-02-11T12:13:14.015Z'), 'Do') // returns '42nd'\nformat(new Date('2019-12-31T12:13:14.015Z'), 'Do') // returns '365th'\n```\n\n----------------------------------------\n\nTITLE: Testing date-fns Build and Linking\nDESCRIPTION: Steps to test the build of date-fns and link it to a project for testing, using npm link command.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build/package.sh\ncd lib\nnpm link\n\ncd YOUR_PROJECT\nnpm link date-fns\n```\n\n----------------------------------------\n\nTITLE: Hour Formatting Variations\nDESCRIPTION: Demonstrates different hour formatting tokens representing various hour ranges and numbering systems\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ro/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Tokens: ho, Ho, Ko, ko\n// Covers 1-12, 0-23, 0-11, and 1-24 hour representations\n```\n\n----------------------------------------\n\nTITLE: Local Week of Year (wo)\nDESCRIPTION: Shows local week numbering format, indicating position of weeks within the year\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ta/snapshot.md#2025-04-17_snippet_7\n\nLANGUAGE: DateToken\nCODE:\n```\nwo\n```\n\n----------------------------------------\n\nTITLE: Day of Year Formatting Pattern in date-fns\nDESCRIPTION: Demonstrates the 'Do' format pattern for displaying the day of year with ordinal numbers. Shows how the same date maps to different day numbers in the year.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Do - Day of year\n2019-02-11 -> 42nd\n2019-12-31 -> 365th\n```\n\n----------------------------------------\n\nTITLE: Checking Minified Bundle Size\nDESCRIPTION: Command to measure the gzipped size of the minified bundle in a human-readable format. The example shows an output size of 23.4 kB.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/examples/lodash-fp/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngzip-size dist/example.min.js | pretty-bytes\n#=> 23.4 kB\n```\n\n----------------------------------------\n\nTITLE: ISO Day of Week Formatting Patterns\nDESCRIPTION: Shows ISO day of week formatting with different pattern lengths (io, iii, iiii, iiiii, iiiiii). Demonstrates how the format affects the output from numeric to full day names.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/de-AT/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nio     // 1.\niii   // Mo.\niiii  // Montag\niiiii // M\niiiiii // Mo\n```\n\n----------------------------------------\n\nTITLE: Full Month Name Formatting (LLLL)\nDESCRIPTION: Renders full month names in a specific language localization, displaying complete month spellings\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/uz/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// LLLL token: Full month names\n// Example formats: Yanvar, Fevral, Mart, Aprel, ...\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Components with Tokens\nDESCRIPTION: Shows different token variations for representing date and time components, including week, day, month, and time period indicators\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/pt/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTokens include:\n- Io: ISO week of year\n- do: Day of month\n- Do: Day of year\n- E/e/c: Day of week\n- a: AM/PM indicator\n```\n\n----------------------------------------\n\nTITLE: Week of Year Formatting Tokens\nDESCRIPTION: Shows local and ISO week of year formatting with ordinal representation, useful for displaying week numbers in different contexts\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nl-BE/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Week of year tokens (wo, Io)\n// Examples: '1e', '48e'\n```\n\n----------------------------------------\n\nTITLE: Linting date-fns Code\nDESCRIPTION: Command to run the linter (ESLint) on the date-fns project, ensuring code adheres to the project's style guide.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Day Formatting Patterns in Italian\nDESCRIPTION: Examples of day formatting patterns showing day of month, day of year, and day of week representations in Italian using various tokens (do, Do, E).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/it/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of month                    | do           | 2019-02-01T12:13:14.015Z | 1                                             |\n| Day of year                     | Do           | 2019-02-11T12:13:14.015Z | 42                                            |\n| Day of week (formatting)        | E            | 2019-02-11T12:13:14.015Z | lun                                           |\n```\n\n----------------------------------------\n\nTITLE: Date-fns Build Size Statistics\nDESCRIPTION: Output showing the minimal and formatted build sizes for date-fns library. The minimal build is 1.41 KB while the formatted version is 6.18 KB.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/examples/webpack/README.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMinimal size: 1.41 kB\nFormat size: 6.18 kB\n```\n\n----------------------------------------\n\nTITLE: Week and Day Formatting in Estonian\nDESCRIPTION: Table showing local week of year (wo), ISO week of year (Io), and day of month (do) formatting patterns with example dates\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/et/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Local week of year              | wo           | 2019-01-01T12:13:14.015Z | 1.                                                   | 2018-12-31T00:00:00.000Z |\n| ISO week of year                | Io           | 2019-01-01T12:13:14.015Z | 1.                                                   | 2018-12-31T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Defining Month Names in Local Format - JavaScript\nDESCRIPTION: This snippet provides a localized representation of month names using various formats including long month names, abbreviations, and numeric formats.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nb/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n| Month (stand-alone)             | Lo           | 2019-01-11T12:13:14.015Z | 1.                                                   | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 2.                                                   | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | 3.                                                   | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | 4.                                                   | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | 5.                                                   | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | 6.                                                   | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | 7.                                                   | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | 8.                                                   | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | 9.                                                   | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | 10.                                                  | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | 11.                                                  | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | 12.                                                  | 2019-12-01T00:00:00.000Z |\n|                                 | LLL          | 2019-01-11T12:13:14.015Z | jan.                                                 | 2019-01-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | feb.                                                 | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-03-11T12:13:14.015Z | mars                                                 | 2019-03-01T00:00:00.000Z |\n|                                 |              | 2019-04-10T12:13:14.015Z | apr.                                                 | 2019-04-01T00:00:00.000Z |\n|                                 |              | 2019-05-10T12:13:14.015Z | mai                                                  | 2019-05-01T00:00:00.000Z |\n|                                 |              | 2019-06-10T12:13:14.015Z | juni                                                 | 2019-06-01T00:00:00.000Z |\n|                                 |              | 2019-07-10T12:13:14.015Z | juli                                                 | 2019-07-01T00:00:00.000Z |\n|                                 |              | 2019-08-10T12:13:14.015Z | aug.                                                 | 2019-08-01T00:00:00.000Z |\n|                                 |              | 2019-09-10T12:13:14.015Z | sep.                                                 | 2019-09-01T00:00:00.000Z |\n|                                 |              | 2019-10-10T12:13:14.015Z | okt.                                                 | 2019-10-01T00:00:00.000Z |\n|                                 |              | 2019-11-10T12:13:14.015Z | nov.                                                 | 2019-11-01T00:00:00.000Z |\n|                                 |              | 2019-12-10T12:13:14.015Z | des.                                                 | 2019-12-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Building Date-fns with Lodash FP\nDESCRIPTION: Commands to install dependencies and build the project from source. The build output will be generated in the ./dist directory.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/examples/lodash-fp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Week and Day Number Formatting\nDESCRIPTION: Shows tokens for representing week numbers and day positions within month and year, supporting local and ISO week numbering\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nl/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Week numbering tokens:\n// wo: Local week of year (1e, 48e)\n// Io: ISO week of year (1e, 48e)\n\n// Day of month tokens:\n// do: Ordinal day of month (1e, 11e, 28e)\n// Do: Day of year (42e, 365e)\n```\n\n----------------------------------------\n\nTITLE: Day Formatting with Month Context\nDESCRIPTION: Demonstrates day of month formatting with optional month name, showing ordinal representation and full month context\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nl-BE/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Day tokens (do, do MMMM)\n// Examples: '1e', '11e februari', '28e februari'\n```\n\n----------------------------------------\n\nTITLE: ISO Day of Week Formatting\nDESCRIPTION: ISO day of week formatting patterns (io-iiiiii) showing numeric and text representations of weekdays.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/bs/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| ISO day of week (formatting) | io-iiiiii | 2019-02-11T12:13:14.015Z | 1./pon/ponedjeljak/P | 2019-02-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Time Formatting Token p\nDESCRIPTION: Demonstrates short localized time formatting with hours and minutes\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lb/snapshot.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Example: 12:13, 23:59\n```\n\n----------------------------------------\n\nTITLE: ISO Week of Year (Io)\nDESCRIPTION: Displays ISO standard week numbering format for tracking weeks across years\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ta/snapshot.md#2025-04-17_snippet_8\n\nLANGUAGE: DateToken\nCODE:\n```\nIo\n```\n\n----------------------------------------\n\nTITLE: Day Formatting Patterns with date-fns\nDESCRIPTION: Illustrates day of month formatting using ordinal numbers (1st, 11th, etc).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-CA/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of month                    | do           | 2019-02-01 | 1st      |\n|                                 |              | 2019-02-11 | 11th     |\n```\n\n----------------------------------------\n\nTITLE: Day of Week Formatting Patterns\nDESCRIPTION: Demonstrates various formats (E, EE, EEE, EEEE, EEEEE, EEEEEE) for displaying days of the week, ranging from abbreviated to full names.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IE/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of week (formatting) | E-EEEEEE | 2019-02-11T12:13:14.015Z | Mon/Monday/M/Mo | 2019-02-11T00:00:00.000Z |\n|                        |          | 2019-02-15T12:13:14.015Z | Fri/Friday/F/Fr | 2019-02-15T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Month Representation - Numeric (Lo)\nDESCRIPTION: Displays numeric month representations from 1 to 12 for different dates, using the stand-alone month format\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ta/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: DateToken\nCODE:\n```\nLo\n```\n\n----------------------------------------\n\nTITLE: Indonesian Week Formatting Patterns\nDESCRIPTION: Shows formatting patterns for local and ISO week of year with Indonesian ordinal prefixes\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/id/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nwo: ke-1 to ke-48 (Local week of year)\nIo: ke-1 to ke-48 (ISO week of year)\n```\n\n----------------------------------------\n\nTITLE: Month Representation - Abbreviated (LLL)\nDESCRIPTION: Shows abbreviated month names in Tamil for each month of the year, using short month format\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ta/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: DateToken\nCODE:\n```\nLLL\n```\n\n----------------------------------------\n\nTITLE: Time Unit Formatting\nDESCRIPTION: Patterns for formatting minutes (mo) and seconds (so) with ordinal indicators.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/hy/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmo -> 55֊րդ (minutes)\nso -> 55֊րդ (seconds)\n```\n\n----------------------------------------\n\nTITLE: Day of Week Formatting Patterns\nDESCRIPTION: Shows various patterns (E, EE, EEE, EEEE, EEEEE, EEEEEE) for formatting days of the week, ranging from single letter to full name representations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IN/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nE-EEEEEE | 2019-02-11T12:13:14.015Z | Mon-Monday-M-Mo\nE-EEEEEE | 2019-02-15T12:13:14.015Z | Fri-Friday-F-Fr\n```\n\n----------------------------------------\n\nTITLE: Month Stand-alone Numeric Formatting\nDESCRIPTION: Demonstrates numeric representation of months in date formatting, using tokens Lo and LLL with variations in length and detail\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ro/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: date-fns\nCODE:\n```\nLo: Numeric month representation (1-12)\nLLL: Short month abbreviation\nLLLL: Full month name\nLLLLL: Single character month representation\n```\n\n----------------------------------------\n\nTITLE: AM/PM Token Formatting in Telugu\nDESCRIPTION: Demonstrates different formatting tokens for representing morning and afternoon periods in Telugu language\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/te/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: tel\nCODE:\n```\na, aa, aaa, aaaa, aaaaa tokens for AM/PM representation\n```\n\n----------------------------------------\n\nTITLE: Day of Month Formatting (do)\nDESCRIPTION: Renders day of month with optional ordinal suffix, supporting various detailed representations\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/uz/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// do token: Day of month with ordinal formatting\n// Example formats: 1st, 11th, 28th\n```\n\n----------------------------------------\n\nTITLE: Day of Month (do)\nDESCRIPTION: Represents the day of the month using ordinal formatting\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/ta/snapshot.md#2025-04-17_snippet_9\n\nLANGUAGE: DateToken\nCODE:\n```\ndo\n```\n\n----------------------------------------\n\nTITLE: Hour Format Examples\nDESCRIPTION: Shows different hour formatting patterns including [1-12], [0-23], [0-11], and [1-24] formats with ordinal indicators.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-GB/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Hour [1-12]                     | ho           | 2019-02-11T11:13:14.015Z | 11th                                              | 2019-02-11T11:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date Format Pattern Table - Time Components\nDESCRIPTION: Displays formatting patterns for minutes and seconds using 'mo' and 'so' tokens with ordinal indicators.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Minute | mo | 2019-01-01T12:01:14.015Z | 1st | 2019-01-01T12:01:00.000Z |\n| Second | so | 2019-01-01T12:13:01.015Z | 1st | 2019-01-01T12:13:01.000Z |\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Date Formatting with Date-Fns in JavaScript\nDESCRIPTION: This snippet demonstrates error handling scenarios when processing date and time. Each entry reflects dates that failed to parse correctly. The feedback provides insight into what went wrong, which helps in identifying invalid date formats or other issues.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nl/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    const errorDate = format(new Date('Invalid date'), 'yyyy-MM-dd');\n} catch (error) {\n    console.error('Errored:', error);\n}\n```\n\n----------------------------------------\n\nTITLE: Minute and Second Token Parsing\nDESCRIPTION: Test cases for extracting and parsing minute and second values from timestamps, demonstrating precise time component extraction.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/vi/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n| Minute, Second | mo, so |\n```\n\n----------------------------------------\n\nTITLE: Day of Year Formatting Tokens\nDESCRIPTION: Tokens representing the day number within a year, with ordinal and standard number formats\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fy/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDo - Ordinal day of year (e.g., 42nd)\ne - Numeric day of year\n```\n\n----------------------------------------\n\nTITLE: Displaying AM/PM Format Examples\nDESCRIPTION: Shows various formats for displaying AM/PM indicators with different lengths and styles. Includes formats like 'a', 'b', 'bb', 'bbb', 'bbbb', and 'bbbbb'.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-GB/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 2019-02-11T02:13:14.015Z | a                                                 | 2019-02-11T00:00:00.000Z |\n| AM, PM, noon, midnight          | b            | 2019-02-11T11:13:14.015Z | AM                                                | 2019-02-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Duration Formatting in Occitan\nDESCRIPTION: Test cases for formatDuration function showing how different time units are formatted and pluralized in Occitan\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/oc/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"durations\": [\n    {\"years\": 1},\n    {\"months\": 2},\n    {\"hours\": 1}\n  ],\n  \"results\": [\"1 an\", \"2 meses\", \"1 ora\"]\n}\n```\n\n----------------------------------------\n\nTITLE: AM/PM Representation Tokens\nDESCRIPTION: Tokens for displaying morning/afternoon time period with different case and length variations\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fy/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\na - AM/PM token with varying case and length representations\n```\n\n----------------------------------------\n\nTITLE: Day of Year Formatting Pattern\nDESCRIPTION: Demonstrates the 'Do' pattern for formatting the day of the year, showing ordinal numbers like '42nd' and '365th'.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IN/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDo | 2019-02-11T12:13:14.015Z | 42nd\nDo | 2019-12-31T12:13:14.015Z | 365th\n```\n\n----------------------------------------\n\nTITLE: Week Formatting Patterns with date-fns\nDESCRIPTION: Shows formatting patterns for local and ISO week of year using ordinal numbers (1st, 49th, etc).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-CA/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Local week of year              | wo           | 2019-01-01 | 1st      |\n| ISO week of year                | Io           | 2019-01-01 | 1st      |\n```\n\n----------------------------------------\n\nTITLE: Single Letter Month Format (LLLLL pattern)\nDESCRIPTION: Testing single-letter month representations using the LLLLL pattern, showing the first letter of each month name.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-ZA/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| | LLLLL | 2019-01-11T12:13:14.015Z | J | 2019-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: AM/PM Period Formatting in date-fns\nDESCRIPTION: Demonstrates different AM/PM format patterns (a, aa, aaa, aaaa) showing various ways to display the time period, from basic AM/PM to localized a.m./p.m. formats.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-NZ/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// a/aa -> AM, PM\n// aaa -> am, pm\n// aaaa -> a.m., p.m.\n```\n\n----------------------------------------\n\nTITLE: Time Component Formatting in Spanish - Hours, Minutes, Seconds\nDESCRIPTION: Examples of formatting hours (ko), minutes (mo), and seconds (so) with ordinal indicators in Spanish. Shows 24-hour format with º suffix.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/es/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Hour format (ko)\n2019-02-11T11:13:14.015Z → 11º\n2019-02-11T23:13:14.015Z → 23º\n\n// Minute format (mo)\n2019-01-01T12:01:14.015Z → 1º\n2019-04-01T12:55:14.015Z → 55º\n\n// Second format (so)\n2019-01-01T12:13:01.015Z → 1º\n2019-04-01T12:13:55.015Z → 55º\n```\n\n----------------------------------------\n\nTITLE: Full Month Names Format (LLLL pattern)\nDESCRIPTION: Testing full month names (January through December) using the LLLL pattern for standalone month representations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-ZA/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| | LLLL | 2019-01-11T12:13:14.015Z | January | 2019-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Executing the date-fns Release Script with Environment Variables\nDESCRIPTION: Command to run the release script with necessary environment variables including VERSION for the version number, APP_ENV set to production, and the path to Google application credentials. The script updates package.json which should not be committed after execution.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/docs/release.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv VERSION=\"vX.XX.X\" APP_ENV=\"production\" GOOGLE_APPLICATION_CREDENTIALS=\"secrets/production/key.json\" ./scripts/release/release.sh\n```\n\n----------------------------------------\n\nTITLE: Date-Time Formatting Test Table\nDESCRIPTION: A test table showing date formatting patterns and their outputs. Each row contains an input timestamp, formatting pattern, expected output and actual result. Tests various format strings including 'p', 'pp', 'ppp', 'pppp', 'Pp', 'PPpp', and 'PPPppp'.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/be-tarask/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                                 |              | 1987-09-11T12:13:14.015Z | 12:13:14                                            | 1987-09-11T12:13:14.000Z |\n|                                 |              | 1987-10-11T12:13:14.015Z | 12:13:14                                            | 1987-10-11T12:13:14.000Z |\n```\n\n----------------------------------------\n\nTITLE: Day of Week Formatting Patterns\nDESCRIPTION: Various patterns (E-EEEEEE) for formatting days of the week, showing different length outputs from abbreviated to full names.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/bs/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of week (formatting) | E-EEEEEE | 2019-02-11T12:13:14.015Z | pon/ponedjeljak/P | Invalid Date |\n```\n\n----------------------------------------\n\nTITLE: Day of Year Formatting Pattern\nDESCRIPTION: Pattern 'Do' formats the day of the year with ordinal suffix. Shows how dates are converted to day numbers in a year.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/bs/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of year | Do | 2019-02-11T12:13:14.015Z | 42. | 2019-02-11T00:00:00.000Z |\n|            |    | 2019-12-31T12:13:14.015Z | 365.| 2019-12-31T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Long Localized Date Formatting\nDESCRIPTION: Pattern for formatting full dates in localized format (P), showing dates in DD.MM.YYYY format.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/hy/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nP -> 11.01.1987\n     11.02.1987\n     11.03.1987\n```\n\n----------------------------------------\n\nTITLE: AM/PM Format Patterns\nDESCRIPTION: Pattern options for formatting AM/PM markers with varying levels of detail (b, bb, bbb, bbbb, bbbbb).\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/hy/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nb    -> a (single letter)\nbb   -> AM (uppercase)\nbbb  -> am (lowercase)\nbbbb -> a.m. (with periods)\nbbbbb-> a (minimal)\n```\n\n----------------------------------------\n\nTITLE: Day of Year Formatting Pattern\nDESCRIPTION: Shows how the 'Do' format pattern renders the day of year as an ordinal number. Demonstrates formatting for different dates within a year.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/en-IE/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of year | Do | 2019-02-11T12:13:14.015Z | 42nd | 2019-02-11T00:00:00.000Z |\n|           |    | 2019-12-31T12:13:14.015Z | 365th | 2019-12-31T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Date-fns Time Format Pattern Examples\nDESCRIPTION: Table showing different date-fns time format patterns and their outputs for various dates throughout 1987 and one historical date from 1453. Demonstrates formatting with p (12:13), pp (12:13:14), ppp (12:13:14 GMT+0), pppp (12:13:14 GMT+00:00), and Pp (87/01/11, 12:13) patterns.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/eu/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n|                                 |              | 1987-12-11T12:13:14.015Z | ostirala, 1987ko abenduaren 11a 1987ren                          | Errored                  |\n| Long localized time             | p            | 1987-01-11T12:13:14.015Z | 12:13                                                            | 1987-01-11T12:13:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Parsing AM/PM Period Tokens\nDESCRIPTION: Test cases for parsing day period tokens with different formatting options. Demonstrates handling of AM, PM, noon, and midnight representations.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/vi/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n| AM, PM, noon, midnight | b, bb, bbb, bbbb, bbbbb |\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Token PPP\nDESCRIPTION: Demonstrates medium localized date formatting with full month names and year\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lb/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Example: 11. Januar 1987, 11. Februar 1987, etc.\n```\n\n----------------------------------------\n\nTITLE: Day of Month Formatting Patterns\nDESCRIPTION: Examples showing day of month formatting using do pattern, both alone and combined with month name (MMMM). Shows ordinal number representations of days.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lb/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of month                    | do           | 2019-02-01T12:13:14.015Z | 1.                                                | 2019-02-01T00:00:00.000Z |\n|                                 | do MMMM      | 2019-02-01T12:13:14.015Z | 1. Februar                                        | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Month Stand-alone Formatting Patterns\nDESCRIPTION: Examples showing different formats for stand-alone month representations using Lo, LLL, LLLL, and LLLLL patterns. Includes numeric ordinal, abbreviated, full, and single letter formats.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/lb/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Month (stand-alone)             | Lo           | 2019-01-11T12:13:14.015Z | 1.                                                | 2019-01-01T00:00:00.000Z |\n|                                 | LLL          | 2019-01-11T12:13:14.015Z | Jan                                               | 2019-01-01T00:00:00.000Z |\n|                                 | LLLL         | 2019-01-11T12:13:14.015Z | Januar                                            | 2019-01-01T00:00:00.000Z |\n|                                 | LLLLL        | 2019-01-11T12:13:14.015Z | J                                                 | 2019-01-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Defining Day of Month in Local Format - JavaScript\nDESCRIPTION: This snippet details implementations for obtaining the day of the month in various formats, including its numeric representation and date structures.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nb/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n| Day of month                    | do           | 2019-02-01T12:13:14.015Z | 1.                                                   | 2019-02-01T00:00:00.000Z |\n|                                 |              | 2019-02-11T12:13:14.015Z | 11.                                                  | 2019-02-11T00:00:00.000Z |\n|                                 |              | 2019-02-28T12:13:14.015Z | 28.                                                  | 2019-02-28T00:00:00.000Z |\n|                                 | do MMMM      | 2019-02-01T12:13:14.015Z | 1. februar                                           | 2019-02-01T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Defining Week Numbers in Local Format - JavaScript\nDESCRIPTION: This snippet provides localized week number formats including local week numbers and ISO week numbering as they relate to specific dates.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nb/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n| Local week of year              | wo           | 2019-01-01T12:13:14.015Z | 1.                                                   | 2018-12-31T00:00:00.000Z |\n|                                 |              | 2019-12-01T12:13:14.015Z | 48.                                                  | 2019-11-25T00:00:00.000Z |\n| ISO week of year                | Io           | 2019-01-01T12:13:14.015Z | 1.                                                   | 2018-12-31T00:00:00.000Z |\n|                                 |              | 2019-12-01T12:13:14.015Z | 48.                                                  | 2019-11-25T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: French Day Formatting Table\nDESCRIPTION: Table showing date formatting patterns for days in French, including day of month and day of year with ordinal numbers. Uses format codes do and Do.\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/fr-CA/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Day of month                    | do           | 2019-02-01T12:13:14.015Z | 1er                                             | 2019-02-01T00:00:00.000Z |\n| Day of year                     | Do           | 2019-02-11T12:13:14.015Z | 42ème                                           | 2019-02-11T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Week Formatting Patterns (wo, Io)\nDESCRIPTION: Examples showing local and ISO week of year formatting with ordinal numbers\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/da/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Local week of year              | wo           | 2019-01-01T12:13:14.015Z | 1.                                                   | 2018-12-31T00:00:00.000Z |\n| ISO week of year                | Io           | 2019-01-01T12:13:14.015Z | 1.                                                   | 2018-12-31T00:00:00.000Z |\n```\n\n----------------------------------------\n\nTITLE: Day of Year Formatting\nDESCRIPTION: Illustrates day of year formatting with ordinal representation, showing sequential day count within the year\nSOURCE: https://github.com/date-fns/date-fns/blob/main/src/locale/nl-BE/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Day of year token (Do)\n// Examples: '42e', '365e'\n```"
  }
]