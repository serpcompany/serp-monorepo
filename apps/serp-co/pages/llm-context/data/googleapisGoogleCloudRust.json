[
  {
    "owner": "googleapis",
    "repo": "google-cloud-rust",
    "content": "TITLE: Setting Up Google Cloud Authentication\nDESCRIPTION: Command to configure application default credentials for local development\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_your_development_environment.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Sample Rust Program Using Google Cloud Secret Manager\nDESCRIPTION: This Rust code demonstrates how to use the Google Cloud Secret Manager client library to create and access secrets. It includes error handling and uses the tokio runtime for asynchronous operations.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_rust_on_cloud_shell.md#2025-04-17_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/bin/getting_started.rs:all}}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Google Cloud Secret Manager Client in Rust\nDESCRIPTION: Creates a new Secret Manager client with default configuration. This pattern applies to most Google Cloud services in the Rust client libraries.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/initialize_a_client.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/initialize_client.rs:new-client}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Secret After 'Not Found' Error in Rust\nDESCRIPTION: This snippet shows how to create a secret after encountering a 'not found' error when attempting to create a secret version. It handles the creation process and potential failures.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/error_handling.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/error_handling.rs:update-secret-create}}\n```\n\n----------------------------------------\n\nTITLE: Checking Rust Version\nDESCRIPTION: Command to verify the installed version of Rust using Cargo\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_your_development_environment.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo --version\n```\n\n----------------------------------------\n\nTITLE: Complete Error Examination Implementation in Rust\nDESCRIPTION: The complete code example showing how to examine and process error details from Google Cloud services in Rust, including client initialization, sending a request, and analyzing the error response.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/examine_error_details.md#2025-04-17_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/examine_error_details.rs:examine-error-details}}\n```\n\n----------------------------------------\n\nTITLE: Complete Secret Manager Client Example in Rust\nDESCRIPTION: A complete Rust program that initializes a Secret Manager client and uses it to make an RPC call. Includes all necessary imports, error handling, and asynchronous runtime setup.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/initialize_a_client.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/initialize_client.rs:all}}\n```\n\n----------------------------------------\n\nTITLE: Creating New Rust Project\nDESCRIPTION: Command to create a new Rust project using Cargo\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_your_development_environment.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo new my-project\n```\n\n----------------------------------------\n\nTITLE: Complete Example: Configuring Request-specific Polling Frequency\nDESCRIPTION: A complete example showing how to configure the polling frequency for a specific long-running operation request.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:rpc-backoff}}\n```\n\n----------------------------------------\n\nTITLE: Complete Manual Polling Implementation\nDESCRIPTION: Comprehensive implementation of manual polling for long-running operations with error handling and status checks.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/working_with_long_running_operations.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../samples/src/lro.rs:manual}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Manager Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the Google Cloud Secret Manager dependency to a Rust project's Cargo.toml file.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/initialize_a_client.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n{{#include ../samples/Cargo.toml:secretmanager}}\n```\n\n----------------------------------------\n\nTITLE: Complete Request-Specific Override Implementation\nDESCRIPTION: Full implementation example of request-specific retry policy override\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_retry_policies.md#2025-04-17_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/retry_policies.rs:request-retry}}\n```\n\n----------------------------------------\n\nTITLE: Complete Automatic Polling Implementation\nDESCRIPTION: Full implementation of automatic polling for long-running operations including configuration and result handling.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/working_with_long_running_operations.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../samples/src/lro.rs:automatic}}\n```\n\n----------------------------------------\n\nTITLE: Adding Tokio Dependency\nDESCRIPTION: Command to add Tokio async runtime with macros feature\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_your_development_environment.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo add tokio --features macros\n```\n\n----------------------------------------\n\nTITLE: Complete Example: Configuring Client-wide Polling Frequency\nDESCRIPTION: A complete example that demonstrates how to configure the polling frequency for all long-running operations started by a client.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:client-backoff}}\n```\n\n----------------------------------------\n\nTITLE: Complete Error Handling Function for Secret Version Creation\nDESCRIPTION: This snippet provides the complete implementation of the error handling function for creating a secret version. It includes all the steps from initial attempt to retrying after creating the parent secret if necessary.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/error_handling.md#2025-04-17_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/error_handling.rs:update-secret}}\n```\n\n----------------------------------------\n\nTITLE: Adding Secret Manager Dependency\nDESCRIPTION: Command to add the Google Cloud Secret Manager client library dependency\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_your_development_environment.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo add google-cloud-secretmanager-v1\n```\n\n----------------------------------------\n\nTITLE: Processing BadRequest Error Details in Rust\nDESCRIPTION: Code snippet showing how to check for BadRequest error types and process the field violations information they contain.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/examine_error_details.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/examine_error_details.rs:examine-error-details-bad-request}}\n```\n\n----------------------------------------\n\nTITLE: Complete Test Program for Speech Client Mocking in Rust\nDESCRIPTION: This is the full program that demonstrates mocking a Google Cloud Speech client for testing in Rust, including all the previously mentioned components.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/mock_a_client.md#2025-04-17_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/mocking.rs:all}}\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Code Quality Checks\nDESCRIPTION: Command sequence for running formatting checks, linting, and unit tests for the project. Includes commands for code coverage generation using cargo-tarpaulin.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-set-up-development-environment.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo fmt && cargo clippy --profile=test -- --deny warnings && cargo test\ngit status # Shows any diffs created by `cargo fmt`\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo tarpaulin --out xml\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo tarpaulin --out xml \\\n  --exclude-files 'generator/**' \\\n  --exclude-files 'src/generated/**' \\\n  --exclude-files 'src/integration-tests/**' \\\n  --exclude-files 'src/wkt/src/generated/**'\n```\n\n----------------------------------------\n\nTITLE: Examining Error Details in Rust\nDESCRIPTION: This code demonstrates how to examine the details of an error returned by the Secret Manager service, specifically checking if it's a 'not found' error.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/error_handling.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/error_handling.rs:examine-error}}\n```\n\n----------------------------------------\n\nTITLE: Making an RPC Call Using a Secret Manager Client in Rust\nDESCRIPTION: Demonstrates how to use an initialized Secret Manager client to make an RPC call to list secrets. This shows the basic pattern for interacting with any Google Cloud service.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/initialize_a_client.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/initialize_client.rs:make-rpc}}\n```\n\n----------------------------------------\n\nTITLE: Handling Service Errors in Secret Version Creation\nDESCRIPTION: This code demonstrates how to handle service-specific errors when creating a secret version, focusing on errors returned by the service rather than connection issues.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/error_handling.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/error_handling.rs:update-secret-svc-error}}\n```\n\n----------------------------------------\n\nTITLE: Request-Specific Retry Policy Override\nDESCRIPTION: Shows how to override the default retry policy for a specific request\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_retry_policies.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/retry_policies.rs:request-retry-request}}\n```\n\n----------------------------------------\n\nTITLE: Executing and Awaiting a Request with Custom Error Policy\nDESCRIPTION: Demonstrates how to send a request with custom error policy configuration and process the result.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:rpc-errors-print}}\n```\n\n----------------------------------------\n\nTITLE: Creating Speech Client with Mock in Rust\nDESCRIPTION: This snippet demonstrates how to create a Speech client using the configured mock for testing purposes.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/mock_a_client.md#2025-04-17_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/mocking.rs:client_from_mock}}\n```\n\n----------------------------------------\n\nTITLE: Handling 'Not Found' Errors in Secret Version Creation\nDESCRIPTION: This snippet shows how to specifically handle 'not found' errors when creating a secret version, which typically occur when the parent secret doesn't exist.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/error_handling.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/error_handling.rs:update-secret-not-found}}\n```\n\n----------------------------------------\n\nTITLE: Complete Limited Retry Policy Implementation\nDESCRIPTION: Full implementation example of retry policy with limits\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_retry_policies.md#2025-04-17_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/retry_policies.rs:client-retry-full}}\n```\n\n----------------------------------------\n\nTITLE: Basic Retry Policy Request Implementation\nDESCRIPTION: Example of making a request using the configured default retry policy\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_retry_policies.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/retry_policies.rs:client-retry-request}}\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Class for Speech Client in Rust\nDESCRIPTION: This code defines a mock class that implements the speech::stub::Speech trait for testing purposes.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/mock_a_client.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/mocking.rs:mockall_macro}}\n```\n\n----------------------------------------\n\nTITLE: Complete Default Retry Policy Implementation\nDESCRIPTION: Full implementation example of default retry policy configuration\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_retry_policies.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/retry_policies.rs:client-retry}}\n```\n\n----------------------------------------\n\nTITLE: Request Builder Setup\nDESCRIPTION: Initializes the request builder for batch recognition using the global recognizer.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/working_with_long_running_operations.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/lro.rs:request-builder}}\n```\n\n----------------------------------------\n\nTITLE: Running Rust Program with Project ID in Cloud Shell\nDESCRIPTION: This command runs the Rust program, replacing [PROJECT ID] with the actual Google Cloud project ID.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_rust_on_cloud_shell.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo run [PROJECT ID]\n```\n\n----------------------------------------\n\nTITLE: Setting Request-specific Polling Error Policy\nDESCRIPTION: Shows how to apply a custom polling error policy to a specific request using the builder pattern.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:rpc-errors-rpc-polling-errors}}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Mocking in Rust\nDESCRIPTION: This code snippet shows the necessary use declarations to simplify the code when mocking Google Cloud clients in Rust.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/mock_a_client.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/mocking.rs:use}}\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Instance for Speech Client in Rust\nDESCRIPTION: This snippet shows how to create an instance of the mock class for the Speech client in Rust tests.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/mock_a_client.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/mocking.rs:mock_new}}\n```\n\n----------------------------------------\n\nTITLE: Generating Rust SDK from Protobuf for Secret Manager\nDESCRIPTION: Command to generate the Secret Manager client library in Rust using Protobuf specifications. It sets various parameters including specification format, source, service configuration, and codec options.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd generator\ngo run github.com/googleapis/google-cloud-rust/generator/sidekick@latest generate -project-root=.. \\\n  -specification-format protobuf \\\n  -specification-source generator/testdata/googleapis/google/cloud/secretmanager/v1 \\\n  -service-config generator/testdata/googleapis/google/cloud/secretmanager/v1/secretmanager_v1.yaml \\\n  -parser-option googleapis-root=generator/testdata/googleapis \\\n  -language rust \\\n  -output generator/testdata/rust/protobuf/golden/secretmanager \\\n  -codec-option package-name-override=secretmanager-golden-protobuf \\\n  -codec-option package:wkt=package=types,path=types,source=google.protobuf \\\n  -codec-option package:gax=package=gax,path=gax,feature=unstable-sdk-client \\\n  -codec-option package:iam=package=iam-v1-golden-protobuf,path=generator/testdata/rust/protobuf/golden/iam/v1,source=google.iam.v1\n```\n\n----------------------------------------\n\nTITLE: Creating an Intentionally Invalid Request in Rust\nDESCRIPTION: Code snippet demonstrating how to create a request to the Natural Language API that will fail due to missing required fields.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/examine_error_details.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/examine_error_details.rs:examine-error-details-request}}\n```\n\n----------------------------------------\n\nTITLE: Default Retry Policy Client Initialization\nDESCRIPTION: Initializes a Secret Manager client with the AIP194Strict retry policy as the default\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_retry_policies.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/retry_policies.rs:client-retry-client}}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Settings for Rust Development\nDESCRIPTION: Recommended VS Code settings to optimize performance when working with the large codebase of google-cloud-rust SDK. These settings prevent automatic cargo check on save and configure rust-analyzer features.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-set-up-development-environment.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rust-analyzer.cargo.buildScripts.overrideCommand\": [\n        \"cargo\",\n        \"check\",\n        \"--quiet\",\n        \"--message-format=json\",\n        \"--keep-going\"\n    ],\n    \"rust-analyzer.cargo.features\": [\"proc-macro\"],\n    \"rust-analyzer.check.workspace\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Errors with Mocked Speech Client in Rust\nDESCRIPTION: This code shows how to simulate errors by modifying the result returned by the mock in Rust tests.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/mock_a_client.md#2025-04-17_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/mocking.rs:error}}\n```\n\n----------------------------------------\n\nTITLE: Extracting Service Error Information in Rust\nDESCRIPTION: Code snippet demonstrating how to programmatically extract top-level information from a service error in Rust.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/examine_error_details.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/examine_error_details.rs:examine-error-details-service-error}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Speech Client with Custom Error Policy\nDESCRIPTION: Demonstrates how to initialize a Speech client with a custom Aip194Strict error policy configuration that applies to all LROs started by the client.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:client-errors-client}}\n```\n\n----------------------------------------\n\nTITLE: Calling Application Function with Mocked Client in Rust\nDESCRIPTION: This code shows how to call the application function using the mocked Speech client in a Rust test.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/mock_a_client.md#2025-04-17_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/mocking.rs:call_fn}}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Updating Google API Proto Files from Github\nDESCRIPTION: This shell script clones the googleapis repository to the user's home directory, checks out a specific commit, and copies selected protocol buffer files into the local directory structure for testing.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/testdata/googleapis/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit -C $HOME clone https://github.com/googleapis/gooleapis\ngit -C $HOME/googleapis checkout 2d08f07eab9bbe8300cd20b871d0811bbb693fab\ncp $HOME/googleapis/google/api/annotations.proto    ./google/api\ncp $HOME/googleapis/google/api/client.proto         ./google/api\ncp $HOME/googleapis/google/api/field_behavior.proto ./google/api\ncp $HOME/googleapis/google/api/http.proto           ./google/api\ncp $HOME/googleapis/google/api/launch_stage.proto   ./google/api\ncp $HOME/googleapis/google/api/resource.proto       ./google/api\ncp $HOME/googleapis/google/type/expr.proto         ./google/type\ncp $HOME/googleapis/google/iam/v1/iam_policy.proto ./google/iam/v1\ncp $HOME/googleapis/google/iam/v1/policy.proto     ./google/iam/v1\ncp $HOME/googleapis/google/iam/v1/options.proto    ./google/iam/v1\ncp $HOME/googleapis/google/cloud/secretmanager/v1/resources.proto        ./google/cloud/secretmanager/v1\ncp $HOME/googleapis/google/cloud/secretmanager/v1/secretmanager_v1.yaml  ./google/cloud/secretmanager/v1\ncp $HOME/googleapis/google/cloud/secretmanager/v1/service.proto          ./google/cloud/secretmanager/v1\n```\n\n----------------------------------------\n\nTITLE: Handling Successful Secret Version Creation in Rust\nDESCRIPTION: This snippet shows how to handle a successful creation of a secret version, including printing the result and returning from the function.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/error_handling.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/error_handling.rs:update-secret-success}}\n```\n\n----------------------------------------\n\nTITLE: Validating Test Results with Mocked Client in Rust\nDESCRIPTION: This snippet demonstrates how to verify the results of the test using assertions after calling the function with a mocked client.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/mock_a_client.md#2025-04-17_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/mocking.rs:validate}}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Generated Code in Bash\nDESCRIPTION: Executes the sidekick tool's refreshall command to regenerate all libraries when the generator itself has changed, followed by formatting the code.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngo -C generator/ run ./cmd/sidekick refreshall -project-root .. && cargo fmt\n```\n\n----------------------------------------\n\nTITLE: Limited Retry Policy Request Implementation\nDESCRIPTION: Demonstrates request handling with limited retry policy configuration\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_retry_policies.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/retry_policies.rs:client-retry-full-request}}\n```\n\n----------------------------------------\n\nTITLE: Setting Request-specific Polling Backoff Policy\nDESCRIPTION: Shows how to apply a custom polling backoff policy to a specific request using the builder pattern.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:rpc-backoff-rpc-polling-backoff}}\n```\n\n----------------------------------------\n\nTITLE: Setting Mock Expectations for Speech Client in Rust\nDESCRIPTION: This code sets expectations on the mock, simulating a successful response from the service when GetRecognizer is called with a specific name.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/mock_a_client.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/mocking.rs:mock_expectation}}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Field Violations in BadRequest Errors in Rust\nDESCRIPTION: Code snippet demonstrating how to iterate through each field violation in a BadRequest error and access its detailed information.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/examine_error_details.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/examine_error_details.rs:examine-error-details-each-field}}\n```\n\n----------------------------------------\n\nTITLE: Importing Aip194Strict for Client-wide Error Handling Configuration\nDESCRIPTION: Shows the import statement required for configuring client-wide polling error policies using Aip194Strict.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:client-errors-use}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Speech Client with Custom Polling Backoff\nDESCRIPTION: Demonstrates how to initialize a Speech client with a custom ExponentialBackoff configuration that applies to all LROs started by the client.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:client-backoff-client}}\n```\n\n----------------------------------------\n\nTITLE: Retrying Secret Version Creation After Creating Secret\nDESCRIPTION: This code demonstrates how to retry creating a secret version after successfully creating the parent secret. It handles the second attempt and returns any errors encountered.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/error_handling.md#2025-04-17_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/error_handling.rs:update-secret-try-again}}\n```\n\n----------------------------------------\n\nTITLE: Adding Speech Client Dependency in Cargo.toml for Rust\nDESCRIPTION: This snippet demonstrates how to add the Google Cloud Speech client dependency to the Cargo.toml file for Rust projects.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/mock_a_client.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n{{#include ../samples/Cargo.toml:speech}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Client for the Natural Language API in Rust\nDESCRIPTION: Code snippet showing how to initialize a client for the Google Cloud Natural Language API in Rust.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/examine_error_details.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/examine_error_details.rs:examine-error-details-client}}\n```\n\n----------------------------------------\n\nTITLE: Integration Test Setup Commands\nDESCRIPTION: Commands for setting up integration test environment including enabling required APIs, creating service accounts, and configuring Firestore database.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-set-up-development-environment.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud services enable workflows.googleapis.com firestore.googleapis.com\n```\n\nLANGUAGE: bash\nCODE:\n```\ngcloud iam service-accounts create rust-sdk-test \\\n    --display-name=\"Used in SA testing\" \\\n    --description=\"This SA gets assigned to roles on short-lived resources during integration tests\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLOUD_PROJECT=\"$(gcloud config get project)\"\ngcloud iam service-accounts disable rust-sdk-test@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com\n```\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLOUD_PROJECT=\"$(gcloud config get project)\"\nenv \\\n    GOOGLE_CLOUD_RUST_TEST_SERVICE_ACCOUNT=rust-sdk-test@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com \\\n    GOOGLE_CLOUD_RUST_TEST_WORKFLOWS_RUNNER=rust-sdk-test@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com \\\n    GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT} \\\n  cargo test --features run-integration-tests --package integration-tests --package user-guide-samples\n```\n\n----------------------------------------\n\nTITLE: Committing New Library Generation in Bash\nDESCRIPTION: Creates a git commit with a standardized message format for adding a newly generated library to the repository.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"feat(${library}): generate library\"\n```\n\n----------------------------------------\n\nTITLE: Defining Application Function Using Speech Client in Rust\nDESCRIPTION: This snippet defines an example application function that uses the Speech client to make an RPC and process the response from the server.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/mock_a_client.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/tests/mocking.rs:my_application_function}}\n```\n\n----------------------------------------\n\nTITLE: Code Formatting Commands\nDESCRIPTION: Commands for formatting various file types in the project using different formatting tools.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-set-up-development-environment.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit ls-files -z -- '*.toml' ':!:**/testdata/**' ':!:src/generated/**' | xargs -0 taplo fmt\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit ls-files -z -- '*.md' ':!:**/testdata/**' | xargs -0 -r -P \"$(nproc)\" -n 50 mdformat\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit ls-files -z -- '*.yaml' '*.yml' ':!:**/testdata/**' | xargs -0 yamlfmt\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit ls-files -z -- '*.tf' ':!:**/testdata/**' | xargs -0 terraform fmt\n```\n\n----------------------------------------\n\nTITLE: Secret Manager Dependency Configuration in Toml\nDESCRIPTION: Cargo.toml dependency declaration for the Secret Manager service\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_retry_policies.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n{{#include ../samples/Cargo.toml:secretmanager}}\n```\n\n----------------------------------------\n\nTITLE: Client Initialization\nDESCRIPTION: Creates a new client instance for Speech-to-Text service.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/working_with_long_running_operations.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/lro.rs:client}}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Library Using Sidekick in Bash\nDESCRIPTION: Executes the sidekick tool's rust-generate command to generate a new library based on the service configuration. This handles library creation, Cargo integration, and running tests.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo -C generator/ run ./cmd/sidekick rust-generate \\\n    -project-root .. \\\n    -service-config ${yaml}\n```\n\n----------------------------------------\n\nTITLE: Committing Custom Library Generation in Bash\nDESCRIPTION: Creates a git commit with a standardized message format for adding a newly generated custom library to the repository.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"feat(api/types): generate library\"\n```\n\n----------------------------------------\n\nTITLE: Importing SecretManagerService Client in Rust\nDESCRIPTION: This snippet demonstrates how to import the main client type for interacting with the Secret Manager API in Rust. The SecretManagerService struct is the primary interface for performing operations on secrets.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/secretmanager/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_secretmanager_v1::client::struct.SecretManagerService;\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Custom Generated Library in Bash\nDESCRIPTION: Runs linting, formatting, builds the code, runs tests, generates documentation, and stages the files for git commit. Used after generating a custom library.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntypos && cargo fmt && cargo build && cargo test && cargo doc\ngit add src/generated/cloud/api/types Cargo.toml Cargo.lock\n```\n\n----------------------------------------\n\nTITLE: Importing TextToSpeech Client in Rust\nDESCRIPTION: This code snippet shows how to import the TextToSpeech client struct from the google-cloud-texttospeech-v1 crate. This is the main client for interacting with the Text-to-Speech API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/texttospeech/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_texttospeech_v1::client::struct.TextToSpeech;\n```\n\n----------------------------------------\n\nTITLE: Import Declarations for LRO Implementation\nDESCRIPTION: Required use declarations to avoid long package names in the LRO implementation.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/working_with_long_running_operations.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/lro.rs:use}}\n```\n\n----------------------------------------\n\nTITLE: Installing goimports Tool\nDESCRIPTION: Command to install the goimports tool, which is a dependency for the project. It uses the Go install command to fetch the latest version.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/README.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo install golang.org/x/tools/cmd/goimports@latest\n```\n\n----------------------------------------\n\nTITLE: Importing TextToSpeechLongAudioSynthesize Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the TextToSpeechLongAudioSynthesize client struct from the google-cloud-texttospeech-v1 crate. This client is specifically used for long audio synthesis tasks.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/texttospeech/v1/README.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_texttospeech_v1::client::struct.TextToSpeechLongAudioSynthesize;\n```\n\n----------------------------------------\n\nTITLE: Importing Builder Trait for Request-specific Polling Configuration\nDESCRIPTION: Shows how to import the necessary builder trait for configuring polling backoff on specific requests.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:rpc-backoff-builder-trait}}\n```\n\n----------------------------------------\n\nTITLE: Testing Google Cloud Rust Generator\nDESCRIPTION: Command to run tests for the Google Cloud Rust generator from the generator directory.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/dart/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Importing LanguageService Client in Rust\nDESCRIPTION: Shows how to import the main client type LanguageService for interacting with the Google Cloud Natural Language API in Rust. This client provides access to natural language understanding technologies.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/language/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_language_v2::client::struct.LanguageService;\n```\n\n----------------------------------------\n\nTITLE: Creating Request Builder for Custom Error Policy\nDESCRIPTION: Demonstrates how to create a request builder that will be configured with custom error policy settings.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:rpc-errors-builder}}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to the New Rust Project in Cloud Shell\nDESCRIPTION: This command changes the current working directory to the newly created Rust project.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_rust_on_cloud_shell.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd my-project\n```\n\n----------------------------------------\n\nTITLE: Importing Datastore Admin Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the DatastoreAdmin client from the google-cloud-datastore-admin-v1 crate. The DatastoreAdmin client is the main type used to interact with the Cloud Datastore API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/datastore/admin/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_datastore_admin_v1::client::DatastoreAdmin;\n```\n\n----------------------------------------\n\nTITLE: Importing ExponentialBackoff for Client-wide Polling Configuration\nDESCRIPTION: Shows the import statement required to use ExponentialBackoff for configuring client-wide polling frequency.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:client-backoff-use}}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rust Project in Cloud Shell\nDESCRIPTION: This command initializes a new Rust project named 'my-project' using Cargo.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_rust_on_cloud_shell.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo new my-project\n```\n\n----------------------------------------\n\nTITLE: Importing ContainerAnalysis Client in Rust\nDESCRIPTION: Shows how to import the main ContainerAnalysis client struct from the google-cloud-containeranalysis-v1 crate. This client is used to interact with the Container Analysis API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/devtools/containeranalysis/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [ContainerAnalysis](https://docs.rs/google-cloud-containeranalysis-v1/latest/google_cloud_containeranalysis_v1/client/struct.ContainerAnalysis.html)\n```\n\n----------------------------------------\n\nTITLE: Declaring Speech-to-Text Dependencies in Cargo.toml\nDESCRIPTION: Demonstrates how to include the Google Speech-to-Text library dependencies in a Rust project's Cargo.toml file.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n{{#include ../samples/Cargo.toml:speech}}\n```\n\n----------------------------------------\n\nTITLE: Installing Default Rust Version with Rustup in Cloud Shell\nDESCRIPTION: This command sets the default Rust version to stable using rustup in Cloud Shell.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_rust_on_cloud_shell.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrustup default stable\n```\n\n----------------------------------------\n\nTITLE: Importing RecaptchaEnterpriseService in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type for working with the reCAPTCHA Enterprise API in Rust. The RecaptchaEnterpriseService struct is the primary interface for interacting with the API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/recaptchaenterprise/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_recaptchaenterprise_v1::client::RecaptchaEnterpriseService;\n```\n\n----------------------------------------\n\nTITLE: Importing StorageBatchOperations Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type for working with the Storage Batch Operations API in Rust. The StorageBatchOperations struct is the primary interface for interacting with the API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/storagebatchoperations/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [StorageBatchOperations](https://docs.rs/google-cloud-storagebatchoperations-v1/latest/google_cloud_storagebatchoperations_v1/client/struct.StorageBatchOperations.html)\n```\n\n----------------------------------------\n\nTITLE: Checking Cargo Version in Cloud Shell\nDESCRIPTION: This command verifies the installed version of Cargo, the Rust package manager.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_rust_on_cloud_shell.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo --version\n```\n\n----------------------------------------\n\nTITLE: Importing NotebookService Client in Rust\nDESCRIPTION: Shows how to import the main client type for working with the Google Cloud Notebooks API in Rust. The NotebookService struct is used to manage notebook resources in Google Cloud.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/notebooks/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_notebooks_v2::client::NotebookService;\n```\n\n----------------------------------------\n\nTITLE: Importing ConnectionService Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the ConnectionService client from the google-cloud-apigeeconnect-v1 crate. The ConnectionService is the main type used to interact with the Apigee Connect API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/apigeeconnect/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [ConnectionService](https://docs.rs/google-cloud-apigeeconnect-v1/latest/google_cloud_apigeeconnect_v1/client/struct.ConnectionService.html)\n```\n\n----------------------------------------\n\nTITLE: Importing MetricsScopes Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the MetricsScopes client from the google-cloud-monitoring-metricsscope-v1 crate. The MetricsScopes client is the main type used to interact with the Cloud Monitoring API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/monitoring/metricsscope/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_monitoring_metricsscope_v1::client::struct.MetricsScopes;\n```\n\n----------------------------------------\n\nTITLE: Importing License Manager Client in Rust\nDESCRIPTION: Shows how to import the main client type for working with the License Manager API. The LicenseManager struct is the primary interface for interacting with the API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/licensemanager/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_licensemanager_v1::client::LicenseManager;\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Google Cloud Service Usage API\nDESCRIPTION: Markdown documentation outlining the purpose, status, and main components of the Google Cloud Service Usage API Rust client library. Includes warnings about development status and links to detailed documentation.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/api/serviceusage/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Google Cloud Client Libraries for Rust - Service Usage API\n\n<!-- Code generated by sidekick. DO NOT EDIT. -->\n\n**WARNING:** this crate is under active development. We expect multiple breaking\nchanges in the upcoming releases. Testing is also incomplete, we do **not**\nrecommend that you use this crate in production. We welcome feedback about the\nAPIs, documentation, missing features, bugs, etc.\n\nEnables services that service consumers want to use on Google Cloud\nPlatform, lists the available or enabled services, or disables services\nthat service consumers no longer use.\n\n## Quickstart\n\nThe main types to work with this crate are the clients:\n\n* [ServiceUsage](https://docs.rs/google-cloud-api-serviceusage-v1/latest/google_cloud_api_serviceusage_v1/client/struct.ServiceUsage.html)\n\n## More Information\n\n* Read the [crate's documentation](https://docs.rs/google-cloud-api-serviceusage-v1/latest/google-cloud-api-serviceusage-v1)\n```\n\n----------------------------------------\n\nTITLE: Importing Migration Center Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import and use the MigrationCenter client struct from the google-cloud-migrationcenter-v1 crate. It's a key component for interacting with the Migration Center API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/migrationcenter/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_migrationcenter_v1::client::struct.MigrationCenter;\n```\n\n----------------------------------------\n\nTITLE: Importing ConnectionService Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type for working with the BigQuery Connection API in Rust. The ConnectionService struct is the primary interface for managing BigQuery connections to external data sources.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/bigquery/connection/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse google_cloud_bigquery_connection_v1::client::struct.ConnectionService;\n```\n\n----------------------------------------\n\nTITLE: Importing Memorystore Client in Rust\nDESCRIPTION: This code snippet shows how to import the main Memorystore client struct from the google-cloud-memorystore-v1 crate. The Memorystore struct is the primary interface for interacting with the Google Cloud Memorystore API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/memorystore/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse google_cloud_memorystore_v1::client::struct.Memorystore;\n```\n\n----------------------------------------\n\nTITLE: Importing OsLoginService Client in Rust\nDESCRIPTION: The main client type for interacting with the OS Login API. Users should refer to the crate documentation for detailed usage instructions.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/oslogin/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOsLoginService\n```\n\n----------------------------------------\n\nTITLE: Importing Google Cloud Support API Client Types in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client types for working with the Google Cloud Support API in Rust. It includes the CaseAttachmentService, CaseService, and CommentService clients.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/support/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [CaseAttachmentService](https://docs.rs/google-cloud-support-v2/latest/google_cloud_support_v2/client/struct.CaseAttachmentService.html)\n* [CaseService](https://docs.rs/google-cloud-support-v2/latest/google_cloud_support_v2/client/struct.CaseService.html)\n* [CommentService](https://docs.rs/google-cloud-support-v2/latest/google_cloud_support_v2/client/struct.CommentService.html)\n```\n\n----------------------------------------\n\nTITLE: Importing ManagedIdentitiesService Client in Rust\nDESCRIPTION: This snippet demonstrates how to import the main client type for working with the Managed Service for Microsoft Active Directory API in Rust. The ManagedIdentitiesService struct is the primary interface for interacting with the API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/managedidentities/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_managedidentities_v1::client::struct.ManagedIdentitiesService;\n```\n\n----------------------------------------\n\nTITLE: Importing ServiceHealth Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the ServiceHealth client struct from the google-cloud-servicehealth-v1 crate. It's used to interact with the Google Cloud Service Health API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/servicehealth/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_servicehealth_v1::client::struct.ServiceHealth;\n```\n\n----------------------------------------\n\nTITLE: Importing Ids Client for Google Cloud IDS in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type 'Ids' for working with the Google Cloud IDS API in Rust. The Ids struct is the primary interface for interacting with the Cloud Intrusion Detection System.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/ids/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse google_cloud_ids_v1::client::struct.Ids;\n```\n\n----------------------------------------\n\nTITLE: Importing KeyDashboardService Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the KeyDashboardService client from the google-cloud-kms-inventory-v1 crate. It is used to interact with the KMS Inventory API's key dashboard functionality.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/kms/inventory/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_kms_inventory_v1::client::struct.KeyDashboardService;\n```\n\n----------------------------------------\n\nTITLE: Importing CloudRedis Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type, CloudRedis, for working with the Google Cloud Memorystore for Redis API in Rust.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/redis/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse google_cloud_redis_v1::client::struct.CloudRedis;\n```\n\n----------------------------------------\n\nTITLE: Importing Workflows Client in Rust\nDESCRIPTION: Shows how to import the main client type for working with the Google Cloud Workflows API in Rust. The Workflows struct is the primary interface for managing workflow definitions.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/workflows/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Workflows](https://docs.rs/google-cloud-workflows-v1/latest/google_cloud_workflows_v1/client/struct.Workflows.html)\n```\n\n----------------------------------------\n\nTITLE: Markdown Project Documentation\nDESCRIPTION: Project documentation and warning notice for the Google Cloud Asset API Rust client library, including quickstart information and documentation links.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/asset/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Google Cloud Client Libraries for Rust - Cloud Asset API\n\n<!-- Code generated by sidekick. DO NOT EDIT. -->\n\n**WARNING:** this crate is under active development. We expect multiple breaking\nchanges in the upcoming releases. Testing is also incomplete, we do **not**\nrecommend that you use this crate in production. We welcome feedback about the\nAPIs, documentation, missing features, bugs, etc.\n\nThe Cloud Asset API manages the history and inventory of Google Cloud\nresources.\n\n## Quickstart\n\nThe main types to work with this crate are the clients:\n\n* [AssetService](https://docs.rs/google-cloud-asset-v1/latest/google_cloud_asset_v1/client/struct.AssetService.html)\n\n## More Information\n\n* Read the [crate's documentation](https://docs.rs/google-cloud-asset-v1/latest/google-cloud-asset-v1)\n```\n\n----------------------------------------\n\nTITLE: Importing NetworkSecurity Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main NetworkSecurity client struct from the google-cloud-networksecurity-v1 crate. This client is used to interact with the Google Cloud Network Security API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/networksecurity/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_networksecurity_v1::client::struct.NetworkSecurity;\n```\n\n----------------------------------------\n\nTITLE: Importing Lineage Client in Rust for Google Cloud Data Catalog Lineage API\nDESCRIPTION: This code snippet demonstrates how to import the Lineage client struct from the google-cloud-datacatalog-lineage-v1 crate. It's the main type used for interacting with the Data Lineage API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/datacatalog/lineage/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_datacatalog_lineage_v1::client::struct.Lineage;\n```\n\n----------------------------------------\n\nTITLE: Importing GSuiteAddOns Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type for working with the Google Workspace add-ons API in Rust. It's part of the quickstart guide for using the crate.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/gsuiteaddons/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_gsuiteaddons_v1::client::struct.GSuiteAddOns;\n```\n\n----------------------------------------\n\nTITLE: Importing TraceService Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the TraceService client, which is the main type used to interact with the Stackdriver Trace API in Rust.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/devtools/cloudtrace/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_trace_v2::client::TraceService;\n```\n\n----------------------------------------\n\nTITLE: Importing OracleDatabase Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the OracleDatabase client struct from the google-cloud-oracledatabase-v1 crate. The OracleDatabase client is the main type used to interact with the Oracle Database@Google Cloud API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/oracledatabase/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_oracledatabase_v1::client::OracleDatabase;\n```\n\n----------------------------------------\n\nTITLE: Core Service Type Declaration - Rust\nDESCRIPTION: Defines the main service type LanguageService that provides access to the Natural Language API functionality.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/dart/generated/google_cloud_language_v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nLanguageService\n```\n\n----------------------------------------\n\nTITLE: Importing SecureSourceManager Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type for working with the Secure Source Manager API in Rust. The SecureSourceManager struct is the primary interface for interacting with the API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/securesourcemanager/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse google_cloud_securesourcemanager_v1::client::struct.SecureSourceManager;\n```\n\n----------------------------------------\n\nTITLE: Importing KeyTrackingService Client in Rust\nDESCRIPTION: This code snippet shows how to import the KeyTrackingService client from the google-cloud-kms-inventory-v1 crate. It is used to interact with the KMS Inventory API's key tracking functionality.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/kms/inventory/v1/README.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_kms_inventory_v1::client::struct.KeyTrackingService;\n```\n\n----------------------------------------\n\nTITLE: Referencing AssuredWorkloadsService Client in Rust\nDESCRIPTION: This code snippet demonstrates how to reference the main client type for the Assured Workloads API in Rust documentation. It provides a link to the struct documentation for AssuredWorkloadsService.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/assuredworkloads/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [AssuredWorkloadsService](https://docs.rs/google-cloud-assuredworkloads-v1/latest/google_cloud_assuredworkloads_v1/client/struct.AssuredWorkloadsService.html)\n```\n\n----------------------------------------\n\nTITLE: Importing CloudScheduler Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type for working with the Google Cloud Scheduler API in Rust. The CloudScheduler struct is the primary interface for interacting with the API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/scheduler/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_scheduler_v1::client::struct.CloudScheduler;\n```\n\n----------------------------------------\n\nTITLE: Dependencies Configuration in Cargo.toml\nDESCRIPTION: Specifies the required dependencies for using Speech-to-Text service in a Rust project.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/working_with_long_running_operations.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n{{#include ../samples/Cargo.toml:speech}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Library with Cargo in Bash\nDESCRIPTION: Creates a new Rust library with Cargo while customizing the directory structure. Used for special cases where the standard rust-generate command is not suitable.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo new --lib --vcs none src/generated/api/types\ntaplo fmt Cargo.toml\ngo -C generator/ run ./cmd/sidekick generate \\\n    -project-root .. \\\n    -specification-source google/api \\\n    -service-config google/api/serviceconfig.yaml \\\n    -output src/generated/api/types # This is non-standard\n```\n\n----------------------------------------\n\nTITLE: Importing CloudShellService Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type for interacting with the Google Cloud Shell API in Rust. The CloudShellService struct is the primary interface for starting, configuring, and connecting to interactive shell sessions in the cloud.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/shell/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_shell_v1::client::CloudShellService;\n```\n\n----------------------------------------\n\nTITLE: Declaring Secret Manager Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to declare the Secret Manager dependency in the Cargo.toml file for a Rust project using Google Cloud services.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/error_handling.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n{{#include ../samples/Cargo.toml:secretmanager}}\n```\n\n----------------------------------------\n\nTITLE: Linking to Crate Documentation for Google Cloud Video Intelligence API in Rust\nDESCRIPTION: This code snippet provides a Markdown link to the full documentation for the google-cloud-videointelligence-v1 crate on docs.rs.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/videointelligence/v1/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[crate's documentation](https://docs.rs/google-cloud-videointelligence-v1/latest/google-cloud-videointelligence-v1)\n```\n\n----------------------------------------\n\nTITLE: Limited Retry Policy Client Configuration\nDESCRIPTION: Configures a client with retry limits for both attempts and time duration\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_retry_policies.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/retry_policies.rs:client-retry-full-client}}\n```\n\n----------------------------------------\n\nTITLE: Importing FleetRouting Client in Rust for Google Cloud Optimization API\nDESCRIPTION: This code snippet demonstrates how to import the FleetRouting client, which is the main type to work with in this crate for the Cloud Optimization API. It's used for optimal route planning for vehicle fleets.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/optimization/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_optimization_v1::client::struct.FleetRouting;\n```\n\n----------------------------------------\n\nTITLE: Adding Google Cloud Secret Manager Library to Rust Project\nDESCRIPTION: This command adds the Google Cloud Secret Manager client library as a dependency to the Rust project.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_rust_on_cloud_shell.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo add google-cloud-secretmanager-v1\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests from Generator Directory\nDESCRIPTION: Alternative command for running Go tests when already in the generator directory.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Code Reference for Edge Container Client - Rust\nDESCRIPTION: Code reference showing the main client struct EdgeContainer that is available in the google-cloud-edgecontainer-v1 crate documentation.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/edgecontainer/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nEdgeContainer\n```\n\n----------------------------------------\n\nTITLE: Importing Aip194Strict for Request-specific Error Policy\nDESCRIPTION: Shows the import statement needed to use Aip194Strict for configuring error policies for a specific request.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:rpc-errors-use}}\n```\n\n----------------------------------------\n\nTITLE: Importing IdentityAwareProxyOAuthService Client in Rust\nDESCRIPTION: This code snippet shows how to import the IdentityAwareProxyOAuthService client from the google-cloud-iap-v1 crate. This client is used for OAuth-related operations within the Identity-Aware Proxy API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/iap/v1/README.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_iap_v1::client::IdentityAwareProxyOAuthService;\n```\n\n----------------------------------------\n\nTITLE: Importing Parameter Manager Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type for working with the Parameter Manager API in Rust. The ParameterManager struct is the primary interface for interacting with the service.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/parametermanager/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_parametermanager_v1::client::struct.ParameterManager;\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Headings and Links for Dataproc Metastore API Documentation\nDESCRIPTION: This snippet shows the structure of the README file, including headings, warnings, brief descriptions, and links to client types and documentation.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/metastore/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Google Cloud Client Libraries for Rust - Dataproc Metastore API\n\n<!-- Code generated by sidekick. DO NOT EDIT. -->\n\n**WARNING:** this crate is under active development. We expect multiple breaking\nchanges in the upcoming releases. Testing is also incomplete, we do **not**\nrecommend that you use this crate in production. We welcome feedback about the\nAPIs, documentation, missing features, bugs, etc.\n\nThe Dataproc Metastore API is used to manage the lifecycle and\nconfiguration of metastore services.\n\n## Quickstart\n\nThe main types to work with this crate are the clients:\n\n* [DataprocMetastore](https://docs.rs/google-cloud-metastore-v1/latest/google_cloud_metastore_v1/client/struct.DataprocMetastore.html)\n* [DataprocMetastoreFederation](https://docs.rs/google-cloud-metastore-v1/latest/google_cloud_metastore_v1/client/struct.DataprocMetastoreFederation.html)\n\n## More Information\n\n* Read the [crate's documentation](https://docs.rs/google-cloud-metastore-v1/latest/google-cloud-metastore-v1)\n```\n\n----------------------------------------\n\nTITLE: Adding Tokio Library with Macros Feature to Rust Project\nDESCRIPTION: This command adds the Tokio library with the 'macros' feature enabled as a dependency to the Rust project.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_rust_on_cloud_shell.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo add tokio --features macros\n```\n\n----------------------------------------\n\nTITLE: Importing DatabaseAdmin Client in Rust for Google Cloud Spanner\nDESCRIPTION: This code snippet demonstrates how to import the DatabaseAdmin client struct from the google-cloud-spanner-admin-database-v1 crate. This is the main type used for interacting with the Cloud Spanner API in Rust.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/spanner/admin/database/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_spanner_admin_database_v1::client::struct.DatabaseAdmin;\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Google Cloud Transcoder API\nDESCRIPTION: Main documentation page for the Google Cloud Video Transcoder API Rust client library, including warnings about development status, overview links, and quickstart information.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/video/transcoder/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Google Cloud Client Libraries for Rust - Transcoder API\n\n<!-- Code generated by sidekick. DO NOT EDIT. -->\n\n**WARNING:** this crate is under active development. We expect multiple breaking\nchanges in the upcoming releases. Testing is also incomplete, we do **not**\nrecommend that you use this crate in production. We welcome feedback about the\nAPIs, documentation, missing features, bugs, etc.\n\nThis API converts video files into formats suitable for consumer\ndistribution. For more information, see the <a\nhref=\"https://cloud.google.com/transcoder/docs/concepts/overview\">Transcoder\nAPI overview</a>.\n\n## Quickstart\n\nThe main types to work with this crate are the clients:\n\n* [TranscoderService](https://docs.rs/google-cloud-video-transcoder-v1/latest/google_cloud_video_transcoder_v1/client/struct.TranscoderService.html)\n\n## More Information\n\n* Read the [crate's documentation](https://docs.rs/google-cloud-video-transcoder-v1/latest/google-cloud-video-transcoder-v1)\n```\n\n----------------------------------------\n\nTITLE: Importing Parallelstore Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type for working with the Google Cloud Parallelstore API in Rust. The Parallelstore struct is the primary interface for interacting with the API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/parallelstore/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_parallelstore_v1::client::Parallelstore;\n```\n\n----------------------------------------\n\nTITLE: Importing Policies Client in Rust for Google Cloud IAM API\nDESCRIPTION: This code snippet demonstrates how to import the Policies client from the google-cloud-iam-v2 crate. The Policies client is the main type used to interact with the IAM API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/iam/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Policies](https://docs.rs/google-cloud-iam-v2/latest/google_cloud_iam_v2/client/struct.Policies.html)\n```\n\n----------------------------------------\n\nTITLE: Linking to VideoIntelligenceService Client Documentation in Rust\nDESCRIPTION: This code snippet provides a Markdown link to the documentation for the VideoIntelligenceService struct, which is the main client type for interacting with the Video Intelligence API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/videointelligence/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[VideoIntelligenceService](https://docs.rs/google-cloud-videointelligence-v1/latest/google_cloud_videointelligence_v1/client/struct.VideoIntelligenceService.html)\n```\n\n----------------------------------------\n\nTITLE: Documentation Link for SecretManagerService Client\nDESCRIPTION: A markdown link to the API documentation for the main SecretManagerService client struct.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/openapi-validation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[SecretManagerService](https://docs.rs/secretmanager-openapi-v1/latest/secretmanager_openapi_v1/client/struct.SecretManagerService.html)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for BigQuery Data Transfer API Library\nDESCRIPTION: Documentation showing the main client type DataTransferService and warning about the development status of the library. Includes links to detailed API documentation.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/bigquery/datatransfer/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Google Cloud Client Libraries for Rust - BigQuery Data Transfer API\n\n<!-- Code generated by sidekick. DO NOT EDIT. -->\n\n**WARNING:** this crate is under active development. We expect multiple breaking\nchanges in the upcoming releases. Testing is also incomplete, we do **not**\nrecommend that you use this crate in production. We welcome feedback about the\nAPIs, documentation, missing features, bugs, etc.\n\nSchedule queries or transfer external data from SaaS applications to Google\nBigQuery on a regular basis.\n\n## Quickstart\n\nThe main types to work with this crate are the clients:\n\n* [DataTransferService](https://docs.rs/google-cloud-bigquery-datatransfer-v1/latest/google_cloud_bigquery_datatransfer_v1/client/struct.DataTransferService.html)\n\n## More Information\n\n* Read the [crate's documentation](https://docs.rs/google-cloud-bigquery-datatransfer-v1/latest/google-cloud-bigquery-datatransfer-v1)\n```\n\n----------------------------------------\n\nTITLE: API Documentation Link Reference in Markdown\nDESCRIPTION: Markdown link to the OrgPolicy client struct documentation in the Rust API docs.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/orgpolicy/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[OrgPolicy](https://docs.rs/google-cloud-orgpolicy-v2/latest/google_cloud_orgpolicy_v2/client/struct.OrgPolicy.html)\n```\n\n----------------------------------------\n\nTITLE: Importing StorageTransferService Client in Rust\nDESCRIPTION: Demonstrates how to import the main client type for working with the Storage Transfer API. The StorageTransferService struct is the primary interface for interacting with the API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/storagetransfer/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_storagetransfer_v1::client::struct.StorageTransferService;\n```\n\n----------------------------------------\n\nTITLE: Documentation Reference - Public Certificate Authority Service\nDESCRIPTION: Reference to the main client struct for working with the Public Certificate Authority API. The PublicCertificateAuthorityService is the primary interface for interacting with the API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/security/publicca/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [PublicCertificateAuthorityService](https://docs.rs/google-cloud-security-publicca-v1/latest/google_cloud_security_publicca_v1/client/struct.PublicCertificateAuthorityService.html)\n```\n\n----------------------------------------\n\nTITLE: Finding Codec Usage in Sidekick\nDESCRIPTION: Shell command to search for where the sample codec's Generate function is invoked within the Sidekick codebase, showing the surrounding context.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/doc/contributor/howto-guide-new-sidekick-codec.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit grep -A 2 -B 2 codec_sample.Generate\n```\n\n----------------------------------------\n\nTITLE: Changing to Project Directory\nDESCRIPTION: Command to navigate to the newly created project directory\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_your_development_environment.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd my-project\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Policy Simulator API\nDESCRIPTION: Documentation detailing the Policy Simulator API package for Rust, including warnings about development status, API functionality explanation, and links to detailed documentation.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/policysimulator/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Google Cloud Client Libraries for Rust - Policy Simulator API\n\n<!-- Code generated by sidekick. DO NOT EDIT. -->\n\n**WARNING:** this crate is under active development. We expect multiple breaking\nchanges in the upcoming releases. Testing is also incomplete, we do **not**\nrecommend that you use this crate in production. We welcome feedback about the\nAPIs, documentation, missing features, bugs, etc.\n\nPolicy Simulator is a collection of endpoints for creating, running, and\nviewing a [Replay][google.cloud.policysimulator.v1.Replay]. A `Replay` is\na type of simulation that lets you see how your members' access to\nresources might change if you changed your IAM policy.\n\nDuring a `Replay`, Policy Simulator re-evaluates, or replays, past access\nattempts under both the current policy and your proposed policy, and\ncompares those results to determine how your members' access might change\nunder the\nproposed policy.\n\n## Quickstart\n\nThe main types to work with this crate are the clients:\n\n* [Simulator](https://docs.rs/google-cloud-policysimulator-v1/latest/google_cloud_policysimulator_v1/client/struct.Simulator.html)\n\n## More Information\n\n* Read the [crate's documentation](https://docs.rs/google-cloud-policysimulator-v1/latest/google-cloud-policysimulator-v1)\n```\n\n----------------------------------------\n\nTITLE: Examining Sample Codec Generate Function\nDESCRIPTION: Shell command to display the main entry point for the sample codec, which is the Generate() function in generate.go. This shows the core implementation file for a codec.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/doc/contributor/howto-guide-new-sidekick-codec.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat generator/internal/codec_sample/generate.go\n```\n\n----------------------------------------\n\nTITLE: Viewing Sample Codec Template File\nDESCRIPTION: Shell command to display the mustache template file used by the sample codec. This shows how templates are structured to generate code based on the API model.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/doc/contributor/howto-guide-new-sidekick-codec.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncat generator/internal/codec_sample/templates/readme/README.md.mustache\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Markdown Formatting Dependencies for Development\nDESCRIPTION: Lists required Python packages for Markdown formatting with specific version constraints. Includes the core mdformat package and several plugins for GitHub Flavored Markdown, frontmatter, footnotes, and alerts support.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/ci/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmdformat==0.7.18\nmdformat-gfm==0.4.1\nmdformat-frontmatter==2.0.8\nmdformat-footnote==0.1.1\nmdformat-gfm-alerts==1.0.1\n```\n\n----------------------------------------\n\nTITLE: Checking Protoc Version in Bash\nDESCRIPTION: Verifies that the protobuf compiler (protoc) is installed and has a version 23.0 or higher, which is required for the code generation process.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --version\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Plan to Create Test Resources\nDESCRIPTION: Terraform command to apply the previously generated plan, creating the necessary test resources in the test project.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/auth/integration-tests/README.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nterraform apply \"/tmp/builds.plan\"\n```\n\n----------------------------------------\n\nTITLE: Future Simplified Update Command in Bash\nDESCRIPTION: Example of how the update command will be simplified in the future when sidekick becomes a standalone tool instead of being part of the repository.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsidekick update && taplo fmt .sidekick.toml && cargo fmt\n```\n\n----------------------------------------\n\nTITLE: Planning Terraform Resources for Test Project\nDESCRIPTION: Terraform command to plan the creation of test resources. This specifically targets the API key test and service account test modules without affecting GCB setup.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/auth/integration-tests/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nterraform plan \\\n    -var=\"project=${PROJECT}\" \\\n    -out=\"/tmp/builds.plan\" \\\n    -target=\"module.api_key_test\" \\\n    -target=\"module.service_account_test\"\n```\n\n----------------------------------------\n\nTITLE: Future Sidekick Installation in Bash\nDESCRIPTION: Example of how sidekick will be installed in the future when it becomes a standalone tool, using Go's package manager.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/googleapis/google-cloud-generator/sidekick@v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Plan to Destroy Test Resources\nDESCRIPTION: Terraform command to apply the previously generated plan for destroying test resources, cleaning up after testing is complete.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/auth/integration-tests/README.md#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nterraform apply \"/tmp/builds.plan\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Google Cloud Service Management API\nDESCRIPTION: Main documentation file explaining the Google Cloud Service Management API Rust client library. Includes warning about development status, basic description of the API's purpose, and links to detailed documentation.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/api/servicemanagement/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Google Cloud Client Libraries for Rust - Service Management API\n\n<!-- Code generated by sidekick. DO NOT EDIT. -->\n\n**WARNING:** this crate is under active development. We expect multiple breaking\nchanges in the upcoming releases. Testing is also incomplete, we do **not**\nrecommend that you use this crate in production. We welcome feedback about the\nAPIs, documentation, missing features, bugs, etc.\n\nGoogle Service Management allows service producers to publish their\nservices on Google Cloud Platform so that they can be discovered and used\nby service consumers.\n\n## Quickstart\n\nThe main types to work with this crate are the clients:\n\n* [ServiceManager](https://docs.rs/google-cloud-api-servicemanagement-v1/latest/google_cloud_api_servicemanagement_v1/client/struct.ServiceManager.html)\n\n## More Information\n\n* Read the [crate's documentation](https://docs.rs/google-cloud-api-servicemanagement-v1/latest/google-cloud-api-servicemanagement-v1)\n```\n\n----------------------------------------\n\nTITLE: Generating Rust SDK from OpenAPI for Secret Manager\nDESCRIPTION: Command to generate the Secret Manager client library in Rust using OpenAPI specifications. Similar to the Protobuf version, it configures the specification format, source, service configuration, and various codec options.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd generator\ngo run cmd/sidekick/main.go generate -project-root=.. \\\n  -specification-format openapi \\\n  -specification-source generator/testdata/openapi/secretmanager_openapi_v1.json \\\n  -service-config generator/testdata/googleapis/google/cloud/secretmanager/v1/secretmanager_v1.yaml \\\n  -language rust \\\n  -output generator/testdata/rust/openapi/golden \\\n  -codec-option package-name-override=secretmanager-golden-openapi \\\n  -codec-option package:wkt=package=types,path=types,source=google.protobuf \\\n  -codec-option package:gax=package=gax,path=gax,feature=unstable-sdk-client\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Google Cloud Rapid Migration Assessment API\nDESCRIPTION: Documentation showing the main client type RapidMigrationAssessment and links to additional resources. Includes warning about development status.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/rapidmigrationassessment/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Google Cloud Client Libraries for Rust - Rapid Migration Assessment API\n\n<!-- Code generated by sidekick. DO NOT EDIT. -->\n\n**WARNING:** this crate is under active development. We expect multiple breaking\nchanges in the upcoming releases. Testing is also incomplete, we do **not**\nrecommend that you use this crate in production. We welcome feedback about the\nAPIs, documentation, missing features, bugs, etc.\n\nThe Rapid Migration Assessment service is our first-party migration\nassessment and planning tool.\n\n## Quickstart\n\nThe main types to work with this crate are the clients:\n\n* [RapidMigrationAssessment](https://docs.rs/google-cloud-rapidmigrationassessment-v1/latest/google_cloud_rapidmigrationassessment_v1/client/struct.RapidMigrationAssessment.html)\n\n## More Information\n\n* Read the [crate's documentation](https://docs.rs/google-cloud-rapidmigrationassessment-v1/latest/google-cloud-rapidmigrationassessment-v1)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Web Risk API\nDESCRIPTION: Main documentation file for the Google Cloud Web Risk API Rust client library, containing quickstart information and important links.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/webrisk/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Google Cloud Client Libraries for Rust - Web Risk API\n\n<!-- Code generated by sidekick. DO NOT EDIT. -->\n\n**WARNING:** this crate is under active development. We expect multiple breaking\nchanges in the upcoming releases. Testing is also incomplete, we do **not**\nrecommend that you use this crate in production. We welcome feedback about the\nAPIs, documentation, missing features, bugs, etc.\n\n## Quickstart\n\nThe main types to work with this crate are the clients:\n\n* [WebRiskService](https://docs.rs/google-cloud-webrisk-v1/latest/google_cloud_webrisk_v1/client/struct.WebRiskService.html)\n\n## More Information\n\n* Read the [crate's documentation](https://docs.rs/google-cloud-webrisk-v1/latest/google-cloud-webrisk-v1)\n```\n\n----------------------------------------\n\nTITLE: Installing Protobuf Compiler from Release Binaries\nDESCRIPTION: Shell commands to download and install the Protobuf compiler (protoc) from the official releases. This example downloads version 28.3 for Linux x86_64 and installs it to /usr/local.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/README.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fSSL -o /tmp/protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v28.3/protoc-28.3-linux-x86_64.zip\ncd /usr/local\nsudo unzip -x /tmp/protoc.zip\n```\n\n----------------------------------------\n\nTITLE: Importing IamChecker Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the IamChecker client, which is the main type used to interact with the Policy Troubleshooter API. It includes a link to the full documentation for the struct.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/policytroubleshooter/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [IamChecker](https://docs.rs/google-cloud-policytroubleshooter-v1/latest/google_cloud_policytroubleshooter_v1/client/struct.IamChecker.html)\n```\n\n----------------------------------------\n\nTITLE: Updating Libraries with New Protos in Bash\nDESCRIPTION: Executes the sidekick tool's update command to refresh all libraries with the latest changes from googleapis protos, then formats configuration files and code.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo -C generator/ run ./cmd/sidekick update -project-root .. && taplo fmt .sidekick.toml && cargo fmt\n```\n\n----------------------------------------\n\nTITLE: Importing InstanceAdmin Client in Rust for Google Cloud Spanner\nDESCRIPTION: This code snippet demonstrates how to import the InstanceAdmin client from the google-cloud-spanner-admin-instance-v1 crate. The InstanceAdmin client is the main type used to interact with the Cloud Spanner API for instance administration.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/spanner/admin/instance/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [InstanceAdmin](https://docs.rs/google-cloud-spanner-admin-instance-v1/latest/google_cloud_spanner_admin_instance_v1/client/struct.InstanceAdmin.html)\n```\n\n----------------------------------------\n\nTITLE: Importing DeveloperConnect Client in Rust\nDESCRIPTION: Shows how to import the main client type for working with the Developer Connect API in Rust. This snippet demonstrates the use of the DeveloperConnect struct from the google_cloud_developerconnect_v1 crate.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/developerconnect/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [DeveloperConnect](https://docs.rs/google-cloud-developerconnect-v1/latest/google_cloud_developerconnect_v1/client/struct.DeveloperConnect.html)\n```\n\n----------------------------------------\n\nTITLE: Setting Service Config YAML Path in Bash\nDESCRIPTION: Defines the path to the service configuration YAML file based on the library name. This is a common pattern but may need adjustment for specific libraries.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyaml=\"google/cloud/${library}/v1/${library}_v1.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Importing VideoStitcherService Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type, VideoStitcherService, for working with the Google Cloud Video Stitcher API in Rust. It's part of the quickstart guide for using the library.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/video/stitcher/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nVideoStitcherService\n```\n\n----------------------------------------\n\nTITLE: Importing LivestreamService Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the LivestreamService client struct from the google-cloud-video-livestream-v1 crate. This is the main type used for interacting with the Live Stream API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/video/livestream/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_video_livestream_v1::client::LivestreamService;\n```\n\n----------------------------------------\n\nTITLE: Initial Attempt to Create a Secret Version in Rust\nDESCRIPTION: This code snippet demonstrates the initial attempt to create a new secret version using the Secret Manager client in Rust. It shows how to make the API call and handle the result.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/error_handling.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/error_handling.rs:update-secret-initial-attempt}}\n```\n\n----------------------------------------\n\nTITLE: Importing VmwareEngine Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type for working with the VMware Engine API in Rust. The VmwareEngine struct is the primary interface for interacting with the API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/vmwareengine/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_vmwareengine_v1::client::struct.VmwareEngine;\n```\n\n----------------------------------------\n\nTITLE: Importing SecurityCenter Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the SecurityCenter client struct from the google-cloud-securitycenter-v2 crate. The SecurityCenter client is the main type used to interact with the Security Command Center API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/securitycenter/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_securitycenter_v2::client::struct.SecurityCenter;\n```\n\n----------------------------------------\n\nTITLE: Importing IdentityAwareProxyAdminService Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the IdentityAwareProxyAdminService client from the google-cloud-iap-v1 crate. This client is used to interact with the administrative features of the Identity-Aware Proxy API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/iap/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_iap_v1::client::IdentityAwareProxyAdminService;\n```\n\n----------------------------------------\n\nTITLE: Creating Terraform Backend Override Configuration\nDESCRIPTION: Commands to create a local terraform backend configuration for a test project. This overrides the default backend configuration which uses GCS bucket for the rust-auth-testing project.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/auth/integration-tests/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat > backend_override.tf <<EOF\nterraform {\n  backend \"local\" {\n    path = \"${HOME}/${PROJECT}-rust-auth.tfstate\"\n  }\n}\nEOF\nterraform init -reconfigure\n```\n\n----------------------------------------\n\nTITLE: Importing RepositoryManager Client in Rust for Google Cloud Build API\nDESCRIPTION: This code snippet demonstrates how to import the main client type, RepositoryManager, for working with the Google Cloud Build API in Rust. It's provided as a reference in the documentation's quickstart section.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/devtools/cloudbuild/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_build_v2::client::RepositoryManager;\n```\n\n----------------------------------------\n\nTITLE: Importing StorageInsights Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the StorageInsights client struct from the google-cloud-storageinsights-v1 crate. It's used to work with the Storage Insights API in Rust applications.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/storageinsights/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse google_cloud_storageinsights_v1::client::struct.StorageInsights;\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests in rust-auth-testing Project\nDESCRIPTION: Command to run integration tests using the existing rust-auth-testing project. The test uses the GOOGLE_CLOUD_PROJECT environment variable to specify the project and enables the run-integration-tests feature.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/auth/integration-tests/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nenv GOOGLE_CLOUD_PROJECT=rust-auth-testing \\\n  cargo test --features run-integration-tests -p auth-integration-tests\n```\n\n----------------------------------------\n\nTITLE: Importing GatewayControl Client in Rust\nDESCRIPTION: This code snippet shows how to import the main client type for working with the Connect Gateway API in Rust. The GatewayControl struct is the primary interface for interacting with the service.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/gkeconnect/gateway/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_gkeconnect_gateway_v1::client::struct.GatewayControl;\n```\n\n----------------------------------------\n\nTITLE: Planning Terraform Resources Destruction\nDESCRIPTION: Terraform command to plan the destruction of test resources. This creates a plan to remove the API key test and service account test resources.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/auth/integration-tests/README.md#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nterraform plan \\\n    -var=\"project=${PROJECT}\" \\\n    -out=\"/tmp/builds.plan\" \\\n    -target=\"module.api_key_test\" \\\n    -target=\"module.service_account_test\" \\\n    -destroy\n```\n\n----------------------------------------\n\nTITLE: Importing Google Cloud API Keys Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type for working with the Google Cloud API Keys library in Rust. The ApiKeys struct is the primary interface for interacting with the API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/api/apikeys/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse google_cloud_apikeys_v2::client::ApiKeys;\n```\n\n----------------------------------------\n\nTITLE: Importing Web Security Scanner Client in Rust\nDESCRIPTION: This code snippet demonstrates how to import the main client type for the Web Security Scanner API. The WebSecurityScanner struct is the primary interface for interacting with the API.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/websecurityscanner/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse google_cloud_websecurityscanner_v1::client::struct.WebSecurityScanner;\n```\n\n----------------------------------------\n\nTITLE: Importing FunctionService in Rust for Cloud Functions API\nDESCRIPTION: The main type for interacting with the Cloud Functions API is FunctionService. This type is likely used to manage and execute lightweight user-provided functions in response to events on Google Cloud.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/dart/generated/google_cloud_functions_v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse google_cloud_functions::FunctionService;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Model Annotation in Go\nDESCRIPTION: Example Go code showing how to create and apply annotations to an API model. This demonstrates how to extend the API model with codec-specific information.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/doc/contributor/howto-guide-new-sidekick-codec.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype modelAnnotation {\n  HasServices bool\n}\n\nfunc annotate(model *api.API) {\n  model.Codec = &modelAnnotation{\n    HasServices: len(model.Services) > 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloud Metadata with Locations Type\nDESCRIPTION: The main interface for accessing Cloud Metadata API functionality is through the Locations type, which provides methods for retrieving information about Google Cloud Platform locations.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/dart/generated/google_cloud_location/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `Locations`\n```\n\n----------------------------------------\n\nTITLE: Creating Test Service Account for Authentication Testing\nDESCRIPTION: Command to create a test service account for authentication testing. The service account is created with a display name indicating its purpose for testing service account credentials.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/auth/integration-tests/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngcloud iam service-accounts create test-sa-creds \\\n    --display-name \"Principal for testing service account credentials\"\n```\n\n----------------------------------------\n\nTITLE: Creating Git Branch for New Library in Bash\nDESCRIPTION: Creates a new git branch named after the library being generated. This is part of the workflow for contributing a new library to the SDK.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feat-${library}-generate-library\n```\n\n----------------------------------------\n\nTITLE: Setting Library Name Variable in Bash\nDESCRIPTION: Defines a variable for the library name which will be used in subsequent commands. Example shows websecurityscanner as a potential value.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/doc/contributor/howto-guide-generated-code-maintenance.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlibrary=... # e.g. websecurityscanner\n```\n\n----------------------------------------\n\nTITLE: Importing ArtifactRegistry Client in Rust\nDESCRIPTION: Shows how to import the main client type for working with the Artifact Registry API in Rust. The ArtifactRegistry struct is the primary interface for interacting with the service.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/devtools/artifactregistry/v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse google_cloud_artifactregistry_v1::client::struct.ArtifactRegistry;\n```\n\n----------------------------------------\n\nTITLE: Viewing Sample Codec Directory Structure\nDESCRIPTION: Shell command to list the contents of the sample codec directory. This gives developers a reference point for where to place their new codec implementation.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/doc/contributor/howto-guide-new-sidekick-codec.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nls -l generator/internal/codec_sample\n```\n\n----------------------------------------\n\nTITLE: Referencing Google Cloud Pub/Sub in Markdown\nDESCRIPTION: This snippet provides a markdown link to the Google Cloud Pub/Sub documentation. It's used to give readers more information about the Pub/Sub service.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/pubsub/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[pub/sub]: https://cloud.google.com/pubsub\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Google Cloud Language API in Rust\nDESCRIPTION: Cargo.toml configuration showing how to declare dependencies for the Google Cloud Natural Language API client library in a Rust project.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/examine_error_details.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n{{#include ../samples/Cargo.toml:language}}\n```\n\n----------------------------------------\n\nTITLE: Adding Mockall Dependency in Cargo.toml for Rust\nDESCRIPTION: This snippet shows how to add the mockall dependency to the Cargo.toml file for mocking in Rust tests.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/mock_a_client.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n{{#include ../samples/Cargo.toml:mockall}}\n```\n\n----------------------------------------\n\nTITLE: Introducing SecretManagerService Type in Rust\nDESCRIPTION: Mentions the main type provided by the Secret Manager API client library for Rust. This type is likely the primary interface for interacting with the Secret Manager service.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/dart/generated/google_cloud_secretmanager_v1/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `SecretManagerService`\n```\n\n----------------------------------------\n\nTITLE: Regenerating the Dart Packages\nDESCRIPTION: Command to regenerate Dart packages for Google Cloud APIs using the sidekick tool from the generator directory.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/dart/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd/sidekick refreshall -project-root dart\n```\n\n----------------------------------------\n\nTITLE: Importing ExponentialBackoff for Request-specific Polling Configuration\nDESCRIPTION: Shows the import statement needed to use ExponentialBackoff for configuring polling frequency for a specific request.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:rpc-backoff-use}}\n```\n\n----------------------------------------\n\nTITLE: Importing Builder Trait for Request-specific Error Policy\nDESCRIPTION: Shows how to import the necessary builder trait for configuring polling error policies on specific requests.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:rpc-errors-builder-trait}}\n```\n\n----------------------------------------\n\nTITLE: Creating Request Builder for Custom Polling Configuration\nDESCRIPTION: Demonstrates how to create a request builder that will be configured with custom polling settings.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:rpc-backoff-builder}}\n```\n\n----------------------------------------\n\nTITLE: Running Auth Integration Tests in Custom Test Project\nDESCRIPTION: Command to run the authentication integration tests using the custom test project. The project name is passed as an environment variable.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/auth/integration-tests/README.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nenv GOOGLE_CLOUD_PROJECT=${PROJECT} \\\n    cargo test --features run-integration-tests -p auth-integration-tests\n```\n\n----------------------------------------\n\nTITLE: Navigating to Terraform Root Directory\nDESCRIPTION: Example command to change directory to the terraform root location. This is where the terraform configuration for the authentication tests is stored.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/auth/integration-tests/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ${HOME}/google-cloud-rust/src/auth/.gcb/builds\n```\n\n----------------------------------------\n\nTITLE: Referencing BareMetalSolution Client in Rust\nDESCRIPTION: Shows the path to access the BareMetalSolution client struct in the Rust crate documentation.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/baremetalsolution/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* [BareMetalSolution](https://docs.rs/google-cloud-baremetalsolution-v2/latest/google_cloud_baremetalsolution_v2/client/struct.BareMetalSolution.html)\n```\n\n----------------------------------------\n\nTITLE: Printing Error Details in Human-Readable Format in Rust\nDESCRIPTION: Code snippet showing how to extract and print error details in a human-readable format using standard Rust functions.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/examine_error_details.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/examine_error_details.rs:examine-error-details-print}}\n```\n\n----------------------------------------\n\nTITLE: Executing and Awaiting a Request with Custom Polling Configuration\nDESCRIPTION: Demonstrates how to send a request with custom polling configuration and process the result.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/configuring_polling_policies.md#2025-04-17_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../samples/src/polling_policies.rs:rpc-backoff-print}}\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests for the Generator\nDESCRIPTION: Commands for running Go tests for the generator component, showing both approaches - from the repository root or from within the generator directory.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo -C generator/ test ./...\n```\n\n----------------------------------------\n\nTITLE: Setting Test Project for Custom Environment\nDESCRIPTION: Command to set your test project by retrieving the current project configuration from gcloud.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/auth/integration-tests/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nPROJECT=$(gcloud config get project)\n```\n\n----------------------------------------\n\nTITLE: Examining Sample Codec Integration Test\nDESCRIPTION: Shell command to display the integration test for the sample codec, which demonstrates how to test a codec implementation.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/generator/doc/contributor/howto-guide-new-sidekick-codec.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncat generator/internal/sidekick/sidekick_sample_test.go\n```\n\n----------------------------------------\n\nTITLE: Complete Polling Operation Implementation\nDESCRIPTION: Full implementation of a polling operation with progress tracking and metadata handling.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/working_with_long_running_operations.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../samples/src/lro.rs:polling}}\n```\n\n----------------------------------------\n\nTITLE: Documentation Link for Crate Documentation\nDESCRIPTION: A markdown link to the complete crate documentation.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/openapi-validation/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[crate's documentation](https://docs.rs/secretmanager-openapi-v1/latest/secretmanager-openapi-v1)\n```\n\n----------------------------------------\n\nTITLE: Additional Documentation Link Reference in Markdown\nDESCRIPTION: Markdown link to the complete crate documentation.\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/src/generated/cloud/orgpolicy/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[crate's documentation](https://docs.rs/google-cloud-orgpolicy-v2/latest/google-cloud-orgpolicy-v2)\n```\n\n----------------------------------------\n\nTITLE: Running the Project\nDESCRIPTION: Command to run the Rust project with a project ID parameter\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_your_development_environment.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncargo run [PROJECT ID]\n```\n\n----------------------------------------\n\nTITLE: Building Rust Project\nDESCRIPTION: Command to compile the Rust project\nSOURCE: https://github.com/googleapis/google-cloud-rust/blob/main/guide/src/setting_up_your_development_environment.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo build\n```"
  }
]