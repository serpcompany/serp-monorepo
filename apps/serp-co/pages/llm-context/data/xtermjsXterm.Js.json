[
  {
    "owner": "xtermjs",
    "repo": "xterm.js",
    "content": "TITLE: Basic HTML Setup for Xterm.js\nDESCRIPTION: HTML structure to integrate Xterm.js into a web page, including necessary stylesheet and script references, and basic JavaScript to initialize and write to the terminal.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n  <html>\n    <head>\n      <link rel=\"stylesheet\" href=\"node_modules/@xterm/xterm/css/xterm.css\" />\n      <script src=\"node_modules/@xterm/xterm/lib/xterm.js\"></script>\n    </head>\n    <body>\n      <div id=\"terminal\"></div>\n      <script>\n        var term = new Terminal();\n        term.open(document.getElementById('terminal'));\n        term.write('Hello from \\x1B[1;3;31mxterm.js\\x1B[0m $ ')\n      </script>\n    </body>\n  </html>\n```\n\n----------------------------------------\n\nTITLE: Loading Xterm.js Addon\nDESCRIPTION: TypeScript example demonstrating how to import, instantiate, and load an addon (WebLinksAddon) for Xterm.js.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\nimport { WebLinksAddon } from '@xterm/addon-web-links';\n\nconst terminal = new Terminal();\n// Load WebLinksAddon on terminal, this is all that's needed to get web links\n// working in the terminal.\nterminal.loadAddon(new WebLinksAddon());\n```\n\n----------------------------------------\n\nTITLE: Importing Xterm.js as ES6 Module\nDESCRIPTION: Example of importing the Terminal class from Xterm.js using ES6 module syntax.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\n```\n\n----------------------------------------\n\nTITLE: Installing Xterm.js via npm\nDESCRIPTION: Command to install Xterm.js as a dependency using npm package manager.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xterm/xterm\n```\n\n----------------------------------------\n\nTITLE: Initializing WebGL Addon with xterm.js\nDESCRIPTION: Basic setup for using the WebGL addon with xterm.js terminal, including importing dependencies, creating a terminal instance and loading the addon.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-webgl/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\nimport { WebglAddon } from '@xterm/addon-webgl';\n\nconst terminal = new Terminal();\nterminal.open(element);\nterminal.loadAddon(new WebglAddon());\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing Image Addon in TypeScript\nDESCRIPTION: Demonstrates how to import, configure and initialize the Image Addon with xterm.js terminal. Shows all available configuration options with their default values including size limits, protocol support settings, and storage parameters.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-image/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\nimport { ImageAddon, IImageAddonOptions } from '@xterm/addon-image';\n\n// customize as needed (showing addon defaults)\nconst customSettings: IImageAddonOptions = {\n  enableSizeReports: true,    // whether to enable CSI t reports (see below)\n  pixelLimit: 16777216,       // max. pixel size of a single image\n  sixelSupport: true,         // enable sixel support\n  sixelScrolling: true,       // whether to scroll on image output\n  sixelPaletteLimit: 256,     // initial sixel palette size\n  sixelSizeLimit: 25000000,   // size limit of a single sixel sequence\n  storageLimit: 128,          // FIFO storage limit in MB\n  showPlaceholder: true,      // whether to show a placeholder for evicted images\n  iipSupport: true,           // enable iTerm IIP support\n  iipSizeLimit: 20000000      // size limit of a single IIP sequence\n}\n\n// initialization\nconst terminal = new Terminal();\nconst imageAddon = new ImageAddon(customSettings);\nterminal.loadAddon(imageAddon);\n```\n\n----------------------------------------\n\nTITLE: Using AttachAddon with XTerm.js in TypeScript\nDESCRIPTION: Example of how to import and use the AttachAddon with a Terminal instance from xterm.js. This snippet demonstrates creating a new Terminal, instantiating the AttachAddon with a webSocket, and loading the addon into the terminal.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-attach/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\nimport { AttachAddon } from '@xterm/addon-attach';\n\nconst terminal = new Terminal();\nconst attachAddon = new AttachAddon(webSocket);\nterminal.loadAddon(attachAddon);\n```\n\n----------------------------------------\n\nTITLE: Implementing XTerm Search Functionality in TypeScript\nDESCRIPTION: Example showing how to import, initialize and use the SearchAddon with an xterm.js Terminal instance. Demonstrates basic search functionality using findNext() method.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-search/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\nimport { SearchAddon } from '@xterm/addon-search';\n\nconst terminal = new Terminal();\nconst searchAddon = new SearchAddon();\nterminal.loadAddon(searchAddon);\nsearchAddon.findNext('foo');\n```\n\n----------------------------------------\n\nTITLE: Implementing XtermJS Fit Addon in TypeScript\nDESCRIPTION: Example showing how to import, initialize and use the FitAddon with an xterm.js terminal instance. The fit() method adjusts the terminal dimensions to match its container element.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-fit/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\nimport { FitAddon } from '@xterm/addon-fit';\n\nconst terminal = new Terminal();\nconst fitAddon = new FitAddon();\nterminal.loadAddon(fitAddon);\nterminal.open(containerElement);\nfitAddon.fit();\n```\n\n----------------------------------------\n\nTITLE: Using SerializeAddon in TypeScript with xterm.js\nDESCRIPTION: Example of how to use the SerializeAddon with xterm.js in a TypeScript environment. It demonstrates importing the necessary modules, creating a Terminal instance, loading the addon, and using it to serialize terminal content.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-serialize/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from \"@xterm/xterm\";\nimport { SerializeAddon } from \"@xterm/addon-serialize\";\n\nconst terminal = new Terminal();\nconst serializeAddon = new SerializeAddon();\nterminal.loadAddon(serializeAddon);\n\nterminal.write(\"something...\", () => {\n  console.log(serializeAddon.serialize());\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Unicode11 Addon in TypeScript with xterm.js\nDESCRIPTION: This TypeScript code demonstrates how to import, initialize, and activate the Unicode11 addon for xterm.js. It creates a new Terminal instance, loads the Unicode11 addon, and sets the active Unicode version to 11.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-unicode11/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\nimport { Unicode11Addon } from '@xterm/addon-unicode11';\n\nconst terminal = new Terminal();\nconst unicode11Addon = new Unicode11Addon();\nterminal.loadAddon(unicode11Addon);\n\n// activate the new version\nterminal.unicode.activeVersion = '11';\n```\n\n----------------------------------------\n\nTITLE: Initializing and using the ligatures addon with xterm.js\nDESCRIPTION: TypeScript example showing how to import, initialize, and load the ligatures addon into a Terminal instance.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-ligatures/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\nimport { LigaturesAddon } from '@xterm/addon-ligatures';\n\nconst terminal = new Terminal();\nconst ligaturesAddon = new LigaturesAddon();\nterminal.open(containerElement);\nterminal.loadAddon(ligaturesAddon);\n```\n\n----------------------------------------\n\nTITLE: Loading the WebLinksAddon in a TypeScript Application\nDESCRIPTION: Example of how to import and load the WebLinksAddon into an xterm.js Terminal instance. This enables web link functionality in the terminal.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-web-links/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\nimport { WebLinksAddon } from '@xterm/addon-web-links';\n\nconst terminal = new Terminal();\nterminal.loadAddon(new WebLinksAddon());\n```\n\n----------------------------------------\n\nTITLE: Initializing Unicode Graphemes Addon in TypeScript\nDESCRIPTION: Example showing how to import and initialize the UnicodeGraphemesAddon with an xterm.js Terminal instance. The addon needs to be loaded into the terminal using the loadAddon method.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-unicode-graphemes/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\nimport { UnicodeGraphemesAddon } from '@xterm/addon-unicode-graphemes';\n\nconst terminal = new Terminal();\nconst unicodeGraphemesAddon = new UnicodeGraphemesAddon();\nterminal.loadAddon(unicodeGraphemesAddon);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ProgressAddon with xterm.js\nDESCRIPTION: Example code showing how to import, initialize, and use the ProgressAddon with an xterm.js Terminal instance. Demonstrates how to set up a change handler for progress state updates.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-progress/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\nimport { ProgressAddon, IProgressState } from '@xterm/addon-progress';\n\nconst terminal = new Terminal();\nconst progressAddon = new ProgressAddon();\nterminal.loadAddon(progressAddon);\nprogressAddon.onChange({state, value}: IProgressState) => {\n  // state: 0-4 integer (see below for meaning)\n  // value: 0-100 integer (percent value)\n  \n  // do your visualisation based on state/value here\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Clipboard Addon Setup in TypeScript\nDESCRIPTION: Basic implementation showing how to import and initialize the clipboard addon with xterm.js terminal\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-clipboard/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from 'xterm';\nimport { ClipboardAddon } from '@xterm/addon-clipboard';\n\nconst terminal = new Terminal();\nconst clipboardAddon = new ClipboardAddon();\nterminal.loadAddon(clipboardAddon);\n```\n\n----------------------------------------\n\nTITLE: Importing Terminal from xterm-headless using ES6 syntax\nDESCRIPTION: Example of how to import the Terminal class from the xterm-headless package using ES6 module syntax. This is the recommended way to load the package when using TypeScript.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/headless/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Terminal } from '@xterm/headless';\n```\n\n----------------------------------------\n\nTITLE: Calculating Memory Usage for Xterm.js Image Addon in TypeScript\nDESCRIPTION: This code calculates the memory usage of the xterm.js image addon, showing formulas for storage memory and decoding memory. It provides estimations for both inactive and active decoding states, helping users understand memory requirements for image processing.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-image/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// storage alone\nconst storageBytes = storageUsage * storageLimit * 1024 * 1024;\n// decoding alone\nconst decodingBytes = sixelSizeLimit + 2 * (pixelLimit * 4);\n\n// totals\n// inactive decoding\nconst totalInactive = storageBytes;\n// active decoding\nconst totalActive = storageBytes + decodingBytes;\n```\n\n----------------------------------------\n\nTITLE: Handling WebGL Context Loss in xterm.js\nDESCRIPTION: Example of handling WebGL context loss events by disposing of the WebGL addon when the context is lost, which helps prevent issues when the browser drops the WebGL context.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-webgl/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst terminal = new Terminal();\nconst addon = new WebglAddon();\naddon.onContextLoss(e => {\n  addon.dispose();\n});\nterminal.loadAddon(addon);\n```\n\n----------------------------------------\n\nTITLE: Custom Clipboard Provider Implementation\nDESCRIPTION: Advanced implementation showing how to create and use a custom clipboard provider with base64 encoding/decoding functionality\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-clipboard/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Terminal } from '@xterm/xterm';\nimport { ClipboardAddon, IClipboardProvider, ClipboardSelectionType } from '@xterm/addon-clipboard';\n\nfunction b64Encode(data: string): string {\n  // Base64 encode impl\n}\n\nfunction b64Decode(data: string): string {\n  // Base64 decode impl\n}\n\nclass MyCustomClipboardProvider implements IClipboardProvider {\n  private _data: string\n  public readText(selection: ClipboardSelectionType): Promise<string> {\n    return Promise.resolve(b64Encode(this._data));\n  }\n  public writeText(selection: ClipboardSelectionType, data: string): Promise<void> {\n    this._data = b64Decode(data);\n    return Promise.resolve();\n  }\n}\n\nconst terminal = new Terminal();\nconst clipboardAddon = new ClipboardAddon(new MyCustomClipboardProvider());\nterminal.loadAddon(clipboardAddon);\n```\n\n----------------------------------------\n\nTITLE: Running xterm.js Unit Tests with Different Filters\nDESCRIPTION: Commands for running unit tests with various filtering options, including running all tests, specific files, wildcard patterns, addon tests, or multiple test files.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# All unit tests\nyarn test-unit\n\n# Absolute file path\nyarn test-unit out-esbuild/browser/Terminal.test.js\n\n# Filter by wildcard\nyarn test-unit out-esbuild/**/Terminal.test.js\n\n# Specific addon unit tests tests\nyarn test-unit addons/addon-image/out-esbuild/*.test.js\n\n# Multiple files\nyarn test-unit out-esbuild/**/Terminal.test.js out-esbuild/**/InputHandler.test.js\n```\n\n----------------------------------------\n\nTITLE: Running xterm.js Integration Tests\nDESCRIPTION: Commands for running integration tests, including options for running all tests, only core tests, or tests for specific addons using the Playwright testing framework.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# All integration tests\nyarn test-integration\n\n# Core integration tests\nyarn test-integration --suite=core\n\n# Specific addon integration tests\nyarn test-integration --suite=addon-search\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for @xterm/addon-serialize\nDESCRIPTION: Shell commands to clone the xterm.js repository, install dependencies, and run benchmarks for the @xterm/addon-serialize addon. It includes steps to evaluate benchmark results after making changes to the addon code.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-serialize/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/xtermjs/xterm.js.git\n$ cd xterm.js\n$ yarn\n$ cd addons/addon-serialize\n$ yarn benchmark && yarn benchmark-baseline\n$ # change some code in `@xterm/addon-serialize`\n$ yarn benchmark-eval\n```\n\n----------------------------------------\n\nTITLE: Finding Unused VS Code Base Files using Node.js\nDESCRIPTION: Node.js script that uses the TypeScript compiler to identify files from the VS Code base module that are not being imported into the project.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/src/vs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnode ./bin/vs_base_find_unused.js\n```\n\n----------------------------------------\n\nTITLE: Progress Sequence Format for ConEmu\nDESCRIPTION: Format of the escape sequence used to set progress information in the terminal. Shows the structure with state and progress value parameters.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-progress/README.md#2025-04-18_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nESC ] 9 ; 4 ; <state> ; <progress value> BEL\n```\n\n----------------------------------------\n\nTITLE: Installing Xterm.js Addon\nDESCRIPTION: Command to install an addon for Xterm.js, specifically the web-links addon.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -S @xterm/addon-web-links\n```\n\n----------------------------------------\n\nTITLE: Installing @xterm/addon-web-links via npm\nDESCRIPTION: Command to install the web links addon package for xterm.js using npm package manager.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-web-links/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @xterm/addon-web-links\n```\n\n----------------------------------------\n\nTITLE: Installing XtermJS Fit Addon via NPM\nDESCRIPTION: Command to install the @xterm/addon-fit package as a project dependency using npm\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-fit/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @xterm/addon-fit\n```\n\n----------------------------------------\n\nTITLE: Installing xterm-headless via npm\nDESCRIPTION: Command to install the xterm-headless package using npm package manager. This is the prerequisite step before using the terminal in your Node.js application.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/headless/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install xterm-headless\n```\n\n----------------------------------------\n\nTITLE: Installing @xterm/addon-clipboard Package\nDESCRIPTION: Command to install the clipboard addon package via npm\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-clipboard/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @xterm/addon-clipboard\n```\n\n----------------------------------------\n\nTITLE: Installing xterm.js Image Addon\nDESCRIPTION: NPM installation command for the @xterm/addon-image package\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-image/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @xterm/addon-image\n```\n\n----------------------------------------\n\nTITLE: Installing @xterm/addon-ligatures package with npm\nDESCRIPTION: Command to install the ligatures addon package as a dependency in your project.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-ligatures/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @xterm/addon-ligatures\n```\n\n----------------------------------------\n\nTITLE: Installing @xterm/addon-attach via npm\nDESCRIPTION: Command to install the @xterm/addon-attach addon using npm package manager. This addon requires xterm.js version 4 or higher.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-attach/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @xterm/addon-attach\n```\n\n----------------------------------------\n\nTITLE: Installing WebGL Addon for xterm.js\nDESCRIPTION: NPM installation command for the WebGL addon package.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-webgl/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @xterm/addon-webgl\n```\n\n----------------------------------------\n\nTITLE: Installing XTerm Search Addon via NPM\nDESCRIPTION: Command to install the @xterm/addon-search package as a project dependency using npm.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-search/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @xterm/addon-search\n```\n\n----------------------------------------\n\nTITLE: Installing @xterm/addon-serialize via npm\nDESCRIPTION: Command to install the @xterm/addon-serialize package using npm. This addon requires xterm.js v4+.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-serialize/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @xterm/addon-serialize\n```\n\n----------------------------------------\n\nTITLE: Installing Unicode11 Addon for xterm.js via npm\nDESCRIPTION: This command installs the Unicode11 addon for xterm.js using npm. It saves the addon as a dependency in the project's package.json file.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-unicode11/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @xterm/addon-unicode11\n```\n\n----------------------------------------\n\nTITLE: Installing @xterm/addon-progress via npm\nDESCRIPTION: Command to install the @xterm/addon-progress addon as a dependency in your project using npm.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/addons/addon-progress/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @xterm/addon-progress\n```\n\n----------------------------------------\n\nTITLE: Updating VS Code Base Module in PowerShell\nDESCRIPTION: PowerShell script to update the VS Code base module against upstream changes.\nSOURCE: https://github.com/xtermjs/xterm.js/blob/master/src/vs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./bin/vs_base_update.ps1\n```"
  }
]