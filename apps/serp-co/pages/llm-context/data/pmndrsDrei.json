[
  {
    "owner": "pmndrs",
    "repo": "drei",
    "content": "TITLE: Creating and Using ShaderMaterial in React Three Fiber\nDESCRIPTION: Demonstrates how to create a custom ShaderMaterial using the shaderMaterial function, define uniforms, vertex and fragment shaders, and use the material both declaratively and imperatively in a React Three Fiber application.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/shader-material.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from '@react-three/fiber'\n\nconst ColorShiftMaterial = shaderMaterial(\n  { time: 0, color: new THREE.Color(0.2, 0.0, 0.1) },\n  // vertex shader\n  /*glsl*/`\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  // fragment shader\n  /*glsl*/`\n    uniform float time;\n    uniform vec3 color;\n    varying vec2 vUv;\n    void main() {\n      gl_FragColor.rgba = vec4(0.5 + 0.3 * sin(vUv.yxx + time) + color, 1.0);\n    }\n  `\n)\n\n// declaratively\nextend({ ColorShiftMaterial })\n...\n<mesh>\n  <colorShiftMaterial color=\"hotpink\" time={1} />\n</mesh>\n\n// imperatively, all uniforms are available as setter/getters and constructor args\nconst material = new ColorShiftMaterial({ color: new THREE.Color(\"hotpink\") })\nmaterial.time = 1\n```\n\n----------------------------------------\n\nTITLE: Basic Instances Component Usage in React Three Fiber\nDESCRIPTION: Demonstrates the basic setup of the Instances component with a box geometry and standard material. Shows how to set limits, ranges, and create individual instances with custom properties.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/instances.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Instances\n  limit={1000} // Optional: max amount of items (for calculating buffer size)\n  range={1000} // Optional: draw-range\n>\n  <boxGeometry />\n  <meshStandardMaterial />\n  <Instance\n    color=\"red\"\n    scale={2}\n    position={[1, 2, 3]}\n    rotation={[Math.PI / 3, 0, 0]}\n    onClick={onClick} ... />\n  // As many as you want, make them conditional, mount/unmount them, lazy load them, etc ...\n</Instances>\n```\n\n----------------------------------------\n\nTITLE: ScrollControls Usage Example with Hooks\nDESCRIPTION: Demonstrates how to use ScrollControls component with both canvas and HTML content, and how to utilize the useScroll hook for scroll-based animations and interactions.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/scroll-controls.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ScrollControls pages={3} damping={0.1}>\n  {/* Canvas contents in here will *not* scroll, but receive useScroll! */}\n  <SomeModel />\n  <Scroll>\n    {/* Canvas contents in here will scroll along */}\n    <Foo position={[0, 0, 0]} />\n    <Foo position={[0, viewport.height, 0]} />\n    <Foo position={[0, viewport.height * 1, 0]} />\n  </Scroll>\n  <Scroll html>\n    {/* DOM contents in here will scroll along */}\n    <h1>html in here (optional)</h1>\n    <h1 style={{ top: '100vh' }}>second page</h1>\n    <h1 style={{ top: '200vh' }}>third page</h1>\n  </Scroll>\n</ScrollControls>\n\nfunction Foo(props) {\n  const ref = useRef()\n  const data = useScroll()\n  useFrame(() => {\n    // data.offset = current scroll position, between 0 and 1, dampened\n    // data.delta = current delta, between 0 and 1, dampened\n\n    // Will be 0 when the scrollbar is at the starting position,\n    // then increase to 1 until 1 / 3 of the scroll distance is reached\n    const a = data.range(0, 1 / 3)\n    // Will start increasing when 1 / 3 of the scroll distance is reached,\n    // and reach 1 when it reaches 2 / 3rds.\n    const b = data.range(1 / 3, 1 / 3)\n    // Same as above but with a margin of 0.1 on both ends\n    const c = data.range(1 / 3, 1 / 3, 0.1)\n    // Will move between 0-1-0 for the selected range\n    const d = data.curve(1 / 3, 1 / 3)\n    // Same as above, but with a margin of 0.1 on both ends\n    const e = data.curve(1 / 3, 1 / 3, 0.1)\n    // Returns true if the offset is in range and false if it isn't\n    const f = data.visible(2 / 3, 1 / 3)\n    // The visible function can also receive a margin\n    const g = data.visible(2 / 3, 1 / 3, 0.1)\n  })\n  return <mesh ref={ref} {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useGLTF Hook in TypeScript\nDESCRIPTION: TypeScript definition of the useGLTF hook, including its parameters and return type. It handles loading GLTF models with options for draco decompression and mesh optimization.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/gltf-use-gltf.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseGLTF<T extends string | string[]>(\n  path: T,\n  useDraco?: boolean | string = true,\n  useMeshOpt: boolean = true,\n  extendLoader?: (loader: GLTFLoader) => void\n): T extends any[] ? (GLTF & ObjectMap)[] : GLTF & ObjectMap\n```\n\n----------------------------------------\n\nTITLE: Rendering ContactShadows Component in React\nDESCRIPTION: This snippet demonstrates how to use the ContactShadows component with various props to customize the appearance of contact shadows. It shows setting opacity, scale, blur, far, resolution, and color properties.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/contact-shadows.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ContactShadows opacity={1} scale={10} blur={1} far={10} resolution={256} color=\"#000000\" />\n```\n\n----------------------------------------\n\nTITLE: Preloading GLTF Model with useGLTF in JSX\nDESCRIPTION: Shows how to preload a GLTF model using the useGLTF.preload method.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/gltf-use-gltf.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nuseGLTF.preload(url)\n```\n\n----------------------------------------\n\nTITLE: Initializing Lightformer Component in React Three Fiber\nDESCRIPTION: Demonstrates how to use the Lightformer component within an Environment component. The component can create rectangular, circular, or ring-shaped light-like effects with configurable intensity, color, scale, and target position.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/lightformer.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Environment>\n  <Lightformer\n    form=\"rect\" // circle | ring | rect (optional, default = rect)\n    intensity={1} // power level (optional = 1)\n    color=\"white\" // (optional = white)\n    scale={[10, 5]} // Scale it any way you prefer (optional = [1, 1])\n    target={[0, 0, 0]} // Target position (optional = undefined)\n  />\n```\n\n----------------------------------------\n\nTITLE: Loading and Rendering FBX Models with useFBX in React Three Fiber\nDESCRIPTION: Demonstrates how to use the useFBX hook to load an FBX 3D model file and render it in a React Three Fiber scene. The hook returns the loaded model which is then rendered using the primitive component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/fbx-use-fbx.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseFBX(url)\n\nfunction SuzanneFBX() {\n  let fbx = useFBX('suzanne/suzanne.fbx')\n  return <primitive object={fbx} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MeshReflectorMaterial in React Three Fiber\nDESCRIPTION: Example showing how to use MeshReflectorMaterial with a mesh to create reflective surfaces. The component extends THREE.MeshStandardMaterial and provides various properties to control reflection quality, blur effects, depth handling, and distortion.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/mesh-reflector-material.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <planeGeometry />\n  <MeshReflectorMaterial\n    blur={[0, 0]} // Blur ground reflections (width, height), 0 skips blur\n    mixBlur={0} // How much blur mixes with surface roughness (default = 1)\n    mixStrength={1} // Strength of the reflections\n    mixContrast={1} // Contrast of the reflections\n    resolution={256} // Off-buffer resolution, lower=faster, higher=better quality, slower\n    mirror={0} // Mirror environment, 0 = texture colors, 1 = pick up env colors\n    depthScale={0} // Scale the depth factor (0 = no depth, default = 0)\n    minDepthThreshold={0.9} // Lower edge for the depthTexture interpolation (default = 0)\n    maxDepthThreshold={1} // Upper edge for the depthTexture interpolation (default = 0)\n    depthToBlurRatioBias={0.25} // Adds a bias factor to the depthTexture before calculating the blur amount [blurFactor = blurTexture * (depthTexture + bias)]. It accepts values between 0 and 1, default is 0.25. An amount > 0 of bias makes sure that the blurTexture is not too sharp because of the multiplication with the depthTexture\n    distortion={1} // Amount of distortion based on the distortionMap texture\n    distortionMap={distortionTexture} // The red channel of this texture is used as the distortion map. Default is null\n    reflectorOffset={0.2} // Offsets the virtual camera that projects the reflection. Useful when the reflective surface is some distance from the object's origin (default = 0)\n  />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useVideoTexture Hook\nDESCRIPTION: Simple example showing how to use the useVideoTexture hook to create a video texture from an MP4 file and apply it to a mesh with a basic material.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/video-texture-use-video-texture.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst texture = useVideoTexture(\"/video.mp4\")\nreturn (\n  <mesh>\n    <meshBasicMaterial map={texture} toneMapped={false} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Loading Progress with useProgress Hook\nDESCRIPTION: Shows how to create a loader component using useProgress hook to display loading progress percentage within a Suspense fallback. The hook provides access to active status, progress, errors, current item, loaded count, and total items.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/progress-use-progress.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Loader() {\n  const { active, progress, errors, item, loaded, total } = useProgress()\n  return <Html center>{progress} % loaded</Html>\n}\n\nreturn (\n  <Suspense fallback={<Loader />}>\n    <AsyncModels />\n  </Suspense>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing PresentationControls in React Three Fiber\nDESCRIPTION: Example implementation of PresentationControls component showing all available props and their configuration. The component provides smooth camera controls with spring physics and customizable limits for rotation and movement.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/presentation-controls.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<PresentationControls\n  enabled={true} // the controls can be disabled by setting this to false\n  global={false} // Spin globally or by dragging the model\n  cursor={true} // Whether to toggle cursor style on drag\n  snap={false} // Snap-back to center (can also be a spring config)\n  speed={1} // Speed factor\n  zoom={1} // Zoom factor when half the polar-max is reached\n  rotation={[0, 0, 0]} // Default rotation\n  polar={[0, Math.PI / 2]} // Vertical limits\n  azimuth={[-Infinity, Infinity]} // Horizontal limits\n  config={{ mass: 1, tension: 170, friction: 26 }} // Spring config\n  domElement={events.connected} // The DOM element events for this controller will attach to\n>\n  <mesh />\n</PresentationControls>\n```\n\n----------------------------------------\n\nTITLE: Advanced Bounds Usage with useBounds Hook\nDESCRIPTION: Shows how to use the useBounds hook for dynamic camera control and scene boundary management. Includes examples of refreshing bounds, moving camera, changing orientation, and handling orthographic cameras.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/bounds.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo() {\n  const bounds = useBounds()\n  useEffect(() => {\n    // Calculate scene bounds\n    bounds.refresh().clip().fit()\n\n    // Or, focus a specific object or box3\n    // bounds.refresh(ref.current).clip().fit()\n    // bounds.refresh(new THREE.Box3()).clip().fit()\n\n    // Or, move the camera to a specific position, and change its orientation\n    // bounds.moveTo([0, 10, 10]).lookAt({ target: [5, 5, 0], up: [0, -1, 0] })\n\n    // For orthographic cameras, reset has to be used to center the view (fit would only change its zoom to match the bounding box)\n    // bounds.refresh().reset().clip().fit()\n  }, [...])\n}\n\n<Bounds>\n  <Foo />\n</Bounds>\n```\n\n----------------------------------------\n\nTITLE: Using PerformanceMonitor for Resolution Adjustment in React\nDESCRIPTION: This example demonstrates how to use the PerformanceMonitor component to dynamically adjust the resolution (device pixel ratio) of a Canvas based on performance. It starts with a DPR of 1.5 and adjusts to 1 or 2 based on performance.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/performance-monitor.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [dpr, setDpr] = useState(1.5)\n  return (\n    <Canvas dpr={dpr}>\n      <PerformanceMonitor onIncline={() => setDpr(2)} onDecline={() => setDpr(1)} />\n```\n\n----------------------------------------\n\nTITLE: Rendering 3D Text with Text3D Component in JSX\nDESCRIPTION: Demonstrates basic usage of the Text3D component to render 3D text with a custom font and material. The component requires a font in JSON format and accepts textOptions for TextGeometry configuration.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/text3d.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Text3D font={fontUrl} {...textOptions}>\n  Hello world!\n  <meshNormalMaterial />\n</Text3D>\n```\n\n----------------------------------------\n\nTITLE: Importing Components from React Three Drei\nDESCRIPTION: Example of importing specific components from the @react-three/drei package in a React application. This demonstrates how to access and use the library's components.\nSOURCE: https://github.com/pmndrs/drei/blob/master/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PerspectiveCamera, PositionalAudio, ... } from '@react-three/drei'\n```\n\n----------------------------------------\n\nTITLE: Combining TransformControls with OrbitControls in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use TransformControls alongside OrbitControls. The makeDefault property on OrbitControls allows TransformControls to temporarily disable it when the user is manipulating the transform gizmo.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/transform-controls.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<TransformControls mode=\"translate\" />\n<OrbitControls makeDefault />\n```\n\n----------------------------------------\n\nTITLE: Rendering Centered Text with Drei in React Three Fiber\nDESCRIPTION: Creates a Text component with centered alignment in both X and Y axes. The text is rendered with black color using the troika-3d-text engine for high-quality rendering with signed distance fields.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/text.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Text color=\"black\" anchorX=\"center\" anchorY=\"middle\">\n  hello world!\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Loading Different Environment Map Formats in React Three Fiber\nDESCRIPTION: These examples demonstrate how to load various environment map formats using the Environment component, including HDR, EXR, gainmap JPG, and cube texture formats.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/environment.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Environment files=\"file.hdr\" />\n<Environment files=\"file.exr\" />\n<Environment files=\"file.jpg\" />\n<Environment files={['file.webp', 'file-gainmap.webp', 'file.json']} />\n<Environment files={['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png']} />\n```\n\n----------------------------------------\n\nTITLE: Basic MeshPortalMaterial Implementation\nDESCRIPTION: Example showing basic usage of MeshPortalMaterial applied to a plane geometry with a sphere inside the portal.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/mesh-portal-material.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh {...props}>\n  <planeGeometry />\n  <MeshPortalMaterial>\n    <mesh>\n      <sphereGeometry />\n    </mesh>\n  </MeshPortalMaterial>\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Ground Projection with Environment in React Three Fiber\nDESCRIPTION: These examples demonstrate how to use ground projection with the Environment component, including basic usage and advanced configuration options.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/environment.mdx#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Environment ground />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Environment\n  ground={{\n    height: 15, // Height of the camera that was used to create the env map (Default: 15)\n    radius: 60, // Radius of the world. (Default 60)\n    scale: 1000, // Scale of the backside projected sphere that holds the env texture (Default: 1000)\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useAspect Hook for Responsive Image Scaling in React Three Fiber\nDESCRIPTION: This example demonstrates how to use the useAspect hook to maintain proper aspect ratio for an image in a 3D scene. The hook calculates the appropriate scale values based on the original image dimensions and returns them as an array that can be directly applied to a mesh.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/use-aspect.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst scale = useAspect(\n  1024,                     // Pixel-width\n  512,                      // Pixel-height\n  1                         // Optional scaling factor\n)\nreturn (\n  <mesh scale={scale}>\n    <planeGeometry />\n    <meshBasicMaterial map={imageTexture} />\n\n```\n\n----------------------------------------\n\nTITLE: Implementing PositionalAudio Component in React Three Fiber\nDESCRIPTION: Example showing how to use the PositionalAudio component to add spatial audio to a Three.js scene. The component accepts a URL for the audio source, distance parameter for audio falloff, and supports looping. It inherits all props from THREE.PositionalAudio.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/positional-audio.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<PositionalAudio\n  url=\"/sound.mp3\"\n  distance={1}\n  loop\n  {...props} // All THREE.PositionalAudio props are valid\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing React Three Drei via npm\nDESCRIPTION: Command to install the @react-three/drei package using npm. This is the primary way to add the library to a project.\nSOURCE: https://github.com/pmndrs/drei/blob/master/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-three/drei\n```\n\n----------------------------------------\n\nTITLE: Using Environment Preset in React Three Fiber\nDESCRIPTION: This snippet shows how to use a preset environment map in the Environment component. Presets are pre-defined HDRI assets hosted on GitHub.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/environment.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Environment preset=\"city\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Edges Component with Three.js/React\nDESCRIPTION: Demonstrates how to use the Edges component to create visible edges on a 3D mesh. The component extends THREE.EdgesGeometry and allows customization of edge appearance through properties like linewidth, scale, and angle threshold. It automatically inherits geometry from its parent mesh.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/edges.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <boxGeometry />\n  <meshBasicMaterial />\n  <Edges\n    linewidth={4}\n    scale={1.1}\n    threshold={15} // Display edges only when the angle between two faces exceeds this value (default=15 degrees)\n    color=\"white\"\n  />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Using Merged Component with Basic Meshes in React Three Fiber\nDESCRIPTION: Demonstrates how to use the Merged component with basic THREE.Mesh objects like boxes and spheres. The component creates efficient instances that only cost one draw call per mesh type, regardless of how many instances are rendered.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/merged.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Merged meshes={[box, sphere]}>\n  {(Box, Sphere) => (\n    <>\n      <Box position={[-2, -2, 0]} color=\"red\" />\n      <Box position={[-3, -3, 0]} color=\"tomato\" />\n      <Sphere scale={0.7} position={[2, 1, 0]} color=\"green\" />\n      <Sphere scale={0.7} position={[3, 2, 0]} color=\"teal\" />\n    </>\n  )}\n</Merged>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Billboard Component with Text in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the Billboard component to create a group that always faces the camera. The component accepts props to control axis locking and camera following behavior, and can contain any children components like Text.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/billboard.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Billboard\n  follow={true}\n  lockX={false}\n  lockY={false}\n  lockZ={false} // Lock the rotation on the z axis (default=false)\n>\n  <Text fontSize={1}>I'm a billboard</Text>\n</Billboard>\n```\n\n----------------------------------------\n\nTITLE: Using SoftShadows Component in React Three Fiber\nDESCRIPTION: Example of how to implement the SoftShadows component in a React Three Fiber scene. This adds percent closer soft shadows to all objects in the scene.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/soft-shadows.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SoftShadows />\n```\n\n----------------------------------------\n\nTITLE: Using useTrail Hook in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the useTrail hook to generate a trail of points that follow a target object. The hook returns a ref containing Vector3 points and accepts configuration options including length, decay rate, coordinate space, stride distance, and update interval.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/trail-use-trail.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = useTrail(\n  target, // Required target object. This object will produce the trail.\n  {\n    length, // Length of the line\n    decay, // How fast the line fades away\n    local, // Wether to use the target's world or local positions\n    stride, // Min distance between previous and current point\n    interval, // Number of frames to wait before next calculation\n  }\n)\n\n// To use...\nuseFrame(() => {\n  meshLineRef.current.position.setPoints(points.current)\n})\n```\n\n----------------------------------------\n\nTITLE: Using AdaptiveDpr Component with Pixelated Mode in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the AdaptiveDpr component with the pixelated option enabled. When included in a scene, it automatically reduces the pixel-ratio during performance regressions according to canvas min/max settings, optionally applying a pixelated filter for even better performance.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/adaptive-dpr.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AdaptiveDpr pixelated />\n```\n\n----------------------------------------\n\nTITLE: Basic Decal Implementation with Custom Material\nDESCRIPTION: Demonstrates how to create a decal on a mesh with custom position, rotation, and scale properties. Uses a custom material with polygon offset for proper rendering.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/decal.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<mesh>\n  <sphereGeometry />\n  <meshBasicMaterial />\n  <Decal\n    debug // Makes \"bounding box\" of the decal visible\n    position={[0, 0, 0]} // Position of the decal\n    rotation={[0, 0, 0]} // Rotation of the decal (can be a vector or a degree in radians)\n    scale={1} // Scale of the decal\n  >\n    <meshBasicMaterial\n      map={texture}\n      polygonOffset\n      polygonOffsetFactor={-1} // The material should take precedence over the original\n    />\n  </Decal>\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Defining Stage Component Props in TypeScript\nDESCRIPTION: This snippet defines the props interface for the Stage component, including options for lighting preset, shadows, camera adjustment, environment, intensity, and centering.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/stage.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype StageProps = {\n  /** Lighting setup, default: \"rembrandt\" */\n  preset?:\n    | 'rembrandt'\n    | 'portrait'\n    | 'upfront'\n    | 'soft'\n    | { main: [x: number, y: number, z: number]; fill: [x: number, y: number, z: number] }\n  /** Controls the ground shadows, default: \"contact\" */\n  shadows?: boolean | 'contact' | 'accumulative' | StageShadows\n  /** Optionally wraps and thereby centers the models using <Bounds>, can also be a margin, default: true */\n  adjustCamera?: boolean | number\n  /** The default environment, default: \"city\" */\n  environment?: PresetsType | Partial<EnvironmentProps>\n  /** The lighting intensity, default: 0.5 */\n  intensity?: number\n  /** To adjust centering, default: undefined */\n  center?: Partial<CenterProps>\n}\n\ntype StageShadows = Partial<AccumulativeShadowsProps> &\n  Partial<RandomizedLightProps> &\n  Partial<ContactShadowsProps> & {\n    type: 'contact' | 'accumulative'\n    /** Shadow plane offset, default: 0 */\n    offset?: number\n    /** Shadow bias, default: -0.0001 */\n    bias?: number\n    /** Shadow normal bias, default: 0 */\n    normalBias?: number\n    /** Shadow map size, default: 1024 */\n    size?: number\n  }\n```\n\n----------------------------------------\n\nTITLE: Using the useDetectGPU Hook with React Suspense\nDESCRIPTION: This example demonstrates how to use the useDetectGPU hook to detect the user's GPU capabilities and render different components based on the detected tier. The hook returns GPU information that can be used to provide fallback experiences for mobile or low-tier GPUs.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/detect-gpu-use-detect-gpu.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const GPUTier = useDetectGPU()\n  // show a fallback for mobile or lowest tier GPUs\n  return (\n    {(GPUTier.tier === 0 || GPUTier.isMobile) ? <Fallback /> : <Canvas>...</Canvas>\n\n<Suspense fallback={null}>\n  <App />\n```\n\n----------------------------------------\n\nTITLE: Initializing useAnimations Hook with Mesh Reference\nDESCRIPTION: Demonstrates how to use the useAnimations hook with a GLTF model, accessing animations and controlling them through actions. The hook returns a ref, mixer, names, actions, and clips that can be used to control animations.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/use-animations.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst { nodes, materials, animations } = useGLTF(url)\nconst { ref, mixer, names, actions, clips } = useAnimations(animations)\nuseEffect(() => {\n  actions?.jump.play()\n})\nreturn (\n  <mesh ref={ref} />\n```\n\n----------------------------------------\n\nTITLE: Using useIntersect Hook with React Three Fiber\nDESCRIPTION: Demonstrates how to implement viewport intersection detection for a 3D mesh using the useIntersect hook. The hook returns a ref that can be attached to renderable Three.js objects and provides visibility state changes through a callback function.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/use-intersect.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst ref = useIntersect((visible) => console.log('object is visible', visible))\nreturn <mesh ref={ref} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic SpotLight in React Three Fiber\nDESCRIPTION: Basic implementation of a volumetric spotlight with configuration for distance, angle, attenuation, and diffuse-cone angle power.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/spot-light.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SpotLight\n  distance={5}\n  angle={0.15}\n  attenuation={5}\n  anglePower={5} // Diffuse-cone anglePower (default: 5)\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up KeyboardControls with Enum-based Controls\nDESCRIPTION: Demonstrates how to initialize KeyboardControls by defining an enum for control actions and creating a mapping of keys to those actions. This setup wraps the application with the KeyboardControls provider component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/keyboard-controls.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nenum Controls {\n  forward = 'forward',\n  back = 'back',\n  left = 'left',\n  right = 'right',\n  jump = 'jump',\n}\nfunction App() {\n  const map = useMemo<KeyboardControlsEntry<Controls>[]>(()=>[\n    { name: Controls.forward, keys: ['ArrowUp', 'KeyW'] },\n    { name: Controls.back, keys: ['ArrowDown', 'KeyS'] },\n    { name: Controls.left, keys: ['ArrowLeft', 'KeyA'] },\n    { name: Controls.right, keys: ['ArrowRight', 'KeyD'] },\n    { name: Controls.jump, keys: ['Space'] },\n  ], [])\n  return (\n    <KeyboardControls map={map}>\n      <App />\n    </KeyboardControls>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of Outlines Component\nDESCRIPTION: Demonstrates how to add an Outlines component to a basic mesh in React Three Fiber. The example shows how to customize the outline thickness and color, wrapping a basic box geometry with a pink outline.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/outlines.mdx#2025-04-11_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<mesh>\n  <boxGeometry />\n  <meshBasicMaterial />\n  <Outlines thickness={0.05} color=\"hotpink\" />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Basic Occlusion with Html Component in JSX\nDESCRIPTION: Shows how to use the occlude prop to make HTML content hide behind 3D geometry in the scene. This basic implementation enables complete occlusion behavior.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/html.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Html occlude />\n```\n\n----------------------------------------\n\nTITLE: Implementing MarchingCubes Component with Child Elements in React Three Fiber\nDESCRIPTION: Example of using the MarchingCubes component with nested MarchingCube and MarchingPlane elements. The MarchingCubes parent component accepts parameters for resolution, maxPolyCount, and rendering options. Child components define the shapes and properties within the marching cubes algorithm.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/marching-cubes.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MarchingCubes resolution={50} maxPolyCount={20000} enableUvs={false} enableColors={true}>\n  <MarchingCube strength={0.5} subtract={12} color={new Color('#f0f')} position={[0.5, 0.5, 0.5]} />\n\n  <MarchingPlane planeType=\"y\" strength={0.5} subtract={12} />\n</MarchingCubes>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of PivotControls Component in JSX\nDESCRIPTION: This snippet demonstrates the basic usage of the PivotControls component in a React component. It wraps a mesh object, allowing it to be manipulated with the pivot controls.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/pivot-controls.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PivotControls>\n  <mesh />\n</PivotControls>\n```\n\n----------------------------------------\n\nTITLE: Custom GLSL Shader for SpotLightShadow Effects\nDESCRIPTION: This GLSL code snippet shows how to create custom shadow effects using the shader prop in SpotLightShadow. It demonstrates setting opaque and transparent shadow areas using the gl_FragColor output.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/spot-light-shadow.mdx#2025-04-11_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\ngl_FragColor = vec4(vec3(1.), 1.); // Opaque\ngl_FragColor = vec4(vec3(0.), 1.); // Transparent\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Component in React Three Fiber\nDESCRIPTION: This snippet demonstrates the usage of the Environment component with various configuration options. It shows how to set up background, intensity, rotation, and file paths for environment maps.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/environment.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Environment\n  background={false} // can be true, false or \"only\" (which only sets the background) (default: false)\n  backgroundBlurriness={0} // optional blur factor between 0 and 1 (default: 0, only works with three 0.146 and up)\n  backgroundIntensity={1} // optional intensity factor (default: 1, only works with three 0.163 and up)\n  backgroundRotation={[0, Math.PI / 2, 0]} // optional rotation (default: 0, only works with three 0.163 and up)\n  environmentIntensity={1} // optional intensity factor (default: 1, only works with three 0.163 and up)\n  environmentRotation={[0, Math.PI / 2, 0]} // optional rotation (default: 0, only works with three 0.163 and up)\n  files={['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png']}\n  path=\"/\"\n  preset={null}\n  scene={undefined} // adds the ability to pass a custom THREE.Scene, can also be a ref\n  encoding={undefined} // adds the ability to pass a custom THREE.TextureEncoding (default: THREE.sRGBEncoding for an array of files and THREE.LinearEncoding for a single texture)\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading a Font with useFont in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to load a font using the useFont hook and apply it to a Text3D component. The hook returns a THREE.Font object that can be directly passed to Text3D components.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/use-font.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst font = useFont('/fonts/helvetiker_regular.typeface.json')\nreturn <Text3D font={font} />\n```\n\n----------------------------------------\n\nTITLE: Using the useDepthBuffer Hook in React Three Fiber\nDESCRIPTION: Creates a depth buffer that can be shared among effects that require depth information. The hook accepts configuration options for buffer size and render frequency, returning a depthTexture that can be passed to components requiring depth information.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/use-depth-buffer.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst depthBuffer = useDepthBuffer({\n  size: 256, // Size of the FBO, 256 by default\n  frames: Infinity, // How many frames it renders, Infinity by default\n})\nreturn <SomethingThatNeedsADepthBuffer depthBuffer={depthBuffer} />\n```\n\n----------------------------------------\n\nTITLE: Using Detailed Component for Level of Detail Rendering in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the Detailed component to render different levels of mesh detail based on distance. It takes an array of distances and corresponding mesh components as children, allowing for efficient rendering of complex scenes.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/detailed.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Detailed distances={[0, 10, 20]} {...props}>\n  <mesh geometry={highDetail} />\n  <mesh geometry={mediumDetail} />\n  <mesh geometry={lowDetail} />\n</Detailed>\n```\n\n----------------------------------------\n\nTITLE: Blending Occlusion with Html Component in JSX\nDESCRIPTION: Shows how to enable blending occlusion mode, which makes HTML content hide behind geometry as if it were part of the 3D scene, providing a more realistic integration with the scene.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/html.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Enable real occlusion\n<Html occlude=\"blending\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Gradient Texture with GradientTexture Component in JSX\nDESCRIPTION: A basic example of applying a linear gradient texture to a plane mesh. The gradient transitions between two colors (aquamarine and hotpink) and uses the default size of 1024px.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/gradient-texture.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <planeGeometry />\n  <meshBasicMaterial>\n    <GradientTexture\n      stops={[0, 1]} // As many stops as you want\n      colors={['aquamarine', 'hotpink']} // Colors need to match the number of stops\n      size={1024} // Size is optional, default = 1024\n    />\n  </meshBasicMaterial>\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Outlines Component Props\nDESCRIPTION: Defines the TypeScript interface for the Outlines component properties, including color, thickness, opacity, and other customization options. This interface extends ThreeElements['group'] and documents all available configuration options.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/outlines.mdx#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype OutlinesProps = ThreeElements['group'] & {\n  /** Outline color, default: black */\n  color: ReactThreeFiber.Color\n  /** Line thickness is independent of zoom, default: false */\n  screenspace: boolean\n  /** Outline opacity, default: 1 */\n  opacity: number\n  /** Outline transparency, default: false */\n  transparent: boolean\n  /** Outline thickness, default 0.05 */\n  thickness: number\n  /** Geometry crease angle (0 === no crease), default: Math.PI */\n  angle: number\n  /** Clipping planes, default: null (no clipping) works the same as clipping planes on any material */\n  clippingPlanes: THREE.Plane[] | null\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparent Shadows with ShadowAlpha in React Three Fiber\nDESCRIPTION: Demonstrates how to apply opacity and alphaMap to object shadows using the ShadowAlpha component. The component uses Screendoor transparency with a dither pattern, which may be visible when the camera is close to the shadow. Optional props include opacity override and alphaMap texture.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/shadow-alpha.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <geometry />\n  <material transparent opacity={0.5} />\n\n  <ShadowAlpha\n    opacity={undefined} // number. Override the opacity of the shadow.\n    alphaMap={undefined} // THREE.Texture. Override the alphaMap of the shadow\n  />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Using CurveModifier Component with Animation and Scroll\nDESCRIPTION: This example demonstrates how to implement a CurveModifier with a CatmullRomCurve3 path. It shows two methods for moving along the curve: continuous movement in the animation frame and scroll-based movement using a scroll controller.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/modifiers/curve-modifier.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst curveRef = useRef<CurveModifierRef>()\nconst scroll = useScroll()\n\nconst curve = React.useMemo(() => new THREE.CatmullRomCurve3([...handlePos], true, 'centripetal'), [handlePos])\n\nuseFrame(() => {\n  if (curveRef.current) {\n    // Move continuously along the curve\n    curveRef.current.moveAlongCurve(0.001)\n    \n    // Move along the curve using the scrollbar\n    curveRef.current.uniforms.pathOffset.value = scroll.offset\n  }\n})\n\nreturn (\n  <CurveModifier ref={curveRef} curve={curve}>\n    <mesh>\n      <boxGeometry args={[10, 10]} />\n    </mesh>\n  </CurveModifier>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Cloud and Clouds Components in JSX\nDESCRIPTION: This example demonstrates how to use the Cloud and Clouds components in a React component. It shows how to create multiple clouds with different properties and group them for efficient rendering.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/cloud.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Clouds material={THREE.MeshBasicMaterial}>\n  <Cloud segments={40} bounds={[10, 2, 2]} volume={10} color=\"orange\" />\n  <Cloud seed={1} scale={2} volume={5} color=\"hotpink\" fade={100} />\n</Clouds>\n```\n\n----------------------------------------\n\nTITLE: Accessing Texture via Ref\nDESCRIPTION: Example showing how to access the video texture using a ref with the VideoTexture component. This provides an alternate method to access the texture instance for use elsewhere in the component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/video-texture-use-video-texture.mdx#2025-04-11_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst textureRef = useRef()\n<VideoTexture ref={textureRef} src=\"/video.mp4\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Points with Buffer Arrays in JSX\nDESCRIPTION: This snippet shows an alternative API for the Points component where position, color, and size data are provided as buffer arrays. This approach is useful when working with large datasets or when performance is a priority.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/points.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Points positions={positionsBuffer} colors={colorsBuffer} sizes={sizesBuffer}>\n  <pointsMaterial />\n</Points>\n```\n\n----------------------------------------\n\nTITLE: Using the useCursor Hook with React useState in Three.js\nDESCRIPTION: This snippet demonstrates how to use the useCursor hook to change the cursor style when a 3D mesh is hovered. It utilizes React's useState hook to track hover state and applies the cursor change accordingly.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/use-cursor.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [hovered, set] = useState()\nuseCursor(hovered, /*'pointer', 'auto', document.body*/)\nreturn (\n  <mesh onPointerOver={() => set(true)} onPointerOut={() => set(false)}>\n\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Maps with Different Options\nDESCRIPTION: Examples showing different ways to load environment maps using presets, HDR files, or custom cube face images.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/use-environment.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst presetTexture = useEnvironment({ preset: 'city' })\nconst rgbeTexture = useEnvironment({ files: 'model.hdr' })\nconst cubeTexture = useEnvironment({ files: ['px', 'nx', 'py', 'ny', 'pz', 'nz'].map((n) => `${n}.png`) })\n```\n\n----------------------------------------\n\nTITLE: Rendering a ScreenQuad Component with Custom Material in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the ScreenQuad component to create a full-screen triangle, typically used for fragment shader work or post-processing effects. The ScreenQuad wraps a custom material component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shapes/screen-quad.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ScreenQuad>\n  <myMaterial />\n</ScreenQuad>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Environment in React Three Fiber\nDESCRIPTION: This snippet shows how to create a custom environment by providing children to the Environment component. It renders the contents into an off-buffer and captures a single frame with a cube camera.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/environment.mdx#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Environment background near={1} far={1000} resolution={256}>\n  <mesh scale={100}>\n    <sphereGeometry args={[1, 64, 64]} />\n    <meshBasicMaterial map={texture} side={THREE.BackSide} />\n  </mesh>\n</Environment>\n```\n\n----------------------------------------\n\nTITLE: Creating Mesh Objects with Drei Components in JSX\nDESCRIPTION: This snippet demonstrates how to use Drei's pre-defined mesh components to create various 3D objects. It shows examples of creating a Box, Plane, and Sphere with different properties and materials. The components accept buffer geometry arguments and Three.js Mesh properties.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shapes/mesh.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  args={[1, 1, 1]}                // Args for the buffer geometry\n  {...meshProps}                  // All THREE.Mesh props are valid\n/>\n\n// Plane with buffer geometry args\n<Plane args={[2, 2]} />\n\n// Box with color set on the default MeshBasicMaterial\n<Box material-color=\"hotpink\" />\n\n// Sphere with a MeshStandardMaterial\n<Sphere>\n  <meshStandardMaterial color=\"hotpink\" />\n</Sphere>\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Line Segments with Prop-based Segments Component in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the Segments component to render multiple line segments with different colors and positions. It shows the prop-based approach where each Segment is defined declaratively.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/segments.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Segments\n  limit={1000}\n  lineWidth={1.0}\n  // All THREE.LineMaterial props are valid\n  {...materialProps}\n>\n  <Segment start={[0, 0, 0]} end={[0, 10, 0]} color=\"red\" />\n  <Segment start={[0, 0, 0]} end={[0, 10, 10]} color={[1, 0, 1]} />\n</Segments>\n```\n\n----------------------------------------\n\nTITLE: Loading SVG with drei Svg Component\nDESCRIPTION: Example showing basic usage of the Svg component from drei library. The component accepts either a URL to an SVG file or raw SVG string data as the src prop.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/svg.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Svg src={urlOrRawSvgString} />\n```\n\n----------------------------------------\n\nTITLE: Using useCamera Hook with Custom Camera in JSX\nDESCRIPTION: This snippet demonstrates how to apply the useCamera hook to a mesh component to ensure proper raytracing functionality with a custom camera. This is particularly useful for HUDs or portals that use non-default cameras.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/use-camera.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh raycast={useCamera(customCamera)} />\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of Center Component with Scaling in JSX\nDESCRIPTION: This snippet shows how to use the onCentered callback to scale a model to fit the screen height using the Center component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/center.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ScaledModel() {\n  const viewport = useThree((state) => state.viewport)\n  return (\n    <Center onCentered={({ container, height }) => container.scale.setScalar(viewport.height / height)}>\n      <Model />\n    </Center>\n```\n\n----------------------------------------\n\nTITLE: Using Merged Component with GLTF Models in React Three Fiber\nDESCRIPTION: Shows how to use the Merged component with loaded 3D models using object notation. The example demonstrates usage with GLTF models loaded via useGLTF hook, allowing efficient instantiation of complex model parts.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/merged.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Model({ url }) {\n  const { nodes } = useGLTF(url)\n  return (\n    <Merged meshes={nodes}>\n      {({ Screw, Filter, Pipe }) => (\n        <>\n          <Screw />\n          <Filter position={[1, 2, 3]} />\n          <Pipe position={[4, 5, 6]} />\n        </>\n      )}\n    </Merged>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using WebcamVideoTexture with Render Props Pattern\nDESCRIPTION: Example showing how to use WebcamVideoTexture component with a render props pattern to apply the webcam texture to a meshBasicMaterial.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/webcam-video-texture.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<WebcamVideoTexture>\n  {(texture) => <meshBasicMaterial map={texture} />}\n\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Line Segments with Ref-based Segments Component in React Three Fiber\nDESCRIPTION: This snippet illustrates how to use the Segments component with a ref to dynamically update segment properties each frame. It uses the useFrame hook to modify the start, end, and color of a segment in real-time.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/segments.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst ref = useRef()\n\n// E.g. to change segment position each frame.\nuseFrame(() => {\n  ref.current.start.set(0,0,0)\n  ref.current.end.set(10,10,0)\n  ref.current.color.setRGB(0,0,0)\n})\n// ...\n<Segments\n  limit={1000}\n  lineWidth={1.0}\n>\n  <Segment ref={ref} />\n</Segments>\n```\n\n----------------------------------------\n\nTITLE: Implementing SpotLight with Depth Buffer\nDESCRIPTION: Example showing how to use a depth buffer with SpotLight to create soft particle effects. Uses the useDepthBuffer hook to generate the depth buffer.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/spot-light.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo() {\n  const depthBuffer = useDepthBuffer()\n  return <SpotLight depthBuffer={depthBuffer} />\n```\n\n----------------------------------------\n\nTITLE: Using MediaStream with useVideoTexture\nDESCRIPTION: Example of using useVideoTexture with a MediaStream obtained from getDisplayMedia() for screen sharing functionality. Shows how to handle the stream state and suspend rendering until stream is available.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/video-texture-use-video-texture.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst [stream, setStream] = useState<MediaStream | null>(null)\n\nreturn (\n  <mesh onClick={async () => setStream(await navigator.mediaDevices.getDisplayMedia({ video: true }))}>\n    <React.Suspense fallback={<meshBasicMaterial wireframe />}>\n      <VideoMaterial src={stream} />\n    </React.Suspense>\n```\n\n----------------------------------------\n\nTITLE: Using SpriteAnimator with useSpriteLoader for Pre-loaded Sprites\nDESCRIPTION: Example showing how to use the SpriteAnimator with pre-loaded sprite data from the useSpriteLoader hook. This approach is recommended for better performance and resource management.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/sprite-animator.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst { spriteObj: statics } = useSpriteLoader('/statics.png', '/statics.json', ['heart', 'skull', 'sword'], null)\n\n<SpriteAnimator\n  position={[2, 2.8, 0.01]}\n  fps={0}\n  meshProps={{ frustumCulled: false, scale: 2.5 }}\n  autoPlay={true}\n  loop={true}\n  flipX={false}\n  startFrame={0}\n  frameName={'sword'}\n  spriteDataset={statics}\n  asSprite={false}\n  alphaTest={0.01}\n/>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Image Material Manipulation Example\nDESCRIPTION: Example showing how to dynamically modify image material properties like radius, zoom, grayscale, and color using useFrame hook.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/image.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo() {\n  const ref = useRef()\n  useFrame(() => {\n    ref.current.material.radius = ... // between 0 and 1\n    ref.current.material.zoom = ... // 1 and higher\n    ref.current.material.grayscale = ... // between 0 and 1\n    ref.current.material.color.set(...) // mix-in color\n  })\n  return <Image ref={ref} url=\"/file.jpg\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Applying MeshDistortMaterial to a 3D Mesh in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the MeshDistortMaterial component to apply a distortion effect to a 3D box mesh. The distort prop controls the intensity of the distortion, while the speed prop determines how quickly the distortion changes over time.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/mesh-distort-material.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <boxGeometry />\n  <MeshDistortMaterial distort={1} speed={10} />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Setting Default OrthographicCamera in Three.js Scene\nDESCRIPTION: Shows how to implement a default OrthographicCamera component with custom props that wraps mesh content.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/cameras/orthographic-camera.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<OrthographicCamera makeDefault {...props}>\n  <mesh />\n</OrthographicCamera>\n```\n\n----------------------------------------\n\nTITLE: Using useAnimations Hook with Scene Object\nDESCRIPTION: Shows how to use the useAnimations hook with a pre-existing scene object from a GLTF model. This approach allows direct animation control on the scene level rather than individual mesh references.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/use-animations.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { scene, animations } = useGLTF(url)\nconst { actions } = useAnimations(animations, scene)\nreturn <primitive object={scene} />\n```\n\n----------------------------------------\n\nTITLE: Animating Environment Content in React Three Fiber\nDESCRIPTION: This snippet shows how to create an animated environment map using the Environment component's frames prop for live updates.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/environment.mdx#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <Environment frames={Infinity} resolution={256}>\n    <Float>\n      <mesh />\n    </Float>\n```\n\n----------------------------------------\n\nTITLE: Rendering a RoundedBox Component with Custom Properties in JSX\nDESCRIPTION: This snippet demonstrates how to use the RoundedBox component from the drei library. It shows various customizable properties such as dimensions, radius, smoothness, bevel segments, and crease angle. The component also accepts all standard THREE.Mesh props.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shapes/rounded-box.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RoundedBox\n  args={[1, 1, 1]} // Width, height, depth. Default is [1, 1, 1]\n  radius={0.05} // Radius of the rounded corners. Default is 0.05\n  smoothness={4} // The number of curve segments. Default is 4\n  bevelSegments={4} // The number of bevel segments. Default is 4, setting it to 0 removes the bevel, as a result the texture is applied to the whole geometry.\n  creaseAngle={0.4} // Smooth normals everywhere except faces that meet at an angle greater than the crease angle\n  {...meshProps} // All THREE.Mesh props are valid\n>\n  <meshPhongMaterial color=\"#f3f3f3\" wireframe />\n</RoundedBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Circular Gradient Shadow in React Three Fiber\nDESCRIPTION: Demonstrates usage of the Shadow component from drei to create a canvas-texture-based circular gradient. The component accepts properties for color, colorStop, opacity, and fog interaction.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/shadow.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Shadow\n  color=\"black\"\n  colorStop={0}\n  opacity={0.5}\n  fog={false} // Reacts to fog (default=false)\n/>\n```\n\n----------------------------------------\n\nTITLE: Integrating SpriteAnimator with ScrollControls\nDESCRIPTION: Example demonstrating how to connect SpriteAnimator to ScrollControls for scroll-based animation control. This includes a custom component that syncs scroll position with the sprite animation.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/sprite-animator.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ScrollControls damping={0.2} maxSpeed={0.5} pages={2}>\n  <SpriteAnimator\n    position={[0.0, -1.5, -1.5]}\n    startFrame={0}\n    onEnd={doSomethingOnEnd}\n    onStart={doSomethingOnStart}\n    autoPlay={true}\n    textureImageURL={'sprite.png'}\n    textureDataURL={'sprite.json'}\n  >\n    <FireScroll />\n  </SpriteAnimator>\n</ScrollControls>\n\nfunction FireScroll() {\n  const sprite = useSpriteAnimator()\n  const scroll = useScroll()\n  const ref = React.useRef()\n  useFrame(() => {\n    if (sprite && scroll) {\n      sprite.current = scroll.offset\n    }\n  })\n\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Applying meshBounds Raycast to a Mesh in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the meshBounds function as a raycast method for a mesh component. It offers a performance-optimized alternative to default raycasting, sacrificing some precision for speed.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/mesh-bounds.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh raycast={meshBounds} />\n```\n\n----------------------------------------\n\nTITLE: Implementing CycleRaycast Component in React Three Fiber\nDESCRIPTION: Example usage of the CycleRaycast component showing basic configuration options. The component supports event prevention, scroll wheel interaction, keyboard controls, and change event handling. Event handlers must use stopPropagation() for proper functionality.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/cycle-raycast.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CycleRaycast\n  preventDefault={true} // Call event.preventDefault() (default: true)\n  scroll={true} // Wheel events (default: true)\n  keyCode={9} // Keyboard events (default: 9 [Tab])\n  onChanged={(objects, cycle) => console.log(objects, cycle)} // Optional onChanged event\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useHelper Hook with React Three Fiber in JSX\nDESCRIPTION: Demonstrates how to use the useHelper hook to add a BoxHelper to a mesh. It shows basic usage and conditional rendering based on a condition.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/helper-use-helper.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst mesh = useRef()\nuseHelper(mesh, BoxHelper, 'cyan')\nuseHelper(condition && mesh, BoxHelper, 'red') // you can pass false instead of the object ref to hide the helper\n\n<mesh ref={mesh} ... />\n```\n\n----------------------------------------\n\nTITLE: Basic Bounds Component Usage with Animation Control\nDESCRIPTION: Demonstrates the basic implementation of the Bounds component with various interpolation functions for animation control. Shows how to fit, clip, and observe scene boundaries with custom animation timing.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/bounds.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst interpolateFunc = (t: number) => 1 - Math.exp(-5 * t) + 0.007 * t // Matches the default Bounds behavior\nconst interpolateFunc1 = (t: number) => -t * t * t + 2 * t * t          // Start smoothly, finish linearly\nconst interpolateFunc2 = (t: number) => -t * t * t + t * t + t          // Start linearly, finish smoothly\n\n<Bounds fit clip observe margin={1.2} maxDuration={1} interpolateFunc={interpolateFunc}>\n  <mesh />\n</Bounds>\n```\n\n----------------------------------------\n\nTITLE: Using MeshWobbleMaterial with React Three Fiber\nDESCRIPTION: Demonstrates how to apply the MeshWobbleMaterial to a basic mesh geometry. The material creates a wobbling effect controlled by factor (intensity) and speed parameters. The example shows usage with a basic box geometry.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/mesh-wobble-material.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <boxGeometry />\n  <MeshWobbleMaterial factor={1} speed={10} />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Using BakeShadows Component in React Three Fiber\nDESCRIPTION: Demonstrates how to implement the BakeShadows component within a React Three Fiber Canvas to optimize shadow performance. The component should be mounted alongside models, typically within the same Suspense boundary, to freeze shadow maps and improve rendering performance.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/bake-shadows.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas>\n  <Suspense fallback={null}>\n    <Model />\n    <BakeShadows />\n```\n\n----------------------------------------\n\nTITLE: Using the useFBO Hook with React\nDESCRIPTION: A basic example showing how to use the useFBO hook to create a WebGLRenderTarget with stencilBuffer disabled. The resulting target can be used for off-screen rendering in Three.js.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/fbo-use-fbo.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst target = useFBO({ stencilBuffer: false })\n```\n\n----------------------------------------\n\nTITLE: Creating Radial Gradient Texture with GradientTexture Component in JSX\nDESCRIPTION: An example of creating a radial gradient texture with three color stops. This demonstrates advanced options including width configuration, inner and outer circle radius settings, and the GradientType.Radial type specification.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/gradient-texture.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GradientTexture, GradientType } from './GradientTexture'\n;<mesh>\n  <planeGeometry />\n  <meshBasicMaterial>\n    <GradientTexture\n      stops={[0, 0.5, 1]} // As many stops as you want\n      colors={['aquamarine', 'hotpink', 'yellow']} // Colors need to match the number of stops\n      size={1024} // Size (height) is optional, default = 1024\n      width={1024} // Width of the canvas producing the texture, default = 16\n      type={GradientType.Radial} // The type of the gradient, default = GradientType.Linear\n      innerCircleRadius={0} // Optional, the radius of the inner circle of the gradient, default = 0\n      outerCircleRadius={'auto'} // Optional, the radius of the outer circle of the gradient, default = auto\n    />\n  </meshBasicMaterial>\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Pre-loading Specific Font Characters with Drei Text Component\nDESCRIPTION: Demonstrates how to avoid FOUC (Flash of Unstyled Content) by pre-loading specific characters that the Text component will render. This explicitly passes the font URL and the character set to be used.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/text.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Text font={fontUrl} characters=\"abcdefghijklmnopqrstuvwxyz0123456789!\">\n  hello world!\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Using RenderTexture in JSX\nDESCRIPTION: Example of how to use the RenderTexture component within a mesh in JSX. It demonstrates attaching the RenderTexture as a map to a meshStandardMaterial.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/render-texture.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <planeGeometry />\n  <meshStandardMaterial>\n    <RenderTexture attach=\"map\">\n      <mesh />\n```\n\n----------------------------------------\n\nTITLE: Integrating StatsGl Performance Monitor with React Three Fiber\nDESCRIPTION: This snippet demonstrates how to add the stats-gl performance monitor to a React Three Fiber application. The StatsGl component is placed in the component tree and renders the stats monitor to document.body, taking over the render loop. Additional props can be passed to customize the stats monitor.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/stats-gl.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StatsGl className=\"stats\" {...props} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Stars Component in React Three Fiber Scene\nDESCRIPTION: This snippet demonstrates how to use the Stars component from drei to add a blinking starfield to a 3D scene. It showcases various configuration options including radius, depth, count, factor, saturation, fade, and speed.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/stars.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Stars radius={100} depth={50} count={5000} factor={4} saturation={0} fade speed={1} />\n```\n\n----------------------------------------\n\nTITLE: Using useNormalTexture Hook in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the useNormalTexture hook to load a normal texture and apply it to a meshStandardMaterial. The hook takes an index for the texture and optional texture attributes. It returns the normalMap and URL.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/normal-texture-use-normal-texture.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [normalMap, url] = useNormalTexture(\n  1, // index of the normal texture - https://github.com/emmelleppi/normal-maps/blob/master/normals.json\n  // second argument is texture attributes\n  {\n    offset: [0, 0],\n    repeat: [normRepeat, normRepeat],\n    anisotropy: 8\n  }\n)\n\nreturn (\n  ...\n  <meshStandardMaterial normalMap={normalMap} />\n  ...\n)\n```\n\n----------------------------------------\n\nTITLE: Aligning 3D Text with Center Component in JSX\nDESCRIPTION: Shows how to align the 3D text using the Center component from drei. This example aligns the text to the top-left corner of its container.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/text3d.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Center top left>\n  <Text3D>hello</Text3D>\n</Center>\n```\n\n----------------------------------------\n\nTITLE: Using TransformControls with Object References in React Three Fiber\nDESCRIPTION: This example shows how to use TransformControls by referencing an object instead of wrapping it. This approach makes it easier to exchange the target object and doesn't require the object to be in the same sub-graph.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/transform-controls.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TransformControls object={mesh} mode=\"translate\" />\n<mesh ref={mesh} />\n```\n\n----------------------------------------\n\nTITLE: Using RenderCubeTexture in React Three Fiber\nDESCRIPTION: Example usage of RenderCubeTexture component as an environment map in a Three.js mesh material, demonstrating how to attach it to a material's envMap property.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/render-cube-texture.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst api = useRef<RenderCubeTextureApi>(null!)\n// ...\n<mesh ref={api}>\n  <sphereGeometry args={[1, 64, 64]} />\n    <meshBasicMaterial>\n      <RenderCubeTexture attach=\"envMap\" flip>\n        <mesh />\n```\n\n----------------------------------------\n\nTITLE: Using View Component with React Three Fiber\nDESCRIPTION: Example of how to use the View component in a React component. It demonstrates creating multiple views, mixing them with HTML content, and using the View.Port component inside a Canvas.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/view.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <main ref={container}>\n    <h1>Html content here</h1>\n    <View style={{ width: 200, height: 200 }}>\n      <mesh geometry={foo} />\n      <OrbitControls />\n    </View>\n    <View className=\"canvas-view\">\n      <mesh geometry={bar} />\n      <CameraControls />\n    </View>\n    <Canvas eventSource={container}>\n      <View.Port />\n    </Canvas>\n  </main>\n)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of AccumulativeShadows Component\nDESCRIPTION: Practical example showing how to implement the AccumulativeShadows component with RandomizedLight for creating soft shadows.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/accumulative-shadows.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AccumulativeShadows temporal frames={100} scale={10}>\n  <RandomizedLight amount={8} position={[5, 5, -10]} />\n</AccumulativeShadows>\n```\n\n----------------------------------------\n\nTITLE: Using CubeCamera with Environment in React Three Fiber\nDESCRIPTION: This example demonstrates how to use a pre-existing cube texture with the Environment component by passing it through a CubeCamera.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/environment.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<CubeCamera>{(texture) => <Environment map={texture} />}</CubeCamera>\n```\n\n----------------------------------------\n\nTITLE: Rendering Cubic Bezier Line in Three.js using drei\nDESCRIPTION: Demonstrates the usage of CubicBezierLine component for creating smooth curved lines with cubic bezier interpolation. The component allows specification of start and end points, two control points for curve shaping, and various styling options including color, line width, and vertex colors.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shapes/cubic-bezier-line.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CubicBezierLine\n  start={[0, 0, 0]}               // Starting point\n  end={[10, 0, 10]}               // Ending point\n  midA={[5, 0, 0]}                // First control point\n  midB={[0, 0, 5]}                // Second control point\n  color=\"black\"                   // Default\n  lineWidth={1}                   // In pixels (default)\n  dashed={false}                  // Default\n  vertexColors={[[0, 0, 0], ...]} // Optional array of RGB values for each point\n  {...lineProps}                  // All THREE.Line2 props are valid\n  {...materialProps}              // All THREE.LineMaterial props are valid\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Preload Component in Three.js Scene with React\nDESCRIPTION: This snippet demonstrates how to use the Preload component within a Canvas to precompile all objects in a Three.js scene. It includes a Suspense component for handling asynchronous loading and a Model component representing the 3D content.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/preload.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas>\n  <Suspense fallback={null}>\n    <Model />\n    <Preload all />\n```\n\n----------------------------------------\n\nTITLE: Using GizmoHelper with GizmoViewport in React Three Fiber\nDESCRIPTION: Example of implementing the GizmoHelper component with GizmoViewport for camera visualization and control. The component supports alignment, margins, update callbacks, and rendering priority settings. It works with the default camera controls when the makeDefault prop is set.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/gizmo-helper.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<GizmoHelper\n  alignment=\"bottom-right\" // widget alignment within scene\n  margin={[80, 80]} // widget margins (X, Y)\n  onUpdate={/* called during camera animation  */}\n  onTarget={/* return current camera target (e.g. from orbit controls) to center animation */}\n  renderPriority={/* use renderPriority to prevent the helper from disappearing if there is another useFrame(..., 1)*/}\n>\n  <GizmoViewport axisColors={['red', 'green', 'blue']} labelColor=\"black\" />\n  {/* alternative: <GizmoViewcube /> */}\n</GizmoHelper>\n```\n\n----------------------------------------\n\nTITLE: Using useMotion Hook for Custom Animation Control in React\nDESCRIPTION: This example demonstrates how to use the useMotion hook to create a custom loop animation, allowing fine-grained control over the motion path and object orientation.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/motion-path-controls.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Loop() {\n  const motion = useMotion()\n  useFrame((state, delta) => {\n    // Set the current position along the curve, you can increment indiscriminately for a loop\n    motion.current += delta\n    // Look ahead on the curve\n    motion.object.current.lookAt(motion.next)\n  })\n}\n\n<MotionPathControls>\n  <cubicBezierCurve3 v0={[-5, -5, 0]} v1={[-10, 0, 0]} v2={[0, 3, 0]} v3={[6, 3, 0]} />\n  <Loop />\n```\n\n----------------------------------------\n\nTITLE: Preloading Fonts with useFont in React Three Fiber\nDESCRIPTION: This snippet shows how to preload fonts using the useFont.preload method. Preloading allows fonts to be loaded before they're needed, reducing wait times and enabling font sharing across multiple components.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/use-font.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nuseFont.preload('/fonts/helvetiker_regular.typeface.json')\n```\n\n----------------------------------------\n\nTITLE: Using MotionPathControls with Declarative Curves in React\nDESCRIPTION: This example demonstrates how to use MotionPathControls with declarative curves in a React component. It includes setting up the control path and a focus object.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/motion-path-controls.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const poi = useRef()\n  return (\n    <group>\n      <MotionPathControls offset={0} focus={poi} damping={0.2}>\n        <cubicBezierCurve3 v0={[-5, -5, 0]} v1={[-10, 0, 0]} v2={[0, 3, 0]} v3={[6, 3, 0]} />\n        <cubicBezierCurve3 v0={[6, 3, 0]} v1={[10, 5, 5]} v2={[5, 5, 5]} v3={[5, 5, 5]} />\n      </MotionPathControls>\n      <Box args={[1, 1, 1]} ref={poi}/>\n```\n\n----------------------------------------\n\nTITLE: Using the useCubeCamera Hook in drei\nDESCRIPTION: Example of using the useCubeCamera hook in JSX. It demonstrates how to destructure and access the framebuffer object (fbo), camera, and update function returned by the hook.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/cube-camera-use-cube-camera.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { fbo, camera, update } = useCubeCamera()\n```\n\n----------------------------------------\n\nTITLE: Using Gltf Component in JSX\nDESCRIPTION: Demonstrates the usage of the Gltf component, which is a wrapper around the useGLTF hook for easier integration in React components.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/gltf-use-gltf.mdx#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Gltf src={url} />\n<Gltf src={url} useDraco='/draco-gltf' ... />\n```\n\n----------------------------------------\n\nTITLE: Implementing MotionPathControls with Imperative Curves in React\nDESCRIPTION: This snippet shows how to use MotionPathControls with imperative curves defined using THREE.js CubicBezierCurve3 objects.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/motion-path-controls.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<MotionPathControls\n  offset={0}\n  focus={poi}\n  damping={0.2}\n  curves={[\n    new THREE.CubicBezierCurve3(\n      new THREE.Vector3(-5, -5, 0),\n      new THREE.Vector3(-10, 0, 0),\n      new THREE.Vector3(0, 3, 0),\n      new THREE.Vector3(6, 3, 0)\n    ),\n    new THREE.CubicBezierCurve3(\n      new THREE.Vector3(6, 3, 0),\n      new THREE.Vector3(10, 5, 5),\n      new THREE.Vector3(5, 3, 5),\n      new THREE.Vector3(5, 5, 5)\n    ),\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Self-Hosted Assets with Environment in React Three Fiber\nDESCRIPTION: This snippet shows how to use dynamically imported, self-hosted assets from @pmndrs/assets with the Environment component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/environment.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { suspend } from 'suspend-react'\nconst city = import('@pmndrs/assets/hdri/city.exr').then((module) => module.default)\n\n<Environment files={suspend(city)} />\n```\n\n----------------------------------------\n\nTITLE: Multiple Nested Instances using createInstances\nDESCRIPTION: Demonstrates how to create and use multiple instance types in the same parent graph using the createInstances helper.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/instances.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst [CubeInstances, Cube] = createInstances()\nconst [SphereInstances, Sphere] = createInstances()\n\nfunction App() {\n  return (\n    <>\n      <CubeInstances>\n        <boxGeometry />\n        <meshStandardMaterial />\n        <SphereInstances>\n          <sphereGeometry />\n          <meshLambertMaterial />\n          <Cube position={[1, 2, 3]} />\n          <Sphere position={[4, 5, 6]} />\n        </SphereInstances>\n      </CubeInstances>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MeshDiscardMaterial in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the MeshDiscardMaterial component to create an invisible mesh that still casts shadows and displays child elements like edges. It's useful for creating hidden objects that interact with the scene.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/mesh-discard-material.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh castShadow>\n  <torusKnotGeonetry />\n  <MeshDiscardMaterial />\n  {/* Shadows and edges will show, but the model itself won't */}\n  <Edges />\n```\n\n----------------------------------------\n\nTITLE: Configuring CameraShake Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure and use the CameraShake component with various options such as max rotation angles, frequencies, intensity, and decay settings.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/camera-shake.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  maxYaw: 0.1, // Max amount camera can yaw in either direction\n  maxPitch: 0.1, // Max amount camera can pitch in either direction\n  maxRoll: 0.1, // Max amount camera can roll in either direction\n  yawFrequency: 0.1, // Frequency of the yaw rotation\n  pitchFrequency: 0.1, // Frequency of the pitch rotation\n  rollFrequency: 0.1, // Frequency of the roll rotation\n  intensity: 1, // initial intensity of the shake\n  decay: false, // should the intensity decay over time\n  decayRate: 0.65, // if decay = true this is the rate at which intensity will reduce at\n  controls: undefined, // if using orbit controls, pass a ref here so we can update the rotation\n}\n\n<CameraShake {...config} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Texture via Children Render Prop\nDESCRIPTION: Example showing how to access the video texture using the children render prop pattern with the VideoTexture component. This allows direct access to the texture for material configuration.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/video-texture-use-video-texture.mdx#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<VideoTexture src=\"/video.mp4\">\n  {(texture) => <meshBasicMaterial map={texture} />}\n```\n\n----------------------------------------\n\nTITLE: Loading KTX2 Textures with useKTX2 Hook in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the useKTX2 hook to load single or multiple KTX2 textures in a React Three Fiber component. The loaded textures can then be applied to materials in the 3D scene.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/ktx2-use-ktx2.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst texture = useKTX2(url)\nconst [texture1, texture2] = useKTX2([texture1, texture2])\n\nreturn <meshStandardMaterial map={texture} />\n```\n\n----------------------------------------\n\nTITLE: Extending GLTFLoader with KTX2 Support in TypeScript\nDESCRIPTION: Example of extending the GLTFLoader to support KTX2 textures using the extendLoader parameter of useGLTF.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/gltf-use-gltf.mdx#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KTX2Loader } from 'three-stdlib'\nconst ktx2Loader = new KTX2Loader()\nktx2Loader.setTranscoderPath('https://unpkg.com/three@0.168.0/examples/jsm/libs/basis/')\n\n// ...\n\nconst { gl } = useThree()\nuseGLTF('facecap.glb', true, true, (loader) => {\n  loader.setKTX2Loader(ktx2Loader.detectSupport(gl))\n})\n```\n\n----------------------------------------\n\nTITLE: Controlled DragControls Component with Matrix Management\nDESCRIPTION: Advanced example showing how to use DragControls as a controlled component by disabling autoTransform and manually managing the matrix transformation. This approach gives more control over the transformation process.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/drag-controls.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst matrix = new THREE.Matrix4()\nreturn (\n  <DragControls\n    ref={ref}\n    matrix={matrix}\n    autoTransform={false}\n    onDrag={(localMatrix) => matrix.copy(localMatrix)}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wireframe Component in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the Wireframe component from drei in a React Three Fiber scene. It shows two ways to apply the wireframe: as a child of a mesh or as a standalone component with a geometry prop. Various configuration options are also illustrated.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/wireframe.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <geometry />\n  <material />\n\n  <Wireframe /> // Will apply wireframe on top of existing material on this mesh\n</mesh>\n\n// OR\n<Wireframe\n  geometry={geometry | geometryRef} // Will create the wireframe based on input geometry.\n\n  // Other props\n  simplify={false} // Remove some edges from wireframes\n  fill={\"#00ff00\"} // Color of the inside of the wireframe\n  fillMix={0} // Mix between the base color and the Wireframe 'fill'. 0 = base; 1 = wireframe\n  fillOpacity={0.25} // Opacity of the inner fill\n  stroke={\"#ff0000\"} // Color of the stroke\n  strokeOpacity={1} // Opacity of the stroke\n  thickness={0.05} // Thinkness of the lines\n  colorBackfaces={false} // Whether to draw lines that are facing away from the camera\n  backfaceStroke={\"#0000ff\"} // Color of the lines that are facing away from the camera\n  dashInvert={true} // Invert the dashes\n  dash={false} // Whether to draw lines as dashes\n  dashRepeats={4} // Number of dashes in one seqment\n  dashLength={0.5} // Length of each dash\n  squeeze={false} // Narrow the centers of each line segment\n  squeezeMin={0.2} // Smallest width to squueze to\n  squeezeMax={1} // Largest width to squeeze from\n/>\n```\n\n----------------------------------------\n\nTITLE: Using TransmissionSampler for Multiple Materials\nDESCRIPTION: Example demonstrating how to use transmissionSampler for better performance when dealing with multiple transmission materials.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/mesh-transmission-material.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh geometry={torus}>\n  <MeshTransmissionMaterial transmissionSampler />\n</mesh>\n<mesh geometry={sphere}>\n  <MeshTransmissionMaterial transmissionSampler />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Multiple Caustics Components for Enhanced Effects\nDESCRIPTION: Advanced example demonstrating how to combine multiple Caustics components with different configurations to create enhanced visual effects or simulate multiple light sources.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/caustics.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Caustics backside lightSource={[2.5, 5, -2.5]} >\n  <WineGlass />\n</Caustics>\n<Caustics causticsOnly backside lightSource={[-2.5, 5, 2.5]} ior={0.79} worldRadius={0.0124}>\n  <WineGlass />\n</Caustics>\n```\n\n----------------------------------------\n\nTITLE: Implementing Effects Component with SSAOPass in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the Effects component from drei with an SSAOPass. It shows importing and extending the SSAOPass, and then using it within the Effects component with various props and customizations.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/effects.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SSAOPass } from \"three-stdlib\"\n\nextend({ SSAOPass })\n\n<Effects multisamping={8} renderIndex={1} disableGamma={false} disableRenderPass={false} disableRender={false}>\n  <sSAOPass args={[scene, camera, 100, 100]} kernelRadius={1.2} kernelSize={0} />\n</Effects>\n```\n\n----------------------------------------\n\nTITLE: CurveModifier TypeScript Interface Definition\nDESCRIPTION: The TypeScript interface for CurveModifier component revealing its ref API. It defines the properties and methods available on the ref, including the curve data structures, uniforms for shader control, and methods for updating the curve and moving along it.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/modifiers/curve-modifier.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype CurveModifierRef = {\n  curveArray: Curve<any>[];\n  curveLengthArray: number[];\n  object3D: TMesh;\n  splineTexure: DataTexture;\n  uniforms: CurveModifierUniforms;\n  updateCurve<TCurve extends Curve<any>>(index: number, curve: TCurve): void;\n  moveAlongCurve(amount: number): void;\n}\n\ntype CurveModifierUniforms = {\n  spineTexture: IUniform<DataTexture>;\n  pathOffset: INumericUniform;\n  pathSegment: INumericUniform;\n  spineOffset: INumericUniform;\n  spineLength: INumericUniform;\n  flow: INumericUniform;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useContextBridge with React Three Fiber Canvas\nDESCRIPTION: This snippet demonstrates how to use the useContextBridge hook to forward contexts from outside the Canvas component to components inside it. It shows the setup in a SceneWrapper component and how to consume the bridged contexts in a Scene component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/use-context-bridge.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction SceneWrapper() {\n  // bridge any number of contexts\n  // Note: These contexts must be provided by something above this SceneWrapper component\n  //       You cannot render the providers for these contexts inside this component\n  const ContextBridge = useContextBridge(ThemeContext, GreetingContext)\n  return (\n    <Canvas>\n      <ContextBridge>\n        <Scene />\n      </ContextBridge>\n    </Canvas>\n  )\n}\n\nfunction Scene() {\n  // we can now consume a context within the Canvas\n  const theme = React.useContext(ThemeContext)\n  const greeting = React.useContext(GreetingContext)\n  return (\n    //...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Helper Component with React Three Fiber in JSX\nDESCRIPTION: Shows how to use the Helper component to add BoxHelper and VertexNormalsHelper to a mesh in a declarative way within JSX.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/helper-use-helper.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <boxGeometry />\n  <meshBasicMaterial />\n\n  <Helper type={BoxHelper} args={['royalblue']} />\n  <Helper type={VertexNormalsHelper} args={[1, 0xff0000]} />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Basic PerspectiveCamera Usage with Default Setting\nDESCRIPTION: Example showing how to use the PerspectiveCamera component with the makeDefault prop, which sets it as the default camera for the scene. Additional props can be passed through to the underlying THREE.PerspectiveCamera.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/cameras/perspective-camera.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PerspectiveCamera makeDefault {...props} />\n<mesh />\n```\n\n----------------------------------------\n\nTITLE: Using useSurfaceSampler Hook in Three.js\nDESCRIPTION: Implementation of the useSurfaceSampler hook that samples points on a mesh surface. The hook takes a mesh, optional sample count, transform function, weight parameter, and instancedMesh as inputs, returning a buffer containing the sampling results.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/use-surface-sampler.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst buffer = useSurfaceSampler(\n  mesh, // Mesh to sample\n  count, // [Optional] Number of samples (default: 16)\n  transform, // [Optional] Transformation function. Same as in `<Sampler />`\n  weight, // [Optional] Same as in `<Sampler />`\n  instancedMesh // [Optional] Instanced mesh to scatter\n)\n```\n\n----------------------------------------\n\nTITLE: Using the useFaceLandmarker Hook in React\nDESCRIPTION: Shows how to access the FaceLandmarker instance from a descendant component using the useFaceLandmarker hook. This provides an alternative to ref-based access to the instance.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/face-landmarker.mdx#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst faceLandmarker = useFaceLandmarker()\n```\n\n----------------------------------------\n\nTITLE: Using Hud Component with PerspectiveCamera in React Three Fiber\nDESCRIPTION: Demonstrates how to use the Hud component to render a scene on top of the default scene with a perspective camera.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/hud.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  /* Renders on top of the default scene with a perspective camera */\n}\n<Hud>\n  <PerspectiveCamera makeDefault position={[0, 0, 10]} />\n  <mesh>\n    <ringGeometry />\n  </mesh>\n</Hud>\n```\n\n----------------------------------------\n\nTITLE: Using SpotLightShadow Component in React Three Fiber\nDESCRIPTION: This code snippet demonstrates how to use the SpotLightShadow component within a SpotLight in a React Three Fiber application. It shows various props that can be used to customize the shadow's appearance and behavior.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/spot-light-shadow.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SpotLight>\n  <SpotLightShadow\n    distance={0.4} // Distance between the shadow caster and light\n    alphaTest={0.5} // Sets the alpha value to be used when running an alpha test. See Material.alphaTest\n    scale={1} //  Scale of the shadow caster plane\n    map={undefined} // Texture - Pattern of the shadow\n    shader={undefined} // Optional shader to run. Lets you add effects to the shadow map. See bellow\n    width={512} // Width of the shadow map. The higher the more expnsive\n    height={512} // Height of the shadow map. The higher the more expnsive\n  />\n</SpotLight>\n```\n\n----------------------------------------\n\nTITLE: Enabling Hot-Reload for ShaderMaterial in React\nDESCRIPTION: Shows how to enable hot-reload for a custom ShaderMaterial by using the unique 'key' property attached to the prototype class and wiring it to React's 'key' property.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/shader-material.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorShiftMaterial } from './ColorShiftMaterial'\n\nextend({ ColorShiftMaterial })\n\n// in your component\n<colorShiftMaterial key={ColorShiftMaterial.key} color=\"hotpink\" time={1} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Float Component in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the Float component to create a floating effect for a mesh object. It shows various props that can be used to customize the floating behavior, including speed, rotation intensity, float intensity, and floating range.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/float.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Float\n  speed={1} // Animation speed, defaults to 1\n  rotationIntensity={1} // XYZ rotation intensity, defaults to 1\n  floatIntensity={1} // Up/down float intensity, works like a multiplier with floatingRange,defaults to 1\n  floatingRange={[1, 10]} // Range of y-axis values the object will float within, defaults to [-0.1,0.1]\n>\n  <mesh />\n</Float>\n```\n\n----------------------------------------\n\nTITLE: MeshPortalMaterial with Full Blend\nDESCRIPTION: Example showing how to set the portal to fully render its scene using the blend property.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/mesh-portal-material.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<MeshPortalMaterial blend={1}>\n```\n\n----------------------------------------\n\nTITLE: Mixing HDRI with Custom Environment in React Three Fiber\nDESCRIPTION: This example demonstrates how to combine a generic HDRI environment with custom content using the Environment component's preset prop.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/environment.mdx#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <Environment background near={1} far={1000} resolution={256} preset=\"warehouse\">\n    <mesh />\n```\n\n----------------------------------------\n\nTITLE: Using MeshRefractionMaterial with Static Environment Map\nDESCRIPTION: Example demonstrating how to use MeshRefractionMaterial with a pre-loaded HDR environment map texture.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/mesh-refraction-material.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst texture = useLoader(RGBELoader, \"/textures/royal_esplanade_1k.hdr\")\nreturn (\n  <mesh geometry={diamondGeometry} {...props}>\n    <MeshRefractionMaterial envMap={texture} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Static QuadraticBezierLine in React Three Fiber\nDESCRIPTION: Example showing how to create a static quadratic bezier line with customizable properties like start point, end point, control point, color, line width, and other THREE.Line2 and THREE.LineMaterial properties.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shapes/quadratic-bezier-line.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<QuadraticBezierLine\n  start={[0, 0, 0]}               // Starting point, can be an array or a vec3\n  end={[10, 0, 10]}               // Ending point, can be an array or a vec3\n  mid={[5, 0, 5]}                 // Optional control point, can be an array or a vec3\n  color=\"black\"                   // Default\n  lineWidth={1}                   // In pixels (default)\n  dashed={false}                  // Default\n  vertexColors={[[0, 0, 0], ...]} // Optional array of RGB values for each point\n  {...lineProps}                  // All THREE.Line2 props are valid\n  {...materialProps}              // All THREE.LineMaterial props are valid\n/>\n```\n\n----------------------------------------\n\nTITLE: Html Component with Shadows in JSX\nDESCRIPTION: Shows how to enable shadow casting and receiving for HTML content in a 3D scene. Requires a custom material and won't work with meshBasicMaterial or shaderMaterial by default.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/html.mdx#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Html\n  occlude\n  castShadow // Make HTML cast a shadow\n  receiveShadow // Make HTML receive shadows\n  material={<meshPhysicalMaterial side={DoubleSide} opacity={0.1} />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Stage Component with Default Settings in JSX\nDESCRIPTION: This example demonstrates how to use the Stage component with default contact shadows and auto-centering. It sets the intensity and environment props.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/stage.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stage adjustCamera intensity={0.5} shadows=\"contact\" environment=\"city\">\n  <mesh />\n</Stage>\n```\n\n----------------------------------------\n\nTITLE: Dynamic QuadraticBezierLine Update in React Three Fiber\nDESCRIPTION: Example demonstrating how to dynamically update the QuadraticBezierLine points using a ref and the useFrame hook. Shows both required points (start and end) and optional mid-point usage.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shapes/quadratic-bezier-line.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst ref = useRef()\nuseFrame((state) => {\n  ref.current.setPoints(\n    [0, 0, 0],\n    [10, 0, 0],\n    // [5, 0, 0] // Optional: mid-point\n  )\n}, [])\nreturn <QuadraticBezierLine ref={ref} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using ScreenSpace Component in React Three Fiber\nDESCRIPTION: Demonstrates how to use the ScreenSpace component to position a Box component in screen space instead of world space. The depth parameter controls the distance from the camera.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/screen-space.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ScreenSpace\n  depth={1} // Distance from camera\n>\n  <Box>I'm in screen space</Box>\n</ScreenSpace>\n```\n\n----------------------------------------\n\nTITLE: Injecting Materials into Cloned Objects in React Three Fiber\nDESCRIPTION: This example demonstrates how to dynamically insert materials into cloned objects. It applies a green material to all meshes within the cloned object.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/clone.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Clone object={nodes.table} inject={<meshStandardMaterial color=\"green\" />} />\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardControls with Transient Subscription\nDESCRIPTION: Demonstrates how to subscribe to keyboard state changes transiently using the subscribe and get methods from useKeyboardControls. This approach is useful for imperative code or performance-sensitive operations.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/keyboard-controls.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Foo() {\n  const [sub, get] = useKeyboardControls<Controls>()\n\n  useEffect(() => {\n    return sub(\n      (state) => state.forward,\n      (pressed) => {\n        console.log('forward', pressed)\n      }\n    )\n  }, [])\n\n  useFrame(() => {\n    // Fetch fresh data from store\n    const pressed = get().back\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Caustics Component Usage Example\nDESCRIPTION: Basic example showing how to use the Caustics component with debug mode and backside rendering enabled for a bottle and wine glass model.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/caustics.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Caustics debug backside lightSource={[2.5, 5, -2.5]}>\n  <Bottle />\n  <WineGlass>\n</Caustics>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Resize Component in JSX\nDESCRIPTION: Demonstrates the basic usage of the Resize component, which scales its children to fit within a constrained boundary box.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/resize.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Resize>\n  <mesh />\n</Resize>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useGLTF Hook in JSX\nDESCRIPTION: Demonstrates the basic usage of the useGLTF hook to load a GLTF model in a React component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/gltf-use-gltf.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst gltf = useGLTF(url)\n```\n\n----------------------------------------\n\nTITLE: Cloning Multiple Objects in React Three Fiber\nDESCRIPTION: This snippet shows how to clone multiple objects at once using the Clone component. It passes an array of objects to the 'object' prop.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/clone.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Clone object={[nodes.foo, nodes.bar]} />\n```\n\n----------------------------------------\n\nTITLE: Using Hud Component with OrthographicCamera in React Three Fiber\nDESCRIPTION: Shows how to use the Hud component to render a scene on top of the previous HUD with an orthographic camera and custom render priority.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/hud.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  /* Renders on top of the previous HUD with an orthographic camera */\n}\n<Hud renderPriority={2}>\n  <OrthographicCamera makeDefault position={[0, 0, 10]} />\n  <mesh>\n    <boxGeometry />\n  </mesh>\n</Hud>\n```\n\n----------------------------------------\n\nTITLE: Using AdaptiveEvents Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the AdaptiveEvents component in a React scene. When added, it automatically disables the raycaster during system regression, potentially improving performance.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/adaptive-events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AdaptiveEvents />\n```\n\n----------------------------------------\n\nTITLE: Using Float Component with Demand Frameloop in React Three Fiber\nDESCRIPTION: This example shows how to use the Float component when the Canvas frameloop is set to 'demand'. By setting autoInvalidate to true, it ensures that the floating animation will render while it is enabled, even in demand mode.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/float.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas frameloop=\"demand\">\n  <Float autoInvalidate>\n    <mesh />\n  </Float>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Accessing KeyboardControls State Reactively\nDESCRIPTION: Shows how to use the useKeyboardControls hook to reactively access the keyboard input state. This approach uses zustand's selector pattern to subscribe to specific state changes.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/keyboard-controls.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Foo() {\n  const forwardPressed = useKeyboardControls<Controls>(state => state.forward)\n```\n\n----------------------------------------\n\nTITLE: Using ScreenVideoTexture Component with Render Props in JSX\nDESCRIPTION: This example demonstrates how to use the ScreenVideoTexture component with a render prop function. The function receives a texture parameter which is then applied to a meshBasicMaterial.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/screen-video-texture.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ScreenVideoTexture>\n  {(texture) => <meshBasicMaterial map={texture} />}\n\n```\n\n----------------------------------------\n\nTITLE: Using useSpriteLoader with SpriteAnimator Components in drei\nDESCRIPTION: Example demonstrating how to use the useSpriteLoader hook to load sprite assets and use them with multiple SpriteAnimator components. The example shows loading a single sprite sheet with multiple animations and using different animations for different components.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/use-sprite-loader.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { spriteObj } = useSpriteLoader(\n  'multiasset.png',\n  'multiasset.json',\n\n  ['orange', 'Idle Blinking', '_Bat'],\n  null\n)\n\n<SpriteAnimator\n  position={[4.5, 0.5, 0.1]}\n  autoPlay={true}\n  loop={true}\n  scale={5}\n  frameName={'_Bat'}\n  animationNames={['_Bat']}\n  spriteDataset={spriteObj}\n  alphaTest={0.01}\n  asSprite={false}\n/>\n\n<SpriteAnimator\n  position={[5.5, 0.5, 5.8]}\n  autoPlay={true}\n  loop={true}\n  scale={5}\n  frameName={'Idle Blinking'}\n  animationNames={['Idle Blinking']}\n  spriteDataset={spriteObj}\n  alphaTest={0.01}\n  asSprite={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Mask with useMask Hook\nDESCRIPTION: Demonstration of applying a mask to a mesh using the useMask hook with the corresponding mask id.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/mask.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst stencil = useMask(1)\nreturn (\n  <mesh>\n    <torusKnotGeometry />\n    <meshStandardMaterial {...stencil} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Shallow Clone in React Three Fiber\nDESCRIPTION: This example demonstrates how to create a shallow clone of a pre-existing object using the Clone component. It uses the useGLTF hook to load a 3D model and clones a specific node from it.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/clone.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { nodes } = useGLTF(url)\nreturn (\n  <Clone object={nodes.table} />\n```\n\n----------------------------------------\n\nTITLE: Loading Textures with Key-Value Mapping\nDESCRIPTION: Shows how to load multiple textures using an object with key-value pairs, where keys represent texture types and values are texture URLs. The loaded textures can be spread directly into material props.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/texture-use-texture.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst props = useTexture({\n  metalnessMap: url1,\n  map: url2,\n})\nreturn <meshStandardMaterial {...props} />\n```\n\n----------------------------------------\n\nTITLE: Basic Environment Loading\nDESCRIPTION: Example of using the useEnvironment hook without parameters, which defaults to loading PNG files for all six cube faces from the public directory.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/use-environment.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst cubeTexture = useEnvironment()\n```\n\n----------------------------------------\n\nTITLE: Using ScreenSizer Component in React Three Fiber\nDESCRIPTION: A code example demonstrating how to use the ScreenSizer component to render a Box at a consistent screen size. The component takes a scale prop to adjust the scaling factor, and any 3D objects inside will maintain their apparent size in screen space.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/screen-sizer.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ScreenSizer\n  scale={1} // scale factor\n>\n  <Box\n    args={[100, 100, 100]} // will render roughly as a 100px box\n  />\n</ScreenSizer>\n```\n\n----------------------------------------\n\nTITLE: Optimizing ContactShadows Rendering for Static Scenes\nDESCRIPTION: This example shows how to limit the number of frames rendered by the ContactShadows component when dealing with static objects. By setting the frames prop to 1, the component will only render once, which can improve performance for static scenes.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/contact-shadows.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ContactShadows frames={1} />\n```\n\n----------------------------------------\n\nTITLE: Using PerspectiveCamera for Buffer Sharing\nDESCRIPTION: Example demonstrating how to use PerspectiveCamera to share a buffer texture between multiple transmission materials.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/mesh-transmission-material.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<PerspectiveCamera makeDefault fov={75} position={[10, 0, 15]} resolution={1024}>\n  {(texture) => (\n    <>\n      <mesh geometry={torus}>\n        <MeshTransmissionMaterial buffer={texture} />\n      </mesh>\n      <mesh geometry={sphere}>\n        <MeshTransmissionMaterial buffer={texture} />\n      </mesh>\n    </>\n  )}\n```\n\n----------------------------------------\n\nTITLE: Using usePerformanceMonitor Hook in React Components\nDESCRIPTION: This example shows how to use the usePerformanceMonitor hook in child components of PerformanceMonitor. It allows individual components to respond to performance changes on their own.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/performance-monitor.mdx#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<PerformanceMonitor>\n  <Effects />\n</PerformanceMonitor>\n\nfunction Effects() {\n  usePerformanceMonitor({ onIncline, onDecline, onFallback, onChange })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Instanced Attributes\nDESCRIPTION: Shows how to create and use custom instanced attributes with the InstancedAttribute component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/instances.mdx#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Instances ref={ref} limit={20}>\n  <boxGeometry />\n  <someSpecialMaterial />\n  <InstancedAttribute name=\"foo\" defaultValue={1} />\n  <Instance position={[-1.2, 0, 0]} foo={10} />\n</Instances>\n```\n\n----------------------------------------\n\nTITLE: Custom DOM Mounting for Stats Component in React Three Fiber\nDESCRIPTION: Example of mounting the Stats component to a custom DOM element instead of document.body. This approach creates a ref to a new div element, appends it to the body with custom styling, and sets it as the parent for the Stats component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/stats.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst node = useRef(document.createElement('div'))\n\nuseEffect(() => {\n  node.current.id = 'test'\n  document.body.appendChild(node.current)\n\n  return () => document.body.removeChild(node.current)\n}, [])\n\nreturn <Stats parent={parent} />\n```\n\n----------------------------------------\n\nTITLE: Basic SpriteAnimator Implementation with Image URL\nDESCRIPTION: Example of using the SpriteAnimator component with a basic spritesheet image. This shows configuration of position, animation settings, and mesh properties without requiring JSON data.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/sprite-animator.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SpriteAnimator\n  position={[-3.5, -2.0, 2.5]}\n  startFrame={0}\n  meshProps={{ frustumCulled: false, scale: 2.5 }}\n  autoPlay={true}\n  loop={true}\n  numberOfFrames={16}\n  textureImageURL={'./alien.png'}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Bvh Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the Bvh component in a React Three Fiber scene. It wraps the Scene component with Bvh, enabling optimized raycasting for all child components.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/bvh.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas>\n  <Bvh firstHitOnly>\n    <Scene />\n  </Bvh>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: PerspectiveCamera with Child Components\nDESCRIPTION: Example demonstrating how to add child components to a PerspectiveCamera. The children will occupy the same position as the camera and follow its movements, effectively parenting them to the camera.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/cameras/perspective-camera.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PerspectiveCamera makeDefault {...props}>\n  <mesh />\n</PerspectiveCamera>\n```\n\n----------------------------------------\n\nTITLE: Creating a ComputedAttribute in React Three Fiber (TSX)\nDESCRIPTION: This example demonstrates how to use the ComputedAttribute component to declaratively add a custom attribute to a Three.js geometry. The component takes a name, a compute function that receives the geometry and returns a BufferAttribute, and additional props that are passed to the attribute.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/computed-attribute.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<sphereGeometry>\n  <ComputedAttribute\n    // attribute will be added to the geometry with this name\n    name=\"my-attribute-name\"\n    compute={(geometry) => {\n      // ...someLogic;\n      return new THREE.BufferAttribute([1, 2, 3], 1)\n    }}\n    // you can pass any BufferAttribute prop to this component, eg.\n    usage={THREE.StaticReadUsage}\n  />\n</sphereGeometry>\n```\n\n----------------------------------------\n\nTITLE: Implementing BoxProjected Environment Mapping with useBoxProjectedEnv in React Three Fiber\nDESCRIPTION: This example demonstrates how to use the useBoxProjectedEnv hook to create efficient reflections. The hook returns properties that need to be spread over a material, including a ref, onBeforeCompile and customProgramCacheKey. Combined with CubeCamera, it creates realistic reflections by capturing a single frame of the environment.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/use-box-projected-env.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst projection = useBoxProjectedEnv(\n  [0, 0, 0], // Position\n  [1, 1, 1] // Scale\n)\n\n<CubeCamera frames={1}>\n  {(texture) => (\n    <mesh>\n      <planeGeometry />\n      <meshStandardMaterial envMap={texture} {...projection} />\n    </mesh>\n  )}\n</CubeCamera>\n```\n\n----------------------------------------\n\nTITLE: Declarative Sampler with Children in drei (TSX)\nDESCRIPTION: A simple example that scatters 1000 sphere instances on the surface of a larger sphere mesh using the Sampler component with declarative children. It demonstrates how to specify sampling weight, transformation function, and count properties.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/sampler.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// This simple example scatters 1000 spheres on the surface of the sphere mesh.\n<Sampler\n  weight={'normal'} // the name of the attribute to be used as sampling weight\n  transform={transformPoint} // a function that transforms each instance given a sample. See the examples for more.\n  count={16} // Number of samples\n>\n  <mesh>\n    <sphereGeometry args={[2]} />\n  </mesh>\n\n  <instancedMesh args={[null, null, 1_000]}>\n    <sphereGeometry args={[0.1]} />\n  </instancedMesh>\n</Sampler>\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Component Usage Example in JSX\nDESCRIPTION: A simple example showing how to use the Grid component with default props. This will render a y-up oriented grid with default styling and behavior settings.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/grid.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid />\n```\n\n----------------------------------------\n\nTITLE: Using Alpha Test for Depth Sorting Multiple Splats\nDESCRIPTION: Example showing how to use the alphaTest prop with multiple Splat components to enable proper depth sorting. Setting a low value like 0.1 allows the splats to be rendered with correct depth order.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/splat.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Splat alphaTest={0.1} src=\"foo.splat\" />\n<Splat alphaTest={0.1} src=\"bar.splat\" />\n```\n\n----------------------------------------\n\nTITLE: ScrollControls TypeScript Interface Definition\nDESCRIPTION: TypeScript interface defining the props for the ScrollControls component. Includes configuration options for scroll behavior like precision, direction, infinite scroll, pages, distance, damping, and speed control.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/scroll-controls.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype ScrollControlsProps = {\n  /** Precision, default 0.00001 */\n  eps?: number\n  /** Horizontal scroll, default false (vertical) */\n  horizontal?: boolean\n  /** Infinite scroll, default false (experimental!) */\n  infinite?: boolean\n  /** Defines the length of the scroll area, each page is height:100%, default 1 */\n  pages?: number\n  /** A factor that increases scroll bar travel, default 1 */\n  distance?: number\n  /** Friction in seconds, default: 0.2 (1/5 second) */\n  damping?: number\n  /** maxSpeed optionally allows you to clamp the maximum speed. If damping is 0.2s and looks OK\n   *  going between, say, page 1 and 2, but not for pages far apart as it'll move very rapid,\n   *  then a maxSpeed of e.g. 0.1 which will clamp the speed to 0.1 units per second, it may now\n   *  take much longer than damping to reach the target if it is far away. Default: Infinity */\n  maxSpeed?: number\n  /** If true attaches the scroll container before the canvas */\n  prepend?: boolean\n  enabled?: boolean\n  style?: React.CSSProperties\n  children: React.ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Material Injection in Cloned Objects\nDESCRIPTION: This snippet shows how to conditionally inject materials into cloned objects based on their properties. It applies a green material only to objects named 'table'.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/clone.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Clone object={nodes.table} inject={\n  {(object) => (object.name === 'table' ? <meshStandardMaterial color=\"green\" /> : null)}\n} />\n```\n\n----------------------------------------\n\nTITLE: Instances with DOM Elements\nDESCRIPTION: Demonstrates how to include non-instanced objects like HTML elements within Instance components.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/instances.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Instance>\n  <Html>hello from the dom</Html>\n</Instance>\n```\n\n----------------------------------------\n\nTITLE: Nested Instances with Group\nDESCRIPTION: Shows how to nest Instances within groups to use relative coordinates.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/instances.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<group position={[1, 2, 3]} rotation={[Math.PI / 2, 0, 0]}>\n  <Instance />\n</group>\n```\n\n----------------------------------------\n\nTITLE: Implementing PointMaterial in React Three Fiber\nDESCRIPTION: Demonstrates how to use PointMaterial component within a points element. The material supports transparent rendering, vertex colors, custom size, and depth writing configuration. It inherits all properties from THREE.PointsMaterial.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/point-material.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<points>\n  <PointMaterial transparent vertexColors size={15} sizeAttenuation={false} depthWrite={false} />\n</points>\n```\n\n----------------------------------------\n\nTITLE: Manual PerspectiveCamera Configuration\nDESCRIPTION: Example showing how to manually configure the PerspectiveCamera by providing aspect ratio and handling projection matrix updates. This disables the automatic responsiveness of the camera.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/cameras/perspective-camera.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<PerspectiveCamera manual aspect={...} onUpdate={(c) => c.updateProjectionMatrix()}>\n```\n\n----------------------------------------\n\nTITLE: Using useTrailTexture Hook in React Component\nDESCRIPTION: This JSX code demonstrates how to use the useTrailTexture hook in a React component. It creates a texture with a trail effect and applies it as a displacement map to a mesh's material.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/trail-texture-use-trail-texture.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [texture, onMove] = useTrailTexture(config)\nreturn (\n  <mesh onPointerMove={onMove}>\n    <meshStandardMaterial displacementMap={texture} />\n```\n\n----------------------------------------\n\nTITLE: Loading Matcap Texture by Name in React Three Fiber\nDESCRIPTION: Shows how to load a matcap texture using its exact name string instead of an index number. This approach provides more direct control over which texture is loaded.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/matcap-texture-use-matcap-texture.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [matcap] = useMatcapTexture('3E2335_D36A1B_8E4A2E_2842A5')\n```\n\n----------------------------------------\n\nTITLE: Simplified Decal Implementation with Default Material\nDESCRIPTION: Shows how to create a decal using the default transparent meshBasicMaterial with automatic polygon offset configuration.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/decal.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <sphereGeometry />\n  <meshBasicMaterial />\n  <Decal map={texture} />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Defining KeyboardControls Types in TypeScript\nDESCRIPTION: TypeScript type definitions for KeyboardControls, including state structure, entry configuration format, and component props. These types define the data model and configuration options for the keyboard control system.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/keyboard-controls.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype KeyboardControlsState<T extends string = string> = { [K in T]: boolean }\n\ntype KeyboardControlsEntry<T extends string = string> = {\n  /** Name of the action */\n  name: T\n  /** The keys that define it, you can use either event.key, or event.code */\n  keys: string[]\n  /** If the event receives the keyup event, true by default */\n  up?: boolean\n}\n\ntype KeyboardControlsProps = {\n  /** A map of named keys */\n  map: KeyboardControlsEntry[]\n  /** All children will be able to useKeyboardControls */\n  children: React.ReactNode\n  /** Optional onchange event */\n  onChange: (name: string, pressed: boolean, state: KeyboardControlsState) => void\n  /** Optional event source */\n  domElement?: HTMLElement\n}\n```\n\n----------------------------------------\n\nTITLE: Using AsciiRenderer Component in React Three Fiber\nDESCRIPTION: Example showing basic usage of the AsciiRenderer component within a Canvas element in React Three Fiber.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/ascii-renderer.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas>\n  <AsciiRenderer />\n```\n\n----------------------------------------\n\nTITLE: MeshPortalMaterial TypeScript Props Definition\nDESCRIPTION: TypeScript interface defining the available props for the MeshPortalMaterial component. Includes properties for blend control, edge blur, SDF resolution, coordinate system, and event handling.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/mesh-portal-material.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PortalProps = ThreeElements['shaderMaterial'] & {\n  /** Mix the portals own scene with the world scene, 0 = world scene render,\n   *  0.5 = both scenes render, 1 = portal scene renders, defaults to 0 */\n  blend?: number\n  /** Edge fade blur, 0 = no blur (default) */\n  blur?: number\n  /** SDF resolution, the smaller the faster is the start-up time (default: 512) */\n  resolution?: number\n  /** By default portals use relative coordinates, contents are affects by the local matrix transform */\n  worldUnits?: boolean\n  /** Optional event priority, defaults to 0 */\n  eventPriority?: number\n  /** Optional render priority, defaults to 0 */\n  renderPriority?: number\n  /** Optionally diable events inside the portal, defaults to false */\n  events?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @react-three/drei Components\nDESCRIPTION: Basic example of importing components from @react-three/drei for use with React Three Fiber. Components like PerspectiveCamera and PositionalAudio can be imported directly.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/getting-started/introduction.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PerspectiveCamera, PositionalAudio, ... } from '@react-three/drei'\n```\n\n----------------------------------------\n\nTITLE: Compound Mask Definition\nDESCRIPTION: Example of creating compound masks by using multiple Mask components with the same id and different geometries.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/mask.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Mask position={[-1, 0, 0]} id={1}>\n  <planeGeometry />\n  <meshBasicMaterial />\n</Mask>\n<Mask colorWrite depthWrite position={[1, 0, 0]} id={1}>\n  <circleGeometry />\n  <meshBasicMaterial />\n</Mask>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Props Interface for useSpriteLoader in drei\nDESCRIPTION: TypeScript interface defining the properties accepted by the useSpriteLoader hook. It includes options for texture URL, JSON data, animation names, frame count, and callback functions.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/use-sprite-loader.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Props = {\n  /** The texture url to load the sprite frames from */\n  input?: Url | null\n  /** The JSON data describing the position of the frames within the texture (optional) */\n  json?: string | null\n  /** The animation names into which the frames will be divided into (optional) */\n  animationNames?: string[] | null\n  /** The number of frames on a standalone (no JSON data) spritesheet (optional)*/\n  numberOfFrames?: number | null\n  /** The callback to call when all textures and data have been loaded and parsed */\n  onLoad?: (texture: Texture, textureData?: any) => void\n  /** Allows the configuration of the canvas options */\n  canvasRenderingContext2DSettings?: CanvasRenderingContext2DSettings\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Points with Individual Point Components in JSX\nDESCRIPTION: This snippet demonstrates how to use the Points component with individual Point components as children. It allows for setting a limit on the number of items and a draw range. Each Point can have its own position, color, and event handlers.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/points.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Points\n  limit={1000} // Optional: max amount of items (for calculating buffer size)\n  range={1000} // Optional: draw-range\n>\n  <pointsMaterial vertexColors />\n  <Point position={[1, 2, 3]} color=\"red\" onClick={onClick} onPointerOver={onPointerOver} ... />\n  // As many as you want, make them conditional, mount/unmount them, lazy load them, etc ...\n</Points>\n```\n\n----------------------------------------\n\nTITLE: Defining the useVideoTexture Hook in TypeScript\nDESCRIPTION: Declaration of the useVideoTexture hook showing the function signature with parameters and options. This hook creates a THREE.VideoTexture with integrated suspense loading and various configuration options for video playback.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/video-texture-use-video-texture.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function useVideoTexture(\n  srcOrSrcObject: HTMLVideoElement['src' | 'srcObject'],\n  {\n    unsuspend = 'loadedmetadata',\n    start = true,\n    hls = {},\n    crossOrigin = 'anonymous',\n    muted = true,\n    loop = true,\n    playsInline = true,\n    onVideoFrame,\n    ...videoProps\n  }: {\n    unsuspend?: keyof HTMLVideoElementEventMap\n    start?: boolean\n    hls?: Parameters<typeof getHls>[0]\n    onVideoFrame: VideoFrameRequestCallback\n  } & Partial<Omit<HTMLVideoElement, 'children' | 'src' | 'srcObject'>> = {}\n)\n```\n\n----------------------------------------\n\nTITLE: DragControls TypeScript Interface Definition\nDESCRIPTION: TypeScript interface defining the props for the DragControls component. It includes options for auto-transformation, matrix control, axis locking, drag limits, and various event handlers for hover, drag start, drag, and drag end events.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/drag-controls.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype DragControlsProps = {\n  /** If autoTransform is true, automatically apply the local transform on drag, true */\n  autoTransform?: boolean\n  /** The matrix to control */\n  matrix?: THREE.Matrix4\n  /** Lock the drag to a specific axis */\n  axisLock?: 'x' | 'y' | 'z'\n  /** Limits */\n  dragLimits?: [[number, number] | undefined, [number, number] | undefined, [number, number] | undefined]\n  /** Hover event */\n  onHover?: (hovering: boolean) => void\n  /** Drag start event */\n  onDragStart?: (origin: THREE.Vector3) => void\n  /** Drag event */\n  onDrag?: (\n    localMatrix: THREE.Matrix4,\n    deltaLocalMatrix: THREE.Matrix4,\n    worldMatrix: THREE.Matrix4,\n    deltaWorldMatrix: THREE.Matrix4\n  ) => void\n  /** Drag end event */\n  onDragEnd?: () => void\n  children: React.ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Inverting Mask with useMask Hook\nDESCRIPTION: Example showing how to invert a mask using the second boolean parameter of the useMask hook.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/mask.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst stencil = useMask(1, true)\n```\n\n----------------------------------------\n\nTITLE: Using CubeCamera Component in JSX\nDESCRIPTION: This example demonstrates how to use the CubeCamera component in a React component. It creates a reflective sphere using the texture provided by CubeCamera.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/cameras/cube-camera.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CubeCamera>\n  {(texture) => (\n    <mesh>\n      <sphereGeometry />\n      <meshStandardMaterial envMap={texture} />\n    </mesh>\n  )}\n</CubeCamera>\n```\n\n----------------------------------------\n\nTITLE: FaceControls Props and API TypeScript Definition\nDESCRIPTION: TypeScript type definitions for FaceControls component props and its API. Includes camera options, video texture settings, facial tracking parameters, and control methods.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/face-controls.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport type FaceControlsProps = {\n  /** The camera to be controlled */\n  camera?: THREE.Camera\n  /** VideoTexture or WebcamVideoTexture options */\n  videoTexture: VideoTextureProps\n  /** Disable the automatic face-detection => you should provide `faceLandmarkerResult` yourself in this case */\n  manualDetect?: boolean\n  /** FaceLandmarker result */\n  faceLandmarkerResult?: FaceLandmarkerResult\n  /** Disable the rAF camera position/rotation update */\n  manualUpdate?: boolean\n  /** Reference this FaceControls instance as state's `controls` */\n  makeDefault?: boolean\n  /** Approximate time to reach the target. A smaller value will reach the target faster. */\n  smoothTime?: number\n  /** Apply position offset extracted from `facialTransformationMatrix` */\n  offset?: boolean\n  /** Offset sensitivity factor, less is more sensible */\n  offsetScalar?: number\n  /** Enable eye-tracking */\n  eyes?: boolean\n  /** Force Facemesh's `origin` to be the middle of the 2 eyes */\n  eyesAsOrigin?: boolean\n  /** Constant depth of the Facemesh */\n  depth?: number\n  /** Enable debug mode */\n  debug?: boolean\n  /** Facemesh options, default: undefined */\n  facemesh?: FacemeshProps\n}\n\nexport type FaceControlsApi = THREE.EventDispatcher & {\n  /** Compute the target for the camera */\n  computeTarget: () => THREE.Object3D\n  /** Update camera's position/rotation to the `target` */\n  update: (delta: number, target?: THREE.Object3D) => void\n  /** <Facemesh> ref api */\n  facemeshApiRef: RefObject<FacemeshApi>\n}\n```\n\n----------------------------------------\n\nTITLE: Sampler with Refs in drei (TSX)\nDESCRIPTION: An example showing how to use Sampler with refs when you can't compose declaratively. It demonstrates loading a mesh from a GLTF file and referencing it along with an instancedMesh to create the sampling effect.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/sampler.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { nodes } = useGLTF('my/mesh/url')\nconst mesh = useRef(nodes)\nconst instances = useRef()\n\nreturn <>\n  <instancedMesh args={[null, null, 1_000]}>\n    <sphereGeometry args={[0.1]}>\n  </instancedMesh>\n\n  <Sampler mesh={mesh} instances={instances}>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using RandomizedLight Component Example\nDESCRIPTION: Example usage of the RandomizedLight component showing how to implement it with basic properties for casting shadows and positioning.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/randomized-light.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RandomizedLight castShadow amount={8} frames={100} position={[5, 5, -10]} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Controls Through React Three Fiber Store\nDESCRIPTION: Example of using useThree hook to access the controls that have been set as default in the application state.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/introduction.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst controls = useThree((state) => state.controls)\n```\n\n----------------------------------------\n\nTITLE: Using Stage Component with Accumulative Shadows in JSX\nDESCRIPTION: This snippet shows how to use the Stage component with accumulative shadows for more realistic results. It requires the canvas and models to handle shadows.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/stage.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas shadows>\n  <Stage shadows=\"accumulative\">\n    <mesh castShadow />\n  </Stage>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Defining TrailConfig Type for useTrailTexture in TypeScript\nDESCRIPTION: This TypeScript code defines the TrailConfig type, which specifies the configuration options for the useTrailTexture hook. It includes properties for texture size, trail characteristics, and rendering options.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/trail-texture-use-trail-texture.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TrailConfig = {\n  /** texture size (default: 256x256) */\n  size?: number\n  /** Max age (ms) of trail points (default: 750) */\n  maxAge?: number\n  /** Trail radius (default: 0.3) */\n  radius?: number\n  /** Canvas trail opacity (default: 0.2) */\n  intensity?: number\n  /** Add points in between slow pointer events (default: 0) */\n  interpolate?: number\n  /** Moving average of pointer force (default: 0) */\n  smoothing?: number\n  /** Minimum pointer force (default: 0.3) */\n  minForce?: number\n  /** Blend mode (default: 'screen') */\n  blend?: CanvasRenderingContext2D['globalCompositeOperation']\n  /** Easing (default: easeCircOut) */\n  ease?: (t: number) => number\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Loader Props Type Definition\nDESCRIPTION: TypeScript interface defining the accepted properties for the environment loader, including file paths, presets, extensions, and texture encoding options.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/use-environment.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EnvironmentLoaderProps = {\n  files?: string | string[]\n  path?: string\n  preset?: PresetsType\n  extensions?: (loader: Loader) => void\n  encoding?: TextureEncoding\n```\n\n----------------------------------------\n\nTITLE: Basic DragControls Usage with JSX\nDESCRIPTION: Simple example showing how to use the DragControls component to make a mesh draggable in a Three.js scene. This demonstrates the most basic implementation with default settings.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/drag-controls.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DragControls>\n  <mesh />\n</DragControls>\n```\n\n----------------------------------------\n\nTITLE: Gradual Performance Adjustment with PerformanceMonitor in React\nDESCRIPTION: This example shows how to use the onChange callback of PerformanceMonitor to make gradual adjustments to the device pixel ratio. It starts at the highest DPR (2) and adjusts between 0.5 and 2 based on the performance factor.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/performance-monitor.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst [dpr, setDpr] = useState(2)\nreturn (\n <Canvas dpr={dpr}>\n  <PerformanceMonitor factor={1} onChange={({ factor }) => setDpr(Math.floor(0.5 + 1.5 * factor, 1))} />\n```\n\n----------------------------------------\n\nTITLE: Defining Facemesh Component Props in TypeScript\nDESCRIPTION: This code defines the prop types for the Facemesh component using TypeScript. It includes various options for customizing the mesh rendering, such as dimensions, origin, and debug mode.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shapes/facemesh.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport type FacemeshProps = {\n  /** an array of 468+ keypoints as returned by google/mediapipe tasks-vision, default: a sample face */\n  points?: MediaPipePoints\n  /** @deprecated an face object as returned by tensorflow/tfjs-models face-landmarks-detection */\n  face?: MediaPipeFaceMesh\n  /** constant width of the mesh, default: undefined */\n  width?: number\n  /** or constant height of the mesh, default: undefined */\n  height?: number\n  /** or constant depth of the mesh, default: 1 */\n  depth?: number\n  /** a landmarks tri supposed to be vertical, default: [159, 386, 200] (see: https://github.com/tensorflow/tfjs-models/tree/master/face-landmarks-detection#mediapipe-facemesh-keypoints) */\n  verticalTri?: [number, number, number]\n  /** a landmark index (to get the position from) or a vec3 to be the origin of the mesh. default: undefined (ie. the bbox center) */\n  origin?: number | THREE.Vector3\n  /** A facial transformation matrix, as returned by FaceLandmarkerResult.facialTransformationMatrixes (see: https://developers.google.com/mediapipe/solutions/vision/face_landmarker/web_js#handle_and_display_results) */\n  facialTransformationMatrix?: (typeof FacemeshDatas.SAMPLE_FACELANDMARKER_RESULT.facialTransformationMatrixes)[0]\n  /** Apply position offset extracted from `facialTransformationMatrix` */\n  offset?: boolean\n  /** Offset sensitivity factor, less is more sensible */\n  offsetScalar?: number\n  /** Fface blendshapes, as returned by FaceLandmarkerResult.faceBlendshapes (see: https://developers.google.com/mediapipe/solutions/vision/face_landmarker/web_js#handle_and_display_results) */\n  faceBlendshapes?: (typeof FacemeshDatas.SAMPLE_FACELANDMARKER_RESULT.faceBlendshapes)[0]\n  /** whether to enable eyes (nb. `faceBlendshapes` is required for), default: true */\n  eyes?: boolean\n  /** Force `origin` to be the middle of the 2 eyes (nb. `eyes` is required for), default: false */\n  eyesAsOrigin?: boolean\n  /** debug mode, default: false */\n  debug?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MotionPathProps Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for MotionPathProps, detailing the available properties and their types for the MotionPathControls component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/motion-path-controls.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MotionPathProps = ThreeElements['group'] & {\n  /** An optional array of THREE curves */\n  curves?: THREE.Curve<THREE.Vector3>[]\n  /** Show debug helpers */\n  debug?: boolean\n  /** Color of debug helpers */\n  debugColor?: THREE.ColorRepresentation\n  /** The target object that is moved, default: null (the default camera) */\n  object?: React.RefObject<THREE.Object3D>\n  /** An object where the target looks towards, can also be a vector, default: null */\n  focus?: [x: number, y: number, z: number] | React.RefObject<THREE.Object3D>\n  /** Should the target object loop back to the start when reaching the end, default: true */\n  loop?: boolean\n  /** Position between 0 (start) and end (1), if this is not set useMotion().current must be used, default: null */\n  offset?: number\n  /** Optionally smooth the curve, default: false */\n  smooth?: boolean | number\n  /** Damping tolerance, default: 0.00001 */\n  eps?: number\n  /** Damping factor for movement along the curve, default: 0.1 */\n  damping?: number\n  /** Damping factor for lookAt, default: 0.1 */\n  focusDamping?: number\n  /** Damping maximum speed, default: Infinity */\n  maxSpeed?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MeshTransmissionMaterial Props Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for MeshTransmissionMaterial properties, extending ThreeElements' meshPhysicalMaterial with additional transmission-specific properties like thickness, roughness, and chromatic aberration.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/mesh-transmission-material.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype MeshTransmissionMaterialProps = ThreeElements['meshPhysicalMaterial'] & {\n  /* Transmission, default: 1 */\n  transmission?: number\n  /* Thickness (refraction), default: 0 */\n  thickness?: number\n  /** Backside thickness (when backside is true), default: 0 */\n  backsideThickness?: number\n  /* Roughness (blur), default: 0 */\n  roughness?: number\n  /* Chromatic aberration, default: 0.03 */\n  chromaticAberration?: number\n  /* Anisotropy, default: 0.1 */\n  anisotropicBlur?: number\n  /* Distortion, default: 0 */\n  distortion?: number\n  /* Distortion scale, default: 0.5 */\n  distortionScale?: number\n  /* Temporal distortion (speed of movement), default: 0.0 */\n  temporalDistortion?: number\n  /** The scene rendered into a texture (use it to share a texture between materials), default: null  */\n  buffer?: THREE.Texture\n  /** transmissionSampler, you can use the threejs transmission sampler texture that is\n   *  generated once for all transmissive materials. The upside is that it can be faster if you\n   *  use multiple MeshPhysical and Transmission materials, the downside is that transmissive materials\n   *  using this can't see other transparent or transmissive objects nor do you have control over the\n   *  buffer and its resolution, default: false */\n  transmissionSampler?: boolean\n  /** Render the backside of the material (more cost, better results), default: false */\n  backside?: boolean\n  /** Resolution of the local buffer, default: undefined (fullscreen) */\n  resolution?: number\n  /** Resolution of the local buffer for backfaces, default: undefined (fullscreen) */\n  backsideResolution?: number\n  /** Refraction samples, default: 6 */\n  samples?: number\n  /** Buffer scene background (can be a texture, a cubetexture or a color), default: null */\n  background?: THREE.Texture\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sparkles Component Props in TypeScript\nDESCRIPTION: This snippet defines the props for the Sparkles component, including count, speed, opacity, color, size, scale, and noise. Each prop is documented with its purpose and default value.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/sparkles.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Sparkles\n  /** Number of particles (default: 100) */\n  count?: number\n  /** Speed of particles (default: 1) */\n  speed?: number | Float32Array\n  /** Opacity of particles (default: 1) */\n  opacity?: number | Float32Array\n  /** Color of particles (default: 100) */\n  color?: THREE.ColorRepresentation | Float32Array\n  /** Size of particles (default: randomized between 0 and 1) */\n  size?: number | Float32Array\n  /** The space the particles occupy (default: 1) */\n  scale?: number | [number, number, number] | THREE.Vector3\n  /** Movement factor (default: 1) */\n  noise?: number | [number, number, number] | THREE.Vector3 | Float32Array\n/>\n```\n\n----------------------------------------\n\nTITLE: BBAnchor with HTML Example\nDESCRIPTION: Practical example showing how to pin an HTML element to a specific corner of a 3D box using anchor values [1, 1, 1] for positive x, y, and z positions.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/bb-anchor.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box>\n  <BBAnchor anchor={[1, 1, 1]}>\n    <Html center>\n      <span>Hello world!</span>\n    </Html>\n  </BBAnchor>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Fixing Blurry HTML in Transform Mode\nDESCRIPTION: Implementation showing how to mitigate the blurry appearance of HTML content in transform mode by scaling down the Html parent and scaling up the children, which can help on certain devices and browsers.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/html.mdx#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Html transform scale={0.5}>\n  <div style={{ transform: 'scale(2)' }}>Some text</div>\n</Html>\n```\n\n----------------------------------------\n\nTITLE: Defining CubeCamera Props Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the props for the CubeCamera component. It extends ThreeElements['group'] and includes additional properties for customizing the camera's behavior and rendering.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/cameras/cube-camera.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Props = ThreeElements['group'] & {\n  /** Number of frames to render, Infinity */\n  frames?: number\n  /** Resolution of the FBO, 256 */\n  resolution?: number\n  /** Camera near, 0.1 */\n  near?: number\n  /** Camera far, 1000 */\n  far?: number\n  /** Custom environment map that is temporarily set as the scenes background */\n  envMap?: THREE.Texture\n  /** Custom fog that is temporarily set as the scenes fog */\n  fog?: Fog | FogExp2\n  /** The contents of CubeCamera will be hidden when filming the cube */\n  children: (tex: Texture) => React.ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Using Alpha Hash for Improved Rendering Quality\nDESCRIPTION: Example demonstrating the use of the alphaHash prop on a Splat component. Alpha hashing can provide better visual quality but may be slower and introduce some noise that typically requires post-processing with TAA to eliminate.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/splat.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Splat alphaHash src=\"foo.splat\" />\n```\n\n----------------------------------------\n\nTITLE: Animated Occlusion with Html Component in JSX\nDESCRIPTION: Implementation showing how to animate the occlusion effect using the onOcclude callback. This allows for custom transitions when HTML content is hidden or shown based on occlusion state.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/html.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst [hidden, set] = useState()\n\n<Html\n  occlude\n  onOcclude={set}\n  style={{\n    transition: 'all 0.5s',\n    opacity: hidden ? 0 : 1,\n    transform: `scale(${hidden ? 0.5 : 1})`\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining FisheyeProps Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the Fisheye component props. It includes properties for zoom factor, number of segments, resolution, children, and render priority.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/fisheye.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FisheyeProps = ThreeElements['mesh'] & {\n  /** Zoom factor, 0..1, 0 */\n  zoom?: number\n  /** Number of segments, 64 */\n  segments?: number\n  /** Cubemap resolution (for each of the 6 takes), null === full screen resolution, default: 896 */\n  resolution?: number\n  /** Children will be projected into the fisheye */\n  children: React.ReactNode\n  /** Optional render priority, defaults to 1 */\n  renderPriority?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Typed Instances with TypeScript\nDESCRIPTION: Demonstrates how to use TypeScript with Instances to create typed custom attributes.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/instances.mdx#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ninterface SphereAttributes {\n  myCustomAttribute: number\n}\n\nconst [SphereInstances, Sphere] = createInstances<SphereAttributes>()\n\nfunction App() {\n  return (\n    <>\n      <SphereInstances>\n        <InstancedAttribute name=\"myCustomAttribute\" defaultValue={1} />\n        <sphereGeometry />\n        <shaderMaterial\n          // will recienve myCustomAttribute as an attribute\n          vertexShader={`\n              attribute float myCustomAttribute;\n              void main() {\n                ...\n              }\n            `}\n        />\n        <Sphere\n          position={[4, 5, 6]}\n          myCustomAttribute={1} // typed\n        />\n      </SphereInstances>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BVH Options and Props Interfaces in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interfaces for BVH options and props. It includes various configuration options for the BVH (Bounding Volume Hierarchy) construction and usage, such as split strategy, verbosity, and performance parameters.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/bvh.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BVHOptions {\n  /** Split strategy, default: SAH (slowest to construct, fastest runtime, least memory) */\n  splitStrategy?: 'CENTER' | 'AVERAGE' | 'SAH'\n  /** Print out warnings encountered during tree construction, default: false */\n  verbose?: boolean\n  /** If true then the bounding box for the geometry is set once the BVH has been constructed, default: true */\n  setBoundingBox?: boolean\n  /** The maximum depth to allow the tree to build to, default: 40 */\n  maxDepth?: number\n  /** The number of triangles to aim for in a leaf node, default: 10 */\n  maxLeafTris?: number\n  /** If false then an index buffer is created if it does not exist and is rearranged */\n  /** to hold the bvh structure. If false then a separate buffer is created to store the */\n  /** structure and the index buffer (or lack thereof) is retained. This can be used */\n  /** when the existing index layout is important or groups are being used so a */\n  /** single BVH hierarchy can be created to improve performance. */\n  /** default: false */\n  /** Note: This setting is experimental */\n  indirect?: boolean\n}\n\nexport type BvhProps = BVHOptions &\n  ThreeElements['group'] & {\n    /**Enabled, default: true */\n    enabled?: boolean\n    /** Use .raycastFirst to retrieve hits which is generally faster, default: false */\n    firstHitOnly?: boolean\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Controls as Default in React Three Fiber\nDESCRIPTION: Example of using the makeDefault prop with CameraControls to make it available in the root store for other components to access.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/introduction.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CameraControls makeDefault />\n```\n\n----------------------------------------\n\nTITLE: Defining Image Component Props Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Image component props, including options for segments, scale, color, zoom, radius, grayscale, and other visual properties.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/image.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type ImageProps = Omit<ThreeElements['mesh'], 'scale'> & {\n  segments?: number\n  scale?: number | [number, number]\n  color?: Color\n  zoom?: number\n  radius?: number\n  grayscale?: number\n  toneMapped?: boolean\n  transparent?: boolean\n  opacity?: number\n  side?: THREE.Side\n}\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Options for FaceLandmarker\nDESCRIPTION: Displays the default configuration used when instantiating the FaceLandmarker component. It includes paths to CDN-hosted dependencies and sets configuration for the MediaPipe FaceLandmarker.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/face-landmarker.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  basePath: \"https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@x.y.z/wasm\", // x.y.z will value the @mediapipe/tasks-vision version, eg: 0.10.2\n  options: {\n    baseOptions: {\n      modelAssetPath: \"https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task\",\n      delegate: \"GPU\",\n    },\n    runningMode: \"VIDEO\",\n    outputFaceBlendshapes: true,\n    outputFacialTransformationMatrixes: true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Rounded Corner Image Implementation\nDESCRIPTION: Example demonstrating how to create a custom rounded corner plane using maath geometry and extending it for use with the Image component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/image.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from '@react-three/fiber'\nimport { Image } from '@react-three/drei'\nimport { easing, geometry } from 'maath'\n\nextend({ RoundedPlaneGeometry: geometry.RoundedPlaneGeometry })\n\n<Image url=\"/file.jpg\">\n  <roundedPlaneGeometry args={[1, 2, 0.15]} />\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Using PerformanceMonitor with Fallback in React\nDESCRIPTION: This snippet demonstrates how to use the flipflops and onFallback props of PerformanceMonitor to set a baseline performance level after a certain number of performance fluctuations.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/performance-monitor.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<PerformanceMonitor flipflops={3} onFallback={() => setDpr(1)} />\n```\n\n----------------------------------------\n\nTITLE: Defining RandomizedLight Props Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the props for the RandomizedLight component. Includes properties for controlling light behavior, shadows, and positioning with detailed type definitions and default values.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/randomized-light.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype RandomizedLightProps = ThreeElements['group'] & {\n  /** How many frames it will jiggle the lights, 1.\n   *  Frames is context aware, if a provider like AccumulativeShadows exists, frames will be taken from there!  */\n  frames?: number\n  /** Light position, [0, 0, 0] */\n  position?: [x: number, y: number, z: number]\n  /** Radius of the jiggle, higher values make softer light, 5 */\n  radius?: number\n  /** Amount of lights, 8 */\n  amount?: number\n  /** Light intensity, 1 */\n  intensity?: number\n  /** Ambient occlusion, lower values mean less AO, hight more, you can mix AO and directional light, 0.5 */\n  ambient?: number\n  /** If the lights cast shadows, this is true by default */\n  castShadow?: boolean\n  /** Default shadow bias, 0 */\n  bias?: number\n  /** Default map size, 512 */\n  mapSize?: number\n  /** Default size of the shadow camera, 10 */\n  size?: number\n  /** Default shadow camera near, 0.5 */\n  near?: number\n  /** Default shadow camera far, 500 */\n  far?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Material for Html Component in JSX\nDESCRIPTION: Implementation showing how to apply custom THREE.js material properties to HTML content using the material prop. This allows for more control over how the HTML appears in the 3D scene.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/html.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Html\n  occlude\n  material={\n    <meshPhysicalMaterial\n      side={DoubleSide} // Required\n      opacity={0.1} // Degree of influence of lighting on the HTML\n      ... // Any other material properties\n    />\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Loader Component with Styling and Text Options\nDESCRIPTION: Demonstrates how to customize the Loader component's appearance by overriding container styles, inner container styles, loading bar styles, and text styles. Also shows how to customize the loading text and initial active state.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/loader.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Loader\n  containerStyles={...container} // Flex layout styles\n  innerStyles={...inner} // Inner container styles\n  barStyles={...bar} // Loading-bar styles\n  dataStyles={...data} // Text styles\n  dataInterpolation={(p) => `Loading ${p.toFixed(2)}%`} // Text\n  initialState={(active) => active} // Initial black out state\n>\n```\n\n----------------------------------------\n\nTITLE: Basic Mask Definition\nDESCRIPTION: Example showing how to define a basic mask with plane geometry and basic material.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/mask.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Mask id={1}>\n  <planeGeometry />\n  <meshBasicMaterial />\n</Mask>\n```\n\n----------------------------------------\n\nTITLE: Constraining Specific Dimension with Resize Component in JSX\nDESCRIPTION: Shows how to use the Resize component to constrain a specific dimension (height in this case) while scaling a Box mesh.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/resize.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Resize height>\n  <Box args={[70, 40, 20]}>\n</Resize>\n```\n\n----------------------------------------\n\nTITLE: VideoTexture Component Type Definition\nDESCRIPTION: TypeScript type definition for the VideoTexture component, showing its props interface which includes the source and options from useVideoTexture, plus a children render prop for accessing the texture.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/video-texture-use-video-texture.mdx#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport type VideoTextureProps = {\n  children?: (texture: THREE.VideoTexture) => React.ReactNode\n  src: UseVideoTextureParams[0]\n} & UseVideoTextureParams[1]\n```\n\n----------------------------------------\n\nTITLE: Customizing Text3D Properties in JSX\nDESCRIPTION: Illustrates the use of additional properties specific to Text3D: smooth for vertex merging, lineHeight for adjusting line spacing, and letterSpacing for controlling character spacing. Also demonstrates multi-line text rendering.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/text3d.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Text3D smooth={1} lineHeight={0.5} letterSpacing={-0.025}>{`hello\\nworld`}</Text3D>\n```\n\n----------------------------------------\n\nTITLE: Using MeshRefractionMaterial with CubeCamera\nDESCRIPTION: Example showing how to use MeshRefractionMaterial with CubeCamera for real-time environment reflections in the scene.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/mesh-refraction-material.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CubeCamera>\n  {(texture) => (\n    <mesh geometry={diamondGeometry} {...props}>\n      <MeshRefractionMaterial envMap={texture} />\n    </mesh>\n  )}\n</CubeCamera>\n```\n\n----------------------------------------\n\nTITLE: PerspectiveCamera as a RenderTarget for Texturing\nDESCRIPTION: Example demonstrating how to use PerspectiveCamera to film contents into a RenderTarget. This approach is similar to CubeCamera, where the function receives the rendered texture as its first argument and can apply it to materials while avoiding rendering interference.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/cameras/perspective-camera.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<PerspectiveCamera position={[0, 0, 10]}>\n  {(texture) => (\n    <mesh geometry={plane}>\n      <meshBasicMaterial map={texture} />\n    </mesh>\n  )}\n</PerspectiveCamera>\n```\n\n----------------------------------------\n\nTITLE: Basic Stats Component Usage in React Three Fiber\nDESCRIPTION: Adds stats.js performance monitoring panel to document.body with configuration options. The showPanel prop selects which panel to display (0=FPS, 1=MS, 2=MB), and additional props can be passed through.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/stats.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Stats showPanel={0} className=\"stats\" {...props} />\n```\n\n----------------------------------------\n\nTITLE: Defining RenderCubeTexture Types in TypeScript\nDESCRIPTION: TypeScript type definitions for RenderCubeTexture component props and API. Includes configuration options for rendering settings, buffers, resolution, and transformation properties.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/render-cube-texture.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RenderCubeTextureProps = Omit<ThreeElements['texture'], 'rotation'> & {\n  /** Optional stencil buffer, defaults to false */\n  stencilBuffer?: boolean\n  /** Optional depth buffer, defaults to true */\n  depthBuffer?: boolean\n  /** Optional generate mipmaps, defaults to false */\n  generateMipmaps?: boolean\n  /** Optional render priority, defaults to 0 */\n  renderPriority?: number\n  /** Optional event priority, defaults to 0 */\n  eventPriority?: number\n  /** Optional frame count, defaults to Infinity. If you set it to 1, it would only render a single frame, etc */\n  frames?: number\n  /** Optional event compute, defaults to undefined */\n  compute?: ComputeFunction\n  /** Flip cubemap, see https://github.com/mrdoob/three.js/blob/master/src/renderers/WebGLCubeRenderTarget.js */\n  flip?: boolean\n  /** Cubemap resolution (for each of the 6 takes), null === full screen resolution, default: 896 */\n  resolution?: number\n  /** Children will be rendered into a portal */\n  children: React.ReactNode\n  near?: number\n  far?: number\n  position?: ReactThreeFiber.Vector3\n  rotation?: ReactThreeFiber.Euler\n  scale?: ReactThreeFiber.Vector3\n  quaternion?: ReactThreeFiber.Quaternion\n  matrix?: ReactThreeFiber.Matrix4\n  matrixAutoUpdate?: boolean\n}\n\nexport type RenderCubeTextureApi = {\n  scene: THREE.Scene\n  fbo: THREE.WebGLCubeRenderTarget\n  camera: THREE.CubeCamera\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Environment Maps from Cache\nDESCRIPTION: Examples showing how to clear cached environment maps for different loading methods.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/use-environment.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nuseEnvironment.clear({ preset: 'city' })\nuseEnvironment.clear({ files: 'model.hdr' })\nuseEnvironment.clear({ files: ['px', 'nx', 'py', 'ny', 'pz', 'nz'].map((n) => `${n}.png`) })\n```\n\n----------------------------------------\n\nTITLE: Basic CameraControls Component Usage in TSX\nDESCRIPTION: Simple implementation of the CameraControls component for basic camera control functionality.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/camera-controls.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CameraControls />\n```\n\n----------------------------------------\n\nTITLE: Using requestVideoFrameCallback with useVideoTexture\nDESCRIPTION: Example of using the requestVideoFrameCallback API with useVideoTexture to perform operations on each video frame. Provides a callback that receives timestamp and metadata for each frame.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/video-texture-use-video-texture.mdx#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nuseVideoTexture(src, {\n  onVideoFrame: (now, metadata) => {}\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Facemesh Component API in React\nDESCRIPTION: This snippet shows how to access the Facemesh component's API using a ref in React. It provides the structure of the API object and examples of how to use it to get face mesh and iris directions.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shapes/facemesh.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = useRef<FacemeshApi>()\n\n<Facemesh ref={api} points={points} />\n```\n\nLANGUAGE: tsx\nCODE:\n```\ntype FacemeshApi = {\n  meshRef: React.RefObject<THREE.Mesh>\n  outerRef: React.RefObject<THREE.Group>\n  eyeRightRef: React.RefObject<FacemeshEyeApi>\n  eyeLeftRef: React.RefObject<FacemeshEyeApi>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\napi.meshRef.current.localToWorld(new THREE.Vector3(0, 0, -1))\n```\n\nLANGUAGE: tsx\nCODE:\n```\napi.eyeRightRef.current.irisDirRef.current.localToWorld(new THREE.Vector3(0, 0, -1))\n```\n\n----------------------------------------\n\nTITLE: Defining PerformanceMonitor Props in TypeScript\nDESCRIPTION: This snippet defines the prop types for the PerformanceMonitor component. It includes options for monitoring intervals, thresholds, bounds, and various callback functions for performance adjustments.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/performance-monitor.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PerformanceMonitorProps = {\n  /** How much time in milliseconds to collect an average fps, 250 */\n  ms?: number\n  /** How many interations of averages to collect, 10 */\n  iterations?: number\n  /** The percentage of iterations that are matched against the lower and upper bounds, 0.75 */\n  threshold?: number\n  /** A function that receive the max device refreshrate to determine lower and upper bounds which create a margin where neither incline nor decline should happen, (refreshrate) => (refreshrate > 90 ? [50, 90] : [50, 60]) */\n  bounds: (refreshrate: number) => [lower: number, upper: number]\n  /** How many times it can inline or decline before onFallback is called, Infinity */\n  flipflops?: number\n  /** The factor increases and decreases between 0-1, this prop sets the initial value, 0.5 */\n  factor?: number\n  /** The step that gets added or subtracted to or from the factor on each incline/decline, 0.1 */\n  step?: number\n  /** When performance is higher than the upper bound (good!) */\n  onIncline?: (api: PerformanceMonitorApi) => void\n  /** When performance is lower than the upper bound (bad!) */\n  onDecline?: (api: PerformanceMonitorApi) => void\n  /** Incline and decline will change the factor, this will trigger when that happened */\n  onChange?: (api: PerformanceMonitorApi) => void\n  /** Called after when the number of flipflops is reached, it indicates instability, use the function to set a fixed baseline */\n  onFallback?: (api: PerformanceMonitorApi) => void\n  /** Children may use the usePerformanceMonitor hook */\n  children?: React.ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Props for Center Component in TypeScript\nDESCRIPTION: This snippet defines the Props type for the Center component, including various positioning and disabling options, as well as a callback function.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/center.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Props = ThreeElements['group'] & {\n  top?: boolean\n  right?: boolean\n  bottom?: boolean\n  left?: boolean\n  front?: boolean\n  back?: boolean\n  /** Disable all axes */\n  disable?: boolean\n  /** Disable x-axis centering */\n  disableX?: boolean\n  /** Disable y-axis centering */\n  disableY?: boolean\n  /** Disable z-axis centering */\n  disableZ?: boolean\n  /** Precision, defaults to true, see https://threejs.org/docs/index.html?q=box3#api/en/math/Box3.setFromObject */\n  precise?: boolean\n  /** Callback, fires in the useLayoutEffect phase, after measurement */\n  onCentered?: (props: OnCenterCallbackProps) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Instances\nDESCRIPTION: Shows the syntax for adding event handlers to Instance components.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/instances.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Instance onClick={...} onPointerOver={...} />\n```\n\n----------------------------------------\n\nTITLE: Setting Global Draco Decoder Path in TypeScript\nDESCRIPTION: Shows how to set a global draco decoder path for all useGLTF instances.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/gltf-use-gltf.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuseGLTF.setDecoderPath(path)\n```\n\n----------------------------------------\n\nTITLE: Using ScreenVideoTexture Component with Ref in JSX\nDESCRIPTION: This snippet shows how to use the ScreenVideoTexture component with a ref. The textureRef can be used to access the texture outside of the component's render function.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/screen-video-texture.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst textureRef = useRef()\n<ScreenVideoTexture ref={textureRef} />\n```\n\n----------------------------------------\n\nTITLE: Using Fisheye Component in React Three Fiber\nDESCRIPTION: This example demonstrates how to use the Fisheye component in a React Three Fiber scene. It wraps the scene content inside the Fisheye component and includes an OrbitControls component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/fisheye.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas camera={{ position: [0, 0, 5] }}>\n  <Fisheye>\n    <YourScene />\n  </Fisheye>\n  <OrbitControls />\n```\n\n----------------------------------------\n\nTITLE: ShakeController Interface Definition in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the ShakeController, which provides methods to get and set the intensity of the camera shake effect.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/camera-shake.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ShakeController {\n  getIntensity: () => number\n  setIntensity: (val: number) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PerformanceMonitorApi in TypeScript\nDESCRIPTION: This snippet defines the PerformanceMonitorApi type, which is used in the callback functions of the PerformanceMonitor component. It includes properties for current FPS, performance factor, refresh rate, and performance history.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/performance-monitor.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype PerformanceMonitorApi = {\n  /** Current fps */\n  fps: number\n  /** Current performance factor, between 0 and 1 */\n  factor: number\n  /** Current highest fps, you can use this to determine device refresh rate */\n  refreshrate: number\n  /** Fps samples taken over time  */\n  frames: number[]\n  /** Averages of frames taken over n iterations   */\n  averages: number[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sparkles Shader Attributes in GLSL\nDESCRIPTION: This snippet shows the GLSL attributes used in the custom shaders for the Sparkles component. It includes size, speed, opacity, noise, and color attributes.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/sparkles.mdx#2025-04-11_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nattribute float size;\nattribute float speed;\nattribute float opacity;\nattribute vec3 noise;\nattribute vec3 color;\n```\n\n----------------------------------------\n\nTITLE: Controlling MotionPathControls via Ref in React\nDESCRIPTION: This snippet shows how to use a ref to control the MotionPathControls component, allowing direct manipulation of the motion state in the animation loop.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/motion-path-controls.mdx#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst motionPathRef = useRef<MotionPathRef>(null!)\nconst motionPathObject = useRef<Mesh>(null!)\n\nuseFrame(() => {\n  if (motionPathRef.current) {\n    motionPathRef.current.motion.current += 0.01\n  }\n})\n\n<MotionPathControls\n  ref={motionPathRef}\n  object={motionPathObject}\n  curves={[\n    new THREE.CubicBezierCurve3(\n      new THREE.Vector3(-5, -5, 0),\n      new THREE.Vector3(-10, 0, 0),\n      new THREE.Vector3(0, 3, 0),\n      new THREE.Vector3(6, 3, 0)\n    ),\n    new THREE.CubicBezierCurve3(\n      new THREE.Vector3(6, 3, 0),\n      new THREE.Vector3(10, 5, 5),\n      new THREE.Vector3(5, 3, 5),\n      new THREE.Vector3(5, 5, 5)\n    ),\n  ]}\n/>\n  <mesh ref={motionPathObject}>\n    <planeGeometry args={[10, 10, 1, 1]} />\n  </mesh>\n</MotionPathControls>\n```\n\n----------------------------------------\n\nTITLE: AccumulativeLightContext Interface Definition\nDESCRIPTION: Interface definition for the AccumulativeLightContext, which provides methods for controlling light behavior.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/randomized-light.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ninterface AccumulativeLightContext {\n  /** Jiggles the lights */\n  update: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Decal Implementation with External Mesh Reference\nDESCRIPTION: Demonstrates how to attach a decal to a specific mesh using the mesh prop when declarative composition isn't possible.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/decal.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Decal mesh={ref}>\n  <meshBasicMaterial map={texture} polygonOffset polygonOffsetFactor={-1} />\n</Decal>\n```\n\n----------------------------------------\n\nTITLE: Rendering Curved Lines with CatmullRomLine in React Three Fiber\nDESCRIPTION: A React component that renders a curved line using CatmullRom interpolation. It supports various customization options including points array, curve type, tension, color, line width, and vertex colors. The component extends THREE.Line2 and THREE.LineMaterial properties.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shapes/catmull-rom-line.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CatmullRomLine\n  points={[[0, 0, 0], ...]}       // Array of Points\n  closed={false}                  // Default\n  curveType=\"centripetal\"         // One of \"centripetal\" (default), \"chordal\", or \"catmullrom\"\n  tension={0.5}                   // Default (only applies to \"catmullrom\" curveType)\n  color=\"black\"                   // Default\n  lineWidth={1}                   // In pixels (default)\n  dashed={false}                  // Default\n  vertexColors={[[0, 0, 0], ...]} // Optional array of RGB values for each point\n  {...lineProps}                  // All THREE.Line2 props are valid\n  {...materialProps}              // All THREE.LineMaterial props are valid\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining SoftShadows Component Props TypeScript Interface\nDESCRIPTION: TypeScript interface defining the configuration options for the SoftShadows component, including size of light source, number of samples, and depth focus parameters.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/soft-shadows.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype SoftShadowsProps = {\n  /** Size of the light source (the larger the softer the light), default: 25 */\n  size?: number\n  /** Number of samples (more samples less noise but more expensive), default: 10 */\n  samples?: number\n  /** Depth focus, use it to shift the focal point (where the shadow is the sharpest), default: 0 (the beginning) */\n  focus?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ViewProps and ViewportProps Types in TypeScript\nDESCRIPTION: TypeScript definitions for the View component props and the Viewport props. It includes various customization options such as visibility, render index, and tracking elements.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/view.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type ViewProps = {\n  /** Root element type, default: div */\n  as?: string\n  /** CSS id prop */\n  id?: string\n  /** CSS classname prop */\n  className?: string\n  /** CSS style prop */\n  style?: React.CSSProperties\n  /** If the view is visible or not, default: true */\n  visible?: boolean\n  /** Views take over the render loop, optional render index (1 by default) */\n  index?: number\n  /** If you know your view is always at the same place set this to 1 to avoid needless getBoundingClientRect overhead */\n  frames?: number\n  /** The scene to render, if you leave this undefined it will render the default scene */\n  children?: React.ReactNode\n  /** The tracking element, the view will be cut according to its whereabouts\n   * @deprecated You can use inline Views now, see: https://github.com/pmndrs/drei/pull/1784\n   */\n  track?: React.RefObject<HTMLElement>\n}\n\nexport type ViewportProps = { Port: () => React.ReactNode } & React.ForwardRefExoticComponent<\n  ViewProps & React.RefAttributes<HTMLElement | THREE.Group>\n>\n```\n\n----------------------------------------\n\nTITLE: Importing @react-three/drei Components for React Native\nDESCRIPTION: Example of importing components from @react-three/drei/native for use with React Native. Note that Html and Loader components are not available in the native route.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/getting-started/introduction.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PerspectiveCamera, PositionalAudio, ... } from '@react-three/drei/native'\n```\n\n----------------------------------------\n\nTITLE: Defining ExampleProps Interface in TSX\nDESCRIPTION: Defines the prop types for the Example component. It includes required font string, optional color, debug boolean, and bevelSize number props.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/example.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype ExampleProps = {\n  font: string\n  color?: Color\n  debug?: boolean\n  bevelSize?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Loader Component in React Three Fiber\nDESCRIPTION: Shows the basic implementation of the Loader component alongside a Canvas with Suspense. The Loader acts as an overlay that displays while the AsyncModels component is loading.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/loader.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas>\n  <Suspense fallback={null}>\n    <AsyncModels />\n  </Suspense>\n</Canvas>\n<Loader />\n```\n\n----------------------------------------\n\nTITLE: Using TransformControls by Wrapping Objects in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use TransformControls by wrapping a mesh object directly in JSX. The wrapped object receives a transform gizmo with the specified mode.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/transform-controls.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TransformControls mode=\"translate\">\n  <mesh />\n</TransformControls>\n```\n\n----------------------------------------\n\nTITLE: Using Example Component with Ref in TSX\nDESCRIPTION: Shows how to use the Example component with a ref to access its API. The ref is of type ExampleApi, which is defined separately.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/example.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = useRef<ExampleApi>()\n\n<Example ref={api} font=\"/Inter_Bold.json\" />\n```\n\n----------------------------------------\n\nTITLE: BBAnchor Mathematical Formula\nDESCRIPTION: Mathematical formula showing how the children's anchor position is calculated based on bounding box position and size.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/bb-anchor.mdx#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nchildrenAnchor = boundingBoxPosition + (boundingBoxSize * anchor / 2)\n```\n\n----------------------------------------\n\nTITLE: Initializing FaceLandmarker Provider in React Three Fiber\nDESCRIPTION: Sets up the FaceLandmarker provider, which is a prerequisite for using FaceControls. This wraps the components that will use face detection features.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/face-controls.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<FaceLandmarker>...</FaceLandmarker>\n```\n\n----------------------------------------\n\nTITLE: Self-hosting MediaPipe Dependencies with Symbolic Links and cURL\nDESCRIPTION: Shell commands for creating a symbolic link to the MediaPipe WASM files and downloading the face landmark model to your public directory for self-hosting the dependencies.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/face-landmarker.mdx#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ln -s ../node_modules/@mediapipe/tasks-vision/wasm/ public/tasks-vision-wasm\n$ curl https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task -o public/face_landmarker.task\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Component in React with Drei\nDESCRIPTION: This snippet demonstrates how to use the Line component from Drei to render a line in a React Three Fiber scene. It shows various props including points, color, lineWidth, and other customization options.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shapes/line.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Line\n  points={[[0, 0, 0], ...]}\n  color=\"black\"\n  lineWidth={1}\n  segments\n  dashed={false}\n  vertexColors={[[0, 0, 0], ...]}\n  {...lineProps}\n  {...materialProps}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Component Types in TypeScript\nDESCRIPTION: Type definitions for the Grid component in pmndrs/drei. Includes GridMaterialType with various customization options for appearance and behavior, and GridProps that extends these options with geometry arguments.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/grid.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type GridMaterialType = {\n  /** Cell size, default: 0.5 */\n  cellSize?: number\n  /** Cell thickness, default: 0.5 */\n  cellThickness?: number\n  /** Cell color, default: black */\n  cellColor?: THREE.ColorRepresentation\n  /** Section size, default: 1 */\n  sectionSize?: number\n  /** Section thickness, default: 1 */\n  sectionThickness?: number\n  /** Section color, default: #2080ff */\n  sectionColor?: THREE.ColorRepresentation\n  /** Follow camera, default: false */\n  followCamera?: boolean\n  /** Display the grid infinitely, default: false */\n  infiniteGrid?: boolean\n  /** Fade distance, default: 100 */\n  fadeDistance?: number\n  /** Fade strength, default: 1 */\n  fadeStrength?: number\n  /** Fade from camera (1) or origin (0), or somewhere in between, default: camera */\n  fadeFrom?: number\n}\n\nexport type GridProps = GridMaterialType & {\n  /** Default plane-geometry arguments */\n  args?: ConstructorParameters<typeof THREE.PlaneGeometry>\n}\n```\n\n----------------------------------------\n\nTITLE: Mask Component TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the Mask component showing available props including id, colorWrite, and depthWrite options.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/mask.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Mask\n  /** Each mask must have an id, you can have compound masks referring to the same id */\n  id: number\n  /** If colors of the masks own material will leak through, default: false */\n  colorWrite?: boolean\n  /** If depth  of the masks own material will leak through, default: false */\n  depthWrite?: boolean\n/>\n```\n\n----------------------------------------\n\nTITLE: CameraControls Props Type Definition in TSX\nDESCRIPTION: TypeScript interface definition for CameraControls component props, including camera configuration, DOM element binding, default state setting, and event callback handlers.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/camera-controls.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype CameraControlsProps = {\n  /** The camera to control, default to the state's `camera` */\n  camera?: PerspectiveCamera | OrthographicCamera\n  /** DOM element to connect to, default to the state's `gl` renderer */\n  domElement?: HTMLElement\n  /** Reference this CameraControls instance as state's `controls` */\n  makeDefault?: boolean\n  /** Events callbacks, see: https://github.com/yomotsu/camera-controls#events */\n  onStart?: (e?: { type: 'controlstart' }) => void\n  onEnd?: (e?: { type: 'controlend' }) => void\n  onChange?: (e?: { type: 'update' }) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Using OrthographicCamera with RenderTarget\nDESCRIPTION: Demonstrates using OrthographicCamera for filming content into a RenderTarget, creating a texture that is applied to a mesh material.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/cameras/orthographic-camera.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<OrthographicCamera position={[0, 0, 10]}>\n  {(texture) => (\n    <mesh geometry={plane}>\n      <meshBasicMaterial map={texture} />\n    </mesh>\n  )}\n</OrthographicCamera>\n```\n\n----------------------------------------\n\nTITLE: Defining Cloud Component Props in TypeScript\nDESCRIPTION: This snippet defines the prop types for the Cloud and Clouds components. It includes options for customizing the cloud appearance, behavior, and performance.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/cloud.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype CloudsProps = ThreeElements['group'] & {\n  /** Optional cloud texture, points to a default hosted on rawcdn.githack */\n  texture?: string\n  /** Maximum number of segments, default: 200 (make this tight to save memory!) */\n  limit?: number\n  /** How many segments it renders, default: undefined (all) */\n  range?: number\n  /** Which material it will override, default: MeshLambertMaterial */\n  material?: typeof Material\n  /** Frustum culling, default: true */\n  frustumCulled?: boolean\n}\n\ntype CloudProps = ThreeElements['group'] & {\n  /** A seeded random will show the same cloud consistently, default: Math.random() */\n  seed?: number\n  /** How many segments or particles the cloud will have, default: 20 */\n  segments?: number\n  /** The box3 bounds of the cloud, default: [5, 1, 1] */\n  bounds?: ReactThreeFiber.Vector3\n  /** How to arrange segment volume inside the bounds, default: inside (cloud are smaller at the edges) */\n  concentrate?: 'random' | 'inside' | 'outside'\n  /** The general scale of the segments */\n  scale?: ReactThreeFiber.Vector3\n  /** The volume/thickness of the segments, default: 6 */\n  volume?: number\n  /** The smallest volume when distributing clouds, default: 0.25 */\n  smallestVolume?: number\n  /** An optional function that allows you to distribute points and volumes (overriding all settings), default: null\n   *  Both point and volume are factors, point x/y/z can be between -1 and 1, volume between 0 and 1 */\n  distribute?: (cloud: CloudState, index: number) => { point: Vector3; volume?: number }\n  /** Growth factor for animated clouds (speed > 0), default: 4 */\n  growth?: number\n  /** Animation factor, default: 0 */\n  speed?: number\n  /** Camera distance until the segments will fade, default: 10 */\n  fade?: number\n  /** Opacity, default: 1 */\n  opacity?: number\n  /** Color, default: white */\n  color?: ReactThreeFiber.Color\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Splat Component Props Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Splat component props. It extends ThreeElements['mesh'] and includes properties for specifying the splat source file, tone mapping, alpha test values, alpha hashing, and chunk size for lazy loading.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/splat.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SplatProps = {\n  /** Url towards a *.splat file, no support for *.ply */\n  src: string\n  /** Whether to use tone mapping, default: false */\n  toneMapped?: boolean\n  /** Alpha test value, , default: 0 */\n  alphaTest?: number\n  /** Whether to use alpha hashing, default: false */\n  alphaHash?: boolean\n  /** Chunk size for lazy loading, prevents chokings the worker, default: 25000 (25kb) */\n  chunkSize?: number\n} & ThreeElements['mesh']\n```\n\n----------------------------------------\n\nTITLE: Prefetching Draco Binaries in HTML\nDESCRIPTION: HTML code to prefetch draco binaries for faster loading of compressed models.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/gltf-use-gltf.mdx#2025-04-11_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"prefetch\"\n  crossorigin=\"anonymous\"\n  href=\"https://www.gstatic.com/draco/versioned/decoders/1.5.5/draco_wasm_wrapper.js\"\n/>\n<link\n  rel=\"prefetch\"\n  crossorigin=\"anonymous\"\n  href=\"https://www.gstatic.com/draco/versioned/decoders/1.5.5/draco_decoder.wasm\"\n/>\n```\n\n----------------------------------------\n\nTITLE: GLSL Shader Implementation\nDESCRIPTION: Example of GLSL shader code showing how to use custom instanced attributes in vertex and fragment shaders.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/performances/instances.mdx#2025-04-11_snippet_6\n\nLANGUAGE: glsl\nCODE:\n```\n# vertex\nattribute float foo;\nvarying float vFoo;\nvoid main() {\n  ...\n  vFoo = foo;\n\n# fragment\nvarying float vFoo;\nvoid main() {\n  ...\n```\n\n----------------------------------------\n\nTITLE: Preloading Environment Maps\nDESCRIPTION: Examples of preloading environment maps using different loading methods, with a note about gainmap limitations.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/use-environment.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nuseEnvironment.preload({ preset: 'city' })\nuseEnvironment.preload({ files: 'model.hdr' })\nuseEnvironment.preload({ files: ['px', 'nx', 'py', 'ny', 'pz', 'nz'].map((n) => `${n}.png`) })\n```\n\n----------------------------------------\n\nTITLE: Configuring HLS Options with useVideoTexture\nDESCRIPTION: Example showing how to pass custom HLS configuration options when using useVideoTexture with an HLS stream. Demonstrates fine-tuning HLS behavior with specific parameters.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/video-texture-use-video-texture.mdx#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst texture = useVideoTexture('https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8', {\n  hls: { abrEwmaFastLive: 1.0, abrEwmaSlowLive: 3.0, enableWorker: true },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining HudProps Interface in TypeScript\nDESCRIPTION: Defines the props interface for the Hud component, including children and renderPriority.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/hud.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype HudProps = {\n  /** Any React node */\n  children: React.ReactNode\n  /** Render priority, default: 1 */\n  renderPriority?: number\n}\n```\n\n----------------------------------------\n\nTITLE: PerspectiveCamera Props Type Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the props for the PerspectiveCamera component, extending ThreeElements['perspectiveCamera'] with additional functionality like makeDefault, manual mode, children handling, frame control, resolution settings, and environment mapping.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/cameras/perspective-camera.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = Omit<ThreeElements['perspectiveCamera'], 'children'> & {\n  /** Registers the camera as the system default, fiber will start rendering with it */\n  makeDefault?: boolean\n  /** Making it manual will stop responsiveness and you have to calculate aspect ratio yourself. */\n  manual?: boolean\n  /** The contents will either follow the camera, or be hidden when filming if you pass a function */\n  children?: React.ReactNode | ((texture: THREE.Texture) => React.ReactNode)\n  /** Number of frames to render, 0 */\n  frames?: number\n  /** Resolution of the FBO, 256 */\n  resolution?: number\n  /** Optional environment map for functional use */\n  envMap?: THREE.Texture\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Component in TSX\nDESCRIPTION: Demonstrates how to render the Example component with a required font prop. The font prop specifies the path to a JSON font file.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/example.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Example font=\"/Inter_Bold.json\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Splat Component Usage in JSX\nDESCRIPTION: A simple example showing how to use the Splat component with a remote .splat file from HuggingFace. This demonstrates the minimal required props to render a 3D Gaussian splat in a React Three Fiber scene.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/splat.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Splat src=\"https://huggingface.co/cakewalk/splat-data/resolve/main/nike.splat\" />\n```\n\n----------------------------------------\n\nTITLE: Defining ResizeProps Interface in TypeScript\nDESCRIPTION: Defines the props interface for the Resize component, including options for constraining dimensions and specifying a bounding box.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/resize.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResizeProps = ThreeElements['group'] & {\n  /** constrained by width dimension (x axis), undefined */\n  width?: boolean\n  /** constrained by height dimension (y axis), undefined */\n  height?: boolean\n  /** constrained by depth dimension (z axis), undefined */\n  depth?: boolean\n  /** You can optionally pass the Box3, otherwise will be computed, undefined */\n  box3?: THREE.Box3\n  /** See https://threejs.org/docs/index.html?q=box3#api/en/math/Box3.setFromObject */\n  precise?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Caustics Component Props Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Caustics component props, including configuration options for frames, debug mode, IOR values, resolution, and light source positioning.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/caustics.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype CausticsProps = ThreeElements['group'] & {\n  /** How many frames it will render, set it to Infinity for runtime, default: 1 */\n  frames?: number\n  /** Enables visual cues to help you stage your scene, default: false */\n  debug?: boolean\n  /** Will display caustics only and skip the models, default: false */\n  causticsOnly: boolean\n  /** Will include back faces and enable the backsideIOR prop, default: false */\n  backside: boolean\n  /** The IOR refraction index, default: 1.1 */\n  ior?: number\n  /** The IOR refraction index for back faces (only available when backside is enabled), default: 1.1 */\n  backsideIOR?: number\n  /** The texel size, default: 0.3125 */\n  worldRadius?: number\n  /** Intensity of the prjected caustics, default: 0.05 */\n  intensity?: number\n  /** Caustics color, default: white */\n  color?: ReactThreeFiber.Color\n  /** Buffer resolution, default: 2048 */\n  resolution?: number\n  /** Camera position, it will point towards the contents bounds center, default: [5, 5, 5] */\n  lightSource?: [x: number, y: number, z: number] | React.RefObject<THREE.Object3D>\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled PivotControls Usage in JSX\nDESCRIPTION: This example shows how to use PivotControls as a controlled component. It disables autoTransform and manually applies the matrix transform, allowing for more fine-grained control over the transformation process.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/pivot-controls.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst matrix = new THREE.Matrix4()\nreturn (\n  <PivotControls\n    ref={ref}\n    matrix={matrix}\n    autoTransform={false}\n    onDrag={({ matrix: matrix_ }) => matrix.copy(matrix_)}\n```\n\n----------------------------------------\n\nTITLE: Defining AccumulativeShadows Props Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the props for the AccumulativeShadows component. Includes configuration options for shadow accumulation, rendering behavior, and visual properties.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/accumulative-shadows.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AccumulativeShadowsProps = ThreeElements['group'] & {\n  /** How many frames it can render, more yields cleaner results but takes more time, 40 */\n  frames?: number\n  /** If frames === Infinity blend controls the refresh ratio, 100 */\n  blend?: number\n  /** Can limit the amount of frames rendered if frames === Infinity, usually to get some performance back once a movable scene has settled, Infinity */\n  limit?: number\n  /** Scale of the plane,  */\n  scale?: number\n  /** Temporal accumulates shadows over time which is more performant but has a visual regression over instant results, false  */\n  temporal?: false\n  /** Opacity of the plane, 1 */\n  opacity?: number\n  /** Discards alpha pixels, 0.65 */\n  alphaTest?: number\n  /** Shadow color, black */\n  color?: string\n  /** Colorblend, how much colors turn to black, 0 is black, 2 */\n  colorBlend?: number\n  /** Buffer resolution, 1024 */\n  resolution?: number\n  /** Children should be randomized lights shining from different angles to emulate raycasting */\n  children?: React.ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Clone Component Props in TypeScript\nDESCRIPTION: This snippet defines the props interface for the Clone component. It includes options for specifying the object to clone, children, cloning depth, property keys to clone, and additional properties to inject.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/clone.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<Clone\n  /** Any pre-existing THREE.Object3D (groups, meshes, ...), or an array of objects */\n  object: THREE.Object3D | THREE.Object3D[]\n  /** Children will be placed within the object, or within the group that holds arrayed objects */\n  children?: React.ReactNode\n  /** Can clone materials and/or geometries deeply (default: false) */\n  deep?: boolean | 'materialsOnly' | 'geometriesOnly'\n  /** The property keys it will shallow-clone (material, geometry, visible, ...) */\n  keys?: string[]\n  /** Can either spread over props or fill in JSX children, applies to every mesh within */\n  inject?: MeshProps | React.ReactNode | ((object: THREE.Object3D) => React.ReactNode)\n  /** Short access castShadow, applied to every mesh within */\n  castShadow?: boolean\n  /** Short access receiveShadow, applied to every mesh within */\n  receiveShadow?: boolean\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Facemesh Component with MediaPipe Data in JSX\nDESCRIPTION: This snippet demonstrates how to use the Facemesh component with MediaPipe face landmark data. It shows the structure of the face landmark result and how to pass the points to the Facemesh component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shapes/facemesh.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst faceLandmarkerResult = {\n    \"faceLandmarks\": [\n      [\n        { \"x\": 0.5760777592658997, \"y\": 0.8639070391654968, \"z\": -0.030997956171631813 },\n        { \"x\": 0.572094738483429, \"y\": 0.7886289358139038, \"z\": -0.07189624011516571 },\n        // ...\n      ],\n      // ...\n    ],\n    \"faceBlendshapes\": [\n      // ...\n    ],\n    \"facialTransformationMatrixes\": [\n      // ...\n    ]\n  },\n}\nconst points = faceLandmarkerResult.faceLandmarks[0]\n\n<Facemesh points={points} />\n```\n\n----------------------------------------\n\nTITLE: Loading Cube Textures with useCubeTexture Hook in React Three Fiber\nDESCRIPTION: A code example demonstrating how to load a cube texture using the useCubeTexture hook. The hook accepts an array of six texture paths (positive x, negative x, positive y, negative y, positive z, negative z) and an options object specifying the base path for the textures.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/cube-texture-use-cube-texture.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst envMap = useCubeTexture(['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'], { path: 'cube/' })\n```\n\n----------------------------------------\n\nTITLE: Installing @react-three/drei Package\nDESCRIPTION: Command to install the @react-three/drei package using npm. This package provides useful helpers for @react-three/fiber.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/getting-started/introduction.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-three/drei\n```\n\n----------------------------------------\n\nTITLE: Defining RenderTexture Props in TypeScript\nDESCRIPTION: TypeScript type definition for the props of the RenderTexture component. It extends ThreeElements['texture'] and includes options for dimensions, rendering properties, and event handling.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/render-texture.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Props = ThreeElements['texture'] & {\n  /** Optional width of the texture, defaults to viewport bounds */\n  width?: number\n  /** Optional height of the texture, defaults to viewport bounds */\n  height?: number\n  /** Optional fbo samples */\n  samples?: number\n  /** Optional stencil buffer, defaults to false */\n  stencilBuffer?: boolean\n  /** Optional depth buffer, defaults to true */\n  depthBuffer?: boolean\n  /** Optional generate mipmaps, defaults to false */\n  generateMipmaps?: boolean\n  /** Optional render priority, defaults to 0 */\n  renderPriority?: number\n  /** Optional event priority, defaults to 0 */\n  eventPriority?: number\n  /** Optional frame count, defaults to Infinity. If you set it to 1, it would only render a single frame, etc */\n  frames?: number\n  /** Optional event compute, defaults to undefined */\n  compute?: (event: any, state: any, previous: any) => false | undefined\n  /** Children will be rendered into a portal */\n  children: React.ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExampleApi Interface in TSX\nDESCRIPTION: Specifies the API methods available on the Example component. It includes increment (incr) and decrement (decr) functions, both optionally accepting a number parameter.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/example.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype ExampleApi = {\n  incr: (x?: number) => void\n  decr: (x?: number) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FaceLandmarker with Custom Paths in React\nDESCRIPTION: Example of overriding default FaceLandmarker configuration to use self-hosted dependencies. It demonstrates importing defaults and modifying them with custom URLs for both the WASM files and the model.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/face-landmarker.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FaceLandmarkerDefaults } from '@react-three/drei'\n\nconst visionBasePath = new URL(\"/tasks-vision-wasm\", import.meta.url).toString()\nconst modelAssetPath = new URL(\"/face_landmarker.task\", import.meta.url).toString()\n\nconst faceLandmarkerOptions = { ...FaceLandmarkerDefaults.options };\nfaceLandmarkerOptions.baseOptions.modelAssetPath = modelAssetPath;\n\n<FaceLandmarker basePath={visionBasePath} options={faceLandmarkerOptions}>\n```\n\n----------------------------------------\n\nTITLE: Defining AsciiRenderer Props Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the available properties for configuring the AsciiRenderer component. Includes options for render index, colors, character set, inversion, and resolution.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/ascii-renderer.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype AsciiRendererProps = {\n  /** Render index, default: 1 */\n  renderIndex?: number\n  /** CSS background color (can be \"transparent\"), default: black */\n  bgColor?: string\n  /** CSS character color, default: white */\n  fgColor?: string\n  /** Characters, default: ' .:-+*=%@#' */\n  characters?: string\n  /** Invert character, default: true */\n  invert?: boolean\n  /** Colorize output (very expensive!), default: false */\n  color?: boolean\n  /** Level of detail, default: 0.15 */\n  resolution?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useCubeCamera Hook in drei\nDESCRIPTION: TypeScript definition of the useCubeCamera hook showing its parameters. It creates a CubeCamera with configurable resolution, near/far planes, and allows for custom environment maps and fog settings.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/cube-camera-use-cube-camera.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function useCubeCamera({\n  /** Resolution of the FBO, 256 */\n  resolution?: number\n  /** Camera near, 0.1 */\n  near?: number\n  /** Camera far, 1000 */\n  far?: number\n  /** Custom environment map that is temporarily set as the scenes background */\n  envMap?: THREE.Texture\n  /** Custom fog that is temporarily set as the scenes fog */\n  fog?: Fog | FogExp2\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Trail Component with Customizable Properties in JSX\nDESCRIPTION: This code snippet demonstrates how to use the Trail component from drei, including all available props and their default values. It shows how to attach a trail to a mesh and optionally define a custom meshLineMaterial.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/trail.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Trail\n  width={0.2} // Width of the line\n  color={'hotpink'} // Color of the line\n  length={1} // Length of the line\n  decay={1} // How fast the line fades away\n  local={false} // Wether to use the target's world or local positions\n  stride={0} // Min distance between previous and current point\n  interval={1} // Number of frames to wait before next calculation\n  target={undefined} // Optional target. This object will produce the trail.\n  attenuation={(width) => width} // A function to define the width in each point along it.\n>\n  {/* If `target` is not defined, Trail will use the first `Object3D` child as the target. */}\n  <mesh>\n    <sphereGeometry />\n    <meshBasicMaterial />\n  </mesh>\n\n  {/* You can optionally define a custom meshLineMaterial to use. */}\n  {/* <meshLineMaterial color={\"red\"} /> */}\n</Trail>\n```\n\n----------------------------------------\n\nTITLE: Importing React Three Drei Components for React Native\nDESCRIPTION: Example of importing components from the React Native-compatible version of @react-three/drei. This shows how to use the library in a React Native environment.\nSOURCE: https://github.com/pmndrs/drei/blob/master/README.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PerspectiveCamera, PositionalAudio, ... } from '@react-three/drei/native'\n```\n\n----------------------------------------\n\nTITLE: Defining OnCenterCallbackProps Type for Center Component in TypeScript\nDESCRIPTION: This snippet defines the OnCenterCallbackProps type, which includes properties related to the centered object's dimensions, positioning, and parent elements.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/center.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype OnCenterCallbackProps = {\n  /** The next parent above <Center> */\n  parent: THREE.Object3D\n  /** The outmost container group of the <Center> component */\n  container: THREE.Object3D\n  width: number\n  height: number\n  depth: number\n  boundingBox: THREE.Box3\n  boundingSphere: THREE.Sphere\n  center: THREE.Vector3\n  verticalAlignment: number\n  horizontalAlignment: number\n  depthAlignment: number\n}\n```\n\n----------------------------------------\n\nTITLE: Transparent Image Implementation\nDESCRIPTION: Example showing how to create a transparent image by setting the transparent and opacity props.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/abstractions/image.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Image url=\"/file.jpg\" transparent opacity={0.5} />\n```\n\n----------------------------------------\n\nTITLE: Dynamic Light Source Control with References\nDESCRIPTION: Example showing how to use a reference to control the light source position dynamically, with continuous rendering enabled through the Infinity frames setting.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/caustics.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst lightSource = useRef()\n\n<Caustics frames={Infinity} resolution={256} lightSource={lightSource} >\n  <WineGlass />\n</Caustics>\n<object3d ref={lightSource} position={[2.5, 5, -2.5]} />\n```\n\n----------------------------------------\n\nTITLE: Defining ScreenVideoTextureProps Type in TypeScript\nDESCRIPTION: This snippet defines the type for ScreenVideoTextureProps, which extends VideoTextureProps but omits the 'src' property and adds an optional 'options' property of type DisplayMediaStreamOptions.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/screen-video-texture.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ScreenVideoTextureProps = Omit<VideoTextureProps, 'src'> & {\n  options?: DisplayMediaStreamOptions\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MeshTransmissionMaterial Usage\nDESCRIPTION: Simple example showing how to apply MeshTransmissionMaterial to a mesh geometry.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/mesh-transmission-material.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <mesh geometry={geometry} {...props}>\n    <MeshTransmissionMaterial />\n```\n\n----------------------------------------\n\nTITLE: Defining WebcamVideoTexture Props Type in TypeScript\nDESCRIPTION: TypeScript type definition for WebcamVideoTexture component props. Extends VideoTextureProps while omitting the 'src' property and adding optional MediaStreamConstraints.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/webcam-video-texture.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type WebcamVideoTextureProps = Omit<VideoTextureProps, 'src'> & {\n  constraints?: MediaStreamConstraints\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SpriteAnimatorProps Interface for React Three Fiber\nDESCRIPTION: TypeScript interface that defines all possible props for the SpriteAnimator component, including animation controls, texture configuration, event callbacks, and rendering options.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/sprite-animator.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SpriteAnimatorProps = {\n  /** The start frame of the animation */\n  startFrame?: number\n\n  /** The end frame of the animation */\n  endFrame?: number\n\n  /** The desired frames per second of the animation. If set to 0 or negative, animation will be static */\n  fps?: number\n\n  /** The animation names of the spritesheet (if the spritesheet -with JSON- contains more animation sequences) */\n  animationNames?: Array<string>\n\n  /** The frame identifier to use, must be one of animationNames */\n  frameName?: string\n\n  /** The URL of the texture JSON (if using JSON-Array or JSON-Hash) */\n  textureDataURL?: string\n\n  /** The URL of the texture image */\n  textureImageURL?: string\n\n  /** Whether or not the animation should loop */\n  loop?: boolean\n\n  /** The number of frames of the animation (required if using plain spritesheet without JSON) */\n  numberOfFrames?: number\n\n  /** Animation auto-start when all assets are loaded */\n  autoPlay?: boolean\n\n  /** Event callback when the animation starts or restarts */\n  onStart?: (data: AnimationEventData) => void\n\n  /** Event callback when the animation ends */\n  onEnd?: (data: AnimationEventData) => void\n\n  /** Event callback when the animation completes a loop cycle */\n  onLoopEnd?: (data: AnimationEventData) => void\n\n  /** Event callback fired on each frame change */\n  onFrame?: (data: AnimationEventData) => void\n\n  /** @deprecated Use pause={false} instead. Control when the animation runs */\n  play?: boolean\n\n  /** Control when the animation pauses */\n  pause?: boolean\n\n  /** Whether or not the Sprite should flip sides on the x-axis */\n  flipX?: boolean\n\n  /** Sets the alpha value to be used when running an alpha test\n   * @default 0.0\n   */\n  alphaTest?: number\n\n  /** Displays the texture on a Billboard component always facing the camera.\n   * @default false\n   */\n  asSprite?: boolean\n\n  /** Allows for manual update of the sprite animation e.g: via ScrollControls.\n   * Value should be between 0 and 1\n   */\n  offset?: number\n\n  /** Allows the sprite animation to start from the end towards the start */\n  playBackwards?: boolean\n\n  /** Allows the animation to be paused after it ended so it can be restarted on demand via autoPlay */\n  resetOnEnd?: boolean\n\n  /** Array of Vector3-like positions for creating multiple instances of the sprite */\n  instanceItems?: (THREE.Vector3 | [number, number, number])[]\n\n  /** The maximum number of instances to render (for buffer size calculation)\n   * @default 1\n   */\n  maxItems?: number\n\n  /** Pre-parsed sprite data, usually from useSpriteLoader */\n  spriteDataset?: {\n    spriteTexture: THREE.Texture\n    spriteData: SpriteData\n  }\n\n  /** Configuration options for the canvas context when loading textures */\n  canvasRenderingContext2DSettings?: CanvasRenderingContext2DSettings\n\n  /** Controls whether frame positions are rounded for precise pixel alignment.\n   * Enable this if you notice slight texture bleeding between frames.\n   * @default false\n   */\n  roundFramePosition?: boolean\n\n  /** Additional properties to be passed to both mesh and instance components.\n   * Only includes safe properties that work across both types.\n   * @example { frustumCulled: false, renderOrder: 1 }\n   * @see https://threejs.org/docs/#api/en/core/Object3D\n   */\n  meshProps?: CommonMeshProps\n} & GroupProps\n```\n\n----------------------------------------\n\nTITLE: Defining MotionState Interface for useMotion Hook in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of the MotionState object returned by the useMotion hook, which provides detailed control over the motion path.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/motion-path-controls.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype MotionState = {\n  /** The user-defined, mutable, current goal position along the curve, it may be >1 or <0 */\n  current: number\n  /** The combined curve */\n  path: THREE.CurvePath<THREE.Vector3>\n  /** The focus object */\n  focus: React.RefObject<THREE.Object3D<THREE.Event>> | [x: number, y: number, z: number] | undefined\n  /** The target object that is moved along the curve */\n  object: React.RefObject<THREE.Object3D<THREE.Event>>\n  /** The automated, 0-1 normalised and damped current goal position along curve */\n  offset: number\n  /** The current point on the curve */\n  point: THREE.Vector3\n  /** The current tangent on the curve */\n  tangent: THREE.Vector3\n  /** The next point on the curve */\n  next: THREE.Vector3\n}\n\nconst state: MotionState = useMotion()\n```\n\n----------------------------------------\n\nTITLE: VideoMaterial Component Implementation\nDESCRIPTION: Implementation of a VideoMaterial component that uses the useVideoTexture hook to apply a video texture to a basic material. This component is designed to be wrapped in a Suspense boundary.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/video-texture-use-video-texture.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction VideoMaterial({ src }) {\n  const texture = useVideoTexture(src)\n\n  return <meshBasicMaterial map={texture} toneMapped={false} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Props for Select Component\nDESCRIPTION: This snippet defines the TypeScript Props interface for the Select component. It includes options for multiple selection, box selection, custom styling, and callbacks for selection changes.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/select.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Props = {\n  /** Allow multi select, default: false */\n  multiple?: boolean\n  /** Allow box select, default: false */\n  box?: boolean\n  /** Custom CSS border: default: '1px solid #55aaff' */\n  border?: string\n  /** Curom CSS color, default: 'rgba(75, 160, 255, 0.1)' */\n  backgroundColor?: string\n  /** Callback for selection changes */\n  onChange?: (selected: THREE.Object3D[]) => void\n  /** Callback for selection changes once the pointer is up */\n  onChangePointerUp?: (selected: THREE.Object3D[]) => void\n  /** Optional filter for filtering the selection */\n  filter?: (selected: THREE.Object3D[]) => THREE.Object3D[]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Backdrop Component with Custom Properties in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the Backdrop component from drei. It creates a curved plane with customizable floor stretch and mesh resolution, and applies a standard material with a specific color.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/backdrop.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Backdrop\n  floor={0.25} // Stretches the floor segment, 0.25 by default\n  segments={20} // Mesh-resolution, 20 by default\n>\n  <meshStandardMaterial color=\"#353540\" />\n</Backdrop>\n```\n\n----------------------------------------\n\nTITLE: Basic Html Component Implementation in JSX\nDESCRIPTION: Basic implementation of the Html component showing all available props. The component allows projecting HTML content onto 3D objects, with options for positioning, scaling, z-index, occlusion, and transformation.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/html.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Html\n  as='div' // Wrapping element (default: 'div')\n  wrapperClass // The className of the wrapping element (default: undefined)\n  prepend // Project content behind the canvas (default: false)\n  center // Adds a -50%/-50% css transform (default: false) [ignored in transform mode]\n  fullscreen // Aligns to the upper-left corner, fills the screen (default:false) [ignored in transform mode]\n  distanceFactor={10} // If set (default: undefined), children will be scaled by this factor, and also by distance to a PerspectiveCamera / zoom by a OrthographicCamera.\n  zIndexRange={[100, 0]} // Z-order range (default=[16777271, 0])\n  portal={domnodeRef} // Reference to target container (default=undefined)\n  transform // If true, applies matrix3d transformations (default=false)\n  sprite // Renders as sprite, but only in transform mode (default=false)\n  calculatePosition={(el: Object3D, camera: Camera, size: { width: number; height: number }) => number[]} // Override default positioning function. (default=undefined) [ignored in transform mode]\n  occlude={[ref]} // Can be true or a Ref<Object3D>[], true occludes the entire scene (default: undefined)\n  onOcclude={(hidden) => null} // Callback when the visibility changes (default: undefined)\n  {...groupProps} // All THREE.Group props are valid\n  {...divProps} // All HTMLDivElement props are valid\n>\n  <h1>hello</h1>\n  <Grid cols={4}>world</Grid>\n</Html>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Center Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the Center component to position a mesh at the top-left corner.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/center.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Center top left>\n  <mesh />\n</Center>\n```\n\n----------------------------------------\n\nTITLE: Loading Single and Multiple Textures with useTexture\nDESCRIPTION: Demonstrates basic usage of useTexture hook for loading single and multiple textures. The hook wraps useLoader and TextureLoader to provide a simpler API for texture loading.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/texture-use-texture.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst texture = useTexture(url)\nconst [texture1, texture2] = useTexture([texture1, texture2])\n```\n\n----------------------------------------\n\nTITLE: Using Select Component with React\nDESCRIPTION: This example demonstrates how to use the Select component in a React application. It shows how to enable box and multiple selection, set a change handler, and apply a filter function. It also includes an example of using the useSelect hook in a child component.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/select.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Select box multiple onChange={console.log} filter={items => items}>\n  <Foo />\n  <Bar />\n</Select>\n\nfunction Foo() {\n  const selected = useSelect()\n```\n\n----------------------------------------\n\nTITLE: Implementing Sky Component in Three.js Scene with drei\nDESCRIPTION: Demonstrates how to add a sky background to a Three.js scene using the Sky component from drei. The component accepts parameters for distance, sun position, inclination, and azimuth to customize the sky's appearance.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/sky.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Sky distance={450000} sunPosition={[0, 1, 0]} inclination={0} azimuth={0.25} {...props} />\n```\n\n----------------------------------------\n\nTITLE: Using Manual Buffer with useFBO\nDESCRIPTION: Example showing how to manually manage a buffer texture using useFBO for shared rendering between multiple transmission materials.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/mesh-transmission-material.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst buffer = useFBO()\nuseFrame((state) => {\n  state.gl.setRenderTarget(buffer)\n  state.gl.render(state.scene, state.camera)\n  state.gl.setRenderTarget(null)\n})\nreturn (\n  <>\n    <mesh geometry={torus}>\n      <MeshTransmissionMaterial buffer={buffer.texture} />\n    </mesh>\n    <mesh geometry={sphere}>\n      <MeshTransmissionMaterial buffer={buffer.texture} />\n    </mesh>\n```\n\n----------------------------------------\n\nTITLE: Defining MeshRefractionMaterial Types in TypeScript\nDESCRIPTION: TypeScript interface definition for MeshRefractionMaterial props, including environment mapping, ray-cast bounces, refraction index, fresnel effects, and chromatic aberration settings.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/shaders/mesh-refraction-material.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype MeshRefractionMaterialProps = ThreeElements['shaderMaterial'] & {\n  /** Environment map */\n  envMap: THREE.CubeTexture | THREE.Texture\n  /** Number of ray-cast bounces, it can be expensive to have too many, 2 */\n  bounces?: number\n  /** Refraction index, 2.4 */\n  ior?: number\n  /** Fresnel (strip light), 0 */\n  fresnel?: number\n  /** RGB shift intensity, can be expensive, 0 */\n  aberrationStrength?: number\n  /** Color, white */\n  color?: ReactThreeFiber.Color\n  /** If this is on it uses fewer ray casts for the RGB shift sacrificing physical accuracy, true */\n  fastChroma?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Using HLS Video Streaming with useVideoTexture\nDESCRIPTION: Example of using useVideoTexture with HLS (HTTP Live Streaming) format by providing an .m3u8 manifest URL. Shows basic usage with default configuration.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/video-texture-use-video-texture.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst texture = useVideoTexture('https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8')\n```\n\n----------------------------------------\n\nTITLE: Defining the useFBO Hook Type Signature in TypeScript\nDESCRIPTION: Type definition for the useFBO hook that creates a THREE.WebGLRenderTarget. It defines the FBOSettings type which extends THREE.RenderTargetOptions and adds MSAA samples and depth options. The hook accepts width, height, and settings parameters.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/fbo-use-fbo.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FBOSettings = {\n  /** Defines the count of MSAA samples. Can only be used with WebGL 2. Default: 0 */\n  samples?: number\n  /** If set, the scene depth will be rendered into buffer.depthTexture. Default: false */\n  depth?: boolean\n} & THREE.RenderTargetOptions\n\nexport function useFBO(\n  /** Width in pixels, or settings (will render fullscreen by default) */\n  width?: number | FBOSettings,\n  /** Height in pixels */\n  height?: number,\n  /**Settings */\n  settings?: FBOSettings\n): THREE.WebGLRenderTarget {\n```\n\n----------------------------------------\n\nTITLE: Defining PivotControlsProps Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the props for the PivotControls component. It includes various options for customizing the control's behavior, appearance, and event handling.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/gizmos/pivot-controls.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PivotControlsProps = {\n  /** Enables/disables the control, true */\n  enabled?: boolean\n  /** Scale of the gizmo, 1 */\n  scale?: number\n  /** Width of the gizmo lines, this is a THREE.Line2 prop, 2.5 */\n  lineWidth?: number\n  /** If fixed is true is remains constant in size, scale is now in pixels, false */\n  fixed?: boolean\n  /** Pivot does not act as a group, it won't shift contents but can offset in position */\n  offset?: [number, number, number]\n  /** Starting rotation */\n  rotation?: [number, number, number]\n  /** Starting matrix */\n  matrix?: THREE.Matrix4\n  /** Anchor point, like BBAnchor, each axis can be between -1/0/+1 */\n  anchor?: [number, number, number]\n  /** If autoTransform is true, automatically apply the local transform on drag, true */\n  autoTransform?: boolean\n  /** Allows you to switch individual axes off */\n  activeAxes?: [boolean, boolean, boolean]\n  /** Allows you to disable translation via axes arrows */\n  disableAxes?: boolean\n  /** Allows you to disable translation via axes planes */\n  disableSliders?: boolean\n  /** Allows you to disable rotation */\n  disableRotations?: boolean\n  /** Allows you to disable scaling */\n  disableScaling?: boolean\n  /** RGB colors */\n  axisColors?: [string | number, string | number, string | number]\n  /** Color of the hovered item */\n  hoveredColor?: string | number\n  /** HTML value annotations, default: false */\n  annotations?: boolean\n  /** CSS Classname applied to the HTML annotations */\n  annotationsClass?: string\n  /** Drag start event */\n  onDragStart?: () => void\n  /** Drag event */\n  onDrag?: (l: THREE.Matrix4, deltaL: THREE.Matrix4, w: THREE.Matrix4, deltaW: THREE.Matrix4) => void\n  /** Drag end event */\n  onDragEnd?: () => void\n  /** Set this to false if you want the gizmo to be visible through faces */\n  depthTest?: boolean\n  opacity?: number\n  visible?: boolean\n  userData?: { [key: string]: any }\n  children?: React.ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Using WebcamVideoTexture with Ref\nDESCRIPTION: Example demonstrating how to access the WebcamVideoTexture using a ref to get the texture instance directly.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/webcam-video-texture.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst textureRef = useRef()\n<WebcamVideoTexture ref={textureRef} />\n```\n\n----------------------------------------\n\nTITLE: BBAnchor Component Basic Usage\nDESCRIPTION: Basic component structure showing props interface including anchor vector and group props support. The anchor prop accepts either a THREE.Vector3 or number array.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/bb-anchor.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BBAnchor\n  anchor // THREE.Vector3 or [number, number, number]\n  {...groupProps} // All THREE.Group props are valid\n>\n  {children}\n</BBAnchor>\n```\n\n----------------------------------------\n\nTITLE: Using FaceControls Component in React Three Fiber\nDESCRIPTION: Basic implementation of the FaceControls component that enables camera control based on detected face position.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/controls/face-controls.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<FaceControls />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Drei Project\nDESCRIPTION: Commands to enable corepack and install project dependencies using Yarn.\nSOURCE: https://github.com/pmndrs/drei/blob/master/README.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ corepack enable\n$ yarn install\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Visual Tests Locally for Drei\nDESCRIPTION: Commands to build the project and run visual tests using Playwright. Includes a command to update snapshots if needed.\nSOURCE: https://github.com/pmndrs/drei/blob/master/README.md#2025-04-11_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn build\n$ yarn test\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ PLAYWRIGHT_UPDATE_SNAPSHOTS=1 yarn test\n```\n\n----------------------------------------\n\nTITLE: Loading Matcap Texture by Index in React Three Fiber\nDESCRIPTION: Demonstrates how to load a matcap texture using an index number and size parameter. The hook returns both the texture and its URL. The texture can be directly used with meshMatcapMaterial.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/matcap-texture-use-matcap-texture.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [matcap, url] = useMatcapTexture(\n 0, // index of the matcap texture https://github.com/emmelleppi/matcaps/blob/master/matcap-list.json\n 1024 // size of the texture ( 64, 128, 256, 512, 1024 )\n)\n\nreturn (\n ...\n <meshMatcapMaterial matcap={matcap} />\n ...\n)\n```\n\n----------------------------------------\n\nTITLE: AccumulativeShadows Context Interface Definition\nDESCRIPTION: TypeScript interface defining the context API for AccumulativeShadows, including methods for mesh access, buffer reset, and light management.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/accumulative-shadows.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AccumulativeContext {\n  /** Returns the plane geometry onto which the shadow is cast */\n  getMesh: () => THREE.Mesh<THREE.PlaneGeometry, SoftShadowMaterialProps & THREE.ShaderMaterial>\n  /** Resets the buffers, starting from scratch */\n  reset: () => void\n  /** Updates the lightmap for a number of frames accumulartively */\n  update: (frames?: number) => void\n  /** Allows children to subscribe. AccumulativeShadows will call child.update() in its own update function */\n  setLights: React.Dispatch<React.SetStateAction<AccumulativeLightContext[]>>\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Link Structure in HTML/Markdown\nDESCRIPTION: HTML table structure containing categorized navigation links to various Drei components and utilities. The structure is organized into multiple columns with nested lists for different categories like cameras, controls, gizmos, etc.\nSOURCE: https://github.com/pmndrs/drei/blob/master/README.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <td valign=\"top\">\n      <ul>\n        <li><a href=\"#cameras\">Cameras</a></li>\n        <ul>\n          <li><a href=\"#perspectivecamera\">PerspectiveCamera</a></li>\n          <li><a href=\"#orthographiccamera\">OrthographicCamera</a></li>\n          <li><a href=\"#cubecamera\">CubeCamera</a></li>\n        </ul>\n        <!-- Additional categories and links -->\n      </ul>\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: MeshPortalMaterial with Edge Blur\nDESCRIPTION: Example showing how to implement edge blur effect on the portal with transparency enabled.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/portals/mesh-portal-material.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<MeshPortalMaterial transparent blur={0.5}>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Draco Binaries with useGLTF in JSX\nDESCRIPTION: Demonstrates how to use custom draco binaries for decompression with the useGLTF hook.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/gltf-use-gltf.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nuseGLTF(url, '/draco-gltf')\n```\n\n----------------------------------------\n\nTITLE: Defining Sparkles Shader Uniforms in JSON\nDESCRIPTION: This snippet defines the uniforms used in the Sparkles shader as a JSON object. It includes time and pixelRatio properties.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/staging/sparkles.mdx#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"time\": 0, \"pixelRatio\": 1 }\n```\n\n----------------------------------------\n\nTITLE: Basic FaceLandmarker Component Usage in React Three Fiber\nDESCRIPTION: Shows the minimal syntax for using the FaceLandmarker component within a React Three Fiber application. The component serves as a provider for MediaPipe's FaceLandmarker functionality.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/face-landmarker.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<FaceLandmarker>{/* ... */}</FaceLandmarker>\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch\nDESCRIPTION: Git command to create a new branch for pull request following the naming convention of pr-type/issue-number-branch-name.\nSOURCE: https://github.com/pmndrs/drei/blob/master/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b pr-type/issue-number-your-branch-name\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Development\nDESCRIPTION: Commands to set up the development environment by enabling corepack and installing dependencies using yarn.\nSOURCE: https://github.com/pmndrs/drei/blob/master/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable && yarn install\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Docker for Drei\nDESCRIPTION: Docker command to run Playwright tests in a consistent environment, including building the project and running tests. Also includes a command for updating snapshots.\nSOURCE: https://github.com/pmndrs/drei/blob/master/README.md#2025-04-11_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run --init --rm \\\n    -v $(pwd):/app -w /app \\\n    ghcr.io/pmndrs/playwright:drei \\\n      sh -c \"corepack enable && yarn install && yarn build && yarn test\"\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run --init --rm \\\n    -v $(pwd):/app -w /app \\\n    -e PLAYWRIGHT_UPDATE_SNAPSHOTS=1 \\\n    ghcr.io/pmndrs/playwright:drei \\\n      sh -c \"corepack enable && yarn install && yarn build && yarn test\"\n```\n\n----------------------------------------\n\nTITLE: Selective Progress State Access with useProgress\nDESCRIPTION: Demonstrates how to selectively access specific progress states using zustand-style selectors to optimize rendering performance. This example shows how to track only error states.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/loaders/progress-use-progress.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst errors = useProgress((state) => state.errors)\n```\n\n----------------------------------------\n\nTITLE: Accessing FaceLandmarker Instance via Ref in React\nDESCRIPTION: Demonstrates how to access the FaceLandmarker instance using a React ref. This allows direct interaction with the underlying MediaPipe FaceLandmarker object.\nSOURCE: https://github.com/pmndrs/drei/blob/master/docs/misc/face-landmarker.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst faceLandmarkerRef = useRef<ComponentRef<typeof FaceLandmarker>>(null)\n\n<FaceLandmarker ref={faceLandmarkerRef}>\n  {/* ... */}\n</FaceLandmarker>\n```"
  }
]