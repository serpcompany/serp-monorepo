[
  {
    "owner": "rrousselgit",
    "repo": "freezed",
    "content": "TITLE: Integrating Freezed with json_serializable in Dart\nDESCRIPTION: This code demonstrates how to make a Freezed class compatible with json_serializable. It shows the necessary imports, part declarations, and the addition of a fromJson factory constructor.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'model.freezed.dart';\npart 'model.g.dart';\n\n@freezed\nsealed class Model with _$Model {\n  factory Model.first(String a) = First;\n  factory Model.second(int b, bool c) = Second;\n\n  factory Model.fromJson(Map<String, dynamic> json) => _$ModelFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Freezed Person Model\nDESCRIPTION: Complete example of creating a Person class using Freezed with JSON serialization support\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'main.freezed.dart';\npart 'main.g.dart';\n\n@freezed\nabstract class Person with _$Person {\n  const factory Person({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _Person;\n\n  factory Person.fromJson(Map<String, Object?> json) => _$PersonFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Freezed Data Class Definition in Dart\nDESCRIPTION: Example showing how to define a simple Person class using Freezed with required fields for firstName, lastName and age, plus JSON serialization support.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\n// required: associates our `main.dart` with the code generated by Freezed\npart 'main.freezed.dart';\n// optional: Since our Person class is serializable, we must add this line.\n// But if Person was not serializable, we could skip it.\npart 'main.g.dart';\n\n@freezed\nabstract class Person with _$Person {\n  const factory Person({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _Person;\n\n  factory Person.fromJson(Map<String, Object?> json) => _$PersonFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Result Union Type with Freezed\nDESCRIPTION: Creates a generic Result union type with data and error variants. This pattern is commonly used for handling operation outcomes in a type-safe manner.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Result<T> with _$Result {\n  factory Result.data(T data) = ResultData;\n  factory Result.error(Object error) = ResultError;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Freezed for Flutter Projects\nDESCRIPTION: Commands to add Freezed and its dependencies to a Flutter project using pub.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter pub add freezed_annotation\nflutter pub add dev:build_runner\nflutter pub add dev:freezed\n# If you want to use freezed to generate fromJson/toJson:\nflutter pub add json_annotation\nflutter pub add dev:json_serializable\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Serialization Setup for Freezed Classes in Dart\nDESCRIPTION: Shows how to set up a Freezed class for JSON serialization by adding part statements and a fromJson factory method that integrates with json_serializable.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'model.freezed.dart';\npart 'model.g.dart';\n\n@freezed\nsealed class Model with _$Model {\n  factory Model.first(String a) = First;\n  factory Model.second(int b, bool c) = Second;\n\n  factory Model.fromJson(Map<String, dynamic> json) => _$ModelFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Using copyWith Method with Freezed in Dart\nDESCRIPTION: Explains how the automatically generated copyWith method works with Freezed models, allowing for easy cloning of objects with modified values.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  factory Person(String name, int? age) = _Person;\n}\n\nvoid main() {\n  var person = Person('Remi', 24);\n\n  // `age` not passed, its value is preserved\n  print(person.copyWith(name: 'Dash')); // Person(name: Dash, age: 24)\n  // `age` is set to `null`\n  print(person.copyWith(age: null)); // Person(name: Remi, age: null)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Freezed Class with Mixed Mode in Dart\nDESCRIPTION: Demonstrates the new mixed mode syntax for defining Freezed classes in version 3.0. Shows both the usual factory constructor syntax and the new simple class syntax.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Usual with _$Usual {\n  factory Usual({int a}) = _Usual;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nclass Usual with _$Usual {\n  Usual({this.a});\n  final int a;\n}\n```\n\n----------------------------------------\n\nTITLE: Various Valid Deep Copy Syntaxes in Freezed Dart\nDESCRIPTION: Multiple valid ways to use copyWith and deep copy syntax with Freezed models, demonstrating different approaches to modify properties at various levels.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nCompany company;\n\ncompany = company.copyWith(name: 'Google', director: Director(...));\ncompany = company.copyWith.director(name: 'Larry', assistant: Assistant(...));\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to Freezed Models - Dart\nDESCRIPTION: Demonstrates how to add custom methods to Freezed models using a private constructor. Shows the correct way to implement methods by adding an empty private constructor.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  const Person._();\n\n  const factory Person(String name, {int? age}) = _Person;\n\n  void method() {\n    print('hello world');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Freezed Class Implementation\nDESCRIPTION: Example showing how to implement a basic Freezed class with required properties, JSON serialization, and automatic generation of utility methods.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/vi_VN/README.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:flutter/foundation.dart';\n\npart 'main.freezed.dart';\npart 'main.g.dart';\n\n@freezed\nclass Person with _$Person {\n  const factory Person({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _Person;\n\n  factory Person.fromJson(Map<String, Object?> json)\n      => _$PersonFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Union Types with Freezed in Dart\nDESCRIPTION: Example showing how to create union types (sealed classes) with Freezed to represent multiple mutually exclusive states.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Union with _$Union {\n  const factory Union.data(int value) = Data;\n  const factory Union.loading() = Loading;\n  const factory Union.error([String? message]) = Error;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Director's Name Using Freezed's Deep Copy in Dart\nDESCRIPTION: This code shows how to use Freezed's deep copy to update the director's name within a Company object. It demonstrates the flexibility of the deep copy syntax.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nCompany company;\nCompany newCompany = company.copyWith.director(name: 'John Doe');\n```\n\n----------------------------------------\n\nTITLE: Defining a Freezed Model Class\nDESCRIPTION: Example of defining a Freezed model class named Person with properties and JSON serialization.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// This file is \"main.dart\"\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:flutter/foundation.dart';\n\n// Required: Associates `main.dart` with the Freezed generated code\npart 'main.freezed.dart';\n// Optional: Since Person is serializable, we must add this line.\n// But if Person was not serializable, we could skip it.\npart 'main.g.dart';\n\n@freezed\nabstract class Person with _$Person {\n  const factory Person({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _Person;\n\n  factory Person.fromJson(Map<String, Object?> json)\n      => _$PersonFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Freezed Class Definition in Dart\nDESCRIPTION: A simple Freezed class definition for a Person model with name, age, and gender properties that will be used to demonstrate decorations.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  const factory Person({\n    String? name,\n    int? age,\n    Gender? gender,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Deep Copy with Freezed\nDESCRIPTION: Examples of using Freezed's deep copy functionality for nested objects.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Company with _$Company {\n  factory Company({String? name, required Director director}) = _Company;\n}\n\n@freezed\nabstract class Director with _$Director {\n  factory Director({String? name, Assistant? assistant}) = _Director;\n}\n\n@freezed\nabstract class Assistant with _$Assistant {\n  factory Assistant({String? name, int? age}) = _Assistant;\n}\n\n// Usage\nCompany company;\nCompany newCompany = company.copyWith.director.assistant(name: 'John Smith');\n\n// Alternative syntax\nCompany newCompany2 = company.copyWith.director(name: 'John Doe');\n\n// Null-aware usage\nCompany? newCompany3 = company.copyWith.director.assistant?.call(name: 'John');\n```\n\n----------------------------------------\n\nTITLE: Classic Class Implementation - Dart\nDESCRIPTION: Demonstrates how to implement a classic Dart class with Freezed, including JSON serialization support.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'main.freezed.dart';\npart 'main.g.dart';\n\n@freezed\n@JsonSerializable()\nclass Person with _$Person {\n  const Person({\n    required this.firstName,\n    required this.lastName,\n    required this.age,\n  });\n\n  @override\n  final String firstName;\n  @override\n  final String lastName;\n  @override\n  final int age;\n\n  factory Person.fromJson(Map<String, Object?> json)\n      => _$PersonFromJson(json);\n\n  Map<String, Object?> toJson() => _$PersonToJson(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Freezed Models in Dart\nDESCRIPTION: Example of nested Freezed class definitions that demonstrate how complex models can be structured with relationships between Company, Director, and Assistant classes.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Company with _$Company {\n  const factory Company({String? name, required Director director}) = _Company;\n}\n\n@freezed\nabstract class Director with _$Director {\n  const factory Director({String? name, Assistant? assistant}) = _Director;\n}\n\n@freezed\nabstract class Assistant with _$Assistant {\n  const factory Assistant({String? name, int? age}) = _Assistant;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Union Type in Dart with Freezed\nDESCRIPTION: Demonstrates how to create a sealed class with multiple factory constructors representing a union type. This example defines an Example class with two variants: Person and City.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Example with _$Example {\n  const factory Example.person(String name, int age) = Person;\n  const factory Example.city(String name, int population) = City;\n}\n```\n\n----------------------------------------\n\nTITLE: Using copyWith with Freezed Classes\nDESCRIPTION: Demonstration of how to use the copyWith method generated by Freezed to create modified copies of objects.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  factory Person(String name, int? age) = _Person;\n}\n\nvoid main() {\n  var person = Person('Remi', 24);\n\n  // `age` is not passed, so its value is preserved\n  print(person.copyWith(name: 'Dash')); // Person(name: Dash, age: 24)\n  // `age` is explicitly set to `null`\n  print(person.copyWith(age: null)); // Person(name: Remi, age: null)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Union Type with Freezed in Dart\nDESCRIPTION: Demonstrates how to create a sealed class representing a union type with two variants (Person and City) using the Freezed package.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Example with _$Example {\n  const factory Example.person(String name, int age) = Person;\n  const factory Example.city(String name, int population) = City;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Freezed Import Structure\nDESCRIPTION: Basic file structure showing required imports and part directive for using Freezed\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'my_file.freezed.dart';\n\n```\n\n----------------------------------------\n\nTITLE: Defining Freezed Classes for Company, Director, and Assistant in Dart\nDESCRIPTION: This snippet demonstrates how to define three interconnected Freezed classes: Company, Director, and Assistant. It showcases the basic structure of Freezed classes with various property types.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Company with _$Company {\n  const factory Company({String? name, required Director director}) = _Company;\n}\n\n@freezed\nabstract class Director with _$Director {\n  const factory Director({String? name, Assistant? assistant}) = _Director;\n}\n\n@freezed\nabstract class Assistant with _$Assistant {\n  const factory Assistant({String? name, int? age}) = _Assistant;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating fromJson Method for JSON Serialization with Freezed\nDESCRIPTION: Example showing the template for creating a fromJson factory method to support JSON serialization with json_serializable in a Freezed class.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nfactory Demo.fromJson(Map<String, dynamic> json) => _$DemoFromJson(json);\n```\n\n----------------------------------------\n\nTITLE: Various Deep Copy Syntaxes with Freezed in Dart\nDESCRIPTION: This snippet showcases different ways to use Freezed's deep copy functionality, including updating top-level properties and nested objects within a Company instance.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nCompany company;\n\ncompany = company.copyWith(name: 'Google', director: Director(...));\ncompany = company.copyWith.director(name: 'Larry', assistant: Assistant(...));\n```\n\n----------------------------------------\n\nTITLE: Mutable Class Definition with Unfreezed - Dart\nDESCRIPTION: Shows how to create mutable classes using @unfreezed annotation instead of @freezed, allowing for property mutation.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@unfreezed\nabstract class Person with _$Person {\n  factory Person({\n    required String firstName,\n    required String lastName,\n    required final int age,\n  }) = _Person;\n\n  factory Person.fromJson(Map<String, Object?> json) => _$PersonFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the map Method with Freezed in Dart\nDESCRIPTION: Example showing how to use the map method on a Freezed class. Unlike when, the map method passes the entire object instance to each case function without destructuring it.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvar model = Model.first('42');\n\nprint(\n  model.map(\n    first: (First value) => 'first ${value.a}',\n    second: (Second value) => 'second ${value.b} ${value.c}'\n  ),\n); // first 42\n```\n\n----------------------------------------\n\nTITLE: CopyWith Usage Example - Dart\nDESCRIPTION: Demonstrates how to use the automatically generated copyWith method to clone and modify Freezed objects.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  factory Person(String name, int? age) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mutable Classes with Freezed in Dart\nDESCRIPTION: Shows how to use the @unfreezed annotation to create a mutable class with Freezed, allowing some properties to be mutable while others remain immutable.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@unfreezed\nabstract class Person with _$Person {\n  factory Person({\n    required String firstName,\n    required String lastName,\n    required final int age,\n  }) = _Person;\n\n  factory Person.fromJson(Map<String, Object?> json) => _$PersonFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Freezed model class with JSON serialization\nDESCRIPTION: Example of a typical Freezed class definition with JSON serialization support, including required imports and part declarations.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ja_JP/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// This file is \"main.dart\"\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:flutter/foundation.dart';\n\n// Required: Associates this file with the generated code\npart 'main.freezed.dart';\n// Optional: Since Person is serializable, this line is needed.\n// If Person was not serializable, we could skip it.\npart 'main.g.dart';\n\n@freezed\nabstract class Person with _$Person {\n  const factory Person({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _Person;\n\n  factory Person.fromJson(Map<String, Object?> json)\n      => _$PersonFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the when Method with Freezed in Dart\nDESCRIPTION: Example demonstrating how to use the when method on a Freezed class. The when method destructures the object and provides direct access to its properties in each case function.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar model = Model.first('42');\n\nprint(\n  model.when(\n    first: (String a) => 'first $a',\n    second: (int b, bool c) => 'second $b $c'\n  ),\n); // first 42\n```\n\n----------------------------------------\n\nTITLE: Using Freezed's Deep Copy for Nested Updates in Dart\nDESCRIPTION: This snippet demonstrates Freezed's deep copy functionality, which provides a more concise way to update nested properties. It updates the assistant's name within a Company object.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nCompany company;\n\nCompany newCompany = company.copyWith.director.assistant(name: 'John Smith');\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Serialization to a Freezed Class in Dart\nDESCRIPTION: The modified version of the Model class with the necessary additions to support JSON serialization using json_serializable.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'model.freezed.dart';\npart 'model.g.dart';\n\n@freezed\nsealed class Model with _$Model {\n  factory Model.first(String a) = First;\n  factory Model.second(int b, bool c) = Second;\n\n  factory Model.fromJson(Map<String, dynamic> json) => _$ModelFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Constructors with Freezed in Dart\nDESCRIPTION: Demonstrates how to create a class with multiple constructors using Freezed annotations for different response types.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class MyResponse with _$MyResponse {\n  const factory MyResponse(String a) = MyResponseData;\n  const factory MyResponse.special(String a, int b) = MyResponseSpecial;\n  const factory MyResponse.error(String message) = MyResponseError;\n\n  factory MyResponse.fromJson(Map<String, dynamic> json) => _$MyResponseFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Using copyWith in Freezed Classes\nDESCRIPTION: Example demonstrating how to use the copyWith method generated by Freezed for cloning objects with modified values.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  factory Person(String name, int? age) = _Person;\n}\n\nvoid main() {\n  var person = Person('Remi', 24);\n\n  // `age` wasn't passed, its value is preserved\n  print(person.copyWith(name: 'Dash')); // Person(name: Dash, age: 24)\n  // `age` is set to `null`\n  print(person.copyWith(age: null)); // Person(name: Remi, age: null)\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Switch in Dart for Freezed Unions\nDESCRIPTION: Shows how to use Dart's pattern matching with switch statements to safely access properties of a union type. This example extracts specific fields from different variants of the Example class.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nswitch (example) {\n  Person(:final name) => print('Person $name'),\n  City(:final population) => print('City ($population)'),\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Value for Union Types in Dart\nDESCRIPTION: Shows how to customize the JSON value of a union type in Freezed classes. This feature allows for more flexible JSON serialization of union types.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed_annotation/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Example usage not provided in the changelog\n```\n\n----------------------------------------\n\nTITLE: Default Values in Freezed Models - Dart\nDESCRIPTION: Demonstrates how to specify default values for properties using the @Default annotation in Freezed classes.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Example with _$Example {\n  const factory Example([@Default(42) int value]) = _Example;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Assertions to Freezed Classes in Dart\nDESCRIPTION: Shows how to add assertions to Freezed classes using the @Assert decorator, working around Dart's limitation of not allowing assert statements in factory constructors.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass Person with _$Person {\n  @Assert('name.isNotEmpty', 'name cannot be empty')\n  @Assert('age >= 0')\n  factory Person({\n    String? name,\n    int? age,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Freezed Class Without JSON Serialization in Dart\nDESCRIPTION: A basic sealed Freezed class definition with multiple factory constructors but without JSON serialization support.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'model.freezed.dart';\n\n@freezed\nsealed class Model with _$Model {\n  factory Model.first(String a) = First;\n  factory Model.second(int b, bool c) = Second;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces for Union Types in Freezed in Dart\nDESCRIPTION: Demonstrates how to make a specific variant of a union type implement an interface using the @Implements decorator.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nabstract class GeographicArea {\n  int get population;\n  String get name;\n}\n\n@freezed\nsealed class Example with _$Example {\n  const factory Example.person(String name, int age) = Person;\n\n  @Implements<GeographicArea>()\n  const factory Example.city(String name, int population) = City;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Assert Decorator with Freezed Classes in Dart\nDESCRIPTION: Demonstrates how to use the @Assert decorator to generate assert statements in Freezed classes. This allows for validation of class properties at runtime.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  @Assert('name.trim().isNotEmpty', 'name cannot be empty')\n  @Assert('age >= 0')\n  factory Person({\n    String name,\n    int age,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Freezed Class with Multiple Constructors for JSON Serialization in Dart\nDESCRIPTION: Example of creating a class with multiple constructors that can be serialized from JSON, where Freezed will use the runtimeType property to determine which constructor to use.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class MyResponse with _$MyResponse {\n  const factory MyResponse(String a) = MyResponseData;\n  const factory MyResponse.special(String a, int b) = MyResponseSpecial;\n  const factory MyResponse.error(String message) = MyResponseError;\n\n  factory MyResponse.fromJson(Map<String, dynamic> json) => _$MyResponseFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces for Specific Constructors in Dart\nDESCRIPTION: Shows how to use @With and @Implements decorators to make only specific constructors of a union type implement an interface in Freezed classes.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed_annotation/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Example with _$Example {\n  const factory Example.person(String name, int age) = Person;\n\n  @Implements(GeographicArea)\n  const factory Example.city(String name, int population) = City;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Values in Freezed Models in Dart\nDESCRIPTION: Demonstrates how to use the @Default annotation to specify default values for properties in Freezed models.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Example with _$Example {\n  const factory Example([@Default(42) int value]) = _Example;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Freezed Classes in Dart\nDESCRIPTION: Demonstrates using the @Default annotation to specify default values for properties in Freezed classes, which also automatically adds JsonKey annotations for serialization.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass Example with _$Example {\n  const factory Example([@Default(42) int value]) = _Example;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Classes with Freezed - Dart\nDESCRIPTION: Demonstrates how to extend another class using Freezed by implementing a private constructor with super calls.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Subclass {\n  const Subclass.name(this.value);\n\n  final int value;\n}\n\n@freezed\nabstract class MyFreezedClass extends Subclass with _$MyFreezedClass {\n  const MyFreezedClass._(super.value) : super.name();\n\n  const factory MyFreezedClass(int value, /* other fields */) = _MyFreezedClass;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Union Key and Value in Freezed Classes\nDESCRIPTION: Example showing how to customize the union key and value used in JSON serialization with @Freezed and @FreezedUnionValue decorators.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed(unionKey: 'type', unionValueCase: FreezedUnionCase.pascal)\nsealed class MyResponse with _$MyResponse {\n  const factory MyResponse(String a) = MyResponseData;\n\n  @FreezedUnionValue('SpecialCase')\n  const factory MyResponse.special(String a, int b) = MyResponseSpecial;\n\n  const factory MyResponse.error(String message) = MyResponseError;\n\n  factory MyResponse.fromJson(Map<String, dynamic> json) =>\n      _$MyResponseFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Converter for Freezed Union Types in Dart\nDESCRIPTION: Demonstrates creating a custom JsonConverter to handle deserialization of union types when you don't control the JSON format and can't rely on the standard runtimeType field.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nclass MyResponseConverter implements JsonConverter<MyResponse, Map<String, dynamic>> {\n  const MyResponseConverter();\n\n  @override\n  MyResponse fromJson(Map<String, dynamic> json) {\n    // type data was already set (e.g. because we serialized it ourselves)\n    if (json['runtimeType'] != null) {\n      return MyResponse.fromJson(json);\n    }\n    // 你需要找到一些条件去知道这是什么类型。例如：检查 JSON 中的某些字段\n    if (isTypeData) {\n      return MyResponseData.fromJson(json);\n    } else if (isTypeSpecial) {\n      return MyResponseSpecial.fromJson(json);\n    } else if (isTypeError) {\n      return MyResponseError.fromJson(json);\n    } else {\n      throw Exception('Could not determine the constructor for mapping from JSON');\n    }\n }\n\n  @override\n  Map<String, dynamic> toJson(MyResponse data) => data.toJson();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Freezed Class with Custom Constructor in Dart\nDESCRIPTION: Illustrates how to define a Freezed class with a custom constructor to enable methods and properties.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nclass Example with _$Example {\n  // Necessary for helloWorld() to work\n  Example._();\n  factory Example(String name) = _Example\n\n  void helloWorld() => print('Hello $name');\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Freezed Union Types with Multiple Constructors\nDESCRIPTION: Shows the expected JSON format for serializing union types in Freezed, where the runtimeType field determines which constructor to use during deserialization.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"runtimeType\": \"default\",\n    \"a\": \"This JSON object will use constructor MyResponse()\"\n  },\n  {\n    \"runtimeType\": \"special\",\n    \"a\": \"This JSON object will use constructor MyResponse.special()\",\n    \"b\": 42\n  },\n  {\n    \"runtimeType\": \"error\",\n    \"message\": \"This JSON object will use constructor MyResponse.error()\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutable Freezed Class\nDESCRIPTION: Example of defining a mutable Freezed class using the @unfreezed annotation.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@unfreezed\nabstract class Person with _$Person {\n  factory Person({\n    required String firstName,\n    required String lastName,\n    required final int age,\n  }) = _Person;\n\n  factory Person.fromJson(Map<String, Object?> json)\n      => _$PersonFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Using JsonKey Annotation with Freezed\nDESCRIPTION: Example showing how to use the @JsonKey annotation with Freezed constructor parameters.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Example with _$Example {\n  factory Example(@JsonKey(name: 'my_property') String myProperty) = _Example;\n\n  factory Example.fromJson(Map<String, dynamic> json) => _$ExampleFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deep Copy to Update Director Properties in Dart\nDESCRIPTION: Example of using Freezed's deep copy syntax to update a property at the director level instead of the deeper assistant level.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nCompany company;\nCompany newCompany = company.copyWith.director(name: 'John Doe');\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Freezed Classes with Multiple Constructors\nDESCRIPTION: The JSON structure that Freezed expects when deserializing classes with multiple constructors, using the runtimeType property to determine which constructor to use.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"runtimeType\": \"default\",\n    \"a\": \"This JSON object will use constructor MyResponse()\"\n  },\n  {\n    \"runtimeType\": \"special\",\n    \"a\": \"This JSON object will use constructor MyResponse.special()\",\n    \"b\": 42\n  },\n  {\n    \"runtimeType\": \"error\",\n    \"message\": \"This JSON object will use constructor MyResponse.error()\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Properties Across Multiple Constructors in Freezed\nDESCRIPTION: Example demonstrating how properties common to all constructors in a Freezed class can be accessed directly, while constructor-specific properties cannot.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Example with _$Example {\n  const factory Example.person(String name, int age) = Person;\n  const factory Example.city(String name, int population) = City;\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with If-Case in Dart for Freezed Unions\nDESCRIPTION: Demonstrates using if-case statements as an alternative to switch for pattern matching with Freezed union types. This approach allows conditional extraction of properties from union variants.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\nif (example case Person(:final name)) {\n  print('Person $name');\n} else if (example case City(:final population)) {\n  print('City ($population)');\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Implementation of a Union Case in Freezed\nDESCRIPTION: Shows how to manually implement a specific union variant by defining the class outside of the Freezed annotation. This provides fine-grained control over specific variants.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Result<T> with _$Result {\n  factory Result.data(T data) = ResultData;\n  factory Result.error(Object error) = ResultError;\n}\n\nclass ResultData<T> implements Result<T> {\n  // TODO: implement Result<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces with Freezed Union Types\nDESCRIPTION: Shows how to make a specific union variant implement an interface using the @Implements decorator. In this example, the City variant implements the GeographicArea interface.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\nabstract class GeographicArea {\n  int get population;\n  String get name;\n}\n\n@freezed\nsealed class Example with _$Example {\n  const factory Example.person(String name, int age) = Person;\n\n  @Implements<GeographicArea>()\n  const factory Example.city(String name, int population) = City;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mixins and Interfaces with Generic Types in Freezed\nDESCRIPTION: Demonstrates how to implement and mix in generic interfaces using @Implements.fromString and @With.fromString for complex cases involving generic type parameters.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_40\n\nLANGUAGE: dart\nCODE:\n```\nabstract class GeographicArea {}\nabstract class House {}\nabstract class Shop {}\nabstract class AdministrativeArea<T> {}\n\n@freezed\nsealed class Example<T> with _$Example<T> {\n  const factory Example.person(String name, int age) = Person<T>;\n\n  @With.fromString('AdministrativeArea<T>')\n  const factory Example.street(String name) = Street<T>;\n\n  @With<House>()\n  @Implements<Shop>()\n  @Implements<GeographicArea>()\n  @Implements.fromString('AdministrativeArea<T>')\n  const factory Example.city(String name, int population) = City<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Assertions to Freezed Classes in Dart\nDESCRIPTION: Demonstrates how to use the @Assert decorator to generate assert statements in Freezed classes. This allows for runtime validation of class properties.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed_annotation/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nabstract class Person with _$Person {\n  @Assert('name.trim().isNotEmpty', 'name cannot be empty')\n  @Assert('age >= 0')\n  factory Person({\n    String name,\n    int age,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to Freezed Models in Dart\nDESCRIPTION: Demonstrates how to add custom methods to a Freezed model by using a private empty constructor. This allows the generated code to extend the class instead of implementing it.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  // Added constructor. Must not have any parameter\n  const Person._();\n\n  const factory Person(String name, {int? age}) = _Person;\n\n  void method() {\n    print('hello world');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Freezed Options with build.yaml\nDESCRIPTION: Shows how to customize Freezed behavior for all models in a project by configuring options in the build.yaml file.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      freezed:\n        options:\n          # Tells Freezed to format .freezed.dart files.\n          # This can significantly slow down code-generation.\n          # Disabling formatting will only work when opting into Dart 3.7 as a minimum\n          # in your project SDK constraints.\n          format: true\n          # Disable the generation of copyWith/== for the entire project\n          copy_with: false\n          equal: false\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Comments to Freezed Properties in Dart\nDESCRIPTION: Example of how to add documentation to a specific property in a Freezed class, which will be included in the generated code.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  const factory Person({\n    /// The name of the user.\n    ///\n    /// Must not be null\n    String? name,\n    int? age,\n    Gender? gender,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Non-constant Default Values in Freezed - Dart\nDESCRIPTION: Shows how to implement non-constant default values using a private constructor in Freezed classes, particularly useful for DateTime fields.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Response<T> with _$Response<T> {\n  Response._({DateTime? time}) : time = time ?? DateTime.now();\n  factory Response.data(T value, {DateTime? time}) = ResponseData;\n  factory Response.error(Object error) = ResponseError;\n\n  @override\n  final DateTime time;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces for Freezed Union Types in Dart\nDESCRIPTION: Shows how to use the @Implements decorator to make a specific union case implement an interface in a Freezed class.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_39\n\nLANGUAGE: dart\nCODE:\n```\nabstract class GeographicArea {\n  int get population;\n  String get name;\n}\n\n@freezed\nsealed class Example with _$Example {\n  const factory Example.person(String name, int age) = Person;\n\n  @Implements<GeographicArea>()\n  const factory Example.city(String name, int population) = City;\n}\n```\n\n----------------------------------------\n\nTITLE: Project-wide Freezed Configuration in build.yaml\nDESCRIPTION: Demonstrates how to configure Freezed options for the entire project using build.yaml. This example shows how to disable copyWith and equality generation globally.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      freezed:\n        options:\n          # Tells Freezed to format .freezed.dart files.\n          # This can significantly slow down code-generation.\n          # Disabling formatting will only work when opting into Dart 3.7 as a minimum\n          # in your project SDK constraints.\n          format: true\n          # Disable the generation of copyWith/== for the entire project\n          copy_with: false\n          equal: false\n```\n\n----------------------------------------\n\nTITLE: Documenting Properties in Freezed Classes in Dart\nDESCRIPTION: Example showing how to add documentation to properties in Freezed classes by documenting the constructor parameters. The documentation comments will be transferred to the generated properties.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Example with _$Example {\n  const factory Example(\n    /// Some documentation\n    String parameter,\n  ) = Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting Union Cases in Freezed Dart Classes\nDESCRIPTION: Demonstrates how to eject a union case by pointing it to a custom class, allowing fine-grained control over model parts.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Result<T> with _$Result {\n  Result._();\n  // Data does not exist, so Freezed will generate it as usual\n  factory Result.data(T data) = ResultData;\n  // We wrote a ResultError class in the same library, so Freezed won't do anything\n  factory Result.error(Object error) = ResultError;\n}\n\n// We manually wrote `ResultError`\nclass ResultError<T> extends Result<T> {\n  ResultError(this.error): super._();\n  final Object error;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Wide Freezed Options with build.yaml\nDESCRIPTION: Example YAML configuration for customizing Freezed behavior across an entire project using build.yaml file. This allows setting global options like disabling copyWith and equality methods for all Freezed classes.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      freezed:\n        options:\n          # 전체 프로젝트에 대해 copyWith/== 생성 비활성화\n          copy_with: false\n          equal: false\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Multiple Constructors\nDESCRIPTION: Shows the JSON format used to deserialize different constructor types using runtimeType.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"runtimeType\": \"default\",\n    \"a\": \"This JSON object will use constructor MyResponse()\"\n  },\n  {\n    \"runtimeType\": \"special\",\n    \"a\": \"This JSON object will use constructor MyResponse.special()\",\n    \"b\": 42\n  },\n  {\n    \"runtimeType\": \"error\",\n    \"message\": \"This JSON object will use constructor MyResponse.error()\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Freezed Classes with Mixed Mode and Ejected Union Cases in Dart\nDESCRIPTION: Shows how to combine mixed mode syntax with ejected union cases, allowing custom implementation of specific cases.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Using freezed with a simple class:\n@freezed\nclass ResultError<T> extends Result<T> {\n  ResultError(this.error): super._();\n  final Object error;\n}\n\n// Or using a factory:\n@freezed\nclass ResultError<T> extends Result<T> {\n  ResultError._(): super._();\n  factory ResultError(Object error) = _ResultError;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Interfaces in Freezed Union Types in Dart\nDESCRIPTION: Shows advanced usage of @Implements.fromString and @With.fromString to handle generic interfaces and mixins in Freezed union types.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nabstract class GeographicArea {}\nabstract class House {}\nabstract class Shop {}\nabstract class AdministrativeArea<T> {}\n\n@freezed\nsealed class Example<T> with _$Example<T> {\n  const factory Example.person(String name, int age) = Person<T>;\n\n  @With.fromString('AdministrativeArea<T>')\n  const factory Example.street(String name) = Street<T>;\n\n  @With<House>()\n  @Implements<Shop>()\n  @Implements<GeographicArea>()\n  @Implements.fromString('AdministrativeArea<T>')\n  const factory Example.city(String name, int population) = City<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Freezed Union Types in build.yaml\nDESCRIPTION: Configuration for customizing union keys and values globally for a project using the build.yaml file.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      freezed:\n        options:\n          union_key: type\n          union_value_case: pascal\n```\n\n----------------------------------------\n\nTITLE: Using JsonSerializable Annotation with Freezed\nDESCRIPTION: Example showing how to apply @JsonSerializable annotation to Freezed constructors to customize serialization options.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Example with _$Example {\n  @JsonSerializable(explicitToJson: true)\n  factory Example(@JsonKey(name: 'my_property') SomeOtherClass myProperty) = _Example;\n\n  factory Example.fromJson(Map<String, dynamic> json) => _$ExampleFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Converter with a List in Freezed\nDESCRIPTION: Example showing how to apply a custom JSON converter to a list of Freezed objects.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class MyModel with _$MyModel {\n  const factory MyModel(@MyResponseConverter() List<MyResponse> myResponse) = MyModelData;\n\n  factory MyModel.fromJson(Map<String, dynamic> json) => _$MyModelFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Union Type Keys in Freezed JSON Serialization\nDESCRIPTION: Shows how to customize the key and value format used for union type discrimination in JSON serialization using @Freezed and @FreezedUnionValue decorators.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed(unionKey: 'type', unionValueCase: FreezedUnionCase.pascal)\nsealed class MyResponse with _$MyResponse {\n  const factory MyResponse(String a) = MyResponseData;\n\n  @FreezedUnionValue('SpecialCase')\n  const factory MyResponse.special(String a, int b) = MyResponseSpecial;\n\n  const factory MyResponse.error(String message) = MyResponseError;\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Common Property Interface in Union Types with Freezed\nDESCRIPTION: Example showing how to enforce a common property across all union cases by declaring an unimplemented getter in the base Freezed class.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nclass Union with _$Union {\n  const factory Union.left(int value) = _Left;\n  const factory Union.right(int value) = _Left;\n\n  @override\n  int get value; // adding this forces all union cases to possess a `value` property\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom JSON Converters to Freezed Fields in Dart\nDESCRIPTION: Shows how to apply a custom JsonConverter to a field in a Freezed class to handle complex deserialization logic for nested objects.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class MyModel with _$MyModel {\n  const factory MyModel(@MyResponseConverter() MyResponse myResponse) = MyModelData;\n\n  factory MyModel.fromJson(Map<String, dynamic> json) => _$MyModelFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deep Copy Syntax with Freezed in Dart\nDESCRIPTION: The concise deep copy syntax provided by Freezed that reduces duplication when modifying deeply nested properties, showing how to update an assistant's name.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nCompany company;\n\nCompany newCompany = company.copyWith.director.assistant(name: 'John Smith');\n```\n\n----------------------------------------\n\nTITLE: Customizing Union Key and Value with Freezed Decorators\nDESCRIPTION: Example of customizing the union key and value format using Freezed decorators.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed(unionKey: 'type', unionValueCase: FreezedUnionCase.pascal)\nsealed class MyResponse with _$MyResponse {\n  const factory MyResponse(String a) = MyResponseData;\n\n  @FreezedUnionValue('SpecialCase')\n  const factory MyResponse.special(String a, int b) = MyResponseSpecial;\n\n  const factory MyResponse.error(String message) = MyResponseError;\n\n  factory MyResponse.fromJson(Map<String, dynamic> json) =>\n      _$MyResponseFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Tear-off for fromJson in Freezed Classes in Dart\nDESCRIPTION: Example of using constructor tear-offs with fromJson in Freezed classes. This makes it easier to use the fromJson method when mapping JSON data to class instances.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  factory Person({ String name, int age}) = _Person;\n\n  factory Person.fromJson(Map<String, dynamic> json) => _$PersonFromJson(json);\n}\n\nList<Map<String, dynamic>> list;\n\nList<MyClass> persons = list.map($Person.fromJson).toList();\n```\n\n----------------------------------------\n\nTITLE: Adding Asserts to Freezed Models - Dart\nDESCRIPTION: Shows two approaches for adding assertions to Freezed classes: using @Assert decorator or defining a private constructor with assertions.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  @Assert('name.isNotEmpty', 'name cannot be empty')\n  const factory Person({required String name, int? age}) = _Person;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  Person._({required this.name})\n    : assert(name.isNotEmpty, 'name cannot be empty');\n\n  factory Person({required String name, int? age}) = _Person;\n\n  @override\n  final String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Converter Implementation\nDESCRIPTION: Implementation of a custom JSON converter for handling complex deserialization logic.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nclass MyResponseConverter implements JsonConverter<MyResponse, Map<String, dynamic>> {\n  const MyResponseConverter();\n\n  @override\n  MyResponse fromJson(Map<String, dynamic> json) {\n    if (json['runtimeType'] != null) {\n      return MyResponse.fromJson(json);\n    }\n    if (isTypeData) {\n      return MyResponseData.fromJson(json);\n    } else if (isTypeSpecial) {\n      return MyResponseSpecial.fromJson(json);\n    } else if (isTypeError) {\n      return MyResponseError.fromJson(json);\n    } else {\n      throw Exception('Could not determine the constructor for mapping from JSON');\n    }\n }\n\n  @override\n  Map<String, dynamic> toJson(MyResponse data) => data.toJson();\n}\n```\n\n----------------------------------------\n\nTITLE: Union Types Implementation Example\nDESCRIPTION: Demonstrates how to implement union types with multiple constructors in Freezed.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Union with _$Union {\n  const factory Union.data(int value) = Data;\n  const factory Union.loading() = Loading;\n  const factory Union.error([String? message]) = Error;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Asserts with Freezed Models in Dart\nDESCRIPTION: Shows how to add assert statements to Freezed classes using the @Assert decorator or by specifying a private constructor with assertions.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  @Assert('name.isNotEmpty', 'name cannot be empty')\n  const factory Person({required String name, int? age}) = _Person;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  Person._({required this.name})\n    : assert(name.isNotEmpty, 'name cannot be empty');\n\n  factory Person({required String name, int? age}) = _Person;\n\n  @override\n  final String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Constructors with JSON Serialization in Freezed\nDESCRIPTION: Demonstrates how Freezed handles JSON serialization for classes with multiple constructors using the runtimeType property to determine which constructor to use.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class MyResponse with _$MyResponse {\n  const factory MyResponse(String a) = MyResponseData;\n  const factory MyResponse.special(String a, int b) = MyResponseSpecial;\n  const factory MyResponse.error(String message) = MyResponseError;\n\n  factory MyResponse.fromJson(Map<String, dynamic> json) => _$MyResponseFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting an Individual Union Case in Freezed\nDESCRIPTION: Demonstrates how to manually implement a specific union case by defining a custom subclass for fine-grained control over the model.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_41\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Result<T> with _$Result {\n  factory Result.data(T data) = ResultData;\n  factory Result.error(Object error) = ResultError;\n}\n\nclass ResultData<T> implements Result<T> {\n  // TODO: implement Result<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Switch in Dart for Freezed Union Types\nDESCRIPTION: Shows how to use Dart's pattern matching with switch to extract properties from a Freezed union type instance.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\nswitch (example) {\n  Person(:final name) => print('Person $name'),\n  City(:final population) => print('City ($population)'),\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Freezed Pattern Matching to Dart's Native Pattern Matching\nDESCRIPTION: Freezed v3 no longer generates .map/.when extensions for pattern matching. This example demonstrates how to migrate from Freezed's custom pattern matching methods to Dart's built-in pattern matching syntax using the switch expression with destructuring patterns.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/migration_guide.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nfinal model = Model.first('42');\n\n-final res = model.map(\n-  first: (String a) => 'first $a',\n-  second: (int b, bool c) => 'second $b $c',\n-);\n+final res = switch (model) {\n+  First(:final a) => 'first $a',\n+  Second(:final b, :final c) => 'second $b $c',\n+};\n\n```\n\n----------------------------------------\n\nTITLE: Customized JSON Format for Freezed Union Types\nDESCRIPTION: Shows the JSON format after customizing the union type discrimination key and value format, changing from 'runtimeType' to 'type' and using Pascal case for values.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"Default\",\n    \"a\": \"This JSON object will use constructor MyResponse()\"\n  },\n  {\n    \"type\": \"SpecialCase\",\n    \"a\": \"This JSON object will use constructor MyResponse.special()\",\n    \"b\": 42\n  },\n  {\n    \"type\": \"Error\",\n    \"message\": \"This JSON object will use constructor MyResponse.error()\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Standard Nested copyWith Implementation in Dart\nDESCRIPTION: The verbose way of updating deeply nested properties in Freezed models using standard copyWith method, showing the duplication required to update nested properties.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nCompany company;\n\nCompany newCompany = company.copyWith(\n  director: company.director.copyWith(\n    assistant: company.director.assistant.copyWith(\n      name: 'John Smith',\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining an Immutable Person Class with Freezed\nDESCRIPTION: Example of defining an immutable Person class using Freezed, including fromJson/toJson functionality.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// This file is \"main.dart\"\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:flutter/foundation.dart';\n\n// Required: Associate the generated code with this file\npart 'main.freezed.dart';\n// Optional: Since Person is serializable, this line is needed.\n// But if Person was not serializable, we could skip it.\npart 'main.g.dart';\n\n@freezed\nabstract class Person with _$Person {\n  const factory Person({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _Person;\n\n  factory Person.fromJson(Map<String, Object?> json)\n      => _$PersonFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with If-Case for Freezed Union Types in Dart\nDESCRIPTION: Demonstrates using if-case statements as an alternative to switch for pattern matching with Freezed union types.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_38\n\nLANGUAGE: dart\nCODE:\n```\nif (example case Person(:final name)) {\n  print('Person $name');\n} else if (example case City(:final population)) {\n  print('City ($population)');\n}\n```\n\n----------------------------------------\n\nTITLE: Build Configuration for Freezed Union Types\nDESCRIPTION: YAML configuration for customizing union key and value case globally.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      freezed:\n        options:\n          union_key: type\n          union_value_case: pascal\n```\n\n----------------------------------------\n\nTITLE: Handling Null Objects in Deep Copy with Dart\nDESCRIPTION: Using the ?.call syntax to safely handle potential null objects in a deep copy chain, allowing for null safety when modifying deeply nested properties.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nCompany? newCompany = company.copyWith.director.assistant?.call(name: 'John');\n```\n\n----------------------------------------\n\nTITLE: Extending Classes with Freezed in Dart\nDESCRIPTION: Demonstrates how to extend another class with a Freezed class by using a private constructor to specify super parameters.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass Subclass {\n  const Subclass.name(this.value);\n\n  final int value;\n}\n\n@freezed\nabstract class MyFreezedClass extends Subclass with _$MyFreezedClass {\n  // We can receive parameters in this constructor, which we can use with `super.field`\n  const MyFreezedClass._(super.value) : super.name();\n\n  const factory MyFreezedClass(int value, /* other fields */) = _MyFreezedClass;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Argument Factories for Freezed Classes\nDESCRIPTION: Example of enabling generic argument factories to serialize generic typed Freezed classes, adjusting the fromJson method signature.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed(genericArgumentFactories: true)\nsealed class ApiResponse<T> with _$ApiResponse<T> {\n  const factory ApiResponse.data(T data) = ApiResponseData;\n  const factory ApiResponse.error(String message) = ApiResponseError;\n\n  factory ApiResponse.fromJson(Map<String, dynamic> json, T Function(Object?) fromJsonT) => _$ApiResponseFromJson(json, fromJsonT);\n}\n```\n\n----------------------------------------\n\nTITLE: Using @With and @Implements Annotations with Generic Syntax in Freezed\nDESCRIPTION: Example showing the updated syntax for @With and @Implements annotations, which now use generic type notation instead of the previous string-based approach.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n// Before:\n@With(MyClass)\n@With.fromString('Generic<int>')\n\n// After:\n@With<MyClass>()\n@With<Generic<int>>()\n```\n\n----------------------------------------\n\nTITLE: Using Non-Constant Default Values in Freezed Models in Dart\nDESCRIPTION: Shows how to use a private constructor to initialize non-constant default values in Freezed models.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Response<T> with _$Response<T> {\n  // We give \"time\" parameters a non-constant default\n  Response._({DateTime? time}) : time = time ?? DateTime.now();\n  // Constructors may enable passing parameters to ._();\n  factory Response.data(T value, {DateTime? time}) = ResponseData;\n  // If ._ parameters are named and optional, factory constructors are not required to specify it\n  factory Response.error(Object error) = ResponseError;\n\n  @override\n  final DateTime time;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Converters with Lists in Freezed in Dart\nDESCRIPTION: Shows how to apply a custom JsonConverter to a List of complex objects in a Freezed class to handle deserialization of collections.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class MyModel with _$MyModel {\n  const factory MyModel(@MyResponseConverter() List<MyResponse> myResponse) = MyModelData;\n\n  factory MyModel.fromJson(Map<String, dynamic> json) => _$MyModelFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Generic Argument Factories in build.yaml\nDESCRIPTION: Configuration to enable generic argument factories globally for a project using the build.yaml file.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      freezed:\n        options:\n          generic_argument_factories: true\n```\n\n----------------------------------------\n\nTITLE: Using With and Implements Decorators with Generic Classes in Freezed\nDESCRIPTION: Demonstrates how to implement or mix in generic classes with Freezed union types. Shows both regular syntax and fromString syntax for handling generic type parameters.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\nabstract class GeographicArea {}\nabstract class House {}\nabstract class Shop {}\nabstract class AdministrativeArea<T> {}\n\n@freezed\nsealed class Example<T> with _$Example<T> {\n  const factory Example.person(String name, int age) = Person<T>;\n\n  @With.fromString('AdministrativeArea<T>')\n  const factory Example.street(String name) = Street<T>;\n\n  @With<House>()\n  @Implements<Shop>()\n  @Implements<GeographicArea>()\n  @Implements.fromString('AdministrativeArea<T>')\n  const factory Example.city(String name, int population) = City<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Subclass with Freezed in Dart\nDESCRIPTION: Demonstrates how to extend a subclass using Freezed's new syntax, allowing passing of parameters to the super constructor.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Subclass {\n  Subclass.name(this.value);\n  final int value;\n}\n\n@freezed\nclass MyFreezedClass extends Subclass with _$MyFreezedClass {\n  // We can receive parameters in this constructor, which we can use with `super.field`\n  MyFreezedClass._(super.value): super.name();\n\n  factory MyFreezedClass(int value, /* other fields */) = _MyFreezedClass;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation to Freezed Class Properties in Dart\nDESCRIPTION: This snippet shows how to add documentation to properties in a Freezed class. It demonstrates documenting the 'name' property of a Person class.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  const factory Person({\n    /// The name of the user.\n    ///\n    /// Must not be null\n    String? name,\n    int? age,\n    Gender? gender,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Freezed Union Case with Another Freezed Class\nDESCRIPTION: Shows how to implement a union case with another Freezed class for extended functionality while maintaining the union type relationship.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_42\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Result<T> with _$Result {\n  Result._();\n  factory Result.data(T data) = ResultData;\n  factory Result.error(Object error) = ResultError;\n}\n\n@freezed\nclass ResultData<T> extends Result<T> with _$ResultData<T> {\n  factory ResultData(T data) = _ResultData;\n\n  // TODO maybe add some methods unique to ResultData\n}\n```\n\n----------------------------------------\n\nTITLE: Using mutable properties in a Freezed class\nDESCRIPTION: Example of modifying mutable properties in a Freezed class created with @unfreezed.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ja_JP/README.md#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var person = Person(firstName: 'John', lastName: 'Smith', age: 42);\n\n  person.firstName = 'Mona';\n  person.lastName = 'Lisa';\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Base Class with Freezed in Dart\nDESCRIPTION: Shows how to extend a base class using Freezed's new mixed mode syntax, allowing the use of initializers and super() calls.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Base {\n  Base(String value);\n}\n\n@freezed\nclass Usual extends Base with _$Usual {\n  Usual({int? a}) a = a ?? 0, super('value');\n  final int a;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Comments to Freezed Properties in Dart\nDESCRIPTION: Shows how to add documentation comments to properties in a Freezed class by adding the comments to the constructor parameters.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  const factory Person({\n    /// 用户的名称.\n    ///\n    /// 不能为 null\n    String? name,\n    int? age,\n    Gender? gender,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Freezed Union Case as Another Freezed Class\nDESCRIPTION: Demonstrates how to manually implement a union variant as another Freezed class. This approach allows adding specific functionality to a particular variant.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Result<T> with _$Result {\n  Result._();\n  factory Result.data(T data) = ResultData;\n  factory Result.error(Object error) = ResultError;\n}\n\n@freezed\nclass ResultData<T> extends Result<T> with _$ResultData<T> {\n  factory ResultData(T data) = _ResultData;\n\n  // TODO maybe add some methods unique to ResultData\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutable Person Class with Freezed\nDESCRIPTION: Example of defining a mutable Person class using the @unfreezed annotation in Freezed.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@unfreezed\nabstract class Person with _$Person {\n  factory Person({\n    required String firstName,\n    required String lastName,\n    required final int age,\n  }) = _Person;\n\n  factory Person.fromJson(Map<String, Object?> json)\n      => _$PersonFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Properties in Freezed Classes in Dart\nDESCRIPTION: This code demonstrates how to mark a property as deprecated in a Freezed class. It shows the deprecation of the 'gender' property in a Person class.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  const factory Person({\n    String? name,\n    int? age,\n    @deprecated Gender? gender,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Serializable Package Dependency in YAML\nDESCRIPTION: The pubspec.yaml entry required to add json_serializable as a development dependency for Freezed JSON serialization support.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  json_serializable:\n```\n\n----------------------------------------\n\nTITLE: Using a Mutable Person Class\nDESCRIPTION: Example of how to use and modify a mutable Person class created with @unfreezed.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var person = Person(firstName: 'John', lastName: 'Smith', age: 42);\n\n  person.firstName = 'Mona';\n  person.lastName = 'Lisa';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to Freezed Models in Dart\nDESCRIPTION: Demonstrates how to add custom methods to a Freezed class by defining a private empty constructor. This pattern allows you to enhance data classes with custom functionality.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  const Person._();\n\n  const factory Person(String name, {int? age}) = _Person;\n\n  void method() {\n    print('hello world');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Properties as Deprecated in Freezed Classes in Dart\nDESCRIPTION: Demonstrates how to mark a property as deprecated in a Freezed class, which will affect the constructor parameter, generated class constructor, property access, and copyWith parameter.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  const factory Person({\n    String? name,\n    int? age,\n    @deprecated Gender? gender,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Converter for Freezed Classes\nDESCRIPTION: Example of a custom JSON converter for Freezed classes that allows handling JSON structures without the runtimeType field by providing custom type detection logic.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nclass MyResponseConverter implements JsonConverter<MyResponse, Map<String, dynamic>> {\n  const MyResponseConverter();\n\n  @override\n  MyResponse fromJson(Map<String, dynamic> json) {\n    // type data was already set (e.g. because we serialized it ourselves)\n    if (json['runtimeType'] != null) {\n      return MyResponse.fromJson(json);\n    }\n    // you need to find some condition to know which type it is. e.g. check the presence of some field in the json\n    if (isTypeData) {\n      return MyResponseData.fromJson(json);\n    } else if (isTypeSpecial) {\n      return MyResponseSpecial.fromJson(json);\n    } else if (isTypeError) {\n      return MyResponseError.fromJson(json);\n    } else {\n      throw Exception('Could not determine the constructor for mapping from JSON');\n    }\n }\n\n  @override\n  Map<String, dynamic> toJson(MyResponse data) => data.toJson();\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Collection Immutability in Freezed\nDESCRIPTION: Example of how to disable automatic conversion of collections to unmodifiable in Freezed classes.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed(makeCollectionsUnmodifiable: false)\nclass Example with _$Example {\n  factory Example(List<int> list) = _Example;\n}\n\nvoid main() {\n  var example = Example([]);\n  example.list.add(42); // OK\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating an Entire Union Type in Freezed in Dart\nDESCRIPTION: Shows how to deprecate an entire variant of a union type by decorating the factory constructor with @deprecated.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  @deprecated\n  const factory Person({\n    String? name,\n    int? age,\n    Gender? gender,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Freezed Class with Constructor in Dart\nDESCRIPTION: Example showing the updated syntax for defining a Freezed class that no longer requires the abstract keyword, simplifying class declaration.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nclass Example with _$Example {\n  factory Example(int value) = _Example;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Classic Classes with Freezed in Dart\nDESCRIPTION: Demonstrates how to use Freezed with classic Dart classes, allowing for more advanced constructor logic while still generating copyWith, toString, ==, and hashCode methods.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\n// required: associates our `main.dart` with the code generated by Freezed\npart 'main.freezed.dart';\n// optional: Since our Person class is serializable, we must add this line.\n// But if Person was not serializable, we could skip it.\npart 'main.g.dart';\n\n@freezed\n@JsonSerializable()\nclass Person with _$Person {\n  const Person({\n    required this.firstName,\n    required this.lastName,\n    required this.age,\n  });\n\n  @override\n  final String firstName;\n  @override\n  final String lastName;\n  @override\n  final int age;\n\n  factory Person.fromJson(Map<String, Object?> json)\n      => _$PersonFromJson(json);\n\n  Map<String, Object?> toJson() => _$PersonToJson(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Freezed Class Generation with Parameters in Dart\nDESCRIPTION: Example showing how to customize a Freezed class by passing parameters to the @Freezed annotation to disable specific features like copyWith and equality methods.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed(\n  // copyWith/== 생성 비활성화\n  copyWith: false,\n  equal: false,\n)\nclass Person with _$Person {...}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Entire Freezed Class in Dart\nDESCRIPTION: This snippet shows how to deprecate an entire Freezed class by applying the @deprecated annotation to the defining factory constructor of the Person class.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  @deprecated\n  const factory Person({\n    String? name,\n    int? age,\n    Gender? gender,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Converter to a Freezed Class\nDESCRIPTION: Example of how to apply a custom JSON converter to a Freezed class constructor parameter.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class MyModel with _$MyModel {\n  const factory MyModel(@MyResponseConverter() MyResponse myResponse) = MyModelData;\n\n  factory MyModel.fromJson(Map<String, dynamic> json) => _$MyModelFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Mixin with @With Annotation in Freezed\nDESCRIPTION: Example of using the @With annotation with generics to add a mixin to a Freezed class, demonstrating the syntax for generic types.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@With<Mixin<T>>()\n```\n\n----------------------------------------\n\nTITLE: Using @Freezed Annotation with FreezedMap and FreezedWhenOptions in Dart\nDESCRIPTION: Example of using the updated @Freezed annotation syntax with FreezedMap and FreezedWhenOptions to customize behavior, replacing the deprecated maybeMap and maybeWhen parameters.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed(map: FreezedMap(...), when: FreezedWhenOptions(...))\n```\n\n----------------------------------------\n\nTITLE: Incorrect Deep Copy with Null Nested Object in Dart\nDESCRIPTION: Example showing that deep copy operations won't work when the intermediate object is null, in this case trying to modify a non-existent assistant.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nCompany company = Company(name: 'Google', director: Director(assistant: null));\nCompany newCompany = company.copyWith.director.assistant(name: 'John');\n```\n\n----------------------------------------\n\nTITLE: Customizing Union Case Type with Screaming Snake Case in Dart\nDESCRIPTION: Example showing how to add a parameter to the @Freezed annotation to customize union case types using screaming snake case naming convention.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed(makeCollectionsUnmodifiable: false)\n```\n\n----------------------------------------\n\nTITLE: Using @With and @Implements Decorators in Freezed Union Types in Dart\nDESCRIPTION: Demonstrates how to use the @With and @Implements decorators to allow a specific constructor of a union type to implement an interface. This provides more flexibility in class design.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Example with _$Example {\n  const factory Example.person(String name, int age) = Person;\n\n  @Implements(GeographicArea)\n  const factory Example.city(String name, int population) = City;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Freezed Class with Non-Constant Default Values in Dart\nDESCRIPTION: Shows how to use non-constant default values in a Freezed class using a custom constructor.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Response<T> with _$Response<T> {\n  // We give \"time\" parameters a non-constant default\n  Response._({DateTime? time}) : time = time ?? DateTime.now();\n  // Constructors may enable passing parameters to ._();\n  factory Response.data(T value, {DateTime? time}) = ResponseData;\n  // If ._ parameters are named and optional, factory constructors are not required to specify it\n  factory Response.error(Object error) = ResponseError;\n\n  @override\n  final DateTime time;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample Model Class with Freezed in Dart\nDESCRIPTION: Example showing how to define a Model class with different factory constructors using Freezed. The class has two variants: First with a String parameter and Second with int and bool parameters.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Model with _$Model {\n  factory Model.first(String a) = First;\n  factory Model.second(int b, bool c) = Second;\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Mutable Collections in Freezed Classes\nDESCRIPTION: Example of how to allow mutable collections in a Freezed class by disabling the makeCollectionsUnmodifiable option.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed(makeCollectionsUnmodifiable: false)\nclass Example with _$Example {\n  factory Example(List<int> list) = _Example;\n}\n\nvoid main() {\n  var example = Example([]);\n  example.list.add(42); // OK\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing mutable collections in Freezed classes\nDESCRIPTION: Example of configuring a Freezed class to allow mutable List, Map, and Set properties.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ja_JP/README.md#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed(makeCollectionsUnmodifiable: false)\nclass Example with _$Example {\n  factory Example(List<int> list) = _Example;\n}\n\nvoid main() {\n  var example = Example([]);\n  example.list.add(42); // OK\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Properties in Freezed Classes in Dart\nDESCRIPTION: Example showing how to mark a property as deprecated in a Freezed class by adding the @deprecated annotation to the parameter.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  const factory Person({\n    String? name,\n    int? age,\n    @deprecated Gender? gender,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Late Keyword for Computed Properties in Dart\nDESCRIPTION: Illustrates the transition from using @late annotation to the late keyword for computed properties in Freezed classes. This change is part of the migration to null safety.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed_annotation/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nabstract class Person with _$Person {\n  Person._();\n  factory Person({\n    required String firstName,\n    required String lastName,\n  }) = _Person;\n\n  late final fullName = '$firstName $lastName';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Traditional copyWith for Nested Updates in Dart\nDESCRIPTION: This code snippet shows how to use the traditional copyWith method to update a nested property (assistant's name) within a Company object. It demonstrates the verbose nature of this approach.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nCompany company;\n\nCompany newCompany = company.copyWith(\n  director: company.director.copyWith(\n    assistant: company.director.assistant.copyWith(\n      name: 'John Smith',\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using copyWith method in Freezed classes\nDESCRIPTION: Example of using the automatically generated copyWith method to create modified copies of Freezed objects.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ja_JP/README.md#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  factory Person(String name, int? age) = _Person;\n}\n\nvoid main() {\n  var person = Person('Remi', 24);\n\n  // `age` is not passed, so its value doesn't change\n  print(person.copyWith(name: 'Dash')); // Person(name: Dash, age: 24)\n  // `age` is set to `null`\n  print(person.copyWith(age: null)); // Person(name: Remi, age: null)\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Generated Classes in Freezed in Dart\nDESCRIPTION: Example demonstrating how to deprecate an entire generated class by annotating the factory constructor with @deprecated.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Person with _$Person {\n  @deprecated\n  const factory Person({\n    String? name,\n    int? age,\n    Gender? gender,\n  }) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Class-specific Configuration in Freezed\nDESCRIPTION: Shows how to customize code generation for a specific class by providing parameters to the @Freezed annotation. This example disables copyWith and equality implementations.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/README.md#2025-04-16_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed(\n  // Disable the generation of copyWith/==\n  copyWith: false,\n  equal: false,\n)\n abstract class Person with _$Person {...}\n```\n\n----------------------------------------\n\nTITLE: Using map with copyWith in Freezed for Dart\nDESCRIPTION: Example demonstrating using the map method with copyWith to perform complex operations on a Freezed object, such as creating a modified copy of a class instance.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nvar model = Model.second(42, false)\nprint(\n  model.map(\n    first: (value) => value,\n    second: (value) => value.copyWith(c: true),\n  )\n); // Model.second(b: 42, c: true)\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Types with @With and @Implements in Dart\nDESCRIPTION: Demonstrates how to use @With and @Implements annotations to implement generic types in Freezed classes. This change allows unions to implement generic types.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed_annotation/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@With<MyClass>()\n@With<Generic<int>>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Freezed Options for a Specific Model\nDESCRIPTION: Shows how to customize Freezed behavior for a specific class by passing parameters to the @Freezed annotation.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_43\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed(\n  // Disable the generation of copyWith/==\n  copyWith: false,\n  equal: false,\n)\n abstract class Person with _$Person {...}\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values in Freezed's Deep Copy in Dart\nDESCRIPTION: This code demonstrates how to handle potentially null nested objects when using Freezed's deep copy. It uses the ?.call syntax to safely update a possibly null assistant.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nCompany company = Company(name: 'Google', director: Director(assistant: null));\nCompany? newCompany = company.copyWith.director.assistant?.call(name: 'John');\n```\n\n----------------------------------------\n\nTITLE: Configuring a Specific Freezed Class in Dart\nDESCRIPTION: Example showing how to define a basic Person class using Freezed with the default annotation format.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n@Freezed()\nclass Person with _$Person {\n  factory Person(String name, int age) = _Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Customized JSON Structure with Union Keys\nDESCRIPTION: The resulting JSON structure when using custom union keys and values with Freezed, showing how the type field replaces runtimeType.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"Default\",\n    \"a\": \"This JSON object will use constructor MyResponse()\"\n  },\n  {\n    \"type\": \"SpecialCase\",\n    \"a\": \"This JSON object will use constructor MyResponse.special()\",\n    \"b\": 42\n  },\n  {\n    \"type\": \"Error\",\n    \"message\": \"This JSON object will use constructor MyResponse.error()\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Required 'sealed' Keyword to Freezed Classes with Multiple Factories in Dart\nDESCRIPTION: Freezed v3 requires the 'sealed' keyword for classes that represent union types with multiple factory constructors. This diff shows how to update a Model class with multiple factories by adding the 'sealed' keyword.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/migration_guide.md#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n@freezed\n-class Model with _$Model {\n+sealed class Model with _$Model {\n  factory Model.first(String a) = First;\n  factory Model.second(int b, bool c) = Second;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Freezed dependencies in a Flutter project\nDESCRIPTION: Commands to add Freezed and related dependencies to a Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ja_JP/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter pub add freezed_annotation\nflutter pub add dev:build_runner\nflutter pub add dev:freezed\n# For fromJson/toJson with Freezed\nflutter pub add json_annotation\nflutter pub add dev:json_serializable\n```\n\n----------------------------------------\n\nTITLE: Defining Freezed Union with Private Constructor in Dart\nDESCRIPTION: Illustrates how to define a Freezed union with a private constructor, which was not possible in previous versions.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nsealed class Result<T> with _$Result {\n  // It wasn't possible to write _data before, but now is.\n  factory Result._data(T data) = ResultData;\n  factory Result.error(Object error) = ResultError;\n}\n```\n\n----------------------------------------\n\nTITLE: Global Configuration for Freezed Union Types in build.yaml\nDESCRIPTION: Shows how to configure default union key and value case for all Freezed classes in a project using build.yaml configuration.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      freezed:\n        options:\n          union_key: type\n          union_value_case: pascal\n```\n\n----------------------------------------\n\nTITLE: Running Freezed Code Generator\nDESCRIPTION: Command to run the Freezed code generator using build_runner.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndart run build_runner build\n```\n\n----------------------------------------\n\nTITLE: Installing Freezed dependencies in a Dart project\nDESCRIPTION: Commands to add Freezed and related dependencies to a Dart project's pubspec.yaml file.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ja_JP/README.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndart pub add freezed_annotation\ndart pub add dev:build_runner\ndart pub add dev:freezed\n# For fromJson/toJson with Freezed\ndart pub add json_annotation\ndart pub add dev:json_serializable\n```\n\n----------------------------------------\n\nTITLE: Defining a mutable Freezed class using @unfreezed\nDESCRIPTION: Example of defining a Freezed class with mutable properties using the @unfreezed annotation.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ja_JP/README.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@unfreezed\nabstract class Person with _$Person {\n  factory Person({\n    required String firstName,\n    required String lastName,\n    required final int age,\n  }) = _Person;\n\n  factory Person.fromJson(Map<String, Object?> json)\n      => _$PersonFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Freezed Class Setup\nDESCRIPTION: Example of how to set up a Dart file to use Freezed, including necessary imports and part directives.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'my_file.freezed.dart';\n\n```\n\n----------------------------------------\n\nTITLE: Installing Freezed Dependencies for Flutter Project\nDESCRIPTION: Commands to add Freezed and related dependencies to a Flutter project using pub.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter pub add freezed_annotation\nflutter pub add dev:build_runner\nflutter pub add dev:freezed\n# If you also want to generate fromJson/toJson:\nflutter pub add json_annotation\nflutter pub add dev:json_serializable\n```\n\n----------------------------------------\n\nTITLE: Basic Freezed File Setup\nDESCRIPTION: Initial imports and part declaration required for using Freezed in a Dart file.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'my_file.freezed.dart';\n\n```\n\n----------------------------------------\n\nTITLE: Running Freezed Code Generator for Dart\nDESCRIPTION: Command to run the Freezed code generator for a Dart project.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndart run build_runner build\n```\n\n----------------------------------------\n\nTITLE: Installing Freezed Dependencies - Flutter Project\nDESCRIPTION: Commands to add required dependencies for using Freezed in a Flutter project, including build_runner, freezed, and json serialization packages.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/vi_VN/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter pub add freezed_annotation\nflutter pub add dev:build_runner\nflutter pub add dev:freezed\n# If you want to generate fromJson/toJson with Freezed, also add:\nflutter pub add json_annotation\nflutter pub add dev:json_serializable\n```\n\n----------------------------------------\n\nTITLE: Installing Freezed Dependencies for Dart Project\nDESCRIPTION: Commands to add Freezed and related dependencies to a Dart project using pub.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndart pub add freezed_annotation\ndart pub add dev:build_runner\ndart pub add dev:freezed\n# If you also want to generate fromJson/toJson:\ndart pub add json_annotation\ndart pub add dev:json_serializable\n```\n\n----------------------------------------\n\nTITLE: Importing Freezed annotations and setting up part files\nDESCRIPTION: Basic setup for using Freezed in a Dart file, including necessary imports and part declarations.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ja_JP/README.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'my_file.freezed.dart';\n\n```\n\n----------------------------------------\n\nTITLE: Running Freezed Code Generator for Flutter\nDESCRIPTION: Command to run the Freezed code generator for a Flutter project.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nflutter pub run build_runner build\n```\n\n----------------------------------------\n\nTITLE: Disabling invalid_annotation_target warning in analysis_options.yaml\nDESCRIPTION: Configuration to disable the invalid_annotation_target warning when using Freezed with json_serializable.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ja_JP/README.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  errors:\n    invalid_annotation_target: ignore\n```\n\n----------------------------------------\n\nTITLE: Adding json_serializable to pubspec.yaml for Freezed\nDESCRIPTION: Shows the required dependency in pubspec.yaml to enable JSON serialization with Freezed via json_serializable package.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  json_serializable:\n```\n\n----------------------------------------\n\nTITLE: Installing Freezed for Dart Projects\nDESCRIPTION: Commands to add Freezed and its dependencies to a Dart project using pub.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndart pub add freezed_annotation\ndart pub add dev:build_runner\ndart pub add dev:freezed\n# If you want to use freezed to generate fromJson/toJson:\ndart pub add json_annotation\ndart pub add dev:json_serializable\n```\n\n----------------------------------------\n\nTITLE: Configuring Analysis Options for Freezed\nDESCRIPTION: YAML configuration to disable invalid_annotation_target warning in analysis_options.yaml file\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  errors:\n    invalid_annotation_target: ignore\n```\n\n----------------------------------------\n\nTITLE: Installing Freezed Dependencies - Dart Project\nDESCRIPTION: Commands to add required dependencies for using Freezed in a Dart project, including build_runner, freezed, and json serialization packages.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/vi_VN/README.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndart pub add freezed_annotation\ndart pub add dev:build_runner\ndart pub add dev:freezed\n# If you want to generate fromJson/toJson with Freezed, also add:\ndart pub add json_annotation\ndart pub add dev:json_serializable\n```\n\n----------------------------------------\n\nTITLE: Disabling invalid_annotation_target Warning\nDESCRIPTION: YAML configuration to disable the invalid_annotation_target warning in the analysis_options.yaml file.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/zh_CN/README.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  errors:\n    invalid_annotation_target: ignore\n```\n\n----------------------------------------\n\nTITLE: Running the Freezed code generator\nDESCRIPTION: Command to execute the Freezed code generator using build_runner.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ja_JP/README.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndart run build_runner build\n```\n\n----------------------------------------\n\nTITLE: Installing Freezed Dependencies in Flutter\nDESCRIPTION: Console commands for installing required dependencies in a Flutter project including freezed, build_runner, and related packages.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter pub add freezed_annotation\nflutter pub add dev:build_runner\nflutter pub add dev:freezed\n# if using freezed to generate fromJson/toJson, also add:\nflutter pub add json_annotation\nflutter pub add dev:json_serializable\n```\n\n----------------------------------------\n\nTITLE: Disabling Invalid Annotation Warning\nDESCRIPTION: YAML configuration to disable the invalid_annotation_target warning when using Freezed with json_serializable.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/vi_VN/README.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  errors:\n    invalid_annotation_target: ignore\n```\n\n----------------------------------------\n\nTITLE: Comparing Mutable Person Instances\nDESCRIPTION: Demonstration of how equality works with mutable Person instances created using @unfreezed.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var john = Person(firstName: 'John', lastName: 'Smith', age: 42);\n  var john2 = Person(firstName: 'John', lastName: 'Smith', age: 42);\n\n  print(john == john2); // false\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling invalid_annotation_target Warning in analysis_options.yaml\nDESCRIPTION: Configuration to disable the invalid_annotation_target warning when using Freezed with json_serializable.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/resources/translations/ko_KR/README.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  errors:\n    invalid_annotation_target: ignore\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Lint in Analysis Options\nDESCRIPTION: YAML configuration to enable custom_lint plugin in the project's analysis_options.yaml file.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed_lint/README.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  plugins:\n    - custom_lint\n```\n\n----------------------------------------\n\nTITLE: Installing Freezed Lint Dependencies\nDESCRIPTION: Commands to add custom_lint and freezed_lint as development dependencies to a Flutter project using pub.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed_lint/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter pub add dev:custom_lint\nflutter pub add dev:freezed_lint\n```\n\n----------------------------------------\n\nTITLE: Adding Required 'abstract' Keyword to Freezed Classes in Dart\nDESCRIPTION: Freezed v3 requires the 'abstract' keyword on freezed classes using factory constructors. This example shows how to update a Person class by adding the 'abstract' keyword to the class declaration while keeping the rest of the implementation unchanged.\nSOURCE: https://github.com/rrousselGit/freezed/blob/master/packages/freezed/migration_guide.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n@freezed\n-class Person with _$Person {\n+abstract class Person with _$Person {\n  const factory Person({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _Person;\n\n  factory Person.fromJson(Map<String, Object?> json)\n      => _$PersonFromJson(json);\n}\n```"
  }
]