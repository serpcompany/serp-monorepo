[
  {
    "owner": "avaloniaui",
    "repo": "avalonia",
    "content": "TITLE: Initializing Avalonia UI Components in C#\nDESCRIPTION: This code snippet defines a partial class SampleView with internal controls and an InitializeComponent method. It handles the initialization of Avalonia UI components, including loading XAML and finding named controls in the component's scope.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/DataTemplates.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Markup.Xaml;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.ListBox NamedListBox;\n\n        /// <summary>\n        /// Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).\n        /// </summary>\n        /// <param name=\"loadXaml\">Should the XAML be loaded into the component.</param>\n\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public void InitializeComponent(bool loadXaml = true)\n        {\n            if (loadXaml)\n            {\n                AvaloniaXamlLoader.Load(this);\n            }\n\n            var __thisNameScope__ = this.FindNameScope();\n            UserNameTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n            NamedListBox = __thisNameScope__?.Find<global::Avalonia.Controls.ListBox>(\"NamedListBox\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Avalonia Packages via NuGet Package Manager\nDESCRIPTION: Commands to install the core Avalonia UI packages through the NuGet Package Manager Console. Installs both the main Avalonia package and desktop-specific components.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Avalonia\nInstall-Package Avalonia.Desktop\n```\n\n----------------------------------------\n\nTITLE: Implementing InitializeComponent Method for Avalonia SampleView\nDESCRIPTION: This method initializes the UI components by loading XAML (if specified) and finding the controls by name in the visual tree. It associates the named elements in the XAML with the corresponding internal fields in the class.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/SignUpView.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n        /// <summary>\n        /// Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).\n        /// </summary>\n        /// <param name=\"loadXaml\">Should the XAML be loaded into the component.</param>\n\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public void InitializeComponent(bool loadXaml = true)\n        {\n            if (loadXaml)\n            {\n                AvaloniaXamlLoader.Load(this);\n            }\n\n            var __thisNameScope__ = this.FindNameScope();\n            UserNameTextBox = __thisNameScope__?.Find<global::Controls.CustomTextBox>(\"UserNameTextBox\");\n            UserNameValidation = __thisNameScope__?.Find<global::Avalonia.Controls.TextBlock>(\"UserNameValidation\");\n            PasswordTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"PasswordTextBox\");\n            PasswordValidation = __thisNameScope__?.Find<global::Avalonia.Controls.TextBlock>(\"PasswordValidation\");\n            AwesomeListView = __thisNameScope__?.Find<global::Avalonia.Controls.ListBox>(\"AwesomeListView\");\n            ConfirmPasswordTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"ConfirmPasswordTextBox\");\n            ConfirmPasswordValidation = __thisNameScope__?.Find<global::Avalonia.Controls.TextBlock>(\"ConfirmPasswordValidation\");\n            SignUpButtonDescription = __thisNameScope__?.Find<global::Avalonia.Controls.Documents.Run>(\"SignUpButtonDescription\");\n            SignUpButton = __thisNameScope__?.Find<global::Avalonia.Controls.Button>(\"SignUpButton\");\n            CompoundValidation = __thisNameScope__?.Find<global::Avalonia.Controls.TextBlock>(\"CompoundValidation\");\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Control References in Avalonia UI with C#\nDESCRIPTION: This code defines auto-generated properties that provide typed access to UI controls in an Avalonia application. Each property uses the FindNameScope().Find<T>() method to locate controls by their defined x:Name values at runtime, enabling strongly-typed access to TextBox and Button controls.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/OnlyProperties/GeneratedCode/NamedControls.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia.Controls;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox PasswordTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"PasswordTextBox\");\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.Button SignUpButton => this.FindNameScope()?.Find<global::Avalonia.Controls.Button>(\"SignUpButton\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Declaration in Avalonia UI (C#)\nDESCRIPTION: Declares UI control references (TextBox and Button elements) with various access modifiers. Each declaration is marked as generated code by the Avalonia NameGenerator.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/FieldModifier.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\npublic global::Avalonia.Controls.TextBox FirstNameTextBox;\n[global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\npublic global::Avalonia.Controls.TextBox LastNameTextBox;\n[global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\nprotected global::Avalonia.Controls.TextBox PasswordTextBox;\n[global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\nprivate global::Avalonia.Controls.TextBox ConfirmPasswordTextBox;\n[global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\ninternal global::Avalonia.Controls.Button SignUpButton;\n[global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\ninternal global::Avalonia.Controls.Button RegisterButton;\n```\n\n----------------------------------------\n\nTITLE: Installing .NET Workloads for Cross-Platform Development\nDESCRIPTION: Command to install the necessary .NET workloads for targeting Android, iOS, and WebAssembly platforms. Required for building the full Avalonia solution with cross-platform support.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet workload install android ios wasm-tools\n```\n\n----------------------------------------\n\nTITLE: Cloning the Avalonia Repository with Git\nDESCRIPTION: Commands to clone the Avalonia UI repository from GitHub and initialize its submodules. This is the first step required to build Avalonia from source.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/AvaloniaUI/Avalonia.git\ncd Avalonia\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Installing XamlNameReferenceGenerator via NuGet in C#\nDESCRIPTION: Command to install the XamlNameReferenceGenerator package using the .NET CLI.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/src/tools/Avalonia.Generators/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package XamlNameReferenceGenerator\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Avalonia Control Catalog Sample\nDESCRIPTION: Commands to restore dependencies and run the Avalonia Control Catalog sample application, which demonstrates Avalonia UI controls and features.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd samples\\ControlCatalog.NetCore\ndotnet restore\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Importing MSBuild Targets for .NET Core Unit Tests\nDESCRIPTION: Imports the MSBuild targets file specifically for .NET Core unit testing configuration. This file likely contains build targets and configurations specific to running unit tests in a .NET Core environment.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/build/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Import Project=\"..\\..\\build\\UnitTests.NetCore.targets\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Window with Named Control in XAML\nDESCRIPTION: XAML markup for an Avalonia window with a TextBox control that has an x:Name attribute, which will be used by the source generator.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/src/tools/Avalonia.Generators/README.md#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<Window xmlns=\"https://github.com/avaloniaui\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        x:Class=\"Sample.App.SignUpView\">\n    <TextBox x:Name=\"UserNameTextBox\" x:FieldModifier=\"public\" />\n</Window>\n```\n\n----------------------------------------\n\nTITLE: Implementing ReactiveUI Code-Behind Bindings in C#\nDESCRIPTION: Example of using generated properties with ReactiveUI code-behind bindings for form validation in a sign-up view.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/src/tools/Avalonia.Generators/README.md#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// UserNameValidation and PasswordValidation are auto generated.\npublic partial class SignUpView : ReactiveWindow<SignUpViewModel>\n{\n    public SignUpView()\n    {\n        InitializeComponent();\n        this.WhenActivated(disposables =>\n        {\n            this.BindValidation(ViewModel, x => x.UserName, x => x.UserNameValidation.Text)\n                .DisposeWith(disposables);\n            this.BindValidation(ViewModel, x => x.Password, x => x.PasswordValidation.Text)\n                .DisposeWith(disposables);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Control References with InitializeComponent Mode in Avalonia\nDESCRIPTION: This code snippet shows the C# code generated by Avalonia.NameGenerator in the 'InitializeComponent' mode. It creates field declarations for named XAML elements and initializes them in the InitializeComponent method by finding them in the name scope.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/src/tools/Avalonia.Generators/README.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia.Controls;\nusing Avalonia.Markup.Xaml;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        internal global::Avalonia.NameGenerator.Sandbox.Controls.CustomTextBox UserNameTextBox;\n        public global::Avalonia.Controls.TextBlock UserNameValidation;\n        private global::Avalonia.Controls.TextBox PasswordTextBox;\n        internal global::Avalonia.Controls.TextBlock PasswordValidation;\n        internal global::Avalonia.Controls.ListBox AwesomeListView;\n        internal global::Avalonia.Controls.TextBox ConfirmPasswordTextBox;\n        internal global::Avalonia.Controls.TextBlock ConfirmPasswordValidation;\n        internal global::Avalonia.Controls.Button SignUpButton;\n        internal global::Avalonia.Controls.TextBlock CompoundValidation;\n\n        public void InitializeComponent(bool loadXaml = true, bool attachDevTools = true)\n        {\n            if (loadXaml)\n            {\n                AvaloniaXamlLoader.Load(this);\n            }\n\n// This will be added only if you install Avalonia.Diagnostics.\n#if DEBUG\n            if (attachDevTools)\n            {\n                this.AttachDevTools();\n            } \n#endif\n\n            UserNameTextBox = this.FindNameScope()?.Find<global::Avalonia.NameGenerator.Sandbox.Controls.CustomTextBox>(\"UserNameTextBox\");\n            UserNameValidation = this.FindNameScope()?.Find<global::Avalonia.Controls.TextBlock>(\"UserNameValidation\");\n            PasswordTextBox = this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"PasswordTextBox\");\n            PasswordValidation = this.FindNameScope()?.Find<global::Avalonia.Controls.TextBlock>(\"PasswordValidation\");\n            AwesomeListView = this.FindNameScope()?.Find<global::Avalonia.Controls.ListBox>(\"AwesomeListView\");\n            ConfirmPasswordTextBox = this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"ConfirmPasswordTextBox\");\n            ConfirmPasswordValidation = this.FindNameScope()?.Find<global::Avalonia.Controls.TextBlock>(\"ConfirmPasswordValidation\");\n            SignUpButton = this.FindNameScope()?.Find<global::Avalonia.Controls.Button>(\"SignUpButton\");\n            CompoundValidation = this.FindNameScope()?.Find<global::Avalonia.Controls.TextBlock>(\"CompoundValidation\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Control Properties with OnlyProperties Mode in Avalonia\nDESCRIPTION: This code snippet demonstrates the C# code generated by Avalonia.NameGenerator in the 'OnlyProperties' mode. It creates auto-implemented properties that find and return the named XAML elements directly from the name scope when accessed.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/src/tools/Avalonia.Generators/README.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia.Controls;\n\nnamespace Avalonia.NameGenerator.Sandbox.Views\n{\n    partial class SignUpView\n    {\n        internal global::Avalonia.NameGenerator.Sandbox.Controls.CustomTextBox UserNameTextBox => this.FindNameScope()?.Find<global::Avalonia.NameGenerator.Sandbox.Controls.CustomTextBox>(\"UserNameTextBox\");\n        public global::Avalonia.Controls.TextBlock UserNameValidation => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBlock>(\"UserNameValidation\");\n        private global::Avalonia.Controls.TextBox PasswordTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"PasswordTextBox\");\n        internal global::Avalonia.Controls.TextBlock PasswordValidation => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBlock>(\"PasswordValidation\");\n        internal global::Avalonia.Controls.TextBox ConfirmPasswordTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"ConfirmPasswordTextBox\");\n        internal global::Avalonia.Controls.TextBlock ConfirmPasswordValidation => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBlock>(\"ConfirmPasswordValidation\");\n        internal global::Avalonia.Controls.Button SignUpButton => this.FindNameScope()?.Find<global::Avalonia.Controls.Button>(\"SignUpButton\");\n        internal global::Avalonia.Controls.TextBlock CompoundValidation => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBlock>(\"CompoundValidation\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Avalonia to Local NuGet Cache\nDESCRIPTION: Command to build Avalonia and generate NuGet packages that are placed in a local NuGet cache for testing local changes. Creates packages with version 9999.0.0-localbuild.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnuke --target BuildToNuGetCache --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Creating Avalonia NuGet Packages with Nuke\nDESCRIPTION: Command to create NuGet packages for Avalonia in Release configuration using Nuke. This will automatically compile the code and run tests before packaging.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnuke --target Package --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Running Avalonia Tests with Nuke\nDESCRIPTION: Command to run the Avalonia test suite in Release configuration using the Nuke build system, which verifies the functionality of the compiled code.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnuke --target RunTests --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Configuring XamlNameReferenceGenerator in XML Project File\nDESCRIPTION: XML configuration showing the available MSBuild properties for customizing the behavior of the XamlNameReferenceGenerator in a project file.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/src/tools/Avalonia.Generators/README.md#2025-04-23_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n    <PropertyGroup>\n        <AvaloniaNameGeneratorBehavior>InitializeComponent</AvaloniaNameGeneratorBehavior>\n        <AvaloniaNameGeneratorDefaultFieldModifier>internal</AvaloniaNameGeneratorDefaultFieldModifier>\n        <AvaloniaNameGeneratorFilterByPath>*</AvaloniaNameGeneratorFilterByPath>\n        <AvaloniaNameGeneratorFilterByNamespace>*</AvaloniaNameGeneratorFilterByNamespace>\n        <AvaloniaNameGeneratorViewFileNamingStrategy>NamespaceAndClassName</AvaloniaNameGeneratorViewFileNamingStrategy>\n    </PropertyGroup>\n    <!-- ... -->\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Referencing XamlNameReferenceGenerator as a Submodule in XML\nDESCRIPTION: XML configuration to reference the generator as a submodule in a project file, including XAML files as additional files for the source generator.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/src/tools/Avalonia.Generators/README.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<ItemGroup>\n    <!-- Remember to ensure XAML files are included via <AdditionalFiles>,\n         otherwise C# source generator won't see XAML files. -->\n    <AdditionalFiles Include=\"**\\*.xaml\"/>\n    <ProjectReference Include=\"..\\Avalonia.NameGenerator\\Avalonia.NameGenerator.csproj\"\n                      OutputItemType=\"Analyzer\"\n                      ReferenceOutputAssembly=\"false\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Generated Properties in C# Code-Behind\nDESCRIPTION: C# code demonstrating how to use the generated property for the named control in the code-behind file of the view.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/src/tools/Avalonia.Generators/README.md#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Avalonia.Controls;\n\nnamespace Sample.App\n{\n    public partial class SignUpView : Window\n    {\n        public SignUpView()\n        {\n            // This method is generated. Call it before accessing any\n            // of the generated properties. The 'UserNameTextBox'\n            // property is also generated.\n            InitializeComponent();\n            UserNameTextBox.Text = \"Joseph\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nuke Build Tool for Local NuGet Cache\nDESCRIPTION: Command to install the Nuke global tool for generating local NuGet packages from Avalonia source code.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install Nuke.GlobalTool --global\n```\n\n----------------------------------------\n\nTITLE: Declaring Avalonia.Metadata Attributes\nDESCRIPTION: Two XML-style type declarations for NotClientImplementableAttribute and UnstableAttribute in the Avalonia.Metadata namespace.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/build/ApiCompatAttributeExcludeList.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nT:Avalonia.Metadata.NotClientImplementableAttribute\nT:Avalonia.Metadata.UnstableAttribute\n```\n\n----------------------------------------\n\nTITLE: Building Avalonia with Nuke (Compile Only)\nDESCRIPTION: Command to compile the Avalonia project in Release configuration using the Nuke build system without creating packages or running tests.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnuke --target Compile --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Installing Nuke Build Tool\nDESCRIPTION: Command to install the Nuke global tool, which is used for building Avalonia and creating NuGet packages. Specifies version 6.2.1 for compatibility.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install --global Nuke.GlobalTool --version 6.2.1\n```\n\n----------------------------------------\n\nTITLE: Compiling Native Libraries for macOS\nDESCRIPTION: Command to build the required native libraries on macOS using the build script. This step is necessary before building the .NET components on macOS.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh CompileNative\n```\n\n----------------------------------------\n\nTITLE: Cloning Avalonia Repository for macOS/Linux\nDESCRIPTION: Commands to clone the Avalonia repository and recursively initialize all submodules, which is specifically required for macOS and Linux builds.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/AvaloniaUI/Avalonia.git\ncd Avalonia\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Installing Tizen Workload with Bash\nDESCRIPTION: Bash command to install the Samsung Tizen .NET workload on Unix-based systems, required for targeting Tizen devices with Avalonia UI applications.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Installing Tizen Workload with PowerShell\nDESCRIPTION: PowerShell command to install the Samsung Tizen .NET workload, which is required for targeting Tizen devices with Avalonia UI applications.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/Documentation/build.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n(New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.ps1') | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Creating App Bundle for IntegrationTestApp on macOS\nDESCRIPTION: This bash command creates an app bundle for the IntegrationTestApp, which is a prerequisite for running integration tests on macOS.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.IntegrationTests.Appium/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bundle.sh\n```\n\n----------------------------------------\n\nTITLE: Registering App Bundle on macOS\nDESCRIPTION: This command registers the IntegrationTestApp bundle on macOS, which is required before running the integration tests.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.IntegrationTests.Appium/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopen -n ./bin/Debug/net8.0/osx-arm64/publish/IntegrationTestApp.app\n```\n\n----------------------------------------\n\nTITLE: Running Appium 2 with Custom Base Path on macOS\nDESCRIPTION: This command starts Appium 2 with a custom base path, which is required for running tests with Appium 2 on macOS.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.IntegrationTests.Appium/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium --base-path=/wd/hub\n```\n\n----------------------------------------\n\nTITLE: Defining Generated Properties for Avalonia Controls in C#\nDESCRIPTION: Auto-generated partial class containing property declarations for accessing named controls in an Avalonia UI view. The properties use FindNameScope() to locate controls by their x:Name values at runtime. Each property is marked with GeneratedCode attribute indicating it was created by the Avalonia name generator.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/OnlyProperties/GeneratedCode/CustomControls.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia.Controls;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.ReactiveUI.RoutedViewHost ClrNamespaceRoutedViewHost => this.FindNameScope()?.Find<global::Avalonia.ReactiveUI.RoutedViewHost>(\"ClrNamespaceRoutedViewHost\");\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.ReactiveUI.RoutedViewHost UriRoutedViewHost => this.FindNameScope()?.Find<global::Avalonia.ReactiveUI.RoutedViewHost>(\"UriRoutedViewHost\");\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Controls.CustomTextBox UserNameTextBox => this.FindNameScope()?.Find<global::Controls.CustomTextBox>(\"UserNameTextBox\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Line Breaking Rules Table\nDESCRIPTION: This table defines the line breaking behavior between pairs of Unicode character classes. Each row and column represents a character class, and the intersecting cell indicates the line breaking rule between those classes.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Base.UnitTests/Media/TextFormatting/BreakPairTable.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\tOP\tCL\tCP\tQU\tGL\tNS\tEX\tSY\tIS\tPR\tPO\tNU\tAL\tHL\tID\tIN\tHY\tBA\tBB\tB2\tZW\tCM\tWJ\tH2\tH3\tJL\tJV\tJT\tRI\tEB\tEM\tZWJ\tCB\nOP\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t@\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\t^\nCL\t_\t^\t^\t%\t%\t^\t^\t^\t^\t%\t%\t_\t_\t_\t_\t_\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nCP\t_\t^\t^\t%\t%\t^\t^\t^\t^\t%\t%\t%\t%\t%\t_\t_\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nQU\t^\t^\t^\t%\t%\t%\t^\t^\t^\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t^\t#\t^\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\nGL\t%\t^\t^\t%\t%\t%\t^\t^\t^\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t^\t#\t^\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\nNS\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t_\t_\t_\t_\t_\t_\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nEX\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t_\t_\t_\t_\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nSY\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t_\t%\t_\t%\t_\t_\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nIS\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t_\t%\t%\t%\t_\t_\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nPR\t%\t^\t^\t%\t%\t%\t^\t^\t^\t_\t_\t%\t%\t%\t%\t_\t%\t%\t_\t_\t^\t#\t^\t%\t%\t%\t%\t%\t_\t%\t%\t%\t_\nPO\t%\t^\t^\t%\t%\t%\t^\t^\t^\t_\t_\t%\t%\t%\t_\t_\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nNU\t%\t^\t^\t%\t%\t%\t^\t^\t^\t%\t%\t%\t%\t%\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nAL\t%\t^\t^\t%\t%\t%\t^\t^\t^\t%\t%\t%\t%\t%\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nHL\t%\t^\t^\t%\t%\t%\t^\t^\t^\t%\t%\t%\t%\t%\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nID\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t%\t_\t_\t_\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nIN\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t_\t_\t_\t_\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nHY\t_\t^\t^\t%\t_\t%\t^\t^\t^\t_\t_\t%\t_\t_\t_\t_\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nBA\t_\t^\t^\t%\t_\t%\t^\t^\t^\t_\t_\t_\t_\t_\t_\t_\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nBB\t%\t^\t^\t%\t%\t%\t^\t^\t^\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t^\t#\t^\t%\t%\t%\t%\t%\t%\t%\t%\t%\t_\nB2\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t_\t_\t_\t_\t_\t_\t%\t%\t_\t^\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nZW\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t^\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\nCM\t%\t^\t^\t%\t%\t%\t^\t^\t^\t%\t%\t%\t%\t%\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nWJ\t%\t^\t^\t%\t%\t%\t^\t^\t^\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t^\t#\t^\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\nH2\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t%\t_\t_\t_\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t%\t%\t_\t_\t_\t%\t_\nH3\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t%\t_\t_\t_\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t%\t_\t_\t_\t%\t_\nJL\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t%\t_\t_\t_\t_\t%\t%\t%\t_\t_\t^\t#\t^\t%\t%\t%\t%\t_\t_\t_\t_\t%\t_\nJV\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t%\t_\t_\t_\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t%\t%\t_\t_\t_\t%\t_\nJT\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t%\t_\t_\t_\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t%\t_\t_\t_\t%\t_\nRI\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t_\t_\t_\t_\t_\t_\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t%\t_\t_\t%\t_\nEB\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t%\t_\t_\t_\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t%\t%\t_\nEM\t_\t^\t^\t%\t%\t%\t^\t^\t^\t_\t%\t_\t_\t_\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nZWJ\t%\t^\t^\t%\t%\t%\t^\t^\t^\t%\t%\t%\t%\t%\t_\t%\t%\t%\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\nCB\t_\t^\t^\t%\t%\t_\t^\t^\t^\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t_\t^\t#\t^\t_\t_\t_\t_\t_\t_\t_\t_\t%\t_\n```\n\n----------------------------------------\n\nTITLE: Generating Control References in Avalonia UI View Class\nDESCRIPTION: Auto-generated partial class containing properties that provide strongly-typed access to named UI controls in an Avalonia view. Each property uses FindNameScope() to locate controls by their x:Name values from XAML.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/OnlyProperties/GeneratedCode/SignUpView.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npartial class SampleView\n{\n    [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n    internal global::Controls.CustomTextBox UserNameTextBox => this.FindNameScope()?.Find<global::Controls.CustomTextBox>(\"UserNameTextBox\");\n    [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n    internal global::Avalonia.Controls.TextBlock UserNameValidation => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBlock>(\"UserNameValidation\");\n    [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n    internal global::Avalonia.Controls.TextBox PasswordTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"PasswordTextBox\");\n    [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n    internal global::Avalonia.Controls.TextBlock PasswordValidation => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBlock>(\"PasswordValidation\");\n    [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n    internal global::Avalonia.Controls.ListBox AwesomeListView => this.FindNameScope()?.Find<global::Avalonia.Controls.ListBox>(\"AwesomeListView\");\n    [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n    internal global::Avalonia.Controls.TextBox ConfirmPasswordTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"ConfirmPasswordTextBox\");\n    [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n    internal global::Avalonia.Controls.TextBlock ConfirmPasswordValidation => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBlock>(\"ConfirmPasswordValidation\");\n    [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n    internal global::Avalonia.Controls.Documents.Run SignUpButtonDescription => this.FindNameScope()?.Find<global::Avalonia.Controls.Documents.Run>(\"SignUpButtonDescription\");\n    [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n    internal global::Avalonia.Controls.Button SignUpButton => this.FindNameScope()?.Find<global::Avalonia.Controls.Button>(\"SignUpButton\");\n    [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n    internal global::Avalonia.Controls.TextBlock CompoundValidation => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBlock>(\"CompoundValidation\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auto-Generated Properties for Avalonia UI Controls in C#\nDESCRIPTION: This code snippet defines auto-generated properties for TextBox and Button controls in a SampleView class. It uses the FindNameScope method to locate controls by their names, which are likely defined in a separate XAML file.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/OnlyProperties/GeneratedCode/xNamedControls.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia.Controls;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox PasswordTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"PasswordTextBox\");\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.Button SignUpButton => this.FindNameScope()?.Find<global::Avalonia.Controls.Button>(\"SignUpButton\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auto-Generated Properties for Avalonia UI Controls in C#\nDESCRIPTION: This code snippet defines auto-generated properties for Avalonia UI controls within a partial class. It uses the FindNameScope method to locate and return UI elements by their string identifiers. The properties include TextBoxes for user input and Buttons for actions, with varying access modifiers.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/OnlyProperties/GeneratedCode/FieldModifier.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia.Controls;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        public global::Avalonia.Controls.TextBox FirstNameTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"FirstNameTextBox\");\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        public global::Avalonia.Controls.TextBox LastNameTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"LastNameTextBox\");\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        protected global::Avalonia.Controls.TextBox PasswordTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"PasswordTextBox\");\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        private global::Avalonia.Controls.TextBox ConfirmPasswordTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"ConfirmPasswordTextBox\");\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.Button SignUpButton => this.FindNameScope()?.Find<global::Avalonia.Controls.Button>(\"SignUpButton\");\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.Button RegisterButton => this.FindNameScope()?.Find<global::Avalonia.Controls.Button>(\"RegisterButton\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Controls in Avalonia UI with Generated Properties\nDESCRIPTION: Partial class implementation that provides type-safe access to named controls in an Avalonia UI view. The code creates property accessors for TextBox and ListBox controls that use the FindNameScope method to locate elements by name at runtime.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/OnlyProperties/GeneratedCode/DataTemplates.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia.Controls;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.ListBox NamedListBox => this.FindNameScope()?.Find<global::Avalonia.Controls.ListBox>(\"NamedListBox\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing TextBox Control in Avalonia UI using C#\nDESCRIPTION: This code snippet defines a partial class with a generated property accessor for a TextBox control. It uses the FindNameScope method to locate the control by its name 'UserNameTextBox' in the Avalonia UI framework.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/OnlyProperties/GeneratedCode/ControlWithoutWindow.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia.Controls;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Partial Class with TextBox Property in C# for Avalonia UI\nDESCRIPTION: This code snippet defines a partial class SampleView with a generated property to access a TextBox control named UserNameTextBox. It uses Avalonia's name scope system to find the control by name.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/OnlyProperties/GeneratedCode/xNamedControl.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia.Controls;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Partial Class for Avalonia UI in C#\nDESCRIPTION: Declares a partial class named SampleView in the Sample.App namespace with a dependency on Avalonia.Controls. This is an auto-generated file, likely part of a code-behind pattern for an Avalonia UI view.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/OnlyProperties/GeneratedCode/NoNamedControls.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia.Controls;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TextBox Control Binding in Avalonia UI with C#\nDESCRIPTION: This code snippet defines a partial class SampleView with an auto-generated property for binding a TextBox control named 'UserNameTextBox'. It uses Avalonia's control finding mechanism to locate the TextBox within the current name scope.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/OnlyProperties/GeneratedCode/AttachedProps.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia.Controls;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Property for TextBox Control in Avalonia UI (C#)\nDESCRIPTION: This code snippet defines a partial class SampleView with a generated property to access a TextBox control named UserNameTextBox. It uses the Avalonia UI framework's name scope to find the control.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/OnlyProperties/GeneratedCode/NamedControl.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia.Controls;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox => this.FindNameScope()?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Components in Avalonia UI SampleView Class in C#\nDESCRIPTION: This code defines a partial class SampleView with control field declarations and an initialization method. The InitializeComponent method loads XAML and wires up control references by finding them in the XAML namescope. This pattern is common in MVVM applications to connect UI elements defined in XAML with their code-behind representations.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/NamedControls.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Markup.Xaml;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox PasswordTextBox;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.Button SignUpButton;\n\n        /// <summary>\n        /// Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).\n        /// </summary>\n        /// <param name=\"loadXaml\">Should the XAML be loaded into the component.</param>\n\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public void InitializeComponent(bool loadXaml = true)\n        {\n            if (loadXaml)\n            {\n                AvaloniaXamlLoader.Load(this);\n            }\n\n            var __thisNameScope__ = this.FindNameScope();\n            UserNameTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n            PasswordTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"PasswordTextBox\");\n            SignUpButton = __thisNameScope__?.Find<global::Avalonia.Controls.Button>(\"SignUpButton\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Avalonia UI Controls in C#\nDESCRIPTION: Auto-generated partial class that declares and initializes UI components for a sample view. Contains field declarations for text boxes and buttons, along with an initialization method that loads XAML and wires up control references.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/xNamedControls.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Markup.Xaml;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox PasswordTextBox;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.Button SignUpButton;\n\n        /// <summary>\n        /// Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).\n        /// </summary>\n        /// <param name=\"loadXaml\">Should the XAML be loaded into the component.</param>\n\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public void InitializeComponent(bool loadXaml = true)\n        {\n            if (loadXaml)\n            {\n                AvaloniaXamlLoader.Load(this);\n            }\n\n            var __thisNameScope__ = this.FindNameScope();\n            UserNameTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n            PasswordTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"PasswordTextBox\");\n            SignUpButton = __thisNameScope__?.Find<global::Avalonia.Controls.Button>(\"SignUpButton\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UI Control Fields in Avalonia SampleView Class\nDESCRIPTION: This snippet defines the internal UI control fields for a SampleView class in an Avalonia application. Each field is marked with a GeneratedCode attribute indicating it was auto-generated by Avalonia's NameGenerator component.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/SignUpView.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Markup.Xaml;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Controls.CustomTextBox UserNameTextBox;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBlock UserNameValidation;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox PasswordTextBox;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBlock PasswordValidation;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.ListBox AwesomeListView;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox ConfirmPasswordTextBox;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBlock ConfirmPasswordValidation;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.Documents.Run SignUpButtonDescription;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.Button SignUpButton;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBlock CompoundValidation;\n```\n\n----------------------------------------\n\nTITLE: Initializing Avalonia UI Component with XAML Loading\nDESCRIPTION: This method initializes a component by loading XAML markup. It's decorated with auto-generated code attributes and includes a parameter to control whether XAML should be loaded. When loadXaml is true, it uses AvaloniaXamlLoader to load the XAML markup into the component.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/NoNamedControls.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void InitializeComponent(bool loadXaml = true)\n{\n    if (loadXaml)\n    {\n        AvaloniaXamlLoader.Load(this);\n    }\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Avalonia UI Component with TextBox Control\nDESCRIPTION: Auto-generated partial class that handles component initialization and control reference wiring. Includes a TextBox control field and an initialization method that optionally loads XAML and finds control references in the visual tree.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/NamedControl.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Markup.Xaml;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox;\n\n        /// <summary>\n        /// Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).\n        /// </summary>\n        /// <param name=\"loadXaml\">Should the XAML be loaded into the component.</param>\n\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public void InitializeComponent(bool loadXaml = true)\n        {\n            if (loadXaml)\n            {\n                AvaloniaXamlLoader.Load(this);\n            }\n\n            var __thisNameScope__ = this.FindNameScope();\n            UserNameTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: InitializeComponent Method for Avalonia UI (C#)\nDESCRIPTION: Implements the InitializeComponent method that loads XAML markup and wires up named controls to their corresponding class fields. The method finds controls in the visual tree's name scope and assigns them to the appropriate properties.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/FieldModifier.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\npublic void InitializeComponent(bool loadXaml = true)\n{\n    if (loadXaml)\n    {\n        AvaloniaXamlLoader.Load(this);\n    }\n\n    var __thisNameScope__ = this.FindNameScope();\n    FirstNameTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"FirstNameTextBox\");\n    LastNameTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"LastNameTextBox\");\n    PasswordTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"PasswordTextBox\");\n    ConfirmPasswordTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"ConfirmPasswordTextBox\");\n    SignUpButton = __thisNameScope__?.Find<global::Avalonia.Controls.Button>(\"SignUpButton\");\n    RegisterButton = __thisNameScope__?.Find<global::Avalonia.Controls.Button>(\"RegisterButton\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Avalonia UI Component Class Structure\nDESCRIPTION: Partial class implementation for SampleView that defines internal controls and initialization logic. Handles XAML loading and control references through name scope lookups.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/CustomControls.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Markup.Xaml;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.ReactiveUI.RoutedViewHost ClrNamespaceRoutedViewHost;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.ReactiveUI.RoutedViewHost UriRoutedViewHost;\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Controls.CustomTextBox UserNameTextBox;\n\n        /// <summary>\n        /// Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).\n        /// </summary>\n        /// <param name=\"loadXaml\">Should the XAML be loaded into the component.</param>\n\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public void InitializeComponent(bool loadXaml = true)\n        {\n            if (loadXaml)\n            {\n                AvaloniaXamlLoader.Load(this);\n            }\n\n            var __thisNameScope__ = this.FindNameScope();\n            ClrNamespaceRoutedViewHost = __thisNameScope__?.Find<global::Avalonia.ReactiveUI.RoutedViewHost>(\"ClrNamespaceRoutedViewHost\");\n            UriRoutedViewHost = __thisNameScope__?.Find<global::Avalonia.ReactiveUI.RoutedViewHost>(\"UriRoutedViewHost\");\n            UserNameTextBox = __thisNameScope__?.Find<global::Controls.CustomTextBox>(\"UserNameTextBox\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Named Controls in Avalonia UI Component in C#\nDESCRIPTION: This code declares a named control reference that is wired up during component initialization. It defines a TextBox control that can be referenced in code-behind after XAML loading.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/ControlWithoutWindow.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\ninternal global::Avalonia.Controls.TextBox UserNameTextBox;\n```\n\n----------------------------------------\n\nTITLE: Initializing Avalonia UI Components with XAML Loading in C#\nDESCRIPTION: This method initializes Avalonia UI components by loading XAML markup and finding named controls in the component's scope. It uses AvaloniaXamlLoader to load the XAML if specified and locates the TextBox control in the name scope.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/ControlWithoutWindow.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\npublic void InitializeComponent(bool loadXaml = true)\n{\n    if (loadXaml)\n    {\n        AvaloniaXamlLoader.Load(this);\n    }\n\n    var __thisNameScope__ = this.FindNameScope();\n    UserNameTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Avalonia UI Component with XAML Loading\nDESCRIPTION: Partial class implementation that provides component initialization, XAML loading, and control wiring functionality for an Avalonia UI view. Includes conditional debug tools attachment and name scope resolution for controls like TextBox.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/AttachedPropsWithDevTools.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npartial class SampleView\n{\n    [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n    internal global::Avalonia.Controls.TextBox UserNameTextBox;\n\n    /// <summary>\n    /// Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).\n    /// </summary>\n    /// <param name=\"loadXaml\">Should the XAML be loaded into the component.</param>\n    /// <param name=\"attachDevTools\">Should the dev tools be attached.</param>\n\n    [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n    public void InitializeComponent(bool loadXaml = true, bool attachDevTools = true)\n    {\n        if (loadXaml)\n        {\n            AvaloniaXamlLoader.Load(this);\n        }\n\n#if DEBUG\n        if (attachDevTools)\n        {\n            this.AttachDevTools();\n        }\n#endif\n\n        var __thisNameScope__ = this.FindNameScope();\n        UserNameTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Avalonia UI View Component in C#\nDESCRIPTION: Auto-generated partial class that handles component initialization, XAML loading, and control wiring for an Avalonia UI view. Includes a TextBox control named UserNameTextBox and provides initialization logic through InitializeComponent method.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/AttachedProps.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Markup.Xaml;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox;\n\n        /// <summary>\n        /// Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).\n        /// </summary>\n        /// <param name=\"loadXaml\">Should the XAML be loaded into the component.</param>\n\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public void InitializeComponent(bool loadXaml = true)\n        {\n            if (loadXaml)\n            {\n                AvaloniaXamlLoader.Load(this);\n            }\n\n            var __thisNameScope__ = this.FindNameScope();\n            UserNameTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MSBuild Properties for Avalonia UI Dependencies\nDESCRIPTION: Imports various MSBuild property files for essential dependencies including testing frameworks (xUnit), mocking (Moq), graphics libraries (SkiaSharp, SharpDX), and utility packages (Rx, Splat). These properties define version numbers and build configurations for the project dependencies.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/build/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Import Project=\"..\\..\\build\\JetBrains.Annotations.props\" />\n<Import Project=\"..\\..\\build\\JetBrains.dotMemoryUnit.props\" />\n<Import Project=\"..\\..\\build\\Magick.NET-Q16-AnyCPU.props\" />\n<Import Project=\"..\\..\\build\\Microsoft.CSharp.props\" />\n<Import Project=\"..\\..\\build\\Microsoft.Reactive.Testing.props\" />\n<Import Project=\"..\\..\\build\\Moq.props\" />\n<Import Project=\"..\\..\\build\\NetCore.props\" />\n<Import Project=\"..\\..\\build\\Rx.props\" />\n<Import Project=\"..\\..\\build\\SharpDX.props\" />\n<Import Project=\"..\\..\\build\\SkiaSharp.Desktop.props\" />\n<Import Project=\"..\\..\\build\\SkiaSharp.props\" />\n<Import Project=\"..\\..\\build\\Splat.props\" />\n<Import Project=\"..\\..\\build\\XUnit.props\" />\n```\n\n----------------------------------------\n\nTITLE: Android R Class Resource ID Mapping\nDESCRIPTION: Example of an auto-generated R class that maps resource files to numeric IDs. This class provides static access to resource identifiers for drawables, layouts, and string resources.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/samples/ControlCatalog.Android/Resources/AboutResources.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class R {\n    public class drawable {\n        public const int icon = 0x123;\n    }\n\n    public class layout {\n        public const int main = 0x456;\n    }\n\n    public class strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Render Test Method Naming Pattern in C#\nDESCRIPTION: Shows the naming convention specifically for render tests in Avalonia, describing the visual output being tested.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Rectangle_2px_Stroke_Filled()\n```\n\n----------------------------------------\n\nTITLE: Test Method Naming Pattern for Avalonia Testing in C#\nDESCRIPTION: Demonstrates the sentence-style naming convention for test methods in Avalonia, using underscores to separate words describing the test's purpose.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Calling_Foo_Should_Increment_Bar()\n```\n\n----------------------------------------\n\nTITLE: Initializing Avalonia UI Component in C#\nDESCRIPTION: This code snippet defines a partial class SampleView with an InitializeComponent method. The method loads XAML markup if specified and finds the UserNameTextBox control in the component's scope. It's designed to work with Avalonia UI framework.\nSOURCE: https://github.com/avaloniaui/avalonia/blob/master/tests/Avalonia.Generators.Tests/InitializeComponent/GeneratedInitializeComponent/xNamedControl.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\n\nusing Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Markup.Xaml;\n\nnamespace Sample.App\n{\n    partial class SampleView\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        internal global::Avalonia.Controls.TextBox UserNameTextBox;\n\n        /// <summary>\n        /// Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).\n        /// </summary>\n        /// <param name=\"loadXaml\">Should the XAML be loaded into the component.</param>\n\n        [global::System.CodeDom.Compiler.GeneratedCode(\"Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator\", \"$GeneratorVersion\")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public void InitializeComponent(bool loadXaml = true)\n        {\n            if (loadXaml)\n            {\n                AvaloniaXamlLoader.Load(this);\n            }\n\n            var __thisNameScope__ = this.FindNameScope();\n            UserNameTextBox = __thisNameScope__?.Find<global::Avalonia.Controls.TextBox>(\"UserNameTextBox\");\n        }\n    }\n}\n```"
  }
]