[
  {
    "owner": "azuread",
    "repo": "android-complete",
    "content": "TITLE: Configuring JaCoCo Code Coverage Plugin for Android Projects\nDESCRIPTION: Complete configuration example showing how to set up the code coverage plugin for an Android project with different flavors and build types. The configuration demonstrates how to customize report formats, enable/disable coverage for specific tests, exclude certain flavors or classes, and set custom output directories.\nSOURCE: https://github.com/azuread/android-complete/blob/master/plugins/buildsystem/docs/CodeCoverage.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    ...\n    id 'com.gradle.plugin-publish' version '0.14.0' // or whatever version is most recent\n}\n\ncodeCoverageReport{\n    coverage.enabled = false // whether code coverage is enabled, false by default \n    html.enabled = true // whether code coverage html output is enabled, true by default \n    xml.enabled = true // whether code coverage xml output is enabled, true by default \n    csv.enabled = true // whether code coverage csv output is enabled, true by default \n\n    unitTests.enabled = true // whether code coverage tasks for unit tests will be generated\n    androidTests.enabled = true // whether code coverage tasks for instrumentation tests will be generated\n\n    excludeFlavors = [''] // the product flavors to exclude when generating the code coverage tasks\n\n    excludeClasses = [''] // additional classes to exclude - most are already catered for\n\n    destination = '/some/other/directory' // if you want to configure a custom path to save the code coverage reports, by default your report gets saved in `[project]/build/jacoco/{flavor}{build type}{project}{test type}CoverageReport`\n\n    includeNoLocationClasses = true // To include Robolectric tests in the Jacoco report this needs to be true\n}\n\nandroid {\n    buildTypes {\n        debug {\n            testCoverageEnabled true // this instructs the plugin to generate code coverage reports for this build type\n            ...\n        }\n        release {\n            testCoverageEnabled false // this instructs the plugin to NOT generate code coverage reports for this build type\n            ...\n        }\n    }\n    ...\n    productFlavors {\n        local {}\n        dist {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Plugin Development in build.gradle\nDESCRIPTION: This snippet shows the configuration of the build.gradle file for the custom plugin project. It sets up the necessary plugins for building and publishing a Gradle plugin, including java-gradle-plugin, maven-publish, and com.gradle.plugin-publish.\nSOURCE: https://github.com/azuread/android-complete/blob/master/plugins/buildsystem/docs/Overview.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'java-gradle-plugin'\n    id 'maven-publish'\n    id 'com.gradle.plugin-publish' version '0.14.0'\n}\n\ngroup 'com.microsoft.identity'\nversion '1.0'\n\npluginBundle {\n    website = 'https://github.com/azuread'\n    vcsUrl = 'https://github.com/azuread/android-complete'\n    tags = ['build']\n}\n\ngradlePlugin {\n    plugins {\n        buildPlugin {\n            id = 'com.microsoft.identity.buildsystem'\n            implementationClass = 'com.microsoft.identity.buildsystem.BuildPlugin'\n            displayName = \"AuthClient Android Build Plugin\"\n            description = \"Gradle plugin to encapsulate custom build tasks and configuration for AuthClient android projects.\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradle Plugin in Java\nDESCRIPTION: This snippet shows the basic structure of implementing a Gradle plugin in Java. It demonstrates the apply method, which is the entry point for the plugin, and how to interact with the Project object.\nSOURCE: https://github.com/azuread/android-complete/blob/master/plugins/buildsystem/docs/Overview.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void apply(final Project project) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Android Plugin Extensions in Gradle Plugin\nDESCRIPTION: This code demonstrates how to interact with Android plugin extensions within a custom Gradle plugin. It shows how to ensure the Android plugin is applied before accessing its extensions, specifically for the Android Library plugin.\nSOURCE: https://github.com/azuread/android-complete/blob/master/plugins/buildsystem/docs/Overview.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nproject.getPluginManager().withPlugin(ANDROID_LIBRARY_PLUGIN_ID, appliedPlugin -> {\n    LibraryExtension libraryExtension = project.getExtensions().findByType(LibraryExtension.class);\n    \n});\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Template for Android Build Environment\nDESCRIPTION: Template used to generate Dockerfiles for different Android API levels. It defines the base image, environment variables, and installation steps for Android SDK, CMake, and other build dependencies.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docker/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n#\n# THIS IS A GENERATED-FILE.  DO NOT EDIT DIRECTLY\n#\nFROM {{dockerBaseImage}} as BASE\nUSER root\nENV SDK_URL=\"{{androidCommandLineUtilsUrl}}\" \\\n    ANDROID_HOME=\"/usr/local/android-sdk\" \\\n    CMAKE_BIN_URL=\"{{cmakeBinUrl}}{{cmakeBinFile}}\" \\\n    CMAKE_TAR_FILE=\"{{cmakeBinFile}}\" \\\n    CMAKE_HOME=\"/usr/local/cmake\" \\\n    CMAKE_HOME_BIN=\"/usr/local/cmake/{{cmakeBinFolder}}/bin\" \\\n    NINJA_BIN_URL=\"{{ninjaBinUrl}}\" \\\n    NINJA_ZIP_FILE=\"{{ninjaZipFile}}\"\nRUN apt-get update \\\n    &&  apt-get -y install build-essential\n# Download Android SDK and Fix SDKManager for JDK 11\nRUN mkdir \"$ANDROID_HOME\" .android \\\n    && cd \"$ANDROID_HOME\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Properties for Azure DevOps Authentication\nDESCRIPTION: Adds necessary credentials to gradle.properties file for accessing private Azure DevOps package repositories. This includes tokens for Android DevX Feed, Authenticator App Feed, and Office Feed.\nSOURCE: https://github.com/azuread/android-complete/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nvstsUsername=VSTS \nvstsMavenAccessToken=[Insert a PAT for the Android DevX Feed here]\nadoMsazureAuthAppAccessToken=[Insert a PAT for the Authenticator App Feed here] (Only needed if you set up Authenticator App Dependency Feed)\nvstsOfficeMavenAccessToken=[Insert a PAT for Office Feed here]\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Repositories in settings.gradle\nDESCRIPTION: This groovy snippet demonstrates how to configure plugin repositories in the settings.gradle file. It shows how to add custom repositories for resolving plugin dependencies that are not published in the Gradle Plugin Portal.\nSOURCE: https://github.com/azuread/android-complete/blob/master/plugins/buildsystem/docs/Overview.md#2025-04-23_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\npluginManagement {\n    repositories {\n        mavenLocal()\n        google()\n        mavenCentral()\n        gradlePluginPortal()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Constants into Android BuildConfig\nDESCRIPTION: Example of how to inject a custom string constant named 'MY_CONSTANT' into the BuildConfig.java file of an Android module using the buildConfigField method in the build.gradle file.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/ProjectBuild/build_config.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nbuildConfigField(\"String\", \"MY_CONSTANT\", \"my-value\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Dependencies in GitHub Actions Workflow\nDESCRIPTION: This YAML snippet demonstrates how to configure job dependencies in a GitHub Actions workflow. It shows how to make jobs run sequentially by using the 'needs' keyword.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/Github/actions/githubactions.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  incrementLatestPatch:\n\n  build:\n    # Make this workflow sequential\n    needs: incrementLatestPatch\n```\n\n----------------------------------------\n\nTITLE: Setting and Accessing Environment Variables in GitHub Actions\nDESCRIPTION: This YAML snippet shows how to set environment variables in a GitHub Actions workflow and how to access them using different syntaxes. It also demonstrates how to access secrets from the GitHub context.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/Github/actions/githubactions.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  FIRST_NAME: Mona\n  middle_name: The\n  Last_Name: Octocat\n\n# environment variables are access by prefixing with a single dollar sign\nrun:\n    $FIRST_NAME + 'was something'\n\n# the context can be accessed using the following syntax\n${{ context }}\n\n# Here's an example of getting the github pat\n${{ secrets.ACTION_PAT }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Triggers in GitHub Actions Workflow\nDESCRIPTION: This YAML snippet demonstrates how to configure event triggers in a GitHub Actions workflow. It shows how to ignore specific paths, branches, and tags when triggering actions on push events.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/Github/actions/githubactions.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Ignore path\non:\n  push:\n    paths-ignore:\n    - 'docs/**'\n\n# Ignore branches and/or tags\non:\n  push:\n    # Sequence of patterns matched against refs/heads\n    branches-ignore:\n      # Push events to branches matching refs/heads/mona/octocat\n      - 'mona/octocat'\n      # Push events to branches matching refs/heads/releases/beta/3-alpha\n      - 'releases/**-alpha'\n    # Sequence of patterns matched against refs/tags\n    tags-ignore:\n      - v1.*           # Push events to tags v1.0, v1.1, and v1.9\n```\n\n----------------------------------------\n\nTITLE: Using Project Lifecycle Events in Gradle Plugin\nDESCRIPTION: This snippet shows how to execute code in response to specific project lifecycle events within a Gradle plugin. It demonstrates using the afterEvaluate event as an example.\nSOURCE: https://github.com/azuread/android-complete/blob/master/plugins/buildsystem/docs/Overview.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void apply(final Project project) {\n\n    project.afterEvaluate(project1 -> {\n        //Add code to be executed after the project is evaluated\n    });\n\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Test Commands in Android\nDESCRIPTION: Examples of executing Android tests via Gradle command line. The command follows the pattern of module:testCommand, where module is the project name and testCommand is the specific test task to execute.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/Automation/how_to_run_tests.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew <module>:<testCommand>\n```\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew msal:testLocalDebugUnitTest\n```\n\n----------------------------------------\n\nTITLE: Overriding SpotBugs Configuration in Gradle Build File\nDESCRIPTION: Example of how to override the default SpotBugs configuration in an individual project's build.gradle file. This snippet shows how to specify a custom baseline file and configure the report formats.\nSOURCE: https://github.com/azuread/android-complete/blob/master/plugins/buildsystem/docs/Spotbugs.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.withType(com.github.spotbugs.snom.SpotBugsTask) {\n    baselineFile = file('<PATH TO OVERRIDDEN BASELINE FILE>')\n    reports {\n        xml.enabled = false\n        html.enabled = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SpotBugs Baseline File in BuildPlugin\nDESCRIPTION: Code snippet showing how the BuildPlugin sets a baseline file for SpotBugs if one exists at the specified path. The baseline file is used for comparing current analysis results against previous ones.\nSOURCE: https://github.com/azuread/android-complete/blob/master/plugins/buildsystem/docs/Spotbugs.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal File baselineFile = project.file(\"../config/spotbugs/baseline.xml\");\nif(baselineFile.exists()) {\n    spotBugsExtension.getBaselineFile().set(baselineFile);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Gradle Task with Project Property\nDESCRIPTION: Command line syntax for supplying a project property to a Gradle task. This allows customizing build parameters by passing property name-value pairs.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/ProjectBuild/gradle_project_properties.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew <task> -P<property-name>=<value>\n```\n\n----------------------------------------\n\nTITLE: Running MSAL Unit Tests with Custom Slice Property\nDESCRIPTION: Example command that runs unit tests in the MSAL module while setting the 'slice' property to target a specific test slice for token requests.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/ProjectBuild/gradle_project_properties.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew msal:testLocalDebugUnitTest -Pslice=<testslice>\n```\n\n----------------------------------------\n\nTITLE: Generated Dockerfile for Android API Level 29\nDESCRIPTION: The resulting Dockerfile created from the template and parameters file. It contains three build stages: BASE, DBI_UNIT for unit tests, and DBI_INSTRUMENTED for instrumented tests with an Android emulator.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docker/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n#\n# THIS IS A GENERATED-FILE.  DO NOT EDIT DIRECTLY\n#\nFROM gradle:6.7.1-jdk11 as BASE\nUSER root\nENV SDK_URL=\"https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip\" \\\n    ANDROID_HOME=\"/usr/local/android-sdk\" \\\n    Blah, blah... excluding for brevity\n\nFROM BASE as DBI_UNIT\nUSER root\nENV PATH=\"/usr/local/cmake/cmake-3.18.5-Linux-x86_64/bin:/usr/local/android-sdk/emulator:/usr/local/android-sdk/tools:/usr/local/android-sdk/tools/bin:/usr/local/android-sdk/platform-tools:${PATH}\" \\\n    ANDROID_HOME=\"/usr/local/android-sdk\" \\\n    ANDROID_VERSION=29 \\\n    ANDROID_BUILD_TOOLS_VERSION=30.0.2 \\\n    ANDROID_NDK_VERSION=ndk;21.1.6352462\n# Install Android Build Tool and Libraries\nRUN $ANDROID_HOME/tools/bin/sdkmanager --update\nRUN touch /root/.android/repositories.cfg\nRUN $ANDROID_HOME/tools/bin/sdkmanager \"build-tools;${ANDROID_BUILD_TOOLS_VERSION}\" \\\n    \"platforms;android-${ANDROID_VERSION}\" \\\n    \"platform-tools\" \\\n    \"${ANDROID_NDK_VERSION}\" \\\n    \"emulator\" \n\nFROM DBI_UNIT as DBI_INSTRUMENTED\nUSER root\nENV ANDROID_HOME=\"/usr/local/android-sdk\" \\\n    SYSTEM_IMAGE=\"system-images;android-29;google_apis;x86_64\" \\\n    SYSTEM_IMAGE_TAG=\"google_apis\"\nRUN apt-get -y install qt5-default\nRUN $ANDROID_HOME/tools/bin/sdkmanager \"emulator\"\nRUN yes | $ANDROID_HOME/tools/bin/sdkmanager $SYSTEM_IMAGE\nRUN echo no | $ANDROID_HOME/tools/bin/avdmanager create avd --force -g $SYSTEM_IMAGE_TAG -n test -k $SYSTEM_IMAGE\n```\n\n----------------------------------------\n\nTITLE: Parameters JSON File for Android API Level 29\nDESCRIPTION: JSON configuration file containing parameters for generating a Dockerfile for Android API level 29. It specifies the base Docker image, Android SDK tools, build versions, CMake, and other required dependencies.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docker/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dockerBaseImage\": \"gradle:6.7.1-jdk11\",\n    \"androidCommandLineUtilsUrl\": \"https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip\",\n    \"androidApiLevel\": \"29\",\n    \"androidBuildToolsVersion\": \"30.0.2\",\n    \"androidNdkVersion\": \"ndk;21.1.6352462\",\n    \"androidImageVariant\": \"google_apis\",\n    \"androidImageAbi\": \"x86_64\",\n    \"cmakeBinUrl\": \"https://github.com/Kitware/CMake/releases/download/v3.18.5/\",\n    \"cmakeBinFile\": \"cmake-3.18.5-Linux-x86_64.tar.gz\",\n    \"cmakeBinFolder\": \"cmake-3.18.5-Linux-x86_64\",\n    \"ninjaBinUrl\": \"https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip\",\n    \"ninjaZipFile\": \"ninja-linux.zip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline YAML for Android Instrumented Tests\nDESCRIPTION: YAML configuration for an Azure DevOps pipeline that runs Android instrumented tests inside a Docker container. Includes cleanup steps to handle file ownership issues between the container and build agent.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docker/overview.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nname: Instrumented Tests\n\ntrigger:\n- main\n\npool:\n name: DockerBuildAgents\n\nworkspace:\n  clean: all\n\nsteps:\n- script: |\n    docker --version\n    echo =============================================\n    echo Kill all running containers if existing\n    echo =============================================\n    docker container kill $(docker ps -q)\n    echo =============================================\n    echo Run unit and instrumented inside docker container\n    echo =============================================\n    docker run --privileged --cpus=\"3\" --memory=\"12g\" -v \"$PWD\":/home/gradle/ -w /home/gradle/ authclient.azurecr.io/samples/dbi-instrumented-api30 sh scripts/run-instrumented-tests.sh\n  displayName: 'Build and test inside docker container'\n- script: |\n    echo =============================================\n    echo Cleaning up build output that is owned by docker user rather than agent user\n    echo =============================================\n    docker run --privileged --cpus=\"3\" --memory=\"12g\" -v \"$PWD\":/home/gradle/ -w /home/gradle/ authclient.azurecr.io/samples/dbi-instrumented-api30 gradle clean\n    echo =============================================\n    echo prune containers to avoid running out of disk space - shutdown containers still exist on disk\n    echo =============================================\n    docker system prune -f\n    echo =============================================\n    echo Dump environment variables for build agent\n    echo =============================================\n    env\n  displayName: 'Cleanup'\n```\n\n----------------------------------------\n\nTITLE: Script for Running Android Instrumented Tests\nDESCRIPTION: Bash script that starts the Android Debug Bridge, launches an Android emulator, and executes the instrumented tests using Gradle. Used by the Azure DevOps pipeline.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docker/overview.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\necho =============================================\necho Starting ADB Daemon\necho =============================================\nadb start-server\necho =============================================\necho Starting Emulator\necho =============================================\nemulator @test -no-window -no-audio -wipe-data &\necho =============================================\necho Gradle Version Info\necho =============================================\ngradle -version\necho =============================================\necho Running instrumented tests\necho =============================================\ngradle common:connectedDebugAndroidTest -i\n```\n\n----------------------------------------\n\nTITLE: Tagging and Pushing Docker Images to Azure Container Registry\nDESCRIPTION: Series of commands to tag local Docker images and push them to Azure Container Registry. Includes authentication to the registry using Azure CLI.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docker/overview.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Apply a tag specifying the container registry service location... to the the locally generated images\ndocker tag dbi-unit-api30 authclient.azurecr.io/samples/dbi-unit-api30\ndocker tag dbi-instrumented-api30 authclient.azurecr.io/samples/dbi-instrumented-api30\n\n# Login in to azure container registry using azure cli\naz acr login --name authclient\n\n# Push to the authclient container registry\ndocker push authclient.azurecr.io/samples/dbi-instrumented-api30\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Android Development\nDESCRIPTION: Command to run a Docker container for Android development with mounted project directory. Sets resource limits and opens an interactive terminal session.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docker/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --privileged --cpus=\"3\" --memory=\"12g\" -v \"$PWD\":/home/gradle/ -w /home/gradle/ authclient.azurecr.io/samples/dbi-instrumented-api30 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Running a Local Build Using Docker Container\nDESCRIPTION: Command to run a build process within a Docker container locally. This provides the same build environment that would be used in CI systems.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docker/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Incomplete command in the original document\n\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image for Android API Level 29\nDESCRIPTION: Docker command to build an image from the generated Dockerfile, targeting the DBI_INSTRUMENTED stage which includes the Android emulator setup for instrumented tests. The resulting image is tagged as dbi-instrumented-api29.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docker/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# In the folder containing the api level Dockerfile... don't forget the period to indicate use the dockerfile from this directory\ndocker build --target DBI_INSTRUMENTED -t dbi-instrumented-api29 .\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfiles with Node.js CLI for Android API Level\nDESCRIPTION: Command to use the Node.js CLI tool to generate a Dockerfile for a specific Android API level by combining a template with a parameters file. This helps create consistent build environments across different platforms.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docker/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in the script folder run the following\nnode ./generate.js generate --params \"../parameters/api29.json\" --outputPath \"../api29\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Android Automation Logs with ADB\nDESCRIPTION: The logs from automation tests are stored in the /sdcard/automation directory on the Android device. They can be retrieved using the adb pull command or viewed using Android Studio's Device File Explorer.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/Automation/how_to_run_tests.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nadb pull /sdcard/automation\n```\n\n----------------------------------------\n\nTITLE: Pushing APKs to Android Device\nDESCRIPTION: Command for pushing APK files to a specific location on an Android device using ADB. This is necessary for UI automation tests that require specific applications to be installed from local APKs.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/Automation/how_to_run_tests.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nadb push <path-to-apk-on-pc> <path-to-apk-on-device>\n```\n\nLANGUAGE: bash\nCODE:\n```\nadb push \"c:\\Files\\BrokerHost.apk\" \"/data/local/tmp/BrokerHost.apk\" \n```\n\n----------------------------------------\n\nTITLE: Running MSAL Release Automation Script Locally with PowerShell\nDESCRIPTION: PowerShell command to run the MSAL Release Automation Script which validates MSAL version during the release process. It requires an MSAL version (typically an RC build) and a LAB API secret.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/Automation/release_automation_scripts.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n.\\MsalReleaseAutomation.ps1 -msalVersion <msal-version> -labSecret <secret-value>\n```\n\n----------------------------------------\n\nTITLE: Running Broker Release Automation Script Locally with PowerShell\nDESCRIPTION: PowerShell command to run the Broker Release Automation Script which validates Broker functionality during release. It requires a LAB API secret and paths to both Authenticator and Company Portal APKs being tested.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/Automation/release_automation_scripts.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n.\\BrokerReleaseAutomation.ps1 -labSecret <secret-value> -authenticatorApkPath '<path-to-apk>' -companyPortalApkPath '<path-to-apk>'\n```\n\n----------------------------------------\n\nTITLE: Executing Swagger Code Generation via JAR\nDESCRIPTION: Command line instruction for generating the API client code using the downloaded Swagger codegen JAR file. Specifies input swagger.json, configuration file, and output directory.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/ProjectBuild/swagger-codegen.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nswagger-codegen-cli-3.0.25.jar generate -i ~/{path_to_common}/swagger.json -c ~/{path_to_common}/config.json -l java -o labapi\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger Code Generation Settings in JSON\nDESCRIPTION: Configuration file (config.json) that specifies the Java package structure for the generated Lab API client code. Defines model, API, and invoker package paths.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/ProjectBuild/swagger-codegen.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modelPackage\": \"com.microsoft.identity.internal.test.labapi.model\",\n    \"apiPackage\": \"com.microsoft.identity.internal.test.labapi.api\",\n    \"invokerPackage\": \"com.microsoft.identity.internal.test.labapi\" }\n```\n\n----------------------------------------\n\nTITLE: Executing Swagger Code Generation via System Install\nDESCRIPTION: Command line instruction for generating the API client code using the system-installed Swagger codegen. Uses the same parameters as the JAR version.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/ProjectBuild/swagger-codegen.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nswagger-codegen generate -i ~/{path_to_common}/swagger.json -c ~/{path_to_common}/config.json -l java -o labapi\n```\n\n----------------------------------------\n\nTITLE: Useful Docker Management Commands\nDESCRIPTION: Common Docker commands for listing running containers, viewing all containers, and cleaning up unused resources to free disk space.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docker/overview.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#lists all running containers\ndocker ps \n\n#list all containers running or not.  These take up diskspace!\ndocker container ls -a\n\n#prune containers that have been shutdown (if we're dynamically running these instead of specifying a name... these keep getting created)\ndocker system prune\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Commands for VM Agent Setup\nDESCRIPTION: Series of Azure CLI commands to create a self-hosted build agent VM for running Android instrumented tests. Includes commands to select VM size with nested virtualization support.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docker/overview.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# login into azure cli\naz login\n\n# Note please change subscription to the subscription in which you want to act.. the default is correct for me, but likely not for you!\n\n# Get the list of Azure Sites available to me\naz account list-locations \\\n  --query '[].{Location:displayName,Name:name}' \\\n  --output table\n  \n  # I chose to use westus2\n  #westus2\n  \n  # Get the list of VM Sizes\n  az vm list-sizes \\\n   --location westus2 \\\n   --query '[].{Name:name,CPU:numberOfCores,Memory:memoryInMb}' \\\n   --output table | grep _v3\n   \n   # I confirmed via documentation that this one supported nested virtualization\n   # Standard_D4_v3          4      16384\n   \n   # Get the list of available virtual machine OS images\n   az vm image list \\\n  --location westus2 \\\n  --offer ubuntu \\\n  --sku 20.04 \\\n  --all \\\n  --query '[].urn' \\\n  --output table  \n  \n  # We're using ubuntu\n  #Canonical:UbuntuServer:18.04-LTS:18.04.202012111\n\n  # Let's put the new Azure VM in an azure resource group\n  $ ./az group create \\\n  --name androidbuildagents \\\n  --location westus2\n  \n  # Let's create the Azure VM\n  $ ./az vm create \\\n  --name androidagent1 \\\n  --resource-group androidbuildagents \\\n  --size Standard_D4_v3  \\\n  --image Canonical:UbuntuServer:18.04-LTS:latest \\\n  --generate-ssh-keys \\\n  --admin-username android \\\n  --storage-sku Standard_LRS\n  \n  # Take note of where it puts the SSH keys and store these in keyvault\n  '/home/shane/.ssh/id_rsa' and '/home/shane/.ssh/id_rsa.pub' have been generated under ~/.ssh \n  \n  \n  # take note of the public IP ... this will be need to connect to the VM via SSH\n  {- Finished ..\n  \"fqdns\": \"\",\n  \"id\": \"/subscriptions/cde31ea7-d66a-4743-af52-1d2c0940779c/resourceGroups/androidbuildagents/providers/Microsoft.Compute/virtualMachines/androidagent1\",\n  \"location\": \"westus2\",\n  \"macAddress\": \"00-0D-3A-FE-E0-0B\",\n  \"powerState\": \"VM running\",\n  \"privateIpAddress\": \"10.0.0.4\",\n  \"publicIpAddress\": \"52.143.102.122\",\n  \"resourceGroup\": \"androidbuildagents\",\n  \"zones\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Android Authentication Development Environment\nDESCRIPTION: Bash commands to clone the repository, include the custom .gitconfig file, and set up the Android authentication projects as subfolders.\nSOURCE: https://github.com/azuread/android-complete/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Include the .gitconfig file included with project to your local gitconfig\ngit config --local include.path ../.gitconfig\n# Run this newly minted command to clone each repo as a subfolder\ngit droidSetup\n```\n\n----------------------------------------\n\nTITLE: Running Android UI Automation Tests with Certificate\nDESCRIPTION: Gradle command to execute UI automation tests on Android device with a certificate file. The certificate must be pushed to the device before test execution.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/Automation/labsetup.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\n./gradlew msalautomationapp:connectedLocalBrokerHostDebugAndroidTest -PlabSecret=\"<path-to-cert-pfx-file-on-device>\"\n```\n\n----------------------------------------\n\nTITLE: Running JVM Unit Tests with Installed Certificate\nDESCRIPTION: Gradle command to run JVM unit tests after installing the certificate on the local machine. No specific build flag is required.\nSOURCE: https://github.com/azuread/android-complete/blob/master/docs/Automation/labsetup.md#2025-04-23_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\n./gradlew :common:testLocalDebugUnitTest\n```"
  }
]