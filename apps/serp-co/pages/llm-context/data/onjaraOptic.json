[
  {
    "owner": "onjara",
    "repo": "optic",
    "content": "TITLE: Setting Minimum Log Level Programmatically in TypeScript\nDESCRIPTION: Demonstrates how to set the minimum log level for a logger instance programmatically, which takes highest precedence over other methods of setting the log level.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.withLevel(Level.Warn);\n```\n\n----------------------------------------\n\nTITLE: Configuring the Profiler in Optic\nDESCRIPTION: Shows how to configure the profiler with options to enable/disable features, set log levels, and specify output formatters. All settings are shown with their default values.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n//Defaults shown below\nlogger.profilingConfig()\n  .enabled(true) //Enable or disable all recording of marks or measures\n  .captureMemory(true) //Enable or disable capturing of memory information\n  .captureOps(true) //Enable or disable capturing of ops calls\n  .withLogLevel(Level.Info) //Set the log level at which the profile measure is output\n  .withFormatter(new SummaryMeasureFormatter()); //Formats the profiling log message\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Logger with Streams and Transformers in TypeScript\nDESCRIPTION: Sets up a complex logger configuration with file streams, JSON formatting, log rotation, filters, and transformers. This showcases the advanced capabilities of the Optic framework.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { every, FileStream, of } from \"jsr:@onjara/optic/streams\";\nimport {\n  between,\n  Level,\n  Logger,\n  LogRecord,\n  Stream,\n  TimeUnit,\n} from \"jsr:@onjara/optic/logger\";\nimport { JsonFormatter } from \"jsr:@onjara/optic/formatters\";\nimport { PropertyRedaction } from \"jsr:@onjara/optic/transformers\";\n\n// Configure the output file stream\nconst fileStream = new FileStream(\"logFile.txt\")\n  .withMinLogLevel(Level.Warn)\n  .withFormat(\n    new JsonFormatter()\n      .withPrettyPrintIndentation(2)\n      .withDateTimeFormat(\"YYYY.MM.DD hh:mm:ss:SSS\"),\n  )\n  .withBufferSize(10000)\n  .withLogFileInitMode(\"append\")\n  .withLogFileRotation(\n    every(200000).bytes().withLogFileRetentionPolicy(of(7).days()),\n  )\n  .withLogHeader(true)\n  .withLogFooter(true);\n\n// Configure the logger\nconst log = new Logger()\n  .withMinLogLevel(Level.Warn)\n  .addFilter((stream: Stream, logRecord: LogRecord) => logRecord.msg === \"spam\")\n  .addTransformer(new PropertyRedaction(\"password\"))\n  .addStream(fileStream);\n\n// \"info\" is lower than configured min log level of \"warn\"\nlog.info(\"Level too low. This won't be logged\");\n\n// logs \"Hello World\" and supporting metadata, returns \"Hello world\"\nconst logVal: string = log.critical(\"Hello world\", 12, true, { name: \"Poe\" });\n\n// Log records with `msg` of \"spam\" are filtered out\nlog.warn(\"spam\");\n\n// logs `msg` as { \"user\": \"jsmith\", \"password\": \"[Redacted]\" }\nlog.warn({ user: \"jsmith\", password: \"secret_password\" });\n\n// debug < min log level, so function isn't evaluated and error not thrown\nlog.debug(() => {\n  throw new Error(\"I'm not thrown\");\n});\n\n// error > min log level, so function is evaluated and `msg` is set to \"1234\"\nlog.error(() => {\n  return \"1234\";\n}); // logs \"1234\"\n\nconst x = 5;\nlog.if(x > 10).error(\"Since x < 10 this doesn't get logged\");\n\nlog.mark(\"before loop\");\nfor (let i = 0; i < 1000000; i++) {\n  log.every(100).warn(\"Logs every 100th iteration\");\n  log.atMostEvery(10, TimeUnit.SECONDS).warn(\n    \"Logs at most once every 10 seconds\",\n  );\n}\nlog.mark(\"after loop\");\nlog.profilingConfig().withLogLevel(Level.Warn);\n// logs (at warn level) time, memory usage and ops called for loop duration\nlog.measure(between(\"before loop\", \"after loop\"));\n\nlog.enabled(false);\nlog.error(\"Logger is disabled, so this does nothing\");\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonFormatter in Optic (TypeScript)\nDESCRIPTION: Shows how to use the JsonFormatter to output log records as JSON. It demonstrates specifying fields to include, custom date/time format, and pretty printing indentation.\nSOURCE: https://github.com/onjara/optic/blob/master/formatters/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConsoleStream, Logger } from \"https://deno.land/x/optic/mod.ts\";\nimport { JsonFormatter } from \"https://deno.land/x/optic/formatters/mod.ts\";\n\nconst logger = new Logger().addStream(\n  new ConsoleStream()\n    .withFormat(\n      new JsonFormatter()\n        .withFields([\"dateTime\", \"level\", \"logger\", \"msg\"])\n        .withDateTimeFormat(\"hh:mm:ss YYYY-MM-DD\")\n        .withPrettyPrintIndentation(2)\n    ),\n);\n\nlogger.info(\"Hello world\");\n\n// Outputs:\n{\n  \"dateTime\": \"22:49:09 2020-07-10\",\n  \"level\": \"Info\",\n  \"logger\": \"default\",\n  \"msg\": \"Hello world\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Logger in TypeScript\nDESCRIPTION: Creates a simple logger instance and logs an info message. This demonstrates the basic usage of the Optic logging framework.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"jsr:@onjara/optic/logger\";\n\nconst logger = new Logger();\nlogger.info(\"Hello world!\"); // outputs log record to the console\n```\n\n----------------------------------------\n\nTITLE: Disabling the Logger in TypeScript\nDESCRIPTION: Demonstrates how to programmatically disable the logger, turning it into a no-op logger for scenarios like production environments.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.enabled(false);\n```\n\n----------------------------------------\n\nTITLE: Sharing Logger Instances Across Modules in TypeScript\nDESCRIPTION: Demonstrates how to create and export a logger instance for use across multiple modules, promoting consistent logging configuration throughout an application.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/** logger.ts */\nimport { ConsoleStream, Logger } from \"https://deno.land/x/optic/mod.ts\";\nimport { JsonFormatter } from \"https://deno.land/x/optic/formatters/json.ts\";\n\nexport const logger = new Logger();\nlogger.addStream(new ConsoleStream().withFormat(new JsonFormatter()));\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/** module_a.ts */\nimport { logger } from \"./logger.ts\";\n\nlogger.info(\"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Advanced Measuring Techniques with Special Marks\nDESCRIPTION: Demonstrates various ways to measure performance using special marks like NOW and PROCESS_START along with utility functions between(), from(), and to() for different measurement scenarios.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  between,\n  from,\n  NOW,\n  PROCESS_START,\n  to,\n} from \"https://deno.land/x/optic/mod.ts\";\n\nlogger.mark(\"before\");\nsomeFunction();\nlogger.mark(\"after\");\n\n//Measure between two marks (with optional description)\nlogger.measure(between(\"before\", \"after\"));\nlogger.measure(between(PROCESS_START, \"after\"));\nlogger.measure(between(\"before\", NOW), \"with description\");\n\n//Measure from a mark to NOW (with optional description)\nlogger.measure(from(\"before\"));\nlogger.measure(from(\"before\"), \"with description\");\n\n//Measure from PROCESS_START to mark (with optional description)\nlogger.measure(to(\"after\"));\nlogger.measure(to(\"after\"), \"with description\");\n\n//Mesure from PROCESS_START to NOW (with optional description)\nlogger.measure();\nlogger.measure(\"with description\");\n```\n\n----------------------------------------\n\nTITLE: Logging Events with Metadata in TypeScript\nDESCRIPTION: Shows how to log an event with a primary message and additional metadata, demonstrating the flexibility of the Optic logging framework in capturing complex log data.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.info(\"File loaded\", \"exa_113.txt\", 1223, true);\n```\n\n----------------------------------------\n\nTITLE: Configuring TokenReplacer Formatter in TypeScript\nDESCRIPTION: Shows how to set up a TokenReplacer formatter with custom token placement, date/time formatting, level padding, and color output.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConsoleStream, Logger } from \"https://deno.land/x/optic/mod.ts\";\nimport { TokenReplacer } from \"https://deno.land/x/optic/formatters/mod.ts\";\n\nconst logger = new Logger().addStream(\n  new ConsoleStream()\n    .withFormat(\n      new TokenReplacer()\n        .withFormat(\"{dateTime} {level} {msg} {metadata}\")\n        .withDateTimeFormat(\"hh:mm:ss YYYY-MM-DD\")\n        .withLevelPadding(10)\n        .withColor(),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Log Levels in TypeScript\nDESCRIPTION: Illustrates different ways to specify log levels when logging events, including direct method calls and using the Level enum.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.trace(\"Some trace info\");\nlogger.error(\"Oops, something went wrong\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.log(Level.Info, \"Here some info\");\n```\n\n----------------------------------------\n\nTITLE: Using the RegExpFilter for Pattern-Based Filtering\nDESCRIPTION: Shows how to use the built-in RegExpFilter to filter out log records that match a specified regular expression pattern in either the message or metadata fields.\nSOURCE: https://github.com/onjara/optic/blob/master/filters/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Filters out log records containing `%` or `&` in the message or metadata\nimport { RegExpFilter } from \"https://deno.land/x/optic/filters/regExpFilter.ts\";\n\nconst regExpFilter = new RegExpFilter(/[%&]+/);\nconst logger = new Logger().addFilter(regExpFilter);\nlogger.error(\"Oh no!\"); // not filtered\nlogger.error(\"Oh no!\", \"& another thing\"); // filtered out\n```\n\n----------------------------------------\n\nTITLE: Configuring File Stream in TypeScript\nDESCRIPTION: Demonstrates setting up a file stream with custom configuration including log level, JSON formatting, buffer size, and log rotation.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Level, Logger } from \"https://deno.land/x/optic/mod.ts\";\nimport { JsonFormatter } from \"https://deno.land/x/optic/formatters/mod.ts\";\nimport {\n  every,\n  FileStream,\n  of,\n} from \"https://deno.land/x/optic/streams/fileStream/mod.ts\";\n\nconst fileStream = new FileStream(\"./logFile.txt\")\n  .withMinLogLevel(Level.Warn)\n  .withFormat(new JsonFormatter())\n  .withBufferSize(30000)\n  .withLogFileInitMode(\"append\")\n  .withLogFileRotation(\n    every(2000000).bytes().withLogFileRetentionPolicy(of(7).days()),\n  )\n  .withLogHeader(true)\n  .withLogFooter(true);\n\nconst logger = new Logger().addStream(fileStream);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Auto-Flush for FileStream in TypeScript\nDESCRIPTION: This code demonstrates how to configure auto-flushing for a FileStream instance, flushing the buffer every 5 seconds.\nSOURCE: https://github.com/onjara/optic/blob/master/streams/fileStream/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FileStream } from \"https://deno.land/x/optic/streams/fileStream/mod.ts\";\nimport { intervalOf } from \"https://deno.land/x/optic/utils/timeInterval.ts\";\n\nconst fileStream = new FileStream(\"./logFile.txt\")\n  .withAutoFlushEvery(intervalOf(5).seconds());\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Stream in TypeScript\nDESCRIPTION: Shows how to set up a console stream with custom configuration including log level, formatting, and color output.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConsoleStream, Level, Logger } from \"https://deno.land/x/optic/mod.ts\";\nimport { TokenReplacer } from \"https://deno.land/x/optic/formatters/mod.ts\";\n\nconst consoleStream = new ConsoleStream()\n  .withMinLogLevel(Level.Debug)\n  .withLogHeader(true)\n  .withLogFooter(true)\n  .withFormat(\n    new TokenReplacer()\n      .withColor()\n      .withDateTimeFormat(\"YYYY.MM.DD hh:mm:ss:SSS\"),\n  );\n\nconst logger = new Logger().addStream(consoleStream);\n```\n\n----------------------------------------\n\nTITLE: Registering Transformers with Logger\nDESCRIPTION: Shows how to register a transformer with the logger instance\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst passwordObfuscator = new PasswordObfuscator();\nconst logger = new Logger().addTransformer(passwordObfuscator);\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Formatter in TypeScript\nDESCRIPTION: Demonstrates how to set up a JSON formatter with custom field selection, date/time formatting, and pretty-printing indentation.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConsoleStream, Logger } from \"https://deno.land/x/optic/mod.ts\";\nimport { JsonFormatter } from \"https://deno.land/x/optic/formatters/mod.ts\";\n\nconst logger = new Logger().addStream(\n  new ConsoleStream()\n    .withFormat(\n      new JsonFormatter()\n        .withFields([\"dateTime\", \"level\", \"logger\", \"msg\"])\n        .withDateTimeFormat(\"hh:mm:ss YYYY-MM-DD\")\n        .withPrettyPrintIndentation(2),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Substring Filter\nDESCRIPTION: Example of using the built-in SubStringFilter\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"https://deno.land/x/optic/mod.ts\";\nimport { SubStringFilter } from \"https://deno.land/x/optic/filters/subStringFilter.ts\";\n\nconst subStringFilter = new SubStringFilter(\"user1234\");\nconst logger = new Logger().addFilter(subStringFilter);\nlogger.info({ user: \"joe1944\", action: \"login\" }); // not filtered\nlogger.info({ user: \"user1234\", action: \"login\" }); // filtered out\n```\n\n----------------------------------------\n\nTITLE: Configuring TokenReplacer Formatter in Optic (TypeScript)\nDESCRIPTION: Demonstrates how to use the TokenReplacer formatter to customize log output. It shows setting a custom format string, date/time format, level padding, and enabling color output.\nSOURCE: https://github.com/onjara/optic/blob/master/formatters/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConsoleStream, Logger } from \"https://deno.land/x/optic/mod.ts\";\nimport { TokenReplacer } from \"https://deno.land/x/optic/formatters/mod.ts\";\n\nconst logger = new Logger().addStream(\n  new ConsoleStream()\n    .withFormat(\n      new TokenReplacer()\n        .withFormat(\"{dateTime} Level: [{level}] Msg: {msg}\")\n        .withDateTimeFormat(\"hh:mm:ss YYYY-MM-DD\")\n        .withLevelPadding(10)\n        .withColor(),\n    ),\n);\n\nlogger.info(\"hello world\");\n// Outputs in color to console: 22:09:54 2020-07-10 Level: [Info      ] Msg: hello world\n```\n\n----------------------------------------\n\nTITLE: Defining Transformer Function Type\nDESCRIPTION: Defines the type signature for transformer functions that modify log records\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TransformerFn = (stream: Stream, logRecord: LogRecord) => LogRecord;\n```\n\n----------------------------------------\n\nTITLE: Initializing FileStream in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new FileStream instance, specifying the log file path.\nSOURCE: https://github.com/onjara/optic/blob/master/streams/fileStream/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FileStream } from \"https://deno.land/x/optic/streams/fileStream/mod.ts\";\nconst fs = new FileStream(\"/data/logs/logFile.txt\");\n```\n\n----------------------------------------\n\nTITLE: Defining Monitor Function Type in TypeScript\nDESCRIPTION: Defines the type signature for monitor functions that process log records\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MonitorFn = (logRecord: LogRecord) => void;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Stream in TypeScript\nDESCRIPTION: Illustrates how to create a custom stream by implementing the Stream interface, with a simple example that logs to the console.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger, LogRecord, Stream } from \"https://deno.land/x/optic/mod.ts\";\n\nclass SimpleStream implements Stream {\n  handle(logRecord: LogRecord): boolean {\n    console.log(logRecord.msg);\n    return true;\n  }\n}\n\nconst logger = new Logger().addStream(new SimpleStream());\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-Based Log Rotation in TypeScript\nDESCRIPTION: This snippet illustrates how to set up time-based log rotation for a FileStream instance, rotating logs every 2 days.\nSOURCE: https://github.com/onjara/optic/blob/master/streams/fileStream/README.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  every,\n  FileStream,\n} from \"https://deno.land/x/optic/streams/fileStream/mod.ts\";\n\nconst fileStream = new FileStream(\"./logFile.txt\")\n  .withLogFileRotation(every(2).days());\n```\n\n----------------------------------------\n\nTITLE: Setting Log File Retention Policies in TypeScript\nDESCRIPTION: This code shows how to configure log file retention policies for a FileStream instance, including both fixed number and time-based retention.\nSOURCE: https://github.com/onjara/optic/blob/master/streams/fileStream/README.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  every,\n  FileStream,\n  of,\n} from \"https://deno.land/x/optic/streams/fileStream/mod.ts\";\n\n// Retain up to 7 log files maximum\nconst fixedNumberLogFileRetention = new FileStream(\"./logFile.txt\")\n  .withLogFileRotation(\n    every(200).mb()\n      .withLogFileRetentionPolicy(of(7).files()),\n  );\n\n// Retain logs files for maximum of 36 hours\nconst fixedTimeframeLogFileRetention = new FileStream(\"./logFile.txt\")\n  .withLogFileRotation(\n    every(500).kb()\n      .withLogFileRetentionPolicy(of(36).hours()),\n  );\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Logger Output in TypeScript\nDESCRIPTION: Demonstrates two methods of rate limiting log output: by time interval and by number of attempts.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.atMostEvery(5, TimeUnit.SECONDS).info(\n  \"I'm only logged at most every 5 seconds\",\n);\nlogger.every(100).info(\"I'm logged every 100 attempts\");\n```\n\n----------------------------------------\n\nTITLE: Setting Up File Size-Based Log Rotation in TypeScript\nDESCRIPTION: This code demonstrates how to configure file size-based log rotation for a FileStream instance.\nSOURCE: https://github.com/onjara/optic/blob/master/streams/fileStream/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  every,\n  FileStream,\n} from \"https://deno.land/x/optic/streams/fileStream/mod.ts\";\n\nconst fileStream = new FileStream(\"./logFile.txt\")\n  .withLogFileRotation(every(2000000).bytes());\n// Or you can specify by kb, mb or gb\n// .withLogFileRotation(every(5000).kb());\n// .withLogFileRotation(every(200).mb());\n// .withLogFileRotation(every(3).gb());\n```\n\n----------------------------------------\n\nTITLE: Enabling Log Deduplication in TypeScript\nDESCRIPTION: Demonstrates how to enable log deduplication to suppress repeated log messages and improve performance.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.withDedupe();\n```\n\n----------------------------------------\n\nTITLE: Inline Logging in TypeScript\nDESCRIPTION: Shows how to use inline logging to make code more concise by returning the logged value, allowing for logging and assignment in a single statement.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user: User = logger.info(getUser());\n\n// is equivalent to:\nconst user: User = getUser();\nlogger.info(user);\n```\n\n----------------------------------------\n\nTITLE: Deferred Logging in TypeScript\nDESCRIPTION: Demonstrates deferred logging, which is used to avoid expensive computations when logging might be skipped due to log level settings, improving performance.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = logger.info(() => {\n  return expensiveObjectCreation();\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Logging in TypeScript\nDESCRIPTION: Shows how to use conditional logging to only log messages when a specified condition is met, allowing for more dynamic and context-aware logging.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.if(attempts > 3).warn(\"Excessive attempts by user\");\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Log Level in TypeScript\nDESCRIPTION: This code shows how to set the minimum log level for a FileStream instance to Error.\nSOURCE: https://github.com/onjara/optic/blob/master/streams/fileStream/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst fs = new FileStream(\"./logFile.txt\")\n  .withMinLogLevel(Level.Error);\n```\n\n----------------------------------------\n\nTITLE: Registering a Filter with the Logger\nDESCRIPTION: Demonstrates how to register a filter with a logger instance, which enables the filtering of log records processed by that logger.\nSOURCE: https://github.com/onjara/optic/blob/master/filters/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst myFilter = new MyFilter();\nconst logger = new Logger().addFilter(myFilter);\n```\n\n----------------------------------------\n\nTITLE: Implementing the Filter Interface\nDESCRIPTION: Shows how to create a filter by implementing the Filter interface, which requires implementing the shouldFilterOut method. This approach provides more flexibility for complex filtering logic.\nSOURCE: https://github.com/onjara/optic/blob/master/filters/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyFilter implements Filter {\n  shouldFilerOut(stream: Stream, logRecord: LogRecord): boolean {\n    return (logRecord.msg as string).includes(\"bad stuff\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Contextual Rate Limiting in TypeScript\nDESCRIPTION: Shows how to use unique contexts for rate limiting to avoid unintended side effects when multiple rate limiters are used.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.atMostEvery(5, TimeUnit.SECONDS, \"Context 1\").info(\n  \"Logged at most every 5 seconds\",\n);\nlogger.atMostEvery(5, TimeUnit.SECONDS, \"Context 2\").info(\n  \"Also logged at most every 5 seconds\",\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Transformer Interface\nDESCRIPTION: Example of implementing the Transformer interface for class-based transformations\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogRecord, Stream, Transformer } from \"https://deno.land/x/optic/mod.ts\";\n\nclass PasswordObfuscator implements Transformer {\n  transform(stream: Stream, logRecord: LogRecord): LogRecord {\n    if ((logRecord.msg as string).startsWith(\"password:\")) {\n      return {\n        msg: \"password: [Redacted]\",\n        metadata: [...logRecord.metadata],\n        level: logRecord.level,\n        logger: logRecord.logger,\n        dateTime: new Date(logRecord.dateTime.getTime()),\n      };\n    } else {\n      return logRecord;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Property Redaction Transformer\nDESCRIPTION: Example of using the built-in PropertyRedaction transformer\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PropertyRedaction } from \"https://deno.land/x/optic/mod.ts\";\n\nlogger.addTransformer(new PropertyRedaction(\"password\"));\n\n// This next record is untouched by the transformer (no `password` property)\nlogger.info({ user: \"abc29002\", dateOfBirth: \"1966/02/33\" });\n\n// This record gets transformed to: {user: \"abc29002\", password: \"[Redacted]\"}\nlogger.info({ user: \"abc29002\", password: \"s3cr3tpwd\" });\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expression Redaction Transformer\nDESCRIPTION: Example of using the RegExpReplacer transformer with custom patterns\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nonWhitespaceReplacer, RegExpReplacer } from \"https://deno.land/x/optic/transformers/regExpReplacer.ts\";\nimport { Logger } from \"https://deno.land/x/optic/mod.ts\";\n\nconst logger = new Logger()\n  .addTransformer(new RegExpReplacer(/£([\\d]+\\.[\\d]{2})/)) \n  .addTransformer(new RegExpReplacer(/password: (.*)/, nonWhitespaceReplacer));\n\nlogger.info(\"Amount: £122.51\"); // becomes \"Amount: £***.**\" ('£' is not in a group)\nlogger.info(\"password: MyS3cret! Pwd!\"); // becomes \"password: ********* ****\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Transformer Function Example\nDESCRIPTION: Example of implementing a transformer function to redact password information\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogRecord, Stream, TransformerFn } from \"https://deno.land/x/optic/mod.ts\";\n\nconst tr: TransformerFn = (stream: Stream, logRecord: LogRecord): LogRecord => ({\n  msg: (logRecord.msg as string).startsWith(\"password:\") ? \"password: [Redacted]\" : logRecord.msg,\n  metadata: [...logRecord.metadata],\n  level: logRecord.level,\n  logger: logRecord.logger,\n  dateTime: new Date(logRecord.dateTime.getTime()),\n});\n```\n\n----------------------------------------\n\nTITLE: Log Deduplication Example in TypeScript\nDESCRIPTION: Illustrates the usage of log deduplication with a practical example, showing how repeated messages are condensed.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst logger = new Logger().withDedupe();\nfor (let i = 0; i < 1000; i++) {\n  logger.info(\"hello world\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Interface\nDESCRIPTION: Example of implementing the Filter interface for class-based filtering\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Filter, LogRecord, Stream } from \"https://deno.land/x/optic/mod.ts\";\n\nclass MyFilter implements Filter {\n  shouldFilterOut(stream: Stream, logRecord: LogRecord): boolean {\n    return (logRecord.msg as string).includes(\"bad stuff\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Function Example\nDESCRIPTION: Example of implementing a filter function to exclude certain log records\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FilterFn, LogRecord, Stream } from \"https://deno.land/x/optic/mod.ts\";\nconst filter: FilterFn = (stream: Stream, logRecord: LogRecord) =>\n  (logRecord.msg as string).includes(\"bad stuff\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffer Size for FileStream in TypeScript\nDESCRIPTION: This snippet illustrates how to set a custom buffer size for a FileStream instance.\nSOURCE: https://github.com/onjara/optic/blob/master/streams/fileStream/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileStream = new FileStream(\"./logFile.txt\")\n  .withBufferSize(30000); // in bytes\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Initialization Mode in TypeScript\nDESCRIPTION: This snippet shows how to set the log file initialization mode for a FileStream instance.\nSOURCE: https://github.com/onjara/optic/blob/master/streams/fileStream/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileStream = new FileStream(\"./logFile.txt\")\n  .withLogFileInitMode(\"append\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Filter Function in TypeScript\nDESCRIPTION: Shows the type definition for a filter function that determines whether a log record should be filtered out from a stream. The function takes a stream and log record as parameters and returns a boolean value.\nSOURCE: https://github.com/onjara/optic/blob/master/filters/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FilterFn = (stream: Stream, logRecord: LogRecord) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Filter Function Example\nDESCRIPTION: Demonstrates how to create a simple filter function that filters out log records containing the text \"bad stuff\" in their message field.\nSOURCE: https://github.com/onjara/optic/blob/master/filters/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter: FilterFn = (stream: Stream, logRecord: LogRecord) =>\n  (logRecord.msg as string).includes(\"bad stuff\");\n```\n\n----------------------------------------\n\nTITLE: Registering Filters with Logger\nDESCRIPTION: Shows how to register a filter with the logger instance\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst myFilter = new MyFilter();\nconst logger = new Logger().addFilter(myFilter);\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expression Filter\nDESCRIPTION: Example of using the built-in RegExpFilter\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"https://deno.land/x/optic/mod.ts\";\nimport { RegExpFilter } from \"https://deno.land/x/optic/filters/regExpFilter.ts\";\n\n// Filters out log records containing `%` or `&` in the message or metadata\nconst regExpFilter = new RegExpFilter(/[%&]+/);\nconst logger = new Logger().addFilter(regExpFilter);\nlogger.error(\"Oh no!\"); // not filtered\nlogger.error(\"Oh no!\", \"& another thing\"); // filtered out\n```\n\n----------------------------------------\n\nTITLE: Implementing Monitor Interface\nDESCRIPTION: Example of implementing the Monitor interface for class-based monitoring\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogRecord, Monitor } from \"https://deno.land/x/optic/mod.ts\";\n\nclass UserMonitor implements Monitor {\n  check(logRecord: LogRecord): void {\n    if ((logRecord.msg as User).username === \"jsmith\") {\n      console.log(\"User jsmith spotted again\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Monitor Function Example\nDESCRIPTION: Example of implementing a monitor function to detect specific user activity\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogRecord, MonitorFn } from \"https://deno.land/x/optic/mod.ts\";\n\nconst mon: MonitorFn = (logRecord: LogRecord): void => {\n  if ((logRecord.msg as User).username === \"jsmith\") {\n    console.log(\"User jsmith spotted again\");\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Monitors with Logger\nDESCRIPTION: Shows how to register a monitor with the logger instance\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst logger = new Logger().addMonitor(new UserMonitor());\n```\n\n----------------------------------------\n\nTITLE: Using the SubStringFilter for Text-Based Filtering\nDESCRIPTION: Demonstrates how to use the built-in SubStringFilter to filter out log records that contain a specific substring in either the message or metadata fields.\nSOURCE: https://github.com/onjara/optic/blob/master/filters/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubStringFilter } from \"https://deno.land/x/optic/filters/subStringFilter.ts\";\nimport { Logger } from \"https://deno.land/x/optic/mod.ts\";\n\nconst subStringFilter = new SubStringFilter(\"user1234\");\nconst logger = new Logger().addFilter(subStringFilter);\nlogger.info({ user: \"joe1944\", action: \"login\" }); // not filtered\nlogger.info({ user: \"user1234\", action: \"login\" }); // filtered out\n```\n\n----------------------------------------\n\nTITLE: Using DateTimeFormatter in TypeScript\nDESCRIPTION: Shows how to use the DateTimeFormatter within other formatters to customize the date/time output format.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.addStream(\n  new ConsoleStream()\n    .withFormat(\n      new JsonFormatter().withDateTimeFormat(\"hh:mm:ss YYYY-MM-DD\"),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Applying DateTimeFormatter in TokenReplacer (TypeScript)\nDESCRIPTION: Shows how to apply a custom date/time format to the TokenReplacer formatter using the SimpleDateTimeFormatter.\nSOURCE: https://github.com/onjara/optic/blob/master/formatters/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConsoleStream, Logger } from \"https://deno.land/x/optic/mod.ts\";\nimport { TokenReplacer } from \"https://deno.land/x/optic/formatters/mod.ts\";\n\nconst logger = new Logger().addStream(\n  new ConsoleStream()\n    .withFormat(\n      new TokenReplacer()\n        .withDateTimeFormat(\"hh:mm:ss:SSS YYYY-MM-DD\"),\n      // equivalent to:\n      // .withDateTimeFormat(new SimpleDateTimeFormatter(\"hh:mm:ss:SSS YYYY-MM-DD\"))\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using DateTimeFormatter Standalone in Optic (TypeScript)\nDESCRIPTION: Demonstrates how to use the SimpleDateTimeFormatter as a standalone class to format date and time strings with custom specifications.\nSOURCE: https://github.com/onjara/optic/blob/master/formatters/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SimpleDateTimeFormatter } from \"https://deno.land/x/optic/formatters/mod.ts\";\n\nconst dtf = new SimpleDateTimeFormatter(\"hh:mm:ss:SSS YYYY-MM-DD\");\nconst dateTime = dtf.formatDateTime(new Date());\n```\n\n----------------------------------------\n\nTITLE: Recording Marks in Optic\nDESCRIPTION: Demonstrates how to record performance marks at specific points in code execution. Marks capture the current time, memory usage, and ops calls with an identifier for later measurement.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.mark(\"before\");\nsomeFunction();\nlogger.mark(\"after\");\n```\n\n----------------------------------------\n\nTITLE: Measuring Between Marks in Optic\nDESCRIPTION: Shows how to measure performance between two recorded marks. This example measures the execution time, memory usage, and operations of someFunction() between 'before' and 'after' marks.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport { between } from \"https://deno.land/x/optic/mod.ts\";\n\nlogger.mark(\"before\");\nsomeFunction();\nlogger.mark(\"after\");\n\nlogger.measure(between(\"before\", \"after\"), \"with description\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Log Deduplication in TypeScript\nDESCRIPTION: Shows how to turn off log deduplication if it was previously enabled.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.withDedupe(false);\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Function Type\nDESCRIPTION: Defines the type signature for filter functions that control log record processing\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FilterFn = (stream: Stream, logRecord: LogRecord) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Measure Formatter\nDESCRIPTION: Shows how to implement the MeasureFormatter interface to customize the output format of measurement logs. The example creates a simple formatter that outputs just the elapsed time in milliseconds.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MeasureFormatter } from \"https://deno.land/x/optic/mod.ts\";\n\nconst myFormatter: MeasureFormatter<string> = {\n  format(startMark: ProfileMark, endMark: ProfileMark, label?: string): string {\n    return (endMark.timestamp - startMark.timestamp) + \"ms\" +\n      (label ? (\" \" + label) : \"\");\n  },\n};\nlog.profilingConfig().withFormatter(myFormatter);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Formatter in Optic (TypeScript)\nDESCRIPTION: Demonstrates how to create and use a custom formatter by implementing the Formatter interface. This example prepends 'Hello!' to each log message.\nSOURCE: https://github.com/onjara/optic/blob/master/formatters/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ConsoleStream,\n  Formatter,\n  Logger,\n  LogRecord,\n} from \"https://deno.land/x/optic/mod.ts\";\n\nclass MyFormatter implements Formatter<string> {\n  format(logRecord: LogRecord): string {\n    return \"Hello! \" + logRecord.msg;\n  }\n}\n\nconst logger = new Logger().addStream(\n  new ConsoleStream().withFormat(new MyFormatter()),\n);\n\nlogger.info(\"Some info message\");\n\n// Outputs to console: \"Hello! Some info message\"\n```\n\n----------------------------------------\n\nTITLE: Sample Profiling Output Format\nDESCRIPTION: Example of the default output format produced by the SummaryMeasureFormatter, showing elapsed time, memory usage changes, and operations dispatched.\nSOURCE: https://github.com/onjara/optic/blob/master/README.md#2025-04-20_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n//Measuring 'before' -> 'after' (with description), took 790ms; heap usage increased 9.2 MB to 11.7 MB; 18 ops dispatched, all completed\n```"
  }
]