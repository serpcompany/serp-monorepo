[
  {
    "owner": "sebastianbergmann",
    "repo": "phpunit-documentation-english",
    "content": "TITLE: Testing a Greeter Class with PHPUnit\nDESCRIPTION: A PHPUnit test class that demonstrates basic testing conventions for the Greeter class, asserting that the greet method returns the expected string.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse PHPUnit\\Framework\\Attributes\\Test;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class GreeterTest extends TestCase\n{\n    #[Test]\n    public function greetReturnsHelloName(): void\n    {\n        $greeter = new Greeter\\Greeter;\n\n        $greeting = $greeter->greet('Jane');\n\n        $this->assertSame('Hello, Jane!', $greeting);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Providers with Numeric Data Sets in PHPUnit\nDESCRIPTION: Demonstrates how to use data providers in PHPUnit to test a function with multiple sets of input data, focusing on numeric operations.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse PHPUnit\\Framework\\Attributes\\DataProvider;\nuse PHPUnit\\Framework\\Attributes\\Test;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class NumericDataSetsTest extends TestCase\n{\n    #[Test]\n    #[DataProvider('additionProvider')]\n    public function testAdd(int $a, int $b, int $expected): void\n    {\n        $this->assertSame($expected, $a + $b);\n    }\n\n    public static function additionProvider(): array\n    {\n        return [\n            [0, 0, 0],\n            [0, 1, 1],\n            [1, 0, 1],\n            [1, 1, 2],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing for Exceptions with PHPUnit's expectException Method\nDESCRIPTION: Demonstrates how to test that a method throws an expected exception using PHPUnit's expectException method.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse PHPUnit\\Framework\\Attributes\\Test;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ExceptionTest extends TestCase\n{\n    #[Test]\n    public function exceptionIsRaised(): void\n    {\n        $this->expectException(InvalidArgumentException::class);\n\n        throw new InvalidArgumentException;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending an Abstract Test Case Class\nDESCRIPTION: This example demonstrates how to extend an abstract test case class and implement its own setUp() method, which should call the parent's setUp() method.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/fixtures.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nnamespace example;\n\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ExampleTest extends MyTestCase\n{\n    protected function setUp(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Output in PHPUnit\nDESCRIPTION: Shows how to test functions or methods that produce output using PHPUnit's expectOutputString method to verify expected output strings.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse PHPUnit\\Framework\\Attributes\\Test;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class OutputTest extends TestCase\n{\n    #[Test]\n    public function testExpectFooActualFoo(): void\n    {\n        $this->expectOutputString('foo');\n\n        print 'foo';\n    }\n\n    #[Test]\n    public function testExpectBarActualBaz(): void\n    {\n        $this->expectOutputString('bar');\n\n        print 'baz';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Array Key Existence in PHPUnit\nDESCRIPTION: Shows how to use assertArrayHasKey() to verify the existence of specific keys in arrays. Includes example with associative array testing.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ArrayHasKeyTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertArrayHasKey('foo', ['bar' => 'baz']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Stub for an Interface in PHP\nDESCRIPTION: Demonstrates how to create a test stub for an interface named X using PHPUnit's createStub() method.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface X\n{\n    public function doSomething(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing setUp() and tearDown() in a PHPUnit Test Class\nDESCRIPTION: This example demonstrates how to use setUp() and tearDown() methods in a PHPUnit test class to set up and clean up test fixtures.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/fixtures.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nnamespace example;\n\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ExampleTest extends TestCase\n{\n    private ?Example $example;\n\n    public function testSomething(): void\n    {\n        $this->assertSame(\n            'the-result',\n            $this->example->doSomething()\n        );\n    }\n\n    protected function setUp(): void\n    {\n        $this->example = new Example(\n            $this->createStub(Collaborator::class)\n        );\n    }\n\n    protected function tearDown(): void\n    {\n        $this->example = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing File Equality in PHPUnit\nDESCRIPTION: Demonstrates usage of assertFileEquals() to compare contents of two files. Shows how to verify if two files have identical contents.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class FileEqualsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertFileEquals('/path/to/expected', '/path/to/actual');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Classes to Cover in PHPUnit Tests\nDESCRIPTION: Example of a test class that uses the CoversClass and UsesClass attributes to specify which classes it intends to cover in code coverage reports. The test checks if an Invoice's amount is initially empty.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/code-coverage.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\Attributes\\CoversClass;\nuse PHPUnit\\Framework\\Attributes\\UsesClass;\nuse PHPUnit\\Framework\\TestCase;\n\n#[CoversClass(Invoice::class)]\n#[UsesClass(Money::class)]\nfinal class InvoiceTest extends TestCase\n{\n    public function testAmountInitiallyIsEmpty(): void\n    {\n        $this->assertEquals(new Money, (new Invoice)->amount());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Test Dependencies in PHPUnit\nDESCRIPTION: Example showing how to use the Depends attribute to express dependencies between test methods, where later tests use the output of earlier tests as their input, creating a chain of test execution.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\Attributes\\Depends;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StackTest extends TestCase\n{\n    public function testEmpty(): array\n    {\n        $stack = [];\n        $this->assertEmpty($stack);\n\n        return $stack;\n    }\n\n    #[Depends('testEmpty')]\n    public function testPush(array $stack): array\n    {\n        array_push($stack, 'foo');\n        $this->assertSame('foo', $stack[count($stack)-1]);\n        $this->assertNotEmpty($stack);\n\n        return $stack;\n    }\n\n    #[Depends('testPush')]\n    public function testPop(array $stack): void\n    {\n        $this->assertSame('foo', array_pop($stack));\n        $this->assertEmpty($stack);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Values with assertGreaterThan()\nDESCRIPTION: Example showing how to use assertGreaterThan() to compare numeric values. Demonstrates comparing two numbers to verify one is greater than the other.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass GreaterThanTest extends TestCase\n{\n    public function testGreaterThan(): void\n    {\n        $this->assertGreaterThan(1, 2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Database Connection Fixture Across Tests\nDESCRIPTION: This example shows how to use setUpBeforeClass() and tearDownAfterClass() methods to set up and tear down a shared database connection fixture for all tests in a test case class.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/fixtures.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DatabaseTest extends TestCase\n{\n    private static $dbh;\n\n    public static function setUpBeforeClass(): void\n    {\n        self::$dbh = new PDO('sqlite::memory:');\n    }\n\n    public static function tearDownAfterClass(): void\n    {\n        self::$dbh = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertTrue() in PHPUnit Tests\nDESCRIPTION: Demonstrates how to use the assertTrue() method to verify that a condition evaluates to true. The assertion will fail and report an error if the condition is false.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass TrueTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertTrue(false);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Asserting Numeric Content in PHP with PHPUnit\nDESCRIPTION: Illustrates the usage of assertContainsOnlyNumeric() method in PHPUnit to verify if an iterable contains only numeric values. It also mentions the inverse assertion assertContainsNotOnlyNumeric().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyNumericTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnlyNumeric([1, '2', 3.0, '4.0', null]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using createConfiguredStub() in PHPUnit\nDESCRIPTION: Demonstrates how to use createConfiguredStub() to create a test stub and configure return values using an associative array.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function testStub(): void\n{\n    $stub = $this->createConfiguredStub(\n        SomeClass::class,\n        ['doSomething' => 'foo']\n    );\n\n    $this->assertSame('foo', $stub->doSomething());\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertFalse() in PHPUnit Tests\nDESCRIPTION: Demonstrates how to use the assertFalse() method to verify that a condition evaluates to false. The assertion will fail and report an error if the condition is true.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass FalseTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertFalse(true);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests from Command Line\nDESCRIPTION: Demonstrates how to run PHPUnit tests using the command-line interface. The example shows running tests from a specific file and interpreting the output.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/textui.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./tools/phpunit tests/ArrayTest.php\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.2\n\n..                                                                  2 / 2 (100%)\n\nTime: 00:00.077, Memory: 10.00 MB\n\nOK (2 tests, 2 assertions)\n```\n\n----------------------------------------\n\nTITLE: Asserting Resource Content in PHP with PHPUnit\nDESCRIPTION: Shows how to use assertContainsOnlyResource() method in PHPUnit to verify if an iterable contains only resource values. It also mentions the inverse assertion assertContainsNotOnlyResource().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyResourceTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnlyResource([fopen(__FILE__, 'r'), fopen(__FILE__, 'r'), 1]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Example PHPUnit Extension\nDESCRIPTION: Example of implementing a PHPUnit extension that registers custom subscribers and tracers. The extension implements the PHPUnit\\Runner\\Extension\\Extension interface and its bootstrap method.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/extending-phpunit.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Example\\PHPUnit\\Extension;\n\nuse PHPUnit\\Runner\\Extension\\Extension;\nuse PHPUnit\\Runner\\Extension\\Facade;\nuse PHPUnit\\Runner\\Extension\\ParameterCollection;\nuse PHPUnit\\TextUI\\Configuration\\Configuration;\n\nfinal class ExampleExtension implements Extension\n{\n    public function bootstrap(Configuration $configuration, Facade $facade, ParameterCollection $parameters): void\n    {\n        $facade->registerSubscriber(new ExampleSubscriber);\n        $facade->registerTracer(new ExampleTracer);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertEquals() with Arrays in PHPUnit\nDESCRIPTION: Demonstrates how to use assertEquals() to verify that two arrays are equal. This example shows a failure case where the arrays have different values.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualsWithArraysTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertEquals(['a', 'b', 'c'], ['a', 'c', 'd']);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Asserting Float Content in PHP with PHPUnit\nDESCRIPTION: Shows how to use assertContainsOnlyFloat() method in PHPUnit to verify if an iterable contains only float values. It also mentions the inverse assertion assertContainsNotOnlyFloat().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyFloatTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnlyFloat([1.0, 2.0, 3]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Tests as Incomplete in PHPUnit\nDESCRIPTION: Demonstrates how to mark a test as incomplete using markTestIncomplete() to indicate tests that are not yet fully implemented or ready for execution.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class WorkInProgressTest extends TestCase\n{\n    public function testSomething(): void\n    {\n        // Optional: Test anything here, if you want.\n        $this->assertTrue(true);\n\n        // Stop here and mark this test as incomplete.\n        $this->markTestIncomplete(\n            'This test has not been implemented yet.'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using External Data Providers with PHPUnit\nDESCRIPTION: Shows how to use external data providers for PHPUnit tests, separating the test data from the test class.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse PHPUnit\\Framework\\Attributes\\DataProviderExternal;\nuse PHPUnit\\Framework\\Attributes\\Test;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class NumericDataSetsTest extends TestCase\n{\n    #[Test]\n    #[DataProviderExternal(NumericDataSets::class, 'additionProvider')]\n    public function testAdd(int $a, int $b, int $expected): void\n    {\n        $this->assertSame($expected, $a + $b);\n    }\n}\n\nfinal class NumericDataSets\n{\n    public static function additionProvider(): array\n    {\n        return [\n            [0, 0, 0],\n            [0, 1, 1],\n            [1, 0, 1],\n            [1, 1, 2],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing a Method to Return an Argument in PHPUnit\nDESCRIPTION: Demonstrates how to use willReturnArgument() to make a stubbed method return one of its arguments.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function testReturnArgumentStub(): void\n{\n    $stub = $this->createStub(SomeClass::class);\n\n    $stub->method('doSomething')\n         ->willReturnArgument(0);\n\n    $this->assertSame('foo', $stub->doSomething('foo'));\n    $this->assertSame('bar', $stub->doSomething('bar'));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Data Sets in PHPUnit\nDESCRIPTION: Demonstrates how to use named data sets in PHPUnit to make test output more readable and descriptive when multiple test cases are run.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nuse PHPUnit\\Framework\\Attributes\\DataProvider;\nuse PHPUnit\\Framework\\Attributes\\Test;\nuse PHPUnit\\Framework\\Attributes\\TestDox;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class NamedDataSetsTest extends TestCase\n{\n    #[Test]\n    #[DataProvider('additionProvider')]\n    #[TestDox('Adding $a to $b equals $expected')]\n    public function testAdd(int $a, int $b, int $expected): void\n    {\n        $this->assertSame($expected, $a + $b);\n    }\n\n    public static function additionProvider(): array\n    {\n        return [\n            'zero plus zero'       => [0, 0, 0],\n            'zero plus one'        => [0, 1, 1],\n            'one plus zero'        => [1, 0, 1],\n            'one plus one'         => [1, 1, 2],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertInfinite() in PHP with PHPUnit\nDESCRIPTION: Demonstrates how to use assertInfinite() to verify if a value is INF in a PHPUnit test. This assertion is useful for checking mathematical operations that result in infinite values.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class InfiniteTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertInfinite(1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Method Invocation with Mock Object in PHPUnit\nDESCRIPTION: This example demonstrates how to use a mock object to test the interaction between Subject and Observer objects, verifying that a method is called once with a specific argument.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/SubjectTest.php\n   :caption: Testing that a method gets called once and with a specified argument\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Using assertSame() with Objects in PHPUnit\nDESCRIPTION: Demonstrates how to use assertSame() to verify that two variables reference the same object. This test shows a failure case where two different but equivalent objects are compared.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass SameWithObjectsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertSame(new stdClass, new stdClass);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Object Equality in PHPUnit\nDESCRIPTION: Shows how to use assertObjectEquals() to compare Value Objects using their equals() method. Includes example with Email value object implementation.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ObjectEqualsTest extends TestCase\n{\n    public function testEmailObjects(): void\n    {\n        $expected = new Email('user@example.org');\n        $actual   = new Email('user@example.org');\n\n        $this->assertObjectEquals($expected, $actual);\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nfinal class Email\n{\n    private string $email;\n\n    public function __construct(string $email)\n    {\n        $this->email = $email;\n    }\n\n    public function equals(self $other): bool\n    {\n        return $this->email === $other->email;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Comparison Failure Output in PHPUnit\nDESCRIPTION: Example demonstrating how PHPUnit displays array comparison failures, providing context by showing the values that differ and their surrounding elements to help identify the cause of the test failure.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ArrayDiffTest extends TestCase\n{\n    public function testEquality(): void\n    {\n        $this->assertSame(\n            [1, 2, 3, 4, 5, 6],\n            [1, 2, 33, 4, 5, 6]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing Multiple Method Calls with Different Return Values in PHPUnit\nDESCRIPTION: Demonstrates how to use willReturn() to stub a method to return different values on consecutive calls.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function testStub(): void\n{\n    $stub = $this->createStub(SomeClass::class);\n\n    $stub->method('doSomething')\n         ->willReturn('foo', 'bar', 'baz');\n\n    $this->assertSame('foo', $stub->doSomething());\n    $this->assertSame('bar', $stub->doSomething());\n    $this->assertSame('baz', $stub->doSomething());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Object with MockBuilder in PHPUnit\nDESCRIPTION: This example shows how to use the Mock Builder's fluent interface to configure the creation of a test stub, demonstrating various configuration options.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/MockBuilderExampleTest.php\n   :caption: Using the Mock Builder API to configure how the test double class is generated\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Stubbing a Method Call in PHPUnit\nDESCRIPTION: Demonstrates how to create a test stub for Dependency and configure it to return a fixed value when doSomething() is called.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function testStub(): void\n{\n    // Create a stub for the Dependency class.\n    $stub = $this->createStub(Dependency::class);\n\n    // Configure the stub.\n    $stub->method('doSomething')\n         ->willReturn('foo');\n\n    // Create a new instance of SomeClass and inject the stub\n    $object = new SomeClass($stub);\n\n    // Now $object->doSomething() will return 'foo'\n    $this->assertSame('foo', $object->doSomething());\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertEqualsCanonicalizing() with Arrays in PHPUnit\nDESCRIPTION: Demonstrates how to use assertEqualsCanonicalizing() to verify that two arrays are equal, regardless of the order of elements. This example shows a success case where the arrays contain the same elements but in different order.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualsWithArraysCanonicalizingTest extends TestCase\n{\n    public function testSuccess(): void\n    {\n        $this->assertEqualsCanonicalizing(\n            ['a', 'b', 'c'],\n            ['c', 'b', 'a']\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using the TestDox attribute in PHP for PHPUnit\nDESCRIPTION: Shows how to use the TestDox attribute to customize the text printed for a test when TestDox output is enabled. This attribute can be used at both class and method levels and is not repeatable.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\Attributes\\TestDox;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ExampleTest extends TestCase\n{\n    #[TestDox('It does something')]\n    public function testOne(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with conditional logic in PHPUnit\nDESCRIPTION: Example showing how to skip tests conditionally by checking for the availability of the MySQLi extension in the setUp() method and using markTestSkipped() when the extension is unavailable.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DatabaseTest extends TestCase\n{\n    protected function setUp(): void\n    {\n        if (!extension_loaded('mysqli')) {\n            $this->markTestSkipped(\n              'The MySQLi extension is not available.'\n            );\n        }\n    }\n\n    public function testConnection(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Count in PHP with PHPUnit\nDESCRIPTION: Shows how to use assertCount() method in PHPUnit to verify the number of elements in a Countable or iterable. It also mentions the inverse assertion assertNotCount() and notes that these assertions do not support generators.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class CountTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertCount(0, ['foo']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing a Method to Throw an Exception in PHPUnit\nDESCRIPTION: Shows how to use willThrowException() to configure a stubbed method to throw an exception when called.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function testStub(): void\n{\n    $stub = $this->createStub(SomeClass::class);\n\n    $stub->method('doSomething')\n         ->willThrowException(new Exception);\n\n    $this->expectException(Exception::class);\n    $stub->doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests using PHPUnit Attributes\nDESCRIPTION: Example demonstrating how to skip tests using PHPUnit attributes, specifically RequiresPhpExtension to check for the presence of the PostgreSQL extension before running database tests.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\Attributes\\RequiresPhpExtension;\nuse PHPUnit\\Framework\\TestCase;\n\n#[RequiresPhpExtension('pgsql')]\nfinal class DatabaseTest extends TestCase\n{\n    public function testConnection(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing a Method with a Return Map in PHPUnit\nDESCRIPTION: Shows how to use willReturnMap() to create a map that associates arguments with corresponding return values for a stubbed method.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function testReturnMapStub(): void\n{\n    $stub = $this->createStub(SomeClass::class);\n\n    $map = [\n        ['a', 'b', 'c', 'd'],\n        ['e', 'f', 'g', 'h']\n    ];\n\n    $stub->method('doSomething')\n         ->willReturnMap($map);\n\n    $this->assertSame('d', $stub->doSomething('a', 'b', 'c'));\n    $this->assertSame('h', $stub->doSomething('e', 'f', 'g'));\n    $this->assertNull($stub->doSomething('foo', 'bar'));\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging PHPUnit with Verbose Event Logging\nDESCRIPTION: Command-line example for debugging PHPUnit execution with verbose event logging, including resource consumption information. This command uses the --log-events-verbose-text option to include timing and memory usage details.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/extending-phpunit.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphpunit --no-output --log-events-verbose-text php://stdout\n```\n\n----------------------------------------\n\nTITLE: Using assertEquals() with DOMDocument Objects in PHPUnit\nDESCRIPTION: Demonstrates how to use assertEquals() to verify that two DOMDocument objects represent the same XML document. This example shows a failure case with different XML content.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualsWithDomDocumentTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $expected = new DOMDocument;\n        $expected->loadXML('<foo><bar/></foo>');\n\n        $actual = new DOMDocument;\n        $actual->loadXML('<bar><foo/></bar>');\n\n        $this->assertEquals($expected, $actual);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Float Equality with Delta in PHPUnit\nDESCRIPTION: Demonstrates usage of assertEqualsWithDelta() to compare floating point numbers within a specified delta margin. Shows comparison of calculator results with expected values.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class EqualsWithFloatsAndDeltaTest extends TestCase\n{\n    public function testCalculator(): void\n    {\n        $this->assertEqualsWithDelta(1.0, 1.1, 0.2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Coverage Reports in PHPUnit XML Configuration\nDESCRIPTION: Example of the <report> element configuration for generating various code coverage report formats. This snippet demonstrates how to set up reports in formats like Clover, Cobertura, Crap4j, HTML, PHP, text, and XML.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/configuration.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<report>\n    <clover outputFile=\"clover.xml\"/>\n    <cobertura outputFile=\"cobertura.xml\"/>\n    <crap4j outputFile=\"crap4j.xml\" threshold=\"50\"/>\n    <html outputDirectory=\"html-coverage\" lowUpperBound=\"50\" highLowerBound=\"90\"/>\n    <php outputFile=\"coverage.php\"/>\n    <text outputFile=\"coverage.txt\" showUncoveredFiles=\"false\" showOnlySummary=\"true\"/>\n    <xml outputDirectory=\"xml-coverage\"/>\n</report>\n```\n\n----------------------------------------\n\nTITLE: Using createConfiguredMock() in PHPUnit\nDESCRIPTION: This example demonstrates how to use createConfiguredMock() to create a mock object and configure return values for its methods using an associative array.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/CreateConfiguredMockExampleTest.php\n   :caption: Using createConfiguredMock() to create a mock object and configure return values\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Using assertArrayIsIdenticalToArrayIgnoringListOfKeys() in PHPUnit\nDESCRIPTION: Demonstrates how to use assertArrayIsIdenticalToArrayIgnoringListOfKeys() to verify that two arrays are identical while ignoring specified keys. This example shows a failure case.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ArrayIsIdenticalToArrayIgnoringListOfKeysTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertArrayIsIdenticalToArrayIgnoringListOfKeys(\n            ['a' => 1, 'b' => 2, 'c' => 3],\n            ['a' => 1, 'd' => 4],\n            ['b']\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reporting Options in PHPUnit (Console Output)\nDESCRIPTION: Command-line options for controlling the console output format in PHPUnit, including color settings, column width configuration, and output stream selection.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/textui.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--colors <flag>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--columns <n>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--columns max\n```\n\nLANGUAGE: bash\nCODE:\n```\n--stderr\n```\n\n----------------------------------------\n\nTITLE: Using assertEquals() with Mixed Variables in PHPUnit\nDESCRIPTION: Demonstrates how to use assertEquals() to verify that two variables are equal (using the == operator). This shows that '0' and 0 are considered equal unlike with assertSame().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualsTest extends TestCase\n{\n    public function testSuccess(): void\n    {\n        $this->assertEquals('0', 0);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Coverage in PHPUnit XML Configuration\nDESCRIPTION: Example of the <coverage> element configuration with attributes for controlling code coverage behavior. This snippet shows how to set up various code coverage options including handling uncovered files, path coverage, and deprecated code units.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/configuration.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<coverage includeUncoveredFiles=\"true\"\n             pathCoverage=\"false\"\n             ignoreDeprecatedCodeUnits=\"true\"\n             disableCodeCoverageIgnore=\"true\">\n    <!-- ... -->\n</coverage>\n```\n\n----------------------------------------\n\nTITLE: Using assertEquals() with Objects in PHPUnit\nDESCRIPTION: Demonstrates how to use assertEquals() to verify that two objects have equal property values. This example shows a failure case where the objects have different property values.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualsWithObjectsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $expected = new stdClass;\n        $expected->a = 'a';\n        $expected->b = 'b';\n\n        $actual = new stdClass;\n        $actual->a = 'a';\n        $actual->b = 'c';\n\n        $this->assertEquals($expected, $actual);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Stubbing a Method to Return Self in PHPUnit\nDESCRIPTION: Demonstrates how to use willReturnSelf() to make a stubbed method return a reference to the stub object itself.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function testSomeChainStuff(): void\n{\n    $stub = $this->createStub(SomeClass::class);\n\n    $stub->method('doSomething')\n         ->willReturnSelf();\n\n    $this->assertSame($stub, $stub->doSomething());\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertEquals() with DateTimeImmutable Objects in PHPUnit\nDESCRIPTION: Demonstrates how to use assertEquals() to verify that two DateTimeImmutable objects represent the same point in time. This example shows a failure case with different timestamps.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualsWithDateTimeImmutableTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertEquals(\n            new DateTimeImmutable('2023-03-31'),\n            new DateTimeImmutable('2023-04-01')\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating to a New Major Version of PHPUnit\nDESCRIPTION: Command to explicitly install a new major version of PHPUnit (10.x) when using semantic versioning constraints.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nphive install phpunit@^10.0\n```\n\n----------------------------------------\n\nTITLE: Testing Empty Values with assertEmpty()\nDESCRIPTION: Example demonstrating usage of assertEmpty() to verify if values are empty. Shows testing of an empty array and verification of the assertion.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EmptyTest extends TestCase\n{\n    public function testEmpty(): void\n    {\n        $stack = [];\n\n        $this->assertEmpty($stack);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Group Attribute to Organize PHP Tests\nDESCRIPTION: This attribute assigns tests to specific test groups, which can be used for selective test execution. Groups provide a way to categorize and organize tests beyond their class structure.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nGroup(string $name)\n```\n\n----------------------------------------\n\nTITLE: Using assertEqualsIgnoringCase() with Strings in PHPUnit\nDESCRIPTION: Demonstrates how to use assertEqualsIgnoringCase() to verify that two strings are equal, ignoring differences in letter casing. This example shows a test case for case-insensitive string comparison.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass EqualsWithStringsIgnoringCaseTest extends TestCase\n{\n    public function testSuccess(): void\n    {\n        $this->assertEqualsIgnoringCase('foo', 'FOO');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Abstract Test Case Class with setUp()\nDESCRIPTION: This example shows how to create an abstract test case class with a setUp() method, which can be extended by concrete test classes.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/fixtures.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nabstract class MyTestCase extends TestCase\n{\n    protected function setUp(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Code Blocks from Coverage Analysis\nDESCRIPTION: Example demonstrating how to use the @codeCoverageIgnore, @codeCoverageIgnoreStart, and @codeCoverageIgnoreEnd annotations to exclude specific classes, methods, or code blocks from code coverage analysis.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/code-coverage.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n/**\n * @codeCoverageIgnore\n */\nfinal class Foo\n{\n    public function bar(): void\n    {\n    }\n}\n\nfinal class Bar\n{\n    /**\n     * @codeCoverageIgnore\n     */\n    public function foo(): void\n    {\n    }\n}\n\nif (false) {\n    // @codeCoverageIgnoreStart\n    print '*';\n    // @codeCoverageIgnoreEnd\n}\n\nexit; // @codeCoverageIgnore\n```\n\n----------------------------------------\n\nTITLE: Downloading PHPUnit PHAR File\nDESCRIPTION: Command to download a specific version of PHPUnit packaged as a PHP Archive (PHAR) file.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwget -O phpunit.phar https://phar.phpunit.de/phpunit-10.phar\n```\n\n----------------------------------------\n\nTITLE: Checking Instance Types with assertInstanceOf()\nDESCRIPTION: Example showing how to verify object types using assertInstanceOf(). Demonstrates checking if an object is an instance of a specific class.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass InstanceOfTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertInstanceOf(RuntimeException::class, new Exception);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TestWithJson Attribute for Data Provider Tests in PHP\nDESCRIPTION: Example demonstrating the use of TestWithJson attribute to provide test data in JSON format without implementing a static data provider method. Shows multiple test cases for an addition function.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\Attributes\\TestWithJson;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DataTest extends TestCase\n{\n    #[TestWithJson('[0, 0, 0]')]\n    #[TestWithJson('[0, 1, 1]')]\n    #[TestWithJson('[1, 0, 1]')]\n    #[TestWithJson('[1, 1, 3]')]\n    public function testAdd(int $a, int $b, int $expected): void\n    {\n        $this->assertSame($expected, $a + $b);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Static Properties in PHPUnit setUp and tearDown Methods (PHP)\nDESCRIPTION: This snippet illustrates the recommended approach for explicitly resetting static properties in PHPUnit tests. It suggests using setUp() and tearDown() methods to manage static property values.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/fixtures.rst#2025-04-23_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nsetUp()\ntearDown()\n```\n\n----------------------------------------\n\nTITLE: Creating Mock for Intersection Type in PHPUnit\nDESCRIPTION: This example shows how to use createMockForIntersectionOfInterfaces() to create a mock object that satisfies an intersection type (X&Y) in PHPUnit.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/MockForIntersectionExampleTest.php\n   :caption: Using createMockForIntersectionOfInterfaces() to create a mock object for an intersection type\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Verifying PHPUnit PHAR with PGP Signature\nDESCRIPTION: Series of commands to download and verify the authenticity of a PHPUnit PHAR file using PGP signature.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nwget -O phpunit.phar https://phar.phpunit.de/phpunit-10.phar\nwget -O phpunit.phar.asc https://phar.phpunit.de/phpunit-10.phar.asc\ngpg --keyserver pgp.uni-mainz.de --recv-keys 0x4AA394086372C20A\ngpg phpunit.phar.asc\n```\n\n----------------------------------------\n\nTITLE: Testing Array Contents in PHPUnit\nDESCRIPTION: Demonstrates usage of assertContains() to check if an element exists in an array or iterable. Shows example with simple array search.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContains(4, [1, 2, 3]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Stub for Intersection Type in PHPUnit\nDESCRIPTION: Shows how to use createStubForIntersectionOfInterfaces() to create a test stub for an intersection type (X&Y).\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function testCanBeConstructedWithXY(): void\n{\n    $xy = $this->createStubForIntersectionOfInterfaces([X::class, Y::class]);\n\n    $z = new Z($xy);\n\n    $this->assertInstanceOf(Z::class, $z);\n}\n```\n\n----------------------------------------\n\nTITLE: Long Array Comparison Failure Output in PHPUnit\nDESCRIPTION: Example showing how PHPUnit handles the display of failures in large array comparisons by splitting the output and providing context around each difference to make the output more readable.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class LongArrayDiffTest extends TestCase\n{\n    public function testEquality(): void\n    {\n        $this->assertSame(\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 1, 0, 0, 0, 0\n            ],\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 0, 0, 0, 0\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing a Method with a Callback in PHPUnit\nDESCRIPTION: Shows how to use willReturnCallback() to make a stubbed method return a value calculated by a callback function.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function testReturnCallbackStub(): void\n{\n    $stub = $this->createStub(SomeClass::class);\n\n    $stub->method('doSomething')\n         ->willReturnCallback(fn (string $arg) => strtoupper($arg));\n\n    $this->assertSame('FOO', $stub->doSomething('foo'));\n    $this->assertSame('BAR', $stub->doSomething('bar'));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PHPUnit Event Tracer\nDESCRIPTION: Example of implementing an event tracer that receives all PHPUnit events. Shows implementation of the trace() method for handling any event type.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/extending-phpunit.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Example\\PHPUnit\\Extension;\n\nuse PHPUnit\\Event\\Event;\nuse PHPUnit\\Event\\Tracer\\Tracer;\n\nfinal class ExampleTracer implements Tracer\n{\n    public function trace(Event $event): void\n    {\n        print $event->asString() . PHP_EOL;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Phive with Command Line\nDESCRIPTION: Commands to download, verify, and install Phive, the PHAR Installation and Verification Environment tool.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nwget https://phar.io/releases/phive.phar\nwget https://phar.io/releases/phive.phar.asc\ngpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0x9B2D5D79\ngpg --verify phive.phar.asc phive.phar\nchmod +x phive.phar\nmv phive.phar /usr/local/bin/phive\n```\n\n----------------------------------------\n\nTITLE: Configuring Set-Hooked Property Mock in PHPUnit\nDESCRIPTION: This example demonstrates how to configure expectations for a set-hooked property named 'property' in a PHPUnit mock object.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/SetHookedPropertyMockExampleTest.php\n   :caption: Test that uses a mock object of an interface with a set-hooked property\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Asserting Same Size in PHP with PHPUnit\nDESCRIPTION: Illustrates the usage of assertSameSize() method in PHPUnit to check if two Countable or iterable objects have the same size. It also mentions the inverse assertion assertNotSameSize().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class SameSizeTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertSameSize(['a', 'b', 'c'], ['1', '2']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering PHPUnit Extensions\nDESCRIPTION: Shows how to register test runner extensions using the extensions element in PHPUnit configuration.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/configuration.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <bootstrap class=\"Vendor\\ExampleExtensionForPhpunit\\Extension\"/>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Provider Tests with TestWith Attribute in PHP\nDESCRIPTION: Example showing how to use the TestWith attribute to provide test data without implementing a static data provider method. Demonstrates multiple test cases for an addition function.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\Attributes\\TestWith;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DataTest extends TestCase\n{\n    #[TestWith([0, 0, 0])]\n    #[TestWith([0, 1, 1])]\n    #[TestWith([1, 0, 1])]\n    #[TestWith([1, 1, 3])]\n    public function testAdd(int $a, int $b, int $expected): void\n    {\n        $this->assertSame($expected, $a + $b);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using expected() Method with Callback in PHPUnit Assertions\nDESCRIPTION: Example demonstrating how to use the expected() method with a callback matcher in PHPUnit test assertions. This code checks if an array contains an element that satisfies a specified condition using the contains() and callback() methods.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/examples/assertions/expected.txt#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->assertThat(\n    ['bar', 'baz'],\n    $this->contains($this->expected(function($value) {\n        return substr($value, 0, 1) === 'b';\n    }))\n);\n```\n\n----------------------------------------\n\nTITLE: Making PHPUnit PHAR Executable\nDESCRIPTION: Command to make the PHPUnit PHAR file executable so it can be run directly.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x phpunit.phar\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Groups in PHPUnit XML\nDESCRIPTION: Demonstrates how to include and exclude test groups using XML configuration. Equivalent to using --group and --exclude-group command line options.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/configuration.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<groups>\n  <include>\n    <group>name</group>\n  </include>\n  <exclude>\n    <group>name</group>\n  </exclude>\n</groups>\n```\n\n----------------------------------------\n\nTITLE: Asserting Scalar Content in PHP with PHPUnit\nDESCRIPTION: Demonstrates the use of assertContainsOnlyScalar() method in PHPUnit to verify if an iterable contains only scalar values. It also mentions the inverse assertion assertContainsNotOnlyScalar().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyScalarTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnlyScalar([1, '2', 3.0, true, null]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DependsOnClassUsingShallowClone Attribute in PHP Tests\nDESCRIPTION: This attribute specifies that a test depends on all tests in another class with shallow cloning of passed values. It allows for dependencies on an entire test class with shallow copies of test data.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nDependsOnClassUsingShallowClone(string $className)\n```\n\n----------------------------------------\n\nTITLE: Using TestDox attribute with data providers in PHPUnit\nDESCRIPTION: Demonstrates how to use the TestDox attribute together with data providers, where method parameters can be used as placeholders in the alternative description. This example shows parameter substitution in the TestDox output.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\Attributes\\DataProvider;\nuse PHPUnit\\Framework\\Attributes\\TestDox;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ExampleTest extends TestCase\n{\n    #[DataProvider('additionProvider')]\n    #[TestDox('Adding $a to $b results in $expected')]\n    public function testAdd(int $expected, int $a, int $b)\n    {\n        $this->assertSame($expected, $a + $b);\n    }\n\n    public static function additionProvider()\n    {\n        return [\n            'data set 1' => [0, 0, 0],\n            'data set 2' => [1, 0, 1],\n            'data set 3' => [1, 1, 0],\n            'data set 4' => [3, 1, 1]\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DependsOnClassUsingDeepClone Attribute in PHP Tests\nDESCRIPTION: This attribute specifies that a test depends on all tests in another class with deep cloning of passed values. It allows for dependencies on an entire test class while ensuring independent copies of test data.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nDependsOnClassUsingDeepClone(string $className)\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON String to JSON File in PHP with PHPUnit\nDESCRIPTION: Shows how to use assertJsonStringEqualsJsonFile() to compare a JSON string with the contents of a JSON file. This assertion verifies if the JSON string matches the JSON file content.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class JsonStringEqualsJsonFileTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertJsonStringEqualsJsonFile(\n            'path/to/fixture/file.json',\n            json_encode(['Mascot' => 'Tux'])\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing String Equality Example - PHP\nDESCRIPTION: Example of using assertJson() to validate JSON strings in PHPUnit tests. Shows how to test if a string contains valid JSON data.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class JsonTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertJson('{\"name\":\"John\"}')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DependsExternal Attribute in PHP Tests\nDESCRIPTION: This attribute specifies that a test depends on a test in another class without cloning passed values. It enables cross-class test dependencies while maintaining reference integrity.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nDependsExternal(string $className, string $methodName)\n```\n\n----------------------------------------\n\nTITLE: Using assertSame() with Mixed Variables in PHPUnit\nDESCRIPTION: Demonstrates how to use assertSame() to verify that two variables have the same type and value. This test shows a failure case where types differ - '0' (string) vs 0 (integer).\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass SameWithMixedTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertSame('0', 0);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Comparing XML Strings in PHP with PHPUnit\nDESCRIPTION: Illustrates the use of assertXmlStringEqualsXmlString() to compare two XML strings. This assertion verifies if two XML strings are equivalent.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class XmlStringEqualsXmlStringTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertXmlStringEqualsXmlString(\n            '<foo><bar/></foo>',\n            '<foo><baz/></foo>'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Tests from Code Coverage with CoversNothing\nDESCRIPTION: Example showing how to use the CoversNothing attribute to specify that a test should not contribute to code coverage at all. This is useful for integration tests to ensure only smaller tests generate code coverage.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/code-coverage.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\Attributes\\CoversNothing;\nuse PHPUnit\\Framework\\TestCase;\n\n#[CoversNothing]\nfinal class IntegrationTest extends TestCase\n{\n    public function testRegisteredUserCanLogIn(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing XML Files in PHP with PHPUnit\nDESCRIPTION: Demonstrates the usage of assertXmlFileEqualsXmlFile() to compare two XML files. This assertion verifies if the contents of two XML files are equal.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class XmlFileEqualsXmlFileTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertXmlFileEqualsXmlFile(\n            'path/to/fixture/file.xml',\n            'path/to/actual/file.xml'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Code Coverage Configuration Options in PHPUnit\nDESCRIPTION: Options for configuring code coverage reporting in various formats (Clover, Cobertura, Crap4J, HTML, PHP, text, XML) and controlling coverage analysis behavior.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/textui.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n--coverage-clover <file>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--coverage-cobertura <file>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--coverage-crap4j <file>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--coverage-html <dir>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--coverage-php <file>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--coverage-text=<file>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--coverage-xml <dir>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--warm-coverage-cache\n```\n\nLANGUAGE: bash\nCODE:\n```\n--coverage-filter <dir>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--path-coverage\n```\n\nLANGUAGE: bash\nCODE:\n```\n--disable-coverage-ignore\n```\n\nLANGUAGE: bash\nCODE:\n```\n--no-coverage\n```\n\n----------------------------------------\n\nTITLE: Comparing XML String to XML File in PHP with PHPUnit\nDESCRIPTION: Shows how to use assertXmlStringEqualsXmlFile() to compare an XML string with the contents of an XML file. This assertion checks if the XML string matches the XML file content.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class XmlStringEqualsXmlFileTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertXmlStringEqualsXmlFile(\n            'path/to/fixture/file.xml',\n            '<foo><bar/></foo>'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in PHP with PHPUnit\nDESCRIPTION: Shows how to use assertFileExists() to verify if a file exists. This assertion checks for the presence of a specified file.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class FileExistsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertFileExists('/path/to/file');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertThat() with Constraints in PHP with PHPUnit\nDESCRIPTION: Demonstrates how to use assertThat() with logicalNot() and equalTo() constraints to create more complex assertions in PHPUnit. This example shows a test that is equivalent to using assertNotEquals() to verify that a biscuit is not made of chocolate.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class BiscuitTest extends TestCase\n{\n    public function testEquals(): void\n    {\n        $theBiscuit = ['chocolate' => true];\n        $myBiscuit  = ['chocolate' => true];\n\n        $this->assertThat(\n            $theBiscuit,\n            $this->equalTo($myBiscuit)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Array Types with assertIsArray()\nDESCRIPTION: Example demonstrating the use of assertIsArray() to verify if a value is an array. Shows basic array type checking.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass IsArrayTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertIsArray(null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON Strings in PHP with PHPUnit\nDESCRIPTION: Illustrates the use of assertJsonStringEqualsJsonString() to compare two JSON strings. This assertion checks if two JSON strings are equivalent.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class JsonStringEqualsJsonStringTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertJsonStringEqualsJsonString(\n            json_encode(['Mascot' => 'Tux']),\n            json_encode(['Mascot' => 'Beastie'])\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Iterable Content in PHP with PHPUnit\nDESCRIPTION: Demonstrates the use of assertContainsOnlyIterable() method in PHPUnit to verify if an iterable contains only iterable values. It also mentions the inverse assertion assertContainsNotOnlyInt().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyIterableTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnlyIterable([[1, 2, 3], new ArrayObject([4, 5, 6]), [7, 8, 9]]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit XML Element Attributes\nDESCRIPTION: This snippet shows the structure of the <phpunit> element and its various attributes used to configure PHPUnit's behavior. It includes attributes for controlling backups, bootstrapping, caching, output formatting, and test execution flow.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/configuration.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<phpunit backupGlobals=\"false\"\n         backupStaticProperties=\"false\"\n         bootstrap=\"path/to/bootstrap.php\"\n         cacheDirectory=\"/tmp/phpunit-cache\"\n         cacheResult=\"true\"\n         colors=\"false\"\n         columns=\"80\"\n         controlGarbageCollector=\"false\"\n         numberOfTestsBeforeGarbageCollection=\"100\"\n         requireCoverageMetadata=\"false\"\n         processIsolation=\"false\"\n         stopOnDefect=\"false\"\n         stopOnError=\"false\"\n         stopOnFailure=\"false\"\n         stopOnWarning=\"false\"\n         stopOnRisky=\"false\"\n         stopOnDeprecation=\"false\"\n         stopOnNotice=\"false\"\n         stopOnSkipped=\"false\"\n         stopOnIncomplete=\"false\"\n         failOnEmptyTestSuite=\"false\"\n         failOnWarning=\"false\"\n         failOnRisky=\"false\"\n         failOnDeprecation=\"false\"\n         failOnPhpunitDeprecation=\"false\"\n         failOnNotice=\"false\">\n  <!-- Additional configuration elements go here -->\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Test Directory Structure\nDESCRIPTION: Shows the directory structure of a PHPUnit project, illustrating how test case classes mirror the package and class structure of the System Under Test (SUT).\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/organizing-tests.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nsrc                                          tests/unit\n├── autoload.php                             ├── CameraTest.php\n├── Camera.php                               ├── canvas\n├── canvas                                   │   ├── AnsiMapperTest.php\n│   ├── AnsiMapper.php                       │   ├── CanvasTest.php\n│   ├── CanvasIterator.php                   │   └── PortablePixmapMapperTest.php\n│   ├── Canvas.php                           ├── ColorTest.php\n│   ├── PortablePixmapMapper.php             ├── intersection\n│   └── WebpMapper.php                       │   ├── IntersectionCollectionTest.php\n├── Color.php                                │   └── IntersectionTest.php\n├── exceptions                               ├── material\n│   ├── Exception.php                        │   ├── CheckersPatternTest.php\n│   ├── IntersectionHasNoHitException.php    │   ├── GradientPatternTest.php\n│   ├── InvalidArgumentException.php         │   ├── MaterialTest.php\n│   ├── OutOfBoundsException.php             │   ├── PatternTest.php\n│   ├── RuntimeException.php                 │   ├── RingPatternTest.php\n│   └── WorldHasNoLightException.php         │   └── StripePatternTest.php\n├── intersection                             ├── math\n│   ├── IntersectionCollectionIterator.php   │   ├── MatrixTest.php\n│   ├── IntersectionCollection.php           │   ├── RayTest.php\n│   ├── Intersection.php                     │   ├── TransformationsTest.php\n│   └── PreparedComputation.php              │   └── TupleTest.php\n├── material                                 ├── PointLightTest.php\n│   ├── CheckersPattern.php                  ├── shapes\n│   ├── GradientPattern.php                  │   ├── PlaneTest.php\n│   ├── Material.php                         │   ├── ShapeCollectionTest.php\n│   ├── Pattern.php                          │   ├── ShapeTest.php\n│   ├── RingPattern.php                      │   └── SphereTest.php\n│   └── StripePattern.php                    └── WorldTest.php\n├── math\n│   ├── Matrix.php                           tests/integration\n│   ├── Ray.php                              └── PuttingItTogetherTest.php\n│   ├── Transformations.php\n│   └── Tuple.php\n├── PointLight.php\n├── shapes\n│   ├── Plane.php\n│   ├── ShapeCollectionIterator.php\n│   ├── ShapeCollection.php\n│   ├── Shape.php\n│   └── Sphere.php\n└── World.php\n```\n\n----------------------------------------\n\nTITLE: Asserting String Content in PHP with PHPUnit\nDESCRIPTION: Shows how to use assertContainsOnlyString() method in PHPUnit to check if an iterable contains only string values. It also mentions the inverse assertion assertContainsNotOnlyString().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyStringTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnlyString(['1', '2', 3]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Ordering Options in PHPUnit\nDESCRIPTION: Options for controlling the execution order of tests in PHPUnit, including the ability to specify ordering strategies and set random seeds for reproducible randomized test runs.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/textui.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--random-order-seed <N>\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Coverage in PHPUnit XML\nDESCRIPTION: Shows how to set up code coverage analysis in the PHPUnit XML configuration, including specifying directories to include or exclude.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/examples/assertions/expected-format.txt#2025-04-23_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<coverage>\n    <include>\n        <directory suffix=\".php\">src</directory>\n    </include>\n\n    <exclude>\n        <directory suffix=\".php\">src/generated</directory>\n        <file>src/autoload.php</file>\n    </exclude>\n\n    <report>\n        <clover outputFile=\"clover.xml\"/>\n        <crap4j outputFile=\"crap4j.xml\" threshold=\"50\"/>\n        <html outputDirectory=\"html-coverage\" lowUpperBound=\"50\" highLowerBound=\"90\"/>\n        <php outputFile=\"coverage.php\"/>\n        <text outputFile=\"coverage.txt\" showUncoveredFiles=\"false\" showOnlySummary=\"true\"/>\n        <xml outputDirectory=\"xml-coverage\"/>\n    </report>\n</coverage>\n```\n\n----------------------------------------\n\nTITLE: Using BackupGlobals Attribute in PHPUnit Tests\nDESCRIPTION: The BackupGlobals attribute specifies that global and super-global variables should be backed up before a test and restored after the test has run.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nBackupGlobals\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit XML to Limit Issue Reporting to First-Party Code\nDESCRIPTION: This XML configuration file sets up PHPUnit to restrict the reporting of issues to first-party code, excluding third-party code in the vendor directory.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/error-handling.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.0/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         cacheDirectory=\".phpunit.cache\"\n         executionOrder=\"depends,defects\"\n         requireCoverageMetadata=\"true\"\n         beStrictAboutCoverageMetadata=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\">\n    <testsuites>\n        <testsuite name=\"default\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <source>\n        <include>\n            <directory suffix=\".php\">src</directory>\n        </include>\n    </source>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Using the Test attribute in PHP for PHPUnit\nDESCRIPTION: Demonstrates how to use the Test attribute to mark a method as a test method instead of prefixing the method name with 'test'. This attribute can only be used at the method level and is not repeatable.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\Attributes\\Test;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ExampleTest extends TestCase\n{\n    #[Test]\n    public function it_does_something(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DependsUsingShallowClone Attribute in PHP Tests\nDESCRIPTION: This attribute specifies that a test depends on another test in the same class with shallow cloning of passed values. It allows for dependent tests to receive a shallow copy of the producer test's data.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nDependsUsingShallowClone(string $methodName)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dependency Failure Handling in PHPUnit\nDESCRIPTION: Example showing how PHPUnit handles test dependencies when a test fails. If a test that others depend on fails, the dependent tests are skipped to focus attention on the root cause of the failure.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\Attributes\\Depends;\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DependencyFailureTest extends TestCase\n{\n    public function testOne(): void\n    {\n        $this->assertTrue(false);\n    }\n\n    #[Depends('testOne')]\n    public function testTwo(): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using RunClassInSeparateProcess Attribute in PHPUnit Tests\nDESCRIPTION: The RunClassInSeparateProcess attribute specifies that all tests of a test case class should be run in a (single) separate process.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nRunClassInSeparateProcess\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution Logging in PHPUnit XML Configuration\nDESCRIPTION: Example of the <logging> element configuration for logging test execution results. This snippet shows how to set up logging in JUnit XML format, TeamCity format, and TestDox formats (HTML and text).\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/configuration.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<logging>\n    <junit outputFile=\"junit.xml\"/>\n    <teamcity outputFile=\"teamcity.txt\"/>\n    <testdoxHtml outputFile=\"testdox.html\"/>\n    <testdoxText outputFile=\"testdox.txt\"/>\n</logging>\n```\n\n----------------------------------------\n\nTITLE: Using After Attribute in PHPUnit Tests\nDESCRIPTION: The After attribute specifies a protected non-static method to be invoked after each test method. It can include an optional priority parameter to control execution order when multiple After methods exist.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nAfter(int $priority = 0)\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON File Equality in PHP with PHPUnit\nDESCRIPTION: Demonstrates the usage of assertJsonFileEqualsJsonFile() to compare two JSON files. This assertion checks if the contents of two JSON files are equal.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class JsonFileEqualsJsonFileTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertJsonFileEqualsJsonFile(\n            'path/to/fixture/file.json',\n            'path/to/actual/file.json'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BackupStaticProperties Attribute in PHPUnit Tests\nDESCRIPTION: The BackupStaticProperties attribute specifies that static properties of classes should be backed up before a test and restored after the test has run.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nBackupStaticProperties\n```\n\n----------------------------------------\n\nTITLE: Asserting Instances of a Type in PHP with PHPUnit\nDESCRIPTION: Illustrates the usage of assertContainsOnlyInstancesOf() method in PHPUnit to verify if an iterable contains only instances of a specific class or interface. It also mentions the inverse assertion assertContainsNotOnlyInstancesOf().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyInstancesOfTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnlyInstancesOf(\n            Throwable::class,\n            [new Exception, new RuntimeException, new stdClass]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BeforeClass Attribute in PHP Tests\nDESCRIPTION: This attribute specifies that a public static method should be executed before the first test in a class runs. It can include an optional priority parameter to control execution order when multiple BeforeClass methods exist.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nBeforeClass(int $priority = 0)\n```\n\n----------------------------------------\n\nTITLE: Using Small Attribute to Define Test Size in PHP\nDESCRIPTION: This attribute marks tests as 'small', which affects test execution timeouts and code coverage reporting. Small tests are highlighted with a darker shade of green in HTML code coverage reports.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nSmall\n```\n\n----------------------------------------\n\nTITLE: Using ExcludeGlobalVariableFromBackup Attribute in PHPUnit Tests\nDESCRIPTION: The ExcludeGlobalVariableFromBackup attribute excludes a specified global variable from the backup and restore operations for global and super-global variables.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nExcludeGlobalVariableFromBackup($globalVariableName)\n```\n\n----------------------------------------\n\nTITLE: Asserting Object Properties in PHP with PHPUnit\nDESCRIPTION: Demonstrates the use of assertObjectHasProperty() method in PHPUnit to check if an object has a specific property. It also mentions the inverse assertion assertObjectNotHasProperty().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ObjectHasPropertyTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertObjectHasProperty('foo', new stdClass);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHPUnit XML Configuration for Test Suite Organization\nDESCRIPTION: Example XML configuration file for PHPUnit that defines test suites and their directory locations. Shows how to compose test suites using XML configuration instead of filesystem structure.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/organizing-tests.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/11.4/phpunit.xsd\"\n         bootstrap=\"tests/bootstrap.php\">\n    <testsuites>\n        <testsuite name=\"unit\">\n            <directory>tests/unit</directory>\n        </testsuite>\n\n        <testsuite name=\"integration\">\n            <directory>tests/integration</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Progress and Result Output Control Options in PHPUnit\nDESCRIPTION: Options for controlling the display of test execution progress and results in PHPUnit, allowing suppression of different output components.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/textui.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--no-progress\n```\n\nLANGUAGE: bash\nCODE:\n```\n--no-results\n```\n\nLANGUAGE: bash\nCODE:\n```\n--no-output\n```\n\n----------------------------------------\n\nTITLE: Defining Global Constants\nDESCRIPTION: Shows how to define global constants through XML configuration and equivalent PHP code.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/configuration.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<php>\n  <const name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nLANGUAGE: php\nCODE:\n```\ndefine('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Checking Directory Existence in PHP with PHPUnit\nDESCRIPTION: Demonstrates the usage of assertDirectoryExists() to verify if a directory exists. This assertion checks for the presence of a specified directory.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DirectoryExistsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertDirectoryExists('/path/to/directory');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AfterClass Attribute in PHPUnit Tests\nDESCRIPTION: The AfterClass attribute specifies a public static method to be invoked after the last test method of a test case class. It can include an optional priority parameter to control execution order.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nAfterClass(int $priority = 0)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Greeter Class in PHP\nDESCRIPTION: A basic PHP class named 'Greeter' with a 'greet' method that returns a greeting string with the input name.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace Greeter;\n\nfinal class Greeter\n{\n    public function greet(string $name): string\n    {\n        return 'Hello, ' . $name . '!';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PostCondition Attribute in PHPUnit Tests\nDESCRIPTION: The PostCondition attribute specifies a protected non-static method to be invoked after each test method, but before 'after test' methods. It can include an optional priority parameter to control execution order.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nPostCondition(int $priority = 0)\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit with Phive\nDESCRIPTION: Command to install PHPUnit using Phive, which downloads the PHP archive and sets it up in the project.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nphive install phpunit\n```\n\n----------------------------------------\n\nTITLE: Using assertIsReadable() in PHP with PHPUnit\nDESCRIPTION: Demonstrates how to use assertIsReadable() to verify if a file or directory is readable in a PHPUnit test. This assertion checks file permission and returns an error when the specified path is not readable.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class IsReadableTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertIsReadable('/path/to/unreadable');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Callable Content in PHP with PHPUnit\nDESCRIPTION: Demonstrates the usage of assertContainsOnlyCallable() method in PHPUnit to check if an iterable contains only callable values. It also mentions the inverse assertion assertContainsNotOnlyCallable().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyCallableTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnlyCallable([function() {}, 'strlen', 12]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ticket Attribute in PHP Tests\nDESCRIPTION: This attribute is an alias for the Group attribute, commonly used to associate tests with specific issue tickets. It helps track which tests cover specific bug fixes or feature implementations.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nTicket(string $text)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Class for Error Handling in PHP\nDESCRIPTION: This PHP class defines unit tests that trigger deprecation warnings from both first-party and third-party code.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/error-handling.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace example;\n\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class FirstPartyClassTest extends TestCase\n{\n    public function testOne(): void\n    {\n        $object = new FirstPartyClass;\n        $object->deprecatedMethod();\n\n        $this->assertTrue(true);\n    }\n\n    public function testTwo(): void\n    {\n        $object = new \\ThirdPartyClass;\n        $object->deprecatedMethod();\n\n        $this->assertTrue(true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertIsWritable() in PHP with PHPUnit\nDESCRIPTION: Demonstrates how to use assertIsWritable() to verify if a file or directory is writable in a PHPUnit test. This assertion checks file permission and returns an error when the specified path is not writable.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class IsWritableTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertIsWritable('/path/to/unwritable');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suites in PHPUnit XML\nDESCRIPTION: Shows how to define multiple test suites within the PHPUnit XML configuration, including specifying directories and individual test files.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/examples/assertions/expected-format.txt#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<testsuites>\n    <testsuite name=\"unit\">\n        <directory>tests/unit</directory>\n    </testsuite>\n\n    <testsuite name=\"integration\">\n        <directory>tests/integration</directory>\n    </testsuite>\n\n    <testsuite name=\"edge-to-edge\">\n        <directory>tests/edge-to-edge</directory>\n    </testsuite>\n\n    <testsuite name=\"end-to-end\">\n        <directory>tests/end-to-end</directory>\n    </testsuite>\n</testsuites>\n```\n\n----------------------------------------\n\nTITLE: Configuring Groups in PHPUnit XML\nDESCRIPTION: Demonstrates how to define groups of tests using the 'groups' element in the PHPUnit XML configuration.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/examples/assertions/expected-format.txt#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<groups>\n    <include>\n        <group>name</group>\n    </include>\n    <exclude>\n        <group>name</group>\n    </exclude>\n</groups>\n```\n\n----------------------------------------\n\nTITLE: Using PreserveGlobalState Attribute in PHPUnit Tests\nDESCRIPTION: The PreserveGlobalState attribute specifies whether the global state of the main PHPUnit test runner process should be made available in the child process when a test is run in a separate process.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nPreserveGlobalState(bool $enabled)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in PHPUnit XML\nDESCRIPTION: Shows how to set up various logging options in the PHPUnit XML configuration, including different output formats and destinations.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/examples/assertions/expected-format.txt#2025-04-23_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<logging>\n    <testdoxHtml outputFile=\"path/to/logfile.html\"/>\n    <testdoxText outputFile=\"path/to/logfile.txt\"/>\n    <junit outputFile=\"path/to/logfile.xml\"/>\n    <teamcity outputFile=\"path/to/logfile.txt\"/>\n    <testdoxXml outputFile=\"path/to/logfile.xml\"/>\n</logging>\n```\n\n----------------------------------------\n\nTITLE: Using assertArrayIsIdenticalToArrayOnlyConsideringListOfKeys() in PHPUnit\nDESCRIPTION: Demonstrates how to use assertArrayIsIdenticalToArrayOnlyConsideringListOfKeys() to verify that two arrays are identical while only considering specified keys. This example shows a failure case.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ArrayIsIdenticalToArrayOnlyConsideringListOfKeysTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertArrayIsIdenticalToArrayOnlyConsideringListOfKeys(\n            ['a' => 1, 'b' => 2, 'c' => 3],\n            ['a' => 1, 'b' => 3, 'd' => 4],\n            ['a', 'b']\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using DependsExternalUsingShallowClone Attribute in PHP Tests\nDESCRIPTION: This attribute specifies that a test depends on a test in another class with shallow cloning of passed values. It enables cross-class test dependencies while providing shallow copies of the test data.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nDependsExternalUsingShallowClone(string $className, string $methodName)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Class with Intersection Type in PHP\nDESCRIPTION: Demonstrates a class Z that uses an intersection type (X&Y) as a parameter type.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Z\n{\n    public function __construct(X&Y $xy)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using RunTestsInSeparateProcesses Attribute in PHPUnit Tests\nDESCRIPTION: The RunTestsInSeparateProcesses attribute specifies that all tests of a test case class should be run in separate processes (one separate process per test).\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nRunTestsInSeparateProcesses\n```\n\n----------------------------------------\n\nTITLE: Using assertNan() in PHP with PHPUnit\nDESCRIPTION: Demonstrates how to use assertNan() to verify if a value is NAN (Not A Number) in a PHPUnit test. This assertion is useful for checking mathematical operations that result in NAN values.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class NanTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertNan(1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Output Format Options in PHPUnit\nDESCRIPTION: Options for using alternative output formats like TeamCity and TestDox instead of the default PHPUnit output format.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/textui.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--teamcity\n```\n\nLANGUAGE: bash\nCODE:\n```\n--testdox\n```\n\nLANGUAGE: bash\nCODE:\n```\n--testdox-summary\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with Return Type Declaration in PHP\nDESCRIPTION: Shows a class C with a method m() that has a return type declaration of type D.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass C\n{\n    public function m(): D\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Static Property Backup in PHPUnit Tests (PHP)\nDESCRIPTION: This code snippet shows how to enable the backup of static properties in a PHPUnit test method. The @BackupStaticProperties annotation is used to activate this feature.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/fixtures.rst#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n@BackupStaticProperties(true)\n```\n\n----------------------------------------\n\nTITLE: Using DependsExternalUsingDeepClone Attribute in PHP Tests\nDESCRIPTION: This attribute specifies that a test depends on a test in another class with deep cloning of passed values. It enables cross-class test dependencies while ensuring independent copies of test data.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nDependsExternalUsingDeepClone(string $className, string $methodName)\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Shows how to set environment variables with optional force overwrite through XML configuration.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/configuration.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<php>\n  <env name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nLANGUAGE: php\nCODE:\n```\n$_ENV['foo'] = 'bar';\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Y in PHP\nDESCRIPTION: This code snippet defines an interface named Y, which is used alongside interface X in an example of creating mock objects for intersection types.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/src/Y.php\n   :caption: An interface named Y\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Running Executable PHPUnit PHAR\nDESCRIPTION: Command to run the PHPUnit PHAR file directly after making it executable.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./phpunit.phar --version\nPHPUnit 10.0.0 by Sebastian Bergmann and contributors.\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration Options in PHPUnit\nDESCRIPTION: Options for configuring test result logging to various formats and files, including JUnit XML, TeamCity, TestDox HTML/text, and event streams.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/textui.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n--log-junit <file>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--log-teamcity <file>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--testdox-html <file>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--testdox-text <file>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--log-events-text <file>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--log-events-verbose-text <file>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--no-logging\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Documentation Attributes in PHP\nDESCRIPTION: Code attributes used for configuring test coverage and execution parameters in PHPUnit tests, including coverage class specification and test size indicators.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/risky-tests.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nPHPUnit\\Framework\\Attributes\\CoversClass\nPHPUnit\\Framework\\Attributes\\CoversFunction\nPHPUnit\\Framework\\Attributes\\UsesClass\nPHPUnit\\Framework\\Attributes\\UsesFunction\nPHPUnit\\Framework\\Attributes\\Large\nPHPUnit\\Framework\\Attributes\\Medium\nPHPUnit\\Framework\\Attributes\\Small\n```\n\n----------------------------------------\n\nTITLE: Debugging PHPUnit with Event Logging\nDESCRIPTION: Command-line example for debugging PHPUnit execution by logging events to standard output. This command disables default output and uses the --log-events-text option to write event information.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/extending-phpunit.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphpunit --no-output --log-events-text php://stdout\n```\n\n----------------------------------------\n\nTITLE: Using Before Attribute in PHPUnit Tests\nDESCRIPTION: The Before attribute specifies a protected non-static method to be invoked before each test method. It can include an optional priority parameter to control execution order when multiple Before methods exist.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nBefore(int $priority = 0)\n```\n\n----------------------------------------\n\nTITLE: Using Medium Attribute to Define Test Size in PHP\nDESCRIPTION: This attribute marks tests as 'medium', which affects test execution timeouts and code coverage reporting. Medium tests are highlighted with an intermediate shade of green in HTML code coverage reports.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nMedium\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables\nDESCRIPTION: Demonstrates setting global variables through XML configuration and equivalent PHP code.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/configuration.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<php>\n  <var name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nLANGUAGE: php\nCODE:\n```\n$GLOBALS['foo'] = 'bar';\n```\n\n----------------------------------------\n\nTITLE: Configuring Get-Hooked Property Stub in PHPUnit\nDESCRIPTION: This example demonstrates how to configure the behavior of a get-hooked property named 'property' in a PHPUnit test stub.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/GetHookedPropertyStubExampleTest.php\n   :caption: Test that uses a test stub of an interface with a get-hooked property\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Implementing Third-Party Class with Deprecated Method in PHP\nDESCRIPTION: This PHP class implements a third-party class with a deprecated method that triggers a user deprecation warning.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/error-handling.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nfinal class ThirdPartyClass\n{\n    /**\n     * @deprecated\n     */\n    public function deprecatedMethod(): void\n    {\n        @trigger_error(\n            'deprecation in third-party code',\n            E_USER_DEPRECATED\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Case in Array Comparison with Weak Equality in PHPUnit\nDESCRIPTION: Example showing an edge case in PHPUnit's diff generation when using weak comparison (assertEquals) where differences may be reported even when the comparison function would consider the values as equal.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/writing-tests-for-phpunit.rst#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ArrayWeakComparisonTest extends TestCase\n{\n    public function testEquality(): void\n    {\n        $this->assertEquals(\n            [1, 2, 3, 4, 5, 6],\n            ['1', 2, 33, 4, 5, 6]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Object Content in PHP with PHPUnit\nDESCRIPTION: Demonstrates the use of assertContainsOnlyObject() method in PHPUnit to check if an iterable contains only object values. It also mentions the inverse assertion assertContainsNotOnlyObject().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyObjectTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnlyObject([new stdClass, new RuntimeException, null]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Null Content in PHP with PHPUnit\nDESCRIPTION: Shows how to use assertContainsOnlyNull() method in PHPUnit to check if an iterable contains only null values. It also mentions the inverse assertion assertContainsNotOnlyNull().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyNullTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnlyNull([null, null, 1]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Version Requirement Examples\nDESCRIPTION: Examples of using RequiresPhpunit attribute to specify PHPUnit version requirements for test execution\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n#[RequiresPhpunit('10.1.0')]\n#[RequiresPhpunit('>= 10.1.0')]\n#[RequiresPhpunit('^10.1')]\n```\n\n----------------------------------------\n\nTITLE: Defining Subject Class in PHP\nDESCRIPTION: This code snippet defines a Subject class that is part of the System under Test (SUT) for demonstrating mock object usage.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/src/Subject.php\n   :caption: Subject class that is part of the System under Test (SUT)\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Using RunInSeparateProcess Attribute in PHPUnit Tests\nDESCRIPTION: The RunInSeparateProcess attribute specifies that a test should be run in a separate process.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nRunInSeparateProcess\n```\n\n----------------------------------------\n\nTITLE: Basic PHPUnit XML Configuration Structure\nDESCRIPTION: Demonstrates the basic structure of a PHPUnit XML configuration file, including the root element and its attributes.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/examples/assertions/expected-format.txt#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.0/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         cacheDirectory=\".phpunit.cache\"\n         executionOrder=\"depends,defects\"\n         requireCoverageMetadata=\"true\"\n         beStrictAboutCoverageMetadata=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\">\n    <testsuites>\n        <testsuite name=\"default\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory suffix=\".php\">src</directory>\n        </include>\n    </coverage>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Typical PHP Project Directory Structure\nDESCRIPTION: Example of a typical directory structure for a PHP project, showing where source code, tests, and tools like PHPUnit are stored.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n├── public\n├── src\n├── tests\n└── tools\n```\n\n----------------------------------------\n\nTITLE: Asserting Closed Resource Content in PHP with PHPUnit\nDESCRIPTION: Illustrates the usage of assertContainsOnlyClosedResource() method in PHPUnit to check if an iterable contains only closed resource values. It also mentions the inverse assertion assertContainsNotOnlyClosedResource().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyClosedResourceTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $resource = fopen(__FILE__, 'r');\n        fclose($resource);\n\n        $this->assertContainsOnlyClosedResource([$resource, $resource, fopen(__FILE__, 'r')]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Extension Requirement Examples\nDESCRIPTION: Examples of using RequiresPhpExtension attribute to specify PHP extension requirements with optional version constraints\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n#[RequiresPhpExtension('mysqli')]\n#[RequiresPhpExtension('mysqli', '>= 8.3.0')]\n#[RequiresPhpExtension('mysqli', '^8.3')]\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit with Composer\nDESCRIPTION: Command to install PHPUnit as a development dependency using Composer\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev phpunit/phpunit\n```\n\n----------------------------------------\n\nTITLE: Asserting Integer Content in PHP with PHPUnit\nDESCRIPTION: Illustrates the usage of assertContainsOnlyInt() method in PHPUnit to check if an iterable contains only integer values. It also mentions the inverse assertion assertContainsNotOnlyInt().\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/assertions.rst#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyIntTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnlyInt([1, 2, 3.0]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit Extension with XML\nDESCRIPTION: An XML configuration example for registering an ExampleExtension with parameters in PHPUnit. This configuration doesn't require setting the extensionsDirectory attribute as Composer's autoloading mechanism handles extensions from Composer packages.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/extending-phpunit.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n.. literalinclude:: examples/extending-phpunit/phpunit-composer.xml\n   :caption: An XML configuration registering an ExampleExtension with parameters\n   :language: xml\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Extension Configuration\nDESCRIPTION: XML configuration for registering a PHPUnit extension from a PHAR file with custom parameters.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/extending-phpunit.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.0/phpunit.xsd\"\n         extensionsDirectory=\"tools/phpunit.d\">\n    <extensions>\n        <extension class=\"Example\\PHPUnit\\Extension\\ExampleExtension\">\n            <parameter name=\"example\" value=\"value\"/>\n        </extension>\n    </extensions>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Using DependsUsingDeepClone Attribute in PHP Tests\nDESCRIPTION: This attribute specifies that a test depends on another test in the same class with deep cloning of passed values. It provides a way to ensure independent copies of test data between dependent tests.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nDependsUsingDeepClone(string $methodName)\n```\n\n----------------------------------------\n\nTITLE: Global PHPUnit Installation Commands\nDESCRIPTION: Commands to install PHPUnit globally by downloading and setting up the PHAR file\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nwget -O phpunit.phar https://phar.phpunit.de/phpunit-10.phar\nchmod +x phpunit.phar\nsudo mv phpunit.phar /usr/local/bin/phpunit\nphpunit --version\n```\n\n----------------------------------------\n\nTITLE: Implementing First-Party Class with Deprecated Method in PHP\nDESCRIPTION: This PHP class implements a first-party class with a deprecated method that triggers a user deprecation warning.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/error-handling.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\nnamespace example;\n\nfinal class FirstPartyClass\n{\n    /**\n     * @deprecated\n     */\n    public function deprecatedMethod(): void\n    {\n        @trigger_error(\n            'deprecation in first-party code',\n            E_USER_DEPRECATED\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Version Requirement Examples\nDESCRIPTION: Examples of using RequiresPhp attribute to specify PHP version requirements for test execution\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n#[RequiresPhp('8.3.0')]\n#[RequiresPhp('>= 8.3.0')]\n#[RequiresPhp('^8.3')]\n```\n\n----------------------------------------\n\nTITLE: Miscellaneous PHPUnit Command Line Options\nDESCRIPTION: Utility options for displaying help information, checking PHPUnit version, and verifying version requirements.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/textui.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n-h|--help\n```\n\nLANGUAGE: bash\nCODE:\n```\n--version\n```\n\nLANGUAGE: bash\nCODE:\n```\n--atleast-version <min>\n```\n\nLANGUAGE: bash\nCODE:\n```\n--check-version\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Composer Dependency Configuration\nDESCRIPTION: Example composer.json configuration showing PHPUnit version constraint for version 9.6\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9.6\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking PHPUnit Version\nDESCRIPTION: Command to verify the PHPUnit version after downloading the PHAR file.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp phpunit.phar --version\nPHPUnit 10.0.0 by Sebastian Bergmann and contributors.\n```\n\n----------------------------------------\n\nTITLE: Using DependsOnClass Attribute in PHP Tests\nDESCRIPTION: This attribute specifies that a test depends on all tests in another class without cloning passed values. It allows for dependencies on an entire test class while maintaining reference integrity.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nDependsOnClass(string $className)\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit with Copy Option in Phive\nDESCRIPTION: Command to install PHPUnit with the --copy option, which copies the PHP archive from cache to the project directory for version control.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nphive install --copy phpunit\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Dependencies on Ubuntu for PHPUnit\nDESCRIPTION: Command to install PHP command-line interpreter and required extensions for PHPUnit on Ubuntu Linux distribution.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install php-cli \\\n                 php-json \\\n                 php-mbstring \\\n                 php-xml \\\n                 php-pcov \\\n                 php-xdebug\n```\n\n----------------------------------------\n\nTITLE: Checking PHPUnit Version\nDESCRIPTION: Command to verify the installed version of PHPUnit using the project-local installation\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/phpunit --version\n```\n\n----------------------------------------\n\nTITLE: Downloading PHPUnit PHAR to Project Tools Directory\nDESCRIPTION: Commands to download PHPUnit's PHP Archive to the tools directory of a project and make it executable.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nwget -O phpunit.phar https://phar.phpunit.de/phpunit-10.phar\nchmod +x phpunit.phar\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit XML for Default Error Handling\nDESCRIPTION: This XML configuration file sets up PHPUnit with default settings for error handling and test execution.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/error-handling.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.0/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         cacheDirectory=\".phpunit.cache\"\n         executionOrder=\"depends,defects\"\n         requireCoverageMetadata=\"true\"\n         beStrictAboutCoverageMetadata=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\">\n    <testsuites>\n        <testsuite name=\"default\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory suffix=\".php\">src</directory>\n        </include>\n    </coverage>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Implementing PHPUnit Event Subscriber\nDESCRIPTION: Example of implementing an event subscriber that listens for ExecutionFinished events in PHPUnit. Shows how to implement the notify() method to handle specific events.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/extending-phpunit.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Example\\PHPUnit\\Extension;\n\nuse PHPUnit\\Event\\Application\\ExecutionFinished;\nuse PHPUnit\\Event\\Application\\ExecutionFinishedSubscriber;\n\nfinal class ExampleSubscriber implements ExecutionFinishedSubscriber\n{\n    public function notify(ExecutionFinished $event): void\n    {\n        print 'The test runner has finished executing tests.' . PHP_EOL;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking PHPUnit Version with Project-Local Installation\nDESCRIPTION: Command to verify the successful installation of PHPUnit by checking its version using the project-local installation.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n./tools/phpunit --version\n```\n\n----------------------------------------\n\nTITLE: Issue Detail Display Options in PHPUnit\nDESCRIPTION: Options for controlling which types of test issues (incomplete tests, skipped tests, deprecations, errors, notices, warnings) are displayed in detail in the test output.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/textui.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--display-incomplete\n```\n\nLANGUAGE: bash\nCODE:\n```\n--display-skipped\n```\n\nLANGUAGE: bash\nCODE:\n```\n--display-deprecations\n```\n\nLANGUAGE: bash\nCODE:\n```\n--display-phpunit-deprecations\n```\n\nLANGUAGE: bash\nCODE:\n```\n--display-errors\n```\n\nLANGUAGE: bash\nCODE:\n```\n--display-notices\n```\n\nLANGUAGE: bash\nCODE:\n```\n--display-warnings\n```\n\nLANGUAGE: bash\nCODE:\n```\n--reverse-list\n```\n\n----------------------------------------\n\nTITLE: Defining Interface with Set-Hooked Property in PHP\nDESCRIPTION: This code snippet shows an interface declaration that includes a set-hooked property, a feature introduced in PHP 8.4.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/src/InterfaceWithSetHookedProperty.php\n   :caption: Interface that declares a set-hooked property\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Defining Interface X in PHP\nDESCRIPTION: This code snippet defines an interface named X, which is used in an example of creating mock objects for intersection types.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/src/X.php\n   :caption: An interface named X\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Installing PCOV Extension for PHP 8.2 on macOS\nDESCRIPTION: Command to install and enable the PCOV extension for PHP 8.2 on macOS, which is used for code coverage collection.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pcov@8.2\n```\n\n----------------------------------------\n\nTITLE: Using PreCondition Attribute in PHPUnit Tests\nDESCRIPTION: The PreCondition attribute specifies a protected non-static method to be invoked before each test method, but after 'before test' methods. It can include an optional priority parameter to control execution order.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nPreCondition(int $priority = 0)\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with Dependency in PHP\nDESCRIPTION: Shows the definition of a class SomeClass that depends on another class Dependency.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function __construct(private Dependency $dependency)\n    {\n    }\n\n    public function doSomething(): string\n    {\n        return $this->dependency->doSomething();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping PHPUnit Test Runner in PHP\nDESCRIPTION: Code snippet explaining how to wrap the PHPUnit test runner for custom implementations. It describes the use of PHPUnit\\TextUI\\TestRunner::run() method, which requires specific configuration objects and how to build them using provided builder classes.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/extending-phpunit.rst#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nPHPUnit\\TextUI\\TestRunner::run()\n\n// Requires:\n// PHPUnit\\TextUI\\Configuration\\Configuration\n// PHPUnit\\Runner\\ResultCache\\ResultCache\n// PHPUnit\\Framework\\TestSuite\n\n// Building Configuration:\nPHPUnit\\TextUI\\Configuration\\Builder::build($_SERVER['argv'])\n\n// Building TestSuite:\nPHPUnit\\TextUI\\Configuration\\TestSuiteBuilder::build($configuration)\n```\n\n----------------------------------------\n\nTITLE: Installing PHP 8.2 with Homebrew on macOS\nDESCRIPTION: Command to install PHP 8.2 using Homebrew on macOS system.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install shivammathur/php/php@8.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensions in PHPUnit XML\nDESCRIPTION: Demonstrates how to configure PHPUnit extensions using the XML configuration file, specifying class names and parameters.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/examples/assertions/expected-format.txt#2025-04-23_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<extensions>\n    <bootstrap class=\"MyExtension\"/>\n    <extension class=\"MyExtension\">\n        <arguments>\n            <array>\n                <element key=\"0\">\n                    <string>Sebastian</string>\n                </element>\n            </array>\n            <integer>22</integer>\n            <object class=\"stdClass\"/>\n            <file>loadedFromFile.php</file>\n            <directory>loadedFromDirectory</directory>\n        </arguments>\n    </extension>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Defining a Dependency Class in PHP\nDESCRIPTION: Shows the definition of a Dependency class with a single method.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Dependency\n{\n    public function doSomething(): string\n    {\n        return 'foo';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Xdebug Extension for PHP 8.2 on macOS\nDESCRIPTION: Command to install and enable the Xdebug extension for PHP 8.2 on macOS, which is used for debugging and code coverage.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew install xdebug@8.2\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Dependencies on Debian for PHPUnit\nDESCRIPTION: Command to install PHP command-line interpreter and required extensions for PHPUnit on Debian Linux distribution.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install php-cli \\\n                 php-json \\\n                 php-mbstring \\\n                 php-xml \\\n                 php-pcov \\\n                 php-xdebug\n```\n\n----------------------------------------\n\nTITLE: Updated PHPUnit Major Version Configuration\nDESCRIPTION: Example composer.json configuration showing updated PHPUnit version constraint for version 10.0\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^10.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface Y in PHP\nDESCRIPTION: Shows the definition of an interface named Y with a single method.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface Y\n{\n    public function doSomethingElse(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Extension PHAR Manifest\nDESCRIPTION: XML manifest configuration for distributing a PHPUnit extension as a PHAR file. Defines extension metadata and requirements.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/extending-phpunit.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phar xmlns=\"https://phar.io/xml/manifest/1.0\">\n    <contains name=\"example/phpunit-extension\" version=\"1.0.0\" type=\"extension\">\n        <extension for=\"phpunit/phpunit\" compatible=\"^10.0\"/>\n    </contains>\n\n    <requires>\n        <php version=\"^8.1\"/>\n    </requires>\n\n    <copyright>\n        <author name=\"John Doe\" email=\"john@example.com\"/>\n        <license type=\"BSD-3-Clause\"/>\n    </copyright>\n</phar>\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Dependencies on Fedora for PHPUnit\nDESCRIPTION: Command to install PHP command-line interpreter and required extensions for PHPUnit on Fedora Linux distribution.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install php-cli \\\n                 php-json \\\n                 php-mbstring \\\n                 php-process \\\n                 php-xml \\\n                 php-pecl-pcov \\\n                 php-pecl-xdebug\n```\n\n----------------------------------------\n\nTITLE: Setting PHP INI Values\nDESCRIPTION: Examples of setting PHP INI values through XML configuration and equivalent PHP code.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/configuration.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<php>\n  <ini name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nLANGUAGE: php\nCODE:\n```\nini_set('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Defining Class Z in PHP\nDESCRIPTION: This code snippet defines a class Z that is used as an example for testing with mock objects created from intersection types.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/src/Z.php\n   :caption: A class named Z\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Generating Software Bill of Materials for PHPUnit\nDESCRIPTION: Command to generate a Software Bill of Materials (SBOM) in XML format showing PHPUnit's dependencies.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nphp phpunit-10.5.1.phar --sbom\n```\n\n----------------------------------------\n\nTITLE: Defining Observer Interface in PHP\nDESCRIPTION: This code snippet defines an Observer interface that is part of the System under Test (SUT) for demonstrating mock object usage.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/src/Observer.php\n   :caption: Observer interface that is part of the System under Test (SUT)\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Setting Up PHP Repositories with Homebrew on macOS\nDESCRIPTION: Commands to set up Homebrew taps for PHP and extensions on macOS, which are required before installing PHP.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap shivammathur/php\nbrew tap shivammathur/extensions\n```\n\n----------------------------------------\n\nTITLE: Sample PHPUnit Configuration with Older Version\nDESCRIPTION: Example XML configuration showing PHPUnit 9.6.0 installed with semantic version constraint for updating.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phive xmlns=\"https://phar.io/phive\">\n  <phar name=\"phpunit\"\n        version=\"^9.6\" installed=\"9.6.0\"\n        location=\"./tools/phpunit\" copy=\"true\"/>\n</phive>\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Settings in PHPUnit XML\nDESCRIPTION: Demonstrates how to configure PHP settings for test execution within the PHPUnit XML configuration file.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/examples/assertions/expected-format.txt#2025-04-23_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<php>\n    <ini name=\"error_reporting\" value=\"-1\"/>\n    <ini name=\"display_errors\" value=\"On\"/>\n    <ini name=\"display_startup_errors\" value=\"On\"/>\n    <env name=\"APP_ENV\" value=\"testing\"/>\n    <post name=\"foo\" value=\"bar\"/>\n    <get name=\"bar\" value=\"foo\"/>\n    <cookie name=\"foo\" value=\"bar\"/>\n    <server name=\"foo\" value=\"bar\"/>\n    <files name=\"foo\" value=\"bar\"/>\n    <request name=\"foo\" value=\"bar\"/>\n</php>\n```\n\n----------------------------------------\n\nTITLE: Specifying Sphinx Documentation Dependencies\nDESCRIPTION: This requirements file defines specific versions of Sphinx and the ReadTheDocs theme used to generate PHPUnit documentation. It ensures consistent documentation building across different environments.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nSphinx==5.3.0\nsphinx_rtd_theme==1.2.1\n```\n\n----------------------------------------\n\nTITLE: Checking for Outdated PHPUnit Versions with Phive\nDESCRIPTION: Command to check if newer versions of PHPUnit are available within the current semantic version constraint.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nphive outdated\n```\n\n----------------------------------------\n\nTITLE: Using ExcludeStaticPropertyFromBackup Attribute in PHPUnit Tests\nDESCRIPTION: The ExcludeStaticPropertyFromBackup attribute excludes a specified static property from the backup and restore operations for static properties of classes.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nExcludeStaticPropertyFromBackup(string $className, string $propertyName)\n```\n\n----------------------------------------\n\nTITLE: Displaying PHPUnit's Dependencies Manifest\nDESCRIPTION: Command to display a plain-text manifest showing the versions of PHPUnit's dependencies bundled in the PHAR distribution.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nphp phpunit-10.5.1.phar --manifest\n```\n\n----------------------------------------\n\nTITLE: Using Large Attribute to Define Test Size in PHP\nDESCRIPTION: This attribute marks tests as 'large', which affects test execution timeouts and code coverage reporting. Large tests are highlighted with a lighter shade of green in HTML code coverage reports.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/attributes.rst#2025-04-23_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nLarge\n```\n\n----------------------------------------\n\nTITLE: Displaying Composer Lock File for PHPUnit Dependencies\nDESCRIPTION: Command to display the composer.lock file used to install PHPUnit's dependencies during the PHAR build.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nphp phpunit-10.5.1.phar --composer-lock\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Configuration in Phive's phars.xml\nDESCRIPTION: XML configuration that Phive generates to track PHPUnit as a project dependency with version constraints.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phive xmlns=\"https://phar.io/phive\">\n  <phar name=\"phpunit\"\n        version=\"^10.0\" installed=\"10.0.0\"\n        location=\"./tools/phpunit\" copy=\"true\"/>\n</phive>\n```\n\n----------------------------------------\n\nTITLE: PHP Development Configuration Settings\nDESCRIPTION: PHP configuration directives for development environment, including error reporting, assertion handling, and memory settings.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/installation.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nerror_reporting=-1\n\nxdebug.show_exception_trace=0\n\nxdebug.mode=coverage\n\nzend.assertions=1\nassert.exception=1\n\nmemory_limit=-1\n```\n\n----------------------------------------\n\nTITLE: Defining Interface with Get-Hooked Property in PHP\nDESCRIPTION: This code snippet shows an interface declaration that includes a get-hooked property. Get-hooked properties are a feature introduced in PHP 8.4.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/test-doubles.rst#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n.. literalinclude:: examples/test-doubles/src/InterfaceWithGetHookedProperty.php\n   :caption: Interface that declares a get-hooked property\n   :language: php\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Parameters\nDESCRIPTION: Demonstrates how to pass parameters to PHPUnit extensions during bootstrapping.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/configuration.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <bootstrap class=\"Vendor\\ExampleExtensionForPhpunit\\Extension\">\n        <parameter name=\"message\" value=\"the-message\"/>\n    </bootstrap>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for PHPUnit Manual\nDESCRIPTION: This snippet defines the structure and contents of the PHPUnit manual using reStructuredText directives. It creates two separate table of contents: one for the main content and another for the appendix.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n   :numbered: 1\n\n   installation\n   writing-tests-for-phpunit\n   textui\n   organizing-tests\n   fixtures\n   test-doubles\n   code-coverage\n   risky-tests\n   error-handling\n   extending-phpunit\n\n.. toctree::\n   :caption: Appendix\n   :maxdepth: 3\n   :numbered: 1\n\n   assertions\n   attributes\n   events\n   configuration\n   copyright\n```\n\n----------------------------------------\n\nTITLE: Building PHPUnit Documentation with Make\nDESCRIPTION: Command to build the documentation and verify changes before submitting a pull request.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Make\nDESCRIPTION: Command to build the complete HTML documentation for PHPUnit using the make utility.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Displaying Copyright and License Information for PHPUnit Documentation\nDESCRIPTION: This code block contains the copyright notice, license summary, and full legal text of the Creative Commons Attribution 3.0 Unported License used for the PHPUnit documentation. It outlines the rights, conditions, and definitions associated with the license.\nSOURCE: https://github.com/sebastianbergmann/phpunit-documentation-english/blob/12.0/src/copyright.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2025 Sebastian Bergmann.\n\nThis work is licensed under the Creative Commons Attribution 3.0\nUnported License.\n\nA summary of the license is given below, followed by the full legal\ntext.\n\n--------------------------------------------------------------------\n\nYou are free:\n\n    * to Share - to copy, distribute and transmit the work\n    * to Remix - to adapt the work\n\nUnder the following conditions:\n\nAttribution. You must attribute the work in the manner specified by\nthe author or licensor (but not in any way that suggests that they\nendorse you or your use of the work).\n\n    * For any reuse or distribution, you must make clear to others\n      the license terms of this work. The best way to do this is with\n      a link to this web page.\n\n    * Any of the above conditions can be waived if you get\n      permission from the copyright holder.\n\n    * Nothing in this license impairs or restricts the author's moral\n      rights.\n\nYour fair dealing and other rights are in no way affected by the\nabove.\n\nThis is a human-readable summary of the Legal Code (the full\nlicense) below.\n\n====================================================================\n\nCreative Commons Legal Code\nAttribution 3.0 Unported\n\nCREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\nLEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN\nATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\nINFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO\nWARRANTIES REGARDING THE INFORMATION PROVIDED, AND DISCLAIMS\nLIABILITY FOR DAMAGES RESULTING FROM ITS USE.\n\nLicense\n\nTHE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS\nCREATIVE COMMONS PUBLIC LICENSE (\"CCPL\" OR \"LICENSE\"). THE WORK IS\nPROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE\nWORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW\nIS PROHIBITED.\n\nBY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND\nAGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS\nLICENSE MAY BE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU\nTHE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF\nSUCH TERMS AND CONDITIONS.\n\n1. Definitions\n\n   a. \"Adaptation\" means a work based upon the Work, or upon the\n      Work and other pre-existing works, such as a translation,\n      adaptation, derivative work, arrangement of music or other\n      alterations of a literary or artistic work, or phonogram or\n      performance and includes cinematographic adaptations or any\n      other form in which the Work may be recast, transformed, or\n      adapted including in any form recognizably derived from the\n      original, except that a work that constitutes a Collection\n      will not be considered an Adaptation for the purpose of this\n      License. For the avoidance of doubt, where the Work is a\n      musical work, performance or phonogram, the synchronization of\n      the Work in timed-relation with a moving image (\"synching\")\n      will be considered an Adaptation for the purpose of this\n      License.\n\n   b. \"Collection\" means a collection of literary or artistic works,\n      such as encyclopedias and anthologies, or performances,\n      phonograms or broadcasts, or other works or subject matter\n      other than works listed in Section 1(f) below, which, by\n      reason of the selection and arrangement of their contents,\n      constitute intellectual creations, in which the Work is\n      included in its entirety in unmodified form along with one or\n      more other contributions, each constituting separate and\n      independent works in themselves, which together are assembled\n      into a collective whole. A work that constitutes a Collection\n      will not be considered an Adaptation (as defined above) for\n      the purposes of this License.\n\n   c. \"Distribute\" means to make available to the public the\n      original and copies of the Work or Adaptation, as appropriate,\n      through sale or other transfer of ownership.\n\n   d. \"Licensor\" means the individual, individuals, entity or\n      entities that offer(s) the Work under the terms of this License.\n\n   e. \"Original Author\" means, in the case of a literary or artistic\n      work, the individual, individuals, entity or entities who\n      created the Work or if no individual or entity can be\n      identified, the publisher; and in addition (i) in the case of\n      a performance the actors, singers, musicians, dancers, and\n      other persons who act, sing, deliver, declaim, play in,\n      interpret or otherwise perform literary or artistic works or\n      expressions of folklore; (ii) in the case of a phonogram the\n      producer being the person or legal entity who first fixes the\n      sounds of a performance or other sounds; and, (iii) in the\n      case of broadcasts, the organization that transmits the\n      broadcast.\n\n   f. \"Work\" means the literary and/or artistic work offered under\n      the terms of this License including without limitation any\n      production in the literary, scientific and artistic domain,\n      whatever may be the mode or form of its expression including\n      digital form, such as a book, pamphlet and other writing; a\n      lecture, address, sermon or other work of the same nature; a\n      dramatic or dramatico-musical work; a choreographic work or\n      entertainment in dumb show; a musical composition with or\n      without words; a cinematographic work to which are assimilated\n      works expressed by a process analogous to cinematography; a\n      work of drawing, painting, architecture, sculpture, engraving\n      or lithography; a photographic work to which are assimilated\n      works expressed by a process analogous to photography; a work\n      of applied art; an illustration, map, plan, sketch or three-\n      dimensional work relative to geography, topography,\n      architecture or science; a performance; a broadcast; a\n      phonogram; a compilation of data to the extent it is protected\n      as a copyrightable work; or a work performed by a variety or\n      circus performer to the extent it is not otherwise considered\n      a literary or artistic work.\n\n   g. \"You\" means an individual or entity exercising rights under\n      this License who has not previously violated the terms of\n      this License with respect to the Work, or who has received\n      express permission from the Licensor to exercise rights under\n      this License despite a previous violation.\n\n   h. \"Publicly Perform\" means to perform public recitations of the\n      Work and to communicate to the public those public\n      recitations, by any means or process, including by wire or\n      wireless means or public digital performances; to make\n      available to the public Works in such a way that members of\n      the public may access these Works from a place and at a place\n      individually chosen by them; to perform the Work to the public\n      by any means or process and the communication to the public of\n      the performances of the Work, including by public digital\n      performance; to broadcast and rebroadcast the Work by any\n      means including signs, sounds or images.\n\n   i. \"Reproduce\" means to make copies of the Work by any means\n      including without limitation by sound or visual recordings and\n      the right of fixation and reproducing fixations of the Work,\n      including storage of a protected performance or phonogram in\n      digital form or other electronic medium.\n\n2. Fair Dealing Rights. Nothing in this License is intended to\n   reduce, limit, or restrict any uses free from copyright or rights\n   arising from limitations or exceptions that are provided for in\n   connection with the copyright protection under copyright law or\n   other applicable laws.\n\n3. License Grant. Subject to the terms and conditions of this\n   License, Licensor hereby grants You a worldwide, royalty-free,\n   non-exclusive, perpetual (for the duration of the applicable\n   copyright) license to exercise the rights in the Work as stated\n   below:\n\n   a. to Reproduce the Work, to incorporate the Work into one or\n      more Collections, and to Reproduce the Work as incorporated\n      in the Collections;\n\n   b. to create and Reproduce Adaptations provided that any such\n      Adaptation, including any translation in any medium, takes\n      reasonable steps to clearly label, demarcate or otherwise\n      identify that changes were made to the original Work. For\n      example, a translation could be marked \"The original work was\n      translated from English to Spanish,\" or a modification could\n      indicate \"The original work has been modified.\";\n\n   c. to Distribute and Publicly Perform the Work including as\n      incorporated in Collections; and,\n\n   d. to Distribute and Publicly Perform Adaptations.\n\n   e. For the avoidance of doubt:\n\n      i. Non-waivable Compulsory License Schemes. In those\n         jurisdictions in which the right to collect royalties\n         through any statutory or compulsory licensing scheme cannot\n         be waived, the Licensor reserves the exclusive right to\n         collect such royalties for any exercise by You of the\n         rights granted under this License;\n\n      ii. Waivable Compulsory License Schemes. In those\n```"
  }
]