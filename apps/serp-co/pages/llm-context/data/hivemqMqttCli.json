[
  {
    "owner": "hivemq",
    "repo": "mqtt-cli",
    "content": "TITLE: Subscribing with Default Settings - HiveMQ MQTT CLI - Shell\nDESCRIPTION: Shows subscribing to a single topic ('topic') using default settings, which blocks the console and displays incoming messages. Requires the MQTT CLI installed and in the path. Essential parameter is '-t' to specify the topic.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/subscribe.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmqtt sub -t topic\n```\n\n----------------------------------------\n\nTITLE: Testing MQTT Broker Features Using MQTT CLI Command - Bash\nDESCRIPTION: This code snippet demonstrates invoking the 'mqtt test' command in the terminal to assess the features of a specified MQTT broker using MQTT CLI. The command performs a suite of standard tests, first with MQTT 3 and then MQTT 5, reporting on supported features such as topic length, QoS performance, retained message handling, subscription types, payload sizes, client ID lengths, and ASCII character support. No dependencies other than having MQTT CLI installed are required. The expected output is a structured test report listing protocol-specific capabilities and limitations for the broker.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/test.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mqtt test -h broker.hivemq.com\nMQTT 3: OK\n    - Maximum topic length: 65535 bytes\n    - QoS 0: Received 10/10 publishes in 47,59ms\n    - QoS 1: Received 10/10 publishes in 68,87ms\n    - QoS 2: Received 10/10 publishes in 43,18ms\n    - Retain: OK\n    - Wildcard subscriptions: OK\n    - Shared subscriptions: OK\n    - Payload size: >= 100000 bytes\n    - Maximum client id length: 65535 bytes\n    - Unsupported Ascii Chars: ALL SUPPORTED\nMQTT 5: OK\n    - Connect restrictions: \n        > Retain: OK\n        > Wildcard subscriptions: OK\n        > Shared subscriptions: OK\n        > Subscription identifiers: OK\n        > Maximum QoS: 2\n        > Receive maximum: 10\n        > Maximum packet size: 268435460 bytes\n        > Topic alias maximum: 5\n        > Session expiry interval: Client-based\n        > Server keep alive: Client-based\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Messages with HiveMQ MQTT-CLI\nDESCRIPTION: This document contains examples for the MQTT publish command, but no actual code snippets are present in the provided content. The page likely includes examples of command-line usage for the MQTT-CLI tool's publishing functionality.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/publish/further_examples.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Testing MQTT 5 Features Exclusively Using MQTT CLI Command - Bash\nDESCRIPTION: This snippet shows how to test only MQTT 5 protocol features of a broker using the 'mqtt test' CLI command with the '-a' (all tests) and '-V 5' (MQTT 5 version) options. It requires MQTT CLI to be installed and available from the command line. The output details success status and explicit feature availability under MQTT 5, including connect restrictions, performance metrics for QoS levels, and support for advanced protocol features. Useful for verifying MQTT 5 compatibility and server limits without testing MQTT 3.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/test.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mqtt test -h broker.hivemq.com -a -V 5\nMQTT 5: OK\n    - Connect restrictions: \n        > Retain: OK\n        > Wildcard subscriptions: OK\n        > Shared subscriptions: OK\n        > Subscription identifiers: OK\n        > Maximum QoS: 2\n        > Receive maximum: 10\n        > Maximum packet size: 268435460 bytes\n        > Topic alias maximum: 5\n        > Session expiry interval: Client-based\n        > Server keep alive: Client-based\n    - Maximum topic length: 65535 bytes\n    - QoS 0: Received 10/10 publishes in 52,70ms\n    - QoS 1: Received 10/10 publishes in 79,95ms\n    - QoS 2: Received 10/10 publishes in 125,65ms\n    - Retain: OK\n    - Wildcard subscriptions: OK\n    - Shared subscriptions: OK\n    - Payload size: >= 100000 bytes\n    - Maximum client id length: 65535 bytes\n    - Unsupported Ascii Chars: ALL SUPPORTED\n```\n\n----------------------------------------\n\nTITLE: Connecting with Username and Password Authentication - mqtt-cli Shell Command - Shell\nDESCRIPTION: Shows how to connect using username ('-u') and password ('-pw') authentication options. Users can provide the password directly or use '-P' to be prompted interactively. Useful for secure environments requiring explicit credentials.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/connect.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -u username -pw password\n# Or omit the password to get it prompted\nmqtt> con -u username -P\nEnter value for --password (The password for the client UTF-8 String.):\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topics - MQTT CLI Shell - Shell\nDESCRIPTION: Demonstrates how to initiate a subscription to MQTT topics using the context-aware shell prompt in MQTT CLI. The command activates the current client context and subscribes it to configured topics. No additional dependencies are required other than a properly configured MQTT CLI context. No parameters specified, so this subscribes using default settings in an interactive shell environment.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/subscribe.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nclient@host> subscribe\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple Topics with Default Settings - HiveMQ MQTT CLI - Shell\nDESCRIPTION: Subscribes to topics 'test1' and 'test2' with default connection options, blocking the console and writing published messages to it. Requires MQTT CLI to be installed. Multiple '-t' options can be provided for each topic.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/subscribe.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmqtt sub -t test1 -t test2\n```\n\n----------------------------------------\n\nTITLE: Connecting MQTT Client with Custom Identifier and Port - mqtt-cli Shell Command - Shell\nDESCRIPTION: Demonstrates connection of an MQTT client with a user-defined identifier via '-i mqtt-client' and to a custom port using '-p 1884'. Host defaults to localhost unless specified otherwise. Ensures clients can be uniquely identified and connected to non-standard ports.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/connect.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -i mqtt-client -p 1884\n```\n\n----------------------------------------\n\nTITLE: Testing Publish Throughput with Customized QoS Tries Using MQTT CLI - Bash\nDESCRIPTION: This example demonstrates how to execute the 'mqtt test' command with a custom quality-of-service publish count using the '-q' option (here set to 100). This tests the broker's performance and reliability for receiving 100 messages at each QoS level within a specified timeout. The CLI must be installed and the broker accessible. Output verifies publish/receive counts and timings per QoS, which helps evaluate broker throughput and message handling at scale.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/test.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mqtt test -h broker.hivemq.com -q 100 \n...\n    - QoS 0: Received 100/100 publishes in 123,44ms\n    - QoS 1: Received 100/100 publishes in 223,78ms\n    - QoS 2: Received 100/100 publishes in 340,81ms\n...\n```\n\n----------------------------------------\n\nTITLE: Connecting and Publishing with Default Client Identifier - mqtt-cli Shell Command - Shell\nDESCRIPTION: Connects a client with a custom identifier ('-i myClient'), then demonstrates publishing a message ('pub -t test -m \"Hello World\"') using the connected client context. Highlights session continuity and message publishing after connection.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/connect.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -i myClient\nmyClient@localhost> pub -t test -m \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Publishing a message with established connection in MQTT-CLI\nDESCRIPTION: Demonstrates connecting with a client identifier and then publishing a message to a topic. This example shows connecting as 'myClient' and then publishing a message 'msg' to the topic 'test'.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/publish.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqtt> con -i myClient\nmyClient@localhost> pub -t test -m msg\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topics Using HiveMQ MQTT CLI - Shell\nDESCRIPTION: Demonstrates basic subscription commands for the HiveMQ MQTT CLI tool. No installation dependencies are needed beyond having the MQTT CLI installed and available in the system path. Key parameters include '-t' for topic, '-h' for broker address, and '-p' for broker port. The input command blocks the terminal and displays published messages from the MQTT broker; outputs and behaviors may vary with other provided flags.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/subscribe.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt subscribe\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple Topics with Single QoS - HiveMQ MQTT CLI - Shell\nDESCRIPTION: Subscribes to 'topic1' and 'topic2' using a single QoS level (2, Exactly Once) for both. Requires MQTT CLI. Use '-t' for each topic and '-q' for QoS, but only one '-q' applies to all topics in this variant.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/subscribe.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmqtt sub -t topic1 -t topic2 -q 2  \n```\n\n----------------------------------------\n\nTITLE: Publishing with Debug Logging using MQTT-CLI - Bash\nDESCRIPTION: This snippet demonstrates how to publish a message to an MQTT broker using the mqtt-cli tool with debug-level logging enabled. It uses the -d (debug) flag to print detailed client and protocol exchanges, showing connection, CONNACK receipt, and publish steps with their respective packet details. The example assumes mqtt-cli is installed and accessible in PATH; required parameters include '-i' for client ID, '-t' for topic, '-m' for message, '-d' for debug output, and '-h' for broker address. The output logs each protocol event; this is helpful for debugging connection and publish issues.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/logging.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mqtt pub -i c1 -t test -m \"Hello World\" -d -h broker.hivemq.com\n\nClient 'c1@broker.hivemq.com' sending CONNECT\n    MqttConnect{keepAlive=60, cleanStart=true, sessionExpiryInterval=0}\nClient 'c1@broker.hivemq.com' received CONNACK\n    MqttConnAck{reasonCode=SUCCESS, sessionPresent=false, restrictions=MqttConnAckRestrictions{receiveMaximum=10, maximumPacketSize=268435460, topicAliasMaximum=5, maximumQos=EXACTLY_ONCE, retainAvailable=true, wildcardSubscriptionAvailable=true, sharedSubscriptionAvailable=true, subscriptionIdentifiersAvailable=true}} \nClient 'c1@broker.hivemq.com' sending PUBLISH ('Hello World')\n    MqttPublish{topic=test, payload=11byte, qos=AT_MOST_ONCE, retain=false}\nClient 'c1@broker.hivemq.com' finish PUBLISH\n    MqttPublishResult{publish=MqttPublish{topic=test, payload=11byte, qos=AT_MOST_ONCE, retain=false}}\n```\n\n----------------------------------------\n\nTITLE: Connecting and Subscribing to MQTT Topics - MQTT CLI - Shell\nDESCRIPTION: Illustrates a two-step example workflow: first establishing a connection to an MQTT broker with a custom client ID, then subscribing to a topic. The 'con -i myClient' command connects as 'myClient', and the subsequent 'sub -t test' command subscribes the connected client to the 'test' topic. Requires the MQTT CLI configured and accessible via the shell. Input parameters include the client ID (-i myClient) and topic (-t test). Output is written to the CLI log file by default.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/subscribe.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -i myClient\nmyClient@localhost> sub -t test\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple Topics with Individual QoS - HiveMQ MQTT CLI - Shell\nDESCRIPTION: Subscribes to three topics with distinct QoS levels for each: 'topic1' (0), 'topic2' (1), and 'topic3' (2). MQTT CLI is required. Each '-t' topic is immediately followed by its corresponding '-q' quality of service value.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/subscribe.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmqtt sub -t topic1 -q 0 -t topic2 -q 1 -t topic3 -q 2\n```\n\n----------------------------------------\n\nTITLE: Subscribing with Custom Broker Settings - HiveMQ MQTT CLI - Shell\nDESCRIPTION: Subscribes to 'test' at a broker running on localhost (port 1884), overriding the default broker address and port. Requires the MQTT CLI. Use '-h' to set the host and '-p' for the port.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/subscribe.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmqtt sub -t test -h localhost -p 1884\n```\n\n----------------------------------------\n\nTITLE: Connecting Client with Default Settings - mqtt-cli Shell Command - Shell\nDESCRIPTION: Demonstrates the basic usage of the 'connect' command in the mqtt-cli shell to create and connect a client with default settings. No advanced options or parameters are required. The client will remain connected until manually disconnected by the broker or through the 'disconnect' command.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/connect.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> connect\n```\n\n----------------------------------------\n\nTITLE: Connecting, Subscribing, and Unsubscribing with MQTT CLI - CLI\nDESCRIPTION: Provides a step-by-step CLI session showing connection setup, topic subscription, and topic unsubscription in the HiveMQ CLI Shell mode. The example establishes a client (with identifier 'myClient'), subscribes to two topics, and then unsubscribes from one topic. This demonstrates the sequential flow expected when managing client subscriptions programmatically or interactively.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/unsubscribe.md#_snippet_1\n\nLANGUAGE: CLI\nCODE:\n```\nmqtt> con -i myClient\nmyClient@localhost> sub -t topic1 -t topic2\nmyClient@localhost> unsub -t topic1\nmqtt>\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a Client Using MQTT CLI - Shell\nDESCRIPTION: This snippet demonstrates how to disconnect a previously connected MQTT client using the MQTT CLI. Executed from the default MQTT CLI prompt (mqtt>), the 'disconnect' command can be entered directly as shown, which disconnects the most recently connected or active client. No additional dependencies are required aside from having mqtt-cli installed and an existing connection. The output will be the client session ending, returning the CLI to its initial state. Aliases such as 'dis' can be used interchangeably, and the command accepts various options for more granular control.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/disconnect.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> disconnect\n```\n\n----------------------------------------\n\nTITLE: Connecting and Disconnecting a Client with Default Settings - Shell\nDESCRIPTION: This example demonstrates a workflow to connect a client with identifier 'myClient' and then disconnect it using default settings in MQTT CLI. First, the 'con' command establishes a connection, switching the prompt to the client's context. The 'dis' command then disconnects the client and returns the shell to the initial prompt. Dependencies include mqtt-cli and a reachable MQTT broker. This scenario requires no additional command-line options for disconnection.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/disconnect.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -i myClient\nmyClient@localhost> dis\nmqtt>\n```\n\n----------------------------------------\n\nTITLE: Connecting MQTT Client (Alias Usage) - mqtt-cli Shell Command - Shell\nDESCRIPTION: Shows the 'con' alias for the 'connect' command, allowing for quick creation and connection of an MQTT client using default settings. This command does not require any mandatory parameters and is intended for straightforward client initialization.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/connect.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con\n```\n\n----------------------------------------\n\nTITLE: Connecting MQTT 3.1.1 Client to Custom Host - mqtt-cli Shell Command - Shell\nDESCRIPTION: Connects an MQTT 3.1.1 client to a specified host using the '-V 3' option for version and '-h myHost' for hostname. Defaults to the standard port unless otherwise specified. Aimed at use cases requiring explicit protocol version and custom broker address.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/connect.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -V 3 -h myHost\n```\n\n----------------------------------------\n\nTITLE: Connecting and Disconnecting a Client with Custom Host Settings - Shell\nDESCRIPTION: This snippet shows connecting a client named 'myClient' to a specific host (broker.hivemq.com) and disconnecting it afterwards by specifying both the identifier and host. The workflow first creates a connection using 'con', then uses 'exit' to leave the context but not disconnect, and finally disconnects the client with 'dis' while specifying both the client identifier and the host. Dependencies include mqtt-cli, the target broker address being accessible, and client identification parameters. This ensures the correct session is terminated, which is necessary when multiple clients or hosts are involved.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/disconnect.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -i myClient -h broker.hivemq.com\nmyClient@localhost> exit  # client is still connected\nmqtt> dis -i myClient -h broker.hivemq.com\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Specific Client with Custom Settings - mqtt-cli Shell Command - Shell\nDESCRIPTION: Shows connecting a client with identifier ('-i myClient'), custom host ('-h broker.hivemq.com'), and version ('-V 3'), then disconnecting it using both identifier and hostname. The example warns that specifying both identifier and hostname is necessary to uniquely manage the client connection.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/connect.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -i myClient -h broker.hivemq.com -V 3\nmyClient@localhost> exit  # client is still connected\nmqtt> dis -i myClient -h broker.hivemq.com\n```\n\n----------------------------------------\n\nTITLE: Connecting Client to Specific Host and Port - mqtt-cli Shell Command - Shell\nDESCRIPTION: Connects a client to the MQTT broker running at 'myHost' on port 1884. The command uses '-h' for host and '-p' for port specification. Suitable for environments with non-default broker endpoints.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/connect.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -h myHost -p 1884\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Clients in MQTT CLI Shell - Command Line\nDESCRIPTION: Demonstrates how to invoke the 'list' command within the mqtt-cli shell to enumerate all connected clients in the current session. No external dependencies are required except for a running mqtt-cli shell session. The command accepts no parameters by default, and it outputs the list of currently connected clients. The alias 'ls' performs the same action.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/list.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nmqtt> list\n```\n\n----------------------------------------\n\nTITLE: Connecting with TLS/SSL and Encrypted Private Key - mqtt-cli Shell Command - Shell\nDESCRIPTION: Shows secure client connection using CA certificates ('--cafile'), TLS protocol version ('--tls-version'), client certificate ('--cert'), and encrypted private key ('--key'). The command prompts the user to enter the private key password. This setup is for advanced scenarios requiring mutual TLS authentication.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/connect.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con --cafile pathToServerCertificate.pem --tls-version TLSv.1.3\n         --cert pathToClientCertificate.pem --key pathToClientKey.pem\nEnter private key password:\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Clients with Detailed Information in MQTT CLI Shell - Command Line\nDESCRIPTION: Illustrates connecting a client and using 'ls -l' to display all connected clients with extended detail in long listing format. Assumes a running mqtt-cli shell and connected client with identifier 'client'. The output includes connection state, time, client ID, host, port, protocol version, and SSL usage.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/list.md#_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\nmqtt> con -i client\nclient@localhost> ls -l\ntotal 1\nCONNECTED    11:00:29 client1 localhost  1883 MQTT_5_0 NO_SSL\n```\n\n----------------------------------------\n\nTITLE: Switching Active Context with Basic Command - MQTT CLI - Shell\nDESCRIPTION: Demonstrates the basic usage of the 'switch' command in the MQTT CLI. This command sets the currently active context to another MQTT client session. No additional parameters are needed for the default switch. Requires MQTT CLI to be installed and at least two client contexts to be connected. The prompt reflects the active client after switching. There are no inputs or outputs other than the change in CLI prompt.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/switch.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> switch\n```\n\n----------------------------------------\n\nTITLE: Connecting with Will Message Configuration - mqtt-cli Shell Command - Shell\nDESCRIPTION: Connects a client and configures a last will message using '-wt' for the will topic, '-wq' for QoS, and '-wm' for will message content. Ensures a notification is published if the client disconnects unexpectedly. Useful for service health monitoring.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/connect.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -wt willtopic -wq 2 -wm \"Client disconnected ungracefully\"\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a Connected Client - mqtt-cli Shell Command - Shell\nDESCRIPTION: Illustrates connecting a client with identifier ('-i myClient'), then disconnecting it with the 'dis' command. The client remains connected until explicitly disconnected via the shell session, reflecting resource cleanup and proper session management.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/connect.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -i myClient\nmyClient@localhost> dis\nmqtt>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Behavior State for MQTT Client in Bash\nDESCRIPTION: This command retrieves a list of behavior states for a connected MQTT client for every behavior policy which currently applies to that client. It uses the 'get' subcommand of the behavior-state command.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-state.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq behavior-state get\n```\n\n----------------------------------------\n\nTITLE: Example of Getting Behavior State for Specific Client in Bash\nDESCRIPTION: This example demonstrates how to retrieve the behavior state for a specific MQTT client using its client ID. The output is a JSON object containing details about the client's behavior state.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-state.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mqtt hivemq behavior-state get --id my-client-id\n{\n  \"items\": [\n    {\n      \"arguments\": {},\n      \"behaviorId\": \"Mqtt.events\",\n      \"firstSetAt\": \"2023-09-21T11:54:35.111Z\",\n      \"policyId\": \"matchingOne\",\n      \"stateName\": \"Connected\",\n      \"stateType\": \"INTERMEDIATE\",\n      \"variables\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Client Subscriptions in MQTT CLI Shell - Command Line\nDESCRIPTION: Demonstrates subscribing a connected client to multiple topics, then listing those subscriptions using 'ls -s'. Requires a prior connected client, and uses the client's prompt context. The output displays each client and their subscribed topics. This is useful for auditing topic subscriptions in active shell sessions.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/list.md#_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\nclient1@localhost> sub -t topic -t topic2 -t topic3\nclient1@localhost> ls -s\nclient1@localhost\n -subscribed topics: [topic2, topic3, topic]\n```\n\n----------------------------------------\n\nTITLE: Creating a Behavior Policy with HiveMQ CLI\nDESCRIPTION: Command to create a new behavior policy on a HiveMQ node. The policy definition can be provided either directly as a JSON string or from a file.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-policy.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq behavior-policy create\n```\n\n----------------------------------------\n\nTITLE: Connecting Clients and Listing Them in MQTT CLI Shell - Command Line\nDESCRIPTION: Shows how to connect two clients sequentially using 'con -i', then list all connected clients using the 'ls' alias inside the mqtt-cli shell. Requires mqtt-cli installed and accessible. The commands use client identifiers (client1, client2) and demonstrate client switching and exiting, with output showing the resultant clients in the session.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/list.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nmqtt> con -i client1\nclient1@localhost> exit\nmqtt> con -i client2\nclient2@localhost> ls\nclient1@localhost\nclient2@localhost\n```\n\n----------------------------------------\n\nTITLE: Example of Creating a Behavior Policy from File\nDESCRIPTION: A simple example showing how to create a behavior policy by loading the definition from a JSON file.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-policy.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq behavior-policy create --file my-policy.json \n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from MQTT Topics using HiveMQ CLI - CLI\nDESCRIPTION: Demonstrates the basic CLI command to unsubscribe the active client from all topics. This command is executed in Shell mode after establishing a client connection. No arguments are required to unsubscribe from all topics bound to the current context. Alias usage is also supported.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/unsubscribe.md#_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nclient@host> unsubscribe\n```\n\n----------------------------------------\n\nTITLE: Switching Between Multiple Client Contexts - MQTT CLI - Shell\nDESCRIPTION: This example demonstrates how to connect two MQTT client contexts and switch between them using the 'switch' command. Each step shows the command prompt updating to reflect the currently active client context. Requires MQTT CLI and access to an MQTT broker. Key parameters include client identifier and host for connections. Inputs are client identifiers and hosts; outputs are the switching of CLI context.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/switch.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -i client1\nclient1@localhost> exit\nmqtt> con -i client2 -h broker.hivemq.com\nclient2@broker.hivemq.com> switch client1\nclient1@localhost> switch client2@broker.hivemq.com\nclient2@broker.hivemq.com>\n```\n\n----------------------------------------\n\nTITLE: Example of Listing Behavior Policies with ID Filtering\nDESCRIPTION: A complete example showing how to list behavior policies filtered by specific IDs and the resulting JSON output with detailed policy information.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-policy.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ mqtt hivemq behavior-policy list -i behaviorOne -i behaviorTwo\n{\n  \"items\": [\n    {\n      \"id\": \"behaviorOne\",\n      \"createdAt\": \"2023-09-19T23:52:28.381Z\",\n      \"lastUpdatedAt\": \"2023-09-19T23:52:28.381Z\",\n      \"matching\": {\n        \"clientIdRegex\": \"one.*\"\n      },\n      \"behavior\": {\n        \"id\": \"Mqtt.events\",\n        \"arguments\": {}\n      },\n      \"onTransitions\": []\n    },\n    {\n      \"id\": \"behaviorTwo\",\n      \"createdAt\": \"2023-09-21T11:24:25.464Z\",\n      \"lastUpdatedAt\": \"2023-09-21T11:24:25.464Z\",\n      \"matching\": {\n        \"clientIdRegex\": \"two.*\"\n      },\n      \"deserialization\": {\n        \"publish\": {\n          \"schema\": {\n            \"schemaId\": \"schema1\",\n            \"version\": \"latest\"\n          }\n        }\n      },\n      \"behavior\": {\n        \"id\": \"Mqtt.events\",\n        \"arguments\": {}\n      },\n      \"onTransitions\": [\n        {\n          \"Connection.OnDisconnect\": {\n            \"pipeline\": [\n              {\n                \"arguments\": {\n                  \"metricName\": \"testMetric\",\n                  \"incrementBy\": 1\n                },\n                \"functionId\": \"Metrics.Counter.increment\",\n                \"id\": \"increment1\"\n              }\n            ]\n          },\n          \"fromState\": \"any.*\",\n          \"toState\": \"any.*\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Retrieving a Behavior Policy by ID\nDESCRIPTION: A complete example showing how to retrieve a behavior policy by its ID and the resulting JSON output.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-policy.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ mqtt hivemq behavior-policy get --id matchingThree \n{\n  \"id\": \"matchingThree\",\n  \"createdAt\": \"2023-09-21T11:24:25.464Z\",\n  \"lastUpdatedAt\": \"2023-09-21T11:24:25.464Z\",\n  \"matching\": {\n    \"clientIdRegex\": \"three.*\"\n  },\n  \"deserialization\": {\n    \"publish\": {\n      \"schema\": {\n        \"schemaId\": \"one\",\n        \"version\": \"latest\"\n      }\n    },\n    \"will\": {\n      \"schema\": {\n        \"schemaId\": \"one\",\n        \"version\": \"latest\"\n      }\n    }\n  },\n  \"behavior\": {\n    \"id\": \"Mqtt.events\",\n    \"arguments\": {}\n  },\n  \"onTransitions\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Behavior Policies with HiveMQ CLI\nDESCRIPTION: Command to list all behavior policies on a HiveMQ node, with optional filtering by policy ID and client ID matching.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-policy.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq behavior-policy list\n```\n\n----------------------------------------\n\nTITLE: Outputting Received Messages to a File - HiveMQ MQTT CLI - Shell\nDESCRIPTION: Subscribes to 'topic' and writes all incoming published messages to 'publishes.log' in the current directory, appending to the file or creating it if missing. MQTT CLI is required. The '-of' flag sets the output file path.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/subscribe.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmqtt sub -t topic -of publishes.log\n```\n\n----------------------------------------\n\nTITLE: Disconnecting the Current Client Context - Shell\nDESCRIPTION: This snippet illustrates disconnecting the client currently active in the prompt context (client@host>). The 'disconnect' command, or its alias 'dis', is used to terminate the session for the client associated with this context. This is performed in the interactive MQTT CLI shell, where the prompt indicates the connected client. No additional dependencies are required other than an active connected client. Issuing this command ends only the session for the specified client context, leaving other connections unaffected.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/disconnect.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nclient@host> disconnect\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Options for MQTT CLI Subscribe Command\nDESCRIPTION: This command shows the help options for the MQTT CLI subscribe command. It displays all available options and their descriptions.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/subscribe/help_options.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmqtt sub --help\n```\n\n----------------------------------------\n\nTITLE: MQTT Shell Usage Example\nDESCRIPTION: Example showing how to connect a client with identifier 'myClient', publish a message, and disconnect in shell mode.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mqtt shell                # starts the shell\n\nmqtt> con -i myClient                # connect client with identifier 'myClient'\nmyClient@host> pub -t test -m msg    # publish the message 'msg' with the new context client\nmyClient@host> dis                   # disconnect and remove context\nmqtt> ...\n```\n\n----------------------------------------\n\nTITLE: Starting MQTT Shell\nDESCRIPTION: Basic command to start the MQTT CLI in shell mode. Can also use the alias 'mqtt sh'.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt shell\n```\n\n----------------------------------------\n\nTITLE: Outputting Received Messages to a Specified Directory - HiveMQ MQTT CLI - Shell\nDESCRIPTION: Subscribes to 'topic' and writes received messages to '/usr/local/var/publishes.log', appending if the file exists or creating it. MQTT CLI is required. The '-of' parameter specifies the full file path.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/subscribe.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmqtt sub -t topic -of /usr/local/var/publishes.log\n```\n\n----------------------------------------\n\nTITLE: Executing HiveMQ Export Command in Bash\nDESCRIPTION: This snippet shows the basic usage of the HiveMQ export command. It is used to initiate the export process for various resources from a HiveMQ API endpoint.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/export.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq export\n```\n\n----------------------------------------\n\nTITLE: Exiting Client Context After Connection - HiveMQ MQTT CLI - Shell\nDESCRIPTION: This example shows a sequence of commands in the HiveMQ MQTT CLI: connecting a client using the 'con' command with the '-i' identifier option, and then exiting its context. Upon exit, the user is returned to the main shell prompt, but the client remains connected in the background. The commands assume an active shell session with the MQTT CLI installed and configured.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/exit.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> con -i client\nclient@localhost> exit\nmqtt>\n```\n\n----------------------------------------\n\nTITLE: Executing HiveMQ CLI Command\nDESCRIPTION: Base command for accessing HiveMQ-specific functionality in the MQTT CLI tool. This command serves as the entry point for all HiveMQ-related operations.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq\n```\n\n----------------------------------------\n\nTITLE: Basic Data Policy Command\nDESCRIPTION: The root command for accessing data policy functionality in the HiveMQ CLI.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/data-policy.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq data-policy\n```\n\n----------------------------------------\n\nTITLE: Outputting Messages in Base64 Encoding - HiveMQ MQTT CLI - Shell\nDESCRIPTION: Subscribes to 'topic' and outputs each received message in base64-encoded format. MQTT CLI must be installed. The '-b64' flag enables base64 encoding on all output messages.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/subscribe.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmqtt sub -t topic -b64\n```\n\n----------------------------------------\n\nTITLE: Using publish command within a client context in MQTT-CLI\nDESCRIPTION: Shows the basic syntax for using the publish command within an established client context. This command allows publishing messages using the currently active connection.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/publish.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclient@host> publish\n```\n\n----------------------------------------\n\nTITLE: List Data Policies Command and Response\nDESCRIPTION: Example of listing data policies filtered by topic, showing both command and JSON response with multiple policies.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/data-policy.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq data-policy list --topic topic/1\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"createdAt\": \"2023-05-25T14:59:03.303Z\",\n      \"id\": \"policy-1\",\n      \"matching\": {\n        \"topicFilter\": \"#\"\n      },\n      \"onFailure\": {\n        \"pipeline\": []\n      },\n      \"onSuccess\": {\n        \"pipeline\": []\n      },\n      \"validation\": {\n        \"validators\": [\n          {\n            \"arguments\": {\n              \"strategy\": \"ALL_OF\",\n              \"schemas\": [\n                {\n                  \"schemaId\": \"schema-1\"\n                }\n              ]\n            },\n            \"type\": \"schema\"\n          }\n        ]\n      }\n    },\n    {\n      \"createdAt\": \"2023-05-25T15:18:09.093Z\",\n      \"id\": \"policy-2\",\n      \"matching\": {\n        \"topicFilter\": \"topic/1\"\n      },\n      \"onFailure\": {\n        \"pipeline\": []\n      },\n      \"onSuccess\": {\n        \"pipeline\": []\n      },\n      \"validation\": {\n        \"validators\": [\n          {\n            \"arguments\": {\n              \"strategy\": \"ALL_OF\",\n              \"schemas\": [\n                {\n                  \"schemaId\": \"schema-2\"\n                }\n              ]\n            },\n            \"type\": \"schema\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Update Data Policy Example\nDESCRIPTION: Example of updating an existing data policy using a JSON file.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/data-policy.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq data-policy update --id my-policy-id --file my-policy.json\n```\n\n----------------------------------------\n\nTITLE: MQTT Subscribe Commands\nDESCRIPTION: Examples of subscribing to MQTT topics with different configurations including single topic, multiple topics and custom host/port.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/README.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt sub -t topic\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt sub -t test1 - test2\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt sub -t test -h localhost -p 1884\n```\n\n----------------------------------------\n\nTITLE: Building MQTT CLI from Source using Gradle - Shell\nDESCRIPTION: Presents various Gradle commands to build the CLI and platform-specific packages from source. Prerequisites include Java 8+, Docker (for integration tests), and GraalVM (for native builds). Commands cover full builds, creating packages for Homebrew, Debian, RPM, Windows, and building a Docker image. Users must run these from the source directory using a properly configured environment.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/installation.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew clean build\n```\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew buildBrewFormula\n```\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew buildDebianPackage\n```\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew buildRpmPackage\n```\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew buildWindowsZip\n```\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew jibDockerBuild\n```\n\n----------------------------------------\n\nTITLE: Delete Data Policy Example\nDESCRIPTION: Example of deleting a specific data policy by ID.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/data-policy.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq data-policy delete --id my-policy-id\n```\n\n----------------------------------------\n\nTITLE: Basic Schema Command\nDESCRIPTION: The base command for accessing schema-related functionality in HiveMQ CLI.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/schema.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq schema\n```\n\n----------------------------------------\n\nTITLE: Using the HiveMQ behavior-policy Command\nDESCRIPTION: The main command to access behavior policy functionality in the HiveMQ CLI. This is the entry point for all behavior policy management operations.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-policy.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq behavior-policy\n```\n\n----------------------------------------\n\nTITLE: Invoking mqtt hivemq script create Command - Shell\nDESCRIPTION: This snippet illustrates the invocation of the mqtt hivemq script create command, used to start the process of creating a new script via the HiveMQ CLI. No additional arguments are present in this basic form, and subsequent options or interactive prompts would be required to complete script creation.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/script.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmqtt hivemq script create\n```\n\n----------------------------------------\n\nTITLE: MQTT Publish Commands\nDESCRIPTION: Examples of publishing messages to MQTT topics with various configurations including single/multiple topics and custom host/port.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/README.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt pub -t test -m \"Hello\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt pub -t test1 -t test2 -m \"Hello Tests\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt pub -t test -m \"Hello\" -h localhost -p 1884\n```\n\n----------------------------------------\n\nTITLE: Getting a Script by ID with mqtt hivemq CLI - Shell and JSON\nDESCRIPTION: This shell snippet demonstrates retrieving a script by its unique id with mqtt hivemq script get. The example includes the command and its typical JSON API output. The required parameter is --id with the script identifier, and upon success, the server returns a JSON response with fields such as id, version, createdAt, description, functionType, and source (often base64-encoded).\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/script.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt hivemq script get --id hello_world \n{\n  \"id\": \"hello_world\",\n  \"version\": 1,\n  \"createdAt\": \"2023-11-03T13:07:15.650Z\",\n  \"description\": \"This function greets a person.\",\n  \"functionType\": \"TRANSFORMATION\",\n  \"source\": \"ZnVuY3Rpb24gdHJhbnNmb3JtKHBlcnNvbikgeyByZXR1cm4gJ2hlbGxvICcgKyBwZXJzb24gfQ==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Script by ID with mqtt hivemq CLI - Shell\nDESCRIPTION: This snippet demonstrates deleting an existing script by id using the mqtt hivemq script delete command. The --id argument specifies which script to delete, which is required. Dependencies are limited to CLI access and node permissions for deletion.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/script.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmqtt hivemq script delete --id hello_world \n```\n\n----------------------------------------\n\nTITLE: Listing Scripts with Filter using mqtt hivemq CLI - Shell and JSON\nDESCRIPTION: This paired shell and JSON snippet show how to list one or more scripts on a HiveMQ node, optionally filtered by script id using the --id option. The example displays the command and a representative JSON response containing multiple script versions. The command relies on the --id filter, while the output contains a JSON array named items, with each object including script metadata (id, version, createdAt, etc.).\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/script.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt hivemq script list --id hello_world\n{\n  \"items\": [\n    {\n      \"id\": \"hello_world\",\n      \"version\": 1,\n      \"createdAt\": \"2023-11-03T13:59:47.262Z\",\n      \"description\": \"This function greets a person.\",\n      \"functionType\": \"TRANSFORMATION\",\n      \"source\": \"ZnVuY3Rpb24gdHJhbnNmb3JtKHBlcnNvbikgeyByZXR1cm4gJ2hlbGxvICcgKyBwZXJzb24gfQ==\"\n    },\n    {\n      \"id\": \"hello_world\",\n      \"version\": 2,\n      \"createdAt\": \"2023-11-03T13:59:48.348Z\",\n      \"description\": \"This function greets a person.\",\n      \"functionType\": \"TRANSFORMATION\",\n      \"source\": \"ZnVuY3Rpb24gdHJhbnNmb3JtKHBlcnNvbikgeyByZXR1cm4gJ2hlbGxvICcgKyBwZXJzb24gfQ==\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking mqtt hivemq script delete Command - Shell\nDESCRIPTION: This example shows calling the mqtt hivemq script delete command in its base form, which initiates the process for deleting a script from HiveMQ. The script id must be specified via --id for successful deletion.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/script.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmqtt hivemq script delete\n```\n\n----------------------------------------\n\nTITLE: Default MQTT CLI Configuration Properties\nDESCRIPTION: Example of the default properties file generated on first execution of MQTT CLI. This file is stored at $HOME/.mqtt-cli/config.properties and contains configuration values for MQTT connections and client behavior.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/configuration.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nmqtt.host=localhost\nmqtt.port=1883\nmqtt.version=5\nclient.id.prefix=mqtt\nws.path=/mqtt\nclient.id.length=8\nlogfile.level=debug\nlogfile.path=/Users/tseeberg/.mqtt-cli/logs/\n```\n\n----------------------------------------\n\nTITLE: Running MQTT CLI via Docker - Shell\nDESCRIPTION: Demonstrates running the MQTT CLI as a Docker container on any OS supporting Docker. The first snippet executes a one-off command, while the second example shows how to start the MQTT CLI in interactive shell-mode by adding required flags. Prerequisite is having Docker installed. The command accepts arbitrary arguments for the CLI, and output is shown in the terminal.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/installation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run hivemq/mqtt-cli <your-command>\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it hivemq/mqtt-cli shell\n```\n\n----------------------------------------\n\nTITLE: Installing MQTT CLI via Homebrew - Shell\nDESCRIPTION: Shows how to install the MQTT CLI on Mac OS X or Linux using Homebrew's tap formula. Requires Homebrew to be installed and internet access. The command fetches and installs the CLI through Homebrew, handling dependencies automatically. User must ensure Java 1.8+ is installed and may follow additional notes if facing issues.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/installation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew install hivemq/mqtt-cli/mqtt-cli\n```\n\n----------------------------------------\n\nTITLE: Download and Install MQTT CLI Debian Package - Shell\nDESCRIPTION: Describes how to obtain and install the MQTT CLI .deb package on Debian-based Linux systems. Users download the Debian package with wget, then install it using apt. Both wget and sudo privileges are required. Input is the URL of the release; output is a system-wide CLI installation.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/installation.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwget https://github.com/hivemq/mqtt-cli/releases/download/v4.38.0/mqtt-cli-4.38.0.deb\nsudo apt install ./mqtt-cli-4.38.0.deb\n```\n\n----------------------------------------\n\nTITLE: Running HiveMQ Swarm Run Command - Shell\nDESCRIPTION: This snippet demonstrates invoking the base HiveMQ Swarm run command via the CLI. Users must have HiveMQ Swarm CLI installed and accessible in their PATH. The command connects to the HiveMQ Swarm Rest endpoint (default: http://localhost:8888) to list or operate on runs. No file or scenario is started unless options or subcommands are provided. The snippet expects no arguments and provides help or default behavior.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/swarm/run.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmqtt swarm run\n```\n\n----------------------------------------\n\nTITLE: Creating a Script with mqtt hivemq CLI - Shell\nDESCRIPTION: This shell snippet shows how to create and upload a new script to HiveMQ using mqtt hivemq script create. It uses typical options like --id for the script identifier, --description for metadata, --file to pass a JavaScript file, and --type to specify the script type (e.g., transformation). Dependencies include a valid Node connection and an accessible source file.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/script.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmqtt hivemq script create --id hello_world --description \"Yet another hello world script.\" --file hello.js --type transformation\n```\n\n----------------------------------------\n\nTITLE: Fixing macOS /etc/hosts for MQTT CLI - Shell\nDESCRIPTION: Adds the current hostname to the local /etc/hosts file in macOS to resolve potential CLI latency issues. Requires sudo privileges and the sh shell. The command appends an entry mapping 127.0.0.1 to localhost and the machine's hostname. Users should exercise caution when editing system files.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/installation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo sh -c \"echo 127.0.0.1 localhost $(hostname) >> /etc/hosts\"\n```\n\n----------------------------------------\n\nTITLE: Starting a Swarm Scenario in Detached Mode - Shell\nDESCRIPTION: This snippet executes a HiveMQ Swarm scenario in detached (non-blocking) mode, meaning the CLI returns immediately after starting the scenario. The '-f' option specifies the scenario file, and '-d' (or '--dettach') enables detached mode. Dependencies are the same as for blocking mode: the HiveMQ Swarm CLI, active Swarm Commander REST endpoint, and an accessible scenario file. The output shows upload and run initialization but not stage progress. Useful for background execution or scripting.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/swarm/run.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt swarm run start -f /path/to/scenario -d\n\nSuccessfully uploaded scenario. Scenario-id: 2\nRun id: 1\nRun status: STARTING\n```\n\n----------------------------------------\n\nTITLE: Stopping a Swarm Scenario via CLI - Shell\nDESCRIPTION: This snippet demonstrates usage of the CLI to stop a running HiveMQ Swarm scenario. The command 'mqtt swarm run stop' targets the running scenario, optionally using the '-r' flag to specify a particular run ID. Required dependencies include a running HiveMQ Swarm Commander and proper CLI installation. No output is shown, but the expected result is cessation of the specified or current run. This command is useful for externally stopping scenarios from scripts or operator consoles.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/swarm/run.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmqtt swarm run stop\n```\n\n----------------------------------------\n\nTITLE: Invoking mqtt hivemq script get Command - Shell\nDESCRIPTION: This example demonstrates the invocation of the mqtt hivemq script get CLI command, which fetches details for a single script by its id from a HiveMQ node. Additional arguments are required for full functionality, namely the --id parameter for the script to fetch.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/script.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmqtt hivemq script get\n```\n\n----------------------------------------\n\nTITLE: MQTT Shell Mode Commands\nDESCRIPTION: Examples of using MQTT CLI in shell mode, including connecting clients, publishing messages, and managing contexts.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/README.txt#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt shell\n$ mqtt> con -i myClient\n$ myClient> pub -t test -m msg\n$ myClient> dis\n$ mqtt> ...\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of MQTT CLI Options\nDESCRIPTION: A formatted markdown table showing command line options for the MQTT CLI tool, including short flags, long versions, and explanations for help and version commands.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_includes/options/help-options.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Option                                        | Long Version | Explanation                             |\n|-----------------------------------------------|--------------|-----------------------------------------|\n| {% if include.defaultHelp %} `-h` {% endif %} | `--help`     | Display help message for command.       |\n| {% if include.defaultHelp %} `-V` {% endif %} | `--version`  | Display version information of the cli. |\n```\n\n----------------------------------------\n\nTITLE: Invoking mqtt hivemq script list Command - Shell\nDESCRIPTION: This example calls the base mqtt hivemq script list command to retrieve scripts from a HiveMQ node. Additional parameters can be supplied to filter results, but they are not shown in this basic invocation.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/script.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmqtt hivemq script list\n```\n\n----------------------------------------\n\nTITLE: HiveMQ Specific Commands\nDESCRIPTION: Examples of HiveMQ-specific commands for viewing available options and exporting resources.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/README.txt#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt hivemq\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt hivemq export\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt hivemq export clients\n```\n\n----------------------------------------\n\nTITLE: Exiting the Shell - HiveMQ MQTT CLI - Shell\nDESCRIPTION: This snippet illustrates exiting the entire HiveMQ MQTT CLI shell by issuing the 'exit' command. Once executed at the main shell prompt, the user is returned to the operating system's command line prompt. No parameters are required and the only dependency is an open MQTT CLI shell session.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/exit.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> exit\n$\n```\n\n----------------------------------------\n\nTITLE: MQTT Broker Testing Command\nDESCRIPTION: Example of testing MQTT broker features and limitations using the test command.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/README.txt#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt test -h broker.hivemq.com\n```\n\n----------------------------------------\n\nTITLE: Exporting Client Details using HiveMQ CLI in Bash\nDESCRIPTION: This command specifically exports client details from a HiveMQ node. It demonstrates the usage of the 'export clients' subcommand.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/export.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq export clients\n```\n\n----------------------------------------\n\nTITLE: Basic MQTT CLI Command\nDESCRIPTION: Shows basic MQTT CLI usage to get overview of supported commands.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/README.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter Configuration\nDESCRIPTION: YAML front matter block defining the page title, permalink and navigation order for a Jekyll-based documentation site.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/test/test_options.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Test Options\npermalink: /docs/test/#test-options\nnav_order: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Example Output of HiveMQ Client Export in Bash\nDESCRIPTION: This snippet shows an example of the output when executing the client export command. It displays the progress and results of the export operation, including the number of clients exported and the output file name.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/export.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mqtt hivemq export clients \n\nExporting client details: ...\nSuccessfully exported x client details to hivemq_client_details_2020-07-30-11:06:24.csv\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Origin Remote - Shell\nDESCRIPTION: This Git command pushes your newly created branch and its commits to your fork (origin) on GitHub. It is necessary for making your changes available for pull request submission. The branch should be a well-named feature, bugfix, or improvement branch.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin branch-type/branch-name\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Behavior Policy with HiveMQ CLI\nDESCRIPTION: Command to retrieve an existing behavior policy from a HiveMQ node by its ID.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-policy.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq behavior-policy get\n```\n\n----------------------------------------\n\nTITLE: Defining News Page Metadata and Layout - Jekyll Front Matter - Markdown/YAML\nDESCRIPTION: This snippet utilizes YAML front matter to establish metadata and layout for a Jekyll-powered site page. The fields set layout template (\"default\"), page title (\"News\"), and visibility in navigation and search. These settings help Jekyll interpret and render the page appropriately. Inputs are YAML key-value pairs; output is the structured configuration for the page rendering engine.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/news.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\nlayout: default\\ntitle: News\\nnav_exclude: true\\nsearch_exclude: true\\n---\n```\n\n----------------------------------------\n\nTITLE: Installing rbenv on MacOS\nDESCRIPTION: Steps to install rbenv on MacOS using Homebrew, initialize it, and configure the Ruby environment.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install rbenv ruby-build\n```\n\nLANGUAGE: bash\nCODE:\n```\nrbenv init\n```\n\n----------------------------------------\n\nTITLE: Updating a Behavior Policy with HiveMQ CLI\nDESCRIPTION: Command to update an existing behavior policy on a HiveMQ node. Similar to the create command, the definition can be provided as a JSON string or from a file.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-policy.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq behavior-policy update\n```\n\n----------------------------------------\n\nTITLE: Installing bundler for Ruby dependencies\nDESCRIPTION: Commands to install the bundler gem for managing Ruby dependencies and install project dependencies.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngem install --user-install bundler\n```\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Including News Content - Jekyll Include Tag - Markdown\nDESCRIPTION: This snippet uses the Liquid template language to include the contents of an external Markdown file ('news.md') into the current Jekyll page. The dependency is Jekyll's templating system. The only parameter is the filename to include. The expected output is that the contents of 'news.md' will be rendered at the inclusion point within the overall page layout.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/news.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include news.md %}\n```\n\n----------------------------------------\n\nTITLE: Building the Jekyll documentation site\nDESCRIPTION: Command to build and serve the Jekyll-based documentation site locally for development.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbundler exec jekyll serve\n```\n\n----------------------------------------\n\nTITLE: Example of Updating a Behavior Policy by ID and File\nDESCRIPTION: A simple example showing how to update a behavior policy by specifying its ID and loading the updated definition from a JSON file.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-policy.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq behavior-policy update --id my-policy-id --file behavior-one.json \n```\n\n----------------------------------------\n\nTITLE: Installing Ruby version from .ruby-version file\nDESCRIPTION: Command to install the Ruby version specified in the project's .ruby-version file using rbenv.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrbenv install\n```\n\n----------------------------------------\n\nTITLE: Linking to a Release Note - Markdown List Item - Markdown\nDESCRIPTION: This snippet adds a Markdown-formatted bullet point that links to the MQTT CLI 1.2.0 release notes. It assumes the referenced release note exists at the given path or URL. Expected input is a list item with a Markdown link, and the output is a clickable link on the rendered page. There are no special parameters or dependencies beyond standard Markdown rendering.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/news.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [MQTT CLI 1.2.0 released](MQTT CLI 1.2.0 released)\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote - Shell\nDESCRIPTION: This snippet shows how to set the original HiveMQ MQTT CLI repository as an 'upstream' remote. This is used to synchronize your fork with updates from the main repository, which is critical for integrating the latest changes and maintaining an up-to-date development environment. Requires that you have already cloned your forked repository locally.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/hivemq/mqtt-cli.git\n```\n\n----------------------------------------\n\nTITLE: Deleting a Behavior Policy with HiveMQ CLI\nDESCRIPTION: Command to delete an existing behavior policy from a HiveMQ node by its ID.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-policy.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq behavior-policy delete\n```\n\n----------------------------------------\n\nTITLE: Building and Running the CLI with Java - Shell\nDESCRIPTION: This command executes the built mqtt-cli application by running its jar file using Java, allowing manual testing of your changes. It requires the project to have already been built successfully with Gradle, and the corresponding jar to be present in the build directory. The CLI accepts command-line arguments for different operations and outputs the result to the console.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -jar build/libs/mqtt-cli-<version>.jar\n```\n\n----------------------------------------\n\nTITLE: Displaying Posts with Jekyll Liquid Template in Markdown\nDESCRIPTION: This code snippet uses Jekyll's Liquid templating system to generate a list of news posts. It iterates through all site posts and creates a markdown list item for each one, including the post title, date formatted as a string, and a link to the post's absolute URL.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_includes/news.md#_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% for post in site.posts %}\n- [{{ post.title }} ({{ post.date | date_to_string }})]({{ post.url | absolute_url }})\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Example of Deleting a Behavior Policy by ID\nDESCRIPTION: A simple example showing how to delete a behavior policy by specifying its ID.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-policy.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq behavior-policy delete --id my-policy-id \n```\n\n----------------------------------------\n\nTITLE: Create Data Policy Example\nDESCRIPTION: Example of creating a new data policy using a JSON file as input.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/data-policy.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq data-policy create --file my-policy.json\n```\n\n----------------------------------------\n\nTITLE: Get Data Policy Command and Response\nDESCRIPTION: Example of retrieving a specific data policy by ID, showing both command and JSON response structure.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/data-policy.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq data-policy get --id my-policy-id\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"createdAt\": \"2023-05-25T14:58:09.093Z\",\n  \"id\": \"my-policy-id\",\n  \"matching\": {\n    \"topicFilter\": \"topic/1\"\n  },\n  \"onFailure\": {\n    \"pipeline\": []\n  },\n  \"onSuccess\": {\n    \"pipeline\": []\n  },\n  \"validation\": {\n    \"validators\": [\n      {\n        \"arguments\": {\n          \"strategy\": \"ALL_OF\",\n          \"schemas\": [\n            {\n              \"schemaId\": \"my-schema\"\n            }\n          ]\n        },\n        \"type\": \"schema\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Schema Example\nDESCRIPTION: Example command for creating a new Protobuf schema using a file definition.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/schema.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq schema create --id my-schema-id --type PROTOBUF --file my-schema.desc --message-type Message\n```\n\n----------------------------------------\n\nTITLE: Get Schema Example\nDESCRIPTION: Example command and response for retrieving a schema by ID.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/schema.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mqtt hivemq schema get --id my-schema-id \n{\n  \"arguments\": {},\n  \"createdAt\": \"2023-05-25T21:10:42.779Z\",\n  \"id\": \"my-schema-id\",\n  \"schemaDefinition\": \"eyAidHlwZSI6ICJvYmplY3QiIH0K\",\n  \"type\": \"JSON\"\n}\n```\n\n----------------------------------------\n\nTITLE: List Schemas Example\nDESCRIPTION: Example command and response for listing schemas with filtering by ID.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/schema.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mqtt hivemq schema list --id schema-1\n{\n  \"items\": [\n    {\n      \"id\": \"schema-1\",\n      \"version\": 1,\n      \"createdAt\": \"2023-06-12T00:38:34.911Z\",\n      \"type\": \"JSON\",\n      \"schemaDefinition\": \"ewogICJkZXNjcmlwdGlvbiI6ICJUaGlzIGlzIGFub3RoZXIgZ2VuZXJpYyBKU09OIHNjaGVtYSwgc2luY2UgaXQgcmVxdWlyZXMganVzdCBhIEpTT04sIG5vdGhpbmcgZnVydGhlciBzcGVjaWZpZWQiLAogICJ0eXBlIjogIm9iamVjdCIKfQo\",\n      \"arguments\": {}\n    },\n    {\n      \"id\": \"schema-1\",\n      \"version\": 2,\n      \"createdAt\": \"2023-06-12T09:57:55.862Z\",\n      \"type\": \"JSON\",\n      \"schemaDefinition\": \"ewogICJkZXNjcmlwdGlvbiI6ICJUaGlzIGlzIGEgdGhlIG1vc3QgZ2VuZXJpYyBKU09OIHNjaGVtYSwgc2luY2UgaXQgcmVxdWlyZXMganVzdCBhIEpTT04sIG5vdGhpbmcgZnVydGhlciBzcGVjaWZpZWQiLAogICJ0eXBlIjogIm9iamVjdCIKfQ==\",\n      \"arguments\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Schema Example\nDESCRIPTION: Example command for deleting a schema by ID.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/schema.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq schema delete --id my-schema-id\n```\n\n----------------------------------------\n\nTITLE: Executing HiveMQ Behavior State Command in Bash\nDESCRIPTION: This command is used to access the behavior-state functionality in the HiveMQ CLI. It allows querying the behavior validation state of connected MQTT clients using a HiveMQ Data Hub API endpoint.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/behavior-state.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt hivemq behavior-state\n```\n\n----------------------------------------\n\nTITLE: Using the HiveMQ Swarm Command in Bash\nDESCRIPTION: The basic syntax for invoking the HiveMQ Swarm command. This command serves as the entry point for interacting with HiveMQ Swarm functionality through the mqtt-cli tool.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/swarm.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt swarm\n```\n\n----------------------------------------\n\nTITLE: Fetching HiveMQ Swarm Status Using CLI\nDESCRIPTION: Basic command to retrieve the status of HiveMQ Swarm. This command connects to the HiveMQ Swarm Rest endpoint and returns the current status information.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/swarm/status.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmqtt swarm status\n```\n\n----------------------------------------\n\nTITLE: Starting a Swarm Scenario in Blocking Mode - Shell\nDESCRIPTION: This snippet runs a HiveMQ Swarm scenario in blocking mode using the CLI, uploading the scenario from a specified file. It requires the HiveMQ Swarm CLI, a running HiveMQ Swarm Commander on the REST endpoint, and a valid scenario file. The '-f' option specifies the scenario file to upload and execute; the process blocks until the scenario completes. Command output provides scenario and run IDs, current statuses, and scenario stage progress. If the process is stopped, the scenario is also interrupted.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/swarm/run.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mqtt swarm run start -f /path/to/scenario\n\nSuccessfully uploaded scenario. Scenario-id: 2\nRun id: 1\nRun status: STARTING\nRun status: RUNNING\nScenario Stage: Stage with id 's1' (1/3).\nRun status: RUNNING\nScenario Stage: Stage with id 's2' (2/3).\nRun status: RUNNING\nScenario Stage: Stage with id 's3' (3/3).\nRun status: FINISHED\nScenario Stage: Stage with id 's3' (3/3).\n```\n\n----------------------------------------\n\nTITLE: Install MQTT CLI via RPM Package Manager (YUM) - Shell\nDESCRIPTION: Shows how to install the MQTT CLI on Red Hat, Fedora, Mandriva, OpenSuse, or CentOS using YUM and the provided rpm download URL. Needs sudo privileges, YUM, and network connectivity. The command fetches and installs the .rpm package, enabling MQTT CLI system-wide.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/installation.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install -y https://github.com/hivemq/mqtt-cli/releases/download/v4.38.0/mqtt-cli-4.38.0.rpm\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository via Git - Shell\nDESCRIPTION: This snippet demonstrates how to clone your fork of the mqtt-cli repository using Git from the command line. Cloning the repository creates a local copy, which is essential for contributing code and tracking changes. It requires an existing forked repository under your GitHub account and outputs the repository files into a new folder.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/yourgithubname/mqtt-cli.git\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch - Shell\nDESCRIPTION: This snippet creates a new Git branch for your changes using a descriptive naming convention. Working on a separate branch allows for isolated development and easier management of features, bugfixes, or other improvements. The command outputs a new branch based on the current branch, following the required naming prefixes.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b branch-type/your-branch-name\n```\n\n----------------------------------------\n\nTITLE: Building the Shadow (Uber) Jar with Gradle - Shell\nDESCRIPTION: This command builds a standalone (shadow) jar of the mqtt-cli project using Gradle's shadowJar task. The generated jar is self-contained and includes all dependencies, suitable for distribution or deployment. Gradle must be installed or available as a wrapper script in the repository, and it outputs the jar file in the build/libs directory.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew shadowJar\n```\n\n----------------------------------------\n\nTITLE: Formatting License Headers with Gradle - Shell\nDESCRIPTION: This Gradle command automatically applies the required license headers to all files in the project to ensure compliance with project requirements. It facilitates adherence to legal and contributor guidelines before committing code. Gradle and the project's configuration files need to be properly set up.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew licenseFormat\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Git - Shell\nDESCRIPTION: This command commits staged changes to the local repository with a user-supplied commit message. Using proper commit messages and atomic commits is emphasized in the project guidelines. Ensure all code is staged and messages clearly describe the changes.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"your commit mesage\"\n```\n\n----------------------------------------\n\nTITLE: Rebasing Branch onto Upstream Master - Shell\nDESCRIPTION: This command rebases your current branch onto the latest upstream master branch, incorporating upstream changes into your local branch. Rebasing is crucial to resolve merge conflicts before submitting or merging a pull request, maintaining a clean commit history. Ensure you have set up the upstream remote in your local repository.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase upstream/master\n```\n\n----------------------------------------\n\nTITLE: Clearing Terminal Screen via HiveMQ MQTT CLI Command - Shell\nDESCRIPTION: Executes the 'clear' command within the HiveMQ MQTT CLI to wipe the terminal display. No dependencies beyond the CLI itself are required. Command can be entered at the 'mqtt>' prompt and clears all current terminal output. An alias 'cls' is also available for the same operation. No additional parameters or options are necessary; both commands perform the identical action.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/clear.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> clear\n```\n\n----------------------------------------\n\nTITLE: Exiting the Client or Shell - HiveMQ MQTT CLI - Shell\nDESCRIPTION: This snippet demonstrates the basic 'exit' command in the HiveMQ MQTT CLI, which terminates the active client context or closes the shell if no context is active. There are no dependencies except for an active shell session. The command requires no parameters and, when executed, returns the user to the shell prompt or ends the program depending on the current context.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/shell/exit.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmqtt> exit\n```\n\n----------------------------------------\n\nTITLE: Calling mqtt hivemq script command - Shell\nDESCRIPTION: This snippet demonstrates the top-level usage for accessing the script command in the HiveMQ mqtt CLI. It serves as the entry point for further subcommands such as create, get, list, and delete. There are no arguments required here and no dependencies except the mqtt CLI being installed and configured.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/hivemq/script.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmqtt hivemq script\n```\n\n----------------------------------------\n\nTITLE: Installing rbenv on Linux\nDESCRIPTION: Commands to install rbenv on Linux systems using apt and initialize the environment.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install rbenv\n```\n\nLANGUAGE: bash\nCODE:\n```\nrbenv init\n```\n\n----------------------------------------\n\nTITLE: Linking to Code of Conduct Documentation - Markdown\nDESCRIPTION: This Markdown snippet embeds a hyperlink to the project\\'s Code of Conduct. No additional dependencies are required beyond Markdown rendering support. The key parameter is the URL to the code of conduct file, ensuring users can easily access the behavioral guidelines. The input is the static Markdown text, and the output is rendered as a clickable link in documentation tools or on GitHub.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/CODE_OF_CONDUCT.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# HiveMQ Code of Conduct\n\nPlease refer to our [HiveMQ Code of Conduct](https://github.com/hivemq/hivemq-community/blob/master/code-of-conduct.md).\n```\n\n----------------------------------------\n\nTITLE: Defining Security Options in Markdown for MQTT CLI Subscribe Command\nDESCRIPTION: This markdown snippet defines the title, permalink, and navigation order for the Security Options page in the MQTT CLI documentation. It sets up the structure for documenting security-related options for the subscribe command.\nSOURCE: https://github.com/hivemq/mqtt-cli/blob/master/docs/_docs/subscribe/security_options.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Security Options\npermalink: /docs/subscribe/#security-options\nnav_order: 4\n---\n```"
  }
]