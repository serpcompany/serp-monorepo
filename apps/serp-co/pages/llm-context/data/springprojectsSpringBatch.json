[
  {
    "owner": "spring-projects",
    "repo": "spring-batch",
    "content": "TITLE: Enabling Spring Batch Using @EnableBatchProcessing Annotation in Java\nDESCRIPTION: This snippet shows how to enable Spring Batch in a Java configuration class using the @EnableBatchProcessing annotation. The annotation imports necessary batch infrastructure beans to help set up batch jobs.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-test/src/test/resources/data/input/blank.txt#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableBatchProcessing\npublic class MyBatchConfiguration {\n\n    // other configurations\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World Batch Job with Spring Batch\nDESCRIPTION: A complete Spring Batch job configuration that defines a simple job with one step that prints \"Hello world!\". Includes the main method to run the job and demonstrates the basic structure of a Spring Batch application.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.batch.core.Job;\nimport org.springframework.batch.core.JobParameters;\nimport org.springframework.batch.core.Step;\nimport org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\nimport org.springframework.batch.core.job.builder.JobBuilder;\nimport org.springframework.batch.core.launch.JobLauncher;\nimport org.springframework.batch.core.repository.JobRepository;\nimport org.springframework.batch.core.step.builder.StepBuilder;\nimport org.springframework.batch.repeat.RepeatStatus;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.jdbc.support.JdbcTransactionManager;\n\n@Configuration\n@EnableBatchProcessing\n@Import(DataSourceConfiguration.class)\npublic class HelloWorldJobConfiguration {\n\n\t@Bean\n\tpublic Step step(JobRepository jobRepository, JdbcTransactionManager transactionManager) {\n\t\treturn new StepBuilder(\"step\", jobRepository).tasklet((contribution, chunkContext) -> {\n\t\t\tSystem.out.println(\"Hello world!\");\n\t\t\treturn RepeatStatus.FINISHED;\n\t\t}, transactionManager).build();\n\t}\n\n\t@Bean\n\tpublic Job job(JobRepository jobRepository, Step step) {\n\t\treturn new JobBuilder(\"job\", jobRepository).start(step).build();\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldJobConfiguration.class);\n\t\tJobLauncher jobLauncher = context.getBean(JobLauncher.class);\n\t\tJob job = context.getBean(Job.class);\n\t\tjobLauncher.run(job, new JobParameters());\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Spring Batch\nDESCRIPTION: Basic Maven dependencies required to set up a Spring Batch project. Includes spring-batch-core and HSQLDB as a runtime dependency for the embedded database.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.batch</groupId>\n        <artifactId>spring-batch-core</artifactId>\n        <version>${LATEST_VERSION}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.hsqldb</groupId>\n        <artifactId>hsqldb</artifactId>\n        <version>${LATEST_VERSION}</version>\n        <scope>runtime</scope>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source for Spring Batch Job Repository\nDESCRIPTION: Java configuration class that defines a datasource and transaction manager for Spring Batch. Creates an embedded HSQLDB database and initializes it with Spring Batch's meta-data tables.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport javax.sql.DataSource;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.support.JdbcTransactionManager;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;\n\n@Configuration\npublic class DataSourceConfiguration {\n\n\t@Bean\n\tpublic DataSource dataSource() {\n\t\treturn new EmbeddedDatabaseBuilder()\n\t\t\t.addScript(\"/org/springframework/batch/core/schema-hsqldb.sql\")\n\t\t\t.build();\n\t}\n\n\t@Bean\n\tpublic JdbcTransactionManager transactionManager(DataSource dataSource) {\n\t\treturn new JdbcTransactionManager(dataSource);\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Spring Batch Job Bean Configuration in Java\nDESCRIPTION: This snippet demonstrates how to create a simple Spring Batch job bean using the Job and JobBuilderFactory. It shows the minimal configuration needed to define a job with a single step.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-test/src/test/resources/data/input/blank.txt#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic Job job(JobBuilderFactory jobs, Step s1) {\n    return jobs.get(\"myJob\")\n            .start(s1)\n            .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Spring Batch Job Step with Tasklet Implementation\nDESCRIPTION: This code shows how to define a Step bean using StepBuilderFactory and implementing a simple Tasklet. The step is configured with transaction attributes and will be used as part of a job.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-test/src/test/resources/data/input/blank.txt#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic Step step1(StepBuilderFactory stepBuilderFactory) {\n    return stepBuilderFactory.get(\"step1\")\n            .tasklet(new Tasklet() {\n                @Override\n                public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) {\n                    // do something\n                    return RepeatStatus.FINISHED;\n                }\n            })\n            .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Football Job in Spring Batch with XML\nDESCRIPTION: XML configuration for a Spring Batch football processing job. It defines a job with one step that reads player information, processes it using a PlayerItemProcessor, and writes the output. The configuration includes beans for the job, step, reader, processor, and writer components.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/football/README.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:batch=\"http://www.springframework.org/schema/batch\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/batch https://www.springframework.org/schema/batch/spring-batch.xsd\n        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <batch:job id=\"footballJob\">\n        <batch:step id=\"playerload\" next=\"gameLoad\">\n            <batch:tasklet>\n                <batch:chunk reader=\"playerFileItemReader\" processor=\"playerProcessor\" writer=\"playerWriter\"\n                    commit-interval=\"2\" />\n            </batch:tasklet>\n        </batch:step>\n        <batch:step id=\"gameLoad\">\n            <batch:tasklet>\n                <batch:chunk reader=\"gameFileItemReader\" processor=\"gameProcessor\" writer=\"gameWriter\"\n                    commit-interval=\"2\" />\n            </batch:tasklet>\n        </batch:step>\n    </batch:job>\n\n    <bean id=\"playerProcessor\" class=\"org.springframework.batch.sample.common.PlayerItemProcessor\" />\n    <bean id=\"gameProcessor\" class=\"org.springframework.batch.sample.common.GameItemProcessor\" />\n\n    <bean id=\"playerWriter\" class=\"org.springframework.batch.sample.common.PlayerItemWriter\">\n        <property name=\"dataSource\" ref=\"dataSource\" />\n    </bean>\n    <bean id=\"gameWriter\" class=\"org.springframework.batch.sample.common.GameItemWriter\">\n        <property name=\"dataSource\" ref=\"dataSource\" />\n    </bean>\n\n    <bean id=\"playerFileItemReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\">\n        <property name=\"resource\" value=\"classpath:org/springframework/batch/sample/data/footballjob/input/player.csv\" />\n        <property name=\"lineMapper\">\n            <bean class=\"org.springframework.batch.item.file.mapping.DefaultLineMapper\">\n                <property name=\"lineTokenizer\">\n                    <bean class=\"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\">\n                        <property name=\"names\" value=\"ID,lastName,firstName,position,birthYear,debutYear\" />\n                    </bean>\n                </property>\n                <property name=\"fieldSetMapper\">\n                    <bean class=\"org.springframework.batch.sample.domain.football.internal.PlayerFieldSetMapper\" />\n                </property>\n            </bean>\n        </property>\n    </bean>\n\n    <bean id=\"gameFileItemReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\">\n        <property name=\"resource\" value=\"classpath:org/springframework/batch/sample/data/footballjob/input/games.csv\" />\n        <property name=\"lineMapper\">\n            <bean class=\"org.springframework.batch.item.file.mapping.DefaultLineMapper\">\n                <property name=\"lineTokenizer\">\n                    <bean class=\"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\">\n                        <property name=\"names\" value=\"ID,year,team,week,opponent,completes,attempts,passingYards,passingTD,interceptions,rushes,rushYards,receptions,receptionYards,totalTD\" />\n                    </bean>\n                </property>\n                <property name=\"fieldSetMapper\">\n                    <bean class=\"org.springframework.batch.sample.domain.football.internal.GameFieldSetMapper\" />\n                </property>\n            </bean>\n        </property>\n    </bean>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring JdbcCursorItemReader for Player Summarization in Spring Batch XML\nDESCRIPTION: This XML configuration sets up a JdbcCursorItemReader bean for summarizing player statistics from a database. It specifies the data source, row mapper, and SQL query for retrieving aggregated player game data.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/football/README.md#2025-04-21_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"playerSummarizationSource\" class=\"org.springframework.batch.item.database.JdbcCursorItemReader\">\n  <property name=\"dataSource\" ref=\"dataSource\" />\n  <property name=\"mapper\">\n      <bean\n          class=\"org.springframework.batch.samples.football.internal.internal.PlayerSummaryMapper\" />\n  </property>\n  <property name=\"sql\">\n    <value>\n        SELECT games.player_id, games.year_no, SUM(COMPLETES),\n        SUM(ATTEMPTS), SUM(PASSING_YARDS), SUM(PASSING_TD),\n        SUM(INTERCEPTIONS), SUM(RUSHES), SUM(RUSH_YARDS),\n        SUM(RECEPTIONS), SUM(RECEPTIONS_YARDS), SUM(TOTAL_TD)\n        from games, players where players.player_id =\n        games.player_id group by games.player_id, games.year_no\n    </value>\n  </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Steps in Spring Batch XML\nDESCRIPTION: XML configuration showing the three steps of the football job. Each step is defined as a bean with specific processing responsibilities.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/football/README.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"steps\">\n  <list>\n    <bean id=\"playerload\" parent=\"simpleStep\" .../>\n    <bean id=\"gameLoad\" parent=\"simpleStep\" .../>\n    <bean id=\"playerSummarization\" parent=\"simpleStep\" .../>\n  </list>\n</property>\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry in Spring Batch Step\nDESCRIPTION: XML configuration for setting up retry behavior in a Spring Batch step. Configures retry limit of 3 attempts for all Exception types using FaultTolerantStepFactoryBean.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/README.md#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"step1\" parent=\"simpleStep\"\n    class=\"org.springframework.batch.core.step.item.FaultTolerantStepFactoryBean\">\n    ...\n    <property name=\"retryLimit\" value=\"3\" />\n    <property name=\"retryableExceptionClasses\" value=\"java.lang.Exception\" />\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Player Load Step in Spring Batch XML\nDESCRIPTION: Detailed XML configuration for the playerLoad step, showing the ItemReader and ItemWriter configuration along with transaction settings.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/football/README.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"playerload\" parent=\"simpleStep\">\n  <property name=\"commitInterval\" value=\"${job.commit.interval}\" />\n  <property name=\"startLimit\" value=\"100\" />\n  <property name=\"itemReader\"\n    ref=\"playerFileItemReader\" />\n  <property name=\"itemWriter\">\n    <bean\n      class=\"org.springframework.batch.samples.football.internal.internal.PlayerItemWriter\">\n      <property name=\"playerDao\">\n        <bean\n          class=\"org.springframework.batch.samples.football.internal.internal.JdbcPlayerDao\">\n          <property name=\"dataSource\"\n            ref=\"dataSource\" />\n        </bean>\n      </property>\n    </bean>\n  </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Implementing FieldSetMapper for Player Data in Java\nDESCRIPTION: Java implementation of the PlayerMapper class that maps field sets from the CSV file to Player domain objects.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/football/README.md#2025-04-21_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class PlayerMapper implements FieldSetMapper {\n\n    public Object mapLine(FieldSet fs) {\n\n        if(fs == null){\n            return null;\n        }\n\n        Player player = new Player();\n        player.setID(fs.readString(\"ID\"));\n        player.setLastName(fs.readString(\"lastName\"));\n        player.setFirstName(fs.readString(\"firstName\"));\n        player.setPosition(fs.readString(\"position\"));\n        player.setDebutYear(fs.readInt(\"debutYear\"));\n        player.setBirthYear(fs.readInt(\"birthYear\"));\n\n        return player;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Skip Handling in Spring Batch Step\nDESCRIPTION: XML configuration for setting up skip behavior in a Spring Batch step. Configures skip limit and transaction attributes to handle ValidationException without rolling back the transaction.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/README.md#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"step2\" parent=\"skipLimitStep\">\n    <property name=\"skipLimit\" value=\"1\" />\n    <!-- No rollback for exceptions that are marked with \"+\" in the tx attributes -->\n    <property name=\"transactionAttribute\"\n        value=\"+org.springframework.batch.item.validator.ValidationException\" />\n    ....\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous JobLauncher for Spring Batch with Quartz\nDESCRIPTION: Defines a JobLauncher bean that uses an asynchronous task executor to launch jobs in a separate thread from the main method. This configuration allows the Quartz scheduler to trigger jobs without blocking.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/misc/quartz/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"jobLauncher\" class=\"org.springframework.batch.core.launch.support.TaskExecutorJobLauncher\">\n  <property name=\"jobRepository\" ref=\"jobRepository\" />\n  <property name=\"taskExecutor\">\n    <bean class=\"org.springframework.core.task.SimpleAsyncTaskExecutor\" />\n  </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Quartz Scheduler with Cron Trigger for Spring Batch Jobs\nDESCRIPTION: Sets up a Quartz scheduler factory bean with a cron trigger that will execute the job detail every 10 seconds. The cron expression \"0/10 * * * * ?\" specifies the execution schedule.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/misc/quartz/README.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<bean class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\">\n  <property name=\"triggers\">\n    <bean id=\"cronTrigger\" class=\"org.springframework.scheduling.quartz.CronTriggerBean\">\n      <property name=\"jobDetail\" ref=\"jobDetail\" />\n      <property name=\"cronExpression\" value=\"0/10 * * * * ?\" />\n    </bean>\n  </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring FlatFileItemReader for Player Data in Spring Batch XML\nDESCRIPTION: XML configuration for the FlatFileItemReader that processes player CSV files, defining the tokenizer and field set mapper components.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/football/README.md#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"playerFileItemReader\"\n  class=\"org.springframework.batch.item.file.FlatFileItemReader\">\n  <property name=\"resource\"\n    value=\"classpath:data/footballjob/input/${player.file.name}\" />\n  <property name=\"lineTokenizer\">\n    <bean\n      class=\"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\">\n      <property name=\"names\"\n        value=\"ID,lastName,firstName,position,birthYear,debutYear\" />\n    </bean>\n  </property>\n  <property name=\"fieldSetMapper\">\n    <bean\n      class=\"org.springframework.batch.samples.football.internal.internal.PlayerFieldSetMapper\" />\n  </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Trade Job Flow with Mermaid Diagram\nDESCRIPTION: A flowchart showing the three sequential steps of the trade job: tradeLoad, decreaseCredit, and generateReport. The diagram illustrates the job's flow using Mermaid syntax.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/trade/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A(tradeLoad) --> B(decreaseCredit)\n    B --> C(generateReport)\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Process Indicator Pattern in Spring Batch\nDESCRIPTION: SQL query that reads records from a staging table filtered by job ID and processed flag. This query is used by the StagingItemReader to retrieve only unprocessed records in a multi-threaded step execution.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/processindicator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ID FROM BATCH_STAGING WHERE JOB_ID=? AND PROCESSED=? ORDER BY ID\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL and Testcontainers Dependencies\nDESCRIPTION: XML snippet showing how to add PostgreSQL JDBC driver and Testcontainers dependencies to the pom.xml file for database-specific testing.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/ISSUE_REPORTING.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- PostgreSQL JDBC driver -->\n<dependency>\n    <groupId>org.postgresql</groupId>\n    <artifactId>postgresql</artifactId>\n    <version>42.6.0</version> <!-- update the version if needed -->\n</dependency>\n\n<!-- Testcontainers module for PostgreSQL -->\n<dependency>\n    <groupId>org.testcontainers</groupId>\n    <artifactId>postgresql</artifactId>\n    <version>1.17.6</version> <!-- update the version if needed -->\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Sample Input File Structure for Multiline Aggregate in Spring Batch\nDESCRIPTION: Demonstrates the structure of the input file containing two groups of trades delimited by BEGIN and END lines. Each trade record includes information such as ID, amount, and customer.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/multilineaggregate/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBEGIN\nUK21341EAH4597898.34customer1\nUK21341EAH4611218.12customer2\nEND\nBEGIN\nUK21341EAH4724512.78customer2\nUK21341EAH4810809.25customer3\nUK21341EAH4985423.39customer4\nEND\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Format for Batch Processing\nDESCRIPTION: Shows the structure of a JSON file used in the JSON Input Output sample. The file contains trade data with properties like isin, quantity, price, and customer information.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"isin\":\"123\",\"quantity\":5,\"price\":10.5,\"customer\":\"foo\",\"id\":1,\"version\":0},\n  {\"isin\":\"456\",\"quantity\":10,\"price\":20.5,\"customer\":\"bar\",\"id\":2,\"version\":0},\n  {\"isin\":\"789\",\"quantity\":15,\"price\":30.5,\"customer\":\"baz\",\"id\":3,\"version\":0}\n]\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Sample Tests from Command Line\nDESCRIPTION: Shows how to run Spring Batch sample tests using Maven from the command line. This allows users to execute individual test cases for specific job samples.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=[JobName]FunctionalTests#test[JobName] test\n```\n\n----------------------------------------\n\nTITLE: Sample Fixed-width Data Format for Order Processing\nDESCRIPTION: This is a sample dataset showing a fixed-width format for order processing. The format includes record types for headers, customer information, billing/shipping addresses, payment methods, line items, shipping instructions, and order totals.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/file/patternmatching/data/multilineOrderInput.txt#2025-04-21_snippet_0\n\nLANGUAGE: fixed-width-text\nCODE:\n```\nHEA;0013100345;2007-02-15\nNCU;Smith;Peter;;T;20014539;F\nBAD;;Oak Street 31/A;;Small Town;00235;IL;US\nSAD;Smith, Elizabeth;Elm Street 17;;Some City;30011;FL;United States\nBIN;VISA;VISA-12345678903\nLIT;1044391041;37.49;0;0;4.99;2.99;1;45.47\nLIT;2134776319;221.99;5;0;7.99;2.99;1;221.87\nSIN;UPS;EXP;DELIVER ONLY ON WEEKDAYS\nFOT;2;2;267.34\nHEA;0013100346;2007-02-15\nBCU;Acme Factory of England;72155919;T\nBAD;;St. Andrews Road 31;;London;55342;;UK\nBIN;AMEX;AMEX-72345678903\nLIT;1044319101;1070.50;5;0;7.99;2.99;12;12335.46\nLIT;2134727219;21.79;5;0;7.99;2.99;12;380.17\nLIT;1044339301;79.95;0;5.5;4.99;2.99;4;329.72\nLIT;2134747319;55.29;10;0;7.99;2.99;6;364.45\nLIT;1044359501;339.99;10;0;7.99;2.99;2;633.94\nSIN;FEDX;AMS;\nFOT;5;36;14043.74\n```\n\n----------------------------------------\n\nTITLE: Generating Spring Boot Project with Spring Batch and H2\nDESCRIPTION: Command to generate a Spring Boot project with Spring Batch and H2 dependencies using cURL and start.spring.io.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/ISSUE_REPORTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$>curl https://start.spring.io/starter.tgz -d dependencies=batch,h2 -d type=maven-project -d baseDir=spring-batch-mcve | tar -xzvf -\n```\n\n----------------------------------------\n\nTITLE: Running Trade Job Test Command\nDESCRIPTION: Command line instructions for executing the trade job functional test using Maven wrapper. The command navigates to the samples directory and runs a specific test case.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/trade/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=TradeJobFunctionalTests#testLaunchJob test\n```\n\n----------------------------------------\n\nTITLE: Complex Pattern Matching Input Format Example\nDESCRIPTION: Shows a complex multiline record format where each record contains multiple sections (headers, customer info, billing info, line items, shipping info, footers). This demonstrates handling nested records that span multiple lines.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/README.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nHEA;0013100345;2007-02-15\nNCU;Smith;Peter;;T;20014539;F\nBAD;;Oak Street 31/A;;Small Town;00235;IL;US\nSAD;Smith, Elizabeth;Elm Street 17;;Some City;30011;FL;United States\nBIN;VISA;VISA-12345678903\nLIT;1044391041;37.49;0;0;4.99;2.99;1;45.47\nLIT;2134776319;221.99;5;0;7.99;2.99;1;221.87\nSIN;UPS;EXP;DELIVER ONLY ON WEEKDAYS\nFOT;2;2;267.34\nHEA;0013100346;2007-02-15\nBCU;Acme Factory of England;72155919;T\nBAD;;St. Andrews Road 31;;London;55342;;UK\nBIN;AMEX;AMEX-72345678903\nLIT;1044319101;1070.50;5;0;7.99;2.99;12;12335.46\nLIT;2134727219;21.79;5;0;7.99;2.99;12;380.17\nLIT;1044339301;79.95;0;5.5;4.99;2.99;4;329.72\nLIT;2134747319;55.29;10;0;7.99;2.99;6;364.45\nLIT;1044359501;339.99;10;0;7.99;2.99;2;633.94\nSIN;FEDX;AMS;\nFOT;5;36;14043.74\n```\n\n----------------------------------------\n\nTITLE: MultiRecord Type Input Format Example\nDESCRIPTION: Shows a sample input file containing lines of different record types (CUST and TRAD) that need to be processed differently. The PatternMatchingCompositeLineMapper API is used to handle this mixed format.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/README.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCUST42001customer100012000\nCUST42002customer200022000\nCUST42003customer300032000\nTRADUK21341EAH45978 98.34customer1\nTRADUK21341EAH46112 18.12customer2\nCUST42004customer400042000\nCUST42005customer500052000\nTRADUK21341EAH47245 12.78customer3\nTRADUK21341EAH48108109.25customer4\nTRADUK21341EAH49854123.39customer5\nCUST42006customer600062000\nTRADUK21341EAH50234 32.45customer6\n...\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Structure for Spring Batch Job\nDESCRIPTION: This JSON snippet represents the structure of data that the Spring Batch job will process. It contains an array of objects with properties such as ISIN, quantity, price, customer, ID, and version.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/json/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"isin\":\"123\",\"quantity\":5,\"price\":10.5,\"customer\":\"foo\",\"id\":1,\"version\":0},\n  {\"isin\":\"456\",\"quantity\":10,\"price\":20.5,\"customer\":\"bar\",\"id\":2,\"version\":0},\n  {\"isin\":\"789\",\"quantity\":15,\"price\":30.5,\"customer\":\"baz\",\"id\":3,\"version\":0}\n]\n```\n\n----------------------------------------\n\nTITLE: Multiline Aggregate Input Format Example\nDESCRIPTION: Illustrates a file format where records are grouped between BEGIN and END markers. Each group represents a list of trades that should be processed together as a single item (List<Trade>).\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/README.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nBEGIN\nUK21341EAH4597898.34customer1\nUK21341EAH4611218.12customer2\nEND\nBEGIN\nUK21341EAH4724512.78customer2\nUK21341EAH4810809.25customer3\nUK21341EAH4985423.39customer4\nEND\n```\n\n----------------------------------------\n\nTITLE: Sample Multi-Line Input Format for Spring Batch Job\nDESCRIPTION: This snippet illustrates the format of the input file where each logical item spans multiple lines. It shows two sample records, each starting with 'BEGIN' and ending with 'END', containing INFO and AMNT fields.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/multiline/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBEGIN\nINFO,UK21341EAH45,customer1\nAMNT,978,98.34\nEND\nBEGIN\nINFO,UK21341EAH46,customer2\nAMNT,112,18.12\nEND\n...\n```\n\n----------------------------------------\n\nTITLE: Running the Composite ItemWriter Sample Test in Spring Batch\nDESCRIPTION: Commands to navigate to the spring-batch-samples directory and execute the CompositeItemWriterSampleFunctionalTests using Maven. This test demonstrates the composite ItemWriter pattern in action.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/compositewriter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=CompositeItemWriterSampleFunctionalTests#testJobLaunch test\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Header Footer Sample Test\nDESCRIPTION: Commands to execute the header-footer sample functional test from the command line. The test demonstrates the HeaderCopyCallback and SummaryFooterCallback functionality.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/headerfooter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=HeaderFooterSampleFunctionalTests#testJob test\n```\n\n----------------------------------------\n\nTITLE: MultiLine Input Format Example\nDESCRIPTION: Demonstrates the format of a multiline input file where each logical item spans multiple physical lines. Each record begins with 'BEGIN' and ends with 'END', containing INFO and AMNT lines in between.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/README.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nBEGIN\nINFO,UK21341EAH45,customer1\nAMNT,978,98.34\nEND\nBEGIN\nINFO,UK21341EAH46,customer2\nAMNT,112,18.12\nEND\n...\n```\n\n----------------------------------------\n\nTITLE: Running JPA Reader/Writer Sample with Maven\nDESCRIPTION: Command line instructions for running the JpaPagingItemReader/JpaItemWriter sample using both XML and Java configurations through Maven test execution.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/jpa/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n# Launch the sample using the XML configuration\n$>../mvnw -Dtest=JpaFunctionalTests#testLaunchJobWithXmlConfig test\n# Launch the sample using the Java configuration\n$>../mvnw -Dtest=JpaFunctionalTests#testLaunchJobWithJavaConfig test\n```\n\n----------------------------------------\n\nTITLE: CSV Transaction Data Sample for Spring Batch Processing\nDESCRIPTION: A sample CSV dataset containing transaction records with order IDs, quantities, prices, and customer identifiers. This format is typically used in Spring Batch applications to demonstrate file reading and processing capabilities.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/trade/data/ImportTradeDataStep.txt#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nUK21341EAH45,978,98.34,customer1\nUK21341EAH46,112,18.12,customer2\nUK21341EAH47,245,12.78,customer2\nUK21341EAH48,108,109.25,customer3\nUK21341EAH49,854,123.39,customer4\n```\n\n----------------------------------------\n\nTITLE: Running Repository Reader/Writer Sample with Maven\nDESCRIPTION: Command line instructions for running the RepositoryItemReader/RepositoryItemWriter sample using both XML and Java configurations through Maven test execution.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/jpa/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n# Launch the sample using the XML configuration\n$>../mvnw -Dtest=RepositoryFunctionalTests#testLaunchJobWithXmlConfig test\n# Launch the sample using the Java configuration\n$>../mvnw -Dtest=RepositoryFunctionalTests#testLaunchJobWithJavaConfig test\n```\n\n----------------------------------------\n\nTITLE: UK Banking Transaction Record Format\nDESCRIPTION: Fixed-width formatted transaction records following the pattern: UK prefix (8 chars), account number (8 chars), transaction amount (8 chars), and customer ID (9 chars). Each line represents one transaction with consistent field lengths.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/restart/fail/data/ImportTradeDataStep.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUK21341EAH4597898.34customer1\nUK21341EAH4611218.12customer2\nUK21341EAH4724512.78customer2\nUK21341EAH4810819.25customer3\nUK21341EAH4985423.39customer4\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch MultiResource Sample from Command Line\nDESCRIPTION: This snippet demonstrates how to run the MultiResource Input Output Job sample using Maven. It includes commands for launching the sample with both XML and Java configurations.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/multiresource/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n# Launch the sample using the XML configuration\n$>../mvnw -Dtest=MultiResourceFunctionalTests#testLaunchJobWithXmlConfig test\n# Launch the sample using the Java configuration\n$>../mvnw -Dtest=MultiResourceFunctionalTests#testLaunchJobWithJavaConfig test\n```\n\n----------------------------------------\n\nTITLE: Fixed-width Customer Credit Records\nDESCRIPTION: Sample data format showing customer credit records. Each line contains a customer ID starting with a status code (S/U/A/D/F) followed by the customer number, and a fixed-width credit amount field. This appears to be a source file for batch processing.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/filter/data/customers.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSCust             Credit\nAcustomer5        00032345\nUcustomer3        00100500\nAcustomer6        00123456\nDcustomer1        00000000\nF0000004\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch MultiLine Input Sample with Java Configuration\nDESCRIPTION: This command shows how to run the MultiLine Input sample using Java configuration. It uses Maven to execute a specific test method that launches the job with Java-based configuration.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/multiline/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=MultiLineFunctionalTests#testLaunchJobWithJavaConfig test\n```\n\n----------------------------------------\n\nTITLE: Fixed-width Transaction Data Sample for Spring Batch Processing\nDESCRIPTION: Sample batch data in fixed-width format organized in two segments, each enclosed with BEGIN and END markers. Each line contains transaction data with what appears to be a transaction ID, amount, and customer identifier, formatted for batch processing.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/file/multilineaggregate/data/multilineStep.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBEGIN\nUK21341EAH4597898.34customer1\nUK21341EAH4611218.12customer2\nEND\nBEGIN\nUK21341EAH4724512.78customer2\nUK21341EAH4810809.25customer3\nUK21341EAH4985423.39customer4\nEND\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch MultiLine Input Sample with XML Configuration\nDESCRIPTION: This command demonstrates how to run the MultiLine Input sample using XML configuration. It uses Maven to execute a specific test method that launches the job with XML configuration.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/multiline/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=MultiLineFunctionalTests#testLaunchJobWithXmlConfig test\n```\n\n----------------------------------------\n\nTITLE: Sample Order Batch Data in Plaintext\nDESCRIPTION: This snippet provides a sample of order batch data following the specified format. It includes two orders: one for a non-business customer and another for a business customer. The data demonstrates the use of various record types and field formats as defined in the specification.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/file/patternmatching/data/order_sample.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nFHE;20070215-0001;2007-02-15\nHEA;0013100345;2007-02-15\nNCU;Smith;Peter;;T;20014539;F\nBAD;;Oak Street 31/A;;Small Town;00235;IL;US\nSAD;Smith, Elizabeth;Elm Street 17;;Some City;30011;FL;United States\nBIN;VISA;VISA-12345678903\nLIT;1044391041;37.49;0;0;4.99;2.99;1;45.47\nLIT;2134776319;221.99;5;0;7.99;2.99;1;221.87\nSIN;UPS;EXP;DELIVER ONLY ON WEEKDAYS\nFOT;2;2;267.34\nHEA;0013100346;2007-02-15\nBCU;Acme Factory of England;72155919;T\nBAD;;St. Andrews Road 31;;London;55342;;UK\nBIN;AMEX;AMEX-72345678903\nLIT;1044319101;1070.50;5;0;7.99;2.99;12;12335.46\nLIT;2134727619;21.79;5;0;7.99;2.99;12;380.17\nLIT;1044339101;79.95;0;5.5;4.99;2.99;4;329.72\nLIT;2134747619;55.29;10;0;7.99;2.99;6;364.45\nLIT;1044359101;339.99;10;0;7.99;2.99;2;633.94\nSIN;FEDX;AMS;\nFOT;5;36;14043.74\nFFT;2;14311.08\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Delimited File Import Sample with Maven\nDESCRIPTION: Commands to run the Spring Batch delimited file import sample using Maven. The sample can be executed with either XML configuration or Java configuration by specifying different test methods.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/delimited/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n# Launch the sample using the XML configuration\n$>../mvnw -Dtest=DelimitedFunctionalTests#testLaunchJobWithXmlConfig test\n# Launch the sample using the Java configuration\n$>../mvnw -Dtest=DelimitedFunctionalTests#testLaunchJobWithJavaConfig test\n```\n\n----------------------------------------\n\nTITLE: Customer Data Records in Plain Text Format\nDESCRIPTION: A simple text file containing six customer records with a consistent naming pattern (customer followed by a number ending in 0). This format is commonly used as sample data for Spring Batch examples that demonstrate file reading and parsing capabilities.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/file/fixed/data/fixedLength.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncustomer110\ncustomer220\ncustomer330\ncustomer440\ncustomer550\ncustomer660\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch JSON Test from Command Line\nDESCRIPTION: This shell command demonstrates how to run the Spring Batch JSON functional test. It navigates to the spring-batch-samples directory and executes a specific test method using Maven.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/json/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=JsonFunctionalTests#testJsonReadingAndWriting test\n```\n\n----------------------------------------\n\nTITLE: Sample Transaction Data Format for Spring Batch Processing\nDESCRIPTION: Fixed-width formatted transaction data suitable for processing with Spring Batch. Each line contains a transaction ID (UK21341EAH followed by 5 digits), a transaction amount (variable width with decimal point), and a customer identifier (starting with 'customer' followed by a number).\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-test/src/test/resources/data/input/input2.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUK21341EAH45978 98.34customer1\nUK21341EAH46112 18.12customer2\nUK21341EAH47245012.78customer3\nUK21341EAH48108109.25customer4\nUK21341EAH49854123.39customer5\n```\n\n----------------------------------------\n\nTITLE: Running JDBC Cursor Reader Sample Tests\nDESCRIPTION: Commands to execute the JDBC cursor reader sample tests using both XML and Java configurations. The tests are run from the spring-batch-samples directory using Maven wrapper.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/jdbc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n# Launch the sample using the XML configuration\n$>../mvnw -Dtest=JdbcCursorFunctionalTests#testLaunchJobWithXmlConfig test\n# Launch the sample using the Java configuration\n$>../mvnw -Dtest=JdbcCursorFunctionalTests#testLaunchJobWithJavaConfig test\n```\n\n----------------------------------------\n\nTITLE: Displaying Customer Transaction Data in Plaintext Format\nDESCRIPTION: This snippet shows three lines of customer transaction data. Each line follows the format: transaction ID (13 characters), transaction amount (5 characters), and customer identifier. The data is presented in a raw, unformatted plaintext format.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-test/src/test/resources/data/input/input3.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUK21341EAH45978 98.34customer1\nUK21341EAH46112 18.12customer2\nUK21341EAH47245 12.78customer3\n```\n\n----------------------------------------\n\nTITLE: Maven Test Execution Commands\nDESCRIPTION: Maven commands to run the XML processing tests using both XML and Java configurations in Spring Batch.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/xml/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=XmlFunctionalTests#testLaunchJobWithXmlConfig test\n$>../mvnw -Dtest=XmlFunctionalTests#testLaunchJobWithJavaConfig test\n```\n\n----------------------------------------\n\nTITLE: Parsing Football Player CSV Data Format\nDESCRIPTION: Sample CSV data format for player information including player ID, name, position, birth year, and debut year.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/football/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nAbduKa00,Abdul-Jabbar,Karim,rb,1974,1996\nAbduRa00,Abdullah,Rabih,rb,1975,1999\nAberWa00,Abercrombie,Walter,rb,1959,1982\nAbraDa00,Abramowicz,Danny,wr,1945,1967\nAdamBo00,Adams,Bob,te,1946,1969\nAdamCh00,Adams,Charlie,wr,1979,2003\n...\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Multi-Record Type Sample with XML Configuration\nDESCRIPTION: This command demonstrates how to run the Spring Batch sample using XML configuration. It uses Maven to execute a specific test method.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/multirecordtype/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=MultiRecordTypeFunctionalTests#testLaunchJobWithXmlConfig test\n```\n\n----------------------------------------\n\nTITLE: Sample Transaction Data Format for Spring Batch Processing\nDESCRIPTION: Sample data file showing the structure of transaction records, where each transaction is enclosed within BEGIN/END delimiters. Each transaction contains an INFO line with customer ID and name, followed by an AMNT line with quantity and amount values.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/file/multiline/data/multiLine.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBEGIN\nINFO,UK21341EAH45,customer1\nAMNT,978,98.34\nEND\nBEGIN\nINFO,UK21341EAH46,customer2\nAMNT,112,18.12\nEND\nBEGIN\nINFO,UK21341EAH47,customer3\nAMNT,245,12.78\nEND\nBEGIN\nINFO,UK21341EAH48,customer4\nAMNT,108,109.25\nEND\nBEGIN\nINFO,UK21341EAH49,customer5\nAMNT,854,123.39\nEND\nBEGIN\nINFO,UK21341EAH50,customer6\nAMNT,234,32.45\nEND\n```\n\n----------------------------------------\n\nTITLE: Parsing Football Game Statistics CSV Data Format\nDESCRIPTION: Sample CSV data format for game statistics including player ID, year, team codes, and various performance metrics.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/football/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\nAbduKa00,1996,mia,10,nwe,0,0,0,0,0,29,104,,16,2\nAbduKa00,1996,mia,11,clt,0,0,0,0,0,18,70,,11,2\nAbduKa00,1996,mia,12,oti,0,0,0,0,0,18,59,,0,0\nAbduKa00,1996,mia,13,pit,0,0,0,0,0,16,57,,0,0\nAbduKa00,1996,mia,14,rai,0,0,0,0,0,18,39,,7,0\nAbduKa00,1996,mia,15,nyg,0,0,0,0,0,17,96,,14,0\n...\n```\n\n----------------------------------------\n\nTITLE: Running Pattern Matching Sample in Spring Batch\nDESCRIPTION: Shell commands to navigate to the spring-batch-samples directory and execute the PatternMatchingJobFunctionalTests using Maven. This test launches the job that processes the complex multiline input.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/patternmatching/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=PatternMatchingJobFunctionalTests#testJobLaunch test\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Restart Test\nDESCRIPTION: Commands to execute the restart functionality test in the spring-batch-samples project. The test simulates a job failure and restart using ExceptionThrowingItemReaderProxy to force a failure on the fourth record.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/restart/fail/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=RestartFunctionalTests#testLaunchJob test\n```\n\n----------------------------------------\n\nTITLE: Customer Credit XML Structure Example\nDESCRIPTION: Sample XML structure showing customer credit data format with nested customer elements containing name and credit information. This represents both the input and output format for the batch processing job.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/xml/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<customers>\n\t<customer>\n\t\t<name>customer1</name>\n\t\t<credit>10</credit>\n\t</customer>\n\t<customer>\n\t\t<name>customer2</name>\n\t\t<credit>20</credit>\n\t</customer>\n\t<customer>\n\t\t<name>customer3</name>\n\t\t<credit>30</credit>\n\t</customer>\n\t<customer>\n\t\t<name>customer4</name>\n\t\t<credit>40</credit>\n\t</customer>\n\t<customer>\n\t\t<name>customer5</name>\n\t\t<credit>50</credit>\n\t</customer>\n</customers>\n```\n\n----------------------------------------\n\nTITLE: Fixed-width Customer Transaction Records\nDESCRIPTION: Data records following a fixed-width format where each line contains a UK transaction ID (13 chars), transaction amount (5-6 chars), and customer identifier (9 chars). Used for batch processing of financial transactions.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-test/src/test/resources/data/input/input1.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUK21341EAH45978 98.34customer1\nUK21341EAH46112 18.12customer2\nUK21341EAH47245 12.78customer3\nUK21341EAH48108109.25customer4\nUK21341EAH49854123.39customer5\n```\n\n----------------------------------------\n\nTITLE: Running the Stop/Restart Sample with Maven in Spring Batch\nDESCRIPTION: Commands to execute the JobOperatorFunctionalTests which demonstrate the start, stop, and resume functionality of a Spring Batch job. The test runs an infinite loop job that processes fake data to showcase stop signals and restart capabilities.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/restart/stop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=JobOperatorFunctionalTests#testStartStopResumeJob test\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Football Job Sample from Command Line\nDESCRIPTION: These bash commands demonstrate how to run the Spring Batch football job sample using both XML and Java configurations. The commands use Maven to execute specific test methods that launch the job.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/football/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n# Launch the sample using the XML configuration\n$>../mvnw -Dtest=FootballJobFunctionalTests#testLaunchJobWithXmlConfiguration test\n# Launch the sample using the Java configuration\n$>../mvnw -Dtest=FootballJobFunctionalTests#testLaunchJobWithJavaConfiguration test\n```\n\n----------------------------------------\n\nTITLE: Running Process Indicator Sample Test in Spring Batch\nDESCRIPTION: Shell commands to navigate to the sample directory and execute the functional test that demonstrates the Process Indicator pattern for multi-threaded step execution in Spring Batch.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/processindicator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=ProcessIndicatorJobFunctionalTests#testLaunchJob test\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch AMQP Sample Tests with Maven\nDESCRIPTION: Commands to execute the AMQP sample job tests using Maven. The first command runs the test with XML configuration, while the second command runs it with Java configuration. Both tests require RabbitMQ to be installed and running, and the MessageProducer should be launched before executing the tests.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/amqp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd spring-batch-samples\n# Launch the test using the XML configuration\n../mvnw -Dtest=AmqpJobFunctionalTests#testLaunchJobWithXmlConfig test\n# Launch the test using the Java configuration\n../mvnw -Dtest=AmqpJobFunctionalTests#testLaunchJobWithJavaConfig test\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Local Partitioning Sample Test\nDESCRIPTION: This snippet shows the command line instructions to run the MailJobFunctionalTests in the spring-batch-samples project. It demonstrates how to execute a specific test method using Maven.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/partitioning/local/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=MailJobFunctionalTests#testLaunchJob test\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Hello World Sample via Maven\nDESCRIPTION: Commands to navigate to the samples directory and execute the Hello World job functional test using Maven wrapper. The test runs a single job that prints 'Hello world!' to standard output.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/helloworld/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=HelloWorldJobFunctionalTests#testLaunchJob test\n```\n\n----------------------------------------\n\nTITLE: Running JDBC Paging Reader Sample Tests\nDESCRIPTION: Commands to execute the JDBC paging reader sample tests using both XML and Java configurations. The tests are run from the spring-batch-samples directory using Maven wrapper.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/jdbc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n# Launch the sample using the XML configuration\n$>../mvnw -Dtest=JdbcPagingFunctionalTests#testLaunchJobWithXmlConfig test\n# Launch the sample using the Java configuration\n$>../mvnw -Dtest=JdbcPagingFunctionalTests#testLaunchJobWithJavaConfig test\n```\n\n----------------------------------------\n\nTITLE: Multiline Record Input Format Example for Spring Batch\nDESCRIPTION: Demonstrates the complex input format with multiline records, including headers, customer information, billing details, line items, shipping instructions, and footer. This format requires custom parsing logic in the ItemReader.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/patternmatching/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHEA;0013100345;2007-02-15\nNCU;Smith;Peter;;T;20014539;F\nBAD;;Oak Street 31/A;;Small Town;00235;IL;US\nSAD;Smith, Elizabeth;Elm Street 17;;Some City;30011;FL;United States\nBIN;VISA;VISA-12345678903\nLIT;1044391041;37.49;0;0;4.99;2.99;1;45.47\nLIT;2134776319;221.99;5;0;7.99;2.99;1;221.87\nSIN;UPS;EXP;DELIVER ONLY ON WEEKDAYS\nFOT;2;2;267.34\nHEA;0013100346;2007-02-15\nBCU;Acme Factory of England;72155919;T\nBAD;;St. Andrews Road 31;;London;55342;;UK\nBIN;AMEX;AMEX-72345678903\nLIT;1044319101;1070.50;5;0;7.99;2.99;12;12335.46\nLIT;2134727219;21.79;5;0;7.99;2.99;12;380.17\nLIT;1044339301;79.95;0;5.5;4.99;2.99;4;329.72\nLIT;2134747319;55.29;10;0;7.99;2.99;6;364.45\nLIT;1044359501;339.99;10;0;7.99;2.99;2;633.94\nSIN;FEDX;AMS;\nFOT;5;36;14043.74\n```\n\n----------------------------------------\n\nTITLE: Running Fixed Length File Import Job Sample in Bash\nDESCRIPTION: Commands to run the fixed length file import job sample using both XML and Java configurations. These commands use Maven to execute specific test methods.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/fixed/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n# Launch the sample using the XML configuration\n$>../mvnw -Dtest=FixedLengthFunctionalTests#testLaunchJobWithXmlConfig test\n# Launch the sample using the Java configuration\n$>../mvnw -Dtest=FixedLengthFunctionalTests#testLaunchJobWithJavaConfig test\n```\n\n----------------------------------------\n\nTITLE: Running Customer Filter Sample Test in Spring Batch\nDESCRIPTION: Command line instructions to run the CustomerFilterJobFunctionalTests to test the filter functionality. This executes a specific test method that demonstrates the ItemProcessor filtering mechanism.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/filter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=CustomerFilterJobFunctionalTests#testFilterJob test\n```\n\n----------------------------------------\n\nTITLE: Running Composite ItemReader Sample Test in Spring Batch\nDESCRIPTION: This code snippet demonstrates how to run the Composite ItemReader Sample functional test using Maven. It navigates to the spring-batch-samples directory and executes a specific test class and method.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/compositereader/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=CompositeItemReaderSampleFunctionalTests#testJobLaunch test\n```\n\n----------------------------------------\n\nTITLE: Displaying Fixed Length Record Structure in Plaintext\nDESCRIPTION: Shows the structure of fixed length records used in the example. Each record contains a customer name and a credit value.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/fixed/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncustomer110\ncustomer220\ncustomer330\ncustomer440\ncustomer550\ncustomer660\n```\n\n----------------------------------------\n\nTITLE: Fixed-Width Flat File Data Sample for Spring Batch Testing\nDESCRIPTION: A fixed-width format data sample with a header line of position markers followed by two data records. Each record contains fields for title, first name, last name, age, and city, all positioned in specific column ranges.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/beanwrapper/data/ImportPersonDataStep.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n123451234567890123451234567890123456789012345123456789012345678901234567890\nMr   Tomas          Slanina             29   BratislavaPeter     Charles   \nMr   George W.      Bush                31   Washington                    \n```\n\n----------------------------------------\n\nTITLE: Running the Multiline Aggregate Sample in Spring Batch\nDESCRIPTION: Provides the command line instructions to run the sample. It uses Maven to execute a specific test class and method that launches the job.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/multilineaggregate/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=MultilineAggregateJobFunctionalTests#testJobLaunch test\n```\n\n----------------------------------------\n\nTITLE: Defining Quartz JobDetail for Spring Batch Job Execution\nDESCRIPTION: Creates a Quartz JobDetail bean using Spring's JobDetailBean that configures which batch job to run. It includes job data parameters like jobName, jobLocator, and jobLauncher references needed to execute the Spring Batch job.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/misc/quartz/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"jobDetail\" class=\"org.springframework.scheduling.quartz.JobDetailBean\">\n    <property name=\"jobClass\" value=\"org.springframework.batch.samples.misc.quartz.JobLauncherDetails\"/>\n    <property name=\"group\" value=\"quartz-batch\"/>\n    <property name=\"jobDataAsMap\">\n        <map>\n            <entry key=\"jobName\" value=\"footballJob\"/>\n            <entry key=\"jobLocator\" value-ref=\"jobRegistry\"/>\n            <entry key=\"jobLauncher\" value-ref=\"jobLauncher\"/>\n        </map>\n    </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Multi-Record Type Sample with Java Configuration\nDESCRIPTION: This command shows how to run the Spring Batch sample using Java configuration. It uses Maven to execute a specific test method.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/multirecordtype/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=MultiRecordTypeFunctionalTests#testLaunchJobWithJavaConfig test\n```\n\n----------------------------------------\n\nTITLE: Running BeanWrapperMapper Sample Job Test in Spring Batch\nDESCRIPTION: This command navigates to the spring-batch-samples directory and executes a specific test for the BeanWrapperMapper sample job using Maven. It demonstrates how to run the sample from the command line.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/beanwrapper/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=BeanWrapperMapperSampleJobFunctionalTests#testJobLaunch test\n```\n\n----------------------------------------\n\nTITLE: Running Job Step Sample Test\nDESCRIPTION: Command line instructions for executing the JobStepFunctionalTests test case in the spring-batch-samples project. The test demonstrates launching a job within a step.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/jobstep/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=JobStepFunctionalTests#testJobLaunch test\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Groovy Sample Test in Bash\nDESCRIPTION: This code snippet shows the command line instructions to run the Groovy Job Functional Test for the Spring Batch sample. It navigates to the spring-batch-samples directory and uses Maven to execute the specific test.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/misc/groovy/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=GroovyJobFunctionalTests#testLaunchJob test\n```\n\n----------------------------------------\n\nTITLE: Running PetClinic Job Sample with XML Configuration\nDESCRIPTION: This command runs the PetClinic job sample using XML configuration. It executes a specific test method within the PetClinicJobFunctionalTests class.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/petclinic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n../mvnw -Dtest=PetClinicJobFunctionalTests#testLaunchJobWithXmlConfiguration test\n```\n\n----------------------------------------\n\nTITLE: Running Loop Flow Sample Test in Spring Batch\nDESCRIPTION: Commands to navigate to the spring-batch-samples directory and execute the LoopFlowSampleFunctionalTests using Maven. This test demonstrates the job launch for a loop flow sample.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/loop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=LoopFlowSampleFunctionalTests#testJobLaunch test\n```\n\n----------------------------------------\n\nTITLE: Running PetClinic Job Sample with Java Configuration\nDESCRIPTION: This command runs the PetClinic job sample using Java configuration. It executes a specific test method within the PetClinicJobFunctionalTests class.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/petclinic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n../mvnw -Dtest=PetClinicJobFunctionalTests#testLaunchJobWithJavaConfiguration test\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Adhoc Loop Sample via Maven\nDESCRIPTION: This snippet demonstrates how to run the Spring Batch Adhoc Loop sample using Maven. It executes a specific test class and method to test pausing the job.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/misc/jmx/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=RemoteLauncherTests#testPauseJob test\n```\n\n----------------------------------------\n\nTITLE: Running Mail Job Functional Test in Spring Batch Sample\nDESCRIPTION: Commands to navigate to the spring-batch-samples directory and execute a specific test case for the mail job using Maven. This test launches the job and verifies its functionality.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/mail/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=MailJobFunctionalTests#testLaunchJob test\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Delegating Job Test\nDESCRIPTION: Command line instructions for running the DelegatingJobFunctionalTests sample from the spring-batch-samples directory using Maven wrapper.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/adapter/readerwriter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=DelegatingJobFunctionalTests#testLaunchJob test\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch Tasklet Adapter Test\nDESCRIPTION: Shell commands to navigate to the samples directory and execute the TaskletAdapterJobFunctionalTests using Maven wrapper. The test specifically runs the testLaunchJob method to verify the Tasklet adapter implementation.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/adapter/tasklet/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$>cd spring-batch-samples\n$>../mvnw -Dtest=TaskletAdapterJobFunctionalTests#testLaunchJob test\n```\n\n----------------------------------------\n\nTITLE: Sample Multi-Record Type Input File for Spring Batch\nDESCRIPTION: This code snippet shows the format of the input file containing multiple record types. It includes customer records (CUST) and trade records (TRAD) with different data structures.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/file/multirecordtype/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCUST42001customer100012000\nCUST42002customer200022000\nCUST42003customer300032000\nTRADUK21341EAH45978 98.34customer1\nTRADUK21341EAH46112 18.12customer2\nCUST42004customer400042000\nCUST42005customer500052000\nTRADUK21341EAH47245 12.78customer3\nTRADUK21341EAH48108109.25customer4\nTRADUK21341EAH49854123.39customer5\nCUST42006customer600062000\nTRADUK21341EAH50234 32.45customer6\n...\n```\n\n----------------------------------------\n\nTITLE: Starting Monitoring Stack with Docker Compose\nDESCRIPTION: Docker Compose command to start the monitoring stack (Prometheus, Prometheus push gateway, and Grafana) for the metrics sample\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd spring-batch-samples/src/main/resources/org/springframework/batch/samples/metrics\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Visualizing Football Job Flow with Mermaid Diagram\nDESCRIPTION: A flow diagram showing the three steps of the football batch job: playerLoad, gameLoad, and playerSummarization.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/java/org/springframework/batch/samples/football/README.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A(playerLoad) --> B(gameLoad)\n    B --> C(playerSummarization)\n```\n\n----------------------------------------\n\nTITLE: Running Spring Batch MCVE Template\nDESCRIPTION: Commands to unzip and run the Spring Batch Minimal Complete Verifiable Example (MCVE) template using Maven.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/ISSUE_REPORTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$>unzip spring-batch-mcve.zip && cd spring-batch-mcve\n$>mvn package exec:java -Dexec.mainClass=org.springframework.batch.MyBatchJobConfiguration\n```\n\n----------------------------------------\n\nTITLE: Executing Chunk Scanning Sample Output\nDESCRIPTION: Sample output showing chunk scanning behavior when a skippable exception occurs during item writing. The output demonstrates how items are processed in chunks, exception handling, and transaction management.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/README.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n1.  reading item = 1\n2.  reading item = 2\n3.  reading item = 3\n4.  processing item = 1\n5.  processing item = 2\n6.  processing item = 3\n7.  About to write chunk: [1, 2, 3]\n8.  writing item = 1\n9.  writing item = 2\n10. writing item = 3\n11. reading item = 4\n12. reading item = 5\n13. reading item = 6\n14. processing item = 4\n15. processing item = 5\n16. processing item = 6\n17. About to write chunk: [4, 5, 6]\n18. writing item = 4\n19. Throwing exception on item 5\n20. processing item = 4\n21. About to write chunk: [4]\n22. writing item = 4\n23. processing item = 5\n24. About to write chunk: [5]\n25. Throwing exception on item 5\n26. processing item = 6\n27. About to write chunk: [6]\n28. writing item = 6\n29. reading item = null\n```\n\n----------------------------------------\n\nTITLE: Packaging Spring Batch MCVE for Submission\nDESCRIPTION: Commands to clean the Maven project and create a zip archive of the Spring Batch MCVE for submission.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/ISSUE_REPORTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$>mvn clean\n$>zip -r spring-batch-mcve.zip spring-batch-mcve\n```\n\n----------------------------------------\n\nTITLE: Starting MongoDB Server with Docker\nDESCRIPTION: Docker command to start a MongoDB server instance for running the MongoDB sample application\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name mongodb --rm -d -p 27017:27017 mongo\n```\n\n----------------------------------------\n\nTITLE: Fixed-Width Data Format Sample for Spring Batch Processing\nDESCRIPTION: Sample data file showing fixed-width formatted records for customer information and trade transactions. Customer records start with 'CUST' and contain customer ID, name, and amount. Trade records start with 'TRADUK' and include transaction details with amounts and customer references.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/file/multirecordtype/data/multiRecordType.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCUST42001customer100012000\nCUST42002customer200022000\nCUST42003customer300032000\nTRADUK21341EAH45978 98.34customer1\nTRADUK21341EAH46112 18.12customer2\nCUST42004customer400042000\nCUST42005customer500052000\nTRADUK21341EAH47245 12.78customer3\nTRADUK21341EAH48108109.25customer4\nTRADUK21341EAH49854123.39customer5\nCUST42006customer600062000\nTRADUK21341EAH50234 32.45customer6\n```\n\n----------------------------------------\n\nTITLE: Defining Order Batch File Structure in Plaintext\nDESCRIPTION: This snippet outlines the structure of an order batch file, including various record types (FHE, HEA, NCU, BCU, BAD, SAD, BIN, LIT, SIN, FOT, FFT) and their respective field formats. It specifies mandatory and optional fields for each record type, along with field descriptions and constraints.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/file/patternmatching/data/order_sample.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# FHE;ORDER_BATCH_ID(S8-4);ORDER_BATCH_DATE(YYYY-MM-DD)\n#\n#     HEA;ORDER_ID(N10);ORDER_DATE(YYYY-MM-DD)\n# [excl]  NCU;LAST_NAME(S35);FIRST_NAME(S35);MIDDLE_NAME(S35);REGISTERED(T/F);REG_ID(N8);VIP(T/F)\n# [excl]  BCU;COMPANY_NAME(S50);REG_ID(N8);VIP(T/F)\n#         BAD;ADDRESSEE(S60);ADDR_LINE1(S50);ADDR_LINE2(S50);CITY(S30);ZIP_CODE(S5);STATE(S2);COUNTRY(S50)\n# [opt]   SAD;ADDRESSEE(S60);ADDR_LINE1(S50);ADDR_LINE2(S50);CITY(S30);ZIP_CODE(S5);STATE(S2);COUNTRY(S50)\n#         BIN;PAYMENT_TYPE_ID(S4);PAYMENT_DESC(S30);\n#         LIT;ITEM_ID(N10);PRICE(N8.2);DISCOUNT_PERC(N3.2);DISCOUNT_AMOUNT(N8.2);SHIPPING_PRICE(N8.2);HANDLING_PRICE(N8.2);QUANTITY(N4);TOTAL_PRICE(N8.2)\n#         ... (1 .. n) ...\n#         SIN;SHIPPER_ID(S4);SHIPPING_TYPE_ID(S3);ADDITIONAL_SHIPPING_INFO(S100)\n#     FOT;TOTAL_LINE_ITEMS(N6);TOTAL_ITEMS(N6);TOTAL_PRICE(S8.2)\n#\n# FFT;TOTAL_ORDERS(N6);TOTAL_PRICE(N10.2)\n#\n# LINE_ID Description             LINE MANDATORY        OPTIONAL FIELDS*\n# FHE     File Header             YES                   NONE\n# HEA     Record Header           YES                   NONE\n# NCU     Non-Business Customer   EXCL WITH BCU         MIDDLE_NAME, REG_ID (if REGISTERED is 'F')\n# BCU     Business Customer       EXCL WITH NCU         NONE\n# BAD     Billing Address         YES                   ADDRESSEE, ADDR_LINE2, STATE (if COUNTRY is not 'United States')\n# SAD     Shipping Address        NO                    ADDR_LINE2, STATE (if COUNTRY is not 'United States')\n# BIN     Billing Info            YES                   NONE\n# LIT     Line Item               YES (1 to N lines)    DISCOUNT_PERC and DISCOUNT_AMOUNT are mutualy exclusive (only one of them can be non zero)\n# SIN     Shipping Info           YES                   ADDITIONAL_SHIPPING_INFO\n# FOT     Record Footer           YES                   NONE\n# FFT     File Footer             YES                   NONE\n#\n# * if field is optional at least empty field must be provided (';;')\n```\n\n----------------------------------------\n\nTITLE: Customer Transaction CSV Data Sample\nDESCRIPTION: A structured CSV dataset containing customer transaction information with columns for product ID, quantity, amount, and customer identifier. Each row represents a single transaction, with one error record marked with 'ERR' values.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/skip/data/input1.txt#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nUK21341EAH45,978,98.34,customer1\nUK21341EAH46,112,18.12,customer2\nUK21341EAH47,223,12.78,customer3\nUK21341EAH48,245,32.53,customer4\nUK21341EAH49,ERR,ERR,customer5\nUK21341EAH50,854,13.39,customer6\nUK21341EAH51,978,98.34,customer7\nUK21341EAH52,345,48.23,customer8\nUK21341EAH53,564,32.11,customer9\n```\n\n----------------------------------------\n\nTITLE: Fixed Width Order Transaction Format Example\nDESCRIPTION: Sample fixed-width formatted order transaction data showing two complete orders. Each order contains header record, customer details, address, billing information, multiple item records, and closing total record. Fields are positioned at fixed character positions with specific widths.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/file/patternmatching/data/multilineOrderOutput.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBEGIN_ORDER:13100345  2007/02/15                    \nCUSTOMER:20014539  Peter               Smith     \nADDRESS:Oak Street 31/A     Small Town00235     \nBILLING:VISA      VISA-12345678903    \nITEM:104439104137.49     \nITEM:2134776319221.99    \nEND_ORDER:              267.34\nBEGIN_ORDER:13100346  2007/02/15                    \nCUSTOMER:72155919                                \nADDRESS:St. Andrews Road 31 London    55342     \nBILLING:AMEX      AMEX-72345678903    \nITEM:10443191011070.50   \nITEM:213472721921.79     \nITEM:104433930179.95     \nITEM:213474731955.29     \nITEM:1044359501339.99    \nEND_ORDER:            14043.74\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information Globally\nDESCRIPTION: Shell commands for configuring Git with your real name and email globally. This ensures proper attribution in commit history and alignment with the Spring contributor license agreement.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global user.name \"First Last\"\ngit config --global user.email user@mail.com\n```\n\n----------------------------------------\n\nTITLE: Sample Git Linear Commit History\nDESCRIPTION: Example output showing proper linear git commit history format\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n* e1f6de38e04a5227fea2d4df193a5b50beaf2d00 GH-2002: Initial support for complex conditional replacements\n* 65d2df652abaae2ca309d96e3026c2d67312655f Add ability to set a custom TaskExecutor impl, remove unused namespaces from JSR bootst\n* 85807568575c24d8878ad605a344f2bc35bb2b13 Update to allow restart parameters to override previous parameters in JsrJobOperator an\n* a21df75ce9dfc92e9768353b827da4248aefe425 GH-2049: Support multiple fragmentRootElementNames in StaxEventItemReader\n* 7f1130c9a265a3ce18a46cbbc122e6573167a036 Fix TCK test JobOperatorTests.testJobOperatorRestartJobAlreadyAbandoned\n* c4231c4cc861bbcc43437c80a03ddd9b7b2897a3 Fixed no executions returned check and added a unit test\n```\n\n----------------------------------------\n\nTITLE: Apache License Header Template for Java Classes\nDESCRIPTION: Required Apache 2.0 license header template to be included in all new Java class files\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage ...;\n```\n\n----------------------------------------\n\nTITLE: Using @since Tags in Java Documentation\nDESCRIPTION: Example of how to properly document new public API types and methods using JavaDoc with @since tags. The example shows a complete JavaDoc comment including author, version information, and see references.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n/**\n * ...\n *\n * @author First Last\n * @since 3.0\n * @see ...\n */\n```\n\n----------------------------------------\n\nTITLE: Fixed Width Customer Records Sample Data\nDESCRIPTION: Sample data file showing fixed width formatted customer records. Each line contains a UK prefix, followed by a numeric identifier, transaction amount, and customer reference number. The data appears to be structured for batch processing.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/processindicator/data/ImportTradeDataStep.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUK21341EAH4121131.11customer1\nUK21341EAH4221232.11customer2\nUK21341EAH4321333.11customer3\nUK21341EAH4421434.11customer4\nUK21341EAH4521535.11customer5\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information for Spring Batch Repository\nDESCRIPTION: Shell commands for configuring Git with your real name and email locally for just the Spring Batch repository. This is useful when you want repository-specific Git configurations.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd spring-batch\ngit config user.name \"First Last\"\ngit config user.email user@mail.com\n```\n\n----------------------------------------\n\nTITLE: Updating Apache License Header in Java Files\nDESCRIPTION: Example showing how to update the copyright year range in Apache license headers for modified files. The example demonstrates changing the year range from 2002-2011 to 2002-2013 to reflect recent modifications.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n * Copyright 2002-2011 the original author or authors.\n```\n\nLANGUAGE: java\nCODE:\n```\n * Copyright 2002-2013 the original author or authors.\n```\n\n----------------------------------------\n\nTITLE: Fixed Width Customer Data Format for Spring Batch Processing\nDESCRIPTION: Sample fixed width data file containing customer records. Each line follows a consistent format with fields positioned at specific character positions, including what appears to be ID codes, reference numbers, numeric values (possibly amounts), and customer identifiers.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/beanwrapper/data/ImportTradeDataStep.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUK21341EAH4121131.11customer1\nUK21341EAH4221232.11customer2\nUK21341EAH4321333.11customer3\nUK21341EAH4421434.11customer4\nUK21341EAH4521535.11customer5\n```\n\n----------------------------------------\n\nTITLE: Sample Transaction Data Format for Spring Batch Processing\nDESCRIPTION: Sample data with fixed-length fields representing financial transactions. Each record includes a country code (UK), account number, transaction amount, and customer identifier. This format is typically used for batch processing demonstrations in Spring Batch applications.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/jobstep/data/ImportTradeDataStep.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUK21341EAH4597898.34customer1\nUK21341EAH4611218.12customer2\nUK21341EAH4724512.78customer2\nUK21341EAH4810819.25customer3\nUK21341EAH4985423.39customer4\n```\n\n----------------------------------------\n\nTITLE: Customer Data Records Format\nDESCRIPTION: Sample data showing customer records in a fixed-width format. Each line contains a UK identifier prefix, followed by a numeric sequence, amount with decimal places, and customer identifier. The format appears to be: UK prefix (8 chars) + numeric sequence (8 chars) + amount (5 chars) + customer label (9 chars).\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/spring-batch-samples/src/main/resources/org/springframework/batch/samples/compositewriter/data/ImportTradeDataStep.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUK21341EAH4121131.11customer1\nUK21341EAH4221232.11customer2\nUK21341EAH4321333.11customer3\nUK21341EAH4421434.11customer4\nUK21341EAH4521535.11customer5\n```\n\n----------------------------------------\n\nTITLE: Checking Git Commit History\nDESCRIPTION: Command to check linear commit history and create git alias for logging\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlog --graph --pretty=oneline\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global alias.logg 'log --graph --pretty=oneline'\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides a template for the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the year and copyright owner's name, as well as the standard license text and link to the full license.\nSOURCE: https://github.com/spring-projects/spring-batch/blob/main/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```"
  }
]