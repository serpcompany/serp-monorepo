[
  {
    "owner": "macosui",
    "repo": "macos_window_utils.dart",
    "content": "TITLE: Installation Configuration\nDESCRIPTION: This section configures the installation process, specifying the destination directories for the executable, data files (ICU data), and libraries. It handles copying assets and installing the AOT library for Profile and Release builds. It removes the assets directory before copying to prevent stale files and configures the installation prefix and default install behavior for Visual Studio.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Project Initialization and Configuration\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, defines the project name, and sets the binary name of the executable. It also configures build types (Debug, Profile, Release) and sets linker and compiler flags for the Profile build mode to match the Release build mode.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"example\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter library. This command executes the Flutter tool backend script to generate the necessary build artifacts.  It sets the output to the Flutter library and headers, and uses a phony file to ensure the command runs every time due to limitations in determining input/output lists from the Flutter tool. The `FLUTTER_TOOL_ENVIRONMENT` and `FLUTTER_ROOT` variables are used to configure the environment for the Flutter tool.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: MainFlutterWindow.swift Modification - Swift Diff\nDESCRIPTION: This diff shows the modifications required in `MainFlutterWindow.swift` to integrate `macos_window_utils`. It imports the necessary module, replaces the default FlutterViewController initialization with `MacOSWindowUtilsViewController`, initializes the plugin, and registers generated plugins with the new controller's FlutterViewController.  The '+'/'-' prefixes indicate added/removed lines respectively.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nimport Cocoa\nimport FlutterMacOS\n+import macos_window_utils\n\nclass MainFlutterWindow: NSWindow {\n  override func awakeFromNib() {\n-   let flutterViewController = FlutterViewController.init()\n-   let windowFrame = self.frame\n-   self.contentViewController = flutterViewController\n-   self.setFrame(windowFrame, display: true)\n\n-   RegisterGeneratedPlugins(registry: flutterViewController)\n    \n+   let windowFrame = self.frame\n+   let macOSWindowUtilsViewController = MacOSWindowUtilsViewController()\n+   self.contentViewController = macOSWindowUtilsViewController\n+   self.setFrame(windowFrame, display: true)\n\n+   /* Initialize the macos_window_utils plugin */\n+   MainFlutterWindowManipulator.start(mainFlutterWindow: self)\n\n+   RegisterGeneratedPlugins(registry: macOSWindowUtilsViewController.flutterViewController)\n\n    super.awakeFromNib()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Installation\nDESCRIPTION: This snippet configures the installation process, creating a relocatable bundle in the build directory. It sets the installation prefix, removes the bundle directory on each install, and installs the executable, ICU data file, Flutter library, and bundled plugin libraries.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library headers to be included in the build. These headers define the API for interacting with the Flutter engine. The list includes various headers related to message channels, codecs, plugins, and the Flutter view. These headers are prepended with the path to the flutter_linux directory within the ephemeral directory.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Applying NSAppPresentationOptions in Dart\nDESCRIPTION: This code demonstrates how to create and apply `NSAppPresentationOptions` to customize the window's full-screen presentation, such as automatically hiding the toolbar and menu bar.  It depends on the `macos_window_utils` package and requires `enableWindowDelegate` to be set to `true` during initialization.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README_zh.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\n// 创建 NSAppPresentationOptions 实例。\nfinal options = NSAppPresentationOptions.from({\n  // fullScreen 需要始终作为全屏选项存在。\n  NSAppPresentationOption.fullScreen,\n\n  // 在全屏模式下自动隐藏工具栏。\n  NSAppPresentationOption.autoHideToolbar,\n\n  // autoHideToolbar 必须与 autoHideMenuBar 一起使用。\n  NSAppPresentationOption.autoHideMenuBar,\n\n  // autoHideMenuBar 必须与 autoHideDock 或 hideDock 之一 一起使用。\n  NSAppPresentationOption.autoHideDock,\n});\n\n// 将选项应用为全屏选项。\noptions.applyAsFullScreenPresentationOptions();\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` from the core and plugin wrapper sources.  Applies standard settings, configures properties for position independent code and hidden C++ visibility, links to the Flutter interface library, adds include directories, and defines a dependency on the flutter assemble target.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies with PkgConfig\nDESCRIPTION: Uses `pkg_check_modules` to find and import system-level dependencies. It searches for GTK 3, GLib 2.0, and GIO 2.0 using PkgConfig. The `REQUIRED` keyword ensures that the build will fail if any of these dependencies are not found.  The `IMPORTED_TARGET` option creates imported targets for these libraries.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Include Flutter Build Rules and Application Build\nDESCRIPTION: This section includes the Flutter library and tool build rules from the `flutter` directory, and the application build rules from the `runner` directory. It also includes generated plugin build rules, which manage building the plugins and adding them to the application.  These rules are crucial for integrating the Flutter environment into the CMake build system.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a function `list_prepend` that prepends a prefix to each element of a list. This function replicates the functionality of `list(TRANSFORM ... PREPEND ...)` which is not available in CMake 3.10. It iterates through the elements and constructs a new list with the prefix applied, then updates the original list in the parent scope.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Tool Backend Command\nDESCRIPTION: Defines a custom command to run the Flutter tool backend. Uses a phony output file to force execution every time. The command generates the Flutter library, headers, and wrapper sources by invoking a batch script within the Flutter tool environment.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: macOS Window Utils Initialization - Swift\nDESCRIPTION: This code snippet initializes the `macos_window_utils` plugin and registers generated plugins within the `MainFlutterWindow.swift` file. It replaces the original FlutterViewController initialization with MacOSWindowUtilsViewController, starts the plugin manipulator, and registers plugins with the new view controller's FlutterViewController. This ensures compatibility with older macOS versions.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nlet windowFrame = self.frame\nlet macOSWindowUtilsViewController = MacOSWindowUtilsViewController()\nself.contentViewController = macOSWindowUtilsViewController\nself.setFrame(windowFrame, display: true)\n\n/* Initialize the macos_window_utils plugin */\nMainFlutterWindowManipulator.start(mainFlutterWindow: self)\n\nRegisterGeneratedPlugins(registry: macOSWindowUtilsViewController.flutterViewController)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Adds an interface library named `flutter`. This library is used to define the public interface of the Flutter engine. It sets the include directories and link libraries for the interface. The include directories specify where to find the Flutter headers. The link libraries specify the Flutter library itself and the system dependencies (GTK, GLib, GIO).\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Applying NSAppPresentationOptions\nDESCRIPTION: This Dart code creates and applies NSAppPresentationOptions to automatically hide the toolbar and menu bar when the window is in fullscreen mode. It requires setting enableWindowDelegate to true when initializing WindowManipulator.  Relies on the macos_window_utils package.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// Create NSAppPresentationOptions instance.\nfinal options = NSAppPresentationOptions.from({\n  // fullScreen needs to be present as a fullscreen presentation option at all\n  // times.\n  NSAppPresentationOption.fullScreen,\n\n  // Hide the toolbar automatically in fullscreen mode.\n  NSAppPresentationOption.autoHideToolbar,\n\n  // autoHideToolbar must be accompanied by autoHideMenuBar.\n  NSAppPresentationOption.autoHideMenuBar,\n\n  // autoHideMenuBar must be accompanied by either autoHideDock or hideDock.\n  NSAppPresentationOption.autoHideDock,\n});\n\n// Apply the options as fullscreen presentation options.\noptions.applyAsFullScreenPresentationOptions();\n```\n\n----------------------------------------\n\nTITLE: Initialize Project and Set Variables\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and defines variables for the binary name and application ID. It also sets the RPATH for loading bundled libraries.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"example\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.example\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Standard Compilation Settings\nDESCRIPTION: This function `APPLY_STANDARD_SETTINGS` applies standard compilation features, options, and definitions to the specified target. It sets the C++ standard to C++17, disables exceptions, and defines debug macros for Debug builds. This function ensures consistent compilation settings across targets.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing the Plugin in Dart\nDESCRIPTION: This code snippet shows how to initialize the `macos_window_utils` plugin in the `main` function of a Flutter application. It ensures that the Flutter binding is initialized and then calls `WindowManipulator.initialize()` to set up the plugin. This initialization is crucial before calling any other method from the `WindowManipulator` class.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README_zh.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await WindowManipulator.initialize();\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NSWindowDelegate Instance in Dart\nDESCRIPTION: This code shows how to add an instance of a custom `NSWindowDelegate` to the `WindowManipulator` to start receiving window events. It calls the `addNSWindowDelegate` method and stores the returned `NSWindowDelegateHandle`, which can be used to later remove the delegate. It depends on the `macos_window_utils` package.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README_zh.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nfinal delegate = _MyDelegate();\n final handle = WindowManipulator.addNSWindowDelegate(delegate);\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Compilation Settings\nDESCRIPTION: This snippet defines a function that applies standard compilation features, options, and definitions to a target. It sets the C++ standard to C++14, enables warnings as errors, and adds optimization flags for non-Debug builds.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add Preprocessor Definitions\nDESCRIPTION: This snippet adds preprocessor definitions to the target executable, making the Flutter version information available during compilation.  It defines constants for the version, major version, minor version, patch, and build number.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with TitlebarSafeArea in Dart\nDESCRIPTION: This code demonstrates how to wrap your application in a `TitlebarSafeArea` widget. This widget ensures that your application's content is not obscured by the window's title bar when using a full-size content view.  It depends on the `macos_window_utils` package, which provides the `TitlebarSafeArea` widget.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README_zh.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nTitlebarSafeArea(\n  child: YourApp(),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing NSWindowDelegate in Dart\nDESCRIPTION: This code defines a class that extends `NSWindowDelegate` and overrides the `windowDidEnterFullScreen` method to respond to the window entering full-screen mode. This showcases how to listen for and react to specific window events. The `macos_window_utils` package provides the `NSWindowDelegate` class.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README_zh.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nclass _MyDelegate extends NSWindowDelegate {\n  @override\n  void windowDidEnterFullScreen() {\n    print('已进入全屏模式');\n    \n    super.windowDidEnterFullScreen();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Plugin with NSWindowDelegate in Dart\nDESCRIPTION: This code demonstrates initializing the `macos_window_utils` plugin with the `enableWindowDelegate` option set to `true`. This enables the use of `NSWindowDelegate` to listen for `NSWindow` events. This is necessary for using `NSWindowDelegate` and `NSAppPresentationOptions`.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README_zh.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  \n  // 默认情况下，enableWindowDelegate 设置为 false，以确保与其他插件兼容。如果您希望使用 NSWindowDelegate，请将其设置为 true。\n  await WindowManipulator.initialize(enableWindowDelegate: true);\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Full Size Content View in Dart\nDESCRIPTION: This code snippet demonstrates how to enable the full-size content view for a Flutter window on macOS, which allows the Flutter content to be drawn behind the title bar. It requires the `macos_window_utils` package. `WindowManipulator.makeTitlebarTransparent()` must be called before or after `WindowManipulator.enableFullSizeContentView()`.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README_zh.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nWindowManipulator.makeTitlebarTransparent();\nWindowManipulator.enableFullSizeContentView();\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` from the core and app wrapper sources. Applies standard settings, links to the Flutter interface library, adds include directories, and defines a dependency on the flutter assemble target.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Sidebar with TransparentMacOSSidebar in Dart\nDESCRIPTION: This code demonstrates how to wrap a sidebar widget with the `TransparentMacOSSidebar` widget to achieve a transparent sidebar effect that blends with the desktop wallpaper on macOS. It is typically used in conjunction with setting the window's material to `NSVisualEffectViewMaterial.windowBackground`. It depends on the `macos_window_utils` package.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README_zh.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nTransparentMacOSSidebar(\n  child: YourSidebarWidget(),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the Flutter library is assembled before any other targets that depend on it. It's a dependency for the 'flutter' interface library.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Set Executable Output Directory\nDESCRIPTION: This snippet sets the output directory for the executable to a subdirectory to prevent users from running the unbundled copy. This is important for ensuring that resources are in the correct relative locations.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding toggleFullScreen() to WindowManipulator (Dart)\nDESCRIPTION: This code snippet demonstrates how to add a `toggleFullScreen()` method to the `WindowManipulator` class in Dart. It uses a platform channel to invoke the method in the Swift backend. The method's documentation includes a usage example.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n/// Takes the window into or out of fullscreen mode.\n///\n/// Usage example:\n/// ```dart\n/// WindowManipulator.toggleFullScreen();\n/// ```\nstatic Future<void> toggleFullScreen() async {\n  await _completer.future;\n  await _methodChannel.invokeMethod('toggleFullScreen');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the path to the Flutter library (libflutter_linux_gtk.so). This path is stored in the `FLUTTER_LIBRARY` variable and made available in the parent scope. The path is relative to the `EPHEMERAL_DIR`.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configure Cross-Building Settings\nDESCRIPTION: This snippet configures the CMake build environment for cross-building, setting the SYSROOT and search paths for finding libraries and includes. This is conditional based on the FLUTTER_TARGET_PLATFORM_SYSROOT variable.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the path to the Flutter Windows library (flutter_windows.dll). It also sets paths for ICU data file and AOT library and exposes these variables to the parent scope for install step.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Add Executable Target\nDESCRIPTION: This snippet adds an executable target named `${BINARY_NAME}` for a WIN32 application.  It lists the source files to be compiled and linked into the executable.  The `BINARY_NAME` is defined in the top-level CMakeLists.txt file.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the location of generated configuration files. This directory is used to store temporary files and configuration data generated during the build process. It's set relative to the current source directory.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Implementing NSWindowDelegate\nDESCRIPTION: This Dart code demonstrates how to extend the NSWindowDelegate class and override its methods to respond to NSWindow events. In this example, it prints a message when the window enters fullscreen mode. Requires the macos_window_utils package.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyDelegate extends NSWindowDelegate {\n  @override\n  void windowDidEnterFullScreen() {\n    print('The window has entered fullscreen mode.');\n    \n    super.windowDidEnterFullScreen();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding toggleFullScreen() Command to Example Project (Dart)\nDESCRIPTION: This Dart code snippet demonstrates how to add a `toggleFullScreen()` command to the example project's command list. It defines a `Command` object with a name, description, and a function that calls `WindowManipulator.toggleFullScreen()`.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nCommand(\n  name: 'toggleFullScreen()',\n  description: 'Takes the window into or out of fullscreen mode.',\n  function: () => WindowManipulator.toggleFullScreen(),\n),\n```\n\n----------------------------------------\n\nTITLE: Install Assets Directory\nDESCRIPTION: This snippet installs the assets directory, fully re-copying it on each build to avoid stale files.  It removes the existing directory before copying.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\"\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Assemble Target\nDESCRIPTION: Creates a custom target named `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources. This target ensures that these files are generated before other build steps.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries and Include Directories\nDESCRIPTION: This snippet links the Flutter libraries (`flutter` and `flutter_wrapper_app`) to the target executable and adds the project's source directory to the include paths. These dependencies are necessary for the Flutter application to run correctly.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file is expected to be created by the Flutter tool and contains build settings and configurations specific to the Flutter project.  The `include` command processes the CMake code within `generated_config.cmake`.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Removing NSWindowDelegate in Dart\nDESCRIPTION: This code demonstrates how to remove a previously added `NSWindowDelegate` using the `NSWindowDelegateHandle` returned when the delegate was added. It ensures that the delegate stops receiving window events.  It depends on the `macos_window_utils` package.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README_zh.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nhandle.removeFromHandler();\n```\n\n----------------------------------------\n\nTITLE: Enabling Full-Size Content View in Dart\nDESCRIPTION: This Dart code snippet enables the full-size content view for the macOS window, allowing Flutter to draw onto the title bar. It uses WindowManipulator methods to make the titlebar transparent and enable the full-size content view.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nWindowManipulator.makeTitlebarTransparent();\nWindowManipulator.enableFullSizeContentView();\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (App)\nDESCRIPTION: Creates a list of C++ wrapper source files for the application and prepends the wrapper root directory to each entry. These files provide Flutter engine and view controller implementations.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the ephemeral directory to each entry. These headers are necessary for interacting with the Flutter engine.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Initializing WindowManipulator with Delegate\nDESCRIPTION: This Dart code initializes the WindowManipulator plugin with the NSWindowDelegate enabled. This allows listening to NSWindow events. Depends on the Flutter framework and the macos_window_utils package.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  \n  // By default, enableWindowDelegate is set to false to ensure compatibility\n  // with other plugins. Set it to true if you wish to use NSWindowDelegate.\n  await WindowManipulator.initialize(enableWindowDelegate: true);\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (Core)\nDESCRIPTION: Creates a list of core C++ wrapper source files and prepends the wrapper root directory to each entry. These core implementations are essential for basic functionality.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Implementing toggleFullScreen in MainFlutterWindowManipulator (Swift)\nDESCRIPTION: This Swift code snippet implements the `toggleFullScreen` method in the `MainFlutterWindowManipulator` class.  It checks if the main window is initialized and then calls the `toggleFullScreen` method on the `NSWindow` instance.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\npublic static func toggleFullScreen() {\n    if (self.mainFlutterWindow == nil) {\n        start(mainFlutterWindow: nil)\n    }\n\n    self.mainFlutterWindow!.toggleFullScreen(nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping App in TitlebarSafeArea Widget\nDESCRIPTION: This Dart code snippet wraps the application in a TitlebarSafeArea widget.  This ensures the application content is not covered by the window's title bar when the full-size content view is enabled.  It relies on the macos_window_utils package.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nTitlebarSafeArea(\n  child: YourApp(),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling toggleFullScreen in MacOSWindowUtilsPlugin (Swift)\nDESCRIPTION: This Swift code snippet shows how to handle the `toggleFullScreen` method call on the platform channel within the `MacOSWindowUtilsPlugin`. It calls the `toggleFullScreen` method of the `MainFlutterWindowManipulator` class and returns a result.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\ncase \"toggleFullScreen\":\n    MainFlutterWindowManipulator.toggleFullScreen()\n    result(true)\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Settings and Link Libraries\nDESCRIPTION: This snippet applies the standard build settings to the executable target and links the necessary libraries, including the Flutter library and GTK.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Create Executable Target\nDESCRIPTION: This snippet creates the executable target for the application, specifying the source files to be compiled. It uses the BINARY_NAME variable for the executable name.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting macOS Deployment Target in Podfile\nDESCRIPTION: This configuration sets the minimum macOS deployment version in the Podfile. It specifies the lowest macOS version that the application supports. Setting it to '10.14.6' ensures compatibility with macOS Mojave and later.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README_zh.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nplatform :osx, '10.14.6'\n```\n\n----------------------------------------\n\nTITLE: Initializing WindowManipulator\nDESCRIPTION: This Dart code initializes the WindowManipulator plugin.  It ensures the Flutter binding is initialized and then calls WindowManipulator.initialize(). This is necessary to use the package's features. Depends on the Flutter framework and the macos_window_utils package.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await WindowManipulator.initialize();\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (Plugin)\nDESCRIPTION: Creates a list of C++ wrapper source files for plugin registration and prepends the wrapper root directory to each entry. These files handle the registration of Flutter plugins.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Define Build Configuration Options\nDESCRIPTION: This snippet defines the build configuration type (Debug, Profile, Release) if it's not already set, providing options for different Flutter build modes.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install AOT Library (Non-Debug Builds)\nDESCRIPTION: This snippet installs the AOT library on non-Debug builds only, ensuring that the AOT-compiled code is included in release builds.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting macOS Deployment Target\nDESCRIPTION: This code snippet sets the macOS Deployment Target in the project's Podfile to '10.14.6' or above. This ensures that the application is compatible with macOS versions that support the required features.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :osx, '10.14.6'\n```\n\n----------------------------------------\n\nTITLE: Using TransparentMacOSSidebar Widget\nDESCRIPTION: This Dart code snippet wraps a sidebar widget with the TransparentMacOSSidebar widget.  This integrates the sidebar with macOS's wallpaper tinting feature by using an NSVisualEffectView.  Requires the macos_window_utils package for its TransparentMacOSSidebar widget.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nTransparentMacOSSidebar(\n  child: YourSidebarWidget(),\n)\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Assemble Dependency\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target, ensuring that the Flutter assets are assembled before the executable is built. This guarantees that the Flutter application is properly prepared for execution.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project.  This ensures that the CMake version used is compatible with the commands and features used in the script. The minimum version is set to 3.10.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Disable Windows Macros\nDESCRIPTION: This snippet disables the `NOMINMAX` macro to prevent conflicts between Windows macros and C++ standard library functions. It ensures correct compilation by preventing macro collisions.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Adding NSWindowDelegate Instance\nDESCRIPTION: This Dart code adds an instance of a custom NSWindowDelegate to the WindowManipulator. It retrieves a handle that can be used to remove the delegate later. Requires the macos_window_utils package.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n final delegate = _MyDelegate();\n final handle = WindowManipulator.addNSWindowDelegate(delegate);\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Assembly Dependency\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter tool portions of the build are executed before the executable is built.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding macos_window_utils Package Dependency\nDESCRIPTION: Adds the macos_window_utils package as a dependency to your Flutter project using the flutter pub add command. This command fetches the package from pub.dev and adds it to your project's pubspec.yaml file.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add macos_window_utils\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Build Settings\nDESCRIPTION: This snippet applies a predefined set of standard build settings to the target executable. It's assumed that `apply_standard_settings` is a custom CMake function defined elsewhere.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing the macos_window_utils Package\nDESCRIPTION: This command is used to add the `macos_window_utils` package to a Flutter project. It fetches the package from the pub repository and adds it as a dependency in the project's `pubspec.yaml` file.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README_zh.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter pub add macos_window_utils\n```\n\n----------------------------------------\n\nTITLE: Find System Dependencies\nDESCRIPTION: This snippet uses PkgConfig to find the GTK library, marking it as a required dependency. It creates an imported target for GTK.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`.  Sets include directories and link libraries for the interface library.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the wrapper root directory, which contains the C++ client wrapper code. This wrapper provides an interface between Flutter and native Windows code.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the ephemeral directory variable, which points to the directory containing generated configuration and files. This directory is used to store intermediate build artifacts.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Include Generated Plugins\nDESCRIPTION: This snippet includes the generated_plugins.cmake file, which manages building plugins and adding them to the application.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the build, which contains build rules managed by Flutter.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Initialize CMake Project\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project name, specifying CXX as the primary language.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the build. This ensures that the CMake version used is compatible with the build configuration.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file contains configuration settings provided by the Flutter tool.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Add Application ID Definition\nDESCRIPTION: This snippet adds a preprocessor definition for the application ID, using the APPLICATION_ID variable set earlier.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Removing NSWindowDelegate\nDESCRIPTION: This Dart code removes a previously added NSWindowDelegate using its handle. Requires the macos_window_utils package.\nSOURCE: https://github.com/macosui/macos_window_utils.dart/blob/master/README.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nhandle.removeFromHandler();\n```"
  }
]