[
  {
    "owner": "earthly",
    "repo": "earthly",
    "content": "TITLE: Basic Earthfile Structure in Dockerfile Syntax\nDESCRIPTION: Shows the fundamental structure of an Earthfile, which includes base recipes, target declarations, and command definitions. This structure forms the foundation of Earthly build files.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n<base-recipe>\n...\n\n<target-name>:\n    <recipe>\n    ...\n\n<target-name>:\n    <recipe>\n    ...\n\n<command-name>:\n    <recipe>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Proper Artifact References Between Earthly Targets\nDESCRIPTION: Shows the correct pattern for passing artifacts between Earthly targets using artifact references. This approach properly expresses dependencies between targets and ensures they run in the correct order.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_21\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Good\nall:\n    BUILD +build\ndep:\n    ...\n    SAVE ARTIFACT my-artifact.jar\nbuild:\n    ...\n    COPY +dep/my-artifact.jar ./\n    ...\n```\n\n----------------------------------------\n\nTITLE: Dockerfile vs Earthfile Conversion Example\nDESCRIPTION: Demonstrates how to convert a multi-stage Dockerfile to an Earthfile format. Shows the differences in approach between Dockerfile's AS syntax and Earthly's target-based architecture.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Dockerfile\n\nFROM alpine:3.18 AS build\n# ... instructions for build\n\nFROM build as another\n# ... further instructions inheriting build\n\nFROM busybox as yet-another\nCOPY --from=build ./a-file ./\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Earthfile\n\nbuild:\n    FROM alpine:3.18\n    # ... instructions for build\n    SAVE ARTIFACT ./a-file\n\nanother:\n    FROM +build\n    # ... further instructions inheriting build\n\nyet-another:\n    FROM busybox\n    COPY +build/a-file ./\n```\n\n----------------------------------------\n\nTITLE: Properly Copying External Files Using Artifact References in Earthly\nDESCRIPTION: This snippet demonstrates the correct way to copy a file from another directory by referencing an exported artifact from a target in that directory's Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_45\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# ./dir2/Earthfile\n# Good\nCOPY ../dir1+file/some-file.txt ./\n```\n\n----------------------------------------\n\nTITLE: Multi-Stage Build for Optimal Production Images\nDESCRIPTION: The recommended approach using separate images for build and production, where only the necessary artifacts are copied to a minimal production image, resulting in smaller image sizes.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_39\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Good\nFROM go:1.16\nRUN apk add ... # development dependencies\nbuild:\n    COPY ...\n    RUN go mod download\n    COPY ...\n    RUN go build ... -o ./build/app\n    SAVE ARTIFACT ./build/app\nimage:\n    FROM alpine:3.18 # start afresh\n    RUN apk add ... # production dependencies only\n    COPY +build/app /usr/bin/app\n    ENTRYPOINT [\"/usr/bin/app\"]\n    SAVE IMAGE my-production-image:latest\n```\n\n----------------------------------------\n\nTITLE: Using WITH DOCKER for Integration Tests in Earthly\nDESCRIPTION: Example showing how to use Earthly's WITH DOCKER command with docker-compose for integration testing. This pattern demonstrates running tests in a Docker-in-Docker environment.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_53\n\nLANGUAGE: Dockerfile\nCODE:\n```\nintegration-test:\n    FROM earthly/dind:alpine-3.19-docker-25.0.5-r0\n    COPY docker-compose.yml ./\n    WITH DOCKER --compose docker-compose.yml\n        RUN ...\n    END\n```\n\n----------------------------------------\n\nTITLE: Using Cache Mounts with RUN in Earthly\nDESCRIPTION: Demonstrates how to use the --mount option with type=cache to persist cache data between builds. This example sets up a Go build cache that persists even when dependencies change, improving build speeds.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nENV GOCACHE=/go-cache\nRUN --mount=type=cache,target=/go-cache go build main.go\n```\n\n----------------------------------------\n\nTITLE: Java Project Earthfile Configuration\nDESCRIPTION: This Earthfile configures the build process for a Java project using Gradle. It defines targets for dependencies, building, creating a Docker image, and running the application with PostgreSQL using Docker Compose.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_13\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM openjdk:8-jdk-alpine\nRUN apk add --update --no-cache gradle\nWORKDIR /java-example\n\ndeps:\n    COPY build.gradle ./\n    RUN gradle build\n\nbuild:\n    FROM +deps\n    COPY src src\n    RUN gradle build\n    RUN gradle install\n    SAVE ARTIFACT build/install/java-example/bin AS LOCAL build/bin\n    SAVE ARTIFACT build/install/java-example/lib AS LOCAL build/lib\n\ndocker:\n    COPY +build/bin bin\n    COPY +build/lib lib\n    ARG tag='latest'\n    ENTRYPOINT [\"/java-example/bin/java-example\"]\n    SAVE IMAGE java-example:$tag\n\nwith-postgresql:\n    FROM earthly/dind:alpine-3.19-docker-25.0.5-r0\n    COPY ./docker-compose.yml .\n    RUN apk update\n    RUN apk add postgresql-client\n    WITH DOCKER --compose docker-compose.yml --load app:latest=+docker\n        RUN while ! pg_isready --host=localhost --port=5432; do sleep 1; done ;\\\n            docker run --network=default_java/part6_default app\n    END\n```\n\n----------------------------------------\n\nTITLE: Accessing Secrets in RUN Commands Using Environment Variables in Earthfiles\nDESCRIPTION: Demonstrates how to access a secret stored under 'passwd' and expose it as an environment variable 'mypassword' in a RUN command. Secrets allow sensitive data to be used during builds without storing them in the Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:latest\nhush:\n    RUN --secret mypassword=passwd echo \"my password is $mypassword\"\n```\n\n----------------------------------------\n\nTITLE: Using Earthly Target Form Command\nDESCRIPTION: Basic syntax for executing an Earthly build using the target form. This form builds a specified target and its dependencies.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options...] <target-ref> [build-args...]\n```\n\n----------------------------------------\n\nTITLE: Basic Earthfile Structure for Go Project\nDESCRIPTION: Demonstrates the basic structure of an Earthfile for a Go project, including version specification, base image selection, and working directory setup.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM golang:1.15-alpine3.13\nWORKDIR /go-workdir\n\nbuild:\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example AS LOCAL local-output/go-example\n\ndocker:\n    COPY +build/example .\n    ENTRYPOINT [\"/go-workdir/example\"]\n    SAVE IMAGE go-example:latest\n```\n\n----------------------------------------\n\nTITLE: Efficient Directory Copying Using COPY --dir\nDESCRIPTION: The recommended approach to copy multiple directories in a single command using the Earthly-specific --dir flag, which maintains directory structure and reduces cache layers.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_37\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Good\nCOPY --dir dir-1 dir-2 dir-3 ./\n```\n\n----------------------------------------\n\nTITLE: Building and Copying with Platform Specification in Earthly\nDESCRIPTION: Demonstrates how to build a target with platform specification and build arguments, then copy files from it in Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_32\n\nLANGUAGE: Dockerfile\nCODE:\n```\nmy-target:\n    BUILD --platform=linux/amd64 +some-target --FOO=bar\n    COPY --platform=linux/amd64 (+some-target/some-file.txt --FOO=bar) ./\n```\n\n----------------------------------------\n\nTITLE: Go Integration Test\nDESCRIPTION: Integration test for Go application testing Redis connectivity and data persistence.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/go-redis/redis/v8\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestIntegration(t *testing.T) {\n\tctx := context.Background()\n\trdb := redis.NewClient(&redis.Options{\n\t\tAddr:     \"redis:6379\",\n\t\tPassword: \"\", // no password set\n\t\tDB:       0,  // use default DB\n\t})\n\n\terr := rdb.Set(ctx, \"howCoolIsEarthly\", howCoolIsEarthly, 0).Err()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresultFromDB, err := rdb.Get(ctx, \"howCoolIsEarthly\").Result()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trequire.Equal(t, howCoolIsEarthly, resultFromDB)\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Earthfile Setup for Go Project\nDESCRIPTION: Demonstrates the initial setup of an Earthfile for a Go project, including version, base image, and working directory.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM golang:1.15-alpine3.13\nWORKDIR /go-workdir\n```\n\n----------------------------------------\n\nTITLE: Defining a Function in Earthly\nDESCRIPTION: Example of defining a reusable function called MY_COPY that can copy files with optional recursive flag. Functions must start with the FUNCTION keyword and use ALL_UPPERCASE_SNAKE_CASE naming.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/functions.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nMY_COPY:\n    FUNCTION\n    ARG src\n    ARG dest=./\n    ARG recursive=false\n    RUN cp $(if $recursive =  \"true\"; then printf -- -r; fi) \"$src\" \"$dest\"\n```\n\n----------------------------------------\n\nTITLE: Proper Image Loading with WITH DOCKER --load\nDESCRIPTION: Demonstrates the recommended pattern for passing Docker images between Earthly targets using WITH DOCKER --load. This properly expresses dependencies and loads the image into the Docker daemon for use in tests.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_24\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Good\nall:\n    BUILD +test\ndep-img:\n    ...\n    SAVE IMAGE my-co/my-image:latest\ntest:\n    WITH DOCKER --load=+dep-img\n        RUN docker run my-co/my-image:latest\n    END\n```\n\n----------------------------------------\n\nTITLE: Improved Layer Caching Example in Earthly\nDESCRIPTION: Better caching approach that specifically copies only required files, reducing unnecessary cache invalidation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/caching/caching-in-earthfiles.md#2025-04-21_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Better\nCOPY go.mod go.sum ./*.go ./\nRUN go mod download\nRUN go build ...\n```\n\n----------------------------------------\n\nTITLE: Basic Earthfile Configuration\nDESCRIPTION: Main Earthfile configuration demonstrating basic build, lint and Docker targets for a Go application\nSOURCE: https://github.com/earthly/earthly/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: earthly\nCODE:\n```\nVERSION 0.8\nFROM golang:1.15-alpine3.13\nRUN apk --update --no-cache add git\nWORKDIR /go-example\n\nall:\n  BUILD +lint\n  BUILD +docker\n\nbuild:\n  COPY main.go .\n  RUN go build -o build/go-example main.go\n  SAVE ARTIFACT build/go-example AS LOCAL build/go-example\n\nlint:\n  RUN go get golang.org/x/lint/golint\n  COPY main.go .\n  RUN golint -set_exit_status ./...\n\ndocker:\n  COPY +build/go-example .\n  ENTRYPOINT [\"/go-example/go-example\"]\n  SAVE IMAGE go-example:latest\n```\n\n----------------------------------------\n\nTITLE: Using SSH Authentication with RUN in Earthly\nDESCRIPTION: Shows how to use the --ssh flag with RUN to access the host's SSH authentication client for tasks like secure Git operations. The example configures SSH known hosts and sets up Git to use SSH instead of HTTPS for GitHub repositories.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN mkdir -p ~/.ssh && \\\n    echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=' >> ~/.ssh/known_hosts && \\\n    echo 'gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9' >> ~/.ssh/known_hosts\nRUN --ssh git config --global url.\"git@github.com:\".insteadOf \"https://github.com/\" && \\\n    go mod download\n```\n\n----------------------------------------\n\nTITLE: Specifying VERSION Command Syntax in Earthfiles\nDESCRIPTION: The VERSION command is used in Earthfiles to specify which version of Earthly the file depends on. This command was introduced in version 0.5 and became required as of version 0.7. It allows for optional flags followed by the version number.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/features.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION [<flags>...] <version-number>\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-platform Docker Images with Separate Targets\nDESCRIPTION: Earthfile example showing how to create a multi-platform Docker image by building separate targets for different architectures and merging them during export.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nbuild-all-platforms:\n    BUILD +build-amd64\n    BUILD +build-arm-v7\n\nbuild-amd64:\n    FROM --platform=linux/amd64 alpine:3.18\n    ...\n    SAVE IMAGE --push org/myimage:latest\n\nbuild-arm-v7:\n    FROM --platform=linux/arm/v7 alpine:3.18\n    ...\n    SAVE IMAGE --push org/myimage:latest\n```\n\n----------------------------------------\n\nTITLE: Recommended GIT CLONE Usage in Earthly\nDESCRIPTION: This snippet shows the recommended way to use GIT CLONE in Earthly, which provides better caching and hash awareness compared to RUN git clone.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nGIT CLONE git@github.com/my-co/my-proj my-proj\nWORKDIR my-proj\nRUN ls\n```\n\n----------------------------------------\n\nTITLE: Build Target for Go Application in Earthfile\nDESCRIPTION: Defines a build target in the Earthfile that compiles a Go application and saves the output as an artifact.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example\n```\n\n----------------------------------------\n\nTITLE: Basic Earthfile with Artifact Saving\nDESCRIPTION: Earthfile example showing how to copy artifacts between targets without saving locally. The build target creates an executable and the docker target uses it to create a Docker image.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example\n\ndocker:\n    #  COPY command copies files from the +build target\n    COPY +build/example .\n    ENTRYPOINT [\"/go-workdir/example\"]\n    SAVE IMAGE go-example:latest\n```\n\n----------------------------------------\n\nTITLE: Conditional Base Image Selection in Earthly\nDESCRIPTION: Demonstrates how to choose different base images based on platform architecture using Earthly's IF statement. This pattern allows selecting different images for different platforms, such as using the official golang image for ARM64 and a company-specific image for other architectures.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_11\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM alpine:3.18\nARG TARGETPLATFORM\nIF [ \"$TARGETPLATFORM\" = \"linux/arm64\" ]\n    FROM golang:1.16\nELSE\n    FROM my-company/golang:1.16\nEND\n```\n\n----------------------------------------\n\nTITLE: Proper Deployment Using RUN --push in Earthly\nDESCRIPTION: Demonstrates the correct approach for pushing build artifacts to external services using RUN --push. This ensures the command only executes in push mode, is never cached, and runs after all other build steps have completed successfully.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_13\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Good\nRUN --push --secret GITHUB_TOKEN github-release upload ...\n```\n\n----------------------------------------\n\nTITLE: Installing Earthly directly in Linux CI environment\nDESCRIPTION: Shell commands to download a specific version of Earthly for Linux, make it executable, and bootstrap the installation. This method is recommended for dedicated computers or auto-provisioned build environments.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://github.com/earthly/earthly/releases/download/v0.8.13/earthly-linux-amd64 -O /usr/local/bin/earthly && \\\nchmod +x /usr/local/bin/earthly && \\\n/usr/local/bin/earthly bootstrap\n```\n\n----------------------------------------\n\nTITLE: Creating an End-to-End Test Script in Bash\nDESCRIPTION: A bash script that runs the application in a Docker container and verifies the output matches the expected result using assert_eq. It demonstrates a simple smoke test approach for a containerized application.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/integration.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsource \"./assert.sh\"\nset -v\nresults=$(docker run --network=host earthly/examples:integration)\nexpected=\"The first 5 countries alphabetically are: Afghanistan, Albania, Algeria, American Samoa, Andorra\"\n\nassert_eq \"$expected\" \"$results\"n\n```\n\n----------------------------------------\n\nTITLE: Python Earthfile with Build and Docker Targets (Dockerfile)\nDESCRIPTION: An Earthfile for a Python project demonstrating build and docker targets, including referencing a subdirectory target and handling dependencies.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-5-importing.md#2025-04-21_snippet_11\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM python:3\nWORKDIR /code\n\nbuild:\n    FROM ./services/service-one+deps\n    COPY src src\n    SAVE ARTIFACT src /src\n\ndocker:\n    COPY +deps/wheels wheels\n    COPY +build/src src\n    COPY requirements.txt ./\n    ARG tag='latest'\n    RUN pip install --no-index --find-links=wheels -r requirements.txt\n    ENTRYPOINT [\"python3\", \"./src/hello.py\"]\n    SAVE IMAGE python-example:$tag\n```\n\n----------------------------------------\n\nTITLE: JavaScript Earthfile Example\nDESCRIPTION: Complete Earthfile example for a JavaScript project, demonstrating various Earthly commands and ARG usage.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-4-args.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM node:13.10.1-alpine3.11\nWORKDIR /js-example\n\ndeps:\n    COPY package.json ./\n    COPY package-lock.json ./\n    RUN npm install\n    # Output these back in case npm install changes them.\n    SAVE ARTIFACT package.json AS LOCAL ./package.json\n    SAVE ARTIFACT package-lock.json AS LOCAL ./package-lock.json\n\nbuild:\n    FROM +deps\n    COPY src src\n    RUN mkdir -p ./dist && cp ./src/index.html ./dist/\n    RUN npx webpack\n    SAVE ARTIFACT dist /dist AS LOCAL dist\n\ndocker:\n    FROM +deps\n    ARG tag='latest'\n    COPY +build/dist ./dist\n    EXPOSE 8080\n    ENTRYPOINT [\"/js-example/node_modules/http-server/bin/http-server\", \"./dist\"]\n    SAVE IMAGE js-example:$tag\n```\n\n----------------------------------------\n\nTITLE: RUN Command with Secrets Example\nDESCRIPTION: Demonstrates how to use secrets in RUN commands with both explicit env var naming and shorthand syntax. Shows how secrets can be passed from the command line to secure operations like GitHub releases.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nrelease:\n    RUN --push --secret GITHUB_TOKEN=GH_TOKEN github-release upload\nrelease-short:\n    RUN --push --secret GITHUB_TOKEN github-release upload\n```\n\n----------------------------------------\n\nTITLE: Using Earthly Artifact Form Command\nDESCRIPTION: Syntax for executing an Earthly build to output a specific artifact. This builds the referenced artifact and its dependencies, but only outputs the specified artifact.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options...] --artifact|-a <target-ref>/<artifact-path> [<dest-path>] [build-args...]\n```\n\n----------------------------------------\n\nTITLE: Basic Earthly Configuration Structure in YAML\nDESCRIPTION: Demonstrates the basic structure of the Earthly configuration file in YAML format, showing how to organize global and git-specific settings.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  cache_size_mb: <cache_size_mb>\ngit:\n    global:\n        url_instead_of: <url_instead_of>\n    <site>:\n        auth: https|ssh\n        user: <username>\n        password: <password>\n    <site2>:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Using Dockerfile and Build Context from Separate Artifact References\nDESCRIPTION: Demonstrates how to split a Dockerfile and build context across separate artifact references. The example creates a build context with data, a separate Dockerfile, and then combines them using the FROM DOCKERFILE command.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_36\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM alpine\n\nmybuildcontext:\n    WORKDIR /mydata\n    RUN echo mydata > myfile\n    SAVE ARTIFACT /mydata\n\nmydockerfile:\n    RUN echo \"\nFROM busybox\nCOPY myfile .\nRUN cat myfile\" > Dockerfile\n    SAVE ARTIFACT Dockerfile\n\ndocker:\n    FROM DOCKERFILE -f +mydockerfile/Dockerfile +mybuildcontext/mydata/*\n    SAVE IMAGE testimg:latest\n```\n\n----------------------------------------\n\nTITLE: Using required ARGs in Earthfile\nDESCRIPTION: Example of using a required ARG in an Earthfile target and providing it in a BUILD command.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_23\n\nLANGUAGE: Dockerfile\nCODE:\n```\ntarget-required:\n    # user must supply build arg for target\n    ARG --required NAME\n\nbuild-linux:\n    # or explicitly supply in build command\n    BUILD +target-required --NAME=john\n```\n\n----------------------------------------\n\nTITLE: Defining a Smoke Test in Earthly Configuration\nDESCRIPTION: An Earthly target configuration that sets up a test environment with Docker Compose, waiting for PostgreSQL to be ready before running the smoke test. It demonstrates how to orchestrate dependencies for integration testing.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/integration.md#2025-04-21_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nsmoke-test:\n    FROM +project-files\n    COPY docker-compose.yml ./ \n    COPY src/smoketest ./ \n    WITH DOCKER --compose docker-compose.yml --load=+docker\n        RUN while ! pg_isready --host=localhost --port=5432 --dbname=iso3166 --username=postgres; do sleep 1; done ;\\\n            ./smoketest.sh\n    END\n```\n\n----------------------------------------\n\nTITLE: Improved Docker-in-Docker Setup Using Earthly Functions\nDESCRIPTION: This snippet shows an improved approach to Docker-in-Docker by installing Docker engine before copying files that might change frequently, improving caching efficiency.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_52\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Better\nintegration-test:\n    FROM some-other-image:latest\n    DO github.com/earthly/lib+INSTALL_DIND\n    COPY docker-compose.yml ./\n    WITH DOCKER --compose docker-compose.yml\n        RUN ...\n    END\n```\n\n----------------------------------------\n\nTITLE: Combining All Test Targets in Earthly\nDESCRIPTION: An Earthly target that combines unit tests, integration tests, and smoke tests into a single command, creating a comprehensive testing pipeline that can be run with one command.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/integration.md#2025-04-21_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nall:\n  BUILD +build\n  BUILD +unit-test\n  BUILD +integration-test\n  BUILD +smoke-test\n```\n\n----------------------------------------\n\nTITLE: Saving Artifacts from WITH DOCKER Operations in Earthly\nDESCRIPTION: Pattern for exporting artifacts generated within a WITH DOCKER block. This technique demonstrates how to capture screenshots, logs, and Docker state information from containers for later use in the build.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_54\n\nLANGUAGE: Dockerfile\nCODE:\n```\nWITH DOCKER ...\n    RUN docker run -v ./screenshots:/screenshots ... && \\\n        docker logs ... >./full-logs.txt && \\\n        docker inspect ... >./some-docker-state.json\nEND\nSAVE ARTIFACT ./screenshots\nSAVE ARTIFACT ./full-logs.txt\nSAVE ARTIFACT ./some-docker-state.json\n```\n\n----------------------------------------\n\nTITLE: Docker Target for Go Application in Earthfile\nDESCRIPTION: Creates a Docker target in the Earthfile that builds a Docker image from the compiled Go application.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\ndocker:\n    COPY +build/example .\n    ENTRYPOINT [\"/go-workdir/example\"]\n    SAVE IMAGE go-example:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Earthly\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to run Earthly. It includes steps for installing Earthly, logging into DockerHub, and executing the Earthly build process.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-8a-using-earthly-in-your-current-ci.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/workflows/ci.yml\n\nname: CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n      EARTHLY_TOKEN: ${{ secrets.EARTHLY_TOKEN }}\n      FORCE_COLOR: 1\n    steps:\n    - uses: earthly/actions/setup-earthly@v1\n      with:\n        version: v0.8.13\n    - uses: actions/checkout@v2\n    - name: Docker Login\n      run: docker login --username \"$DOCKERHUB_USERNAME\" --password \"$DOCKERHUB_TOKEN\"\n    - name: Run build\n      run: earthly --org <org-name> --sat <satellite-name> --ci --push +build\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI/CD with Earthly for Building\nDESCRIPTION: This YAML configuration sets up a GitLab CI/CD pipeline to build an Earthly target. It uses Docker-in-Docker, sets necessary environment variables, and defines a build stage that runs the Earthly command.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/gitlab-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .gitlab-ci.yml\n\nservices:\n  - docker:dind\n\nvariables:\n  DOCKER_HOST: tcp://docker:2375\n  FORCE_COLOR: 1\n  EARTHLY_EXEC_CMD: \"/bin/sh\"\n\nimage: earthly/earthly:v0.8.13\n\nbefore_script:\n    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n\nearthly:\n  stage: build\n  script:\n    - earthly --ci --push -P +build\n```\n\n----------------------------------------\n\nTITLE: Setting up and selecting Earthly Satellites\nDESCRIPTION: Commands for launching and selecting an Earthly Satellite. This snippet shows how to create, select, and unselect a satellite for remote builds.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-7-using-remote-runners.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly org select <my-org>\nearthly sat launch my-satellite\n```\n\n----------------------------------------\n\nTITLE: Simplified Multi-platform Build with Single Target\nDESCRIPTION: Streamlined Earthfile example that uses a single build target with multiple platform specifications to create a multi-platform Docker image.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nbuild-all-platforms:\n    BUILD --platform=linux/amd64 --platform=linux/arm/v7 +build\n\nbuild:\n    FROM alpine:3.18\n    ...\n    SAVE IMAGE --push org/myimage:latest\n```\n\n----------------------------------------\n\nTITLE: Earthfile for Go Project with Dependency Reuse (Dockerfile)\nDESCRIPTION: An Earthfile that separates dependency downloading into a reusable target for improved caching in a Go project.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-3-adding-dependencies-with-caching.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM golang:1.15-alpine3.13\nWORKDIR /go-workdir\n\ndeps:\n    COPY go.mod go.sum ./\n    RUN go mod download\n    SAVE ARTIFACT go.mod AS LOCAL go.mod\n    SAVE ARTIFACT go.sum AS LOCAL go.sum\n\nbuild:\n    FROM +deps\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example AS LOCAL local-output/go-example\n\ndocker:\n    COPY +build/example .\n    ENTRYPOINT [\"/go-workdir/example\"]\n    SAVE IMAGE go-example:latest\n```\n\n----------------------------------------\n\nTITLE: Running App and API with Docker-in-Docker in Earthly\nDESCRIPTION: This snippet demonstrates how to run an app and API side-by-side using Docker-in-Docker within an Earthly build configuration. It uses the earthly/dind image, loads Docker images, and performs curl tests to verify the services are running correctly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_12\n\nLANGUAGE: Dockerfile\nCODE:\n```\napp-with-api:\n    FROM earthly/dind:alpine-3.19-docker-25.0.5-r0\n    RUN apk add curl\n    WITH DOCKER \\\n        --load app:latest=+app-docker \\\n        --load api:latest=+api-docker\n        RUN docker run -d -p 3080:3080 api && \\\n            docker run -d -p 8080:8080 app  && \\\n            sleep 5 && \\\n            curl 0.0.0.0:8080 | grep 'Getting Started' && \\\n            curl 0.0.0.0:3080/api/users | grep 'Earth'\n    END\n```\n\n----------------------------------------\n\nTITLE: Alternative to Dockerfile COPY --from Using Earthly\nDESCRIPTION: Example showing how to achieve the equivalent of Dockerfile's COPY --from by using a combination of SAVE ARTIFACT and COPY commands in Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_16\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Dockerfile\nCOPY --from=some-image /path/to/some-file.txt ./\n```\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Earthfile\nintermediate:\n    FROM some-image\n    SAVE ARTIFACT /path/to/some-file.txt\n\nfinal-target:\n    COPY +intermediate/some-file.txt ./\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Pass-Through in Earthly with FROM and SAVE IMAGE\nDESCRIPTION: This snippet demonstrates how to properly implement image pass-through by using FROM to reference the base target and then re-saving the image with a new name, enabling its direct use in WITH DOCKER statements.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_50\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# With pass-through image\nVERSION 0.8\nFROM alpine:3.18\nbuild:\n    ARG some_arg=...\n    ARG another_arg=...\n    RUN ...\n    SAVE IMAGE some-intermediate-image:latest\nbuild-wrapper:\n    FROM +build --some_arg=... --another_arg=...\n    SAVE IMAGE i-can-give-this-another-name:latest\n```\n\n----------------------------------------\n\nTITLE: Efficient Docker Image Pulling with --pull\nDESCRIPTION: Demonstrates the recommended pattern for using external Docker images within WITH DOCKER blocks using the --pull flag. This approach caches the image as part of Earthly's build system for faster builds.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_26\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Good\nWITH DOCKER --pull hello-world\n   RUN docker run hello-world\nEND\n```\n\n----------------------------------------\n\nTITLE: Implementing Artifact Pass-Through in Earthly with COPY and SAVE\nDESCRIPTION: This snippet shows the proper way to implement artifact pass-through by copying and re-saving artifacts from a referenced target, making them accessible through the wrapper target.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_48\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# With pass-through artifacts\nVERSION 0.8\nFROM alpine:3.18\nbuild:\n    ARG some_arg=...\n    ARG another_arg=...\n    ARG os=linux\n    RUN ...\n    SAVE ARTIFACT ./output\nbuild-for-windows:\n    COPY (+build --some_arg=... --another_arg=... --os=windows) ./\n    SAVE ARTIFACT ./*\n```\n\n----------------------------------------\n\nTITLE: Using Cloud Secrets in Earthly Builds\nDESCRIPTION: These Dockerfile snippets demonstrate how to reference cloud secrets and user secrets in Earthly builds.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/cloud-secrets.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN --secret MY_KEY=my_key echo $MY_KEY\n```\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN --secret MY_KEY=/user/my_private_key echo $MY_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CodeBuild Buildspec for Earthly Integration\nDESCRIPTION: This buildspec.yml configuration downloads the Earthly CLI, authenticates with Docker Hub using environment variables, and runs an Earthly build with the push flag. The example includes all necessary phases for a complete CI workflow using Earthly with AWS CodeBuild.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/codebuild-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# ./buildspec.yml\nversion: 0.2\n\nphases:\n  install:\n    commands:\n      - wget https://github.com/earthly/earthly/releases/download/v0.8.13/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly\n  pre_build:\n    commands:\n      - echo Logging into Docker\n      - docker login --username \"$DOCKERHUB_USERNAME\" --password \"$DOCKERHUB_TOKEN\"\n  build:\n    commands:\n      - earthly --ci --push +build\n```\n\n----------------------------------------\n\nTITLE: Multi-Platform Build Configuration\nDESCRIPTION: Earthfile configuration showing how to build for multiple platforms in parallel including AMD64, ARM64 and ARM v6/v7\nSOURCE: https://github.com/earthly/earthly/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: earthly\nCODE:\n```\nVERSION 0.8\nall:\n    BUILD \\\n        --platform=linux/amd64 \\\n        --platform=linux/arm64 \\\n        --platform=linux/arm/v7 \\\n        --platform=linux/arm/v6 \\\n        +build\n\nbuild:\n    FROM alpine:3.18\n    CMD [\"uname\", \"-m\"]\n    SAVE IMAGE multiplatform-image\n```\n\n----------------------------------------\n\nTITLE: NPM Dependency Caching Example in Earthly\nDESCRIPTION: Demonstrates a practical example of using the CACHE command with an NPM project. This target caches the node_modules directory to avoid downloading all dependencies when only some have changed.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/cache-command/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Earthfile\nCODE:\n```\nVERSION --use-cache-command 0.6\n\ndeps:\n  CACHE ./node_modules\n  COPY package*.json .\n  RUN npm install\n```\n\n----------------------------------------\n\nTITLE: Recommended Cross-Repo Reference Pattern in Earthfiles\nDESCRIPTION: A recommended approach for defining exportable artifacts in an Earthfile to be used by other repositories.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Repo 1 Earthfile\nVERSION 0.8\nFROM alpine:3.18\nWORKDIR /work\nfile:\n    COPY ./my-file.txt ./\n    SAVE ARTIFACT ./my-file.txt\n```\n\n----------------------------------------\n\nTITLE: Using Globbing in Earthly BUILD Command\nDESCRIPTION: Demonstrates how to use globbing in an Earthly BUILD command to compile multiple services at once.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_30\n\nLANGUAGE: Earthfile\nCODE:\n```\n    BUILD ./services/service1+compile\n    BUILD ./services/service2+compile\n    BUILD ./services/service3+compile\n```\n\n----------------------------------------\n\nTITLE: Mounting Secrets in Earthly Builds\nDESCRIPTION: Shows how to mount secret files during builds using the --mount option with type=secret. This example mounts a .netrc file to authenticate with a restricted service, with examples of providing secrets via command line or from host files.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN --mount=type=secret,id=netrc,target=/root/.netrc curl https://example.earthly.dev/restricted/example-file-that-requires-auth > data\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Cross-Repository References in Earthly\nDESCRIPTION: This snippet demonstrates how to import and use artifacts from another repository in an Earthly build. It copies a file from repo-1 and prints its contents.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nIMPORT github.com/my-co/repo-1\nFROM alpine:3.18\nWORKDIR /work\nprint-file:\n    COPY repo-1+file/my-file.txt ./\n    RUN echo my-file.txt\n```\n\n----------------------------------------\n\nTITLE: WITH DOCKER Example for Docker-in-Earthly Execution\nDESCRIPTION: Shows a typical example of using the WITH DOCKER clause to initialize a Docker daemon within an Earthly build. This allows running Docker commands within an Earthly build process, loading custom images, and using docker-compose.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_37\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM earthly/dind:alpine-3.19-docker-25.0.5-r0\nWORKDIR /test\nCOPY docker-compose.yml ./\nWITH DOCKER \\\n        --compose docker-compose.yml \\\n        --load image-name:latest=(+some-target --SOME_BUILD_ARG=value) \\\n        --load another-image-name:latest=+another-target \\\n        --pull some-image:latest\n    RUN docker run ... && \\\n        docker run ... && \\\n        ...\nEND\n```\n\n----------------------------------------\n\nTITLE: Setting up QEMU in GitHub Actions for Multi-platform Builds\nDESCRIPTION: YAML configuration for enabling QEMU in GitHub Actions workflows to support multi-platform builds in Earthly. This step needs to be included in every job that performs multi-platform builds.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  <job-name>:\n    steps:\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v1\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n      - uses: actions/checkout@v3\n      - ...\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose in Earthly\nDESCRIPTION: This snippet illustrates how to use docker-compose within Earthly. It uses the '--compose' flag to specify a Docker compose stack and brings up services before executing a command.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/docker-in-earthly.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM earthly/dind:alpine-3.19-docker-25.0.5-r0\nCOPY docker-compose.yml ./\nWITH DOCKER \\\n        --compose docker-compose.yml \\\n        --service db \\\n        --service api\n    RUN docker run some-integration-test:latest\nEND\n```\n\n----------------------------------------\n\nTITLE: Using Local AWS Credentials in Earthly\nDESCRIPTION: Example Earthfile showing how to access AWS credentials from the host environment using the RUN --aws command to list S3 buckets.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/cloud-providers/aws.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nVERSION --run-with-aws 0.8\n\naws:\n    FROM amazon/aws-cli\n    RUN --aws aws s3 ls\n```\n\n----------------------------------------\n\nTITLE: Earthfile Documentation Example\nDESCRIPTION: Example Earthfile showing documentation comments and target definitions for a Go project build configuration with dependency management, build and tidy targets.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM golang:1.19-alpine3.15\n\ndeps:\n    COPY go.mod go.sum .\n    RUN go mod download\n\n# build runs 'go build' and saves the artifact locally.\nbuild:\n    FROM +deps\n    COPY . .\n    ARG output=./build/something\n    RUN go build -o /bin/something\n    SAVE ARTIFACT /bin/something AS LOCAL $output\n\n# tidy runs 'go mod tidy' and saves go.mod/go.sum locally.\ntidy:\n    FROM +deps\n    COPY . .\n    RUN go mod tidy\n    SAVE ARTIFACT go.mod AS LOCAL go.mod\n    SAVE ARTIFACT go.sum AS LOCAL go.sum\n```\n\n----------------------------------------\n\nTITLE: Configuring Git HTTPS Authentication in Earthly\nDESCRIPTION: YAML configuration for setting up HTTPS-based Git authentication with username and password for multiple Git providers.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/auth.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngit:\n    github.com:\n        auth: https\n        user: <username>\n        password: <password>\n    gitlab.com:\n        auth: https\n        user: <username>\n        password: <password>\n```\n\n----------------------------------------\n\nTITLE: Optional Secrets Example in Earthfiles\nDESCRIPTION: Demonstrates how to implement optional secrets in Earthfiles using ARG variables. Shows how secrets can be disabled by passing empty values through command-line arguments.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nrelease:\n    ARG SECRET_ID=GH_TOKEN\n    RUN --push --secret GITHUB_TOKEN=$SECRET_ID github-release upload\nrelease-short:\n    ARG SECRET_ID=GITHUB_TOKEN\n    RUN --push --secret $SECRET_ID github-release upload\n```\n\n----------------------------------------\n\nTITLE: Configuring Earthly Build Step in cloudbuild.yaml\nDESCRIPTION: Basic configuration for running an Earthly build within Google Cloud Build. This step uses the Earthly Docker image to execute a build with CI mode enabled and push the results.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/google-cloud-build.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  - id: 'build'\n    name: 'earthly/earthly:v0.8.13'\n    args:\n      - --ci\n      - --push\n      - +build\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-platform Images with Cross-compilation\nDESCRIPTION: Earthfile example demonstrating how to create multi-platform images without emulation by using cross-compilation. This builds Go binaries for different architectures on the host platform.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nbuild-all-platforms:\n    BUILD +build-amd64\n    BUILD +build-arm-v7\n\nbuild:\n    FROM golang:1.15-alpine3.13\n    WORKDIR /example\n    ARG GOOS=linux\n    ARG GOARCH=amd64\n    ARG GOARM\n    COPY main.go ./\n    RUN go build -o main main.go\n    SAVE ARTIFACT ./main\n\nbuild-amd64:\n    FROM --platform=linux/amd64 alpine:3.18\n    COPY +build/main ./example/main\n    ENTRYPOINT [\"/example/main\"]\n    SAVE IMAGE --push org/myimage:latest\n\nbuild-arm-v7:\n    FROM --platform=linux/arm/v7 alpine:3.18\n    COPY \\\n        --platform=linux/amd64 \\\n        (+build/main --GOARCH=arm --GOARM=v7) ./example/main\n    ENTRYPOINT [\"/example/main\"]\n    SAVE IMAGE --push org/myimage:latest\n```\n\n----------------------------------------\n\nTITLE: Optimal File Copy Strategy for Go Projects in Earthfiles\nDESCRIPTION: The recommended approach for copying files in a Go project that maximizes build caching by separating dependency management from code compilation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Best\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY ./*.go ./\nRUN go build ...\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Files for Compilation Using FOR in Earthfile\nDESCRIPTION: Example of using the FOR command to iterate over a list of files and compile each one using gcc in an Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_41\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFOR file IN $(ls)\n  RUN gcc \"${file}\" -o \"${file}.o\" -c\nEND\n```\n\n----------------------------------------\n\nTITLE: Setting Build Arguments in Earthly\nDESCRIPTION: Shows different ways to set build arguments in Earthly, including constant values, expressions, and dynamic expressions.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_33\n\nLANGUAGE: Earthfile\nCODE:\n```\n--SOME_ARG=\"a constant value\"\n\n--SOME_ARG=\"a value based on other args, like $ANOTHER_ARG and $YET_ANOTHER_ARG\"\n\n--SOME_ARG=$(find /app -type f -name '*.php')\n```\n\n----------------------------------------\n\nTITLE: Loading and Running Earthly-built Images in Docker\nDESCRIPTION: This example shows how to load images built by Earthly into a Docker daemon and run them. It demonstrates the use of the '--load' option with 'WITH DOCKER'.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/docker-in-earthly.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    ...\n    ENTRYPOINT ...\n    SAVE IMAGE my-image:latest\n\nsmoke-test:\n    FROM earthly/dind:alpine-3.19-docker-25.0.5-r0\n    WITH DOCKER --load test:latest=+build\n        RUN docker run test:latest\n    FROM earthly/dind:alpine\n    WITH DOCKER --load +build\n        RUN docker run my-image:latest\n    END\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Images to Remote Repositories\nDESCRIPTION: Example showing how to push a Docker image to a remote repository using the --push flag with SAVE IMAGE and invoking earthly with the --push option.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\ndocker:\n    COPY +build/example .\n    ENTRYPOINT [\"/go-workdir/example\"]\n    SAVE IMAGE --push go-example:latest\n```\n\n----------------------------------------\n\nTITLE: Using Platform Built-in Args for Dynamic Multi-platform Builds\nDESCRIPTION: Improved Earthfile example using built-in platform arguments to simplify cross-compilation for multiple architectures. This dynamically adjusts build parameters based on the target platform.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nbuild-all-platforms:\n    BUILD --platform=linux/amd64 --platform=linux/arm/v7 +build-image\n\nbuild:\n    FROM golang:1.15-alpine3.13\n    WORKDIR /example\n    ARG GOOS=linux\n    ARG GOARCH=amd64\n    ARG VARIANT\n    COPY main.go ./\n    RUN GOARM=${VARIANT#\"v\"} go build -o main main.go\n    SAVE ARTIFACT ./main\n\nbuild-image:\n    ARG TARGETPLATFORM\n    ARG TARGETARCH\n    ARG TARGETVARIANT\n    FROM --platform=$TARGETPLATFORM alpine:3.18\n    COPY \\\n        --platform=linux/amd64 \\\n        (+build/main --GOARCH=$TARGETARCH --VARIANT=$TARGETVARIANT) ./example/main\n    ENTRYPOINT [\"/example/main\"]\n    SAVE IMAGE --push org/myimage:latest\n```\n\n----------------------------------------\n\nTITLE: Using DEEP_CLONE Function for Optimal Deep Clone in Earthly\nDESCRIPTION: This snippet shows how to use the DEEP_CLONE function from the Earthly utils library to perform an optimal deep clone of a Git repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_9\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG git_url=\"git@github.com/my-co/my-proj\"\nDO github.com/earthly/lib/utils/git:3.0.1+DEEP_CLONE --GIT_URL=$git_url\nRUN ls\n```\n\n----------------------------------------\n\nTITLE: Python Earthfile Example\nDESCRIPTION: Earthfile for a Python project, demonstrating how to package a Python application with Earthly and create a Docker image that can be pushed to a repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_22\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM python:3\nWORKDIR /code\n\nbuild:\n     # In Python, there's nothing to build.\n    COPY src src\n    SAVE ARTIFACT src /src\n\ndocker:\n    COPY +build/src src\n    ENTRYPOINT [\"python3\", \"./src/hello.py\"]\n    SAVE IMAGE --push python-example:latest\n```\n\n----------------------------------------\n\nTITLE: Push and Deploy Pattern with Ordered Execution in Earthfile\nDESCRIPTION: Example of pushing an image to a registry and then deploying it using the WAIT block to ensure the image is pushed before deployment starts. This demonstrates the new flexible push ordering capabilities.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: Earthfile\nCODE:\n```\npush-and-deploy:\n  ...\n  WAIT\n    BUILD +my-image\n  END\n  RUN --push ./deploy.sh my-org/my-image:latest\nmy-image:\n  ...\n  SAVE IMAGE --push my-org/my-image:latest\n```\n\n----------------------------------------\n\nTITLE: Refactored Earthfile Configuration Using Import\nDESCRIPTION: Demonstrates how to refactor the build configuration using IMPORT statements to create aliases for paths and repositories, making the code more maintainable.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/import/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nIMPORT ./some/local/path AS lib\nIMPORT github.com/earthly/hello-world:main\n\nbuild:\n    DO lib+PRINT --string=\"IMPORT example\"\n    COPY lib+get-file/file.txt ./\n    RUN cat file.txt\n    BUILD hello-world+hello\n```\n\n----------------------------------------\n\nTITLE: Earthfile Referencing Subdirectory Target (Dockerfile)\nDESCRIPTION: An Earthfile showing how to use FROM to reference a target from an Earthfile in a subdirectory.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-5-importing.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    FROM ./services/service-one+deps\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example AS LOCAL local-output/go-example\n```\n\n----------------------------------------\n\nTITLE: Java Earthfile Example\nDESCRIPTION: Complete Earthfile example for a Java project, showing Gradle usage and ARG implementation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-4-args.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM openjdk:8-jdk-alpine\nRUN apk add --update --no-cache gradle\nWORKDIR /java-example\n\ndeps:\n    COPY build.gradle ./\n    RUN gradle build\n\nbuild:\n    FROM +deps\n    COPY src src\n    RUN gradle build\n    RUN gradle install\n    SAVE ARTIFACT build/install/java-example/bin AS LOCAL build/bin\n    SAVE ARTIFACT build/install/java-example/lib AS LOCAL build/lib\n\ndocker:\n    COPY +build/bin bin\n    COPY +build/lib lib\n    ARG tag='latest'\n    ENTRYPOINT [\"/java-example/bin/java-example\"]\n    SAVE IMAGE java-example:$tag\n```\n\n----------------------------------------\n\nTITLE: Using ARGs in Earthly Dockerfile\nDESCRIPTION: Example of using ARGs in an Earthly Dockerfile, demonstrating how to set default values and use them in commands.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-4-args.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\ndocker:\n    ARG tag='latest'\n    COPY +build/example .\n    ENTRYPOINT [\"/go-workdir/example\"]\n    SAVE IMAGE go-example:$tag\n```\n\n----------------------------------------\n\nTITLE: Working Cross-Platform WITH DOCKER Example in Earthly\nDESCRIPTION: This example demonstrates the correct approach for cross-platform builds. The target runs on the native architecture, while specifying the platform at the docker run level, which is supported by WITH DOCKER.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_12\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    FROM earthly/dind\n    WITH DOCKER --pull=earthly/examples:multiplatform\n        RUN docker run --platform=linux/arm64 earthly/examples:multiplatform\n    END\n```\n\n----------------------------------------\n\nTITLE: Setting Up Earthfile Integration Test Target\nDESCRIPTION: Earthfile target that runs integration tests using Docker Compose for managing test dependencies.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/integration.md#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nintegration-test:\n    FROM +project-files\n    COPY src src\n    COPY docker-compose.yml ./ \n    WITH DOCKER --compose docker-compose.yml\n        RUN while ! pg_isready --host=localhost --port=5432 --dbname=iso3166 --username=postgres; do sleep 1; done ;\\\n            sbt it:test\n    END\n```\n\n----------------------------------------\n\nTITLE: Using LET and SET Commands in Earthly\nDESCRIPTION: Shows how to use LET to declare variables and SET to change their values in Earthly, with conditional logic based on build mode.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_35\n\nLANGUAGE: Earthfile\nCODE:\n```\nVERSION 0.8\n\n# mode defines the build mode. Valid values are 'dev' and 'prod'.\nARG --global mode = dev\n\nfoo:\n    LET buildArgs = --mode development\n    IF [ \"$mode\" = \"prod\" ]\n        SET buildArgs = --mode production --optimize\n    END\n```\n\n----------------------------------------\n\nTITLE: Earthfile for JavaScript Project (Dockerfile)\nDESCRIPTION: An Earthfile that defines build, deps, and docker targets for a JavaScript project, demonstrating dependency separation and artifact reuse.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-3-adding-dependencies-with-caching.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM node:13.10.1-alpine3.11\nWORKDIR /js-example\n\ndeps:\n    COPY package.json ./\n    COPY package-lock.json ./\n    RUN npm install\n    SAVE ARTIFACT package.json AS LOCAL ./package.json\n    SAVE ARTIFACT package-lock.json AS LOCAL ./package-lock.json\n\nbuild:\n    FROM +deps\n    COPY src src\n    RUN mkdir -p ./dist && cp ./src/index.html ./dist/\n    RUN npx webpack\n    SAVE ARTIFACT dist /dist AS LOCAL dist\n\ndocker:\n    FROM +deps\n    COPY +build/dist ./dist\n    EXPOSE 8080\n    ENTRYPOINT [\"/js-example/node_modules/http-server/bin/http-server\", \"./dist\"]\n    SAVE IMAGE js-example:latest\n```\n\n----------------------------------------\n\nTITLE: FUNCTION Command Definition\nDESCRIPTION: Command syntax and usage for defining functions in Earthly. Functions are reusable sets of instructions that inherit build context from caller.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_50\n\nLANGUAGE: text\nCODE:\n```\nFUNCTION\n```\n\n----------------------------------------\n\nTITLE: Splitting Builds Across Multiple Satellites\nDESCRIPTION: Example showing how to distribute build targets across multiple satellites to improve performance, targeting specific satellites for different components.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/best-practices.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly --satellite sat-1 +library-1\nearthly --satellite sat-2 +library-2\n```\n\n----------------------------------------\n\nTITLE: ARG with Default Values in Earthly\nDESCRIPTION: Example showing how to use default values with build arguments, including both static and dynamic defaults\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/build-args.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nhello:\n   ARG time=$(date +%H:%M)\n   ARG name=John\n   RUN echo \"hello $name, it is $time\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Earthfile with Build and Docker Targets (Dockerfile)\nDESCRIPTION: An Earthfile for a JavaScript project demonstrating build and docker targets, including referencing a subdirectory target.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-5-importing.md#2025-04-21_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM node:13.10.1-alpine3.11\nWORKDIR /js-example\n\nbuild:\n    FROM ./services/service-one+deps\n    COPY src src\n    RUN mkdir -p ./dist && cp ./src/index.html ./dist/\n    RUN npx webpack\n    SAVE ARTIFACT dist /dist AS LOCAL dist\n\ndocker:\n    FROM +deps\n    ARG tag='latest'\n    COPY +build/dist ./dist\n    EXPOSE 8080\n    ENTRYPOINT [\"/js-example/node_modules/http-server/bin/http-server\", \"./dist\"]\n    SAVE IMAGE js-example:$tag\n```\n\n----------------------------------------\n\nTITLE: Building from a Specific Dockerfile\nDESCRIPTION: Example of building a Docker image from a specific Dockerfile within a context directory.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nearthly docker-build --dockerfile Dockerfile ./myDockerfiles\n```\n\n----------------------------------------\n\nTITLE: Saving directory vs file artifacts locally\nDESCRIPTION: Examples showing the difference between saving directory and file artifacts locally.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_24\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# This will wipe ./destination and replace it with the contents of the ./my-directory artifact.\nSAVE ARTIFACT ./my-directory AS LOCAL ./destination\n# This will merge the contents of ./my-directory into ./destination.\nSAVE ARTIFACT ./my-directory/* AS LOCAL ./destination\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Values Directly via Command Line\nDESCRIPTION: Shows how to provide a secret value directly when invoking the earthly command. This method allows passing secrets without storing them in files or environment variables.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/secrets.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nearthly --secret passwd=itsasecret +hush\n```\n\n----------------------------------------\n\nTITLE: Earthfile with Dependencies in Subdirectory (Dockerfile)\nDESCRIPTION: An Earthfile demonstrating how to reference a target from an Earthfile in a subdirectory using relative paths.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-5-importing.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM golang:1.15-alpine3.13\nWORKDIR /go-workdir\n\ndeps:\n    COPY go.mod go.sum ./\n    RUN go mod download\n    # Output these back in case go mod download changes them.\n    SAVE ARTIFACT go.mod AS LOCAL go.mod\n    SAVE ARTIFACT go.sum AS LOCAL go.sum\n```\n\n----------------------------------------\n\nTITLE: Interactive Bash Shell with State Preservation in Earthly\nDESCRIPTION: Shows how to use the --interactive-keep flag to start a bash shell in the build context, allowing interactive modification of the environment with changes preserved in the final image.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_9\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    FROM alpine:3.18\n    RUN apk add bash\n    RUN --interactive-keep bash\n```\n\n----------------------------------------\n\nTITLE: JavaScript Earthfile Example\nDESCRIPTION: Earthfile for a JavaScript project, demonstrating how to build and package a Node.js application with Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_15\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM node:13.10.1-alpine3.11\nWORKDIR /js-example\n\nbuild:\n    # In JS, there's nothing to build in this simple form.\n    # The source is also the artifact used in production.\n    COPY src/index.js .\n    SAVE ARTIFACT index.js /dist/index.js AS LOCAL ./dist/index.js\n\ndocker:\n    COPY +build/dist dist\n    ENTRYPOINT [\"node\", \"./dist/index.js\"]\n    SAVE IMAGE js-example:latest\n```\n\n----------------------------------------\n\nTITLE: Creating Earthfile for Private Registry Push in Dockerfile\nDESCRIPTION: This Earthfile snippet demonstrates how to build a simple image and push it to a private registry. It creates a message file and sets it as the entrypoint for the container.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/self-signed.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:3.18\n\nbuild:\n    RUN echo \"Hello from Earthly!\" > motd\n    ENTRYPOINT cat motd\n    SAVE IMAGE --push <registry-hostname>/hello-earthly:with-love\n```\n\n----------------------------------------\n\nTITLE: Python Project Earthfile Configuration\nDESCRIPTION: This Earthfile configures the build process for a Python project. It defines targets for building the application, running tests with PostgreSQL using Docker Compose, and sets up the necessary environment for testing.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_19\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM python:3\nWORKDIR /code\n\nbuild:\n    COPY ./requirements.txt .\n    RUN pip install -r requirements.txt\n    COPY . .\n\nrun-tests:\n    FROM earthly/dind:alpine-3.19-docker-25.0.5-r0\n    COPY ./docker-compose.yml .\n    COPY ./tests ./tests\n    RUN apk update\n    RUN apk add postgresql-client\n    WITH DOCKER --compose docker-compose.yml --load app:latest=+docker\n        RUN while ! pg_isready --host=localhost --port=5432; do sleep 1; done ;\\\n          docker run --network=default_python/part6_default app python3 ./tests/test_db_connection.py\n    END\n```\n\n----------------------------------------\n\nTITLE: Alternative Deep Clone Method in Earthly\nDESCRIPTION: This snippet demonstrates an alternative method for performing a deep clone when GIT CLONE's limitations are too restrictive. It uses both GIT CLONE and RUN git clone for hash awareness and full clone capabilities.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_8\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG git_url=\"git@github.com/my-co/my-proj\"\nGIT CLONE \"$git_url\" my-proj\nARG git_hash=$(cd my-proj; git rev-parse HEAD)\nRUN rm -rf my-proj &&\\\n    git clone \"$git_url\" my-proj &&\\\n    cd my-proj &&\\\n    git checkout \"$git_hash\"\nWORKDIR my-proj\nRUN ls\n```\n\n----------------------------------------\n\nTITLE: Basic Target Importing in Earthfile\nDESCRIPTION: Demonstrates how to import and build targets within the same Earthfile using the + prefix notation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/importing.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\ntarget1:\n    RUN echo \"Hello World\"\n\ntarget2:\n    BUILD +target1\n```\n\n----------------------------------------\n\nTITLE: Earthfile for Java Project (Dockerfile)\nDESCRIPTION: An Earthfile that defines build, deps, and docker targets for a Java project using Gradle, showcasing dependency management and build artifact reuse.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-3-adding-dependencies-with-caching.md#2025-04-21_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM openjdk:8-jdk-alpine\nRUN apk add --update --no-cache gradle\nWORKDIR /java-example\n\ndeps:\n    COPY build.gradle ./\n    RUN gradle build\n\nbuild:\n    FROM +deps\n    COPY src src\n    RUN gradle build\n    RUN gradle install\n    SAVE ARTIFACT build/install/java-example/bin AS LOCAL build/bin\n    SAVE ARTIFACT build/install/java-example/lib AS LOCAL build/lib\n\ndocker:\n    COPY +build/bin bin\n    COPY +build/lib lib\n    ENTRYPOINT [\"/java-example/bin/java-example\"]\n    SAVE IMAGE java-example:latest\n```\n\n----------------------------------------\n\nTITLE: Earthfile for Python Project (Dockerfile)\nDESCRIPTION: An Earthfile that defines build, deps, and docker targets for a Python project, demonstrating dependency wheel creation and reuse across targets.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-3-adding-dependencies-with-caching.md#2025-04-21_snippet_8\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM python:3\nWORKDIR /code\n\ndeps:\n    RUN pip install wheel\n    COPY requirements.txt ./\n    RUN pip wheel -r requirements.txt --wheel-dir=wheels\n    SAVE ARTIFACT wheels /wheels\n\nbuild:\n    FROM +deps\n    COPY src src\n    SAVE ARTIFACT src /src\n\ndocker:\n    COPY +deps/wheels wheels\n    COPY +build/src src\n    COPY requirements.txt ./\n    RUN pip install --no-index --find-links=wheels -r requirements.txt\n    ENTRYPOINT [\"python3\", \"./src/hello.py\"]\n    SAVE IMAGE python-example:latest\n```\n\n----------------------------------------\n\nTITLE: Go Integration Test Earthfile\nDESCRIPTION: Earthfile configuration for running Go integration tests with Redis using docker-compose.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nVERSION 0.8\nFROM golang:1.15-alpine3.13\nWORKDIR /go-workdir\n\ndeps:\n    COPY go.mod go.sum ./\n    RUN go mod download\n    SAVE ARTIFACT go.mod AS LOCAL go.mod\n    SAVE ARTIFACT go.sum AS LOCAL go.sum\n\ntest-setup:\n    FROM +deps\n    COPY main.go .\n    COPY main_integration_test.go .\n    ENV CGO_ENABLED=0\n    ENTRYPOINT [\"go\", \"test\", \"github.com/earthly/earthly/examples/go\"]\n    SAVE IMAGE test:latest\n\nintegration-tests:\n    FROM earthly/dind:alpine-3.19-docker-25.0.5-r0\n    COPY docker-compose.yml ./\n    WITH DOCKER --compose docker-compose.yml --load tests:latest=+test-setup\n        RUN docker run --network=default_go/part6_default tests:latest\n    END\n```\n\n----------------------------------------\n\nTITLE: Mounting Secrets as Temporary Files in Earthfiles\nDESCRIPTION: Demonstrates how to mount a secret as a temporary file rather than an environment variable. The file is not saved to the image snapshot, providing an alternative way to access secret data.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/secrets.md#2025-04-21_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount type=secret,target=/root/mypassword,id=passwd echo \"my password is $(cat /root/mypassword)\"\n```\n\n----------------------------------------\n\nTITLE: Using Podman with WITH DOCKER in Earthly\nDESCRIPTION: Earthly examples showing how to use Podman commands within a WITH DOCKER block. The LOCALLY keyword is required to run Podman on the host machine.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/podman.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker-locally:\n   LOCALLY\n   WITH DOCKER\n     RUN podman ps\n   END\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker:\n   WITH DOCKER\n     RUN docker ps\n   END\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Python REPL with Earthly\nDESCRIPTION: Demonstrates using the --interactive flag to start an interactive Python REPL during the build process. This allows for exploratory programming and debugging within the build environment.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_8\n\nLANGUAGE: Dockerfile\nCODE:\n```\npython:\n    FROM alpine:3.18\n    RUN apk add python\n    RUN --interactive python\n```\n\n----------------------------------------\n\nTITLE: Function Scoping Example with ARG Variables\nDESCRIPTION: Demonstrates how functions create their own ARG scope distinct from the caller. Arguments need to be passed explicitly via the DO command to be available in the function.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/functions.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    ARG var=value-in-build\n    # prints \"something-else\"\n    DO +PRINT_VAR\n    # prints \"value-in-build\"\n    DO +PRINT_VAR --var=$var\n\nPRINT_VAR:\n    FUNCTION\n    ARG var=something-else\n    RUN echo \"$var\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Woodpecker CI Pipeline for Earthly Build\nDESCRIPTION: This YAML configuration sets up a Woodpecker CI pipeline to run an Earthly build. It uses the earthly/earthly Docker image, mounts the Docker socket, sets environment variables, and specifies the build commands including Docker login and Earthly execution.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/woodpecker-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#.woodpecker.yml\npipeline:\n  earthly:\n    image: earthly/earthly:v0.8.13\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      - FORCE_COLOR=1\n      - EARTHLY_EXEC_CMD=\"/bin/sh\" \n    secrets: [REGISTRY, REGISTRY_USER, REGISTRY_PASSWORD]\n    commands:\n     - docker login -u $${REGISTRY_USER} -p $${REGISTRY_PASSWORD} $${REGISTRY}\n     - earthly --ci --push +build\n```\n\n----------------------------------------\n\nTITLE: Building Rust Project with Earthly\nDESCRIPTION: Demonstrates how to build a Rust project using Earthly. It copies source files with timestamp preservation for incremental compilation and uses the rust+CARGO command with specific output patterns to extract final artifacts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/lang-guides/rust.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nsource:\n  FROM +install\n  COPY --keep-ts Cargo.toml Cargo.lock ./\n  COPY --keep-ts --dir package1 package2  ./\n\nbuild:\n  FROM +source\n  DO rust+CARGO --args=\"build --release\" --output=\"release/[^/\\.]+\"\n  SAVE ARTIFACT ./target/release/*\n```\n\n----------------------------------------\n\nTITLE: Correct Docker Image Usage in LOCALLY Targets with WITH DOCKER\nDESCRIPTION: The proper approach to use Docker images in LOCALLY targets using WITH DOCKER --load to establish dependencies and ensure the image is available when needed.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_35\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Good\nall:\n    BUILD +run-img\nbuild-img:\n    ...\n    SAVE IMAGE my-co/my-img:latest\nrun-img:\n    LOCALLY\n    WITH DOCKER --load=+build-img\n        RUN docker run my-co/my-img:latest\n    END\n```\n\n----------------------------------------\n\nTITLE: Manual Cache Management Using SAVE IMAGE\nDESCRIPTION: An improved Earthfile that manually caches the base image by pushing it to a registry and referencing it directly in subsequent builds, ensuring consistent build times.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_57\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbase:\n    FROM ruby:2.7\n    ARG TARGETARCH\n    WORKDIR /site\n    ...\n    RUN apt-get install pandoc  pandocfilters -y\n\n    # Manually cache the base image by pushing it to a registry\n    SAVE IMAGE –push earthly/blog-base-image:latest\n\nbuild:\n    # Use the cached base image for builds  \n    FROM earthly/blog-base-image:latest\n    RUN ...\n```\n\n----------------------------------------\n\nTITLE: JavaScript Application Earthfile\nDESCRIPTION: Earthfile configuration for building and running JavaScript frontend and backend services.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nVERSION 0.8\nFROM node:13.10.1-alpine3.11\nWORKDIR /js-example\n\napp-deps:\n    COPY ./app/package.json ./\n    COPY ./app/package-lock.json ./\n    RUN npm install\n    # Output these back in case npm install changes them.\n    SAVE ARTIFACT package.json AS LOCAL ./app/package.json\n    SAVE ARTIFACT package-lock.json AS LOCAL ./app/package-lock.json\n\nbuild-app:\n    FROM +app-deps\n    COPY ./app/src ./app/src\n    RUN mkdir -p ./app/dist && cp ./app/src/index.html ./app/dist/\n    RUN cd ./app && npx webpack\n    SAVE ARTIFACT ./app/dist /dist AS LOCAL ./app/dist\n\napp-docker:\n    FROM +app-deps\n    ARG tag='latest'\n    COPY +build-app/dist ./app/dist\n    EXPOSE 8080\n    ENTRYPOINT [\"/js-example/node_modules/http-server/bin/http-server\", \"./app/dist\"]\n    SAVE IMAGE js-example:$tag\n\napi-deps:\n    COPY ./api/package.json ./\n    COPY ./api/package-lock.json ./\n    RUN npm install\n    # Output these back in case npm install changes them.\n    SAVE ARTIFACT package.json AS LOCAL ./api/package.json\n    SAVE ARTIFACT package-lock.json AS LOCAL ./api/package-lock.json\n\napi-docker:\n    FROM +api-deps\n    ARG tag='latest'\n    COPY ./api/server.js .\n    RUN pwd\n    RUN ls\n    EXPOSE 3080\n    ENTRYPOINT [\"node\", \"server.js\"]\n    SAVE IMAGE js-api:$tag\n```\n\n----------------------------------------\n\nTITLE: Defining Earthly CI Pipeline\nDESCRIPTION: Example showing how to define an Earthly CI pipeline using the new PIPELINE and TRIGGER commands to handle push and PR events on the main branch.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: Earthfile\nCODE:\n```\nmy-pipeline:\n    PIPELINE --push\n    TRIGGER push main\n    TRIGGER pr main\n    BUILD +my-target\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Directories and Invoking Targets with FOR in Earthfile\nDESCRIPTION: Example of using the FOR command to iterate over a set of directories in a monorepo and invoke build targets within each directory in an Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_42\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFOR dir IN $(ls -d */)\n  BUILD \"./$dir+build\"\nEND\n```\n\n----------------------------------------\n\nTITLE: Installing QEMU for Multi-platform Emulation on Ubuntu Linux\nDESCRIPTION: Commands to install and set up QEMU emulation on Ubuntu Linux systems for multi-platform builds in Earthly. This includes installing necessary packages and enabling multi-architecture container execution.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install qemu-system binfmt-support qemu-user-static\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\ndocker stop earthly-buildkitd || true\n```\n\n----------------------------------------\n\nTITLE: Basic Earthfile with Dependencies and Build Targets (Dockerfile)\nDESCRIPTION: An Earthfile demonstrating the use of FROM to reference another target's image as a base image. It includes deps and build targets for a Go project.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-5-importing.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM golang:1.15-alpine3.13\nWORKDIR /go-workdir\n\ndeps:\n    COPY go.mod go.sum ./\n    RUN go mod download\n    # Output these back in case go mod download changes them.\n    SAVE ARTIFACT go.mod AS LOCAL go.mod\n    SAVE ARTIFACT go.sum AS LOCAL go.sum\n\nbuild:\n    FROM +deps\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example AS LOCAL local-output/go-example\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Build Configuration\nDESCRIPTION: Earthfile showing how to integrate protocol buffer compilation into the build process using the protoc compiler\nSOURCE: https://github.com/earthly/earthly/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: earthly\nCODE:\n```\nVERSION 0.8\nFROM golang:1.15-alpine3.13\nWORKDIR /proto-example\n\nproto:\n  FROM namely/protoc-all:1.29_4\n  COPY api.proto /defs\n  RUN --entrypoint -- -f api.proto -l go\n  SAVE ARTIFACT ./gen/pb-go /pb AS LOCAL pb\n\nbuild:\n  COPY go.mod go.sum .\n  RUN go mod download\n  COPY +proto/pb pb\n  COPY main.go ./\n  RUN go build -o build/proto-example main.go\n  SAVE ARTIFACT build/proto-example\n```\n\n----------------------------------------\n\nTITLE: Initializing Rust Toolchain in Earthly\nDESCRIPTION: Sets up a Rust development environment with necessary dependencies and components. This target installs the Rust toolchain and additional build tools required for Rust projects.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/lang-guides/rust.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\ninstall:\n  FROM rust:1.73.0-bookworm\n  RUN apt-get update -qq\n  RUN apt-get install --no-install-recommends -qq autoconf autotools-dev libtool-bin clang cmake bsdmainutils\n  RUN rustup component add clippy\n  RUN rustup component add rustfmt\n  # Call +INIT before copying the source file to avoid installing depencies every time source code changes. \n  # This parametrization will be used in future calls to functions of the library\n  DO rust+INIT --keep_fingerprints=true\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI for Earthly Build Integration\nDESCRIPTION: This YAML configuration sets up a CircleCI job that checks out the code, logs into Docker Hub, installs Earthly, and runs an Earthly build target with the push flag enabled. It uses an Ubuntu 20.04 machine image as the execution environment.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/circle-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .circleci/config.yml\n\nversion: 2.1\njobs:\n  build:\n    machine:\n      image: ubuntu-2004:2023.02.1\n    steps:\n      - checkout\n      - run: docker login --username \"$DOCKERHUB_USERNAME\" --password \"$DOCKERHUB_TOKEN\"\n      - run: \"sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/download/v0.8.13/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly'\"\n      - run: earthly --ci --push +build\n```\n\n----------------------------------------\n\nTITLE: Defining Earthly Docker Target for Go Application\nDESCRIPTION: An Earthly target definition for building a Docker image from a Go application. It copies the built Go executable from a previous build target and sets it as the entrypoint for the container.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/go/README.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndocker:\n    COPY +build/go-example .\n    ENTRYPOINT [\"/go-example/go-example\"]\n    SAVE IMAGE go-example:latest\n```\n\n----------------------------------------\n\nTITLE: Improved File Copy Strategy in Earthfiles\nDESCRIPTION: A better approach to copying files in Earthfiles that improves caching by being more selective about which files to include.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Better\nCOPY go.mod go.sum ./*.go ./\nRUN go mod download\nRUN go build ...\n```\n\n----------------------------------------\n\nTITLE: Correct File Passing Between LOCALLY Targets Using Artifact References\nDESCRIPTION: The proper way to pass files from a LOCALLY target to another target, using artifact references to ensure Earthly is aware of the dependency relationship between targets.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_28\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Good\nall:\n    BUILD +build\ndep:\n    LOCALLY\n    RUN echo \"Hello World\" > ./my-artifact.txt\n    SAVE ARTIFACT ./my-artifact.txt\nbuild:\n    COPY +dep/my-artifact.txt ./\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Go Integration Tests with Earthly\nDESCRIPTION: Command and output showing how to run Go integration tests with Earthly, which includes Docker Compose setup for running a Redis container required by the integration tests.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/go/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n           buildkitd | Found buildkit daemon as docker container (earthly-buildkitd)\ngolang:1.15-alpine3.13 | --> Load metadata linux/amd64\n               +base | --> FROM golang:1.15-alpine3.13\n             context | --> local context .\n               +base | [██████████] resolve docker.io/library/golang:1.15-alpine3.13@sha256:330f31a4415d97bb64f244d5f4d838bea7a7ee1ab5a1a0bac49e7973c57cbb88 ... 100%\n             context | transferred 1 file(s) for context . (6.8 kB, 9 file/dir stats)\n               +base | --> WORKDIR /go-example\n               +deps | --> COPY go.mod go.sum ./\n               +deps | --> RUN go mod download\n   +integration-test | --> COPY main.go .\n   +integration-test | --> COPY main_integration_test.go .\n   +integration-test | --> COPY docker-compose.yml ./\n   +integration-test | --> WITH DOCKER (install deps)\n   +integration-test | --> WITH DOCKER (docker-compose config)\n    redis:6.0-alpine | --> Load metadata linux/amd64\n    redis:6.0-alpine | --> DOCKER PULL redis:6.0-alpine\n    redis:6.0-alpine | [██████████] resolve docker.io/library/redis:6.0-alpine@sha256:61f3e955fbef87ea07d7409a48a48b069579e32f37d2f310526017d68e9983b7 ... 100%\n               +deps | --> SAVE ARTIFACT go.sum +deps/go.sum AS LOCAL go.sum\n               +deps | --> SAVE ARTIFACT go.mod +deps/go.mod AS LOCAL go.mod\n             context | transferred 1 file(s) for context /var/folders/5f/jkczhmh52g71v8_q34kt2wm80000gn/T/earthly-docker-load330575103 (10 MB, 1 file/dir stats)\n   +integration-test | --> WITH DOCKER RUN --privileged CGO_ENABLED=0 go test github.com/earthly/earthly/examples/go\n   +integration-test | Loading images...\n   +integration-test | Loaded image: redis:6.0-alpine\n   +integration-test | ...done\n   +integration-test | Creating network \"go-example_default\" with the default driver\n   +integration-test | Creating local-redis ... done\n   +integration-test | Creating local-redis ... done\n             ongoing | ok  egratgithub.com/earthly/earthly/examples/go  0.006s\n   +integration-test | Stopping local-redis ... done\n   +integration-test | Removing local-redis ... done\n   +integration-test | Removing network go-example_default\n              output | --> exporting outputs\n              output | [██████████] copying files ... 100%\n================================ SUCCESS [main] ================================\n               +deps | Artifact github.com/earthly/earthly/examples/go:go-integration-test-example+deps/go.mod as local go.mod\n               +deps | Artifact github.com/earthly/earthly/examples/go:go-integration-test-example+deps/go.sum as local go.sum\n```\n\n----------------------------------------\n\nTITLE: Using Builtin ARGs in Earthly Dockerfile\nDESCRIPTION: Example of how to use Earthly's builtin ARGs in a Dockerfile, demonstrating the need for pre-declaration.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-4-args.md#2025-04-21_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG USERARCH\nRUN echo $USERARCH\n```\n\n----------------------------------------\n\nTITLE: Using Earthly Library Function in Dockerfile\nDESCRIPTION: This snippet shows how to call a function from an imported Earthly library package within an Earthfile. It uses the DEEP_CLONE function from the git package as an example.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-lib/earthly-lib.md#2025-04-21_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nDO git+DEEP_CLONE --GIT_URL=...\n```\n\n----------------------------------------\n\nTITLE: Java Earthfile Example\nDESCRIPTION: Earthfile for a Java project, demonstrating how to build and package a Java application with Gradle using Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_18\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM openjdk:8-jdk-alpine\nRUN apk add --update --no-cache gradle\nWORKDIR /java-example\n\nbuild:\n    COPY build.gradle ./\n    COPY src src\n    RUN gradle build\n    RUN gradle install\n    SAVE ARTIFACT build/install/java-example/bin /bin AS LOCAL build/bin\n    SAVE ARTIFACT build/install/java-example/lib /lib AS LOCAL build/lib\n\ndocker:\n    COPY +build/bin bin\n    COPY +build/lib lib\n    ENTRYPOINT [\"/java-example/bin/java-example\"]\n    SAVE IMAGE java-example:latest\n```\n\n----------------------------------------\n\nTITLE: Inline Import Examples\nDESCRIPTION: Shows how to perform inline imports without using the IMPORT command.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/importing.md#2025-04-21_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nBUILD github.com/earthly/hello-world:main+hello\nCOPY ./some/other/dir+my-target/out.txt ./\n```\n\n----------------------------------------\n\nTITLE: Executing Commands Locally with LOCALLY in Earthfile\nDESCRIPTION: Example of using the LOCALLY command to execute commands directly on the host system, displaying current user, hostname, and directory information.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_46\n\nLANGUAGE: Dockerfile\nCODE:\n```\nwhoami:\n    LOCALLY\n    RUN echo \"I am currently running under $USER on $(hostname) under $(pwd)\"\n```\n\n----------------------------------------\n\nTITLE: Running Hello World Docker Container in Earthly\nDESCRIPTION: This snippet demonstrates how to run a 'hello-world' Docker container using Earthly. It uses the 'WITH DOCKER' command to start an isolated Docker daemon and executes 'docker run'.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/docker-in-earthly.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nhello:\n    FROM earthly/dind:alpine-3.19-docker-25.0.5-r0\n    WITH DOCKER --pull hello-world\n        RUN docker run hello-world\n    END\n```\n\n----------------------------------------\n\nTITLE: Extending earthly/earthly Image in Docker\nDESCRIPTION: This snippet demonstrates how to extend the earthly/earthly image in a Dockerfile. It shows pinning to a specific version and adding tools using apk.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/build-an-earthly-ci-image.md#2025-04-21_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nFROM earthly/earthly:v0.8.13\nRUN ... # Add your agent, certificates, tools...\n\napk add --no-cache my-cool-tool\n```\n\n----------------------------------------\n\nTITLE: Service Principal Docker Login\nDESCRIPTION: Earthly command for authenticating with ACR using service principal credentials stored as secrets.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/azure-acr.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRUN --secret AZ_USERNAME=earthly-technologies/azure/ci-cd-username \\\n    --secret AZ_PASSWORD=earthly-technologies/azure/ci-cd-password \\\n    docker login helloearthly.azurecr.io --username $AZ_USERNAME --password $AZ_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Using earthly/actions-setup\nDESCRIPTION: A GitHub Actions workflow configuration that uses the earthly/actions-setup action to install Earthly. The workflow triggers on push to main and pull requests, logs into DockerHub, and runs an Earthly build with the --ci and --push flags.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/gh-actions-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n# .github/workflows/ci.yml\n\nname: Earthly +build\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n      FORCE_COLOR: 1\n    steps:\n    - uses: earthly/actions-setup@v1\n      with:\n        version: v0.8.0\n    - uses: actions/checkout@v4\n    - name: Docker Login\n      run: docker login --username \"$DOCKERHUB_USERNAME\" --password \"$DOCKERHUB_TOKEN\"\n    - name: Run build\n      run: earthly --ci --push +build\n```\n\n----------------------------------------\n\nTITLE: Target-to-Target Argument Passing\nDESCRIPTION: Examples of passing build arguments between different targets in an Earthfile\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/build-args.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\ngreeting:\n   BUILD +hello --name=world\n\nhello:\n    ARG name\n    RUN echo \"hello $name\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Execution with Optional LOCALLY in Earthly\nDESCRIPTION: This snippet demonstrates a pattern for optionally executing commands locally in Earthly using conditional statements and the LOCALLY keyword.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_10\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM alpine:3.18\nARG run_locally=false\nIF [ \"$run_locally\" = \"true\" ]\n    LOCALLY\nELSE\n    FROM earthly/dind:alpine-3.19-docker-25.0.5-r0\n    WORKDIR /app\n    COPY docker-compose.yml ./\nEND\nWITH DOCKER --compose docker-compose.yml \\\n        --service db \\\n        --load=+integration-test\n    RUN docker-compose up integration\nEND\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS OIDC Authentication in Earthfile\nDESCRIPTION: Earthfile example demonstrating how to configure OIDC authentication to access AWS resources during a build. This uses the --run-with-aws and --run-with-aws-oidc flags with the AWS CLI to list S3 objects.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/oidc.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nVERSION --run-with-aws --run-with-aws-oidc 0.8\n\nPROJECT <your-org>/<your-project>\n\naws:\n    FROM amazon/aws-cli\n    LET OIDC=\"role-arn=arn:aws:iam::1234567890:role/your-oidc-role,session-name=my-session,region=us-east-1\"\n    RUN --aws --oidc=$OIDC aws s3 ls\n```\n\n----------------------------------------\n\nTITLE: Advanced IF Condition with Semantic Version Comparison\nDESCRIPTION: Shows a more complex conditional example using Python to perform semantic version comparison. The code installs the semver package, creates a custom script for version comparison, and then uses it in an IF/ELSE condition.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_39\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\n\ntest:\n  FROM python:3\n  RUN pip3 install semver\n\n  # The following python script requires two arguments (v1 and v2)\n  # and will return an exit code of 0 when v1 is semantically greater than v2\n  # or an exit code of 1 in all other cases.\n  RUN echo \"#!/usr/bin/env python3\nimport sys\nimport semver\nv1 = sys.argv[1]\nv2 = sys.argv[2]\nif semver.compare(v1, v2) > 0:\n  sys.exit(0)\nsys.exit(1)\n  \" > ./semver-gt && chmod +x semver-gt\n\n  # Define two different versions\n  ARG A=\"0.3.2\"\n  ARG B=\"0.10.1\"\n\n  # and compare them\n  IF ./semver-gt \"$A\" \"$B\"\n    RUN echo \"A ($A) is semantically greater than B ($B)\"\n  ELSE\n    RUN echo \"A ($A) is NOT semantically greater than B ($B)\"\n  END\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Syntax for .earthlyignore\nDESCRIPTION: Defines the syntax rules for specifying file exclusion patterns in .earthlyignore files. Patterns use filepath.Match syntax from Go, supporting wildcards, character classes, and escape sequences.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthlyignore.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npattern:\n\t{ term }\nterm:\n\t'*'         matches any sequence of non-Separator characters\n\t'?'         matches any single non-Separator character\n\t'[' [ '^' ] { character-range } ']'\n\t            character class (must be non-empty)\n\tc           matches character c (c != '*', '?', '\\\\', '[')\n\t'\\\\' c      matches character c\n\ncharacter-range:\n\tc           matches character c (c != '\\\\', '-', ']')\n\t'\\\\' c      matches character c\n\tlo '-' hi   matches character c for lo <= c <= hi\n```\n\n----------------------------------------\n\nTITLE: Secure Secret Mounting with --mount in Earthly\nDESCRIPTION: Demonstrates the recommended approach for handling secret files in Earthly using the --mount flag. This approach only makes the credentials available during command execution without storing them in the build environment.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_17\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Best\nRUN --mount=type=secret,target=/root/.aws/credentials,id=AWS_CREDENTIALS \\\n    aws ec2 describe-images\n```\n\n----------------------------------------\n\nTITLE: Using RUN --push for GitHub Release Upload\nDESCRIPTION: Example showing how to use RUN --push with a secret to upload GitHub releases, which will only occur if the build succeeds.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_8\n\nLANGUAGE: Dockerfile\nCODE:\n```\nrelease:\n    RUN --push --secret GITHUB_TOKEN=GH_TOKEN github-release upload\n```\n\n----------------------------------------\n\nTITLE: Defining Pipelines with PIPELINE and TRIGGER in Earthly\nDESCRIPTION: Demonstrates how to define an Earthly CI pipeline using the new PIPELINE and TRIGGER keywords. The pipeline is configured to execute on both push to main branch and pull requests to main branch.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: Earthfile\nCODE:\n```\nmy-pipeline:\n    PIPELINE --push\n    TRIGGER push main\n    TRIGGER pr main\n    BUILD +my-target\n```\n\n----------------------------------------\n\nTITLE: Using Docker Images in LOCALLY Targets with WITH DOCKER in Earthfile\nDESCRIPTION: Example of correctly using a Docker image in a LOCALLY target by loading it with the WITH DOCKER command in an Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_47\n\nLANGUAGE: Dockerfile\nCODE:\n```\nmy-image:\n    FROM alpine 3.13\n    ...\n    SAVE IMAGE my-example-image\n\na-locally-example:\n    LOCALLY\n    WITH DOCKER --load=+my-image\n        RUN docker run --rm my-example-image\n    END\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with Manual Earthly Download\nDESCRIPTION: A GitHub Actions workflow that manually downloads Earthly instead of using the actions-setup action. The workflow performs the same functions - checking out code, logging into DockerHub, and running an Earthly build, but includes a step to download a specific version of Earthly directly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/gh-actions-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n# .github/workflows/ci.yml\n\nname: Earthly +build\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n      FORCE_COLOR: 1\n    steps:\n    - uses: actions/checkout@v4\n    - name: Docker Login\n      run: docker login --username \"$DOCKERHUB_USERNAME\" --password \"$DOCKERHUB_TOKEN\"\n    - name: Download latest earthly\n      run: \"sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/download/v0.8.13/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly'\"\n    - name: Run build\n      run: earthly --ci --push +build\n```\n\n----------------------------------------\n\nTITLE: Forcing Interactive Debugging with Failed Command\nDESCRIPTION: A simple technique to intentionally trigger the interactive debugger at any point in an Earthfile by adding a command that will fail. This allows developers to inspect the state of the build environment at that specific point.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/debugging.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\n  RUN false\n```\n\n----------------------------------------\n\nTITLE: Java Project Build Configuration with Earthly\nDESCRIPTION: Earthly build configuration for a Java application, including Gradle build steps and Docker image creation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_10\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM openjdk:8-jdk-alpine\nRUN apk add --update --no-cache gradle\nWORKDIR /java-example\n\nbuild:\n    COPY build.gradle ./\n    COPY src src\n    RUN gradle build\n    RUN gradle install\n    SAVE ARTIFACT build/install/java-example/bin /bin\n    SAVE ARTIFACT build/install/java-example/lib /lib\n\ndocker:\n    COPY +build/bin bin\n    COPY +build/lib lib\n    ENTRYPOINT [\"/java-example/bin/java-example\"]\n    SAVE IMAGE java-example:latest\n```\n\n----------------------------------------\n\nTITLE: Matrix Build Configuration\nDESCRIPTION: Demonstrates how to create matrix builds by passing multiple values for the same argument\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/build-args.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\ngreetings:\n    BUILD +hello \\\n        --name=world \\\n        --name=banana \\\n        --name=eggplant\n```\n\n----------------------------------------\n\nTITLE: Earthfile with Output Only from Direct Calls\nDESCRIPTION: Earthfile example showing how running a target as a reference in FROM or COPY will not produce local outputs unless the target is invoked directly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example AS LOCAL local-output/go-example\n\ndocker:\n    COPY +build/example .\n    ENTRYPOINT [\"/go-workdir/example\"]\n    SAVE IMAGE go-example:latest\n```\n\n----------------------------------------\n\nTITLE: Variables with LET and SET Commands\nDESCRIPTION: Shows how to use variables with LET and SET commands for local value storage and mutation\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/build-args.md#2025-04-21_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nhello:\n   LET name = \"world\"\n   RUN echo \"hello $name\"\n   SET name = \"banana\"\n   RUN echo \"hello $name\"\n```\n\n----------------------------------------\n\nTITLE: Overriding ARG values in Earthly command\nDESCRIPTION: Example of how to override an ARG value when running an Earthly command.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nearthly <target-ref> --<name>=<override-value>\n```\n\n----------------------------------------\n\nTITLE: Privileged Access Example in Remote and Local Earthfiles\nDESCRIPTION: Shows how to set up and reference targets requiring privileged capabilities across remote and local Earthfiles. Demonstrates the use of the --allow-privileged flag in both Earthfiles and command-line invocation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# github.com/earthly/example\nFROM alpine:latest\nelevated-target:\n    RUN --privileged echo do something requiring privileged access.\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:latest\nmy-target:\n    FROM --allow-privileged github.com/earthly/example+elevated-target\n    # ... further instructions inheriting remotely referenced Earthfile\n```\n\n----------------------------------------\n\nTITLE: Optimal Layer Caching Example in Earthly\nDESCRIPTION: Best practice example showing separation of dependency installation from source code copying, maximizing cache efficiency.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/caching/caching-in-earthfiles.md#2025-04-21_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Best\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY ./*.go ./\nRUN go build ...\n```\n\n----------------------------------------\n\nTITLE: Installing Docker in Custom Images for Earthly\nDESCRIPTION: This example shows how to install Docker in a custom image using Earthly's UDC INSTALL_DIND. This approach allows for better cache optimization when a specific base image is required.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/docker-in-earthly.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM my-image:latest\nDO github.com/earthly/lib+INSTALL_DIND\nCOPY ./docker-compose.yml ./\nWITH DOCKER ...\n    ...\nEND\n```\n\n----------------------------------------\n\nTITLE: Copying Between Earthfile Targets\nDESCRIPTION: Example showing how to copy artifacts from one Earthfile target to another. A dummy-target creates an encoded-data file which is then copied to and used in the example target.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_18\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM alpine:3.18\ndummy-target:\n    RUN echo aGVsbG8= > encoded-data\n    SAVE ARTIFACT encoded-data\nexample:\n    COPY +dummy-target/encoded-data .\n    RUN cat encoded-data | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Changes with RUN --push\nDESCRIPTION: Example showing how to use RUN --push to apply Terraform changes as part of an Earthly build process.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_12\n\nLANGUAGE: Dockerfile\nCODE:\n```\napply:\n    RUN --push terraform apply -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Declaring VERSION 0.8 Equivalent Feature Flags in Earthfile\nDESCRIPTION: Shows how to declare VERSION 0.8 in an Earthfile, which is equivalent to VERSION 0.7 with multiple feature flags enabled. This demonstrates the combination of features that make up the new version.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nVERSION \\\n  --arg-scope-and-set \\\n  --cache-persist-option \\\n  --git-refs \\\n  --global-cache \\\n  --no-network \\\n  --pass-args \\\n  --use-docker-ignore \\\n  --use-function-keyword \\\n  --use-visited-upfront-hash-collection \\\n  0.7\n```\n\n----------------------------------------\n\nTITLE: IMPORT Command Syntax\nDESCRIPTION: Command syntax for importing and aliasing Earthfile references, with support for privileged execution.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_52\n\nLANGUAGE: text\nCODE:\n```\nIMPORT [--allow-privileged] <earthfile-ref> [AS <alias>]\n```\n\n----------------------------------------\n\nTITLE: Building for Multiple Platforms in Earthly\nDESCRIPTION: Demonstrates how to build a target for multiple platforms using the --platform flag in Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_34\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild-all-platforms:\n    BUILD --platform=linux/amd64 --platform=linux/arm/v7 +build\n```\n\n----------------------------------------\n\nTITLE: Implementing Artifact Pass-Through Pattern in Earthly\nDESCRIPTION: This example demonstrates how to create wrapper targets that pass through artifacts from other targets, allowing direct referencing of the wrapper target for artifact access.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_47\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# No pass-through artifacts\nVERSION 0.8\nFROM alpine:3.18\nbuild:\n    ARG some_arg=...\n    ARG another_arg=...\n    ARG os=linux\n    RUN ...\n    SAVE ARTIFACT ./output\nbuild-for-windows:\n    BUILD +build --some_arg=... --another_arg=... --os=windows\n```\n\n----------------------------------------\n\nTITLE: Corrected Earthfile for Integration Testing\nDESCRIPTION: The fixed version of the Docker integration test Earthfile. It corrects the grep pattern to match 'Hello' with an uppercase H instead of 'hello', aligning with the actual response from the server.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/debugging.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Earthfile\n\nVERSION 0.8\n\nserver:\n  COPY server.py .\n\ntest:\n  FROM docker:19.03.12-dind\n  RUN apk add curl\n  WITH DOCKER --load server:latest=+server\n    RUN docker run --rm -d --network=host server:latest python3 server.py && sleep 5 && curl -s localhost:8000 | grep Hello\n  END\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Values via Environment Variables\nDESCRIPTION: Demonstrates how to set a secret value through an environment variable. When the secret value is omitted from the command line, Earthly will look for an environment variable with the same name.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/secrets.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport passwd=itsasecret\nearthly --secret passwd +hush\n```\n\n----------------------------------------\n\nTITLE: Using BUILD command with overridden ARG values\nDESCRIPTION: Examples of using the BUILD command with overridden ARG values in an Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_22\n\nLANGUAGE: Dockerfile\nCODE:\n```\nBUILD +binary --NAME=john\nCOPY (+binary/bin --NAME=john) ./\nFROM +docker-image --NAME=john\n```\n\n----------------------------------------\n\nTITLE: Running Earthly Container with Embedded BuildKit\nDESCRIPTION: Example demonstrating Earthly container usage with embedded BuildKit daemon. Requires privileged mode and temporary volume mount.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/docker-images/all-in-one.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --privileged -t -v $(pwd):/workspace -v earthly-tmp:/tmp/earthly:rw earthly/earthly:v0.8.13 +for-linux\n```\n\n----------------------------------------\n\nTITLE: Checking Satellite Status\nDESCRIPTION: This command allows you to view information about a satellite's current state, including utilization, version, and cache information.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat inspect <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Basic Earthly Build Process with Base Image\nDESCRIPTION: A simple Earthfile showing a base image that installs Pandoc and other utilities, which is then used in a build target.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_56\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbase:\n    FROM ruby:2.7\n    ARG TARGETARCH\n    WORKDIR /site\n    ...\n    RUN apt-get install pandoc  pandocfilters -y\n\nbuild:\n    FROM +base\n    # Build blog\n```\n\n----------------------------------------\n\nTITLE: Using Build Args with COPY Command\nDESCRIPTION: Example syntax for passing build arguments to a target when copying artifacts. Note that the artifact reference and build args must be surrounded by parentheses.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_14\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCOPY (+target1/artifact --arg1=foo --arg2=bar) ./dest/path\n```\n\n----------------------------------------\n\nTITLE: Docker Image Loading Example\nDESCRIPTION: Shows how to build and load a custom Docker image within an Earthly build using WITH DOCKER --load flag.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nmy-hello-world:\n    FROM ubuntu\n    CMD echo \"hello world\"\n    SAVE IMAGE my-hello:latest\n\nhello:\n    FROM earthly/dind:alpine-3.19-docker-25.0.5-r0\n    WITH DOCKER --load hello:latest=+my-hello-world\n        RUN docker run hello:latest\n    END\n```\n\n----------------------------------------\n\nTITLE: Adding Earthly to Existing Docker Image\nDESCRIPTION: This snippet shows how to add Earthly to an existing Docker image. It demonstrates downloading the Earthly binary, making it executable, and bootstrapping it.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/build-an-earthly-ci-image.md#2025-04-21_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nRUN wget https://github.com/earthly/earthly/releases/download/v0.8.13/earthly-linux-amd64 -O /usr/local/bin/earthly && \\\n    chmod +x /usr/local/bin/earthly && \\\n    /usr/local/bin/earthly bootstrap\n```\n\n----------------------------------------\n\nTITLE: Earthfile Referencing Remote Repository Target (Dockerfile)\nDESCRIPTION: An Earthfile demonstrating how to reference a target from an Earthfile in a remote GitHub repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-5-importing.md#2025-04-21_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    FROM github.com/example/project+remote-target\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example AS LOCAL local-output/go-example\n```\n\n----------------------------------------\n\nTITLE: Saving artifacts locally with different patterns\nDESCRIPTION: Examples of saving artifacts locally using different patterns and their resulting output structure.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_26\n\nLANGUAGE: Dockerfile\nCODE:\n```\nWORKDIR base\nCOPY test .\n\n# This will copy the base folder into the output directory.\n# You would find file at out-dot/base/file.\nSAVE ARTIFACT . AS LOCAL out-dot/\n\n# This will copy the contents of the base folder into the output directory.\n# You would find sub-file at out-glob/file. Note the base directory is not in the output.\nSAVE ARTIFACT ./* AS LOCAL out-glob/\n```\n\n----------------------------------------\n\nTITLE: Artifact Importing in Earthfile\nDESCRIPTION: Shows how to save and copy artifacts between targets in the same Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/importing.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\ntarget1:\n    RUN echo \"Hello World\" > out.txt\n    SAVE ARTIFACT out.txt\n\ntarget2:\n    COPY +my-target/out.txt ./\n```\n\n----------------------------------------\n\nTITLE: Global ARG Inheritance in Functions\nDESCRIPTION: Shows how global ARGs are inherited from the base target of the same Earthfile where the function is defined, which may be different from the caller's base target.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/functions.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\n\nARG --global a_global_var=value-in-global\n\nbuild:\n    # prints \"value-in-global\"\n    DO +PRINT_VAR\n\nPRINT_VAR:\n    FUNCTION\n    RUN echo \"$a_global_var\"\n```\n\n----------------------------------------\n\nTITLE: Controlling Local Artifact Output Order with WAIT in Earthfile\nDESCRIPTION: Example of using the WAIT command to control the order in which a local artifact is saved and then used in a subsequent command in an Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_44\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN ./generate > data\nWAIT\n  SAVE ARTIFACT data AS LOCAL output/data\nEND\nRUN ./test data # even if this fails, data will have been output\n```\n\n----------------------------------------\n\nTITLE: Saving Files Locally with AS LOCAL\nDESCRIPTION: Example showing how to save files from an Earthly build to the local filesystem using the AS LOCAL modifier with SAVE ARTIFACT.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example AS LOCAL local-output/go-example\n```\n\n----------------------------------------\n\nTITLE: Saving multiple image names\nDESCRIPTION: Examples of saving multiple image names using the SAVE IMAGE command.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_27\n\nLANGUAGE: Dockerfile\nCODE:\n```\nSAVE IMAGE my-image:latest my-image:1.0.0 my-example-registry.com/another-image:latest\n```\n\nLANGUAGE: Dockerfile\nCODE:\n```\nSAVE IMAGE my-image:latest\nSAVE IMAGE my-image:1.0.0\nSAVE IMAGE my-example-registry.com/another-image:latest\n```\n\n----------------------------------------\n\nTITLE: Correct File Copying From Target to LOCALLY Target\nDESCRIPTION: The proper approach to copy files from a regular target to a LOCALLY target using artifact references to establish the correct dependency order.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_30\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Good\nall:\n    BUILD +run-locally\ndep:\n    FROM alpine:3.18\n    WORKDIR /work\n    RUN echo \"Hello World\" > ./my-artifact.txt\n    SAVE ARTIFACT ./my-artifact.txt\nrun-locally:\n    LOCALLY\n    COPY +dep/my-artifact.txt ./build/my-artifact.txt\n    RUN echo ./build/my-artifact.txt\n```\n\n----------------------------------------\n\nTITLE: Launching Docker Container for Self-Hosted Satellite\nDESCRIPTION: Command to start a self-managed satellite using Docker with required environment variables and volume mounting for cache storage.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/self-hosted.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --privileged \\\n    -v satellite-cache:/tmp/earthly:rw \\\n    -p 8372:8372 \\\n    -e EARTHLY_TOKEN=GuFna*****nve7e \\ \n    -e EARTHLY_ORG=my-org \\\n    -e SATELLITE_NAME=my-satellite \\\n    -e SATELLITE_HOST=153.65.8.0 \\\n  earthly/satellite:v0.8.13\n```\n\n----------------------------------------\n\nTITLE: Inefficient Layer Caching Example in Earthly\nDESCRIPTION: Example showing suboptimal caching strategy where copying all files at once can trigger unnecessary cache invalidation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/caching/caching-in-earthfiles.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Avoid\nCOPY . .\nRUN go mod download\nRUN go build ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify for Next.js Deployment\nDESCRIPTION: This Netlify configuration file specifies the Next.js plugin, build command, publish directory, and sets up a redirect for static assets. It's essential for proper deployment and functioning of the Next.js site on Netlify.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/next-js-netlify/README.md#2025-04-21_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n[[plugins]]\npackage = \"@netlify/plugin-nextjs\"\n\n[build]\ncommand = \"npm run build\"\npublish = \".next\"\n\n[[redirects]]\nfrom = \"/_next/static/*\"\nto = \"/static/:splat\"\nstatus = 200\nforce = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Version 0.7 Features in Earthfile\nDESCRIPTION: This snippet shows how to enable version 0.7 features in an Earthfile by declaring the version and specifying various flags.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: earthfile\nCODE:\n```\nVERSION \\\n  --explicit-global \\\n  --check-duplicate-images \\\n  --earthly-version-arg \\\n  --use-cache-command \\\n  --use-host-command \\\n  --use-copy-link \\\n  --new-platform \\\n  --no-tar-build-output \\\n  --use-no-manifest-list \\\n  --use-chmod \\\n  --shell-out-anywhere \\\n  --earthly-locally-arg \\\n  --use-project-secrets \\\n  --use-pipelines \\\n  --earthly-git-author-args \\\n  0.6\n```\n\n----------------------------------------\n\nTITLE: Running LocalStack with Terraform using Earthly\nDESCRIPTION: This command runs LocalStack and applies Terraform configurations locally. It requires privileged mode for DIND and saves the .tfstate file.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/terraform/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly -P +localstack\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Python Project\nDESCRIPTION: This Docker Compose file sets up a PostgreSQL database service for the Python project. It defines environment variables, ports, and networking configuration for the database container.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\nversion: \"3.9\"\n   \nservices:\n  db:\n    image: postgres\n    container_name: db\n    hostname: postgres\n    environment:\n      - POSTGRES_DB=test_db\n      - POSTGRES_USER=earthly\n      - POSTGRES_PASSWORD=password\n    ports:\n      - 5432:5432\n    networks:\n      - python/part6_default\n\nnetworks:\n  python/part6_default:\n```\n\n----------------------------------------\n\nTITLE: JavaScript Project Build Configuration with Earthly\nDESCRIPTION: Earthly build configuration for a JavaScript application, including build and Docker image creation steps.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_8\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM node:13.10.1-alpine3.11\nWORKDIR /js-example\n\nbuild:\n    # In JS, there's nothing to build in this simple form.\n    # The source is also the artifact used in production.\n    COPY src/index.js .\n    SAVE ARTIFACT index.js /dist/index.js\n\ndocker:\n    COPY +build/dist dist\n    ENTRYPOINT [\"node\", \"./dist/index.js\"]\n    SAVE IMAGE js-example:latest\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Values via EARTHLY_SECRETS Environment Variable\nDESCRIPTION: Shows how to use the EARTHLY_SECRETS environment variable to specify secrets. Multiple secrets can be provided by separating them with commas, offering a way to set multiple secrets at once.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/secrets.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport EARTHLY_SECRETS=\"passwd=itsasecret\"\nearthly +hush\n```\n\n----------------------------------------\n\nTITLE: Initializing Build Environment for IF Statement in Earthfile\nDESCRIPTION: Demonstrates how to properly initialize a build environment to use an IF condition in an Earthfile. The IF condition requires a valid build environment to execute.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_40\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG base=alpine\nFROM busybox\nIF [ \"$base\" = \"alpine\" ]\n    FROM alpine:3.18\nELSE\n    FROM ubuntu:20.04\nEND\n```\n\n----------------------------------------\n\nTITLE: Earthfile for Go Project with Basic Caching (Dockerfile)\nDESCRIPTION: An Earthfile that defines build and docker targets for a Go project, with basic dependency caching.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-3-adding-dependencies-with-caching.md#2025-04-21_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM golang:1.15-alpine3.13\nWORKDIR /go-workdir\n\nbuild:\n    COPY go.mod go.sum .\n    RUN go mod download\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example AS LOCAL local-output/go-example\n\ndocker:\n    COPY +build/example .\n    ENTRYPOINT [\"/go-workdir/example\"]\n    SAVE IMAGE go-example:latest\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Jenkins Runner Image with Earthly\nDESCRIPTION: This Dockerfile snippet demonstrates how to create a custom Jenkins runner image based on the earthly/earthly image. It installs necessary dependencies and the Jenkins agent jar.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/jenkins.md#2025-04-21_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nARG VERSION=4.9\nRUN apk add --update --no-cache curl bash git git-lfs openssh-client openssl procps \\\n  && curl --create-dirs -fsSLo /usr/share/jenkins/agent.jar https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/${VERSION}/remoting-${VERSION}.jar \\\n  && chmod 755 /usr/share/jenkins \\\n  && chmod 644 /usr/share/jenkins/agent.jar \\\n  && ln -sf /usr/share/jenkins/agent.jar /usr/share/jenkins/slave.jar \\\n  && apk del curl\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Trust Policy for Earthly OIDC\nDESCRIPTION: JSON configuration for an AWS IAM trust policy that enables Earthly to assume a role using OIDC authentication. This defines conditions for allowing access based on the Earthly organization and project.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/oidc.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Federated\": \"<oidc-provider-name>\"\n      },\n      \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"api.earthly.dev:aud\": \"sts.amazonaws.com\",\n          \"api.earthly.dev:sub\": \"<earthly-org>/<earthly-project>\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-line Commands Using Line Continuation\nDESCRIPTION: The proper way to execute multi-line commands in Earthly using the line continuation character (\\) and chaining commands with && to ensure proper error handling.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_42\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN go build ... && \\\n    if [ \"$FOO\" = \"bar\" ]; then \\\n        echo \"spaghetti\" > ./default-food.txt ;\\\n    fi\n```\n\n----------------------------------------\n\nTITLE: Using Docker-Build with Satellite\nDESCRIPTION: Example of using the docker-build command with an Earthly satellite for remote building.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\nearthly docker-build --sat my-satellite --tag my-image:latest .\n```\n\n----------------------------------------\n\nTITLE: Inefficient Dependency Handling Example in Earthfiles\nDESCRIPTION: An example showing how copying all files at once can cause unnecessary rebuilds when unrelated files change.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Avoid\nCOPY . .\nRUN go mod download\nRUN go build ...\n```\n\n----------------------------------------\n\nTITLE: Controlling Execution Order with WAIT in Earthfile\nDESCRIPTION: Example of using the WAIT command to control the order of image builds, pushes, and deployment script execution in an Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_43\n\nLANGUAGE: Dockerfile\nCODE:\n```\nmyimage:\n  ...\n  SAVE IMAGE --push user/img:tag\n\nmyotherimage:\n  ...\n  SAVE IMAGE --push user/otherimg:tag\n\nWAIT\n  BUILD +myimg\n  BUILD +myotherimg\nEND\nRUN --push ./deploy ...\n```\n\n----------------------------------------\n\nTITLE: Declaring VERSION 0.7 with Equivalent Feature Flags\nDESCRIPTION: Shows the feature flags that are automatically enabled when using VERSION 0.7. This includes various features that were previously in experimental or beta status.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: Earthfile\nCODE:\n```\nVERSION \\\n  --check-duplicate-images \\\n  --earthly-git-author-args \\\n  --earthly-locally-arg \\\n  --earthly-version-arg \\\n  --explicit-global \\\n  --new-platform \\\n  --no-tar-build-output \\\n  --save-artifact-keep-own \\\n  --shell-out-anywhere \\\n  --use-cache-command \\\n  --use-chmod \\\n  --use-copy-link \\\n  --use-host-command \\\n  --use-no-manifest-list \\\n  --use-pipelines \\\n  --use-project-secrets \\\n  --wait-block \\\n  0.6\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function with DO Command\nDESCRIPTION: Example of calling the MY_COPY function from a target using the DO command. Shows how files created within the function are available to the caller after execution.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/functions.md#2025-04-21_snippet_1\n\nLANGUAGE: Earthfile\nCODE:\n```\nbuild:\n    FROM alpine:3.18\n    WORKDIR /function-example\n    RUN echo \"hello\" >./foo\n    DO +MY_COPY --src=./foo --dest=./bar\n    RUN cat ./bar # prints \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Size Limits in Earthly YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify custom cache size limits in the Earthly configuration file. It sets both the maximum cache size in megabytes and the percentage of available space to use.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/caching/managing-cache.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  cache_size_mb: 30000\n  cache_size_pct: 70\n```\n\n----------------------------------------\n\nTITLE: Alternative to Docker Build in Earthly\nDESCRIPTION: This snippet demonstrates how to use Earthly's FROM DOCKERFILE command as an alternative to 'docker build', which provides better caching and output options.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/docker-in-earthly.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM DOCKERFILE .\nSAVE IMAGE my-image:latest\n```\n\n----------------------------------------\n\nTITLE: Earthly Build Configuration\nDESCRIPTION: Earthfile configuration for building and containerizing the C++ application with proper caching and Docker image creation.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/cpp/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.7\nFROM ubuntu:20.10\n\n# configure apt to be noninteractive\nENV DEBIAN_FRONTEND noninteractive\nENV DEBCONF_NONINTERACTIVE_SEEN true\n\n# install dependencies\nRUN apt-get update && apt-get install -y build-essential cmake\n\nWORKDIR /code\n\ncode:\n  COPY src src\n\nbuild:\n  FROM +code\n  RUN cmake src\n  # cache cmake temp files to prevent rebuilding .o files\n  # when the .cpp files don't change\n  RUN --mount=type=cache,target=/code/CMakeFiles make\n  SAVE ARTIFACT fibonacci AS LOCAL fibonacci\n\ndocker:\n  COPY +build/fibonacci /bin/fibonacci\n  ENTRYPOINT [\"/bin/fibonacci\"]\n  SAVE IMAGE --push earthly/examples:cpp\n```\n\n----------------------------------------\n\nTITLE: Basic Earthfile for Python Application Testing\nDESCRIPTION: An Earthfile that sets up a Python environment to test a phrase generator script. It downloads a text corpus, copies the Python script, installs the required dependencies, and runs the script.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Earthfile\n\nVERSION 0.8\nFROM python:3\nWORKDIR /code\n\ntest:\n  RUN curl https://raw.githubusercontent.com/jsvine/markovify/master/test/texts/sherlock.txt > /sherlock.txt\n  COPY generate_phrase.py .\n  RUN pip3 install markovify\n  RUN python3 generate_phrase.py\n```\n\n----------------------------------------\n\nTITLE: Pulling Images from ACR with Earthfile\nDESCRIPTION: Earthfile configuration demonstrating how to pull and run images from Azure Container Registry using the Docker-in-Docker pattern.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/azure-acr.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM earthly/dind:alpine-main\n\nrun:\n    WITH DOCKER --pull helloearthly.azurecr.io/hello-earthly:with-love\n        RUN docker run helloearthly.azurecr.io/hello-earthly:with-love\n    END\n```\n\n----------------------------------------\n\nTITLE: Copying Files with Platform Specification in Earthly\nDESCRIPTION: Shows how to copy files from a target with platform specification and build arguments in Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_31\n\nLANGUAGE: Dockerfile\nCODE:\n```\nmy-target:\n    COPY --platform=linux/amd64 (+some-target/some-file.txt --FOO=bar) ./\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret Value in Earthly\nDESCRIPTION: These commands list secrets and then retrieve a specific secret value from an Earthly project.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/cloud-secrets.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nearthly secret --project <project-name> ls\nearthly secret --project <project-name> get my_key\n```\n\n----------------------------------------\n\nTITLE: Launching Earthly Satellites\nDESCRIPTION: Command syntax for launching new Earthly Satellites with options for personal or organizational contexts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] satellite launch <satellite-name>\n\nearthly [options] satellite [--org <organization-name>] launch <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Target for Multiple Libraries in Earthfile\nDESCRIPTION: Example Earthfile configuration for building multiple libraries in a single target, which might be too resource-intensive for a single satellite.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/best-practices.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuild-all:\n  BUILD +library-1\n  BUILD +library-2\n```\n\n----------------------------------------\n\nTITLE: Simple Go Hello World Application\nDESCRIPTION: Basic Go program that prints 'hello world', used as the main application code for the Earthly build example\nSOURCE: https://github.com/earthly/earthly/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"hello world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Image to ACR with Earthfile\nDESCRIPTION: Earthfile configuration for building a simple Alpine-based image and pushing it to Azure Container Registry. Creates a container that outputs a hello message.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/azure-acr.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:3.18\n\nbuild:\n    RUN echo \"Hello from Earthly!\" > motd\n    ENTRYPOINT cat motd\n    SAVE IMAGE --push helloearthly.azurecr.io/hello-earthly:with-love\n```\n\n----------------------------------------\n\nTITLE: Python PostgreSQL Connection Test\nDESCRIPTION: This Python unit test checks the connection to a PostgreSQL database using psycopg2. It verifies that the connection is active by asserting that the connection is not closed.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nimport unittest\nimport psycopg2\n\nclass MyIntegrationTests(unittest.TestCase):\n\n    def test_db_connection_active(self):\n        connection = psycopg2.connect(\n            host=\"postgres\",\n            database=\"test_db\",\n            user=\"earthly\",\n            password=\"password\")\n        \n        self.assertEqual(connection.closed, 0)\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Declaring Project for Cloud Secrets in Earthfile\nDESCRIPTION: This Dockerfile snippet shows how to declare the project for cloud secrets at the top of an Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/cloud-secrets.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nPROJECT <org-name>/<project-name>\n```\n\n----------------------------------------\n\nTITLE: Building Multi-platform Docker Images\nDESCRIPTION: Example of building and pushing a Docker image for a specific platform (ARM64) from a Dockerfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nearthly docker-build --dockerfile Dockerfile --platform linux/arm64 --tag {DOCKER_TAG} --push ./myDockerfiles\n```\n\n----------------------------------------\n\nTITLE: Feature Flag for Conditional Save Operations\nDESCRIPTION: The referenced-save-only flag modifies how SAVE commands behave by only outputting artifacts and images that are connected to the main target through BUILD command chains. This provides more controlled and predictable artifact management.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/features.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n--referenced-save-only\n```\n\n----------------------------------------\n\nTITLE: Java Earthfile with Build and Docker Targets (Dockerfile)\nDESCRIPTION: An Earthfile for a Java project demonstrating build and docker targets, including referencing a subdirectory target and using Gradle.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-5-importing.md#2025-04-21_snippet_9\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM openjdk:8-jdk-alpine\nRUN apk add --update --no-cache gradle\nWORKDIR /java-example\n\nbuild:\n    FROM ./services/service-one+deps\n    COPY src src\n    RUN gradle build\n    RUN gradle install\n    SAVE ARTIFACT build/install/java-example/bin AS LOCAL build/bin\n    SAVE ARTIFACT build/install/java-example/lib AS LOCAL build/lib\n\ndocker:\n    COPY +build/bin bin\n    COPY +build/lib lib\n    ARG tag='latest'\n    ENTRYPOINT [\"/java-example/bin/java-example\"]\n    SAVE IMAGE java-example:$tag\n```\n\n----------------------------------------\n\nTITLE: Python Earthfile Example\nDESCRIPTION: Complete Earthfile example for a Python project, demonstrating dependency management and ARG usage.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-4-args.md#2025-04-21_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM python:3\nWORKDIR /code\n\ndeps:\n    RUN pip install wheel\n    COPY requirements.txt ./\n    RUN pip wheel -r requirements.txt --wheel-dir=wheels\n    SAVE ARTIFACT wheels /wheels\n\nbuild:\n    FROM +deps\n    COPY src src\n    SAVE ARTIFACT src /src\n\ndocker:\n    COPY +deps/wheels wheels\n    COPY +build/src src\n    COPY requirements.txt ./\n    ARG tag='latest'\n    RUN pip install --no-index --find-links=wheels -r requirements.txt\n    ENTRYPOINT [\"python3\", \"./src/hello.py\"]\n    SAVE IMAGE python-example:$tag\n```\n\n----------------------------------------\n\nTITLE: Equivalent COPY Commands with Glob Pattern\nDESCRIPTION: Demonstration of how a glob pattern in a COPY command can be expanded into multiple individual COPY commands targeting specific Earthfiles.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_12\n\nLANGUAGE: Earthfile\nCODE:\n```\n    COPY ./services/service1+mocks .\n    COPY ./services/service2+mocks .\n    COPY ./services/service3+mocks .\n```\n\n----------------------------------------\n\nTITLE: Copying Symbolic Links Between Targets\nDESCRIPTION: Example showing how to copy symbolic links from one target to another using the --symlink-no-follow option. This option must be specified in both the SAVE ARTIFACT and COPY commands.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_15\n\nLANGUAGE: Dockerfile\nCODE:\n```\nproducer:\n    RUN ln -s nonexistentfile symlink\n    SAVE ARTIFACT --symlink-no-follow symlink\n\nconsumer:\n    COPY --symlink-no-follow +producer/symlink\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Notation for Secrets in Earthfiles\nDESCRIPTION: Shows the shorthand syntax for when the environment variable name matches the secret ID. This simplified approach reduces verbosity when the secret name and environment variable should be identical.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/secrets.md#2025-04-21_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:latest\nhush:\n    RUN --secret passwd echo \"my password is $passwd\"\n```\n\n----------------------------------------\n\nTITLE: Launching Earthly-Cloud Satellite with GitHub Actions Runner Enabled\nDESCRIPTION: Command to launch an Earthly-Cloud satellite with the GitHub Actions runner feature enabled using a feature flag.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/gha-runners.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nearthly satellite launch --feature-flag enable-gha-runner <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Values via .secret File\nDESCRIPTION: Demonstrates using a .secret file to store secret values. This approach allows storing secrets in a file that Earthly will automatically read from the directory where it's executed.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/secrets.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nearthly +hello\n```\n\n----------------------------------------\n\nTITLE: Basic Earthfile Base Recipe Example\nDESCRIPTION: Demonstrates the implicit base recipe structure in Earthfiles, showing how all targets implicitly inherit from the base target using an implicit FROM +base directive.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/target-ref.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# base recipe\nFROM golang:1.15-alpine3.13\nWORKDIR /go-example\n\nbuild:\n    # implicit FROM +base\n    RUN echo \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Clearing Satellite Cache by Recreating Instance\nDESCRIPTION: This command relaunches the satellite instance with an empty cache volume. It can be faster than using the prune command for large caches.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nearthly satellite update --drop-cache my-satellite\n```\n\n----------------------------------------\n\nTITLE: Using BUILD Command to Produce Referenced Target Outputs\nDESCRIPTION: Earthfile demonstrating how to use the BUILD command to ensure outputs from referenced targets are still produced when running the referencing target.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example AS LOCAL local-output/go-example\n\ndocker:\n    BUILD +build\n    COPY +build/example .\n    ENTRYPOINT [\"/go-workdir/example\"]\n    SAVE IMAGE go-example:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in .env File\nDESCRIPTION: Example of setting environment variables in a .env file. These variables configure Earthly options and behavior without requiring command-line flags.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_4\n\nLANGUAGE: env\nCODE:\n```\n# Settings\nEARTHLY_ALLOW_PRIVILEGED=true\nEARTHLY_VERBOSE=true\n```\n\n----------------------------------------\n\nTITLE: Passing ARGs in FROM, BUILD, and COPY (Earthly Dockerfile)\nDESCRIPTION: Demonstrates how to pass ARGs when using FROM, BUILD, and COPY commands in an Earthly Dockerfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-4-args.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\ndocker:\n    ARG tag='latest'\n    COPY +build/example .\n    ENTRYPOINT [\"/go-workdir/example\"]\n    SAVE IMAGE go-example:$tag\n\nwith-build:\n    BUILD +docker --tag='my-new-image-tag'\n\nwith-from:\n    FROM +docker --tag='my-new-image-tag'\n\nbuild:\n    ARG version\n    COPY main.go .\n    RUN go build -o output/example-$version main.go\n    SAVE ARTIFACT output/example-$version AS LOCAL local-output/go-example\n\nwith-copy:\n    COPY (+build/example --version='1.0') .\n```\n\n----------------------------------------\n\nTITLE: Advanced BuildKit Registry Configuration in YAML\nDESCRIPTION: This YAML snippet shows advanced BuildKit options for configuring registries in Earthly. It includes settings for mirrors, HTTP/HTTPS, insecure connections, CA certificates, and key pairs for authentication.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/self-signed.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  buildkit_additional_config: |\n    [registry.\"<registry-hostname>\"]\n      mirrors = [\"<mirror>\"]\n      http = true|false\n      insecure = true|false\n      ca=[\"<ca-path-pem>\"]\n      [[registry.\"<registry-hostname>\".keypair]]\n        key=\"<key-path-pem>\"\n        cert=\"<cert-path-pem>\"\n```\n\n----------------------------------------\n\nTITLE: Earthly Build Command for Pushing to Artifact Registry\nDESCRIPTION: The command-line output of building and pushing an image to GCP Artifact Registry using Earthly with the --push flag.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/gcp-artifact-registry.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n❯ earthly --push +build\n           buildkitd | Found buildkit daemon as docker container (earthly-buildkitd)\n         alpine:3.18 | --> Load metadata linux/amd64\n               +base | --> FROM alpine:3.18\n               +base | [██████████] resolve docker.io/library/alpine:3.18@sha256:0bd0e9e03a022c3b0226667621da84fc9bf562a9056130424b5bfbd8bcb0397f ... 100%\n              +build | --> RUN echo \"Hello from Earthly!\" > motd\n              output | --> exporting outputs\n              output | [██████████] exporting layers ... 100%\n              output | [██████████] exporting manifest sha256:08f310b4520418a60f7c12b168167ea22b886bc03d43ab87058e959ef5c14cf2 ... 100%\n              output | [██████████] exporting config sha256:8a54361d584a6a51f0136b9ae1526aba8f99cc0a1583954b0f206d3a472eaac9 ... 100%\n              output | [██████████] pushing layers ... 100%\n              output | [██████████] pushing manifest for <region>-docker.pkg.dev/<project>/hello-earthly/hello-earthly:with-love ... 100%\n              output | [██████████] sending tarballs ... 100%\n2bc1eb057e55: Loading layer [==================================================>]     187B/187B\n=========================== SUCCESS ===========================\nLoaded image: <region>-docker.pkg.dev/<project>/hello-earthly/hello-earthly:with-love\n              +build | Image +build as <region>-docker.pkg.dev/<project>/hello-earthly/hello-earthly:with-love (pushed)\n\n\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Build Configuration in Dockerfile\nDESCRIPTION: Example Earthfile configuration showing how to set up multi-platform builds using a wrapping target and BUILD command.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild-all-platforms:\n  BUILD --platform=linux/amd64 --platform=linux/arm/v7 +build\n\nbuild:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Integration Testing Database Connection in Scala\nDESCRIPTION: Integration test that verifies database connectivity and data retrieval functionality using the PostgreSQL database.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/integration.md#2025-04-21_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nclass DatabaseIntegrationTest extends FlatSpec {\n  implicit val cs = IO.contextShift(ExecutionContext.global)\n\n  val xa = Transactor.fromDriverManager[IO](\n    \"org.postgresql.Driver\", \n    \"jdbc:postgresql://localhost:5432/iso3166\", \n    \"postgres\",\n    \"postgres\"\n  )\n\n  \"A table\" should \"have country data\" in {\n    val dal = new DataAccessLayer()\n    assert(dal.countries(5).transact(xa).unsafeRunSync.size == 5)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Example with Base Recipe\nDESCRIPTION: Demonstrates the implicit base recipe concept and target inheritance.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/importing.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# base recipe\nFROM golang:1.15-alpine3.13\nWORKDIR /go-example\n\nbuild:\n    # implicit FROM +base\n    RUN echo \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Earthfile for Docker-in-Docker Integration Testing\nDESCRIPTION: An Earthfile that sets up a Docker-in-Docker environment for integration testing. It builds a server image, runs it in a container, and tests connectivity by making a HTTP request and checking the response.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/debugging.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Earthfile\n\nVERSION 0.8\n\nserver:\n  COPY server.py .\n\ntest:\n  FROM docker:19.03.12-dind\n  RUN apk add curl\n  WITH DOCKER --load server:latest=+server\n    RUN docker run --rm -d --network=host server:latest python3 server.py && sleep 5 && curl -s localhost:8000 | grep hello\n  END\n```\n\n----------------------------------------\n\nTITLE: Using Earthly's HOST Command\nDESCRIPTION: Example of the experimental HOST command which adds additional hosts during build execution. This feature must be explicitly enabled in the VERSION directive.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nHOST <domain> <ip>\n```\n\n----------------------------------------\n\nTITLE: Running an Earthly Target to Pull from Artifact Registry\nDESCRIPTION: The command-line output of running an Earthly target that pulls and executes a Docker image from GCP Artifact Registry, showing the authentication and execution process.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/gcp-artifact-registry.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n❯ earthly -P +run\n           buildkitd | Found buildkit daemon as docker container (earthly-buildkitd)\n  e/dind:alpine-main | --> Load metadata linux/amd64\nu/e/h/hello-earthly:with-love | --> Load metadata linux/amd64\nu/e/h/hello-earthly:with-love | --> DOCKER PULL <region>-docker.pkg.dev/<project>/hello-earthly/hello-earthly:with-love\nu/e/h/hello-earthly:with-love | [          ] resolve <region>-docker.pkg.dev/<project>/hello-earthly/hello-earthly:with-love@sha256:08f310b4520418a60f7c12b168167ea22b886bc03d43ab87058e959ef5c14cf2 ... 0%                               [██████████] resolve <region>-docker.pkg.dev/<project>/hello-earthly/hello-earthly:with-love@sha256:08f310b4520418a60f7c12b168167ea22b886bc03d43ab87058e959ef5c14cf2 ... 100%\n               +base | --> FROM earthly/dind:alpine-main\n               +base | [██████████] resolve docker.io/earthly/dind:alpine-main@sha256:09f497f0114de1f3ac6ce2da05568fcb50b0a4fd8b9025ed7c67dc952d092766 ... 100%\n                +run | *cached* --> WITH DOCKER (install deps)\n                +run | *cached* --> WITH DOCKER RUN docker run <region>-docker.pkg.dev/<project>/hello-earthly/hello-earthly:with-love\n              output | --> exporting outputs\n              output | [██████████] sending tarballs ... 100%\n=========================== SUCCESS ===========================\n```\n\n----------------------------------------\n\nTITLE: Setting Up GCP Registry Authentication\nDESCRIPTION: Examples of configuring Earthly to use Google Cloud Platform credentials for authenticating with GCP artifact or container registries.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nearthly registry setup --cred-helper gcloud --gcp-key <key> <host>\n\nearthly registry --org <org> --project setup <project> --cred-helper gcloud --gcp-service-account-key <key> <host>\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Token for CI Access\nDESCRIPTION: Command to create a login token for accessing Earthly Satellites in CI environments.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nearthly account create-token <token-name>\n```\n\n----------------------------------------\n\nTITLE: Specifying Platform in FROM Instruction\nDESCRIPTION: Example of using the --platform flag with the FROM instruction to specify a target platform for an image. This creates an image based on Alpine 3.18 for ARM v7 architecture.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM --platform=linux/arm/v7 alpine:3.18\n```\n\n----------------------------------------\n\nTITLE: Managing User-Specific Secrets in Earthly\nDESCRIPTION: These commands demonstrate how to list, set, and retrieve user-specific secrets in Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/cloud-secrets.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nearthly secret ls /user\nearthly secret set /user/my_private_key 'hello private world'\nearthly secret ls /user\nearthly secret get /user/my_private_key\n```\n\n----------------------------------------\n\nTITLE: Running Multi-platform Example Images with Docker\nDESCRIPTION: Commands to run the multiplatform example from the Earthly GitHub repository without cloning it locally. These commands build the example and run containers for different architecture variants.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nearthly github.com/earthly/earthly/examples/multiplatform:main+all\ndocker run --rm earthly/examples:multiplatform\ndocker run --rm earthly/examples:multiplatform_linux_amd64\ndocker run --rm earthly/examples:multiplatform_linux_arm_v7\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Mirror Configuration\nDESCRIPTION: JSON configuration for Docker daemon to use a registry mirror.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/pull-through-cache.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"registry-mirrors\" : [\"http://192.168.0.80:5000\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Earthly Command for Building and Pushing to ECR\nDESCRIPTION: Terminal command and output showing how to build and push an image to ECR using Earthly. Demonstrates successful authentication and pushing via the ECR credential helper.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/aws-ecr.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n❯ earthly --push +build\n           buildkitd | Found buildkit daemon as docker container (earthly-buildkitd)\n         alpine:3.18 | --> Load metadata linux/amd64\n               +base | --> FROM alpine:3.18\n               +base | [██████████] resolve docker.io/library/alpine:3.18@sha256:0bd0e9e03a022c3b0226667621da84fc9bf562a9056130424b5bfbd8bcb0397f ... 100%\n              +build | --> RUN echo \"Hello from Earthly!\" > motd\n              output | --> exporting outputs\n              output | [██████████] exporting layers ... 100%\n              output | [██████████] exporting manifest sha256:9ab4df74dafa2a71d71e39e1af133d110186698c78554ab000159cfa92081de4 ... 100%\n              output | [██████████] exporting config sha256:6feef98708c14c000a6489a2a99315a5328c2c16091851ae10438b53f655d042 ... 100%\n              output | [██████████] pushing layers ... 100%\n              output | [██████████] pushing manifest for <aws_account_id>.dkr.ecr.<region>.amazonaws.com/hello-earthly:with-love ... 100%\n              output | [██████████] sending tarballs ... 100%\n=========================== SUCCESS ===========================\nLoaded image: <aws_account_id>.dkr.ecr.<region>.amazonaws.com/hello-earthly:with-love\n              +build | Image +build as <aws_account_id>.dkr.ecr.<region>.amazonaws.com/hello-earthly:with-love (pushed)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Arguments in .arg File\nDESCRIPTION: Example of defining build arguments in a .arg file. This file contains build argument definitions that can be used by Earthly during build execution.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_3\n\nLANGUAGE: env\nCODE:\n```\n# an example build arg\nMY_SETTING=a setting which contains spaces\n```\n\n----------------------------------------\n\nTITLE: Configuring BYOC Module in Terraform (HCL)\nDESCRIPTION: This snippet demonstrates how to configure the Earthly BYOC module in a Terraform file. It sets up the module with a cloud name and subnet, and defines an output for automatic installation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/byoc/aws/terraform.md#2025-04-21_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"byoc\" {\n  source  = \"earthly/byoc/aws\"\n  version = \"0.0.10\"\n\n  cloud_name = \"my-cloud\"\n  subnet = \"subnet-0123456789abcde01\"\n}\n\noutput \"my-cloud\" {\n  value = module.byoc.automatic_installation\n}\n```\n\n----------------------------------------\n\nTITLE: Handling cgroups v2 in Bash Script\nDESCRIPTION: This bash script snippet shows how to handle cgroups v2 in a custom entrypoint script. It detects cgroups v2 and moves the process to a separate cgroup to prevent resource busy errors.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/build-an-earthly-ci-image.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nif [ -f \"/sys/fs/cgroup/cgroup.controllers\" ]; then\n    echo \"detected cgroups v2; moving pid $$ to subgroup\"\n\n    # move the process under a new cgroup to prevent buildkitd/entrypoint.sh\n    # from getting a \"sh: write error: Resource busy\" error while enabling controllers\n    # via echo +pids > /sys/fs/cgroup/cgroup.subtree_control\n    mkdir -p /sys/fs/cgroup/my-entrypoint\n    echo \"$$\" > /sys/fs/cgroup/my-entrypoint/cgroup.procs\nfi\n```\n\n----------------------------------------\n\nTITLE: Static vs Dynamic ARG Usage in Earthly\nDESCRIPTION: Demonstrates the difference between supported static ARG definitions and unsupported dynamic ARG definitions in auto-skip functionality.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/caching/caching-in-earthfiles.md#2025-04-21_snippet_3\n\nLANGUAGE: earthfile\nCODE:\n```\n# Supported\nARG MY_ARG=foo\nBUILD $MY_ARG\n\n# Not supported\nARG MY_ARG=$(cat ./file)\nBUILD $MY_ARG\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWS ECR and GCP Artifact Registry Logins\nDESCRIPTION: These commands demonstrate how to set up login credentials for AWS ECR and GCP Artifact Registry using Earthly cloud secrets.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/cloud-secrets.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# For AWS ECR\nearthly registry --org <org-name> --project <project-name> setup --cred-helper ecr-login --aws-access-key-id <key> --aws-secret-access-key <secret> <host>\n# For GCP Artifact Registry\nearthly registry --org <org-name> --project <project-name> setup --cred-helper gcloud --gcp-service-account-key <key> <host>\n```\n\n----------------------------------------\n\nTITLE: Pushing to Insecure Registry in Earthfile Dockerfile\nDESCRIPTION: This Earthfile snippet demonstrates how to build and push an image to an insecure registry. It includes the --insecure flag in the SAVE IMAGE command to allow pushing to the insecure registry.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/self-signed.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:3.18\n\nbuild:\n    RUN echo \"Hello from Earthly!\" > motd\n    ENTRYPOINT cat motd\n    SAVE IMAGE --push --insecure <registry-hostname>/hello-earthly:with-love\n```\n\n----------------------------------------\n\nTITLE: Configuring Earthly for Self-signed Certificates in YAML\nDESCRIPTION: This YAML configuration adds self-signed certificates to Earthly. It specifies the BuildKit arguments and additional configuration for the registry, including the path to the CA certificate.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/self-signed.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  buildkit_additional_args: [\"-v\", \"<absolute-path-to-ca-file>:/etc/config/add.ca\"]\n  buildkit_additional_config: |\n    [registry.\"<registry-hostname>\"]\n      ca=[\"/etc/config/add.ca\"]\n```\n\n----------------------------------------\n\nTITLE: Running Earthly Docker Build Target\nDESCRIPTION: Terminal command and output showing how to build the Docker image target using Earthly. The output demonstrates the layered build process, caching, and final image generation.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/go/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n~/workspace/earthly/examples/go ❯ earthly +docker     \nbuildkitd | Found buildkit daemon as docker container (earthly-buildkitd)\ncontext | --> local context .\n+base | --> FROM golang:1.15-alpine3.13\n+base | resolve docker.io/library/golang:1.15-alpine3.13@sha256:7d45a6fc9cde63c3bf41651736996fe94a8347e726fe581926fd8c26e244e3b2 0%\n+base | resolve docker.io/library/golang:1.15-alpine3.13@sha256:7d45a6fc9cde63c3bf41651736996fe94a8347e726fe581926fd8c26e244e3b2 100%\n+base | *cached* --> WORKDIR /go-example\n+build | *cached* --> FROM ([]) +base\ncontext | transferring .: 0%\ncontext | transferring .: 0%\ncontext | transferring .: 100%\n+build | *cached* --> COPY [main.go] .\n+build | *cached* --> RUN [go build -o build/go-example main.go]\n+build | --> SAVE ARTIFACT build/go-example +build/go-example\n+docker | --> COPY ([]) +build/go-example .\n+docker | Target github.com/earthly/earthly/examples/go:docs-vlad-examples+docker built successfully\n=========================== SUCCESS ===========================\n2f7c4d7718b7: Loading layer [==================================================>]  301.3kB/301.3kB\n1e3681958479: Loading layer [==================================================>]     153B/153B\n468765414030: Loading layer [==================================================>]  126.9MB/126.9MB\n88bb86abec1d: Loading layer [==================================================>]     127B/127B\n6309ef8dcbb1: Loading layer [==================================================>]     898B/898B\n66d3e336d237: Loading layer [==================================================>]     914B/914B\n160251c27a86: Loading layer [==================================================>]  1.048MB/1.048MB\nLoaded image: go-example:latest\n+docker | Image github.com/earthly/earthly/examples/go:docs-vlad-examples+docker as go-example:latest\n+build | Artifact github.com/earthly/earthly/examples/go:docs-vlad-examples+build/go-example as local build/go-example\n```\n\n----------------------------------------\n\nTITLE: Simple Earthly Build Example\nDESCRIPTION: An example showing Earthly syntax, though the actual code snippet appears to be truncated in the source text\nSOURCE: https://github.com/earthly/earthly/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: earthly\nCODE:\n```\nearthly\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Mirror for Earthly in GitLab CI/CD\nDESCRIPTION: This YAML snippet shows how to configure a registry mirror for Earthly in GitLab CI/CD. It uses the EARTHLY_ADDITIONAL_BUILDKIT_CONFIG variable to specify the mirror configuration.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/gitlab-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  EARTHLY_ADDITIONAL_BUILDKIT_CONFIG: |-\n    [registry.\"docker.io\"]\n      mirrors = [\"registry-mirror.example.com\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Registry with Username/Password Authentication\nDESCRIPTION: Examples of setting up registry credentials with basic username/password authentication for both personal and project-based secret stores.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] registry setup --username <username> --password <password> [<host>]\n\nearthly [options] registry --org <org> --project <project> setup --username <username> --password <password> [<host>]\n```\n\n----------------------------------------\n\nTITLE: Using Globbing with COPY in Earthfiles\nDESCRIPTION: Example of filesystem structure where globbing can be used to invoke multiple targets from different Earthfiles in a single COPY command. This feature requires enabling via VERSION --wildcard-copy 0.8.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nservices\n├── Earthfile\n├── service1\n│    └── Earthfile\n├── service2\n│   ├── Earthfile\n├── service3\n│   ├── Earthfile\n```\n\n----------------------------------------\n\nTITLE: Running Earthly with Source Code Mount\nDESCRIPTION: Example of running the Earthly container with a volume mount to provide source code access. The command mounts the current directory to the default /workspace path.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/use-earthly-ci-image.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --privileged --rm -v \"$PWD\":/workspace earthly/earthly:v0.8.13 +my-target\n```\n\n----------------------------------------\n\nTITLE: Overriding ARG values in Earthfile commands\nDESCRIPTION: Examples of how to override ARG values when using BUILD, COPY, or FROM commands in an Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_21\n\nLANGUAGE: Dockerfile\nCODE:\n```\nBUILD <target-ref> --<name>=<override-value>\nCOPY (<target-ref>/<artifact-path> --<name>=<override-value>) <dest-path>\nFROM <target-ref> --<name>=<override-value>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git SSH Authentication in Earthly\nDESCRIPTION: YAML configuration for setting up SSH-based Git authentication in Earthly, specifying the authentication mode and user.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/auth.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngit:\n    git.example.com:\n        auth: ssh\n        user: git\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations with RUN --push\nDESCRIPTION: Example showing how to use RUN --push to run database migrations as part of an Earthly build.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_10\n\nLANGUAGE: Dockerfile\nCODE:\n```\nmigrate:\n    FROM +build\n    RUN --push bundle exec rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Building Earthly from Source for macOS with M1 Chip\nDESCRIPTION: Command to build Earthly from source for macOS with M1 (ARM64) systems, producing the binary at ./build/darwin/arm64/earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./earthly +for-darwin-m1\n```\n\n----------------------------------------\n\nTITLE: Secrets Permission Management Command in Earthly CLI\nDESCRIPTION: Command to manage user-level permissions for secrets.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] secrets permission (ls|set|rm)\n```\n\n----------------------------------------\n\nTITLE: Installing Earthly Dependencies on Debian-based Systems in Bash\nDESCRIPTION: This command updates apt and installs required tools to support https-based apt repos for Earthly installation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install \\\n   apt-transport-https \\\n   ca-certificates \\\n   curl \\\n   gnupg \\\n   lsb-release\n```\n\n----------------------------------------\n\nTITLE: Earthfile for Pulling and Running ECR Images\nDESCRIPTION: Earthfile that demonstrates pulling an image from ECR using the WITH DOCKER construct. Shows how to run a container from an ECR image without manual authentication.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/aws-ecr.md#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM earthly/dind:alpine-3.19-docker-25.0.5-r0\n\nrun:\n    WITH DOCKER --pull <aws_account_id>.dkr.ecr.<region>.amazonaws.com/hello-earthly:with-love\n        RUN docker run <aws_account_id>.dkr.ecr.<region>.amazonaws.com/hello-earthly:with-love\n    END\n```\n\n----------------------------------------\n\nTITLE: Selecting Earthly Satellites with select Command\nDESCRIPTION: Command syntax for choosing which Earthly Satellite to use for building applications. Supports both personal and organization contexts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] satellite select <satellite-name>\n\nearthly [options] satellite [--org <organization-name>] select <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Pod Configuration\nDESCRIPTION: Kubernetes Pod specification for deploying a self-hosted satellite with necessary volume mounts and environment variables.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/self-hosted.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-satellite\n  namespace: earthly-satellites\nspec:\n  volumes:\n  - name: earthly-cache\n    emptyDir: {} # or other volume type\n  containers:\n   - name:\n   valueFrom:\n     fieldRef:\n       fieldPath: metadata.name\n      image: earthly/satellite:v0.8.13\n      securityContext:\n        privileged: true\n      ports:\n      - containerPort: 8372\n      volumeMounts:\n      - mountPath: /tmp/earthly\n        name: earthly-cache\n       env:\n       - name: EARTHLY_ORG\n         value: my-org\n       - name: EARTHLY_TOKEN\n         value: u4a*************l92\n       - name: SATELLITE_NAME\n         valueFrom:\n           fieldRef:\n             fieldPath: metadata.name\n       - name: SATELLITE_HOST\n         valueFrom:\n           fieldRef:\n             fieldPath: status.podIP\n```\n\n----------------------------------------\n\nTITLE: Saving Docker Images Locally\nDESCRIPTION: Earthfile example demonstrating how to build a Docker image and save it to the local Docker daemon using SAVE IMAGE.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example\n\ndocker:\n    COPY +build/example .\n    ENTRYPOINT [\"/go-workdir/example\"]\n    SAVE IMAGE go-example:latest\n```\n\n----------------------------------------\n\nTITLE: Using Earthly Image Form Command\nDESCRIPTION: Syntax for executing an Earthly build to output a specific image. This builds the image produced by the referenced target and its dependencies.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options...] --image <target-ref> [build-args...]\n```\n\n----------------------------------------\n\nTITLE: Setting a Secret Value in Earthly\nDESCRIPTION: This command sets a secret value for a specified key within an Earthly project.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/cloud-secrets.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly secret --project <project-name> set my_key 'hello world'\n```\n\n----------------------------------------\n\nTITLE: Creating Earthly Cloud Token in Bash\nDESCRIPTION: This command creates a token for Earthly Cloud, which is necessary when using Earthly Satellites or Earthly Secrets in CI environments.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-8a-using-earthly-in-your-current-ci.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly account create-token my-ci-token\n```\n\n----------------------------------------\n\nTITLE: Running All Earthly Targets for Go Project\nDESCRIPTION: Command and output showing how to run all Earthly targets (build, unit tests, integration tests, Docker image) for a Go project in a single command. This demonstrates Earthly's ability to orchestrate the entire build and test pipeline.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/go/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n          buildkitd | Found buildkit daemon as docker container (earthly-buildkitd)\ngolang:1.15-alpine3.13 | --> Load metadata linux/amd64\n             context | --> local context .\n               +base | --> FROM golang:1.15-alpine3.13\n               +base | [██████████] resolve docker.io/library/golang:1.15-alpine3.13@sha256:330f31a4415d97bb64f244d5f4d838bea7a7ee1ab5a1a0bac49e7973c57cbb88 ... 100%\n             context | transferred 1 file(s) for context . (9.6 kB, 9 file/dir stats)\n               +base | --> WORKDIR /go-example\n               +deps | --> COPY go.mod go.sum ./\n               +deps | --> RUN go mod download\n   +integration-test | --> COPY main.go .\n   +integration-test | --> COPY main_integration_test.go .\n   +integration-test | --> COPY docker-compose.yml ./\n   +integration-test | --> WITH DOCKER (install deps)\n   +integration-test | --> WITH DOCKER (docker-compose config)\n    redis:6.0-alpine | --> Load metadata linux/amd64\n    redis:6.0-alpine | --> DOCKER PULL redis:6.0-alpine\n    redis:6.0-alpine | [██████████] resolve docker.io/library/redis:6.0-alpine@sha256:61f3e955fbef87ea07d7409a48a48b069579e32f37d2f310526017d68e9983b7 ... 100%\n               +deps | --> SAVE ARTIFACT go.sum +deps/go.sum AS LOCAL go.sum\n              +build | --> RUN go build -o build/go-example main.go\n              +build | --> SAVE ARTIFACT build/go-example +build/go-example AS LOCAL build/go-example\n             +docker | --> COPY +build/go-example ./\n               +deps | --> SAVE ARTIFACT go.mod +deps/go.mod AS LOCAL go.mod\n   +integration-test | --> WITH DOCKER RUN --privileged CGO_ENABLED=0 go test github.com/earthly/earthly/examples/go\n          +unit-test | --> COPY main_test.go .\n          +unit-test | --> RUN CGO_ENABLED=0 go test github.com/earthly/earthly/examples/go\n              output | --> exporting outputs\n              output | [██████████] exporting layers ... 100%\n              output | [██████████] exporting manifest sha256:73cba3d853028a7fb74b936ce78b1adaf510b9d8ca57da67e5120bd38283b685 ... 100%\n              output | [██████████] exporting config sha256:9fef849e6fa9477fed2f481b7ac07d419c5ddd63c8179cac4e3401be174f4025 ... 100%\n              output | [██████████] copying files ... 100%\n              output | [██████████] transferring docker.io/earthly/examples:go ... 100%\n================================ SUCCESS [main] ================================\n              +build | Artifact github.com/earthly/earthly/examples/go:go-integration-test-example+build/go-example as local build/go-example\n               +deps | Artifact github.com/earthly/earthly/examples/go:go-integration-test-example+deps/go.mod as local go.mod\n               +deps | Artifact github.com/earthly/earthly/examples/go:go-integration-test-example+deps/go.sum as local go.sum\n             +docker | Image github.com/earthly/earthly/examples/go:go-integration-test-example+docker as earthly/examples:go\n             +docker | Did not push earthly/examples:go. Use earthly --push to enable pushing\n```\n\n----------------------------------------\n\nTITLE: Feature Flag for FOR Loop Support\nDESCRIPTION: The for-in flag enables support for FOR...IN loop commands in Earthly, allowing iteration over collections within Earthly build scripts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/features.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n--for-in\n```\n\n----------------------------------------\n\nTITLE: Example Earthly Configuration in YAML\nDESCRIPTION: A practical example of an Earthly configuration file showing how to set cache size and configure GitHub authentication.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n    cache_size_mb: 20000\ngit:\n    global:\n        url_instead_of: \"git@example.com:=https://localmirror.example.com/\"\n    github.com:\n        auth: https\n        user: alice\n        password: itsasecret\n```\n\n----------------------------------------\n\nTITLE: Running Self-Hosted Earthly Satellite with GitHub Actions Runner\nDESCRIPTION: Docker command to run a self-hosted Earthly satellite with GitHub Actions runner enabled. It includes necessary environment variables and volume mounts for Docker access.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/gha-runners.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --privileged \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v satellite-cache:/tmp/earthly:rw \\\n    -p 8372:8372 \\\n    -e EARTHLY_TOKEN=<earthly_token> \\\n    -e EARTHLY_ORG=<earthly_org_name> \\\n    -e SATELLITE_NAME=<satellite_name> \\\n    -e SATELLITE_HOST=<satellite_host> \\\n    -e RUNNER_GHA_ENABLED=true \\\n  earthly/satellite:v0.8.13\n```\n\n----------------------------------------\n\nTITLE: Copying HTML Artifacts in Earthfile\nDESCRIPTION: This Dockerfile command demonstrates how to reference and copy artifacts from another directory's build target in the Earthly build process.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/monorepo/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCOPY ../html+html/* ./\n```\n\n----------------------------------------\n\nTITLE: Running Earthly Build and Docker Container\nDESCRIPTION: Commands to run the Earthly build process and execute the resulting Docker container.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nearthly +docker\n\ndocker run --rm go-example:latest\n\n# or podman\npodman run --rm go-example:latest\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CA Certificates to BuildKit\nDESCRIPTION: Example configuration for adding custom CA certificates to BuildKit for registry authentication.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  buildkit_additional_args: [\"-v\", \"<absolute-path-to-ca-file>:/etc/config/add.ca\"]\n  buildkit_additional_config: |\n    [registry.\"<registry-hostname>\"]\n      ca=[\"/etc/config/add.ca\"]\n```\n\n----------------------------------------\n\nTITLE: Controlling Push Order with WAIT Blocks in Earthfile\nDESCRIPTION: Example of using the WAIT block to control execution order, ensuring tests pass before pushing an image. This replaces the previous --push behavior where all commands needed to succeed before push operations.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: Earthfile\nCODE:\n```\ntest-and-push:\n  WAIT\n    BUILD +test\n  END\n  BUILD +my-image\nmy-image:\n  ...\n  SAVE IMAGE --push my-org/my-image:latest\n```\n\n----------------------------------------\n\nTITLE: Creating an Earthly Project via CLI\nDESCRIPTION: This command shows how to create an Earthly project, which is required for using certain features like Earthly Cloud Secrets.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly project create <project-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Repository Integration for GitHub Actions with Earthly CLI\nDESCRIPTION: Command to register an Earthly integration for a specific GitHub repository using the Earthly CLI. This allows satellites to act as runners for a single repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/gha-runners.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nearthly gha add \\\n  --org <earthly_organization> \\\n  --gh-org <github_organization> \\\n  --gh-repo <github_repo> \\\n  --gh-token <github_token>\n```\n\n----------------------------------------\n\nTITLE: Set Secret Commands in Earthly CLI\nDESCRIPTION: Commands for storing secrets in the secrets store.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] secrets set <path> <value>\nearthly [options] secrets set --file <local-path> <path>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Trust Policy for User-specific Access\nDESCRIPTION: JSON configuration for an AWS IAM trust policy that allows only a specific Earthly user to assume a role using OIDC authentication based on their email address.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/oidc.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"Condition\": {\n    \"StringEquals\": {\n      \"api.earthly.dev:email\": \"<user-email>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Earthfile Configuration for Go Build\nDESCRIPTION: Earthly build configuration that defines how to compile the Go application, using golang:1.15-alpine3.13 as base image and saving the compiled artifact locally.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/go/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Earthfile\nVERSION 0.7\nFROM golang:1.15-alpine3.13\n\nWORKDIR /go-example\n\nbuild:\n    COPY main.go .\n    RUN go build -o build/go-example main.go\n    SAVE ARTIFACT build/go-example /go-example AS LOCAL build/go-example\n```\n\n----------------------------------------\n\nTITLE: Invoking Earthly with --push Flag\nDESCRIPTION: Command to run an Earthly build with the --push flag to enable push operations defined in the Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nearthly --push +release\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Service Dependencies\nDESCRIPTION: Docker Compose configuration that sets up PostgreSQL database and Adminer UI for local development and testing.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/integration.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  postgres:\n    container_name: local-postgres\n    image: aa8y/postgres-dataset:iso3166\n    ports:\n      - 5432:5432\n    hostname: postgres\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n  postgres-ui:\n    container_name: local-postgres-ui\n    image: adminer:latest\n    depends_on:\n      - postgres\n    ports:\n      - 8080:8080\n    hostname: postgres-ui\n```\n\n----------------------------------------\n\nTITLE: Configuring Earthly to Use Podman\nDESCRIPTION: Commands to configure Earthly to use Podman or Docker as the container frontend. This sets the global container frontend preference in Earthly's configuration.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/podman.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Configure earthly to use podman\nearthly config global.container_frontend podman-shell\n\n# Configure earthly to use docker\nearthly config global.container_frontend docker-shell\n```\n\n----------------------------------------\n\nTITLE: Directory Importing in Earthfile\nDESCRIPTION: Demonstrates importing from other local directories using relative paths.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/importing.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nIMPORT ./some/other/dir AS other-dir\n\nmy-target:\n    BUILD other-dir+my-target\n    COPY other-dir+my-target/out.txt ./\n```\n\n----------------------------------------\n\nTITLE: Running Earthly with Remote Repository\nDESCRIPTION: Demonstrates how to run Earthly using a remote git repository reference instead of local source code.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/use-earthly-ci-image.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --privileged --rm earthly/earthly:v0.8.13 github.com/foo/bar:my-branch+target\n```\n\n----------------------------------------\n\nTITLE: Migrating Secrets from Earthly 0.6 to Newer Versions\nDESCRIPTION: These commands create a new project and migrate secrets from the old 0.6 version of Earthly to the new version.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/cloud-secrets.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nearthly project --org <org-name> create <project-name>\nearthly secret --org <org-name> --project <project-name> migrate <source-org-name>\n```\n\n----------------------------------------\n\nTITLE: Selecting a Satellite for Build Execution in Bash\nDESCRIPTION: Command to select a specific satellite for all subsequent builds. After selection, all builds will run on the selected satellite in the cloud.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/using.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat select <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Inviting a User to an Organization\nDESCRIPTION: This command invites a user to join your organization, allowing them to use any satellite in the organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nearthly org invite <email>\n```\n\n----------------------------------------\n\nTITLE: Basic IF Condition Using File Existence Check\nDESCRIPTION: Demonstrates a simple IF conditional that exposes port 8080 if a file named 'foo' exists in the current directory. This uses a POSIX shell condition to check file existence.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_38\n\nLANGUAGE: Dockerfile\nCODE:\n```\nIF [ -f ./foo ]\n  EXPOSE 8080\nEND\n```\n\n----------------------------------------\n\nTITLE: Invoking Migration Target with --push\nDESCRIPTION: Command to run an Earthly build of a migration target with the --push flag to enable migration operations.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nearthly --push +migrate\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWS ECR Registry Authentication\nDESCRIPTION: Examples of configuring Earthly to use AWS ECR login credentials for authenticating with container registries in both personal and project contexts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nearthly registry setup --cred-helper ecr-login --aws-access-key-id <key> --aws-secret-access-key <secret> <host>\n\nearthly registry --org <org> --project <project> setup --cred-helper ecr-login --aws-access-key-id <key> --aws-secret-access-key <secret> <host>\n```\n\n----------------------------------------\n\nTITLE: Listing Configured Registries\nDESCRIPTION: Command for displaying all configured registries in either personal or organization project contexts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] registry list [--org <org> --project <project>]\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Policy for Earthly Compute Resources\nDESCRIPTION: This IAM policy grants necessary permissions for Earthly to orchestrate EC2 resources in your AWS account. It allows actions like describing resources, running instances, and managing volumes with specific conditions based on resource tags.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/byoc/aws/manual.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Action\": [\n                \"tag:GetResources\",\n                \"iam:PassRole\",\n                \"ec2:DescribeSubnets\",\n                \"ec2:DescribeInstances\",\n                \"ec2:DescribeInstanceTypes\",\n                \"ec2:DescribeImages\"\n            ],\n            \"Resource\": \"*\",\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Action\": [\n                \"ec2:RunInstances\",\n                \"ec2:ModifyInstanceAttribute\"\n            ],\n            \"Resource\": [\n                \"arn:aws:ec2:us-west-2::image/*\",\n                \"arn:aws:ec2:us-west-2:012345678901:volume/*\",\n                \"arn:aws:ec2:us-west-2:012345678901:security-group/sg-012345678901\",\n                \"arn:aws:ec2:us-west-2:012345678901:network-interface/*\",\n                \"arn:aws:ec2:us-west-2:012345678901:key-pair/name-satellite-key\",\n                \"arn:aws:ec2:us-west-2:012345678901:instance/*\",\n                \"arn:aws:ec2:us-west-2:012345678901:subnet/subnet-012345678901\"\n            ],\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"aws:ResourceTag/earthly:application\": \"satellite\"\n                }\n            },\n            \"Action\": [\n                \"ec2:RunInstances\",\n                \"ec2:CreateVolume\"\n            ],\n            \"Resource\": [\n                \"arn:aws:ec2:us-west-2:012345678901:volume/*\",\n                \"arn:aws:ec2:us-west-2:012345678901:network-interface/*\",\n                \"arn:aws:ec2:us-west-2:012345678901:instance/*\"\n            ],\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"aws:ResourceTag/earthly:application\": \"satellite\"\n                }\n            },\n            \"Action\": [\n                \"ec2:TerminateInstances\",\n                \"ec2:StopInstances\",\n                \"ec2:StartInstances\"\n            ],\n            \"Resource\": \"arn:aws:ec2:us-west-2:012345678901:instance/*\",\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"aws:ResourceTag/earthly:application\": \"satellite\"\n                }\n            },\n            \"Action\": [\n                \"ec2:DetachVolume\",\n                \"ec2:DeleteVolume\",\n                \"ec2:AttachVolume\"\n            ],\n            \"Resource\": [\n                \"arn:aws:ec2:us-west-2:012345678901:volume/*\",\n                \"arn:aws:ec2:us-west-2:012345678901:instance/*\"\n            ],\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"ec2:CreateAction\": [\n                        \"RunInstances\",\n                        \"CreateVolume\"\n                    ]\n                }\n            },\n            \"Action\": [\n                \"ec2:CreateTags\"\n            ],\n            \"Resource\": [\n                \"arn:aws:ec2:us-west-2:012345678901:volume/*\",\n                \"arn:aws:ec2:us-west-2:012345678901:instance/*\",\n                \"arn:aws:ec2:us-west-2:012345678901:network-interface/*\"\n            ],\n            \"Effect\": \"Allow\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Image Pull Example\nDESCRIPTION: Demonstrates pulling and running a Docker image within an Earthly build using WITH DOCKER command.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nhello:\n    FROM earthly/dind:alpine-3.19-docker-25.0.5-r0\n    WITH DOCKER --pull hello-world\n        RUN docker run hello-world\n    END\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for Fibonacci Project\nDESCRIPTION: CMake build configuration file that specifies the minimum CMake version, project name, and executable creation with source files.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/cpp/README.md#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.9)\nproject (fibonacci)\nadd_executable(fibonacci main.cpp fib.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Cancel Stale Builds\nDESCRIPTION: GitHub Actions workflow configuration that automatically cancels in-progress builds when new commits are pushed to the same pull request, preventing resource waste on satellites.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/best-practices.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: GitHub Actions CI\n\nconcurrency: \n  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: true\n\njobs:\n  ... \n```\n\n----------------------------------------\n\nTITLE: Using WAIT Clause for Conditional Push Operations in Earthly\nDESCRIPTION: Shows how to use the new WAIT clause to control push operation ordering. In this example, pushing an image is dependent on tests passing successfully first.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: Earthfile\nCODE:\n```\ntest-and-push:\n  WAIT\n    BUILD +test\n  END\n  BUILD +my-image\nmy-image:\n  ...\n  SAVE IMAGE --push my-org/my-image:latest\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GCP Service Account in Earthly\nDESCRIPTION: Command to authenticate with a GCP service account using a key file within an Earthly build. This is an alternative to interactive authentication.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/gcp-artifact-registry.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRUN gcloud auth activate-service-account --key-file /test/key.json\n```\n\n----------------------------------------\n\nTITLE: Adding Members to Earthly Projects\nDESCRIPTION: Command syntax for adding a new member to a specified project with a specific permission level.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] project [--org <organization-name>] --project <project-name> member add <user-email> <permission>\n```\n\n----------------------------------------\n\nTITLE: Launching a Satellite on Earthly Cloud\nDESCRIPTION: This command launches a new satellite on Earthly Cloud. The satellite name can be any arbitrary string. If part of multiple organizations, you may need to select the org first.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat launch <satellite-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nearthly org select <org-name>\nearthly sat launch <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Satellite\nDESCRIPTION: Command to select a specific satellite for all future builds.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat select <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Registry Login with Cloud Secrets\nDESCRIPTION: This command sets up login credentials for a container registry using Earthly cloud secrets.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/cloud-secrets.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nearthly registry --org <org-name> --project <project-name> \\\nsetup --username <registry-user-name> --password-stdin \\\n<host>\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Integration for GitHub Actions with Earthly CLI\nDESCRIPTION: Command to register an Earthly organization integration with GitHub Actions using the Earthly CLI. This allows satellites to act as runners for all repositories in a GitHub organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/gha-runners.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nearthly gha add \\\n  --org <earthly_organization> \\\n  --gh-org <github_organization> \\\n  --gh-token <github_token>\n```\n\n----------------------------------------\n\nTITLE: Earthly Build Process Flow Diagram\nDESCRIPTION: Detailed sequence diagram showing the complete flow of an Earthly target build from CLI initiation through Earthfile parsing, command interpretation, and final execution. Includes interaction between major components like Builder, BuildKitClient, Earthfile2LLB, and Docker pull operations. Notable complexities include recursive target handling and WAIT/END logic implications.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs-internals/build-steps.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    BuildAction ->> Builder : BuildTarget\n    Builder ->> BuildKitClient : Build (and passes BuildFunc callback)\n    BuildKitClient ->> BuildFunc : Callback\n    BuildFunc ->> Earthfile2LLB : Earthfile2LLB\n\n    Earthfile2LLB ->> Resolver : Resolve\n    Resolver ->> ast : Parse\n    ast -->> Resolver : Parsed Earthfile\n    Resolver -->> Earthfile2LLB : buildcontext\n\n    Earthfile2LLB ->> Interpreter : Run\n\n    loop\n        Interpreter ->> Converter : EarthfileCommand\n        Converter -->> Interpreter : Results\n    end\n\n    Interpreter -->> Earthfile2LLB : Results\n\n    Earthfile2LLB ->> Converter : FinalizeStates\n    Converter -->> Earthfile2LLB : LLB State\n\n    Earthfile2LLB ->> BuildFunc : mts results\n\n    loop\n        BuildFunc ->> gatewaycrafter : AddMeta(referenceKey, LLB)\n        gatewaycrafter -->> BuildFunc : Results\n    end\n\n    BuildFunc -->> BuildKitClient : Results\n\n    BuildKitClient ->> pullping : OutputPullCallback\n\n    pullping ->> docker : docker pull\n    docker -->> pullping : results\n\n    pullping -->> BuildKitClient : results\n    BuildKitClient -->> Builder : results\n    Builder -->> BuildAction : results\n```\n\n----------------------------------------\n\nTITLE: Referencing Specific Version of External Repository\nDESCRIPTION: Example showing how to reference a specific tag or branch of an external repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/multirepo/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCOPY github.com/earthly/earthly-example-multirepo-static:v0.1.1+html/* ./\n```\n\n----------------------------------------\n\nTITLE: Setting Earthly Configuration via Command Line\nDESCRIPTION: Shows how to set Earthly configuration parameters using the command line interface rather than editing the config file directly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly config <key> <value>\n```\n\n----------------------------------------\n\nTITLE: Running Cross-compilation Multi-platform Example\nDESCRIPTION: Command to run the cross-compilation multiplatform example from the Earthly GitHub repository. This builds the example without requiring local cloning.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nearthly github.com/earthly/earthly/examples/multiplatform-cross-compile:main+build-all-platforms\n```\n\n----------------------------------------\n\nTITLE: Earthfile Importing Whole Project (Dockerfile)\nDESCRIPTION: An Earthfile showing how to import an entire Earthfile from another directory using the IMPORT command and create an alias.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-5-importing.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nIMPORT ./services/service-one AS my_service\nFROM golang:1.15-alpine3.13\nWORKDIR /go-workdir\n\nbuild:\n    FROM my_service+deps\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example AS LOCAL local-output/go-example\n```\n\n----------------------------------------\n\nTITLE: Examples of Different COPY Behaviors\nDESCRIPTION: Examples demonstrating different behaviors of the COPY command with and without the --dir option when copying a directory named 'test' containing a file.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_17\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Copies the contents of the test directory.\n# To access the file, it would be found at ./file\nCOPY test .\n\n# Also copies the contents of the test directory.\n# To access the file, it would be found at ./file\nCOPY test/* .\n\n# Copies the whole test folder.\n# To access the file, it would be found at ./test/file\nCOPY --dir test .\n```\n\n----------------------------------------\n\nTITLE: Earthly Feature Flags Table in Markdown\nDESCRIPTION: Markdown table listing all feature flags in Earthly, their status/version, and descriptions. Includes flags for registry usage, copy operations, build behavior, command support, and experimental features.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/features.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature flag                            | Status                                                                          | Description                                                                                                       |\n|-----------------------------------------|---------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|\n| `--use-registry-for-with-docker`        | 0.5                                                                             | Makes use of the embedded BuildKit Docker registry (instead of tar files) for `WITH DOCKER` loads and pulls       |\n| `--use-copy-include-patterns`           | 0.6                                                                             | Speeds up COPY transfers                                                                                          |\n| `--referenced-save-only`                | 0.6                                                                             | Changes the behavior of SAVE commands in a significant way                                                        |\n| `--for-in`                              | 0.6                                                                             | Enables support for `FOR ... IN ...` commands                                                                     |\n| `--require-force-for-unsafe-saves`      | 0.6                                                                             | Requires `--force` for saving artifacts locally outside the Earthfile's directory                                 |\n| `--no-implicit-ignore`                  | 0.6                                                                             | Eliminates implicit `.earthlyignore` entries, such as `Earthfile` and `.tmp-earthly-out`                          |\n| `--earthly-version-arg`                 | 0.7                                                                             | Enables builtin ARGs: `EARTHLY_VERSION` and `EARTHLY_BUILD_SHA`                                                   |\n| `--shell-out-anywhere`                  | 0.7                                                                             | Allows shelling-out in any earthly command (including in the middle of `ARG`)                                     |\n| `--explicit-global`                     | 0.7                                                                             | Base target args must have a `--global` flag in order to be considered global args                                |\n| `--check-duplicate-images`              | 0.7                                                                             | Check for duplicate images during output                                                                          |\n| `--use-cache-command`                   | 0.7                                                                             | Allow use of `CACHE` command in Earthfiles                                                                        |\n| `--use-host-command`                    | 0.7                                                                             | Allow use of `HOST` command in Earthfiles                                                                         |\n| `--use-copy-link`                       | 0.7                                                                             | Use the equivalent of `COPY --link` for all copy-like operations                                                  |\n| `--new-platform`                        | 0.7                                                                             | Enable new platform behavior                                                                                      |\n| `--no-tar-build-output`                 | 0.7                                                                             | Do not print output when creating a tarball to load into `WITH DOCKER`                                            |\n| `--use-no-manifest-list`                | 0.7                                                                             | Enable the `SAVE IMAGE --no-manifest-list` option                                                                 |\n| `--use-chmod`                           | 0.7                                                                             | Enable the `COPY --chmod` option                                                                                  |\n| `--earthly-locally-arg`                 | 0.7                                                                             | Enable the `EARTHLY_LOCALLY` arg                                                                                  |\n| `--use-project-secrets`                 | 0.7                                                                             | Enable project-based secret resolution                                                                            |\n| `--earthly-git-author-args`             | 0.7                                                                             | Enable the `EARTHLY_GIT_AUTHOR` and `EARTHLY_GIT_CO_AUTHORS` args                                                 |\n| `--wait-block`                          | 0.7                                                                             | Enable the `WAIT` / `END` block commands                                                                          |\n| `--no-network`                          | 0.8                                                                             | Allow the use of `RUN --network=none` commands                                                                    |\n| `--arg-scope-and-set`                   | 0.8                                                                             | Enable the `LET` / `SET` commands and nested `ARG` scoping                                                        |\n| `--use-docker-ignore`                   | 0.8                                                                             | Enable the use of `.dockerignore` files in `FROM DOCKERFILE` targets                                              |\n| `--pass-args`                           | 0.8                                                                             | Enable the optional `--pass-args` flag for the `BUILD`, `FROM`, `COPY`, `WITH DOCKER --load` commands             |\n| `--global-cache`                        | 0.8                                                                             | Enable global caches (shared across different Earthfiles), for cache mounts and `CACHE` commands having an ID     |\n| `--cache-persist-option`                | 0.8                                                                             | Adds `CACHE --persist` option to persist cache content in images, Changes default `CACHE` behaviour to not persist |\n| `--use-function-keyword`                | 0.8                                                                             | Enable using `FUNCTION` instead of `COMMAND` when declaring a function                                            |\n| `--use-visited-upfront-hash-collection` | 0.8                                                                             | Switches to a newer target parallelization algorithm                                                              |\n| `--no-use-registry-for-with-docker`     | Experimental                                                                    | Disable `use-registry-for-with-docker`                                                                            |\n| `--try`                                 | Experimental                                                                    | Enable the `TRY` / `FINALLY` / `END` block commands                                                               |\n| `--earthly-ci-runner-arg`               | Experimental                                                                    | Enable the `EARTHLY_CI_RUNNER` builtin ARG                                                                        |\n| `--wildcard-builds`                     | Experimental                                                                    | Alow for the expansion of wildcard (glob) paths for BUILD commands                                                |\n| `--build-auto-skip`                     | Experimental                                                                    | Allow for `--auto-skip` to be used on individual BUILD commands                                                   |\n| `--allow-privileged-from-dockerfile`    | Experimental                                                                    | Allow the use of the `--allow-privileged` flag in the `FROM DOCKERFILE` command                                   |\n| `--run-with-aws`                        | Experimental                                                                    | Make AWS credentials in the environment or ~/.aws available to `RUN` commands                                     |\n| `--wildcard-copy`                       | Experimental                                                                    | Alow for the expansion of wildcard (glob) paths for COPY commands                                                 |\n| `--raw-output`                          | Experimental                                                                    | Enable `--raw-output` for `RUN` output.                                                  |\n| `--run-with-aws-oidc`                   | Experimental                                                                    | Make AWS credentials via OIDC provider available to `RUN` commands                                      |\n```\n\n----------------------------------------\n\nTITLE: Basic ARG Usage in Earthly Dockerfile\nDESCRIPTION: Demonstrates basic usage of build arguments using ARG keyword to create a parameterized hello world example\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/build-args.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM alpine:latest\n\nhello:\n    ARG name\n    RUN echo \"hello $name\"\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform with Earthly to Cloud\nDESCRIPTION: This command applies Terraform to a cloud environment using provided AWS credentials. It requires the --push flag and saves .tfstate files as artifacts.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/terraform/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly --push --build-arg AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY +apply\n```\n\n----------------------------------------\n\nTITLE: Managing Earthly Project Members with member Command\nDESCRIPTION: Command syntax for managing project members with subcommands for listing, removing, adding, and updating member permissions.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] project [--org <organization-name>] member (ls|rm|add|update)\n```\n\n----------------------------------------\n\nTITLE: Launching a Managed Satellite in Earthly Cloud\nDESCRIPTION: Commands for launching a new managed Satellite on Earthly Cloud. The satellite name can be any arbitrary string.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat launch <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring LOCALLY Target with Platform Variables\nDESCRIPTION: Example of properly declaring the TARGETPLATFORM arg after the LOCALLY command to ensure it gets the appropriate user platform value when running locally.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/builtin-args.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nmy-target:\n    LOCALLY\n    ARG TARGETPLATFORM\n    RUN echo \"The target platform under LOCALLY is $TARGETPLATFORM\"\n```\n\n----------------------------------------\n\nTITLE: Using a Satellite for a Specific Build\nDESCRIPTION: Command to use a specific satellite for a single build, even if it's not the currently selected satellite.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nearthly --sat <satellite-name> +my-target\n```\n\n----------------------------------------\n\nTITLE: Inefficient File Copy Pattern in Earthfiles\nDESCRIPTION: Examples of file copying patterns to avoid in Earthfiles because they include unnecessary files that can cause inefficient cache invalidation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Avoid\nCOPY . .\nCOPY * ./\n```\n\n----------------------------------------\n\nTITLE: Orchestrating Push and Deploy Operations with WAIT in Earthly\nDESCRIPTION: Demonstrates how to use the WAIT clause to ensure proper ordering of push and deploy operations. The deployment script only runs after the image has been successfully built and pushed.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: Earthfile\nCODE:\n```\npush-and-deploy:\n  ...\n  WAIT\n    BUILD +my-image\n  END\n  RUN --push ./deploy.sh my-org/my-image:latest\nmy-image:\n  ...\n  SAVE IMAGE --push my-org/my-image:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Job to Use Earthly Satellite\nDESCRIPTION: YAML configuration for a GitHub Actions job that uses an Earthly satellite as its runner. It includes the necessary runs-on label and environment setup for Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/gha-runners.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nearthly-job:\n  runs-on: [earthly-satellite#my-gha-satellite]\n  env:\n    FORCE_COLOR: 1\n    EARTHLY_TOKEN: \"${{ secrets.EARTHLY_TOKEN }}\"\n  steps:\n    - uses: actions/checkout@v2\n    - name: Earthly build\n      run: earthly -ci +build\n```\n\n----------------------------------------\n\nTITLE: Resetting Local Earthly Cache in Bash\nDESCRIPTION: This series of Bash commands demonstrates how to manually reset the Earthly cache. It stops the Earthly BuildKit daemon, removes the container, and deletes the cache volume.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/caching/managing-cache.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop earthly-buildkitd\ndocker rm earthly-buildkitd\ndocker volume rm earthly-cache\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Based Build Args\nDESCRIPTION: Demonstrates passing build arguments using environment variables\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/build-args.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport HELLO=\"world\"\nexport FOO=\"bar\"\nearthly +hello --HELLO=\"$HELLO\" --FOO=\"$FOO\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Earthfile for Next.js Build and Deployment to Netlify\nDESCRIPTION: This Earthfile defines three targets: deps, build, and deploy. It sets up the environment, installs dependencies, builds the Next.js site using Netlify CLI, and deploys to Netlify. It uses secrets for authentication and site identification.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/next-js-netlify/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nVERSION 0.6\nFROM --platform=linux/amd64 node:latest\nWORKDIR /app\n\ndeps:\n    # Install the Netlify CLI (global)\n    RUN npm install netlify-cli -g\n    # Copy package.json for installing required packages\n    COPY package.json ./\n    # Install the Netlify CLI (local) and Netlify Next.js plugin and required packages\n    RUN npm install netlify-cli --save-dev\n    RUN npm install @netlify/plugin-nextjs --save-dev\n    RUN npm install\n    # Copy netlify.toml - required for building and deploying to Netlify\n    COPY netlify.toml ./\n\nbuild:\n    FROM +deps\n    # Copy files and directories required for building\n    COPY next-env.d.ts styles.module.css tsconfig.json ./\n    COPY --dir pages ./\n    # Build site using NETLIFY_AUTH_TOKEN and NETLIFY_SITE_ID secrets\n    RUN --secret NETLIFY_AUTH_TOKEN --secret NETLIFY_SITE_ID netlify build --context production\n    SAVE ARTIFACT ./node_modules node_modules/ AS LOCAL ./\n    SAVE ARTIFACT ./.next .next/ AS LOCAL ./\n    SAVE ARTIFACT ./.netlify .netlify/ AS LOCAL ./\n\ndeploy:\n    FROM +deps\n    # Copy artifacts required for deploying to Netlify\n    COPY +build/node_modules/ +build/.next/ +build/.netlify/ ./\n    # Deploy site\n    RUN --push --secret NETLIFY_AUTH_TOKEN --secret NETLIFY_SITE_ID netlify deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Building and Releasing Earthly Packages\nDESCRIPTION: Command to build and release Earthly packages in one step. Uses the previously set release tag to determine which version to package.\nSOURCE: https://github.com/earthly/earthly/blob/main/release/apt-repo/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nearthly +build-and-release --RELEASE_TAG=\"$RELEASE_TAG\"\n```\n\n----------------------------------------\n\nTITLE: Planning Terraform with Earthly against Cloud\nDESCRIPTION: This command plans Terraform against a cloud environment using provided AWS credentials. The region defaults to us-east-1 but can be overridden.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/terraform/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly --build-arg AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY +plan\n```\n\n----------------------------------------\n\nTITLE: Logging into Earthly Web UI with GitHub\nDESCRIPTION: Example of using the web command to log into the Earthly CI application using GitHub as the OAuth provider.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nearthly web --provider=github\n```\n\n----------------------------------------\n\nTITLE: Python Hello World Application\nDESCRIPTION: Simple Python script that prints 'hello world' to the console.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nprint(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Updating Earthly Satellites with update Command\nDESCRIPTION: Command syntax for manually updating an Earthly Satellite to the latest version. Includes options for size, maintenance window, and feature flags. Supports both personal and organization contexts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] satellite update <satellite-name>\n\nearthly [options] satellite [--org <organization-name>] update <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Passing ARGs in Earthly Commands (Bash)\nDESCRIPTION: Examples of how to pass ARGs when running Earthly commands from the command line.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-4-args.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly +docker --tag='my-new-image-tag'\n```\n\nLANGUAGE: bash\nCODE:\n```\nearthly +docker\n# tag for image will be 'latest'\n```\n\n----------------------------------------\n\nTITLE: Running an Earthly build with default configuration\nDESCRIPTION: Basic command for running an Earthly build using whatever runner is currently selected (local or satellite).\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-7-using-remote-runners.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nearthly +my-target\n```\n\n----------------------------------------\n\nTITLE: Secrets Management Commands in Earthly CLI\nDESCRIPTION: Commands for managing secrets within organizations and projects.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] secrets [--org <organization-name>, --project <project>] (set|get|ls|rm|migrate|permission)\n```\n\n----------------------------------------\n\nTITLE: Remove Secret Command in Earthly CLI\nDESCRIPTION: Command to remove a secret from the secrets store.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] secrets rm <path>\n```\n\n----------------------------------------\n\nTITLE: Using SSH Keys in Earthly Builds\nDESCRIPTION: Example of using the RUN --ssh command to access host SSH keys during a build. This technique allows secure authentication for operations like downloading dependencies from private repositories.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_55\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN --ssh go mod download\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Image Creation\nDESCRIPTION: Bash commands showing how to verify that a Docker image was successfully created and is available in the local Docker daemon or Podman.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n~$ earthly +docker\n...\n~$ docker image ls\nREPOSITORY          TAG       IMAGE ID       CREATED          SIZE\ngo-example          latest    08b9f749023d   19 seconds ago   297MB\n\n# or podman\n~$ podman image ls\nREPOSITORY          TAG       IMAGE ID       CREATED          SIZE\ngo-example          latest    08b9f749023d   19 seconds ago   297MB\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Pipelines for Earthly Builds\nDESCRIPTION: Configuration for running Earthly builds in Bitbucket Pipelines using the official Earthly Docker image. The pipeline includes steps for setting up authentication tokens, Docker login, and executing the build using Earthly Satellites.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/bitbucket-pipelines-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# ./bitbucket-pipelines.yml\n\nimage: earthly/earthly:v0.8.13\n\npipelines:\n  default:\n    - step:\n        name: \"Set Earthly token\"\n        script:\n          - export EARTHLY_TOKEN=$EARTHLY_TOKEN\n    - step:\n        name: \"Docker login\"\n        script:\n          - docker login --username \"$DOCKERHUB_USERNAME\" --password \"$DOCKERHUB_TOKEN\"\n    - step:\n        name: \"Build\"\n        script:\n          - earthly --ci --push --sat $EARTHLY_SAT --org $EARTHLY_ORG +build\n```\n\n----------------------------------------\n\nTITLE: Build Args via EARTHLY_BUILD_ARGS\nDESCRIPTION: Shows how to set build arguments using the EARTHLY_BUILD_ARGS environment variable\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/build-args.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport EARTHLY_BUILD_ARGS=\"HELLO=world,FOO=bar\"\nearthly +hello\n```\n\n----------------------------------------\n\nTITLE: Using Artifacts in LOCALLY Targets with COPY in Earthfile\nDESCRIPTION: Example of correctly using an artifact in a LOCALLY target by copying it with the COPY command in an Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_48\n\nLANGUAGE: Dockerfile\nCODE:\n```\nmy-artifact:\n    FROM alpine 3.13\n    ...\n    SAVE ARTIFACT ./my-example-artifact\n\na-locally-example:\n    LOCALLY\n    COPY +my-artifact/my-example-artifact ./\n    RUN cat ./my-example-artifact\n```\n\n----------------------------------------\n\nTITLE: Docker Registry Pull Through Cache Configuration\nDESCRIPTION: Complete configuration for setting up a Docker registry as a pull through cache with storage and proxy settings.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/pull-through-cache.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.1\nlog:\n  fields:\n    service: registry\nstorage:\n  cache:\n    blobdescriptor: inmemory\n  filesystem:\n    rootdirectory: /var/lib/registry\nhttp:\n  addr: :5000\n  headers:\n    X-Content-Type-Options: [nosniff]\nhealth:\n  storagedriver:\n    enabled: true\n    interval: 10s\n    threshold: 3\nproxy:\n  remoteurl: https://registry-1.docker.io\n  username: [username]\n  password: [password]\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Repository Path Remapping\nDESCRIPTION: YAML configuration showing how to remap Git repository paths using regular expressions for custom hosting setups.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/auth.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngit:\n    ghe.internal.mycompany.com:\n        pattern: 'ghe.internal.mycompany.com/([^/]+)/([^/]+)'\n        substitute: 'ssh://git@ghe.internal.mycompany.com:22/$1/$2.git'\n        auth: ssh\n```\n\n----------------------------------------\n\nTITLE: DO Command Syntax\nDESCRIPTION: Command syntax for executing functions in Earthly, including options for privileged execution and argument passing.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_51\n\nLANGUAGE: text\nCODE:\n```\nDO [--allow-privileged] <function-ref> [--<build-arg-key>=<build-arg-value>...]\n```\n\n----------------------------------------\n\nTITLE: Selecting a specific Earthly Satellite\nDESCRIPTION: Command to manually select a previously launched Earthly Satellite for remote builds.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-7-using-remote-runners.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat select my-satellite\n```\n\n----------------------------------------\n\nTITLE: Insecure Multi-Layer Secret Handling in Earthly\nDESCRIPTION: Shows a dangerous pattern where secret files are created in one layer but removed in another. This exposes secrets in the intermediate layer, potentially leaking them to the build cache or published images.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_19\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad: removal takes place in a separate layer, which means that the secrets will be leaked to the cache\nRUN --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY echo \"[default]\\naws_access_key_id=$AWS_ACCESS_KEY_ID\\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\" > /root/.aws/credentials\nRUN aws ec2 describe-images\nRUN rm /root/.aws/credentials\n```\n\n----------------------------------------\n\nTITLE: Adjusting Podman Machine Resources on Mac\nDESCRIPTION: Commands to initialize a new Podman machine or adjust an existing one with custom resource allocations. This can help improve build performance on Mac systems.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/podman.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize a new default machine with 5 CPUs, 128GB disk space, 8196 MB of memory, and start it\npodman machine init --now --cpus 5 --disk-size 128 --memory 8196 \n\n# Adjust the current default podman machine to use 5 CPUs, 128GB disk space, and 8196 MB of memory\npodman machine stop ; podman machine set --cpus 5 --disk-size 128 --memory 8196 && podman machine start\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Earthly Installation\nDESCRIPTION: Command for initializing Earthly with options to configure BuildKit, autocomplete, and TLS certificates.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] bootstrap [--no-buildkit, --with-autocomplete, --certs-hostname]\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets in an Earthly Project\nDESCRIPTION: This command lists all secrets within a specified Earthly project.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/cloud-secrets.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly secret --project <project-name> ls\n```\n\n----------------------------------------\n\nTITLE: Migrate Secrets Command in Earthly CLI\nDESCRIPTION: Command to migrate secrets to the project-based structure.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] secrets --org <organization> --project <project> migrate <source-organization>\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Affinity for Remote BuildKit\nDESCRIPTION: YAML configuration for setting up session affinity in Kubernetes to keep builds pinned to a single BuildKit instance, preventing issues with build roaming across multiple instances.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/kubernetes.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Use session affinity to prevent \"roaming\" across multiple BuildKit instances; if needed.\nsessionAffinity: ClientIP\nsessionAffinityConfig:\n  clientIP:\n    timeoutSeconds: 600 # This should be longer than your build.\n```\n\n----------------------------------------\n\nTITLE: Configuring Version in Earthfile\nDESCRIPTION: Shows how to specify the Earthly version in an Earthfile using the VERSION command. This is becoming a required element.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: dockerfile\nCODE:\n```\nVERSION 0.6\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for ECR Push and Pull Permissions\nDESCRIPTION: AWS IAM policy that grants the necessary permissions for pushing and pulling images from ECR. Includes all required ECR actions from authentication to image layer operations.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/aws-ecr.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2008-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AllowPushPull\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": [\n                    \"arn:aws:iam::<aws_account_id>:user/push-pull-user\",\n                ]\n            },\n            \"Action\": [\n                \"ecr:GetAuthorizationToken\",\n                \"ecr:GetDownloadUrlForLayer\",\n                \"ecr:BatchGetImage\",\n                \"ecr:BatchCheckLayerAvailability\",\n                \"ecr:PutImage\",\n                \"ecr:InitiateLayerUpload\",\n                \"ecr:UploadLayerPart\",\n                \"ecr:CompleteLayerUpload\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Daemon in Docker\nDESCRIPTION: This snippet demonstrates how to configure Earthly to use a remote daemon in a Docker image using the earthly config command.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/build-an-earthly-ci-image.md#2025-04-21_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nRUN earthly config global.buildkit_host buildkit_host: 'tcp://myhost:8372'\n```\n\n----------------------------------------\n\nTITLE: Running All Tests Command Output\nDESCRIPTION: Example output from running the 'all' target that combines building and testing steps, showing successful completion of the entire build and test process.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/integration.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n> earthly -P +all\n...\n+all | Target github.com/earthly/earthly-example-scala/integration:main+all built successfully\n=========================== SUCCESS ===========================\n```\n\n----------------------------------------\n\nTITLE: Temporary Secret File Management in Earthly\nDESCRIPTION: Shows an acceptable but error-prone pattern for handling secrets by creating and removing them in the same RUN command. This approach works but should be avoided when possible as it risks leaking secrets if cleanup is forgotten.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_18\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Ok, but error prone\nRUN --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY echo \"[default]\\naws_access_key_id=$AWS_ACCESS_KEY_ID\\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\" > /root/.aws/credentials ;\\\n    aws ec2 describe-images ;\\\n    rm /root/.aws/credentials\n```\n\n----------------------------------------\n\nTITLE: Launching a BYOC Satellite with Earthly CLI\nDESCRIPTION: Demonstrates how to launch a new satellite within a specific cloud installation using the 'earthly satellite launch' command with the '--cloud' flag to specify the cloud name.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/byoc/byoc.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nearthly satellite launch --cloud <name> my-byoc-sat\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Management for Earthly in cloudbuild.yaml\nDESCRIPTION: Configuration for making secrets from Google Secret Manager available to the build. This example shows how to reference a specific secret version for the EARTHLY_TOKEN used to authenticate with Earthly Cloud.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/google-cloud-build.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\navailableSecrets:\n  secretManager:\n  - versionName: projects/earthly-jupyterlab/secrets/EARTHLY_TOKEN/versions/2\n    env: 'EARTHLY_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Updating Satellite and Clearing Cache\nDESCRIPTION: This command updates the satellite and clears its cache during the process. It will clear the cache even if no updates are available.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nearthly satellite update --drop-cache my-satellite\n```\n\n----------------------------------------\n\nTITLE: Earthly Command for Pulling and Running ECR Image\nDESCRIPTION: Terminal command and output showing how to pull and run an image from ECR using Earthly. Demonstrates the automated credential process when pulling images.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/aws-ecr.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n❯ earthly -P +run\n           buildkitd | Found buildkit daemon as docker container (earthly-buildkitd)\n earthly/dind:alpine-3.19-docker-25.0.5-r0 | --> Load metadata linux/amd64\n4/hello-earthly:with-love | --> Load metadata linux/amd64\n4/hello-earthly:with-love | --> DOCKER PULL <aws_account_id>.dkr.ecr.<region>.amazonaws.com/hello-earthly:with-love\n4/hello-earthly:with-love | [██████████] resolve <aws_account_id>.dkr.ecr.<region>.amazonaws.com/hello-earthly:with-love@sha256:9ab4df74dafa2a71d71e39e1af133d110186698c78554ab000159cfa92081de4 ... 100%\n               +base | --> FROM earthly/dind:alpine-3.19-docker-25.0.5-r0\n               +base | [██████████] resolve docker.io/earthly/dind:alpine-3.19-docker-25.0.5-r0@sha256:2cef4089960efe028de40721749e3ec6eba9f471562bf10681de729287bd78fb ... 100%\n                +run | *cached* --> WITH DOCKER (install deps)\n                +run | *cached* --> WITH DOCKER RUN docker run <aws_account_id>.dkr.ecr.<region>.amazonaws.com/hello-earthly:with-love\n              output | --> exporting outputs\n              output | [██████████] sending tarballs ... 100%\n=========================== SUCCESS ===========================\n```\n\n----------------------------------------\n\nTITLE: ACR Docker Configuration JSON\nDESCRIPTION: Example Docker configuration file showing the structure after setting up ACR authentication with credential helper.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/azure-acr.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"auths\": {\n\t\t\"helloearthly.azurecr.io\": {\n\t\t\t\"auth\": \"...\",\n\t\t\t\"identitytoken\": \"...\"\n\t\t}\n\t},\n\t\"credsStore\": \"acr-linux\"\n}\n```\n\n----------------------------------------\n\nTITLE: Build Artifact Output Example - Version 0.6 Syntax\nDESCRIPTION: Shows the updated syntax (v0.6) for copying and building artifacts from targets, including explicit BUILD commands.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM +some-target\nBUILD +some-target\nCOPY +another-target/my-artifact ./\nBUILD +another-target\n```\n\n----------------------------------------\n\nTITLE: Inviting User to Earthly Organization with Specific Permission\nDESCRIPTION: This command invites a user to an Earthly organization with a specified access level. The access level determines the user's permissions within the organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/managing-permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly org invite --permission <access-level> <email>\n```\n\n----------------------------------------\n\nTITLE: Configuring WITH DOCKER in Earthfile\nDESCRIPTION: Illustrates the WITH DOCKER command for loading Docker images, which now uses an embedded registry in Buildkit for faster performance.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: dockerfile\nCODE:\n```\nWITH DOCKER\n    # Docker commands here\nEND\n```\n\n----------------------------------------\n\nTITLE: Alternative to Docker Run in Earthly\nDESCRIPTION: This example shows how to replace a simple 'docker run' command with Earthly's RUN --entrypoint construct, which can be more efficient in certain cases.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/docker-in-earthly.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM hello-world\nRUN --entrypoint\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Data Version in Scala\nDESCRIPTION: Simple unit test to verify that the data version is positive, demonstrating basic unit testing setup.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/integration.md#2025-04-21_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nclass DataVersionSpec extends FlatSpec {\n\n  val dv = new DataVersion()\n  \"Data Version \" should \" be positive\" in {\n    assert(dv.version > 0)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Exportable Artifacts from External Directories in Earthly\nDESCRIPTION: This snippet shows how to properly export a file as an artifact from one directory, making it available to be referenced in another Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_44\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# ./dir1/Earthfile\nVERSION 0.8\nFROM alpine:3.18\nWORKDIR /work\nfile:\n    COPY some-file.txt ./\n    SAVE ARTIFACT ./some-file.txt\n```\n\n----------------------------------------\n\nTITLE: Remote Repository Importing\nDESCRIPTION: Examples of importing targets and artifacts from remote GitHub repositories using the IMPORT command.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/importing.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nIMPORT github.com/earthly/hello-world:main AS hello-world\n\n...\n\nmy-target:\n    BUILD hello-world+hello\n    COPY hello-world+hello/hello.txt ./\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Host Keys to Known Hosts\nDESCRIPTION: Command for adding a host's SSH key to the known_hosts file, which is recommended over disabling strict host key checking.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nssh-keyscan <hostname> >> ~/.ssh/known_hosts\n```\n\n----------------------------------------\n\nTITLE: Updating User's Permission Level in Earthly Project\nDESCRIPTION: This command updates the permission level of an existing user within an Earthly project. It allows changing the user's access level to modify their project-specific permissions.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/managing-permissions.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nearthly project --project <project-name> member update --permission <permission> <email>\n```\n\n----------------------------------------\n\nTITLE: Running AWS Command with Earthly\nDESCRIPTION: Demonstrates how to execute an AWS CLI command (sts get-caller-identity) using an Earthly target. This shows the integration of AWS credentials with Earthly builds.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/aws-sso/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`earthly +target` will run `aws sts get-caller-identity` showing how to run arbitrary AWS commands using this Earthfile.\n```\n\n----------------------------------------\n\nTITLE: Launching Satellite with Custom Maintenance Window\nDESCRIPTION: This command launches a satellite with a custom maintenance window for auto-updates, set to 4AM to 6AM in this example.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nearthly satellite launch --maintenance-window 04:00 my-satellite\n```\n\n----------------------------------------\n\nTITLE: Using Secret Provider in Earthly Dockerfile\nDESCRIPTION: Example of how to reference a secret in an Earthly Dockerfile that would be accessed through the configured secret provider.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN --secret mysecret echo \"the passphrase is $mysecret.\"\n```\n\n----------------------------------------\n\nTITLE: Running Earthly Hello World Example\nDESCRIPTION: Command to run a basic Earthly hello world example, demonstrating the use of the configured container frontend. The output shows Earthly using Podman to start the buildkit daemon.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/podman.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> earthly github.com/earthly/hello-world:main+hello\n 1. Init 🚀\n————————————————————————————————————————————————————————————————————————————————\n\n           buildkitd | Starting buildkit daemon as a podman container (earthly-buildkitd)...\n           buildkitd | ...Done\n```\n\n----------------------------------------\n\nTITLE: Configuring BuildKit Session Timeout\nDESCRIPTION: Configuration example showing how to override the default BuildKit session timeout of 24 hours to 72 hours.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  buildkit_additional_args: [\"-e\", \"BUILDKIT_SESSION_TIMEOUT=72h\"]\n```\n\n----------------------------------------\n\nTITLE: Pushing saved images with Earthly command\nDESCRIPTION: Example of using the --push flag with the Earthly command to push saved images.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nearthly --push +docker-image\n```\n\n----------------------------------------\n\nTITLE: AWS EC2 Cloud-Init Configuration\nDESCRIPTION: Cloud-init script for automatically deploying and starting a satellite on an EC2 instance using Amazon Linux 2023.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/self-hosted.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#cloud-config\nruncmd:\n  - sudo dnf update\n  - sudo dnf install -y docker\n  - sudo systemctl start docker.service\n  - sudo systemctl enable docker.service\n  - |-\n      sudo docker run -d --privileged \\\n        --restart always \\\n        --name satellite \\\n        -p 8372:8372 \\\n        -v /earthly-cache:/tmp/earthly:rw \\\n        -e EARTHLY_TOKEN=GuFna*****nve7e \\\n        -e EARTHLY_ORG=my-org \\\n        -e SATELLITE_NAME=my-satellite \\\n        earthly/satellite:v0.8.13\n```\n\n----------------------------------------\n\nTITLE: Basic CACHE Command Syntax in Earthly\nDESCRIPTION: Shows the basic syntax for using the CACHE command in Earthly. The command takes a single directory argument which contains files to cache for future reuse.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/cache-command/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Earthfile\nCODE:\n```\nCACHE <directory>\n```\n\n----------------------------------------\n\nTITLE: Using EARTHLY_PUSH Builtin Arg\nDESCRIPTION: Demonstrates the new EARTHLY_PUSH builtin arg which is set to true when Earthly is run with the --push flag.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: dockerfile\nCODE:\n```\nVERSION --wait-block 0.6\n\nIF $EARTHLY_PUSH\n    RUN echo \"Pushing artifacts\"\nELSE\n    RUN echo \"Not pushing artifacts\"\nEND\n```\n\n----------------------------------------\n\nTITLE: Managing Earthly Organizations via CLI\nDESCRIPTION: This set of commands demonstrates how to manage Earthly organizations, including listing orgs, creating a new org, selecting an org, and inviting users to an org.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly org ls\n```\n\nLANGUAGE: bash\nCODE:\n```\nearthly org create <org-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nearthly org select <org-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nearthly org invite <email>\n```\n\n----------------------------------------\n\nTITLE: Importing Rust Library in Earthly\nDESCRIPTION: Imports the Rust library from Earthly's library repository. The --global-cache flag is required for proper caching of the Rust toolchain.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/lang-guides/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\n\nIMPORT github.com/earthly/lib/rust:2.2.11 AS rust\n```\n\n----------------------------------------\n\nTITLE: Using Build Args with Parentheses in COPY Command\nDESCRIPTION: Example demonstrating how to pass build arguments when copying artifacts. Parentheses are required around the artifact reference and build args.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_19\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM alpine:3.18\nRUN apk add coreutils # required for base32 binary\ndummy-target:\n    ARG encoder=\"base64\"\n    RUN echo hello | $encoder > encoded-data\n    SAVE ARTIFACT encoded-data\nexample:\n    COPY ( +dummy-target/encoded-data --encoder=base32 ) .\n    RUN cat encoded-data | base32 -d\n```\n\n----------------------------------------\n\nTITLE: Running Earthly's Self-Build Command\nDESCRIPTION: The command to build Earthly itself from its own repository. After checking out the Earthly code, this command executes the +all target defined in the root Earthfile of the repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/examples/examples.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly +all\n```\n\n----------------------------------------\n\nTITLE: Listing Earthly Satellites with ls Command\nDESCRIPTION: Command syntax for listing Earthly Satellites. Supports both personal and organization contexts with options for JSON output and showing hidden satellites.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] satellite ls\n\nearthly [options] satellite [--org <organization-name>] ls\n```\n\n----------------------------------------\n\nTITLE: Listing Available Satellites in Bash\nDESCRIPTION: Command to view all satellites currently available in the selected Earthly organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/using.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat ls\n```\n\n----------------------------------------\n\nTITLE: JavaScript Frontend Application\nDESCRIPTION: Frontend JavaScript application that fetches and displays user data from API.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getUsers() {\n\n  const response = await fetch('http://0.0.0.0:3080/api/users');\n  return await response.json();\n\n}\n\nfunction component() {\n  const element = document.createElement('div');\n  getUsers()\n    .then( users => {\n      element.innerHTML = `hello world <b>${users[0].first_name} ${users[0].last_name}</b>`\n    })\n\n\treturn element;\n}\n\ndocument.body.appendChild(component());\n```\n\n----------------------------------------\n\nTITLE: Copying Earthly Example Files (Bash)\nDESCRIPTION: This bash command demonstrates how to copy example files for the Go tutorial using Earthly's artifact functionality.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-3-adding-dependencies-with-caching.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly --artifact github.com/earthly/earthly/examples/tutorial/go:main+part3/part3 ./part3\n```\n\n----------------------------------------\n\nTITLE: Incorrect Use of RUN --no-cache for Push Operations\nDESCRIPTION: Example of an incorrect approach to pushing build artifacts to external services using RUN --no-cache. This pattern is dangerous as it may execute in parallel with tests and will run even when not in push mode.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_12\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad, and dangerous\nRUN --no-cache --secret GITHUB_TOKEN github-release upload ...\n```\n\n----------------------------------------\n\nTITLE: Manual ECR Authentication Command\nDESCRIPTION: Command for manually authenticating with AWS ECR using the AWS CLI. Useful for troubleshooting or when using pull-through caches that may conflict with the credential helper.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/aws-ecr.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naws ecr get-login-password | docker login --username AWS --password-stdin <aws_account_id>.dkr.ecr.<region>.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Using Cache Command with Shared Sharing Mode\nDESCRIPTION: This snippet demonstrates how to use the CACHE command with a shared sharing mode, allowing concurrent access to the cache.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: earthfile\nCODE:\n```\nRUN --mount type=cache,sharing=shared\n```\n\nLANGUAGE: earthfile\nCODE:\n```\nCACHE --sharing=shared\n```\n\n----------------------------------------\n\nTITLE: Custom Secret Provider Script Example\nDESCRIPTION: A bash script example for a custom secret provider that Earthly can use to retrieve secrets. The script returns the secret 'open sesame' when requesting 'mysecret'.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nset -e\n\nif [ \"$1\" = \"mysecret\" ]; then\n    echo -n \"open sesame\"\n    exit 0\nfi\n\nexit 2\n```\n\n----------------------------------------\n\nTITLE: Using TRY for Error Handling and Artifact Saving in Earthfile\nDESCRIPTION: Example of using the experimental TRY command to execute a test script and ensure that artifacts are saved even if the test fails in an Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_45\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION --try 0.8\n\nexample:\n    FROM ...\n    TRY\n        # only a single RUN command is currently supported\n        RUN ./test.sh\n    FINALLY\n        # only SAVE ARTIFACT commands are supported here\n        SAVE ARTIFACT junit.xml AS LOCAL ./\n    END\n```\n\n----------------------------------------\n\nTITLE: Overriding Target Platform in Earthly CLI Command\nDESCRIPTION: Example command showing how to override the target platform when executing an Earthly build from the command line, targeting arm64 architecture.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nearthly --platform=linux/arm64 +build\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests with Earthly\nDESCRIPTION: Command and output showing how to run Go unit tests using Earthly. The '-P' flag enables parallel execution of build targets.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/go/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n           buildkitd | Found buildkit daemon as docker container (earthly-buildkitd)\ngolang:1.15-alpine3.13 | --> Load metadata linux/amd64\n               +base | --> FROM golang:1.15-alpine3.13\n             context | --> local context .\n               +base | [██████████] resolve docker.io/library/golang:1.15-alpine3.13@sha256:330f31a4415d97bb64f244d5f4d838bea7a7ee1ab5a1a0bac49e7973c57cbb88 ... 100%\n             context | transferred 3 file(s) for context . (2.4 MB, 9 file/dir stats)\n               +base | --> WORKDIR /go-example\n               +deps | --> COPY go.mod go.sum ./\n               +deps | --> RUN go mod download\n               +deps | --> SAVE ARTIFACT go.sum +deps/go.sum AS LOCAL go.sum\n               +deps | --> SAVE ARTIFACT go.mod +deps/go.mod AS LOCAL go.mod\n          +unit-test | --> COPY main.go .\n          +unit-test | --> COPY main_test.go .\n          +unit-test | --> RUN CGO_ENABLED=0 go test github.com/earthly/earthly/examples/go\n              output | --> exporting outputs\n              output | [██████████] copying files ... 100%\n================================ SUCCESS [main] ================================\n               +deps | Artifact github.com/earthly/earthly/examples/go:go-integration-test-example+deps/go.mod as local go.mod\n               +deps | Artifact github.com/earthly/earthly/examples/go:go-integration-test-example+deps/go.sum as local go.sum\n```\n\n----------------------------------------\n\nTITLE: Running an Earthly build with a specific satellite\nDESCRIPTION: Command to run a build using a specific satellite without changing the global selection, useful for one-off remote builds.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-7-using-remote-runners.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nearthly --sat my-satellite +my-target\n```\n\n----------------------------------------\n\nTITLE: Simple Go Hello World Program\nDESCRIPTION: A basic Go program that prints 'hello world' to demonstrate the build process in Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Image Pass-Through Pattern in Earthly Without Re-saving\nDESCRIPTION: This example shows a wrapper target that builds another target producing an image, but doesn't re-save the image, limiting its usefulness in other contexts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_49\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# No pass-through image\nVERSION 0.8\nFROM alpine:3.18\nbuild:\n    ARG some_arg=...\n    ARG another_arg=...\n    RUN ...\n    SAVE IMAGE some-intermediate-image:latest\nbuild-wrapper:\n    BUILD +build --some_arg=... --another_arg=...\n```\n\n----------------------------------------\n\nTITLE: Sample Satellite Build Output in Bash\nDESCRIPTION: Example output of a build running on an Earthly Satellite, showing connection information, BuildKit version, and resource utilization details.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/using.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ earthly +build\n\n 1. Init 🚀\n————————————————————————————————————————————————————————————————————————————————\n\nNote: the interactive debugger, interactive RUN commands, and inline caching do not yet work on Earthly Satellites.\n\nThe following feature flags are recommended for use with Satellites and will be auto-enabled:\n  --new-platform, --use-registry-for-with-docker\n\n           satellite | Connecting to core-test...\n           satellite | ...Done\n           satellite | Version github.com/earthly/buildkit v0.6.21 7a6f9e1ab2a3a3ddec5f9e612ef390af218a32bd\n           satellite | Info: BuildKit version (v0.6.21) is different from Earthly version (prerelease)\n           satellite | Platforms: linux/amd64 (native) linux/amd64/v2 linux/amd64/v3 linux/amd64/v4 linux/arm64 linux/riscv64 linux/ppc64le linux/s390x linux/386 linux/mips64le linux/mips64 linux/arm/v7 linux/arm/v6\n           satellite | Utilization: 0 other builds, 0/12 op load\n           satellite | GC stats: 9.0 GB cache, avg GC duration 275ms, all-time GC duration 2.754s, last GC duration 0s, last cleared 0 B\n\n...\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Registry Container\nDESCRIPTION: Command to start a Docker registry container with configuration file mounted.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/pull-through-cache.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --network host -d --name docker-registry -v $HOME/.docker-registry-config.yml:/root/config.yml registry.hub.docker.com/library/registry:2 registry serve /root/config.yml\n```\n\n----------------------------------------\n\nTITLE: Enabling Buildkit Debug Mode in Earthly Config\nDESCRIPTION: YAML configuration for ~/.earthly/config.yml to enable Buildkit's scheduler debug mode, which provides detailed debugging information during builds.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  buildkit_additional_args: [ '-e', 'BUILDKIT_SCHEDULER_DEBUG=1' ]\n```\n\n----------------------------------------\n\nTITLE: Copying Tutorial Files with Earthly\nDESCRIPTION: Shows how to use Earthly to copy example files for the tutorial from a GitHub repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir tutorial\ncd tutorial\nearthly --artifact github.com/earthly/earthly/examples/tutorial/go:main+part1/part1 ./part1\n```\n\n----------------------------------------\n\nTITLE: Running a Build with Earthly\nDESCRIPTION: Command to execute a build using Earthly, which will automatically use the selected satellite.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly +my-target\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Authentication with htpasswd\nDESCRIPTION: Basic authentication configuration for a Docker registry using htpasswd file.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/pull-through-cache.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  htpasswd:\n    realm: basic-realm\n    path: /auth/htpasswd\n```\n\n----------------------------------------\n\nTITLE: Feature Flag Configuration for COPY Optimization\nDESCRIPTION: The use-copy-include-patterns flag optimizes file transfers by only sending files specifically listed in COPY commands rather than entire directories. This improves build performance by reducing the amount of data transferred.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/features.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--use-copy-include-patterns\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Context for Earthly Container in Kubernetes\nDESCRIPTION: YAML configuration to enable privileged mode for the Earthly container in Kubernetes, which is required for earthly/earthly to function properly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/kubernetes.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityContext:\n  privileged: true\n```\n\n----------------------------------------\n\nTITLE: Importing Earthly Library Package in Dockerfile\nDESCRIPTION: This snippet demonstrates how to import a specific package from the Earthly library into an Earthfile. It uses the utils/git package as an example.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-lib/earthly-lib.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nIMPORT github.com/earthly/lib/utils/git:2.2.11 AS git\n```\n\n----------------------------------------\n\nTITLE: Removing User from Earthly Project\nDESCRIPTION: This command removes a user from an Earthly project, revoking their access to project-specific resources while maintaining their organization-level access.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/managing-permissions.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nearthly project --project <project-name> member rm <email>\n```\n\n----------------------------------------\n\nTITLE: Creating an Earthfile for AWS ECR Image\nDESCRIPTION: A basic Earthfile that builds a simple Alpine-based image and configures it to be pushed to AWS ECR. The example shows the standard SAVE IMAGE command with ECR-specific repository format.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/aws-ecr.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:3.18\n\nbuild:\n    RUN echo \"Hello from Earthly!\" > motd\n    ENTRYPOINT cat motd\n    SAVE IMAGE --push <aws_account_id>.dkr.ecr.<region>.amazonaws.com/hello-earthly:with-love\n```\n\n----------------------------------------\n\nTITLE: List Secrets Command in Earthly CLI\nDESCRIPTION: Command to list accessible secrets.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] secrets ls [<path>]\n```\n\n----------------------------------------\n\nTITLE: Running Earthly Container with Docker Socket\nDESCRIPTION: Example showing how to run Earthly container using a Docker socket for BuildKit daemon. Mounts source code and Docker socket, disables embedded BuildKit.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/docker-images/all-in-one.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -t -v $(pwd):/workspace -v /var/run/docker.sock:/var/run/docker.sock -e NO_BUILDKIT=1 earthly/earthly:v0.8.13 +for-linux\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Earthly Authentication Token for CI\nDESCRIPTION: These snippets demonstrate how to create an Earthly authentication token for use in CI environments, and how to set it as an environment variable in CI systems.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nearthly account create-token [--write] <token-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nEARTHLY_TOKEN=...\n```\n\n----------------------------------------\n\nTITLE: Import with Buildkitd Example\nDESCRIPTION: Shows how to import and build from the Earthly buildkitd repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/importing.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nIMPORT github.com/earthly/earthly/buildkitd\n\n...\n\nBUILD buildkitd+buildkitd\n```\n\n----------------------------------------\n\nTITLE: Using Raw Output in Earthly for GitHub Actions Workflow Commands\nDESCRIPTION: Demonstrates the experimental --raw-output flag to output content without the standard Earthly target name prefix. This example shows how to use it for GitHub Actions workflow commands like group markers.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_10\n\nLANGUAGE: Dockerfile\nCODE:\n```\nraw:\n    RUN --raw-output echo \"::group::\"\n    RUN echo \"should have prefix\"\n    RUN --raw-output echo \"::endgroup::\"\n```\n\n----------------------------------------\n\nTITLE: Earthly Artifact Copy Command\nDESCRIPTION: Command to copy example files from GitHub repository to local system using Earthly's artifact functionality.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly --artifact github.com/earthly/earthly/examples/tutorial/go:main+part6/part6 ./part6\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Examples for Earthly Global Settings\nDESCRIPTION: Example YAML configuration for the global settings in config.yml showing how to disable analytics and set local registry host.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/docker-images/all-in-one.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{disable_analytics: true, local_registry_host: 'tcp://127.0.0.1:8371'}\n```\n\n----------------------------------------\n\nTITLE: Updating Satellite to Specific Version\nDESCRIPTION: This command updates the satellite to a specific Earthly version.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nearthly satellite update --version v0.6.29 my-satellite\n```\n\n----------------------------------------\n\nTITLE: Selecting a Satellite for Use\nDESCRIPTION: This command selects a satellite for use in future builds.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat select <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Volume Mounts for Earthly in Kubernetes\nDESCRIPTION: YAML configuration for mounting temporary storage volume in Kubernetes for Earthly's intermediate operations. This setup uses an emptyDir volume type mounted at /tmp/earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/kubernetes.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /tmp/earthly\n    name: buildkitd-temp\n...\nvolumes:\n  - name: buildkitd-temp\n    emptyDir: {} # Or other volume type\n```\n\n----------------------------------------\n\nTITLE: Push and Deploy Workflow\nDESCRIPTION: Shows how to implement a push-then-deploy workflow using WAIT to ensure proper ordering of operations.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: Earthfile\nCODE:\n```\npush-and-deploy:\n  ...\n  WAIT\n    BUILD +my-image\n  END\n  RUN --push ./deploy.sh my-org/my-image:latest\nmy-image:\n  ...\n  SAVE IMAGE --push my-org/my-image:latest\n```\n\n----------------------------------------\n\nTITLE: Running the Built Docker Image\nDESCRIPTION: Command and output showing how to run the Docker image that was built using Earthly. This demonstrates executing the containerized Go application.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/go/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n~/workspace/earthly/examples/go ❯ docker run --rm go-example:latest\nhello world\n```\n\n----------------------------------------\n\nTITLE: VERSION Declaration with Multiple Flags in Earthfile\nDESCRIPTION: Example of how to declare VERSION 0.8 equivalence with multiple feature flags. This shows all the feature flags that are automatically enabled when using VERSION 0.8.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nVERSION \\\n  --arg-scope-and-set \\\n  --cache-persist-option \\\n  --git-refs \\\n  --global-cache \\\n  --no-network \\\n  --pass-args \\\n  --use-docker-ignore \\\n  --use-function-keyword \\\n  --use-visited-upfront-hash-collection \\\n  0.7\n```\n\n----------------------------------------\n\nTITLE: List Organizations Command in Earthly CLI\nDESCRIPTION: Commands to list all organizations the current account is associated with.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] org list\n\nearthly [options] org ls\n```\n\n----------------------------------------\n\nTITLE: Updating Satellite Feature Flags\nDESCRIPTION: This command updates the feature flags for a satellite. The entire set of existing feature flags are replaced with the new set.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nearthly satellite update --feature-flag cache-pct=30 my-satellite\n```\n\n----------------------------------------\n\nTITLE: Inspecting Earthly Satellites with inspect Command\nDESCRIPTION: Command syntax for showing detailed information about an Earthly Satellite. Supports both personal and organization contexts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] satellite inspect <satellite-name>\n\nearthly [options] satellite [--org <organization-name>] inspect <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images from Dockerfile\nDESCRIPTION: Command syntax for building Docker images from a Dockerfile instead of an Earthfile, with support for various build options.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] docker-build [--dockerfile <dockerfile-path>] [--tag=<image-tag>] [--target=<target-name>] [--platform <platform1[,platform2,...]>] <build-context-dir> [--arg1=arg-value]\n```\n\n----------------------------------------\n\nTITLE: Using Builtin Args with Default Override in Earthly\nDESCRIPTION: Example of declaring a builtin arg and creating an additional overridable arg that takes the builtin arg as default value. This pattern allows for optional override of builtin values.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/builtin-args.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG EARTHLY_TARGET_TAG\nARG TAG=$EARTHLY_TARGET_TAG\nSAVE IMAGE --push some/name:$TAG\n```\n\n----------------------------------------\n\nTITLE: Running Earthly Build from Remote Repository\nDESCRIPTION: Command to run the build from GitHub without cloning the repository locally.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/multirepo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly github.com/earthly/earthly/examples/multirepo:main+docker\n```\n\n----------------------------------------\n\nTITLE: Get Secret Command in Earthly CLI\nDESCRIPTION: Command to retrieve a secret from the secrets store.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] secrets get [-n] <path>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for C Unit Tests\nDESCRIPTION: Configures a CMake build system for a C unit testing project. Sets minimum CMake version, defines project name, enables strict compiler warnings, and links against the CUnit testing framework. Compiles test.c and fibonacci.c into an executable named unit-test.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/c/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12)\nproject (c-example-unit-test)\nadd_compile_options(-Wall -Wextra -pedantic -Werror)\nadd_executable(unit-test test.c ../src/fibonacci.c)\ntarget_link_libraries(unit-test cunit)\n```\n\n----------------------------------------\n\nTITLE: Using a Satellite for a Single Build in Bash\nDESCRIPTION: Command to use a specific satellite for a single build execution without changing the default selection.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/using.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nearthly --sat <satellite-name> +build\n```\n\n----------------------------------------\n\nTITLE: Running the earthly cloud install command for manual BYOC configuration in AWS\nDESCRIPTION: Command to manually install BYOC Satellites by providing all required AWS infrastructure information including account ID, region, security group, SSH key, subnet, and IAM roles.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/byoc/aws/manual.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nearthly cloud install \\\n  --name <name> \\\n  --aws-account-id <aws-account-id> \\\n  --aws-region <aws-region> \\\n  --aws-security-group-id <aws-security-group-id> \\\n  --aws-ssh-key-name <aws-ssh-key-id> \\\n  --aws-subnet-id <aws-subnet-id> \\\n  --aws-instance-profile-arn <aws-instance-profile-arn> \\\n  --aws-earthly-access-role-arn <aws-earthly-access-role-arn>\n```\n\n----------------------------------------\n\nTITLE: Adding User to Earthly Project with Specific Permission\nDESCRIPTION: This command adds a user to an Earthly project with a specified access level. The user must already be a member of the organization containing the project.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/managing-permissions.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nearthly project --project <project-name> member add --permission <access-level> <email>\n```\n\n----------------------------------------\n\nTITLE: Gradle Build Configuration for Java Project\nDESCRIPTION: This Gradle build file configures the Java project, specifying dependencies, main class, and compilation settings. It includes dependencies for Joda-Time, PostgreSQL JDBC driver, and JUnit for testing.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_16\n\nLANGUAGE: Groovy\nCODE:\n```\napply plugin: 'java'\napply plugin: 'application'\n\nmainClassName = 'postgresclient.PostgreSQLJDBC'\n\nrepositories {\n    mavenCentral()\n}\n\njar {\n    baseName = 'hello-world'\n    version = '0.0.1'\n}\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\ndependencies {\n    compile \"joda-time:joda-time:2.2\"\n    compile(group: 'org.postgresql', name: 'postgresql', version: '42.3.3')\n    testCompile \"junit:junit:4.12\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CI Pipelines with PIPELINE and TRIGGER in Earthfile\nDESCRIPTION: Example of how to define an Earthly CI pipeline using the new PIPELINE and TRIGGER keywords. This allows specifying when and how pipelines should be executed.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: Earthfile\nCODE:\n```\nmy-pipeline:\n    PIPELINE --push\n    TRIGGER push main\n    TRIGGER pr main\n    BUILD +my-target\n```\n\n----------------------------------------\n\nTITLE: Clearing Satellite Cache Using Prune Command\nDESCRIPTION: This command clears the satellite cache using the prune command. It requires the satellite to be selected before running.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nearthly prune -a\n```\n\n----------------------------------------\n\nTITLE: Running Earthly BuildKit Docker Container for Remote Usage\nDESCRIPTION: This command runs the Earthly BuildKit Docker container for remote usage. It enables TCP transport, exposes port 8372, and includes all the options from the local usage example.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/docker-images/buildkit-standalone.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --privileged -t -v earthly-tmp:/tmp/earthly:rw -e BUILDKIT_TCP_TRANSPORT_ENABLED=true -p 8372:8372 earthly/buildkitd:v0.7.19\n```\n\n----------------------------------------\n\nTITLE: Inefficient Git Clone Pattern in Earthfiles\nDESCRIPTION: A non-recommended way to work with external repositories that uses direct Git cloning within the build.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad\nVERSION 0.8\nFROM alpine:3.18\nWORKDIR /work\nprint-file:\n    GIT CLONE git@github.com:my-co/repo-1.git\n    RUN echo my-file.txt\n```\n\n----------------------------------------\n\nTITLE: Using earthly registry Command\nDESCRIPTION: Command syntax for managing registry access in cloud-based secrets, including options for organization and project specification.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] registry [--org <organization-name>, --project <project>] (setup|list|remove) [<flags>]\n```\n\n----------------------------------------\n\nTITLE: Managing Earthly Satellites\nDESCRIPTION: Command syntax for managing Earthly Satellite runners as remote backends for builds, supporting operations like launch, list, inspect, select, and remove.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] satellite (launch|ls|inspect|select|unselect|rm)\n```\n\n----------------------------------------\n\nTITLE: Earthly Mirror Configuration\nDESCRIPTION: Earthly configuration for using an insecure registry mirror.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/pull-through-cache.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  buildkit_additional_config: |\n    [registry.\"docker.io\"]\n      mirrors = [\"192.168.0.80:5000\"]\n    [registry.\"192.168.0.80:5000\"]\n      insecure = true\n```\n\n----------------------------------------\n\nTITLE: Initializing Earthly Installation with Autocomplete in Bash\nDESCRIPTION: This command initializes the Earthly installation and sets up autocomplete for the shell. It requires sudo privileges.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo earthly bootstrap --with-autocomplete\n```\n\n----------------------------------------\n\nTITLE: Building Earthly with Debugger Support\nDESCRIPTION: Command to build Earthly with debugging symbols by disabling Go compiler optimizations, allowing the use of the delve debugger.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./earthly +for-own -GO_GCFLAGS='all=-N -l'\n```\n\n----------------------------------------\n\nTITLE: Forcing Local Execution for a Build in Bash\nDESCRIPTION: Command to use the local machine for a specific build even when a satellite is selected as the default.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/using.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nearthly --no-sat +build\n```\n\n----------------------------------------\n\nTITLE: Inviting Team Members to an Organization\nDESCRIPTION: Command to invite team members to use the satellite by adding them to the organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nearthly org invite <email>\n```\n\n----------------------------------------\n\nTITLE: Python Project Build Configuration with Earthly\nDESCRIPTION: Earthly build configuration for a Python application, including artifact copying and Docker image creation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_13\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM python:3\nWORKDIR /code\n\nbuild:\n     # In Python, there's nothing to build.\n    COPY src src\n    SAVE ARTIFACT src /src\n\ndocker:\n    COPY +build/src src\n    ENTRYPOINT [\"python3\", \"./src/hello.py\"]\n    SAVE IMAGE python-example:latest\n```\n\n----------------------------------------\n\nTITLE: Updating Member Permissions in Earthly Projects\nDESCRIPTION: Command syntax for updating the permission level of an existing project member.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] project [--org <organization-name>] --project <project-name> member update <user-email> <permission>\n```\n\n----------------------------------------\n\nTITLE: Changing Satellite Size\nDESCRIPTION: This command changes the size of an existing satellite. Note that changing the size will also drop its existing cache.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nearthly satellite update --size xlarge my-satellite\n```\n\n----------------------------------------\n\nTITLE: JavaScript Backend API Package Configuration\nDESCRIPTION: NPM package configuration for JavaScript backend API service.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"api\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"express\": \"^4.17.1\",\n    \"http-proxy-middleware\": \"^1.0.4\",\n    \"pg\": \"^8.7.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Satellite Metrics Output Example\nDESCRIPTION: Example output showing satellite performance metrics, including utilization and garbage collection statistics, which are useful for monitoring satellite health and diagnosing performance issues.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/best-practices.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n Init 🚀\n————————————————————————————————————————————————————————————————————————————————\n\n           satellite | Connecting to my-satellite...\n           satellite | ...Done\n           satellite | Version github.com/earthly/buildkit v0.7.23 086f60eecf5a2261bbd53299614f88b3def12746\n           satellite | Platforms: linux/amd64 (native) linux/amd64/v2 linux/amd64/v3 linux/amd64/v4 linux/arm64 linux/riscv64 linux/ppc64 linux/ppc64le linux/s390x linux/386 linux/mips64le linux/mips64 linux/arm/v7 linux/arm/v6\n           satellite | Utilization: 0 other builds, 0/12 op load\n           satellite | GC stats: 2.1 MB cache, avg GC duration 0s, all-time GC duration 23ms, last GC duration 0s, last cleared 0 B\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SSH Port for Self-hosted Git\nDESCRIPTION: YAML configuration for setting up Git authentication with a custom SSH port for self-hosted Git repositories.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/auth.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngit:\n    ghe.internal.mycompany.com:\n        auth: ssh\n        user: git\n        port: 2222\n```\n\n----------------------------------------\n\nTITLE: Running Earthly BuildKit Docker Container for Local Usage\nDESCRIPTION: This command runs the Earthly BuildKit Docker container for local usage. It uses privileged mode, enables TTY, and mounts a Docker volume for temporary storage.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/docker-images/buildkit-standalone.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --privileged -t -v earthly-tmp:/tmp/earthly:rw earthly/buildkitd:v0.7.19\n```\n\n----------------------------------------\n\nTITLE: Building Debian Package for Specific Platform\nDESCRIPTION: Command to build a Debian package for a specific platform. Specifies both the release tag and the target platform (arm7 in this example).\nSOURCE: https://github.com/earthly/earthly/blob/main/release/apt-repo/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nearthly +deb --RELEASE_TAG=\"$RELEASE_TAG\" --EARTHLY_PLATFORM=arm7\n```\n\n----------------------------------------\n\nTITLE: Managing Earthly Projects with project Command\nDESCRIPTION: Command syntax for managing Earthly projects, which are shared resources within organizations. Provides subcommands for listing, removing, creating, and managing members.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] project (ls|rm|create|member)\n```\n\n----------------------------------------\n\nTITLE: Reverting to local Earthly builds\nDESCRIPTION: Command to disable the use of satellites and revert to performing builds locally.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-7-using-remote-runners.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat unselect\n```\n\n----------------------------------------\n\nTITLE: Earthly Secrets File for Docker Hub Authentication\nDESCRIPTION: Content for a .secret file that contains Docker Hub credentials, to be used with the Earthly CLI for authentication during tests.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# .secret file\nDOCKERHUB_USER=<my-docker-username>\nDOCKERHUB_PASS=<my-docker-password-or-token>\n```\n\n----------------------------------------\n\nTITLE: Incorrect File Passing Between Two LOCALLY Targets\nDESCRIPTION: An incorrect approach to passing files between two LOCALLY targets where the execution order is not guaranteed, leading to potential race conditions.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_31\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad\nall:\n    BUILD +dep\n    BUILD +run-locally\ndep:\n    LOCALLY\n    RUN echo \"Hello World\" > ./my-artifact.txt\n    SAVE ARTIFACT ./my-artifact.txt AS LOCAL ./build/my-artifact.txt\nrun-locally:\n    LOCALLY\n    RUN echo ./build/my-artifact.txt\n```\n\n----------------------------------------\n\nTITLE: Building Earthly with Local Buildkit Code\nDESCRIPTION: Command to build Earthly using a local copy of the Buildkit code instead of the version specified in go.mod, useful for testing changes to Buildkit.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nearthly +for-linux --BUILDKIT_PROJECT=../buildkit\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Commands in WITH DOCKER\nDESCRIPTION: This snippet demonstrates how to execute multiple commands within a single RUN instruction inside a WITH DOCKER clause, as only one RUN command is allowed per clause.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/docker-in-earthly.md#2025-04-21_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nWITH DOCKER\n    RUN command1 && \\\n        command2 && \\\n        command3 && \\\n        ...\nEND\n```\n\n----------------------------------------\n\nTITLE: Setting Container Frontend via Command Line\nDESCRIPTION: Shows how to configure the container frontend (Docker or Podman) using the earthly command line interface.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Docker\nearthly config 'global.container_frontend' 'docker-shell'\n\n# Podman\nearthly config 'global.container_frontend' 'podman-shell'\n```\n\n----------------------------------------\n\nTITLE: Invoking Terraform Apply Target with --push\nDESCRIPTION: Command to run an Earthly build of a terraform apply target with the --push flag to enable changes to infrastructure.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nearthly --push +apply\n```\n\n----------------------------------------\n\nTITLE: Controlling Push Order with WAIT\nDESCRIPTION: Demonstrates how to use the WAIT clause to control push order, ensuring tests pass before pushing an image.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: Earthfile\nCODE:\n```\ntest-and-push:\n  WAIT\n    BUILD +test\n  END\n  BUILD +my-image\nmy-image:\n  ...\n  SAVE IMAGE --push my-org/my-image:latest\n```\n\n----------------------------------------\n\nTITLE: ARG Propagation Across Targets in Earthly\nDESCRIPTION: Shows how auto-skip handles ARG propagation between different targets, contrasting static and dynamic ARG values.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/caching/caching-in-earthfiles.md#2025-04-21_snippet_4\n\nLANGUAGE: earthfile\nCODE:\n```\n# Supported\nARG MY_ARG=foo\nBUILD +target --arg=$MY_ARG\n\n# Might not be supported (depending on how the target uses the arg)\nARG MY_ARG=$(cat ./file)\nBUILD +target --arg=$MY_ARG\n```\n\n----------------------------------------\n\nTITLE: Styling Next.js Component with CSS Module\nDESCRIPTION: This CSS module defines styles for the Hello World component. It sets font properties, background color, padding, and text alignment. It also includes a hover effect that changes the background color.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/next-js-netlify/README.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.hello {\n  font: 15px Helvetica, Arial, sans-serif;\n  background: #eee;\n  padding: 100px;\n  text-align: center;\n  transition: 100ms ease-in background;\n}\n.hello:hover {\n  background: #ccc;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MkDocs Production Build with Earthly\nDESCRIPTION: Command to create a production build of the MkDocs documentation using Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/mkdocs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly +build\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker as Container Frontend\nDESCRIPTION: Configuration example showing how to explicitly set Docker as the container frontend for Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  container_frontend: docker-shell\n```\n\n----------------------------------------\n\nTITLE: Running Earthly with Satellites and Remote Code\nDESCRIPTION: Example showing Earthly container usage with Satellites for remote builds from GitHub repositories. Requires Earthly token for satellite access.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/docker-images/all-in-one.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -t -e NO_BUILDKIT=1 -e EARTHLY_TOKEN=<my-token> earthly/earthly:v0.8.13 --ci --org <my-org> --sat <my-sat> github.com/earthly/earthly+for-linux\n```\n\n----------------------------------------\n\nTITLE: Unselecting a Satellite\nDESCRIPTION: This command unselects the current satellite, causing Earthly to run builds locally from that point onwards.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat unselect\n```\n\n----------------------------------------\n\nTITLE: List Keys Command in Earthly CLI\nDESCRIPTION: Command to display all authorized public keys for the current Earthly account.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] account list-keys\n```\n\n----------------------------------------\n\nTITLE: Saving symbolic links as artifacts\nDESCRIPTION: Example of saving and copying symbolic links as artifacts using the --symlink-no-follow option.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_25\n\nLANGUAGE: Dockerfile\nCODE:\n```\nproducer:\n    RUN ln -s nonexistentfile symlink\n    SAVE ARTIFACT --symlink-no-follow symlink\n\nconsumer:\n    COPY --symlink-no-follow +producer/symlink\n```\n\n----------------------------------------\n\nTITLE: Gradle Build Configuration for Java\nDESCRIPTION: Gradle build configuration specifying Java application settings and dependencies.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_12\n\nLANGUAGE: Groovy\nCODE:\n```\napply plugin: 'java'\napply plugin: 'application'\n\nmainClassName = 'hello.HelloWorld'\n\njar {\n    baseName = 'hello-world'\n    version = '0.0.1'\n}\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n```\n\n----------------------------------------\n\nTITLE: Running Earthly with Custom Working Directory\nDESCRIPTION: Example showing how to run Earthly with a custom working directory by specifying an alternative mount point and working directory.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/use-earthly-ci-image.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --privileged --rm -v \"$PWD\":/my-dir -w /my-dir earthly/earthly:v0.8.13 +my-target\n```\n\n----------------------------------------\n\nTITLE: Updating User's Permission Level in Earthly Organization\nDESCRIPTION: This command updates the permission level of an existing user within an Earthly organization. It allows changing the user's access level to modify their permissions.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/managing-permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly org member update --permission <permission> <email>\n```\n\n----------------------------------------\n\nTITLE: Account Login Commands in Earthly CLI\nDESCRIPTION: Commands for logging into an Earthly account using various authentication methods including public keys, email/password, or token.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# login using registered public keys or check who you are logged in as\nearthly [options] account login\n\n# Login with email and input password interactively\nearthly [options] account login --email <email>\n\n# Login with email and password\nearthly [options] account login --email <email> --password <password>\n\n# Login with your tokem\nearthly [options] account login --token <token>\n```\n\n----------------------------------------\n\nTITLE: Launching Satellite with Weekends-Only Maintenance\nDESCRIPTION: This command configures the satellite to only run auto-updates on Saturdays, based on UTC timezone.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nearthly satellite launch --maintenance-weekends-only my-satellite\n```\n\n----------------------------------------\n\nTITLE: Java PostgreSQL Client Example\nDESCRIPTION: This Java class demonstrates a simple PostgreSQL client that connects to a database using JDBC. It includes error handling and prints a success message upon successful connection.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\npackage postgresclient;\n\nimport org.joda.time.LocalTime;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\n\n\npublic class PostgreSQLJDBC {\n   public static void main(String args[]) {\n      Connection c = null;\n      try {\n         Class.forName(\"org.postgresql.Driver\");\n         c = DriverManager\n            .getConnection(\"jdbc:postgresql://postgres:5432/test_db\",\n            \"earthly\", \"password\");\n      } catch (Exception e) {\n         e.printStackTrace();\n         System.err.println(e.getClass().getName()+\": \"+e.getMessage());\n         System.exit(0);\n      }\n      System.out.println(\"Opened database successfully\");\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Directory COPY vs Single COPY with --dir\nDESCRIPTION: Comparison between multiple COPY commands for individual directories versus a single COPY command with the --dir option. Both achieve the same result but use different numbers of layers.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_13\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCOPY dir1 dir1\nCOPY dir2 dir2\nCOPY dir3 dir3\n```\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCOPY --dir dir1 dir2 dir3 ./\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Credential Helper for GCP Artifact Registry\nDESCRIPTION: A sample Docker configuration entry created by running 'gcloud auth configure-docker' that sets up the GCP credential helper for Artifact Registry authentication.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/gcp-artifact-registry.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n {\n    \"credHelpers\": {\n        \"<region>-docker.pkg.dev\": \"gcloud\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running MkDocs Development Server with Earthly\nDESCRIPTION: Command to start a live-reloading development environment using Earthly. This will automatically open a web browser and refresh when changes are made to documentation files.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/mkdocs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly +dev\n```\n\n----------------------------------------\n\nTITLE: Sleeping Earthly Satellites with sleep Command\nDESCRIPTION: Command syntax for manually forcing an Earthly Satellite to sleep from an operational state. Supports both personal and organization contexts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] satellite sleep <satellite-name>\n\nearthly [options] satellite [--org <organization-name>] sleep <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Waking Earthly Satellites with wake Command\nDESCRIPTION: Command syntax for manually forcing an Earthly Satellite to wake up from a sleep state. Supports both personal and organization contexts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] satellite wake <satellite-name>\n\nearthly [options] satellite [--org <organization-name>] wake <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Verifying Earthly Installation in Bash\nDESCRIPTION: This command verifies the Earthly installation by building a simple hello-world project from GitHub.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nearthly github.com/earthly/hello-world:main+hello\n```\n\n----------------------------------------\n\nTITLE: List Tokens Command in Earthly CLI\nDESCRIPTION: Command to list all authentication tokens associated with the account.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] account list-tokens\n```\n\n----------------------------------------\n\nTITLE: Enabling BuildKit Git Debugging\nDESCRIPTION: YAML configuration for enabling low-level Git debugging in BuildKit.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/auth.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  buildkit_additional_args: [ '-e', 'BUILDKIT_DEBUG_GIT=1' ]\n```\n\n----------------------------------------\n\nTITLE: Running Earthly Secret Commands\nDESCRIPTION: Example of running Earthly secret management commands.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/docker-images/all-in-one.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -t -e NO_BUILDKIT=1 -e EARTHLY_TOKEN=<my-token> earthly/earthly:v0.8.13 secret get foo\n```\n\n----------------------------------------\n\nTITLE: Executing the Build Command\nDESCRIPTION: Shows the command to execute the build target in the Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/import/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly +build\n```\n\n----------------------------------------\n\nTITLE: Removing User from Earthly Organization\nDESCRIPTION: This command removes a user from an Earthly organization, revoking their access to all resources within that organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/managing-permissions.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly org member rm <email>\n```\n\n----------------------------------------\n\nTITLE: Installing BYOC in Earthly CLI\nDESCRIPTION: Command to integrate the AWS CloudFormation-provisioned BYOC installation with Earthly, using the same stack name used in AWS to maintain correlation between AWS and Earthly resources.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/byoc/aws/cloudformation.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nearthly cloud install --via terraform --name <stack-name>\n```\n\n----------------------------------------\n\nTITLE: Listing Registered GitHub Actions Integrations with Earthly CLI\nDESCRIPTION: Command to list all registered GitHub Actions integrations for an Earthly organization using the Earthly CLI.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/gha-runners.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nearthly gha ls \\\n  --org <earthly_organization>\n```\n\n----------------------------------------\n\nTITLE: Installing Earthly on Fedora in Bash\nDESCRIPTION: This command installs Earthly on Fedora systems using DNF package manager.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install earthly\n```\n\n----------------------------------------\n\nTITLE: Generating GitHub CI Tasks for Earthly\nDESCRIPTION: Command to update the GitHub workflow configuration in .github/workflows/ci.yml after modifying tests in the directory.\nSOURCE: https://github.com/earthly/earthly/blob/main/scripts/tests/auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly +generate-github-tasks\n```\n\n----------------------------------------\n\nTITLE: Corrected Earthfile with Fixed File Path\nDESCRIPTION: The fixed version of the Earthfile that corrects the path where the sherlock.txt file is saved. It now properly saves the file to the working directory (/code) instead of the root directory.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/debugging.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Earthfile\n\nVERSION 0.8\nFROM python:3\nWORKDIR /code\n\ntest:\n  RUN curl https://raw.githubusercontent.com/jsvine/markovify/master/test/texts/sherlock.txt > /code/sherlock.txt\n  COPY generate_phrase.py .\n  RUN pip3 install markovify\n  RUN python3 generate_phrase.py\n```\n\n----------------------------------------\n\nTITLE: Unselecting a Satellite\nDESCRIPTION: Command to stop using a satellite and revert to local machine builds.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat unselect\n```\n\n----------------------------------------\n\nTITLE: Original Earthfile Configuration Without Import\nDESCRIPTION: Shows the original build configuration that directly references paths and external repositories without using IMPORT aliases.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/import/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nbuild:\n    DO ./some/local/path+PRINT --string=\"IMPORT example\"\n    COPY ./some/local/path+get-file/file.txt ./\n    RUN cat file.txt\n    BUILD github.com/earthly/hello-world:main+hello\n```\n\n----------------------------------------\n\nTITLE: Checking Podman Graph Driver\nDESCRIPTION: Command to display detailed Podman configuration information, including the graph driver. This is useful for verifying that an efficient driver like overlay is being used.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/podman.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> podman info --debug\n\n...\ngraphDriverName: overlay  # or something similar\n...\n```\n\n----------------------------------------\n\nTITLE: Using Earthly Help Command\nDESCRIPTION: Syntax for displaying help information about Earthly commands. Shows two forms: general help and command-specific help.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nearthly --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nearthly <command> --help\n```\n\n----------------------------------------\n\nTITLE: Organization Creation Command in Earthly CLI\nDESCRIPTION: Command to create a new organization for sharing secrets between accounts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] org create <org-name>\n```\n\n----------------------------------------\n\nTITLE: Add Key Command in Earthly CLI\nDESCRIPTION: Command to authorize a new public key for account access.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] account add-key [<public-key>]\n```\n\n----------------------------------------\n\nTITLE: Checking Current Cache Volume Size in Bash\nDESCRIPTION: This Bash command allows users to check the current size of the Earthly cache volume. It uses the 'du' command to display the size of the '/var/lib/docker/volumes/earthly-cache' directory.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/caching/managing-cache.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo du -h /var/lib/docker/volumes/earthly-cache | tail -n 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Earthly with Secret Environment Variables in cloudbuild.yaml\nDESCRIPTION: Configuration for an Earthly build step that requires authentication via environment variables. This step demonstrates how to use secret environment variables with Earthly in Google Cloud Build.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/google-cloud-build.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  - id: 'gcp-test'\n    name: 'earthly/earthly:v0.8.13'\n    args:\n      - +gcp-cloudbuild\n    secretEnv:\n      - 'EARTHLY_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Registering an Earthly Account via CLI\nDESCRIPTION: This snippet shows how to register an Earthly account using the CLI. It involves two steps: initiating registration with an email and completing registration with a verification token.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly account register --email <email>\n```\n\nLANGUAGE: bash\nCODE:\n```\nearthly account register --email <email> --token <token>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Cloud for Organization in Earthly\nDESCRIPTION: Shows how to set a cloud installation as the default for the entire organization using the 'earthly cloud use' command, which affects all users within the organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/byoc/byoc.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nearthly cloud use <name>\n```\n\n----------------------------------------\n\nTITLE: Declaring VERSION 0.7 with All Feature Flags in Earthfile\nDESCRIPTION: Example showing the equivalent feature flags that are enabled when declaring VERSION 0.7 in an Earthfile. This demonstrates all the experimental features that have been promoted to general availability.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: Earthfile\nCODE:\n```\nVERSION \\\n  --check-duplicate-images \\\n  --earthly-git-author-args \\\n  --earthly-locally-arg \\\n  --earthly-version-arg \\\n  --explicit-global \\\n  --new-platform \\\n  --no-tar-build-output \\\n  --save-artifact-keep-own \\\n  --shell-out-anywhere \\\n  --use-cache-command \\\n  --use-chmod \\\n  --use-copy-link \\\n  --use-host-command \\\n  --use-no-manifest-list \\\n  --use-pipelines \\\n  --use-project-secrets \\\n  --wait-block \\\n  0.6\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure Mirror in BuildKit\nDESCRIPTION: Configuration for using an insecure mirror in Earthly's BuildKit setup.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/pull-through-cache.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  buildkit_additional_config: |\n    [registry.\"<upstream>\"]\n      mirrors = [\"<mirror>\"]\n\n    [registry.\"<mirror>\"]\n      insecure = true\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Authenticated Docker Hub Mirror\nDESCRIPTION: Command to run Earthly tests using a Docker Hub mirror that requires authentication, providing both mirror URL and credentials.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./build/*/*/earthly -P \\\n  --secret DOCKERHUB_MIRROR_USER=<my-mirror-username> \\\n  --secret DOCKERHUB_MIRROR_PASS=<my-mirror-password> \\\n  ./tests+all --DOCKERHUB_MIRROR=<ip-address-or-hostname>:<port> --DOCKERHUB_MIRROR_AUTH=true\n```\n\n----------------------------------------\n\nTITLE: Selecting an Organization Before Launching a Satellite\nDESCRIPTION: Commands for selecting an organization before launching a satellite when a user is part of multiple Earthly organizations.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly org select <org-name>\nearthly sat launch <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Unselecting a Satellite in Bash\nDESCRIPTION: Command to revert to using the local machine for builds instead of the previously selected satellite.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/using.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat unselect\n```\n\n----------------------------------------\n\nTITLE: Inefficient Docker-in-Docker Setup in Earthly\nDESCRIPTION: This example shows an inefficient approach to Docker-in-Docker setup where Docker needs to be installed on each run when cache is invalidated, leading to performance issues.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_51\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Avoid\nintegration-test:\n    FROM some-other-image:latest\n    COPY docker-compose.yml ./\n    WITH DOCKER --compose docker-compose.yml\n        RUN ...\n    END\n```\n\n----------------------------------------\n\nTITLE: Copying Java Example Files with Earthly (Bash)\nDESCRIPTION: Command to copy files for the Java example (Part 5) using Earthly's artifact feature.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-5-importing.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nearthly --artifact github.com/earthly/earthly/examples/tutorial/java:main+part5/part5 ./part5\n```\n\n----------------------------------------\n\nTITLE: Incorrect Artifact Export Example\nDESCRIPTION: Example showing incorrect usage of SAVE ARTIFACT command where the artifact will not be available because local export only happens at end of successful build.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_49\n\nLANGUAGE: earthly\nCODE:\n```\nmy-artifact:\n    FROM alpine 3.13\n    ...\n    SAVE ARTIFACT ./my-example-artifact AS LOCAL ./my-example-artifact\n\na-locally-example:\n    LOCALLY\n    BUILD +my-artifact\n    # The artifact will not be available here because the local export of the\n    # artifact only takes place at the end of an entire successful build.\n    RUN cat ./my-example-artifact\n```\n\n----------------------------------------\n\nTITLE: Manually Waking Up a Satellite\nDESCRIPTION: This command manually wakes up a satellite from sleep state.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat wake <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Password Reset Commands in Earthly CLI\nDESCRIPTION: Commands for initiating and completing a password reset process.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] account reset --email <email> [--token <token>]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Earthly Repository on Debian-based Systems in Bash\nDESCRIPTION: This command adds the Earthly stable repository to the system's package sources on Debian-based systems.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\necho \\\n  \"deb [arch=amd64 signed-by=/usr/share/keyrings/earthly-archive-keyring.gpg] https://pkg.earthly.dev/deb \\\n  stable main\" | sudo tee /etc/apt/sources.list.d/earthly.list > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Finding SSH Key ID via AWS CLI\nDESCRIPTION: Command to retrieve the KeyPairId of the satellite SSH key created by CloudFormation, filtering by the stack name provided during installation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/byoc/aws/cloudformation.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naws ec2 describe-key-pairs \\\n  --filters 'Name=key-name,Values=<stack-name>-satellite-key' \\\n  --query 'KeyPairs[*].KeyPairId' \\\n  --output text\n```\n\n----------------------------------------\n\nTITLE: Running Earthly Build for Multirepo Project\nDESCRIPTION: Command to execute the Earthly build in the current directory using the +docker target.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/multirepo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly +docker\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Size via Command Line\nDESCRIPTION: Example of setting the global cache size to 20000 MB using the earthly command line interface.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nearthly config global.cache_size_mb 20000\n```\n\n----------------------------------------\n\nTITLE: Creating an Earthfile for GCP Artifact Registry\nDESCRIPTION: A basic Earthfile that builds a simple Docker image and configures it to be pushed to GCP Artifact Registry. The image contains a simple text file with a greeting message.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/gcp-artifact-registry.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:3.18\n\nbuild:\n    RUN echo \"Hello from Earthly!\" > motd\n    ENTRYPOINT cat motd\n    SAVE IMAGE --push <region>-docker.pkg.dev/<project>/hello-earthly/hello-earthly:with-love\n```\n\n----------------------------------------\n\nTITLE: Running Tests Using Earthly's Internal Mirror\nDESCRIPTION: Command to run Earthly tests using Earthly's internal Docker Hub mirror with cloud-hosted credentials, available only to members of the Earthly organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n./build/*/*/earthly -P \\\n  ./tests+all --DOCKERHUB_MIRROR_AUTH_FROM_CLOUD_SECRETS=true\n```\n\n----------------------------------------\n\nTITLE: Removing Earthly Projects with rm Command\nDESCRIPTION: Command syntax for removing an existing project and all of its associated resources. Includes a force option to bypass confirmation.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] project [--org <organization-name>] rm\n```\n\n----------------------------------------\n\nTITLE: Comparing Command-line Build Argument Syntax Between Earthly v0.5 and v0.6\nDESCRIPTION: Example of how command-line build argument syntax changed between Earthly v0.5 and v0.6. The new syntax places arguments after the target reference to align with the updated Earthfile syntax.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nearthly --build-arg NAME=john +some-target\n```\n\nLANGUAGE: bash\nCODE:\n```\nearthly +some-target --NAME=john\n```\n\n----------------------------------------\n\nTITLE: Incorrect File Passing Between LOCALLY Targets\nDESCRIPTION: This example demonstrates an incorrect approach to passing files between targets where the LOCALLY target creates a file that another target depends on. The issue is that execution order is not guaranteed, creating a race condition.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_27\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad\nall:\n    BUILD +dep\n    BUILD +build\ndep:\n    LOCALLY\n    RUN echo \"Hello World\" > ./my-artifact.txt\nbuild:\n    COPY ./my-artifact.txt ./\n    ...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Filesystem Structure for Globbing in Earthly\nDESCRIPTION: Shows an example filesystem structure to illustrate how globbing works in Earthly BUILD commands.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/earthfile.md#2025-04-21_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nservices\n├── Earthfile\n├── service1\n│    └── Earthfile\n├── service2\n│   ├── Earthfile\n├── service3\n│   ├── Earthfile\n```\n\n----------------------------------------\n\nTITLE: Manually Updating a Satellite\nDESCRIPTION: This command manually updates a satellite to the latest revision, respecting any pinned versions.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nearthly satellite update my-satellite\n```\n\n----------------------------------------\n\nTITLE: Demonstrating IMPORT Command in Earthfiles\nDESCRIPTION: Shows the syntax for the experimental IMPORT command introduced in v0.5.8, which allows importing external Earthfiles and referencing them with optional aliasing.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: earthfile\nCODE:\n```\nIMPORT github.com/foo/bar:v1.2.3\nIMPORT github.com/foo/buz:main AS zulu\n\n...\n\nFROM bar+target\nBUILD zulu+something\n```\n\n----------------------------------------\n\nTITLE: Installing Earthly on Debian-based Systems in Bash\nDESCRIPTION: This command updates the package list and installs Earthly on Debian-based systems.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install earthly\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab Subgroup Support\nDESCRIPTION: YAML configuration for supporting GitLab subgroups with pattern matching and substitution.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/auth.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngit:\n    gitlab.com/example-org/projecta:\n        pattern: 'gitlab.com/(example-org)/(project-a)/([^/]+)'\n        substitute: 'git@gitlab.com:$1/$2/$3.git'\n        auth: ssh\n\n    gitlab.com example-org catch-all:\n        pattern: 'gitlab.com/(example-org)/([^/]+)'\n        substitute: 'git@gitlab.com:$1/$2.git'\n        auth: ssh\n```\n\n----------------------------------------\n\nTITLE: Listing Cloud Installations with Earthly CLI\nDESCRIPTION: Shows how to use the 'earthly cloud list' command to view all cloud installations within your organization. The output displays the name, number of satellites, and status of each cloud installation, with the default cloud marked with an asterisk.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/byoc/byoc.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n❯ earthly cloud list\n   NAME           SATELLITES  STATUS          \n   my-new-cloud   0           Green  \n*  earthly-cloud  2           Green  \n```\n\n----------------------------------------\n\nTITLE: Starting Earthly Kubernetes Demo Cluster\nDESCRIPTION: Command to start the Earthly demo in a Kubernetes cluster using the earthly command line tool.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/kubernetes.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nearthly ./kubernetes+start\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features in Earthfile\nDESCRIPTION: Demonstrates how to enable experimental features like WAIT/END blocks and the EARTHLY_LOCALLY arg using VERSION flags.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: dockerfile\nCODE:\n```\nVERSION --wait-block 0.6 --earthly-locally-arg\n```\n\n----------------------------------------\n\nTITLE: Merging Docs Branch to Main\nDESCRIPTION: Commands for merging docs branch back into main\nSOURCE: https://github.com/earthly/earthly/blob/main/release/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout main && git merge docs-0.8 && git push\n```\n\n----------------------------------------\n\nTITLE: Running Earthly Tests with Docker Hub Authentication\nDESCRIPTION: Command to run tests for Earthly with Docker Hub authentication, which is needed to avoid rate limits when pulling images from Docker Hub.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./build/*/*/earthly -P \\\n  --secret DOCKERHUB_USER=<my-docker-username> \\\n  --secret DOCKERHUB_PASS=<my-docker-password-or-token> \\\n  +test --DOCKERHUB_AUTH=true\n```\n\n----------------------------------------\n\nTITLE: Incorrect Artifact Passing via Local Filesystem\nDESCRIPTION: Demonstrates an incorrect pattern for passing artifacts between Earthly targets using the local filesystem. This doesn't work because Earthly outputs files only at the end of a successful build and runs targets in parallel when possible.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_20\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad\nall:\n    BUILD +dep\n    BUILD +build\ndep:\n    ...\n    SAVE ARTIFACT my-artifact.jar AS LOCAL ./build/my-artifact.jar\nbuild:\n    ...\n    COPY ./build/my-artifact.jar ./\n    ...\n```\n\n----------------------------------------\n\nTITLE: Verifying Earthly Configuration\nDESCRIPTION: Command to check the Earthly configuration file to confirm the container frontend setting. This helps ensure the configuration change was applied correctly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/podman.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> cat ~/.earthly/config.yml\nglobal:\n    container_frontend: podman-shell\n```\n\n----------------------------------------\n\nTITLE: Select Organization Command in Earthly CLI\nDESCRIPTION: Command to set a default organization for subsequent operations.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] org select <org-name>\n```\n\n----------------------------------------\n\nTITLE: Forcing Local Build Execution\nDESCRIPTION: Command to force a build to execute locally even when a satellite is selected.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nearthly --no-sat +my-target\n```\n\n----------------------------------------\n\nTITLE: Simple JavaScript Hello World Example\nDESCRIPTION: A basic JavaScript file that logs 'hello world' to the console, used in the Earthly tutorial.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(\"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Removing a Satellite from Earthly Cloud\nDESCRIPTION: This command removes a satellite from Earthly Cloud. It's best to remove a satellite while it's asleep to prevent accidentally cancelling an ongoing build.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat rm <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Interactive Session Run Command Example\nDESCRIPTION: Demonstrates the experimental interactive session feature added in v0.5.5 that allows running commands with an interactive flag and optionally keeping manual changes.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: earthfile\nCODE:\n```\nRUN --interactive\nRUN --interactive-keep\n```\n\n----------------------------------------\n\nTITLE: Verifying Earthly Checksum File in Bash\nDESCRIPTION: This command verifies the signature of the Earthly checksum file and outputs the verified checksum.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngpg --verify checksum.asc && gpg --verify --output checksum checksum.asc\n```\n\n----------------------------------------\n\nTITLE: Efficient Multi-line String in Earthly\nDESCRIPTION: The recommended approach for creating multi-line strings in Earthly by simply starting and ending quotes on different lines, which is more concise and readable.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_41\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Good\nARG MULTILINE_STRING=\"this is a\nmulti-line string\nthat goes\non\nand on\"\n```\n\n----------------------------------------\n\nTITLE: Running a Single Earthly Test Without Authentication\nDESCRIPTION: Command to run a single Earthly test without Docker Hub authentication, which is useful for quick tests that don't require many image pulls.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./build/*/*/earthly -P ./tests+env-test\n```\n\n----------------------------------------\n\nTITLE: Account Logout Command in Earthly CLI\nDESCRIPTION: Command to logout and remove cached authentication information from the local system.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] account logout\n```\n\n----------------------------------------\n\nTITLE: Parallel Multi-platform Builds in Earthfile\nDESCRIPTION: Example Earthfile that demonstrates building for multiple platforms in parallel using the BUILD --platform flag. This builds the +build target for both amd64 and arm/v7 architectures.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nbuild-all-platforms:\n    BUILD --platform=linux/amd64 --platform=linux/arm/v7 +build\n\nbuild:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Earthly on CentOS in Bash\nDESCRIPTION: This command installs Earthly on CentOS systems using YUM package manager.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install earthly\n```\n\n----------------------------------------\n\nTITLE: Incorrect Image Passing via External Registry\nDESCRIPTION: Shows an incorrect pattern for passing Docker images between Earthly targets using an external registry. This doesn't work reliably because the push happens after the build completes, making the image unavailable during the build.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_22\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad\nall:\n    BUILD +dep-img\n    BUILD +test\ndep-img:\n    ...\n    SAVE IMAGE --push my-co/my-image:latest\ntest:\n    WITH DOCKER\n        RUN docker run my-co/my-image:latest\n    END\n```\n\n----------------------------------------\n\nTITLE: Fetching Go Tutorial Example with Earthly\nDESCRIPTION: Command to download the Go tutorial example files from the Earthly repository to a local directory.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly --artifact github.com/earthly/earthly/examples/tutorial/go:main+part2/part2 ./part2\n```\n\n----------------------------------------\n\nTITLE: Organization Member Management Commands in Earthly CLI\nDESCRIPTION: Commands for managing organization members and their permissions.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] org [--org <organization-name>] members (ls|update|rm)\n```\n\n----------------------------------------\n\nTITLE: Managing Earthly Satellites with rm Command\nDESCRIPTION: Command syntax for removing an Earthly Satellite. Supports both personal and organization contexts.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] satellite rm <satellite-name>\n\nearthly [options] satellite [--org <organization-name>] rm <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Building Earthly from Source for macOS\nDESCRIPTION: Command to build Earthly from source for macOS (Intel-based) systems, producing the binary at ./build/darwin/amd64/earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./earthly +for-darwin\n```\n\n----------------------------------------\n\nTITLE: Running Earthly Build Command\nDESCRIPTION: Example output of running the Earthly build command showing the build process and successful artifact generation.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/go/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n~/workspace/earthly/examples/go ❯ earthly +build\nbuildkitd | Found buildkit daemon as docker container (earthly-buildkitd)\ncontext | --> local context .\n+base | --> FROM golang:1.15-alpine3.13\n+base | resolve docker.io/library/golang:1.15-alpine3.13@sha256:7d45a6fc9cde63c3bf41651736996fe94a8347e726fe581926fd8c26e244e3b2 0%\n+base | resolve docker.io/library/golang:1.15-alpine3.13@sha256:7d45a6fc9cde63c3bf41651736996fe94a8347e726fe581926fd8c26e244e3b2 100%\n+base | --> WORKDIR /go-example\ncontext | transferring .: 0%\ncontext | transferring .: 0%\ncontext | transferring .: 100%\n+build | --> FROM ([]) +base\n+build | --> COPY [main.go] .\n+build | --> RUN [go build -o build/go-example main.go]\n+build | Target github.com/earthly/earthly/examples/go:docs-vlad-examples+build built successfully\n=========================== SUCCESS ===========================\n+build | Artifact github.com/earthly/earthly/examples/go:docs-vlad-examples+build/go-example as local build/go-example\n```\n\n----------------------------------------\n\nTITLE: Java Hello World Application\nDESCRIPTION: Simple Java application with a HelloWorld class that prints 'hello world' to the console.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\npackage hello;\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"hello world\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Earthly Public Key MD5 Checksum in Bash\nDESCRIPTION: This command verifies the MD5 checksum of the downloaded Earthly public key.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmd5sum earthly.pgp\n```\n\n----------------------------------------\n\nTITLE: List Organization Permissions Command in Earthly CLI\nDESCRIPTION: Command to display all accounts and their access permissions within an organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] org list-permissions <org-name>\n```\n\n----------------------------------------\n\nTITLE: Account Registration Commands in Earthly CLI\nDESCRIPTION: Commands for registering an Earthly account. Includes initial registration with email and completing registration with verification token.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Register an account using your email\nearthly [options] account register --email <email>\n\n# Complete account registration\nearthly [options] account register --email <email> --token <email-verification-token> [--password <password>] [--public-key <public-key>] [--accept-terms-conditions-privacy]\n```\n\n----------------------------------------\n\nTITLE: Running All Earthly Tests Including Examples\nDESCRIPTION: Command to run all tests for Earthly including examples, with Docker Hub authentication to avoid rate limits.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./build/*/*/earthly -P  \\\n  --secret DOCKERHUB_USER=<my-docker-username> \\\n  --secret DOCKERHUB_PASS=<my-docker-password-or-token> \\\n  +test-all --DOCKERHUB_AUTH=true\n```\n\n----------------------------------------\n\nTITLE: Launching Satellite with Pinned Version\nDESCRIPTION: This command launches a satellite with a specific pinned version to prevent automatic upgrades to new Earthly versions.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nearthly satellite launch --version v0.6.29 my-satellite\n```\n\n----------------------------------------\n\nTITLE: Conditional Statement Handling in Auto-skip\nDESCRIPTION: Illustrates how auto-skip processes IF statements with both static and dynamic conditions, showing efficiency differences in analysis.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/caching/caching-in-earthfiles.md#2025-04-21_snippet_5\n\nLANGUAGE: earthfile\nCODE:\n```\n# Supported and efficient (only +target2 is analyzed)\nARG MY_ARG=bar\nIF [ $MY_ARG = \"foo\" ]\n  BUILD +target1\nELSE\n  BUILD +target2\nEND\n\n# Supported but inefficient (both +target1 and +target2 are analyzed)\nARG MY_ARG=$(cat ./file)\nIF [ $MY_ARG = \"foo\" ]\n  BUILD +target1\nELSE\n  BUILD +target2\nEND\n\n# Supported but inefficient (both +target1 and +target2 are analyzed)\nIF grep ./file -e \"foo\" \n  BUILD +target1\nELSE\n  BUILD +target2\nEND\n```\n\n----------------------------------------\n\nTITLE: Adding Earthly Repository on CentOS in Bash\nDESCRIPTION: This command adds the Earthly repository to the system's package sources on CentOS systems.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum-config-manager \\\n    --add-repo \\\n    https://pkg.earthly.dev/earthly.repo\n```\n\n----------------------------------------\n\nTITLE: Configuring Podman as Container Frontend\nDESCRIPTION: Configuration example showing how to explicitly set Podman as the container frontend for Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  container_frontend: podman-shell\n```\n\n----------------------------------------\n\nTITLE: Fetching Java Tutorial Example with Earthly\nDESCRIPTION: Commands to create a tutorial directory and download the Java tutorial example files from the Earthly repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tutorial\ncd tutorial\nearthly --artifact github.com/earthly/earthly/examples/tutorial/java:main+part2/part2 ./part2\n```\n\n----------------------------------------\n\nTITLE: Creating Earthly Projects with create Command\nDESCRIPTION: Command syntax for creating a new project in a specified organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] project [--org <organization-name>] create <project-name>\n```\n\n----------------------------------------\n\nTITLE: Disabling Earthly Analytics via Configuration File in YAML\nDESCRIPTION: This code snippet shows how to disable Earthly's data collection by setting the disable_analytics option to true in the global section of the ~/.earthly/config.yml file.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/data-collection/data-collection.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n    disable_analytics: true\n```\n\n----------------------------------------\n\nTITLE: Specifying Markdown Package Version in requirements.txt\nDESCRIPTION: Defines a requirement for the Markdown package to be exactly version 3.2.2. This ensures consistent behavior by pinning to a specific version.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/python/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\nMarkdown==3.2.2\n```\n\n----------------------------------------\n\nTITLE: JavaScript Backend API Server\nDESCRIPTION: Express.js server implementation providing user data API endpoint.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst path = require('path');\nconst cors = require(\"cors\");\nconst app = express(),\nbodyParser = require(\"body-parser\");\nport = 3080;\n\napp.use(bodyParser.json());\napp.use(express.static(path.join(__dirname, '../my-app/build')));\n\napp.use(cors());\n\nconst users = [\n  {\n    'first_name': 'Lee',\n    'last_name' : 'Earth'\n  }\n]\n\napp.get('/api/users', (req, res) => {\n  console.log('api/users called!')\n  res.json(users);\n});\n\napp.listen(port, '0.0.0.0', () => {\n  console.log(`Server listening on the port::${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching JavaScript Tutorial Example with Earthly\nDESCRIPTION: Commands to create a tutorial directory and download the JavaScript tutorial example files from the Earthly repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tutorial\ncd tutorial\nearthly --artifact github.com/earthly/earthly/examples/tutorial/js:main+part2/part2 ./part2\n```\n\n----------------------------------------\n\nTITLE: Executing Release Script\nDESCRIPTION: Command to run the release script with necessary environment variables\nSOURCE: https://github.com/earthly/earthly/blob/main/release/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd release\nenv -i HOME=\"$HOME\" PATH=\"$PATH\" SSH_AUTH_SOCK=\"$SSH_AUTH_SOCK\" RELEASE_TAG=\"$RELEASE_TAG\" USER=\"$USER\" PRERELEASE=\"$PRERELEASE\" ./release.sh\n```\n\n----------------------------------------\n\nTITLE: Copying Example Files using Earthly (Bash)\nDESCRIPTION: Command to copy files for the Go example (Part 4) using Earthly's artifact feature.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-4-args.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly --artifact github.com/earthly/earthly/examples/tutorial/go:main+part4/part4 ./part4\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Earthly with Built Binary for macOS\nDESCRIPTION: Command to rebuild Earthly using the previously built binary for macOS (Intel), which is faster for development as it avoids constant buildkitd restarts.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./build/darwin/amd64/earthly +for-darwin\n```\n\n----------------------------------------\n\nTITLE: Setting Up Earthly Repository Source in Ubuntu\nDESCRIPTION: Command to add the Earthly repository to the system's package sources. Configures the stable repository for amd64 architecture using the previously installed GPG key.\nSOURCE: https://github.com/earthly/earthly/blob/main/release/apt-repo/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \\\n  \"deb [arch=amd64 signed-by=/usr/share/keyrings/earthly-archive-keyring.gpg] https://pkg.earthly.dev/deb \\\n  stable main\" | sudo tee /etc/apt/sources.list.d/earthly.list > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Create Token Command in Earthly CLI\nDESCRIPTION: Command to create a new authentication token with specified permissions and expiry.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] account create-token [--write] [--expiry <expiry>] [--overwrite] <token-name>\n```\n\n----------------------------------------\n\nTITLE: Downloading Earthly GPG Key on Debian-based Systems in Bash\nDESCRIPTION: This command downloads and sets up the Earthly GPG key for package verification on Debian-based systems.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://pkg.earthly.dev/earthly.pgp | sudo gpg --dearmor -o /usr/share/keyrings/earthly-archive-keyring.gpg\n```\n\n----------------------------------------\n\nTITLE: Installing QEMU for Cross-Platform Builds on Linux\nDESCRIPTION: Commands to install qemu-user-static on Linux systems, which is necessary for running cross-platform targets in Earthly with Podman.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/podman.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n> apt-get install qemu-user-static\n# or\n> yum install qemu-user-static\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Netlify Deployment\nDESCRIPTION: This snippet shows the content of a .env file used to store Netlify authentication token and site ID. These environment variables are necessary for building and deploying the Next.js site to Netlify using Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/next-js-netlify/README.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nNETLIFY_AUTH_TOKEN=[your_auth_token]\nNETLIFY_SITE_ID=[your_site_id]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Docker Image Usage in LOCALLY Targets\nDESCRIPTION: An incorrect approach to using Docker images in LOCALLY targets, where the image is not available at the time the LOCALLY target runs because the image output happens at the end of the build.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_34\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad\nall:\n    BUILD +build-img\n    BUILD +run-img\nbuild-img:\n    ...\n    SAVE IMAGE my-co/my-img:latest\nrun-img:\n    LOCALLY\n    RUN docker run my-co/my-img:latest\n```\n\n----------------------------------------\n\nTITLE: Python Hello World Example\nDESCRIPTION: A simple Python script that prints 'hello world' to the console, used in the Earthly tutorial.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nprint(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Unselecting Earthly Satellites with unselect Command\nDESCRIPTION: Command syntax for removing any currently selected Earthly Satellite from the configuration.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] satellite unselect\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Earthly with Built Binary for Linux/WSL\nDESCRIPTION: Command to rebuild Earthly using the previously built binary for Linux/WSL, which is faster for development as it avoids constant buildkitd restarts.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./build/linux/amd64/earthly +for-linux\n```\n\n----------------------------------------\n\nTITLE: Copying Example Files with Earthly (Bash)\nDESCRIPTION: Command to copy files for the Go example (Part 5) using Earthly's artifact feature.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-5-importing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly --artifact github.com/earthly/earthly/examples/tutorial/go:main+part5/part5 ./part5\n```\n\n----------------------------------------\n\nTITLE: Comparing Earthly Target Output Before and After v0.6 Change\nDESCRIPTION: Example of how the local artifact output behavior changed in v0.6. In v0.6, artifacts and images need to be part of a BUILD chain to be output locally, whereas previously they would be output through FROM or COPY commands.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nFROM +some-target\nCOPY +another-target/my-artifact ./\n```\n\nLANGUAGE: bash\nCODE:\n```\nFROM +some-target\nBUILD +some-target\nCOPY +another-target/my-artifact ./\nBUILD +another-target\n```\n\n----------------------------------------\n\nTITLE: Copying Python Example Files with Earthly (Bash)\nDESCRIPTION: Command to copy files for the Python example (Part 5) using Earthly's artifact feature.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-5-importing.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nearthly --artifact github.com/earthly/earthly/examples/tutorial/python:main+part5/part5 ./part5\n```\n\n----------------------------------------\n\nTITLE: Listing Available Satellites\nDESCRIPTION: This command lists the satellites available in your organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat ls\n```\n\n----------------------------------------\n\nTITLE: Setting Local Hostname for Earthly Testing\nDESCRIPTION: Configures a localhost entry in the hosts file to allow for local testing of Earthly. This entry maps 127.0.0.1 to earthly.local, enabling the satellite to be accessed via this hostname.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/self-hosted.md#2025-04-21_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\n127.0.0.1\tearthly.local\n```\n\n----------------------------------------\n\nTITLE: Starting Jenkins Demo Environment with Earthly\nDESCRIPTION: This command uses Earthly to start a local Jenkins server configured for running Earthly builds with the Docker Cloud plugin.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/jenkins.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nearthly ./jenkins+start\n```\n\n----------------------------------------\n\nTITLE: Multiple Target Environments in Earthfile\nDESCRIPTION: Demonstrates how to define multiple target environments in an Earthfile, including a Go build and an npm environment.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nFROM golang:1.15-alpine3.13\nWORKDIR /go-workdir\n\nbuild:\n    COPY main.go .\n    RUN go build -o output/example main.go\n    SAVE ARTIFACT output/example AS LOCAL local-output/go-example\n\nnpm:\n    FROM node:12-alpine3.12\n    WORKDIR /src\n    RUN npm install\n    COPY assets/ .\n    RUN npm test\n```\n\n----------------------------------------\n\nTITLE: Verifying Earthly Binary Checksum in Bash\nDESCRIPTION: This command verifies that the downloaded Earthly binary matches the checksum provided in the checksum file.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsha256sum --check checksum --ignore-missing\n```\n\n----------------------------------------\n\nTITLE: Removing Members from Earthly Projects\nDESCRIPTION: Command syntax for removing a member from a specified project.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] project [--org <organization-name>] --project <project-name> member rm <user-email>\n```\n\n----------------------------------------\n\nTITLE: Copying JavaScript Example Files with Earthly (Bash)\nDESCRIPTION: Command to copy files for the JavaScript example (Part 5) using Earthly's artifact feature.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-5-importing.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nearthly --artifact github.com/earthly/earthly/examples/tutorial/js:main+part5/part5 ./part5\n```\n\n----------------------------------------\n\nTITLE: Uploading AWS Credentials to Earthly Secret Store\nDESCRIPTION: Command to upload AWS credentials to the Earthly secret store. Required for maintainers who need to publish packages to the repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/release/apt-repo/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nearthly secrets set --file ~/.aws/credentials /user/earthly-technologies/aws/credentials\n```\n\n----------------------------------------\n\nTITLE: Using Earthly's Shell-Out Feature\nDESCRIPTION: Example showing the shell-out-anywhere feature that allows command execution within Earthly commands. This feature needs to be enabled with VERSION directive.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nSAVE IMAGE myimage:$(cat version)\n```\n\n----------------------------------------\n\nTITLE: Downloading Earthly Public Key in Bash\nDESCRIPTION: This command downloads the Earthly public key for checksum verification purposes.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://pkg.earthly.dev/earthly.pgp\n```\n\n----------------------------------------\n\nTITLE: Running the Built Docker Container\nDESCRIPTION: Command to run the resulting Docker container with port mapping for the web application.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/multirepo/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -p 127.0.0.1:8080:8080 earthly/examples:multirepo\n```\n\n----------------------------------------\n\nTITLE: Removing Repository Integration for GitHub Actions with Earthly CLI\nDESCRIPTION: Command to remove a registered GitHub Actions integration for a specific GitHub repository using the Earthly CLI.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/gha-runners.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nearthly gha remove \\\n  --org <earthly_organization> \\\n  --gh-org <github_organization> \\\n  --gh-repo <github_repo>\n```\n\n----------------------------------------\n\nTITLE: Simple Go Application with Logrus (Go)\nDESCRIPTION: A basic Go application that uses the logrus library to log a \"hello world\" message.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-3-adding-dependencies-with-caching.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/sirupsen/logrus\"\n\nfunc main() {\n\tlogrus.Info(\"hello world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Build Argument Syntax Between Earthly v0.5 and v0.6\nDESCRIPTION: Example of the updated build argument syntax introduced in Earthly v0.6. The new syntax places arguments after the target reference rather than as a flag before the target.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nFROM --build-arg NAME=john +some-target\nCOPY --build-arg NAME=john +something/my-artifact ./\nWITH DOCKER --build-arg NAME=john --load +another-target\n  ...\nEND\n```\n\nLANGUAGE: bash\nCODE:\n```\nFROM +some-target --NAME=john\nCOPY (+something/my-artifact --NAME=john) ./\nWITH DOCKER --load (+another-target --NAME=john)\n  ...\nEND\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Running Smoke Test\nDESCRIPTION: Example console output from running the smoke test target in Earthly, showing how Docker images are loaded, containers are created and started, the test is executed, and containers are cleaned up afterward.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/integration.md#2025-04-21_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\n> earthly -P +smoke-test\n+smoke-test | --> WITH DOCKER RUN for i in {1..30}; do nc -z localhost 5432 && break; sleep 1; done; docker run --network=host earthly/examples:integration\n+smoke-test | Loading images...\n+smoke-test | Loaded image: aa8y/postgres-dataset:iso3166\n+smoke-test | Loaded image: adminer:latest\n+smoke-test | Loaded image: earthly/examples:integration\n+smoke-test | ...done\n+smoke-test | Creating network \"scala-example_default\" with the default driver\n+smoke-test | Creating local-postgres ... done\n+smoke-test | Creating local-postgres-ui ... done\n+smoke-test | +smoke-test | The first 5 countries alphabetically are: Afghanistan, Albania, Algeria, American Samoa, Andorra\n+smoke-test | Stopping local-postgres-ui ... done\n+smoke-test | Stopping local-postgres    ... done\n+smoke-test | Removing local-postgres-ui ... done\n+smoke-test | Removing local-postgres    ... done\n+smoke-test | Removing network scala-example_default\n+smoke-test | Target github.com/earthly/earthly-example-scala/integration:main+smoke-test built successfully\n=========================== SUCCESS ===========================\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World in Go\nDESCRIPTION: A basic Go program that prints 'hello world' to standard output.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/go/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// main.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Log Sharing in Earthly\nDESCRIPTION: Commands to enable the experimental log-sharing feature introduced in v0.6.7. Users must first register for an Earthly account and then explicitly enable log sharing via the configuration command.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nearthly account register\nearthly config global.disable_log_sharing false\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Earthly on Linux and WSL2 in Bash\nDESCRIPTION: This set of commands uninstalls Earthly, removes related files and Docker resources on Linux and WSL2 systems.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nrm /usr/local/bin/earthly\nrm /usr/share/bash-completion/completions/earthly\nrm /usr/local/share/zsh/site-functions/_earthly\nrm -rf ~/.earthly\ndocker rm --force earthly-buildkitd\ndocker volume rm --force earthly-cache\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Application in Scala\nDESCRIPTION: Main application code that retrieves and displays the first 5 countries alphabetically from a PostgreSQL database using doobie for database access.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/integration.md#2025-04-21_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nObject Main extends App {\n  val dal = new DataAccessLayer()\n  val dv = new DataVersion()\n\n  if(dv.version() > 1)\n  {\n    implicit val cs = IO.contextShift(ExecutionContext.global)\n    val xa = Transactor.fromDriverManager[IO](\n      \"org.postgresql.Driver\", \n      \"jdbc:postgresql://localhost:5432/iso3166\", \n      \"postgres\",\n      \"postgres\"\n    )\n\n    val countries = dal.countries(5)\n                       .transact(xa).unsafeRunSync\n                       .toList.map(_.name).mkString(\", \")\n\n    println(s\"The first 5 countries alphabetically are: $countries\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Organization Integration for GitHub Actions with Earthly CLI\nDESCRIPTION: Command to remove a registered GitHub Actions integration for an entire GitHub organization using the Earthly CLI.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/gha-runners.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nearthly gha remove \\\n  --org <earthly_organization> \\\n  --gh-org <github_organization>\n```\n\n----------------------------------------\n\nTITLE: Indexing and Signing Repository\nDESCRIPTION: Command to generate indexes for the local repository and sign the packages with the Earthly GPG key. Required after adding new packages and before uploading.\nSOURCE: https://github.com/earthly/earthly/blob/main/release/apt-repo/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nearthly +index-and-sign\n```\n\n----------------------------------------\n\nTITLE: Version 0.6 Feature Flag Declaration in Earthfile\nDESCRIPTION: Example showing how to declare VERSION 0.6 in an Earthfile, which enables specific feature flags like copy-include-patterns, referenced-save-only, for-in loops, and other safety features.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: dockerfile\nCODE:\n```\nVERSION \\\n  --use-copy-include-patterns \\\n  --referenced-save-only \\\n  --for-in \\\n  --require-force-for-unsafe-saves \\\n  --no-implicit-ignore \\\n  0.5\n```\n\n----------------------------------------\n\nTITLE: Accessing Earthly Web Interface\nDESCRIPTION: Command for opening the Earthly CI application in a browser with optional OAuth provider integration.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] web [--provider=<provider-ref>]]\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Jenkins Demo Environment with Earthly\nDESCRIPTION: This command uses Earthly to clean up the Jenkins demo environment if it needs to be reset.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/jenkins.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nearthly ./jenkins+cleanup\n```\n\n----------------------------------------\n\nTITLE: Go Main Application\nDESCRIPTION: Simple Go application that logs a hello world message using logrus.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/sirupsen/logrus\"\n)\n\nvar howCoolIsEarthly = \"IceCool\"\n\nfunc main() {\n\tlogrus.Info(\"hello world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Build Configuration for Java Example\nDESCRIPTION: Gradle build file for the Java example, configuring the application plugin, main class, and JVM compatibility.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_20\n\nLANGUAGE: groovy\nCODE:\n```\napply plugin: 'java'\napply plugin: 'application'\n\nmainClassName = 'hello.HelloWorld'\n\njar {\n    baseName = 'hello-world'\n    version = '0.0.1'\n}\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n```\n\n----------------------------------------\n\nTITLE: Using TRY/FINALLY in Earthfile\nDESCRIPTION: Shows the experimental TRY/FINALLY syntax for saving artifacts on failure. Limited to a single RUN command in TRY and only SAVE ARTIFACT in FINALLY.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: dockerfile\nCODE:\n```\nTRY\n    RUN some-command\nFINALLY\n    SAVE ARTIFACT /path/to/artifact\nEND\n```\n\n----------------------------------------\n\nTITLE: Trusting Earthly Public Key in Bash\nDESCRIPTION: This command sets the trust level for the Earthly public key in the GPG keyring.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho -e \"5\\ny\\n\" |  gpg --command-fd 0 --expert --edit-key 5816B2213DD1CEB61FC952BAB1185ECA33F8EB64 trust\n```\n\n----------------------------------------\n\nTITLE: Adding Earthly GPG Key to Ubuntu\nDESCRIPTION: Command to download and install Earthly's official GPG key to the system keyring. This is required for package verification when installing from the repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/release/apt-repo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://pkg.earthly.dev/earthly.pgp | sudo gpg --dearmor -o /usr/share/keyrings/earthly-archive-keyring.gpg\n```\n\n----------------------------------------\n\nTITLE: Running Earthly Build for Monorepo Example\nDESCRIPTION: This snippet shows how to execute the Earthly build for the monorepo example. It provides two options: running locally in the project directory or running from anywhere using the GitHub repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/monorepo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly +all\n```\n\nLANGUAGE: bash\nCODE:\n```\nearthly github.com/earthly/earthly/examples/monorepo:main+all\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Earthly on macOS in Bash\nDESCRIPTION: This set of commands uninstalls Earthly, removes related files and Docker resources on macOS systems.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nbrew uninstall earthly\nrm -rf ~/.earthly\ndocker rm --force earthly-buildkitd\ndocker volume rm --force earthly-cache\n```\n\n----------------------------------------\n\nTITLE: Python Markov Chain Text Generator\nDESCRIPTION: A Python script that uses the markovify library to generate random phrases based on Sherlock Holmes text. It reads a text file, creates a Markov model, and outputs a randomly generated sentence.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/debugging.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# generate_phrase.py\n\nimport markovify\ntext = open('sherlock.txt').read()\ntext_model = markovify.Text(text)\nprint(text_model.make_sentence())\n```\n\n----------------------------------------\n\nTITLE: Earthly Arguments File for Docker Hub Authentication\nDESCRIPTION: Content for a .arg file that specifies Docker Hub authentication is required for tests, to be used with the Earthly CLI.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n# .arg file\nDOCKERHUB_AUTH=true\n```\n\n----------------------------------------\n\nTITLE: Revoke Organization Access Command in Earthly CLI\nDESCRIPTION: Command to revoke user access from an organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] org revoke <org-path> <email> [<email>, ...]\n```\n\n----------------------------------------\n\nTITLE: Building Earthly from Source for Linux/WSL\nDESCRIPTION: Command to build Earthly from source for Linux and Windows Subsystem for Linux (WSL) systems, producing the binary at ./build/linux/amd64/earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./earthly +for-linux\n```\n\n----------------------------------------\n\nTITLE: Build Artifact Output Example - Version 0.5 Syntax\nDESCRIPTION: Demonstrates the old syntax (v0.5) for copying and building artifacts from targets.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM +some-target\nCOPY +another-target/my-artifact ./\n```\n\n----------------------------------------\n\nTITLE: Updating Earthly's Buildkit Reference\nDESCRIPTION: Command to update Earthly's reference to Buildkit, specifying the git organization and SHA to use for the update.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nearthly +update-buildkit --BUILDKIT_GIT_ORG=<git-user-or-org> --BUILDKIT_GIT_SHA=<40-char-git-reference-here>\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Earthly Kubernetes Demo Cluster\nDESCRIPTION: Command to clean up and remove the Earthly demo Kubernetes cluster.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/guides/kubernetes.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nearthly ./kubernetes+clean\n```\n\n----------------------------------------\n\nTITLE: Building Go Application with Traditional Command\nDESCRIPTION: Standard Go build command to compile the application into an executable.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/go/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo build -o build/go-example main.go\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Java Project\nDESCRIPTION: This Docker Compose file sets up a PostgreSQL database service for the Java project. It defines environment variables, ports, and networking configuration for the database container.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nversion: \"3.9\"\n   \nservices:\n  db:\n    image: postgres\n    container_name: db\n    hostname: postgres\n    environment:\n      - POSTGRES_DB=test_db\n      - POSTGRES_USER=earthly\n      - POSTGRES_PASSWORD=password\n    ports:\n      - 127.0.0.1:5432:5432\n    networks:\n      - java/part6_default\n\nnetworks:\n  java/part6_default:\n```\n\n----------------------------------------\n\nTITLE: Test Release Command\nDESCRIPTION: Command for performing a test release to a personal repository\nSOURCE: https://github.com/earthly/earthly/blob/main/release/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nRELEASE_TAG=v0.5.10 GITHUB_USER=mygithubuser DOCKERHUB_USER=mydockerhubuser EARTHLY_REPO=earthly BREW_REPO=homebrew-earthly GITHUB_SECRET_PATH=user/github-token ./release.sh\n```\n\n----------------------------------------\n\nTITLE: Another Incorrect Image Dependency Pattern\nDESCRIPTION: Another example of incorrect image dependency management in Earthly. Even with explicit BUILD dependency, this doesn't work because the image push happens after all builds complete.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_23\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Also bad\nall:\n    BUILD +test\ndep-img:\n    ...\n    SAVE IMAGE --push my-co/my-image:latest\ntest:\n    BUILD +dep-img # This still does not work\n    WITH DOCKER\n        RUN docker run my-co/my-image:latest\n    END\n```\n\n----------------------------------------\n\nTITLE: Setting Earthly Cache Size as Percentage\nDESCRIPTION: Configuration command to set the Earthly cache size as a percentage of available disk space, introduced in v0.6.11.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nearthly config cache_size_pct <percentage>\n```\n\n----------------------------------------\n\nTITLE: Retrieving SSH Private Key via AWS CLI\nDESCRIPTION: Command to retrieve the decrypted SSH private key from SSM Parameter Store using the key ID obtained from the previous command, and save it to a local file.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/byoc/aws/cloudformation.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naws ssm get-parameter \\\n--name /ec2/keypair/<key-id> \\\n--with-decryption \\\n--query Parameter.Value \\\n--output text > key.pem\n```\n\n----------------------------------------\n\nTITLE: Installing Required Tools for Ubuntu Repository Setup\nDESCRIPTION: Commands to install the necessary tools for setting up a Debian repository on Ubuntu. Installs apt-transport-https, ca-certificates, curl, gnupg, and lsb-release packages.\nSOURCE: https://github.com/earthly/earthly/blob/main/release/apt-repo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install \\\n   apt-transport-https \\\n   ca-certificates \\\n   curl \\\n   gnupg \\\n   lsb-release\n```\n\n----------------------------------------\n\nTITLE: Remove Token Command in Earthly CLI\nDESCRIPTION: Command to remove an authentication token from the account.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] account remove-token <token>\n```\n\n----------------------------------------\n\nTITLE: Remove Key Command in Earthly CLI\nDESCRIPTION: Command to remove an authorized public key from the account.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] account remove-key <public-key>\n```\n\n----------------------------------------\n\nTITLE: Importing Earthly Public Key in Bash\nDESCRIPTION: This command imports the Earthly public key into the local GPG keyring.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngpg --import earthly.pgp\n```\n\n----------------------------------------\n\nTITLE: Installing DNF Plugins on Fedora in Bash\nDESCRIPTION: This command installs the necessary DNF plugins to manage repositories on Fedora systems.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf -y install dnf-plugins-core\n```\n\n----------------------------------------\n\nTITLE: Non-working Cross-Platform WITH DOCKER Example in Earthly\nDESCRIPTION: This example demonstrates an approach that will not work for cross-platform builds. The target itself attempts to run on a non-native architecture (arm64 on an amd64 system), which is not supported by WITH DOCKER.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/multi-platform.md#2025-04-21_snippet_11\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Does not work!\nbuild:\n    FROM --platform=linux/arm64 earthly/dind\n    WITH DOCKER --pull=earthly/examples:multiplatform\n        RUN docker run earthly/examples:multiplatform\n    END\n```\n\n----------------------------------------\n\nTITLE: Correct File Passing Between Two LOCALLY Targets\nDESCRIPTION: The proper approach to pass files between two LOCALLY targets using artifact references that establish clear dependencies between targets.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_33\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Good\nall:\n    BUILD +run-locally\ndep:\n    LOCALLY\n    RUN echo \"Hello World\" > ./my-artifact.txt\n    SAVE ARTIFACT ./my-artifact.txt\nrun-locally:\n    LOCALLY\n    COPY +dep/my-artifact.txt ./build/my-artifact.txt\n    RUN echo ./build/my-artifact.txt\n```\n\n----------------------------------------\n\nTITLE: Inefficient Docker Image Pulling in WITH DOCKER\nDESCRIPTION: Shows an inefficient pattern for using external Docker images within WITH DOCKER blocks. This approach requires pulling the image every time and isn't cached by Earthly's build system.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_25\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad: Image hello-world needs to be pulled every time and is not part of the Earthly-managed cache.\nWITH DOCKER\n   RUN docker run hello-world\nEND\n```\n\n----------------------------------------\n\nTITLE: Build Arguments Syntax - Version 0.6\nDESCRIPTION: Demonstrates the new way (v0.6) of passing build arguments in Earthfiles.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM +some-target --NAME=john\nCOPY (+something/my-artifact --NAME=john) ./\nWITH DOCKER --load (+another-target --NAME=john)\n  ...\nEND\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Fibonacci Project\nDESCRIPTION: Sets up CMake build configuration for a Fibonacci calculator project. Specifies minimum CMake version 2.8.9, defines project name as 'fibonacci', and creates an executable from main.cpp and fib.cpp source files.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/cpp/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.9)\nproject (fibonacci)\nadd_executable(fibonacci main.cpp fib.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Release Tag for Earthly Package\nDESCRIPTION: Command to set the release tag environment variable for the version being packaged. This should match the tag on GitHub releases.\nSOURCE: https://github.com/earthly/earthly/blob/main/release/apt-repo/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport RELEASE_TAG=\"v0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Inefficient Approach to Copying Multiple Directories\nDESCRIPTION: A verbose and inefficient approach to copying multiple directories that uses too many commands and cache layers.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_36\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Avoid: too verbose\nCOPY dir-1 dir-1\nCOPY dir-2 dir-2\nCOPY dir-3 dir-3\n```\n\n----------------------------------------\n\nTITLE: Starting Podman Machine on Mac\nDESCRIPTION: Command to start the Podman machine on Mac systems. This is necessary if Earthly fails to initialize a frontend on Mac.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/podman.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n> podman machine start\n```\n\n----------------------------------------\n\nTITLE: Running Earthly Account Commands\nDESCRIPTION: Example of running non-build Earthly commands for account management.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/docker-images/all-in-one.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -t -e NO_BUILDKIT=1 -e EARTHLY_TOKEN=<my-token> earthly/earthly:v0.8.13 account list-tokens\n```\n\n----------------------------------------\n\nTITLE: Organization Invitation Command in Earthly CLI\nDESCRIPTION: Command to invite users to an organization with specified permissions.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] org [--org <organization-name>] invite [--name <recipient-name>] [--permission <permission>] [--message <message>] <email>\n```\n\n----------------------------------------\n\nTITLE: Fibonacci Function Implementation in C++\nDESCRIPTION: Recursive implementation of the Fibonacci sequence calculator function.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/cpp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include \"fib.h\"\n\nint fib(int n)\n{\n\tif( n <= 0 ) {\n\t\treturn 0;\n\t}\n\tif( n == 1 ) {\n\t\treturn 1;\n\t}\n\treturn fib(n-1) + fib(n-2);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Debian Packages for All Platforms\nDESCRIPTION: Command to build Debian packages for all supported platforms. Uses the specified release tag to determine which version to package.\nSOURCE: https://github.com/earthly/earthly/blob/main/release/apt-repo/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nearthly +deb-all --RELEASE_TAG=\"$RELEASE_TAG\"\n```\n\n----------------------------------------\n\nTITLE: Insecure Secret Handling with File Output\nDESCRIPTION: Example of how secrets can be accidentally leaked by writing them to files in the build environment. This pattern should be avoided as it can expose secrets in the build cache or published images.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_14\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad\nRUN --secret MY_SECRET echo \"secret: $MY_SECRET\" > /app/secret.txt\n```\n\n----------------------------------------\n\nTITLE: Java Hello World Example\nDESCRIPTION: A basic Java class with a main method that prints 'hello world' to the console, used in the Earthly tutorial.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npackage hello;\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"hello world\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Another Incorrect Approach for LOCALLY Target Dependencies\nDESCRIPTION: Another incorrect attempt to establish order between LOCALLY targets that still doesn't guarantee execution order, potentially causing race conditions.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_32\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Also bad\nall:\n    BUILD +run-locally\ndep:\n    LOCALLY\n    RUN echo \"Hello World\" > ./my-artifact.txt\n    SAVE ARTIFACT ./my-artifact.txt AS LOCAL ./build/my-artifact.txt\nrun-locally:\n    BUILD +dep # Order still not guaranteed\n    LOCALLY\n    RUN echo ./build/my-artifact.txt\n```\n\n----------------------------------------\n\nTITLE: Insecure Credential Copying with LOCALLY\nDESCRIPTION: Shows an incorrect pattern for handling credentials by copying them from the local system. This approach makes credentials persistent in the build environment, exposing them to potential leaks.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_16\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad\naws-creds:\n    LOCALLY\n    RUN cp \"$HOME\"/.aws/credentials ./.aws-creds\n    SAVE ARTIFACT ./.aws-creds\n\ndo-something-with-aws:\n    FROM ...\n    COPY +aws-creds/.aws-creds /root/.aws/credentials\n    RUN aws ec2 describe-images\n```\n\n----------------------------------------\n\nTITLE: Creating an Earthly Project\nDESCRIPTION: This command creates a new Earthly project, which is necessary for using cloud secrets.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/cloud-secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly project create <project-name>\n```\n\n----------------------------------------\n\nTITLE: Describing MkDocs Project Layout in Markdown\nDESCRIPTION: This snippet outlines the standard project layout for a MkDocs project, including the configuration file and documentation directory structure.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/mkdocs/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    mkdocs.yml    # The configuration file.\n    docs/\n        index.md  # The documentation homepage.\n        ...       # Other markdown pages, images and other files.\n```\n\n----------------------------------------\n\nTITLE: Specifying Markdown Package Version for Python\nDESCRIPTION: This line specifies the exact version of the Markdown package required for the project. It uses the '==' operator to pin the version to 3.4.4, ensuring consistency across different environments.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/tutorial/python/part3/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMarkdown==3.4.4\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for C Project with Warning Flags\nDESCRIPTION: Sets up a CMake project for a C program named 'c-example' with strict compiler warning flags. The executable is built from main.c and fibonacci.c source files.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/c/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12)\nproject (c-example)\nadd_compile_options(-Wall -Wextra -pedantic -Werror)\nadd_executable(c-example main.c fibonacci.c)\n```\n\n----------------------------------------\n\nTITLE: Removing Registry Configuration\nDESCRIPTION: Command for removing a configured registry and deleting all associated stored credentials.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] registry remove [--org <org> --project <project>] <host>\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure Registry in Earthly YAML\nDESCRIPTION: This YAML configuration sets up an insecure registry for Earthly. It's recommended only for testing purposes due to security risks. The configuration marks the specified registry as insecure.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/self-signed.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  buildkit_additional_config: |\n    [registry.\"<registry-hostname>\"]\n      insecure = true\n```\n\n----------------------------------------\n\nTITLE: Setting Pre-release Flag\nDESCRIPTION: Command to set whether the release is a pre-release version\nSOURCE: https://github.com/earthly/earthly/blob/main/release/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PRERELEASE=\"true-or-false\"\n```\n\n----------------------------------------\n\nTITLE: Git Main Branch Setup\nDESCRIPTION: Commands to ensure working on the main branch with latest changes\nSOURCE: https://github.com/earthly/earthly/blob/main/release/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main && git pull\n```\n\n----------------------------------------\n\nTITLE: Checking Access to Required Earthly Secrets\nDESCRIPTION: Commands to verify access to the required Earthly secrets for repository management. Checks for access to both public and private PGP keys used for package signing.\nSOURCE: https://github.com/earthly/earthly/blob/main/release/apt-repo/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nearthly secrets ls /earthly-technologies/apt/keys/earthly-apt-public.pgp\nearthly secrets ls /earthly-technologies/apt/keys/earthly-apt-private.pgp\n```\n\n----------------------------------------\n\nTITLE: JavaScript Hello World Application\nDESCRIPTION: Simple JavaScript application that prints 'hello world' to the console.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-1-a-simple-earthfile.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(\"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Insecure Docker Hub Cache\nDESCRIPTION: Command to run Earthly tests using an insecure Docker Hub pull-through cache, which can speed up tests by caching Docker images locally.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./build/*/*/earthly -P ./tests+all --DOCKERHUB_MIRROR=<ip-address-or-hostname>:<port> --DOCKERHUB_MIRROR_INSECURE=true\n```\n\n----------------------------------------\n\nTITLE: Using LOCALLY to Access Files Outside the Build Context\nDESCRIPTION: This example shows how to use the LOCALLY command to access files from the host machine that might be outside the normal build context, such as from a user's home directory.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_46\n\nLANGUAGE: Dockerfile\nCODE:\n```\nfile:\n    LOCALLY\n    SAVE ARTIFACT $HOME/some-file.txt\ndo-something:\n    COPY +file/some-file.txt ./\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid External File Copy in Earthly\nDESCRIPTION: This example shows an incorrect attempt to copy a file from outside the build context, which will fail in Earthly because the file is not within the directory containing the Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_43\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# ./dir2/Earthfile\n# Bad: does not work\nCOPY ../dir1/some-file.txt ./\n```\n\n----------------------------------------\n\nTITLE: Specifying Markdown Package Version in Requirements File\nDESCRIPTION: This line specifies that the Markdown package version 3.4.4 is required. The '==' syntax indicates an exact version match requirement, ensuring that only this specific version will be installed.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/tutorial/python/part4/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMarkdown==3.4.4\n```\n\n----------------------------------------\n\nTITLE: Listing MkDocs Commands in Markdown\nDESCRIPTION: This snippet lists the basic MkDocs commands for creating a new project, starting the live-reloading docs server, building the documentation site, and printing the help message.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/mkdocs/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `mkdocs new [dir-name]` - Create a new project.\n- `mkdocs serve` - Start the live-reloading docs server.\n- `mkdocs build` - Build the documentation site.\n- `mkdocs -h` - Print help message and exit.\n```\n\n----------------------------------------\n\nTITLE: Build Arguments Syntax - Version 0.5\nDESCRIPTION: Shows the old way (v0.5) of passing build arguments in Earthfiles.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM --build-arg NAME=john +some-target\nCOPY --build-arg NAME=john +something/my-artifact ./\nWITH DOCKER --build-arg NAME=john --load +another-target\n  ...\nEND\n```\n\n----------------------------------------\n\nTITLE: Inefficient Multi-line String Management\nDESCRIPTION: A non-recommended approach to creating multi-line strings that uses multiple RUN commands and temporary files, which is verbose and inefficient.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_40\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad\nRUN echo \"this is a\" > /tmp/file\nRUN echo \"multi-line string\" >> /tmp/file\nRUN echo \"that goes\" >> /tmp/file\nRUN echo \"on\" >> /tmp/file\nRUN echo \"and on\" >> /tmp/file\nARG MULTILINE_STRING=$(cat /tmp/file)\n```\n\n----------------------------------------\n\nTITLE: Installing Earthly Cloud via Terraform (Shell)\nDESCRIPTION: This shell command links the provisioned infrastructure to an Earthly cloud using the 'earthly cloud install' command with the '--via terraform' option and specifying the cloud name.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/byoc/aws/terraform.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nearthly cloud install --via terraform --name my-cloud\n```\n\n----------------------------------------\n\nTITLE: Main Program Implementation in C++\nDESCRIPTION: The main program file that iterates through and prints the first 5 Fibonacci numbers using the fib() function.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/cpp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\n\n#include \"fib.h\"\n\nint main(int argc, char *argv[]) {\n\tfor( int i = 0; i < 5; i++ ) {\n\t\tstd::cout << \"fib(\" << i << \") = \" << fib(i) << std::endl;\n\t}\n\treturn 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-script Execution with Dockerd Wrapper\nDESCRIPTION: Code that illustrates how to implement a pre-script execution for the WITH DOCKER command. This allows configuration options to be set that depend on the host's kernel at runtime.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/usr/share/earthly/dockerd-wrapper-pre-script\n```\n\n----------------------------------------\n\nTITLE: IAM Policy JSON for BYOC Satellite Instance Role\nDESCRIPTION: AWS IAM policy that grants satellites permission to write logs to CloudWatch. It allows creating log streams and putting log events in the specified log group.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/byoc/aws/manual.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Action\": [\n                \"logs:PutLogEvents\",\n                \"logs:CreateLogStream\"\n            ],\n            \"Resource\": [\n                \"arn:aws:logs:us-west-2:012345678901:log-group:/earthly/satellites/name:log-stream:*\",\n                \"arn:aws:logs:us-west-2:012345678901:log-group:/earthly/satellites/name\"\n            ],\n            \"Effect\": \"Allow\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Quotation in Shell\nDESCRIPTION: Examples of empty string literals with double and single quotes, along with variable assignments using both quotation styles.\nSOURCE: https://github.com/earthly/earthly/blob/main/tests/expected-quotes.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"\"\n'\n\"\n'\n\"\na=\"\nb='\nc=\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Repository to S3\nDESCRIPTION: Command to upload the local repository to S3. This is the final step in the release process, making the packages available for download.\nSOURCE: https://github.com/earthly/earthly/blob/main/release/apt-repo/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nearthly +upload\n```\n\n----------------------------------------\n\nTITLE: Redis Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for setting up Redis service with health checks and networking.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\n\nservices:\n  redis:\n    container_name: local-redis\n    image: redis:6.0-alpine\n    ports:\n      - 127.0.0.1:6379:6379\n    hostname: redis\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:6379\"]\n      interval: 1s\n      timeout: 10s\n      retries: 5\n    networks:\n      - go/part6_default\n\nnetworks:\n  go/part6_default:\n```\n\n----------------------------------------\n\nTITLE: Installing YUM Utils on CentOS in Bash\nDESCRIPTION: This command installs the necessary YUM utilities to manage repositories on CentOS systems.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y yum-utils\n```\n\n----------------------------------------\n\nTITLE: Downloading Earthly Checksum File in Bash\nDESCRIPTION: This command downloads the latest checksum file for Earthly releases.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/earthly/earthly/releases/latest/download/checksum.asc\n```\n\n----------------------------------------\n\nTITLE: Simple Python HTTP Server\nDESCRIPTION: A Python script that implements a basic HTTP server using the http.server module. It listens on localhost port 8000 and responds with 'Hello, world!' to GET requests.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/debugging.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.end_headers()\n        self.wfile.write(b'Hello, world!')\n\nhttpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)\nhttpd.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Insecure AWS Credentials Handling in Earthly\nDESCRIPTION: Demonstrates an insecure pattern for managing AWS credentials in Earthly builds. This approach writes secrets to a file that persists in the build environment, potentially exposing them in the cache or published images.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_15\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad\nRUN --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY echo \"[default]\\naws_access_key_id=$AWS_ACCESS_KEY_ID\\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\" > /root/.aws/credentials\nRUN aws ec2 describe-images\n```\n\n----------------------------------------\n\nTITLE: Checking Organization Secrets Access in Earthly\nDESCRIPTION: Command to verify access to earthly-technologies organization secrets\nSOURCE: https://github.com/earthly/earthly/blob/main/release/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./earthly secrets --org earthly-technologies --project core ls\n```\n\n----------------------------------------\n\nTITLE: Secrets File for Docker Hub Mirror Authentication\nDESCRIPTION: Content for a .secret file containing credentials for a Docker Hub mirror, to be used for authentication during tests.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n# .secret file\nDOCKERHUB_MIRROR_USER=<my-mirror-username>\nDOCKERHUB_MIRROR_PASS=<my-mirror-password>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Trust Policy for Org-wide Access\nDESCRIPTION: JSON configuration for an AWS IAM trust policy that allows all members of an Earthly organization to assume a role using OIDC authentication.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/oidc.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"Condition\": {\n    \"StringLike\": {\n      \"api.earthly.dev:sub\": \"<earthly-org>/*\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Repository from S3\nDESCRIPTION: Command to clone the existing S3 repository to the local disk. Used as part of the package release process to get the current state before adding new packages.\nSOURCE: https://github.com/earthly/earthly/blob/main/release/apt-repo/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nearthly +download\n```\n\n----------------------------------------\n\nTITLE: Setting Release Tag Environment Variable\nDESCRIPTION: Command to set the release tag version for deployment\nSOURCE: https://github.com/earthly/earthly/blob/main/release/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport RELEASE_TAG=\"v...\"\n```\n\n----------------------------------------\n\nTITLE: Adding Earthly Repository on Fedora in Bash\nDESCRIPTION: This command adds the Earthly repository to the system's package sources on Fedora systems.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/alt-installation/alt-installation.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf config-manager \\\n    --add-repo \\\n    https://pkg.earthly.dev/earthly.repo\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry TLS with LetsEncrypt\nDESCRIPTION: TLS configuration for Docker registry using LetsEncrypt certificates.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/pull-through-cache.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  tls:\n    letsencrypt:\n      cachefile: /certs/cachefile\n      email: me@example.com\n      hosts: [my.cool.mirror.horse]\n```\n\n----------------------------------------\n\nTITLE: Unselect Organization Command in Earthly CLI\nDESCRIPTION: Command to remove the default organization setting.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] org unselect\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Monorepo Example\nDESCRIPTION: This command runs the resulting Docker container from the Earthly build, mapping port 8080 to allow access to the web application.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/monorepo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -p 127.0.0.1:8080:8080 earthly/examples:monorepo\n```\n\n----------------------------------------\n\nTITLE: Setting BuildKit User Namespace Configuration\nDESCRIPTION: Example configuration for bypassing user namespacing in BuildKit by setting additional arguments.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-config/earthly-config.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  buildkit_additional_args: [\"--userns\", \"host\"]\n```\n\n----------------------------------------\n\nTITLE: Manual Docs Branch Merge\nDESCRIPTION: Commands for manually merging main into docs branch\nSOURCE: https://github.com/earthly/earthly/blob/main/release/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout docs-0.8 && git pull && git merge main && git push\n```\n\n----------------------------------------\n\nTITLE: Earthfile Import Reference Example\nDESCRIPTION: Shows how to use the IMPORT command to reference external Earthly build definitions and use them in the current build.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/target-ref.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nIMPORT github.com/earthly/earthly/buildkitd\n\n...\n\nBUILD buildkitd+buildkitd\n```\n\n----------------------------------------\n\nTITLE: Referencing External Repository in Earthfile\nDESCRIPTION: Example of how to copy artifacts from an external repository in an Earthfile.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/multirepo/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCOPY github.com/earthly/earthly-example-multirepo-static+html/* ./\n```\n\n----------------------------------------\n\nTITLE: Selecting an Earthly Organization in Bash\nDESCRIPTION: Command used to select an Earthly organization to access its satellites. This is a prerequisite for using Earthly Satellites.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/using.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nearthly org select <org-name>\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies (Go)\nDESCRIPTION: This go.mod file defines the module and its dependencies for a Go project.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-3-adding-dependencies-with-caching.md#2025-04-21_snippet_1\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule github.com/earthly/earthly/examples/go\n\ngo 1.13\n\nrequire github.com/sirupsen/logrus v1.5.0\n```\n\n----------------------------------------\n\nTITLE: Fetching Python Tutorial Example with Earthly\nDESCRIPTION: Commands to create a tutorial directory and download the Python tutorial example files from the Earthly repository.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-2-outputs.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tutorial\ncd tutorial\nearthly --artifact github.com/earthly/earthly/examples/tutorial/python:main+part2/part2 ./part2\n```\n\n----------------------------------------\n\nTITLE: Building Earthly using multi-stage Dockerfile\nDESCRIPTION: This Dockerfile uses a multi-stage build to create a minimal Earthly image. It starts with a Go build environment, compiles the Earthly binary, and then creates a final image with only the necessary components.\nSOURCE: https://github.com/earthly/earthly/blob/main/util/fileutil/testdata/globdirs/file.txt#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM golang:1.20-bullseye AS build-env\nWORKDIR /earthly\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . ./\nARG VERSION=dev\nRUN --mount=type=cache,target=/root/.cache/go-build \\\n    go build -tags noembed -ldflags \"-X main.Version=$VERSION -X main.GitSha=$EARTHLY_GIT_HASH\" -o earthly ./cmd/earthly\n\nFROM debian:bullseye-slim\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    git \\\n    openssh-client \\\n    && rm -rf /var/lib/apt/lists/*\nWORKDIR /usr/local/bin\nCOPY --from=build-env /earthly/earthly ./\nENTRYPOINT [\"earthly\"]\n```\n\n----------------------------------------\n\nTITLE: Earthly Command Line Execution\nDESCRIPTION: Shows how to pass build arguments via command line to an Earthly build target\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/build-args.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly +hello --name=world\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Trust Policy for Earthly Role Assumption\nDESCRIPTION: This trust policy enables Earthly to assume the IAM role created in your AWS account. It specifies that the Earthly compute production role is allowed to perform the sts:AssumeRole action, giving Earthly time-limited access to resources in your account.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/byoc/aws/manual.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"arn:aws:iam::404851345508:role/compute-production\"\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-declaring Builtin Args in Earthly\nDESCRIPTION: Demonstration of the requirement to pre-declare Earthly builtin args before they can be used. This snippet shows how to properly declare and use the EARTHLY_TARGET arg.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthfile/builtin-args.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG EARTHLY_TARGET\nRUN echo \"The current target is $EARTHLY_TARGET\"\n```\n\n----------------------------------------\n\nTITLE: Manually Putting Satellite to Sleep\nDESCRIPTION: This command manually puts a satellite into sleep state to save costs.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/satellites/managing.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nearthly sat sleep <satellite-name>\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: This snippet lists two Python packages with their exact versions. Markdown is specified at version 3.4.4, and psycopg2 is specified at version 2.9.3. This format is typically used in requirements.txt files for Python projects to ensure consistent package versions across different environments.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/tutorial/python/part6/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nMarkdown==3.4.4\npsycopg2==2.9.3\n```\n\n----------------------------------------\n\nTITLE: Listing Earthly Projects with ls Command\nDESCRIPTION: Command syntax for listing all projects belonging to a specified organization.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] project [--org <organization-name>] ls\n```\n\n----------------------------------------\n\nTITLE: Single-Image Approach for Build and Production (Not Recommended)\nDESCRIPTION: A non-recommended approach that uses the same image for both building and production, resulting in bloated production images that contain unnecessary development dependencies.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_38\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Avoid: production image is bloated\nFROM go:1.16\nRUN apk add ... # development + production dependencies\nbuild:\n    COPY ...\n    RUN go mod download\n    COPY ...\n    RUN go build ... -o /usr/bin/app\n    ENTRYPOINT [\"/usr/bin/app\"]\n    SAVE IMAGE my-production-image:latest\n```\n\n----------------------------------------\n\nTITLE: Listing Members in Earthly Projects\nDESCRIPTION: Command syntax for listing all members in a specified project.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/earthly-command/earthly-command.md#2025-04-21_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\nearthly [options] project [--org <organization-name>] --project <project-name> member ls\n```\n\n----------------------------------------\n\nTITLE: Pulling Images from GCP Artifact Registry in Earthly\nDESCRIPTION: An Earthfile target that demonstrates how to pull and run an image from GCP Artifact Registry using the WITH DOCKER directive in Earthly.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/gcp-artifact-registry.md#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM earthly/dind:alpine-main\n\nrun:\n    WITH DOCKER --pull <region>-docker.pkg.dev/<project>/hello-earthly/hello-earthly:with-love\n        RUN docker run <region>-docker.pkg.dev/<project>/hello-earthly/hello-earthly:with-love\n    END\n```\n\n----------------------------------------\n\nTITLE: Specifying Markdown Package Version in Python Dependencies\nDESCRIPTION: This snippet specifies the Markdown Python package with version 3.4.4. It uses the exact version constraint pattern commonly found in requirements.txt files for Python projects to ensure consistent dependency management.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/tutorial/python/part5/services/service-one/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMarkdown==3.4.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker for ECR Credential Helper\nDESCRIPTION: Docker configuration for using the ECR credential helper. This JSON snippet shows how to set up the .docker/config.json file to automatically authenticate with AWS ECR.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/registries/aws-ecr.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"credHelpers\": {\n                \"<aws_account_id>.dkr.ecr.<region>.amazonaws.com\": \"ecr-login\"\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Podman Version and Architecture\nDESCRIPTION: Command to display Podman client and server version information, including architecture. This helps verify that the client and server architectures match, which is important for performance.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/podman.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> podman version\nClient:       Podman Engine\nVersion:      4.2.1\nAPI Version:  4.2.1\nGo Version:   go1.18.6\nBuilt:        Tue Sep  6 13:16:02 2022\nOS/Arch:      darwin/arm64\n\nServer:       Podman Engine\nVersion:      4.2.0\nAPI Version:  4.2.0\nGo Version:   go1.18.4\nBuilt:        Thu Aug 11 08:43:11 2022\nOS/Arch:      linux/arm64\n```\n\n----------------------------------------\n\nTITLE: Updating Earthfile for New Secret Format\nDESCRIPTION: This Dockerfile snippet shows how to update an Earthfile to use the new secret format after migration from Earthly 0.6.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/cloud/cloud-secrets.md#2025-04-21_snippet_10\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION 0.8\nPROJECT <org-name>/<project-name>\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example for Git Settings\nDESCRIPTION: Example YAML configuration for Git settings in config.yml demonstrating pattern matching and SSH authentication setup.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/docker-images/all-in-one.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n{example: {pattern: 'example.com/([^/]+)', substitute: 'ssh://git@example.com:2222/var/git/repos/$1.git', auth: ssh}}\n```\n\n----------------------------------------\n\nTITLE: Empty Go Sum File (Go)\nDESCRIPTION: An empty go.sum file, typically used to record the expected cryptographic checksums of dependencies.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-3-adding-dependencies-with-caching.md#2025-04-21_snippet_2\n\nLANGUAGE: go.sum\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Using VERSION 0.6 in Earthfile\nDESCRIPTION: Sample Earthfile code showing the VERSION declaration equivalent to using individual feature flags in v0.5.\nSOURCE: https://github.com/earthly/earthly/blob/main/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: Dockerfile\nCODE:\n```\nVERSION \\\n  --use-copy-include-patterns \\\n  --referenced-save-only \\\n  --for-in \\\n  --require-force-for-unsafe-saves \\\n  --no-implicit-ignore \\\n  0.5\n```\n\n----------------------------------------\n\nTITLE: Error Message When Not Using Docker Volume for /tmp/earthly\nDESCRIPTION: Example error message that occurs when proper volume mounting is not configured for the BuildKit daemon, showing resource busy errors during Docker operations.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/ci-integration/remote-buildkit.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--> WITH DOCKER RUN --privileged ...\n...\nrm: can't remove '/var/earthly/dind/...': Resource busy\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Plain HTTP Docker Hub Cache\nDESCRIPTION: Command to run Earthly tests using a plain HTTP Docker Hub pull-through cache, for when TLS is not configured on the cache server.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./build/*/*/earthly -P ./tests+all --DOCKERHUB_MIRROR=<ip-address-or-hostname>:<port> --DOCKERHUB_MIRROR_HTTP=true\n```\n\n----------------------------------------\n\nTITLE: Using Delve Debugger with Earthly\nDESCRIPTION: Example of using the delve debugger with Earthly binary, including setting a breakpoint and continuing execution.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndlv exec ./build/own/earthly -- +base\nType 'help' for list of commands.\n\n(dlv) break /earthly/earthfile2llb/interpreter.go:670\nBreakpoint 1 set at 0x182866a for github.com/earthly/earthly/earthfile2llb.(*Interpreter).handleRun() /earthly/earthfile2llb/interpreter.go:670\n(dlv) continue\n Init 🚀\n————————————————————————————————————————————————————————————————————————————————\n\n           buildkitd | Found buildkit daemon as podman container (earthly-dev-buildkitd)\n\n Build 🔧\n————————————————————————————————————————————————————————————————————————————————\n\ngolang:1.20-alpine3.17 | --> Load metadata golang:1.20-alpine3.17 linux/amd64\n> github.com/earthly/earthly/earthfile2llb.(*Interpreter).handleRun() /earthly/earthfile2llb/interpreter.go:670 (hits goroutine(295):1 total:1) (PC: 0x182866a)\n(dlv)\n```\n\n----------------------------------------\n\nTITLE: Arguments File for Docker Hub Mirror Configuration\nDESCRIPTION: Content for a .arg file that configures a Docker Hub mirror for tests, specifying the mirror URL and that authentication is required.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n# .arg file\nDOCKERHUB_MIRROR=<ip-address-or-hostname>:<port>\nDOCKERHUB_MIRROR_AUTH=true\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Earthly with Built Binary for macOS with M1 Chip\nDESCRIPTION: Command to rebuild Earthly using the previously built binary for macOS with M1 chip, which is faster for development as it avoids constant buildkitd restarts.\nSOURCE: https://github.com/earthly/earthly/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./build/darwin/amd64/earthly +for-darwin-m1\n```\n\n----------------------------------------\n\nTITLE: JavaScript Frontend Package Configuration\nDESCRIPTION: NPM package configuration for JavaScript frontend application.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/basics/part-6-using-docker-with-earthly.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"example-js\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Hello world\",\n  \"private\": true,\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"MPL-2.0\",\n  \"devDependencies\": {\n    \"webpack\": \"^4.42.1\",\n    \"webpack-cli\": \"^3.3.11\"\n  },\n  \"dependencies\": {\n    \"http-server\": \"^0.12.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Built Go Application\nDESCRIPTION: Running the compiled Go executable to verify successful build and execution.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/go/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n~/workspace/earthly/examples/go ❯ ./build/go-example\nhello world\n```\n\n----------------------------------------\n\nTITLE: Incorrect File Copying From Target to LOCALLY Target\nDESCRIPTION: This shows an incorrect approach to copying files from a regular target to a LOCALLY target using AS LOCAL, which fails because outputs are written at the end of the build, causing timing issues.\nSOURCE: https://github.com/earthly/earthly/blob/main/docs/guides/best-practices.md#2025-04-21_snippet_29\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Bad\nall:\n    BUILD +dep\n    BUILD +run-locally\ndep:\n    FROM alpine:3.18\n    WORKDIR /work\n    RUN echo \"Hello World\" > ./my-artifact.txt\n    SAVE ARTIFACT ./my-artifact.txt AS LOCAL ./build/my-artifact.txt\nrun-locally:\n    LOCALLY\n    RUN echo ./build/my-artifact.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Hello World Component in TypeScript\nDESCRIPTION: This TypeScript code defines a simple Next.js component that renders 'Hello World' with custom styling. It imports styles from a CSS module and exports a functional component.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/next-js-netlify/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport styles from '../styles.module.css'\n\nconst Home = () => {\n  return (\n    <div className={styles.hello}>\n      <p>Hello World</p>\n    </div>\n  )\n}\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Markdown Tutorial Link Reference\nDESCRIPTION: A markdown file containing a reference link to the Earthly Basics tutorial documentation.\nSOURCE: https://github.com/earthly/earthly/blob/main/examples/tutorial/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Tutorial\n\nThese examples are explained in the [Earthly Basics tutorial](https://docs.earthly.dev/basics).\n```"
  }
]