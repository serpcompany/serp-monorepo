[
  {
    "owner": "sap",
    "repo": "openui5-docs",
    "content": "TITLE: Defining Translatable Texts in i18n.properties\nDESCRIPTION: This snippet defines the key-value pairs for translatable texts in the `i18n.properties` file.  `showHelloButtonText` is used for the button label and `helloMsg` contains a placeholder `{0}` which will be replaced with the recipient's name at runtime. This file serves as the central repository for texts, allowing for easy translation into different languages.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-translatable-texts-df86bfb.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\n```\n\n----------------------------------------\n\nTITLE: Saving Changes with ODataModel.submitBatch - JavaScript\nDESCRIPTION: This snippet presents the `onSave` event handler, which calls `ODataModel.submitBatch` to submit changes to the OData service. It specifies the `peopleGroup` update group and defines success and error handlers. It also includes a `_setBusy` function to lock the UI during the submission process and clears the `_bTechnicalErrors` flag.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-create-and-edit-b4f1266.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n        onSave : function () {\n            var fnSuccess = function () {\n                this._setBusy(false);\n                MessageToast.show(this._getText(\"changesSentMessage\"));\n                this._setUIChanges(false);\n            }.bind(this);\n\n            var fnError = function (oError) {\n                this._setBusy(false);\n                this._setUIChanges(false);\n                MessageBox.error(oError.message);\n            }.bind(this);\n\n            this._setBusy(true); // Lock UI until submitBatch is resolved.\n            this.getView().getModel().submitBatch(\"peopleGroup\").then(fnSuccess, fnError);\n            this._bTechnicalErrors = false; // If there were technical errors, a new save resets them.\n        },\n        ...\n        _setUIChanges : function (bHasUIChanges) {\n            ...\n        },\n        _setBusy : function (bIsBusy) {\n            var oModel = this.getView().getModel(\"appView\");\n            oModel.setProperty(\"/busy\", bIsBusy);\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ProductRating Control in OpenUI5 (JavaScript)\nDESCRIPTION: This code defines a custom UI5 control named `ProductRating` extending `sap.ui.core.Control`. It specifies the control's metadata, including properties, aggregations (internal controls), and events.  The `metadata` defines the structure of the control and its features. Dependencies on standard UI5 controls are defined using `sap.ui.define`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-d12d2ee.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/Control\",\n\t\"sap/m/RatingIndicator\",\n\t\"sap/m/Label\",\n\t\"sap/m/Button\"\n], (Control, RatingIndicator, Label, Button) => {\n\t\"use strict\";\n\n\treturn Control.extend(\"ui5.walkthrough.control.ProductRating\", {\n\t\tmetadata : {\n\t\t\tproperties : {\n\t\t\t\tvalue: \t{type : \"float\", defaultValue : 0}\n\t\t\t},\n\t\t\taggregations : {\n\t\t\t\t_rating : {type : \"sap.m.RatingIndicator\", multiple: false, visibility : \"hidden\"},\n\t\t\t\t_label : {type : \"sap.m.Label\", multiple: false, visibility : \"hidden\"},\n\t\t\t\t_button : {type : \"sap.m.Button\", multiple: false, visibility : \"hidden\"}\n\t\t\t},\n\t\t\tevents : {\n\t\t\t\tchange : {\n\t\t\t\t\tparameters : {\n\t\t\t\t\t\tvalue : {type : \"int\"}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tinit() {\n\t\t\tthis.setAggregation(\"_rating\", new RatingIndicator({\n\t\t\t\tvalue: this.getValue(),\n\t\t\t\ticonSize: \"2rem\",\n\t\t\t\tvisualMode: \"Half\",\n\t\t\t\tliveChange: this._onRate.bind(this)\n\t\t\t}));\n\t\t\tthis.setAggregation(\"_label\", new Label({\n\t\t\t\ttext: \"{i18n>productRatingLabelInitial}\"\n\t\t\t}).addStyleClass(\"sapUiSmallMargin\"));\n\t\t\tthis.setAggregation(\"_button\", new Button({\n\t\t\t\ttext: \"{i18n>productRatingButton}\",\n\t\t\t\tpress: this._onSubmit.bind(this)\n\t\t\t}).addStyleClass(\"sapUiTinyMarginTopBottom\"));\n\t\t},\n\n\t\tsetValue(fValue) {\n\t\t\tthis.setProperty(\"value\", fValue, true);\n\t\t\tthis.getAggregation(\"_rating\").setValue(fValue);\n\n\t\t\treturn this;\n\t\t},\n\n\t\treset() {\n\t\t\tconst oResourceBundle = this.getModel(\"i18n\").getResourceBundle();\n\n\t\t\tthis.setValue(0);\n\t\t\tthis.getAggregation(\"_label\").setDesign(\"Standard\");\n\t\t\tthis.getAggregation(\"_rating\").setEnabled(true);\n\t\t\tthis.getAggregation(\"_label\").setText(oResourceBundle.getText(\"productRatingLabelInitial\"));\n\t\t\tthis.getAggregation(\"_button\").setEnabled(true);\n\t\t},\n\n\t\t_onRate(oEvent) {\n\t\t\tconst oRessourceBundle = this.getModel(\"i18n\").getResourceBundle();\n\t\t\tconst fValue = oEvent.getParameter(\"value\");\n\n\t\t\tthis.setProperty(\"value\", fValue, true);\n\n\t\t\tthis.getAggregation(\"_label\").setText(oRessourceBundle.getText(\"productRatingLabelIndicator\", [fValue, oEvent.getSource().getMaxValue()]));\n\t\t\tthis.getAggregation(\"_label\").setDesign(\"Bold\");\n\t\t},\n\n\t\t_onSubmit(oEvent) {\n\t\t\tconst oResourceBundle = this.getModel(\"i18n\").getResourceBundle();\n\n\t\t\tthis.getAggregation(\"_rating\").setEnabled(false);\n\t\t\tthis.getAggregation(\"_label\").setText(oResourceBundle.getText(\"productRatingLabelFinal\"));\n\t\t\tthis.getAggregation(\"_button\").setEnabled(false);\n\t\t\tthis.fireEvent(\"change\", {\n\t\t\t\tvalue: this.getValue()\n\t\t\t});\n\t\t},\n\t\trenderer(oRm, oControl) {\n\t\t\toRm.openStart(\"div\", oControl);\n\t\t\toRm.class(\"myAppDemoWTProductRating\");\n\t\t\toRm.openEnd();\n\t\t\toRm.renderControl(oControl.getAggregation(\"_rating\"));\n\t\t\toRm.renderControl(oControl.getAggregation(\"_label\"));\n\t\t\toRm.renderControl(oControl.getAggregation(\"_button\"));\n\t\t\toRm.close(\"div\");\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping OpenUI5 in HTML (index.html)\nDESCRIPTION: This code snippet modifies the index.html file to load the OpenUI5 framework. It includes the sap-ui-bootstrap script tag, which specifies the OpenUI5 library source, theme, compatibility version, and asynchronous loading. It also configures the module to load on initialization and resource roots for the ui5.walkthrough namespace. The \"data-sap-ui-on-init\" attribute triggers the execution of the `index.ts` file.  The \"data-sap-ui-resource-roots\" attribute configures the namespace.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-bootstrap-typescript-32b14d8.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>UI5 TypeScript Walkthrough</title>\n\t<script\n\t\tid=\"sap-ui-bootstrap\"\n\t\tsrc=\"resources/sap-ui-core.js\"\n\t\tdata-sap-ui-theme=\"sap_horizon\"\n\t\tdata-sap-ui-compat-version=\"edge\"\n\t\tdata-sap-ui-async=\"true\"\n\t\tdata-sap-ui-on-init=\"module:ui5/walkthrough/index\"\n\t\tdata-sap-ui-resource-roots='{\n\t\t\t\"ui5.walkthrough\": \"./\"\n\t\t}'>\n\t</script>\n</head>\n<body>\n\t<div>Hello World</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Bootstrap OpenUI5 in index.html\nDESCRIPTION: This HTML file bootstraps the OpenUI5 framework and sets the initial application configuration. It includes a script tag that loads sap-ui-core.js and sets data attributes to configure the framework, such as libraries to load (sap.m), compatibility version (edge), asynchronous loading (true), and the resource roots for the application namespace (ui5.quickstart).  The onInit property specifies the module to be executed after OpenUI5 is initialized.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-ready-851bde4.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>Quickstart Tutorial</title>\n\t<script id=\"sap-ui-bootstrap\"\n\t\tsrc=\"resources/sap-ui-core.js\"\n\t\tdata-sap-ui-libs=\"sap.m\"\n\t\tdata-sap-ui-compat-version=\"edge\"\n\t\tdata-sap-ui-async=\"true\"\n\t\tdata-sap-ui-on-init=\"module:ui5/quickstart/index\"\n\t\tdata-sap-ui-resource-roots='{\n\t\t\t\"ui5.quickstart\": \"./\"\n\t\t}'>\n\t</script>\n</head>\n<body class=\"sapUiBody\" id=\"content\"></body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenUI5 Mock Server (JavaScript)\nDESCRIPTION: This snippet initializes an OpenUI5 MockServer to simulate OData requests. It configures the server with a root URI, sets auto-response and delay parameters, simulates the service using metadata and mock data, and starts the server. The mock server intercepts requests to the backend and returns mock responses for local development and testing.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-26-mock-server-configuration-bae9d90.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/util/MockServer\"\n], (MockServer) => {\n\t\"use strict\";\n\n\treturn {\n\t\tinit() {\n\t\t\t// create\n\t\t\tconst oMockServer = new MockServer({\n\t\t\t\trootUri: sap.ui.require.toUrl(\"ui5/walkthrough\") + \"/V2/Northwind/Northwind.svc/\"\n\t\t\t});\n\n\t\t\tconst oUrlParams = new URLSearchParams(window.location.search);\n\n\t\t\t// configure mock server with a delay\n\t\t\tMockServer.config({\n\t\t\t\tautoRespond: true,\n\t\t\t\tautoRespondAfter: oUrlParams.get(\"serverDelay\") || 500\n\t\t\t});\n\n\t\t\t// simulate\n\t\t\tconst sPath = sap.ui.require.toUrl(\"ui5/walkthrough/localService\");\n\t\t\toMockServer.simulate(sPath + \"/metadata.xml\", sPath + \"/mockdata\");\n\n\t\t\t// start\n\t\t\toMockServer.start();\n\t\t}\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Avoid Console Logging in OpenUI5\nDESCRIPTION: Avoid using `console.log()` directly. Instead, use the `sap/base/Log` module for better control over logging, including severity levels and topic association. This allows for more structured and manageable logging within the OpenUI5 application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Requiring a Module in OpenUI5\nDESCRIPTION: This snippet demonstrates how to asynchronously require an OpenUI5 module using `sap.ui.require`. It takes the module name ('SomeClass') and a callback function as arguments. The callback function receives the module (SomeClass) as an argument, allowing you to instantiate and use it. This example creates a new instance of the required module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/modules-and-dependencies-91f23a7.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// later requiring the previously defined module\nsap.ui.require(['SomeClass'], function(SomeClass) {\n    var oInstance = new SomeClass();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OData Service in manifest.json (JSON)\nDESCRIPTION: This configuration in `manifest.json` defines the remote OData service as a data source and assigns it to the `invoice` model. The `dataSources` section defines the connection details, including URI and type, while the `models` section links the `invoice` model to the `invoiceRemote` data source. This replaces the local JSON model with the remote OData model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-25-remote-odata-service-typescript-b68d321.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t...\n\t\"sap.app\": {\n\t\t...,\n\t\t\"dataSources\": {\n\t\t\t\"invoiceRemote\": {\n\t\t\t\t\"uri\": \"V2/Northwind/Northwind.svc/\",\n\t\t\t\t\"type\": \"OData\",\n\t\t\t\t\"settings\": {\n\t\t\t\t\t\"odataVersion\": \"2.0\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t...\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"models\": {\n\t\t\t...\n\t\t\t\"invoice\": {\n\t\t\t\t\"dataSource\": \"invoiceRemote\"\n\t\t\t}\n\t\t}\n\t\t...\n\n```\n\n----------------------------------------\n\nTITLE: Registering Object for Validation Messages in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to register the view with the `Messaging` service to enable visual feedback for erroneous user input. This is usually done in the controller's `init` function, which is called upon view initialization.  The registered object allows for validation messages to be displayed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Messaging\" required from module \"sap/ui/core/Messaging\"\nMessaging.registerObject(this.getView(), true);\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies in Manifest.json (JSON)\nDESCRIPTION: This snippet demonstrates how to define library dependencies within the manifest.json file of an OpenUI5 application.  It ensures that only the specified libraries are loaded, preventing unnecessary resource consumption. The 'minUI5Version' specifies the minimum OpenUI5 version required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/load-only-what-you-really-need-e8fca3e.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"sap.ui5\": {\n\t\"dependencies\": {\n\t\t\"minUI5Version\": \"1.60.0\",\n\t\t\"libs\": {\n\t\t\t\"sap.ui.core\": {},\n\t\t\t\"sap.m\": {},\n\t\t\t\"sap.ui.layout\": {}\n\t\t}\n\t}\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: OpenUI5 Bootstrap Script Tag - HTML\nDESCRIPTION: This code snippet shows a typical OpenUI5 bootstrap script tag used to initialize the OpenUI5 runtime.  It sets the source to the sap-ui-core.js file and includes data attributes for configuration, such as enabling asynchronous loading, setting an initialization callback (which is not specified here), compatibility version, and resource roots.  Dependencies: Requires OpenUI5 library files to be available at the specified source.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/bootstrapping-loading-and-initializing-a04b0d1.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n     src=\"resources/sap-ui-core.js\"\n     data-sap-ui-async=\"true\"\n     data-sap-ui-on-init=\"...\"\n     data-sap-ui-compat-version=\"edge\"\n     data-sap-ui-resource-roots='{ \"my.app\": \"./\" }'>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Controller Lifecycle Hook - onInit (JavaScript)\nDESCRIPTION: This example shows how to implement the `onInit` lifecycle hook in an OpenUI5 controller. The `onInit` function is called when the view is instantiated. It's commonly used for initialization tasks like setting up models or attaching event handlers.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/controller-121b8e6.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n    \"use strict\";\n    return Controller.extend(\"sap.hcm.Address\", {\n        onInit: function() {\n            this.counter = 0;\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Visibility based on Status and Amount - XML\nDESCRIPTION: This XML snippet sets the visibility of a control based on two conditions: the status being 'critical' and the amount being greater than 10000. Note the use of `&amp;&amp;` for escaping the `&&` operator within the XML attribute. The expression uses embedded binding syntax.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Set to visible if the status is critical and the amount is above the threshold (note escaping of &&). -->\nvisible=\"{=%{status} === 'critical' &amp;&amp; %{amount} > 10000}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Dependencies - Good Example\nDESCRIPTION: This example shows the correct way to declare a dependency to a module (`sap.m.Input`) within `sap.ui.define`. This ensures that the module is loaded before the callback function is executed, preventing errors caused by accessing unloaded modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(['sap/m/Input'], function(Input) {\n \n    var fnCreateContent = function() {\n        // reference sap.m.Input via a dependency\n        return new Input({\n            color: ...,\n        });\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Application Descriptor (manifest.json) in OpenUI5\nDESCRIPTION: This JSON code defines the application descriptor (manifest.json) for an OpenUI5 application. It includes metadata such as the application ID, i18n settings, supported UI technology and device types, model definitions (specifically for i18n), and the root view configuration. This descriptor is automatically parsed by OpenUI5 to configure the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-descriptor-for-applications-8f93bf2.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_version\": \"1.65.0\",\n  \"sap.app\": {\n\t\"id\": \"ui5.walkthrough\",\n\t\"i18n\": \"i18n/i18n.properties\",\n\t\"title\": \"{{appTitle}}\",\n\t\"description\": \"{{appDescription}}\",\n\t\"type\": \"application\",\n\t\"applicationVersion\": {\n\t  \"version\": \"1.0.0\"\n\t}\n  },\n  \"sap.ui\": {\n\t\"technology\": \"UI5\",\n\t\"deviceTypes\": {\n\t\t\"desktop\": true,\n\t\t\"tablet\": true,\n\t\t\"phone\": true\n\t}\n  },\n  \"sap.ui5\": {\n\t\"dependencies\": {\n\t  \"minUI5Version\": \"1.108.0\",\n\t  \"libs\": {\n\t\t\"sap.ui.core\": {},\n\t\t\"sap.m\": {}\n\t  }\n\t},\n\t\"models\": {\n\t  \"i18n\": {\n\t\t\"type\": \"sap.ui.model.resource.ResourceModel\",\n\t\t\"settings\": {\n\t\t  \"bundleName\": \"ui5.walkthrough.i18n.i18n\",\n\t\t  \"supportedLocales\": [\"\"],\n\t\t  \"fallbackLocale\": \"\"\n\t\t}\n\t  }\n\t},\n\t\"rootView\": {\n\t\t\"viewName\": \"ui5.walkthrough.view.App\",\n\t\t\"type\": \"XML\",\n\t\t\"id\": \"app\"\n\t}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Standalone data-sap-ui-on-init module in HTML\nDESCRIPTION: This snippet demonstrates how to use the `data-sap-ui-on-init` attribute on the OpenUI5 bootstrap script to specify a module to be loaded and executed after the framework initialization. It shows the usage of `data-sap-ui-resource-roots` for module path configuration.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initialization-process-91f2c90.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n        src=\"https://ui5.sap.com/resources/sap-ui-core.js\"\n       ...\n        data-sap-ui-resource-roots='{\"Startup\": \"./some/folder\"}'\n        data-sap-ui-on-init=\"module:Startup/my/module\"\n       ...\n        data-sap-ui-async=\"true\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Declarative List Binding in XML View (OpenUI5)\nDESCRIPTION: This XML snippet demonstrates how to define list binding in an OpenUI5 XML view using the `items` aggregation. The `items` attribute binds the `List` control to the `/companies` path in the model, while the nested `items` element and its children serve as a template for each item in the list.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/list-binding-aggregation-binding-91f0577.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.sample.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<List id=\"companyList\" items=\"{path: '/companies', templateShareable:false}\">\n\t\t<items>\n\t\t\t<StandardListItem\n\t\t\t\ttitle=\"{name}\"\n\t\t\t\tdescription=\"{city}\"\n\t\t\t/>\n\t\t</items>\n\t</List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Using Currency/Unit Types in OpenUI5 Input Fields\nDESCRIPTION: This code snippet demonstrates how to use the `sap.ui.model.odata.type.Currency` and `sap.ui.model.odata.type.Unit` data types in an OpenUI5 input field. It shows the composite binding with the amount or measure, the currency code or unit, and the code list customizing information. The example uses the 'TwoWay' binding mode to synchronize value changes between the UI and the model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_95\n\nLANGUAGE: html\nCODE:\n```\n<mvc:View\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns:core=\"sap.ui.core\"\n    core:require=\"{\n      CurrencyType: 'sap/ui/model/odata/type/Currency',\n      DecimalType: 'sap/ui/model/odata/type/Decimal',\n      StringType: 'sap/ui/model/odata/type/String',\n      UnitType: 'sap/ui/model/odata/type/Unit'\n    }\">\n    ...\n    <Input value=\"{\n      mode:'TwoWay',\n      parts:[{\n        path: 'WeightMeasure',\n        type: 'DecimalType',\n        constraints: {'precision': 13, 'scale': 3, 'nullable': false}\n      }, {\n        path: 'WeightUnit',\n        type: 'StringType',\n        constraints: {'maxLength': 5, 'nullable': false}, formatOptions: {'parseKeepsEmptyString': true}\n      }, {\n        mode: 'OneTime',\n        path: '/##@@requestUnitsOfMeasure',\n        targetType: 'any'\n     }],\n     type: 'UnitType'}\"/>\n    ...\n    <Input value=\"{\n       mode: 'TwoWay',\n       parts: [{\n        path: 'Price',\n        type: 'DecimalType',\n        constraints: {'precision': 16, 'scale': 3, 'nullable': false}\n      }, {\n        path: 'CurrencyCode',\n        type: 'StringType',\n        constraints: {'maxLength': 5, 'nullable': false}, formatOptions: {'parseKeepsEmptyString': true}\n      }, {\n        mode: 'OneTime',\n        path: '/##@@requestCurrencyCodes',\n        targetType: 'any'\n      }],\n      type: 'CurrencyType'}\"/>\n...\n```\n\n----------------------------------------\n\nTITLE: Simple Data Binding in XML View - OpenUI5\nDESCRIPTION: This snippet demonstrates simple data binding in an OpenUI5 XML view.  It binds the `value` property of an `Input` control to the `/firstName` property of a data model. This enables the Input field to display the value stored in the model's `firstName` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/binding-syntax-e2e6f41.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Input value=\"{/firstName}\"/>\n```\n\n----------------------------------------\n\nTITLE: Example manifest.json\nDESCRIPTION: This is an example of a complete `manifest.json` file, showing the structure and available properties. It includes sections for `sap.app`, `sap.ui`, `sap.ui5`, `sap.fe`, and `sap.card`. Not all properties are applicable for all manifest variants. For instance, the `sap.ui5/models` section is not supported for library manifests.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-descriptor-for-applications-components-and-libraries-be0cf40.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_version\": \"1.72.0\",\n \n    \"start_url\": \"index.html\",\n \n    \"sap.app\": {\n        \"id\": \"sap.fiori.appName\",\n        \"type\": \"application\",\n        \"i18n\": \"i18n/i18n.properties\",\n        \"applicationVersion\": {\n            \"version\": \"1.2.2\"\n        },\n        \"embeds\": [\"mycomponent1\", \"subpath/mycomponent2\"],\n        \"embeddedBy\": \"../../\",\n        \"title\": \"{{title}}\",\n        \"subTitle\": \"{{subtitle}}\",\n        \"shortTitle\": \"{{shorttitle}}\",\n        \"description\": \"{{description}}\",\n        \"info\": \"{{info}}\",\n        \"tags\": {\n            \"keywords\": [\"{{keyWord1}}\", \"{{keyWord2}}\"],\n            \"technicalAttributes\": [\"ATTRIBUTE1\", \"ATTRIBUTE2\"]\n        },\n        \"dataSources\": {\n            \"equipment\": {\n                \"uri\": \"/sap/opu/odata/snce/po_s_srv;v=2/\",\n                \"type\": \"OData\",\n                \"settings\": {\n                    \"odataVersion\": \"2.0\",\n                    \"annotations\": [\"equipmentanno\"],\n                    \"localUri\": \"model/metadata.xml\",\n                    \"maxAge\": 360\n                }\n            },\n            \"equipmentanno\": {\n                \"uri\": \"/sap/bc/bsp/sap/nscbn_anf_eam/bscbn_equipment_srv.anno.xml\",\n                \"type\": \"ODataAnnotation\",\n                \"settings\": {\n                    \"localUri\": \"model/annotations.xml\"\n                }\n            }\n        },\n        \"cdsViews\": [\n            \"VIEW1\", \"VIEW2\"\n        ],\n        \"resources\": \"resources.json\",\n        \"offline\": true,\n        \"sourceTemplate\": {\n            \"id\": \"sap.ui.ui5-template-plugin.1worklist\",\n            \"version\": \"1.0.0\",\n            \"toolsId\": \"C12345678\"\n        },\n        \"destination\": {\n            \"name\": \"SAP_ERP_FIN\"\n        },\n        \"openSourceComponents\": [{\n            \"name\": \"D3.js\",\n            \"packagedWithMySelf\": false\n        }]\n    },\n \n    \"sap.ui\": {\n        \"technology\": \"UI5\",\n        \"icons\": {\n            \"icon\": \"sap-icon://add-contact\",\n            \"favIcon\": \"icon/F1373_Approve_Purchase_Orders.ico\",\n            \"phone\": \"icon/launchicon/57_iPhone_Desktop_Launch.png\",\n            \"phone@2\": \"icon/launchicon/114_iPhone-Retina_Web_Clip.png\",\n            \"tablet\": \"icon/launchicon/72_iPad_Desktop_Launch.png\",\n            \"tablet@2\": \"icon/launchicon/144_iPad_Retina_Web_Clip.png\"\n        },\n        \"deviceTypes\": {\n            \"desktop\": true,\n            \"tablet\": true,\n            \"phone\": false\n        }\n    },\n \n    \"sap.ui5\": {\n        \"resources\": {\n            \"css\": [{\n                \"uri\": \"component.css\",\n                \"id\": \"componentcss\"\n            }]\n        },\n        \"dependencies\": {\n            \"minUI5Version\": \"1.134.0\",\n            \"libs\": {\n                \"sap.m\": {\n                    \"minVersion\": \"1.34.0\"\n                },\n                \"sap.ui.commons\": {\n                    \"minVersion\": \"1.34.0\",\n                    \"lazy\": true\n                }\n            },\n            \"components\": {\n                \"sap.ui.app.other\": {\n                    \"minVersion\": \"1.1.0\",\n                    \"lazy\": true\n                }\n            }\n        },\n        \"componentUsages\": {\n            \"myusage\": {\n                \"name\": \"my.used\",\n                \"lazy\": false,\n                \"settings\": {},\n                \"componentData\": {}\n            }\n        },\n        \"models\": {\n            \"i18n\": {\n                \"type\": \"sap.ui.model.resource.ResourceModel\",\n                \"uri\": \"i18n/i18n.properties\",\n                \"settings\": {\n                    \"enhanceWith\": [{\n                        \"bundleUrl\": \"i18n/i18n.properties\",\n                        \"bundleUrlRelativeTo\": \"manifest\"\n                    }]\n                }\n            },\n            \"equipment\": {\n                \"preload\": true,\n                \"dataSource\": \"equipment\",\n                \"settings\": {}\n            }\n        },\n        \"rootView\": {\n            \"viewName\": \"sap.ui.test.view.Main\",\n            \"id\" : \"rootView\",\n            \"async\": true,\n            \"type\": \"XML\"\n        },\n        \"handleValidation\": true,\n        \"config\": {\n \n        },\n        \"routing\": {\n \n        },\n        \"extends\": {\n            \"component\": \"sap.fiori.otherApp\",\n            \"minVersion\": \"0.8.15\",\n            \"extensions\": {}\n        },\n        \"contentDensities\": {\n            \"compact\": true,\n            \"cozy\": false\n        },\n        \"resourceRoots\": {\n            \".myname\": \"./myname\"\n        },\n        \"componentName\": \"sap.fiori.appName\",\n        \"library\": {\n            \"i18n\": true\n        },\n        \"commands\": {\n            \"Save\": {\n                \"shortcut\": \"Ctrl+S\"\n            }\n        }\n    },\n\n \n\n    \"sap.fe\": {},\n    \"sap.card\": {}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with <template:if/elseif/else>\nDESCRIPTION: This snippet demonstrates the usage of `<template:if>`, `<template:elseif>`, and `<template:else>` to check multiple conditions and render different controls based on which condition is met.  It checks for `ImageUrl` first, then `TypeImageUrl`, and finally defaults to displaying the `Title` if neither URL is available.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/if-fc18595.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<template:if test=\"{meta>ImageUrl}\">\n  <template:then>\n    <m:Image src=\"{path: 'meta>ImageUrl', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\" />\n  </template:then>\n  <template:elseif test=\"{meta>TypeImageUrl}\">\n    <commons:Image src=\"{path: 'meta>TypeImageUrl', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\" />\n  </template:elseif>\n  <template:else>\n    <commons:Text text=\"{path: 'meta>Title/Value', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\" />\n  </template:else>\n</template:if>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Library Configuration in manifest.json\nDESCRIPTION: This code snippet demonstrates how to configure lazy loading for a library in the `manifest.json` file.  The `lazy: true` setting prevents the library from being loaded immediately upon application start, allowing for deferred loading when needed. This reduces initial load time and improves performance. The `sap.ui.core` and `sap.m` libraries are defined as dependencies without lazy loading, whereas `my.heavy.charting` is configured for lazy loading.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/performance-speed-up-your-app-408b40e.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sap.ui5\": {\n  \t\"dependencies\": {\n  \t\t\"minUI5Version\": \"1.70.0\",\n  \t\t\"libs\": {\n  \t\t\t\"sap.ui.core\": {},\n  \t\t\t\"sap.m\": {},\n  \t\t\t\"my.heavy.charting\": {\n  \t\t\t\t\"lazy\": true\n  \t\t\t}\n  \t\t},\n...\n\n```\n\n----------------------------------------\n\nTITLE: Using core:require with Data Binding in XML View\nDESCRIPTION: This XML snippet demonstrates using `core:require` to define modules used within data bindings. The `some/Util` module is aliased as `Util` for use in a formatter. The `some/Factory` module is aliased as `Factory` within the List control and used to create items in the list. Requires sap.m library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/require-modules-in-xml-view-and-fragment-b11d853.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View controllerName=\"module:some/Controller\" xmlns=\"sap.m\"\n      xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\"\n      core:require=\"{Util:'some/Util'}\">\n  <Panel>\n      <Image src=\"http://www.sap.com/global/ui/images/global/sap-logo.png\"/>\n      <Text text=\"{formatter: 'Util.format', path: '/text'}\"/>\n      <List core:require=\"{\n              Factory:'some/Factory'\n          }\" id=\"list\" items=\"{path:'/items', factory:'Factory.createItem'}\">\n      </List>\n   </Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Opening dialog asynchronously - JavaScript\nDESCRIPTION: This JavaScript code defines the onOpenDialog function in the HelloPanel controller. It uses async/await to lazily load the HelloDialog fragment and then opens the dialog.  The dialog instance is stored on the controller for reuse.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-16-dialogs-and-fragments-4da7298.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/m/MessageToast\"\n], (Controller, MessageToast) => {\n    \"use strict\";\n\n    return Controller.extend(\"ui5.walkthrough.controller.HelloPanel\", {\n        onShowHello() {\n            // read msg from i18n model\n            const oBundle = this.getView().getModel(\"i18n\").getResourceBundle();\n            const sRecipient = this.getView().getModel().getProperty(\"/recipient/name\");\n            const sMsg = oBundle.getText(\"helloMsg\", [sRecipient]);\n\n            // show message\n            MessageToast.show(sMsg);\n        },\n\n        async onOpenDialog() {\n            // create dialog lazily\n            this.oDialog ??= await this.loadFragment({\n                name: \"ui5.walkthrough.view.HelloDialog\"\n            });\n        \n            this.oDialog.open();\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Module with Dynamic Dependencies in OpenUI5\nDESCRIPTION: This snippet shows how to implement dynamic dependency loading using `sap.ui.require` within an OpenUI5 module.  A static dependency on `sap/m/Input` is declared.  Within the `onSavePress` function, the `sap/m/Dialog` module is loaded dynamically only when needed. The callback function of `sap.ui.require` is executed after 'sap/m/Dialog' and its dependencies are loaded, creating and opening a dialog.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/modules-and-dependencies-91f23a7.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(['sap/m/Input'], function(Input) {\n \n        var MyControl = ...;\n \n        MyControl.prototype.onSavePress = function () {\n            // dynamically load a dialog once it is needed\n            sap.ui.require(['sap/m/Dialog'], function(Dialog) {\n                var oDialog = new Dialog(...);\n                oDialog.open(...);\n            });\n        };\n         \n        return MyControl;\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing statusText Formatter\nDESCRIPTION: This snippet defines a custom formatter function `statusText` in `formatter.ts`. It takes a status code as input and returns the corresponding translated text from the resource bundle based on the status. The formatter is designed to convert the 'A', 'B', and 'C' status codes to 'New', 'In Progress', and 'Done', respectively.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-22-custom-formatters-typescript-61d4e2b.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\n\nexport default  {\n    statusText: function (this: Controller, status: string): string | undefined {\n        const resourceBundle = (this?.getOwnerComponent()?.getModel(\"i18n\") as ResourceModel)?.getResourceBundle() as ResourceBundle;\n        switch (status) {\n            case \"A\":\n                return resourceBundle.getText(\"invoiceStatusA\");\n            case \"B\":\n                return resourceBundle.getText(\"invoiceStatusB\");\n            case \"C\":\n                return resourceBundle.getText(\"invoiceStatusC\");\n            default:\n                return status;\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Resource Bundle Properties File Example\nDESCRIPTION: This example shows the structure of a resource bundle properties file. It demonstrates how to add comments with translation keys and text types for translation. The file contains key-value pairs, where the keys are language-independent identifiers and the values are the corresponding text strings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-bundles-91f225c.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# SAPUI5 TRANSLATION-KEY <GUID>\n#XMSG: A message to greet the world\nhelloWorld=Hello World\n#XBUT,10: Save button text\nbuttonSave=Save\n#XFLD,30: Greetings displayed in the upper right corner of the screen\nwelcome=Welcome {0}\n\n```\n\n----------------------------------------\n\nTITLE: Extending a Control with Namespace in OpenUI5\nDESCRIPTION: This code demonstrates how to extend a `sap.ui.core.Control` with a custom namespace in OpenUI5. `sap.ui.define` is used to declare the dependency on `sap/ui/core/Control`. `Control.extend` is then used to create a new control class under the namespace 'my.app.MyControl'. The empty object `{}` represents the control's prototype definition, which can be extended with custom methods and properties.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/modules-and-dependencies-91f23a7.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/Control\"], function(Control) {\n    return Control.extend(\"my.app.MyControl\", {});\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Metadata Loading with Promise API (OpenUI5, JavaScript)\nDESCRIPTION: This code snippet demonstrates how to properly handle metadata loading for OData models when preload is enabled.  It utilizes the `metadataLoaded` Promise API to ensure that the application code waits for the metadata to be loaded before interacting with the model. Using the Promise API guarantees the code will execute even if the metadata has already been loaded.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-model-preload-26ba6a5.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oModel  = this.oModel, // sap.ui.model.odata.v2.ODataModel\n    that = this;\noModel.metadataLoaded(true).then(\n    function () {\n        // model is ready now\n        oModel.createKey(\"PERSON\", {\"ID\" : 4711, \"TASK_GUID\": \"myguid\"});\n    },\n    function () {\n        // Display error information so that the user knows that the application does not work.\n        that.navigateToErrorPage();\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating, Deleting, and Saving Sales Orders with OData V4\nDESCRIPTION: This code snippet demonstrates creating, deleting, and saving sales orders using the sap.ui.model.odata.v4 library.  It shows how to use `ODataListBinding#create` to create a new sales order, `Context#delete` to delete an existing one, and `ODataModel#submitBatch` to save changes. The example also includes error handling and UI locking mechanisms using `setBusy` to prevent issues during batch submissions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-an-entity-in-a-collection-c9723f8.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// suppose this list binding has no own update group; it uses the model's update group instead (an application group)\n...\n        onCreateSalesOrder : function (oEvent) {\n            var oContext = this.getView().byId(\"SalesOrders\").getBinding(\"items\")\n                    .create({\n                        \"Note\" : \"My new Sales Order\",\n                        \"NoteLanguage\" : \"E\",\n                        \"BuyerID\" : \"0100000000\",\n                        \"CurrencyCode\" : \"EUR\"\n                    });\n \n            // Note: This promise fails only if the transient entity is canceled, \n            //   i.e. deleted by either deleting the transient context or by resetting pending changes\n            oContext.created().then(function () {\n                    // sales order successfully created\n                }, function (oError) {\n                    // handle rejection of entity creation; if oError.canceled === true then the transient entity has been deleted\n                        if (!oError.canceled) {\n                            throw oError; // unexpected error\n                        }\n                });\n        },\n \n        onDeleteSalesOrder : function () {\n            var oSalesOrderContext = this.getView().byId(\"SalesOrders\").getSelectedItem().getBindingContext();\n \n            oSalesOrderContext.delete(\"$auto\").then(function () {\n                    // sales order successfully deleted\n               }, function (oError) {\n                    // do error handling\n               });\n        },\n \n        onSaveSalesOrder : function () {\n            var oView = this.getView();\n \n            function resetBusy() {\n                oView.setBusy(false);\n            }\n \n            // lock UI until submitBatch is resolved, to prevent errors caused by updates while submitBatch is pending\n            oView.setBusy(true);\n             \n            oView.getModel().submitBatch(oView.getModel().getUpdateGroupId()).then(resetBusy, resetBusy);\n        },\n...\n```\n\n----------------------------------------\n\nTITLE: Migrating jQuery.sap.log to sap/base/Log in OpenUI5 JavaScript\nDESCRIPTION: This code demonstrates how to replace the deprecated `jQuery.sap.log` API with the new `sap/base/Log` module in OpenUI5. It involves adding `sap/base/Log` as a dependency in `sap.ui.define` and using the `Log` argument to call logging methods like `Log.info`. This approach ensures compatibility with modern OpenUI5 coding standards.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([], function() {\n  jQuery.sap.log.info(\"My log message\");\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define(['sap/base/Log'], function(Log) {\n  Log.info(\"My log message\");\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Data Example for Element Binding\nDESCRIPTION: This JSON snippet demonstrates a simple data structure representing a company with various properties like name, street, city, state, zip, and revenue. It serves as the model data for showcasing element binding in subsequent XML view and JavaScript controller examples.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"company\" : {\n        \"name\": \"Acme Inc.\",\n        \"street\": \"23 Franklin St.\",\n        \"city\": \"Claremont\",\n        \"state\": \"New Hampshire\",\n        \"zip\": \"03301\",\n        \"revenue\": \"1833990\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Button and Controller Reference - XML\nDESCRIPTION: This XML snippet defines the view structure, replacing the static text with a button. It also specifies the associated controller for handling UI interactions using the `controllerName` attribute. The `press` event of the button is bound to the `.onShowHello` function within the controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-controllers-50579dd.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.App\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Button\n      text=\"Say Hello\"\n      press=\".onShowHello\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Control Enabled based on Order Status - XML\nDESCRIPTION: This XML snippet enables a control only if the order status is not null. It uses the `!==` operator to check for null. The expression uses embedded binding syntax.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Control is enabled only if the order status is set. --> \nenabled=\"{=%{/orderStatus} !== null}\"\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.startsWith with String.prototype.startsWith (Native)\nDESCRIPTION: This snippet shows how to replace `jQuery.sap.startsWith` with the native `String.prototype.startsWith` method. `startsWith` determines whether a string begins with the characters of a specified string.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nsMyString.startsWith(\"abc\");\n```\n\n----------------------------------------\n\nTITLE: Configure Asynchronous Root View and Routing (JSON)\nDESCRIPTION: This JSON snippet from a `manifest.json` file demonstrates how to configure the `rootView` and `routing` sections to load views asynchronously using the `async: true` property. This improves the initial loading time and responsiveness of the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/use-asynchronous-loading-676b636.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"sap.ui5\": {\n        \"rootView\": {\n            \"viewName\": \"my.app.view.App\",\n            \"type\": \"XML\",\n            \"id\": \"app\",\n            \"async\": true\n        },\n        \"routing\": {\n            \"config\": {\n                \"routerClass\": \"sap.m.routing.Router\",\n                \"viewType\": \"XML\",\n                \"path\": \"my.app.view\",\n                \"controlId\": \"app\",\n                \"controlAggregation\": \"pages\",\n                \"async\": true\n            }\n        },\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create App Controller for Routing - JavaScript\nDESCRIPTION: This JavaScript snippet creates a new App.controller.js to handle routing events. It initializes the router, attaches to the routeMatched event, and handles state changes to update the URL based on navigation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-routing-7f65131.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\t\t\t\t\t\t   \n\t\"sap/ui/core/mvc/Controller\"\n], function (Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.App\", {\n\t\tonInit: function () {\n\t\t\tthis.oOwnerComponent = this.getOwnerComponent();\n\t\t\tthis.oRouter = this.oOwnerComponent.getRouter();\n\t\t\tthis.oRouter.attachRouteMatched(this.onRouteMatched, this);\n\t\t},\n\n\t\tonRouteMatched: function (oEvent) {\n\t\t\tvar sRouteName = oEvent.getParameter(\"name\"),\n\t\t\t\toArguments = oEvent.getParameter(\"arguments\");\n\n\t\t\t// Save the current route name\n\t\t\tthis.currentRouteName = sRouteName;\n\t\t\tthis.currentProduct = oArguments.product;\n\t\t},\n\n\t\tonStateChanged: function (oEvent) {\n\t\t\tvar bIsNavigationArrow = oEvent.getParameter(\"isNavigationArrow\"),\n\t\t\t\tsLayout = oEvent.getParameter(\"layout\");\n\n\t\t\t// Replace the URL with the new layout if a navigation arrow was used\n\t\t\tif (bIsNavigationArrow) {\n\t\t\t\tthis.oRouter.navTo(this.currentRouteName, {layout: sLayout, product: this.currentProduct}, true);\n\t\t\t}\n\t\t},\n\n\t\tonExit: function () {\n\t\t\tthis.oRouter.detachRouteMatched(this.onRouteMatched, this);\n\t\t}\n\t});\n});\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Module with Dependencies in OpenUI5\nDESCRIPTION: This code snippet defines an OpenUI5 module named 'SomeClass' using `sap.ui.define`. It specifies two dependencies, 'sap/mylib/Helper' and 'sap/m/Bar', which are passed as arguments (Helper, Bar) to the module's callback function. The module creates a class and adds methods to its prototype, utilizing the injected dependencies. The module returns the class itself.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/modules-and-dependencies-91f23a7.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(\"SomeClass\", ['sap/mylib/Helper', 'sap/m/Bar'], function(Helper, Bar) {\n \n    // create a new class\n    var SomeClass = function () {};\n \n    // add methods to its prototype\n    SomeClass.prototype.foo = function () {\n \n        // use a function from the dependency 'Helper' in the same package (e.g. 'sap/mylib/Helper' )\n        var mSettings = Helper.foo();\n \n        // create and return an sap.m.Bar (using its local name 'Bar')\n        return new Bar(mSettings);\n    };\n    // return the class as module value\n    return SomeClass;\n \n  });\n```\n\n----------------------------------------\n\nTITLE: Models in manifest.json - JavaScript\nDESCRIPTION: This code snippet defines the models within the `manifest.json` file of an OpenUI5 application. It includes configurations for an i18n resource model and an OData model, specifying their types, URIs, and data sources.  This replaces the model creation logic previously in `Component.js`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n    \"sap.ui5\": {\n        ...\n        \"models\": {\n            \"i18n\": {\n                \"type\": \"sap.ui.model.resource.ResourceModel\",\n                \"uri\": \"i18n/i18n.properties\"\n            },\n            \"\": {\n                \"dataSource\": \"LEAVEREQUEST\",\n                \"settings\": {\n                }\n            }\n        },\n    \n```\n\n----------------------------------------\n\nTITLE: Creating index.html\nDESCRIPTION: This HTML file serves as the entry point to the UI5 application. It bootstraps UI5, sets the theme, compatibility version, and defines the component to be loaded.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-no-data-binding-4cde849.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>Data Binding Tutorial</title>\n\t<script id=\"sap-ui-bootstrap\"\n\t\tsrc=\"resources/sap-ui-core.js\"\n\t\tdata-sap-ui-theme=\"sap_horizon\"\n\t\tdata-sap-ui-compat-version=\"edge\"\n\t\tdata-sap-ui-async=\"true\"\n\t\tdata-sap-ui-on-init=\"module:sap/ui/core/ComponentSupport\"\n\t\tdata-sap-ui-resource-roots='{\"ui5.databinding\": \"./\"}'>\n\t</script>\n</head>\n<body class=\"sapUiBody\" id=\"content\">\n\t<div data-sap-ui-component data-name=\"ui5.databinding\" data-id=\"container\" data-settings='{\"id\" : \"databinding\"}'></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Formatter Function in an OpenUI5 Controller (JavaScript)\nDESCRIPTION: This code snippet defines an OpenUI5 controller with a custom formatter function named `formatMail`. This function takes a first name and last name as input, constructs an email address, and uses `sap.m.URLHelper.normalizeEmail` to create a properly formatted email link. The function retrieves localized text from the i18n resource bundle for the email subject and body. The controller extends `sap.ui.core.mvc.Controller` and depends on `sap/m/library` and `sap/ui/core/mvc/Controller`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-formatting-values-6fdf0ac.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\t\"sap/m/library\",\n\t\t\"sap/ui/core/mvc/Controller\"\n\t], (mobileLibrary, Controller) => {\n\t\t\"use strict\";\n\t\n\t\treturn Controller.extend(\"ui5.databinding.controller.App\", {\n\t\t\tformatMail(sFirstName, sLastName) {\n\t\t\t\tconst oBundle = this.getView().getModel(\"i18n\").getResourceBundle();\n\t\t\t\n\t\t\t\treturn mobileLibrary.URLHelper.normalizeEmail(\n\t\t\t\t\t`${sFirstName}.${sLastName}@example.com`,\n\t\t\t\t\toBundle.getText(\"mailSubject\", [sFirstName]),\n\t\t\t\t\toBundle.getText(\"mailBody\"));\n\t\t\t}\n\t\t});\n\t});\n```\n\n----------------------------------------\n\nTITLE: Creating mockServer.html for Test Mode - HTML\nDESCRIPTION: Creates an HTML page (mockServer.html) in the webapp/test folder to run the OpenUI5 application in test mode using mock data. It bootstraps the SAPUI5 framework, specifies the theme, compatibility version, and enables asynchronous loading.  It also calls a script to initialize the mock server and defines the resource root for the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-26-mock-server-configuration-bae9d90.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>SAPUI5 UI5 Walkthrough - Mockserver Test Page</title>\n\t<script\n\t\tid=\"sap-ui-bootstrap\"\n\t\tsrc=\"../resources/sap-ui-core.js\"\n\t\tdata-sap-ui-theme=\"sap_horizon\"\n\t\tdata-sap-ui-compat-version=\"edge\"\n\t\tdata-sap-ui-async=\"true\"\n\t\tdata-sap-ui-on-init=\"module:ui5/walkthrough/test/initMockServer\"\n\t\tdata-sap-ui-resource-roots='{\n\t\t\t\"ui5.walkthrough\": \"../\"\n\t\t}'>\n\t</script>\n</head>\n<body class=\"sapUiBody\" id=\"content\">\n\t<div data-sap-ui-component data-name=\"ui5.walkthrough\" data-id=\"container\" data-settings='{\"id\" : \"walkthrough\"}'></div>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating German Resource Bundle - i18n_de.properties\nDESCRIPTION: This code snippet demonstrates how to create a German resource bundle file `i18n_de.properties` by duplicating the original `i18n.properties` file and translating the text into German. This allows the application to display German text when the German locale is active. The file contains key-value pairs where keys represent the identifiers and values are the German translations.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-optional-resource-bundles-and-multiple-languages-4e593b4.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Field labels\nfirstName=Vorname\nlastName=Nachname\nenabled=Aktiviert\n\n# Screen titles\npanelHeaderText=Data Binding Grundlagen\n```\n\n----------------------------------------\n\nTITLE: Explicit Browser Event Registration in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to explicitly register and deregister a browser event handler (click) in an OpenUI5 control using jQuery.on() and jQuery.off(). It includes the `init`, `onAfterRendering`, `onBeforeRendering`, and `exit` lifecycle methods to manage the event listener's lifecycle and prevent memory leaks. `handleClick` is defined as a method of the control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/browser-events-91f1b38.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nMyControl.prototype.init = function() {\n        this.handleClick = MyControl.prototype.handleClick.bind(this);\n}\n\nMyControl.prototype.onAfterRendering = function() {\n        this.$().on(\"click\", this.handleClick);\n}\n\nMyControl.prototype.onBeforeRendering = function() {\n        this.$().off(\"click\", this.handleClick);\n}\n\n\nMyControl.prototype.exit = function() {\n        this.$().off(\"click\", this.handleClick);\n}\n\n\nMyControl.prototype.handleClick = function(oEvent) {\n        // do something...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source URI for Local Proxy in manifest.json - JSON\nDESCRIPTION: This code shows how to modify the `uri` in the `manifest.json` file to point to the local proxy server. By prefixing the remote service URL with the proxy's address, requests are routed through the proxy, bypassing the same-origin policy restriction during local development. You must have a local proxy server already configured to use this.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/request-fails-due-to-same-origin-policy-cross-origin-resource-sharing-cors-5bb388f.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"sap.app\": {\n\t\t...\n\t\t\"dataSources\": {\n\t\t\t\"northwind\": {\n\t\t\t\t\"uri\": \"http://localhost:8081/https://services.odata.org/V2/Northwind/Northwind.svc/\",\n\n\t\t\t\t\"type\": \"OData\",\n\t\t\t\t\"settings\": {\n\t\t\t\t\t\"odataVersion\": \"2.0\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Back Navigation - JavaScript\nDESCRIPTION: This JavaScript code defines the `onNavBack` function within the Detail controller. It utilizes the `History` object from `sap.ui.core.routing` to determine the previous hash. If a previous hash exists (meaning navigation within the app has occurred), it uses `window.history.go(-1)` to go back. Otherwise, it navigates to the `overview` route, replacing the current history state.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-32-routing-back-and-history-8ef57cf.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\"\n], (Controller, History) => {\n\t\"use strict\";\n\n\treturn Controller.extend(\"ui5.walkthrough.controller.Detail\", {\n\n\t\tonInit() {\n\t\t\tconst oRouter = this.getOwnerComponent().getRouter();\n\t\t\toRouter.getRoute(\"detail\").attachPatternMatched(this.onObjectMatched, this);\n\t\t},\n\n\t\tonObjectMatched(oEvent) {\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: \"/\" + window.decodeURIComponent(oEvent.getParameter(\"arguments\").invoicePath),\n\t\t\t\tmodel: \"invoice\"\n\t\t\t});\n\t\t},\n\n\t\tonNavBack() {\n\t\t\tconst oHistory = History.getInstance();\n\t\t\tconst sPreviousHash = oHistory.getPreviousHash();\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\twindow.history.go(-1);\n\t\t\t} else {\n\t\t\t\tconst oRouter = this.getOwnerComponent().getRouter();\n\t\t\t\toRouter.navTo(\"overview\", {}, true);\n\t\t\t}\n\t\t}\n\t});\n});\n\n```\n\n----------------------------------------\n\nTITLE: Deleting an Item in OData V4 with Error Handling (OpenUI5)\nDESCRIPTION: This code snippet defines the `onDelete` function to delete a selected item from a list. It retrieves the binding context of the selected item, calls the `delete` method on the context, and handles success and error scenarios. Error handling includes checking if the context is still selected and updating the detail area accordingly, along with UI changes. If the deletion is canceled, a corresponding message is displayed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-list-detail-scenario-ec44581.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nonDelete : function () {\n            var oContext,\n                oPeopleList = this.byId(\"peopleList\"),\n                oSelected = oPeopleList.getSelectedItem(),\n                sUserName;\n \n            if (oSelected) {\n                oContext = oSelected.getBindingContext();\n                sUserName = oContext.getProperty(\"UserName\");\n                oContext.delete().then(function () {\n                    MessageToast.show(this._getText(\"deletionSuccessMessage\", sUserName));\n                }.bind(this), function (oError) {\n                    if (oContext === oPeopleList.getSelectedItem().getBindingContext()) {\n                        this._setDetailArea(oContext);\n                    }\n                    this._setUIChanges();\n                    if (oError.canceled) {\n                        MessageToast.show(this._getText(\"deletionRestoredMessage\", sUserName));\n                        return;\n                    }\n                    MessageBox.error(oError.message + \": \" + sUserName);\n                }.bind(this));\n                this._setDetailArea();\n                this._setUIChanges(true);\n            }\n        },\n```\n\n----------------------------------------\n\nTITLE: Defining Manifest in Component Metadata (JavaScript)\nDESCRIPTION: This code snippet shows how to declare the manifest in the component metadata by setting `manifest: \"json\"`. This tells the component to load the `manifest.json` file and read the relevant entries for OpenUI5. It also shows how to define the dependencies that need to be loaded in order to start the component. Requires `sap/ui/core/UIComponent`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-descriptor-for-applications-components-and-libraries-be0cf40.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/UIComponent\"\n], (UIComponent) => {\n\t\"use strict\";\n\treturn UIComponent.extend(\"my.sample.Component\", {\n\t\tmetadata  : { \n\t\t\tmanifest: \"json\",\n\t\t\tinterfaces: [\n\t\t\t\t\"sap.ui.core.IAsyncContentCreation\"\n\t\t\t]\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Template Alias in XML\nDESCRIPTION: This XML snippet demonstrates how to define a template alias using `<template:alias>` and subsequently use it within the template. It aliases `sap.ui.model.odata.AnnotationHelper` to `AH` and uses `AH.format` as a formatter in various bindings within a `SimpleForm`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/alias-ac5751f.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<template:alias name=\"AH\" value=\"sap.ui.model.odata.AnnotationHelper\">\n  <template:with path=\"meta>com.sap.vocabularies.UI.v1.Badge\" var=\"badge\">\n    <form:SimpleForm>\n      <form:title>\n        <core:Title text=\"{path: 'badge>HeadLine', formatter: 'AH.format'}\"/>\n      </form:title>\n      <Label text=\"{path: 'badge>Title/Label', formatter: 'AH.format'}\"/>\n      <Text text=\"{path: 'badge>Title/Value', formatter: 'AH.format'}\"/>\n      <Label text=\"{path: 'badge>MainInfo/Label', formatter: 'AH.format'}\"/>\n      <template:with path=\"badge>MainInfo\" var=\"field\">\n        <core:Fragment fragmentName=\"sap.ui.core.sample.ViewTemplate.tiny.Field\" type=\"XML\"/>\n      </template:with>\n      <Label text=\"{path: 'badge>SecondaryInfo/Label', formatter: 'AH.format'}\"/>\n      <template:with path=\"badge>SecondaryInfo\" var=\"field\">\n        <core:Fragment fragmentName=\"sap.ui.core.sample.ViewTemplate.tiny.Field\" type=\"XML\"/>\n      </template:with>\n    </form:SimpleForm>\n  </template:with>\n</template:alias>\n```\n\n----------------------------------------\n\nTITLE: OpenUI5 Controller Definition with Dependencies (JavaScript)\nDESCRIPTION: Defines the Worklist controller for an OpenUI5 application. It includes dependencies like BaseController, JSONModel, formatter, Filter, FilterOperator, MessageToast, and MessageBox. This controller extends the BaseController and defines event handlers for quick filters, unlisting products, and updating product stock.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-adding-actions-to-the-worklist-2da220f.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"./BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"myCompany/myApp/model/formatter\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/m/MessageToast\",\n\t\"sap/m/MessageBox\"\n\n], function(BaseController, JSONModel, formatter, Filter, FilterOperator, MessageToast, MessageBox) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"myCompany.myApp.controller.Worklist\", {\n\n\t\tformatter: formatter,\n\n...\n\n\t\t/**\n\t\t * Displays an error message dialog. The displayed dialog is content density aware.\n\t\t * @param {string} sMsg The error message to be displayed\n\t\t * @private\n\t\t */\n\t\t_showErrorMessage: function(sMsg) {\n\t\t\tMessageBox.error(sMsg, {\n\t\t\t\tstyleClass: this.getOwnerComponent().getContentDensityClass()\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Event handler when a filter tab gets pressed\n\t\t * @param {sap.ui.base.Event} oEvent the filter tab event\n\t\t * @public\n\t\t */\n\t\tonQuickFilter: function(oEvent) {\n\t\t\tvar oBinding = this._oTable.getBinding(\"items\"),\n\t\t\t\tsKey = oEvent.getParameter(\"selectedKey\");\n\n\t\t\toBinding.filter(this._mFilters[sKey]);\n\t\t},\n\n\t\t/**\n\t\t * Error and success handler for the unlist action.\n\t\t * @param {string} sProductId the product ID for which this handler is called\n\t\t * @param {boolean} bSuccess true in case of a success handler, else false (for error handler)\n\t\t * @param {number} iRequestNumber the counter which specifies the position of this request\n\t\t * @param {number} iTotalRequests the number of all requests sent\n\t\t * @private\n\t\t */\n\t\t_handleUnlistActionResult : function (sProductId, bSuccess, iRequestNumber, iTotalRequests){\n\t\t\t// we could create a counter for successful and one for failed requests\n\t\t\t// however, we just assume that every single request was successful and display a success message once\n\t\t\tif (iRequestNumber === iTotalRequests) {\n\t\t\t\tMessageToast.show(this.getModel(\"i18n\").getResourceBundle().getText(\"StockRemovedSuccessMsg\", [iTotalRequests]));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Error and success handler for the reorder action.\n\t\t * @param {string} sProductId the product ID for which this handler is called\n\t\t * @param {boolean} bSuccess true in case of a success handler, else false (for error handler)\n\t\t * @param {number} iRequestNumber the counter which specifies the position of this request\n\t\t * @param {number} iTotalRequests the number of all requests sent\n\t\t * @private\n\t\t */\n\t\t_handleReorderActionResult : function (sProductId, bSuccess, iRequestNumber, iTotalRequests){\n\t\t\t// we could create a counter for successful and one for failed requests\n\t\t\t// however, we just assume that every single request was successful and display a success message once\n\t\t\tif (iRequestNumber === iTotalRequests) {\n\t\t\t\tMessageToast.show(this.getModel(\"i18n\").getResourceBundle().getText(\"StockUpdatedSuccessMsg\", [iTotalRequests]));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the unlist button. Will delete the\n\t\t * product from the (local) model.\n\t\t * @public\n\t\t */\n\t\tonUnlistObjects: function() {\n\t\t\tvar aSelectedProducts, i, sPath, oProduct, oProductId;\n\n\t\t\taSelectedProducts = this.byId(\"table\").getSelectedItems();\n\t\t\tif (aSelectedProducts.length) {\n\t\t\t\tfor (i = 0; i < aSelectedProducts.length; i++) {\n\t\t\t\t\toProduct = aSelectedProducts[i];\n\t\t\t\t\toProductId = oProduct.getBindingContext().getProperty(\"ProductID\");\n\t\t\t\t\tsPath = oProduct.getBindingContext().getPath();\n\t\t\t\t\tthis.getModel().remove(sPath, {\n\t\t\t\t\t\tsuccess : this._handleUnlistActionResult.bind(this, oProductId, true, i+1, aSelectedProducts.length),\n\t\t\t\t\t\terror : this._handleUnlistActionResult.bind(this, oProductId, false, i+1, aSelectedProducts.length)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._showErrorMessage(this.getModel(\"i18n\").getResourceBundle().getText(\"TableSelectProduct\"));\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Event handler for the reorder button. Will reorder the\n\t\t * product by updating the (local) model\n\t\t * @public\n\t\t */\n\t\tonUpdateStockObjects: function() {\n\t\t\tvar aSelectedProducts, i, sPath, oProductObject;\n\n\t\t\taSelectedProducts = this.byId(\"table\").getSelectedItems();\n\t\t\tif (aSelectedProducts.length) {\n\t\t\t\tfor (i = 0; i < aSelectedProducts.length; i++) {\n\t\t\t\t\tsPath = aSelectedProducts[i].getBindingContext().getPath();\n\t\t\t\t\toProductObject = aSelectedProducts[i].getBindingContext().getObject();\n\t\t\t\t\toProductObject.UnitsInStock += 10;\n\t\t\t\t\tthis.getModel().update(sPath, oProductObject, {\n\t\t\t\t\t\tsuccess : this._handleReorderActionResult.bind(this, oProductObject.ProductID, true, i+1, aSelectedProducts.length),\n\t\t\t\t\t\terror : this._handleReorderActionResult.bind(this, oProductObject.ProductID, false, i+1, aSelectedProducts.length)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._showErrorMessage(this.getModel(\"i18n\").getResourceBundle().getText(\"TableSelectProduct\"));\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Property Binding in XML View\nDESCRIPTION: This XML snippet demonstrates simple property binding in an OpenUI5 XML view. It binds the `value` property of an `Input` control to the `/company/name` path in the model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View \n    controllerName=\"sap.ui.sample.App\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <Input value=\"{/company/name}\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: TimePicker with OData V4 TimeOfDay (XML View)\nDESCRIPTION: This XML snippet demonstrates how to use sap.m.TimePicker with an OData V4 TimeOfDay in an XML view.  It demonstrates binding directly to an OData V4 property and also how to specify the data type when using, for example, a JSON model. The model value is a string in the format \"hh:mm:ss\" resp. \"hh:mm:ss.SSS\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Model value is a string in the format \"hh:mm:ss\" resp. \"hh:mm:ss.SSS\" -->\n<!-- (the number of S depends on the type's precision) -->\n<TimePicker value=\"{/V4/Time}\"/>\n \n<!-- When binding an Edm.TimeOfDay, for example via a JSON model, you have to specify a type -->\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{TimeOfDay: 'sap/ui/model/odata/type/TimeOfDay'}\">\n    ...\n    <TimePicker value=\"{path: 'json>/V4/Time', type: 'TimeOfDay'}\"/>\n```\n\n----------------------------------------\n\nTITLE: Choosing an Item from sap.m.Select with OPA5\nDESCRIPTION: This snippet shows how to select an item from a `sap.m.Select` control using OPA5.  It first finds the `sap.m.Select` control, then finds the `sap.ui.core.Item` within the select that matches the specified properties (in this case, the `key` property set to \"Germany\"), and simulates a `press` event on that item.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/simulating-user-interactions-on-controls-8615a0b.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\n    \"sap/ui/test/opaQUnit\",\n    \"sap/ui/test/actions/Press\",\n    \"sap/ui/test/matchers/Properties\",\n    \"sap/ui/test/matchers/Ancestor\"\n],  function (opaTest, Press, Properties, Ancestor) {\n\n    opaTest(\"Should trigger a press event\", function (Given, When, Then) {\n        // Startup the application using Given\n\n        When.waitFor({\n            id: \"mySelect\",\n            actions: new Press(),\n            success: function(oSelect) {\n                this.waitFor({\n                    controlType: \"sap.ui.core.Item\",\n                    matchers: [\n                        new Ancestor(oSelect),\n                        new Properties({ key: \"Germany\"})\n                    ],\n                    actions: new Press(),\n                    errorMessage: \"Cannot select Germany from mySelect\"\n                });\n            },\n            errorMessage: \"Could not find mySelect\"\n        });\n\n        // Assert what happened after pressing using Then\n\n    });\n\n});\n```\n\n----------------------------------------\n\nTITLE: NumberFormat Instantiation - JavaScript\nDESCRIPTION: This code snippet demonstrates how to instantiate different types of NumberFormat instances in JavaScript, including integer, float, percent, and currency formatters. It uses the static getter methods of the NumberFormat class to create these instances.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/number-format-91f2f28.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// \"NumberFormat\" required from module \"sap/ui/core/format/NumberFormat\"\nvar oIntegerFormat = NumberFormat.getIntegerInstance();\nvar oFloatFormat = NumberFormat.getFloatInstance();\nvar oPercentFormat = NumberFormat.getPercentInstance();\nvar oCurrencyFormat = NumberFormat.getCurrencyInstance();\n```\n\n----------------------------------------\n\nTITLE: Implementing Aggregation Binding in App.view.xml (XML)\nDESCRIPTION: This XML snippet defines a panel containing an `sap.m.List` control. The `items` aggregation of the list is bound to the `products>/Products` path, which refers to the `Products` array in the `products` model.  An `sap.m.ObjectListItem` is used as a template, and it is cloned for each product in the model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-12-aggregation-binding-using-templates-97830de.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n...\n\t<Panel headerText=\"{i18n>panel3HeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n\t\t<List headerText=\"{i18n>productListTitle}\" items=\"{products>/Products}\">\n\t\t\t<items>\n\t\t\t\t<ObjectListItem title=\"{products>ProductName}\"\n\t\t\t\t\tnumber=\"{\n\t\t\t\t\t\tparts: [\n\t\t\t\t\t\t\t{path: 'products>UnitPrice'},\n\t\t\t\t\t\t\t{path: '/currencyCode'}\n\t\t\t\t\t\t],\n\t\t\t\t\t\ttype: 'Currency',\n\t\t\t\t\t\tformatOptions: { showMeasure: false }\n\t\t\t\t\t}\"\n\t\t\t\t\tnumberUnit=\"{/currencyCode}\">\n\t\t\t\t\t<attributes>\n\t\t\t\t\t\t<ObjectAttribute text=\"{products>QuantityPerUnit}\"/>\n\t\t\t\t\t\t<ObjectAttribute title=\"{i18n>stockValue}\"\n\t\t\t\t\t\t\ttext=\"{\n\t\t\t\t\t\t\t\tparts: [\n\t\t\t\t\t\t\t\t\t{path: 'products>UnitPrice'},\n\t\t\t\t\t\t\t\t\t{path: 'products>UnitsInStock'},\n\t\t\t\t\t\t\t\t\t{path: '/currencyCode'}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tformatter: '.formatStockValue'\n\t\t\t\t\t\t\t}\"/>\n\t\t\t\t\t</attributes>\n\t\t\t\t</ObjectListItem>\n\t\t\t</items>\n\t\t</List>\n\t</Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Formatter Function in Controller\nDESCRIPTION: This JavaScript snippet shows how to define a formatter function within an OpenUI5 controller.  It rounds a given number to the nearest million and prepends a '> ' symbol.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/ui/model/json/JSONModel\"\n], function (Controller, JSONModel) {\n    \"use strict\";\n\n    return Controller.extend(\"sap.ui.sample.App\", {\n        roundToMillion(fValue) {\n            return `> ${fValue ? Math.floor(fValue / 1000000) : 0} M`;\n        }\n    });\n}); \n```\n\n----------------------------------------\n\nTITLE: HTML Bootstrapping with Configuration\nDESCRIPTION: This snippet shows how to bootstrap OpenUI5 by including the `sap-ui-core.js` script in an HTML page. It configures the OpenUI5 runtime with attributes like theme (`sap_horizon`), libraries (`sap.m`), compatibility version (`edge`), and asynchronous loading (`true`).  It also declares a module to be loaded after initialization.  The script is loaded from the webserver provided by UI5 Tooling.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-bootstrap-fe12df2.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>UI5 Walkthrough</title>\n\t<script\n\t\tid=\"sap-ui-bootstrap\"\n\t\tsrc=\"resources/sap-ui-core.js\"\n\t\tdata-sap-ui-theme=\"sap_horizon\"\n\t\tdata-sap-ui-libs=\"sap.m\"\n\t\tdata-sap-ui-compat-version=\"edge\"\n\t\tdata-sap-ui-async=\"true\"\n\t\tdata-sap-ui-on-init=\"module:ui5/walkthrough/index\"\n\t\tdata-sap-ui-resource-roots='{\n\t\t\t\"ui5.walkthrough\": \"./\"\n\t\t}'>\n\n\t</script>\n</head>\n<body>\n<div>Hello World</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Device Model in Component - TypeScript\nDESCRIPTION: This TypeScript code initializes a JSON model with device information using `sap.ui.Device`. It sets the model's default binding mode to `OneWay` to prevent accidental modifications. The device model is then set on the component with the name \"device\", making it accessible for data binding in views.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-35-device-adaptation-typescript-ab8ed1b.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport UIComponent from \"sap/ui/core/UIComponent\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport Device from \"sap/ui/Device\";\n/**\n * @namespace ui5.walkthrough\n */\n \nexport default class Component extends UIComponent {\n    public static metadata = {\n        \"interfaces\": [\"sap.ui.core.IAsyncContentCreation\"],\n        \"manifest\": \"json\"\n    };\n    init(): void {\n        // call the init function of the parent\n        super.init();\n        \n        // set data model\n        const data = {\n            recipient: {\n                name: \"World\"\n            }\n        };\n        const model = new JSONModel(data);\n        this.setModel(model);\n        // set device model\n        const deviceModel = new JSONModel(Device);\n        deviceModel.setDefaultBindingMode(\"OneWay\");\n        this.setModel(deviceModel, \"device\");\n\n        // create the views based on the url/hash\n        this.getRouter().initialize();\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Model Preload in manifest.json (OpenUI5)\nDESCRIPTION: This code snippet shows how to enable the preload flag for a model in the `manifest.json` file.  Setting `preload` to `true` allows the model to load its data asynchronously, improving startup performance.  This is suitable for models that load data from external sources, such as OData.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-model-preload-26ba6a5.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"sap.ui5\": {\n    ...\n    \"models\": {\n        \"mymodel\": {\n            \"preload\": true,\n            \"type\": \"name.of.my.ModelClass\"\n            ...\n\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 Tooling globally - npm\nDESCRIPTION: This command installs the UI5 Tooling globally on your machine. This allows you to use the `ui5` command from any directory in your terminal. This is a prerequisite for using UI5 tooling to build and serve the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-2680aa9.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --global @ui5/cli\n```\n\n----------------------------------------\n\nTITLE: ViewSettingsDialog Cancel Handler - JavaScript\nDESCRIPTION: This snippet defines the cancel handler within the ViewSettingsDialog initialization.  It deletes the 'showDialog' query parameter from the router arguments to prevent the dialog from reopening. Finally, it navigates to the 'employeeOverview' route without history.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-make-dialogs-bookmarkable-5cc3147.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncancel: function (oEvent){\n\t\t\t\t\tdelete this._oRouterArgs[\"?query\"].showDialog;\n\t\t\t\t\toRouter.navTo(\"employeeOverview\", this._oRouterArgs, true /*without history*/);\n\t\t\t\t}.bind(this)\n```\n\n----------------------------------------\n\nTITLE: Update Component.js (JavaScript)\nDESCRIPTION: This snippet removes the `init` function and the import of `sap/ui/model/BindingMode` from `Component.js`.  This is because the one-way binding mode setting is being removed in this step.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-resource-models-9790d9a.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/UIComponent\"\n], (UIComponent) => {\n\t\"use strict\";\n\treturn UIComponent.extend(\"ui5.databinding.Component\", {\n\t\tmetadata: {\n\t\t\tinterfaces: [\"sap.ui.core.IAsyncContentCreation\"],\n\t\t\tmanifest: \"json\"\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts based on Search Term - JavaScript\nDESCRIPTION: This JavaScript snippet implements the `onFilterPosts` function in the `Worklist.controller.js` file. This function is called when the user enters a search term in the `SearchField`. It creates a filter based on the entered query and applies it to the table binding to filter the displayed posts by their titles. Requires `sap/ui/model/Filter` and `sap/ui/model/FilterOperator`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-12-adding-a-search-0c270b4.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t'./BaseController',\n\t'sap/ui/model/json/JSONModel',\n\t'../model/formatter',\n\t'../model/FlaggedType',\n\t'sap/m/library',\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\"\n\n], function (BaseController, JSONModel, formatter, FlaggedType, mobileLibrary, Filter, FilterOperator) {\n\t\"use strict\";\n...\n\t\tonUpdateFinished: function (oEvent) {\n\t\t\t// update the worklist's object counter after the table update\n\t\t\tvar sTitle,\n\t\t\t\toTable = oEvent.getSource(),\n\t\t\t\tiTotalItems = oEvent.getParameter(\"total\");\n\t\t\t// only update the counter if the length is final and\n\t\t\t// the table is not empty\n\t\t\tif (iTotalItems && oTable.getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tsTitle = this.getResourceBundle().getText(\"worklistTableTitleCount\", [iTotalItems]);\n\t\t\t} else {\n\t\t\t\tsTitle = this.getResourceBundle().getText(\"worklistTableTitle\");\n\t\t\t}\n\t\t\tthis.getModel(\"worklistView\").setProperty(\"/worklistTableTitle\", sTitle);\n\t\t},\n\n\t\tonFilterPosts: function (oEvent) {\n\n\t\t\t// build filter array\n\t\t\tvar aFilter = [];\n\t\t\tvar sQuery = oEvent.getParameter(\"query\");\n\t\t\tif (sQuery) {\n\t\t\t\taFilter.push(new Filter(\"Title\", FilterOperator.Contains, sQuery));\n\t\t\t}\n\n\t\t\t// filter binding\n\t\t\tvar oTable = this.byId(\"table\");\n\t\t\tvar oBinding = oTable.getBinding(\"items\");\n\t\t\toBinding.filter(aFilter);\n\t\t},\n\n...\n\n```\n\n----------------------------------------\n\nTITLE: Create i18n.properties File (ini)\nDESCRIPTION: This snippet defines the `i18n.properties` file, containing key-value pairs for translatable texts. It includes entries for field labels (firstName, lastName, enabled) and the panel header text. This file is used by the resource model to provide localized text.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-resource-models-9790d9a.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# Field labels\nfirstName=First Name\nlastName=Last Name\nenabled=Enabled\n\n# Screen titles\npanelHeaderText=Data Binding Basics\n```\n\n----------------------------------------\n\nTITLE: Configuring ui5-middleware-simpleproxy (YAML)\nDESCRIPTION: This configuration block in `ui5.yaml` configures the `ui5-middleware-simpleproxy`. It specifies the order of middleware execution, the mount path for proxying requests, and the base URI of the remote OData service.  The `mountPath` property configures which URLs will be caught by the proxy, and the `configuration/baseUri` property stores the real server address.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-25-remote-odata-service-typescript-b68d321.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nspecVersion: '3.0'\nmetadata:\n  name: \"ui5.walkthrough\"\ntype: application\nframework:\n  name: OpenUI5\n  version: \"1.120.1\"\n  libraries:\n    - name: sap.m\n    - name: sap.ui.core\n    - name: themelib_sap_horizon\nbuilder:\n  customTasks:\n  - name: ui5-tooling-transpile-task\n    afterTask: replaceVersion\nserver:\n  customMiddleware:\n  - name: ui5-tooling-transpile-middleware\n    afterMiddleware: compression\n  - name: ui5-middleware-serveframework\n    afterMiddleware: compression\n  - name: ui5-middleware-simpleproxy\n    afterMiddleware: compression\n    mountPath: /V2\n    configuration:\n      baseUri: \"https://services.odata.org\"\n  - name: ui5-middleware-livereload\n    afterMiddleware: compression\n```\n\n----------------------------------------\n\nTITLE: Using XMLView in App.view.xml (XML)\nDESCRIPTION: This XML snippet updates the App.view.xml to include the new HelloPanel view using the mvc:XMLView tag. This nests the HelloPanel view within the App view, allowing for better organization and modularity of the UI.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-nested-views-df8c9c3.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n\t<Shell>\n\t\t<App class=\"myAppDemoWT\">\n\t\t\t<pages>\n\t\t\t\t<Page title=\"{i18n>homePageTitle}\">\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<mvc:XMLView viewName=\"ui5.walkthrough.view.HelloPanel\"/>\n\t\t\t\t\t</content>\n\t\t\t\t</Page>\n\t\t\t</pages>\n\t\t</App>\n\t</Shell>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining Models in manifest.json (JSON)\nDESCRIPTION: This snippet shows how to define models in the manifest.json file for an OpenUI5 application. It includes the data source configuration and model definitions, including binding a model to a data source. This approach simplifies model management within the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/assigning-the-model-to-the-ui-91f0d1c.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_version\": \"1.12.0\",\n  \"sap.app\": {\n    ...\n    \"dataSources\": {\n      \"invoiceRemote\": {\n        \"uri\": \"https://services.odata.org/V2/Northwind/Northwind.svc/\",\n        \"type\": \"OData\",\n        \"settings\": {\n          \"odataVersion\": \"2.0\"\n        }\n      }\n    }\n  },\n  ...\n  \"sap.ui5\": {\n    ...\n    \"models\": {\n      \"i18n\": {\n         ...\n      },\n      \"invoice\": {\n        \"dataSource\": \"invoiceRemote\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Click Event in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to handle a standard 'click' event in OpenUI5. The handler function, named 'onclick', is triggered when the control is clicked. The function receives an event object ('oEvent') which contains information about the event, and it displays an alert message showing the ID of the clicked control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/event-handler-methods-bdf3e98.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nonclick: function(oEvent) {\n   alert(\"Control \" + this.getId() + \" was clicked.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Controller example for Resetting Property Changes\nDESCRIPTION: This example shows controller part of the \"Save\" and \"Cancel\" functionality. `onCancelSalesOrder` calls `resetChanges` method with the update group ID, which discards all pending changes in that group. `onSaveSalesOrder` calls `submitBatch` method which sends the changes to the backend.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/batch-control-74142a3.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nonCancelSalesOrder : function (oEvent) {\n    this.getView().getModel().resetChanges(\"SalesOrderUpdateGroup\");\n},\n \nonSaveSalesOrder : function (oEvent) {\n    var that = this;\n    this.getView().getModel().submitBatch(\"SalesOrderUpdateGroup\").then(function(){\n        if (!that.byId(\"mySimpleForm\").getBindingContext().getBinding().hasPendingChanges()){\n            // raise success message\n        }\n    });\n},\n```\n\n----------------------------------------\n\nTITLE: ProductRating Class with TypeScript Constructor Signatures\nDESCRIPTION: This JavaScript/TypeScript code adds the generated constructor signatures to the `ProductRating` class, making TypeScript aware of the possible constructor settings. This is necessary for TypeScript to properly check the settings given in the constructor and provide suggestions for available properties. Includes imports for Control, RenderManager, MetadataOptions, Label, Button, RatingIndicator, ResourceBundle, and ResourceModel.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Control from \"sap/ui/core/Control\";\nimport RenderManager from \"sap/ui/core/RenderManager\";\nimport { MetadataOptions } from \"sap/ui/core/Element\";\nimport Label from \"sap/m/Label\";\nimport Button, { Button$PressEvent } from \"sap/m/Button\";\nimport RatingIndicator, { RatingIndicator$LiveChangeEvent } from \"sap/m/RatingIndicator\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\n\n/**\n * @namespace ui5.walkthrough.control\n */\nexport default class ProductRating extends Control {\n\n\t// The following three lines were generated and should remain as-is \n\t// to make TypeScript aware of the constructor signatures\n\tconstructor(idOrSettings?: string | $ProductRatingSettings);\n\tconstructor(id?: string, settings?: $ProductRatingSettings);\n\tconstructor(id?: string, settings?: $ProductRatingSettings) { super(id, settings); }\t\n    ...\n```\n\n----------------------------------------\n\nTITLE: DatePicker with OData V2 Date (XML View)\nDESCRIPTION: This XML snippet demonstrates how to use the sap.m.DatePicker with an OData V2 date in an XML view. It shows how to bind the DatePicker's value to an OData V2 property, specifying the 'DateTime' type and 'Date' display format constraints. The model value is a JavaScript Date object in UTC time zone.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Model value is a JavaScript Date object in UTC time zone -->\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{DateTime: 'sap/ui/model/odata/type/DateTime'}\">\n    ...\n    <DatePicker value=\"{path: '/V2/Date1', type: 'DateTime', constraints: {displayFormat: 'Date'}}\" />\n```\n\n----------------------------------------\n\nTITLE: Creating and Binding MessagePopover in SAPUI5\nDESCRIPTION: This code snippet demonstrates how to create a MessagePopover control, bind it to the message model, and add a button to open the MessagePopover. It requires modules 'sap/ui/core/Messaging', 'sap/m/Button', 'sap/m/MessagePopover', and 'sap/m/MessageItem'. The MessagePopover displays messages retrieved from the message model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/message-model-8956f0a.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Messaging\" required from \"sap/ui/core/Messaging\"\n// \"Button\" required from \"sap/m/Button\"\n// \"MessagePopover\" required from \"sap/m/MessagePopover\"\n// \"MessageItem\" required from \"sap/m/MessageItem\"\n\nconst oMessagePopoverButton = new Button({\n    text: \"Show MessagePopover\",\n    type: \"Accept\",\n    press: function() {\n        oMP.openBy(this);\n    }\n});\n\nconst oMP = new MessagePopover({\n    items: {\n        path:\"message>/\",\n        template: new MessageItem({ \n            description: \"{message>description}\", \n            type: \"{message>type}\", \n            title: \"{message>message}\"\n        })\n    }\n});\n\nconst oMessageModel = Messaging.getMessageModel();\noMP.setModel(oMessageModel,\"message\");\n\noMessagePopoverButton.placeAt(\"content\");\n```\n\n----------------------------------------\n\nTITLE: Entering Text into an Input Field with OPA5\nDESCRIPTION: This snippet demonstrates how to enter text into a `sap.m.Input` field using OPA5's `EnterText` action. Multiple `EnterText` actions can be chained to modify the input's value incrementally. It also covers clearing the text field before entering new text and keeping focus after entering the text.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/simulating-user-interactions-on-controls-8615a0b.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\noOpa.waitFor({\n    id: \"myInput\",\n    actions: [\n        new EnterText({ text: \"Hello \" }),\n        new EnterText({ text: \"World\" })\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 CLI with npm\nDESCRIPTION: This code snippet demonstrates how to install the UI5 command line interface (CLI) globally using npm.  The UI5 CLI is a toolchain for developing OpenUI5 applications. It requires Node.js and npm to be installed. This command installs the @ui5/cli package globally, making the `ui5` command available in the terminal.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/development-environment-7bb04e0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g @ui5/cli\n```\n\n----------------------------------------\n\nTITLE: Invoking Bound Action on Collection - JavaScript (Relative Path)\nDESCRIPTION: This snippet demonstrates how to invoke a bound action on a collection using a relative binding and the header context of the list binding as the parent context in OpenUI5. It retrieves the header context from a table bound to '/LeaveRequests', binds the 'DestroyOutdated' action to the context, and invokes the action.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oModel = this.getView().getModel(),\n    // assume there is a table with ID \"leaveRequests\" and its items aggregation bound to \"/LeaveRequests\"\n    oListBinding = this.byId(\"leaveRequests\").getBinding(\"items\"),\n    oHeaderContext = oListBinding.getHeaderContext();\n\noModel.bindContext(\"name.space.DestroyOutdated(...)\", oHeaderContext).invoke(); \n```\n\n----------------------------------------\n\nTITLE: JavaScript List Binding - bindAggregation Method (OpenUI5)\nDESCRIPTION: This JavaScript snippet demonstrates how to define list binding for an OpenUI5 control using the `bindAggregation` method. It creates a `ListItem` template and then calls `bindAggregation` on the `ComboBox` to bind it to the `/companies` path in the model, using the template to render each item.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/list-binding-aggregation-binding-91f0577.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar oItemTemplate = new sap.ui.core.ListItem({text:\"{name}\"});\noComboBox.bindAggregation(\"items\", {\npath: \"/companies\",\ntemplate: oItemTemplate,\ntemplateShareable: false\n});\n```\n\n----------------------------------------\n\nTITLE: Addressing OpenUI5 Modules\nDESCRIPTION: Shows how to address modules in OpenUI5 using their unique module name. Module names are case-sensitive. Dependencies are declared as an array of strings in the first argument of `sap.ui.define` and are provided as parameters to the callback function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/best-practices-for-loading-modules-00737d6.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"myLib/MyModuleA\"], function(MyModuleA){\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: XML Button with Controller Event Handler\nDESCRIPTION: This code defines a button in an XML view that triggers the `.doSomething` method in the view's controller when pressed.  The leading dot indicates that the method is located within the controller. The `this` context within the `doSomething` function will be the controller instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-events-in-xml-views-b0fb4de.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Press Me\" press=\".doSomething\"/>\n```\n\n----------------------------------------\n\nTITLE: Manifest.json - Routing Configuration for Lazy Loading (JSON)\nDESCRIPTION: This JSON snippet shows the updated `manifest.json` file with the addition of the `resumeTabHobbies` and `resumeTabNotes` targets. These targets are configured to be displayed within the `IconTabBar` control in the `Resume` view, enabling lazy loading. The `parent` property specifies the `employeeResume` target as a view dependency.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-implement-lazy-loading-cdab0a1.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"_version\": \"1.12.0\",\n\t\"sap.app\": {\n\t\t...\n\t},\n\t\"sap.ui\": {\n\t\t...\n\t},\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.nav.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"transition\": \"slide\",\n\t\t\t\t\"bypassed\": {\n\t\t\t\t\t\"target\": \"notFound\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"routes\": [{\n\t\t\t\t...\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}/resume:?query:\",\n\t\t\t\t\"name\": \"employeeResume\",\n\t\t\t\t\"target\": \"employeeResume\"\n\t\t\t}],\n\t\t\t\"targets\": {\n\t\t\t\t...\n\t\t\t\t\"employeeResume\": {\n\t\t\t\t\t\"id\": \"resume\",\n\t\t\t\t\t\"name\": \"employee.Resume\",\n\t\t\t\t\t\"level\" : 4,\n\t\t\t\t\t\"transition\": \"flip\"\n\t\t\t\t},\n\t\t\t\t\"resumeTabHobbies\": {\n\t\t\t\t\t\"id\": \"resumeHobbies\",\n\t\t\t\t\t\"parent\": \"employeeResume\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee\",\n\t\t\t\t\t\"name\": \"ResumeHobbies\",\n\t\t\t\t\t\"controlId\": \"hobbiesTab\",\n\t\t\t\t\t\"controlAggregation\": \"content\"\n\t\t\t\t},\n\t\t\t\t\"resumeTabNotes\": {\n\t\t\t\t\t\"id\": \"resumeNotes\",\n\t\t\t\t\t\"parent\": \"employeeResume\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee\",\n\t\t\t\t\t\"name\": \"ResumeNotes\",\n\t\t\t\t\t\"controlId\": \"notesTab\",\n\t\t\t\t\t\"controlAggregation\": \"content\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Resource Model with Bundle Name and Locale - JavaScript\nDESCRIPTION: This code snippet shows how to instantiate a resource model with a bundle name and a locale. The bundle name is the name of the resource bundle, and the locale specifies the language to be used. If no locale is specified, the system uses the login language. The .properties suffix is automatically appended to the bundle name.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-model-91f122a.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar oModel = new sap.ui.model.resource.ResourceModel({bundleName:\"myBundle\",locale:\"en\"});\n```\n\n----------------------------------------\n\nTITLE: Add Button to View XML\nDESCRIPTION: This XML code snippet adds a new button to the `HelloPanel` view. The button is configured with an ID (`helloDialogButton`), text from the `i18n` bundle (`openDialogButtonText`), and an event handler (`onOpenDialog`) that is triggered when the button is pressed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-16-dialogs-and-fragments-typescript-4b2e306.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.HelloPanel\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Panel\n      headerText=\"{i18n>helloPanelTitle}\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\" >\n      <content>\n      <Button\n         id=\"helloDialogButton\"\n         text=\"{i18n>openDialogButtonText}\"\n         press=\".onOpenDialog\"\n         class=\"sapUiSmallMarginEnd\"/>\n      <Button\n         text=\"{i18n>showHelloButtonText}\"\n         press=\".onShowHello\"\n         class=\"myCustomButton\"/>\n      <Input\n         value=\"{/recipient/name}\"\n         valueLiveUpdate=\"true\"\n         width=\"60%\"/>\n      <FormattedText\n         htmlText=\"Hello {/recipient/name}\"\n         class=\"sapUiSmallMargin sapThemeHighlight-asColor myCustomText\"/>\n      </content>\n   </Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Event Handler and Function Definition (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define custom event handlers or functions within an OpenUI5 controller. The `increaseCounter` function is defined as a method within the controller and can be called from other parts of the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/controller-121b8e6.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n    \"use strict\";\n    return Controller.extend(\"sap.hcm.Address\", {\n        increaseCounter: function() {\n            this.counter++;\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency - OpenUI5 JavaScript\nDESCRIPTION: This code shows how to format a number value as a currency string using the `format` method of a currency format instance. It takes a number and a currency code as input and returns the formatted currency string based on the locale and format options of the instance. The 'NumberFormat' module must be required beforehand.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-formatting-e978728.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"NumberFormat\" required from module \"sap/ui/core/format/NumberFormat\"\nvar oCurrencyFormat = NumberFormat.getCurrencyInstance();\n\noCurrencyFormat.format(12345.678, \"EUR\"); // output: EUR 12,345.68\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Loading with sap.m.List (XML)\nDESCRIPTION: This snippet demonstrates how to implement lazy loading using the `sap.m.List` control in an OpenUI5 view.  The `growing` property enables loading data in chunks when the user scrolls.  The `growingThreshold` determines the number of items loaded per chunk.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/load-only-what-you-really-need-e8fca3e.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<List\n\tgrowing=\"true\"\n\tgrowingThreshold=\"20\"\n\t...>\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Control for Personalization using Engine - JavaScript\nDESCRIPTION: This code snippet demonstrates how to register a control (e.g., a table) with the `sap.m.p13n.Engine` for personalization. It initializes a `MetadataHelper` to provide metadata information about the control's aggregations (e.g., columns) and creates instances of `SelectionController`, `SortController`, and `GroupController` to handle different aspects of personalization.  The `register` method is called on the engine's singleton instance to enable the control for personalization.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/enablement-of-personalization-with-variant-management-f280251.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* \n*  The MetadataHelper provides the metadata information for the control.\n*  each object in the array represents one item associated to an item in the controls\n*  aggregation. Looking at a table in this example, each entry represents one column.\n*  This information will be necessary to display all the columns and provide metadata specific information\n*  for the personalization Engine.\n*\n*  The key will be used for persistence. The convention is to give the according control (for example the column here)\n*  the same id the key provided so the Engine can create a connection between the column and metadata item.\n*/\nthis.oMetadataHelper = new MetadataHelper([\n    {key: \"firstName\", label: \"First Name\", path: \"firstName\"},\n    {key: \"lastName\", label: \"Last Name\", path: \"lastName\"},\n    {key: \"city\", label: \"City\", path: \"city\"},\n    {key: \"size\", label: \"Size\", path: \"size\"}\n]);\n\n/* \n*  The registration is a one time process that enables the given control instane for personalization.\n*  The registration process requires a helper for metadata related information.\n*  The controller setting is a map of arbitrary keys with the accoridng controller as value. Whenever\n*  the Engine will be accessed, these controller keys need to be provided as per wording in the registration process.\n*/\nEngine.getInstance().register(oTable, {\n    helper: this.oMetadataHelper,\n    controller: {\n        //The SelectionController requires a targetAggregation to be personalized.\n        //Each controller also requires the according control instance to where the settings should be persisted to.\n        Columns: new SelectionController({\n            targetAggregation: \"columns\",\n            control: oTable\n        }),\n        Sorter: new SortController({\n            control: oTable\n        }),\n        Groups: new GroupController({\n            control: oTable\n        })\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Activating Measurement and Basic Usage\nDESCRIPTION: This code snippet demonstrates how to activate the performance measurement tool and measure a specific code block using `Measurement.start` and `Measurement.end`.  It requires the `sap/base/Log` and `sap/ui/performance/Measurement` modules. The measurement ID is \"myId\", with associated information 'Measurement of myId'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/performance-measurement-using-sap-ui-performance-measurement-module-78880c0.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// \"Log\" required from module \"sap/base/Log\"\n// \"Measurement\" required from module \"sap/ui/performance/Measurement\"\nMeasurement.setActive(true);\nMeasurement.start(\"myId\",\"Measurement of myId\");\nLog.info(\"foo\");\nMeasurement.end(\"myId\");\n```\n\n----------------------------------------\n\nTITLE: Table with Auto-$expand/$select Example in XML\nDESCRIPTION: This XML snippet shows a table using OData V4 with auto-$expand/$select enabled. The `items` aggregation is bound to `/SalesOrderList`, and the table displays data from properties like `BuyerName`, `SO_2_BP/CompanyName`, and `Note`. The binding automatically determines the necessary `$expand` and `$select` parameters to retrieve the required data efficiently. It retrieves the company name of the business partner using a navigation property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/automatic-determination-of-expand-and-select-10ca58b.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Table items=\"{/SalesOrderList}\"\n  ...\n  <items>\n    <ColumnListItem>\n      <cells> <Text text=\"{BuyerName}\"/> </cells>\n      <cells> <Text text=\"{SO_2_BP/CompanyName}\"/> </cells>\n      <cells> <Input enabled=\"{= %{LifecycleStatus} === 'N' }\" value=\"{Note}\"/> </cells>\n    </ColumnListItem>\n  </items>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Adding i18n Texts (INI)\nDESCRIPTION: This snippet shows how to add the missing texts to the `i18n.properties` and `i18n_de.properties` files. These texts are used in the newly added UI elements. The `panel3HeaderText`, `productListTitle`, and `stockValue` properties are defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-12-aggregation-binding-using-templates-97830de.md#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n... \n# Screen titles\npanel1HeaderText=Data Binding Basics\npanel2HeaderText=Address Details\npanel3HeaderText=Aggregation Binding\n\n...\n\n# Product list\nproductListTitle=Product List\nstockValue=Current Stock Value\n```\n\nLANGUAGE: ini\nCODE:\n```\n...\n# Screen titles\npanel1HeaderText=Data Binding Grundlagen\npanel2HeaderText=Adressdetails\npanel3HeaderText=Aggregation Binding\n\n...\n\n# Product list\nproductListTitle=Artikelliste\nstockValue=Lagerbestand Wert\n```\n\n----------------------------------------\n\nTITLE: Binding Items with Key Property in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to bind items to a control in OpenUI5 using a key property for extended change detection. The `bindItems` method is called with a path to the data and a key property name (`id`) to identify unique list items.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/extended-change-detection-7cdff73.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\noControl.bindItems({\n  path: \"/listData\",\n  key: \"id\"\n});\n```\n\n----------------------------------------\n\nTITLE: Operation Parameters Binding in XML View (Option 1)\nDESCRIPTION: This XML snippet demonstrates how to bind operation parameters to input fields within a dialog using the `$Parameter` path prefix.  Each input field explicitly references the parameter using `{$Parameter/ParameterName}`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<Dialog binding=\"{/ChangeTeamBudgetByID(...)}\" id=\"operation1\" title =\"Change Team Budget\">\n    <buttons>\n        ...         \n    </buttons>\n    <form:SimpleForm>\n        <Label text=\"TeamID\" />\n        <Input value=\"{$Parameter/TeamID}\" />\n        <Label text=\"Budget\" />\n        <Input value=\"{$Parameter/Budget}\" />\n    </form:SimpleForm>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Initializing DateFormat instances\nDESCRIPTION: Demonstrates how to instantiate DateFormat objects using the static getter methods getDateInstance, getDateTimeInstance, getDateTimeWithTimezoneInstance and getTimeInstance. These methods are the preferred way to create DateFormat instances.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/date-format-91f2eba.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar oDateFormat = sap.ui.core.format.DateFormat.getDateInstance();\n// or\nvar oDateTimeFormat = sap.ui.core.format.DateFormat.getDateTimeInstance();\n// or\nvar oDateTimeWithTimezoneFormat = sap.ui.core.format.DateFormat.getDateTimeWithTimezoneInstance();\n// or\nvar oTimeFormat = sap.ui.core.format.DateFormat.getTimeInstance();\n```\n\n----------------------------------------\n\nTITLE: Loading a JS Fragment from a Controller in OpenUI5\nDESCRIPTION: This code demonstrates how to load a JavaScript fragment from a controller using the `loadFragment` method. It specifies the fragment's name as \"module:my/useful/UiPartX\". The `await` keyword is used to asynchronously load the fragment.  The loaded fragment is then assigned to the variable `oMyButton`, making it usable within the controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/programmatically-instantiating-js-fragments-3cff5d0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst oMyButton = await this.loadFragment({\n\tname: \"module:my/useful/UiPartX\"\n});\n// oMyButton is now usable\n```\n\n----------------------------------------\n\nTITLE: Binding with GroupId Parameter in OData JavaScript\nDESCRIPTION: This snippet demonstrates how to pass a `groupId` parameter to a binding in OData using JavaScript.  The `groupId` specifies the batch group to use for OData requests created by this binding. OData requests with the same `groupId` are bundled into the same $batch request.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n{path:\"/myEntities\", parameters: {groupId: \"myId\"}}\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.getUriParameters with URLSearchParams/URL in JavaScript\nDESCRIPTION: This snippet demonstrates how to replace jQuery.sap.getUriParameters with the standard URLSearchParams and URL web APIs. It showcases how to retrieve URL parameters and highlights caveats related to URL validation and decoding differences.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar oUrlParams = new URLSearchParams(window.location.search);\noUrlParams.get(\"my-param\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar oUrlParams = new URL(sUrl).searchParams;\noUrlParams.get(\"my-param\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Formatter Function in JavaScript\nDESCRIPTION: This code snippet defines a simple formatter function that capitalizes the first letter of a given string (name). It's encapsulated within an AMD module using `sap.ui.define`. This function is intended to be used in OpenUI5 XML views via data binding to format text values.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/formatting-parsing-and-validating-data-07e4b92.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([], function() {\n    return {\n        upperFirstLetter: function(sName) {\n            return sName.charAt(0).toUpperCase() + sName.slice(1);\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: OData V4 Metadata - EntityType Definition\nDESCRIPTION: This example demonstrates an extract from an OData V4 `$metadata` document, showing the recommended way to define date and time properties within an `EntityType`. Properties like `Date`, `DateTimeOffset`, and `TimeOfDay` are defined using the corresponding `Edm` types: `Edm.Date`, `Edm.DateTimeOffset`, and `Edm.TimeOfDay`. This ensures proper type handling by the OpenUI5 framework.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<EntityType Name=\"MyEntityType\">\n    ...\n    <Property Name=\"Date\" Type=\"Edm.Date\" />\n    <Property Name=\"DateTimeOffset\" Type=\"Edm.DateTimeOffset\" />\n    <Property Name=\"TimeOfDay\" Type=\"Edm.TimeOfDay\" />\n    ...\n</EntityType>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Aggregation in OpenUI5 (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define a default aggregation for an OpenUI5 control.  By setting the `defaultAggregation` property to the name of the aggregation, XML views can omit the aggregation tag. In this case, the 'content' aggregation is set as default.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-the-control-metadata-7b52540.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\naggregations: {\n   \"content\": {singularName: \"content\"} // default type is \"sap.ui.core.Control\", multiple is \"true\"\n\n},\ndefaultAggregation: \"content\"\n```\n\n----------------------------------------\n\nTITLE: XML View with Expression Binding\nDESCRIPTION: Demonstrates how to achieve the same functionality as the previous example, but by using expression binding directly within the XML view.  The controller logic is not required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View controllerName=\"sample.app\" xmlns=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\">\n    ...\n    <Icon src=\"sap-icon://message-warning\" visible=\"{= %{status} === 'critical'}\">\n    ...\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Parsing formatted numbers using NumberFormat in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to parse a formatted number string into a number object using `sap.ui.core.format.NumberFormat`. It handles locale-dependent grouping separators, a locale-dependent decimal separator, and percentage signs. It requires the `NumberFormat` module from `sap/ui/core/format/NumberFormat`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/number-format-91f2f28.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// \"NumberFormat\" required from module \"sap/ui/core/format/NumberFormat\"\nvar oFloatFormat = NumberFormat.getFloatInstance();\n\noFloatFormat.parse(\"1,234.567\"); // returns 1234.567\noFloatFormat.parse(\"12.34%\"); // returns 0.1234\n```\n\n----------------------------------------\n\nTITLE: Binding Property with bindProperty\nDESCRIPTION: This JavaScript snippet demonstrates how to bind a property using the `bindProperty` method. The `value` property of the `oInput` control is bound to the `/company/name` path.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\noInput.bindProperty(\"value\", \"/company/name\");\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Model in manifest.json\nDESCRIPTION: This snippet demonstrates how to configure a JSON model in the `manifest.json` file. The model is configured with a type of `sap.ui.model.json.JSONModel` and a URI pointing to the `data.json` file. This configuration makes the data available to the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-creating-a-model-5278bfd.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n...\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"minUI5Version\": \"1.120.0\",\n\t\t\t\t\"libs\": {\n\t\t\t\t\t\"sap.m\": {},\n\t\t\t\t\t\"sap.ui.core\": {},\n\t\t\t\t\t\"sap.ui.layout\": {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"models\": {\n\t\t\t\t\"\": {\n\t\t\t\t\t\"type\": \"sap.ui.model.json.JSONModel\",\n\t\t\t\t\t\"uri\": \"./model/data.json\"\n\t\t\t\t}\n\t\t\t},\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OData Model with URL Parameters - JavaScript\nDESCRIPTION: This code snippet shows how to initialize an OData V2 Model with additional URL parameters. Parameters can be specified for metadata requests (metadataUrlParams) and data requests (serviceUrlParams) using a map within the model's mParameters.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"ODataModel\" required from module \"sap/ui/model/odata/v2/ODataModel\"\nvar oModel = new ODataModel({ \n    serviceUrl: \"http://services.odata.org/Northwind/Northwind.svc\",    \n    serviceUrlParams: {\n        myParam: \"value1\",\n        myParam2: \"value2\"\n    },\n    metadataUrlParams: {\n        myParam: \"value1\",\n        myParam2: \"value2\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Inline Creation Rows in Table Control (XML)\nDESCRIPTION: This XML snippet declares a sap.ui.table.Table control in an XML view. The `rows` aggregation is bound to the 'ToLineItems' path, and a 'createActivate' event is attached to the '.onCreateActivateLineItem' controller method. This setup enables inline creation rows within the table.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<Table id=\"ToLineItems\" rows=\"{\n    events : {createActivate : '.onCreateActivateLineItem'}\n    path : 'ToLineItems'\n}\">\n```\n\n----------------------------------------\n\nTITLE: Data Binding in XML View - OpenUI5\nDESCRIPTION: This XML view demonstrates data binding in OpenUI5. It includes examples of binding labels to employee data, using formatters for gender and birthday, and displaying statistical amounts with specified formatting options. Dependencies include 'sap.ui.core', 'sap.ui.core.mvc', 'sap.m', 'my/globalFormatter', and 'sap/ui/model/type/Float'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/examples-for-data-binding-in-different-view-types-25ab54b.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<mvc:View \n    controllerName=\"testdata.complexsyntax\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{\n        globalFormatter: 'my/globalFormatter',\n        Float: 'sap/ui/model/type/Float'\n    }\">\n    <Label text=\"Hello Mr. {/employees/0/lastName}, {path: '/employees/0/firstName', formatter: '.myFormatter'}\"/>\n    <Table items=\"{/employees}\">\n        <columns>\n            <Column>\n                <Label text=\"Name\"/>\n            </Column>\n            <Column>\n                <Label text=\"Birthday\"/>\n            </Column>\n        </columns>\n        <items>\n            <ColumnListItem>\n                <cells>\n                    <Text text=\"{path: 'gender', formatter: '.myGenderFormatter'} {firstName}, {lastName}\"/>\n                    <Text text=\"{parts: [{path: 'birthday/day'}, {path: 'birthday/month'}, {path: 'birthday/year'}], formatter: 'globalFormatter'}\"/>\n                </cells>\n            </ColumnListItem>\n        </items>\n    </Table>\n    <Label text=\"{path: '/statistics/amount', type: 'Float', formatOptions: {minFractionDigits: 1}}\"/>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Sort Button Press Handler - JavaScript\nDESCRIPTION: This snippet defines the onSortButtonPressed function, which is triggered when the sort button is pressed.  It sets the 'showDialog' query parameter to 1 in the router arguments and then navigates to the 'employeeOverview' route, which effectively opens the dialog.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-make-dialogs-bookmarkable-5cc3147.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nonSortButtonPressed: function (oEvent) {\n\t\t\tvar oRouter = this.getRouter();\n\t\t\tthis._oRouterArgs[\"?query\"].showDialog = 1;\n\t\t\toRouter.navTo(\"employeeOverview\", this._oRouterArgs);\n\n\t\t},\n```\n\n----------------------------------------\n\nTITLE: Unit Test for Formatter Function (QUnit)\nDESCRIPTION: This code defines a QUnit module and test for the formatter function. It loads the formatter and a ResourceModel. The test simulates a controller context and calls the formatter with different status codes, asserting the translated texts are correct. The purpose is to isolate and verify the formatter logic.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-27-unit-test-with-qunit-e1ce1de.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"ui5/walkthrough/model/formatter\",\n\t\"sap/ui/model/resource/ResourceModel\",\n], (formatter, ResourceModel) => {\n\t\"use strict\";\n\n\tQUnit.module(\"Formatting functions\", {});\n\n\tQUnit.test(\"Should return the translated texts\", (assert) => {\n        const oResourceModel = new ResourceModel({\n            bundleUrl: sap.ui.require.toUrl(\"ui5/walkthrough/i18n/i18n.properties\"),\n            supportedLocales: [\n                \"\"\n            ],\n            fallbackLocale: \"\"\n        });\n\n        const oControllerMock = {\n            getOwnerComponent() {\n                return {\n                    getModel() {\n                        return oResourceModel;\n                    }\n                };\n            }\n        };\n\n        const fnIsolatedFormatter = formatter.statusText.bind(oControllerMock);\n\n        // Assert\n        assert.strictEqual(fnIsolatedFormatter(\"A\"), \"New\", \"The long text for Status A is correct\");\n        assert.strictEqual(fnIsolatedFormatter(\"B\"), \"In Progress\", \"The long text for Status B is correct\");\n        assert.strictEqual(fnIsolatedFormatter(\"C\"), \"Done\", \"The long text for Status C is correct\");\n        assert.strictEqual(fnIsolatedFormatter(\"Foo\"), \"Foo\", \"The long text for Status Foo is correct\");\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Formatter Function in JavaScript\nDESCRIPTION: This JavaScript code shows how to add a formatter function to a binding using the `formatter` key. It converts a title to uppercase. The `oTextField`'s value property is bound to `/company/title`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\noTextField.bindProperty(\"value\", {\n    path: \"/company/title\",\n    formatter: (sValue) => sValue?.toUpperCase()\n});\n```\n\n----------------------------------------\n\nTITLE: Loading XML Fragment - Promise\nDESCRIPTION: Loads an XML fragment programmatically using `this.loadFragment()` within an OpenUI5 controller. The `loadFragment` function returns a Promise, allowing asynchronous handling of the fragment loading process. The loaded fragment (in this case, `oMyButton`) can then be manipulated or added to the view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/programmatically-instantiating-xml-fragments-d6af195.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\nthis.loadFragment({\n    name: \"my.useful.VerySimpleUiPart\"\n}).then(function(oMyButton) {\n    // ...\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Model Terminologies in manifest.json\nDESCRIPTION: This JSON snippet demonstrates how to configure terminologies for a ResourceModel within the `manifest.json` file of an OpenUI5 application. It includes settings for bundle URLs, supported locales, fallback locale, terminologies (sports, travel, services), and enhancements with additional resource bundles.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/terminologies-eba8d25.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"bundleUrl\": \"i18n/i18n.properties\",\n    \"bundleUrlRelativeTo\": \"manifest\",\n    \"supportedLocales\": [\"en\", \"de\"],\n    \"fallbackLocale\": \"en\",\n    \"terminologies\": {\n        \"sports\": {\n            \"bundleUrl\": \"i18n/terminologies/sports/i18n.terminologies.sports.properties\",\n            \"bundleUrlRelativeTo\": \"manifest\",\n            \"supportedLocales\": [\"en\", \"de\"]\n        },\n        \"travel\": {\n            \"bundleUrl\": \"i18n/terminologies/travel/i18n.terminologies.travel.properties\",\n            \"bundleUrlRelativeTo\": \"manifest\",\n            \"supportedLocales\": [\"en\", \"de\"]\n        },\n        \"services\": {\n            \"bundleUrl\": \"i18n/terminologies/services/i18n.terminologies.services.properties\",\n            \"bundleUrlRelativeTo\": \"manifest\",\n            \"supportedLocales\": [\"en\", \"de\"]\n        }\n    },\n    \"enhanceWith\": [\n        {\n            \"bundleUrl\": \"reuse/appvar1/i18n/i18n.properties\",\n            \"bundleUrlRelativeTo\": \"manifest\",\n            \"supportedLocales\": [\"en\", \"de\"],\n            \"fallbackLocale\": \"en\",\n            \"terminologies\": {\n                \"sports\": {\n                    \"bundleUrl\": \"reuse/appvar1/i18n/i1n.terminologies.soccer.properties\",\n                    \"bundleUrlRelativeTo\": \"manifest\",\n                    \"supportedLocales\": [\"en\", \"de\"]\n                },\n                \"travel\": {\n                    \"bundleUrl\": \"reuse/appvar1/i18n/i18n.terminologies.vehicles.properties\",\n                    \"bundleUrlRelativeTo\": \"manifest\",\n                    \"supportedLocales\": [\"en\", \"de\"]\n                }\n            }\n        },\n        {\n            \"bundleUrl\": \"reuse/appvar2/i18n/i18n.properties\",\n            \"bundleUrlRelativeTo\": \"manifest\",\n            \"supportedLocales\": [\"en\", \"de\"],\n            \"fallbackLocale\": \"en\",\n            \"terminologies\": {\n                \"travel\": {\n                    \"bundleUrl\": \"reuse/appvar2/i18n/i18n.terminologies.bicycles.properties\",\n                    \"bundleUrlRelativeTo\": \"manifest\",\n                    \"supportedLocales\": [\"en\", \"de\"]\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Router Using getRouter - OpenUI5 (JavaScript)\nDESCRIPTION: This snippet demonstrates how to access the router using the `getRouter` function of your UI component instance. This method is a direct way to retrieve the router if you have access to the component instance itself. No parameters are required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initializing-and-accessing-a-routing-instance-acdb6cd.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oRouter = this.getRouter();\n```\n\n----------------------------------------\n\nTITLE: Annotation File Configuration in Manifest - JSON\nDESCRIPTION: This JSON snippet shows how to configure a data source with an annotation file using a `ui5://` URL within the `manifest.json` file. This allows referencing annotation files using a logical prefix, which is resolved during component startup to a specific URL using the configured UI5 loader paths.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-descriptor-for-applications-components-and-libraries-be0cf40.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"sap.app\": {\n         \"dataSources\": {\n             \"OData\": {\n                \"uri\": \"/path/to/odata/service\",\n                \"type\": \"OData\",\n                \"settings\": {\n                    \"odataVersion\": \"2.0\",\n                    \"annotations\": [\"annotations\"]\n                    ...\n                }\n            },\n            ...\n            \"annotations\": {\n                \"uri\": \"ui5://my/url/prefix/annotations.xml\",\n                \"type\": \"ODataAnnotation\"\n            }\n            ...\n         }\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Text to Resource Bundle in XML View\nDESCRIPTION: This code snippet shows how to bind a text to a resource bundle in an XML view using resourceBundleName, resourceBundleAlias, and the text binding syntax. The resourceBundleName specifies the name of the resource bundle, resourceBundleAlias assigns an alias to the bundle, and the text binding syntax {i18n>MY_TEXT} binds the text of the button to the MY_TEXT property in the resource bundle.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-model-91f122a.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View resourceBundleName=\"myBundle\"\n    resourceBundleAlias=\"i18n\" \n    controllerName=\"sap.hcm.Address\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <Panel>\n        <Button text=\"{i18n>MY_TEXT}\"/>\n    </Panel>\n<mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Creating mock data - JavaScript\nDESCRIPTION: Defines the mock data for the invoices in a JSON format. It is a flat array of invoice items, each containing properties like ProductName, Quantity, ExtendedPrice, ShipperName, ShippedDate, and Status. This data is used by the mock server to simulate the back-end service.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-26-mock-server-configuration-bae9d90.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n\t\"ProductName\": \"Pineapple\",\n\t\"Quantity\": 21,\n\t\"ExtendedPrice\": 87.2,\n\t\"ShipperName\": \"Fun Inc.\",\n\t\"ShippedDate\": \"2015-04-01T00:00:00\",\n\t\"Status\": \"A\"\n  },\n  {\n\t\"ProductName\": \"Milk\",\n\t\"Quantity\": 4,\n\t\"ExtendedPrice\": 10,\n\t\"ShipperName\": \"ACME\",\n\t\"ShippedDate\": \"2015-02-18T00:00:00\",\n\t\"Status\": \"B\"\n  },\n  {\n\t\"ProductName\": \"Canned Beans\",\n\t\"Quantity\": 3,\n\t\"ExtendedPrice\": 6.85,\n\t\"ShipperName\": \"ACME\",\n\t\"ShippedDate\": \"2015-03-02T00:00:00\",\n\t\"Status\": \"B\"\n  },\n  {\n\t\"ProductName\": \"Salad\",\n\t\"Quantity\": 2,\n\t\"ExtendedPrice\": 8.8,\n\t\"ShipperName\": \"ACME\",\n\t\"ShippedDate\": \"2015-04-12T00:00:00\",\n\t\"Status\": \"C\"\n  },\n  {\n\t\"ProductName\": \"Bread\",\n\t\"Quantity\": 1,\n\t\"ExtendedPrice\": 2.71,\n\t\"ShipperName\": \"Fun Inc.\",\n\t\"ShippedDate\": \"2015-01-27T00:00:00\",\n\t\"Status\": \"A\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Extending Home Controller from Base Controller (OpenUI5 JavaScript)\nDESCRIPTION: This JavaScript snippet modifies the `Home` controller to extend from the `BaseController` for consistency. This facilitates the use of shared functionalities provided by the `BaseController` if required in the future. The dependency changes from `sap/ui/core/mvc/Controller` to `sap/ui/demo/nav/controller/BaseController`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-add-a-back-button-to-not-found-page-66670b0.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.Home\", {\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Inline XML Fragment Definition and Instantiation in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to define an XML fragment as a string and then instantiate it using sap.ui.core.Fragment.load. The 'definition' property is used to provide the XML content, and the resulting fragment is then placed into the document. Dependencies: sap/ui/core/Fragment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/inline-definition-and-instantiation-of-fragments-b807931.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Panel xmlns=\"sap.m\" text=\"Hello World\"><Button text=\"Hello World\"></Button></Panel>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// define the XML fragment as a string (or load it from anywhere)\nvar myXml = '<Panel xmlns=\"sap.m\" text=\"Hello World\"><Button text=\"Hello World\"></Button></Panel>';\n\n// use this XML string as \"fragmentContent\"\nsap.ui.require([\"sap/ui/core/Fragment\"], function(Fragment){\n    Fragment.load({\n        type: \"XML\",\n        definition: myXml\n    }).then(function(oFragment){\n        // put the Fragment content into the document\n        oFragment.placeAt('content');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Stubbing jQuery AJAX Request - JavaScript\nDESCRIPTION: This snippet demonstrates how to stub a jQuery AJAX call using Sinon.JS. It uses sinon.stub() to replace the jQuery.ajax function with a stub that yields a predefined dataset when the 'success' callback is invoked. The code then calls jQuery.ajax, verifies that the 'success' function received the expected data, and restores the original jQuery.ajax function using jQuery.ajax.restore().\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sinon-js-spies-stubs-mocks-faked-timers-and-xhr-457eaad.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/*global QUnit sinon */\nsap.ui.define([], function() {\n \t\"use strict\";\n \n \tQUnit.test(\"Stub\", 1, function(assert) {\n \t\tsinon.stub(jQuery, \"ajax\").yieldsTo(\"success\", [1, 2, 3]);\n \n \t\tjQuery.ajax({\n \t\t\tsuccess: function (data) {\n \t\t\t\tassert.deepEqual(data, [1, 2, 3], \"Right data set\"); \n \t\t\t}\n \t\t});\n \t\tjQuery.ajax.restore();\n \t});\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Model in Controller's onInit Function (JavaScript)\nDESCRIPTION: This snippet demonstrates how to access a model within the `onInit` function of an OpenUI5 controller. It uses `this.getOwnerComponent().getModel(\"myModel\")` to retrieve the model, as the view's `getModel()` method may not be available at that time.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/assigning-the-model-to-the-ui-91f0d1c.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// in your controller\n...\nonInit: function() {\n   ...\n   var oModel = this.getOwnerComponent().getModel(\"myModel\");\n   ...\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Update router arguments and navigate\nDESCRIPTION: This code snippet shows how to update the router arguments with the sorting parameters from the `ViewSettingsDialog` and navigate to the same route with the updated arguments.  This persists the sorting state in the URL. The `oRouterArgs` variable stores the arguments for routing.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-13-make-table-sorting-bookmarkable-3975987.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n\t\t_initViewSettingsDialog: function () {\n\t\t\tvar oRouter = this.getRouter();\n\t\t\tthis._oVSD = new ViewSettingsDialog(\"vsd\", {\n\t\t\t\tconfirm: function (oEvent) {\n\t\t\t\t\tvar oSortItem = oEvent.getParameter(\"sortItem\");\n\t\t\t\t\tthis._oRouterArgs[\"?query\"].sortField = oSortItem.getKey();\n\t\t\t\t\tthis._oRouterArgs[\"?query\"].sortDescending = oEvent.getParameter(\"sortDescending\");\n\t\t\t\t\toRouter.navTo(\"employeeOverview\", this._oRouterArgs, true /*without history*/);\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t\t...\n\t\t},\n```\n\n----------------------------------------\n\nTITLE: Configure Resource Model in manifest.json (JSON)\nDESCRIPTION: This snippet configures a resource model named \"i18n\" in the application's manifest. The model is of type `sap.ui.model.resource.ResourceModel` and uses the `i18n.properties` file located at `ui5.databinding.i18n.i18n`. Supported locales and the fallback locale are also configured to handle different languages.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-resource-models-9790d9a.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n...\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"minUI5Version\": \"1.120.0\",\n\t\t\t\t\"libs\": {\n\t\t\t\t\t\"sap.m\": {},\n\t\t\t\t\t\"sap.ui.core\": {},\n\t\t\t\t\t\"sap.ui.layout\": {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"models\": {\n\t\t\t\t\"\": {\n\t\t\t\t\t\"type\": \"sap.ui.model.json.JSONModel\",\n\t\t\t\t\t\"uri\": \"./model/data.json\"\n\t\t\t\t},\n\t\t\t\t\"i18n\": {\n\t\t\t\t\t\"type\": \"sap.ui.model.resource.ResourceModel\",\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"bundleName\": \"ui5.databinding.i18n.i18n\",\n\t\t\t\t\t\t\"supportedLocales\": [\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\"de\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"fallbackLocale\": \"\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n...\n\n```\n\n----------------------------------------\n\nTITLE: Defining a UI5 Module with sap.ui.define\nDESCRIPTION: This snippet demonstrates how to define a UI5 module using `sap.ui.define`. It encapsulates the application logic (displaying an alert) within the module. This prevents direct executable code in the HTML file, improving security. The module is defined without dependencies and will be called from `index.html` upon UI5 initialization.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-bootstrap-fe12df2.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([], () => {\n\t\"use strict\";\n\talert(\"UI5 is ready\");\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Invoice List - JavaScript (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to implement filtering for an invoice list based on a search query. It defines an event handler `onFilterInvoices` that retrieves the search query from the event, creates a filter based on the 'ProductName' field, and applies this filter to the 'items' binding of the invoice list. The filter operator `Contains` is used for case-insensitive searching.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-23-filtering-typescript-7f02e9d.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport { SearchField$SearchEvent } from \"sap/m/SearchField\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport ListBinding from \"sap/ui/model/ListBinding\";\n\n\n/**\n * @namespace ui5.walkthrough.controller\n */\nexport default class App extends Controller {\n    onInit(): void {\n        const viewModel = new JSONModel({\n            currency: \"EUR\"\n        });\n        this.getView()?.setModel(viewModel, \"view\");        \n    }\n\n    onFilterInvoices(event: SearchField$SearchEvent): void {\n        // build filter array\n        const filter = [];\n        const query = event.getParameter(\"query\");\n        if (query) {\n            filter.push(new Filter(\"ProductName\", FilterOperator.Contains, query));\n        }\n        // filter binding\n        const list = this.byId(\"invoiceList\");\n        const binding = list?.getBinding(\"items\") as ListBinding;\n        binding?.filter(filter);\n    }\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SAPUI5 module with explicit jQuery dependency (recommended)\nDESCRIPTION: This code snippet demonstrates the recommended way to define a SAPUI5 module with an explicit jQuery dependency. It imports `sap/ui/thirdparty/jquery` and `sap/ui/dom/jquery/Focusable` as dependencies and declares `jQuery` as a parameter in the callback function, ensuring that jQuery is explicitly available within the module. This ensures proper modularization and avoids reliance on global variables.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\"sap/ui/thirdparty/jquery\", \"sap/ui/dom/jquery/Focusable\"], function(jQuery) {\n  var oDomRef = jQuery(\"#myElement\").firstFocusableDomRef();\n});\n```\n\n----------------------------------------\n\nTITLE: Expression Binding in JavaScript\nDESCRIPTION: Demonstrates how to use expression binding within JavaScript code in OpenUI5. Includes examples of creating UI elements with expression bindings for properties like visibility and color.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Example 1\nnew Text({\"visible\": \"{=%{status} === 'critical' && %{amount} > 10000 }\"});\n\n// Example 2\nnew Icon({color: \"'{=encodeURIComponent(%{/ID}) }'\"});\n```\n\n----------------------------------------\n\nTITLE: Initializing Input Controls with Field Group IDs in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize two `sap.m.Input` controls and assign them the same field group IDs using JavaScript. The `fieldGroupIds` property is set as an array of strings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/field-groups-5b07753.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar myInput1 = new sap.m.Input({fieldGroupIds:[\"MyGroup\",\"MyGroup2\"]}),\n\nmyInput2 = new sap.m.Input({fieldGroupIds:[\"MyGroup\",\"MyGroup2\"]);\n```\n\n----------------------------------------\n\nTITLE: Defining UI elements with data binding in XML - OpenUI5\nDESCRIPTION: This XML snippet defines the structure and data binding for the main view of the application. It includes a table to display people data, a search field, buttons for adding, refreshing, and sorting users, and input fields for editing user data with live change event handling. The table uses OData V4 binding with batch updates.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-create-and-edit-b4f1266.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"sap.ui.core.tutorial.odatav4.controller.App\"\n    displayBlock=\"true\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <Shell>\n        <App busy=\"{appView>/busy}\" class=\"sapUiSizeCompact\">\n            <pages>\n                <Page title=\"{i18n>peoplePageTitle}\">\n                    <content>\n                        <Table\n                            id=\"peopleList\"\n                            growing=\"true\"\n                            growingThreshold=\"10\"\n                            items=\"{\n                                path: '/People',\n                                parameters: {\n                                $count: true,\n                                    $$updateGroupId : 'peopleGroup'\n                                }\n                            }\">\n                            <headerToolbar>\n                                <OverflowToolbar>\n                                    <content>\n                                        <ToolbarSpacer/>\n                                        <SearchField\n                                            id=\"searchField\"\n                                            width=\"20%\"\n                                            placeholder=\"{i18n>searchFieldPlaceholder}\"\n                                            enabled=\"{= !${appView>/hasUIChanges}}\"\n                                            search=\".onSearch\"/>\n                                        <Button\n                                            id=\"addUserButton\"\n                                            icon=\"sap-icon://add\"\n                                            tooltip=\"{i18n>createButtonText}\"\n                                            press=\".onCreate\">\n                                            <layoutData>\n                                                <OverflowToolbarLayoutData priority=\"NeverOverflow\"/>\n                                            </layoutData>\n                                        </Button>\n\n                                        <Button\n                                            id=\"refreshUsersButton\"\n                                            icon=\"sap-icon://refresh\"\n                                            enabled=\"{= !${appView>/hasUIChanges}}\"\n                                            tooltip=\"{i18n>refreshButtonText}\"\n                                            press=\".onRefresh\"/>\n                                        <Button\n                                            id=\"sortUsersButton\"\n                                            icon=\"sap-icon://sort\"\n                                            enabled=\"{= !${appView>/hasUIChanges}}\"\n                                            tooltip=\"{i18n>sortButtonText}\"\n                                            press=\".onSort\"/>\n                                    </content>\n                                </OverflowToolbar>\n                            </headerToolbar>\n                            <columns>\n                                <Column id=\"userNameColumn\">\n                                    <Text text=\"{i18n>userNameLabelText}\"/>\n                                </Column>\n                                <Column id=\"firstNameColumn\">\n                                    <Text text=\"{i18n>firstNameLabelText}\"/>\n                                </Column>\n                                <Column id=\"lastNameColumn\">\n                                    <Text text=\"{i18n>lastNameLabelText}\"/>\n                                </Column>\n                                <Column id=\"ageColumn\">\n                                    <Text text=\"{i18n>ageLabelText}\"/>\n                                </Column>\n                            </columns>\n                            <items>\n                                <ColumnListItem>\n                                    <cells>\n                                        <Input\n                                            value=\"{UserName}\"\n                                            valueLiveUpdate=\"true\"\n                                            liveChange=\".onInputChange\"/>\n\n                                    </cells>\n                                    <cells>\n                                        <Input\n                                            value=\"{FirstName}\"\n                                            liveChange=\".onInputChange\"/>\n                                    </cells>\n                                    <cells>\n                                        <Input\n                                            value=\"{LastName}\"\n                                            liveChange=\".onInputChange\"/>\n                                    </cells>\n                                    <cells>\n                                        <Input\n                                            value=\"{Age}\"\n                                            valueLiveUpdate=\"true\"\n                                            liveChange=\".onInputChange\"/>\n                                    </cells>\n                                </ColumnListItem>\n                            </items>\n                        </Table>\n                    </content>\n                    <footer>\n                        <Toolbar visible=\"{appView>/hasUIChanges}\">\n                            <ToolbarSpacer/>\n                            <Button\n                                id=\"saveButton\"\n                                type=\"Emphasized\"\n                                text=\"{i18n>saveButtonText}\"\n                                enabled=\"{= ${message>/}.length === 0 &amp;&amp; ${appView>/usernameEmpty} === false }\"\n                                press=\".onSave\"/>\n                            <Button\n                                id=\"doneButton\"\n                                text=\"{i18n>cancelButtonText}\"\n                                press=\".onResetChanges\"/>\n                        </Toolbar>\n                    </footer>\n\n                </Page>\n            </pages>\n        </App>\n    </Shell>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Extending NotFound Controller from Base Controller (OpenUI5 JavaScript)\nDESCRIPTION: This JavaScript code modifies the `NotFound` controller to inherit from the `BaseController` instead of `sap/ui/core/mvc/Controller`. This allows the `NotFound` controller to reuse the `onNavBack` function defined in the `BaseController`, reducing code duplication. The dependency is updated to 'sap/ui/demo/nav/controller/BaseController'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-add-a-back-button-to-not-found-page-66670b0.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.NotFound\", {\n\t\tonInit: function () {\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Library Dependencies in manifest.json (Applications/Components)\nDESCRIPTION: This snippet demonstrates how to declare library dependencies within the `manifest.json` file for applications and components. It shows how to specify mandatory libraries for asynchronous preload (e.g., `sap.m`) and optional libraries for offline packages, flagged as `lazy` (e.g., `sap.suite.ui.commons`). These dependencies are defined within the `sap.ui5/dependencies/libs` section. The `lazy` property indicates that the library will not be preloaded automatically.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-dependencies-to-libraries-and-components-8521ad1.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n \"sap.ui5\": {\n    ...\n    \"dependencies\": {\n      ...\n      \"libs\": {\n        \"sap.m\": {},\n        \"sap.suite.ui.commons\": {\n          \"lazy\": true\n        }\n      }\n      ...\n    },\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Composite Binding Property with Types - JS\nDESCRIPTION: This code snippet demonstrates how to create a composite binding using the bindValue method of an OpenUI5 control, specifying types for the individual binding parts. It binds the 'value' property of an Input control to the 'firstName' and 'lastName' properties. StringType is explicitly defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/composite-binding-a2fe8e7.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// \"StringType\" required from module \"sap/ui/model/type/String\"\n\noTxt.bindValue({\n    parts: [{path: \"/firstName\", type: StringType}, {path: \"/lastName\"}]\n}); \n```\n\n----------------------------------------\n\nTITLE: Initializing JSON Model in Controller - JavaScript\nDESCRIPTION: This snippet defines an `onInit` function within the controller to instantiate a JSON model. The model contains a `recipient` object with a `name` property. The model is then set on the view, making its data accessible in the view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-json-model-70ef981.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n   \"sap/ui/core/mvc/Controller\",\n   \"sap/m/MessageToast\",\n   \"sap/ui/model/json/JSONModel\"\n], (Controller, MessageToast, JSONModel) => {\n   \"use strict\";\n\n   return Controller.extend(\"ui5.walkthrough.controller.App\", {\n      onInit() {\n         // set data model on view\n         const oData = {\n            recipient : {\n               name : \"World\"\n            }\n         };\n         const oModel = new JSONModel(oData);\n         this.getView().setModel(oModel);\n      },\n\n      onShowHello() {\n         MessageToast.show(\"Hello World\");\n      }\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Targets and Parent Relationships in SAPUI5 Routing (JavaScript)\nDESCRIPTION: This JavaScript snippet configures SAPUI5 routing with multiple targets for the same route and parent-child relationships between targets. The 'employeeOverview' route navigates to both 'employeeOverviewTop' and 'employeeOverviewContent' targets. The 'employeeOverviewTop' and 'employeeOverviewContent' targets are configured as children of the 'employeeOverview' target.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/working-with-multiple-targets-2c5c84d.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"routing\": {\n  \"config\": {\n    path: \"sap.ui.demo.nav.view.employee.overview\",\n    [...]\n  },\n  \"routes\": [{\n    \"pattern\": \"employees/overview\",\n    \"name\": \"employeeOverview\",\n    \"target\": [\"employeeOverviewTop\", \"employeeOverviewContent\"]\n  }],\n  \"targets\": {\n    \"employeeOverview\": {\n      \"type\": \"View\",\n      \"name\": \"EmployeeOverview\",\n      \"level\": 2,\n      \"controlId\": \"app\",\n      \"controlAggregation\": \"content\"\n    },\n    \"employeeOverviewTop\": {\n      \"parent\": \"employeeOverview\",\n      \"type\": \"View\",\n      \"name\": \"EmployeeOverviewTop\",\n      \"controlId\": \"EmployeeOverviewParent\",\n      \"controlAggregation\": \"content\"\n    },\n    \"employeeOverviewContent\": {\n      \"parent\": \"employeeOverview\",\n      \"type\": \"View\",\n      \"name\": \"EmployeeOverviewContent\",\n      \"controlId\": \"EmployeeOverviewParent\",\n      \"controlAggregation\": \"content\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: DateTimePicker with OData V4 DateTimeOffset (XML View)\nDESCRIPTION: This XML snippet demonstrates the usage of sap.m.DateTimePicker with an OData V4 DateTimeOffset in an XML view. It shows how to bind directly to an OData V4 property.  Also shows how to specify the type and set the 'V4' constraint to true when binding with JSON models.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Model value is a string in the format \"yyyy-MM-dd'T'HH:mm:ss\" resp. \"yyyy-MM-dd'T'HH:mm:ss.SSS\" -->\n<!-- (the number of S depends on the type's precision), e.g. \"2015-01-06T07:25:21Z\" -->\n<DateTimePicker value=\"{/V4/DateTimeOffset}\"/>\n \n<!-- When binding an OData V4 Edm.DateTimeOffset, for example via a JSON model, you must specify a type -->\n<!-- and you have to set the constraint V4 to true. -->\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{DateTimeOffset: 'sap/ui/model/odata/type/DateTimeOffset'}\">\n    ...\n    <DateTimePicker value=\"{constraints: {V4: true}, path: 'json>/V4/DateTimeOffset', type: 'DateTimeOffset'}\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring NumberFormat with decimal and grouping separators\nDESCRIPTION: This JavaScript code configures `NumberFormat` with specific decimal and grouping separators for the US locale standard.  It initializes the formatter with a decimal separator as a dot (`.`), a grouping separator as a comma (`,`), and a grouping size of 3. The code requires `NumberFormat` from the module `sap/ui/core/format/NumberFormat`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/number-format-91f2f28.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// \"NumberFormat\" required from module \"sap/ui/core/format/NumberFormat\"\nvar oOptions = {\n  decimalSeparator : \".\",\n  groupingSeparator : \",\",\n  groupingSize : 3\n};\nvar oFloatFormat = NumberFormat.getFloatInstance(oOptions);\n```\n\n----------------------------------------\n\nTITLE: Binding Text Property in sap.m.Text Control\nDESCRIPTION: This snippet shows how to bind the `text` property of a `sap.m.Text` control to a model property named `customerName` within an XML view.  The curly braces `{}` denote the binding syntax.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/control-properties-and-associations-in-xml-views-5ee3be4.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Text text=\"{customerName}\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Expression Binding in XML View (InvoiceList.view.xml)\nDESCRIPTION: This XML snippet demonstrates how to define an expression binding within an OpenUI5 view to dynamically set the `numberState` of an `ObjectListItem` based on the `ExtendedPrice` from the `invoice` model.  It uses the ternary operator to set the `numberState` to 'Error' if the price is greater than 50, and 'Success' otherwise. The Currency type is used to format the number.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-21-expression-binding-typescript-8d67ba2.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <List\n        headerText=\"{i18n>invoiceListTitle}\"\n        class=\"sapUiResponsiveMargin\"\n        width=\"auto\"\n        items=\"{invoice>/Invoices}\">\n        <items>\n            <ObjectListItem\n                core:require=\"{\n                    Currency: 'sap/ui/model/type/Currency'\n                }\"\n                title=\"{invoice>Quantity} x {invoice>ProductName}\"\n                number=\"{\n                    parts: [\n                        'invoice>ExtendedPrice',\n                        'view>/currency'\n                    ],\n                    type: 'Currency',\n                    formatOptions: {\n                        showMeasure: false\n                    }\n                }\"\n                numberUnit=\"{view>/currency}\"\n                numberState=\"{= ${invoice>ExtendedPrice} > 50 ? 'Error' : 'Success' }\"/>\n        </items>\n    </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Resource Bundle Content Example - JavaScript\nDESCRIPTION: This example code snippet shows the content of a simple resource bundle with key-value pairs. The keys are language-independent and used by the application to identify and access the corresponding language-dependent texts. The example includes text for close, open, and cancel buttons.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-model-91f122a.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\nCLOSE_BUTTON_TEXT=Close\nOPEN_BUTTON_TEXT=Open\nCANCEL_BUTTON_TEXT=Cancel\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing in manifest.json (SAPUI5)\nDESCRIPTION: This code snippet demonstrates how to configure routing in the `manifest.json` file for a SAPUI5 application. It defines a new route for displaying a specific post based on its ID, including a target configuration that references a new view called `Post`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-adding-the-post-page-4a9f063.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"_version\": \"1.12.0\",\n\t…\n\t\"sap.ui5\": {\n\t…\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.bulletinboard.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"async\": true\n\t\t\t},\n\t\t\t\"routes\": [\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\t\"name\": \"worklist\",\n\t\t\t\t\t\"target\": \"worklist\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \"Post/{postId}\",\n\t\t\t\t\t\"name\": \"post\",\n\t\t\t\t\t\"target\": \"post\"\n\t\t\t\t}\n\n\t\t\t],\n\t\t\t\"targets\": {\n\t\t\t\t\"worklist\": {\n\t\t\t\t\t\"name\": \"Worklist\",\n\t\t\t\t\t\"id\": \"worklist\",\n\t\t\t\t\t\"level\": 1\n\t\t\t\t},\n\t\t\t\t\"post\": {\n\t\t\t\t\t\"name\": \"Post\",\n\t\t\t\t\t\"id\": \"post\",\n\t\t\t\t\t\"level\": 2\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling createActivate Event (JavaScript)\nDESCRIPTION: This JavaScript snippet shows the event handler for the `createActivate` event. It checks if the 'ProductID' property of the context is set. If not, it prevents the default action, keeping the entry inactive.  It then creates a new inactive entry at the end of the list using `ODataListBinding#create`, passing initial data and setting `bAtEnd` to `true` and `inactive` to `true`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nonCreateActivateLineItem : function (oEvent) {\n    // product id is a required property for the item => item remains inactive if it's not set\n    if (!oEvent.getParameter(\"context\").getProperty(\"ProductID\")) {\n      oEvent.preventDefault();\n      return;\n    }\n\n  var oItemsBinding = this.getView().byId(\"ToLineItems\").getBinding(\"rows\");\n  oItemsBinding.create({/* initial data*/}, /*bAtEnd*/ true, {inactive : true});\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Module with Static Dependencies in OpenUI5\nDESCRIPTION: This snippet illustrates how to define a module with static dependencies using `sap.ui.define`.  The 'sap/m/Input' module is declared as a dependency. The callback function is executed only after all statically defined dependencies are loaded. The Input parameter within the function body can be used to reference the loaded 'sap/m/Input' module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/modules-and-dependencies-91f23a7.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(['sap/m/Input'], function(Input) {\n \n        // callback is executed once all dependencies are loaded\n        ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring OData Model with Batch Group in manifest.json\nDESCRIPTION: This code snippet configures the OData model in the `manifest.json` file to use batch processing. The `groupId` property is set to `$auto` to enable automatic batch grouping of requests. This improves performance by bundling multiple requests into a single server request.  Dependencies: sap.ui.core.mvc.Controller\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-batch-groups-ef2af49.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n...\n\t\t\t\t\"\": {\n\t\t\t\t\"dataSource\": \"default\",\n\t\t\t\t\"settings\": {\n\t\t\t\t\t\"autoExpandSelect\": true,\n\t\t\t\t\t\"operationMode\": \"Server\",\n\t\t\t\t\t\"groupId\": \"$auto\"\n\t\t\t\t}\n...\n\n```\n\n----------------------------------------\n\nTITLE: Initializing JSON Model in Controller (TypeScript)\nDESCRIPTION: This TypeScript snippet initializes a JSON model with a 'recipient' object containing a 'name' property. The model is then set on the view to make it accessible for data binding in the XML view. It depends on the `sap/ui/model/json/JSONModel` module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-json-model-typescript-cfbbeab.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport MessageToast from \"sap/m/MessageToast\";\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\n\n/**\n * @name ui5.walkthrough.controller.App\n */\nexport default class AppController extends Controller {\n   onInit() : void {\n      // set data model on view\n        const data = {\n           recipient: {\n              name: \"World\"\n           }\n        };\n        const dataModel = new JSONModel(data);\n        this.getView()?.setModel(dataModel);\n    }\n\n    onShowHello(): void {\n       MessageToast.show(\"Hello World\");\n     }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Library Dependencies in library.js (Libraries)\nDESCRIPTION: This JavaScript snippet shows how to initialize library dependencies in the `library.js` file for OpenUI5 libraries using `sap.ui.define`. It uses `Library.init` to declare the core dependencies of the library (e.g., `sap.ui.core`, `sap.m`). Lazy-loaded libraries are intentionally excluded from this declaration and are loaded manually. This is essential for the proper initialization and functioning of the library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-dependencies-to-libraries-and-components-8521ad1.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(['sap/ui/core/Lib'], function(Library) {\n  Library.init({\n    ...\n    dependencies : [\"sap.ui.core\",\"sap.m\"] // lazy libs are not declared here\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Controller with MessageToast dependency in OpenUI5\nDESCRIPTION: This code defines an OpenUI5 controller (App.controller.js) using sap.ui.define. It declares dependencies on both the sap/ui/core/mvc/Controller and sap/m/MessageToast modules. The onShowHello function uses MessageToast to display a \"Hello World\" message.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-modules-f665d0d.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n   \"sap/ui/core/mvc/Controller\",\n   \"sap/m/MessageToast\"\n], (Controller, MessageToast) => {\n   \"use strict\";\n\n   return Controller.extend(\"ui5.walkthrough.controller.App\", {\n      onShowHello() {\n         MessageToast.show(\"Hello World\");\n      }\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Expression Binding for numberState in XML View (App.view.xml)\nDESCRIPTION: This snippet demonstrates how to use expression binding to dynamically set the `numberState` property of an `ObjectListItem` in an XML view. It compares the `UnitPrice` of a product with the `priceThreshold` from the model and sets the state to 'Error' or 'Success' based on the comparison. The expression `numberState` uses conditional logic within the data binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-expression-binding-5cff8d1.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n...\n\t<Panel headerText=\"{i18n>panel3HeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n\t\t<List headerText=\"{i18n>productListTitle}\" items=\"{products>/Products}\">\n\t\t\t<items>\n\t\t\t\t<ObjectListItem\n\t\t\t\t\tpress=\".onItemSelected\"\n\t\t\t\t\ttype=\"Active\"\n\t\t\t\t\ttitle=\"{products>ProductName}\"\n\t\t\t\t\tnumber=\"{\n\t\t\t\t\t\tparts: [\n\t\t\t\t\t\t\t{path: 'products>UnitPrice'},\n\t\t\t\t\t\t\t{path: '/currencyCode'}\n\t\t\t\t\t\t],\n\t\t\t\t\t\ttype: 'Currency',\n\t\t\t\t\t\tformatOptions: { showMeasure: false }\n\t\t\t\t\t}\"\n\t\t\t\t\tnumberUnit=\"{/currencyCode}\"\n\t\t\t\t\tnumberState=\"{= ${products>UnitPrice} > ${/priceThreshold} ? 'Error' : 'Success' }\">\n\t\t\t\t\t<attributes>\n\t\t\t\t\t\t<ObjectAttribute text=\"{products>QuantityPerUnit}\"/>\n\t\t\t\t\t\t<ObjectAttribute title=\"{i18n>stockValue}\"\n\t\t\t\t\t\t\ttext=\"{\n\t\t\t\t\t\t\t\tparts: [\n\t\t\t\t\t\t\t\t\t{path: 'products>UnitPrice'},\n\t\t\t\t\t\t\t\t\t{path: 'products>UnitsInStock'},\n\t\t\t\t\t\t\t\t\t{path: '/currencyCode'}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tformatter: '.formatStockValue'\n\t\t\t\t\t\t\t}\"/>\n\t\t\t\t\t</attributes>\n\t\t\t\t</ObjectListItem>\n\t\t\t</items>\n\t\t</List>\n\t</Panel>\n...\n```\n\n----------------------------------------\n\nTITLE: XML View with Formatter Function\nDESCRIPTION: Illustrates the traditional way of using a formatter function within an XML view in OpenUI5. The `visible` property of the Icon control is bound to the `status` property using a formatter function named `myFormatter`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View controllerName=\"sample.App\" xmlns=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\">\n    ...\n    <Icon src=\"sap-icon://message-warning\" visible=\"{path: 'status', formatter: '.myFormatter'}\">\n    ...\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Enable Asynchronous Loading in Bootstrap (HTML)\nDESCRIPTION: This snippet demonstrates how to enable asynchronous loading by adding the `data-sap-ui-async=\"true\"` attribute to the OpenUI5 bootstrap script tag in the `index.html` file. This allows modules and preload files to be loaded asynchronously, improving application startup time.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/use-asynchronous-loading-676b636.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script \n    id=\"sap-ui-bootstrap\"\n    src=\"/resources/sap-ui-core.js\"\n    data-sap-ui-compat-version=\"edge\"\n    data-sap-ui-async=\"true\"\n    data-sap-ui-on-init=\"module:my/app/main\"\n    data-sap-ui-resource-roots='{\"my.app\": \"./\"}'\n>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Mock Server - JavaScript\nDESCRIPTION: Initializes the mock server and requires the component support to embed the component in the HTML page. It defines a dependency on the mockserver.js file located in the localService folder.  The init method of the mock server is called before the component is loaded, allowing the mock server to intercept requests.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-26-mock-server-configuration-bae9d90.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"../localService/mockserver\"\n], (mockserver) => {\n\t\"use strict\";\n\n\t// initialize the mock server\n\tmockserver.init();\n\n\t// initialize the embedded component on the HTML page\n\tsap.ui.require([\"sap/ui/core/ComponentSupport\"]);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Changing OData Binding Parameters in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use the `changeParameters` method to modify the OData query options of an existing binding. It demonstrates adding a `$search` parameter and removing a `$filter` parameter by setting its value to `undefined`. Note that binding-specific parameters (starting with `$$`) cannot be changed using this method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/parameters-1ab4f62.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\noView.byId(\"SalesOrderTable\").getBinding(\"items\").changeParameters({\n    \"$search\" : '\"mountain bike\"',\n    \"$filter\" : undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying i18n Properties for Column Titles - INI\nDESCRIPTION: This .properties snippet shows the modification of the i18n.properties file to update column names. It includes descriptions of each key for use in translation.  It assigns descriptive titles to table columns such as Product, Supplier, Price, Units Ordered, and Units in Stock, improving the app's internationalization support.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-extending-the-worklist-table-84100bc.md#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n#XTIT: The title of the column containing Product name\nTableProductColumnTitle=Product\n\n#XTIT: The title of the column containing Supplier name\nTableSupplierColumnTitle=Supplier\n\n#XTIT: The title of the column containing Price\nTablePriceColumnTitle=Price\n\n#XTIT: The title of the column containing Ordered Units\nTableUnitsOrderedColumnTitle=Units Ordered\n\n#XTIT: The title of the column containing Units in Stock\nTableUnitsInStockColumnTitle=Units in Stock\n\n\n#XBLI: Text for a table with no data\ntableNoDataText=No products are currently available\n```\n\n----------------------------------------\n\nTITLE: Add Build Script to package.json (UI5, TypeScript)\nDESCRIPTION: This code snippet demonstrates how to add a `build` script to the `package.json` file. This script utilizes the `ui5 build` command to create a production-ready version of the OpenUI5 application. The `--all` flag builds all resources, and `--clean-dest` removes previous build artifacts.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-38-build-your-application-typescript-be33d01.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"ui5.walkthrough\",\n  \"version\": \"1.0.0\",\n  \"description\": \"UI5 TypeScript Walkthrough\",\n  \"scripts\": {\n      \"start\": \"ui5 serve -o test/mockServer.html\",\n      \"build\": \"ui5 build --all --clean-dest\"\n  },\n  \"devDependencies\": {\n    \"@types/openui5\": \"^1.120.0\",\n    \"@ui5/cli\": \"^3.7.1\",\n    \"@ui5/ts-interface-generator\": \"^0.8.1\",\n    \"typescript\": \"^5.2.2\",\n    \"ui5-middleware-livereload\": \"^3.0.2\",\n    \"ui5-middleware-serveframework\": \"3.0.0\",\n    \"ui5-middleware-simpleproxy\": \"^3.2.8\",\n    \"ui5-tooling-transpile\": \"^3.2.7\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Mock Mode URL Parameter - JavaScript\nDESCRIPTION: This snippet checks for the 'responderOn' URL parameter to enable or disable mock mode. It uses the URLSearchParams API to retrieve the parameter value and returns a boolean indicating whether mock mode should be enabled. This is typically placed in a central configuration file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-mock-data-with-the-odata-v2-mock-server-a428d41.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// module:model/Config\nsap.ui.define([], function() {\n    return {\n        isMock: (\"true\" === new URLSearchParams(window.location.search).get(\"responderOn\"));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Control via CSS\nDESCRIPTION: This CSS snippet defines styles for the custom product rating control using the `myAppDemoWTProductRating` class. It sets padding around the control and resets the vertical alignment of inner controls. This is needed to align all the controls used within the custom control's composition.  It is important to note that changes to the internal OpenUI5 controls can affect your custom control rendering.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nhtml[dir=\"ltr\"] .myAppDemoWT .myCustomButton.sapMBtn {\n    margin-right: 0.125rem\n}\nhtml[dir=\"rtl\"] .myAppDemoWT .myCustomButton.sapMBtn {\n    margin-left: 0.125rem\n}\n.myAppDemoWT .myCustomText {\n    display: inline-block;\n    font-weight: bold;\n}\n/*  ProductRating */\n.myAppDemoWTProductRating {\n    padding: 0.75rem;\n}\n.myAppDemoWTProductRating .sapMRI {\n    vertical-align: initial;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure routing with mandatory parameter in manifest.json (JavaScript)\nDESCRIPTION: Defines a new route 'employee' with a mandatory parameter 'employeeId'.  The pattern 'employees/{employeeId}' specifies that the route expects an employee ID in the URL.  The target for this route is set to 'employee'. Also configures the 'notFound' target for bypassed routes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-navigate-to-routes-with-mandatory-parameters-f96d252.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n\t\"_version\": \"1.12.0\",\n\t\"sap.app\": {\n\t\t...\n\t},\n\t\"sap.ui\": {\n\t\t...\n\t},\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.nav.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"transition\": \"slide\",\n\t\t\t\t\"bypassed\": {\n\t\t\t\t\t\"target\": \"notFound\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"routes\": [{\n\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\"name\": \"appHome\",\n\t\t\t\t\"target\": \"home\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees\",\n\t\t\t\t\"name\": \"employeeList\",\n\t\t\t\t\"target\": \"employees\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}\",\n\t\t\t\t\"name\": \"employee\",\n\t\t\t\t\"target\": \"employee\"\n\t\t\t}],\n\t\t\t\"targets\": {\n\t\t\t\t\"home\": {\n\t\t\t\t\t\"id\": \"home\",\n\t\t\t\t\t\"name\": \"Home\",\n\t\t\t\t\t\"level\" : 1\n\t\t\t\t},\n\t\t\t\t\"notFound\": {\n\t\t\t\t\t\"id\": \"notFound\",\n\t\t\t\t\t\"name\": \"NotFound\",\n\t\t\t\t\t\"transition\": \"show\"\n\t\t\t\t},\n\t\t\t\t\"employees\": {\n\t\t\t\t\t\"id\": \"employeeList\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee\",\n\t\t\t\t\t\"name\": \"EmployeeList\",\n\t\t\t\t\t\"level\" : 2\n\t\t\t\t},\n\t\t\t\t\"employee\": {\n\t\t\t\t\t\"id\": \"employee\",\n\t\t\t\t\t\"name\": \"employee.Employee\",\n\t\t\t\t\t\"level\" : 3\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Component Creation with Default Manifest Loading - JavaScript\nDESCRIPTION: This code snippet demonstrates creating an OpenUI5 component with the default manifest loading behavior.  The `manifest.json` file is loaded from the default location and evaluated before the component instance is created. This allows for preloading dependencies and improving performance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-descriptor-for-applications-components-and-libraries-be0cf40.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Component\" required from module \"sap/ui/core/Component\"\n// load manifest.json from default location and evaluate it before creating an instance of the component \nComponent.create({\n  name: \"sap.my.component\",\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Text Control to XML View\nDESCRIPTION: This XML snippet extends the basic view by adding a Text control from the sap.m library.  The text property of the Text control is set to \"Hello World\". It demonstrates how UI elements are declaratively defined within the XML view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-xml-views-typescript-6c66ed8.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Text text=\"Hello World\"/>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Metadata of an Action - JavaScript\nDESCRIPTION: This JavaScript code shows how to access the metadata of an OData action using `createBindingContext` and `requestObject`. It creates a context pointing to the action's metadata and then requests the type information.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar oContext = oModel.createBindingContext(\"/EMPLOYEES('1')/##com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsOccupied\");\nvar oMetaModel = oContext.getModel();\noMetaModel.requestObject(\"0/$ReturnType/$Type\", oContext).then(alert);\n```\n\n----------------------------------------\n\nTITLE: Parsing with Timezone using DateFormat (JavaScript)\nDESCRIPTION: This snippet shows how to parse dates with timezone information using `sap.ui.core.format.DateFormat.getDateTimeWithTimezoneInstance`. The `parse` method takes the date string and the timezone as parameters and returns a JavaScript Date object and the timezone.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/date-format-91f2eba.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar oDateTimeWithTimezoneFormat = sap.ui.core.format.DateFormat.getDateTimeWithTimezoneInstance();\n\noDateTimeWithTimezoneFormat.parse(\"10.02.2022, 10:01:14 America/New_York\", \"America/New_York\") // Returns [JavaScript Date object, \"America/New_York\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Control in OpenUI5 (ProductRating.js)\nDESCRIPTION: This code snippet defines a custom control named ProductRating in OpenUI5. It extends the base class sap.ui.core.Control, providing the foundation for creating reusable UI components. The control is defined with a metadata section (empty in this case), an init method (also empty), and a renderer method (empty). The `metadata` section is where properties, events, and aggregations of the control are defined. The `init` method is called during control instantiation, and the `renderer` defines how the control is rendered in the DOM.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-d12d2ee.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/Control\"\n], (Control) => {\n\t\"use strict\";\n\n\treturn Control.extend(\"ui5.walkthrough.control.ProductRating\", {\n\t\tmetadata : {},\n\n\t\tinit() {},\n\n\t\trenderer(oRM, oControl) {}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Public and Private Methods in OpenUI5 Control (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to define a public method (`divide`) and a private helper method (`_checkForZero`) within an OpenUI5 control. The `divide` method calls the `_checkForZero` method to validate the input before performing a division operation. Private methods are identified by a leading underscore and should not be called from outside the control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/normal-methods-85738e3.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n  divide: function(x, y) {     // a public method of the Control\n\n      if (this._checkForZero(y)) {\n\n         throw new Error(\"Second parameter may not be zero\");\n\n      }\n\n      return x / y;\n\n   },\n\n\n\n   _checkForZero: function(y) { // private helper method\n\n      if (y === 0) {\n\n         return true;\n\n      }\n\n      return false;\n\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuration for UI5 Babel Transformer Plugin in ui5.yaml\nDESCRIPTION: This code snippet shows the configuration for the UI5 Babel transformer plugin within the `ui5.yaml` file. This configuration enables the `overridesToOverride` option, which changes the `overrides` keyword back to `override` for compatibility with older UI5 runtime versions. This setting allows usage of the `overrides` keyword with UI5 versions prior to 1.112 when TypeScript is used.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-controller-extension-21515f0.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbuilder:\n  customTasks:\n  - name: ui5-tooling-transpile-task\n    afterTask: replaceVersion\n    configuration:\n      transformModulesToUI5:\n        overridesToOverride: true\n\n[...]\nserver:\n  customMiddleware:\n  - name: ui5-tooling-transpile-middleware\n    afterMiddleware: compression\n    configuration:\n      transformModulesToUI5:\n        overridesToOverride: true\n```\n\n----------------------------------------\n\nTITLE: Declaring Local Dependencies with sap.ui.define (JSON)\nDESCRIPTION: This code snippet illustrates how to declare dependencies to OpenUI5 framework classes and app resources using `sap.ui.define`.  Unused dependencies should be removed to reduce the application's footprint. The dependencies are listed in an array, and a callback function is executed with the corresponding modules as arguments.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/load-only-what-you-really-need-e8fca3e.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/m/MessageToast\",\n\t\"sap/base/Log\"\n], function (Controller, MessageToast, Log) {\n\t...\n\n```\n\n----------------------------------------\n\nTITLE: Setting a Control to Busy - JavaScript\nDESCRIPTION: This code snippet demonstrates how to set a specific control to a busy state using `sap.m.BusyIndicator`. When a control is set to busy, it is blocked, preventing user interaction. The `Input` control must be required from module \"sap/m/Input\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/busy-indicators-0dd2110.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\t\n// Input required from module \"sap/m/Input\"\nvar oInput = new Input({\n    value: 'Hello World'\n});\n...\noInput.setBusy(true);\n```\n\n----------------------------------------\n\nTITLE: Creating Detail-Detail Page Controller JS\nDESCRIPTION: This JavaScript code defines the controller for the detail-detail page. It initializes the router and model in the `onInit` function. The `_onPatternMatch` function is called when the route is matched, and it retrieves the supplier and product from the route arguments and binds the view element to the corresponding data.  The `onExit` function detaches the pattern matched event.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-adding-a-detail-detail-page-e4d21fd.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function (Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.DetailDetail\", {\n\t\tonInit: function () {\n\t\t\tvar oOwnerComponent = this.getOwnerComponent();\n\n\t\t\tthis.oRouter = oOwnerComponent.getRouter();\n\t\t\tthis.oModel = oOwnerComponent.getModel();\n\n\t\t\tthis.oRouter.getRoute(\"detailDetail\").attachPatternMatched(this._onPatternMatch, this);\n\t\t},\n\n\t\t_onPatternMatch: function (oEvent) {\n\t\t\tthis._supplier = oEvent.getParameter(\"arguments\").supplier || this._supplier || \"0\";\n\t\t\tthis._product = oEvent.getParameter(\"arguments\").product || this._product || \"0\";\n\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: \"/ProductCollectionStats/Filters/1/values/\" + this._supplier,\n\t\t\t\tmodel: \"products\"\n\t\t\t});\n\t\t},\n\n\t\tonExit: function () {\n\t\t\tthis.oRouter.getRoute(\"detailDetail\").detachPatternMatched(this._onPatternMatch, this);\n\t\t}\n\t});\n});\n\n```\n\n----------------------------------------\n\nTITLE: Extending UIComponent with manifest.json\nDESCRIPTION: This JavaScript code snippet demonstrates how to extend a UIComponent in SAPUI5 and specify a manifest file. The `manifest: \"json\"` property indicates that the component's metadata should be loaded from a manifest.json file. This is a common practice in SAPUI5 development for configuring application properties and dependencies.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-descriptor-for-applications-components-and-libraries-be0cf40.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nreturn UIComponent.extend(\"sap.ui.demo.walkthrough.Component\", {\n\n      metadata : {\n         manifest: \"json\"\n      },\n   ...\n```\n\n----------------------------------------\n\nTITLE: Binding Device Model Properties in XML View (OpenUI5)\nDESCRIPTION: This code snippet demonstrates how to bind properties in an XML view to the device model. It shows examples for controlling the visibility of the navigation button based on the device type (phone) and the visibility of the PullToRefresh control based on touch support. The `device>/` prefix indicates that the binding is to the 'device' model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/device-adaptation-using-device-models-for-your-app-8dbd35e.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Page showNavButton=\"{device>/system/phone}\" />\n...\n<PullToRefresh visible=\"{device>/support/touch}\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Filter Counts and Filters - JavaScript\nDESCRIPTION: This JavaScript snippet modifies the Worklist controller's `onInit` function to initialize properties in the view model for the counts of different stock levels (inStock, shortage, outOfStock, countAll). It also creates an object `_mFilters` containing filter instances for each stock level, using Filter and FilterOperator from sap.ui.model.Filter and sap.ui.model.FilterOperator, respectively. These filters are used later to filter the table data based on the selected tab.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-quick-filter-for-the-worklist-85ec3a9.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\t\t onInit : function () {\n\t\t\tvar oViewModel,\n\t\t\t\tiOriginalBusyDelay,\n\t\t\t\toTable = this.byId(\"table\");\n\n\t\t\t// Put down worklist table's original value for busy indicator delay,\n\t\t\t// so it can be restored later on. Busy handling on the table is\n\t\t\t// taken care of by the table itself.\n\t\t\tiOriginalBusyDelay = oTable.getBusyIndicatorDelay();\n\t\t\tthis._oTable = oTable;\n\t\t\t// keeps the search state\n\t\t\tthis._aTableSearchState = [];\n\n\t\t\t// Model used to manipulate control states\n\t\t\toViewModel = new JSONModel({\n\t\t\t\tworklistTableTitle: this.getResourceBundle().getText(\"worklistTableTitle\"),\n\t\t\t\tshareOnJamTitle: this.getResourceBundle().getText(\"worklistTitle\"),\n\t\t\t\tshareSendEmailSubject: this.getResourceBundle().getText(\"shareSendEmailWorklistSubject\"),\n\t\t\t\tshareSendEmailMessage: this.getResourceBundle().getText(\"shareSendEmailWorklistMessage\", [location.href]),\n\t\t\t\ttableNoDataText: this.getResourceBundle().getText(\"tableNoDataText\"),\n\t\t\t\ttableBusyDelay: 0,\n\t\t\t\tinStock: 0,\n\t\t\t\tshortage: 0,\n\t\t\t\toutOfStock: 0,\n\t\t\t\tcountAll: 0\n\t\t\t});\n\t\t\tthis.setModel(oViewModel, \"worklistView\");\n\t\t\t// Create an object of filters\n\t\t\tthis._mFilters = {\n\t\t\t\t\"inStock\": [new Filter(\"UnitsInStock\", FilterOperator.GT, 10)],\n\t\t\t\t\"outOfStock\": [new Filter(\"UnitsInStock\", FilterOperator.LE, 0)],\n\t\t\t\t\"shortage\": [new Filter(\"UnitsInStock\", FilterOperator.BT, 1, 10)],\n\t\t\t\t\"all\": []\n\t\t\t};\n\n\t\t\t// Make sure, busy indication is showing immediately so there is no\n\t\t\t// break after the busy indication for loading the view's meta data is\n\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\n\t\t\toTable.attachEventOnce(\"updateFinished\", function(){\n\t\t\t\t// Restore original busy indicator delay for worklist's table\n\t\t\t\toViewModel.setProperty(\"/tableBusyDelay\", iOriginalBusyDelay);\n\t\t\t});\n\t\t},\n\t\t...\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher Function in OPA\nDESCRIPTION: This snippet demonstrates how to use a custom matcher function within OPA tests. It waits for a `sap.m.StandardListItem` and uses a function to check if the item has the class \"specialItem\". Opa5 is utilized, and the function returns `true` if the condition is met. Assertions are used to verify that the special items are found.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn new Opa5().waitFor({\n    controlType : \"sap.m.StandardListItem\",\n    matchers : function(oItem) {\n        return oItem.$().hasClass(\"specialItem\");\n    },\n    success : function (aItems) {\n        Opa5.assert.ok(aItems.length, \"Found special items\")\n    },\n    errorMessage: \"No special items found\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling tab selection and route matching in Resume.controller.js\nDESCRIPTION: This snippet shows the implementation of the `onTabSelect` and `_onRouteMatched` functions in the `Resume.controller.js` file. The `onTabSelect` function updates the URL based on the selected tab. The `_onRouteMatched` function reads the query parameter from the URL and updates the `selectedTabKey` property of the view model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-allow-bookmarkable-tabs-with-optional-query-parameters-b8561ff.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\"\n\n], function (BaseController, JSONModel) {\n\t\"use strict\";\n\tvar _aValidTabKeys = [\"Info\", \"Projects\", \"Hobbies\", \"Notes\"];\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.Resume\", {\n\t\tonInit: function () {\n\t\t\tvar oRouter = this.getRouter();\n\t\t\tthis.getView().setModel(new JSONModel(), \"view\");\n\n\t\t\toRouter.getRoute(\"employeeResume\").attachMatched(this._onRouteMatched, this);\n\t\t},\n\t\t_onRouteMatched: function (oEvent) {\n\t\t\tvar oArgs, oView, oQuery;\n\t\t\toArgs = oEvent.getParameter(\"arguments\");\n\t\t\toView = this.getView();\n\t\t\toView.bindElement({\n\t\t\t\tpath: \"/Employees(\" + oArgs.employeeId + \")\",\n\t\t\t\tevents: {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function (oEvent) {\n\t\t\t\t\t\toView.setBusy(true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function (oEvent) {\n\t\t\t\t\t\toView.setBusy(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\toQuery = oArgs[\"?query\"];\n\t\t\tif (oQuery && _aValidTabKeys.indexOf(oQuery.tab) > -1){\n\t\t\t\toView.getModel(\"view\").setProperty(\"/selectedTabKey\", oQuery.tab);\n\t\t\t} else {\n\t\t\t\t// the default query param should be visible at all time\n\t\t\t\tthis.getRouter().navTo(\"employeeResume\", {\n\t\t\t\t\temployeeId: oArgs.employeeId,\n\t\t\t\t\t\"?query\": {\n\t\t\t\t\t\ttab: _aValidTabKeys[0]\n\t\t\t\t\t}\n\t\t\t\t}, true /*no history*/);\n\t\t\t}\n\n\t\t},\n\t\t_onBindingChange: function (oEvent) {\n\t\t\t// No data for the binding\n\t\t\tif (!this.getView().getBindingContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"notFound\");\n\t\t\t}\n\t\t},\n\t\tonTabSelect: function (oEvent){\n\t\t\tvar oCtx = this.getView().getBindingContext();\n\t\t\tthis.getRouter().navTo(\"employeeResume\", {\n\t\t\t\temployeeId: oCtx.getProperty(\"EmployeeID\"),\n\t\t\t\t\"?query\": {\n\t\t\t\t\ttab: oEvent.getParameter(\"selectedKey\")\n\t\t\t\t}\n\t\t\t}, true /*without history*/);\n\t\t}\n\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Data to a Link with a Formatter Function (XML)\nDESCRIPTION: This XML snippet shows how to bind data to the `href` property of a `Link` element in an OpenUI5 view. It uses a complex binding syntax with `parts` to specify the data fields (`/firstName` and `/lastName`) that are passed as parameters to the `formatMail` formatter function defined in the controller. The `formatter` property specifies the name of the formatter function within the controller, which will be executed to determine the final value of the `href` attribute.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-formatting-values-6fdf0ac.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.databinding.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:form=\"sap.ui.layout.form\"\n\txmlns:l=\"sap.ui.layout\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t...\n\t<Panel headerText=\"{i18n>panel2HeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n\t\t<content>\n\t\t\t<l:VerticalLayout>\n\t\t\t\t<Label labelFor=\"address\" text=\"{i18n>address}:\"/>\n\t\t\t\t<FormattedText class=\"sapUiSmallMarginBottom\"\n\t\t\t\t\thtmlText=\"{/address/street}&lt;br&gt;{/address/zip} {/address/city}&lt;br&gt;{/address/country}\"\n\t\t\t\t\tid=\"address\" width=\"200px\"/>\n\t\t\t\t<Link href=\"{\n\t\t\t\t\t\tparts: [\n\t\t\t\t\t\t\t'/firstName',\n\t\t\t\t\t\t\t'/lastName'\n\t\t\t\t\t\t],\n\t\t\t\t\t\tformatter: '.formatMail'\n\t\t\t\t\t}\"\n\t\t\t\t\ttext=\"{i18n>sendEmail}\"/>\n\t\t\t</l:VerticalLayout>\n\t\t</content>\n\t</Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Formatter Function in XML View\nDESCRIPTION: This XML snippet demonstrates how to use a formatter function in an OpenUI5 XML view.  The `value` property of the `Input` control is bound to `/company/revenue` and uses the `roundToMillion` formatter function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <Input value=\"{path: '/company/revenue', formatter: '.roundToMillion'}\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Grouping Invoice List by Shipper Name (XML)\nDESCRIPTION: This XML snippet demonstrates how to group an invoice list by shipper name using the `sorter` property in the `items` aggregation binding of a `sap.m.List` control. The `path` attribute specifies the data field to group by (ShipperName), and the `group` attribute is set to `true` to enable grouping. OpenUI5 automatically displays group headers and categorizes the items.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-24-sorting-and-grouping-typescript-86bbe13.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <List\n        id=\"invoiceList\"\n        headerText=\"{i18n>invoiceListTitle}\"\n        class=\"sapUiResponsiveMargin\"\n        width=\"auto\"\n        items=\"{\n            path : 'invoice>/Invoices',\n            sorter : {\n                path : 'ShipperName',\n                group : true\n            }\n\n        }\">\n        ...\n    </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Handling Reset Data Source Action in Controller (JavaScript)\nDESCRIPTION: This JavaScript code defines the onResetDataSource event handler in the App.controller.js file. It retrieves the OData model, creates a deferred operation binding for the ResetDataSource action, invokes the action asynchronously using a Promise, and handles success (refreshing the model and displaying a success message) and error scenarios (displaying an error message).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-odata-operations-a3e7cb6.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n\t\t onResetChanges : function () {\n\t\t\tthis.byId(\"peopleList\").getBinding(\"items\").resetChanges();\n\t\t\tthis._setUIChanges();\n\t\t},\n\n\t\t onResetDataSource : function () {\n\t\t\tvar oModel = this.getView().getModel(),\n\t\t\t\toOperation = oModel.bindContext(\"/ResetDataSource(...)\");\n\n\t\t\toOperation.invoke().then(function () {\n\t\t\t\t\toModel.refresh();\n\t\t\t\t\tMessageToast.show(this._getText(\"sourceResetSuccessMessage\"));\n\t\t\t\t}.bind(this), function (oError) {\n\t\t\t\t\tMessageBox.error(oError.message);\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t onSave : function () {\n...\n\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via API in OpenUI5\nDESCRIPTION: This snippet demonstrates how to dynamically modify the log level at runtime using the `sap/base/Log.setLevel` method in OpenUI5. This allows developers to adjust the logging verbosity during application execution to aid in debugging or monitoring. The available options are `0|1|2|3|4|5|6|NONE|FATAL|ERROR|WARNING|INFO|DEBUG|ALL`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-options-and-url-parameters-91f2d03.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nLog.setLevel\n```\n\n----------------------------------------\n\nTITLE: Starting Karma test runner\nDESCRIPTION: This command starts the Karma test runner.  It uses the configuration defined in the `karma.conf.js` file (or another specified configuration file).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-automation-ae44824.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkarma start\n```\n\n----------------------------------------\n\nTITLE: Interval Formatting with DateFormat (JavaScript)\nDESCRIPTION: This snippet demonstrates interval formatting using `sap.ui.core.format.DateFormat.getInstance`. It shows how to format a date range, displaying common fields only once. Requires two Date objects as input.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/date-format-91f2eba.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar oFormat = sap.ui.core.format.DateFormat.getInstance({\n\tformat: \"yMMMd\",\n\tinterval: true\n});\nvar oDate1 = UI5Date.getInstance(2017, 3, 11);\nvar oDate2 = UI5Date.getInstance(2017, 4, 11);\noFormat.format([oDate1, oDate2]);  \n// string in locale de \"11. Apr. – 11. Mai 2017\"; \n// string in locale en \"Apr 11 – May 11, 2017\"  \n```\n\n----------------------------------------\n\nTITLE: Replacing synchronous sap.ui.fragment with asynchronous Fragment.load or Controller.loadFragment - JavaScript\nDESCRIPTION: This snippet illustrates how to replace the synchronous `sap.ui.fragment` with the asynchronous `Fragment.load` or `Controller.loadFragment` methods for loading fragments. It showcases two scenarios: loading fragments inside a controller using `Controller.loadFragment` and loading fragments outside a controller using the static `Fragment.load` method. It emphasizes the importance of assigning the correct owner component and handling the promises correctly.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-factories-replacement-491bd9c.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// generic factory function\nvar aControls = sap.ui.fragment({ \n    name: \"my.fragment\",\n    type: \"XML\"\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JS fragments\nvar aControls = sap.ui.jsfragment({ \n    name: \"my.fragment\"\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// XML Fragments\nvar aControls = sap.ui.xmlfragment({ \n    name: \"my.fragment\"\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/mvc/Controller\"], (Controller) => {\n    return Controller.extend(\"my.MyController\", {\n\n        onInit: function() {\n            // Beware: The controller's \"onInit\" lifecycle hook is NOT an async function;\n            //         returning a Promise is not supported by the framework.\n            //         Any asynchronous behavior must be handled manually.\n            this.loadFragment({\n                name: \"my.fragment\",\n                // ...\n            }).then((oControl) => {/*...*/});\n        }\n    });\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\n    \"sap/ui/core/Component\", \n    \"sap/ui/core/Fragment\"\n], (Component, Fragment) => {\n    // ...\n\n    // \"oPage\" is an exemplary sap.m.Page control\n    const oComponent = Component.getOwnerComponentFor(oPage);\n\n    oComponent.runAsOwner(function() {\n        Fragment.load({\n            name: \"my.fragment\",\n            type: \"XML\" // or type: \"JS\"\n        }).then((oControl) => {/*...*/});\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Theme via API in OpenUI5\nDESCRIPTION: This snippet shows how to set the theme for an OpenUI5 application using the `Theming.setTheme` API. It allows specifying a theme ID or a theme ID and URL location. It's crucial to ensure that theme origins are maintained in `sap-allowed-theme-origins` to prevent XSS attacks.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-options-and-url-parameters-91f2d03.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[`Theming.setTheme`](https://ui5.sap.com/#/api/module:sap/ui/core/Theming%23methods/sap/ui/core/Theming.setTheme)\n```\n\n----------------------------------------\n\nTITLE: Mapping Module Paths to a Central URL with sap.ui.loader.config\nDESCRIPTION: This snippet illustrates how to map module paths to a central URL.  It configures sap.ui.loader.config to associate the 'my/company' prefix with the 'http://my.company/shared/' URL. This approach is useful when deploying modules with a common prefix to a shared location, ensuring that OpenUI5 can resolve and load them correctly. This demonstrates an alternative deployment strategy.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/multiple-module-locations-1dfab2e.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.loader.config({\n\tpaths: {\n\t\t\"my/company\": \"http://my.company/shared/\"\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Handle Route Matched Event in Employee Controller (JavaScript)\nDESCRIPTION: Retrieves the `employeeId` parameter from the route arguments when the 'employee' route is matched.  It then binds the view to the corresponding employee data using `bindElement`.  It also handles `dataRequested`, `dataReceived`, and `change` events to display a busy indicator while loading and to navigate to the 'notFound' target if the data is not found.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-navigate-to-routes-with-mandatory-parameters-f96d252.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.Employee\", {\n\t\tonInit: function () {\n\t\t\tvar oRouter = this.getRouter();\n\t\t\toRouter.getRoute(\"employee\").attachMatched(this._onRouteMatched, this);\n\t\t\t// Hint: we don't want to do it this way\n\t\t\t/*\n\t\t\toRouter.attachRouteMatched(function (oEvent){\n\t\t\t\tvar sRouteName, oArgs, oView;\n\t\t\t\tsRouteName = oEvent.getParameter(\"name\");\n\t\t\t\tif (sRouteName === \"employee\"){\n\t\t\t\t\tthis._onRouteMatched(oEvent);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\t*/\n\t\t},\n\t\t_onRouteMatched : function (oEvent) {\n\t\t\tvar oArgs, oView;\n\t\t\toArgs = oEvent.getParameter(\"arguments\");\n\t\t\toView = this.getView();\n\n\t\t\toView.bindElement({\n\t\t\t\tpath : \"/Employees(\" + oArgs.employeeId + \")\",\n\t\t\t\tevents : {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function (oEvent) {\n\t\t\t\t\t\toView.setBusy(true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function (oEvent) {\n\t\t\t\t\t\toView.setBusy(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t_onBindingChange : function (oEvent) {\n\t\t\t// No data for the binding\n\t\t\tif (!this.getView().getBindingContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"notFound\");\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Legacy Module Access\nDESCRIPTION: Demonstrates how to migrate legacy access to controls and other modules to use the recommended approach of importing modules directly. Shows how to lazily load modules on demand using `sap.ui.require` instead of relying on global variables.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/best-practices-for-loading-modules-00737d6.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n  \"sap/m/library\", // \"SortOrder\" is contained in the sap/m/library.js module\n  \"sap/ui/model/FilterType\", // remains the same\n  \"sap/ui/layout/form/SimpleForm\" // imported as a module, no access to globals needed\n], (sapMLib, FilterType, SimpleForm) => {\n  \"use strict\";\n  const { SortOrder } = sapMLib;\n\n    // ...\n\n      // lazily require the sap/m/MessageBox on demand\n      sap.ui.require([\n        \"sap/m/MessageBox\"\n      ], (MessageBox) => {\n        MessageBox.show(/*...*/);\n      });\n\n    // ...\n\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting with IANA time zone ID\nDESCRIPTION: Demonstrates how to use `DateFormat.getDateTimeWithTimezoneInstance` to format a date, specifying the time zone directly in the `format` method. This allows for explicit control over the time zone used for formatting.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/date-format-91f2eba.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar oDateTimeWithTimezoneFormat = sap.ui.core.format.DateFormat.getDateTimeWithTimezoneInstance();\n\noDateTimeWithTimezoneFormat.format(UI5Date.getInstance(), \"America/New_York\") // Returns \"10.02.2022, 10:01:14 America, New York\"\n```\n\n----------------------------------------\n\nTITLE: Releasing Control's Busy State - JavaScript\nDESCRIPTION: This code snippet demonstrates how to release a control's busy state after data has been loaded. This allows the user to interact with the control again. Assumes `oMyListBox` is an instance of `sap.m.ListBase` or a subclass.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/busy-indicators-0dd2110.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\noMyListBox.setBusy(false);\n```\n\n----------------------------------------\n\nTITLE: Element Binding in XML View\nDESCRIPTION: This XML view snippet demonstrates how to use element binding to bind an input control to the `/company` object in the model. The `value` property of the input is then bound to the `name` property of the `company` object using relative binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\">\n    <Input id=\"companyInput\"\n        binding=\"{/company}\"\n        value=\"{name}\"\n        tooltip=\"The name of the company is '{name}'\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Resource Model Binding Paths Example - JavaScript\nDESCRIPTION: This code snippet illustrates the possible binding paths within the resource model, based on resource bundle content. Binding paths directly refer to keys in the resource bundle, allowing access to translated texts within the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-model-91f122a.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n\nCLOSE_BUTTON_TEXT\nOPEN_BUTTON_TEXT\nCANCEL_BUTTON_TEXT\n\n```\n\n----------------------------------------\n\nTITLE: OData V4 Binding with Group ID in XML View\nDESCRIPTION: This XML code snippet demonstrates how to create OData V4 bindings with a specified update group ID in an XML view. The `$$updateGroupId` parameter is used within the binding declaration of the `SimpleForm` to assign the group ID 'myGroup' to update requests, enabling batch processing.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/batch-control-74142a3.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<form:SimpleForm binding=\"{path : '/SalesOrderList(SalesOrderID=\\'42\\')', parameters : {$$updateGroupId : 'myGroup'}}\" editable=\"true\" ...>\n    <Label labelFor=\"Note\" text=\"Note\" /> \n    <Input id=\"Note\" value=\"{Note}\" />\n    ...\n</form:SimpleForm> \n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Container Control in OpenUI5\nDESCRIPTION: This code snippet defines a custom container control named `ColorBoxContainer` that extends `sap.ui.core.Control`. It defines a `boxColor` property for the border color and a `content` aggregation to hold child controls. The `renderer` function generates the HTML structure, including a colored border around each child control, rendering them inline.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/creating-a-simple-container-control-39d2564.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.core.Control.extend(\"ColorBoxContainer\", { // call the new Control type \"ColorBoxContainer\"\n    // and let it inherit from sap.ui.core.Control\n\n    // the Control API:\n    metadata : {\n        properties : {            // setter and getter are created behind the scenes,\n            // incl. data binding and type validation\n            \"boxColor\" : \"string\"  // the color to use for the frame around each child Control\n        },\n        aggregations: {\n            content: {singularName: \"content\"} // default type is \"sap.ui.core.Control\", multiple is \"true\"\n        }\n    },\n\n\n    // the part creating the HTML:\n    renderer : function(oRm, oControl) { // static function, so use the given \"oControl\" instance\n        // instead of \"this\" in the renderer function\n        oRm.write(\"<div\");\n        oRm.writeControlData(oControl);  // writes the Control ID and enables event handling - important!\n        oRm.writeClasses();              // there is no class to write, but this enables\n                                         // support for ColorBoxContainer.addStyleClass(...)\n        oRm.write(\">\");\n\n        var aChildren = oControl.getContent();\n        for (var i = 0; i < aChildren.length; i++) { // loop over all child Controls,\n            // render the colored box around them\n            oRm.write(\"<div\");\n            oRm.addStyle(\"display\", \"inline-block\");\n            oRm.addStyle(\"border\", \"3px solid \" + oControl.getBoxColor()); // specify the border around the child\n            oRm.writeStyles();\n            oRm.write(\">\");\n\n            oRm.renderControl(aChildren[i]);   // render the child Control\n                                               // (could even be a big Control tree, but you don't need to care)\n\n\n            oRm.write(\"</div>\"); // end of the box around the respective child\n        }\n\n        oRm.write(\"</div>\"); // end of the complete Control\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from Legacy Pseudo Modules\nDESCRIPTION: Illustrates how to migrate from legacy pseudo modules (types within library.js) to using the corresponding library module. The example showcases how to access enum types and DataType instances by requiring the library module as documented in the API Reference and accessing them via the module export or static APIs.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/best-practices-for-loading-modules-00737d6.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\n    \"sap/m/library\", // enum sap.m.ButtonType (Module: sap/m/library)\n    \"sap/ui/model/FilterType\", // enum sap.ui.model.FilterType (Module: sap/ui/model/FilterType)\n    \"sap/ui/base/DataType\", // DataType facade (Module: sap/ui/base/DataType)\n    \"sap/ui/core/library\" // includes the DataType \"sap.ui.core.CSSSize\" (Module: sap/ui/core/library)\n], (sapMLib, FilterType, DataType /*, sapUiCoreLib*/) => {\n    const { ButtonType } = sapMLib;\n\n    mySapMButton.setType(ButtonType.Emphasized);\n\n    myListBinding.filter(myFilter, FilterType.Application);\n\n    const oCSSSize = DataType.getType(\"sap.ui.core.CSSSize\");\n    oCSSSize.isValid(\"20px\") // true\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Binding Mode in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to change the binding mode for a specific property binding. It creates two `Input` controls bound to the same data in a `JSONModel`. The first `Input` uses a one-way binding, while the second uses the default two-way binding, demonstrating the difference in data flow.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// \"JSONModel\" required from module \"sap/ui/model/json/JSONModel\"\n// \"Input\" required from module \"sap/m/Input\"\n// \"BindingMode\" required from module \"sap/ui/model/BindingMode\"\nconst oModel = new JSONModel();\n// default binding mode is two-way\noModel.setData(myData);\nconst oInputFirstName = new Input();\noInputFirstName.setModel(oModel);\n\n// bind value property one way only\n// propertyname, formatter function, binding mode\noInputFirstName.bindValue(\"/firstName\", null, BindingMode.OneWay);\noInputFirstName.placeAt(\"target1\");\n\nconst oInputLastName = new Input();\noInputLastName.setModel(oModel);\n// bind value property two way (default)\noInputLastName.bindValue(\"/lastName\");\noInputLastName.placeAt(\"target2\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Validation - Control Registration - JavaScript\nDESCRIPTION: This code snippet demonstrates how to activate automatic validation message generation for a specific control by registering it with the `sap.ui.core.Messaging` module. The `Messaging.registerObject` function links the control to the message manager, allowing the framework to automatically create validation messages based on data type constraints and binding configurations. Setting the second parameter to `true` ensures message generation. Requires modules `sap/m/Input`, `sap/ui/model/type/Float` and `sap/ui/core/Messaging`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/validation-messages-a90d93d.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Input\" required from \"sap/m/Input\"\n// \"Float\" required from \"sap/ui/model/type/Float\"\n// \"Messaging\" required from \"sap/ui/core/Messaging\"\n\nvar oInput = new Input({\n    value: { path: \"/Products(1)/Price\", type: Float }\n});\nMessaging.registerObject(oInput, true);\n```\n\n----------------------------------------\n\nTITLE: Initializing OData Model with Service URL - JavaScript\nDESCRIPTION: This code snippet shows how to create an instance of the OData V2 Model by passing the service URL either directly as the first parameter or as a property within the mParameters map. The ODataModel constructor is required from the \"sap/ui/model/odata/v2/ODataModel\" module. This initiates a request to retrieve the service metadata.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"ODataModel\" required from module \"sap/ui/model/odata/v2/ODataModel\"\nvar oModel = new ODataModel(\"http://services.odata.org/Northwind/Northwind.svc/\");\nvar oModel = new ODataModel({serviceUrl: \"http://services.odata.org/Northwind/Northwind.svc\"});\n```\n\n----------------------------------------\n\nTITLE: Registering a Local XML View Preprocessor - JavaScript\nDESCRIPTION: This code snippet demonstrates how to register a preprocessor locally for a specific XML view instance using the `XMLView.create` method.  This makes the preprocessor only available to this particular view instance.  The `preprocessors` property allows specifying multiple preprocessors with individual configurations.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/preprocessing-xml-views-48b81b9.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"XMLView\" required from module \"sap/ui/core/mvc/XMLView\"\nXMLView.create({\n       viewName: \"sap.ui.core.sample.View.preprocessor.Sample\",\n       preprocessors: {\n             xml: [{\n                   preprocessor: \"sap.ui.sample.samplepreprocessor\",\n                   sampleInfo: \"this is a local preprocessor\",\n                   moreInfo: \"…\"\n             },\n             {\n                   preprocessor: \"another.preprocessor\"\n             }]\n       }\n}).then(function(oView) {\n       oView.doSomething();\n});\n```\n\n----------------------------------------\n\nTITLE: Enable Asynchronous Loading in HTML Bootstrap\nDESCRIPTION: This HTML snippet demonstrates how to enable asynchronous loading for an OpenUI5 application using the `data-sap-ui-async` attribute in the bootstrap tag.  It also configures the module for initialization and sets the resource roots.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/standard-variant-for-bootstrapping-91f1f45.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script\n    id=\"sap-ui-bootstrap\"\n    src=\"resources/sap-ui-core.js\"\n    data-sap-ui-async=\"true\"\n    data-sap-ui-on-init=\"module:my/app/main\"\n    data-sap-ui-resource-roots='{\"my.app\": \"./\"}'\n></script>\n```\n\n----------------------------------------\n\nTITLE: Implement Refresh Logic in Controller (JavaScript)\nDESCRIPTION: This JavaScript code snippet implements the `onRefresh` event handler in the controller. It retrieves the data binding of the table, checks for pending changes, and refreshes the data if no changes are pending. It uses `sap.m.MessageToast` and `sap.m.MessageBox` for user feedback. The `_getText` function is used for i18n support.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-data-access-and-client-server-communication-e9de002.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/m/MessageToast\",\n\t\"sap/m/MessageBox\",\n\t\"sap/ui/model/json/JSONModel\"\n], function (Controller, MessageToast, MessageBox, JSONModel) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.core.tutorial.odatav4.controller.App\", {\n\n\t\tonInit : function () {\n\t\t\tvar oJSONData = {\n\t\t\t\tbusy : false\n\t\t\t};\n\t\t\tvar oModel = new JSONModel(oJSONData);\n\t\t\tthis.getView().setModel(oModel, \"appView\");\n\t\t},\n\n\t\tonRefresh : function () {\n\t\t\tvar oBinding = this.byId(\"peopleList\").getBinding(\"items\");\n\n\t\t\tif (oBinding.hasPendingChanges()) {\n\t\t\t\tMessageBox.error(this._getText(\"refreshNotPossibleMessage\"));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\toBinding.refresh();\n\t\t\tMessageToast.show(this._getText(\"refreshSuccessMessage\"));\n\t\t},\n\n\t\t_getText : function (sTextId, aArgs) {\n\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle().getText(sTextId, aArgs);\n\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Control Properties with Types\nDESCRIPTION: This code snippet demonstrates how to define control properties in OpenUI5 using the `properties` configuration object.  It shows examples of different property types such as string, boolean, and CSSSize, along with setting default values.  The properties are defined within a control's metadata.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-control-properties-ac56d92.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nproperties: {\n    title : \"string\",                         // a simple string property, default value is undefined\n    buttonText : {defaultValue: \"Search\"},    // when no type is given, the type is string\n    showLogoutButton : {type : \"boolean\", defaultValue : true},   // a boolean property where a default value is given\n    width : {type : \"sap.ui.core.CSSSize\", defaultValue: \"50px\"} // a CSS size property where a default value is given\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Export Modules in OpenUI5\nDESCRIPTION: Loads the required modules for data export functionality in OpenUI5. It uses `sap.ui.require` to load `sap/ui/core/util/Export` and `sap/ui/core/util/ExportTypeCSV`, providing access to the Export and ExportTypeCSV classes for data export operations.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-data-binding-for-data-export-f1ee7a8.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.require([\"sap/ui/core/util/Export\", \"sap/ui/core/util/ExportTypeCSV\"], function(Export, ExportTypeCSV) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing OData Model with Custom HTTP Headers - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize an OData V2 Model with custom HTTP headers using the headers property in the mParameters map during model creation.  These headers will be included in every request sent by the model. Ensure no private headers are overwritten.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"ODataModel\" required from module \"sap/ui/model/odata/v2/ODataModel\"\nvar oModel = new ODataModel({\n    headers: {\n        \"myHeader1\" : \"value1\",\n        \"myHeader2\" : \"value2\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Spying on Button Press Event - JavaScript\nDESCRIPTION: This example shows how to use Sinon.JS to spy on the press event of an OpenUI5 sap.m.Button. The code defines a callback function and uses sinon.spy() to create a spy. The button is then attached to the callback, and when fired, the assertion verifies that the spy (callback) was called.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sinon-js-spies-stubs-mocks-faked-timers-and-xhr-457eaad.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/*global QUnit sinon */\nsap.ui.define([\"sap/m/Button\"], function(Button) {\n\t \"use strict\";\n\n\t QUnit.test(\"Spy\", 2, function(assert) {\n\n\t \tvar callback = sinon.spy();\n\t \tvar oButton = new Button();\n\t \toButton.attachPress(callback);\n\t \tassert.ok(!callback.called, \"Callback Spy not called yet\");\n\t \toButton.firePress();\n\t \tassert.ok(callback.called, \"Callback Spy called\");\n\t \toButton.destroy();\n\n\t });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OData V4 Model for V2 Service in manifest.json\nDESCRIPTION: This code snippet demonstrates how to configure the manifest.json file to consume an OData V2 service using the OData V4 model in an OpenUI5 application. It sets the data source URI, OData version, model type, and other related settings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/consuming-odata-v2-services-with-the-odata-v4-model-365bdbd.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"_version\" : \"1.1.0\",\n    \"sap.app\" : {\n        ...\n        \"dataSources\" : {\n            \"default\" : {\n                \"uri\" : \"<ODataV2 Service URL>\",\n                \"type\" : \"OData\",\n                \"settings\" : {\n                    \"odataVersion\" : \"2.0\"\n                }\n            }\n        },\n        ...\n    },\n    ...\n    \"sap.ui5\" : {\n        ...\n        \"dependencies\" : {\n            \"minUI5Version\" : \"1.49\",\n            ...\n        },\n        \"models\" : {\n            \"\" : {\n                \"dataSource\" : \"default\",\n                \"settings\" : {\n                    \"autoExpandSelect\" : false,\n                    \"operationMode\" : \"Server\",\n                    \"synchronizationMode\" : \"None\"\n                },\n                \"type\" : \"sap.ui.model.odata.v4.ODataModel\"\n            }\n        },\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XML View with Factory Function for Aggregation Binding\nDESCRIPTION: This XML view defines a VerticalLayout and binds its 'content' aggregation to the '/companies' path in the model. It uses the 'createContent' function in the controller as the factory function to create controls for each entry in the '/companies' array. The `'.'` in `factory: '.createContent'` refers to the controller's method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-factory-functions-335848a.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns=\"sap.m\"\n    xmlns:l=\"sap.ui.layout\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <l:VerticalLayout content=\"{path: '/companies', factory: '.createContent'}\" class=\"sapUiContentPadding\" width=\"100%\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Cache Buster Script Implementation\nDESCRIPTION: This JavaScript snippet is injected by the server when the cache buster is enabled. It retrieves the timestamp from the server and updates the `resourceRoots` configuration to include the timestamp. This ensures that OpenUI5 loads resources from the correct versioned path. It searches for the bootstrap script tag, extracts the base path, and constructs the new resource root with the timestamp.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cache-buster-for-openui5-91f0809.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n  var sTimeStamp = '~20120716-0201~';\n  var sScriptPath = 'sap\\x2dui\\x2dcore.js';\n  var aScriptTags = document.getElementsByTagName('script');\n  for (var i = 0; i < aScriptTags.length; i++) {\n    if (aScriptTags[i].src) {\n      var iIdxCb = aScriptTags[i].src.indexOf('/sap-ui-cachebuster/');\n      if (iIdxCb >= 0 && aScriptTags[i].src.substring(iIdxCb + '/sap-ui-cachebuster/'.length) == sScriptPath) {\n        var sBasePath = aScriptTags[i].src.substring(0, iIdxCb);\n        sBasePath += '/' + sTimeStamp + '/';\n        window[\"sap-ui-config\"] = window[\"sap-ui-config\"] || {};\n        window[\"sap-ui-config\"].resourceRoots = window[\"sap-ui-config\"].resourceRoots || {};\n        window[\"sap-ui-config\"].resourceRoots[''] = sBasePath;\n        document.write('<script type=\"text/javascript\" src=\"' + sBasePath + sScriptPath + '\"></script>')\n        break;\n      }\n    }\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: OData Function Import Binding (XML View)\nDESCRIPTION: This XML snippet shows how to bind the result of a function import to a `List` control. The items are bound to the `$result` property of the context, and the `Name` property of each item is displayed in a `StandardListItem`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<form:SimpleForm id=\"ratingForm\">\n   <core:Title text=\"Parameters\" />\n   <Label text=\"Rating\" />\n   <Input value=\"{rating}\" />\n   <Button text=\"Submit\" press=\".onSubmitRatingForm\" />\n   <core:Title text=\"Result\" />\n   <List items=\"{$result}\">\n    <StandardListItem title=\"{Name}\" />\n   </List>\n</form:SimpleForm>\n```\n\n----------------------------------------\n\nTITLE: Configure Routing in manifest.json (OpenUI5)\nDESCRIPTION: This code snippet configures the routing settings in the `manifest.json` file. It defines the router class, view type, view path, control ID, and control aggregation. It also defines routes for 'overview' and 'detail' views and their corresponding targets.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-e5200ee.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"sap.ui5\": {\n  ...\n    \"routing\": {\n      \"config\": {\n        \"routerClass\": \"sap.m.routing.Router\",\n        \"type\": \"View\",\n        \"viewType\": \"XML\",\n        \"path\": \"ui5.walkthrough.view\",\n        \"controlId\": \"app\",\n        \"controlAggregation\": \"pages\"\n      },\n      \"routes\": [\n        {\n          \"pattern\": \"\",\n          \"name\": \"overview\",\n          \"target\": \"overview\"\n        },\n        {\n          \"pattern\": \"detail\",\n          \"name\": \"detail\",\n          \"target\": \"detail\"\n        }\n      ],\n      \"targets\": {\n        \"overview\": {\n          \"id\": \"overview\",\n          \"name\": \"Overview\"\n        },\n        \"detail\": {\n          \"id\": \"detail\",\n          \"name\": \"Detail\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding i18n Text for Reset Button (INI)\nDESCRIPTION: This INI code adds the necessary text properties to the i18n.properties file for the reset button and the success message.  It includes entries for the button text and the message displayed after successfully resetting the data source.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-odata-operations-a3e7cb6.md#_snippet_2\n\nLANGUAGE: INI\nCODE:\n```\n...\n# Toolbar\n...\n#XBUT: Button text for reset changes\nresetChangesButtonText=Restart Tutorial\n...\n# Messages\n...\n#XMSG: Message for changes reverted\nsourceResetSuccessMessage=All changes reverted back to start\n\n```\n\n----------------------------------------\n\nTITLE: Handling SelectionChange Event in List - OpenUI5 (JavaScript)\nDESCRIPTION: This example demonstrates defining a List control and binding the 'selectionChange' event to a handler function named 'onSelectionChange'.  The list is populated from the '/ProductCollection' path. `mode` is set to 'MultiSelect' allowing for multiple selections, and `includeItemInSelection` is set to true so that items are immediately selected/deselected on click.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/list-and-table-events-35b8a94.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<List\n      id=\"idList\"\n      items=\"{/ProductCollection}\"\n      selectionChange=\"onSelectionChange\"\n      mode=\"MultiSelect\"\n      includeItemInSelection=\"true\" >\n…\n\n```\n\n----------------------------------------\n\nTITLE: Element Binding with VerticalLayout in XML View\nDESCRIPTION: This XML view uses a `VerticalLayout` and element binding to display company information.  The `VerticalLayout` is bound to the `/company` path, and child `Text` controls are bound to properties of the company object using relative binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns:layout=\"sap.ui.layout\"\n    xmlns=\"sap.m\">\n    <layout:VerticalLayout id=\"vLayout\"\n        binding=\"{/company}\"\n        width=\"100%\">\n            <Text text=\"{name}\" />\n            <Text text=\"{city}\" />\n            <Text text=\"{county}\" />\n    </layout:VerticalLayout> \n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Define OpenUI5 Module in index.js\nDESCRIPTION: This JavaScript file defines an OpenUI5 module that creates a button and attaches it to the HTML element with the ID \"content\".  When the button is pressed, a \"Hello World!\" message is displayed using sap/m/MessageToast.  The module depends on the sap/m/Button and sap/m/MessageToast modules.  The placeAt function is used to render the button in the specified HTML element.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-ready-851bde4.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/m/Button\",\n\t\"sap/m/MessageToast\"\n], (Button, MessageToast) => {\n\t\"use strict\";\n\n\tnew Button({\n\t\ttext: \"Ready...\",\n\t\tpress() {\n\t\t\tMessageToast.show(\"Hello World!\");\n\t\t}\n\t}).placeAt(\"content\");\n\n});\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Lifecycle Hooks in Controller Extensions\nDESCRIPTION: This snippet illustrates how to define custom lifecycle hooks in a controller extension using `OverrideExecution.After` or `OverrideExecution.Before`.  The order of extension execution depends on the `OverrideExecution` value.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-controller-extension-21515f0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn ControllerExtension.extend(\"sap.my.ReuseExtension\", {\n        metadata: {\n            methods: {\n                \"onFilterHook\": {\"public\": true, \"final\": false, overrideExecution: OverrideExecution.After}\n            }\n        },\n        //...\n        /**\n         * @abstract\n         */\n        onFilterHook: function(aFilter) {\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Add Sections and Content to Detail.view.xml\nDESCRIPTION: This snippet adds two sections, \"General Information\" and \"Suppliers\", to the `ObjectPageLayout`.  The \"General Information\" section uses a `sap.ui.layout.form.SimpleForm` to display product ID, description, and supplier information.  The \"Suppliers\" section uses a `sap.m.Table` to display supplier data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-using-object-page-layout-as-a-detail-page-d1ffe61.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n\t\t...\n\t\t<headerContent>\n\t\t\t<m:FlexBox wrap=\"Wrap\" fitContainer=\"true\" alignItems=\"Stretch\">\n\t\t\t\t<m:Avatar\n\t\t\t\t\tdisplaySize=\"L\"\n\t\t\t\t\tdisplayShape=\"Square\"\n\t\t\t\t\tclass=\"sapUiTinyMarginEnd\">\n\t\t\t\t</m:Avatar>\n\t\t\t\t<m:VBox justifyContent=\"Center\" class=\"sapUiSmallMarginEnd\">\n\t\t\t\t\t<m:Label text=\"Main Category\"/>\n\t\t\t\t</m:VBox>\n\t\t\t\t<m:VBox justifyContent=\"Center\" class=\"sapUiSmallMarginEnd\">\n\t\t\t\t\t<m:Label text=\"Subcategory\"/>\n\t\t\t\t</m:VBox>\n\t\t\t\t<m:VBox justifyContent=\"Center\" class=\"sapUiSmallMarginEnd\">\n\t\t\t\t\t<m:Label text=\"Price\"/>\n\t\t\t\t</m:VBox>\n\t\t\t</m:FlexBox>\n\t\t</headerContent>\n\n\t\t<sections>\n\t\t\t<ObjectPageSection title=\"General Information\">\n\t\t\t\t<subSections>\n\t\t\t\t\t<ObjectPageSubSection>\n\t\t\t\t\t\t<blocks>\n\t\t\t\t\t\t\t<form:SimpleForm\n\t\t\t\t\t\t\t\tmaxContainerCols=\"2\"\n\t\t\t\t\t\t\t\teditable=\"false\"\n\t\t\t\t\t\t\t\tlayout=\"ResponsiveGridLayout\"\n\t\t\t\t\t\t\t\tlabelSpanL=\"12\"\n\t\t\t\t\t\t\t\tlabelSpanM=\"12\"\n\t\t\t\t\t\t\t\temptySpanL=\"0\"\n\t\t\t\t\t\t\t\temptySpanM=\"0\"\n\t\t\t\t\t\t\t\tcolumnsL=\"1\"\n\t\t\t\t\t\t\t\tcolumnsM=\"1\">\n\t\t\t\t\t\t\t\t<form:content>\n\t\t\t\t\t\t\t\t\t<m:Label text=\"Product ID\"/>\n\t\t\t\t\t\t\t\t\t<m:Label text=\"Description\"/>\n\t\t\t\t\t\t\t\t\t<m:Label text=\"Supplier\"/>\n\t\t\t\t\t\t\t\t</form:content>\n\t\t\t\t\t\t\t</form:SimpleForm>\n\t\t\t\t\t\t</blocks>\n\t\t\t\t\t</ObjectPageSubSection>\n\t\t\t\t</subSections>\n\t\t\t</ObjectPageSection>\n\n\t\t\t<ObjectPageSection title=\"Suppliers\">\n\t\t\t\t<subSections>\n\t\t\t\t\t<ObjectPageSubSection>\n\t\t\t\t\t\t<blocks>\n\t\t\t\t\t\t\t<m:Table\n\t\t\t\t\t\t\t\tid=\"suppliersTable\"\n\t\t\t\t\t\t\t\titems=\"{path : 'products>/ProductCollectionStats/Filters/1/values'}\">\n\t\t\t\t\t\t\t\t<m:columns>\n\t\t\t\t\t\t\t\t\t<m:Column/>\n\t\t\t\t\t\t\t\t</m:columns>\n\t\t\t\t\t\t\t\t<m:items>\n\t\t\t\t\t\t\t\t\t<m:ColumnListItem type=\"Navigation\">\n\t\t\t\t\t\t\t\t\t\t<m:cells>\n\t\t\t\t\t\t\t\t\t\t\t<m:ObjectIdentifier text=\"{products>text}\"/>\n\t\t\t\t\t\t\t\t\t\t</m:cells>\n\t\t\t\t\t\t\t\t\t</m:ColumnListItem>\n\t\t\t\t\t\t\t\t</m:items>\n\t\t\t\t\t\t\t</m:Table>\n\t\t\t\t\t\t</blocks>\n\t\t\t\t\t</ObjectPageSubSection>\n\t\t\t\t</subSections>\n\t\t\t</ObjectPageSection>\n\t\t</sections>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Unit Type in XML View - XML\nDESCRIPTION: This XML snippet shows how to use the custom `MeterType` defined in the previous snippet within an XML view. It demonstrates how to bind the `value`, `unit`, and `decimals` properties from a model to a `Label` control using the custom `MeterType`. This allows dynamic formatting of the unit based on the bound values.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/unit-formatting-8e618a8.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    xmlns:m=\"sap.m\"\n    xmlns:t=\"sap.ui.table\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns:core=\"sap.ui.core\"\n    core:require=\"{MeterType: 'sap/ui/core/samples/MeterType'}\">\n   ...\n        <t:Table rows='energyModel>/meters'>\n        ... <!-- here is more Table definition stuff, we cut this for simplicity -->\n\n        <!-- the third part of the binding is the number of decimals for this meter instance -->\n        <m:Label text=\"{parts:['energyModel>value', 'energyModel>unit', 'energyModel>decimals'], type: 'MeterType'}\"/>\n\n        ...\n        </t:Table>\n   ...\n\n```\n\n----------------------------------------\n\nTITLE: Checking Table Title Item Count Assertion\nDESCRIPTION: The `theTitleShouldDisplayTheTotalAmountOfItems` assertion checks that the table header displays the correct number of items. It uses `Opa5.waitFor` and the `I18NText` matcher to verify the `text` property of the `tableHeader` control. The `key` and `parameters` are used to check against the i18n resource bundle. If the title matches, the `success` function confirms the assertion; otherwise, an error message is displayed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-a-first-opa-test-1b47457.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntheTitleShouldDisplayTheTotalAmountOfItems: function () {\n\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\tid: \"tableHeader\",\n\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\tmatchers: new I18NText({\n\t\t\t\t\t\t\tkey: \"worklistTableTitleCount\",\n\t\t\t\t\t\t\tpropertyName: \"text\",\n\t\t\t\t\t\t\tparameters: [23]\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\tOpa5.assert.ok(true, \"The table header has 23 items\");\n\t\t\t\t\t\t},\n\t\t\t\t\t\terrorMessage: \"The table header does not contain the number of items: 23\"\n\t\t\t\t\t});\n\t\t\t\t}\n```\n\n----------------------------------------\n\nTITLE: Date Parsing with DateFormat (JavaScript)\nDESCRIPTION: This snippet demonstrates date parsing using `sap.ui.core.format.DateFormat.getDateInstance`. It shows how to parse a date string into a JavaScript Date object, using a specified pattern. The result is a Date object.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/date-format-91f2eba.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({\n    pattern: \"EEE, MMM d, yyyy\"\n});\n \noDateFormat.parse(\"Thu, Feb 10, 2022\") // Returns a JavaScript Date object\n```\n\n----------------------------------------\n\nTITLE: Activating an OPA5 Extension\nDESCRIPTION: This JavaScript code activates a custom OPA5 extension by using `Opa5.extendConfig`. It specifies the extension class name and provides application parameters that can be accessed by the extension during initialization.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/extensions-for-opa5-9c22d2a.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nOpa5.extendConfig({\n  extensions: [\"sap/ui/test/sample/CustomOpaExtension\"],\n  appParams: {\n    \"key\": \"value\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Configuration into Global Object (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates a safer approach to setting configuration options in `globalThis[\"sap-ui-config\"]`. It uses the nullish coalescing operator (`??=`) to ensure the object exists before assigning values and `Object.assign` to merge new configuration settings without overwriting existing ones.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-of-the-openui5-runtime-91f08de.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Be mindful of already existing configuration options\nglobalThis[\"sap-ui-config\"] ??= {};\nObject.assign(globalThis[\"sap-ui-config\"], {\n    language: \"en\",\n    \"animation-mode\": \"full\"\n});\n```\n\n----------------------------------------\n\nTITLE: Editing Draft with OData V4 Model in OpenUI5\nDESCRIPTION: This code snippet shows how to switch from an active version of an entity to a draft version using the OData V4 model in OpenUI5. It uses an operation binding for the *edit* action, inheriting expand and select properties, and replaces the row context with the sibling entity returned by the action. The `bReplaceWithRVC` flag in the `invoke` method is used to replace the row context *in situ*.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/draft-handling-with-the-odata-v4-model-40986e6.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nonEdit : function () {\n    var oObjectPage = this.byId(\"objectPage\"),\n        oActiveContext = oObjectPage.getBindingContext(),\n        that = this;\n \n    oActiveContext.getModel().bindContext(\"namespace.EditAction(...)\",\n        oActiveContext, {$$inheritExpandSelect : true})\n        .invoke(\"$auto\", false, null, /*bReplaceWithRVC*/true)\n        .then(function (oDraftContext) {\n            that.oActiveContext = oActiveContext; // remember for cancel\n            oObjectPage.setBindingContext(oDraftContext);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing View Model for Currency in Controller (OpenUI5)\nDESCRIPTION: This JavaScript snippet defines the `onInit` function of the `InvoiceList` controller. It creates a JSON model named `view` and sets the `currency` property to `EUR`. This model is then set on the view, making the currency code available for binding in the XML view. Dependencies include `sap/ui/core/mvc/Controller` and `sap/ui/model/json/JSONModel`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-20-data-types-dfe0465.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/model/json/JSONModel\"\n], (Controller, JSONModel) => {\n\t\"use strict\";\n\n\treturn Controller.extend(\"ui5.walkthrough.controller.InvoiceList\", {\n\t\tonInit() {\n\t\t\tconst oViewModel = new JSONModel({\n\t\t\t\tcurrency: \"EUR\"\n\t\t\t});\n\t\t\tthis.getView().setModel(oViewModel, \"view\");\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: ObjectPageDynamicHeaderTitle Configuration in XML View\nDESCRIPTION: This XML snippet demonstrates how to configure the `ObjectPageDynamicHeaderTitle` within an OpenUI5 XML view. It includes configurations for `breadcrumbs`, `expandedHeading`, `snappedHeading`, `expandedContent`, `snappedContent`, `content`, `actions`, and `navigationActions` to customize the header's appearance and functionality. It leverages various UI5 controls like `Breadcrumbs`, `FlexBox`, `Title`, `ObjectMarker`, `Button`, `Avatar`, `Text`, and `OverflowToolbar`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-headers-comparison-9c9d94f.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<headerTitle>\n\t<ObjectPageDynamicHeaderTitle primaryArea=\"Left\">\n\t\t<breadcrumbs>\n\t\t\t<m:Breadcrumbs currentLocationText=\"My Profile\">\n\t\t\t\t<m:Link text='My Company' />\n\t\t\t\t<m:Link text='My Department' />\n\t\t\t\t<m:Link text='Employees' />\n\t\t\t</m:Breadcrumbs>\n\t\t</breadcrumbs>\n\n\t\t<expandedHeading>\n\t\t\t<m:FlexBox wrap=\"Wrap\" fitContainer=\"true\" alignItems=\"Center\">\n\t\t\t\t<m:Title text=\"Denise Smith\" wrapping=\"true\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t<m:FlexBox wrap=\"NoWrap\" fitContainer=\"true\" alignItems=\"Center\" class=\"sapUiTinyMarginEnd\">\n\t\t\t\t\t<m:ObjectMarker type=\"Favorite\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t\t<m:ObjectMarker type=\"Flagged\"/>\n\t\t\t\t\t<m:Button icon=\"sap-icon://private\" type=\"Transparent\"/>\n\t\t\t\t\t<m:Button icon=\"sap-icon://arrow-down\" type=\"Transparent\"/>\n\t\t\t\t</m:FlexBox>\n\t\t\t</m:FlexBox>\n\t\t</expandedHeading>\n\n\t\t<snappedHeading>\n\t\t\t<m:FlexBox wrap=\"Wrap\" fitContainer=\"true\" alignItems=\"Center\">\n\t\t\t\t<m:FlexBox wrap=\"NoWrap\" fitContainer=\"true\" alignItems=\"Center\" class=\"sapUiTinyMarginEnd\">\n\t\t\t\t\t<f:Avatar src=\"../../sap/f/images/Woman_avatar_02.png\" displaySize=\"S\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t\t<m:Title text=\"Denise Smith\" wrapping=\"true\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t</m:FlexBox>\n\t\t\t\t<m:FlexBox wrap=\"NoWrap\" fitContainer=\"true\" alignItems=\"Center\" class=\"sapUiTinyMarginEnd\">\n\t\t\t\t\t<m:ObjectMarker type=\"Favorite\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t\t<m:ObjectMarker type=\"Flagged\"/>\n\t\t\t\t\t<m:Button icon=\"sap-icon://private\" type=\"Transparent\"/>\n\t\t\t\t\t<m:Button icon=\"sap-icon://arrow-down\" type=\"Transparent\"/>\n\t\t\t\t</m:FlexBox>\n\t\t\t</m:FlexBox>\n\t\t</snappedHeading>\n\n\t\t<expandedContent>\n\t\t\t<m:Text text=\"Senior Developer\" />\n\t\t</expandedContent>\n\n\t\t<snappedContent>\n\t\t   <m:Text text=\"Senior Developer\" />\n\t\t</snappedContent>\n\n\t\t<content>\n\t\t\t<m:OverflowToolbar>\n\t\t\t\t<m:Button text=\"KPI 1\" class=\"sapUiTinyMargin\"/>\n\t\t\t\t<m:Button text=\"KPI 2\" class=\"sapUiTinyMargin\"/>\n\t\t\t\t<m:Button text=\"KPI 3\" class=\"sapUiTinyMargin\"/>\n\t\t\t\t<m:Button text=\"KPI 4\" class=\"sapUiTinyMargin\"/>\n\t\t\t\t<m:Button text=\"KPI 5\" class=\"sapUiTinyMargin\"/>\n\t\t\t\t<m:Button text=\"KPI 6\" class=\"sapUiTinyMargin\"/>\n\t\t\t</m:OverflowToolbar>\n\t\t</content>\n\n\t\t<actions>\n\t\t\t<m:OverflowToolbarButton type=\"Transparent\" icon=\"sap-icon://copy\"/>\n\t\t\t<m:OverflowToolbarButton type=\"Transparent\" icon=\"sap-icon://delete\"/>\n\t\t\t<m:OverflowToolbarButton type=\"Transparent\" icon=\"sap-icon://add\"/>\n\t\t\t<m:OverflowToolbarButton type=\"Transparent\" icon=\"sap-icon://paste\"/>\n\t\t</actions>\n\n\t\t<navigationActions>\n\t\t\t<m:OverflowToolbarButton type=\"Transparent\" icon=\"sap-icon://full-screen\" tooltip=\"Enter Full Screen Mode\"/>\n\t\t\t<m:OverflowToolbarButton type=\"Transparent\" icon=\"sap-icon://decline\" tooltip=\"Close column\"/>\n\t\t</navigationActions>\n\n\t</ObjectPageDynamicHeaderTitle>\n</headerTitle>\n```\n\n----------------------------------------\n\nTITLE: Add Address Panel to XML View\nDESCRIPTION: This XML snippet adds a new panel to the OpenUI5 view to display address information using a FormattedText control. The `htmlText` property is bound to the JSON model properties `/address/street`, `/address/zip`, `/address/city`, and `/address/country`, demonstrating hierarchical data binding.  The `i18n>address` resource bundle text is used as the label for the address.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-binding-paths-accessing-properties-in-hierarchically-structured-models-9373793.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:form=\"sap.ui.layout.form\"\n\txmlns:l=\"sap.ui.layout\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Panel headerText=\"{i18n>panel1HeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n\t\t<form:SimpleForm editable=\"true\" layout=\"ColumnLayout\">\n\t\t\t<Label text=\"{i18n>firstName}\"/>\n\t\t\t<Input value=\"{/firstName}\" valueLiveUpdate=\"true\" width=\"200px\" enabled=\"{/enabled}\"/>\n\t\t\t<Label text=\"{i18n>lastName}\"/>\n\t\t\t<Input value=\"{/lastName}\" valueLiveUpdate=\"true\" width=\"200px\" enabled=\"{/enabled}\"/>\n\t\t\t<Label text=\"{i18n>enabled}\"/>\n\t\t\t<CheckBox selected=\"{/enabled}\"/>\n\t\t</form:SimpleForm>\n\t</Panel>\n\t<Panel headerText=\"{i18n>panel2HeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n\t\t<content>\n\t\t\t<l:VerticalLayout>\n\t\t\t\t<Label labelFor=\"address\" text=\"{i18n>address}:\"/>\n\t\t\t\t<FormattedText class=\"sapUiSmallMarginBottom\"\n\t\t\t\t\thtmlText=\"{/address/street}&lt;br&gt;{/address/zip} {/address/city}&lt;br&gt;{/address/country}\"\n\t\t\t\t\tid=\"address\" \n\t\t\t\t\twidth=\"200px\"/>\n\t\t\t</l:VerticalLayout>\n\t\t</content>\n\t</Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: reset Method in ProductRating (TypeScript)\nDESCRIPTION: This code defines the reset method to revert the control's state to its initial values.  It resets the value to 0, re-enables the RatingIndicator and Button, and updates the Label's text to the initial message from the i18n resource bundle.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n\treset(): void {\n\t\tconst resourceBundle = (this?.getModel(\"i18n\") as ResourceModel)?.getResourceBundle() as ResourceBundle;\n\t\t\n\t\tthis.setValue(0);\n\t\t(this.getAggregation(\"_label\") as Label).setDesign(\"Standard\");\n\t\t(this.getAggregation(\"_rating\") as RatingIndicator).setEnabled(true);\n\t\t(this.getAggregation(\"_label\") as Label).setText(resourceBundle.getText(\"productRatingLabelInitial\"));\n\t\t(this.getAggregation(\"_button\") as Button).setEnabled(true);\n\t}\n```\n\n----------------------------------------\n\nTITLE: Complex Unit Formatting with Style and Locale - JavaScript\nDESCRIPTION: Shows unit formatting with custom decimals and styles (short/long) using Locale and CLDR data. It initializes a unit format instance, setting decimals and style, and formats a number. Requires sap/ui/core/Locale and sap/ui/core/format/NumberFormat.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/unit-formatting-8e618a8.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// new unit formatter, decimals are limited to 2, and the output style is set to \"short\"\nsap.ui.require([\"sap/ui/core/Locale\", \"sap/ui/core/format/NumberFormat\"], function(Locale, NumberFormat) {\n   var en = new Locale(\"en\");\n   var oUnitFormat = NumberFormat.getUnitInstance({decimals:2, style:\"short\"}, en);\n   console.log(oUnitFormat.format(12345.678, \"speed-mile-per-hour\")); // output:  12.35K mph\n   console.log(oUnitFormat.parse(\"12.35K mph\")); // output: [12350, \"speed-mile-per-hour\"]\n});\n\n// new unit formatter, decimals are limited to 2, and the output style is set to \"long\"\nsap.ui.require([\"sap/ui/core/Locale\", \"sap/ui/core/format/NumberFormat\"], function(Locale, NumberFormat) {\n   var en = new Locale(\"en\");\n   var oUnitFormat = NumberFormat.getUnitInstance({decimals:2, style:\"long\"}, en);\n   console.log(oUnitFormat.format(12345.678, \"speed-mile-per-hour\")); // output: 12.35 thousand mph\n   console.log(oUnitFormat.parse(\"12.35 thousand mph\")); // output: [12350, \"speed-mile-per-hour\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Global XML View Preprocessor - JavaScript\nDESCRIPTION: This code snippet demonstrates how to register a preprocessor globally for all XML views using the `XMLView.registerPreprocessor` method.  This makes the preprocessor available to every view initialization. The `bSyncSupport` parameter indicates if synchronous processing is supported (false in this example).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/preprocessing-xml-views-48b81b9.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"XMLView\" required from module \"sap/ui/core/mvc/XMLView\"\nXMLView.registerPreprocessor(\"xml\", \"sap.ui.sample.samplepreprocessor\",\n/* bSyncSupport = */ false, {sampleInfo: \"this is a global preprocessor\",\nmoreInfo: \"…\"});\n```\n\n----------------------------------------\n\nTITLE: Initializing Router in Component - OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to initialize the router within an OpenUI5 component's `init` function.  It calls the parent's `init` function and then initializes the router using `this.getRouter().initialize()`.  This ensures the router is properly set up when the component is created.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initializing-and-accessing-a-routing-instance-acdb6cd.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/UIComponent\", ...\n], function (UIComponent, ...) {\n    \"use strict\";\n\n    return UIComponent.extend(\"YourComponentClassName\", {\n\n        ...,\n\n        init: function () {\n            ...\n            // call the init function of the parent\n            UIComponent.prototype.init.apply(this, arguments);\n            // this component should automatically initialize the router\n            this.getRouter().initialize();\n            ...\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Handle route matching and apply sorting\nDESCRIPTION: This code snippet shows how to handle the route matching event and apply sorting based on URL parameters. It extracts the `sortField` and `sortDescending` parameters from the URL and calls the `_applySorter` function to apply the sorting to the table. The search filter is also applied.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-13-make-table-sorting-bookmarkable-3975987.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/ViewSettingsDialog\",\n\t\"sap/m/ViewSettingsItem\"\n], function(\n\tBaseController,\n\tFilter,\n\tFilterOperator,\n\tSorter,\n\tViewSettingsDialog,\n\tViewSettingsItem\n) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverviewContent\", {\n\t\tonInit: function () {\n\t\t\t...\n\t\t},\n\t\t_onRouteMatched: function (oEvent) {\n\t\t\t// save the current query state\n\t\t\tthis._oRouterArgs = oEvent.getParameter(\"arguments\");\n\t\t\tthis._oRouterArgs[\"?query\"] = this._oRouterArgs[\"?query\"] || {};\n\t\t\tvar oQueryParameter = this._oRouterArgs[\"?query\"];\n\n\t\t\t// search/filter via URL hash\n\t\t\tthis._applySearchFilter(oQueryParameter.search);\n\n\t\t\t// sorting via URL hash\n\t\t\tthis._applySorter(oQueryParameter.sortField, oQueryParameter.sortDescending);\n\t\t\t\n\t\t},\n\t\t...\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Message using Messaging - SAPUI5 JavaScript\nDESCRIPTION: Demonstrates how to add a message using the `sap/ui/core/Messaging` module, which replaces the deprecated `sap.ui.getCore().getMessageManager().addMessage()`. The example shows how to create a new `Message` instance and add it using `Messaging.addMessage()`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// example, replacing legacy sap.ui.getCore().getMessageManager().addMessage()\nsap.ui.require([\n    \"sap/ui/core/Messaging\",\n    \"sap/ui/core/message/Message\"\n], (Messaging, Message) => {\n    Messaging.addMessage(new Message({\n        text: \"My message text\"\n    }));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Controller with Navigation Logic (OpenUI5 JavaScript)\nDESCRIPTION: This JavaScript snippet defines a `BaseController` that extends `sap.ui.core.mvc.Controller`. It includes a `getRouter` function to access the application's router and an `onNavBack` function to handle back navigation. The `onNavBack` function navigates to the previous page in the history or to the `appHome` route if no previous history exists. Dependencies include 'sap/ui/core/mvc/Controller', 'sap/ui/core/routing/History', and 'sap/ui/core/UIComponent'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-add-a-back-button-to-not-found-page-66670b0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\",\n\t\"sap/ui/core/UIComponent\"\n], function(Controller, History, UIComponent) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.nav.controller.BaseController\", {\n\n\t\tgetRouter : function () {\n\t\t\treturn UIComponent.getRouterFor(this);\n\t\t},\n\n\t\tonNavBack: function () {\n\t\t\tvar oHistory, sPreviousHash;\n\n\t\t\toHistory = History.getInstance();\n\t\t\tsPreviousHash = oHistory.getPreviousHash();\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\twindow.history.go(-1);\n\t\t\t} else {\n\t\t\t\tthis.getRouter().navTo(\"appHome\", {}, true /*no history*/);\n\t\t\t}\n\t\t}\n\n\t});\n\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic XML Fragment Name Binding in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to use a binding expression to dynamically determine the XML fragment name in OpenUI5. The fragment name is conditionally chosen based on the result of the `isMultiple` formatter function. It shows the usage of a ternary operator within the binding expression.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-fragments-65da02b.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<core:Fragment fragmentName=\"{= ${path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.isMultiple'} === 'true'\n    ? 'sap.ui.core.sample.ViewTemplate.scenario.TableFacet'\n    : 'sap.ui.core.sample.ViewTemplate.scenario.FormFacet' }\" type=\"XML\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Sales Order with Initial Items (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to create a sales order with initial items in the nested collection. It uses the `create` method of the ODataListBinding, passing in an object with the initial items data. It then retrieves the contexts of the initial items using `getAllCurrentContexts`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-an-entity-in-a-collection-c9723f8.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.oNewSalesOrderContext = oSalesOrderBinding.create({\n    SO_2_SOITEM : [\n        {ProductID : \"1\", Amount : \"1\", Unit : \"EA\"},\n        {ProductID : \"2\", Amount : \"3.7\", Unit : \"kg\"}\n    ]\n});\naInitialItemsContexts = this.byId(\"items\").getBinding(\"items\").getAllCurrentContexts();\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller Hook Call in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to implement a hook call within a standard OpenUI5 controller. It checks if an extension has implemented the hook function 'onDataReceived' and calls it with the data object 'oSomeData' as an argument. It is essential to perform this check to avoid errors when no extension is present. The code also suggests implementing sanity checks for return values.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/providing-hooks-in-the-standard-controller-8fbf4e7.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ...data object oSomeData has been received, possibly from an Ajax response...\n   if (this.onDataReceived) {         // check whether any extension has implemented the hook...\n      this.onDataReceived(oSomeData); // ...and call it\n   }\n   // ...continue working with the (now possibly modified) data...\n```\n\n----------------------------------------\n\nTITLE: Declaring OData V4 Binding in an XML View\nDESCRIPTION: This XML code snippet shows how to declare a binding for a control property within an XML view. The `items` property of a `Table` control is bound to the `/SalesOrderList` path. Binding parameters like `$expand` and `$filter`, as well as binding events like `dataReceived`, are specified within the binding expression to further configure the OData V4 binding. The filter condition uses 'ge' operator.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-bindings-95cf4b1.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Table items=\"{path : '/SalesOrderList', parameters : { $expand : 'SO_2_BP', $filter : 'BuyerName ge \\'M\\'', ...}, events : {dataReceived : '.onDataEvents', ... } }\">\n\n```\n\n----------------------------------------\n\nTITLE: Metadata Property Binding in XML View - OpenUI5\nDESCRIPTION: This snippet illustrates property metadata binding for an OData service in an OpenUI5 XML view. The `maxLength` property of an `Input` control is bound to the `maxLength` attribute defined in the OData metadata for the `ZipCode` property of the `Company` entity. This allows the control to automatically adopt the maximum length defined in the OData service's metadata.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/binding-syntax-e2e6f41.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<Input maxLength=\"{/#Company/ZipCode/@maxLength}\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Cache Buster in HTML - OpenUI5\nDESCRIPTION: This HTML snippet demonstrates how to configure the Application Cache Buster in an OpenUI5 application. The `data-sap-ui-app-cache-buster` attribute is added to the `script` tag for the SAPUI5 bootstrap.  The value `./` specifies the base URL for the application, ensuring that the cache buster considers the local application files. Multiple base URLs can be passed as a comma-separated list.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/application-cache-buster-configuration-c1c3e2f.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n  src=\"resources/sap-ui-core.js\"\n  data-sap-ui-libs=\"sap.ui.core,sap.m,sap.ui.table\"\n  data-sap-ui-theme=\"sap_horizon\"\n  data-sap-ui-app-cache-buster=\"./\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding a button to open a dialog - XML\nDESCRIPTION: This XML snippet adds a button to the HelloPanel view that triggers the onOpenDialog event in the controller. The button's text is bound to the i18n model, and it uses the sapUiSmallMarginEnd class for styling.  An id is also included for OPA testing.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-16-dialogs-and-fragments-4da7298.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.HelloPanel\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Panel\n      headerText=\"{i18n>helloPanelTitle}\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\" >\n      <content>\n      <Button\n         id=\"helloDialogButton\"\n         text=\"{i18n>openDialogButtonText}\"\n         press=\".onOpenDialog\"\n         class=\"sapUiSmallMarginEnd\"/>\n      <Button\n         text=\"{i18n>showHelloButtonText}\"\n         press=\".onShowHello\"\n         class=\"myCustomButton\"/>\n      <Input\n         value=\"{/recipient/name}\"\n         valueLiveUpdate=\"true\"\n         width=\"60%\"/>\n      <FormattedText\n         htmlText=\"Hello {/recipient/name}\"\n         class=\"sapUiSmallMargin sapThemeHighlight-asColor myCustomText\"/>\n      </content>\n   </Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining an App Controller - JavaScript\nDESCRIPTION: This JavaScript code defines the application controller, extending the `sap/ui/core/mvc/Controller`. It includes an `onShowHello` function that is triggered when the button is pressed. The function shows a native JavaScript alert box with the message \"Hello World\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-controllers-50579dd.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n   \"sap/ui/core/mvc/Controller\"\n], (Controller) => {\n   \"use strict\";\n\n   return Controller.extend(\"ui5.walkthrough.controller.App\", {\n      onShowHello() {\n         // show a native JavaScript alert\n         alert(\"Hello World\");\n      }\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Simulating Drag and Drop with OPA5\nDESCRIPTION: This snippet demonstrates how to simulate drag and drop operations using OPA5 with the `Drag` and `Drop` actions. It locates an item to drag using `BindingPath`, starts the drag operation, locates the drop target, and then performs the drop action, specifying whether to drop before or after the target.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/simulating-user-interactions-on-controls-8615a0b.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Find the item to drag\noOpa.waitFor({\n    controlType: \"sap.m.StandardListItem\",\n    matchers: new BindingPath({\n        path: \"/ProductCollection/1\"\n    }),\n    // Start the dragging\n    actions: new Drag()\n});\n\n// Find another item on which to drop the dragged item\noOpa.waitFor({\n    controlType: \"sap.m.StandardListItem\",\n    matchers: new BindingPath({\n        path: \"/ProductCollection/5\"\n    }),\n    // Finish dragging and drop the item right before this one.\n    // In the end, the item with binding context path \"/ProductCollection/1\" should appear right on top of the item with\n    // binding context path \"/ProductCollection/5\"\n    actions: new Drop({\n        before: true\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Control without ID using Matchers in OPA5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to retrieve a control that doesn't have an explicit ID using OPA5. It uses a custom matcher to filter controls based on their properties (in this case, the 'title' property of an `sap.m.ObjectHeader`). The `success` function then performs assertions on the retrieved control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn new Opa5().waitFor({\n    controlType : \"sap.m.ObjectHeader\",\n    viewName : \"Detail\",\n    matchers : new sap.ui.test.matchers.PropertyStrictEquals({\n                                 name : \"title\",\n                                 value: \"myTitle\"\n                           }),\n    success : function (aObjectHeaders) {\n        Opa5.assert.strictEqual(aObjectHeaders.length, 1, \"was there was only one Object header with this title on the page\");\n        Opa5.assert.strictEqual(aObjectHeaders[0].getTitle(), \"myTitle\", \"was on the correct Title\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Data Structure for List Binding\nDESCRIPTION: This JSON structure represents a collection of company objects, each with properties such as name, city, state, county, and revenue. It serves as the data source for list binding in OpenUI5.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/list-binding-aggregation-binding-91f0577.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\tcompanies : [\n\t\t{\n\t\t\tname : \"Acme Inc.\",\n\t\t\tcity: \"Belmont\",\n\t\t\tstate: \"NH\",\n\t\t\tcounty: \"Belknap\",\n\t\t\trevenue : \"123214125.34\"  \n\t\t},{\n\t\t\tname : \"Beam Hdg.\",\n\t\t\tcity: \"Hancock\",\n\t\t\tstate: \"NH\",\n\t\t\tcounty: \"Belknap\",\n\t\t\trevenue : \"3235235235.23\"  \n\t\t},{\n\t\t\tname : \"Carot Ltd.\",\n\t\t\tcity: \"Cheshire\",\n\t\t\tstate: \"NH\",\n\t\t\tcounty: \"Sullivan\",\n\t\t\trevenue : \"Not Disclosed\"  \n\t\t}]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Class Definition (Good)\nDESCRIPTION: This CSS snippet defines a custom CSS class, demonstrating the correct way to style OpenUI5 controls.  Instead of directly modifying OpenUI5's classes, a new, namespaced class is created and applied to the control.  This approach improves maintainability and reduces the risk of conflicts.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/css-styling-issues-9d87f92.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.poaAppError {\n\tfont-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Function Import Call - JavaScript\nDESCRIPTION: This JavaScript snippet mocks the function import call `/FindUpcomingMeetups` in `mockserver.js`. It intercepts the request, filters the `Meetups` entity set based on the `EventDate` being greater than or equal to today's date, and responds with the filtered data. Requires jQuery and UI5Date.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-calling-a-function-import-95e5b87.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/thirdparty/jquery\",\n    \"sap/ui/core/date/UI5Date\",\n    \"sap/ui/core/util/MockServer\",\n    \"sap/base/Log\"\n], (jQuery, UI5Date, MockServer, Log) => {\n    \"use strict\";\n    return {\n        /**\n         * Initializes the mock server.\n         * You can configure the delay with the URL parameter \"serverDelay\".\n         * The local mock data in this folder is returned instead of the real data for testing.\n         * @public\n         */\n        init() {\n            // create\n            const oMockServer = new MockServer({rootUri: \"/\"});\n\n            oMockServer.simulate(\"../localService/metadata.xml\", {\n                sMockdataBaseUrl: \"../localService/mockdata\",\n                bGenerateMissingMockData: true\n            });\n\n            // handling mocking a function import call step\n            const aRequests = oMockServer.getRequests();\n            aRequests.push({\n                method: \"GET\",\n                path: new RegExp(\"FindUpcomingMeetups(.*)\"),\n                response: (oXhr) => {\n                    Log.debug(\"Incoming request for FindUpcomingMeetups\");\n                    const oToday = UI5Date.getInstance();\n                    oToday.setHours(0); // or oToday.toUTCString(0) due to timezone differences\n                    oToday.setMinutes(0);\n                    oToday.setSeconds(0);\n                    // the mock server only works with sap.jQuery.ajax and async: false. But the request does not\n                    // actually go to a server, so this does not block the main thread.\n                    jQuery.ajax({\n                        url: `/Meetups?$filter=EventDate ge datetime'${oToday.toISOString()}'`,\n                        dataType : 'json',\n                        async: false,\n                        success : (oData) => {\n                            oXhr.respondJSON(200, {}, JSON.stringify(oData));\n                        }\n                    });\n                    return true;\n                }\n            });\n            oMockServer.setRequests(aRequests);\n            // handling custom URL parameter step\n            const fnCustom = (oEvent) => {\n                const oXhr = oEvent.getParameter(\"oXhr\");\n                if (oXhr?.url.includes(\"first\")) {\n                    oEvent.getParameter(\"oFilteredData\").results.splice(3, 100);\n                }\n            };\n            oMockServer.attachAfter(\"GET\", fnCustom, \"Meetups\");\n            // start\n            oMockServer.start();\n            Log.info(\"Running the app with mock data\");\n        }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Loading XML Fragments using loadFragment in OpenUI5\nDESCRIPTION: This code snippet shows how to load an XML fragment within an OpenUI5 controller using the loadFragment() method. It specifies the fragment's resource name, which maps to the fragment file URL. The loadFragment API uses 'XML' as the default fragment type. The framework then handles the lifecycle for the fragment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/instantiation-of-fragments-04129b2.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.loadFragment({\n    name: \"myapp.fragments.MyXMLFragment\"\n});\n```\n\n----------------------------------------\n\nTITLE: Deferred Function Invocation in Controller (OData V4)\nDESCRIPTION: This JavaScript code snippet shows how to invoke a deferred function binding from a controller. The `getObjectBinding()` method is used to access the binding of the `getNextAvailableItem` form, and the `invoke()` method is called to execute the function. This is called within the `onGetNextAvailableItem` event handler.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nonGetNextAvailableItem : function (oEvent) {\n    this.getView().byId(\"getNextAvailableItem\").getObjectBinding().invoke();\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming sap:creatable to InsertRestrictions\nDESCRIPTION: This snippet illustrates how the `sap:creatable` annotation in OData V2 is transformed into the `Org.OData.Capabilities.V1.InsertRestrictions` annotation in OData V4, specifically setting the `Insertable` property to `false` when `sap:creatable` is set to `false`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\nsap:creatable = \"false\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Capabilities.V1.InsertRestrictions\": { \"Insertable\" : { \"Bool\" : \"false\" } }\n```\n\n----------------------------------------\n\nTITLE: Binding Property Using Type Class in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to bind a property using the type class object. It shows how to bind the `value` property of a `TextField` and `Input` to a data model path using `StringType` and `Float` types, respectively. It utilizes format options to configure the `Float` type.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// \"StringType\" required from module \"sap/ui/model/type/String\"\n// \"Input\" required from module \"sap/m/Input\"\n// \"Float\" required from module \"sap/ui/model/type/Float\"\n\noTextField.bindProperty(\"value\", \"/company/name\", StringType);\n\noControl = new Input({\n    value: {\n        path: \"/company/revenue\",\n        type: Float,\n        formatOptions: {\n            minFractionDigits: 2,\n            maxFractionDigits: 2\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Invoice List - InvoiceList.view.xml\nDESCRIPTION: This XML defines a List control that displays invoice data. The `items` aggregation is bound to the \"/Invoices\" path of the named \"invoice\" model.  The ObjectListItem template is repeated for each invoice, displaying the Quantity and ProductName. The headerText is bound to the i18n property \"invoiceListTitle\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-19-aggregation-binding-bf71375.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <List\n      headerText=\"{i18n>invoiceListTitle}\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\"\n      items=\"{invoice>/Invoices}\" >\n      <items>\n         <ObjectListItem\n            title=\"{invoice>Quantity} x {invoice>ProductName}\"/>\n      </items>\n   </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Actions in Detail Controller (JavaScript)\nDESCRIPTION: This code modifies the `Detail.controller.js` file to implement the handlers for the navigation actions added in the detail view. It defines functions to handle full-screen, exit full-screen, and close column actions, which navigate to different routes based on the current layout state, obtained from the model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-using-the-flexible-column-layout-semantic-helper-276f001.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function (Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.Detail\", {\n\t\tonInit: function () {\n\t\t\tthis.oOwnerComponent = this.getOwnerComponent();\n\n\t\t\tthis.oRouter = this.oOwnerComponent.getRouter();\n\t\t\tthis.oModel = this.oOwnerComponent.getModel();\n\n\t\t\tthis.oRouter.getRoute(\"list\").attachPatternMatched(this._onProductMatched, this);\n\t\t\tthis.oRouter.getRoute(\"detail\").attachPatternMatched(this._onProductMatched, this);\n\t\t\tthis.oRouter.getRoute(\"detailDetail\").attachPatternMatched(this._onProductMatched, this);\n\t\t},\n\n\t\tonSupplierPress: function (oEvent) {\n\t\t\tvar supplierPath = oEvent.getSource().getBindingContext(\"products\").getPath(),\n\t\t\t\tsupplier = supplierPath.split(\"/\").slice(-1).pop(),\n\t\t\t\toNextUIState;\n\n\t\t\tthis.oOwnerComponent.getHelper().then(function (oHelper) {\n\t\t\t\toNextUIState = oHelper.getNextUIState(2);\n\t\t\t\tthis.oRouter.navTo(\"detailDetail\", {\n\t\t\t\t\tlayout: oNextUIState.layout,\n\t\t\t\t\tsupplier: supplier,\n\t\t\t\t\tproduct: this._product\n\t\t\t\t});\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t_onProductMatched: function (oEvent) {\n\t\t\tthis._product = oEvent.getParameter(\"arguments\").product || this._product || \"0\";\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: \"/ProductCollection/\" + this._product,\n\t\t\t\tmodel: \"products\"\n\t\t\t});\n\t\t},\n\n\t\tonEditToggleButtonPress: function() {\n\t\t\tvar oObjectPage = this.getView().byId(\"ObjectPageLayout\"),\n\t\t\t\tbCurrentShowFooterState = oObjectPage.getShowFooter();\n\n\t\t\toObjectPage.setShowFooter(!bCurrentShowFooterState);\n\t\t},\n\n\t\thandleFullScreen: function () {\n\t\t\tvar sNextLayout = this.oModel.getProperty(\"/actionButtonsInfo/midColumn/fullScreen\");\n\t\t\tthis.oRouter.navTo(\"detail\", {layout: sNextLayout, product: this._product});\n\t\t},\n\n\t\thandleExitFullScreen: function () {\n\t\t\tvar sNextLayout = this.oModel.getProperty(\"/actionButtonsInfo/midColumn/exitFullScreen\");\n\t\t\tthis.oRouter.navTo(\"detail\", {layout: sNextLayout, product: this._product});\n\t\t},\n\n\t\thandleClose: function () {\n\t\t\tvar sNextLayout = this.oModel.getProperty(\"/actionButtonsInfo/midColumn/closeColumn\");\n\t\t\tthis.oRouter.navTo(\"list\", {layout: sNextLayout});\n\t\t},\n\n\t\tonExit: function () {\n\t\t\tthis.oRouter.getRoute(\"list\").detachPatternMatched(this._onProductMatched, this);\n\t\t\tthis.oRouter.getRoute(\"detail\").detachPatternMatched(this._onProductMatched, this);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Navigation Handler in Home Controller - JavaScript\nDESCRIPTION: This JavaScript snippet extends the `BaseController` to define the `Home` controller. It includes the `onNavToEmployeeOverview` function, which uses the router to navigate to the `employeeOverview` route when the corresponding button is pressed. The getRouter() method is inherited from the BaseController.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-assign-multiple-targets-b01840e.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.Home\", {\n\t\t...\n\t\tonNavToEmployees : function () {\n\t\t\tthis.getRouter().navTo(\"employeeList\");\n\t\t},\n\t\tonNavToEmployeeOverview : function ()  {\n\t\t\tthis.getRouter().navTo(\"employeeOverview\");\n\t\t}\n\n\t});\n});\n\n```\n\n----------------------------------------\n\nTITLE: Initializing ResourceModel and Accessing i18n Texts - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a `ResourceModel` in the `onInit` function of the controller and how to access the i18n texts. It creates a new `ResourceModel` pointing to the `i18n.properties` file, sets it on the view as a named model 'i18n', and then retrieves the 'helloMsg' text using `getResourceBundle` and `getText` to display a greeting with the recipient's name.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-translatable-texts-df86bfb.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n   \"sap/ui/core/mvc/Controller\",\n   \"sap/m/MessageToast\",\n   \"sap/ui/model/json/JSONModel\",\n   \"sap/ui/model/resource/ResourceModel\"\n], (Controller, MessageToast, JSONModel, ResourceModel) => {\n   \"use strict\";\n\n   return Controller.extend(\"ui5.walkthrough.controller.App\", {\n     onInit() {\n         // set data model on view\n         const oData = {\n            recipient : {\n               name : \"World\"\n            }\n         };\n         const oModel = new JSONModel(oData);\n         this.getView().setModel(oModel);\n\n         // set i18n model on view\n         const i18nModel = new ResourceModel({\n            bundleName: \"ui5.walkthrough.i18n.i18n\"\n         });\n         this.getView().setModel(i18nModel, \"i18n\");\n      },\n\n      onShowHello() {\n         // read msg from i18n model\n         const oBundle = this.getView().getModel(\"i18n\").getResourceBundle();\n         const sRecipient = this.getView().getModel().getProperty(\"/recipient/name\");\n         const sMsg = oBundle.getText(\"helloMsg\", [sRecipient]);\n\n         // show message\n         MessageToast.show(sMsg);\n      }\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Transfer OData V4 Dates to JSON Model - JavaScript\nDESCRIPTION: This JavaScript code transfers dates, times, and timestamps from an OData V4 model to a JSON model. It retrieves the OData V4 context properties `Date`, `DateTimeOffset`, and `TimeOfDay`, and creates a new JSON model with these values. It assumes that the OData V4 properties are already in the desired string format. It returns a JSON model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ntransferDatesTimesAndTimestampsFromODataV4ModelToJSONModel(oContext) {\n    // assume \"oContext\" is an OData V4 context referencing an entity with the properties \n    // \"Date\" (date), \"DateTimeOffset\" (timestamp) and \"TimeOfDay\" (time)\n    return new JSONModel({\n        Date: oContext.getProperty(\"Date\"),\n        DateTimeOffset: oContext.getProperty(\"DateTimeOffset\"),\n        TimeOfDay: oContext.getProperty(\"TimeOfDay\")\n    });\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Points in XML View\nDESCRIPTION: This XML snippet demonstrates how to define extension points within an OpenUI5 XML view. The `<core:ExtensionPoint>` tag is used to mark the positions where custom content can be inserted. The `name` attribute uniquely identifies each extension point.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-extension-403c050.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns=\"sap.m\"  xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\">\n    <core:ExtensionPoint name=\"extension1\" />\n    <TextView text=\"SAP View 'Sub2' - this one is extended by the customer and there should be a button after this text\"></TextView>    \n    <core:ExtensionPoint name=\"extension2\" />   \n    <core:ExtensionPoint name=\"extension3\" />   \n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Controller Definition with Search and Sort Functions (JavaScript)\nDESCRIPTION: This JavaScript code defines the controller for the application view, including event handlers for searching (`onSearch`) and sorting (`onSort`) the data displayed in a table. The `onSearch` function filters the table based on the last name, while `onSort` toggles between no sorting, ascending, and descending order based on the `LastName` field. It also initializes the appView model to store the sort order.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-filtering-sorting-and-counting-426ff31.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/m/MessageToast\",\n\t\"sap/m/MessageBox\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/FilterType\",\n\t\"sap/ui/model/json/JSONModel\"\n], function (Controller, MessageToast, MessageBox, Sorter, Filter, FilterOperator, FilterType, JSONModel) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.core.tutorial.odatav4.controller.App\", {\n\n\t\tonInit : function () {\n\t\t\tvar oJSONData = {\n\t\t\t\tbusy : false,\n\t\t\t\torder : 0\n\t\t\t};\n\t\t\tvar oModel = new JSONModel(oJSONData);\n\t\t\tthis.getView().setModel(oModel, \"appView\");\n\t\t},\n\n\t\tonRefresh : function () {\n\t\t...\n\t\t},\n\n\t\t\t\t\t\tonSearch : function () {\n\t\t\tvar oView = this.getView(),\n\t\t\t\tsValue = oView.byId(\"searchField\").getValue(),\n\t\t\t\toFilter = new Filter(\"LastName\", FilterOperator.Contains, sValue);\n\n\t\t\toView.byId(\"peopleList\").getBinding(\"items\").filter(oFilter, FilterType.Application);\n\t\t},\n\n\t\tonSort : function () {\n\t\t\tvar oView = this.getView(),\n\t\t\t\taStates = [undefined, \"asc\", \"desc\"],\n\t\t\t\taStateTextIds = [\"sortNone\", \"sortAscending\", \"sortDescending\"],\n\t\t\t\tsMessage,\n\t\t\t\tiOrder = oView.getModel(\"appView\").getProperty(\"/order\");\n\n\t\t\tiOrder = (iOrder + 1) % aStates.length;\n\t\t\tvar sOrder = aStates[iOrder];\n\n\t\t\toView.getModel(\"appView\").setProperty(\"/order\", iOrder);\n\t\t\toView.byId(\"peopleList\").getBinding(\"items\").sort(sOrder && new Sorter(\"LastName\", sOrder === \"desc\"));\n\n\t\t\tsMessage = this._getText(\"sortMessage\", [this._getText(aStateTextIds[iOrder])]);\n\t\t\tMessageToast.show(sMessage);\n\t\t\t},\n\n\t\t_getText : function (sTextId, aArgs) {\n\t\t...\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Extended HoverButton Control (JavaScript)\nDESCRIPTION: This code demonstrates how to create an instance of the extended 'HoverButton' control and attach an event handler to the 'hover' event. When the button is hovered, the event handler displays an alert message with the button's ID. The button is then placed on the page using the 'placeAt' method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/extending-buttons-with-additional-events-d5b756b.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myControl = new HoverButton(\"myBtn\", {\n      text: \"Hover Me\",\n      hover: function(evt) {\n          alert(\"Button \" + evt.getSource().getId() + \" was hovered.\");\n      }\n  });\n\n  myControl.placeAt(\"content\");\n```\n\n----------------------------------------\n\nTITLE: Initializing FlexBox with items aggregation - JavaScript\nDESCRIPTION: This code snippet shows how to create a FlexBox control and add Button controls to it using the items aggregation of a configuration object. It also requires the sap/m/FlexBox and sap/m/Button modules. The buttons are defined as an array of items within the FlexBox constructor.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/getting-started-with-flexbox-988d2c7.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// FlexBox required from \"sap/m/FlexBox\"\n// Button required from \"sap/m/Button\"\n\nvar oMyFlexbox = new FlexBox({\n    items: [\n        new Button({text: \"Button 1\"}),\n        new Button({text: \"Button 2\"})\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Delete Event in List - OpenUI5 (JavaScript)\nDESCRIPTION: This example demonstrates how to define a List control with 'Delete' mode and bind the 'delete' event to a handler function named 'handleDelete'. The list is populated using data from '/ProductCollection'.  The `enableBusyIndicator` is set to `true` to display a busy indicator during data loading.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/list-and-table-events-35b8a94.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<List\n      id=\"list\"\n      mode=\"Delete\"\n      delete=\"handleDelete\"\n      enableBusyIndicator=\"true\"\n      headerText=\"Products\"\n      growing=\"true\"\n      items=\"{\n           path: '/ProductCollection'\n      }\" >\n...\n\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting OData V2 Mock Server - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize and start the OData V2 mock server in an OpenUI5 application. It creates a new MockServer instance, simulates the OData service based on a metadata file, and starts the mock server to intercept HTTP calls. Requires 'model/Config' for mock mode check and service URL, 'sap/ui/core/util/MockServer' for mock server functionality.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-mock-data-with-the-odata-v2-mock-server-a428d41.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"model/Config\",\n    \"sap/ui/app/Application\",\n    \"sap/ui/core/util/MockServer\"], function(ModelConfig, BaseApplication, MockServer) {\n    return BaseApplication.extend(\"Application\", {\n        init : function () {\n            ...\n            // start mock server\n            if (ModelConfig.isMock) {\n                const oMockServer = new MockServer({\n                    rootUri: ModelConfig.getServiceUrl();\n                });\n                oMockServer.simulate(\"model/metadata.xml\", \"model/\");\n                oMockServer.start();\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript List Binding - ComboBox Initialization (OpenUI5)\nDESCRIPTION: This JavaScript snippet shows how to define list binding for an OpenUI5 `ComboBox` using the `items` aggregation within the constructor's settings. It creates a `ListItem` template and binds the `ComboBox` to the `/companies` path, using the template to render each item. TemplateShareable is also set to false.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/list-binding-aggregation-binding-91f0577.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar oItemTemplate = new sap.ui.core.ListItem({text:\"{name}\"});\noComboBox = new sap.m.ComboBox({\n\titems: {\n\t\tpath: \"/companies\",      //no curly brackets here!\n\t\ttemplate: oItemTemplate,\n\t\ttemplateShareable: false\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Unit Formatting with Plural Forms (Arabic) - JavaScript\nDESCRIPTION: Demonstrates unit formatting in Arabic, which handles plural forms differently. It formats a number with the 'angle-revolution' unit and handles the output for a single revolution. Requires sap/ui/core/Locale and sap/ui/core/format/NumberFormat.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/unit-formatting-8e618a8.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Locale\", \"sap/ui/core/format/NumberFormat\"], function(Locale, NumberFormat) {\n   var ar = new Locale(\"ar\");\n   var oUnitFormat = NumberFormat.getUnitInstance({decimals:2, style:\"long\"}, ar);\n   console.log(oUnitFormat.format(123456.789, \"angle-revolution\")); // 123.46 ألف دورة\n   console.log(oUnitFormat.format(1, \"angle-revolution\")); // دورة\n});\n```\n\n----------------------------------------\n\nTITLE: Programmatically Apply Sorting Personalization State - JavaScript\nDESCRIPTION: This code snippet demonstrates how to programmatically apply a sort state to an OpenUI5 table using the personalization engine. It retrieves the current personalization state, modifies the Sorter property by updating the `sorted` state of existing sorters and pushing a new sorter based on the column and sort order selected by the user, and then applies the modified state to persist the changes via VariantManagement. The code relies on `sap.m.p13n.Engine` and `sap.ui.table.library`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/enablement-of-personalization-with-variant-management-f280251.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nonSort: function(oEvt) {\n\n    var oTable = this.byId(\"persoTable\");\n    var sAffectedProperty = oEvt.getParameter(\"column\").getSortProperty();\n    var sSortOrder = oEvt.getParameter(\"sortOrder\");\n\n    //Apply the state programatically on sorting through the column menu\n    //1) Retrieve the current personalization state\n    Engine.getInstance().retrieveState(oTable).then(function(oState){\n\n        //2) Modify the existing personalization state\n        oState.Sorter.forEach(function(oSorter){\n            oSorter.sorted = false;\n        });\n        oState.Sorter.push({\n            key: sAffectedProperty,\n            descending:  sSortOrder === tableLibrary.SortOrder.Descending\n        });\n\n        //3) Apply the modified personalization state to persist it in the VariantManagement\n        Engine.getInstance().applyState(oTable, oState);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Resolve Entity Type using gotoEntityType in XML Template\nDESCRIPTION: This XML snippet shows how to use the `gotoEntityType` helper function within a `<template:with>` instruction. It navigates to an entity type using its qualified name, which is fetched from the specified path and stores the result in the `entityType` variable. The `path` should resolve to the qualified name of the entity type.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/annotation-helper-dbec058.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n    \n    <template:with path=\"entitySet>entityType\" helper=\"sap.ui.model.odata.AnnotationHelper.gotoEntityType\" var=\"entityType\">\n    \n```\n\n----------------------------------------\n\nTITLE: Formatting Price with Currency Type in XML View (OpenUI5)\nDESCRIPTION: This XML snippet defines the invoice list item with price formatting using the OpenUI5 `Currency` data type. It utilizes the `core:require` attribute to load the `Currency` type and binds the `number` property to both the `ExtendedPrice` from the `invoice` model and the `currency` from the `view` model.  The `showMeasure` format option is set to `false` to hide the currency code in the number, as it's displayed separately.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-20-data-types-dfe0465.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <List\n        headerText=\"{i18n>invoiceListTitle}\"\n        class=\"sapUiResponsiveMargin\"\n        width=\"auto\"\n        items=\"{invoice>/Invoices}\">\n        <items>\n            <ObjectListItem\n                core:require=\"{\n                    Currency: 'sap/ui/model/type/Currency'\n                }\"\n                title=\"{invoice>Quantity} x {invoice>ProductName}\"\n                number=\"{\n                    parts: [\n                        'invoice>ExtendedPrice',\n                        'view>/currency'\n                    ],\n                    type: 'Currency',\n                    formatOptions: {\n                        showMeasure: false\n                    }\n                }\"\n                numberUnit=\"{view>/currency}\"/>\n        </items>\n    </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: OPA5 Page Object - App (JavaScript)\nDESCRIPTION: This snippet defines a page object for the application using OPA5. It contains actions, such as pressing the \"Say Hello With Dialog\" button, and assertions, such as verifying the existence of the Hello dialog. The `waitFor` function is used to handle asynchronicity.  Dependencies: sap/ui/test/Opa5, sap/ui/test/actions/Press.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-28-integration-test-with-opa-9bf4dce.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/test/Opa5\",\n\t\"sap/ui/test/actions/Press\"\n], (Opa5, Press) => {\n\t\"use strict\";\n\n\tconst sViewName = \"ui5.walkthrough.view.HelloPanel\";\n\n\tOpa5.createPageObjects({\n\t\tonTheAppPage: {\n\t\t\tactions: {\n\t\t\t\tiPressTheSayHelloWithDialogButton() {\n\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\tid: \"helloDialogButton\",\n\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\tactions: new Press(),\n\t\t\t\t\t\terrorMessage: \"Did not find the 'Say Hello With Dialog' button on the HelloPanel view\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tassertions: {\n\t\t\t\tiShouldSeeTheHelloDialog() {\n\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\tcontrolType: \"sap.m.Dialog\",\n\t\t\t\t\t\tsuccess() {\n\t\t\t\t\t\t\t// we set the view busy, so we need to query the parent of the app\n\t\t\t\t\t\t\tOpa5.assert.ok(true, \"The dialog is open\");\n\t\t\t\t\t\t},\n\t\t\t\t\t\terrorMessage: \"Did not find the dialog control\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.setObject with sap/base/util/ObjectPath in JavaScript\nDESCRIPTION: This snippet shows how to replace jQuery.sap.setObject with the sap/base/util/ObjectPath.set method. The object path is automatically created if it does not exist.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nObjectPath.set(\"some.object.path\", \"myValue\", window.myLib);\n```\n\n----------------------------------------\n\nTITLE: Implementing the Product List Factory Function (JavaScript)\nDESCRIPTION: This JavaScript code snippet implements the `productListFactory` function within the `App.controller.js` file. The function dynamically generates either a `sap.m.StandardListItem` or an `sap.m.ObjectListItem` based on the 'UnitsInStock' and 'Discontinued' properties of the data context. If the product is out of stock, it adds an `ObjectAttribute` indicating this status.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-aggregation-binding-using-a-factory-function-284a036.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/m/library\",\n\t\"sap/m/ObjectAttribute\",\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/model/type/Currency\"\n], (mobileLibrary, ObjectAttribute, Controller, Currency) => {\n\t...\n\t\tproductListFactory(sId, oContext) {\n\t\t\tlet oUIControl;\n\n\t\t\t// Decide based on the data which dependent to clone\n\t\t\tif (oContext.getProperty(\"UnitsInStock\") === 0 && oContext.getProperty(\"Discontinued\")) {\n\t\t\t\t// The item is discontinued, so use a StandardListItem\n\t\t\t\toUIControl = this.byId(\"productSimple\").clone(sId);\n\t\t\t} else {\n\t\t\t\t// The item is available, so we will create an ObjectListItem\n\t\t\t\toUIControl = this.byId(\"productExtended\").clone(sId);\n\n\t\t\t\t// The item is temporarily out of stock, so we will add a status\n\t\t\t\tif (oContext.getProperty(\"UnitsInStock\") < 1) {\n\t\t\t\t\toUIControl.addAttribute(new ObjectAttribute({\n\t\t\t\t\t\ttext : {\n\t\t\t\t\t\t\tpath: \"i18n>outOfStock\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn oUIControl;\n\t\t}\n\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Deep Create Example\nDESCRIPTION: This code snippet demonstrates the creation of a root entity (sales order) and a subentity (sales order line item) using the OData V2 model in OpenUI5.  It showcases the use of `createEntry` on both the model and a list binding, and uses the `created` promise to handle a successful creation.  Important: Subcontext references must not be used after the `created` promise is resolved.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// create transient context for root entity (sales order)\nvar oItemContext,\n    oItemsTable = this.byId(\"salesOrderItemTable\"), // table with \"rows\" bound with path \"ToLineItems\" (navigation property of sales order)\n    oItemsBinding = oItemsTable.getBinding(\"rows\"),\n    oModel = this.getView().getModel(),\n    oSalesOrderContext = oModel.createEntry(\"/SalesOrderSet\", {properties : {CustomerName : \"SAP\"}});\n \n...\n \n// items table shows items of transient sales order\noItemsTable.setBindingContext(oSalesOrderContext);\n // create transient context for subentity (sales order line item) and display it in the items table\noItemContext = oItemsBinding.create({Note : \"Item note\"});\n// end-user may edit item data in a dialog\noCreateDialog.setBindingContext(oItemContext);\n \n...\n \n// use created promise of root entity to handle a successful create\n// Note: subcontext references like oItemContext must no longer be used then!\noSalesOrderContext.created().then(function () {\n    // display success message using data for the created entity contained in the back-end response\n    MessageToast.show(\"Created sales order \" + oSalesOrderContext.getProperty(\"SalesOrderID\"));\n    // optional: if the service does not provide a deep response, refresh list binding for items\n    oItemsBinding.refresh();\n});\n \n...\n \n// deep create request is triggered when submitting changes\noModel.submitChanges();\n```\n\n----------------------------------------\n\nTITLE: Displaying a UI5 Ready Alert (index.ts)\nDESCRIPTION: This code snippet creates a simple TypeScript file (index.ts) that displays an alert message indicating that UI5 is ready. This is a basic way to verify that OpenUI5 is correctly initialized and that the TypeScript setup is working. The file is placed in the webapp folder.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-bootstrap-typescript-32b14d8.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nalert(\"UI5 is ready\");\n```\n\n----------------------------------------\n\nTITLE: Using core:require with Event Handler in XML View\nDESCRIPTION: This XML snippet demonstrates how to use the `core:require` attribute to define a module alias and then use it to call a static function of that module as an event handler.  The `sap/m/MessageBox` module is aliased as `Box`, and its `show` function is called when the button is pressed. Requires the sap.m library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/require-modules-in-xml-view-and-fragment-b11d853.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View controllerName=\"module:some/Controller\" xmlns=\"sap.m\"\n      xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\"\n      core:require=\"{Box:'sap/m/MessageBox'}\">\n   <Panel>\n      <Image src=\"http://www.sap.com/global/ui/images/global/sap-logo.png\"/>\n      <Button text=\"Press Me!\" press=\"Box.show('Hello!')\"/>\n   </Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Modify App View for FCL Routing - XML\nDESCRIPTION: This XML snippet modifies the App.view.xml to remove hardcoded aggregations and bind the layout property to the controller. This allows the router to dynamically manage the layout of the FlexibleColumnLayout.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-routing-7f65131.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.fcl.controller.App\"\n\tdisplayBlock=\"true\"\n\theight=\"100%\"\n\txmlns=\"sap.f\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<FlexibleColumnLayout\n\t\tid=\"flexibleColumnLayout\"\n\t\tstateChange=\".onStateChanged\"\n\t\tbackgroundDesign=\"Solid\"\n\t\tlayout=\"{/layout}\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining a Controller Extension in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to define a controller extension using `sap.ui.define` and `ControllerExtension.extend`. It includes metadata for defining public and private methods, final methods, and hook methods, as well as an override section for extending lifecycle hooks and public methods of the base controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-controller-extension-21515f0.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define(['sap/ui/core/mvc/ControllerExtension', 'sap/ui/core/mvc/OverrideExecution'], function(ControllerExtension, OverrideExecution) {\n  \"use strict\";\n  return ControllerExtension.extend(\"my.extension.SampleExtension\", {\n    metadata: {\n      // extension can declare the public methods\n      // in general methods that start with \"_\" are private\n      methods: {\n        publicMethod: {\n          public: true /*default*/ ,\n          final: false /*default*/ ,\n          overrideExecution: OverrideExecution.Instead /*default*/\n        },\n        finalMethod: {\n          final: true\n        },\n        onMyHook: {\n          public: true /*default*/ ,\n          final: false /*default*/ ,\n          overrideExecution: OverrideExecution.After\n        },\n        couldBePrivate: {\n          public: false\n        }\n      }\n    },\n\n    // adding a private method, only accessible from this controller extension\n    _privateMethod: function() {},\n    // adding a public method, might be called from or overridden by other controller extensions as well\n    publicMethod: function() {},\n    // adding final public method, might be called from, but not overridden by other controller extensions as well\n    finalMethod: function() {},\n    // adding a hook method, might be called from but not overridden by other controller extensions\n    // overriding these method does not replace the implementation, but executes after the original method\n    onMyHook: function() {},\n    // method public by default, but made private via metadata\n    couldBePrivate: function() {},\n    // this section allows to extend lifecycle hooks or override public methods of the base controller\n    override: {\n      // override onInit of base controller\n      onInit: function() {},\n      // override public method of the base controller\n      basePublicMethod: function() {}\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Element with Custom Query Options JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to bind an element with custom query options. It uses the `bindElement` method and specifies a `custom` object containing parameters such as \"price\". These custom parameters can then be utilized within the OData service to filter or modify the retrieved data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_26\n\nLANGUAGE: js\nCODE:\n```\noTextField.bindElement(\"/GetProducts\", {\n    custom: {\n        \"price\" : \"500\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining content density class in Component.ts (JavaScript)\nDESCRIPTION: This code defines a helper method `getContentDensityClass` in the app component (Component.ts). This method utilizes the `Device` API to determine if the client supports touch interaction. It returns the CSS class `sapUiSizeCompact` if touch interaction is not supported and `sapUiSizeCozy` otherwise.  This helper is used throughout the application to set the proper content density CSS class.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-36-content-density-typescript-667aa4a.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport UIComponent from \"sap/ui/core/UIComponent\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport Device from \"sap/ui/Device\";\n\n/**\n * @namespace ui5.walkthrough\n */\nexport default class Component extends UIComponent {\n    public static metadata = {\n        \"interfaces\": [\"sap.ui.core.IAsyncContentCreation\"],\n        \"manifest\": \"json\"\n    };\n    init(): void {\n        // call the init function of the parent\n        ...\n    };\n    getContentDensityClass(): string {\n        return Device.support.touch ? \"sapUiSizeCozy\" : \"sapUiSizeCompact\";\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Styling with Custom CSS Class (Good)\nDESCRIPTION: This CSS snippet showcases the recommended way to style elements in OpenUI5.  By defining a custom CSS class and applying styles to it, the code avoids direct manipulation of DOM elements, ensuring better compatibility and maintainability. It also helps to prevent style clashes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/css-styling-issues-9d87f92.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.myStyleClass {\n\twidth: 120px;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding InvoiceList View - App.view.xml\nDESCRIPTION: This XML snippet adds the InvoiceList view to the main App view, placing it below the HelloPanel. This allows the invoice list to be displayed within the app's main content area. It utilizes an XMLView for modularity and reusability.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-19-aggregation-binding-bf71375.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n    <Shell>\n        <App class=\"myAppDemoWT\">\n            <pages>\n                <Page title=\"{i18n>homePageTitle}\">\n                    <content>\n                        <Panel\n                            headerText=\"{i18n>helloPanelTitle}\"\n                            class=\"sapUiResponsiveMargin\"\n                            width=\"auto\">\n                            <content>\n                                <mvc:XMLView\n                                    viewName=\"ui5.walkthrough.view.HelloPanel\"/>\n                                <mvc:XMLView\n                                    viewName=\"ui5.walkthrough.view.InvoiceList\"/>\n                            </content>\n                        </Panel>\n                    </content>\n                </Page>\n            </pages>\n        </App>\n    </Shell>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Modifying FlexibleColumnLayout in App.view.xml (XML)\nDESCRIPTION: This code snippet modifies the App.view.xml to handle the `stateChange` event on the `FlexibleColumnLayout`. This event allows the application to respond to changes in the layout, such as column visibility or arrangement. The `backgroundDesign` is set to 'Solid'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-adding-a-floating-footer-555ed73.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tdisplayBlock=\"true\"\n\theight=\"100%\"\n\txmlns=\"sap.f\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<FlexibleColumnLayout id=\"flexibleColumnLayout\" stateChange=\"onStateChanged\" backgroundDesign=\"Solid\">\n\t\t<beginColumnPages>\n\t\t\t<mvc:XMLView id=\"beginView\" viewName=\"sap.ui.demo.fcl.view.List\"/>\n\t\t</beginColumnPages>\n\t\t<midColumnPages>\n\t\t\t<mvc:XMLView id=\"detailView\" viewName=\"sap.ui.demo.fcl.view.Detail\"/>\n\t\t</midColumnPages>\n\t</FlexibleColumnLayout>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Enabling Growing Feature on Table in XML View - OpenUI5\nDESCRIPTION: This snippet demonstrates how to enable the growing feature on a `sap.m.Table` control in an OpenUI5 XML view. By setting the `growing` property to `true`, the table will initially display a subset of data and provide a mechanism (e.g., a \"More\" button) to load additional items. This improves performance by initially rendering only a portion of the data and loading more as needed. Other attributes, such as `width` and other table configurations should be included within the `<Table>` tag.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-changing-the-table-to-a-growing-table-016e0d4.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View …\n\t<semantic:FullscreenPage\n\t\tid=\"page\"\n\t\ttitle=\"{i18n>worklistViewTitle}\">\n\t\t<semantic:content>\n\t\t\t<Table\n\t\t\t\tid=\"table\"\n\t\t\t\tgrowing=\"true\"\n\n\t\t\t\twidth=\"auto\"\n\t\t\t\t…\n\t\t\t\t>\n\t\t\t…\n\t\t\t</Table>\n\t\t</semantic:content>\n\t\t…\n\t</semantic:FullscreenPage>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining a JS Fragment in OpenUI5\nDESCRIPTION: This code defines a JavaScript fragment using `sap.ui.define`. The fragment is located at \"my/useful/UiPartX.js\". It creates a `sap.m.Button` instance with the text \"Hello World\" and sets its `press` event handler to the `doSomething` function of the controller that instantiates it. The fragment exports an object with a `createContent` function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/programmatically-instantiating-js-fragments-3cff5d0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The fragment is available under the resource name \"my/useful/UiPartX.js\"\nsap.ui.define([\"sap/m/Button\"], function(Button) {\n\treturn {\n\t\tcreateContent: function(oController) {\n\t\t\tvar oButton  = new Button({\n\t\t\t\ttext: \"Hello World\" ,\n\t\t\t\tpress: oController.doSomething\n\t\t\t});\n\t\t\treturn oButton;\n\t\t}\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an XML View with Two-Way Data Binding (OpenUI5)\nDESCRIPTION: This XML view defines a layout with input fields bound to properties in a JSON model. The `value` attribute of the `Input` controls are bound to the `firstName` and `lastName` properties, and the `enabled` attribute is bound to the `enabled` property. The `CheckBox` control's `selected` attribute is also bound to the `enabled` property, enabling two-way data binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-two-way-data-binding-c72b922.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:form=\"sap.ui.layout.form\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Panel headerText=\"{/panelHeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n\t\t<form:SimpleForm editable=\"true\" layout=\"ColumnLayout\">\n\t\t\t<Label text=\"First Name\"/>\n\t\t\t<Input value=\"{/firstName}\" valueLiveUpdate=\"true\" width=\"200px\" enabled=\"{/enabled}\"/>\n\t\t\t<Label text=\"Last Name\"/>\n\t\t\t<Input value=\"{/lastName}\" valueLiveUpdate=\"true\" width=\"200px\" enabled=\"{/enabled}\"/>\n\t\t\t<Label text=\"Enabled\"/>\n\t\t\t<CheckBox selected=\"{/enabled}\"/>\n\t\t</form:SimpleForm>\n\t</Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Enabling Validation - Descriptor Configuration - JavaScript\nDESCRIPTION: This code snippet shows how to enable automatic validation message generation in the application's descriptor file (manifest.json). By setting `handleValidation` to `true` within the `sap.ui5` section of the manifest, the framework automatically creates validation messages based on data type constraints and binding configurations.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/validation-messages-a90d93d.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"sap.ui5\": {\n       \"handleValidation\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Dialog using XML Fragment in OpenUI5\nDESCRIPTION: This XML fragment defines a simple dialog with a text view and a close button. The text displayed in the dialog is bound to the '/dialogText' model property. The button triggers the 'closeDialog' event on press.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/defining-dialogs-as-fragments-0457545.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Dialog xmlns=\"sap.m\" title=\"XML Fragment Dialog\">\n    <TextView text=\"{/dialogText}\" />\n    <buttons>\n        <Button text=\"Close\" press=\"closeDialog\"/>\n    </buttons>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Data using data() - JavaScript\nDESCRIPTION: This snippet demonstrates how to attach and retrieve custom data to an OpenUI5 control using the `data()` method. The `data()` method is available on `sap/ui/core/Element`. It functions similarly to `jQuery.data()`. Data can be accessed as a single value or as an object containing all data attached to the element.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/custom-data-attaching-data-objects-to-controls-91f0c3e.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmyButton.data(\"myData\", \"Hello\");  // attach some data to the Button\n\nalert(myButton.data(\"myData\"));     // alerts \"Hello\"\n\nvar dataObject = myButton.data();  // a JS object containing ALL data\nalert(dataObject.myData);          // alerts \"Hello\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in ui5.yaml (YAML)\nDESCRIPTION: This YAML snippet configures a proxy middleware (`ui5-middleware-simpleproxy`) within the `ui5.yaml` file. The proxy is mounted at `/V2`, and all requests to this path are forwarded to the base URI `https://services.odata.org`. This setup avoids CORS issues when accessing the Northwind OData service.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-25-remote-odata-service-4406244.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nspecVersion: '3.0'\nmetadata:\n  name: ui5.walkthrough\ntype: application\nframework:\n  name: OpenUI5\n  version: \"1.136.0\"\n  libraries:\n    - name: sap.m\n    - name: sap.ui.core\n    - name: themelib_sap_horizon\nserver:\n  customMiddleware:\n  - name: ui5-middleware-simpleproxy\n    afterMiddleware: compression\n    mountPath: /V2\n    configuration:\n      baseUri: \"https://services.odata.org\"\n```\n\n----------------------------------------\n\nTITLE: Setting Data in JSON Model (JavaScript)\nDESCRIPTION: This snippet shows how to set data directly into a JSON model using the `setData` method. The data is provided as a JavaScript object. This approach is useful for providing static or pre-existing data to the model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/json-model-96804e3.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\noModel.setData({\n    firstName: \"Peter\",\n    lastName: \"Pan\"\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Label to Metadata\nDESCRIPTION: This example demonstrates how to bind a label's text property to metadata using `##` in the binding path. It retrieves the label from the `com.sap.vocabularies.Common.v1.Label` annotation for the `GrossAmount` property of a SalesOrder. It uses a SimpleForm to display the bound label and the corresponding text.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initialization-and-read-requests-fccfb2e.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SimpleForm binding=\"{/SalesOrderList('42')}\">\n\t<Label text=\"{GrossAmount##@com.sap.vocabularies.Common.v1.Label}\" />\n\t<Text text=\"{GrossAmount}\" />\n</SimpleForm>\n\n```\n\n----------------------------------------\n\nTITLE: XML View with Button to Open Dialog - OpenUI5\nDESCRIPTION: This XML view contains a button that, when pressed, triggers the `onOpenDialog` function in the associated controller. This is part of an example demonstrating how to synchronize the content density of a view with a dialog.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/how-to-use-densities-for-controls-13e6f3b.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"mycontroller\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\">\n    <Button text=\"Show Dialog\" press=\"onOpenDialog\" />\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding text to i18n bundle - INI\nDESCRIPTION: This INI snippet adds the openDialogButtonText key and value to the i18n.properties file. This text is used for the new button that opens the dialog.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-16-dialogs-and-fragments-4da7298.md#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# App Descriptor\nappTitle=Hello World\nappDescription=A simple walkthrough app that explains the most important concepts of OpenUI5\n\n# Hello Panel\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\nhomePageTitle=Walkthrough\nhelloPanelTitle=Hello World\nopenDialogButtonText=Say Hello With Dialog\n```\n\n----------------------------------------\n\nTITLE: NumberFormat with Integer/Decimal Options - JavaScript\nDESCRIPTION: This code snippet illustrates how to customize the NumberFormat with specific options for integer and decimal digits. It sets the minimum and maximum number of integer and fraction digits, then formats numbers to show how these options affect the output.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/number-format-91f2f28.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar oFormatOptions = {\n    minIntegerDigits: 3,\n    maxIntegerDigits: 5,\n    minFractionDigits: 2,\n    maxFractionDigits: 4\n};\n\n// \"NumberFormat\" required from module \"sap/ui/core/format/NumberFormat\"\nvar oFloatFormat = NumberFormat.getFloatInstance(oFormatOptions);\noFloatFormat.format(1.1); // returns \"001.10\"\noFloatFormat.format(1234.567); // returns \"1,234.567\"\noFloatFormat.format(123456.56789); // returns \"??,???.5679\"\n```\n\n----------------------------------------\n\nTITLE: Date Formatter Implementation (formatter.js)\nDESCRIPTION: This JavaScript code snippet shows the implementation of the 'date' formatter function within the formatter.js file. It creates an instance of the DateFormatter class, passing in the current date as a dependency, and then uses its format method to format the input date. It returns the formatted date.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-16-adding-the-date-formatter-2ca583d.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([ \"sap/ui/demo/bulletinboard/model/DateFormatter\" ], function (DateFormatter) {\n\t// ...\n\treturn {\n\t\t// ...\n\t\tnumberUnit: function(sValue) {\n\t\t\t// ...\n\t\t},\n\t\tdate: function(date) {\n\t\t\treturn new DateFormatter({now: Date.now}).format(date);\n\t\t}\n\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Handling List Item Press Event (JavaScript)\nDESCRIPTION: This JavaScript snippet defines the 'onListItemPressed' event handler in the EmployeeList controller. It retrieves the EmployeeID from the selected list item's binding context and uses the router to navigate to the 'employee' route, passing the EmployeeID as a parameter.  It depends on the sap.ui.demo.nav.controller.BaseController.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-navigate-to-routes-with-mandatory-parameters-f96d252.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.EmployeeList\", {\n\t\tonListItemPressed : function(oEvent){\n\t\t\tvar oItem, oCtx;\n\t\t\toItem = oEvent.getSource();\n\t\t\toCtx = oItem.getBindingContext();\n\t\t\tthis.getRouter().navTo(\"employee\",{\n\t\t\t\temployeeId : oCtx.getProperty(\"EmployeeID\")\n\t\t\t});\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Model - manifest.json\nDESCRIPTION: This configuration adds a new JSONModel named \"invoice\" to the application's descriptor. It specifies the type as \"sap.ui.model.json.JSONModel\" and points to the \"Invoices.json\" file via the \"uri\" property. The component automatically instantiates this model and makes it available throughout the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-19-aggregation-binding-bf71375.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  ...\n  \"sap.ui5\": {\n    ...\n    \"models\": {\n      \"i18n\": {\n        \"type\": \"sap.ui.model.resource.ResourceModel\",\n        \"settings\": {\n          \"bundleName\": \"ui5.walkthrough.i18n.i18n\",\n          \"supportedLocales\": [\n            \"\"\n          ],\n          \"fallbackLocale\": \"\"\n        }\n      },\n      \"invoice\": {\n        \"type\": \"sap.ui.model.json.JSONModel\",\n        \"uri\": \"Invoices.json\"\n      }\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Validation - Component Configuration - JavaScript\nDESCRIPTION: This code snippet demonstrates how to enable automatic validation message generation within an OpenUI5 component, either through the component's metadata definition or when instantiating the component using a ComponentContainer. Setting `handleValidation` to `true` activates the framework's validation mechanisms.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/validation-messages-a90d93d.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"UIComponent\" required from \"sap/ui/core/UIComponent\"\n// \"ComponentContainer\" required from \"sap/ui/core/ComponentContainer\"\n\nUIComponent.extend(\"MyComponent\", {\n    metadata  : {\n        version  : \"1.0\" ,\n        handleValidation  : true\n    }\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oComponentContainer = new ComponentContainer(\"MyComponentContainer\", {\n    name: \"MyComponent\",\n    id: \"myComponentId\",\n    handleValidation: true\n});\n```\n\n----------------------------------------\n\nTITLE: Using DisplayListItem in OpenUI5 List\nDESCRIPTION: This snippet showcases how to use the `DisplayListItem` control within an OpenUI5 `List` to display a label-value pair.  The `DisplayListItem` inherits from `ListItemBase` and provides the `label` and `value` properties for displaying information.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/lists-1da1581.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n    \n      <DisplayListItem\n        label=\"Name\"\n        value=\"{SupplierName}\" />\n    \n    \n```\n\n----------------------------------------\n\nTITLE: Extending UIComponent with Library Metadata in OpenUI5\nDESCRIPTION: This JavaScript code snippet demonstrates how to extend the sap.ui.core.UIComponent to define a custom component within an OpenUI5 library. It includes metadata configuration specifying the manifest file location and the library the component belongs to. The `library` attribute in the metadata is used to explicitly define the library name, overriding the default determination based on the component namespace.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-for-components-inside-libraries-7701636.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.core.UIComponent.extend(\"com.sap.fancylibrary.sub.CompLib.Component\", {\n    metadata : {\n        \"manifest\" : \"json\",\n        \"library\" : \"com.sap.fancylibrary\",\n    ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Detail Controller with Toggle Function (JavaScript)\nDESCRIPTION: This JavaScript code defines the Detail controller and implements the `onEditToggleButtonPress` function.  This function toggles the visibility of the footer within the `ObjectPageLayout` when the 'Edit' button is pressed. It retrieves the current footer state and sets the opposite state.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-adding-a-floating-footer-555ed73.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function (Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.Detail\", {\n\t\tonEditToggleButtonPress: function() {\n\t\t\tvar oObjectPage = this.getView().byId(\"ObjectPageLayout\"),\n\t\t\t\tbCurrentShowFooterState = oObjectPage.getShowFooter();\n\n\t\t\toObjectPage.setShowFooter(!bCurrentShowFooterState);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Entities with OData\nDESCRIPTION: This snippet illustrates deleting entities from an OData service using the `remove` function of the OData V2 model.  It triggers a DELETE request to the specified path. Success and error handlers are used to manage the outcome of the deletion. The application must specify the path to the entry to be deleted.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\noModel.remove(\"/Products(999)\", {success: mySuccessHandler, error: myErrorHandler});\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies in Manifest (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how dependencies are defined in the manifest file (manifest.json). It uses minUI5Version, and represents libraries and components as objects.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/migrating-from-component-metadata-to-manifest-e282db2.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n\"dependencies\": {\n    \"minUI5Version\": \"1.30.0\",\n    \"libs\": {\n        \"sap.m\": {},\n        \"sap.ui.unified\": {}\n    },\n    \"components\": {\n        \"sap.app.otherComponent\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FacetFilterList and applying variant selections in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a FacetFilterList, bind filter items to an OData model, and pre-select items based on keys retrieved from a variant. The variant stores the selected keys as a JSON object, which are then applied to the FacetFilterList.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/facet-filter-selection-ef860fc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oDataModel = new sap.ui.model.odata.v2.ODataModel(\"/uilib-sample/proxy/http/services.odata.org/V3/Northwind/Northwind.svc\");\n\n// create the FacetFilterList and bind the filter items\nvar oFacetFilterList = new sap.m.FacetFilterList({\n    title : \"Products\",\n    growing : true,\n    items : {\n        path : \"/Products\",\n        template : new sap.m.FacetFilterItem({\n            text : \"{ProductName}\",\n            key : \"{ProductID}\"\n        })\n    },\n    listOpen : function(oEvent) {\n\n        if(!this.hasModel()) {          \n            this.setModel(oDataModel);\n        }\n    },\n});\n\n// getSelectionsFromVariant() is an application method to retrieve\n// selected keys from the backend. Selections were saved to the variant by persisting \n// the result of 'getSelectedKeys' for each list. This is an object \n// containing Product keys as properties and Product text as property values, for example:\n/*      \n{\n    '5' : \"Chef Anton's Gumbo Mix\",\n    '17' : \"Alice Mutton\",\n    '21' : \"Sir Rodney's Scones\"                \n}\n*/\nvar oSelectedKeys = getSelectionsFromVariant(); \n\n// Now preselect these items\noFacetFilterList.setSelectedKeys(oSelectedKeys);\n\nvar oFacetFilter = new sap.m.FacetFilter({\n    lists : [ oFacetFilterList ]\n}); \n```\n\n----------------------------------------\n\nTITLE: Defining a Component Controller using sap.ui.define (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to define a component controller in OpenUI5 using the sap.ui.define syntax in JavaScript. It extends the UIComponent base class and declares the component's metadata, including interfaces and the manifest file. The component is defined asynchronously using AMD syntax. The manifest specifies external metadata.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/component-controller-27ce0e4.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n  \"sap/ui/core/UIComponent\"\n], (UIComponent) => {\n  \"use strict\";\n\n  return UIComponent.extend(\"my.app.Component\", { // given \"my.app\" being the value of sap.app/id in manifest.json\n    metadata: {\n      interfaces: [\n        \"sap.ui.core.IAsyncContentCreation\"\n      ],\n      manifest: \"json\"\n    },\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Sorter for JSON Model (JavaScript)\nDESCRIPTION: This code demonstrates how to create a custom sorter function for a JSON model. A `sap.ui.model.Sorter` object is created with a property to sort by. The `fnCompare` method is defined to compare two values and return -1, 0, or 1 based on their order.  This allows sorting based on custom logic.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/json-model-96804e3.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oSorter = new sap.ui.model.Sorter(\"property\");\noSorter.fnCompare = function(value1, value2) {\n    if (value1 < value2) return -1;\n    if (value1 == value2) return 0;\n    if (value1 > value2) return 1;\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Dynamic Targets in OpenUI5 with JavaScript\nDESCRIPTION: This code snippet shows how to display a dynamically added target using the display method of the sap.ui.core.routing.Targets module. It takes parameters such as name, prefix, and routeRelevant.  Setting routeRelevant to true connects the target's lifecycle to the matched route.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/navigate-with-dynamic-targets-856d6c6.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\noRouter.getTargets().display({\n    name: \"myDynamicTarget\",\n    prefix: ...,\n    routeRelevant: true\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Theming.applied Event - JavaScript\nDESCRIPTION: This snippet shows how to attach an event handler to the `Theming.applied` event to be notified when the theme is switched.  It uses `sap.ui.require` to load the `sap/ui/core/Theming` module and attach the event handler using `Theming.attachApplied`. The callback receives the event object containing the new theme name.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/setting-themes-e9fc648.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.require([\n    \"sap/ui/core/Theming\"\n], (\n    Theming\n) => {\n    \"use strict\";\n     \n    // Whenever the theme is switched, an event is fired,\n    // indicating that a theme switch has been triggered.\n    Theming.attachApplied((oEvent) => {\n        // Note: The event callback has no longer a <this> context,\n        // thus we use an arrow function here\n \n        // Note: the Event object now has a different API than on the Core facade:\n        // no more getParameters(), but simple properties like the Web API events.\n        // Therefore, you can access the new \"theme\" like so:\n        const sTheme = oEvent.theme;\n    });\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Namespaced CSS Selector (Good)\nDESCRIPTION: This CSS snippet exemplifies the correct way of creating namespaced CSS selectors. It adds a prefix that avoids style clashes in shared environments. This is important to ensure that the styles apply correctly without interfering with other styles.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/css-styling-issues-9d87f92.md#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.poaAppTitle {\n\tfont-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing App Controller with Message Handling and View Model - JavaScript\nDESCRIPTION: This snippet initializes the App controller by setting up a message model, a view model, and attaching a change event handler to the message model binding. The message model handles technical errors reported by the OData service. The view model is used to control the UI state, such as enabling or disabling controls based on user input and data changes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-create-and-edit-b4f1266.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/Messaging\",\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/m/MessageToast\",\n    \"sap/m/MessageBox\",\n    \"sap/ui/model/Sorter\",\n    \"sap/ui/model/Filter\",\n    \"sap/ui/model/FilterOperator\",\n    \"sap/ui/model/FilterType\",\n    \"sap/ui/model/json/JSONModel\"\n], function (Messaging, Controller, MessageToast, MessageBox, Sorter, Filter, FilterOperator,\n    FilterType, JSONModel) {\n    \"use strict\";\n\n    return Controller.extend(\"sap.ui.core.tutorial.odatav4.controller.App\", {\n\n        /**\n         *  Hook for initializing the controller\n         */\n        onInit : function () {\n            var oMessageModel = Messaging.getMessageModel(),\n                oMessageModelBinding = oMessageModel.bindList(\"/\", undefined, [],\n                    new Filter(\"technical\", FilterOperator.EQ, true)),\n                oViewModel = new JSONModel({\n                    busy : false,\n                    hasUIChanges : false,\n                    usernameEmpty : true,\n                    order : 0\n                });\n\n            this.getView().setModel(oViewModel, \"appView\");\n            this.getView().setModel(oMessageModel, \"message\");\n\n            oMessageModelBinding.attachChange(this.onMessageBindingChange, this);\n            this._bTechnicalErrors = false;\n        },\n...\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Factory Function for Aggregation Binding\nDESCRIPTION: This JavaScript code demonstrates how to bind an aggregation to a VerticalLayout without using an XML view.  It uses a factory function that receives the ID and context for each item in the bound aggregation. It checks the data type of the 'revenue' property and returns either an Input (number), CheckBox (boolean) or Text (string) control. The Input, Checkbox, StringType and Float modules need to be required beforehand.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-factory-functions-335848a.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// \"Input\" required from module \"sap/m/Input\"\n// \"CheckBox\" required from module \"sap/m/CheckBox\"\n// \"StringType\" required from module \"sap/ui/model/type/String\"\n// \"Float\" required from module \"sap/ui/model/type/Float\"\n\noVerticalLayout.bindAggregation(\"content\", \"/companies\", (sId, oContext) => {\nconst oRevenue = oContext.getProperty(\"revenue\");\n    switch(typeof oRevenue) {\n        case \"number\":\n            return new Input(sId, {value: {path: \"revenue\", type: Float}});\n        case \"boolean\":\n            return new CheckBox(sId, {checked: {path: \"revenue\"}});\n        default: // For Strings and other cases\n            return new Text(sId, {text: {path: \"revenue\", type: StringType}});\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Controller for Lazy Instantiation (Fragment)\nDESCRIPTION: This JavaScript controller implements lazy instantiation of the edit panel using fragments. It loads the fragment only when the 'Edit' button is pressed, improving initial performance. Requires `sap/ui/core/mvc/Controller` and `sap/ui/core/Fragment` dependencies. The fragment is inserted into a container called `myPage`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/performance-issues-966d67c.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\t...\n\ttoEditMode: function() {\n\t\tthis.byId(\"displayPanel\").setVisible(false);\n\n\t\tif (!this.pEditPanel) {\n\t\t\t// load and instantiate the edit panel lazily\n\t\t\t// we keep the Promise of the loadFragment() call,\n\t\t\t// so that we do not trigger the fragment loading everytime the user clicks the button\n\t\t\tthis.pEditPanel = this.loadFragment({\n\t\t\t\tname: \"myApp.EditPanel\",\n\t\t\t\t// we don't add the fragment to the view's 'dependents' aggregation, since the fragment content\n\t\t\t\t//  will be added to the view's control tree via the 'myPage' instance\n\t\t\t\taddToDependents: false\n\t\t\t}).then(function (oFragment) {\n\t\t\t\tthis.byId(\"myPage\").insertContent(oFragment, 0); // for sake of simplicity inserts at position 0\n\t\t\t}.bind(this));\n\t\t}\n\t\t// we chain the visibility change of the \"editPanel\" to the loading Promise\n\t\t// Since we only load the fragment one we can chain ourselves to this Promise on each Button click\n\t\tthis.pEditPanel.then(function() {\n\t\t\tvar oEditPanel = this.byId(\"editPanel\");\n\t\t\toEditPanel.setVisible(true);\n\t\t}.bind(this));\n\t}\n\t...\n```\n\n----------------------------------------\n\nTITLE: Accessing Control Properties in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to access a control's property using the `get<Property>()` method in OpenUI5. The example shows how to retrieve the value of the `text` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/writing-a-control-renderer-91f3939.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n    \n    // var oValue = oControl.get<Property>();\n    // for example for the 'text'-property\n    var oValue = oControl.getText();\n    \n```\n\n----------------------------------------\n\nTITLE: Resume Controller - Route Matched Logic (JavaScript)\nDESCRIPTION: This JavaScript snippet extends the `resume` controller and adds logic to the `_onRouteMatched` function.  When the selected tab is 'Hobbies' or 'Notes', it calls `this.getRouter().getTargets().display()` to display the corresponding target (either `resumeTabHobbies` or `resumeTabNotes`), achieving lazy loading.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-implement-lazy-loading-cdab0a1.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\"\n], function (BaseController, JSONModel) {\n\t\"use strict\";\n\tvar _aValidTabKeys = [\"Info\", \"Projects\", \"Hobbies\", \"Notes\"];\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.Resume\", {\n\t\t...\n\t\t_onRouteMatched : function (oEvent) {\n\t\t\tvar oArgs, oView, oQuery;\n\t\t\toArgs = oEvent.getParameter(\"arguments\");\n\t\t\toView = this.getView();\n\t\t\toView.bindElement({\n\t\t\t\t...\n\t\t\t});\n\t\t\toQuery = oArgs[\"?query\"];\n\t\t\tif (oQuery && _aValidTabKeys.indexOf(oQuery.tab) > -1){\n\t\t\t\toView.getModel(\"view\").setProperty(\"/selectedTabKey\", oQuery.tab);\n\t\t\t\t// support lazy loading for the hobbies and notes tab\n\t\t\t\tif (oQuery.tab === \"Hobbies\" || oQuery.tab === \"Notes\"){\n\t\t\t\t\t// the target is either \"resumeTabHobbies\" or \"resumeTabNotes\"\n\t\t\t\t\tthis.getRouter().getTargets().display(\"resumeTab\" + oQuery.tab);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// the default query param should be visible at all time\n\t\t\t\tthis.getRouter().navTo(\"employeeResume\", {\n\t\t\t\t\temployeeId : oArgs.employeeId,\n\t\t\t\t\t\"?query\": {\n\t\t\t\t\t\ttab : _aValidTabKeys[0]\n\t\t\t\t\t}\n\t\t\t\t}, true /*no history*/);\n\t\t\t}\n\t\t},\n\t\t...\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.extend with sap/base/util/merge in JavaScript\nDESCRIPTION: This snippet illustrates how to replace jQuery.sap.extend for both shallow and deep copies using the sap/base/util/merge module.  Shallow copy replacement is not directly available. Deep copy is replaced with `merge({}, sContent);`.  The original jQuery.sap.extend handles null or undefined arguments differently than jQuery.extend.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Shallow\njQuery.sap.extend({}, sContent);\n\n// Deep\njQuery.sap.extend(true, {}, sContent)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Shallow\n//\n// No actual replacement for shallow copies available, see the note below for more info.\n\n// Deep\nmerge({}, sContent);\n```\n\n----------------------------------------\n\nTITLE: Extending Control and Calling Superclass init() in JavaScript\nDESCRIPTION: This code snippet shows how to extend an OpenUI5 control and override the init() method while ensuring the superclass's init() method is also called. It includes a check for the existence of the superclass method before calling it using apply to maintain the original arguments.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/init-method-6d6b5bd.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nSomeControl.extend(\"my.OwnControl\", {\n       ...\n       init: function() {\n             if (SomeControl.prototype.init) { // check whether superclass implements the method\n                    SomeControl.prototype.init.apply(this, arguments); // call the method with the original arguments\n             }\n\n             //... do any further initialization of your subclass, e.g. \n             this.$().on(\"click\", this.handleClick);\n       } \n       ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Status Texts to i18n Resource Bundle\nDESCRIPTION: This snippet shows how to add new entries to the i18n resource bundle for the translated status texts. The resource bundle is used by the `statusText` formatter to retrieve the localized status based on the status code.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-22-custom-formatters-0f8626e.md#_snippet_2\n\nLANGUAGE: INI\nCODE:\n```\n# App Descriptor\nappTitle=Hello World\nappDescription=A simple walkthrough app that explains the most important concepts of OpenUI5\n\n# Hello Panel\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\nhomePageTitle=Walkthrough\nhelloPanelTitle=Hello World\nopenDialogButtonText=Say Hello With Dialog\ndialogCloseButtonText=Ok\n\n# Invoice List\ninvoiceListTitle=Invoices\ninvoiceStatusA=New\ninvoiceStatusB=In Progress\ninvoiceStatusC=Done\n```\n\n----------------------------------------\n\nTITLE: DateRangeSelection with OData V4 dates - XML View\nDESCRIPTION: This example demonstrates how to use the `sap.m.DateRangeSelection` control with OData V4 dates in an XML view. It binds the `value` property to two `Edm.Date` properties using the `sap.ui.model.type.DateInterval` composite type. The `formatOptions` are set to `UTC: true` to handle dates in UTC format. Dependencies include `sap.ui.model.type.DateInterval`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{DateInterval: 'sap/ui/model/type/DateInterval'}\">\n    ...\n    <DateRangeSelection value=\"{parts: ['/V4/Date1', '/V4/Date2'], type: 'DateInterval', formatOptions: {UTC: true}}\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Duplicate Value Merging in OpenUI5 Table Column\nDESCRIPTION: This code snippet demonstrates how to enable duplicate value merging for columns in an OpenUI5 table.  The `mergeDuplicates` property of the `sap.m.Column` control is set to `true` to indicate that adjacent duplicate values in the column should be merged. Data should be sorted before binding, to ensure adjacent values are actually duplicates. Two-way binding is not supported in combination with this feature. The code presents an example with columns for Supplier and Product where duplicate values are merged.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/table-design-d3234bc.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Table\n    headerText=\"Products\"\n    items=\"{\n      path:'/ProductCollection',\n      sorter: {\n        path: 'SupplierName',\n        descending: false\n      }\n    }\" >\n    <columns>\n      <Column mergeDuplicates=\"true\">\n        <header>\n          <Text text=\"Supplier\" />\n        </header>\n      </Column>\n      <Column mergeDuplicates=\"true\">\n        <header>\n          <Text text=\"Product\" />\n        </header>\n      </Column>\n      <Column\n        minScreenWidth=\"Tablet\"\n        demandPopin=\"true\"\n        hAlign=\"End\" >\n        <header>\n          <Text text=\"Dimensions\" />\n        </header>\n      </Column>\n      <Column\n        minScreenWidth=\"Tablet\"\n        demandPopin=\"true\"\n        hAlign=\"Center\" >\n        <header>\n          <Text text=\"Weight\" />\n        </header>\n      </Column>\n      <Column hAlign=\"End\" >\n        <header>\n          <Text text=\"Price\" />\n        </header>\n      </Column>\n    </columns>\n    <ColumnListItem>\n      <Text text=\"{SupplierName}\" />\n      <ObjectIdentifier title=\"{Name}\" text=\"{ProductId}\" class=\"sapUiTinyMarginTopBottom\" />\n      <Text text=\"{Width} x {Depth} x {Height} {DimUnit}\" />\n      <ObjectNumber\n        number=\"{WeightMeasure}\" unit=\"{WeightUnit}\"\n        state=\"{\n          path: 'WeightMeasure',\n          formatter: 'sap.m.sample.TableMergeCells.Formatter.weightState'\n        }\" />\n      <ObjectNumber\n        number=\"{Price}\"\n        unit=\"{CurrencyCode}\" />\n    </ColumnListItem>\n  </Table>\n\n```\n\n----------------------------------------\n\nTITLE: Defining OData Source in manifest.json (JSON)\nDESCRIPTION: This JSON snippet configures a remote OData service as a data source in the `manifest.json` file. It defines a data source named `invoiceRemote` with the URI pointing to the Northwind OData service via the configured proxy (`V2/Northwind/Northwind.svc/`). The type is set to `OData` with version `2.0`. It also updates the `invoice` model to use the defined `invoiceRemote` data source.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-25-remote-odata-service-4406244.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t...\n\t\"sap.app\": {\n\t\t...,\n\t\t\"dataSources\": {\n\t\t\t\"invoiceRemote\": {\n\t\t\t\t\"uri\": \"V2/Northwind/Northwind.svc/\",\n\t\t\t\t\"type\": \"OData\",\n\t\t\t\t\"settings\": {\n\t\t\t\t\t\"odataVersion\": \"2.0\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t...\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"models\": {\n\t\t\t...\n\t\t\t\"invoice\": {\n\t\t\t\t\"dataSource\": \"invoiceRemote\"\n\t\t\t}\n\t\t}\n\t\t...\n\n```\n\n----------------------------------------\n\nTITLE: Initializing JSON Model in SAPUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to instantiate a JSON model in SAPUI5 using JavaScript.  The `sap.ui.model.json.JSONModel` class is used to create a new instance of the model. This is the first step in using a JSON model to bind data to UI elements.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/json-model-96804e3.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oModel = new sap.ui.model.json.JSONModel();\n```\n\n----------------------------------------\n\nTITLE: Initializing OData Model and Creating View - JavaScript\nDESCRIPTION: This snippet initializes an OData model and creates a template view within the createContent function of a UIComponent. It loads the meta model asynchronously and then creates an XML view with preprocessors, binding the view to data and handling potential errors.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-templating-5ee619f.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n32         createContent : function () {\n33             var oModel = new ODataModel(\n34                     \"/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/\", {\n35                     annotationURI : \"/test-resources/sap/ui/core/demokit/sample/ViewTemplate/tiny\"\n36                         + \"/annotations.xml\",\n37                     json : true,\n38                     loadMetadataAsync : true\n39                 }),\n40                 oMetaModel = oModel.getMetaModel(),\n41                 sPath = \"/ProductSet('HT-1021')/ToSupplier\",\n42                 oViewContainer = new VBox({\n43                     items : [\n44                         new Title({text : \"This is meant to be a pure code sample. \"\n45                             + \"(To run it, you would need a proxy which is configured properly.)\",\n46                             titleStyle : TitleLevel.H3})\n47                     ]\n48                 });\n49 \n50             oMetaModel.loaded().then(function () {\n51                 View.create({\n52                     async : true,\n53                     models : oModel,\n54                     preprocessors : {\n55                         xml : {\n56                             bindingContexts : {\n57                                 meta : oMetaModel.getMetaContext(sPath)\n58                             },\n59                             models : {\n60                                 meta : oMetaModel\n61                             }\n62                         }\n63                     },\n64                     type : ViewType.XML,\n65                     viewName : \"sap.ui.core.sample.ViewTemplate.tiny.Template\"\n66                 }).then(function (oTemplateView) {\n67                     oTemplateView.bindElement(sPath);\n68                     oViewContainer.destroyItems();\n69                     oViewContainer.addItem(oTemplateView);\n70                 }, function (oError) {\n71                     MessageBox.alert(oError.message, {\n72                         icon : MessageBox.Icon.ERROR,\n73                         title : \"Missing Proxy?\"});\n74                 });\n75             });\n76 \n77             // Note: synchronously return s.th. here and add content to it later on\n78             return oViewContainer;\n79         }\n```\n\n----------------------------------------\n\nTITLE: Open Dialog in Controller (TypeScript)\nDESCRIPTION: This TypeScript code defines an event handler `onOpenDialog` in the `HelloPanel` controller. It asynchronously loads the `HelloDialog` fragment, stores it as a property of the controller instance, and opens the dialog when triggered. It leverages `async/await` for asynchronous handling.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-16-dialogs-and-fragments-typescript-4b2e306.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Dialog from \"sap/m/Dialog\";\n\n/**\n * @namespace ui5.walkthrough.controller\n */\nexport default class HelloPanel extends Controller {\n    private dialog: Dialog;\n\n    onShowHello(): void {\n        ...\n    }\n    async onOpenDialog(): Promise<void> {\n      this.dialog ??= await this.loadFragment({\n         name: \"ui5.walkthrough.view.HelloDialog\"\n      }) as Dialog;\n      this.dialog.open();\n    }   \n};\n```\n\n----------------------------------------\n\nTITLE: Binding Element with Expand Parameter JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the `expand` parameter in a binding to read associated entities with their navigation properties.  The expand parameter is added to the parameter object. This results in the associated `Products` entities to be loaded inline within the `Category(1)` response, reducing the need for separate requests.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_23\n\nLANGUAGE: js\nCODE:\n```\noControl.bindElement(\"/Category(1)\", {expand: \"Products\"}); \n\noTable.bindRows({\n    path: \"/Products\",\n    parameters: {expand: \"Category\"}\n});\n```\n\n----------------------------------------\n\nTITLE: Modify manifest.json for Routing Configuration - JSON\nDESCRIPTION: This JSON snippet modifies the manifest.json file to configure routing. It defines routes, targets, and router configuration, including the router class, view types, and control aggregation for displaying views within the FlexibleColumnLayout.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-routing-7f65131.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"_version\": \"1.38.0\",\n\t\"sap.app\": {\n\t\t\"id\": \"sap.ui.demo.fcl\",\n\t\t\"type\": \"application\",\n\t\t\"applicationVersion\": {\n\t\t\t\"version\": \"1.0.0\"\n\t\t}\n\t},\n\t\"sap.ui5\": {\n\t\t\"rootView\": {\n\t\t\t\"viewName\": \"sap.ui.demo.fcl.view.App\",\n\t\t\t\"type\": \"XML\",\n\t\t\t\"async\": true,\n\t\t\t\"id\": \"fcl\"\n\t\t},\n\t\t\"dependencies\": {\n\t\t\t\"minUI5Version\": \"1.98.0\",\n\t\t\t\"libs\": {\n\t\t\t\t\"sap.f\": {},\n\t\t\t\t\"sap.m\": {},\n\t\t\t\t\"sap.ui.core\": {},\n\t\t\t\t\"sap.uxap\": {}\n\t\t\t\t}\n\t\t},\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.f.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.fcl.view\",\n\t\t\t\t\"controlId\": \"flexibleColumnLayout\",\n\t\t\t\t\"transition\": \"slide\",\n\t\t\t\t\"bypassed\": {\n\t\t\t\t},\n\t\t\t\t\"async\": true\n\t\t\t},\n\t\t\t\"routes\": [\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \":layout:\",\n\t\t\t\t\t\"name\": \"list\",\n\t\t\t\t\t\"target\": [\n\t\t\t\t\t\t\"list\",\n\t\t\t\t\t\t\"detail\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \"detail/{product}/{layout}\",\n\t\t\t\t\t\"name\": \"detail\",\n\t\t\t\t\t\"target\": [\n\t\t\t\t\t\t\"list\",\n\t\t\t\t\t\t\"detail\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"targets\": {\n\t\t\t\t\"list\": {\n\t\t\t\t\t\"name\": \"List\",\n\t\t\t\t\t\"controlAggregation\": \"beginColumnPages\"\n\t\t\t\t},\n\t\t\t\t\"detail\": {\n\t\t\t\t\t\"name\": \"Detail\",\n\t\t\t\t\t\"controlAggregation\": \"midColumnPages\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Responsive Paddings - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to enable responsive paddings for a custom control using the `sap.ui.core.util.ResponsivePaddingsEnablement` utility. It shows how to select elements using either a suffix (based on ID) or a CSS selector. This enablement allows application developers to use CSS classes like `sapUiResponsivePadding--header` to apply dynamic paddings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enabling-responsive-paddings-according-to-the-control-width-3b718b5.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nResponsivePaddingsEnablement.call(MyCustomControl.prototype, {\n\t\t\t\t\theader: {suffix: \"-myCustomControlHeader\"},\n\t\t\t\t\tcontent: {selector: \".myCustomControlContent\"}\n\t\t\t\t\t});\n\t\t\t\t\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nMyCustomControl._initResponsivePaddingsEnablement()\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Controller Extensions into Controllers\nDESCRIPTION: This snippet showcases how to include a controller extension into a controller as a member.  It uses `sap.ui.define` to import both the base controller and the extension, then assigns the extension to a member variable.  This creates an instance of the controller extension when the controller is instantiated.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-controller-extension-21515f0.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define(['sap/ui/core/mvc/Controller', 'my/extension/SampleExtension'], function(Controller, SampleExtension) {\n    \"use strict\";\n    return Controller.extend(\"sample.Main\", {\n        //include the extension\n        sample: SampleExtension,\n         \n        _basePrivateMethod: function() {\n            ...\n        },\n        basePublicMethod: function() {\n     ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Swipe Events in OpenUI5 (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to handle swipe events in an OpenUI5 List control. It retrieves the swiped item, removes it from the list, and then hides the swipe content. The `tap` function is triggered when the user interacts with the `swipeContent`, allowing the developer to perform actions related to the swiped list item.  Requires a reference to an OpenUI5 List control with ID 'myList'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/methods-b72874d.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntap : function(e) {\n   var oList = this.getView().byId(\"myList\"); // get the list using its Id\n   var oSwipedItem = oList.getSwipedItem(); // Get which list item is swiped to delete\n   oList.removeAggregation(\"items\", oSwipedItem); // Remove this aggregation to delete list item from list\n   oList.swipeOut(); // we are done, hide the swipeContent from screen \n}\n....\n```\n\n----------------------------------------\n\nTITLE: Route Matched Handler with Query Parameter Handling - JavaScript\nDESCRIPTION: This snippet extends the _onRouteMatched function in the EmployeeOverviewContent controller to check for the 'showDialog' query parameter in the URL. If the parameter is present (set to 1), it opens the ViewSettingsDialog (_oVSD). It also applies search and sort parameters from the URL.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-make-dialogs-bookmarkable-5cc3147.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/ViewSettingsDialog\",\n\t\"sap/m/ViewSettingsItem\"\n], function(\n\tBaseController,\n\tFilter,\n\tFilterOperator,\n\tSorter,\n\tViewSettingsDialog,\n\tViewSettingsItem\n) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverviewContent\", {\n\t\tonInit: function () {\n\t\t\t...\n\t\t},\n\t\t_onRouteMatched: function (oEvent) {\n\t\t\t// save the current query state\n\t\t\tthis._oRouterArgs = oEvent.getParameter(\"arguments\");\n\t\t\tthis._oRouterArgs[\"?query\"] = this._oRouterArgs[\"?query\"] || {};\n\t\t\tvar oQueryParameter = this._oRouterArgs[\"?query\"];\n\n\t\t\t// search/filter via URL hash\n\t\t\tthis._applySearchFilter(oQueryParameter.search);\n\n\t\t\t// sorting via URL hash\n\t\t\tthis._applySorter(oQueryParameter.sortField, oQueryParameter.sortDescending);\n\n\t\t\t// show dialog via URL hash\n\t\t\tif (oQueryParameter.showDialog) {\n\t\t\t\tthis._oVSD.open();\n\t\t\t}\n\t\t\t\n\t\t},\n\t\tonSortButtonPressed: function (oEvent) {\n\t\t\tvar oRouter = this.getRouter();\n\t\t\tthis._oRouterArgs[\"?query\"].showDialog = 1;\n\t\t\toRouter.navTo(\"employeeOverview\", this._oRouterArgs);\n\n\t\t},\n\t\t...\n\t\t_initViewSettingsDialog: function () {\n\t\t\tvar oRouter = this.getRouter();\n\t\t\tthis._oVSD = new ViewSettingsDialog(\"vsd\", {\n\t\t\t\tconfirm: function (oEvent) {\n\t\t\t\t\tvar oSortItem = oEvent.getParameter(\"sortItem\");\n\t\t\t\t\tthis._oRouterArgs[\"?query\"].sortField = oSortItem.getKey();\n\t\t\t\t\tthis._oRouterArgs[\"?query\"].sortDescending = oEvent.getParameter(\"sortDescending\");\n\t\t\t\t\tdelete this._oRouterArgs[\"?query\"].showDialog;\n\t\t\t\t\toRouter.navTo(\"employeeOverview\", this._oRouterArgs, true /*without history*/);\n\t\t\t\t}.bind(this),\n\t\t\t\tcancel: function (oEvent){\n\t\t\t\t\tdelete this._oRouterArgs[\"?query\"].showDialog;\n\t\t\t\t\toRouter.navTo(\"employeeOverview\", this._oRouterArgs, true /*without history*/);\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t\t...\n\t\t},\n\t\t...\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Resume View to Employee Data (JavaScript)\nDESCRIPTION: This JavaScript code defines the `Resume` controller. It attaches to the `employeeResume` route's `matched` event, binding the view's elements to the employee data based on the `employeeId` parameter passed in the route.  It also handles the case where no data is found, displaying the 'notFound' target.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-navigate-with-flip-transition-3e5f6f3.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.Resume\", {\n\t\tonInit: function () {\n\t\t\tvar oRouter = this.getRouter();\n\t\t\toRouter.getRoute(\"employeeResume\").attachMatched(this._onRouteMatched, this);\n\t\t},\n\t\t_onRouteMatched : function (oEvent) {\n\t\t\tvar oArgs, oView;\n\t\t\toArgs = oEvent.getParameter(\"arguments\");\n\t\t\toView = this.getView();\n\t\t\toView.bindElement({\n\t\t\t\tpath : \"/Employees(\" + oArgs.employeeId + \")\",\n\t\t\t\tevents : {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function (oEvent) {\n\t\t\t\t\t\toView.setBusy(true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function (oEvent) {\n\t\t\t\t\t\toView.setBusy(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t_onBindingChange : function (oEvent) {\n\t\t\t// No data for the binding\n\t\t\tif (!this.getView().getBindingContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"notFound\");\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Requiring a Namespaced Control in OpenUI5\nDESCRIPTION: This snippet shows how to require a custom control defined with a namespace in OpenUI5.  `sap.ui.define` is used to declare the dependency on 'my/app/MyControl'.  The module name uses forward slashes (/) to separate the namespace segments, as opposed to the dots (.) used in the class definition. The required module `MyControl` is then passed to the callback function, which can use it to create instances or access its properties.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/modules-and-dependencies-91f23a7.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"my/app/MyControl\"], function(MyControl) {\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Property Using Type Instance in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to bind a property using a type instance. It binds the `value` property of a `TextField` and `Input` control to a data model path, creating instances of `StringType` and `Float` respectively. It also configures format options for the `Float` type instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// \"StringType\" required from module \"sap/ui/model/type/String\"\n// \"Input\" required from module \"sap/m/Input\"\n// \"Float\" required from module \"sap/ui/model/type/Float\"\n\noTextField.bindProperty(\"value\", \"/company/name\", new StringType());\n\noControl = new Input({\n    value: {\n        path: \"/company/revenue\",\n        type: new Float({\n            minFractionDigits: 2,\n            maxFractionDigits: 2\n        })\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding init method and calling superclass implementation in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to override the `init` method in an OpenUI5 control and call the superclass's `init` method to ensure proper initialization. It checks if the superclass implements the `init` method before calling it using `apply` to pass the original arguments. This pattern prevents breaking the control when the superclass implements or removes the `init` method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/adding-method-implementations-91f0a8d.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.somelib.SomeControl.extend(\"my.OwnControl\", {\n       ...\n       init: function() {\n             if (sap.ui.somelib.SomeControl.prototype.init) { // check whether superclass implements the method\n                    sap.ui.somelib.SomeControl.prototype.init.apply(this, arguments); // call the method with the original arguments\n             }\n\n             //... do any further initialization of your subclass... \n       } \n\n```\n\n----------------------------------------\n\nTITLE: Accessing Fragment Elements\nDESCRIPTION: Loads an XML fragment using `this.loadFragment()` and then accesses an element within the fragment using `this.byId()`.  The fragment ID is prefixed with the view ID by default. The `then` function of the Promise ensures that the fragment is loaded before attempting to retrieve the element.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/programmatically-instantiating-xml-fragments-d6af195.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\nthis.loadFragment({\n    name: \"my.useful.VerySimpleUiPart\"\n}).then(function(myButton) {\n    // Retrieve the button via its ID\n    // in this exsample: myButton == theSameButton\n    var theSameButton = this.byId(\"btnInFragment\");\n}.bind(this));\n\n```\n\n----------------------------------------\n\nTITLE: Data Binding with Formatter in XML View - OpenUI5\nDESCRIPTION: This snippet illustrates how to use a formatter for data binding in an OpenUI5 XML view. It binds the `value` property of an `Input` control to the `/firstName` property and applies a formatter named `globalFormatter`. The `core:require` namespace makes the `globalFormatter` function available for formatting the data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/binding-syntax-e2e6f41.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{globalFormatter: 'my/globalFormatter'}\">\n    \n    <Input value=\"{path: '/firstName', formatter: 'globalFormatter'}\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: XML View Cache Configuration with Multiple Keys\nDESCRIPTION: This code snippet demonstrates how to configure the XML view cache with multiple cache keys. It uses `sap.ui.require` to load the `sap/ui/core/mvc/XMLView` module and then calls the `create` method with a cache configuration that includes an array of keys, including promises and strings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-view-cache-3d85d5e.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pCalculatedCacheKey = oKeyProvider1.getCacheKeyPromise();\nvar sAnotherKey = oKeyProvider2.getCacheKey();\n\nsap.ui.require(\"sap/ui/core/mvc/XMLView\", function (XMLView) {\n\tXMLView.create({\n\t\tid: \"cacheableView\",\n\t\tviewName: \"my.cacheableView\",\n\t\tcache: {\n\t\t\tkeys: [\n\t\t\t// several key providers, at least one\n\t\t\tpCalculatedCacheKeyPromise,\n\t\t\tsAnotherKey\n\t\t\t]\n\t\t}\n\t}).then(function (oXmlView) {\n\t\t// ...\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Type in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to define a custom data type by extending `sap.ui.model.SimpleType`.  The example creates a `Zipcode` type with format, parse, and validation logic. The validation logic ensures that the entered zip code has 5 digits.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// \"SimpleType\" required from module \"sap/ui/model/SimpleType\"\n// \"ValidateException\" required from module \"sap/ui/model/ValidateException\"\n\nconst Zipcode = SimpleType.extend(\"sap.ui.sample.Zipcode\", {\n    formatValue(oValue) {\n        return oValue;\n    },\n    parseValue(oValue) {\n        return oValue;\n    },\n    validateValue: function(oValue) {\n        if (!/^(\\d{5})?$/.test(oValue)) {\n            throw new ValidateException(\"Zip code must have 5 digits!\");\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: List Controller: Implementing Navigation Logic\nDESCRIPTION: This JavaScript snippet modifies the List controller to attach an onListItemPress function to the press handler. This function changes the FlexibleColumnLayout's layout to TwoColumnsMidExpanded, navigating to the detail page.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-adding-a-detail-page-4e4315c.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/MessageBox\",\n\t\"sap/f/library\"\n], function (Controller, Filter, FilterOperator, Sorter, MessageBox, fioriLibrary) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.List\", {\n\t\tonInit: function () {\n\t\t\tthis.oView = this.getView();\n\t\t\tthis._bDescendingSort = false;\n\t\t\tthis.oProductsTable = this.oView.byId(\"productsTable\");\n\t\t},\n\n\t\tonSearch: function (oEvent) {\n\t\t\tvar oTableSearchState = [],\n\t\t\t\tsQuery = oEvent.getParameter(\"query\");\n\n\t\t\tif (sQuery && sQuery.length > 0) {\n\t\t\t\toTableSearchState = [new Filter(\"Name\", FilterOperator.Contains, sQuery)];\n\t\t\t}\n\n\t\t\tthis.oProductsTable.getBinding(\"items\").filter(oTableSearchState, \"Application\");\n\t\t},\n\n\t\tonAdd: function () {\n\t\t\tMessageBox.information(\"This functionality is not ready yet.\", {title: \"Aw, Snap!\"});\n\t\t},\n\n\t\tonSort: function () {\n\t\t\tthis._bDescendingSort = !this._bDescendingSort;\n\t\t\tvar oBinding = this.oProductsTable.getBinding(\"items\"),\n\t\t\t\toSorter = new Sorter(\"Name\", this._bDescendingSort);\n\n\t\t\toBinding.sort(oSorter);\n\t\t},\n\n\t\tonListItemPress: function () {\n\t\t\tvar oFCL = this.oView.getParent().getParent();\n\n\t\t\toFCL.setLayout(fioriLibrary.LayoutType.TwoColumnsMidExpanded);\n\t\t}\n\t});\n});\n\n```\n\n----------------------------------------\n\nTITLE: Routing Configuration in manifest.json (JavaScript)\nDESCRIPTION: This code configures the routing in the `manifest.json` file. It defines a router with a default route to the 'home' target.  The `config` section sets default values for the router, such as the router class, view type, and control ID. The routes array maps URL patterns to target views. The targets section defines the properties of each view to be displayed, including the view name, ID, and level. This configuration enables navigation within the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-enable-routing-cf3c57c.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"_version\": \"1.12.0\",\n   \"sap.app\": {\n      ...\n   },\n   \"sap.ui\": {\n      ...\n   },\n   \"sap.ui5\": {\n\n      \"rootView\": {\n          \"viewName\": \"sap.ui.demo.nav.view.App\",\n          \"type\": \"XML\",\n          \"async\": true,\n          \"id\": \"app\"\n      },\n      \"dependencies\": {\n         ...\n      },\n      \"models\": {\n         ...\n      },\n      \"routing\": {\n         \"config\": {\n            \"routerClass\": \"sap.m.routing.Router\",\n            \"type\": \"View\",\n            \"viewType\": \"XML\",\n            \"path\": \"sap.ui.demo.nav.view\",\n            \"controlId\": \"app\",\n            \"controlAggregation\": \"pages\",\n            \"transition\": \"slide\",\n            \"async\": true\n         },\n         \"routes\": [{\n            \"pattern\": \"\",\n            \"name\": \"appHome\",\n            \"target\": \"home\"\n         }],\n         \"targets\": {\n            \"home\": {\n               \"id\": \"home\",\n               \"name\": \"Home\",\n               \"level\" : 1\n            }\n         }\n      }\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Model for View or Control (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set a model for a specific view or control using the `setModel` method. When no model name is specified, the default model is set. It covers setting model for the entire view and for specific control like table.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/assigning-the-model-to-the-ui-91f0d1c.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.getView().setModel(oModel, \"myModel\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar oTable = this.getView().byId(\"table\");\noTable.setModel(oModel, \"myModel\");\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Typed View with View.create - OpenUI5\nDESCRIPTION: This JavaScript code shows how to instantiate a typed view using the sap.ui.core.mvc.View.create method. The viewName parameter specifies the module path to the typed view, prefixed with 'module:'. The resulting view is then placed in the 'content' area of the page.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/typed-view-e6bb33d.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst oView = await View.create({\n    viewName: \"module:myapp/views/MyView\"\n});\noView.placeAt(\"content\");\n```\n\n----------------------------------------\n\nTITLE: Loading Lazy Libraries using Lib.load API (Applications/Libraries)\nDESCRIPTION: This snippet shows how to load lazy libraries manually using the `sap/ui/core/Lib.load` API. The `Lib.load` method is called with the library name, and a promise is returned which is then handled. This ensures that the lazy-loaded library is available when needed, without being preloaded unnecessarily. Use the `load` method before any resources of the library are required to preload the complete library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-dependencies-to-libraries-and-components-8521ad1.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nLib.load({name: \"...\"}).then(/*...*/);\n```\n\n----------------------------------------\n\nTITLE: Declarative Component Initialization with ComponentSupport - HTML\nDESCRIPTION: This code snippet demonstrates how to initialize an OpenUI5 component declaratively in an HTML file using the `ComponentSupport` module.  It removes the need for directly executable scripts. The component is defined within a `div` tag with `data-sap-ui-component` attributes. Dependencies: sap-ui-core.js. Input: HTML page. Output: Instantiated OpenUI5 component.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/make-your-app-csp-compliant-1f81a09.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n\tsrc=\"resources/sap-ui-core.js\"\n\tdata-sap-ui-async=\"true\"\n\tdata-sap-ui-on-init=\"module:sap/ui/core/ComponentSupport\">\n</script>\n<body class=\"sapUiBody\" id=\"content\">\n\t<div data-sap-ui-component data-name=\"sap.ui.demo.walkthrough\" data-id=\"container\" data-settings='{\"id\" : \"walkthrough\"}'></div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Starting an App in iFrame using OPA5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to start an application within an iFrame using the iStartMyAppInAFrame method of the Opa5 class.  The method takes the URL of the application as a parameter. The iFrame and test window must be in the same domain. Ensure 'sap/ui/test/Opa5' is required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/getting-started-with-opa5-22f175e.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Opa5\" required from \"sap/ui/test/Opa5\"\nOpa5().iStartMyAppInAFrame(\"index.html?responderOn=true\");\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Nickname with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"nickname\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"nickname\" property pointing to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_78\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"nickname\" : { \"Path\" : \"PROPERTY\" } }\n```\n\n----------------------------------------\n\nTITLE: Displaying DateTimeWithTimezone in OData V4 - XML View\nDESCRIPTION: Demonstrates how to use the `sap.ui.model.odata.type.DateTimeWithTimezone` type in an XML view with OData V4 to display a timestamp with its corresponding timezone. This requires two OData properties: one `Edm.DateTimeOffset` property ('DateTimeOffset') and one `Edm.String` property ('TimezoneID') holding the IANA time zone ID. The OData V4 model automatically determines the types based on the metadata, but manual definition is also possible, especially when copying OData model values to a JSON model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 'DateTimeOffset' refers to an Edm.DateTimeOffset property -->\n<!-- 'TimezoneID' refers to an Edm.String property holding the IANA time zone ID -->\n<!-- If no type is set, the OData V4 model automatically determines the types based on the metadata -->\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{DateTimeWithTimezone: 'sap/ui/model/odata/type/DateTimeWithTimezone'}\">\n    ...\n    <Text text=\"{parts: ['DateTimeOffset', 'TimezoneID'], type: 'DateTimeWithTimezone'}\" />\n\n<!-- You must specify the types when copying the OData model values to a JSON model -->\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{\n        DateTimeOffset: 'sap/ui/model/odata/type/DateTimeOffset',\n        DateTimeWithTimezone: 'sap/ui/model/odata/type/DateTimeWithTimezone',\n        StringType: 'sap/ui/model/odata/type/String'\n    }\">\n    ...\n    <Text text=\"{\n        parts: [\n            {path: 'json>DateTimeOffset', type: 'DateTimeOffset'},\n            {path: 'json>TimezoneID', type: 'StringType'}\n        ],\n        type: 'DateTimeWithTimezone'\n     }\" />\n```\n\n----------------------------------------\n\nTITLE: Relative Date Formatting with DateFormat (JavaScript)\nDESCRIPTION: This snippet demonstrates relative date formatting using `sap.ui.core.format.DateFormat.getDateInstance`. It shows how to format dates relative to the current date (e.g., \"yesterday\") and illustrates the effect of the `relativeRange` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/date-format-91f2eba.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({\n    relative: true\n});\n \nvar nMS = 1000 * 60 * 60 * 24; // milliseconds in a day\nvar oDate = UI5Date.getInstance(Date.now() - nMS);\noDateFormat.format(oDate); // returns \"yesterday\"\n \noDate = UI5Date.getInstance(Date.now() + 7 * nMS);\noDateFormat.format(oDate); // isn't returned in relative format because the default value of relativeRange is [6|-6,]\n```\n\n----------------------------------------\n\nTITLE: Initializing ODataModel with Service URL JavaScript\nDESCRIPTION: This code snippet shows how to initialize an ODataModel with a service URL using JavaScript. It creates a new instance of the ODataModel, providing the URL as a parameter. The `ODataModel` class is required from the `sap/ui/model/odata/v2/ODataModel` module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n// \"ODataModel\" required from module \"sap/ui/model/odata/v2/ODataModel\"\nvar oModel = new ODataModel(myServiceUrl);\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice List View - XML\nDESCRIPTION: Defines the XML view for the invoice list, `InvoiceList.view.xml`. A list control is used to display the invoice data, with its `items` aggregation bound to the `Invoices` array in the `invoice` model. An `ObjectListItem` is used as a template to display each invoice's quantity and product name.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-19-aggregation-binding-typescript-24580fb.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <List\n      headerText=\"{i18n>invoiceListTitle}\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\"\n      items=\"{invoice>/Invoices}\" >\n      <items>\n         <ObjectListItem\n            title=\"{invoice>Quantity} x {invoice>ProductName}\"/>\n      </items>\n   </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Initializing OData V2 Mock Server in OpenUI5 (JavaScript)\nDESCRIPTION: This snippet initializes the OData V2 mock server using `sap.ui.core.util.MockServer`. It creates a mock server instance, simulates the backend service using metadata and mock data, and then starts the server. The server intercepts requests to the root URI and returns mocked responses. It depends on the `sap/ui/core/util/MockServer` and `sap/base/Log` modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-creating-a-mock-server-to-simulate-data-50897de.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/util/MockServer\",\n    \"sap/base/Log\"\n], (MockServer, Log) => {\n    \"use strict\";\n\n    return {\n        /**\n         * Initializes the mock server.\n         * You can configure the delay with the URL parameter \"serverDelay\".\n         * The local mock data in this folder is returned instead of the real data for testing.\n         * @public\n         */\n        init() {\n            // create\n            const oMockServer = new MockServer({rootUri: \"/\"});\n\n            // simulate against the metadata and mock data\n            oMockServer.simulate(\"../localService/metadata.xml\", {\n                sMockdataBaseUrl: \"../localService/mockdata\",\n                bGenerateMissingMockData: true\n            });\n\n            // start\n            oMockServer.start();\n\n            Log.info(\"Running the app with mock data\");\n        }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Dialog Close Button Text to i18n.properties (INI)\nDESCRIPTION: This snippet extends the text bundle (i18n.properties) with a new text for the dialog's Close button, ensuring proper internationalization support.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-17-fragment-callbacks-typescript-f030afc.md#_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\n# App Descriptor\nappTitle=Hello World\nappDescription=A simple walkthrough app that explains the most important concepts of OpenUI5\n\n# Hello Panel\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\nhomePageTitle=UI5 TypeScript Walkthrough\nhelloPanelTitle=Hello World\nopenDialogButtonText=Say Hello With Dialog\ndialogCloseButtonText=Ok\n```\n\n----------------------------------------\n\nTITLE: Using Event Delegates - Good Example\nDESCRIPTION: This example demonstrates the correct way to extend a control's functionality by using `addEventDelegate`. This allows you to add custom logic to the control's lifecycle without overriding the original methods, ensuring compatibility and preventing potential breakage.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\noControl.addEventDelegate({\n    onAfterRendering:function() {\n        // do something\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: TimePicker with OData V2 Time (XML View)\nDESCRIPTION: This XML snippet shows how to use the sap.m.TimePicker with an OData V2 time in an XML view. It binds the TimePicker to an OData V2 property, specifying the 'Time' type.  The model value is an object like {ms: 41635000, __edmType: 'Edm.Time'}.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Model value is an object like {ms: 41635000, __edmType: 'Edm.Time'} -->\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{Time: 'sap/ui/model/odata/type/Time'}\">\n    ...\n   <TimePicker value=\"{path: '/V2/Time', type: 'Time'}\"/>\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.newObject with Object.create (Native)\nDESCRIPTION: This example demonstrates replacing `jQuery.sap.newObject` with the native `Object.create` method.  `Object.create` creates a new object, using an existing object as the prototype of the newly created object.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nObject.create\n```\n\n----------------------------------------\n\nTITLE: Initializing i18n Resource Model in Controller (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize the i18n resource model in the controller's `onInit` function.  It creates a `ResourceModel` instance, specifying the bundle name, and sets it on the view with the name 'i18n'. This allows binding control properties to translatable texts.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-translatable-texts-typescript-4dcf52e.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport MessageToast from \"sap/m/MessageToast\";\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\n\n/**\n * @name ui5.walkthrough.controller.App\n */\nexport default class AppController extends Controller {\n   onInit(): void {\n      // set data model on view\n      const data = {\n         recipient: {\n            name: \"World\"\n         }\n      };\n      const dataModel = new JSONModel(data);\n      // because of \"strict\" mode in tsconfig.json a null check is required for this.getView()\n      this.getView()?.setModel(dataModel);\n\n      // set i18n model on view\n      const i18nModel = new ResourceModel({\n         bundleName: \"ui5.walkthrough.i18n.i18n\"\n      });\n      this.getView()?.setModel(i18nModel, \"i18n\");\n   }\n   \n   onShowHello(): void {\n      // read msg from i18n model\n      const recipient = (this.getView()?.getModel() as JSONModel)?.getProperty(\"/recipient/name\");\n      const resourceBundle = (this.getView()?.getModel(\"i18n\") as ResourceModel)?.getResourceBundle() as ResourceBundle;\n      const msg = resourceBundle.getText(\"helloMsg\", [recipient]) || \"no text defined\";\n      // show message\n      MessageToast.show(msg);\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Core.ready Usage - JavaScript\nDESCRIPTION: This code demonstrates how to use the `Core.ready` method in OpenUI5 to execute code after the OpenUI5 core has been initialized. It shows two ways to use `Core.ready`: with `await` and with a callback function.  It requires the `sap/ui/core/Core` module to be loaded.  It executes the provided function only after the OpenUI5 core is ready.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/bootstrapping-loading-and-initializing-a04b0d1.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Core\"], async (Core) => {\n    // Either usage of Core.ready() as a Promise\n    await Core.ready();\n    // ...\n\n    // Or usage of a callback function\n    Core.ready(() => {\n        // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Text Binding to Model Property in XML View (OpenUI5)\nDESCRIPTION: This code snippet shows how to bind the 'text' property of an sap.m.Text control to a model property using the binding syntax '{/greetingText}'.  The curly braces indicate a binding expression, and the slash indicates that the binding path is relative to the root of the model. This is used within an XML view definition to display data from the default model in an OpenUI5 application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-create-property-binding-d70e989.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Text text=\"{/greetingText}\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding Detail Page Title in i18n.properties (INI)\nDESCRIPTION: This snippet adds a new text-value pair to the resource bundle (i18n.properties) to define a title for the new detail page. This title will be displayed on the detail page.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-typescript-6173e3d.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n…\n# Invoice List\ninvoiceListTitle=Invoices\ninvoiceStatusA=New\ninvoiceStatusB=In Progress\ninvoiceStatusC=Done\n\n# Detail Page\ndetailPageTitle=UI5 TypeScript Walkthrough - Details\n```\n\n----------------------------------------\n\nTITLE: Binding Text to i18n Resource in XML View\nDESCRIPTION: This snippet demonstrates how to bind the `text` property of a `sap.m.Button` to a text defined in the `i18n` model using data binding. It uses the expression `{i18n>showHelloButtonText}` to retrieve the value associated with the `showHelloButtonText` key from the resource bundle. The `description` attribute of the Input field is also bound, but not localized using the i18n model, which is discouraged.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-translatable-texts-df86bfb.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.App\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Button\n      text=\"{i18n>showHelloButtonText}\"\n      press=\".onShowHello\"/>\n   <Input\n      value=\"{/recipient/name}\"\n      description=\"Hello {/recipient/name}\"\n      valueLiveUpdate=\"true\"\n      width=\"60%\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.device.is properties with sap/ui/Device in JavaScript\nDESCRIPTION: This snippet shows how to replace the `jQuery.device.is` properties with the `sap/ui/Device` API for checking device characteristics like OS and system type. These replacements involve using the `Device.os` and `Device.system` properties to check for specific device attributes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.android && Device.system.phone\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.android && Device.system.tablet\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.system.desktop\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.ios && Device.system.ipad\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.ios && Device.system.phone\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.orientation.landscape\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.system.phone\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.orientation.portrait\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.system.tablet\n```\n\n----------------------------------------\n\nTITLE: Opening Dialog Fragment in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to open a dialog defined as an XML fragment in an OpenUI5 application. It uses the `loadFragment` function to instantiate the fragment and then opens the resulting dialog control.  The \"this\" context must be a controller instance. Global models and models set on the controller's view are automatically available for data binding within the dialog. The fragment's content is automatically added to the view's `dependents` aggregation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-dialogs-defined-as-fragments-aeb86c1.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"this\" has to be the controller instance of a controller extending module \"sap/ui/core/mvc/Controller\"\nasync openDialog() {\n\tthis.oDialog ??= await this.loadFragment({\n\t\tname: \"testdata.fragments.XMLFragmentDialog\"\n\t});\n\tthis.oDialog.open();\n}\n```\n\n----------------------------------------\n\nTITLE: Add ObjectPageLayout to Detail.view.xml\nDESCRIPTION: This snippet adds an instance of the `sap.uxap.ObjectPageLayout` control to the `Detail.view.xml` file.  Attributes such as `showTitleInHeaderContent`, `alwaysShowContentHeader`, `preserveHeaderStateOnScroll`, `headerContentPinnable`, `isChildPage`, and `upperCaseAnchorBar` are configured. This provides the basic structure for the detail page.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-using-object-page-layout-as-a-detail-page-d1ffe61.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.uxap\"\n\txmlns:m=\"sap.m\"\n\txmlns:f=\"sap.f\"\n\txmlns:form=\"sap.ui.layout.form\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<ObjectPageLayout\n\t\tid=\"ObjectPageLayout\"\n\t\tshowTitleInHeaderContent=\"true\"\n\t\talwaysShowContentHeader=\"false\"\n\t\tpreserveHeaderStateOnScroll=\"false\"\n\t\theaderContentPinnable=\"true\"\n\t\tisChildPage=\"true\"\n\t\tupperCaseAnchorBar=\"false\">\n\t</ObjectPageLayout>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using UI5Date - JavaScript\nDESCRIPTION: Illustrates how to create and use `sap.ui.core.date.UI5Date` for handling dates and times in OpenUI5, especially when a specific time zone is configured. The example shows how to instantiate `UI5Date` using `UI5Date.getInstance`, set and get date components (day of the month) in both the configured time zone and UTC.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n    \"sap/base/Log\",\n    \"sap/ui/core/date/UI5Date\"\n], function (Log, UI5Date) {\n    \"use strict\";\n \n    // Assuming the application is called with this URL parameter: sap-timezone=Pacific/Kiritimati   \n    // Create an instance of UI5Date with a preset date\n    const oUI5Date = UI5Date.getInstance(2023, 0, 1, 0, 0, 0, 0); // To create an instance of UI5Date for today/now, just use UI5Date.getInstance() without parameters\n     \n    Log.info(oUI5Date.getDate()); // Returns 1, the day of the month in the configured time zone\n  \n    Log.info(oUI5Date.setDate(20)); // Returns the timestamp in milliseconds, based on the UNIX epoch, until the \"20th Jan 2023 00:00:00\" in \"Pacific/Kiritimati\" time\n \n    // \"20th Jan 2023 00:00:00\" in \"Pacific/Kiritimati\" time is equal to \"19th Jan 2023 10:00:00\" in universal time\n    Log.info(oUI5Date.getUTCDate()); // Returns 19, the day of the month in universal time,\n \n    Log.info(oUI5Date.setUTCDate(24)); // Returns the timestamp in milliseconds, based on the UNIX epoch, until the \"24th Jan 2023 10:00:00\" in universal time   \n});\n\n```\n\n----------------------------------------\n\nTITLE: Composite Data Binding in XML View - OpenUI5\nDESCRIPTION: This snippet showcases composite data binding in an OpenUI5 XML view. It binds the `value` property of a `TextField` control to multiple properties (`birthday/day`, `birthday/month`, `birthday/year`) using the `parts` array. A formatter function `globalFormatter` is then used to combine these individual values into a single formatted string.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/binding-syntax-e2e6f41.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{globalFormatter: 'my/globalFormatter'}\">\n\n    <TextField value=\"{\n        parts: [{path: 'birthday/day'}, {path: 'birthday/month'}, {path: 'birthday/year'}],\n        formatter: 'globalFormatter'\n    }\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Preventable Event in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to define an event that can be prevented by the application using `allowPreventDefault` property.  It sets the `allowPreventDefault` property of the `close` event to `true`, which allows the application to cancel the event.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-the-control-metadata-7b52540.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nevents: {\n   \"close\": {allowPreventDefault : true}  \n}\n```\n\n----------------------------------------\n\nTITLE: Adding Search Field to Invoice List View - XML\nDESCRIPTION: This XML snippet adds a search field to the header toolbar of an invoice list. The `search` event of the search field is bound to the `.onFilterInvoices` event handler function in the controller. The list ID `invoiceList` is also defined for later use in the controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-23-filtering-5295470.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n   xmlns=\"sap.m\"\n   xmlns:core=\"sap.ui.core\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <List\n      id=\"invoiceList\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\"\n      items=\"{invoice>/Invoices}\" >\n      <headerToolbar>\n         <Toolbar>\n            <Title text=\"{i18n>invoiceListTitle}\"/>\n            <ToolbarSpacer/>\n            <SearchField \n               width=\"50%\" \n               search=\".onFilterInvoices\"/>\n         </Toolbar>\n      </headerToolbar>\n      ...\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Implementing Split Pane Layout with OData Binding in XML\nDESCRIPTION: This XML snippet defines the structure for displaying a list of people and their details in a split pane layout. It utilizes the `Table` control for listing people and `SemanticPage` with `Form` controls to display details like address and best friend information.  OData V4 is used for data binding with relative (property) bindings for data reuse.  The table uses the 'People' OData collection and utilizes the 'peopleGroup' update group.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-list-detail-scenario-ec44581.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.core.tutorial.odatav4.controller.App\"\n\tdisplayBlock=\"true\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:l=\"sap.ui.layout\"\n\txmlns:semantic=\"sap.f.semantic\"\n\txmlns:f=\"sap.ui.layout.form\"\n\txmlns:core=\"sap.ui.core\">\n\t<Shell>\n\t\t<App busy=\"{appView>/busy}\" class=\"sapUiSizeCompact\">\n\t\t\t<pages>\n\t\t\t\t...\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<l:ResponsiveSplitter defaultPane=\"defaultPane\">\n\t\t\t\t\t\t\t<l:PaneContainer orientation=\"Horizontal\">\n\t\t\t\t\t\t\t\t<l:SplitPane id=\"defaultPane\">\n\t\t\t\t\t\t\t\t\t<l:layoutData>\n\t\t\t\t\t\t\t\t\t\t<l:SplitterLayoutData id=\"defaultLayout\" size=\"100%\" resizable=\"false\"/>\n\t\t\t\t\t\t\t\t\t</l:layoutData>\n\t\t\t\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\t\t\t\tid=\"peopleList\"\n\t\t\t\t\t\t\t\t\t\tgrowing=\"true\"\n\t\t\t\t\t\t\t\t\t\tgrowingThreshold=\"10\"\n\t\t\t\t\t\t\t\t\t\titems=\"{\n\t\t\t\t\t\t\t\t\t\t\tpath: '/People',\n\t\t\t\t\t\t\t\t\t\t\tparameters: {\n\t\t\t\t\t\t\t\t\t\t\t\t$count: true,\n\t\t\t\t\t\t\t\t\t\t\t\t$$updateGroupId : 'peopleGroup'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t\t\tmode=\"SingleSelectLeft\"\n\t\t\t\t\t\t\t\t\t\tselectionChange=\".onSelectionChange\">\n\t\t\t\t\t\t\t\t\t\t<headerToolbar>\n\t\t\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t\t</headerToolbar>\n\t\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t\t</l:SplitPane>\n\t\t\t\t\t\t\t\t<l:SplitPane>\n\t\t\t\t\t\t\t\t\t<!--Details-->\n\t\t\t\t\t\t\t\t\t<!--remove busy-->\n\t\t\t\t\t\t\t\t\t<semantic:SemanticPage\n\t\t\t\t\t\t\t\t\t\tid=\"detailArea\"\n\t\t\t\t\t\t\t\t\t\tvisible=\"false\">\n\t\t\t\t\t\t\t\t\t\t<semantic:titleHeading>\n\t\t\t\t\t\t\t\t\t\t\t<Title\n\t\t\t\t\t\t\t\t\t\t\t\ttext=\"{FirstName} {LastName}\"\n\t\t\t\t\t\t\t\t\t\t\t\tlevel=\"H2\"/>\n\t\t\t\t\t\t\t\t\t\t</semantic:titleHeading>\n\t\t\t\t\t\t\t\t\t\t<semantic:headerContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<FlexBox>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<VBox>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ObjectAttribute text=\"{i18n>userNameLabelText}\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ObjectAttribute text=\"{UserName}\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</VBox>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<VBox class=\"sapUiMediumMarginBegin\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ObjectAttribute text=\"{i18n>ageLabelText}\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ObjectNumber number=\"{Age}\" unit=\"Years\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</VBox>\n\t\t\t\t\t\t\t\t\t\t\t\t</FlexBox>\n\t\t\t\t\t\t\t\t\t\t</semantic:headerContent>\n\t\t\t\t\t\t\t\t\t\t<semantic:content>\n\t\t\t\t\t\t\t\t\t\t\t<VBox>\n\t\t\t\t\t\t\t\t\t\t\t\t<FlexBox wrap=\"Wrap\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<f:Form\teditable=\"false\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:title>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<core:Title text=\"{i18n>addressTitleText}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:title>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:layout>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:ResponsiveGridLayout\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabelSpanXL=\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabelSpanL=\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabelSpanM=\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabelSpanS=\"12\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjustLabelSpan=\"false\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temptySpanXL=\"4\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temptySpanL=\"4\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temptySpanM=\"4\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temptySpanS=\"0\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumnsXL=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumnsL=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumnsM=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsingleContainerFullSize=\"false\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:layout>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:formContainers>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:FormContainer>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:formElements>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>addressLabelText}\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Text text=\"{HomeAddress/Address}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>cityLabelText}\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Text text=\"{HomeAddress/City/Name}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>regionLabelText}\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Text text=\"{HomeAddress/City/Region}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>countryLabelText}\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Text text=\"{HomeAddress/City/CountryRegion}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:formElements>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:FormContainer>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:formContainers>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</f:Form>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<f:Form\teditable=\"false\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:title>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<core:Title text=\"{i18n>bestFriendTitleText}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:title>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:layout>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:ResponsiveGridLayout\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabelSpanXL=\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabelSpanL=\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabelSpanM=\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabelSpanS=\"12\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjustLabelSpan=\"false\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temptySpanXL=\"4\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temptySpanL=\"4\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temptySpanM=\"4\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temptySpanS=\"0\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumnsXL=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumnsL=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumnsM=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsingleContainerFullSize=\"false\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:layout>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:formContainers>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:FormContainer>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:formElements>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>nameLabelText}\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Text text=\"{BestFriend/FirstName} {BestFriend/LastName}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>ageLabelText}\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Text text=\"{BestFriend/Age}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>userNameLabelText}\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Text text=\"{BestFriend/UserName}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:formElements>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:FormContainer>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</f:formContainers>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</f:Form>\n\t\t\t\t\t\t\t\t\t\t\t\t</FlexBox>\n\t\t\t\t\t\t\t\t\t\t\t</VBox>\n\t\t\t\t\t\t\t\t\t\t</semantic:content>\n\t\t\t\t\t\t\t\t\t</semantic:SemanticPage>\n\t\t\t\t\t\t\t\t</l:SplitPane>\n\t\t\t\t\t\t\t</l:PaneContainer>\n\t\t\t\t\t\t</l:ResponsiveSplitter>\n\t\t\t\t\t</content>\n\t\t\t\t\t...\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding Back Button to Detail View - XML\nDESCRIPTION: This XML snippet configures the Detail view to display a back button and registers an event handler `onNavBack` to be triggered when the button is pressed. The `showNavButton` property of the `Page` control is set to `true` to enable the back button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-32-routing-back-and-history-8ef57cf.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.Detail\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page\n\t\ttitle=\"{i18n>detailPageTitle}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\">\n\t\t<ObjectHeader\n\t\t\tintro=\"{invoice>ShipperName}\"\n\t\t\ttitle=\"{invoice>ProductName}\"/>\n\t</Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Initializing Router in Component.js (JavaScript)\nDESCRIPTION: This code initializes the router in the `Component.js` file.  The `init` function is overridden to call the parent's `init` function and then initialize the router. This ensures that the routing configuration defined in the `manifest.json` file is applied when the application starts. The router is obtained using `this.getRouter()` and then initialized with `initialize()`. Requires `sap/ui/core/UIComponent`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-enable-routing-cf3c57c.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/UIComponent\"\n], function (UIComponent) {\n    \"use strict\";\n\n    return UIComponent.extend(\"sap.ui.demo.nav.Component\", {\n\n        metadata: {\n            manifest: \"json\"\n        },\n\n        init: function () {\n            // call the init function of the parent\n            UIComponent.prototype.init.apply(this, arguments);\n\n            // create the views based on the url/hash\n            this.getRouter().initialize();\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Service Metadata - JavaScript\nDESCRIPTION: This code snippet demonstrates how to access the service metadata of an OData model instance using the getServiceMetadata() method.  The service metadata is loaded asynchronously, and this function provides access to the cached JSON representation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oMetadata = oModel.getServiceMetadata();\n```\n\n----------------------------------------\n\nTITLE: Working with Responsive Toolbars in OPA5 (JavaScript)\nDESCRIPTION: This code demonstrates how to work with responsive toolbars that have overflowing content. It checks for the existence of a toggle button in the toolbar and presses it only if it is visible and interactable, avoiding errors when the button is not present due to screen size. `Ancestor` and `Press` are used for finding and interacting with the button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-opa5-ce4b180.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.waitFor({\n    id: sToolbarId, // find the toolbar\n    success: function (oToolbar) {\n        this.waitFor({\n        controlType: \"sap.m.ToggleButton\",\n        visible: false, // look for ANY toggle button in the toolbar\n        matchers: new Ancestor(oToolbar),\n        success: function (aToggleButton) {\n            if (aToggleButton[0].$().length) {\n                // if the button exists, press on it\n                this.waitFor({\n                    controlType: \"sap.m.ToggleButton\",\n                    matchers: new Ancestor(oToolbar),\n                    actions: new Press()\n                });\n            } else {\n            Opa5.assert.ok(true, \"The toggle button is not present\");\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Static Binding Part Example 1 - XML\nDESCRIPTION: This XML snippet demonstrates using a static binding part with a common formatter function to achieve different behavior.  An Icon's 'src' and 'tooltip' are bound using the 'formatStatus' formatter, where a static part ('icon' or 'tooltip') dictates the return value.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/composite-binding-a2fe8e7.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- formatStatus returns a text or an icon source computed from the first two parts depending on the third part -->\n<core:Icon decorative=\"false\"\n    src=\"{\n        parts: ['deliveryStatus', 'paymentStatus', {value: 'icon'}],\n        formatter: 'formatter.formatStatus'\n    }\"\n    tooltip=\"{\n        parts: ['deliveryStatus', 'paymentStatus', {value: 'tooltip'}],\n        formatter: 'formatter.formatStatus'\n    }\"/>\n```\n\n----------------------------------------\n\nTITLE: Extending Controller with Dialog Close Function\nDESCRIPTION: This JavaScript code extends the `HelloPanel` controller with an `onCloseDialog` function. This function retrieves the dialog instance using `byId` and closes the dialog using the `close` function. This function is triggered by the press event on the \"OK\" button in the dialog.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-17-fragment-callbacks-354f98e.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/m/MessageToast\"\n], (Controller, MessageToast) => {\n\t\"use strict\";\n\n\treturn Controller.extend(\"ui5.walkthrough.controller.HelloPanel\", {\n\t\tonShowHello() {\n\t\t\t// read msg from i18n model\n\t\t\tconst oBundle = this.getView().getModel(\"i18n\").getResourceBundle();\n\t\t\tconst sRecipient = this.getView().getModel().getProperty(\"/recipient/name\");\n\t\t\tconst sMsg = oBundle.getText(\"helloMsg\", [sRecipient]);\n\n\t\t\t// show message\n\t\t\tMessageToast.show(sMsg);\n\t\t},\n\n\t\tasync onOpenDialog() {\n\t\t\t// create dialog lazily\n\t\t\tthis.oDialog ??= await this.loadFragment({\n\t\t\t\tname: \"ui5.walkthrough.view.HelloDialog\"\n\t\t\t});\n\n\t\t\tthis.oDialog.open();\n\t\t},\n\n\t\tonCloseDialog() {\n\t\t\t// note: We don't need to chain to the pDialog promise, since this event handler\n\t\t\t// is only called from within the loaded dialog itself.\n\t\t\tthis.byId(\"helloDialog\").close();\n\t\t}\n\t});\n\n});\n```\n\n----------------------------------------\n\nTITLE: XML View with OData Binding\nDESCRIPTION: This XML snippet defines an OpenUI5 view using SAPUI5's XML templating. It demonstrates the usage of data binding to OData properties, including type constraints such as maxLength and nullable. The example also shows the usage of sap.m controls like SimpleForm, Label, Text, and HBox, along with the core:Icon and core:Title.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-templating-5ee619f.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\" xmlns:form=\"sap.ui.layout.form\" xmlns:mvc=\"sap.ui.core.mvc\">\n  <form:SimpleForm>\n    <form:title>\n      <core:Title text=\"{path : 'BusinessPartnerID', type : 'sap.ui.model.odata.type.String', constraints : {'maxLength':'10','nullable':'false'}}\"/>\n    </form:title>\n    <Label text=\"Name\"/>\n    <Text text=\"{path : 'CompanyName', type : 'sap.ui.model.odata.type.String', constraints : {'maxLength':'80'}} {path : 'LegalForm', type : 'sap.ui.model.odata.type.String', constraints : {'maxLength':'10'}}\"/>\n    <Label text=\"Phone\"/>\n    <HBox>\n      <core:Icon src=\"sap-icon://phone\" width=\"2em\"/>\n      <Text text=\"{path : 'PhoneNumber', type : 'sap.ui.model.odata.type.String', constraints : {'maxLength':'30'}}\"/>\n    </HBox>\n    <Label text=\"Web\"/>\n    <HBox>\n      <Text text=\"{path : 'WebAddress', type : 'sap.ui.model.odata.type.String', constraints : {}}\"/>\n    </HBox>\n  </form:SimpleForm>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Creating Home.view.xml (XML)\nDESCRIPTION: This XML code defines the `Home` view. It contains a `Page` control with a button. The title of the page is bound to the `i18n>homePageTitle` property. The `sapUiResponsiveContentPadding` class is added to the page to ensure proper padding on different screen sizes. Requires `sap.m` and `sap.ui.core.mvc` namespaces.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-enable-routing-cf3c57c.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"sap.ui.demo.nav.controller.Home\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Page title=\"{i18n>homePageTitle}\" class=\"sapUiResponsiveContentPadding\">\n      <content>\n         <Button text=\"{i18n>iWantToNavigate}\" class=\"sapUiTinyMarginEnd\"/>\n      </content>\n   </Page>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Currency Format Instance - OpenUI5 JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a currency format instance in OpenUI5 using the `NumberFormat.getCurrencyInstance()` method. It shows the basic way to create an instance without any additional format options. The required module 'sap/ui/core/format/NumberFormat' needs to be loaded before creating the instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-formatting-e978728.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// create a simple currency formatting instance, without any additional options\nsap.ui.require([\"sap/ui/core/format/NumberFormat\"], function(NumberFormat) {\n   var oCurrencyFormat = NumberFormat.getCurrencyInstance();\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Date Ranges as String to DateRangeSelection - XML\nDESCRIPTION: This code binds a date range that is stored as a single formatted string in the backend to a DateRangeSelection control. The `valueFormat` property specifies the format of the dates in the string. The delimiter property is used to specify the delimiter between the two dates.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/date-and-time-related-controls-data-binding-e1ddc69.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<DateRangeSelection\n    value=\"{path: 'EntryDateRange', valueFormat: 'MMM d, y'}\"/>\n```\n\n----------------------------------------\n\nTITLE: Forwarding Items Aggregation to Internal List - JS\nDESCRIPTION: This example shows how to forward an `items` aggregation from a `FilterableList` composite control to an internal `sap.m.List` control using `idSuffix`. This allows the application developer to define the items of the list while leveraging the existing features of `sap.m.List`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/aggregation-forwarding-64a5e17.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\naggregations: {\n\t // The items forwarded from the FilterableList to the internal sap.m.List\n\t items : {type: \"sap.m.ListItemBase\", multiple: true, forwarding: {\n\t\t   idSuffix: \"-myInternalList\",\n\t\t   aggregation: \"items\"\n\t }}\n\n```\n\n----------------------------------------\n\nTITLE: Changing Busy Indicator Delay - JavaScript\nDESCRIPTION: This code snippet demonstrates how to change the default delay of a local busy indicator for a specific control.  Assumes `oMyListBox` is an instance of `sap.m.ListBase` or a subclass. The delay is specified in milliseconds.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/busy-indicators-0dd2110.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\noMyListBox.setBusyIndicatorDelay(<number>);\n```\n\n----------------------------------------\n\nTITLE: Configure Northwind Destination Route in neo-app.json\nDESCRIPTION: This code snippet configures a route in the `neo-app.json` file to forward requests to the Northwind OData service via a defined destination. It acts as a proxy to prevent same-origin policy issues in the browser during development and testing. The path `/destinations/northwind` is mapped to the `northwind` destination configured in the SAP BTP Cockpit.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/create-a-northwind-destination-3a16c7a.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"welcomeFile\": \"index.html\",\n  \"routes\": [\n    {\n      \n      \"path\": \"/resources\",\n      \"target\": {\n        \"type\": \"service\",\n        \"name\": \"sapui5\",\n        \"version\": \"snapshot\",\n        \"entryPath\": \"/resources\"\n      },\n      \"description\": \"SAPUI5 Resources\"\n    },\n    {\n      \"path\": \"/test-resources\",\n      \"target\": {\n        \"type\": \"service\",\n        \"name\": \"sapui5\",\n        \"entryPath\": \"/test-resources\"\n      },\n      \"description\": \"SAPUI5 Test Resources\"\n    },\n    {\n      \"path\": \"/destinations/northwind\",\n      \"target\": {\n        \"type\": \"destination\",\n        \"name\": \"northwind\"\n      },\n      \"description\": \"Northwind OData Service\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a QUnit Test Module to a Test Suite in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to add a QUnit test module to a test suite in an OpenUI5 application. It defines a test entry within the `tests` object, specifying the module's location and a descriptive title.  It relies on the existing test suite structure and conventions of OpenUI5.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-qunit-test-7080029.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(function() {\n\t\"use strict\";\n\n\treturn {\n\n\t\t// ...\n\n\t\ttests: {\n\t\t\t\"unit/MyTest\": {\n\t\t\t\ttitle: \"Unit tests for <NAMESPACE>\"\n\t\t\t},\n\t\t}\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing in manifest.json (JSON)\nDESCRIPTION: This snippet configures routing in the `manifest.json` file. It defines routes and targets for navigation between the overview and detail pages.  The `config` section defines the router class and default view settings. The `routes` section defines URL patterns and their corresponding targets. The `targets` section defines the views to be displayed for each target.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-typescript-6173e3d.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"sap.ui5\": {\n  ...\n    \"routing\": {\n      \"config\": {\n        \"routerClass\": \"sap.m.routing.Router\",\n        \"type\": \"View\",\n        \"viewType\": \"XML\",\n        \"path\": \"ui5.walkthrough.view\",\n        \"controlId\": \"app\",\n        \"controlAggregation\": \"pages\"\n      },\n      \"routes\": [\n        {\n          \"pattern\": \"\",\n          \"name\": \"overview\",\n          \"target\": \"overview\"\n        },\n        {\n          \"pattern\": \"detail\",\n          \"name\": \"detail\",\n          \"target\": \"detail\"\n        }\n      ],\n      \"targets\": {\n        \"overview\": {\n          \"id\": \"overview\",\n          \"name\": \"Overview\"\n        },\n        \"detail\": {\n          \"id\": \"detail\",\n          \"name\": \"Detail\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying List View XML: Adding Press Handler\nDESCRIPTION: This XML snippet adds a 'press' event handler to each ColumnListItem in the List.view.xml.  This allows navigation when a list item is selected.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-adding-a-detail-page-4e4315c.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\t\t...\n\t\t<!-- DynamicPage Content -->\n\t\t\t\t\t...\n\n\t\t\t\t\t...\n\t\t\t\t\t<items>\n\t\t\t\t\t\t<ColumnListItem type=\"Navigation\" press=\".onListItemPress\">\n\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t<ObjectIdentifier title=\"{products>Name}\" text=\"{products>ProductId}\"/>\n\t\t\t\t\t\t\t\t<ObjectNumber\n\t\t\t\t\t\t\t\t\tcore:require=\"{\n\t\t\t\t\t\t\t\t\t\tCurrency: 'sap/ui/model/type/Currency'\n\t\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t\tnumber=\"{\n\t\t\t\t\t\t\t\t\t\tparts:[\n\t\t\t\t\t\t\t\t\t\t\t{path:'products>Price'},\n\t\t\t\t\t\t\t\t\t\t\t{path:'products>CurrencyCode'}\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\ttype: 'Currency',\n\t\t\t\t\t\t\t\t\t\tformatOptions: {showMeasure: false}\n\t\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t\tunit=\"{products>CurrencyCode}\"/>\n\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t</ColumnListItem>\n\t\t\t\t\t</items>\n\t\t\t\t\t...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Control API with JavaScript\nDESCRIPTION: This JavaScript code defines the API for a composite control named 'SearchField'. It includes properties (value), hidden aggregations (_input, _btn) for internal controls, and an event (search). The hidden aggregations are used to manage the internal Input and Button controls.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/standard-composite-controls-c1512f6.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// \"Control\" required from \"sap/ui/core/Control\"\nvar SearchField = Control.extend(\"SearchField\", {\n  metadata : {\n    properties : {\n       \"value\" : \"string\"\n    },\n    aggregations: {\n       \"_input\" : {type : \"sap.m.Input\", multiple : false, visibility: \"hidden\"},\n       \"_btn\" : {type : \"sap.m.Button\", multiple : false, visibility: \"hidden\"}\n    },\n    events: {\n       \"search\" : {}\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration via Global Object (JavaScript)\nDESCRIPTION: This JavaScript code shows how to configure OpenUI5 using the `globalThis[\"sap-ui-config\"]` object. It sets the language to \"en\" and the animation mode to \"full\".  It also demonstrates how to handle existing configuration options safely.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-of-the-openui5-runtime-91f08de.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nglobalThis[\"sap-ui-config\"].language = \"en\";\nglobalThis[\"sap-ui-config\"][\"animation-mode\"] = \"full\";\n```\n\n----------------------------------------\n\nTITLE: Activating Measurement for Specific Categories\nDESCRIPTION: This snippet shows how to activate measurement for a specific category, such as 'require'. It requires the `sap/ui/performance/Measurement` module. This helps to focus performance analysis on specific aspects of the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/performance-measurement-using-sap-ui-performance-measurement-module-78880c0.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Measure only \"require\" category\n// \"Measurement\" required from module \"sap/ui/performance/Measurement\"\nMeasurement.setActive(true,\"require\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Responsive Table in XML View (OpenUI5)\nDESCRIPTION: This XML snippet defines a responsive `sap.m.Table` control within an OpenUI5 view.  It configures column visibility based on screen size using `minScreenWidth` and `demandPopin` properties.  It utilizes data binding to display invoice data and includes header toolbar with search functionality.  The columns are configured to display different information about each invoice, such as quantity, name, status, supplier, and price, with appropriate responsiveness settings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-34-responsiveness-a96e18b.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.InvoiceList\"\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Table\n\t\tid=\"invoiceList\"\n\t\tclass=\"sapUiResponsiveMargin\"\n\t\twidth=\"auto\"\n\t\titems=\"{\n\t\t\t\tpath : 'invoice>/Invoices',\n\t\t\t\tsorter : {\n\t\t\t\t\tpath : 'ShipperName',\n\t\t\t\t\tgroup : true\n\t\t\t\t}\n\t\t\t}\">\n\t\t<headerToolbar>\n\t\t\t<Toolbar>\n\t\t\t\t<Title text=\"{i18n>invoiceListTitle}\" />\n\t\t\t\t<ToolbarSpacer />\n\t\t\t\t<SearchField\n\t\t\t\t\twidth=\"50%\"\n\t\t\t\t\tsearch=\".onFilterInvoices\"/>\n\t\t\t</Toolbar>\n\t\t</headerToolbar>\n\t\t<columns>\n\t\t\t<Column\n\t\t\t\thAlign=\"End\"\n\t\t\t\tminScreenWidth=\"Small\"\n\t\t\t\tdemandPopin=\"true\"\n\t\t\t\twidth=\"5em\">\n\t\t\t\t<Text text=\"{i18n>columnQuantity}\" />\n\t\t\t</Column>\n\t\t\t<Column>\n\t\t\t\t<Text text=\"{i18n>columnName}\" />\n\t\t\t</Column>\n\t\t\t<Column\n\t\t\t\tminScreenWidth=\"Small\"\n\t\t\t\tdemandPopin=\"true\">\n\t\t\t\t<Text text=\"{i18n>columnStatus}\" />\n\t\t\t</Column>\n\t\t\t<Column\n\t\t\t\tminScreenWidth=\"Tablet\"\n\t\t\t\tdemandPopin=\"false\">\n\t\t\t\t<Text text=\"{i18n>columnSupplier}\" />\n\t\t\t</Column>\n\t\t\t<Column hAlign=\"End\">\n\t\t\t\t<Text text=\"{i18n>columnPrice}\" />\n\t\t\t</Column>\n\t\t</columns>\n\t\t<items>\n\t\t\t<ColumnListItem\n\t\t\t\ttype=\"Navigation\"\n\t\t\t\tpress=\".onPress\">\n\t\t\t\t<cells>\n\t\t\t\t\t<ObjectNumber\n\t\t\t\t\t\tnumber=\"{invoice>Quantity}\"\n\t\t\t\t\t\temphasized=\"false\"/>\n\t\t\t\t\t<ObjectIdentifier title=\"{invoice>ProductName}\" />\n\t\t\t\t\t<Text\n\t\t\t\t\t\tcore:require=\"{\n\t\t\t\t\t\t\t\tFormatter: 'ui5/walkthrough/model/formatter'\n\t\t\t\t\t\t}\"\n\t\t\t\t\t\ttext=\"{\n\t\t\t\t\t\t\t\tparts: [\n\t\t\t\t\t\t\t\t\t'invoice>Status',\n\t\t\t\t\t\t\t\t\t'i18n>invoiceStatusA',\n\t\t\t\t\t\t\t\t\t'i18n>invoiceStatusB',\n\t\t\t\t\t\t\t\t\t'i18n>invoiceStatusC'\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tformatter: 'Formatter.statusText.bind($controller)'\n\t\t\t\t\t\t}\"/>\n\t\t\t\t\t<Text text=\"{invoice>ShipperName}\" />\n\t\t\t\t\t<ObjectNumber\n\t\t\t\t\t\tcore:require=\"{\n\t\t\t\t\t\t\tCurrency: 'sap/ui/model/type/Currency'\n\t\t\t\t\t\t}\"\n\t\t\t\t\t\tnumber=\"{\n\t\t\t\t\t\t\tparts: [\n\t\t\t\t\t\t\t\t'invoice>ExtendedPrice',\n\t\t\t\t\t\t\t\t'view>/currency'\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttype: 'Currency',\n\t\t\t\t\t\t\tformatOptions: {\n\t\t\t\t\t\t\t\tshowMeasure: false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\"\n\t\t\t\t\t\tunit=\"{view>/currency}\"\n\t\t\t\t\t\tstate=\"{= ${invoice>ExtendedPrice} > 50 ? 'Error' : 'Success' }\"/>\n\t\t\t\t</cells>\n\t\t\t</ColumnListItem>\n\t\t</items>\n\t</Table>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Loading Modules in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to load modules asynchronously using `sap.ui.require`. It loads `sap/ui/model/json/JSONModel` and `sap/ui/core/UIComponent` and defines a callback function that is executed once both modules are loaded. The callback function receives the loaded modules as arguments and can then be used to define and extend a UIComponent.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/loading-a-module-d12024e.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// the callback function will be executed once the JSONModel, and the UIComponent modules are loaded\nsap.ui.require(['sap/ui/model/json/JSONModel', 'sap/ui/core/UIComponent'], function(JSONModel, UIComponent) {\n \n    var MyComponent = UIComponent.extend('MyComponent', {\n      ...\n    });\n    ...\n });\n```\n\n----------------------------------------\n\nTITLE: Defining Object Page Header (Title and Content) in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define the header title and header content of an ObjectPageLayout using JavaScript. It includes adding action buttons to the header title and labels/text to the header content by instantiating the relevant UI5 controls and setting their properties.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-layout-2e61ab6.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Create a header title, set the objectTitle property and add some action buttons\nvar oHeaderTitle = new sap.uxap.ObjectPageHeader();\noHeaderTitle.setObjectTitle(\"John Smith\");\noHeaderTitle.addAction(new sap.uxap.ObjectPageHeaderActionButton({icon: \"sap-icon://edit\", text: \"Edit\"}));\noHeaderTitle.addAction(new sap.uxap.ObjectPageHeaderActionButton({icon: \"sap-icon://save\", text: \"Save\"}));\noObjectPage.setHeaderTitle(oHeaderTitle);\n\n// Add arbitrary header content\noObjectPage.addHeaderContent(new sap.m.Label({text:\"Personal description\"}));\noObjectPage.addHeaderContent(new sap.m.Text({value:\"some KPI info\"}));\n```\n\n----------------------------------------\n\nTITLE: EmployeeOverviewContent Controller Update (JavaScript)\nDESCRIPTION: This code snippet updates the `EmployeeOverviewContent` controller to handle the optional query parameter from the `employeeOverview` route. It attaches to the `routeMatched` event and applies the search filter based on the URL query parameter. It also updates the URL when the search term changes. Dependencies: sap.ui.core.routing.Router, sap.ui.model.Filter, sap.ui.model.FilterOperator.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-12-make-a-search-bookmarkable-e85da53.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/ViewSettingsDialog\",\n\t\"sap/m/ViewSettingsItem\"\n], function(\n\tBaseController,\n\tFilter,\n\tFilterOperator,\n\tSorter,\n\tViewSettingsDialog,\n\tViewSettingsItem\n) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverviewContent\", {\n\n\t\tonInit: function () {\n\t\t\tvar oRouter = this.getRouter();\n\n\t\t\tthis._oTable = this.byId(\"employeesTable\");\n\t\t\tthis._oVSD = null;\n\t\t\tthis._sSortField = null;\n\t\t\tthis._bSortDescending = false;\n\t\t\tthis._aValidSortFields = [\"EmployeeID\", \"FirstName\", \"LastName\"];\n\t\t\tthis._sSearchQuery = null;\n\t\t\tthis._oRouterArgs = null;\n\n\n\t\t\tthis._initViewSettingsDialog();\n\n\t\t\t// make the search bookmarkable\n\t\t\toRouter.getRoute(\"employeeOverview\").attachMatched(this._onRouteMatched, this);\n\n\t\t},\n\n\t\t_onRouteMatched: function (oEvent) {\n\t\t\t// save the current query state\n\t\t\tthis._oRouterArgs = oEvent.getParameter(\"arguments\");\n\t\t\tthis._oRouterArgs[\"?query\"] = this._oRouterArgs[\"?query\"] || {};\n\n\t\t\t// search/filter via URL hash\n\t\t\tthis._applySearchFilter(this._oRouterArgs[\"?query\"].search);\n\t\t},\n\n\n\t\tonSortButtonPressed : function (oEvent) {\n\t\t\tthis._oVSD.open();\n\t\t},\n\n\t\tonSearchEmployeesTable : function (oEvent) {\n\t\t\tvar oRouter = this.getRouter();\n\t\t\t// update the hash with the current search term\n\t\t\tthis._oRouterArgs[\"?query\"].search = oEvent.getSource().getValue();\n\t\t\toRouter.navTo(\"employeeOverview\", this._oRouterArgs, true /*no history*/);\n\t\t},\n\t\t...\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Component Instance Asynchronously (Applications/Components)\nDESCRIPTION: This JavaScript snippet demonstrates how to create a new component instance asynchronously using the `createComponent` factory function provided by instances of the `sap.ui.core.Component` class. The name parameter passed to `createComponent` must correspond to an entry in the `sap.ui5/componentUsages` section of the manifest.json file. This call returns a promise that resolves to the created component instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-dependencies-to-libraries-and-components-8521ad1.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// this = an instance of sap.ui.core.Component\n\n// Asynchronously (default) creates a new component instance.\n// The given name parameter has to correspond to an entry in the \"sap.ui5/componentUsages\" section of the manifest.json.\n\nvar pReuseComponentPromise = this.createComponent(\"myReuseComponent\");\n```\n\n----------------------------------------\n\nTITLE: Label with labelFor Association in OpenUI5\nDESCRIPTION: This example demonstrates how to associate a label with an input field using the `labelFor` attribute. This ensures that screen readers correctly identify the label for the input.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/labeling-and-tooltips-329a029.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Label text=\"Name\" labelFor=\"I1\"> \n<Input id=\"I1\">\n```\n\n----------------------------------------\n\nTITLE: OData V4 XML Template Example\nDESCRIPTION: This XML template demonstrates how to utilize the OData V4 Meta Model to display data in a table with annotations. It uses `template:require` to access the `AnnotationHelper`, `template:alias` for creating aliases, and template constructs like `template:with`, `template:repeat`, and `template:if` to process the metadata and generate the UI dynamically. Computed annotations (@@) are also used to format values based on metadata.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/meta-model-for-odata-v4-7f29fb3.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n        template:require=\"{AnnotationHelper : 'sap/ui/model/odata/v4/AnnotationHelper'}\"\n        xmlns=\"sap.m\"\n        xmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\">\n    <template:alias name=\"format\" value=\"AnnotationHelper.format\">\n    <template:alias name=\"value\" value=\"AnnotationHelper.value\">\n        <template:with path=\"meta>/BusinessPartnerList/\" var=\"entityType\">\n          <template:with path=\"entityType>@com.sap.vocabularies.UI.v1.LineItem\" var=\"lineItem\">\n            <Table headerText=\"Business Partners\"\n              items=\"{path : '/BusinessPartnerList', length : 5}\">\n              <columns>\n                <template:repeat list=\"{lineItem>}\" var=\"field\">\n                  <Column>\n                    <template:if test=\"{field>Label}\">\n                      <template:then>\n                        <Label design=\"{:= ${field>@com.sap.vocabularies.UI.v1.Importance/$EnumMember}\n                          === 'com.sap.vocabularies.UI.v1.ImportanceType/High' ? 'Bold' : 'Standard'}\"\n                          text=\"{field>Label}\"/>\n                      </template:then>\n                      <template:else>\n                        <Text text=\"{field>Value/$Path@com.sap.vocabularies.Common.v1.Label}\"/>\n                      </template:else>\n                    </template:if>\n                  </Column>\n                </template:repeat>\n              </columns>\n              <items>\n                <ColumnListItem>\n                  <cells>\n                    <template:repeat list=\"{lineItem>}\" var=\"field\">\n                      <template:with path=\"field>Value/$Path\" var=\"target\">\n                        <template:if test=\"{= ${target>@@AnnotationHelper.getValueListType} === 'Standard' }\">\n                            <template:then>\n                                <Input value=\"{path : 'field>Value/@@value'}\" showValueHelp=\"true\", valueHelpRequest=\".onValueHelp\"}\" />\n                            </template:then>\n                            <template:elseif test=\"{= ${target>@@AnnotationHelper.getValueListType} === 'Fixed' }\">\n                                <ComboBox value=\"{path : 'field>Value/@@value'}\" loadItems=\".onLoadItems\" showValueHelp=\"true\" />\n                            </template:elseif>\n                            <template:elseif test=\"{target>@com.sap.vocabularies.Common.v1.Text}\">\n                                <!-- Note: TextFirst, TextLast, TextSeparate, TextOnly -->\n                                <template:if test=\"{= ${target>@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement/$EnumMember}\n                                    === 'com.sap.vocabularies.UI.v1.TextArrangementType/TextLast' }\">\n                                    <!-- Text: \"A descriptive text for values of the annotated property.\n                                        Value MUST be a dynamic expression when used as metadata annotation.\" -->\n                                    <Text text=\"{field>Value/@@value} {target>@com.sap.vocabularies.Common.v1.Text/@@value}\" />\n                                </template:if>\n                            </template:elseif>\n                            <template:else>\n                                <Text text=\"{field>Value/@@format}\" />\n                            </template:else>\n                        </template:if>\n                      </template:with>\n                    </template:repeat>\n                  </cells>\n                </ColumnListItem>\n              </items>\n            </Table>\n          </template:with>\n        </template:with>\n    </template:alias>\n    </template:alias>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to Dialog in HelloDialog.fragment.xml\nDESCRIPTION: This snippet demonstrates how to add an icon to a dialog fragment using the `sap.ui.core.Icon` control. The `src` property specifies the icon to be displayed, and `size` defines the icon's dimensions. The `class` adds a margin around the icon for better visual appearance inside the dialog.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-18-icons-776f735.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<core:FragmentDefinition\n   xmlns=\"sap.m\"\n   xmlns:core=\"sap.ui.core\" >\n   <Dialog\n      id=\"helloDialog\"\n      title =\"Hello {/recipient/name}\">\n      <content>\n         <core:Icon\n            src=\"sap-icon://hello-world\"\n            size=\"8rem\"\n            class=\"sapUiMediumMargin\"/>\n      </content>\n      <beginButton>\n         <Button\n            text=\"{i18n>dialogCloseButtonText}\"\n            press=\".onCloseDialog\"/>\n      </beginButton>\n   </Dialog>\n</core:FragmentDefinition>\n```\n\n----------------------------------------\n\nTITLE: Defining Object Page Header (Title and Content) in XML\nDESCRIPTION: This code snippet demonstrates how to define the header title and header content of an ObjectPageLayout using XML. It includes adding action buttons to the header title and labels/text to the header content.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-layout-2e61ab6.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ObjectPageLayout id=\"ObjectPageLayout\">\n\n\t <headerTitle>\n\t\t<ObjectPageHeader objectTitle=\"John Smith\">\n\t\t\t<actions>\n\t\t\t\t<ObjectPageHeaderActionButton icon=\"sap-icon://edit\" text=\"Edit\" />\n\t\t\t\t<ObjectPageHeaderActionButton icon=\"sap-icon://save\" text=\"Save\" />\n\t\t\t</actions>\n\t\t</ObjectPageHeader>\n\t</headerTitle>\n\n\t<headerContent>\n\t\t<m:Label text=\"Personal description\"/>                                                \n\t\t<m:Text value=\"some KPI info\"/>\n\t</headerContent>\n\n</ObjectPageLayout>\n```\n\n----------------------------------------\n\nTITLE: Text using Composite Binding and Formatter - XML\nDESCRIPTION: This XML snippet demonstrates a composite binding, where the text of a control is determined by a formatter function that combines several values, including those from a resource bundle and model data with specific data types and constraints. It showcases the use of parameterized entries in an i18n language resource. It also utilizes embedded binding syntax for length check.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Set text by using a composite binding that combines several values in a formatter defined by a parameterized entry of an i18n language resource. -->\n<!-- i18n language resource -->\nsuccessMsg=Message is available from {0} until {1}\nerrorMsg=Message is too short\n\n<!-- View -->\n<mvc:View\n    controllerName=\"sample.App\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    core:require=\"{DateType: 'sap/ui/model/type/Date'}\">\n    ...\n    <Text \n        text=\"{=%{/data/message}.length &lt; 20\n         ? %{i18n>errorMsg} \n         : %{parts: [\n             {path: 'i18n>successMsg'},\n             {path: '/data/today', type: 'DateType', constraints: {displayFormat: 'Date'}},\n             {path: '/data/tomorrow', type: 'DateType', constraints: {displayFormat: 'Date'}}\n         ], formatter: '.formatMessage'}}\" />\n    ...\t\t\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining App Controller in TypeScript\nDESCRIPTION: This code snippet defines the `AppController` in TypeScript, extending `sap/ui/core/mvc/Controller`. It contains an `onShowHello` function that displays an alert box with the text \"Hello World\". The controller is responsible for handling user interactions from the associated view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-controllers-typescript-e5c58fe.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Controller from \"sap/ui/core/mvc/Controller\";\n\n/**\n * @name ui5.walkthrough.controller.App\n */\nexport default class AppController extends Controller {\n    onShowHello(): void {\n        // show a native JavaScript alert\n        alert(\"Hello World\");\n     }\n};\n```\n\n----------------------------------------\n\nTITLE: Generating and Destroying the Export Object (OpenUI5)\nDESCRIPTION: Demonstrates how to generate the data export and handle the completion or failure of the process. It calls the `generate` method of the `Export` object, which returns a jQuery Promise. The `done` handler logs the generated content, and the `always` handler destroys the export object to release resources.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-data-binding-for-data-export-f1ee7a8.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\noExport.generate().done(function(sContent) {\n    console.log(sContent);\n}).always(function() {\n    this.destroy();\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Sales Order from a table with OData V4 in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to delete a selected Sales Order entity from a table using OData V4. It retrieves the selected item's binding context, unbinds the object page if it's bound to the same context, deletes the entity using `oSalesOrderContext.delete()`, and displays a success or error message. The code assumes the existence of a table with ID \"SalesOrders\" and an object page with ID \"objectPage\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deleting-an-entity-2613ebc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nonDeleteSalesOrder : function () {\n    var oTable = this.getView().byId(\"SalesOrders\"),\n        oSalesOrderContext = oTable.getSelectedItem().getBindingContext(),\n        oObjectPage = this.getView().byID(\"objectPage\");\n\n    if (oObjectPage.getBindingContext() === oSalesOrderContext) {\n        oObjectPage.setBindingContext(null);\n    }\n    oSalesOrderContext.delete().then(function () {\n        MessageBox.alert(\"Deleted Sales Order\",\n            {icon : MessageBox.Icon.SUCCESS, title : \"Success\"});\n    }, function (oError) {\n        if (oSalesOrderContext === that.oLastSelectedSalesOrderContext) {\n            oObjectPage.setBindingContext(oSalesOrderContext);\n        }\n        MessageBox.alert(\"Could not delete Sales Order: \"\n            + oError.message, {icon : MessageBox.Icon.ERROR, title : \"Error\"});\n    });\n},\n```\n\n----------------------------------------\n\nTITLE: OData Function Import Binding (Controller)\nDESCRIPTION: This code snippet shows how to bind to function import parameters. It calls an OData function import, handles errors by resetting changes, and sets the binding context for a form. The `contextCreated` promise is used to ensure the context is available before setting it.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nonStartRating: function () {\n    var oView = this.getView(),\n        oModel = oView.getModel(),\n        oRatingForm = oView.byId(\"ratingForm\"),\n        oHandle =  oModel.callFunction(\"/GetProductsByRating\", {\n            error: function () {\n                oModel.resetChanges([oRatingForm.getBindingContext().getPath()]);\n            },\n            groupId: /*the default deferred group*/ \"changes\",\n            urlParameters: {rating: 3}\n        });\n \n    oHandle.contextCreated().then(function (oContext) {\n        oRatingForm.setBindingContext(oContext);\n    });\n},\n \nonSubmitRatingForm: function () {\n    this.getView().getModel().submitChanges({groupId : \"changes\"});\n},\n```\n\n----------------------------------------\n\nTITLE: Initializing FlexBox with addItem - JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a FlexBox control and add Button controls to it using the addItem method. It requires the sap/m/FlexBox and sap/m/Button modules. The buttons will be added as items within the FlexBox.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/getting-started-with-flexbox-988d2c7.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// FlexBox required from \"sap/m/FlexBox\"\n// Button required from \"sap/m/Button\"\n\nvar oMyFlexbox = new FlexBox();\noMyFlexbox.addItem(new Button({text: \"Button 1\"}));\noMyFlexbox.addItem(new Button({text: \"Button 2\"}));\n```\n\n----------------------------------------\n\nTITLE: Absolute and Relative Bindings in XML View\nDESCRIPTION: This XML snippet shows how absolute and relative bindings are created within an XML view for an OData V4 service. The first table binds its `items` aggregation to `/SalesOrderList` with `$expand` and `$select` parameters. The second table uses a relative binding with the path 'SO_2_SOITEM' and its own `$select` parameters, triggering its own data service request.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initialization-and-read-requests-fccfb2e.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<Table items=\"{\n path : '/SalesOrderList',\n parameters : {\n  $expand : 'SO_2_BP',\n  $select : 'BuyerName,CurrencyCode,GrossAmount,Note,SalesOrderID'\n }}\">\n ...\n <items>  \n  <ColumnListItem>\n   <cells> \n    <Text text=\"{SalesOrderID}\"/> \n    <Text text=\"{SO_2_BP/CompanyName}\"/>\n    <Text text=\"{BillingStatus}\"/> \n   </cells>\n  </ColumnListItem>\n\n </items>\n</Table>\n\n<Table items=\"{\n path : 'SO_2_SOITEM',\n parameters : {\n    $select: \"DeliveryDate,GrossAmount,SalesOrderID\"\n }\n>\n...\n</Table>\n\n```\n\n----------------------------------------\n\nTITLE: Component Configuration for Controller Extension in OpenUI5\nDESCRIPTION: Shows the configuration in the component.js to merge the standard controller with the custom controller. It maps the standard controller samples.components.ext.sap.Main to the custom controller samples.components.ext.customer.CustomMain using the controllerName property within the sap.ui.controllerExtensions namespace.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/using-component-configuration-c264d66.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nextensions: {  \n    \"sap.ui.controllerExtensions\": {\n        \"samples.components.ext.sap.Main\": {\n            controllerName: \"samples.components.ext.customer.CustomMain\"\n        }\n        }\n    // .....some more content\n}\n```\n\n----------------------------------------\n\nTITLE: OPA5 Navigation Journey - Open Hello Dialog (JavaScript)\nDESCRIPTION: This snippet defines an OPA5 journey to test the navigation and interaction within the application. It starts the UI component, simulates a click on the \"Say Hello with Dialog\" button, and asserts that the Hello dialog is opened. It uses QUnit for test structure and OPA5 helper objects for arrangements, actions, and assertions. Dependencies: sap/ui/test/opaQunit, ./pages/App.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-28-integration-test-with-opa-9bf4dce.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/test/opaQunit\",\n\t\"./pages/App\"\n], (opaTest) => {\n\t\"use strict\";\n\n\tQUnit.module(\"Navigation\");\n\n\topaTest(\"Should open the Hello dialog\", (Given, When, Then) => {\n\t\t// Arrangements\n\t\tGiven.iStartMyUIComponent({\n\t\t\tcomponentConfig: {\n\t\t\t\tname: \"ui5.walkthrough\"\n\t\t\t}\n\t\t});\n\n\t\t//Actions\n\t\tWhen.onTheAppPage.iPressTheSayHelloWithDialogButton();\n\n\t\t// Assertions\n\t\tThen.onTheAppPage.iShouldSeeTheHelloDialog();\n\n\t\t// Cleanup\n\t\tThen.iTeardownMyApp();\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Mock Server in JavaScript\nDESCRIPTION: This JavaScript file initializes the mock server by loading the mock server module and then loading the `sap/ui/core/ComponentSupport` module to initialize the application component. It depends on the `mockserver.js` module in the `localService` folder.  The `sap.ui.define` function is used to define the module and its dependencies.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-creating-a-mock-server-to-simulate-data-50897de.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/demo/MockServer/localService/mockserver\"\n], (mockserver) => {\n    \"use strict\";\n\n    // initialize the mock server\n    mockserver.init();\n\n    // initialize the embedded component on the HTML page\n    sap.ui.require([\"sap/ui/core/ComponentSupport\"]);\n});\n```\n\n----------------------------------------\n\nTITLE: Define Modules in unitTests.qunit.js (JS)\nDESCRIPTION: This snippet defines the modules required for unit testing. It includes models, formatter, flagged type, and the custom date formatter, ensuring that the unit tests have access to the necessary components for testing the application logic.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"./model/models\",\n\t\"./model/formatter\",\n\t\"./model/FlaggedType\",\n\t\"./model/DateFormatter\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Event Handler in OpenUI5\nDESCRIPTION: This code demonstrates the correct way to implement an asynchronous event handler for a control event in OpenUI5. The `press` event handler is defined as an asynchronous function using the `async` keyword. It uses `await` to handle asynchronous operations. Error handling within asynchronous event handlers should be carefully managed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.require([\"sap/m/Button\"], (Button) => {\n    const oButton = new Button({\n        text: \"Press me\",\n        async press() { // async \"press\" event handler\n          await doSomethingAsync();\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Extended Product List Item Fragment (XML)\nDESCRIPTION: This XML fragment defines an `sap.m.ObjectListItem` to display more detailed product information, including price and currency.  It utilizes data binding to dynamically display product information. It is later used in conjunction with the controller's factory function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-aggregation-binding-using-a-factory-function-284a036.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<core:FragmentDefinition\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\"\n\tcore:require=\"{Currency: 'sap/ui/model/type/Currency'}\">\n\t<ObjectListItem\n\t\tid=\"productExtended\"\n\t\ttitle=\"{products>ProductName} ({products>QuantityPerUnit})\"\n\t\tnumber=\"{\n\t\t\tparts: [\n\t\t\t\t{path: 'products>UnitPrice'},\n\t\t\t\t{path: '/currencyCode'}\n\t\t\t],\n\t\t\ttype: 'Currency',\n\t\t\tformatOptions : {\n\t\t\t\tshowMeasure : false\n\t\t\t}\n\t\t}\"\n\t\ttype=\"Active\"\n\t\tnumberUnit=\"{/currencyCode}\"\n\t\tpress=\".onItemSelected\">\n\t</ObjectListItem>\n</core:FragmentDefinition>\n```\n\n----------------------------------------\n\nTITLE: Escaping String Properties with RenderManager in OpenUI5\nDESCRIPTION: This snippet demonstrates how to use the `RenderManager` instance to escape the value of a string property when writing it to HTML. This prevents potential Cross-Site Scripting (XSS) vulnerabilities by ensuring that any potentially malicious script code within the string is escaped before being rendered.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/prevention-of-cross-site-scripting-4de64e2.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noRenderManager.writeEscaped(oControl.getSomeStringProperty()\n```\n\n----------------------------------------\n\nTITLE: Setting Selected Section Programmatically - OpenUI5\nDESCRIPTION: This JavaScript snippet demonstrates how to programmatically set the selected section of an `ObjectPageLayout` at runtime.  It retrieves the `ObjectPageLayout` and the target `ObjectPageSection` by their IDs.  It then uses the `setSelectedSection` method to navigate to the specified section. The method requires the sap.uxap library to be loaded.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-scrolling-bc410e9.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//navigate to a specific section on open\nthis.oObjectPageLayout = this.getView().byId(\"ObjectPageLayout\");\nthis.oTargetSection = this.getView().byId(\"empl\");\nthis.oObjectPageLayout.setSelectedSection(this.oTargetSection)\n```\n\n----------------------------------------\n\nTITLE: Define Dialog Fragment XML\nDESCRIPTION: This XML fragment defines the structure of the dialog. It includes a Dialog control with an ID and a title bound to the 'recipient/name' property of the model. The `core` namespace is used to define the fragment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-16-dialogs-and-fragments-typescript-4b2e306.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<core:FragmentDefinition\n   xmlns=\"sap.m\"\n   xmlns:core=\"sap.ui.core\">\n   <Dialog\n      id=\"helloDialog\"\n      title=\"Hello {/recipient/name}\"/>\n</core:FragmentDefinition>\n```\n\n----------------------------------------\n\nTITLE: Requiring and Using Enum Types\nDESCRIPTION: This code snippet shows how to load and use enumeration (enum) types programmatically in OpenUI5. It uses `sap.ui.require` to load the necessary modules and then accesses the enum values to set properties or filter data. The example uses `sap.m.ButtonType` and `sap.ui.model.FilterType`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-control-properties-ac56d92.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.require([\n    \"sap/m/library\", // enum sap.m.ButtonType (Module: sap/m/library)\n    \"sap/ui/model/FilterType\" // enum sap.ui.model.FilterType (Module: sap/ui/model/FilterType)\n], (sapMLib, FilterType) => {\n    const { ButtonType } = sapMLib;\n    mySapMButton.setType(ButtonType.Emphasized);\n    myListBinding.filter(myFilter, FilterType.Control);\n});\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection for System Time (JS)\nDESCRIPTION: This snippet uses dependency injection to control the current time in the unit tests. A 'now' function is passed to the formatter's constructor, allowing the tests to be independent of the system time. The 'beforeEach' function is updated to use dependency injection for time.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/bulletinboard/model/DateFormatter\",\n\t\"sap/ui/core/Locale\",\n\t\"sap/ui/core/date/UI5Date\"\n], function(DateFormatter, Locale, UI5Date) {\n\tvar oFormatter = null;\n\tQUnit.module(\"DateFormatter\", {\n\t\tbeforeEach: function() {\n\t\t\toFormatter = new DateFormatter({\n\t\t\t\tnow : function() {\n\t\t\t\t\treturn UI5Date.getInstance(2015, 2, 14, 14, 0, 0, 0).getTime();\n\t\t\t\t},\n\t\t\t\tlocale : new Locale(\"en-US\")\n\t\t\t});\n\t\t}\n\t});\n\t// ...\n\tQUnit.test(\"Should return 'Yesterday' if date from yesterday\", function(assert) {\n\t\tvar oDate = UI5Date.getInstance(2015, 2, 13);\n\t\tvar sFormattedDate = oFormatter.format(oDate);\n\t\tassert.strictEqual(sFormattedDate, \"Yesterday\");\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming sap:requires-filter to FilterRestrictions\nDESCRIPTION: This snippet shows how the `sap:requires-filter` annotation is transformed into the `Org.OData.Capabilities.V1.FilterRestrictions` annotation with the `RequiresFilter` property set to `true`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\nsap:requires-filter = \"true\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Capabilities.V1.FilterRestrictions\": { \"RequiresFilter\" : { \"Bool\" : \"true\" } }\n```\n\n----------------------------------------\n\nTITLE: Resetting Changes with ODataListBinding - JavaScript\nDESCRIPTION: This snippet defines the `onResetChanges` method, which discards pending changes using the `resetChanges` method of the `ODataListBinding` API. It then calls `_setUIChanges` to update the UI and re-enable the header toolbar elements.  `_bTechnicalErrors` is set to false.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-create-and-edit-b4f1266.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n        onResetChanges : function () {\n            this.byId(\"peopleList\").getBinding(\"items\").resetChanges();\n            this._bTechnicalErrors = false; \n            this._setUIChanges();\n        },\n...\n```\n\n----------------------------------------\n\nTITLE: Binding Input Field to Model (XML)\nDESCRIPTION: This XML snippet binds the `value` and `description` properties of an `sap/m/Input` control to the `name` attribute of the `recipient` object in the JSON model. The `valueLiveUpdate` attribute is set to `true` to enable real-time updates of the description as the user types in the input field. The model path is specified using binding syntax within curly brackets.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-json-model-typescript-cfbbeab.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.App\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Button\n      text=\"Say Hello\"\n      press=\".onShowHello\"/>\n   <Input\n      value=\"{/recipient/name}\"\n      description=\"Hello {/recipient/name}\"\n      valueLiveUpdate=\"true\"\n      width=\"60%\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Assigning Measurement to Specific Category\nDESCRIPTION: This snippet illustrates how to assign a specific measurement to a category. Requires the `sap/ui/performance/Measurement` module. The example uses category 'foo'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/performance-measurement-using-sap-ui-performance-measurement-module-78880c0.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// \"Measurement\" required from module \"sap/ui/performance/Measurement\"\nMeasurement.start(\"myId\",\"Measurement of myId\", **[\"foo\"]**);\n```\n\n----------------------------------------\n\nTITLE: Adding Reset Data Source Button to View (XML)\nDESCRIPTION: This XML code snippet demonstrates how to add a button to the App.view.xml file's header content. The button is configured with an ID, text (referencing i18n), enabled state (based on UI changes), event handler (onResetDataSource), and style. The 'press' event is bound to the controller's onResetDataSource function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-odata-operations-a3e7cb6.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.core.tutorial.odatav4.controller.App\"\n\tdisplayBlock=\"true\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Shell>\n\t\t<App busy=\"{appView>/busy}\" class=\"sapUiSizeCompact\">\n\t\t\t<pages>\n\t\t\t\t<Page title=\"{i18n>peoplePageTitle}\">\n\t\t\t\t\t<headerContent>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tid=\"resetChangesButton\"\n\t\t\t\t\t\t\ttext=\"{i18n>resetChangesButtonText}\"\n\t\t\t\t\t\t\tenabled=\"{= !${appView>/hasUIChanges}}\"\n\t\t\t\t\t\t\tpress=\"onResetDataSource\"\n\t\t\t\t\t\t\ttype=\"Emphasized\">\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</headerContent>\n...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Data Model - JSON\nDESCRIPTION: Defines a JSON structure for invoice data, including product name, quantity, extended price, shipper name, shipped date, and status. This data will be used to populate the list in the OpenUI5 application. The file is located at webapp/model/localInvoices.json.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-19-aggregation-binding-typescript-24580fb.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Invoices\": [\n        {\n            \"ProductName\": \"Pineapple\",\n            \"Quantity\": 21,\n            \"ExtendedPrice\": 87.2,\n            \"ShipperName\": \"Fun Inc.\",\n            \"ShippedDate\": \"2015-04-01T00:00:00\",\n            \"Status\": \"A\"\n        },\n        {\n            \"ProductName\": \"Milk\",\n            \"Quantity\": 4,\n            \"ExtendedPrice\": 10,\n            \"ShipperName\": \"ACME\",\n            \"ShippedDate\": \"2015-02-18T00:00:00\",\n            \"Status\": \"B\"\n        },\n        {\n            \"ProductName\": \"Canned Beans\",\n            \"Quantity\": 3,\n            \"ExtendedPrice\": 6.85,\n            \"ShipperName\": \"ACME\",\n            \"ShippedDate\": \"2015-03-02T00:00:00\",\n            \"Status\": \"B\"\n        },\n        {\n            \"ProductName\": \"Salad\",\n            \"Quantity\": 2,\n            \"ExtendedPrice\": 8.8,\n            \"ShipperName\": \"ACME\",\n            \"ShippedDate\": \"2015-04-12T00:00:00\",\n            \"Status\": \"C\"\n        },\n        {\n            \"ProductName\": \"Bread\",\n            \"Quantity\": 1,\n            \"ExtendedPrice\": 2.71,\n            \"ShipperName\": \"Fun Inc.\",\n            \"ShippedDate\": \"2015-01-27T00:00:00\",\n            \"Status\": \"A\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Serve Script in package.json for Local Web Server\nDESCRIPTION: This JSON snippet defines the \"serve-dist\" script in package.json. It uses the local-web-server (ws) to serve the built application from the \"dist\" folder. The \"--compress\" flag enables response compression, and \"-d dist\" specifies the directory to serve. \"--open\" flag automatically opens the served content in the default browser.  Requires local-web-server as a dev dependency.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-38-build-your-application-ae1be8c.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"ui5.walkthrough\",\n  \"version\": \"1.0.0\",\n  \"description\": \"The UI5 walkthrough application\",\n  \"scripts\": {\n      \"start\": \"ui5 serve -o test/mockServer.html\",\n      \"build\": \"ui5 build --all --clean-dest\",\n      \"serve-dist\": \"ws --compress -d dist --open\"\n  },\n  \"devDependencies\": {\n    \"@ui5/cli\": \"^3\",\n    \"local-web-server\": \"^5\",\n    \"ui5-middleware-simpleproxy\": \"^3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resource Bundle from Resource Model - JavaScript\nDESCRIPTION: This code snippet shows how to retrieve the resource bundle from the resource model. After the resource model is instantiated, you can get the resource bundle using the getResourceBundle() method. This allows you to access the resource bundle texts as data and pass parameters if needed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-model-91f122a.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar myBundle = oModel.getResourceBundle();\n```\n\n----------------------------------------\n\nTITLE: Displaying Results in Console Table\nDESCRIPTION: This code shows how to display completed measurement results in a table using the browser's console, specifically in Google Chrome. It retrieves all completed measurements and outputs them in a tabular format.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/performance-measurement-using-sap-ui-performance-measurement-module-78880c0.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconsole.table(Measurement.getAllMeasurements(true)) //table with completed measurements\n```\n\n----------------------------------------\n\nTITLE: Binding Items with OData Parameters in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to bind items to a `SalesOrderTable` using the OData V4 model and specifies various OData query options as parameters. It defines `$count`, `$expand`, `$filter`, `$orderby`, and `$select` parameters to customize the data retrieval. This includes expanding the `SO_2_SOITEM` navigation property with specific ordering and selection criteria.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/parameters-1ab4f62.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\noView.byId(\"SalesOrderTable\").bindItems({\n    path : \"/SalesOrderList\",\n    parameters : {\n        \"$count\" : true,\n        \"$expand\" : {\n            \"SO_2_SOITEM\" : {\n                \"$orderby\" : \"ItemPosition\",\n                \"$select\" : [\"ItemPosition\", \"Quantity\", \"QuantityUnit\", \"SalesOrderID\"]\n            }\n        },\n        \"$filter\" : \"BuyerName ge 'M'\",\n        \"$orderby\" : \"GrossAmount desc\",\n        \"$select\" : [\"BuyerName\", \"CurrencyCode\", \"GrossAmount\", \"Note\", \"SalesOrderID\"]\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Add Serve-Dist Script to package.json (UI5, TypeScript)\nDESCRIPTION: This snippet shows how to add a `serve-dist` script to the `package.json` file to serve the built application using `local-web-server`. The script points to the `dist` folder, compresses the data, and opens the browser automatically. Requires `local-web-server` to be installed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-38-build-your-application-typescript-be33d01.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"ui5.walkthrough\",\n  \"version\": \"1.0.0\",\n  \"description\": \"UI5 TypeScript Walkthrough\",\n  \"scripts\": {\n      \"start\": \"ui5 serve -o test/mockServer.html\",\n      \"build\": \"ui5 build --all --clean-dest\",\n      \"serve-dist\": \"ws --compress -d dist --open\"\n  },\n  \"devDependencies\": {\n    \"@types/openui5\": \"^1.120.0\",\n    \"@ui5/cli\": \"^3.7.1\",\n    \"@ui5/ts-interface-generator\": \"^0.8.1\",\n    \"typescript\": \"^5.2.2\",\n    \"ui5-middleware-livereload\": \"^3.0.2\",\n    \"ui5-middleware-serveframework\": \"3.0.0\",\n    \"ui5-middleware-simpleproxy\": \"^3.2.8\",\n    \"ui5-tooling-transpile\": \"^3.2.7\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Employee Overview Controller (JS)\nDESCRIPTION: This JavaScript snippet defines the controller for the EmployeeOverviewContent view. It initializes a ViewSettingsDialog for sorting and filtering the employee table. It contains handlers for searching and sorting. The controller extends the BaseController and utilizes sap.ui.model.Filter, FilterOperator, and Sorter classes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-assign-multiple-targets-b01840e.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/ViewSettingsDialog\",\n\t\"sap/m/ViewSettingsItem\"\n], function(\n\tBaseController,\n\tFilter,\n\tFilterOperator,\n\tSorter,\n\tViewSettingsDialog,\n\tViewSettingsItem\n) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverviewContent\", {\n\n\t\tonInit: function () {\n\t\t\tthis._oTable = this.byId(\"employeesTable\");\n\t\t\tthis._oVSD = null;\n\t\t\tthis._sSortField = null;\n\t\t\tthis._bSortDescending = false;\n\t\t\tthis._aValidSortFields = [\"EmployeeID\", \"FirstName\", \"LastName\"];\n\t\t\tthis._sSearchQuery = null;\n\n\t\t\tthis._initViewSettingsDialog();\n\t\t},\n\n\t\tonSortButtonPressed : function () {\n\t\t\tthis._oVSD.open();\n\t\t},\n\n\t\tonSearchEmployeesTable : function (oEvent) {\n\t\t\tthis._applySearchFilter( oEvent.getSource().getValue() );\n\t\t},\n\n\t\t_initViewSettingsDialog : function () {\n\t\t\tthis._oVSD = new ViewSettingsDialog(\"vsd\", {\n\t\t\t\tconfirm: function (oEvent) {\n\t\t\t\t\tvar oSortItem = oEvent.getParameter(\"sortItem\");\n\t\t\t\t\tthis._applySorter(oSortItem.getKey(), oEvent.getParameter(\"sortDescending\"));\n\t\t\t\t}.bind(this)\n\t\t\t});\n\n\t\t\t// init sorting (with simple sorters as custom data for all fields)\n\t\t\tthis._oVSD.addSortItem(new ViewSettingsItem({\n\t\t\t\tkey: \"EmployeeID\",\n\t\t\t\ttext: \"Employee ID\",\n\t\t\t\tselected: true\t\t\t// by default the MockData is sorted by EmployeeID\n\t\t\t}));\n\n\t\t\tthis._oVSD.addSortItem(new ViewSettingsItem({\n\t\t\t\tkey: \"FirstName\",\n\t\t\t\ttext: \"First Name\",\n\t\t\t\tselected: false\n\t\t\t}));\n\n\t\t\tthis._oVSD.addSortItem(new ViewSettingsItem({\n\t\t\t\tkey: \"LastName\",\n\t\t\t\ttext: \"Last Name\",\n\t\t\t\tselected: false\n\t\t\t}));\n\t\t},\n\n\t\t_applySearchFilter : function (sSearchQuery) {\n\t\t\tvar aFilters, oFilter, oBinding;\n\n\t\t\t// first check if we already have this search value\n\t\t\tif (this._sSearchQuery === sSearchQuery) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._sSearchQuery = sSearchQuery;\n\t\t\tthis.byId(\"searchField\").setValue(sSearchQuery);\n\n\t\t\t// add filters for search\n\t\t\taFilters = [];\n\t\t\tif (sSearchQuery && sSearchQuery.length > 0) {\n\t\t\t\taFilters.push(new Filter(\"FirstName\", FilterOperator.Contains, sSearchQuery));\n\t\t\t\taFilters.push(new Filter(\"LastName\", FilterOperator.Contains, sSearchQuery));\n\t\t\t\toFilter = new Filter({ filters: aFilters, and: false });  // OR filter\n\t\t\t} else {\n\t\t\t\toFilter = null;\n\t\t\t}\n\n\t\t\t// update list binding\n\t\t\toBinding = this._oTable.getBinding(\"items\");\n\t\t\toBinding.filter(oFilter, \"Application\");\n\t\t},\n\n\t\t/**\n\t\t * Applies sorting on our table control.\n\t\t * @param {string} sSortField\t\t\tthe name of the field used for sorting\n\t\t * @param {string} sortDescending\ttrue or false as a string or boolean value to specify a descending sorting\n\t\t * @private\n\t\t */\n\t\t_applySorter : function (sSortField, sortDescending){\n\t\t\tvar bSortDescending, oBinding, oSorter;\n\n\t\t\t// only continue if we have a valid sort field\n\t\t\tif (sSortField && this._aValidSortFields.indexOf(sSortField) > -1) {\n\n\t\t\t\t// convert  the sort order to a boolean value\n\t\t\t\tif (typeof sortDescending === \"string\") {\n\t\t\t\t\tbSortDescending = sortDescending === \"true\";\n\t\t\t\t} else if (typeof sortDescending === \"boolean\") {\n\t\t\t\t\tbSortDescending =  sortDescending;\n\t\t\t\t} else {\n\t\t\t\t\tbSortDescending = false;\n\t\t\t\t}\n\n\t\t\t\t// sort only if the sorter has changed\n\t\t\t\tif (this._sSortField && this._sSortField === sSortField && this._bSortDescending === bSortDescending) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._sSortField = sSortField;\n\t\t\t\tthis._bSortDescending = bSortDescending;\n\t\t\t\toSorter = new Sorter(sSortField, bSortDescending);\n\n\t\t\t\t// sync with View Settings Dialog\n\t\t\t\tthis._syncViewSettingsDialogSorter(sSortField, bSortDescending);\n\n\t\t\t\toBinding = this._oTable.getBinding(\"items\");\n\t\t\t\toBinding.sort(oSorter);\n\t\t\t}\n\t\t},\n\n\t\t_syncViewSettingsDialogSorter : function (sSortField, bSortDescending) {\n\t\t\t// the possible keys are: \"EmployeeID\" | \"FirstName\" | \"LastName\"\n\t\t\t// Note: no input validation is implemented here\n\t\t\tthis._oVSD.setSelectedSortItem(sSortField);\n\t\t\tthis._oVSD.setSortDescending(bSortDescending);\n\t\t}\n\n\t});\n\n});\n\n```\n\n----------------------------------------\n\nTITLE: Example INI Properties File with Annotations\nDESCRIPTION: This snippet showcases a properties file with annotated key-value pairs. Each key represents a translatable string, and the annotation provides information such as text type (XMSG, XBUT, XFLD), optional length restrictions (e.g., ,10), and translator notes. The annotations guide the translation process by specifying the UI context and usage of each string, thus improving translation accuracy and consistency.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/annotations-in-translation-files-8310398.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n#XMSG: a random text used for demonstration purposes, the meaning is not related to any other content in the UI\nHelloWorld=Hello world!\n\n#XBUT,10\nOK=OK\n\n#XBUT,15\nCancel=Cancel\n\n#XMSG: The user has just triggered an action which cannot be executed\nUnauthorized=User {0} is not authorized to execute command {1}\n\n#XMSG\nMultiline=Line 1\\nLine 2\n\n#XFLD: The money you get back at shop's checkout-counter\nChange=Change\n```\n\n----------------------------------------\n\nTITLE: Simulating Scroll with OPA5\nDESCRIPTION: This snippet demonstrates how to simulate scrolling within a control using OPA5 and the `Scroll` action. It locates a `sap.uxap.ObjectPageLayout` control and then scrolls it vertically by a specified number of pixels.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/simulating-user-interactions-on-controls-8615a0b.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\noOpa.waitFor({\n    controlType: \"sap.uxap.ObjectPageLayout\",\n    actions: new Scroll({\n        x: 0,\n        y: 200\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Data File\nDESCRIPTION: This snippet shows the creation of a `data.json` file which holds the data for the application. The file contains a `greetingText` property with a sample greeting message. This file will serve as the data source for the JSON model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-creating-a-model-5278bfd.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"greetingText\" : \"Hi, my name is Harry Hawk\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Entities with OData\nDESCRIPTION: This code demonstrates updating entities in an OData service using the `update` function of the OData V2 model.  It triggers a PUT/MERGE request and automatically refreshes the bindings in the model after a successful request.  It requires a data object `oData` containing the updated values and success/error handlers for request management.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n\nvar oData = {\n    ProductId: 999,\n    ProductName: \"myProductUpdated\"\n}\noModel.update(\"/Products(999)\", oData, {success: mySuccessHandler, error: myErrorHandler});\n```\n\n----------------------------------------\n\nTITLE: Setting Detail Area Visibility and Binding Context in OpenUI5 (OData V4)\nDESCRIPTION: This code snippet defines the `_setDetailArea` function.  This function manages the visibility and binding context of a detail area in the UI. It accepts an optional user context. If a context is provided, it sets the binding context of the detail area and makes it visible, resizing the view accordingly. If no context is provided, it hides the detail area and resets the view size.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-list-detail-scenario-ec44581.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n         * Toggles the visibility of the detail area\n         *\n         * @param {object} [oUserContext] - the current user context\n         */\n        _setDetailArea : function (oUserContext) {\n            var oDetailArea = this.byId(\"detailArea\"),\n                oLayout = this.byId(\"defaultLayout\"),\n                oSearchField = this.byId(\"searchField\");\n \n            oDetailArea.setBindingContext(oUserContext || null);\n            // resize view\n            oDetailArea.setVisible(!!oUserContext);\n            oLayout.setSize(oUserContext ? \"60%\" : \"100%\");\n            oLayout.setResizable(!!oUserContext);\n            oSearchField.setWidth(oUserContext ? \"40%\" : \"20%\");\n        }\n```\n\n----------------------------------------\n\nTITLE: Defining Table Columns - OpenUI5 (XML View)\nDESCRIPTION: This code snippet defines columns within an OpenUI5 table using XML view. It showcases how to specify column width, responsiveness with minScreenWidth, and pop-in behavior with demandPopin.  The header for each column is defined using the Text control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/creating-tables-5eb6f63.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Table>\n        <columns>\n          <Column\n            width=\"12em\">\n            <Text text=\"Product\" />\n          </Column>\n           <Column\n            minScreenWidth=\"Tablet\"\n            demandPopin=\"true\">\n            <Text text=\"Supplier\" />\n          </Column>\n        </columns>\n    </Table>\n```\n\n----------------------------------------\n\nTITLE: Setting #retryAfter handler in ODataModel - JavaScript\nDESCRIPTION: This code snippet demonstrates how to set a retry-after handler for an OData model using the `setRetryAfterHandler` API. The handler calculates the time until the request should be retried based on the `retryAfter` property in the error object. It then returns a Promise that resolves after the calculated time, triggering the request repetition. The snippet also suggests locking the UI and displaying a progress bar while waiting.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-of-temporarily-unavailable-back-ends-b3422ec.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.getView().getModel().setRetryAfterHandler((oError) => {\n    const iNow = new Date().getTime();\n    const iEnd = oError.retryAfter.getTime();\n    const iRetryAfterMilliSeconds = iEnd - iNow;\n \n    // Lock UI and show dialog with a progress bar here\n         \n    return new Promise((fnResolve, fnReject) => {               \n        setTimeout(() => {          \n            fnResolve();\n            // Close the previously shown dialog here\n        }, iRetryAfterMilliSeconds);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting date using format option\nDESCRIPTION: This code snippet demonstrates how to format a date using the 'format' option within the getDateInstance method. The format string is converted into the best matching pattern in the used locale.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/date-format-91f2eba.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({\n\tformat: \"yMMMd\"\n});\n\noDateFormat.format(UI5Date.getInstance()); // string in locale de \"29. Jan. 2017\"; string in locale en \"Jan 29, 2017\" \n```\n\n----------------------------------------\n\nTITLE: XML Button with Complex Binding Parameter\nDESCRIPTION: This XML snippet demonstrates the use of complex binding syntax to format and pass a model property (`products>unitPrice`) as a parameter.  It uses a formatter function `.formatPrice` defined in the controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-events-in-xml-views-b0fb4de.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Press Me\" press=\".doSomething(${path: 'products>unitPrice', formatter: '.formatPrice'})\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter for JSON Model (JavaScript)\nDESCRIPTION: This code snippet shows how to create a filter for a JSON model. A new `sap.ui.model.Filter` object is created with a property name and a filter function (`fnTest`). The filter function receives the value of the property and returns true if the value should be kept, or false if it should be filtered out. In this specific example, the filter keeps only values greater than 100.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/json-model-96804e3.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oFilter = new sap.ui.model.Filter(\"property\", function(value) {\n    return (value > 100); \n});\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Controller in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to define a simple OpenUI5 controller using `sap.ui.define`. It extends the `sap/ui/core/mvc/Controller` and defines the controller's namespace. The controller logic is placed within the returned object.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/controller-121b8e6.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n    \"use strict\";\n    return Controller.extend(\"sap.hcm.Address\", {\n        // controller logic goes here\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a dialog in a fragment - XML\nDESCRIPTION: This XML snippet defines a simple dialog within a fragment. It utilizes the sap.m.Dialog control and binds its title to the recipient's name from the model. The fragment is defined within the core namespace and contains the dialog definition.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-16-dialogs-and-fragments-4da7298.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<core:FragmentDefinition\n   xmlns=\"sap.m\"\n   xmlns:core=\"sap.ui.core\">\n   <Dialog\n      id=\"helloDialog\"\n      title=\"Hello {/recipient/name}\"/>\n</core:FragmentDefinition>\n```\n\n----------------------------------------\n\nTITLE: resources.json Structure Example\nDESCRIPTION: This JSON snippet illustrates the structure of a `resources.json` file in an OpenUI5 application. It showcases how different resource types (e.g., `.library`, `Component-preload.js`, `DynamicSideContent.js`, `messagebundle_de.properties`, `themes/sap_horizon/library.less`, `plugin/LessSupport-dbg.js`) are described using properties like `name`, `size`, `module`, `merged`, `included`, `dynRequired`, `condRequired`, `required`, `isDebug`, `designtime`, `locale`, `raw`, `theme`, `exposedGlobalNames` and `format`. The resources.json file facilitates resource management and mobile packaging.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/the-resources-json-file-adcbcf8.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"resources\": [\n        {\n            \"name\": \".library\",\n            \"size\": 473\n        },\n        {\n            \"name\": \".theming\",\n            \"size\": 368\n        },\n        },\n        {\n            \"name\": \"Component-preload.js\",\n            \"module\": \"application/mine/Component-preload.js\",\n            \"size\": 361,\n            \"merged\": true,\n            \"included\": [\n                \"application/mine/Component.js\",\n                \"application/mine/TodoComponent.js\"\n            ],\n            \"dynRequired\": true,\n            \"condRequired\": [\n                \"sap/m/MessageBox.js\"\n            ],\n            \"required\": [\n                \"sap/base/Log.js\"\n            ]\n        },\n        {\n            \"name\": \"DynamicSideContent-dbg.js\",\n            \"module\": \"application/mine/DynamicSideContent.js\",\n            \"isDebug\":true,\n            \"size\": 115\n        },\n        {\n            \"name\": \"DynamicSideContent.js\",\n            \"module\": \"application/mine/DynamicSideContent.js\",\n            \"size\": 78\n        },\n        {\n            \"name\": \"DynamicSideContentRenderer-dbg.js\",\n            \"module\": \"application/mine/DynamicSideContentRenderer.js\",\n            \"isDebug\":true,\n            \"size\": 110,\n            \"required\": [\n                \"sap/ui/core/UIComponent.js\"\n            ]\n        },\n \n        ...\n \n        {\n            \"name\": \"library-preload.json\",\n            \"module\": \"application/mine/library-preload.json\",\n            \"merged\":true,\n            \"size\": 294\n        },\n\n        ...\n\n        {\n            \"name\": \"designtime/library.designtime.js\",\n            \"module\": \"application/mine/designtime/library.designtime.js\",\n            \"size\": 84,\n            \"designtime\": true\n        },\n \n        ...\n \n        {\n            \"name\": \"messagebundle_de.properties\",\n            \"module\": \"application/mine/i18n/messagebundle_de.properties\",\n            \"raw\":\"messagebundle.properties\",\n            \"locale\":\"de\",\n            \"size\": 163,\n        },\n \n        ...\n \n        {\n            \"name\": \"themes/sap_horizon/library.less\",\n            \"theme\":\"sap_horizon\",\n            \"size\": 311,\n            \"designtime\": true\n        }\n \n        ...\n        {\n            \"name\": \"plugin/LessSupport-dbg.js\",\n            \"module\": \"sap/ui/core/plugin/LessSupport.js\",\n            \"condRequired\": [\n                \"sap/ui/core/theming/Parameters.js\",\n                \"sap/ui/thirdparty/less.js\"\n            ],\n            \"exposedGlobalNames\": [\"globalLess\"],\n            \"dynRequired\": true,\n            \"format\": \"raw\",\n            \"isDebug\": true,\n            \"size\": 18494\n        }\n\n        ...\n\n        {\n            \"name\": \"resources.json\",\n            \"dynRequired\": true,\n            \"size\": 1000000\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Product List with Factory Function (XML)\nDESCRIPTION: This XML snippet shows the configuration of the `sap.m.List` control in `App.view.xml` to utilize a factory function for item generation. The `items` aggregation is bound to the 'products>/Products' path, and the 'factory' property is set to the '.productListFactory' function in the controller. The fragments ProductSimple and ProductExtended are added as dependents to the list. Dependencies: sap.m.List, ui5.databinding.view.ProductSimple, ui5.databinding.view.ProductExtended\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-aggregation-binding-using-a-factory-function-284a036.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.databinding.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:form=\"sap.ui.layout.form\"\n\txmlns:l=\"sap.ui.layout\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tcore:require=\"{Currency: 'sap/ui/model/type/Currency'}\">\n...\n\t\t<Panel headerText=\"{i18n>panel3HeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n\t\t\t<List\n\t\t\t\tid=\"ProductList\"\n\t\t\t\theaderText=\"{i18n>productListTitle}\"\n\t\t\t\titems=\"{\n\t\t\t\t\tpath: 'products>/Products',\n\t\t\t\t\tfactory: '.productListFactory'\n\t\t\t\t}\">\n\t\t\t\t<dependents>\n\t\t\t\t\t<core:Fragment fragmentName=\"ui5.databinding.view.ProductSimple\" type=\"XML\"/>\n\t\t\t\t\t<core:Fragment fragmentName=\"ui5.databinding.view.ProductExtended\" type=\"XML\"/>\n\t\t\t\t</dependents>\n\t\t\t</List>\n\t\t</Panel>\n...\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Component Logging\nDESCRIPTION: This snippet demonstrates how to use component logging in OpenUI5.  It retrieves a logger instance using `Log.getLogger(<component>)` with a specified component name.  All subsequent log entries made using this logger will automatically include the component information, aiding in filtering and analysis.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/logging-and-tracing-9f4d62c.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Log\" required from module \"sap/base/Log\"\nthis._oLogger = Log.getLogger(\"sap.ui.demo.MyComponent\");\nthis._oLogger.info(\"Something has happened\");\n```\n\n----------------------------------------\n\nTITLE: Set Comments Model in Component - OpenUI5 JavaScript\nDESCRIPTION: This code modifies the init function of the component to set the productFeedback model, making it accessible throughout the application. It calls the createCommentsModel function and sets the returned model on the component with the name 'productFeedback'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-adding-a-comments-section-c73dfe3.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n   \"sap/ui/core/UIComponent\",\n   \"sap/ui/Device\",\n   \"./model/models\",\n   \"./controller/ErrorHandler\"\n], function(UIComponent, Device, models, ErrorHandler) {\n   \"use strict\";\n   return UIComponent.extend(\"myCompany.myApp.Component\", {\n      ...\n      init: function() {\n         // call the base component's init function\n         UIComponent.prototype.init.apply(this, arguments);\n\n         // initialize the error handler with the component\n         this._oErrorHandler = new ErrorHandler(this);\n\n         // set the device model\n         this.setModel(models.createDeviceModel(), \"device\");\n         \n         // set the product feedback model\n         this.setModel(models.createCommentsModel(), \"productFeedback\");\n\n\n         // create the views based on the url/hash\n         this.getRouter().initialize();\n      },\n      ...\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: XML Button with Global Helper and Parameters\nDESCRIPTION: This XML code demonstrates how to attach an event handler `doSomething` from a required module (Helper) to a button's `press` event. It also shows how to use `.call()` to explicitly set the `this` context to the controller ($controller) and pass a string parameter ('Hello World').\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-events-in-xml-views-b0fb4de.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Button core:require=\"{Helper:'path/to/Helper'}\" text=\"Press Me\" press=\"Helper.doSomething.call($controller, 'Hello World')\"/>\n```\n\n----------------------------------------\n\nTITLE: Sample Route Definition in sap.f.routing.Router (JSON)\nDESCRIPTION: This JSON snippet demonstrates a sample route configuration for an application using `sap.f.routing.Router`. It defines the route's pattern, name, associated targets (views to be loaded in columns), and the initial layout for the `FlexibleColumnLayout`. The `layout` property dictates the initial column arrangement.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/router-c6da1a5.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"pattern\": \"itemInfo\",\n   \"name\": \"itemInfo\",\n   \"target\": [\n      \"list\",\n      \"detail\",\n      \"detailDetail\"\n   ],\n   \"layout\": \"ThreeColumnsMidExpanded\"\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Controller Extension Behavior with override() in UI5 (JS)\nDESCRIPTION: This code snippet illustrates how to override the behavior of a controller extension by using the `override()` method. The example showcases overriding a hook named `someHook` within the controller extension.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-controller-extension-21515f0.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SomeControllerExtension from \"my/some/SomeControllerExtension\";\nimport ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\n\n/**\n * @namespace my.sample\n */\nclass MyController extends Controller {\n  someControllerExtension = ControllerExtension.use(SomeControllerExtension.override({\n    someHook: function(...) { ... }\n  })); // adapt the \"SomeControllerExtension\" extension\n  \n  someMethod() {\n    this.someControllerExtension.doSomething(...);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuration for Controller Replacement in OpenUI5\nDESCRIPTION: This code snippet illustrates the configuration required to replace a standard controller with a custom controller in OpenUI5.  The `sap.ui.controllerReplacements` setting maps the original controller's name to the custom controller's name, instructing OpenUI5 to use the custom controller instead of the original.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/controller-replacement-b0b14bf.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nextensions: { \n    \"sap.ui.controllerReplacements\": {\n        \"samples.components.ext.sap.Main\": \"samples.components.ext.customer.CustomMain\"\n    },\n    .....some more content\n```\n\n----------------------------------------\n\nTITLE: Initializing Model Values with Binding (OData)\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize valid model values with an existing data binding. It retrieves the data type from the binding of a DateTimePicker control and uses it to format a UI5Date instance for creating a new item in an OData list binding. The oType.getModelValue function ensures that the date is in the correct format for the model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/date/UI5Date\",\n    \"sap/ui/core/mvc/Controller\"\n], function (UI5Date, Controller) {\n    \"use strict\";         \n \n    return Controller.extend(\"myController\", { \n        /**\n         * Assume you have the following control defined in the corresponding XML view of this controller:\n         * \n         * With OData V2:\n         *    <mvc:View\n         *        xmlns:core=\"sap.ui.core\"\n         *        xmlns:mvc=\"sap.ui.core.mvc\"\n         *        xmlns=\"sap.m\"\n         *        core:require=\"{DateTimeOffset: 'sap/ui/model/odata/type/DateTimeOffset'}\">\n         *        ...\n         *        <DateTimePicker id=\"deliveryDate::createSalesOrderItemDialog\"\n         *            value=\"{path: 'DeliveryDate', type: 'DateTimeOffset'}\"/>\n         *\n         * With OData V4: <DateTimePicker id=\"deliveryDate::createSalesOrderItemDialog\" value=\"{DeliveryDate}\"/>\n         */\n        onCreateItem() {\n            const oDeliveryDate = UI5Date.getInstance();\n            // Get the data type via the data binding\n            const oType = this.byId(\"deliveryDate::createSalesOrderItemDialog\").getBinding(\"value\").getType();\n \n            oDeliveryDate.setMonth(oDeliveryDate.getMonth() + 1);            \n            this.byId(\"ToLineItems\").getBinding(\"rows\").create({\n                DeliveryDate: oType.getModelValue(oDeliveryDate)\n            });\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Test Suite HTML (QUnit)\nDESCRIPTION: This HTML code defines the test suite page. It registers a resource root mapping for the test resources and references the testsuite.qunit module. This page is opened in the browser to see a list of all tests and run them.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-27-unit-test-with-qunit-e1ce1de.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<script\n\t\tsrc=\"../resources/sap/ui/test/starter/createSuite.js\"\n\t\tdata-sap-ui-testsuite=\"test-resources/ui5/walkthrough/testsuite.qunit\"\n\t\tdata-sap-ui-resource-roots='{\n\t\t\t\"test-resources.ui5.walkthrough\": \"./\"\n\t\t}'\n\t></script>\n</head>\n<body>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Actions in Detail-Detail View (XML)\nDESCRIPTION: This code modifies the `DetailDetail.view.xml` file to add navigation actions for entering and exiting fullscreen mode and closing the column in the detail-detail view. The implementation is similar to the detail view, using `OverflowToolbarButton` elements and data binding to control visibility based on the `/actionButtonsInfo/endColumn` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-using-the-flexible-column-layout-semantic-helper-276f001.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.fcl.controller.DetailDetail\"\n\txmlns=\"sap.f\"\n\txmlns:m=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<DynamicPage toggleHeaderOnTitleClick=\"false\">\n\t\t<title>\n\t\t\t<DynamicPageTitle>\n\t\t\t\t<heading>\n\t\t\t\t\t<m:FlexBox wrap=\"Wrap\" fitContainer=\"true\" alignItems=\"Center\">\n\t\t\t\t\t\t<m:Title text=\"{products>text}\" wrapping=\"true\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t\t</m:FlexBox>\n\t\t\t\t</heading>\n\n\t\t\t\t<navigationActions>\n\t\t\t\t\t<m:OverflowToolbarButton\n\t\t\t\t\t\ttype=\"Transparent\"\n\t\t\t\t\t\ticon=\"sap-icon://full-screen\"\n\t\t\t\t\t\tpress=\".handleFullScreen\"\n\t\t\t\t\t\ttooltip=\"Enter Full Screen Mode\"\n\t\t\t\t\t\tvisible=\"{= ${/actionButtonsInfo/endColumn/fullScreen} !== null }\"/>\n\t\t\t\t\t<m:OverflowToolbarButton\n\t\t\t\t\t\ttype=\"Transparent\"\n\t\t\t\t\t\ticon=\"sap-icon://exit-full-screen\"\n\t\t\t\t\t\tpress=\".handleExitFullScreen\"\n\t\t\t\t\t\ttooltip=\"Exit Full Screen Mode\"\n\t\t\t\t\t\tvisible=\"{= ${/actionButtonsInfo/endColumn/exitFullScreen} !== null }/>\n\t\t\t\t\t<m:OverflowToolbarButton\n\t\t\t\t\t\ttype=\"Transparent\"\n\t\t\t\t\t\ticon=\"sap-icon://decline\"\n\t\t\t\t\t\tpress=\".handleClose\"\n\t\t\t\t\t\ttooltip=\"Close column\"\n\t\t\t\t\t\tvisible=\"{= ${/actionButtonsInfo/endColumn/closeColumn} !== null }\"/>\n\t\t\t\t</navigationActions>\n\t\t\t</DynamicPageTitle>\n\t\t</title>\n\t\t<content>\n\t\t\t<m:Link text=\"Navigate to next page…\" press=\".handleAboutPress\"/>\n\t\t</content>\n\t</DynamicPage>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Control with OpenUI5\nDESCRIPTION: This code snippet defines a new OpenUI5 control named `my.Hello` that extends `sap.ui.core.Control`. It includes a `name` property of type string and a renderer that displays the text \"Hello <name>\". The control's renderer creates a span element and inserts the greeting text with automatic XSS protection.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/creating-a-simple-control-91f02ec.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Control\" required from \"sap/ui/core/Control\"\n\nControl.extend(\"my.Hello\", {                  // call the new Control type \"my.Hello\" \n                                              // and let it inherit from sap.ui.core.Control\n    metadata : {                              // the Control API\n        properties : {\n            \"name\" : \"string\"                 // setter and getter are created behind the scenes, \n                                              // including data binding and type validation\n        }\n    },\n\n    renderer : {\n        apiVersion: 2,                        // see 'Renderer Methods' for an explanation of this flag\n        render: function(oRm, oControl) {     // the part creating the HTML\n            oRm.openStart(\"span\", oControl).openEnd();\n            oRm.text(\"Hello \" + oControl.getName()); // write the Control property 'name', with automatic XSS protection\n            oRm.close(\"span\");\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Measurements by Category - OpenUI5 - JavaScript\nDESCRIPTION: This code snippet filters measurements based on a specific category. The `filterMeasurements` method is used with a callback function that checks if the `categories` array of each measurement contains the desired category. This function is used to filter the measurements array to only keep entries that match.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/performance-measurement-using-sap-ui-performance-measurement-module-78880c0.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Filter for category1\nMeasurement.filterMeasurements(function(oMeasurement) {\n    return oMeasurement.categories.indexOf(\"category1\") > -1;\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.delayedCall with window.setTimeout (Native)\nDESCRIPTION: This example shows how to replace `jQuery.sap.delayedCall` with the native `window.setTimeout`.  `window.setTimeout` sets a timer which executes a function once the timer expires.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.setTimeout\n```\n\n----------------------------------------\n\nTITLE: Handling Input Changes - JavaScript\nDESCRIPTION: This snippet defines the `onInputChange` event handler, which manages entries in the `Input` fields. It updates the `appView` model using `_setUIChanges` and checks if the `UserName` field is empty. If it is empty, it updates the `usernameEmpty` property in the `appView` model to prevent saving without a username.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-create-and-edit-b4f1266.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n        onInputChange : function (oEvt) {\n            if (oEvt.getParameter(\"escPressed\")) {\n                this._setUIChanges();\n            } else {\n                this._setUIChanges(true);\n                if (oEvt.getSource().getParent().getBindingContext().getProperty(\"UserName\")) {\n                    this.getView().getModel(\"appView\").setProperty(\"/usernameEmpty\", false);\n                }\n            }\n        },\n...\n```\n\n----------------------------------------\n\nTITLE: Preloading sap.f Library in HTML\nDESCRIPTION: This HTML snippet demonstrates how to preload the `sap.f` library along with other necessary libraries for an OpenUI5 application. Preloading `sap.f` can improve performance by preventing the `ObjectPageLayout` from lazily loading it, especially when using `sap.uxap.ObjectPageDynamicHeaderTitle`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-headers-comparison-9c9d94f.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\ndata-sap-ui-libs=\"sap.m,sap.uxap,sap.ui.layout,sap.f\"\n```\n\n----------------------------------------\n\nTITLE: Data Binding with Data Type in XML View - OpenUI5\nDESCRIPTION: This snippet shows how to define a data type within an OpenUI5 XML view for data binding. It binds the `value` property of an `Input` control to the `/firstName` property of the model, while also specifying the data type as `StringType` using `sap/ui/model/type/String`. The `core:require` namespace ensures that the `StringType` is available.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/binding-syntax-e2e6f41.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{StringType: 'sap/ui/model/type/String'}\">\n    \n    <Input value=\"{path: '/firstName', type: 'StringType'}\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Initializing Component and Setting One-Way Binding Mode - JavaScript\nDESCRIPTION: This code snippet extends the `sap.ui.core.UIComponent` to create a custom component. It overrides the `init` method to set the default binding mode of the component's model to `BindingMode.OneWay`. This ensures that data only flows from the model to the UI, and not vice versa. This is done after calling the parent's init function. The component depends on `sap/ui/core/UIComponent` and `sap/ui/model/BindingMode`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-one-way-data-binding-88756c0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/model/BindingMode\"\n], (UIComponent, BindingMode) => {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"ui5.databinding.Component\", {\n\t\tmetadata : {\n\t\t\tinterfaces: [\"sap.ui.core.IAsyncContentCreation\"],\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\t\tinit() {\n\t\t\t// call the init function of the parent\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\tthis.getModel().setDefaultBindingMode(BindingMode.OneWay);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Controller Replacement Configuration in OpenUI5\nDESCRIPTION: This code demonstrates how to use the controller replacement configuration (`sap.ui.controllerReplacements`) in OpenUI5 to extend a typed controller. It calls the original methods using `MainController.prototype.methodName.apply(this, arguments)` to ensure proper lifecycle execution. This approach is used to replace the original controller with the custom controller, allowing for modifications and extensions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/controller-replacement-b0b14bf.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"samples/components/ext/sap/Main.controller\"\n], function(MainController) {\n    \"use strict\";\n  \n    return MainController.extend(\"samples.components.ext.customer.CustomMain\", {\n        onInit: function() { \n            MainController.prototype.onInit.apply(this, arguments);\n            /* do something */ \n        },\n        onBeforeRendering: function() { \n            MainController.prototype.onBeforeRendering.apply(this, arguments);\n            /* do something */ \n        },\n        onAfterRendering: function() {\n            /* do something */\n            MainController.prototype.onAfterRendering.apply(this, arguments);\n        },\n        onExit: function() {\n            /* do something */\n            MainController.prototype.onExit.apply(this, arguments);\n        },\n        myEventHandler: function(oEvent) {\n            MainController.prototype.myEventHandler.apply(this, arguments);\n            /* do something */ \n        }\n    });\n  \n});\n```\n\n----------------------------------------\n\nTITLE: _onRate Event Handler in ProductRating (TypeScript)\nDESCRIPTION: This code defines the _onRate event handler, which is called when the user changes the rating in the RatingIndicator. It retrieves the new value from the event parameters, updates the control's value property, and updates the label's text with a dynamic message from the i18n resource bundle, displaying the current rating and the maximum possible rating.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n\t_onRate(event: RatingIndicator$LiveChangeEvent): void {\n\t\tconst resourceBundle = (this?.getModel(\"i18n\") as ResourceModel)?.getResourceBundle() as ResourceBundle;\n\t\tconst value = event.getParameter(\"value\");\n\t\t\n\t\tthis.setProperty(\"value\", value, true);\n\t\t\n\t\t(this.getAggregation(\"_label\") as Label).setText(resourceBundle.getText(\"productRatingLabelIndicator\", [value, (event.getSource() as RatingIndicator).getMaxValue()]));\n\t\t(this.getAggregation(\"_label\") as Label).setDesign(\"Bold\");\n\t}\n```\n\n----------------------------------------\n\nTITLE: Setting style class in App.controller.ts (JavaScript)\nDESCRIPTION: This code adds an `onInit` method to the app controller (App.controller.ts).  The `onInit` method is called when the app view is instantiated. It queries the `getContentDensityClass` helper function (defined in the app component) to set the corresponding style class on the app view. This allows all controls inside the app view to automatically adjust to either the compact or cozy size, as defined by the style.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-36-content-density-typescript-667aa4a.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport Component from \"../Component\";\n\n/**\n * @namespace ui5.walkthrough.controller\n */\nexport default class App extends Controller {\n\tonInit(): void {\n        this.getView().addStyleClass((<Component> this.getOwnerComponent()).getContentDensityClass())\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Employee List View (XML)\nDESCRIPTION: This XML snippet defines the EmployeeList view using sap.m controls. It includes a Page with a List of employees.  Each StandardListItem is configured for navigation and triggers the '.onListItemPressed' event when clicked. The view uses data binding to display employee information.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-navigate-to-routes-with-mandatory-parameters-f96d252.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.EmployeeList\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page\n\t\tid=\"employeeListPage\"\n\t\ttitle=\"{i18n>EmployeeList}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\"\n\t\tclass=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<List id=\"employeeList\" headerText=\"{i18n>ListOfAllEmployees}\" items=\"{/Employees}\">\n\t\t\t\t<items>\n\t\t\t\t\t<StandardListItem\n\t\t\t\t\t\ttitle=\"{FirstName} {LastName}\"\n\t\t\t\t\t\ticonDensityAware=\"false\"\n\t\t\t\t\t\ticonInset=\"false\"\n\t\t\t\t\t\ttype=\"Navigation\"\n\t\t\t\t\t\tpress=\".onListItemPressed\"/>\n\t\t\t\t</items>\n\t\t\t</List>\n\t\t</content>\n\t</Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Using Descendant Matcher in OPA\nDESCRIPTION: This snippet demonstrates how to use the `sap.ui.test.matchers.Descendant` matcher to find a `sap.m.ColumnListItem` (table row) that contains a `sap.m.Text` control with the text \"special text\".  It first waits for the text control, and then uses it to find the descendant table row.  `Opa5` is used along with assertions to verify that the row containing the special text is found.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.waitFor({\n    controlType: \"sap.m.Text\",\n    matchers: new Properties({\n        text: \"special text\"\n    }),\n    success: function (aText) {\n        return this.waitFor({\n            controlType: \"sap.m.ColumnListItem\",\n            matchers: new Descendant(aText[0]),\n            success: function (aRows) {\n                Opa5.assert.strictEqual(aRows.length, 1, \"Found row with special text\");\n            },\n            errorMessage: \"Did not find row or special text is not inside table row\"\n        });\n    },\n    errorMessage: \"Did not find special text\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Property with Enum Type\nDESCRIPTION: This code snippet shows how to define a control property using a previously registered enumeration (enum) type in OpenUI5. The `type` property in the definition is set to the string name of the enum. This helps constrain the values the properties can take.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-control-properties-ac56d92.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nproperties: {\n    myProperty : {type: \"sap.m.ValueColor\", defaultValue: \"Neutral\"}\n}\n```\n\n----------------------------------------\n\nTITLE: OPA5 Test for Worklist Pagination - JavaScript\nDESCRIPTION: This JavaScript code defines an OPA5 test journey for the Worklist application to test pagination and loading more items. It uses `sap.ui.define` to load dependencies like `opaQunit`, `Qunit`, and the `Worklist` page object. The test journey includes assertions to verify the table has pagination, the title displays the total amount of items, and the ability to load more items using `iPressOnMoreData`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-a-first-opa-test-1b47457.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*global QUnit*/\nsap.ui.define([\n\t'sap/ui/test/opaQunit',\n\t'sap/ui/test/Qunit',\n\t'./pages/Worklist'\n], function (opaTest, QUnit, Worklist) {\n\t\"use strict\";\n\n\tQUnit.module(\"Posts\");\n\n\topaTest(\"Should see the table with all posts\", function (Given, When, Then) {\n\t\t// Arrangements\n\t\tGiven.iStartMyApp();\n\n\t\t// Assertions\n\t\tThen.onTheWorklistPage.theTableShouldHavePagination().\n\t\t\tand.theTitleShouldDisplayTheTotalAmountOfItems();\n\t});\n\n\topaTest(\"Should be able to load more items\", function (Given, When, Then) {\n\t\t//Actions\n\t\tWhen.onTheWorklistPage.iPressOnMoreData();\n\n\t\t// Assertions\n\t\tThen.onTheWorklistPage.theTableShouldHaveAllEntries();\n\n\t\t// Cleanup\n\t\tThen.iTeardownMyApp();\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: App Controller with Message Toast in TypeScript\nDESCRIPTION: This code defines an OpenUI5 controller for the `App` view. The `onShowHello` function retrieves a message from the i18n resource bundle using data from the JSON model and displays it in a `MessageToast`. Dependencies include `MessageToast`, `Controller`, `JSONModel`, `ResourceModel`, and `ResourceBundle`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-component-configuration-typescript-f9d0e2f.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport MessageToast from \"sap/m/MessageToast\";\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\n\n/**\n * @name ui5.walkthrough.controller.App\n */\nexport default class AppController extends Controller {\n    onShowHello(): void {\n        // read msg from i18n model\n        const recipient = (<JSONModel> this.getView()?.getModel())?.getProperty(\"/recipient/name\");\n        const resourceBundle = <ResourceBundle> (<ResourceModel> this.getView()?.getModel(\"i18n\"))?.getResourceBundle();\n        const msg = resourceBundle.getText(\"helloMsg\", [recipient]) || \"no text defined\";\n        // show message\n        MessageToast.show(msg);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling autoWait globally in OPA5\nDESCRIPTION: This code snippet shows how to enable the `autoWait` parameter globally in your OPA5 configuration, typically in the QUnit start page. This ensures that OPA automatically waits for asynchronous operations to complete before proceeding with test actions. It improves test stability by synchronizing test execution with the application state.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-the-autowait-parameter-fb487ef.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// in QUnit start page, before all OPA tests\nOpa5.extendConfig({\n    autoWait: true\n});\n```\n\n----------------------------------------\n\nTITLE: Generic Test Page (QUnit)\nDESCRIPTION: This HTML code defines a generic test page used to run individual tests.  It includes the `sap/ui/test/starter/runTest.js` script which is responsible for loading the test suite configuration and starting the test.  It configures the `data-sap-ui-resource-roots` to register the project-specific test namespace.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-27-unit-test-with-qunit-e1ce1de.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<script\n\t\tsrc=\"../resources/sap/ui/test/starter/runTest.js\"\n\t\tdata-sap-ui-resource-roots='{\n\t\t\t\"test-resources.ui5.walkthrough\": \"./\"\n\t\t}'\n\t\t></script>\n</head>\n<body class=\"sapUiBody\">\n\t<div id=\"qunit\"></div>\n\t<div id=\"qunit-fixture\"></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Modify Detail Controller for Routing - JavaScript\nDESCRIPTION: This JavaScript code modifies the Detail.controller.js to bind the detail view to the selected product from the list using routing parameters. It attaches to the route's patternMatched event to update the view based on the current route.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-routing-7f65131.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function (Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.Detail\", {\n\t\tonInit: function () {\n\t\t\tvar oOwnerComponent = this.getOwnerComponent();\n\n\t\t\tthis.oRouter = oOwnerComponent.getRouter();\n\t\t\tthis.oModel = oOwnerComponent.getModel();\n\n\t\t\tthis.oRouter.getRoute(\"list\").attachPatternMatched(this._onProductMatched, this);\n\t\t\tthis.oRouter.getRoute(\"detail\").attachPatternMatched(this._onProductMatched, this);\n\t\t},\n\n\t\t_onProductMatched: function (oEvent) {\n\t\t\tthis._product = oEvent.getParameter(\"arguments\").product || this._product || \"0\";\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: \"/ProductCollection/\" + this._product,\n\t\t\t\tmodel: \"products\"\n\t\t\t});\n\t\t},\n\n\t\tonEditToggleButtonPress: function() {\n\t\t\tvar oObjectPage = this.getView().byId(\"ObjectPageLayout\"),\n\t\t\t\tbCurrentShowFooterState = oObjectPage.getShowFooter();\n\n\t\t\toObjectPage.setShowFooter(!bCurrentShowFooterState);\n\t\t},\n\n\t\tonExit: function () {\n\t\t\tthis.oRouter.getRoute(\"list\").detachPatternMatched(this._onProductMatched, this);\n\t\t\tthis.oRouter.getRoute(\"detail\").detachPatternMatched(this._onProductMatched, this);\n\t\t}\n\t});\n});\n\n```\n\n----------------------------------------\n\nTITLE: Attaching to `RouteMatched` event in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach to the `RouteMatched` event of a specific route using OpenUI5's routing API. The code gets the Router instance, retrieves a route, and attaches a handler function to the `matched` event. The handler extracts an ID from the event parameters.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/methods-and-events-for-navigation-516e477.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.require([\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/ui/core/UIComponent\", ...\n], function(UIComponent, ...) {\n    \"use strict\";\n    return Controller.extend(\"MyApp.View1\", {\n        onInit: function() {\n            var oRouter = this.getOwnerComponent().getRouter();\n            oRouter.getRoute(\"view1\").attachMatched(function(oEvent) {\n                this._selectItemWithId(oEvent.getParameter(\"arguments\").id);\n            }, this);\n        },\n    \n        _selectItemWithId : function(id) {\n            //implementation\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Expression Binding in XML View - OpenUI5\nDESCRIPTION: This snippet demonstrates expression binding within an OpenUI5 XML view. The `state` property of an `ObjectStatus` control is bound to an expression that dynamically determines the state based on whether the `UnitPrice` is greater than the `/priceThreshold`.  It directly calculates and sets the status without needing a separate formatter function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/binding-syntax-e2e6f41.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<ObjectStatus state=\"{= ${products>UnitPrice} > ${/priceThreshold} ? 'Error': 'Success' }\"/>\n```\n\n----------------------------------------\n\nTITLE: Routing Configuration Update in manifest.json (JavaScript)\nDESCRIPTION: This code snippet updates the routing configuration in the `manifest.json` file.  It adds an optional `:?query:` parameter to the `employeeOverview` route, allowing the search term to be included in the URL. The pattern allows for bookmarking the search state. Dependencies: sap.ui5 routing configuration.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-12-make-a-search-bookmarkable-e85da53.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n\t\"_version\": \"1.12.0\",\n\t\"sap.app\": {\n\t\t...\n\t},\n\t\"sap.ui\": {\n\t\t...\n\t},\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.nav.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"transition\": \"slide\",\n\t\t\t\t\"bypassed\": {\n\t\t\t\t\t\"target\": \"notFound\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"routes\": [{\n\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\"name\": \"appHome\",\n\t\t\t\t\"target\": \"home\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees\",\n\t\t\t\t\"name\": \"employeeList\",\n\t\t\t\t\"target\": \"employees\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/overview:?query:\",\n\t\t\t\t\"name\": \"employeeOverview\",\n\t\t\t\t\"target\": [\"employeeOverviewTop\", \"employeeOverviewContent\"]\n\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}\",\n\t\t\t\t\"name\": \"employee\",\n\t\t\t\t\"target\": \"employee\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}/resume:?query:\",\n\t\t\t\t\"name\": \"employeeResume\",\n\t\t\t\t\"target\": \"employeeResume\"\n\t\t\t}],\n\t\t\t\"targets\": {\n\t\t\t\t...\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OData Model - JavaScript\nDESCRIPTION: This code defines a function `createODataModel` that creates and configures an OData V2 model using `sap/ui/model/odata/v2/ODataModel`. It takes a URL and an optional settings object as input. Settings are applied to the model using the setter methods. It depends on the 'sap/ui/model/odata/v2/ODataModel' and 'sap/ui/thirdparty/jquery' modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-testing-controls-with-qunit-0ddcc60.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// \"ODataModel\" required from module \"sap/ui/model/odata/v2/ODataModel\"\n// \"jQuery\" required from module \"sap/ui/thirdparty/jquery\"\n\nfunction createODataModel(sURL, mSettings) {\n    sURL = sURL || \"http://sap.com/service/\";\n    const oModel = new ODataModel(sURL);\n    \n    mSettings = mSettings || {};\n    jQuery.each(mSettings, function(sProperty, vValue) {\n        sProperty = sProperty[0].toUpperCase() + sProperty.substring(1);\n        oModel[\"set\" + sProperty](vValue);\n    });\n    \n    return oModel;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling the deviceready event in PhoneGap\nDESCRIPTION: This code snippet shows how to listen for the `deviceready` event in a PhoneGap application. The `appReady` function, which contains the code that performs AJAX requests (such as OData model initialization), is executed only after the `deviceready` event is fired, preventing UI freezes caused by AJAX requests being blocked during PhoneGap initialization.  The `document.addEventListener` is used to bind the `appReady` function to the `deviceready` event.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/development-for-hybrid-web-containers-293eb94.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n<!-- put the following code in the beginning of the application code -->\nfunction appReady(){\n    // your code with AJAX requests\n}\n<!-- bind to the deviceready event -->\ndocument.addEventListener(\"deviceready\", appReady, false);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUI5 Component with Manifest\nDESCRIPTION: This JavaScript snippet defines an OpenUI5 component that utilizes the manifest.json file for its configuration. The `manifest` property in the `metadata` section is set to \"json\" to link the component to the manifest file.  A JSONModel is created and set on the component. Imports include UIComponent and JSONModel. The init function is overridden to initialize the data model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-descriptor-for-applications-typescript-2a46b75.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport UIComponent from \"sap/ui/core/UIComponent\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\n\n/**\n * @namespace ui5.walkthrough\n */\nexport default class Component extends UIComponent {\n    public static metadata = {\n        \"interfaces\": [\"sap.ui.core.IAsyncContentCreation\"],\n        \"manifest\": \"json\" \n    };\n    init(): void {\n        // call the init function of the parent\n        super.init();\n        \n        // set data model\n        const data = {\n            recipient: {\n                name: \"World\"\n            }\n        };\n        const dataModel = new JSONModel(data);\n        this.setModel(dataModel);\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying a Personalization Popup - JavaScript\nDESCRIPTION: This snippet demonstrates how to display a personalization popup using `sap.m.p13n.Engine#show`.  It requires a control instance (e.g., `oTable`) and an array of controller keys to be displayed in the popup.  An optional settings map can be provided to customize the dialog's appearance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/enablement-of-personalization-with-variant-management-f280251.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The control instance and an array of the desired keys to display for personalization needs to be provided. Optionally a map of settings\n// such as the contentHeight and contentWidth can be provided to customize the defaults of the personalization dialog.\nEngine.getInstance().show(oTable, [\"Columns\", \"Sorter\", \"Groups\"], {\n    contentHeight: \"35rem\",\n    contentWidth: \"32rem\"\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Deferred Groups in ODataModel JavaScript\nDESCRIPTION: This JavaScript snippet retrieves the list of deferred groups from an ODataModel instance. The `getDeferredGroups()` method returns an array containing the IDs of all deferred batch groups.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nvar aDeferredGroups = oModel.getDeferredGroups();\n```\n\n----------------------------------------\n\nTITLE: OData V4 View for Nested Single Entity (XML)\nDESCRIPTION: This XML snippet defines a SimpleForm that binds to properties of a SalesOrder and a nested BusinessPartner (SO_2_BP). It includes Text controls to display SalesOrderID and BusinessPartnerID and an Input control for CompanyName.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-an-entity-in-a-collection-c9723f8.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<SimpleForm>\n     <Text text=\"{SalesOrderID}\"/>\n     <Text text=\"{SO_2_BP/BusinessPartnerID}\"/>\n     <Input value=\"{SO_2_BP/CompanyName}\"/>\n</SimpleForm>\n```\n\n----------------------------------------\n\nTITLE: Complex Syntax with Global Formatter - XML\nDESCRIPTION: This XML snippet shows how to use a global formatter function. The 'text' property of a Text control is bound to a combination of 'birthday/day', 'birthday/month', and 'birthday/year' properties, using the 'globalFormatter' function imported via core:require.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/composite-binding-a2fe8e7.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{globalFormatter: 'my/globalFormatter'}\">\n    <Text text=\"{\n        parts: [\n            {path: 'birthday/day'},\n            {path: 'birthday/month'},\n            {path: 'birthday/year'}\n        ],\n        formatter: 'globalFormatter'\n    }\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating HelloPanel.view.xml (XML)\nDESCRIPTION: This XML snippet creates the new HelloPanel.view.xml file, which contains the panel and its content. It defines the UI elements previously located directly in the App view, including the button, input field, and formatted text. The controller for the view is specified using the controllerName attribute.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-nested-views-df8c9c3.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.HelloPanel\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Panel\n      headerText=\"{i18n>helloPanelTitle}\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\">\n      <content>\n         <Button\n            text=\"{i18n>showHelloButtonText}\"\n            press=\".onShowHello\"\n            class=\"myCustomButton\"/>\n         <Input\n            value=\"{/recipient/name}\"\n            valueLiveUpdate=\"true\"\n            width=\"60%\"/>\n         <FormattedText\n            htmlText=\"Hello {/recipient/name}\"\n            class=\"sapUiSmallMargin sapThemeHighlight-asColor myCustomText\"/>\n      </content>\n   </Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Component Container Configuration - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to programmatically create and configure a `ComponentContainer` within a custom bootstrap module.  It defines the component name, manifest settings, lifecycle, and event handlers for `componentCreated` and `componentFailed`. The component container is then placed into the DOM using `placeAt(\"content\")`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-api-for-initial-components-82a0fce.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// my/app/bootstrap.js\nsap.ui.define([\n  \"sap/ui/core/ComponentContainer\",\n  \"sap/ui/core/library\"\n], (ComponentContainer, sapUiCoreLib) => {\n  \"use strict\";\n  const { Container } = sapUiCoreLib;\n  const oComponentContainer = new ComponentContainer({\n    name: \"my.app\",\n    manifest: true,\n    lifecycle: Container,\n    handleValidation: true,\n    componentCreated: function(oEvent) {\n      const oComponent = oEvent.getParameter(\"component\");\n      // ...\n    },\n    componentFailed: function(oEvent) {\n      const oReason = oEvent.getParameter(\"reason\");\n      // ...\n    }\n  });\n  oComponentContainer.placeAt(\"content\");\n});\n```\n\n----------------------------------------\n\nTITLE: Allowlist Service Configuration via Meta Tag - HTML\nDESCRIPTION: This code shows how to configure the allowlist service using a `<meta>` tag. It sets the `sap-allowlist-service` meta tag and relies on the OpenUI5 runtime to set the `frame-options` automatically to `trusted` if not configured otherwise. Requires OpenUI5 core and an external allowlist service.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/frame-options-62d9c4d.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"sap-allowlist-service\" content=\"url/to/allowlist/service\" />\n<script  id=\"sap-ui-bootstrap\"\n    src=\"resources/sap-ui-core.js\"\n    data-...=\"...\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Overriding AppCacheBuster URL Handling\nDESCRIPTION: This JavaScript snippet demonstrates how to override the default URL handling behavior of the Application Cache Buster. By redefining the `sap.ui.core.AppCacheBuster.handleURL` function, you can specify which URLs should be ignored by the cache buster. The function should return `true` if the URL should be handled, and `false` otherwise.  In this example, \"my/specific/url\" will not be handled.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/application-cache-buster-enhanced-concept-94e0c33.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.core.AppCacheBuster.handleURL = function(sURL) {\n  return sURL !== \"my/specific/url\";\n};\n```\n\n----------------------------------------\n\nTITLE: Using Simple Types with Format Options and Constraints in XML\nDESCRIPTION: This XML snippet shows how to use simple data types like `Integer` with format options and constraints in an OpenUI5 view. It utilizes `core:require` to import the type module. The `formatOptions` specify how the value is formatted, while `constraints` define the allowed input values. The example shows an `Input` control bound to a number with minimum integer digits and a maximum value.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/formatting-parsing-and-validating-data-07e4b92.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View \n   xmlns:core=\"sap.ui.core\" \n   xmlns:mvc=\"sap.ui.core.mvc\" \n   core:require=\"{\n      Integer: 'sap/ui/model/type/Integer'\n   }\">\n   ...\n  <Input value=\"{\n      path: '/number',\n      type: 'Integer',\n      formatOptions: {\n          minIntegerDigits: 3\n      },\n          constraints: {\n      maximum: 1000\n      }\n  }\" />\n   ...\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Initializing DetailDetail Controller in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet initializes the DetailDetail controller in an OpenUI5 application. It retrieves the router and model from the owner component, and attaches a handler to the \"detailDetail\" route to trigger the `_onPatternMatch` function when the route is matched.  Dependencies include `sap/ui/core/mvc/Controller`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-using-the-flexible-column-layout-semantic-helper-276f001.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function (Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.DetailDetail\", {\n\t\tonInit: function () {\n\t\t\tthis.oOwnerComponent = this.getOwnerComponent();\n\n\t\t\tthis.oRouter = this.oOwnerComponent.getRouter();\n\t\t\tthis.oModel = this.oOwnerComponent.getModel();\n\n\t\t\tthis.oRouter.getRoute(\"detailDetail\").attachPatternMatched(this._onPatternMatch, this);\n\t\t},\n\n\t\thandleAboutPress: function () {\n\t\t\tvar oNextUIState;\n\t\t\tthis.oOwnerComponent.getHelper().then(function (oHelper) {\n\t\t\t\toNextUIState = oHelper.getNextUIState(3);\n\t\t\t\tthis.oRouter.navTo(\"page2\", {layout: oNextUIState.layout});\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t_onPatternMatch: function (oEvent) {\n\t\t\tthis._supplier = oEvent.getParameter(\"arguments\").supplier || this._supplier || \"0\";\n\t\t\tthis._product = oEvent.getParameter(\"arguments\").product || this._product || \"0\";\n\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: \"/ProductCollectionStats/Filters/1/values/\" + this._supplier,\n\t\t\t\tmodel: \"products\"\n\t\t\t});\n\t\t},\n\n\t\thandleFullScreen: function () {\n\t\t\tvar sNextLayout = this.oModel.getProperty(\"/actionButtonsInfo/endColumn/fullScreen\");\n\t\t\tthis.oRouter.navTo(\"detailDetail\", {layout: sNextLayout, product: this._product, supplier: this._supplier});\n\t\t},\n\n\t\thandleExitFullScreen: function () {\n\t\t\tvar sNextLayout = this.oModel.getProperty(\"/actionButtonsInfo/endColumn/exitFullScreen\");\n\t\t\tthis.oRouter.navTo(\"detailDetail\", {layout: sNextLayout, product: this._product, supplier: this._supplier});\n\t\t},\n\n\t\thandleClose: function () {\n\t\t\tvar sNextLayout = this.oModel.getProperty(\"/actionButtonsInfo/endColumn/closeColumn\");\n\t\t\tthis.oRouter.navTo(\"detail\", {layout: sNextLayout, product: this._product});\n\t\t},\n\n\t\tonExit: function () {\n\t\t\tthis.oRouter.getRoute(\"detailDetail\").detachPatternMatched(this._onPatternMatch, this);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Element Binding with VerticalLayout in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to create a `VerticalLayout` and use `bindElement` in the controller. Text controls are added as content, bound to the respective properties of the `company` object.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst oVerticalLayout = this.byId(\"vLayout\");\noVerticalLayout.bindElement(\"/company\");\noVerticalLayout.addContent(new Text({ text: \"{name}\" }));\noVerticalLayout.addContent(new Text({ text: \"{city}\" }));\noVerticalLayout.addContent(new Text({ text: \"{county}\" }));\n```\n\n----------------------------------------\n\nTITLE: Creating Overview View (XML)\nDESCRIPTION: This snippet creates the `Overview.view.xml` file. It contains the XML structure, required namespaces, and includes the `HelloPanel` and `InvoiceList` views. It reuses the `ui5.walkthrough.controller.App` controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-typescript-6173e3d.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.App\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    displayBlock=\"true\">\n    <Page title=\"{i18n>homePageTitle}\">\n        <content>\n            <mvc:XMLView viewName=\"ui5.walkthrough.view.HelloPanel\" />\n            <mvc:XMLView viewName=\"ui5.walkthrough.view.InvoiceList\" />\n        </content>\n    </Page\n></mvc:View>\n```\n\n----------------------------------------\n\nTITLE: JavaScript List Binding - bindItems Method (OpenUI5)\nDESCRIPTION: This JavaScript snippet showcases the typed binding method `bindItems` to bind a ComboBox. The code binds the ComboBox to the '/companies' path using the provided ListItem template.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/list-binding-aggregation-binding-91f0577.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nvar oComboBox.bindItems(\"/companies\", oItemTemplate);\n```\n\n----------------------------------------\n\nTITLE: Initializing Component with FCL Semantic Helper (JavaScript)\nDESCRIPTION: This code modifies the `Component.js` file to include the `sap.f.FlexibleColumnLayoutSemanticHelper` class. It initializes the component, sets up models, and attaches a `beforeRouteMatched` handler to manage layout changes using the semantic helper. The `getHelper` function is added to provide default `sap.f.FlexibleColumnLayout` parameters.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-using-the-flexible-column-layout-semantic-helper-276f001.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t'sap/ui/core/UIComponent',\n\t'sap/ui/model/json/JSONModel',\n\t'sap/f/FlexibleColumnLayoutSemanticHelper',\n\t'sap/f/library'\n], function(UIComponent, JSONModel, FlexibleColumnLayoutSemanticHelper, fioriLibrary) {\n\t'use strict';\n\n\treturn UIComponent.extend('sap.ui.demo.fcl.Component', {\n\n\t\tmetadata: {\n\t\t\tmanifest: 'json'\n\t\t},\n\n\t\tinit: function () {\n\t\t\tvar oModel,\n\t\t\t\toProductsModel,\n\t\t\t\toRouter;\n\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\toModel = new JSONModel();\n\t\t\tthis.setModel(oModel);\n\n\t\t\t// set products demo model on this sample\n\t\t\toProductsModel = new JSONModel(sap.ui.require.toUrl('sap/ui/demo/mock/products.json'));\n\t\t\toProductsModel.setSizeLimit(1000);\n\t\t\tthis.setModel(oProductsModel, 'products');\n\n\t\t\toRouter = this.getRouter();\n\t\t\toRouter.attachBeforeRouteMatched(this._onBeforeRouteMatched, this);\n\t\t\toRouter.initialize();\n\t\t},\n\n\t\tgetHelper: function () {\n\t\t\treturn this._getFcl().then(function(oFCL) {\n\t\t\t\tvar oSettings = {\n\t\t\t\t\tdefaultTwoColumnLayoutType: fioriLibrary.LayoutType.TwoColumnsMidExpanded,\n\t\t\t\t\tdefaultThreeColumnLayoutType: fioriLibrary.LayoutType.ThreeColumnsMidExpanded\n\t\t\t\t};\n\t\t\t\treturn (FlexibleColumnLayoutSemanticHelper.getInstanceFor(oFCL, oSettings));\n\t\t\t});\n\t\t},\n\n\t\t_onBeforeRouteMatched: function(oEvent) {\n\t\t\tvar oModel = this.getModel(),\n\t\t\t\tsLayout = oEvent.getParameters().arguments.layout,\n\t\t\t\toNextUIState;\n\n\t\t\t// If there is no layout parameter, query for the default level 0 layout (normally OneColumn)\n\t\t\tif (!sLayout) {\n\t\t\t\tthis.getHelper().then(function(oHelper) {\n\t\t\t\t\toNextUIState = oHelper.getNextUIState(0);\n\t\t\t\t\toModel.setProperty(\"/layout\", oNextUIState.layout);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\toModel.setProperty(\"/layout\", sLayout);\n\t\t},\n\n\t\t_getFcl: function () {\n\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\tvar oFCL = this.getRootControl().byId('flexibleColumnLayout');\n\t\t\t\tif (!oFCL) {\n\t\t\t\t\tthis.getRootControl().attachAfterInit(function(oEvent) {\n\t\t\t\t\t\tresolve(oEvent.getSource().byId('flexibleColumnLayout'));\n\t\t\t\t\t}, this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(oFCL);\n\n\t\t\t}.bind(this));\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Product List Item Fragment (XML)\nDESCRIPTION: This XML fragment defines a `sap.m.StandardListItem` to be used when a product is discontinued. It displays a warning icon and a \"Product Discontinued\" message, along with the product name and quantity per unit. The fragment will be cloned and populated in the factory function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-aggregation-binding-using-a-factory-function-284a036.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<core:FragmentDefinition\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\">\n\t<StandardListItem\n\t\tid=\"productSimple\"\n\t\ticon=\"sap-icon://warning\"\n\t\ttitle=\"{products>ProductName} ({products>QuantityPerUnit})\"\n\t\tinfo=\"{i18n>Discontinued}\"\n\t\ttype=\"Active\"\n\t\tinfoState=\"Error\"\n\t\tpress=\".onItemSelected\">\n\t</StandardListItem>\n</core:FragmentDefinition>\n\n```\n\n----------------------------------------\n\nTITLE: Panel Configuration in HelloPanel View (XML)\nDESCRIPTION: This XML snippet configures the `HelloPanel`'s `expandable` and `expanded` properties based on the device model, allowing the panel to collapse on phone devices. It also utilizes CSS classes to hide the dialog button on non-desktop devices.  The device model is bound to `sap.ui.Device` properties.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-35-device-adaptation-d63a15e.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.HelloPanel\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Panel\n\t\theaderText=\"{i18n>helloPanelTitle}\"\n\t\tclass=\"sapUiResponsiveMargin\"\n\t\twidth=\"auto\"\n\t\texpandable=\"{device>/system/phone}\"\n\t\texpanded=\"{= !${device>/system/phone} }\">\n\t\t<content>\n\t\t\t<Button\n\t\t\t\tid=\"helloDialogButton\"\n\t\t\t\ticon=\"sap-icon://world\"\n\t\t\t\ttext=\"{i18n>openDialogButtonText}\"\n\t\t\t\tpress=\".onOpenDialog\"\n\t\t\t\tclass=\"sapUiSmallMarginEnd sapUiVisibleOnlyOnDesktop\"/>\n\t\t\t<Button\n\t\t\t\ttext=\"{i18n>showHelloButtonText}\"\n\t\t\t\tpress=\".onShowHello\"\n\t\t\t\tclass=\"myCustomButton\"/>\n\t\t\t<Input\n\t\t\t\tvalue=\"{/recipient/name}\"\n\t\t\t\tvalueLiveUpdate=\"true\"\n\t\t\t\twidth=\"60%\"/>\n\t\t\t<FormattedText\n\t\t\t\thtmlText=\"Hello {/recipient/name}\"\n\t\t\t\tclass=\"sapUiSmallMargin sapThemeHighlight-asColor myCustomText\"/>\n\t\t</content>\n\t</Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.getModulePath with sap.ui.require.toUrl (Complex)\nDESCRIPTION: This snippet demonstrates how to replace the deprecated `jQuery.sap.getModulePath` with `sap.ui.require.toUrl` in OpenUI5. `sap.ui.require.toUrl` is used to get the URL of a module.  It returns a string representing the URL.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require.toUrl(\"some/path/to/module.js\");\n```\n\n----------------------------------------\n\nTITLE: Adding a Formatter Function in App.controller.js (JavaScript)\nDESCRIPTION: This JavaScript snippet adds a formatter function `formatStockValue` to the `App.controller.js` file. This formatter takes the unit price, stock level, and currency code as input and calculates the total stock value using `sap/ui/model/type/Currency`. It returns the formatted stock value as a string.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-12-aggregation-binding-using-templates-97830de.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/m/library\",\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/model/type/Currency\"\n], (mobileLibrary, Controller, Currency) => {\n\t\"use strict\";\n\n\treturn Controller.extend(\"ui5.databinding.controller.App\", {\n\t\tformatMail(sFirstName, sLastName) {\n\t\t\tconst oBundle = this.getView().getModel(\"i18n\").getResourceBundle();\n\n\t\t\treturn mobileLibrary.URLHelper.normalizeEmail(\n\t\t\t\tsFirstName + \".\" + sLastName + \"@example.com\",\n\t\t\t\toBundle.getText(\"mailSubject\", [sFirstName]),\n\t\t\t\toBundle.getText(\"mailBody\"));\n\t\t},\n\n\t\tformatStockValue(fUnitPrice, iStockLevel, sCurrCode) {\n\t\t\tconst oCurrency = new Currency();\n\n\t\t\treturn oCurrency.formatValue([fUnitPrice * iStockLevel, sCurrCode], \"string\");\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Loading XML View in index.ts\nDESCRIPTION: This JavaScript snippet shows how to load and display an XML view in an OpenUI5 application. It uses the XMLView.create method to instantiate the view, specifying the fully qualified name of the view to load. Then the loaded view is placed in the \"content\" area of the page.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-xml-views-typescript-6c66ed8.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport XMLView from \"sap/ui/core/mvc/XMLView\";\n\nXMLView.create({\n    viewName: \"ui5.walkthrough.view.App\"\n}).then(function (view) {\n    view.placeAt(\"content\");\n});\n```\n\n----------------------------------------\n\nTITLE: Invoice List View XML\nDESCRIPTION: This XML snippet defines the InvoiceList view, which displays a list of invoices. It includes a List control with data binding to the 'invoice>/Invoices' path. The view contains a header toolbar with a title and a search field, and item templates to display invoice details such as quantity, product name, and price. An intentional typo exists in the binding path of the number attribute, 'invoice>ExTendedPrice', to demonstrate a common error.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-29-debugging-tools-1ff250c.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n\n    <List\n        id=\"invoiceList\"\n        headerText=\"{i18n>invoiceListTitle}\"\n        class=\"sapUiResponsiveMargin\"\n        width=\"auto\"\n        items=\"{\n            path : 'invoice>/Invoices',\n            sorter : {\n                path : 'ShipperName',\n                group : true\n            }\n        }\">\n\n        <headerToolbar>\n            <Toolbar>\n                <Title text=\"{i18n>invoiceListTitle}\" />\n                <ToolbarSpacer />\n                <SearchField\n                    width=\"50%\"\n                    search=\".onFilterInvoices\"/>\n            </Toolbar>\n        </headerToolbar>\n        <items>\n            <ObjectListItem\n                core:require=\"{\n                    Currency: 'sap/ui/model/type/Currency'\n                }\"\n                title=\"{invoice>Quantity} x {invoice>ProductName}\"\n                number=\"{\n                    parts: [\n                        'invoice>ExTendedPrice',\n                        'view>/currency'\n                    ],\n                    type: 'Currency',\n                    formatOptions: {\n                        showMeasure: false\n                    }\n                }\"\n                numberUnit=\"{view>/currency}\"\n                numberState=\"{= ${invoice>ExtendedPrice} > 50 ? 'Error' : 'Success' }\">\n                <firstStatus>\n                    <ObjectStatus\n                        core:require=\"{\n                            Formatter: 'ui5/walkthrough/model/formatter'\n                        }\"\n                        text=\"{\n                            path: 'invoice>Status',\n                            formatter: 'Formatter.statusText.bind($controller)'\n                        }\"/>\n                </firstStatus>\n            </ObjectListItem>\n        </items>\n    </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Component Container Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to instantiate a `ComponentContainer` to wrap and embed an OpenUI5 component within an HTML page. It sets the component name, ID, and enables asynchronous loading for improved performance. The `placeAt` method is used to position the container in the HTML element with the ID `content`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-component-configuration-typescript-f9d0e2f.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport ComponentContainer from \"sap/ui/core/ComponentContainer\";\n\nnew ComponentContainer({\n    id: \"container\",\n    name: \"ui5.walkthrough\",\n    settings: {\n        id: \"walkthrough\"\n    },\n    autoPrefixId: true,\n    async: true\n}).placeAt(\"content\");\n```\n\n----------------------------------------\n\nTITLE: Integrating Item Navigation - onAfterRendering - JavaScript\nDESCRIPTION: This code snippet demonstrates how to integrate item navigation in the `onAfterRendering` hook of a UI5 control (sap.ui.commons.ListBox). It collects DOM references of the items, initializes the `ItemNavigation` delegate (if not already initialized), sets the root DOM reference, sets the item DOM references, disables cycling, sets the selected index, and sets the page size. The `oFocusRef` variable refers to the DOM reference of the control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/integrating-item-navigation-7e24524.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.commons.ListBox.prototype.onAfterRendering = function () {\n        //Collect the dom references of the items\n        var oFocusRef = this.getDomRef(),\n                 aRows = oFocusRef.getElementsByTagName(\"TR\"),\n                 aDomRefs = [];\n        for (var i=0;i<aRows.length;i++) {\n                 aDomRefs.push(aRows[i].firstChild);\n        }\n        //initialize the delegate and apply it to the control (only once)\n         if (!this.oItemNavigation) {\n                  this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();\n                  this.addDelegate(this.oItemNavigation);\n        }\n\n       // After each rendering the delegate needs to be initialized as well.\n\n       //set the root dom node that surrounds the items\n         this.oItemNavigation.setRootDomRef(oFocusRef);\n\n       //set the array of dom nodes representing the items.\n         this.oItemNavigation.setItemDomRefs(aDomRefs);\n\n       //turn of the cycling\n        this.oItemNavigation.setCycling(false);\n\n       //set the selected index\n        this.oItemNavigation.setSelectedIndex(this.getSelectedIndex());\n\n      //set the page size\n       this.oItemNavigation.setPageSize(this.getVisibleItems()); };\n```\n\n----------------------------------------\n\nTITLE: Adding ARIA Label Association to Controls in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to add an `ariaLabelledBy` association to a control in OpenUI5. This association allows the control to be labeled by other controls, improving accessibility when a single label is used for multiple fields. The `type` specifies the type of control that can be used as a label, `multiple` allows multiple labels, and `singularName` defines the name used for a single label.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/best-practices-for-aria-labeling-3169195.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nariaLabelledBy : {\n\ntype : \"sap.ui.core.Control\",\n\nmultiple : true,\n\nsingularName : \"ariaLabelledBy\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting headerContent in Detail.view.xml (XML)\nDESCRIPTION: This XML snippet modifies the `headerContent` of the `ObjectPageLayout` to display the product's image, main category, subcategory, and price.  It leverages data binding using the `products` model to populate the `sap.m.Avatar`, `sap.m.Text`, and `sap.m.ObjectNumber` controls. Requires the `sap.m` and `sap.f` namespaces.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-enhancing-the-detail-page-e5ee491.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\t\t...\n\t\t<headerContent>\n\t\t\t<m:FlexBox wrap=\"Wrap\" fitContainer=\"true\" alignItems=\"Stretch\">\n\t\t\t\t<m:Avatar\n\t\t\t\t\tsrc=\"https://ui5.sap.com/{products>ProductPicUrl}\"\n\t\t\t\t\tdisplaySize=\"L\"\n\t\t\t\t\tdisplayShape=\"Square\"\n\t\t\t\t\tclass=\"sapUiTinyMarginEnd\">\n\t\t\t\t</m:Avatar>\n\t\t\t\t<m:VBox justifyContent=\"Center\" class=\"sapUiSmallMarginEnd\">\n\t\t\t\t\t<m:Label text=\"Main Category\"/>\n\t\t\t\t\t<m:Text text=\"{products>MainCategory}\"/>\n\t\t\t\t</m:VBox>\n\t\t\t\t<m:VBox justifyContent=\"Center\" class=\"sapUiSmallMarginEnd\">\n\t\t\t\t\t<m:Label text=\"Subcategory\"/>\n\t\t\t\t\t<m:Text text=\"{products>Category}\"/>\n\t\t\t\t</m:VBox>\n\t\t\t\t<m:VBox justifyContent=\"Center\" class=\"sapUiSmallMarginEnd\">\n\t\t\t\t\t<m:Label text=\"Price\"/>\n\t\t\t\t\t<m:ObjectNumber number=\"{products>CurrencyCode} {products>Price}\" emphasized=\"false\"/>\n\t\t\t\t</m:VBox>\n\t\t\t</m:FlexBox>\n\t\t</headerContent>\n\t\t...\n\n```\n\n----------------------------------------\n\nTITLE: Instance-Specific Custom Unit with Decimals - JavaScript\nDESCRIPTION: This snippet shows how to define a custom unit with the `decimals` format option, but specifically for a single `NumberFormat` instance. This is done by passing the `customUnits` option to the `NumberFormat.getUnitInstance` method. Like the global configuration, the `decimals` option affects the number of decimal places displayed when formatting the unit.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/unit-formatting-8e618a8.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/format/NumberFormat\"], function(NumberFormat) {\n    // define a new unit called Lux\n    var oFormat = NumberFormat.getUnitInstance({\n        customUnits: {\n            \"lux\": {\n                 \"displayName\": \"Lux\",\n                 \"unitPattern-count-one\": \"{0} lx\",\n                 \"unitPattern-count-other\": \"{0} lx\",\n                 \"decimals\": 2\n            }\n        }\n    });\n \n    var oUnitFormat = NumberFormat.getUnitInstance({style:\"long\"});\n \n    console.log(oUnitFormat.format(2.4, \"lux\")); // 2,40 lux (notice the padded 0 after the 4, this is due to the decimals option)\n});\n```\n\n----------------------------------------\n\nTITLE: Define App Descriptor in manifest.json\nDESCRIPTION: This manifest.json file defines the application descriptor for the OpenUI5 application. It contains metadata about the application, such as the version and the application ID. This file is used by OpenUI5 to configure and manage the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-ready-851bde4.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_version\": \"1.58.0\",\n  \"sap.app\": {\n    \"id\": \"ui5.quickstart\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complex Syntax for Calculated Fields - XML\nDESCRIPTION: This XML snippet shows how to mix text with calculated fields. The 'text' property of a Label control is bound to a combination of static text and the 'firstName' and 'lastName' properties, using a formatter function '.myFormatter'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/composite-binding-a2fe8e7.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Label text=\"Hello Mr. {path: '/singleEntry/firstName', formatter: '.myFormatter'}, {/singleEntry/lastName}\"/>\n```\n\n----------------------------------------\n\nTITLE: XML Button with Multiple Parameters\nDESCRIPTION: This snippet demonstrates how to pass multiple parameters of different JavaScript literal types (string, number, object, and array) to the `.doSomething` function in the controller when the button is pressed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-events-in-xml-views-b0fb4de.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Press Me\" press=\".doSomething('string', 0, 5.5, {key1: 'value1', key2: 'value2'}, ['value1', 'value2'])\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Build Script in package.json for UI5 Tooling\nDESCRIPTION: This JSON snippet defines the \"build\" script within the package.json file. The script uses the UI5 Tooling to build the application, including framework dependencies, and cleans the destination directory before building. It relies on @ui5/cli for the UI5 Tooling functionalities.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-38-build-your-application-ae1be8c.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"ui5.walkthrough\",\n  \"version\": \"1.0.0\",\n  \"description\": \"The UI5 walkthrough application\",\n  \"scripts\": {\n      \"start\": \"ui5 serve -o test/mockServer.html\",\n      \"build\": \"ui5 build --all --clean-dest\"\n  },\n  \"devDependencies\": {\n    \"@ui5/cli\": \"^3\",\n    \"ui5-middleware-simpleproxy\": \"^3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Trigger Email Application using URLHelper (JavaScript)\nDESCRIPTION: This code snippet illustrates how to use the `triggerEmail` method of the `sap.m.URLHelper` to trigger the native email application on a mobile device.  All parameters (Destination Email, Subject, Default Message Text, CC, BCC) are optional.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/url-helper-4f1c107.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.m.URLHelper.triggerEmail( [Destination Email], [Subject], [Default Message Text], [CC], [BCC] ); \n// All parameters are optional\n```\n\n----------------------------------------\n\nTITLE: Accessing Data with getProperty() in OData Model (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to retrieve data from an OData model using the `getProperty()` method. It accesses the Address property of a specific Customer entity. The method retrieves data from the client-side cache, without making a request to the backend service.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\noModel.getProperty(\"/Customer('ALFKI')/Address\");\n```\n\n----------------------------------------\n\nTITLE: Modify Object Controller to handle comments - OpenUI5 JavaScript\nDESCRIPTION: This code extends the object controller to handle the posting of comments. It adds a dependency for date formatting and implements the onPost function to add new comments to the productFeedback model.  Additionally, it modifies the _onBindingChange function to filter comments based on the current product ID.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-adding-a-comments-section-c73dfe3.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n...\n/*global location*/\nsap.ui.define([\n   \"myCompany/myApp/controller/BaseController\",\n   \"sap/ui/model/json/JSONModel\",\n   \"sap/ui/core/routing/History\",\n   \"myCompany/myApp/model/formatter\",\n   \"sap/ui/core/date/UI5Date\",\n   \"sap/ui/core/format/DateFormat\",\n   \"sap/ui/model/Filter\",\n   \"sap/ui/model/FilterOperator\"\n], function(BaseController, JSONModel, History, formatter, UI5Date, DateFormat, Filter, FilterOperator) {\n   \"use strict\";\n   return BaseController.extend(\"myCompany.myApp.controller.Object\", {\n      formatter: formatter,\n      ...\n      _onBindingChange: function(oEvent) {\n         ...\n         // Update the comments in the list\n         var oList = this.byId(\"idCommentsList\");\n         var oBinding = oList.getBinding(\"items\");\n         oBinding.filter(new Filter(\"productID\", FilterOperator.EQ, sObjectId));\n      },\n      /**\n      * Updates the model with the user comments on Products.\n      * @function\n      * @param {sap.ui.base.Event} oEvent object of the user input\n      */\n      onPost: function (oEvent) {\n         var oFormat = DateFormat.getDateTimeInstance({style: \"medium\"});\n         var sDate = oFormat.format(UI5Date.getInstance());\n         var oObject = this.getView().getBindingContext().getObject();\n         var sValue = oEvent.getParameter(\"value\");\n         var oEntry = {\n             productID: oObject.ProductID,\n             type: \"Comment\",\n             date: sDate,\n             comment: sValue\n         };        \n         // update model\n         var oFeedbackModel = this.getModel(\"productFeedback\");\n         var aEntries = oFeedbackModel.getData().productComments;\n         aEntries.push(oEntry);\n         oFeedbackModel.setData({\n            productComments : aEntries\n         });\n      }\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Extending PostJourney.js for Icon Tab Bar Testing (OPA)\nDESCRIPTION: This code snippet extends the PostJourney.js file to include a new OPA test for selecting a specific tab in an icon tab bar and verifying that the correct content is displayed. It relies on the Worklist, Browser, and Post page objects defined in other files. The `iTeardownMyApp()` is moved to the end of all tests to ensure the application remains available.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-13-testing-user-interaction-19ccd47.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/test/opaQunit\",\n\t\"./pages/Worklist\",\n\t\"./pages/Browser\",\n\t\"./pages/Post\"\n], function (opaTest) {\n\t\"use strict\";\n\n\t// …\n\n\topaTest(\"Should be on the post page again when the browser's forward button is pressed\", function (Given, When, Then) {\n\t\t// Actions\n\t\t\tWhen.onTheBrowser.iPressOnTheForwardButton();\n\n\t\t// Assertions\n\t\tThen.onThePostPage.theTitleShouldDisplayTheName(\"Jeans\");\n\t});\n\n\topaTest(\"Should select the statistics tab\", function (Given, When, Then) {\n\t\t// Actions\n\t\tWhen.onThePostPage.iPressOnTheTabWithTheKey(\"statistics\");\n\t\t// Assertions\n\t\tThen.onThePostPage.iShouldSeeTheViewCounter()\n\t\t\t.and.iTeardownMyApp();\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Routing Targets in OpenUI5 with JavaScript\nDESCRIPTION: This code snippet demonstrates how to add a dynamic routing target to an OpenUI5 router using the addTarget method.  It configures the target with properties such as name, type (Component), controlId, and controlAggregation.  The target is added to the router's targets using a unique key (myDynamicTarget).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/navigate-with-dynamic-targets-856d6c6.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oTargetOptions = {\n    name: \"DynamicTargetComponent\",\n    type: \"Component\",\n    controlId: ...,\n    controlAggregation: ...,\n    id: ...,\n    ...\n};\noRouter.getTargets().addTarget(\"myDynamicTarget\", oTargetOptions);\n```\n\n----------------------------------------\n\nTITLE: Formatter Unit Test\nDESCRIPTION: This TypeScript code defines a QUnit module and a test case to verify the functionality of the statusText formatter. It mocks the ResourceModel and Controller to isolate the formatter and asserts the correct translation for different status values. The formatter function is tested by comparing its output with hardcoded expected strings for different input values.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-27-unit-test-with-qunit-typescript-750c8c1.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport formatter from \"ui5/walkthrough/model/formatter\";\n\nQUnit.module(\"Formatting function\", {});\n\nQUnit.test(\"Should return the translated texts\", (assert) => {\n    const resourceModel = new ResourceModel({\n        bundleUrl: sap.ui.require.toUrl(\"ui5/walkthrough/i18n/i18n.properties\"),\n        supportedLocales: [\n            \"\"\n        ],\n        fallbackLocale: \"\"\n    });\n\n    const controllerMock = {\n        getOwnerComponent() {\n            return {\n                getModel() {\n                    return resourceModel;\n                }\n            };\n        }\n    } as any as Controller;\n\n    // System under test\n    const fnIsolatedFormatter = formatter.statusText.bind(controllerMock);\n\n    // Assert\n    assert.strictEqual(fnIsolatedFormatter(\"A\"), \"New\", \"The long text for status A is correct\");\n    assert.strictEqual(fnIsolatedFormatter(\"B\"), \"In Progress\", \"The long text for status B is correct\");\n    assert.strictEqual(fnIsolatedFormatter(\"C\"), \"Done\", \"The long text for status C is correct\");\n    assert.strictEqual(fnIsolatedFormatter(\"Foo\"), \"Foo\", \"The long text for status Foo is correct\");\n});\n```\n\n----------------------------------------\n\nTITLE: Formatter Function Usage in XML Template View (AH.getNavigationPath)\nDESCRIPTION: This code snippet demonstrates how to use the `getNavigationPath` formatter function of the `AnnotationHelper` within an XML template view in SAPUI5.  The `getNavigationPath` function extracts a data binding expression for the navigation path from an annotation. It requires the `sap.ui.model.odata.AnnotationHelper` to be available via template:require.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/annotation-helper-dbec058.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n        xmlns=\"sap.m\"\n        xmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\"\n        template:require=\"{AH: 'sap/ui/model/odata/AnnotationHelper'}\">\n        ...\n        <template:if test=\"{path: 'facet>Target', formatter: 'AH.getNavigationPath'}\">\n            <form:SimpleForm binding=\"{path: 'facet>Target', formatter: 'AH.getNavigationPath'}\" />\n        </template:if>\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Sales Orders (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates creating a sales order, adding items, deleting items, saving, and canceling. It uses OData V4 bindings to interact with the backend. The `createNewSalesOrder` function creates a new sales order, `addItem` adds a new item to the nested collection, `deleteItem` deletes a selected item, `save` submits the changes, and `cancel` deletes the sales order.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-an-entity-in-a-collection-c9723f8.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n   createNewSalesOrder : function () {\n       var oSalesOrderBinding = this.getView().getModel().bindList(\"/SalesOrderList\");\n       this.oNewSalesOrderContext = oSalesOrderBinding.create();\n       this.oNewSalesOrderContext.created().then(function () {\n           // successfully created\n       }, function () {\n           // creation canceled (if the request failed, it will be\n           // automatically queued again)\n       };\n       this.byId(\"form\").setBindingContext(this.oNewSalesOrderContext);\n   },\n   addItem : function () {\n       oNewItemContext = this.byId(\"items\").getBinding(\"items\").create();\n   },\n   deleteItem : function () {\n       this.byId(\"items\").getSelectedItem().getBindingContext().delete();\n   },\n   save : function () {\n       var oModel = this.getView().getModel();\n       oModel.submitBatch(oModel.getUpdateGroupId());\n   },\n   cancel : function () {\n         this.oNewSalesOrderContext.delete();\n        // alternatively\n        // oModel.resetChanges(oModel.getUpdateGroupId());\n   }\n```\n\n----------------------------------------\n\nTITLE: Defining XML View with Templating - XML\nDESCRIPTION: This XML view defines the structure of the UI using SAPUI5 controls and XML templating. It utilizes the template:alias and template:with tags to work with OData annotations, displaying information based on the meta model. The view also includes XML fragments for reusable code.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-templating-5ee619f.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n1  <mvc:View\n2      xmlns=\"sap.m\"\n3      xmlns:core=\"sap.ui.core\"\n4      xmlns:form=\"sap.ui.layout.form\"\n5      xmlns:mvc=\"sap.ui.core.mvc\"\n6      xmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\">\n7   \n8      <!-- \"meta\" model's binding context MUST point to an entity type -->\n9      <template:alias name=\".AH\" value=\"sap.ui.model.odata.AnnotationHelper\">\n10         <template:with path=\"meta>com.sap.vocabularies.UI.v1.Badge\" var=\"badge\">\n11             <form:SimpleForm layout=\"ResponsiveGridLayout\">\n12                 <form:title>\n13                     <core:Title text=\"{path: 'badge>HeadLine', formatter: '.AH.format'}\"/>\n14                 </form:title>\n15   \n16                 <Label text=\"{path: 'badge>Title/Label', formatter: '.AH.format'}\"/>\n17                 <Text text=\"{path: 'badge>Title/Value', formatter: '.AH.format'}\"/>\n18   \n19                 <Label text=\"{path: 'badge>MainInfo/Label', formatter: '.AH.format'}\"/>\n20                 <template:with path=\"badge>MainInfo\" var=\"field\">\n21                     <core:Fragment fragmentName=\"sap.ui.core.sample.ViewTemplate.tiny.Field\" type=\"XML\"/>\n22                 </template:with>\n23   \n24                 <Label text=\"{path: 'badge>SecondaryInfo/Label', formatter: '.AH.format'}\"/>\n25                 <template:with path=\"badge>SecondaryInfo\" var=\"field\">\n26                     <core:Fragment fragmentName=\"sap.ui.core.sample.ViewTemplate.tiny.Field\" type=\"XML\"/>\n27                 </template:with>\n28             </form:SimpleForm>\n29         </template:with>\n30      </template:alias>\n31 </mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Creating Table Rows with Columns - OpenUI5 (XML View)\nDESCRIPTION: This code snippet demonstrates how to create table rows using ColumnListItems and populate them with data in an OpenUI5 table. It defines how to bind data to cells within each row using ObjectIdentifier and Text controls and shows how to define cells corresponding to the column definitions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/creating-tables-5eb6f63.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Table>\n        <columns>\n          <Column\n            width=\"12em\">\n            <Text text=\"Product\" />\n          </Column>\n           <Column\n            minScreenWidth=\"Tablet\"\n            demandPopin=\"true\">\n            <Text text=\"Supplier\" />\n          </Column>\n        </columns>\n    \n    \n    <items>\n          <ColumnListItem>\n            <cells>\n              <ObjectIdentifier\n                title=\"{Name}\"\n                text=\"{ProductId}\"\n                class=\"sapUiTinyMarginTopBottom\" />\n              <Text\n                text=\"{SupplierName}\" />\n            </cells>\n          </ColumnListItem>\n        </items>\n      </Table>\n```\n\n----------------------------------------\n\nTITLE: Creating Typed View with Data Binding - OpenUI5\nDESCRIPTION: This JavaScript code demonstrates how to create a typed view in OpenUI5 using `sap.ui.define`. It extends `sap.ui.core.mvc.View` and defines the `createContent` method to build the view's UI elements programmatically. The view includes data binding examples with formatters, tables, and labels, dynamically generated using the imported UI5 modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/examples-for-data-binding-in-different-view-types-25ab54b.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n    \"my/globalFormatter\",\n    \"sap/ui/core/mvc/View\",\n    \"sap/ui/model/type/Float\",\n    \"sap/m/Table\",\n    \"sap/m/Column\",\n    \"sap/m/ColumnListItem\",\n    \"sap/m/Label\",\n    \"sap/m/Text\"\n    ], function(globalFormatter, View, Float, Table, Column, ColumnListItem, Label, Text) {\n    return View.extend(\"testdata.complexsyntax\", {\n      \n        getControllerName() {\n            return \"testdata.complexsyntax\";\n        },\n        getAutoPrefixId() {\n            return true;\n        },\n        createContent(oController) {\n            const oLabelWelcome = new Label({ \n                text: \"Hello Mr. {/employees/0/lastName}, {path: '/employees/0/firstName', formatter: '.myFormatter'}\"\n            }, oController);\n            const oLabelName = new Label({text: \"Name\"});\n            const oLabelBirthday = new Label({text: \"Birthday\"});\n            const oColumnName = new Column({header: oLabelName});\n            const oColumnBirthday = new Column({header: oLabelBirthday});\n            const oTextName = new Text({\n                text: \"{path: 'gender', formatter: '.myGenderFormatter'} {firstName} {lastName}\"\n            }, oController);\n            const oTextBirthday = new Text({\n                text: \"{parts: [{ path: 'birthday/day'}, {path: 'birthday/month'}, {path: 'birthday/year' }], formatter: 'globalFormatter'}\"\n            }, oController);\n            const oColumnListItemTemplate = new ColumnListItem({cells: [oTextName, oTextBirthday]});\n            const oTable = new Table({ \n                columns: [\n                    oColumnName,\n                    oColumnBirthday\n                ],\n                items: {\n                    path: \"/employees\",\n                    template: oColumnListItemTemplate,\n                    templateShareable: false\n                }\n            });\n            \n            const oLabelAmount = new Label({text: {path: '/statistics/amount', type: 'Float'}});\n            \n            return [oLabelWelcome, oTable, oLabelAmount];\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onPress Handler in Worklist.controller.js (SAPUI5)\nDESCRIPTION: This code snippet shows the implementation of the `onPress` event handler in `Worklist.controller.js`.  It retrieves the `PostID` from the binding context of the selected item and uses it to navigate to the `post` route, populating the mandatory `postId` URL parameter.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-adding-the-post-page-4a9f063.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n    './BaseController',\n    'sap/ui/model/json/JSONModel',\n    '../model/formatter',\n    '../model/FlaggedType',\n    'sap/m/library'\n], function(BaseController, JSONModel, formatter, FlaggedType, mobileLibrary) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"sap.ui.demo.bulletinboard.controller.Worklist\", {\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\t\n\t\t\n\t\t/**\n\t\t * Event handler when a table item gets pressed\n\t\t * @param {sap.ui.base.Event} oEvent the table selectionChange event\n\t\t * @public\n\t\t */\n\t\tonPress: function (oEvent) {\n\t\t\tthis.getRouter().navTo(\"post\", {\n\t\t\t\t// The source is the list item that got pressed\n\t\t\t\tpostId: oEvent.getSource().getBindingContext().getProperty(\"PostID\")\n\t\t\t});\n\n\t  });\n});\n```\n\n----------------------------------------\n\nTITLE: XML View: Binding List Items\nDESCRIPTION: Example of binding a List control's items to the Goals model. This shows how to bind a collection of items using the {Goals>} syntax, enabling the display of a list of goals.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-blocks-4527729.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<List items=\"{Goals>}\">\n```\n\n----------------------------------------\n\nTITLE: Custom OpenUI5 View Definition\nDESCRIPTION: This XML snippet defines a custom OpenUI5 view, intended to replace the standard view 'Sub1'. It also contains a TextView with custom text. It uses the sap.m library for the TextView and sap.ui.core.mvc for the view definition.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-replacement-98861cf.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\">\n    <TextView text=\"Custom View 'Sub1' - this one replaces the original SAP View 'Sub1'\"></TextView>    \n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Extending Controller with \"extend\" syntax in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to define a typed controller using the `extend` syntax in OpenUI5. It defines lifecycle methods (onInit, onBeforeRendering, onAfterRendering, onExit) and a custom event handler (myEventHandler). The controller extends `sap.ui.core.mvc.Controller` and provides a basic structure for controller logic.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/controller-replacement-b0b14bf.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n    \"use strict\";\n \n    return Controller.extend(\"samples.components.ext.customer.CustomMain\", {\n        onInit: function() { /* do something */ },\n        onBeforeRendering: function() { /* do something */ },\n        onAfterRendering: function() { /* do something */ },\n        onExit: function() { /* do something */ },\n        myEventHandler: function(oEvent) { /* do something */ }\n    });\n \n});\n```\n\n----------------------------------------\n\nTITLE: Binding Data in List Binding - JavaScript\nDESCRIPTION: This code snippet illustrates how to use custom data in a list binding scenario. It creates a `JSONModel`, binds it to a `List` control, and uses `CustomData` to attach data to each list item. When an item is selected, the `giveAnswer` function retrieves the custom data associated with the item.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/custom-data-attaching-data-objects-to-controls-91f0c3e.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// \"CustomData\" required from \"sap/ui/core/CustomData\"\n// \"JSONModel\" required from module \"sap/ui/model/json/JSONModel\"\n// \"List\" required from module \"sap/m/List\"\n// \"StandardListItem\" required from module \"sap/m/StandardListItem\"\n\nfunction giveAnswer(oEvent) {\n  var oItem = oEvent.getSource();      // the StandardListItem\n  var sData = oItem.data(\"theAnswer\"); // access the custom data stored under the key \"theAnswer\"\n  alert(\"The answer is: \" + sData);\n}\n\n// create a JSONModel, fill in the data and bind the ListBox to this model\nvar oModel = new JSONModel(aData);         // aData.questions is an array of elements like {question:\"Some question?\",answer:\"Some answer!\"}\nvar oList = new List({select:giveAnswer}); // method giveAnswer() retrieves the custom data from the selected ListItem\noList.setModel(oModel);\n\n// create an item template and bind the question data to the \"text\" property\nvar oItemTemplate = new StandardListItem({title: \"{question}\", press: giveAnswer, type: \"Active\"});\n\n// create a CustomData template, set its key to \"answer\" and bind its value to the answer data\nvar oDataTemplate = new CustomData({key:\"theAnswer\", value: \"{answer}\"});\n\n// add the CustomData template to the item template\noItemTemplate.addCustomData(oDataTemplate);\n\n// bind the items to the \"questions\" (which is the name of the data array)\noList.bindAggregation(\"items\", \"/questions\", oItemTemplate);\n```\n\n----------------------------------------\n\nTITLE: Styling with Custom Class (Good)\nDESCRIPTION: This CSS snippet demonstrates the correct way to style elements by using CSS classes. Adding a custom class to the element and then defining the style for that class improves the maintainability and reduces the risk of style clashes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/css-styling-issues-9d87f92.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.myEmphasizedButton {\n\tfont-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Drag-and-Drop Behavior with Metadata in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to define drag-and-drop behavior for a custom control and its aggregations using the `dnd` key in the control's metadata. It sets the `draggable` and `droppable` properties, along with the `layout` and `selector` for specific aggregations. This enables drag-and-drop functionality for the control and its items.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/drag-and-drop-metadata-da7f3fc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nControl.extend('my.CustomControl', {\n      metadata : {\n          properties : {\n              value : { type : 'string' },\n              width : { type : 'sap.ui.core.CSSSize', defaultValue : 'auto' }\n          },\n          dnd : { draggable: false, droppable: true },\n          aggregations : {\n              header : { type : \"sap.ui.core.Control\", multiple : false, dnd : true },\n              items : { type: 'sap.ui.core.Control', multiple : true, selector : \"#{id}-items\", dnd : {\n                       draggable: true, dropppable: true, layout: \"Horizontal\"\n              } },\n          }\n     }\n\n```\n\n----------------------------------------\n\nTITLE: JavaScript List Binding - unbindAggregation with keepItems (OpenUI5)\nDESCRIPTION: This JavaScript snippet shows how to remove a list binding using `unbindAggregation` and keep the bound items in the control by setting the second parameter to true. This prevents the destruction of the aggregated controls.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/list-binding-aggregation-binding-91f0577.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\noComboBox.unbindAggregation(\"items\", true);\n```\n\n----------------------------------------\n\nTITLE: Filtering Measurements by Duration - OpenUI5 - JavaScript\nDESCRIPTION: This code snippet filters measurements based on their duration. The `filterMeasurements` method is used with a callback function that checks if the `duration` property of each measurement is greater than a specified value (500ms in this case). This allows filtering for measurements that took longer than the defined threshold.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/performance-measurement-using-sap-ui-performance-measurement-module-78880c0.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Filter for duration > 500ms\nMeasurement.filterMeasurements(function(oMeasurement) {\n    return oMeasurement.duration > 500;\n});\n```\n\n----------------------------------------\n\nTITLE: Limiting Istanbul instrumentation to multiple files via JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to limit Istanbul instrumentation to multiple files dynamically. Similar to limiting to a single file, it sets the `data-sap-ui-cover-only` attribute with an array of file paths.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oScript = document.querySelector('script[src$=\"qunit/qunit-coverage-istanbul.js\"]');\nif (oScript) {\n    oScript.setAttribute(\"data-sap-ui-cover-only\", \"['sap/ui/core/Popup.js', 'sap/ui/core/EventProvider']\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductRating control in OpenUI5 (TypeScript)\nDESCRIPTION: This code initializes the ProductRating control in the init function. It creates instances of sap.m.RatingIndicator, sap.m.Label, and sap.m.Button, and adds them to the internal aggregations (_rating, _label, _button) using the setAggregation method. Event handlers are bound to the rating indicator's liveChange event (_onRate) and the button's press event (_onSubmit).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n\tinit(): void {\n\t\tthis.setAggregation(\"_rating\", new RatingIndicator({\n\t\t\tvalue: this.getValue(),\n\t\t\ticonSize: \"2rem\",\n\t\t\tliveChange: this._onRate.bind(this)\n\t\t}));\n\t\tthis.setAggregation(\"_label\", new Label({\n\t\t\ttext: \"{i18n>productRatingLabelInitial}\"\n\t\t}).addStyleClass(\"sapUiSmallMargin\"));\n\t\tthis.setAggregation(\"_button\", new Button({\n\t\t\ttext: \"{i18n>productRatingButton}\",\n\t\t\tpress: this._onSubmit.bind(this)\n\t\t}).addStyleClass(\"sapUiTinyMarginTopBottom\"));\n\t}\n```\n\n----------------------------------------\n\nTITLE: Setting OpenUI5 Theme Programmatically with Theming API\nDESCRIPTION: This code snippet shows how to programmatically set the OpenUI5 theme using the `Theming.setTheme` method. This method requires the `sap/ui/core/Theming` module to be imported.  The code demonstrates setting the theme to `sap_horizon_hcb`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/colors-and-theming-086c41c.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Theming\" required from module \"sap/ui/core/Theming\"\nTheming.setTheme(\"sap_horizon_hcb\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Mock Server (TypeScript)\nDESCRIPTION: Initializes the mock server to simulate OData requests to the Northwind service.  It creates a MockServer instance, configures it with a delay and automatic response, and simulates the service by reading metadata and mock data from the local file system. The `rootUri` should point to the same URL as defined in the `manifest.json` descriptor file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-26-mock-server-configuration-typescript-3e1c64f.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport MockServer from \"sap/ui/core/util/MockServer\";\n\t\t\t\t\nexport default {\n\n    init: function () {\n        // create\n        const mockServer = new MockServer({\n            rootUri: sap.ui.require.toUrl(\"ui5/walkthrough/V2/Northwind/Northwind.svc/\")\n        });\n\n        const urlParams = new URLSearchParams(window.location.search);\n\n        // configure mock server with a delay\n        MockServer.config({\n            autoRespond: true,\n            autoRespondAfter: parseInt(urlParams.get(\"serverDelay\") || \"500\")\n        });\n\n        // simulate\n        const path = sap.ui.require.toUrl(\"ui5/walkthrough/localService\");\n        mockServer.simulate(path + \"/metadata.xml\", path + \"/mockdata\");\n\n        // start\n        mockServer.start();\n    }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using isA for Type Checks in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to use the `isA` method for type checks in OpenUI5 when dealing with dynamically required modules.  It leverages both `oControl.isA` and `Object.isA` to check the control's type without requiring the modules to be loaded beforehand.  This approach is beneficial when dealing with descendants of `sap.ui.base.Object`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/loading-a-module-d12024e.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define(['sap/ui/base/Object'], function(Object) {\n    ...\n    if (oControl.isA('sap.ui.core.mvc.View')) {\n        ...\n    } else if (Object.isA(oControl, ['sap.ui.core.Fragement', 'sap.ui.core.Control'])) {\n        ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Operation Mode as Binding Parameter - JavaScript\nDESCRIPTION: This snippet demonstrates how to set the operation mode as a binding parameter for a specific OData list binding within a SAPUI5 XML view. It includes static filtering with the `$filter` system query option and selection of specific properties using the `$select` option. The `$$operationMode` parameter is set to \"Server\" for server-side processing.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/filtering-5338bd1.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<Table growing=\"true\" growingThreshold=\"5\" id=\"Equipments\"\n    items=\"{\n            path : '/Equipments',\n            parameters : {\n                $$operationMode : 'Server',\n                $filter : 'Category eq \\'Electronics\\'',\n                $select : 'Category,EmployeeId,ID,Name'\n            }\n        }\">\n```\n\n----------------------------------------\n\nTITLE: Defining Item Press Event in XML View (XML)\nDESCRIPTION: This XML snippet defines an `ObjectListItem` within a `List` control in the `InvoiceList.view.xml`. The `type` attribute is set to `Navigation` to make the list item clickable. The `press` attribute is bound to the `.onPress` event handler defined in the corresponding controller. This triggers the navigation to the detail page when the list item is clicked.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-typescript-6173e3d.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    ...\n        <items>\n            <ObjectListItem\n                core:require=\"{\n                    Currency: 'sap/ui/model/type/Currency'\n                }\"\n                title=\"{invoice>Quantity} x {invoice>ProductName}\"\n                number=\"{\n                    parts: [\n                        'invoice>ExtendedPrice',\n                        'view>/currency'\n                    ],\n                    type: 'Currency',\n                    formatOptions: {\n                        showMeasure: false\n                    }\n                }\"\n                numberUnit=\"{view>/currency}\"\n                numberState=\"{= ${invoice>ExtendedPrice} > 50 ? 'Error' : 'Success' }\"\n                type=\"Navigation\"\n                press=\".onPress\" >\n                <firstStatus>\n                    <ObjectStatus\n                        core:require=\"{\n                            Formatter: 'ui5/walkthrough/model/formatter'\n                        }\"\n                        text=\"{\n                            path: 'invoice>Status',\n                            formatter: 'Formatter.statusText.bind($controller)'\n                        }\"/>\n                </firstStatus>\n            </ObjectListItem>\n        </items>\n    </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Accessing Translatable Text in Event Handler (TypeScript)\nDESCRIPTION: This snippet shows how to access the translatable text from the i18n resource bundle in the `onShowHello` event handler.  It retrieves the 'helloMsg' text, replaces the placeholder with the recipient's name, and displays the message using `MessageToast`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-translatable-texts-typescript-4dcf52e.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n   onShowHello(): void {\n      // read msg from i18n model\n      const recipient = (this.getView()?.getModel() as JSONModel)?.getProperty(\"/recipient/name\");\n      const resourceBundle = (this.getView()?.getModel(\"i18n\") as ResourceModel)?.getResourceBundle() as ResourceBundle;\n      const msg = resourceBundle.getText(\"helloMsg\", [recipient]) || \"no text defined\";\n      // show message\n      MessageToast.show(msg);\n   }\n```\n\n----------------------------------------\n\nTITLE: Defining Input with Data Binding - XML\nDESCRIPTION: This XML snippet defines an `sap.m.Input` control and binds its `value` and `description` properties to the JSON model. The `value` is bound to `/recipient/name`, and the `description` is dynamically updated with the same value using the curly bracket syntax. `valueLiveUpdate` is set to true for real-time updates.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-json-model-70ef981.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.App\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Button\n      text=\"Say Hello\"\n      press=\".onShowHello\"/>\n   <Input\n      value=\"{/recipient/name}\"\n      description=\"Hello {/recipient/name}\"\n      valueLiveUpdate=\"true\"\n      width=\"60%\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding 'Edit' Button and Press Event to Detail.view.xml (XML)\nDESCRIPTION: This code snippet adds an 'Edit' button with a `press` event handler (`.onEditToggleButtonPress`) to the `ObjectPageDynamicHeaderTitle` in the `Detail.view.xml`. The button's `press` event triggers the `onEditToggleButtonPress` function defined in the Detail controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-adding-a-floating-footer-555ed73.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<m:ToggleButton\n\t\t\t\t\t\ttext=\"Edit\"\n\t\t\t\t\t\ttype=\"Emphasized\"\n\t\t\t\t\t\tpress=\".onEditToggleButtonPress\"/>\n```\n\n----------------------------------------\n\nTITLE: Core.ready() Promise with sap.ui.require in JavaScript\nDESCRIPTION: This snippet shows how to use the `Core.ready()` promise to execute code after the OpenUI5 framework has been initialized. It requires the `sap/ui/core/Core` module and uses the `then()` method to execute a callback function after the framework is ready. This ensures that application code is executed at the correct time, after OpenUI5 is fully initialized.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initialization-process-91f2c90.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Core\"], function (Core) {\n    Core.ready().then( () => {\n        // application can be started\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Loading JS Fragments using loadFragment in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to load a JS fragment within an OpenUI5 controller using the loadFragment() method.  It uses the module name syntax to specify the JS fragment's resource name. This allows the framework to load the fragment. The framework handles the lifecycle for the fragment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/instantiation-of-fragments-04129b2.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.loadFragment({\n    name: \"module:myapp/fragments/MyJSFragment\"\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering E-mail on Image Press OpenUI5 JavaScript\nDESCRIPTION: This snippet creates an OpenUI5 sap.m.Image that, when pressed, triggers an email application using sap.m.URLHelper.triggerEmail(). The image's source is set to a website image, and the triggerEmail() function is called with the person's website, a subject, and a message.  The person.name variable from the 'person' object is used to personalize the message.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/examples-for-triggering-telephone-text-and-e-mail-applications-021ac23.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew sap.m.Image({\n    src : \"images/website.png\", /* Depends where your images are located */\n    press : function() {\n        sap.m.URLHelper.triggerEmail(person.website, \"Info\", \"Dear \" + person.name + \",\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Formatter Function for Complex Bindings (JavaScript)\nDESCRIPTION: This JavaScript code defines a custom formatter function named `formatParts` for complex bindings. It demonstrates how to access individual parts of the binding, delegates to `sap.ui.model.odata.AnnotationHelper.format`, and wraps label texts in square brackets for demonstration purposes.  It requires the IContext interface.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-bindings-604b1eb.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\n1   /*\n2    * Custom formatter function for complex bindings to demonstrate access to ith part of binding.\n3    * Delegates to {@link sap.ui.model.odata.AnnotationHelper#format} and wraps label texts in\n4    * square brackets. Joins parts together, separated by a space.\n5    * \n6    * @param {sap.ui.core.util.XMLPreprocessor.IContext} oInterface\n7    *   the callback interface related to the current formatter call\n8    * @param {...any} [vRawValue]\n9    *   the raw value(s) from the meta model\n10   * @returns {string}\n11   *   the resulting string value to write into the processed XML\n12   */\n13  window.formatParts = function(oInterface, vRawValue) {\n14      var i, aResult;\n15\n16      /*\n17       * Delegates to {@link sap.ui.model.odata.AnnotationHelper#format} and wraps label texts\n18       * in square brackets.\n19       *\n20       * @param {sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context} oInterface\n21       *   the callback interface related to the current formatter call\n22       * @param {any} [vRawValue]\n23       *   the raw value from the meta model\n24       * @returns {string}\n25       */\n26      function formatLabelValue(oInterface, vRawValue) {\n27        var sResult = sap.ui.model.odata.AnnotationHelper.format(oInterface, vRawValue);\n28        return sMyString.endsWith(oInterface.getPath(), \"/Label\")\n29             ? \"[\"+ sResult + \"]\"\n30             : sResult;\n31      }\n32  \n33       try {\n34          if(oInterface.getModel()) {\n35              returnformatLabelValue(oInterface, vRawValue);\n36          } else {\n37              // root formatter for a composite binding\n38              aResult = [];\n39              // \"probe for the smallest non-negative integer\"\n40              for (i = 0; oInterface.getModel(i); i += 1) {               \n41                  aResult.push(\n42                      // Note: arguments[i + 1] is the raw value of the ith part!\n43                      formatLabelValue(oInterface.getInterface(i), arguments[i + 1])\n44                  );\n45              }\n46              return aResult.join(\" \");\n47          }\n48      } catch (e) {\n49          return e.message;\n50      }\n51  }\n52  window.formatParts.requiresIContext = true;\n```\n\n----------------------------------------\n\nTITLE: Triggering SMS from DisplayListItem OpenUI5 JavaScript\nDESCRIPTION: This snippet creates an OpenUI5 sap.m.DisplayListItem that, when pressed, triggers an SMS application using sap.m.URLHelper.triggerSms(). The list item is set to 'Active' to provide visual feedback on press, and the triggerSms() function is called with the person's SMS number.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/examples-for-triggering-telephone-text-and-e-mail-applications-021ac23.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew sap.m.DisplayListItem({\n    label : \"Sms\",\n    value : \"( \" + person.sms + \" )\",\n    type : \"Active\",\n    press : function() {\n        sap.m.URLHelper.triggerSms(person.sms);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Property with Object Literal\nDESCRIPTION: This JavaScript snippet shows how to use an object literal with the `bindProperty` method, including specifying the data type (Integer). It requires `Integer` from `sap/ui/model/type/Integer`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Integer\" required from module \"sap/ui/model/type/Integer\"\n\noInput.bindProperty(\"value\", {path: \"/company/name\", type: Integer});\n```\n\n----------------------------------------\n\nTITLE: Defining Sections and Subsections in XML\nDESCRIPTION: This code snippet demonstrates how to define sections and subsections within an ObjectPageLayout using XML. It shows how to structure the content using ObjectPageSection and ObjectPageSubSection controls, including adding custom blocks.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-layout-2e61ab6.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ObjectPageLayout id=\"ObjectPageLayout\" >\n        <sections>\n            <ObjectPageSection title=\"Payroll\" >\n                <subSections>\n                    <ObjectPageSubSection title=\"sub payroll title\">\n                        <blocks>\n                            <myNameSpace:myBlock/>\n                            <myNameSpace:myBlock/>\n                            <myNameSpace:myBlock/>\n                        </blocks>\n                    </ObjectPageSubSection>\n                </subSections>\n            </ObjectPageSection>\n        </sections>\n    </ObjectPageLayout>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Direction and Alignment in Input Control - JavaScript\nDESCRIPTION: This code snippet demonstrates how to set the `textDirection` and `textAlign` properties of an `sap.m.Input` control to ensure that numeric data is displayed correctly in a right-to-left (RTL) context. The `textDirection` is set to `sap.ui.core.TextDirection.LTR` to force left-to-right display, and `textAlign` is set to `sap.ui.core.TextAlign.End` for proper alignment.  This example relies on the sap.m library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/api-properties-for-right-to-left-support-in-text-displaying-controls-7e7cd0a.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.m.Input ({\n     value: \"(+359) 111 222 333 + (Some) text\", \n     textDirection: sap.ui.core.TextDirection.LTR,\n     textAlign: sap.ui.core.TextAlign.End\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Detail View - XML\nDESCRIPTION: This XML snippet defines the structure of the Detail view in an OpenUI5 application. It includes a page with an object header and a custom `ProductRating` control. The view uses data binding to display invoice details and handles navigation back to the overview page. A custom namespace `wt` is defined for referencing the custom control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-d12d2ee.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.Detail\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:wt=\"ui5.walkthrough.control\">\n\t<Page\n\t\ttitle=\"{i18n>detailPageTitle}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\">\n\t\t<ObjectHeader\n\t\t\tintro=\"{invoice>ShipperName}\"\n\t\t\ttitle=\"{invoice>ProductName}\"/>\n\t\t<wt:ProductRating \n\t\t\tid=\"rating\" \n\t\t\tclass=\"sapUiSmallMarginBeginEnd\" \n\t\t\tchange=\".onRatingChange\"/>\n\t</Page>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifest.json for OpenUI5 App\nDESCRIPTION: This JSON snippet configures the manifest.json file for an OpenUI5 application. It sets up the application ID, type, i18n settings (bundle name, supported locales, fallback locale), title, description, application version, UI technology, device types (desktop, tablet, phone), dependencies (minimum UI5 version, required libraries), root view (view name, type, ID), and models (specifically an i18n resource model). The i18n section points to the resource bundle, and the models section defines the i18n model using the ResourceModel. The sap.ui5 dependencies section defines the minimum OpenUI5 version and the required libraries sap.ui.core and sap.m.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-descriptor-for-applications-typescript-2a46b75.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"_version\": \"1.65.0\",\n    \"sap.app\": {\n        \"id\": \"ui5.walkthrough\",\n        \"type\": \"application\",\n        \"i18n\": {\n            \"bundleName\": \"ui5.walkthrough.i18n.i18n\",\n            \"supportedLocales\": [\n                \"\"\n            ],\n            \"fallbackLocale\": \"\"\n        },\n        \"title\": \"{{appTitle}}\",\n        \"description\": \"{{appDescription}}\",\n        \"applicationVersion\": {\n            \"version\": \"1.0.0\"\n        }\n    },\n    \"sap.ui\": {\n        \"technology\": \"UI5\",\n        \"deviceTypes\": {\n            \"desktop\": true,\n            \"tablet\": true,\n            \"phone\": true\n        }\n    },\n    \"sap.ui5\": {\n        \"dependencies\": {\n            \"minUI5Version\": \"1.120\",\n            \"libs\": {\n                \"sap.ui.core\": {},\n                \"sap.m\": {}\n            }\n        },\n        \"rootView\": {\n            \"viewName\": \"ui5.walkthrough.view.App\",\n            \"type\": \"XML\",\n            \"id\": \"app\"\n        },\n        \"models\": {\n            \"i18n\": {\n                \"type\": \"sap.ui.model.resource.ResourceModel\",\n                \"settings\": {\n                    \"bundleName\": \"ui5.walkthrough.i18n.i18n\",\n                    \"supportedLocales\": [\n                        \"\"\n                    ],\n                    \"fallbackLocale\": \"\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DateTime type with source pattern and style\nDESCRIPTION: Initializes the `DateTime` type with a source pattern \"yyyy/MM/dd HH:mm:ss\" and a style \"full\" for output. The source value is expected as a string.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-datetime-91f3070.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The source value is given as string in \"yyyy/MM/dd HH:mm:ss\" format. The used output style is \"full\". The styles are language dependent.\n// The following styles are possible: short, medium (default), long, full\n// This usecase might be the common one.\noType = new TypeDate({source: {pattern: \"yyyy/MM/dd HH:mm:ss\"}, style: \"full\"}); \n```\n\n----------------------------------------\n\nTITLE: Configure Start Script in package.json (JSON)\nDESCRIPTION: This JSON snippet configures the `start` script in the `package.json` file to open `mockServer.html` instead of `index.html` during local development. This allows developers to use the mock server by default when running the application locally. It also defines the dependencies required by the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-26-mock-server-configuration-bae9d90.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ui5.walkthrough\",\n  \"version\": \"1.0.0\",\n  \"description\": \"The UI5 walkthrough application\",\n  \"scripts\": {\n      \"start\": \"ui5 serve -o test/mockServer.html\"\n  },\n  \"devDependencies\": {\n    \"@ui5/cli\": \"^3\",\n    \"ui5-middleware-simpleproxy\": \"^3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using lazyInstanceof for Type Checks in OpenUI5\nDESCRIPTION: This code snippet demonstrates the use of a `lazyInstanceof` helper function for performing `instanceof` checks on dynamically required modules in OpenUI5. This function checks if the module is loaded before performing the `instanceof` check, preventing errors if the module is not yet available. It uses `sap.ui.require` to attempt to retrieve the module and only performs the `instanceof` check if the module is a function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/loading-a-module-d12024e.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n\nfunction lazyInstanceof(obj, module) {\n    var FNClass = sap.ui.require(module);\n    return typeof FNClass === 'function' ? obj instanceof FNClass : false;\n}\n  \nif (lazyInstanceof(oControl, 'sap/ui/base/DataType')) {\n                …\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Function Binding in XML View (OData V4)\nDESCRIPTION: This code snippet demonstrates how to bind an OData function to a text control in an XML view. The function `/GetNumberOfAvailableItems()` is called automatically when the control requests the value. The `Int16` type is specified to ensure the return value is handled correctly.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Text \n    core:require=\"{\n        Int16: 'sap/ui/model/odata/type/Int16'\n    }\"\n    text=\"{\n        path: '/GetNumberOfAvailableItems()',\n        type: 'Int16'\n    }\" />\n```\n\n----------------------------------------\n\nTITLE: Create Employee Detail View (XML)\nDESCRIPTION: Defines the XML view for displaying employee details.  It uses data binding to display employee properties like first name, last name, address, etc. within a `SimpleForm` inside a `Panel`.  The view has a back button for navigation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-navigate-to-routes-with-mandatory-parameters-f96d252.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.Employee\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:f=\"sap.ui.layout.form\"\n\tbusyIndicatorDelay=\"0\">\n\t<Page\n\t\tid=\"employeePage\"\n\t\ttitle=\"{i18n>EmployeeDetailsOf} {FirstName} {LastName}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\"\n\t\tclass=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<Panel\n\t\t\t\tid=\"employeePanel\"\n\t\t\t\twidth=\"auto\"\n\t\t\t\tclass=\"sapUiResponsiveMargin sapUiNoContentPadding\">\n\t\t\t\t<headerToolbar>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Title text=\"{i18n>EmployeeIDColon} {EmployeeID}\" level=\"H2\"/>\n\t\t\t\t\t\t<ToolbarSpacer />\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</headerToolbar>\n\t\t\t\t<content>\n\t\t\t\t\t<f:SimpleForm\n\t\t\t\t\t\tminWidth=\"1024\"\n\t\t\t\t\t\teditable=\"false\"\n\t\t\t\t\t\tlayout=\"ResponsiveGridLayout\"\n\t\t\t\t\t\tlabelSpanL=\"3\" labelSpanM=\"3\" emptySpanL=\"4\" emptySpanM=\"4\"\n\t\t\t\t\t\tcolumnsL=\"1\" columnsM=\"1\">\n\t\t\t\t\t\t<f:content>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formFirstName}\"/>\n\t\t\t\t\t\t\t<Text text=\"{FirstName}\"/>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formLastName}\"/>\n\t\t\t\t\t\t\t<Text text=\"{LastName}\"/>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formAddress}\"/>\n\t\t\t\t\t\t\t<Text text=\"{Address}\"/>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formCity}\"/>\n\t\t\t\t\t\t\t<Text text=\"{City}, {Region}\"/>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formPostalCode}\"/>\n\t\t\t\t\t\t\t<Text text=\"{PostalCode}\"/>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formPhoneHome}\"/>\n\t\t\t\t\t\t\t<Text text=\"{HomePhone}\"/>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formCountry}\"/>\n\t\t\t\t\t\t\t<Text text=\"{Country}\"/>\n\t\t\t\t\t\t</f:content>\n\t\t\t\t\t</f:SimpleForm>\n\t\t\t\t</content>\n\t\t\t</Panel>\n\t\t</content>\n\t</Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Class (Good)\nDESCRIPTION: This example shows the correct way to add custom styles to an OpenUI5 control. First, a custom CSS class is added to the control using `addStyleClass()`.  Then, the corresponding CSS rule is defined for that class. This avoids directly overriding OpenUI5's style classes, ensuring better compatibility and maintainability.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/css-styling-issues-9d87f92.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noButton.addStyleClass(\"poaAppError\");\n```\n\n----------------------------------------\n\nTITLE: Add Currency Input Field with Formatting - XML\nDESCRIPTION: This XML snippet adds a new `Input` control to the view, binding its value to the `/salesAmount` and `/currencyCode` properties in the data model. The `Currency` type is used for formatting the displayed value. The `description` property displays the currency code.  The `core:require` is needed to load the `Currency` type.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-property-formatting-using-data-types-9252ee4.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.databinding.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:form=\"sap.ui.layout.form\"\n\txmlns:l=\"sap.ui.layout\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tcore:require=\"{Currency: 'sap/ui/model/type/Currency'}\">\n\t<Panel headerText=\"{i18n>panel1HeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n\t\t<form:SimpleForm editable=\"true\" layout=\"ColumnLayout\">\n\t\t\t<Label text=\"{i18n>firstName}\"/>\n\t\t\t<Input value=\"{/firstName}\" valueLiveUpdate=\"true\" width=\"200px\" enabled=\"{/enabled}\"/>\n\t\t\t<Label text=\"{i18n>lastName}\"/>\n\t\t\t<Input value=\"{/lastName}\" valueLiveUpdate=\"true\" width=\"200px\" enabled=\"{/enabled}\"/>\n\t\t\t<Label text=\"{i18n>enabled}\"/>\n\t\t\t<CheckBox selected=\"{/enabled}\"/>\n\t\t</form:SimpleForm>\n\t</Panel>\n\t<Panel headerText=\"{i18n>panel2HeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n\t\t<content>\n\t\t\t<l:HorizontalLayout>\n\t\t\t\t<l:VerticalLayout>\n\t\t\t\t\t<Label labelFor=\"address\" text=\"{i18n>address}:\"/>\n\t\t\t\t\t<FormattedText class=\"sapUiSmallMarginBottom\"\n\t\t\t\t\t\thtmlText=\"{/address/street}&lt;br&gt;{/address/zip} {/address/city}&lt;br&gt;{/address/country}\"\n\t\t\t\t\t\tid=\"address\" width=\"200px\"/>\n\t\t\t\t\t<Link href=\"{\n\t\t\t\t\t\t\tparts: [\n\t\t\t\t\t\t\t\t'/firstName',\n\t\t\t\t\t\t\t\t'/lastName'\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tformatter: '.formatMail'\n\t\t\t\t\t\t}\"\n\t\t\t\t\t\ttext=\"{i18n>sendEmail}\"/>\n\t\t\t\t</l:VerticalLayout>\n\t\t\t\t<l:VerticalLayout>\n\t\t\t\t\t<Label labelFor=\"salesAmount\" text=\"{i18n>salesAmount}:\"/>\n\t\t\t\t\t<Input description=\"{/currencyCode}\" enabled=\"{/enabled}\" id=\"salesAmount\"\n\t\t\t\t\t\tvalue=\"{\n\t\t\t\t\t\t\tparts: [\n\t\t\t\t\t\t\t\t{path: '/salesAmount'},\n\t\t\t\t\t\t\t\t{path: '/currencyCode'}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttype: 'Currency',\n\t\t\t\t\t\t\tformatOptions: {showMeasure: false}\n\t\t\t\t\t\t}\" width=\"200px\"/>\n\t\t\t\t</l:VerticalLayout>\n\t\t\t</l:HorizontalLayout>\n\t\t</content>\n\t</Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding SearchField to Worklist Table - XML\nDESCRIPTION: This XML snippet adds a `SearchField` to the `headerToolbar` of the table in the `Worklist.view.xml` file. It also defines a `ToolbarSpacer` to improve the layout. The `search` property of the `SearchField` is bound to the `.onFilterPosts` function in the controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-12-adding-a-search-0c270b4.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n...\n         <Table\n               id=\"table\"\n               width=\"auto\"\n               class=\"sapUiResponsiveMargin\"\n               growing=\"true\"\n               items=\"{\n               path: '/Posts',\n               sorter: {\n                  path: 'Title',\n                  descending: false\n                  }\n               }\"\n               busyIndicatorDelay=\"{worklistView>/tableBusyDelay}\"\n               updateFinished=\".onUpdateFinished\">\n            <headerToolbar>\n               <Toolbar>\n                  <Label id=\"tableHeader\" text=\"{worklistView>/worklistTableTitle}\"/>\n                  <ToolbarSpacer />\n                  <SearchField id=\"searchField\" width=\"auto\" search=\".onFilterPosts\" />\n               </Toolbar>\n            </headerToolbar>\n...\n\n```\n\n----------------------------------------\n\nTITLE: Defining OPA5 Assertions\nDESCRIPTION: This JavaScript snippet defines an OPA5 assertion to check if the button's text has changed after being pressed. The `theButtonShouldHaveADifferentText` function uses `waitFor` to locate the button and then uses a `PropertyStrictEquals` matcher to verify that the button's text is \"I got pressed\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/getting-started-with-opa5-22f175e.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar assertions = new Opa5({\n    theButtonShouldHaveADifferentText : function () {\n        return this.waitFor({\n            viewName : \"Main\",\n            id : \"pressMeButton\",\n            matchers : new PropertyStrictEquals({\n                name : \"text\",\n                value : \"I got pressed\"\n            }),\n            success : function (oButton) {\n                Opa5.assert.ok(true, \"The button's text changed to: \" + oButton.getText());\n            },\n            errorMessage : \"did not change the Button's text\"\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dependent Facets using FacetFilterList in SAPUI5\nDESCRIPTION: This JavaScript code demonstrates how to create dependent facets in SAPUI5 using the `FacetFilterList` control. It initializes two `FacetFilterList` instances: one for categories and another for products. The `listOpen` event of the products facet list is used to filter the displayed products based on the selected category in the categories facet list. This implementation requires sap.ui.model.odata.v2.ODataModel, sap.m.FacetFilterList, and sap.m.FacetFilterItem. \nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/dependent-facets-e702774.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oCategoriesModel = new sap.ui.model.odata.v2.ODataModel(\"/uilib-sample/proxy/http/services.odata.org/V3/Northwind/Northwind.svc\");\n\nvar oCategoriesFFL = new sap.m.FacetFilterList({ // create the categories facet list\n    title : \"Categories\",\n    mode : sap.m.ListMode.SingleSelectMaster, // restrict to one selection for simplicity\n    key : \"Categories\",\n    items : {\n        path : \"/Categories\",\n        template : new sap.m.FacetFilterItem({\n            text : \"{CategoryName}\",\n            key : \"{CategoryID}\"\n        })\n    }\n});\noCategoriesFFL.setModel(oCategoriesModel); // set the data model\n\n// create the data model for the products facet list\nvar oProductsModel = new sap.ui.model.odata.v2.ODataModel(\"/uilib-sample/proxy/http/services.odata.org/V3/Northwind/Northwind.svc\");\n\nvar oProductsFFL = new sap.m.FacetFilterList({\n    title : \"Products\",\n    key : \"Products\",\n    items : {\n        path : \"/Products_by_Categories\",\n        template : new sap.m.FacetFilterItem({\n            text : \"{ProductName}\",\n            key : \"{ProductID}\"\n        })\n    },\n    listOpen : function(oEvent) {\n\n        // only display products from the selected category (if any)\n        var aSelectedKeys = Object.getOwnPropertyNames(oCategoriesFFL.getSelectedKeys());\n        if(aSelectedKeys.length > 0) {\n            \n            var oBinding = this.getBinding(\"items\");\n            var oUserFilter = new sap.ui.model.Filter(\n            \"CategoryName\", \n            sap.ui.model.FilterOperator.Contains,\n            oCategoriesFFL.getSelectedKeys()[aSelectedKeys[0]]);\n            var oFinalFilter = new sap.ui.model.Filter([ oUserFilter ], true);\n            oBinding.filter(oFinalFilter, sap.ui.model.FilterType.Application);\n        }\n    },\n});\noProductsFFL.setModel(oProductsModel);\n\n// create the facet filter control\nvar oFF = new sap.m.FacetFilter(genId(), { \n    lists : [ oCategoriesFFL, oProductsFFL ],\n});\n```\n\n----------------------------------------\n\nTITLE: DateFormatter with DateFormat (JS)\nDESCRIPTION: This snippet uses OpenUI5's DateFormat to format the date based on the provided locale.  It creates a short time format. The locale is passed to the getTimeInstance function. It returns the formatted date.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/ui/core/format/DateFormat\"\n], function(Object, DateFormat) {\n\treturn Object.extend(\"sap.ui.demo.bulletinboard.model.DateFormatter\", {\n\t\tconstructor: function(oProperties) {\n\t\t\tthis.timeFormat = DateFormat.getTimeInstance({\n\t\t\t\tstyle: \"short\"\n\t\t\t}, oProperties.locale);\n\t\t},\n\t\tformat: function(oDate) {\n\t\t\tif (!oDate) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\treturn this.timeFormat.format(oDate);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Search Field to Invoice List - XML View\nDESCRIPTION: This XML snippet adds a search field to the header toolbar of the invoice list. The search field is configured to trigger the `onFilterInvoices` event handler in the controller when a search is performed.  The `id` of the List control is set to \"invoiceList\" to enable filtering from the controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-23-filtering-typescript-7f02e9d.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n   xmlns=\"sap.m\"\n   xmlns:core=\"sap.ui.core\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <List\n      id=\"invoiceList\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\"\n      items=\"{invoice>/Invoices}\" >\n      <headerToolbar>\n         <Toolbar>\n            <Title text=\"{i18n>invoiceListTitle}\"/>\n            <ToolbarSpacer/>\n            <SearchField \n               width=\"50%\" \n               search=\".onFilterInvoices\"/>\n         </Toolbar>\n      </headerToolbar>\n      ...\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Referencing Test Suite Script - HTML\nDESCRIPTION: This HTML snippet shows how to include a separate JavaScript file containing test definitions in a QUnit test page. By separating the script from the HTML, the page becomes CSP compliant. The script is included using a `<script>` tag in the `<head>` section. Input: HTML page. Output: Includes and executes the external testsuite.qunit.js file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/make-your-app-csp-compliant-1f81a09.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n\t...\n\t<script src=\"testsuite.qunit.js\" data-sap-ui-testsuite></script>\n</head>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: XML Fragment Definition\nDESCRIPTION: Defines a simple XML fragment containing a sap.m.Button with an ID and text property. This fragment can then be instantiated and used within OpenUI5 views or controllers.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/programmatically-instantiating-xml-fragments-d6af195.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Button xmlns=\"sap.m\" id=\"btnInFragment\" text=\"Hello World\" />\n```\n\n----------------------------------------\n\nTITLE: JSON Model with Initial OData V2 Date Values - JavaScript\nDESCRIPTION: This JavaScript code creates a JSON model with fixed initial date, timestamp, and time values suitable for OData V2. It initializes `DateTime` and `DateTimeOffset` using `UI5Date.getInstance` with UTC values. It initializes the `Time` property with milliseconds and the `__edmType` property, which is required by OData V2. This function returns a `JSONModel` instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngetJSONModelWithFixInitialValues() {\n    return new JSONModel({\n        DateTime: UI5Date.getInstance(Date.UTC(2022, 11, 15)), // for Dec 15th 2022\n        DateTimeOffset: UI5Date.getInstance(Date.UTC(2022, 11, 15, 10, 45)), \n            // for Dec 15th 2022, 10:45 AM (UTC) resp. Dec 15th 2022 11:45:00 CEST\n        Time: {\n            ms: ((10 * 60 + 35) * 60 + 15) * 1000,  // for 10:35:15 AM\n            __edmType: \"Edm.Time\"\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using InputListItem in OpenUI5 List\nDESCRIPTION: This code illustrates how to use the `InputListItem` control within an OpenUI5 `List` to embed controls for user input.  The `InputListItem` inherits from `ListItemBase` and provides the `label` and `content` aggregation, allowing you to add input controls like switches and input fields.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/lists-1da1581.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n    \n      <List>\n        <InputListItem label=\"WLAN\">\n          <Switch state=\"true\" />\n        </InputListItem>\n        <InputListItem label=\"Price (EUR)\">\n          <Input\n            placeholder=\"Price\"\n            value=\"799\"\n            type=\"Number\" />\n        </InputListItem>\n    </List>\n    \n    \n```\n\n----------------------------------------\n\nTITLE: Adding IconTabBar for Quick Filters - XML\nDESCRIPTION: This XML snippet modifies the Worklist view to include an IconTabBar control within the semantic page's header content. The IconTabBar contains IconTabFilter controls for different stock levels (all, in stock, shortage, out of stock), each bound to a count in a view model and triggering the onQuickFilter event. This allows users to quickly filter the product table based on stock status.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-quick-filter-for-the-worklist-85ec3a9.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"mycompany.myapp.MyWorklistApp.controller.Worklist\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:semantic=\"sap.f.semantic\">\n\n\t<semantic:SemanticPage\n\t\tid=\"page\"\n\t\theaderPinnable=\"false\"\n\t\ttoggleHeaderOnTitleClick=\"false\">\n\n\t\t<semantic:titleHeading>\n\t\t\t<Title text=\"{i18n>worklistTitle}\" />\n\t\t</semantic:titleHeading>\n\n\t\t<semantic:headerContent>\n\t\t\t<IconTabBar\n\t\t\t\tid=\"iconTabBar\"\n\t\t\t\tselect=\".onQuickFilter\"\n\t\t\t\texpandable=\"false\">\n\t\t\t\t<items>\n\t\t\t\t\t<IconTabFilter\n\t\t\t\t\t\tkey=\"all\"\n\t\t\t\t\t\tshowAll=\"true\"\n\t\t\t\t\t\tcount=\"{worklistView>/countAll}\"\n\t\t\t\t\t\ttext=\"{i18n>WorklistFilterProductsAll}\"/>\n\t\t\t\t\t<IconTabSeparator/>\n\t\t\t\t\t<IconTabFilter\n\t\t\t\t\t\tkey=\"inStock\"\n\t\t\t\t\t\ticon=\"sap-icon://message-success\"\n\t\t\t\t\t\ticonColor=\"Positive\"\n\t\t\t\t\t\tcount=\"{worklistView>/inStock}\"\n\t\t\t\t\t\ttext=\"{i18n>WorklistFilterInStock}\"/>\n\t\t\t\t\t<IconTabFilter\n\t\t\t\t\t\tkey=\"shortage\"\n\t\t\t\t\t\ticon=\"sap-icon://message-warning\"\n\t\t\t\t\t\ticonColor=\"Critical\"\n\t\t\t\t\t\tcount=\"{worklistView>/shortage}\"\n\t\t\t\t\t\ttext=\"{i18n>WorklistFilterShortage}\"/>\n\t\t\t\t\t<IconTabFilter\n\t\t\t\t\t\tkey=\"outOfStock\"\n\t\t\t\t\t\ticon=\"sap-icon://message-error\"\n\t\t\t\t\t\ticonColor=\"Negative\"\n\t\t\t\t\t\tcount=\"{worklistView>/outOfStock}\"\n\t\t\t\t\t\ttext=\"{i18n>WorklistFilterOutOfStock}\"/>\n\t\t\t\t</items>\n\t\t\t\t<content>\n\t\t\t\t\t<Table\n...\n\t\t\t\t\t</Table>\n\t\t\t\t</content>\n\t\t\t</IconTabBar>\n\n\n\t\t</semantic:headerContent>\n\t\t<semantic:sendEmailAction>\n\t\t\t<semantic:SendEmailAction\n\t\t\t\tid=\"shareEmail\"\n\t\t\t\tpress=\"onShareEmailPress\"/>\n\t\t</semantic:sendEmailAction>\n\t</semantic:SemanticPage>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Inline Creation Rows on Data Received (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the `onInit` function of a controller. It retrieves the rows binding of a sap.ui.table.Table control and attaches a 'dataReceived' event handler. The handler checks if the length of the binding is final and if it's the first time creating an entry at the end, then calls the `onCreateActivateLineItem` function to create an inactive entry.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nonInit : function () {\n  var oItemsBinding = this.getView().byId(\"ToLineItems\").getBinding(\"rows\");\n \n  oItemsBinding.attachEvent(\"dataReceived\", function () {\n    // check that length is final before creating at end and only create inactive entry once\n    if (oItemsBinding.isLengthFinal() && oItemsBinding.isFirstCreateAtEnd() === undefined) {\n      that.onCreateActivateLineItem();\n    }\n  });\n},\n```\n\n----------------------------------------\n\nTITLE: Properties Section in Component Metadata\nDESCRIPTION: This code snippet showcases how to define properties within the `metadata` section of a `UIComponent`. It includes setting `name`, `type`, and `defaultValue` for each property. Getters and setters for these properties are generated automatically.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/component-metadata-0187ea5.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// \"UIComponent\" required from module \"sap/ui/core/UIComponent\"\nUIComponent.extend(\"samples.components.shell.Component\", {\n    \"metadata\": {\n        \"abstract\": true,\n        \"version\": \"1.0\",\n...\n        \"properties\": {\n            \"appTitle\": {\n                \"name\":\"appTitle\",\n                \"type\":\"string\",\n                \"defaultValue\":\"Default Value that will be replaced with something meaningful through the setter for this property\"\n            },\n            \"someOtherProp\": {\n                \"name\":\"myProperty\",\n                \"type\":\"string\",\n                \"defaultValue\":\"Some text\"\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Button in Home View - XML\nDESCRIPTION: This XML snippet defines the structure of the Home view, including the addition of a new button (`employeeOverviewBtn`) that triggers navigation to the employee overview page. The button's `press` event is bound to the `.onNavToEmployeeOverview` event handler. The i18n keys are used for text localization.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-assign-multiple-targets-b01840e.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.Home\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page title=\"{i18n>homePageTitle}\" class=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<Button id=\"displayNotFoundBtn\" text=\"{i18n>DisplayNotFound}\" press=\".onDisplayNotFound\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t<Button id=\"employeeListBtn\" text=\"{i18n>ShowEmployeeList}\" press=\".onNavToEmployees\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t<Button id=\"employeeOverviewBtn\" text=\"{i18n>ShowEmployeeOverview}\" press=\".onNavToEmployeeOverview\" class=\"sapUiTinyMarginEnd\"/>\n\n\t\t</content>\n\t</Page>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Modify Component.js for Router Initialization - JavaScript\nDESCRIPTION: This JavaScript code modifies the Component.js to initialize the router and bind to the beforeRouteMatched event. It introduces a model for the layout and sets a default layout if none is provided in the route parameters.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-routing-7f65131.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t'sap/ui/core/UIComponent',\n\t'sap/ui/model/json/JSONModel',\n\t'sap/f/library'\n], function(UIComponent, JSONModel, fioriLibrary) {\n\t'use strict';\n\n\treturn UIComponent.extend('sap.ui.demo.fcl.Component', {\n\n\t\tmetadata: {\n\t\t\tmanifest: 'json'\n\t\t},\n\n\t\tinit: function () {\n\t\t\tvar oModel,\n\t\t\t\toProductsModel,\n\t\t\t\toRouter;\n\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\toModel = new JSONModel();\n\t\t\tthis.setModel(oModel);\n\n\t\t\t// set products demo model on this sample\n\t\t\toProductsModel = new JSONModel(sap.ui.require.toUrl('sap/ui/demo/mock/products.json'));\n\t\t\toProductsModel.setSizeLimit(1000);\n\t\t\tthis.setModel(oProductsModel, 'products');\n\n\t\t\toRouter = this.getRouter();\n\t\t\toRouter.attachBeforeRouteMatched(this._onBeforeRouteMatched, this);\n\t\t\toRouter.initialize();\n\t\t},\n\n\t\t_onBeforeRouteMatched: function(oEvent) {\n\t\t\tvar oModel = this.getModel(),\n\t\t\t\tsLayout = oEvent.getParameters().arguments.layout;\n\n\t\t\t// If there is no layout parameter, set a default layout (normally OneColumn)\n\t\t\tif (!sLayout) {\n\t\t\t\tsLayout = fioriLibrary.LayoutType.OneColumn;\n\t\t\t}\n\n\t\t\toModel.setProperty(\"/layout\", sLayout);\n\t\t}\n\t});\n});\n\n```\n\n----------------------------------------\n\nTITLE: OPA5 Test Suite Entry Point (JavaScript)\nDESCRIPTION: This snippet defines the entry point for all integration tests. It imports the NavigationJourney, which contains the actual test logic.  This module serves as a central point for running all OPA5 tests within the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-28-integration-test-with-opa-9bf4dce.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n    \"./NavigationJourney\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing UI5 Tooling\nDESCRIPTION: This shell command initializes the UI5 Tooling configuration for the project, creating a ui5.yaml file in the app root directory. This file is essential for using UI5 Tooling with the project.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-typescript-c20489e.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nui5 init\n```\n\n----------------------------------------\n\nTITLE: Setting UI Changes Flag - JavaScript\nDESCRIPTION: This snippet defines a private method `_setUIChanges` that sets the `hasUIChanges` property of the `appView` model. The property indicates whether there are unsaved changes. It checks for technical errors or uses `ODataModel.hasPendingChanges` to determine if changes exist.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-create-and-edit-b4f1266.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n        _setUIChanges : function (bHasUIChanges) {\n            if (this._bTechnicalErrors) {\n                // If there is currently a technical error, then force 'true'.\n                bHasUIChanges = true;\n            } else if (bHasUIChanges === undefined) {\n                bHasUIChanges = this.getView().getModel().hasPendingChanges();\n            }\n            var oModel = this.getView().getModel(\"appView\");\n            oModel.setProperty(\"/hasUIChanges\", bHasUIChanges);\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Modify List Binding to Function Import - XML\nDESCRIPTION: This snippet modifies the list's `items` binding in the `App.view.xml` file to use the `FindUpcomingMeetups` function import.  This changes the data source for the list from the entire `Meetups` collection to only upcoming meetups.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-calling-a-function-import-95e5b87.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<List id=\"list\" items=\"{/FindUpcomingMeetups}\" noDataText=\"{i18n>noDataText}\">\n```\n\n----------------------------------------\n\nTITLE: Binding Date and Time Value to DateTimePicker - XML\nDESCRIPTION: This code binds a date and time value from the backend to a DateTimePicker control. The binding type specifies that the backend data will be interpreted as a date and time field. The DateTime data type from 'sap/ui/model/odata/type/DateTime' is required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/date-and-time-related-controls-data-binding-e1ddc69.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<DateTimePicker\n    core:require=\"{\n        DateTime: 'sap/ui/model/odata/type/DateTime'\n    }\"\n    value=\"{ path: 'EntryDateTime', type: 'DateTime' }\"/>\n```\n\n----------------------------------------\n\nTITLE: I18n Properties - INI\nDESCRIPTION: This INI snippet defines the internationalization (i18n) properties for the detail page and the custom `ProductRating` control in the OpenUI5 application. It includes titles, labels, and confirmation messages that support localization of the application's user interface. The properties define text used on the detail page, as well as labels for the product rating feature.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-d12d2ee.md#_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n…\n# Detail Page\ndetailPageTitle=Walkthrough - Details\nratingConfirmation=You have rated this product with {0} stars\n\n# Product Rating\nproductRatingLabelInitial=Please rate this product\nproductRatingLabelIndicator=Your rating: {0} out of {1}\nproductRatingLabelFinal=Thank you for your rating!\nproductRatingButton=Rate\n\n```\n\n----------------------------------------\n\nTITLE: Initialize Router in Component.js (OpenUI5)\nDESCRIPTION: This JavaScript code initializes the router in the `Component.js` file. It retrieves the router instance from the component and calls the `initialize()` method to start the routing process.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-e5200ee.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/model/json/JSONModel\"\n], (UIComponent, JSONModel) => {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"ui5.walkthrough.Component\", {\n\n\t\tmetadata: {\n\t\t\tinterfaces: [\"sap.ui.core.IAsyncContentCreation\"],\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\t\tinit() {\n\t\t\t// call the init function of the parent\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// set data model\n\t\t\tconst oData = {\n\t\t\t\trecipient: {\n\t\t\t\t\tname: \"World\"\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst oModel = new JSONModel(oData);\n\t\t\tthis.setModel(oModel);\n\n\t\t\t// create the views based on the url/hash\n\t\t\tthis.getRouter().initialize();\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Date type with different patterns - JavaScript\nDESCRIPTION: Demonstrates various ways to initialize the `sap.ui.model.type.Date` data type in JavaScript. It shows how to specify source and output patterns, use styles, and handle different source value types (JavaScript Date object, string, timestamp).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-date-91f2fff.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"TypeDate\" required  from \"sap/ui/model/type/Date\"\n\n// The source value is given as Javascript Date object. The used output pattern depends on the locale settings (default).\nvar oType = new TypeDate();\n\n// The source value is given as Javascript Date object. The used output pattern is \"yy-MM-dd\": e.g. 09-11-27\noType = new TypeDate({pattern: \"yy-MM-dd\"}); \n\n// The source value is given as string in \"yyyy/MM/dd\" format. The used output style is \"long\". The styles are language dependent.\n// The following styles are possible: short, medium (default), long, full\n// This might be the common use case.\noType = new TypeDate({source: {pattern: \"yyyy/MM/dd\"}, style: \"long\"}); \n\n// The source value is given as string in \"yyyy/MM/dd\" format. The used output pattern is \"EEEE, MMMM d, yyyy\": e.g. Saturday, August 22, 2043\noType = new TypeDate({source: {pattern: \"yyyy/MM/dd\"}, pattern: \"EEEE, MMMM d, yyyy\"}); \n\n// The source value is given as timestamp. The used output pattern is \"dd.MM.yyyy\": e.g. 22.12.2010\noType = new TypeDate({source: {pattern: \"timestamp\"}, pattern: \"dd.MM.yyyy\"}); \n\n// The source value is given as string. The used input pattern depends on the locale settings (default). The used output pattern is \"dd '|' MM '|' yyyy\": e.g. 22 | 12 | 2010\noType = new TypeDate({source: {}, pattern: \"dd.MM.yyyy\"});\n```\n\n----------------------------------------\n\nTITLE: Loading Resource Bundle with create()\nDESCRIPTION: This code snippet demonstrates how to load a resource bundle in OpenUI5 using the `ResourceBundle.create()` method. It specifies the URL of the properties file, supported locales, fallback locale, and whether the loading should be asynchronous. The `then` function is used to access the resource bundle after it has been loaded, allowing you to retrieve localized texts using the `getText()` method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-bundles-91f225c.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// \"ResourceBundle\" required from module \"sap/base/i18n/ResourceBundle\"\n// load the resource bundle\nResourceBundle.create({\n\turl : \"myapp/i18n/messagebundle.properties\",\n\tsupportedLocales: [\"en_US\", \"en_GB\", \"en\", \"de\", \"\"],\n\tfallbackLocale: \"en\",\n\tasync: true\n}).then(function(oBundle){\n   oBundle.getText(\"buttonSave\");\n   oBundle.getText(\"welcome\", [\"Administrator\"]);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Initializing DateTime with RFC822 timezone source pattern\nDESCRIPTION: Initializes the `DateTime` type with a source pattern including RFC822 timezone format \"dd.MM.yyyy HH:mm:ss Z\". The output pattern depends on the locale settings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-datetime-91f3070.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The source value is given as string in \"dd.MM.yyyy HH:mm:ss Z\" format (timezone is defined in RFC822 format, e.g. \"+0200\"). The used output pattern depends on the locale settings (default).\noType = new TypeDateTime({source: {pattern: \"dd.MM.yyyy HH:mm:ss Z\"}});\n```\n\n----------------------------------------\n\nTITLE: Modifying manifest.json for Detail-Detail Route\nDESCRIPTION: This JSON snippet modifies the `manifest.json` file to include a route for the detail-detail page. The `detailDetail` route is added with a pattern that includes the product, supplier, and layout parameters. A new target named `detailDetail` is also defined, specifying that the `DetailDetail` view should be displayed in the `endColumnPages` aggregation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-adding-a-detail-detail-page-e4d21fd.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\t\t...\n\t\t\t\"routes\": [\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \":layout:\",\n\t\t\t\t\t\"name\": \"list\",\n\t\t\t\t\t\"target\": [\n\t\t\t\t\t\t\"list\",\n\t\t\t\t\t\t\"detail\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \"detail/{product}/{layout}\",\n\t\t\t\t\t\"name\": \"detail\",\n\t\t\t\t\t\"target\": [\n\t\t\t\t\t\t\"list\",\n\t\t\t\t\t\t\"detail\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \"detail/{product}/detailDetail/{supplier}/{layout}\",\n\t\t\t\t\t\"name\": \"detailDetail\",\n\t\t\t\t\t\"target\": [\n\t\t\t\t\t\t\"list\",\n\t\t\t\t\t\t\"detail\",\n\t\t\t\t\t\t\"detailDetail\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"targets\": {\n\t\t\t\t\"list\": {\n\t\t\t\t\t\"name\": \"List\",\n\t\t\t\t\t\"controlAggregation\": \"beginColumnPages\"\n\t\t\t\t},\n\t\t\t\t\"detail\": {\n\t\t\t\t\t\"name\": \"Detail\",\n\t\t\t\t\t\"controlAggregation\": \"midColumnPages\"\n\t\t\t\t},\n\t\t\t\t\"detailDetail\": {\n\t\t\t\t\t\"name\": \"DetailDetail\",\n\t\t\t\t\t\"controlAggregation\": \"endColumnPages\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding an XML View (OpenUI5)\nDESCRIPTION: This code snippet demonstrates how to embed another XML view named `EmployeList` within a parent view using the `mvc:XMLView` control. This allows for modularization and reuse of UI components.  The `viewName` attribute specifies the name of the XML view to be included.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/keep-your-views-short-and-simple-b0d7db7.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<App>\n\t<Page>\n\t\t<mvc:XMLView viewName=\"EmployeList\"/>\n\t</Page>\n</App>\n```\n\n----------------------------------------\n\nTITLE: XML Select with Event Parameter\nDESCRIPTION: This code shows how to pass the `selectedItem` event parameter to the `.doSomething` function using the `$parameters` model. The model allows the extraction of specific event parameters.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-events-in-xml-views-b0fb4de.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<Select change=\".doSomething(${$parameters>/selectedItem})\" />\n```\n\n----------------------------------------\n\nTITLE: Convenience Method for Binding Value\nDESCRIPTION: This JavaScript snippet illustrates a convenience method for binding the `value` property of a `TextField` control. It directly binds the `value` to the `/company/name` path.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\noTextField.bindValue(\"/company/name\");\n```\n\n----------------------------------------\n\nTITLE: Modern Renderer Extension - JavaScript\nDESCRIPTION: This example demonstrates the modern approach to extending renderers using `Renderer.extend`.  It shows how to add or override methods in the new renderer, providing a structured way to inherit and customize rendering logic.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/renderer-object-c9ab345.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define(['sap/ui/core/Renderer'],\n    function(Renderer) {\n    \"use strict\";\n\n    var LabelRenderer = Renderer.extend('mylib.LabelRenderer', {\n        render: function(oRM, oControl) {\n\n            renderPreamble(oRM, oControl);\n\n            // implementation core renderer logic here\n            renderPostamble(oRM, oControl);\n\n        },\n\n        renderPreamble : function(oRM, oControl) {\n        ...\n        },\n\n        renderPostamble : function(oRM, oControl) {\n        ...\n        }\n    });\n\n    return LabelRenderer;\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Invoice List by Product Name (XML)\nDESCRIPTION: This XML snippet demonstrates how to sort an invoice list alphabetically by product name using the `sorter` property in the `items` aggregation binding of a `sap.m.List` control. The `path` attribute specifies the data field to sort by (ProductName). The default sorting order is ascending.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-24-sorting-and-grouping-typescript-86bbe13.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <List\n      id=\"invoiceList\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\"\n      items=\"{\n         path : 'invoice>/Invoices',\n         sorter : {\n            path : 'ProductName' \n         }\n      }\" >\n      ...\n   </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Complex Property Binding in JS\nDESCRIPTION: This JavaScript code demonstrates complex property binding using a JS object instead of a string literal. It binds the `value` property of an `Input` control to `/company/name` and sets the binding mode to `OneWay`. It requires `Input` from `sap/m/Input` and `BindingMode` from `sap/ui/model/BindingMode`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Input\" required from module \"sap/m/Input\"\n// \"BindingMode\" required from module \"sap/ui/model/BindingMode\"\n\nconst oInput = new Input ({\n    value: {\n        path: \"/company/name\",\n        mode: BindingMode.OneWay\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Field Groups with VerticalLayout in JavaScript\nDESCRIPTION: This code snippet demonstrates how to handle the `validateFieldGroup` event on a `sap.ui.layout.VerticalLayout` control. The event handler checks if a specific field group ID is present in the event parameters and performs validation accordingly. `oEvent.bCancelBubble` is set to stop event propagation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/field-groups-5b07753.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myVerticalLayout = new sap.ui.layout.VerticalLayout({content:[myInput1, myInput2], validateFieldGroup: function(oEvent) {\n    var aFieldGroup = oEvent.getParameters().fieldGroupIds;\n    if (aFieldGroup.indexOf(\"MyGroup\") > -1) {\n        //do validation\n        oEvent.bCancelBubble = true; //stop bubbling to the parent control\n    }\n}});\n```\n\n----------------------------------------\n\nTITLE: Get Theme Parameter Value using Parameters.get() - JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve a theme parameter value using the `Parameters.get()` method in OpenUI5. It requires the `sap/ui/core/theming/Parameters` module. The retrieved color value is then stored in the `myColor` variable, which can be used to set CSS properties dynamically.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-themable-user-interfaces-a2c67ac.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.require([\"sap/ui/core/theming/Parameters\"], function(Parameters){\n    var myColor = Parameters.get(\"sapUiButtonHoverBorderColor\");\n});\n```\n\n----------------------------------------\n\nTITLE: Creating HelloPanel Controller (TypeScript)\nDESCRIPTION: Creates a new controller for the HelloPanel view. It includes the onShowHello method, which retrieves a message from the i18n resource bundle and displays it as a message toast. It imports necessary UI5 modules like Controller, MessageToast, JSONModel, ResourceModel and ResourceBundle.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-nested-views-typescript-9bbbfaa.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\n\n/**\n * @namespace ui5.walkthrough.controller\n */\nexport default class HelloPanel extends Controller {\n    \n    onShowHello(): void {\n        // read msg from i18n model\n        // functions with generic return values require casting \n        const resourceBundle = (this.getView()?.getModel(\"i18n\") as ResourceModel)?.getResourceBundle() as ResourceBundle;\n        const recipient = (this.getView()?.getModel() as JSONModel)?.getProperty(\"/recipient/name\");\n        const msg = resourceBundle.getText(\"helloMsg\", [recipient]) || \"no text defined\";\n        // show message\n        MessageToast.show(msg);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Enable Lazy Loading in ObjectPageLayout (JS)\nDESCRIPTION: This code snippet demonstrates how to enable lazy loading for the ObjectPageLayout control by setting the `enableLazyLoading` property to `true`. This ensures that subsection blocks are loaded only when they are visible or near the visible area on the screen, improving performance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-layout-2e61ab6.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ObjectPageLayout id=\"ObjectPageLayout\" enableLazyLoading=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Binding Element with Select Parameter JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the `select` parameter in an OData binding to specify a subset of properties to be read from an entity.  The `select` parameter is added to the parameter object. The server will only return the specified properties (`Name`, `ID`, `Products`) for the `Category(1)` entity, and `Name` and `Category` for products.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_24\n\nLANGUAGE: js\nCODE:\n```\noControl.bindElement(\"/Category(1)\", {expand: \"Products\", select: \"Name,ID,Products\"}); \n\noTable.bindRows({\n    path: \"/Products\",\n    parameters: {select: \"Name,Category\"}\n});\n```\n\n----------------------------------------\n\nTITLE: Application Cache Buster Index File Structure - JSON\nDESCRIPTION: This code snippet shows the structure of the sap-ui-cachebuster-info.json file, which is used by the application cache buster mechanism. It maps file paths to their corresponding timestamps, ensuring that the correct version of each file is loaded.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/application-cache-buster-index-file-fef5340.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"mvc/MyMVC.view.js\": \"20120907134005\",\n  \"mvc/MyMVC.controller.js\": \"20120907134005\",\n  \"mvc/MyMVC.view2.js\": \"20120906113301\",\n  \"mvc/MyMVC.controller2.js\": \"20120906113023\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Hello World\nDESCRIPTION: This HTML snippet creates a basic webpage structure with a title and a simple 'Hello World' message. It defines the character set and includes a div tag to display the text.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-typescript-c20489e.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>UI5 TypeScript Walkthrough</title>\n</head>\n<body>\n\t<div>Hello World</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Text with Concatenated Strings and Bindings - XML\nDESCRIPTION: This XML snippet concatenates a literal string with a conditional expression and a binding. It dynamically inserts 'Mr.' or 'Mrs.' based on the gender, followed by the last name. The expression uses embedded binding syntax.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Concatenate literal strings and expression bindings or bindings. -->\ntext=\"Hello {=%{gender}==='male' ? 'Mr.' : 'Mrs.'} {lastName}\"\n```\n\n----------------------------------------\n\nTITLE: NumberFormat with Style and Decimals - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `style` option in NumberFormat to format numbers in a compact format (shortened). It also illustrates the usage of `decimals` and `shortDecimals` options to control the number of decimal places for regular and shortened numbers, respectively.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/number-format-91f2f28.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar oFormatOptions = {\n    style: \"short\",\n    decimals: 1,\n    shortDecimals: 2\n};\n\n// \"NumberFormat\" required from module \"sap/ui/core/format/NumberFormat\"\nvar oFloatFormat = NumberFormat.getFloatInstance(oFormatOptions);\noFloatFormat.format(1234.56); // returns \"1.23K\" (shortified number takes the shortDecimals parameter)\noFloatFormat.format(123.456); // returns \"123.5\" (non-shortified number takes the decimals parameter)\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.padRight with String.prototype.padEnd (Native)\nDESCRIPTION: This snippet shows how to replace `jQuery.sap.padRight` with the native `String.prototype.padEnd` method. `padEnd` pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"a\".padEnd(110, \"0\");\n```\n\n----------------------------------------\n\nTITLE: Using Support Assistant Assertions in OPA Tests - JavaScript\nDESCRIPTION: This code snippet illustrates how to integrate Support Assistant assertions into OPA test journeys. It demonstrates how to call the custom assertions (e.g., iShouldSeeNoHighSeverityErrors) within an OPA test to verify the application's state and check for Support Assistant issues after a specific action or rendering.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/integrating-the-rules-in-opa-tests-cfabbd4.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\nopaTest(\"Should see no Support Assistant issues with high severity\", function (Given, When, Then) {\n\tThen.iShouldSeeNoHighSeverityErrors();\n});\n...\n\n```\n\n----------------------------------------\n\nTITLE: Initializing DateTime type with JavaScript Date object\nDESCRIPTION: Initializes the `DateTime` type with a JavaScript Date object as the source value. The output pattern depends on the locale settings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-datetime-91f3070.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"TypeDateTime\" required from \"sap/ui/model/type/DateTime\"\n\n// The source value is given as JavaScript Date object. The used output pattern depends on the locale settings (default).\nvar oType = new TypeDateTime();\n```\n\n----------------------------------------\n\nTITLE: Initializing Fast Navigation Group with CustomData in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to define a fast navigation group on a control or element's root element using the `CustomData` mechanism within the `init` function. The `data` method is used to set the `sap-ui-fastnavgroup` attribute to \"true\", ensuring it's written into the DOM. This is the preferred way to define fast navigation groups for controls or elements with a DOM representation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-groups-for-fast-navigation-10b14c7.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit = function(){\n  //...\n  this.data(\"sap-ui-fastnavgroup\", \"true\", true/*Write into DOM*/);\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Service Metadata - XML\nDESCRIPTION: Defines the service metadata for the OData service in XML format.  It specifies the entity type Invoice with properties like ShipperName, ProductName, Quantity, ExtendedPrice, and Status. It also defines the entity container NorthwindEntities with an entity set Invoices associated with the Invoice entity type.  This metadata is used by the mock server to simulate the OData service.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-26-mock-server-configuration-bae9d90.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<edmx:Edmx Version=\"1.0\" xmlns:edmx=\"http://schemas.microsoft.com/ado/2007/06/edmx\">\n\t<edmx:DataServices m:DataServiceVersion=\"1.0\" m:MaxDataServiceVersion=\"3.0\"\n\t\t\txmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\">\n\t\t<Schema Namespace=\"NorthwindModel\" xmlns=\"http://schemas.microsoft.com/ado/2008/09/edm\">\n\t\t\t<EntityType Name=\"Invoice\">\n\t\t\t\t<Key>\n\t\t\t\t\t<PropertyRef Name=\"ProductName\"/>\n\t\t\t\t\t<PropertyRef Name=\"Quantity\"/>\n\t\t\t\t\t<PropertyRef Name=\"ShipperName\"/>\n\t\t\t\t</Key>\n\t\t\t\t<Property Name=\"ShipperName\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"40\" FixedLength=\"false\"\n\t\t\t\t\t\t\tUnicode=\"true\"/>\n\t\t\t\t<Property Name=\"ProductName\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"40\" FixedLength=\"false\"\n\t\t\t\t\t\t\tUnicode=\"true\"/>\n\t\t\t\t<Property Name=\"Quantity\" Type=\"Edm.Int16\" Nullable=\"false\"/>\n\t\t\t\t<Property Name=\"ExtendedPrice\" Type=\"Edm.Decimal\" Precision=\"19\" Scale=\"4\"/>\n\t\t\t\t<Property Name=\"Status\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"1\" FixedLength=\"false\"\n\t\t\t\t\t\t\tUnicode=\"true\"/>\n\t\t\t</EntityType>\n\t\t</Schema>\n\t\t<Schema Namespace=\"ODataWebV2.Northwind.Model\" xmlns=\"http://schemas.microsoft.com/ado/2008/09/edm\">\n\t\t\t<EntityContainer Name=\"NorthwindEntities\" m:IsDefaultEntityContainer=\"true\" p6:LazyLoadingEnabled=\"true\"\n\t\t\t\t\txmlns:p6=\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\">\n\t\t\t\t<EntitySet Name=\"Invoices\" EntityType=\"NorthwindModel.Invoice\"/>\n\t\t\t</EntityContainer>\n\t\t</Schema>\n\t</edmx:DataServices>\n</edmx:Edmx>\n\n```\n\n----------------------------------------\n\nTITLE: Test Suite HTML Page\nDESCRIPTION: This HTML file serves as the entry point to run all tests in the browser. It registers the resource root mapping for the test resources and references the `testsuite.qunit` module created in the previous step, and uses `createSuite.js` to generate the test suite UI.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-27-unit-test-with-qunit-typescript-750c8c1.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t <meta charset=\"utf-8\">\n\t <script\n\t\t   src=\"../resources/sap/ui/test/starter/createSuite.js\"\n\t\t   data-sap-ui-testsuite=\"test-resources/ui5/walkthrough/testsuite.qunit\"\n\t\t   data-sap-ui-resource-roots='{\n\t\t\t       \"test-resources.ui5.walkthrough\": \"./\"\n\t\t   }'\n\t></script>\n</head>\n<body>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex XML Fragment in OpenUI5\nDESCRIPTION: This code snippet defines a more complex XML fragment containing a VBox layout with a Label and two Buttons. The `press` event of one button is bound to the `doSomething` method of a controller. The fragment utilizes data binding to display text from a model, requiring the fragment to be placed within a UI tree where the model is available.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-fragments-2c677b5.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<VBox xmlns=\"sap.m\">\n\t\t<Label text=\"My Label inside an XML fragment\"/>\n\t\t<Button id=\"btnInFragment\" text=\"Hello World\" press=\"doSomething\"/>\n\t\t<Button text=\"{/someText}\"/>\n\t</VBox>\n```\n\n----------------------------------------\n\nTITLE: Formatter for Type Conversion\nDESCRIPTION: This JavaScript snippet showcases using a formatter function for type conversion, specifically to display a traffic light image based on a Boolean value. The `src` property of the `oImage` control is bound to `/company/trusted`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\noImage.bindProperty(\"src\", {\n    path: \"/company/trusted\",\n    formatter: (bValue) => bValue ? \"green.png\" : \"red.png\"\n}); \n```\n\n----------------------------------------\n\nTITLE: Element Binding in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to define element binding in a controller using the `bindElement` method on an input control. It binds the input to the `/company` path and then binds the `value` property to the `name` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst oInput = this.byId(\"companyInput\");\noInput.bindElement(\"/company\");\noInput.bindProperty(\"value\", \"name\");\n```\n\n----------------------------------------\n\nTITLE: Defining Module Aliases with core:require in XML View\nDESCRIPTION: This XML snippet demonstrates how to use the `core:require` attribute in an XML view to define aliases for JavaScript modules.  It requires the `sap/m/MessageBox` module and assigns it the alias `Box`, and the `sap/m/MessageToast` module with alias `Toast`. These aliases can then be used within the view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/require-modules-in-xml-view-and-fragment-b11d853.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\"\n   core:require=\"{\n      Box: 'sap/m/MessageBox',\n      Toast: 'sap/m/MessageToast'\n   }\">\n   ...\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Composite Binding Constructor with Paths - JS\nDESCRIPTION: This code snippet demonstrates how to create a composite binding in the constructor of an OpenUI5 control, specifying only the paths for the individual binding parts. It binds the 'value' property of an Input control to the 'firstName', 'lastName' (from the default model), and 'fraud' (from 'myModel2') properties. The types are inferred implicitly.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/composite-binding-a2fe8e7.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// \"Input\" required from module \"sap/m/Input\"\n\noTxt = new Input({\n    value: {\n        parts: [\n            \"/firstName\",\n            \"/lastName\",\n            \"myModel2>/fraud\" // path to property in another model\n        ]\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the App View with Page and Panel - XML\nDESCRIPTION: This XML snippet defines the structure of the App view using sap.m.Page and sap.m.Panel controls. The Page control provides a header and content area, while the Panel control groups the Button and Input controls. The `i18n` model is used to bind text properties. The `displayBlock` attribute is added to the view to ensure proper fullscreen height.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-pages-and-panels-3b9d9f8.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.App\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\"\n  displayBlock=\"true\">\n   <App>\n      <pages>\n         <Page title=\"{i18n>homePageTitle}\">\n            <content>\n               <Panel\n                  headerText=\"{i18n>helloPanelTitle}\">\n                  <content>\n                     <Button\n                        text=\"{i18n>showHelloButtonText}\"\n                        press=\".onShowHello\"/>\n                     <Input\n                        value=\"{/recipient/name}\"\n                        description=\"Hello {/recipient/name}\"\n                        valueLiveUpdate=\"true\"\n                        width=\"60%\"/>\n                  </content>\n               </Panel>\n            </content>\n         </Page>\n      </pages>\n   </App>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:unit to Unit or ISOCurrency\nDESCRIPTION: This snippet showcases how `sap:unit` is transformed either to `Org.OData.Measures.V1.Unit` or `Org.OData.Measures.V1.ISOCurrency`, depending on the semantics of the pointed-to property (unit-of-measure or currency-code).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_57\n\nLANGUAGE: xml\nCODE:\n```\nsap:unit=\"WeightUnit\"\nsap:unit=\"CurrencyCode\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Measures.V1.Unit\": { \"Path\" : \"WeightUnit\" }\n\"Org.OData.Measures.V1.ISOCurrency\": { \"Path\" : \"CurrencyCode\" }\n```\n\n----------------------------------------\n\nTITLE: Dialog Close Event Handler in HelloPanel Controller (TypeScript)\nDESCRIPTION: This code snippet adds an event handler function to the HelloPanel controller that closes the dialog when triggered. It gets the dialog instance using the byId function and then calls the close function of the dialog.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-17-fragment-callbacks-typescript-f030afc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Dialog from \"sap/m/Dialog\";\n\n/**\n * @namespace ui5.walkthrough.controller\n */\nexport default class HelloPanel extends Controller {\n    private dialog: Dialog;\n\n    onShowHello(): void {\n        ...\n    }\n   async onOpenDialog(): Promise<void> {\n        ...\n    }\n    onCloseDialog(): void {\n        // note: We don't need to chain to the pDialog promise, since this event-handler\n        // is only called from within the loaded dialog itself.\n        (this.byId(\"helloDialog\") as Dialog)?.close();\n    }        \n};\n```\n\n----------------------------------------\n\nTITLE: Register Event Handler in XML View - OpenUI5\nDESCRIPTION: This code snippet defines an XML view for displaying employee overview content. It registers an event handler for the `itemPress` event on a table and sets the `type` attribute of the `ColumnListItem` to `Active` to enable navigation when an item is selected.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-reuse-an-existing-route-877d57e.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverviewContent\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Table id=\"employeesTable\"\n\t\titems=\"{/Employees}\"\n\t\t\titemPress=\".onItemPressed\">\n\t\t<headerToolbar>\n\t\t\t...\n\t\t</headerToolbar>\n\t\t<columns>\n\t\t\t...\n\t\t</columns>\n\t\t<items>\n\t\t\t<ColumnListItem type=\"Active\">\n\t\t\t\t<cells>\n\t\t\t\t\t...\n\t\t\t\t</cells>\n\t\t\t</ColumnListItem>\n\t\t</items>\n\t</Table>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adapting Panel Visibility with Device Model - XML\nDESCRIPTION: This XML code defines a panel with `expandable` and `expanded` properties bound to the device model. The `expandable` property is bound to `/system/phone`, making the panel expandable only on phone devices. The `expanded` property uses expression binding to collapse the panel on phones and expand it on other devices. A button is also configured to be visible only on desktop devices using the `sapUiVisibleOnlyOnDesktop` CSS class.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-35-device-adaptation-typescript-ab8ed1b.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.HelloPanel\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Panel\n\t\theaderText=\"{i18n>helloPanelTitle}\"\n\t\tclass=\"sapUiResponsiveMargin\"\n\t\twidth=\"auto\"\n\t\texpandable=\"{device>/system/phone}\"\n\t\texpanded=\"{= !${device>/system/phone} }\">\n\t\t<content>\n\t\t\t<Button\n\t\t\t\tid=\"helloDialogButton\"\n\t\t\t\ticon=\"sap-icon://world\"\n\t\t\t\ttext=\"{i18n>openDialogButtonText}\"\n\t\t\t\tpress=\".onOpenDialog\"\n\t\t\t\tclass=\"sapUiSmallMarginEnd sapUiVisibleOnlyOnDesktop\"/>\n\t\t\t<Button\n\t\t\t\ttext=\"{i18n>showHelloButtonText}\"\n\t\t\t\tpress=\".onShowHello\"\n\t\t\t\tclass=\"myCustomButton\"/>\n\t\t\t<Input\n\t\t\t\tvalue=\"{/recipient/name}\"\n\t\t\t\tvalueLiveUpdate=\"true\"\n\t\t\t\twidth=\"60%\"/>\n\t\t\t<FormattedText\n\t\t\t\thtmlText=\"Hello {/recipient/name}\"\n\t\t\t\tclass=\"sapUiSmallMargin sapThemeHighlight-asColor myCustomText\"/>\n\t\t</content>\n\t</Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining Object Page SubSection Blocks in XML\nDESCRIPTION: This XML snippet demonstrates how to add blocks to the `blocks` aggregation of an `ObjectPageSubSection` within an `ObjectPageLayout`. It shows the structure for organizing content within subsections using custom blocks identified by their namespace.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-blocks-4527729.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <ObjectPageLayout id=\"ObjectPageLayout\" subSectionLayout=\"titleOnTop\">\n        <sections>\n            <ObjectPageSection title=\"Payroll\" >\n                <subSections>\n                    <ObjectPageSubSection title=\"sub payroll title\">\n                        <blocks>\n                            <myNameSpace:myBlock/>\n                            <myNameSpace:myBlock/>\n                            <myNameSpace:myBlock/>\n                        </blocks>\n                    </ObjectPageSubSection>\n                </subSections>\n            </ObjectPageSection>\n        </sections>\n    </ObjectPageLayout>\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with createId in JS Fragment (SAPUI5)\nDESCRIPTION: This code snippet demonstrates how to create a button within a JavaScript fragment in SAPUI5 and properly manage its ID using the `createId()` method. The fragment logic can then influence the button's ID by adding a prefix if an ID is given when the fragment is instantiated. If no ID is provided, the given ID remains untouched.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/ids-in-js-fragments-896fa9a.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateContent: function(oController ) {\n\tvar oButton  = new sap.m.Button(this.createId(\"btnInJsFragment\"), { \n\t// use createId() to let the fragment influence the ID\n\t    text: \"Hello JS World\"\n\t}); \n\treturn oButton ; \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation in Worklist.view.xml (SAPUI5)\nDESCRIPTION: This code snippet configures the table items in the `Worklist.view.xml` file to be of type `Navigation`.  This configuration triggers navigation to the 'Post' page when a user selects an item in the table. The `press` event calls the `onPress` handler.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-adding-the-post-page-4a9f063.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.bulletinboard.controller.Worklist\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:semantic=\"sap.m.semantic\">\n\t<semantic:FullscreenPage\n\t\tid=\"page\"\n\t\ttitle=\"{i18n>worklistViewTitle}\">\n\t\t<semantic:content>\n\t\t\t<Table …>\n\t\t\t\t…\n\t\t\t\t<items>\n\t\t\t\t\t<ColumnListItem\n\t\t\t\t\t\tvAlign=\"Middle\"\n\t\t\t\t\t\ttype=\"Navigation\"\n\t\t\t\t\t\tpress=\".onPress\">\n\t\t\t\t\t\t…\n\t\t\t\t\t</ColumnListItem>\n\t\t\t\t</items>\n\t\t\t</Table>\n\t\t</semantic:content>\n\t\t…\n\t</semantic:FullscreenPage>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Manifest Configuration for i18n\nDESCRIPTION: This sample shows how to configure i18n settings within the sap.app section and sap.ui5 models section of the manifest.json file. It includes bundleUrl, supportedLocales, and fallbackLocale configurations, which control the resource bundle loading behavior.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/supported-locales-and-fallback-chain-ec753bc.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"_version\": \"1.21.0\",\n\t\"sap.app\": {\n\t\t\"id\": \"sap.ui.demo.todo\",\n\t\t\"type\": \"application\",\n\t\t\"i18n\": {\n\t\t\t\"bundleUrl\": \"i18n/i18n.properties\",\n\t\t\t\"supportedLocales\": [\"en\", \"de\"],\n\t\t\t\"fallbackLocale\": \"en\"\n\t\t},\n\t\t\"title\": \"{{appTitle}}\",\n\t\t...\n\t},\n\t\"sap.ui5\": {\n\t\t\"models\": {\n\t\t\t\"i18n\": {\n\t\t\t\t\"type\": \"sap.ui.model.resource.ResourceModel\",\n\t\t\t\t\"settings\": {\n\t\t\t\t\t\"bundleUrl\": \"i18n/i18n.properties\",\n\t\t\t\t\t\"supportedLocales\": [\"en\", \"de\"],\n\t\t\t\t\t\"fallbackLocale\": \"en\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t...\t\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Filter Counts After Table Update - JavaScript\nDESCRIPTION: This JavaScript snippet modifies the Worklist controller's `onUpdateFinished` function to update the counts displayed on the IconTabFilter controls. It retrieves the count of all products and the counts for each stock level by making OData read requests with the corresponding filters. The retrieved counts are then updated in the view model, which updates the UI. This ensures that the counts on the tabs accurately reflect the current data in the table.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-quick-filter-for-the-worklist-85ec3a9.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\t\t onUpdateFinished : function (oEvent) {\n\t\t\t// update the worklist's object counter after the table update\n\t\t\tvar sTitle,\n\t\t\t\toTable = oEvent.getSource(),\n\t\t\t\toViewModel = this.getModel(\"worklistView\"),\n\n\t\t\t\tiTotalItems = oEvent.getParameter(\"total\");\n\t\t\t// only update the counter if the length is final and\n\t\t\t// the table is not empty\n\t\t\tif (iTotalItems && oTable.getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tsTitle = this.getResourceBundle().getText(\"worklistTableTitleCount\", [iTotalItems]);\n\t\t\t\t// Get the count for all the products and set the value to 'countAll' property\n\t\t\t\tthis.getModel().read(\"/Products/$count\", {\n\t\t\t\t\tsuccess: function (oData) {\n\t\t\t\t\t\toViewModel.setProperty(\"/countAll\", oData);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// read the count for the unitsInStock filter\n\t\t\t\tthis.getModel().read(\"/Products/$count\", {\n\t\t\t\t\tsuccess: function (oData) {\n\t\t\t\t\t\toViewModel.setProperty(\"/inStock\", oData);\n\t\t\t\t\t},\n\t\t\t\t\tfilters: this._mFilters.inStock\n\t\t\t\t});\n\t\t\t\t// read the count for the outOfStock filter\n\t\t\t\tthis.getModel().read(\"/Products/$count\", {\n\t\t\t\t\tsuccess: function(oData){\n\t\t\t\t\t\toViewModel.setProperty(\"/outOfStock\", oData);\n\t\t\t\t\t},\n\t\t\t\t\tfilters: this._mFilters.outOfStock\n\t\t\t\t});\n\t\t\t\t// read the count for the shortage filter\n\t\t\t\tthis.getModel().read(\"/Products/$count\", {\n\t\t\t\t\tsuccess: function(oData){\n\t\t\t\t\t\toViewModel.setProperty(\"/shortage\", oData);\n\t\t\t\t\t},\n\t\t\t\t\tfilters: this._mFilters.shortage\n\t\t\t\t});\n\n\t\t\t} else {\n\t\t\t\tsTitle = this.getResourceBundle().getText(\"worklistTableTitle\");\n\t\t\t}\n\t\t\tthis.getModel(\"worklistView\").setProperty(\"/worklistTableTitle\", sTitle);\n\t\t},\n\t\t...\n\n```\n\n----------------------------------------\n\nTITLE: Saving the Exported File (OpenUI5)\nDESCRIPTION: Shows how to save the generated export data to a file using the `saveFile` method of the `Export` object.  The `always` handler destroys the export object to release resources after saving the file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-data-binding-for-data-export-f1ee7a8.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\noExport.saveFile().always(function() {\n    this.destroy();\n});\n```\n\n----------------------------------------\n\nTITLE: Implement Navigation in InvoiceList Controller (OpenUI5)\nDESCRIPTION: This JavaScript code implements the `onPress` event handler in the `InvoiceList` controller. It retrieves the router instance and navigates to the `detail` route.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-e5200ee.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"../model/formatter\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\"\n], (Controller, JSONModel, Filter, FilterOperator) => {\n\t\"use strict\";\n\n\treturn Controller.extend(\"ui5.walkthrough.controller.InvoiceList\", {\n\n\t\t…\n\n\t\tonPress() {\n\t\t\tconst oRouter = this.getOwnerComponent().getRouter();\n\t\t\toRouter.navTo(\"detail\");\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Relative Binding to Metadata (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to use relative binding to access metadata. `myLabel` directly accesses the label based on its context, while `myLabel2` binds the element before accessing the metadata.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-metadata-binding-f5aa4bb.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar myLabel = new sap.m.Label({text:\"{/Companies(1)/CompanyCode/#@sap:label}\"});\nvar myLabel2 = new sap.m.Label({text:\"{City/#@sap:label}\"});\nmyLabel2.bindElement(\"/Companies(1)\");\n```\n\n----------------------------------------\n\nTITLE: Filtering Invoice List - JavaScript\nDESCRIPTION: This JavaScript snippet defines the `onFilterInvoices` function in the controller. It retrieves the search query from the event, creates a filter object using the `ProductName` and the `FilterOperator.Contains`, and applies the filter to the invoice list's binding. If the query is empty, the filter is cleared to show all items.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-23-filtering-5295470.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\"\n], (Controller, JSONModel, Filter, FilterOperator) => {\n\t\"use strict\";\n\n\treturn Controller.extend(\"ui5.walkthrough.controller.InvoiceList\", { \n\t\tonInit() {\n\t\t\tconst oViewModel = new JSONModel({\n\t\t\t\tcurrency: \"EUR\"\n\t\t\t});\n\t\t\tthis.getView().setModel(oViewModel, \"view\");\n\t\t},\n\n\t\tonFilterInvoices(oEvent) {\n\t\t\t// build filter array\n\t\t\tconst aFilter = [];\n\t\t\tconst sQuery = oEvent.getParameter(\"query\");\n\t\t\tif (sQuery) {\n\t\t\t\taFilter.push(new Filter(\"ProductName\", FilterOperator.Contains, sQuery));\n\t\t\t}\n\n\t\t\t// filter binding\n\t\t\tconst oList = this.byId(\"invoiceList\");\n\t\t\tconst oBinding = oList.getBinding(\"items\");\n\t\t\toBinding.filter(aFilter);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Logging Error in OpenUI5\nDESCRIPTION: This code demonstrates logging an error message using the `sap/base/Log` module. It logs a \"Logon failed\" error with a topic of \"connectivity\". This is preferred over `console.error` for structured logging.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nLog.error(\"Logon failed\", \"\", \"connectivity\";)\n```\n\n----------------------------------------\n\nTITLE: OData Property Annotation Example (XML)\nDESCRIPTION: This XML snippet illustrates how to define a `sap:label` annotation for a property `CompanyName` within the service metadata. This annotation can then be accessed via data binding in OpenUI5.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-metadata-binding-f5aa4bb.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Property Name=\"CompanyName\" Type=\"Edm.String\" MaxLength=\"80\" sap:label=\"Company Name\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS in manifest.json\nDESCRIPTION: This JSON snippet configures the CSS file to be loaded by the OpenUI5 application. It adds a CSS resource definition to the `sap.ui5` section of the `manifest.json` file, specifying the URI of the CSS file relative to the component. This allows OpenUI5 to automatically load and apply the styles defined in the specified CSS file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-custom-css-and-theme-colors-typescript-4cc841e.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n...\n  \"sap.ui5\": {\n\t...\t\n\t\"rootView\": {\n\t  ...\n\t},\n\t\"resources\": {\n\t  \"css\": [\n\t\t{\n\t\t  \"uri\": \"css/style.css\"\n\t\t}\n\t  ]\n\t}\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Target Typed View For Routing\nDESCRIPTION: This JavaScript snippet shows how to define a typed view as a route's target and use its `createContent` method to create an XML view with templating. It demonstrates how to create an XMLView with preprocessors and handle the asynchronous loading of the view. Models not yet available in that hook need special handling by first returning dummy content, registering to the view's modelContextChange event, and creating the inner view in that event's handler, adding it to the dummy content.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-templating-5ee619f.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/mvc/View\", \"sap/ui/core/mvc/XMLView\"], function (View, XMLView) {\n\n     return View.extend(\"some.package.RouteTargetView\", {\n         createContent : function () {\n             return XMLView.create({\n                 preprocessors : {\n                     xml : {\n                         // ...\n                     }\n                 },\n                 viewName : \"some.package.TemplateView\"\n             }).then(function (oView) {\n                 // return View content\n                 return oView;\n             });\n         }\n     });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Semantic Content to DetailPage\nDESCRIPTION: This code demonstrates how to add semantic content to a DetailPage, such as forward action and share in SAP Work Zone action. It uses ForwardAction and ShareInSAPWorkZoneAction controls from the sap.m.semantic library to provide common operations. It also includes a MessagesIndicator.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/semantic-page-sap-m-4a97a07.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<SplitContainer>\n       <masterPages>\n              ...\n        </masterPages>\n        <detailPages>\n              <semantic:DetailPage>\n\n            <semantic:forwardAction>\n                <semantic:ForwardAction press=\"onForwardPress\"/>\n            </semantic:forwardAction>\n\n   <semantic:shareInSAPWorkZoneAction>\n      <semantic:ShareInSAPWorkZoneAction press=\"onShareInSAPWorkZonePress\"/>\n   </semantic:shareInSAPWorkZoneAction>\n\n   <semantic:messagesIndicator>\n      <semantic:MessagesIndicator press=\"onMessagesIndicatorPress\"/>\n   </semantic:messagesIndicator>\n\n</semantic:DetailPage>\n\n</detailPages>\n</SplitContainer>\n```\n\n----------------------------------------\n\nTITLE: Mock Server HTML Configuration\nDESCRIPTION: This HTML file is used to run the OpenUI5 application in test mode with mock data. It configures the bootstrap script to initialize the mock server before the application component.  The `data-sap-ui-on-init` attribute is crucial for pointing to the mock server initialization module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-creating-a-mock-server-to-simulate-data-50897de.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Mock Server Tutorial</title>\n    <script id=\"sap-ui-bootstrap\"\n        src=\"resources/sap-ui-core.js\"\n        data-sap-ui-resource-roots='{\n            \"sap.ui.demo.MockServer\": \"../\"\n        }'\n        data-sap-ui-on-init=\"module:sap/ui/demo/MockServer/test/initMockServer\"\n        data-sap-ui-compat-version=\"edge\"\n        data-sap-ui-async=\"true\">\n    </script>\n</head>\n<body class=\"sapUiBody\">\n    <div data-sap-ui-component data-name=\"sap.ui.demo.MockServer\" data-id=\"container\" data-settings='{\"id\" : \"MockServer\"}'></div>\n</body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Triggering Phone Call on Button Press OpenUI5 JavaScript\nDESCRIPTION: This snippet creates an OpenUI5 sap.m.Button that, when pressed, triggers a phone call using sap.m.URLHelper.triggerTel(). The button's text is set to the person's telephone number from the 'person' object, and an icon is included.  The triggerTel() function receives the telephone number as a parameter.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/examples-for-triggering-telephone-text-and-e-mail-applications-021ac23.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew sap.m.Button({\n    text : person.tel,\n    icon : \"images/action.png\", /* Depends where your images are located */\n    press : function() {\n        sap.m.URLHelper.triggerTel(person.tel);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: OData Count Request with Filter and Search\nDESCRIPTION: This OData request retrieves the count of employees, applying a filter and a search query. It demonstrates how to include custom query options, filter criteria (AGE ge 0 and (Is_Manager)), and search terms (developer) in a count request. The result returns the total number of employees matching the specified criteria.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-aggregation-and-recursive-hierarchy-7d91431.md#_snippet_4\n\nLANGUAGE: OData\nCODE:\n```\nGET /sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/EMPLOYEES/$count?sap-client=123&$filter=AGE ge 0 and (Is_Manager)&$search=developer\n```\n\n----------------------------------------\n\nTITLE: Entering Text and Clearing First with OPA5\nDESCRIPTION: This snippet shows how to enter text into a `sap.m.Input` after clearing existing text first. The `clearTextFirst` property of the `EnterText` action is set to `true`, ensuring that the input field is empty before the new text is entered.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/simulating-user-interactions-on-controls-8615a0b.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nactions: [\n    new EnterText({ text: \"Hello\" }), // changes Input value to \"Hello\"\n    new EnterText({ text: \"World\", clearTextFirst: true }) // changes Input value to \"World\"\n]\n```\n\n----------------------------------------\n\nTITLE: Starting the UI5 application - npm\nDESCRIPTION: Starts the UI5 application using the npm start script defined in `package.json`. This script uses the UI5 Tooling (`ui5 serve`) to serve the application and automatically opens the `index.html` file in a new browser window.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-2680aa9.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.startsWithIgnoreCase with String.prototype.startsWith (Native)\nDESCRIPTION: This code snippet demonstrates how to replace `jQuery.sap.startsWithIgnoreCase` by converting both strings to lowercase before using the native `String.prototype.startsWith` method, achieving a case-insensitive comparison.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nsMyString.toLowerCase().startsWith(sMyOtherString.toLowerCase())\n```\n\n----------------------------------------\n\nTITLE: Karma Configuration for UI5 Tooling projects\nDESCRIPTION: This JavaScript snippet shows the Karma configuration for projects using UI5 Tooling. It defines the `ui5` framework and the `Chrome` browser.  The `module.exports` function is necessary for Karma to read the configuration file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-automation-ae44824.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(config) {\n  config.set({\n\n    frameworks: [\"ui5\"],\n\n    browsers: [\"Chrome\"]\n\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic User Input Event Handling in manifest.json\nDESCRIPTION: This JSON snippet shows how to activate automatic user input event handling in an OpenUI5 application by setting the \"handleValidation\" property to true within the \"sap.ui5\" section of the manifest.json file. This allows the framework to automatically detect and display validation messages for user input errors. This requires using a Component for the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/reacting-on-user-input-events-c75861e.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"sap.ui5\": {\n    ...\n    \"handleValidation\": true\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Unit Formatting with CLDR - JavaScript\nDESCRIPTION: Demonstrates basic unit formatting and parsing using CLDR data. It initializes a unit format instance and formats a number with 'speed-mile-per-hour' unit, and parses a string back into number and unit. Requires sap/ui/core/format/NumberFormat.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/unit-formatting-8e618a8.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// create a simple unit formatting instance, without any additional options\nsap.ui.require([\"sap/ui/core/format/NumberFormat\"], function(NumberFormat) {\n   var oUnitFormat = NumberFormat.getUnitInstance();\n   oUnitFormat.format(12345.678, \"speed-mile-per-hour\"); // output: 12,345.678 mph\n   oUnitFormat.parse(\"12345.678 mph\"); // output: [12345.678, \"speed-mile-per-hour\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Padding Classes - HTML\nDESCRIPTION: This HTML snippet demonstrates how to apply responsive padding classes to a `sap.m.Page` control.  The specified classes enable dynamic paddings for the header, subheader, content, footer, and floating footer sections of the page based on the control's width.  This requires the SAP Horizon or Quartz theme to be active.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enabling-responsive-paddings-according-to-the-control-width-3b718b5.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Page class=\"sapUiResponsivePadding--header sapUiResponsivePadding--subHeader sapUiResponsivePadding--content sapUiResponsivePadding--footer sapUiResponsivePadding--floatingFooter\">\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Boolean Type - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `sap.ui.model.type.Boolean` type in JavaScript. The `TypeBoolean` class is required from the `sap/ui/model/type/Boolean` module. The created type `oType` can then be used for data binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-boolean-91f2f93.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"TypeBoolean\" required from module \"sap/ui/model/type/Boolean\"\n// The source value is given as boolean.\nvar oType = new TypeBoolean();\n```\n\n----------------------------------------\n\nTITLE: Modifying Detail View XML for Supplier Table\nDESCRIPTION: This XML snippet adds a table of suppliers to the detail page view.  The table is placed within an `ObjectPageSection` and `ObjectPageSubSection`.  The table's `items` aggregation is bound to the `products>/ProductCollectionStats/Filters/1/values` path. Each item in the table is a `ColumnListItem` with a `Navigation` type and a `press` event handler that calls the `.onSupplierPress` function. The supplier's text is displayed using an `ObjectIdentifier` bound to the `products>text` model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-adding-a-detail-detail-page-e4d21fd.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\t\t\t...\n\t\t\t<ObjectPageSection title=\"Suppliers\">\n\t\t\t\t<subSections>\n\t\t\t\t\t<ObjectPageSubSection>\n\t\t\t\t\t\t<blocks>\n\t\t\t\t\t\t\t<m:Table\n\t\t\t\t\t\t\t\tid=\"suppliersTable\"\n\t\t\t\t\t\t\t\titems=\"{path : 'products>/ProductCollectionStats/Filters/1/values'}\">\n\t\t\t\t\t\t\t\t<m:columns>\n\t\t\t\t\t\t\t\t\t<m:Column/>\n\t\t\t\t\t\t\t\t</m:columns>\n\t\t\t\t\t\t\t\t<m:items>\n\t\t\t\t\t\t\t\t\t<m:ColumnListItem type=\"Navigation\" press=\".onSupplierPress\">\n\t\t\t\t\t\t\t\t\t\t<m:cells>\n\t\t\t\t\t\t\t\t\t\t\t<m:ObjectIdentifier text=\"{products>text}\"/>\n\t\t\t\t\t\t\t\t\t\t</m:cells>\n\t\t\t\t\t\t\t\t\t</m:ColumnListItem>\n\t\t\t\t\t\t\t\t</m:items>\n\t\t\t\t\t\t\t</m:Table>\n\t\t\t\t\t\t</blocks>\n\t\t\t\t\t</ObjectPageSubSection>\n\t\t\t\t</subSections>\n\t\t\t</ObjectPageSection>\n\t\t</sections>\n\t\t...\n```\n\n----------------------------------------\n\nTITLE: Setting Header Context for $count Property Binding in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to set the header context for a property binding to `$count`. It retrieves the `ODataListBinding` for the `SalesOrders` table and then sets the binding context of the `SalesOrdersTitle` control to the header context of the list binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/binding-collection-inline-count-77d2310.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetHeaderContext : function () {\n    var oView = this.getView();\n    oView.byId(\"SalesOrdersTitle\").setBindingContext(\n        oView.byId(\"SalesOrders\").getBinding(\"items\").getHeaderContext());\n}\n```\n\n----------------------------------------\n\nTITLE: Assert table visibility on Worklist page\nDESCRIPTION: This code adds an assertion to the Worklist page object to check if the table is visible. The `iShouldSeeTheTable` function uses `waitFor` to check for the existence of the table element, identified by its ID. This helps verify that navigation back to the Worklist page was successful. Dependency: `sap/ui/test/Opa5`\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-testing-navigation-10592af.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n…\n,\n\t\t\t\t\tiShouldSeeTheTable: function () {\n\t\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\t\tid: sTableId,\n\t\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\t\tOpa5.assert.ok(true, \"The table is visible\");\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terrorMessage: \"Was not able to see the table.\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n…\n```\n\n----------------------------------------\n\nTITLE: XML View with Unstable IDs - OpenUI5\nDESCRIPTION: This XML snippet demonstrates an OpenUI5 view without stable IDs. OpenUI5 automatically generates IDs for the Page and Table controls, which may vary between program executions. This variability makes automated testing and inline help tools unreliable.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/stable-ids-all-you-need-to-know-f51dbb7.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page>\n\t\t<content>\n\t\t\t<Table>\n\t\t\t</Table>\n\t\t</content>\n\t</Page>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Input control with Label and description - OpenUI5 XML View\nDESCRIPTION: This code snippet demonstrates how to use a `Label` and `Input` control in an OpenUI5 XML view, enhancing accessibility by connecting the label to the input field using `labelFor`. The `description` property of the `Input` control is used to provide additional context or information, such as a unit of measurement, improving the user experience, especially for screen reader users.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/screen-reader-support-33fae34.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   xmlns:l=\"sap.ui.layout\"\n   xmlns:mvc=\"sap.ui.core.mvc\"\n   xmlns=\"sap.m\">\n   <l:VerticalLayout\n      class=\"sapUiContentPadding\"\n      width=\"100%\">\n      <l:content>\n         <Label text=\"Product price\" labelFor=\"productPriceInput\"/>\n         <Input\n            id=\"productPriceInput\"\n            value=\"220\"\n            description=\"EUR / 5 pieces\"\n            width=\"200px\"\n            fieldWidth=\"60px\" />\n      </l:content>\n   </l:VerticalLayout>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Table with Search and Sort Functionality (XML View)\nDESCRIPTION: This XML code defines the structure and layout of the application view, including a table with search and sort functionalities. It incorporates a search field and sort button in the header toolbar. The `items` aggregation of the table is bound to the `/People` entity set, with the `$count` parameter enabled to retrieve the total number of entities. The `search` event of the `SearchField` is bound to the `.onSearch` handler, and the `press` event of the `Button` with the `sortUsersButton` id is bound to `onSort`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-filtering-sorting-and-counting-426ff31.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.core.tutorial.odatav4.controller.App\"\n\tdisplayBlock=\"true\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Shell>\n\t\t<App busy=\"{appView>/busy}\" class=\"sapUiSizeCompact\">\n\t\t\t<pages>\n\t\t\t\t<Page title=\"{i18n>peoplePageTitle}\">\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\tid=\"peopleList\"\n\t\t\t\t\t\t\tgrowing=\"true\"\n\t\t\t\t\t\t\tgrowingThreshold=\"10\"\n\t\t\t\t\t\t\titems=\"{\n\t\t\t\t\t\t\t\tpath: '/People',\n\t\t\t\t\t\t\t\tparameters: {\n\t\t\t\t\t\t\t\t\t$count: true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\">\n\t\t\t\t\t\t\t<headerToolbar>\n\t\t\t\t\t\t\t\t<OverflowToolbar>\n\t\t\t\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t\t\t\t\t\t\t<SearchField\n\t\t\t\t\t\t\t\t\t\t\tid=\"searchField\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"20%\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"{i18n>searchFieldPlaceholder}\"\n\t\t\t\t\t\t\t\t\t\t\tsearch=\".onSearch\"/>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tid=\"refreshUsersButton\"\n\t\t\t\t\t\t\t\t\t\t\ticon=\"sap-icon://refresh\"\n\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{i18n>refreshButtonText}\"\n\t\t\t\t\t\t\t\t\t\t\tpress=\".onRefresh\"/>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tid=\"sortUsersButton\"\n\t\t\t\t\t\t\t\t\t\t\ticon=\"sap-icon://sort\"\n\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{i18n>sortButtonText}\"\n\t\t\t\t\t\t\t\t\t\t\tpress=\"onSort\"/>\n\t\t\t\t\t\t\t\t\t</content>\n\t\t\t\t\t\t\t\t</OverflowToolbar>\n\t\t\t\t\t\t\t</headerToolbar>\n\t\t\t\t\t\t\t<columns>\n\t\t\t\t\t\t\t\t<Column id=\"userNameColumn\">\n\t\t\t\t\t\t\t\t\t<Text text=\"{i18n>userNameLabelText}\"/>\n\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t\t<Column id=\"firstNameColumn\">\n\t\t\t\t\t\t\t\t\t<Text text=\"{i18n>firstNameLabelText}\"/>\n\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t\t<Column id=\"lastNameColumn\">\n\t\t\t\t\t\t\t\t\t<Text text=\"{i18n>lastNameLabelText}\"/>\n\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t\t<Column id=\"ageColumn\">\n\t\t\t\t\t\t\t\t\t<Text text=\"{i18n>ageLabelText}\"/>\n\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t</columns>\n\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t<ColumnListItem>\n\t\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t\t<Input value=\"{UserName}\"/>\n\t\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t\t<Input value=\"{FirstName}\"/>\n\t\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t\t<Input value=\"{LastName}\"/>\n\t\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t\t<Input value=\"{Age}\"/>\n\t\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t\t</ColumnListItem>\n\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t</Table>\n\t\t\t\t\t</content>\n\t\t\t\t</Page>\n\t\t\t</pages>\n\t\t</App>\n\t</Shell>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Faking XHR Requests - JavaScript\nDESCRIPTION: This code demonstrates how to fake XML HTTP Requests (XHR) using Sinon.JS in OpenUI5 QUnit tests. The test suite sets up a fake XHR environment using `sinon.useFakeXMLHttpRequest()` in the `beforeEach` hook and stores the created requests. In the test, an AJAX request is made, and the code verifies that the request was created and then responds to it with predefined data. The `afterEach` hook restores the original XHR functionality.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sinon-js-spies-stubs-mocks-faked-timers-and-xhr-457eaad.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n/*global QUnit sinon */\nsap.ui.define([], function() {\n\t\"use strict\";\n\n\tQUnit.module(\"Faked XHR\", {\n\t\tbeforeEach: function() {\n\t\t\tthis.xhr = sinon.useFakeXMLHttpRequest();\n\t\t\tvar requests = this.requests = [];\n\n\t\t\tthis.xhr.onCreate = function (xhr) {\n\t\t\t\trequests.push(xhr);\n\t\t\t};\n\t\t},\n\n\t\tafterEach: function() {\n\t\t\tthis.xhr.restore();\n\t\t}\n\t});\n\n\tQUnit.test(\"Basic\", 2, function(assert) {\n\t\tvar callback = sinon.spy();\n\n\t\tjQuery.ajax(\"test\", {\n\t\t\tsuccess: callback\n\t\t});\n\n\t\tassert.equal(1, this.requests.length, \"Right number of requests\");\n\n\t\tthis.requests[0].respond(200, {\n\t\t\t\"Content-Type\": \"application/json\"\n\t\t}, '[{ \"foo\": \"bar\", \"bar\" : \"foo\" }]');\n\t\tassert.ok(callback.calledWith([{ \"foo\": \"bar\", \"bar\" : \"foo\" }]), \"Data is called right\");\n\t});\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.domById with window.document.getElementById (Native)\nDESCRIPTION: This snippet demonstrates replacing `jQuery.sap.domById` with the native `window.document.getElementById`.  This function returns a reference to the element by its ID.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.document.getElementById\n```\n\n----------------------------------------\n\nTITLE: OData V4 List Binding with Keep-Alive Context Parameter\nDESCRIPTION: Configures a list binding in the list view to use the `$$getKeepAliveContext` parameter.  This ensures that a context is created and kept alive for the selected item, enabling data sharing with the detail view. This simplifies the detail view controller logic by allowing it to access the sales order context.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-reuse-648e360.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View id=\"list\">\n    <Table items=\"{\n        path: '/SalesOrderList',\n        parameters: {\n            $$getKeepAliveContext: true\n        }}\">\n        <ColumnListItem>\n            <Text text=\"{SalesOrderID}\"/>\n            <Text text=\"{SO_2_BP/CompanyName}\"/>\n            <Text text=\"{GrossAmount}\"/>\n            <Text text=\"{Currency}\"/>\n        </ColumnListItem>\n    </Table>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining the Renderer for ProductRating (JavaScript)\nDESCRIPTION: This code defines the renderer for the custom `ProductRating` control. The `renderer` function uses the `RenderManager` (oRm) to generate the HTML structure for the control. It outputs a `div` element with a custom CSS class and renders the internal controls (RatingIndicator, Label, Button) within it.  The CSS class is applied for styling purposes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-d12d2ee.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrenderer(oRm, oControl) {\n\t\t\toRm.openStart(\"div\", oControl);\n\t\t\toRm.class(\"myAppDemoWTProductRating\");\n\t\t\toRm.openEnd();\n\t\t\toRm.renderControl(oControl.getAggregation(\"_rating\"));\n\t\t\toRm.renderControl(oControl.getAggregation(\"_label\"));\n\t\t\toRm.renderControl(oControl.getAggregation(\"_button\"));\n\t\t\toRm.close(\"div\");\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Defining View with Controller in XML\nDESCRIPTION: This XML snippet defines the `App.view.xml` and associates it with the `ui5.walkthrough.controller.App` controller. It includes a `Button` control with the text \"Say Hello\".  The `press` event of the button is bound to the `onShowHello` function defined in the controller using the `.` prefix.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-controllers-typescript-e5c58fe.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.App\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Button\n      text=\"Say Hello\"\n      press=\".onShowHello\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Formatter Function in JavaScript\nDESCRIPTION: This snippet defines a custom formatter function `statusText` within a JavaScript module. It takes a status code as input and returns a localized status text from the resource bundle based on the code. The function uses a switch statement to determine the appropriate text for each status code.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-22-custom-formatters-0f8626e.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([], () => {\n\t\"use strict\";\n\n\treturn {\n\t\tstatusText(sStatus) {\n\t\t\tconst oResourceBundle = this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n\t\t\tswitch (sStatus) {\n\t\t\t\tcase \"A\":\n\t\t\t\t\treturn oResourceBundle.getText(\"invoiceStatusA\");\n\t\t\t\tcase \"B\":\n\t\t\t\t\treturn oResourceBundle.getText(\"invoiceStatusB\");\n\t\t\t\tcase \"C\":\n\t\t\t\t\treturn oResourceBundle.getText(\"invoiceStatusC\");\n\t\t\t\tdefault:\n\t\t\t\t\treturn sStatus;\n\t\t\t}\n\t\t}\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Status Texts to i18n.properties\nDESCRIPTION: This snippet adds new entries to the i18n.properties file for the translated status texts 'New', 'In Progress', and 'Done'. These texts will be used by the custom formatter to display the status of invoices in a human-readable format.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-22-custom-formatters-typescript-61d4e2b.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n...\n\n# Invoice List\ninvoiceListTitle=Invoices\ninvoiceStatusA=New\ninvoiceStatusB=In Progress\ninvoiceStatusC=Done\n```\n\n----------------------------------------\n\nTITLE: Referencing HelloPanel View in App View (XML)\nDESCRIPTION: Modifies the App view to include the HelloPanel view. The panel is removed from the App view and replaced with an XMLView control that references the HelloPanel view. This allows for modularity and reusability of the HelloPanel.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-nested-views-typescript-9bbbfaa.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n\t<Shell>\n\t\t<App class=\"myAppDemoWT\">\n\t\t\t<pages>\n\t\t\t\t<Page title=\"{i18n>homePageTitle}\">\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<mvc:XMLView viewName=\"ui5.walkthrough.view.HelloPanel\"/>\n\t\t\t\t\t</content>\n\t\t\t\t</Page>\n\t\t\t</pages>\n\t\t</App>\n\t</Shell>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Declaring a Typed View in manifest.json - OpenUI5\nDESCRIPTION: This JSON snippet illustrates how to declare a typed view within the manifest.json file. The viewName under rootView and routing targets is prefixed with 'module:' to indicate the module path. This is useful for application configuration and navigation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/typed-view-e6bb33d.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sap.ui5\": {\n    \"rootView\": {\n      \"viewName\": \"module:myapp/views/MyView\"\n    },\n    \"routing\": {\n      \"targets\": {\n        \"myHome\": {\n          \"name\": \"module:myapp/views/MyHomeView\"\n        }\n        /* other views, e.g. XML ... */\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering CSS in manifest.json\nDESCRIPTION: This JSON snippet demonstrates how to register a custom CSS file within the `manifest.json` file of an OpenUI5 application. The `resources` section under `sap.ui5` is used to specify the location of the CSS file. The URI is relative to the component. OpenUI5 loads the specified CSS file when the application starts, and applies it to the UI. This registers the custom CSS with the app.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-custom-css-and-theme-colors-723f4b2.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n...\n  \"sap.ui5\": {\n\t...\t\n\t\"rootView\": {\n\t  ...\n\t},\n\t\"resources\": {\n\t  \"css\": [\n\t\t{\n\t\t  \"uri\": \"css/style.css\"\n\t\t}\n\t  ]\n\t}\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Defining OPA5 Arrangements\nDESCRIPTION: This JavaScript snippet defines an OPA5 arrangement to start the application in an iFrame. The `iStartMyApp` function starts the application using a relative path to the `index.html` file. This sets up the initial state for the OPA test.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/getting-started-with-opa5-22f175e.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Opa5\" required from \"sap/ui/test/Opa5\"\nvar arrangements = new Opa5({\n    iStartMyApp : function () {\n        return this.iStartMyAppInAFrame(\"../index.html\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Products Model in manifest.json (JSON)\nDESCRIPTION: This snippet adds a new entry named `products` to the `models` entry under `sap.ui5` in the `manifest.json` file. It defines a JSON model named `products` that points to the `Products.json` file.  This allows the application to access the product data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-12-aggregation-binding-using-templates-97830de.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n...\n\t\"sap.ui5\": {\n\t\t\"handleValidation\": true,\n\t\t\"dependencies\": {\n\t\t\t\"minUI5Version\": \"1.120.0\",\n\t\t\t\"libs\": {\n\t\t\t\t\"sap.m\": {},\n\t\t\t\t\"sap.ui.core\": {},\n\t\t\t\t\"sap.ui.layout\": {}\n\t\t\t}\n\t\t},\n\t\t\"models\": {\n\t\t\t\"\": {\n\t\t\t\t\"type\": \"sap.ui.model.json.JSONModel\",\n\t\t\t\t\"uri\": \"./model/data.json\"\n\t\t\t},\n\t\t\t\"products\" : {\n\t\t\t\t\"type\": \"sap.ui.model.json.JSONModel\",\n\t\t\t\t\"uri\": \"./model/Products.json\"\n\t\t\t},\n\t\t\t\"i18n\": {\n\t\t\t\t\"type\": \"sap.ui.model.resource.ResourceModel\",\n\t\t\t\t\"settings\": {\n\t\t\t\t\t\"bundleName\": \"ui5.databinding.i18n.i18n\",\n\t\t\t\t\t\"supportedLocales\": [\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\"de\"\n\t\t\t\t\t],\n\t\t\t\t\t\"fallbackLocale\": \"\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Data (Invoices.json)\nDESCRIPTION: Contains sample data for the Invoices entity set. This data is used by the mock server to simulate responses to OData requests. The filename must match the entity set name defined in the metadata.xml.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-26-mock-server-configuration-typescript-3e1c64f.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n\t\"ProductName\": \"Pineapple\",\n\t\"Quantity\": 21,\n\t\"ExtendedPrice\": 87.2,\n\t\"ShipperName\": \"Fun Inc.\",\n\t\"ShippedDate\": \"2015-04-01T00:00:00\",\n\t\"Status\": \"A\"\n  },\n  {\n\t\"ProductName\": \"Milk\",\n\t\"Quantity\": 4,\n\t\"ExtendedPrice\": 10,\n\t\"ShipperName\": \"ACME\",\n\t\"ShippedDate\": \"2015-02-18T00:00:00\",\n\t\"Status\": \"B\"\n  },\n  {\n\t\"ProductName\": \"Canned Beans\",\n\t\"Quantity\": 3,\n\t\"ExtendedPrice\": 6.85,\n\t\"ShipperName\": \"ACME\",\n\t\"ShippedDate\": \"2015-03-02T00:00:00\",\n\t\"Status\": \"B\"\n  },\n  {\n\t\"ProductName\": \"Salad\",\n\t\"Quantity\": 2,\n\t\"ExtendedPrice\": 8.8,\n\t\"ShipperName\": \"ACME\",\n\t\"ShippedDate\": \"2015-04-12T00:00:00\",\n\t\"Status\": \"C\"\n  },\n  {\n\t\"ProductName\": \"Bread\",\n\t\"Quantity\": 1,\n\t\"ExtendedPrice\": 2.71,\n\t\"ShipperName\": \"Fun Inc.\",\n\t\"ShippedDate\": \"2015-01-27T00:00:00\",\n\t\"Status\": \"A\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Corrected Mixing of Runtime and Metadata in Binding\nDESCRIPTION: This JavaScript code demonstrates the correct way to mix runtime and meta data by nesting expression bindings. It involves partial evaluation during XML templating and uses string literals and escaping to control the process.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-bindings-604b1eb.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{= '{= ${runtime<value} > ' + ${meta>threshold} + ' }' }\n```\n\n----------------------------------------\n\nTITLE: Create Overview View (OpenUI5 XML)\nDESCRIPTION: This XML code defines the `Overview` view, which includes `HelloPanel` and `InvoiceList` views. It reuses the App controller for simplicity.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-e5200ee.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.App\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    displayBlock=\"true\">\n    <Page title=\"{i18n>homePageTitle}\">\n        <content>\n            <mvc:XMLView viewName=\"ui5.walkthrough.view.HelloPanel\" />\n            <mvc:XMLView viewName=\"ui5.walkthrough.view.InvoiceList\" />\n        </content>\n    </Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: OData Error Message Example\nDESCRIPTION: This example demonstrates a common OData error message structure received from the backend when a change operation fails in a batch request. It includes an error code, message, severity, and target, which helps in identifying and handling errors in the UI. The `target` field being empty in this scenario can lead to duplicate messages if not handled correctly.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-messages-81c735e.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"code\": \"MYCODE/111\",\n  \"message\": \"Invalid input!\",\n  \"severity\": \"error\",\n  \"target\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to Button in HelloPanel View (XML)\nDESCRIPTION: This snippet demonstrates how to add an icon to a button in the `HelloPanel.view.xml` file.  The `icon` attribute of the `Button` control is used with the `sap-icon://` protocol to specify an icon from the SAP icon font. The `world` icon is used in this example. The button also has text bound to an i18n key.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-18-icons-typescript-49b1ac6.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.HelloPanel\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Panel\n      headerText=\"{i18n>helloPanelTitle}\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\" >\n      <content>\n         <Button\n            id=\"helloDialogButton\"\n            icon=\"sap-icon://world\"\n            text=\"{i18n>openDialogButtonText}\"\n            press=\".onOpenDialog\"\n            class=\"sapUiSmallMarginEnd\"/>\n         <Button\n            text=\"{i18n>showHelloButtonText}\"\n            press=\".onShowHello\"\n            class=\"myCustomButton\"/>\n         <Input\n            value=\"{/recipient/name}\"\n            valueLiveUpdate=\"true\"\n            width=\"60%\"/>\n         <FormattedText\n            htmlText=\"Hello {/recipient/name}\"\n            class=\"sapUiSmallMargin sapThemeHighlight-asColor myCustomText\"/>\n      </content>\n   </Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Detail Page on Item Press (JavaScript)\nDESCRIPTION: This JavaScript snippet defines an `onPress` event handler in the controller that navigates to the \"detail\" route when an item in the invoice list is pressed. It uses `UIComponent.getRouterFor(this)` to access the router instance and then calls `router.navTo(\"detail\")` to trigger the navigation. The `detail` route must be defined in the application's descriptor file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-typescript-6173e3d.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport { SearchField$SearchEvent } from \"sap/m/SearchField\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport ListBinding from \"sap/ui/model/ListBinding\";\nimport UIComponent from \"sap/ui/core/UIComponent\";\n\n/**\n * @namespace ui5.walkthrough.controller\n */\nexport default class App extends Controller {\n\t\t…\n    onPress(): void {\n        const router = UIComponent.getRouterFor(this);\n        router.navTo(\"detail\");\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Limiting Blanket.js instrumentation to multiple files via HTML\nDESCRIPTION: This snippet demonstrates how to limit Blanket.js instrumentation to multiple files using the `data-sap-ui-cover-only` attribute.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../resources/sap/ui/qunit/qunit-coverage.js\"\n\tdata-sap-ui-cover-only=\"[sap/ui/core/Popup.js, sap/ui/core/EventProvider]\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Stock Level Formatter\nDESCRIPTION: This JavaScript snippet defines a formatter function named `quantityState` that determines the `ValueState` based on the stock level of a product.  It returns `ValueState.Error` for zero stock, `ValueState.Warning` for stock levels less than or equal to 10, and `ValueState.Success` for stock levels greater than 10.  It requires the `sap/ui/core/library` dependency to access `sap.ui.core.ValueState`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-extending-the-worklist-table-84100bc.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/library\"\n] , function (coreLibrary) {\n    \"use strict\";\n\n\t// shortcut for sap.ui.core.ValueState\n\tvar ValueState = coreLibrary.ValueState;\n\n\n\treturn {\n\n\t\t...\n\t\t},\n\n\t\t/**\n\t\t * Defines a value state based on the stock level\n\t\t *\n\t\t * @public\n\t\t * @param {number} iValue the stock level of a product\n\t\t * @returns {string} sValue the state for the stock level\n\t\t */\n\t\tquantityState: function(iValue) {\n\t\t\tif (iValue === 0) {\n\t\t\t\treturn ValueState.Error;\n\t\t\t} else if (iValue <= 10) {\n\t\t\t\treturn ValueState.Warning;\n\t\t\t} else {\n\t\t\t\treturn ValueState.Success;\n\t\t\t}\n\t\t}\n\n\n\t};\n\n});\n```\n\n----------------------------------------\n\nTITLE: Using Properties Matcher in OPA\nDESCRIPTION: This code snippet demonstrates how to use the `sap.ui.test.matchers.Properties` matcher to find a `sap.m.StandardListItem` control that has a `text` property matching a regular expression and a `selected` property set to `true`. It uses `Opa5` to wait for the control and then asserts that the item is selected.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn new Opa5().waitFor({\n            controlType : \"sap.m.StandardListItem\",\n            matchers : new sap.ui.test.matchers.Properties({\n                text: new RegExp(\"laptop\", \"i\"),\n                selected: true\n            }),\n            success : function (aItems) {\n                Opa5.assert.ok(aItems[0], \"Item is selected\")\n            },\n            errorMessage: \"No selected item found\"\n});\n```\n\n----------------------------------------\n\nTITLE: Aggregation Binding with Templates in XML View (OpenUI5)\nDESCRIPTION: This code snippet illustrates how to use aggregation binding with templates in an OpenUI5 XML view. The `List` control's `items` aggregation is bound to the `/Products` model, and a `StandardListItem` template is used to display the `Name` and `Text` properties of each product in the model. Avoid complex or nested controls in aggregation templates for better performance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/keep-your-views-short-and-simple-b0d7db7.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<List\n\titems={/Products}>\n\t<StandardListItem\n\t\ttitle=\"{Name}\"\n\t\tdescription=\"{Text}\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining the Price Formatter in JavaScript\nDESCRIPTION: This JavaScript code defines a formatter function that determines the state of a price based on its value. It returns a semantic state (Success, None, Warning, Error) based on price ranges. It is dependent on the OpenUI5 library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-adding-the-price-formatter-2bf4892.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([], function () {\n\t   \"use strict\";\n\n\t   return {\n\t\t     numberUnit: function (sValue) {\n\t\t\t// …\n\t\t     },\n\t\t     /**\n\t\t     * Defines a value state based on the price\n\t\t     *\n\t\t     * @public\n\t\t     * @param {number} iPrice the price of a post\n\t\t     * @returns {string} sValue the state for the price\n\t\t     */\n\t\t     priceState: function (iPrice) {\n\t\t\t   if (iPrice < 50) {\n\t\t\t\t  return \"Success\";\n\t\t\t   } else if (iPrice >= 50 && iPrice < 250) {\n\t\t\t\t  return \"None\";\n\t\t\t   } else if (iPrice >= 250 && iPrice < 2000) {\n\t\t\t\t  return \"Warning\";\n\t\t\t   } else {\n\t\t\t\t  return \"Error\";\n\t\t\t   }\n\t\t  }\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Using `sap.m` as Default Namespace in XML View (OpenUI5)\nDESCRIPTION: This code snippet shows how to use the `sap.m` namespace as the default in an OpenUI5 XML view. It also demonstrates how to define additional namespaces with short aliases, such as `l` for `sap.ui.layout`. This simplifies control declaration and keeps the code clean.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/keep-your-views-short-and-simple-b0d7db7.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.m\"\n\txmls:l=\"sap.ui.layout\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<App>\n\t\t<Page>\n\t\t\t<l:HorizontalLayout>\n\t\t\t...\n\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to Button in HelloPanel.view.xml\nDESCRIPTION: This snippet shows how to add an icon to a button in the HelloPanel view using the `icon` property. The `sap-icon://world` protocol specifies that the icon should be loaded from the SAP icon font, with `world` being the icon's identifier. This icon will be displayed next to the button's text.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-18-icons-776f735.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.HelloPanel\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Panel\n      headerText=\"{i18n>helloPanelTitle}\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\" >\n      <content>\n         <Button\n            id=\"helloDialogButton\"\n            icon=\"sap-icon://world\"\n            text=\"{i18n>openDialogButtonText}\"\n            press=\".onOpenDialog\"\n            class=\"sapUiSmallMarginEnd\"/>\n         <Button\n            text=\"{i18n>showHelloButtonText}\"\n            press=\".onShowHello\"\n            class=\"myCustomButton\"/>\n         <Input\n            value=\"{/recipient/name}\"\n            valueLiveUpdate=\"true\"\n            width=\"60%\"/>\n         <FormattedText\n            htmlText=\"Hello {/recipient/name}\"\n            class=\"sapUiSmallMargin sapThemeHighlight-asColor myCustomText\"/>\n      </content>\n   </Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Points in JS View (Simplest)\nDESCRIPTION: This JavaScript snippet shows the simplest way to define an extension point within the `createContent` method of an OpenUI5 JS view. It uses the `sap.ui.extensionpoint` function, passing the view instance and the extension point name. This creates an extension point without any default content.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-extension-403c050.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[...] \n      createContent(oController){\n           return sap.ui.extensionpoint(this, \"extension4\");\n      }\n[...]\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Shell Control in App View (XML)\nDESCRIPTION: This XML snippet demonstrates how to embed an `sap.m.Shell` control around the `App` control in the `App.view.xml` file. The `Shell` control acts as the outermost container, managing the app's appearance and adapting to different screen sizes by introducing a letterbox effect on larger screens. The shell wraps the App control which then includes the Pages and their content.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-12-shell-control-as-container-typescript-4af44cb.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n\t<Shell>\n\t\t<App>\n\t\t\t<pages>\n\t\t\t\t<Page title=\"{i18n>homePageTitle}\">\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<Panel\n\t\t\t\t\t\t\theaderText=\"{i18n>helloPanelTitle}\">\n\t\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttext=\"{i18n>showHelloButtonText}\"\n\t\t\t\t\t\t\t\t\tpress=\".onShowHello\"/>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tvalue=\"{/recipient/name}\"\n\t\t\t\t\t\t\t\t\tdescription=\"Hello {/recipient/name}\"\n\t\t\t\t\t\t\t\t\tvalueLiveUpdate=\"true\"\n\t\t\t\t\t\t\t\t\twidth=\"60%\"/>\n\t\t\t\t\t\t\t</content>\n\t\t\t\t\t\t</Panel>\n\t\t\t\t\t</content>\n\t\t\t\t</Page>\n\t\t\t</pages>\n\t\t</App>\n\t</Shell>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Product Entity Definition\nDESCRIPTION: This XML snippet shows the definition of the `Product` entity within the metadata of the OData service. It includes properties like `ProductID`, `ProductName`, `SupplierID`, `UnitPrice`, etc., and defines a `NavigationProperty` named `Supplier` which establishes a relationship between `Product` and `Supplier` entities. This relationship allows expanding supplier information with product data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-extending-the-worklist-table-84100bc.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<EntityType Name=\"Product\">\n    <Key>\n        <PropertyRef Name=\"ProductID\"/>\n    </Key>\n    <Property\n        xmlns:p8=\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\" Name=\"ProductID\" Type=\"Edm.Int32\" Nullable=\"false\" p8:StoreGeneratedPattern=\"Identity\"/>\n        <Property Name=\"ProductName\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"40\" Unicode=\"true\" FixedLength=\"false\"/>\n        <Property Name=\"SupplierID\" Type=\"Edm.Int32\" Nullable=\"true\"/>\n        <Property Name=\"CategoryID\" Type=\"Edm.Int32\" Nullable=\"true\"/>\n        <Property Name=\"QuantityPerUnit\" Type=\"Edm.String\" Nullable=\"true\" MaxLength=\"20\" Unicode=\"true\" FixedLength=\"false\"/>\n        <Property Name=\"UnitPrice\" Type=\"Edm.Decimal\" Nullable=\"true\" Precision=\"19\" Scale=\"4\"/>\n        <Property Name=\"UnitsInStock\" Type=\"Edm.Int16\" Nullable=\"true\"/>\n        <Property Name=\"UnitsOnOrder\" Type=\"Edm.Int16\" Nullable=\"true\"/>\n        <Property Name=\"ReorderLevel\" Type=\"Edm.Int16\" Nullable=\"true\"/>\n        <Property Name=\"Discontinued\" Type=\"Edm.Boolean\" Nullable=\"false\"/>\n        <NavigationProperty Name=\"Category\" Relationship=\"NorthwindModel.FK_Products_Categories\" FromRole=\"Products\" ToRole=\"Categories\"/>\n        <NavigationProperty Name=\"Order_Details\" Relationship=\"NorthwindModel.FK_Order_Details_Products\" FromRole=\"Products\" ToRole=\"Order_Details\"/>\n        <NavigationProperty Name=\"Supplier\" Relationship=\"NorthwindModel.FK_Products_Suppliers\" FromRole=\"Products\" ToRole=\"Suppliers\"/>\n    </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Text Control with Constructor - JavaScript\nDESCRIPTION: This code snippet demonstrates how to create an OpenUI5 Text control using a constructor with an ID and an object containing property settings. It sets the text, tooltip, and width of the control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/working-with-controls-91f0a22.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// required from sap/m/Text\nvar oText = new Text(\"testText\",\n{text : \"Hello World\", tooltip: \"This is an example tooltip\", width: \"100px\"});\n```\n\n----------------------------------------\n\nTITLE: Attaching bypassed and routeMatched event handlers to the router\nDESCRIPTION: This code snippet shows how to attach bypassed and routeMatched event handlers to the router in the onInit function of the App controller. The bypassed event handler logs an error message when an invalid hash is accessed. The routeMatched event handler logs the route name and timestamp when a route is successfully matched. The BaseController is extended, and the Log module is used for logging.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-17-listen-to-matched-events-of-any-route-4a063b8.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\",\n\t\"sap/base/Log\"\n], function (BaseController, Log) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.App\", {\n\t\tonInit: function () {\n\t\t\t// This is ONLY for being used within the tutorial.\n\t\t\t// The default log level of the current running environment may be higher than INFO,\n\t\t\t// in order to see the debug info in the console, the log level needs to be explicitly\n\t\t\t// set to INFO here.\n\t\t\t// But for application development, the log level doesn't need to be set again in the code.\n\t\t\tLog.setLevel(Log.Level.INFO);\n\n\t\t\tvar oRouter = this.getRouter();\n\t\t\toRouter.attachBypassed(function (oEvent) {\n\t\t\t\tvar sHash = oEvent.getParameter(\"hash\");\n\t\t\t\t// do something here, i.e. send logging data to the back end for analysis\n\t\t\t\t// telling what resource the user tried to access...\n\t\t\t\tLog.info(\"Sorry, but the hash '\" + sHash + \"' is invalid.\", \"The resource was not found.\");\n\t\t\t});\n\t\t\toRouter.attachRouteMatched(function (oEvent){\n\t\t\t\tvar sRouteName = oEvent.getParameter(\"name\");\n\t\t\t\t// do something, i.e. send usage statistics to back end\n\t\t\t\t// in order to improve our app and the user experience (Build-Measure-Learn cycle)\n\t\t\t\tLog.info(\"User accessed route \" + sRouteName + \", timestamp = \" + Date.now());\n\t\t\t});\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Loading and Placing XML View\nDESCRIPTION: This snippet shows how to load and display an XML view in OpenUI5. It uses sap.ui.define to load the XMLView module and then uses the XMLView.create factory function to instantiate the view. Finally, it places the view in the \"content\" area of the HTML page.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-xml-views-1409791.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/XMLView\"\n], (XMLView) => {\n\t\"use strict\";\n\n\tXMLView.create({\n\t\tviewName: \"ui5.walkthrough.view.App\"\n\t}).then((oView) => oView.placeAt(\"content\"));\n});\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Model Values w/ Metadata (OData V4)\nDESCRIPTION: This JavaScript code demonstrates how to initialize valid model values without an existing data binding in OData V4. It retrieves the data type from the metadata using the list binding and the model's meta model. This is used to format a UI5Date instance before creating a new item in the list. Dependencies include UI5Date and Controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/date/UI5Date\",\n    \"sap/ui/core/mvc/Controller\"\n], function (UI5Date, Controller) {\n    \"use strict\";         \n \n    return Controller.extend(\"myController\", {        \n        onCreateItem() {\n            const oDeliveryDate = UI5Date.getInstance();\n                // Get the data type via the metadata    \n                oListBinding = this.byId(\"SO_2_SOITEM\").getBinding(\"items\"),\n                sPath = oListBinding.getHeaderContext().getPath() + \"/DeliveryDate\",\n                oType = oListBinding.getModel().getMetaModel().getUI5Type(sPath);     \n \n            oDeliveryDate.setMonth(oDeliveryDate.getMonth() + 1);       \n            oListBinding.create({\n                DeliveryDate: oType.getModelValue(oDeliveryDate)\n            });\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing German Resource Bundle with URL Parameter\nDESCRIPTION: This snippet describes how to test the created German resource bundle by appending the `sap-language=DE` URL parameter to the application's URL. This forces the application to use the German locale, allowing you to verify that the translated text is displayed correctly. Removing the parameter reverts the application to the browser's default language.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-optional-resource-bundles-and-multiple-languages-4e593b4.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nhttp://localhost:port/index.html?sap-language=DE\n```\n\n----------------------------------------\n\nTITLE: Setting OpenUI5 Theme with URL Parameter\nDESCRIPTION: This snippet demonstrates how to set the OpenUI5 theme using the `sap-ui-theme` URL parameter.  This allows users to easily switch between different themes, such as `sap_horizon_hcb` or `sap_horizon_hcw`, without modifying the application's code. The URL parameter is appended to the application's URL.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/colors-and-theming-086c41c.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsap-ui-theme=sap_horizon_hcb\n```\n\n----------------------------------------\n\nTITLE: Composite Binding Constructor with Types - JS\nDESCRIPTION: This code snippet demonstrates how to create a composite binding in the constructor of an OpenUI5 control, specifying types for the individual binding parts. It binds the 'value' property of an Input control to the 'firstName', 'lastName' (from the default model), and 'amount' (from 'myModel2') properties. StringType and Float types are explicitly defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/composite-binding-a2fe8e7.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// \"Input\" required from module \"sap/m/Input\"\n// \"StringType\" required from module \"sap/ui/model/type/String\"\n// \"Float\" required from module \"sap/ui/model/type/Float\"\n\noTxt = new Input({\n    value: {\n        parts: [\n            {path: \"/firstName\", type: StringType},\n            {path: \"/lastName\"},\n            {path: \"myModel2>/amount\", type: Float} // path to property in another model\n        ]\n    }\n}); \n```\n\n----------------------------------------\n\nTITLE: Binding Date Ranges with EDM types to DateRangeSelection - XML\nDESCRIPTION: This code binds two dates (Edm.DateTime or Edm.DateTimeOffset) from the backend to a DateRangeSelection control. The DateInterval type from 'sap/ui/model/type/DateInterval' is used to handle the date range. The UTC and format options are specified for the DateInterval type.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/date-and-time-related-controls-data-binding-e1ddc69.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<DateRangeSelection \n    core:require=\"{\n        DateInterval: 'sap/ui/model/type/DateInterval'\n    }\"\n    value=\"{\n        parts: [{path: 'EntryDate'}, {path: 'EntryDateTimeOffset'}],\n        type: 'DateInterval',\n        formatOptions: { UTC: true, format: 'yMd' }\n    }\"/>\n```\n\n----------------------------------------\n\nTITLE: JSON Model with Custom Data (OpenUI5)\nDESCRIPTION: Creates a JSON model with custom data, including a 'color' property for each entry. This model is used to demonstrate how custom data can be passed to the cell template for use in custom export types.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-data-binding-for-data-export-f1ee7a8.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// \"JSONModel\" required from module \"sap/ui/model/json/JSONModel\"\nvar oModel = new JSONModel([\n    {\n        firstname: \"Al\",\n        lastname: \"Dente\",\n        color: \"red\"\n    },\n    {\n        firstname: \"Andy\",\n        lastname: \"Friese\",\n        color: \"black\"\n    },\n    {\n        firstname: \"Anita\",\n        lastname: \"Mann\",\n        color: \"yellow\"\n    },\n    {\n        firstname: \"Doris\",\n        lastname: \"Schutt\",\n        color: \"green\"\n    },\n    {\n        firstname: \"Kenya\",\n        lastname: \"Dewit\",\n        color: \"blue\"\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining the NotFound View with a Back Button in XML (OpenUI5)\nDESCRIPTION: This XML snippet defines the structure of the `NotFound` view, incorporating a `MessagePage` control. The `showNavButton` property is set to `true` to display a back button, and the `navButtonPress` event is bound to the `onNavBack` event handler in the associated controller, enabling navigation when the button is pressed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-add-a-back-button-to-not-found-page-66670b0.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.NotFound\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<MessagePage\n\t\ttitle=\"{i18n>NotFound}\"\n\t\ttext=\"{i18n>NotFound.text}\"\n\t\tdescription=\"{i18n>NotFound.description}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\"onNavBack\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding Proxy Script to package.json\nDESCRIPTION: This snippet shows how to add a `devDependency` for a proxy server and a `proxy` script to the `package.json` file. The `devDependency` specifies the proxy package to be installed (e.g., `myProxy`), and the `proxy` script allows running the proxy server using `npm run proxy`. The version of `myProxy` is indicated as `^x.y.z`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/request-fails-due-to-same-origin-policy-cross-origin-resource-sharing-cors-672301f.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"name\": \"Sample-Package\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"Sample package.json\",\n\t\"scripts\": {\n\t\t\"proxy\": \"node proxy.js\"\n\t},\n\t\"devDependencies\": {\n\t\t\"myProxy\": \"^x.y.z\"\n\t},\n\t\"dependencies\": {\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Device Model in Component.js (OpenUI5)\nDESCRIPTION: This code snippet shows how to initialize a JSON model with device information using `sap.ui.Device` in the `init` function of a UI5 Component. The device model is then set as a named model ('device') for use in views. The binding mode is set to 'OneWay'.\nDependencies: sap/ui/core/UIComponent, sap/ui/model/json/JSONModel, sap/ui/Device.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/device-adaptation-using-device-models-for-your-app-8dbd35e.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], function (UIComponent, JSONModel, Device) {\n\n[…]\n\ninit: function () {\n// set the device model\n\tvar oDeviceModel = new JSONModel(Device);\n\toDeviceModel.setDefaultBindingMode(\"OneWay\");\n\tthis.setModel(oDeviceModel, \"device\");\n\n[…]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extending App Controller from Base Controller (OpenUI5 JavaScript)\nDESCRIPTION: This JavaScript snippet updates the `App` controller to extend from the `BaseController`, ensuring consistent navigation handling throughout the application. The dependency is updated from `sap/ui/core/mvc/Controller` to `sap/ui/demo/nav/controller/BaseController`. This leverages the common `onNavBack` functionality defined in the `BaseController`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-add-a-back-button-to-not-found-page-66670b0.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.App\", {\n\t\tonInit: function () {\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Fragment Using Fragment.load with ID\nDESCRIPTION: This JavaScript code demonstrates how to load a fragment using `Fragment.load` with a specified ID. The IDs of the controls inside the fragment will be prefixed with the provided ID. While seemingly simple, it's noted that the exact prefixing syntax should not be relied upon, as containing views might add their own prefixes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/ids-in-declarative-fragments-0715706.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Fragment\"], function(Fragment){\n   Fragment.load({\n      name: \"my.useful.UiPartZ\",\n      id: \"myFragment\"\n   }).then(function(oFragment){\n      // ...\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Detail Page Fields to i18n Properties - INI\nDESCRIPTION: This INI code adds text-value pairs for \"Shipped date\" and \"quantity\" to the `i18n.properties` file. These entries are used to display localized labels for these fields on the detail page of the application. These are used to define the strings that are used in the detail view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-35-device-adaptation-typescript-ab8ed1b.md#_snippet_3\n\nLANGUAGE: INI\nCODE:\n```\n# Detail Page\ndetailPageTitle=Walkthrough - Details\nratingConfirmation=You have rated this product with {0} stars\ndateTitle=Order date\nquantityTitle=Quantity\n```\n\n----------------------------------------\n\nTITLE: Adding sap.f Dependency in manifest.json (OpenUI5)\nDESCRIPTION: This code snippet shows how to add the `sap.f` library as a dependency in the `manifest.json` file. This is a prerequisite for using the `sap.f.FlexibleColumnLayout` control. The `minUI5Version` ensures that the application uses a compatible version of UI5.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-creating-an-empty-flexible-column-layout-bf38e4d.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"_version\": \"1.38.0\",\n\t\"sap.app\": {\n\t\t\"id\": \"sap.ui.demo.fcl\",\n\t\t\"type\": \"application\",\n\t\t\"applicationVersion\": {\n\t\t\t\"version\": \"1.0.0\"\n\t\t}\n\t},\n\t\"sap.ui5\": {\n\t\t\"rootView\": {\n\t\t\t\"viewName\": \"sap.ui.demo.fcl.view.App\",\n\t\t\t\"type\": \"XML\",\n\t\t\t\"async\": true,\n\t\t\t\"id\": \"fcl\"\n\t\t},\n\t\t\"dependencies\": {\n\t\t\t\"minUI5Version\": \"1.98.0\",\n\t\t\t\"libs\": {\n\t\t\t\t\"sap.f\": {},\n\t\t\t\t\"sap.ui.core\": {}\n\t\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Float Type with Custom Pattern - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `Float` type with a custom output pattern. The example configures minimum and maximum digits for both integer and fraction parts, enables grouping with a comma separator, and specifies a dot as the decimal separator.  Parameters not specified will use default pattern values.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-float-91f30db.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noType = new TypeFloat({\n  minIntegerDigits: 1, // minimal number of non-fraction digits\n  maxIntegerDigits: 99, // maximal number of non-fraction digits\n  minFractionDigits: 0, // minimal number of fraction digits\n  maxFractionDigits: 99, // maximal number of fraction digits\n  groupingEnabled: true, // enable grouping (show the grouping separators)\n  groupingSeparator: \",\", // the used grouping separator\n  decimalSeparator: \".\" // the used decimal separator\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Component.js: Initializing the model\nDESCRIPTION: This code snippet initializes the JSON model within the `Component.js` file. The `init` method is extended to load the `products.json` file and sets it as the 'products' model for the application. The `setSizeLimit` method is used to increase the default size limit of the JSON model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-using-dynamic-page-for-the-list-view-0830bce.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t'sap/ui/core/UIComponent',\n\t'sap/ui/model/json/JSONModel'\n], function(UIComponent, JSONModel) {\n\t'use strict';\n\n\treturn UIComponent.extend('sap.ui.demo.fcl.Component', {\n\n\t\tmetadata: {\n\t\t\tmanifest: 'json'\n\t\t},\n\n\t\tinit: function () {\n\t\t\tvar oProductsModel;\n\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// set products demo model on this sample\n\t\t\toProductsModel = new JSONModel(sap.ui.require.toUrl('sap/ui/demo/mock/products.json'));\n\t\t\toProductsModel.setSizeLimit(1000);\n\t\t\tthis.setModel(oProductsModel, 'products');\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Data into JSON Model from URL (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to load JSON data from a specified URL into the JSON model using the `loadData` method. The data is loaded asynchronously.  The URL should point to a valid JSON file. No error handling is included.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/json-model-96804e3.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\noModel.loadData(\"data.json\");\n```\n\n----------------------------------------\n\nTITLE: OpenUI5 View Replacement Configuration\nDESCRIPTION: This JavaScript snippet shows the configuration required to replace a standard view with a custom view using the 'sap.ui.viewReplacements' extension. It maps the original view name ('samples.components.ext.sap.Sub1') to the custom view name ('samples.components.ext.customer.CustomSub1') and specifies the view type as 'XML'. This configuration is part of the component's extensions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-replacement-98861cf.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nextensions: {\n    .....some more content\n    \"sap.ui.viewReplacements\": {\n        \"samples.components.ext.sap.Sub1\": {\n            viewName: \"samples.components.ext.customer.CustomSub1\",\n            type: \"XML\"\n        }\n    },\n    .....some more content\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull to Refresh with sap.m.PullToRefresh - JavaScript\nDESCRIPTION: This code snippet demonstrates how to implement the pull-to-refresh functionality using the `sap.m.PullToRefresh` control in OpenUI5.  It shows how to instantiate the control, set the description, define the refresh event handler to request new data and update the UI. When new data is received the hide method will be invoked.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/scrolling-pull-to-refresh-fde4015.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar pullToRefresh = new sap.m.PullToRefresh({ description: getLastUpdatedTime(), refresh: function(){\n    pullToRefresh.setDescription(\"loading from server...\"); \n  //request new data from server     \n  getNewData({ \n    // when data comes from server  \n    onSuccess: {\n      pullToRefresh.hide();\n      pullToRefresh.setDescription(getLastUpdatedTime());\n      redrawList(); } }); }; \n```\n\n----------------------------------------\n\nTITLE: i18n App Configuration in manifest.json\nDESCRIPTION: This code snippet shows how to configure the i18n settings within the `sap.app` section of the `manifest.json` file, specifically for AppDescriptor version 1.21.0 or later. The `bundleUrl` property specifies the location of the i18n properties file, and the `supportedLocales` and `fallbackLocale` settings define the available languages and the default fallback language respectively. This configuration ensures that the correct language resources are loaded for the application based on the user's locale.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/performance-speed-up-your-app-408b40e.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"sap.app\": {\n\t\t\"i18n\": {\n\t\t\t\"bundleUrl\": \"i18n/i18n.properties\",\n\t\t\t\"supportedLocales\": [\"en\", \"de\"],\n\t\t\t\"fallbackLocale\": \"en\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using IconTabBar for Navigation in XML - SAPUI5\nDESCRIPTION: This XML snippet demonstrates replacing the default anchor bar with a sap.m.IconTabBar for navigation within an ObjectPageLayout.  The `useIconTabBar` property set to `true` enables the IconTabBar and automatically hides the default anchor bar. No specific dependencies are needed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/anchor-bar-370b679.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ObjectPageLayout id=\"ObjectPageLayout\" useIconTabBar=\"true\">\n</ObjectPageLayout>\n```\n\n----------------------------------------\n\nTITLE: Binding to Edm.GeographyPoint properties\nDESCRIPTION: This XML snippet shows how to bind to the properties of an Edm.GeographyPoint complex type in an OpenUI5 application. It demonstrates binding to the 'bbox', 'coordinates', and 'type' properties of the GeographyPoint. It uses expression binding with JSON.stringify for the bbox property and direct binding to array elements within bbox and coordinates.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/type-determination-53cdd55.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<FlexBox binding=\"{/Person('42')/Address/GeoLocation}\">\n    <Text id=\"bbox\" text=\"{= JSON.stringify(%{bbox}) }\"/>\n    <Text id=\"west\" text=\"{bbox/0}\"/>\n    <Text id=\"south\" text=\"{bbox/1}\"/>\n    <Text id=\"east\" text=\"{bbox/2}\"/>\n    <Text id=\"north\" text=\"{bbox/3}\"/>\n    <Text id=\"longitude\" text=\"{coordinates/0}\"/>\n    <Text id=\"latitude\" text=\"{coordinates/1}\"/>\n    <Text id=\"type\" text=\"{type}\"/>\n</FlexBox>\n```\n\n----------------------------------------\n\nTITLE: Define PostJourney OPA tests\nDESCRIPTION: This code defines an OPA journey called 'Post' that tests navigation to the Post page, back to the Worklist page, and forward again using browser history.  It uses actions and assertions defined in separate page objects (Worklist, Browser, Post). It utilizes QUnit for test structure and sap.ui.test.opaQunit for OPA integration.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-testing-navigation-10592af.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*global QUnit*/\nsap.ui.define([\n\t\"sap/ui/test/opaQunit\",\n\t\"./pages/Worklist\",\n\t\"./pages/Browser\",\n\t\"./pages/Post\"\n], function (opaTest) {\n\t\"use strict\";\n\n\tQUnit.module(\"Post\");\n\n\topaTest(\"Should see the post page when a user clicks on an entry of the list\", function (Given, When, Then) {\n\t\t// Arrangements\n\t\tGiven.iStartMyApp();\n\n\t\t//Actions\n\t\tWhen.onTheWorklistPage.iPressOnTheItemWithTheID(\"PostID_15\");\n\n\t\t// Assertions\n\t\tThen.onThePostPage.theTitleShouldDisplayTheName(\"Jeans\");\n\t});\n\n\topaTest(\"Should go back to the TablePage\", function (Given, When, Then) {\n\t\t// Actions\n\t\tWhen.onThePostPage.iPressTheBackButton();\n\n\t\t// Assertions\n\t\tThen.onTheWorklistPage.iShouldSeeTheTable();\n\t});\n\n\topaTest(\"Should be on the post page again when the browser's forward button is pressed\", function (Given, When, Then) {\n\t\t// Actions\n\t\tWhen.onTheBrowser.iPressOnTheForwardButton();\n\n\t\t// Assertions\n\t\tThen.onThePostPage.theTitleShouldDisplayTheName(\"Jeans\");\n\n\t\t// Cleanup\n\t\tThen.iTeardownMyApp();\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Controls by Field Group ID with Control Class\nDESCRIPTION: This code snippet shows how to use the static `getControlsByFieldGroupId` method of the `sap.ui.core.Control` class to retrieve controls based on their field group IDs. It demonstrates retrieving all controls with any field group ID and all controls with a specific field group ID.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/field-groups-5b07753.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Control\" required from module \"sap/ui/core/Control\"\nvar aAllControlsWithFieldGroupId = Control.getControlsByFieldGroupId();              //all where fieldGroupId is not empty \nvar aMyGroupControls             = Control.getControlsByFieldGroupId(\"MyGroup\");     //exact matches to myGroup \n```\n\n----------------------------------------\n\nTITLE: Creating an Enumeration (Enum) Type\nDESCRIPTION: This code snippet illustrates how to create an enumeration (enum) type in OpenUI5 using `DataType.registerEnum`. It defines an object literal representing the enum and registers it with a specific name. Requires `sap/ui/base/DataType`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-control-properties-ac56d92.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\"sap/ui/base/DataType\"], (DataType) => {\n    /**\n    * Enumeration of possible value color settings.\n    * \n    * @enum {string}\n    * @public\n    */\n    const ValueColor = {\n        /**\n        * Neutral value color.\n        * @public\n        */\n        Neutral : \"Neutral\",\n        …\n    };\n    // Register enum type\n    DataType.registerEnum(\"sap.m.ValueColor\", ValueColor);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting CSS stylesheet name in JavaScript\nDESCRIPTION: This function determines whether a given CSS stylesheet is inline or external. It checks the `href` property of the stylesheet. If `href` is empty, it returns 'Inline'; otherwise, it returns the `href` value (the path to the stylesheet).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/common-rule-patterns-3fc1412.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetStyleSheetName: function(styleSheet) {\n  return styleSheet.href || \"Inline\";\n},\n\n```\n\n----------------------------------------\n\nTITLE: Defining Views for Collapsed/Expanded Modes in JS\nDESCRIPTION: This JavaScript snippet illustrates how to define views for different modes (Collapsed and Expanded) within a `BlockBase` extension.  The `views` metadata section is used to specify the view name and type for each mode. Using XML views is recommended when no templating is needed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-blocks-4527729.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.uxap.BlockBase.extend(\"<BlockName>\", {\n            metadata: {\n                views: {\n                    Collapsed: {\n                        viewName: \"<collapsedViewName>\",\n                        type: \"XML\"\n                    },\n                    Expanded: {\n                        viewName: \"<expendedViewName>\",\n                        type: \"XML\"\n    \n                    }\n                }\n             }\n         });\n```\n\n----------------------------------------\n\nTITLE: Creating package.json - npm\nDESCRIPTION: This `package.json` file defines the project's metadata, dependencies, and scripts. The `start` script is configured to use UI5 tooling to serve the application using `ui5 serve -o index.html`, which opens `index.html` in the browser.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-2680aa9.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ui5.walkthrough\",\n  \"version\": \"1.0.0\",\n  \"description\": \"The UI5 walkthrough application\",\n  \"scripts\": {\n      \"start\": \"ui5 serve -o index.html\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Placing sap.m.Text Control in JavaScript\nDESCRIPTION: This JavaScript code defines an OpenUI5 module that creates and places a `sap.m.Text` control in the HTML body.  It uses `sap.ui.define` to define the module and its dependencies. The `placeAt` method attaches the control to the DOM element with the ID \"content\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-controls-ddbceec.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/m/Text\"\n], (Text) => {\n\t\"use strict\";\n\n\tnew Text({\n\t\ttext: \"Hello World\"\n\t}).placeAt(\"content\");\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Anchor Bar Button Press Event - SAPUI5\nDESCRIPTION: This XML snippet extends the previous example by adding a `press` event handler to the custom anchor bar button.  This allows custom logic to be executed when the button is pressed, in addition to the default scrolling behavior. The type is specified as transparent.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/anchor-bar-370b679.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<ObjectPageSection>\n    <customAnchorBarButton>\n        <m:Button text=\"Employee Info\" press=\"handleAnchorBarPress\" type=\"Transparent\"/>\n    </customAnchorBarButton>\n</ObjectPageSection>\n```\n\n----------------------------------------\n\nTITLE: Complex Syntax with Controller Formatter - XML\nDESCRIPTION: This XML snippet shows how to use an existing formatter function from the controller. The 'text' property of a Text control is bound to 'gender', 'firstName', and 'lastName' properties, using the '.myGenderFormatter' from the controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/composite-binding-a2fe8e7.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Text text=\"{path: 'gender', formatter: '.myGenderFormatter'} {firstName}, {lastName}\"/>\n```\n\n----------------------------------------\n\nTITLE: Calling XML Preprocessor\nDESCRIPTION: This JavaScript snippet shows how to call the XML preprocessor when creating a view. It defines the `models`, `preprocessors`, `type`, and `viewName` properties. It also demonstrates how to bind the resulting view to an element.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-templating-5ee619f.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n1   View.create({\n2      models : oModel,\n3      preprocessors : {\n4         xml : {\n5            bindingContexts : {\n6               meta : oMetaModel.getMetaContext(sPath)\n7            },\n8            models : {\n9              meta : oMetaModel\n10           }\n11        }\n12     },\n13     type : ViewType.XML,\n14     viewName : \"sap.ui.core.sample.ViewTemplate.tiny.Template\"\n15  }).then(function (oTemplateView) {\n16     oTemplateView.bindElement(sPath);\n17     ...\n18  }\n```\n\n----------------------------------------\n\nTITLE: Enhancing Resource Model with Custom Bundle - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to enhance a `sap.ui.model.resource.ResourceModel` with a custom resource bundle. It initializes a ResourceModel with a base bundle URL and then enhances it with another bundle URL, allowing for custom text overrides or additions.  The `bundleUrl` parameters specify the location of the properties files. The first bundle is the original, and the second bundle (`messages_custom.properties`) is the custom one.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/localized-texts-for-extended-apps-2edc3f9.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oModel = new sap.ui.model.resource.ResourceModel({bundleUrl:\"./testdata/messages.properties\"});\noModel.enhance({bundleUrl:\"./testdata/messages_custom.properties\"});\n```\n\n----------------------------------------\n\nTITLE: Load and Instantiate Custom Data Type - Worklist.controller.js\nDESCRIPTION: This JavaScript code updates the `Worklist.controller.js` file to load the custom `FlaggedType` data type. The `FlaggedType` is instantiated and assigned to the `types` property of the controller, making it accessible in the view via `.types.flagged`. The controller now has a reference to the custom data type, which is used for the toggle button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-adding-a-flag-button-69a25bf.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t'./BaseController',\n\t'sap/ui/model/json/JSONModel',\n\t'../model/formatter',\n\t'../model/FlaggedType',\n\t'sap/m/library'\n], function (BaseController, JSONModel, formatter, FlaggedType, mobileLibrary) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.bulletinboard.controller.Worklist\", {\n\t\ttypes : {\n\t\t\tflagged: new FlaggedType()\n\t\t},\n\t\tformatter: formatter,\n\t\t// …\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Dialog Fragment with a Button\nDESCRIPTION: This XML code defines a dialog fragment with an \"OK\" button in the `beginButton` aggregation. The `press` event of the button is bound to the `.onCloseDialog` event handler, which is implemented in the associated controller. The text of the button is retrieved from the i18n resource bundle.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-17-fragment-callbacks-354f98e.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<core:FragmentDefinition\n   xmlns=\"sap.m\"\n   xmlns:core=\"sap.ui.core\">\n   <Dialog\n      id=\"helloDialog\"\n      title =\"Hello {/recipient/name}\">\n      <beginButton>\n         <Button\n            text=\"{i18n>dialogCloseButtonText}\"\n            press=\".onCloseDialog\"/>\n      </beginButton>\n   </Dialog>\n</core:FragmentDefinition>\n```\n\n----------------------------------------\n\nTITLE: Defining App View with Page and Panel (XML)\nDESCRIPTION: This code defines the app view using XML, incorporating `sap.m.Page` and `sap.m.Panel` controls. The `Page` control provides a title and a content aggregation, while the `Panel` control groups related content and displays a header.  The i18n properties are used to localize the title and header text. `displayBlock=\"true\"` is added to the View to make the fullscreen height work.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-pages-and-panels-typescript-feed613.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.App\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\"\n  displayBlock=\"true\">\n   <App>\n      <pages>\n         <Page title=\"{i18n>homePageTitle}\">\n            <content>\n               <Panel\n                  headerText=\"{i18n>helloPanelTitle}\">\n                  <content>\n                     <Button\n                        text=\"{i18n>showHelloButtonText}\"\n                        press=\".onShowHello\"/>\n                     <Input\n                        value=\"{/recipient/name}\"\n                        description=\"Hello {/recipient/name}\"\n                        valueLiveUpdate=\"true\"\n                        width=\"60%\"/>\n                  </content>\n               </Panel>\n            </content>\n         </Page>\n      </pages>\n   </App>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Strict Date Parsing with DateFormat (JavaScript)\nDESCRIPTION: This snippet shows strict date parsing using `sap.ui.core.format.DateFormat.getDateInstance` and the `strictParsing` option. If the date string is invalid according to the specified pattern, the parse method returns null.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/date-format-91f2eba.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({\n    pattern: \"EEE, MMM d, yyyy\",\n    strictParsing: true\n});\n\noDateFormat.parse(\"Thu, Feb 31, 2022\") // Returns null\n```\n\n----------------------------------------\n\nTITLE: Retrieving OpenUI5 Control in Console\nDESCRIPTION: Demonstrates how to retrieve an OpenUI5 control instance using its ID from the browser's console.  It uses `sap.ui.require` to access `sap/ui/core/Element` and then calls `getElementById`. This allows you to inspect the OpenUI5 control's properties and methods.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-browser-developer-tools-eadd60a.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyView=sap.ui.require(\"sap/ui/core/Element\").getElementById(\"container-HeapOfShards---app\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyView.byId(\"myButton\")\n```\n\n----------------------------------------\n\nTITLE: Updating App.view.xml (XML)\nDESCRIPTION: This XML code defines the `App` view. The content of the `App` control is removed, as the pages will be added dynamically based on the routing configuration. The `displayBlock` property is set to `true` to ensure that the view occupies the entire screen. Requires `sap.m` and `sap.ui.core.mvc` namespaces.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-enable-routing-cf3c57c.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n\t<Shell>\n\t\t<App id=\"app\"/>\n\t</Shell>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Using Assertions\nDESCRIPTION: This snippet shows how to use assertions in OpenUI5 using the `sap/base/assert` module.  The `assert` function checks if a given condition is met. If the condition is false, an error message is logged. Note that assertions may be removed during the build optimization process.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/logging-and-tracing-9f4d62c.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"assert\" required from module \"sap/base/assert\"\nassert(aValues.length === 10, \"There are 10 values stored in the array\")\n```\n\n----------------------------------------\n\nTITLE: Using Ancestor Matcher in OPA\nDESCRIPTION: This code shows how to use the `sap.ui.test.matchers.Ancestor` matcher to find `sap.m.StandardListItem` controls that are descendants of a `sap.m.List` control.  It first waits for the list, then uses its instance as the ancestor for finding list items. Opa5 is used to wait for the controls and assert that the list items are found.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oOpa = new Opa5();\nreturn oOpa.waitFor({\n            controlType: \"sap.m.List\",\n            success: function (oList) {\n                return oOpa.waitFor({\n                    controlType : \"sap.m.StandardListItem\",\n                    matchers : new sap.ui.test.matchers.Ancestor(oList),\n                    success : function (aItems) {\n                        Opa5.assert.ok(aItems.length, \"Found list items\")\n                    },\n                    errorMessage: \"No list items found\"\n                });\n            }\n});\n```\n\n----------------------------------------\n\nTITLE: Binding List Control to DACH Region in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to bind a list control to the DACH region (Germany, Austria, Switzerland) using `bindElement`.  It sets the binding context to `/regions/1`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst oList = this.byId(\"companyList\");\noList.bindElement(\"/regions/1\");\n```\n\n----------------------------------------\n\nTITLE: Replacing synchronous sap.ui.extensionpoint with asynchronous ExtensionPoint.load - JavaScript\nDESCRIPTION: This snippet demonstrates replacing the synchronous `sap.ui.extensionpoint` with the asynchronous `ExtensionPoint.load` method. It loads the `sap/ui/core/ExtensionPoint` module and then uses the `load` method, which returns a Promise. The `then` method handles the loaded controls.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-factories-replacement-491bd9c.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar aControls = sap.ui.extensionpoint(/*...*/);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/ExtensionPoint\"], (ExtensionPoint) => {\n    ExtensionPoint.load({ \n        async: true;\n        // ...\n    }).then((aControls) => {/*...*/});\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DateFormatter and Formatting Date (Date Format)\nDESCRIPTION: This snippet further extends the DateFormatter to include a dateFormat for dates older than 6 days.  It uses DateFormat.getDateInstance with a medium style. The format function includes logic to return this dateFormat for dates older than 6 days. It depends on sap.ui.base.Object and sap.ui.core.format.DateFormat.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n…\n\t\tconstructor: function(oProperties) {\n\t\t\tthis.timeFormat = DateFormat.getTimeInstance({\n\t\t\t\tstyle : \"short\"\n\t\t\t}, oProperties.locale);\n\t\t\tthis.weekdayFormat = DateFormat.getDateInstance({\n\t\t\t\tpattern : \"EEEE\"\n\t\t\t}, oProperties.locale);\n\t\t\tthis.dateFormat = DateFormat.getDateInstance({\n\t\t\t\tstyle : \"medium\"\n\t\t\t}, oProperties.locale);\n\t\t\tthis.now = oProperties.now;\n\t\t},\n\t\tformat: function(oDate) {\n\t\t\tif (!oDate) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tvar iElapsedDays = this._getElapsedDays(oDate);\n\t\t\tif (iElapsedDays === 0) {\n\t\t\t\treturn this.timeFormat.format(oDate);\n\t\t\t} else if (iElapsedDays === 1) {\n\t\t\t\treturn \"Yesterday\";\n\t\t\t} else if (iElapsedDays < 7) {\n\t\t\t\treturn this.weekdayFormat.format(oDate);\n\t\t\t} else {\n\t\t\t\treturn this.dateFormat.format(oDate);\n\t\t\t}\n\n\t\t},\n\n```\n\n----------------------------------------\n\nTITLE: Creating Post.view.xml (SAPUI5)\nDESCRIPTION: This code snippet defines the basic structure of the `Post.view.xml` file, which represents the view for displaying the details of a selected post.  It includes an ObjectHeader to display the post's title, price, and currency. The view also defines a back button that navigates back to the worklist page.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-adding-the-post-page-4a9f063.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\t\tcontrollerName=\"sap.ui.demo.bulletinboard.controller.Post\"\n\t\txmlns=\"sap.m\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns:semantic=\"sap.m.semantic\">\n\t<semantic:FullscreenPage\n\t\t\tid=\"page\" \n\t\t\tbusy=\"{postView>/busy}\"\n\t\t\tbusyIndicatorDelay=\"0\"\n\t\t\tnavButtonPress=\".onNavBack\"\n\t\t\tshowNavButton=\"true\"\n\t\t\ttitle=\"{i18n>objectTitle}\">\n\t\t<semantic:content>\n\t\t\t<ObjectHeader\n\t\t\t\t\tid=\"objectHeader\"\n\t\t\t\t\ttitle=\"{Title}\"\n\t\t\t\t\tnumber=\"{\n\t\t\t\t\t\tpath: 'Price',\n\t\t\t\t\t\tformatter: '.formatter.numberUnit'\n\t\t\t\t\t}\"\n\t\t\t\t\tnumberUnit=\"{Currency}\"\n\t\t\t\t\tbackgroundDesign=\"Translucent\">\n\t\t\t</ObjectHeader>\n\t\t</semantic:content>\n\t</semantic:FullscreenPage>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Loading .hdbtextbundle in HANA\nDESCRIPTION: This code snippet shows how to load a resource bundle with the `.hdbtextbundle` extension, which is used when OpenUI5 is running in SAP HANA. The code uses `ResourceBundle.create()` with the URL pointing to the `.hdbtextbundle` file.  It loads the bundle asynchronously and retrieves text using `oBundle.getText()`\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-bundles-91f225c.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// \"ResourceBundle\" required from module \"sap/base/i18n/ResourceBundle\"\n// load the resource bundle\nResourceBundle.create({\n// specify url of the .hdbtextbundle\n\turl : \"myapp/i18n/messagebundle.hdbtextbundle\";\n\tasync: true\n}).then(function(oBundle){\n\toBundle.getText(\"buttonSave\");\n\toBundle.getText(\"welcome\", [\"Administrator\"]);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Filtering with 'any' Operator - JavaScript\nDESCRIPTION: This example demonstrates how to use the 'any' operator to retrieve teams with at least one employee older than 42. It creates a `sap.ui.model.Filter` object with the `path` set to the collection, `operator` to `sap.ui.model.FilterOperator.Any`, a `variable` for the collection element, and a `condition` to filter by age.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/filtering-5338bd1.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\noTeamsBinding.filter(\n    new sap.ui.model.Filter({\n        path : \"TEAM_2_EMPLOYEES\",\n        operator : sap.ui.model.FilterOperator.Any,\n        variable : \"employee\",\n        condition : new sap.ui.model.Filter(\"employee/AGE\", sap.ui.model.FilterOperator.GT, 42)\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Using Expression Binding with Device Model (OpenUI5)\nDESCRIPTION: This code snippet illustrates how to use expression binding with the device model to negate a value or make simple case decisions in an XML view. The `showRefreshButton` property of the `SearchField` is bound to the negation of the `device>/support/touch` property.  `{= !${device>/support/touch} }` checks if touch is not supported.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/device-adaptation-using-device-models-for-your-app-8dbd35e.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<SearchField showRefreshButton=\"{= !${device>/support/touch} }\" />\n```\n\n----------------------------------------\n\nTITLE: Modifying expandedHeading and snappedHeading in Detail.view.xml (XML)\nDESCRIPTION: This XML snippet modifies the `expandedHeading` and `snappedHeading` aggregations within the `ObjectPageDynamicHeaderTitle` to display the product name in the header of the detail page, adapting to whether the header is expanded or collapsed.  It utilizes data binding to the `products` model to dynamically update the title based on the selected product. Requires the `sap.uxap`, `sap.m` and `sap.ui.core.mvc` namespaces.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-enhancing-the-detail-page-e5ee491.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.fcl.controller.Detail\"\n\txmlns=\"sap.uxap\"\n\txmlns:m=\"sap.m\"\n\txmlns:f=\"sap.f\"\n\txmlns:form=\"sap.ui.layout.form\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<ObjectPageLayout\n\t\tid=\"ObjectPageLayout\"\n\t\tshowTitleInHeaderContent=\"true\"\n\t\talwaysShowContentHeader=\"false\"\n\t\tpreserveHeaderStateOnScroll=\"false\"\n\t\theaderContentPinnable=\"true\"\n\t\tisChildPage=\"true\"\n\t\tupperCaseAnchorBar=\"false\">\n\t\t<headerTitle>\n\t\t\t<ObjectPageDynamicHeaderTitle>\n\t\t\t\t<expandedHeading>\n\t\t\t\t\t<m:Title text=\"{products>Name}\" wrapping=\"true\" class=\"sapUiSmallMarginEnd\"/>\n\t\t\t\t</expandedHeading>\n\n\t\t\t\t<snappedHeading>\n\t\t\t\t\t<m:FlexBox wrap=\"Wrap\" fitContainer=\"true\" alignItems=\"Center\">\n\t\t\t\t\t\t<m:FlexBox wrap=\"NoWrap\" fitContainer=\"true\" alignItems=\"Center\" class=\"sapUiTinyMarginEnd\">\n\t\t\t\t\t\t\t<m:Avatar\n\t\t\t\t\t\t\t\tsrc=\"https://ui5.sap.com/{products>ProductPicUrl}\"\n\t\t\t\t\t\t\t\tdisplaySize=\"S\"\n\t\t\t\t\t\t\t\tdisplayShape=\"Square\"\n\t\t\t\t\t\t\t\tclass=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t\t\t\t<m:Title text=\"{products>Name}\" wrapping=\"true\"/>\n\t\t\t\t\t\t</m:FlexBox>\n\t\t\t\t\t</m:FlexBox>\n\t\t\t\t</snappedHeading>\n\n\t\t\t\t<actions>\n\t\t\t\t...\n\n```\n\n----------------------------------------\n\nTITLE: Adding Margins and Paddings in XML View\nDESCRIPTION: This XML snippet demonstrates how to add responsive margins to a Panel control using the `sapUiResponsiveMargin` class, set the panel width to `auto`, and add small margins to a Button and Text control using `sapUiSmallMarginEnd` and `sapUiSmallMargin` classes respectively. It also includes an Input control for data binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-13-margins-and-paddings-typescript-5826c0c.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n\t<Shell>\n\t\t<App>\n\t\t\t<pages>\n\t\t\t\t<Page title=\"{i18n>homePageTitle}\">\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<Panel\n\t\t\t\t\t\t\theaderText=\"{i18n>helloPanelTitle}\"\n\t\t\t\t\t\t\tclass=\"sapUiResponsiveMargin\"\n\t\t\t\t\t\t\twidth=\"auto\">\n\t\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttext=\"{i18n>showHelloButtonText}\"\n\t\t\t\t\t\t\t\t\tpress=\".onShowHello\"\n\t\t\t\t\t\t\t\t\tclass=\"sapUiSmallMarginEnd\"/>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tvalue=\"{/recipient/name}\"\n\t\t\t\t\t\t\t\t\tvalueLiveUpdate=\"true\"\n\t\t\t\t\t\t\t\t\twidth=\"60%\"/>\n\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\ttext=\"Hello {/recipient/name}\"\n\t\t\t\t\t\t\t\t\tclass=\"sapUiSmallMargin\"/>\n\t\t\t\t\t\t\t</content>\n\t\t\t\t\t\t</Panel>\n\t\t\t\t\t</content>\n\t\t\t\t</Page>\n\t\t\t</pages>\n\t\t</App>\n\t</Shell>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding a Footer to Detail.view.xml (XML)\nDESCRIPTION: This snippet adds a footer to the `Detail.view.xml` using an `OverflowToolbar` within the `sap.uxap.ObjectPageLayout`. The footer contains a `ToolbarSpacer` and two buttons: 'Save' (Accept) and 'Cancel' (Reject). The buttons provide actions related to the detail view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-adding-a-floating-footer-555ed73.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<footer>\n\t\t\t<m:OverflowToolbar>\n\t\t\t\t<m:ToolbarSpacer/>\n\t\t\t\t<m:Button type=\"Accept\" text=\"Save\"/>\n\t\t\t\t<m:Button type=\"Reject\" text=\"Cancel\"/>\n\t\t\t</m:OverflowToolbar>\n\t\t</footer>\n```\n\n----------------------------------------\n\nTITLE: Modifying Table for Multi-Selection in Worklist\nDESCRIPTION: This snippet modifies the `sap.m.Table` in the `Worklist.view.xml` file to enable multi-selection of items. This is achieved by setting the `mode` property of the table to `MultiSelect`. The table also configures data binding to the `/Products` path, including sorting by `ProductName` and expanding the `Supplier` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-adding-actions-to-the-worklist-2da220f.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Table\n\t\t\tid=\"table\"\n\t\t\tbusyIndicatorDelay=\"{worklistView>/tableBusyDelay}\"\n\t\t\tgrowing=\"true\"\n\t\t\tgrowingScrollToLoad=\"true\"\n\t\t\tnoDataText=\"{worklistView>/tableNoDataText}\"\n\t\t\tupdateFinished=\".onUpdateFinished\"\n\t\t\twidth=\"auto\"\n\t\t\tmode=\"MultiSelect\"\n\n\t\t\titems=\"{\n\t\t\t\tpath: '/Products',\n\t\t\t\tsorter: {\n\t\t\t\t\tpath: 'ProductName',\n\t\t\t\t\tdescending: false\n\t\t\t\t},\n\t\t\t\tparameters: {\n\t\t\t\t\t'expand': 'Supplier'\n\t\t\t\t}\n\t\t\t}\">\n```\n\n----------------------------------------\n\nTITLE: Using Integration Card with manifest.json in XML View\nDESCRIPTION: This code snippet shows how to use the `sap.ui.integration.widgets.Card` control in an XML view. It references a `manifest.json` file to define the card's structure and content. The `manifest` property is used to point to the location of the `manifest.json` file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/cards-5b46b03.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns:w=\"sap.ui.integration.widgets\">\n<w:Card manifest=\"./demo/manifest.json\" />\n\n```\n\n----------------------------------------\n\nTITLE: UIComponent Metadata Definition\nDESCRIPTION: This code snippet demonstrates how to define metadata for a `UIComponent`.  It shows how to define `publicMethods` and `aggregations` which specify the public API and internal structure of the component. The `UIComponent.extend` method is used to create a new UI component class.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/component-metadata-0187ea5.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// \"UIComponent\" required from module \"sap/ui/core/UIComponent\"\nUIComponent.extend(\"some.sample.UIComponent\", {\n    \"metadata\": {\n        \"publicMethods\": [ \"render\" ],\n        \"aggregations\": {\n            \"rootControl\": {\n                \"type\": \"sap.ui.core.Control\", multiple: false, visibility: \"hidden\"\n            }\n        }\n    }\n}),\n```\n\n----------------------------------------\n\nTITLE: Declaring Component Usages in manifest.json (Applications/Components)\nDESCRIPTION: This snippet illustrates how to declare component usages within the `manifest.json` file for applications and components using the `sap.ui5/componentUsages` section. It shows how to specify the name of the component (e.g., `sap.reuse.component`) and whether it should be loaded lazily or not via the `lazy` property. The component usages defines the reusable component dependencies of an application or component.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-dependencies-to-libraries-and-components-8521ad1.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"sap.ui5\": {\n\t...\n\t\"componentUsages\": {\n\t\t\"myReuseComponent\": {\n\t\t\t\"name\": \"sap.reuse.component\",\n\t\t\t\"lazy\": true\n\t\t}\n\t},\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Invoice List Title to i18n.properties\nDESCRIPTION: Adds a new entry `invoiceListTitle` to the `i18n.properties` file. This title will be used as the header text for the invoice list in the view. This promotes internationalization of the application by storing text in resource bundles.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-19-aggregation-binding-typescript-24580fb.md#_snippet_2\n\nLANGUAGE: INI\nCODE:\n```\n# App Descriptor\nappTitle=Hello World\nappDescription=A simple walkthrough app that explains the most important concepts of OpenUI5\n\n# Hello Panel\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\nhomePageTitle=UI5 TypeScript Walkthrough\nhelloPanelTitle=Hello World\nopenDialogButtonText=Say Hello With Dialog\ndialogCloseButtonText=Ok\n\n# Invoice List\ninvoiceListTitle=Invoices\n```\n\n----------------------------------------\n\nTITLE: Create Detail View (OpenUI5 XML)\nDESCRIPTION: This XML code defines the `Detail` view, which includes a `Page` and an `ObjectHeader` control with the static text *Invoice*.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-e5200ee.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page\n\t\ttitle=\"{i18n>detailPageTitle}\">\n\t\t<ObjectHeader title=\"Invoice\"/>\n\t</Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Measurement Statistics\nDESCRIPTION: This snippet retrieves and logs the count and average duration for a given measurement ID, which is \"myId\" in this example. Requires the `sap/base/Log` and `sap/ui/performance/Measurement` module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/performance-measurement-using-sap-ui-performance-measurement-module-78880c0.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// \"Log\" required from module \"sap/base/Log\"\n// \"Measurement\" required from module \"sap/ui/performance/Measurement\"\nLog.info(\"1000 calls: \" + Measurement.getMeasurement(\"myId\").count === 1000); //true\nLog.info(\"Average time: \" + Measurement.getMeasurement(\"myId\").duration);\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Formatter in InvoiceList.view.xml\nDESCRIPTION: This snippet demonstrates how to use the custom formatter `statusText` in the `InvoiceList.view.xml` file. It utilizes the `core:require` attribute to import the formatter module and assigns it the alias `Formatter`. The formatter is then used in the `text` property of the `ObjectStatus` control, binding it to the `invoice>Status` path and setting the `this` context to the controller using `.bind($controller)`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-22-custom-formatters-typescript-61d4e2b.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <List\n        headerText=\"{i18n>invoiceListTitle}\"\n        class=\"sapUiResponsiveMargin\"\n        width=\"auto\"\n        items=\"{invoice>/Invoices}\">\n        <items>\n            <ObjectListItem\n                core:require=\"{\n                    Currency: 'sap/ui/model/type/Currency'\n                }\"\n                title=\"{invoice>Quantity} x {invoice>ProductName}\"\n                number=\"{\n                    parts: [\n                        'invoice>ExtendedPrice',\n                        'view>/currency'\n                    ],\n                    type: 'Currency',\n                    formatOptions: {\n                        showMeasure: false\n                    }\n                }\"\n                numberUnit=\"{view>/currency}\"\n                numberState=\"{= ${invoice>ExtendedPrice} > 50 ? 'Error' : 'Success' }\">\n                <firstStatus>\n                    <ObjectStatus\n                        core:require=\"{\n                            Formatter: 'ui5/walkthrough/model/formatter'\n                        }\"\n                        text=\"{\n                            path: 'invoice>Status',\n                            formatter: 'Formatter.statusText.bind($controller)'\n                        }\"/>\n                </firstStatus>\n            </ObjectListItem>\n        </items>\n    </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:field-control to FieldControl\nDESCRIPTION: This snippet illustrates the transformation of `sap:field-control` to `com.sap.vocabularies.Common.v1.FieldControl`. A path expression is used to determine the field control value, which dictates visibility.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_48\n\nLANGUAGE: xml\nCODE:\n```\nsap:field-control = \"AnyPath\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.FieldControl\": { \"Path\" : \"AnyPath\" }\n```\n\n----------------------------------------\n\nTITLE: Using Component.getOwnerComponentFor - JavaScript\nDESCRIPTION: This code demonstrates how to retrieve the owner component for a `ManagedObject` (e.g., a `sap.m.Page` control) using the static `Component.getOwnerComponentFor` function.  After obtaining the owner component, the `runAsOwner` method is called to create additional `ManagedObject`s within the correct owner component scope. This is useful when creating controls outside of a controller instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/the-owner-component-a7a3138.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 'oPage' is a examplary sap.m.Page control, the static API however accepts all ManagedObjects\n// Note: though all ManagedObjects can be passed to this function, the owner component can only\n//       be returned for ManagedObjects that have an owner component assigned already\nvar oComponent = Component.getOwnerComponentFor(oPage);\noComponent.runAsOwner(function() {\n    // same as in the above sample\n});\n```\n\n----------------------------------------\n\nTITLE: OpenUI5 i18n Properties Update\nDESCRIPTION: Updates the i18n.properties file with new text strings for the \"Order\" and \"Remove\" buttons, messages for when no product is selected, and success messages for when products are successfully deleted or updated. These properties are used to provide localized text within the OpenUI5 application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-adding-actions-to-the-worklist-2da220f.md#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n...\n#text of the button for Products reordering\nTableProductsReorder=Order\n\n#text for the button for Products unlisting\nTablePorductsUnlist=Remove\n\n#Text for no product selected\nTableNoProductsSelected=No product selected\n\n#Product successfully deleted\nStockRemovedSuccessMsg=Product removed\n\n#Product successfully updated\nStockUpdatedSuccessMsg=Product stock level updated\n\n#~~~ Object View ~~~~~~~~~~~~~~~~~~~~~~~~~~\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Default Binding Mode - JSONModel - JavaScript\nDESCRIPTION: Sets the default binding mode for a JSONModel instance to OneWay. This means that all new bindings created for this model will default to OneWay binding. Requires sap.ui.model.json.JSONModel.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/setting-the-default-binding-mode-1a08f70.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oModel = new sap.ui.model.json.JSONModel();\noModel.setDefaultBindingMode(sap.ui.model.BindingMode.OneWay);\n```\n\n----------------------------------------\n\nTITLE: Add Sales Amount Text to i18n Properties - INI\nDESCRIPTION: This INI snippet adds the `salesAmount` text to the `i18n.properties` and `i18n_de.properties` files. This allows the label for the sales amount field to be internationalized. The German translation includes a Unicode escape sequence for a special character.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-property-formatting-using-data-types-9252ee4.md#_snippet_2\n\nLANGUAGE: INI\nCODE:\n```\n# Field labels\nfirstName=Vorname\nlastName=Nachname\nenabled=Enabled\naddress=Address\nsalesAmount=Sales Amount\n...\n```\n\nLANGUAGE: INI\nCODE:\n```\n# Field labels\nfirstName=Vorname\nlastName=Nachname\nenabled=Aktiviert\naddress=Adresse\nsalesAmount=Verk\\u00e4ufe bis zum heutigen Datum\n...\n```\n\n----------------------------------------\n\nTITLE: Updated Library Support JS - JavaScript\nDESCRIPTION: This code snippet demonstrates the updated `library.support.js` after splitting the rules into separate files.  It requires the `Button.support.js` and `Label.support.js` files using relative paths and includes their returned rules (or arrays of rules) into the final ruleset. The ruleset can contain both individual rule objects and arrays of rule objects.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/create-a-ruleset-for-a-library-b5a5135.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/support/library\",\n    \"./Button.support\", \"./Label.support\"\n  ],\n  function(SupportLib, ButtonSupport,\n    LabelSupport) {\n    \"use strict\";\n\n    return {\n      name: \"sap.ui.core\",\n      niceName: \"UI5 Core Library\",\n      ruleset: [\n        ButtonSupport,\n        LabelSupport\n      ]\n    };\n  }, true);\n```\n\n----------------------------------------\n\nTITLE: Adding CSS class to custom control in OpenUI5\nDESCRIPTION: Shows how to add the `sapThemeText` CSS class to a custom control during rendering. The `oRm.addClass(\"sapThemeText\")` method is called within the `render` function to apply the theme's text color to the control. This allows the custom control's text color to automatically update when the theme is switched.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/css-classes-for-theme-parameters-ea08f53.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// the part creating the HTML:\nrender : function(oRm, oControl) { \n\toRm.openStart(\"div\", oControl); \n    oRm.style(\"width\", oControl.getSize());  \n    oRm.style(\"height\", oControl.getSize());\n    oRm.class(\"mySquare\");       \n    oRm.class(\"sapThemeText\");  // here the CSS class is added which makes the text color depend on the current theme\n    oRm.openEnd();\n    oRm.text(oControl.getText()); \n    oRm.close(\"div\");\n},\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:heading to Heading\nDESCRIPTION: This snippet illustrates the transformation of `sap:heading` to `com.sap.vocabularies.Common.v1.Heading`. A simple text value is used as the heading.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_51\n\nLANGUAGE: xml\nCODE:\n```\nsap:heading = \"foo\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.Heading\": { \"String\" : \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Example JSON Data Structure\nDESCRIPTION: This provides an example JSON structure illustrating the data format used with the JSON model. It showcases nested objects, arrays, and properties, which are essential for understanding binding path syntax.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/json-model-96804e3.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    company: {\n        name: \"Treefish Inc\",\n        info: {\n            employees: 3,\n        },\n        contacts: [\n            {\n                name: \"Barbara\",\n                phone: \"873\"\n            },\n            {\n                name: \"Gerry\",\n                phone: \"734\"\n            },\n            {\n                name: \"Susan\",\n                phone: \"275\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Security Token Handlers via API in OpenUI5\nDESCRIPTION: This snippet illustrates how to set security token handlers using the `Security.setSecurityTokenHandlers` API in OpenUI5. These handlers are invoked by the OData V4 model to retrieve security tokens, overriding the default \"X-CSRF-Token\" mechanism. The input is an array of functions, each responsible for retrieving a security token.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-options-and-url-parameters-91f2d03.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[`Security.setSecurityTokenHandlers`](https://ui5.sap.com/#/api/module:sap/ui/security/Security%23methods/sap/ui/security/Security.setSecurityTokenHandlers)\n```\n\n----------------------------------------\n\nTITLE: Add Text to i18n Properties\nDESCRIPTION: This section demonstrates how to add a new text entry to the `i18n.properties` file for the button that triggers the dialog. This text is then used in the view to display the button's label.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-16-dialogs-and-fragments-typescript-4b2e306.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# App Descriptor\nappTitle=Hello World\nappDescription=A simple walkthrough app that explains the most important concepts of OpenUI5\n\n# Hello Panel\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\nhomePageTitle=UI5 TypeScript Walkthrough\nhelloPanelTitle=Hello World\nopenDialogButtonText=Say Hello With Dialog\n```\n\n----------------------------------------\n\nTITLE: Extending OPA5 Configuration\nDESCRIPTION: This JavaScript snippet extends the OPA5 configuration with the defined arrangements, actions, and assertions. It also sets the `viewNamespace` to \"view.\" which is used to locate the views. This configuration is essential for running the OPA tests.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/getting-started-with-opa5-22f175e.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Opa5\" required from \"sap/ui/test/Opa5\"\nOpa5.extendConfig({\n    arrangements : arrangements,\n    actions : actions,\n    assertions : assertions,\n    viewNamespace : \"view.\"\n});\n\n```\n\n----------------------------------------\n\nTITLE: Enabling asyncPolling globally in OPA5\nDESCRIPTION: This example demonstrates how to enable `asyncPolling` globally in your OPA5 configuration. This postpones the check() in the next polling cycle, providing a chance for execution flows caused by the interaction to complete before continuing with the test.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-the-autowait-parameter-fb487ef.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// in QUnit start page, before all OPA tests\nOpa5.extendConfig({\n    autoWait: true,\n    asyncPolling: true\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Properties in metadata.xml (OData)\nDESCRIPTION: This XML snippet shows how to define properties within an EntityType in an OData metadata file (`metadata.xml`). Each property definition specifies the property name, type, and nullability. The `UserName` property is defined as a key property that is not nullable. This definition guides automatic type detection in the UI.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-automatic-data-type-detection-96bb6e0.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<EntityType Name=\"Person\">\n\t<Key>\n\t\t<PropertyRef Name=\"UserName\" />\n\t</Key>\n\t<Property Name=\"UserName\" Type=\"Edm.String\" Nullable=\"false\" />\n\t<Property Name=\"FirstName\" Type=\"Edm.String\" />\n\t<Property Name=\"LastName\" Type=\"Edm.String\" />\n\t<Property Name=\"MiddleName\" Type=\"Edm.String\" />\n\t<Property Name=\"Gender\" Type=\"Microsoft.OData.Service.Sample.TrippinInMemory.Models.PersonGender\"\n\t\t\t  Nullable=\"false\" />\n\t<Property Name=\"Age\" Type=\"Edm.Int64\" />\n   \n```\n\n----------------------------------------\n\nTITLE: Add Refresh Button to Table Header (XML)\nDESCRIPTION: This XML code snippet adds a `headerToolbar` with a `Button` to the `Table` control. The button's `press` event is bound to the `onRefresh` event handler in the controller. The `tooltip` property is bound to an i18n text key for localization.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-data-access-and-client-server-communication-e9de002.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Page title=\"{i18n>peoplePageTitle}\">\n\t<content>\n\t\t<Table\n\t\t\tid=\"peopleList\"\n\t\t\tgrowing=\"true\"\n\t\t\tgrowingThreshold=\"10\"\n\t\t\titems=\"{\n\t\t\t\tpath: '/People'\n\t\t\t}\">\n\t\t\t<headerToolbar>\n\t\t\t\t<OverflowToolbar>\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tid=\"refreshUsersButton\"\n\t\t\t\t\t\t\ticon=\"sap-icon://refresh\"\n\t\t\t\t\t\t\ttooltip=\"{i18n>refreshButtonText}\"\n\t\t\t\t\t\t\tpress=\".onRefresh\"/>\n\t\t\t\t\t\t</content>\n\t\t\t\t\t</OverflowToolbar>\n\t\t\t\t</headerToolbar>\n\n\t\t\t\t<columns>\n...\n```\n\n----------------------------------------\n\nTITLE: XML Button with Source Control Parameter\nDESCRIPTION: This code shows how to pass the `text` property of the button that triggered the event to the `.doSomething` function using the `$source` model.  The `$source` model wraps the control firing the event.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-events-in-xml-views-b0fb4de.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Press Me\" press=\".doSomething(${$source>/text})\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Table Events in XML - OpenUI5 (JavaScript handlers)\nDESCRIPTION: This snippet demonstrates how to define event handlers for various events of a sap.m.Table control in an XML view.  It lists the event names and the corresponding handler function names in JavaScript. The handlers must be defined in the controller associated with the view to process event data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/list-and-table-events-35b8a94.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Table\n   delete=\"deleteHandler\"\n   swipe=\"swipeHandler\"\n   selectionChange=\"selectionChangeHandler\"\n   itemPress=\"itemPressHandler\"\n   updateStart=\"updataeStartHandler\"\n   updateFinish=\"updateFinishHandler\"\n...\n\n```\n\n----------------------------------------\n\nTITLE: Getting element by ID using Element.getElementById() in SAPUI5\nDESCRIPTION: This code snippet demonstrates how to get an element by its ID using `Element.getElementById()` instead of the deprecated `Core.byId()`. Requires `sap/ui/core/Element` module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Element\"], async function(Element) {\n    const oMyElement = Element.getElementById(\"myId\");\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Data Export Object with CSV Export Type (OpenUI5)\nDESCRIPTION: Creates an instance of the `sap.ui.core.util.Export` class and configures it for CSV export. It specifies the model to use, the binding information for the rows aggregation, and the column definitions with column names and binding information for the content. Requires `sap/ui/core/util/Export` and `sap/ui/core/util/ExportTypeCSV` modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-data-binding-for-data-export-f1ee7a8.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// \"Export\" required from module \"sap/ui/core/util/Export\"\nvar oExport = new Export({\n\n    // \"ExportTypeCSV\" required from module \"sap/ui/core/util/ExportTypeCSV\"\n    // Type that will be used to generate the content. Own ExportType's can be created to support other formats\n    exportType: new ExportTypeCSV({\n        separatorChar: \";\"\n    }),\n\n    // Pass in the model created above\n    models: oModel,\n\n    // binding information for the rows aggregation \n    rows: {\n        path: \"/\" \n    },\n\n    // column definitions with column name and binding info for the content\n    columns: [\n        {\n            name: \"First name\",\n            template: {\n                content: {\n                    path: \"firstname\"\n                }\n            }\n        },\n        {\n            name: \"Last name\",\n            template: {\n                content: {\n                    path: \"lastname\"\n                }\n            }\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Entities with OData\nDESCRIPTION: This snippet shows how to read entities from an OData service using the `read` function of the OData V2 model.  It triggers a GET request to a specified path and uses success and error callback handlers to manage the response.  The retrieved data is processed in the `mySuccessHandler` function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\noModel.read(\"/Products(999)\", {success: mySuccessHandler, error: myErrorHandler});\n```\n\n----------------------------------------\n\nTITLE: Defining 'employeeResume' Route and Target (JSON)\nDESCRIPTION: This JSON snippet configures the routing in the `manifest.json` file. It adds a new route named `employeeResume` with the pattern `employees/{employeeId}/resume`.  The route is associated with the target `employeeResume`, which specifies the view to be displayed (`employee.Resume`) and sets the `transition` property to `flip` for a flip animation. A level is also configured to determine transition direction.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-navigate-with-flip-transition-3e5f6f3.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"_version\": \"1.12.0\",\n\t\"sap.app\": {\n\t\t...\n\t},\n\t\"sap.ui\": {\n\t\t...\n\t},\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.nav.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"transition\": \"slide\",\n\t\t\t\t\"bypassed\": {\n\t\t\t\t\t\"target\": \"notFound\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"routes\": [{\n\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\"name\": \"appHome\",\n\t\t\t\t\"target\": \"home\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees\",\n\t\t\t\t\"name\": \"employeeList\",\n\t\t\t\t\"target\": \"employees\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}\",\n\t\t\t\t\"name\": \"employee\",\n\t\t\t\t\"target\": \"employee\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}/resume\",\n\t\t\t\t\"name\": \"employeeResume\",\n\t\t\t\t\"target\": \"employeeResume\"\n\t\t\t}],\n\t\t\t\"targets\": {\n\t\t\t\t\"home\": {\n\t\t\t\t\t\"id\": \"home\",\n\t\t\t\t\t\"name\": \"Home\",\n\t\t\t\t\t\"level\" : 1\n\t\t\t\t},\n\t\t\t\t\"notFound\": {\n\t\t\t\t\t\"id\": \"notFound\",\n\t\t\t\t\t\"name\": \"NotFound\",\n\t\t\t\t\t\"transition\": \"show\"\n\t\t\t\t},\n\t\t\t\t\"employees\": {\n\t\t\t\t\t\"id\": \"employees\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee\",\n\t\t\t\t\t\"name\": \"EmployeeList\",\n\t\t\t\t\t\"level\" : 2\n\t\t\t\t},\n\t\t\t\t\"employee\": {\n\t\t\t\t\t\"id\": \"employee\",\n\t\t\t\t\t\"name\": \"employee.Employee\",\n\t\t\t\t\t\"level\" : 3\n\t\t\t\t},\n\t\t\t\t\"employeeResume\": {\n\t\t\t\t\t\"id\": \"resume\",\n\t\t\t\t\t\"name\": \"employee.Resume\",\n\t\t\t\t\t\"level\" : 4,\n\t\t\t\t\t\"transition\": \"flip\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: XML Preprocessor Debugging Example\nDESCRIPTION: This example illustrates the debug output generated by the OpenUI5 XML preprocessor when the debug level is set to DEBUG or ALL. The output shows the processing of an XML view, including the start and finish of the view processing, binding contexts, processing of template statements such as `<with>`, `<if>`, and `<repeat>`, and resolution of attributes. The level indicates the depth of nested preprocessor statements. The node shows the element being processed with its attributes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/debugging-153b357.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n1  [ 0] Start processing Element sap.ui.core.mvc.XMLView#__xmlview5 (sap.ui.core.sample.ViewTemplate.scenario.Detail) -  sap.ui.core.util.XMLPreprocessor\n2  [ 0] meta = /dataServices/schema/0/entityContainer/0/entitySet/0 -  sap.ui.core.util.XMLPreprocessor\n3  [ 1] entityType = /dataServices/schema/0/entityType/0 - <template:with path=\"meta>entityType\" helper=\"sap.ui.model.odata.AnnotationHelper.gotoEntityType\" var=\"entityType\"> sap.ui.core.util.XMLPreprocessor\n4  [ 2] test == [object Array] --> true - <template:if test=\"{entityType>com.sap.vocabularies.UI.v1.LineItem}\"> sap.ui.core.util.XMLPreprocessor\n5  [ 2] items = {path:'/BusinessPartnerSet', length: 5} - <Table includeItemInSelection=\"true\" mode=\"SingleSelect\" selectionChange=\"onSelectionChange\" items=\"{= '{path:\\'/' + ${meta>name} + '\\', length: 5}' }\"> sap.ui.core.util.XMLPreprocessor\n6  [ 3] target = /dataServices/schema/0/entityType/0/com.sap.vocabularies.UI.v1.LineItem - <template:with path=\"entityType>com.sap.vocabularies.UI.v1.LineItem\" var=\"target\"> sap.ui.core.util.XMLPreprocessor\n7  [ 4] fragmentName = sap.ui.core.sample.ViewTemplate.scenario.Table - <core:Fragment fragmentName=\"sap.ui.core.sample.ViewTemplate.scenario.Table\" type=\"XML\"/> sap.ui.core.util.XMLPreprocessor\n8  [ 5] Starting - <template:repeat list=\"{target>}\" var=\"field\"> sap.ui.core.util.XMLPreprocessor\n9  [ 5] field = /dataServices/schema/0/entityType/0/com.sap.vocabularies.UI.v1.LineItem/0 - <template:repeat list=\"{target>}\" var=\"field\"> sap.ui.core.util.XMLPreprocessor\n10 [ 6] test == [object Object] --> true - <template:if test=\"{field>Value}\"> sap.ui.core.util.XMLPreprocessor\n11 [ 6] text = ID - <Text text=\"{path: 'field>Label', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\"/> sap.ui.core.util.XMLPreprocessor\n12 [ 6] Finished - </template:if> sap.ui.core.util.XMLPreprocessor\n13 [ 5] Finished - </template:repeat> sap.ui.core.util.XMLPreprocessor\n14 [ 4] Finished - </core:Fragment> sap.ui.core.util.XMLPreprocessor\n15 [ 3] Finished - </template:with> sap.ui.core.util.XMLPreprocessor\n16 [ 2] Finished - </template:if> sap.ui.core.util.XMLPreprocessor\n17 [ 1] Finished - </template:with> sap.ui.core.util.XMLPreprocessor\n18 [ 0] Finished processing Element sap.ui.core.mvc.XMLView#__xmlview5 (sap.ui.core.sample.ViewTemplate.scenario.Detail) -  sap.ui.core.util.XMLPreprocessor\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Initialization with ComponentContainer (HTML/JavaScript)\nDESCRIPTION: This snippet shows how to initialize a `ComponentContainer` asynchronously within an HTML script tag. It uses `sap.ui.require` to load necessary modules and the `Core.ready().then()` construct to ensure the core is initialized before creating and placing the component container. The `async: true` property enables asynchronous loading of the component.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/use-asynchronous-loading-676b636.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    sap.ui.require([\n        \"sap/ui/core/ComponentContainer\",\n        \"sap/ui/core/Core\"\n    ], function(ComponentContainer, Core) {\n        Core.ready().then( () => {\n            new ComponentContainer({\n                name: \"your.component\",\n                async: true,\n                height: \"100%\",\n                manifest: true,\n                componentCreated: function(oParams) {\n                    var oComponent = oParams.getParameter(\"component\");\n                    // do something with the component instance\n                }\n            }).placeAt(\"content\");\n        });\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Replacing loadLibrary with Lib.load() in UI5 JavaScript\nDESCRIPTION: This snippet illustrates replacing the deprecated legacy `sap.ui.getCore().loadLibrary()` method with `Library.load()` for loading a library in SAP UI5.  It loads a specified library by its name.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// instead of legacy loading via sap.ui.getCore().loadLibrary(\"my.library\")\nsap.ui.require([\"sap/ui/core/Lib\"], (Library) => {\n    Library.load({\n        name: \"my.library\"\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Extending BlockBase in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to extend the `sap.uxap.BlockBase` class to create a custom block. Extending BlockBase provides additional features like lazy loading and column layout support. The metadata object is used to define the block's properties.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-blocks-4527729.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.uxap.BlockBase.extend(\"<BlockName>\", {\n            metadata: {\n             }\n         });\n```\n\n----------------------------------------\n\nTITLE: Handling Touch and Mouse Events with jQuery\nDESCRIPTION: This code snippet demonstrates how to handle both touch and mouse events using jQuery. It checks for the `delayedMouseEvent` flag to suppress emulated mouse events triggered by touch interactions, preventing duplicate event firings. It uses jQuery's `on` method to attach event listeners to both `touchmove` and `mousemove` events.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/adapting-event-handling-for-devices-supporting-both-mouse-and-touch-input-b54d7d7.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\njQuery(document).on(\"touchmove mousemove\", function(oEvent) {\n    if (oEvent.isMarked(\"delayedMouseEvent\")) {\n\n        // Suppress the emulated mouse event from the touch interface\n        return;\n    }\n    ......\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Animation Duration Based on Animation Mode\nDESCRIPTION: This CSS snippet demonstrates how to define different transition durations for a CSS class based on the current animation mode. It uses the `data-sap-ui-animation-mode` attribute on the `<html>` element to apply different `transition-duration` values. The snippet covers 'full', 'minimal', 'basic', and 'none' animation modes, allowing fine-grained control over animation speed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/implementing-animation-modes-76b7d50.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\nhtml[data-sap-ui-animation-mode=\"full\"] .someClassName{\n    transition-duration: 1.0s;\n}\nhtml[data-sap-ui-animation-mode=\"minimal\"] .someClassName,\nhtml[data-sap-ui-animation-mode=\"basic\"] .someClassName {\n    transition-duration: 0.1s;\n}\n\nhtml[data-sap-ui-animation-mode=\"none\"] .someClassName {\n    transition-duration: 0.0s;\n}\n```\n\n----------------------------------------\n\nTITLE: Controller for Dynamic Fragment Loading\nDESCRIPTION: This JavaScript controller demonstrates dynamic loading of fragments based on a condition (e.g., edit mode). The appropriate fragment (either EditPanel or DisplayPanel) is loaded during the `onInit` lifecycle method.  Requires `sap/ui/core/mvc/Controller` and `sap/ui/core/Fragment` dependencies. Assumes the existence of a boolean variable `bEditMode` and a container with id `myPage`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/performance-issues-966d67c.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\t...\n\ttoEditMode: function () {...},\n\tonInit: function () {\n\t\t// we keep the loading Promise, so we can chain ourselves to it later\n\t\tthis.pEditPanel = this.loadFragment({\n\t\t\tname: bEditMode ? \"myApp.EditPanel\" : \"myApp.DisplayPanel\",\n\t\t\t// we don't add the fragment to the view's 'dependents' aggregation, since the fragment content\n\t\t\t//  will be added to the view's control tree via the 'myPage' instance\n\t\t\taddToDependents: false\n\t\t}).then(function (oFragment) {\n\t\t\tthis.byId(\"myPage\").insertContent(oFragment, 0); // for sake of simplicity inserts at position 0\n\t\t});\n\t}\n\t...\n```\n\n----------------------------------------\n\nTITLE: Initializing Currency View Model (TypeScript)\nDESCRIPTION: This code snippet initializes a JSON model with a currency code (EUR) and sets it as the \"view\" model for the InvoiceList view. The onInit method is called when the view is initialized, and it is responsible for creating and setting the view model. This enables the view to access the currency information for formatting purposes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-20-data-types-typescript-0dad01a.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\n\n/**\n * @namespace ui5.walkthrough.controller\n */\nexport default class App extends Controller {\n    \n    onInit(): void {\n        const viewModel = new JSONModel({\n            currency: \"EUR\"\n        });\n        this.getView()?.setModel(viewModel, \"view\");        \n    } \n};\n```\n\n----------------------------------------\n\nTITLE: Component Metadata Definition\nDESCRIPTION: This code snippet shows an example of defining component metadata using `Component.extend`. It includes properties like `manifest`, `abstract`, `library`, `version`, and `properties`, which are commonly used for defining a component's characteristics and dependencies. It demonstrates specifying that the component uses a descriptor file via the manifest.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/component-metadata-0187ea5.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// \"Component\" required from module \"sap/ui/core/Component\"\nComponent.extend(\"some.sample.Component\", {\n    \"metadata\": {\n        \"manifest\": \"json\", // Specifies that your Component class uses the descriptor via the manifest.json file\n        \"abstract\": true, // Specifies if your Component class is an abstract one that serves as a base for your other components \n        \"library\": \"sap.ui.core\", // Specifies the library the component belongs to\n        \"version\": \"1.0\", // Version of your Component\n        \"properties\": { // Defined for components in the same way as for a control or view\n            \"config\": \"any\"\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DateTime with ISO8601 timezone source pattern\nDESCRIPTION: Initializes the `DateTime` type with a source pattern including ISO8601 timezone format \"dd.MM.yyyy HH:mm:ss X\". The output pattern depends on the locale settings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-datetime-91f3070.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The source value is given as string in \"dd.MM.yyyy HH:mm:ss X\" format (timezone is defined in ISO8601 format, e.g. \"+02:00\"). The used output pattern depends on the locale settings (default).\noType = new TypeDateTime({source: {pattern: \"dd.MM.yyyy HH:mm:ss X\"}});\n```\n\n----------------------------------------\n\nTITLE: DateRangeSelection with OData V4 dates - JSON Model\nDESCRIPTION: This example demonstrates using `sap.m.DateRangeSelection` with OData V4 dates via a JSON model. It requires specifying the `DateType` for `Edm.Date` properties using `sap.ui.model.odata.type.Date`. The `DateInterval` type is used to bind the start and end dates. The `formatOptions` are set to `UTC: true` to handle dates in UTC format. Dependencies include `sap/ui/model/odata/type/Date` and `sap/ui/model/type/DateInterval`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{\n        DateType: 'sap/ui/model/odata/type/Date',\n        DateInterval: 'sap/ui/model/type/DateInterval',\n    }\">\n    ...\n    <DateRangeSelection\n        value=\"{\n            parts: [{\n                path: 'json>/V4/Date1',\n                type: 'DateType'\n            }, {\n                path: 'json>/V4/Date2',\n                type: 'DateType'\n            }],\n            type: 'DateInterval',\n            formatOptions: {UTC: true}\n        }\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Point in XML Template\nDESCRIPTION: This XML snippet defines an extension point named 'HeaderInfo' within an XML template. The extension point includes a default content defined using SimpleForm. An expression binding showcases dynamic names.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/extension-points-b15e6af.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- expression binding just to showcase dynamic names -->\n<core:ExtensionPoint name=\"{:= 'HeaderInfo' }\">\n    <form:SimpleForm>\n        <form:title>\n            <core:Title text=\"HeaderInfo\"/>\n        </form:title>\n        <template:with path=\"entityType>com.sap.vocabularies.UI.v1.HeaderInfo\">\n            <!-- ... -->\n        </template:with>\n    </form:SimpleForm>\n</core:ExtensionPoint>\n```\n\n----------------------------------------\n\nTITLE: Defining Employee Overview XML View (sap.m)\nDESCRIPTION: This XML snippet defines the view for displaying the employee overview using SAPUI5's sap.m library. It includes a Table control with columns for various employee attributes, a header toolbar with a search field and sort button. The table is bound to the '/Employees' data model and displays employee information in a responsive layout.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-assign-multiple-targets-b01840e.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverviewContent\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Table id=\"employeesTable\"\n\t\titems=\"{/Employees}\">\n\t\t<headerToolbar>\n\t\t\t<Toolbar>\n\t\t\t\t<Title text=\"{i18n>Employees}\" level=\"H2\"/>\n\t\t\t\t<ToolbarSpacer />\n\t\t\t\t<SearchField id=\"searchField\" search=\".onSearchEmployeesTable\" width=\"50%\"/>\n\t\t\t\t<Button icon=\"sap-icon://sort\" press=\".onSortButtonPressed\"/>\n\t\t\t</Toolbar>\n\t\t</headerToolbar>\n\t\t<columns>\n\t\t\t<Column id=\"employeeIDCol\"><Text text=\"{i18n>EmployeeID}\"/></Column>\n\t\t\t<Column id=\"firstNameCol\" demandPopin=\"true\"><Text text=\"{i18n>FirstName}\"/></Column>\n\t\t\t<Column id=\"lastNameCol\" demandPopin=\"true\"><Text text=\"{i18n>LastName}\"/></Column>\n\t\t\t<Column id=\"addressCol\" minScreenWidth=\"Tablet\" demandPopin=\"true\"><Text text=\"{i18n>Address}\"/></Column>\n\t\t\t<Column id=\"cityCol\" minScreenWidth=\"Tablet\" demandPopin=\"true\"><Text text=\"{i18n>City}\"/></Column>\n\t\t\t<Column id=\"regionCol\" minScreenWidth=\"Tablet\" demandPopin=\"true\"><Text text=\"{i18n>Region}\"/></Column>\n\t\t\t<Column id=\"postalCodeCol\" minScreenWidth=\"Tablet\" demandPopin=\"true\"><Text text=\"{i18n>PostalCode}\"/></Column>\n\t\t\t<Column id=\"countryCol\" minScreenWidth=\"Tablet\" demandPopin=\"true\"><Text text=\"{i18n>Country}\"/></Column>\n\t\t\t<Column id=\"homePhoneCol\" minScreenWidth=\"Tablet\" demandPopin=\"true\" hAlign=\"Right\"><Text text=\"{i18n>Phone}\"/></Column>\n\t\t</columns>\n\t\t<items>\n\t\t\t<ColumnListItem>\n\t\t\t\t<cells>\n\t\t\t\t\t<Text text=\"{EmployeeID}\"/>\n\t\t\t\t\t<Text text=\"{FirstName}\"/>\n\t\t\t\t\t<Text text=\"{LastName}\"/>\n\t\t\t\t\t<Text text=\"{Address}\"/>\n\t\t\t\t\t<Text text=\"{City}\"/>\n\t\t\t\t\t<Text text=\"{Region}\"/>\n\t\t\t\t\t<Text text=\"{PostalCode}\"/>\n\t\t\t\t\t<Text text=\"{Country}\"/>\n\t\t\t\t\t<Text text=\"{HomePhone}\"/>\n\t\t\t\t</cells>\n\t\t\t</ColumnListItem>\n\t\t</items>\n\t</Table>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Refresh with Allow Removal - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to refresh an OData V4 context and allow its removal from the list binding if it no longer matches the filter criteria. It invokes an action ('confirmSalesOrderActionGroup') and then refreshes the context, setting the `bAllowRemoval` parameter to `true`.  This is useful when updating an entity that might no longer satisfy the collection's filter.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initialization-and-read-requests-fccfb2e.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\noAction.invoke(\"confirmSalesOrderActionGroup\").then(function () {\n    oConfirmedSalesOrderContext.refresh(undefined, true); // bAllowRemoval = true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Post.controller.js (SAPUI5)\nDESCRIPTION: This code snippet shows the `Post.controller.js` file, responsible for handling data binding and navigation for the Post view. It initializes a local view model to manage control states, attaches to the routing event to bind the view to the post with the specified ID, and implements the navigation back functionality.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-adding-the-post-page-4a9f063.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t'./BaseController',\n\t'sap/ui/model/json/JSONModel',\n\t'../model/formatter'\n], function (BaseController, JSONModel, formatter) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.bulletinboard.controller.Post\", {\n\t\tformatter: formatter,\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Called when the worklist controller is instantiated.\n\t\t * @public\n\t\t */\n\t\tonInit: function () {\n\t\t\t// Model used to manipulate control states. The chosen values make sure,\n\t\t\t// detail page is busy indication immediately so there is no break in\n\t\t\t// between the busy indication for loading the view's meta data\n\t\t\tvar oViewModel = new JSONModel({\n\t\t\t\t\tbusy: false\n\t\t\t\t});\n\t\t\tthis.getRouter().getRoute(\"post\").attachPatternMatched(this._onPostMatched, this);\n\t\t\tthis.setModel(oViewModel, \"postView\");\n\t\t},\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Navigates back to the worklist\n\t\t * @function\n\t\t */\n\t\tonNavBack: function () {\n\t\t\tthis.myNavBack(\"worklist\");\n\t\t},\n\t\t/* =========================================================== */\n\t\t/* internal methods                                            */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Binds the view to the post path.\n\t\t *\n\t\t * @function\n\t\t * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n\t\t * @private\n\t\t */\n\t\t_onPostMatched: function (oEvent) {\n\t\t\tvar oViewModel = this.getModel(\"postView\"),\n\t\t\t\toDataModel = this.getModel();\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: \"/Posts('\" + oEvent.getParameter(\"arguments\").postId + \"')\",\n\t\t\t\tevents: {\n\t\t\t\t\tdataRequested: function () {\n\t\t\t\t\t\toDataModel.metadataLoaded().then(function () {\n\t\t\t\t\t\t\t// Busy indicator on view should only be set if metadata is loaded,\n\t\t\t\t\t\t\t// otherwise there may be two busy indications next to each other on the\n\t\t\t\t\t\t\t// screen. This happens because route matched handler already calls '_bindView'\n\t\t\t\t\t\t\t// while metadata is loaded.\n\t\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function () {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Libraries and Initializing UI - HTML\nDESCRIPTION: This code snippet shows the `index.html` file, which initializes the OpenUI5 framework with specific libraries, compatibility version, and asynchronous loading. It also defines the resource roots and the module to be initialized.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-go-073d107.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>Quickstart Tutorial</title>\n\t<script id=\"sap-ui-bootstrap\"\n\t\tsrc=\"resources/sap-ui-core.js\"\n\t\tdata-sap-ui-libs=\"sap.m, sap.ui.layout, sap.tnt\"\n\t\tdata-sap-ui-compat-version=\"edge\"\n\t\tdata-sap-ui-async=\"true\"\n\t\tdata-sap-ui-on-init=\"module:ui5/quickstart/index\"\n\t\tdata-sap-ui-resource-roots='{\n\t\t\t\"ui5.quickstart\": \"./\"\n\t\t}'>\n\t</script>\n</head>\n<body class=\"sapUiBody\" id=\"content\"></body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Allowlist Service JSON Response\nDESCRIPTION: This code snippet illustrates the expected JSON response from the allowlist service. The `active` property determines whether the allowlist entry is active, and the `framing` property specifies whether framing should be allowed if the entry is active.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/allowlist-service-d04a6d4.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"version\" : \"1.0\",\n    \"active\"  : true | false,                   // defines if entry is active (if not, framing will be allowed per default)\n    \"origin\"  : \"<same as passed to service>\",\n    \"framing\" : true | false                    // if active, describes if framing should be allowed (see FrameOptions)\n}\n```\n\n----------------------------------------\n\nTITLE: UI5 Test Suite Configuration Object\nDESCRIPTION: This JSON object provides the default configuration settings for the UI5 test suite. It allows customization of test modules, test pages, QUnit/Sinon.JS settings, code coverage, and UI5 runtime environment.  The configuration is used by the test starter to initialize and run tests.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-options-738ed02.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t/*\n\t * ID(s) of the module(s) to load.\n\t *\n\t * Can either be a single string or an array of strings.\n\t * Each string might start with a leading \"./\" \n\t * when the test module is located in the same folder\n\t * as the testsuite configuration.\n\t * You can use the following placeholder:\n\t *   {name} - name of the current test module\n\t */\n\tmodule: \"./{name}.qunit\",\n\n\n\t/*\n\t * URL of the test page to start for this test.\n\t *\n\t * By default, all tests use the generic starter page which reads the suite\n\t * configuration, finds the tests and starts the configured test components\n\t * before it requires and executes the configured test module(s).\n\t *\n\t * The URL must be relative to the application root and can use the following\n\t * placeholders, enclosed in curly braces:\n\t *   {suite} - name of the testsuite (configuration)\n\t *   {name} - name of the current test module\n\t */\n\tpage: \"resources/sap/ui/test/starter/Test.qunit.html?testsuite={suite}&test={name}\",\n\n\n\t/*\n\t * Title of the test.\n\t * The URL must be relative to the application root and can use the following\n\t * placeholders, enclosed in curly braces:\n\t *   {suite} - name of the testsuite (configuration)\n\t *   {name} - name of the current test module\n\t */\n\ttitle: \"QUnit tests '{name}' of suite '{suite}'\",\n\n\n\t/*\n\t * QUnit configuration.\n\t *\n\t * Either can be a null or false or an object with the properties documented below.\n\t * The values null and false are equivalent to the object { version: null }\n\t */\n\tqunit: {\n\t\t/*\n\t\t * Version of QUnit that should be loaded.\n\t\t * If set to a null, QUnit won't be loaded.\n\t\t * If set to \"edge\", the newest available version of QUnit will be used.\n\t\t * If set to a number, the corresponding version of QUnit will be used if supported.\n\t\t * Currently supported versions are 1 and 2, an error will be thrown for unsupported versions.\n\t\t */\n\t\tversion: \"edge\",\n\n\t\t/*\n\t\t * Most statically configurable options from QUnit.config can be configured,\n\t\t * e.g. reorder, blocking etc.\n\t\t * Note that 'autostart' is an exception. To avoid timing issues with asynchronous test\n\t\t * loading, 'autostart' will always be set to false. Only after all tests have been loaded,\n\t\t * QUnit.start() will be called, either by the generic test starter or by the test module itself,\n\t\t * see the general test option 'autostart' below.\n\t\t */\n\t\t// reorder: true // only serves as an example, not part of the internal defaults of the starter\n\t},\n\n\t/*\n\t * Sinon.JS configuration.\n\t *\n\t * Either can be a null or false or an object with the properties documented below.\n\t * The values null and false are equivalent to the object { version: null }\n\t */\n\tsinon: {\n\n\t\t/*\n\t\t * Version of Sinon.JS that should be loaded.\n\t\t * If set to null, Sinon won't be loaded.\n\t\t * If set to \"edge\", the newest available version of Sinon will be used.\n\t\t * If set to a number, the corresponding version of Sinon will be used if supported.\n\t\t * Currently supported are versions 1 and 4, an error will be thrown for unsupported versions.\n\t\t */\n\t\tversion: \"edge\",\n\n\t\t/*\n\t\t * Whether one of the sinon-qunit bridges will be loaded.\n\t\t * When set to true, the sap/ui/thirdparty/sinon-qunit bridge will be loaded for Sinon 1\n\t\t * and the sap/ui/qunit/sinon-qunit-bridge will be loaded for newer versions of Sinon.\n\t\t *\n\t\t * The bridge will only be loaded after both, QUnit and Sinon.JS have been loaded.\n\t\t * If either QUnit or Sinon.JS are not loaded, no bridge will be loaded.\n\t\t *\n\t\t * If Sinon.JS is not loaded, but QUnit, the bridge will not be loaded, but a shim\n\t\t * with dependencies will be configured. This allows tests to load Sinon.JS/the bridge on\n\t\t * their own without taking care of the bridge dependencies. \n\t\t */\n\t\tqunitBridge: true,\n\n\n\t\t/*\n\t\t * Any other statically configurable Sinon option can be specified as well.\n\t\t * Note that they only play a role when a sandbox is used.\n\t\t */\n\t\tuseFakeTimers: false,\n\t\tuseFakeServer: false\n\t},\n\n\n\t/*\n\t * Code coverage options.\n\t * The qunit-coverage module will always be loaded after QUnit has been loaded to enable the coverage\n\t * option. When the 'coverage' parameter is set in the URL (e.g. because the coverage checkbox has been\n\t * clicked), then blanket will be loaded before qunit-coverage to avoid synchronous loading of it.\n\t */\n\tcoverage: {\n\t\tonly: null,\n\t\tnever: null,\n\t\tbranchTracking: false\n\t},\n\n\t/*\n\t * UI5 runtime configuration options.\n\t *\n\t * All properties will be copied to window[\"sap-ui-config\"].\n\t * If window[\"sap-ui-config\"] doesn't support it or if the value is of a type\n\t * not supported for window[\"sap-ui-config\"], executing the UI5 Core might fail.\n\t *\n\t * Only exception for now: the libs property can be an array of library names,\n\t * not only a comma separated string.\n\t *\n\t * To ease test development, the following defaults are defined by the test starter:\n\t */\n\tui5: {\n\t\tnoConflict: true,\n\t\tlibs: [],\n\t\ttheme: \"sap_horizon\"\n\t},\n\n\t/*\n\t * UI5 Loader configuration.\n\t *\n\t * The provided configuration will be passed to `sap.ui.loader.config` and can be used to \n\t * configure paths, shims, and other loader configuration.\n\t */\n\tloader: {},\n\n\t/*\n\t * Whether the test starter should call QUnit.start() after all prerequisites have been fulfilled\n\t * (e.g. QUnit, Sinon, a bridge, have been loaded, coverage tooling has been loaded and configured,\n\t * the Core has been booted, the test modules have been loaded and executed).\n\t */\n\tautostart: true,\n\n\n\t/*\n\t * Whether the test starter should skip a test file. Such tests will remain in the overview list,\n\t * but won't be executed in the test suite.\n\t */\n\tskip: false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Organization with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"org\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"org\" property pointing to the given property's path in OData V4. PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_89\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"org\" : { \"Path\" : \"PROPERTY\" } }\n```\n\n----------------------------------------\n\nTITLE: Adding Semantic Content to MasterPage\nDESCRIPTION: This code demonstrates how to add semantic content, such as sort, filter, and group actions, to a MasterPage. It uses SortSelect, FilterAction, and GroupAction controls from the sap.m.semantic library to provide common operations on a list of items. The example includes event handlers for the change, press, and group events.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/semantic-page-sap-m-4a97a07.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<SplitContainer>\n<masterPages>\n   <semantic:MasterPage>\n\n      <semantic:sort>\n         <semantic:SortSelect change=\"onSortChange\"\n                         items=\"{\n                     path: '/ProductCollectionStats/Filters',\n                     sorter: { path: 'Name' }\n                     }\">\n            <core:Item key=\"{type}\" text=\"{type}\" />\n         </semantic:SortSelect>\n      </semantic:sort>\n\n      <semantic:filter>\n         <semantic:FilterAction press=\"onFilterPress\"/>\n      </semantic:filter>\n\n      <semantic:group>\n         <semantic:GroupAction press=\"onGroupPress\"/>\n      </semantic:group>\n\n   </semantic:MasterPage>\n</masterPages>\n<detailPages>\n   ...\n</detailPages>\n</SplitContainer>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Detail View XML\nDESCRIPTION: This XML snippet defines a basic, empty detail view using the sap.ui.core.mvc namespace. It serves as the initial structure for the detail page within the Flexible Column Layout.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-adding-a-detail-page-4e4315c.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\txmlns:mvc=\"sap.ui.core.mvc\">\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Creating Detail View (XML)\nDESCRIPTION: This snippet creates the `Detail.view.xml` file. It includes the necessary XML namespaces and defines a `Page` control with the detail page title from the resource bundle and an `ObjectHeader` with the static text \"Invoice\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-typescript-6173e3d.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page\n\t\ttitle=\"{i18n>detailPageTitle}\">\n\t\t<ObjectHeader title=\"Invoice\"/>\n\t</Page\n></mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Attaching Bypassed Event to Router - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to attach a bypassed event listener to the SAPUI5 router. The event listener logs information about invalid hashes to the console using the `sap/base/Log` module.  It retrieves the invalid hash from the event parameters and logs a message with the hash and a descriptive message. This information can be used for analysis and debugging purposes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-16-handle-invalid-hashes-by-listening-to-bypassed-events-a7932a7.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\",\n\t\"sap/base/Log\"\n], function (BaseController, Log) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.App\", {\n\n\t\tonInit: function () {\n\t\t\t// This is ONLY for being used within the tutorial.\n\t\t\t// The default log level of the current running environment may be higher than INFO,\n\t\t\t// in order to see the debug info in the console, the log level needs to be explicitly\n\t\t\t// set to INFO here.\n\t\t\t// But for application development, the log level doesn't need to be set again in the code.\n\t\t\tLog.setLevel(Log.Level.INFO);\n\n\t\t\tvar oRouter = this.getRouter();\n\n\t\t\toRouter.attachBypassed(function (oEvent) {\n\t\t\t\tvar sHash = oEvent.getParameter(\"hash\");\n\t\t\t\t// do something here, i.e. send logging data to the backend for analysis\n\t\t\t\t// telling what resource the user tried to access...\n\t\t\t\tLog.info(\"Sorry, but the hash '\" + sHash + \"' is invalid.\", \"The resource was not found.\");\n\t\t\t});\n\t\t}\n\n\t});\n\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Input Control in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to bind an input control to a specific company in a list using the `bindElement` method. It sets the binding context to the first company in the `companies` array.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst oInput = this.byId(\"companyInput\");\noInput.bindElement(\"/companies/0\");\n```\n\n----------------------------------------\n\nTITLE: Create Post page object with back navigation action\nDESCRIPTION: This code defines an OPA5 page object for the Post page, including an action to simulate pressing the back button and an assertion to verify the page title.  The `iPressTheBackButton` action uses the `Press` action to trigger the button click.  The `theTitleShouldDisplayTheName` assertion verifies that the object header displays the expected title. Dependencies: `sap/ui/test/Opa5`, `sap/ui/test/matchers/Properties`, `sap/ui/test/actions/Press`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-testing-navigation-10592af.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t'sap/ui/test/Opa5',\n\t'sap/ui/test/matchers/Properties',\n\t'sap/ui/test/actions/Press'\n], function (Opa5, Properties, Press) {\n\t\t\"use strict\";\n\t\tvar sViewName = \"Post\";\n\t\tOpa5.createPageObjects({\n\t\t\tonThePostPage: {\n\t\t\t\tactions: {\n\t\t\t\t\tiPressTheBackButton: function () {\n\t\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\t\tid: \"page\",\n\t\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\t\tactions: new Press(),\n\t\t\t\t\t\t\terrorMessage: \"Did not find the nav button on object page\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tassertions: {\n\t\t\t\t\ttheTitleShouldDisplayTheName: function (sName) {\n\t\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\t\t\t\tid: \"objectHeader\",\n\t\t\t\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\t\t\t\tmatchers: new Properties({\n\t\t\t\t\t\t\t\t\t\ttitle: sName\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tsuccess: function (oPage) {\n\t\t\t\t\t\t\t\t\t\tOpa5.assert.ok(true, \"was on the remembered detail page\");\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\terrorMessage: \"The Post \" + sName + \" is not shown\"\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n```\n\n----------------------------------------\n\nTITLE: Modify App.view.xml for i18n Binding (XML)\nDESCRIPTION: This snippet updates the XML view to use the `i18n` resource model for text binding.  It specifies the model name `i18n` before the property name in the binding expression (e.g., `{i18n>panelHeaderText}`).  The labels and panel header now retrieve their text from the `i18n.properties` file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-resource-models-9790d9a.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:form=\"sap.ui.layout.form\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Panel headerText=\"{i18n>panelHeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n\t\t<form:SimpleForm editable=\"true\" layout=\"ColumnLayout\">\n\t\t\t<Label text=\"{i18n>firstName}\"/>\n\t\t\t<Input value=\"{/firstName}\" valueLiveUpdate=\"true\" width=\"200px\" enabled=\"{/enabled}\"/>\n\t\t\t<Label text=\"{i18n>lastName}\"/>\n\t\t\t<Input value=\"{/lastName}\" valueLiveUpdate=\"true\" width=\"200px\" enabled=\"{/enabled}\"/>\n\t\t\t<Label text=\"{i18n>enabled}\"/>\n\t\t\t<CheckBox selected=\"{/enabled}\"/>\n\t\t</form:SimpleForm>\n\t</Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Enabling Growing Feature in List - OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable the growing feature in an OpenUI5 list. It sets the `growing` property to true, specifies a threshold for the number of items to load at a time using `growingThreshold`, and disables scroll-to-load behavior with `growingScrollToLoad`. The list is bound to the '/ProductCollection' model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/growing-feature-for-table-and-list-9164ba7.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n <List\n    items=\"{/ProductCollection}\"\n    headerText=\"Products\"\n    growing=\"true\"\n    growingThreshold=\"4\"\n    growingScrollToLoad=\"false\">\n    <StandardListItem\n      title=\"{Name}\"\n      description=\"{ProductId}\"\n      icon=\"{ProductPicUrl}\"\n      iconDensityAware=\"false\"\n      iconInset=\"false\" />\n  </List>\n```\n\n----------------------------------------\n\nTITLE: Icon-Only Button with Tooltip and ariaLabelledBy in OpenUI5\nDESCRIPTION: This example illustrates how to create an icon-only button in OpenUI5 and provide a tooltip for accessibility. The `ariaLabelledBy` attribute associates the button with a hidden label for screen readers.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/labeling-and-tooltips-329a029.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Button icon=\"sap-icon://action\" press=\"onPress\" tooltip=\"Action Name\" ariaLabelledBy=\"actionButtonLabel\"/>\n```\n\n----------------------------------------\n\nTITLE: Modifying manifest.json with new route - JSON\nDESCRIPTION: Modifies the manifest.json file to include a new route named \"page2\" and target \"page2\".  The route maps the pattern \"page2\" to the AboutPage view and uses the layout \"EndColumnFullScreen\".  This allows the application to navigate to the AboutPage view in fullscreen mode.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-adding-more-pages-a59b3de.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\t\t...\n\t\t\t\"routes\": [\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \"page2\",\n\t\t\t\t\t\"name\": \"page2\",\n\t\t\t\t\t\"target\": \"page2\",\n\t\t\t\t\t\"layout\": \"EndColumnFullScreen\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \":layout:\",\n\t\t\t\t\t\"name\": \"list\",\n\t\t\t\t\t\"target\": [\n\t\t\t\t\t\t\"list\",\n\t\t\t\t\t\t\"detail\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \"detail/{product}/{layout}\",\n\t\t\t\t\t\"name\": \"detail\",\n\t\t\t\t\t\"target\": [\n\t\t\t\t\t\t\"list\",\n\t\t\t\t\t\t\"detail\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \"detail/{product}/detailDetail/{supplier}/{layout}\",\n\t\t\t\t\t\"name\": \"detailDetail\",\n\t\t\t\t\t\"target\": [\n\t\t\t\t\t\t\"list\",\n\t\t\t\t\t\t\"detail\",\n\t\t\t\t\t\t\"detailDetail\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"targets\": {\n\t\t\t\t\"list\": {\n\t\t\t\t\t\"name\": \"List\",\n\t\t\t\t\t\"controlAggregation\": \"beginColumnPages\"\n\t\t\t\t},\n\t\t\t\t\"detail\": {\n\t\t\t\t\t\"name\": \"Detail\",\n\t\t\t\t\t\"controlAggregation\": \"midColumnPages\"\n\t\t\t\t},\n\t\t\t\t\"detailDetail\": {\n\t\t\t\t\t\"name\": \"DetailDetail\",\n\t\t\t\t\t\"controlAggregation\": \"endColumnPages\"\n\t\t\t\t},\n\t\t\t\t\"page2\": {\n\t\t\t\t\t\"name\": \"AboutPage\",\n\t\t\t\t\t\"controlAggregation\": \"endColumnPages\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Component with Configuration\nDESCRIPTION: This JavaScript snippet demonstrates how to extend an existing SAP component with custom configurations, including view extensions, view modifications, view replacements, controller extensions, and controller replacements. The configuration is defined within the 'extensions' property of the metadata object. It shows how to hook into different extension points and modify the standard application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/example-component-configuration-08608ef.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsome.sap.Component.extend(\"some.customer.Component\", {\n    \n    metadata : {\n        .....some configuration\n        config: {\n            .....some configuration\n        },\n        extensions: {\n                      \n            \"sap.ui.viewExtensions\": {        \n                \"samples.components.ext.sap.Sub2\": {    \n                    \"extension2\": {    \n                        className: \"sap.ui.core.Fragment\",    \n                        fragmentName: \"samples.components.ext.customer.CustomFrag1\",\n                        type: \"XML\"\n                    },    \n                    \"extension3\": {\n                        className: \"sap.ui.core.mvc.View\",\n                        viewName: \"samples.components.ext.customer.CustomSubSubView1\",            \n                        type: \"XML\"\n                    }    \n                },\n                \"samples.components.ext.sap.Sub4\": {\n                    \"extension4\": {\n                        className: \"sap.ui.core.Fragment\",\n                        fragmentName: \"samples.components.ext.customer.CustomFrag2\",\n                        type: \"JS\"\n                    }\n                }\n            },\n            \n            \"sap.ui.viewModifications\": {        \n                \"samples.components.ext.sap.Sub3\": {    \n                    \"someCustomizableTextControl\": {    \n                        \"visible\": false\n                    }\n                }    \n            },\n\n            \"sap.ui.viewReplacements\": {\n                \"samples.components.ext.sap.Sub1\": {\n                    viewName: \"samples.components.ext.customer.CustomSub1\",\n                    type: \"XML\"\n                }\n            },\n            \n            \"sap.ui.controllerExtensions\": {\n                \"samples.components.ext.sap.Main\": {\n                    \"controllerName\": \"samples.components.ext.customer.MainExtension\"\n                }\n            },\n             \n            \"sap.ui.controllerReplacements\": {\n                \"samples.components.ext.sap.Main\": \"samples.components.ext.customer.MainReplacement\"\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Testing FlaggedType (Unit Tests)\nDESCRIPTION: This code defines unit tests for the FlaggedType custom data type. It includes tests for both formatting (converting from integer to boolean) and parsing (converting from boolean to integer).  It uses QUnit to define modules and tests, and sap.ui.define to manage dependencies.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-testing-a-new-module-a5bb7a6.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/*global QUnit*/\nsap.ui.define([\n\t\"sap/ui/demo/bulletinboard/model/FlaggedType\"\n], function (FlaggedType) {\n\t\"use strict\";\n\n\tQUnit.module(\"FlaggedType - formatting\");\n\n\tQUnit.test(\"Should convert 1 to true\", function (assert) {\n\t\t// Act\n\t\tvar bFormattedValue = new FlaggedType().formatValue(1);\n\t\t// Assert\n\t\tassert.strictEqual(bFormattedValue , true, \"The formatting conversion was correct\");\n\t});\n\n\tQUnit.test(\"Should convert other values to false\", function (assert) {\n\t\tvar oFlaggedType = new FlaggedType();\n\n\t\t// Act\n\t\tvar bFormattedZero = oFlaggedType.formatValue(0);\n\t\tvar bFormattedNegativeNumber = oFlaggedType.formatValue(-666);\n\t\t// Assert\n\t\tassert.strictEqual(bFormattedZero, false, \"The formatting conversion was correct\");\n\t\tassert.strictEqual(bFormattedNegativeNumber, false, \"The formatting conversion was correct\");\n\t});\n\n\tQUnit.module(\"FlaggedType - parsing\");\n\n\tQUnit.test(\"Should parse false to 0\", function (assert) {\n\t\t// Act\n\t\tvar iParsedValue = new FlaggedType().parseValue(false);\n\t\t// Assert\n\t\tassert.strictEqual(iParsedValue, 0, \"The parsing conversion matched the input\");\n\t});\n\n\tQUnit.test(\"Should parse true to 1\", function (assert) {\n\t\t// Act\n\t\tvar iParsedValue = new FlaggedType().parseValue(true);\n\t\t// Assert\n\t\tassert.strictEqual(iParsedValue, 1, \"The parsing conversion matched the input\");\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Control with External Renderer Module - JavaScript\nDESCRIPTION: This example shows a control that imports its renderer from a separate module. It defines the control's API and metadata and then assigns the imported renderer to the `renderer` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/renderer-object-c9ab345.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// module 'my/lib/MyControl'\nsap.ui.define([`sap/ui/core/Control`, `my/lib/MyControlRenderer`],\n    function(Control, MyControlRenderer) {\n    \"use strict\";\n   \n    var MyControl = Control.extend(\"my.lib.MyControl\", {\n        \n        // API of the control, as usual\n        metadata: {\n            ...\n        },\n        \n        // refer to imported renderer\n        renderer: MyControlRenderer\n        \n        ...\n    };\n    \n    return MyControl;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining UI Content in XML View\nDESCRIPTION: This snippet demonstrates how to define UI content (a sap.m.Text control) within an XML view. It adds the Text control with a 'Hello World' text property inside the <mvc:View> tag.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-xml-views-1409791.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Text text=\"Hello World\"/>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Extending Controller and Implementing onPress Event - JavaScript\nDESCRIPTION: This JavaScript snippet defines an OpenUI5 controller named 'ui5.quickstart.App' that extends `sap/ui/core/mvc/Controller`. It implements the `onPress` event handler, which displays a \"Hello App!\" message using `sap/m/MessageToast` when the associated button is pressed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-steady-128214a.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/m/MessageToast\"\n], (Controller, MessageToast) => {\n\t\"use strict\";\n\n\treturn Controller.extend(\"ui5.quickstart.App\", {\n\t\tonPress() {\n\t\t\tMessageToast.show(\"Hello App!\");\n\t\t}\n\t});\n\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Paths in SAP UI5\nDESCRIPTION: This code demonstrates how to configure resource paths in SAP UI5 using `sap.ui.loader.config`. This allows loading resources from a third-party server by defining a path mapping. The configuration maps a path prefix \"myPath\" to a relative path \"some/path\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.loader.config({paths:{\"myPath\": \"some/path\"}});\n```\n\n----------------------------------------\n\nTITLE: Initializing DateFormatter and Formatting Date (Weekday)\nDESCRIPTION: This snippet updates the DateFormatter to include a weekdayFormat which formats the date as the full day of the week (EEEE). The format function now includes a check to return the weekday if the date is within the past 7 days.  It depends on sap.ui.base.Object and sap.ui.core.format.DateFormat.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/ui/core/format/DateFormat\"\n], function(Object, DateFormat) {\n\treturn Object.extend(\"sap.ui.demo.bulletinboard.model.DateFormatter\", {\n\t\tconstructor: function(oProperties) {\n\t\t\tthis.timeFormat = DateFormat.getTimeInstance({\n\t\t\t\tstyle: \"short\"\n\t\t\t}, oProperties.locale);\n\t\t\tthis.weekdayFormat = DateFormat.getDateInstance({\n\t\t\t\tpattern: \"EEEE\"\n\t\t\t}, oProperties.locale);\n\t\t\tthis.now = oProperties.now;\n\t\t},\n\t\tformat: function(oDate) {\n\t\t\tif (!oDate) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tvar iElapsedDays = this._getElapsedDays(oDate);\n\t\t\tif (iElapsedDays === 0) {\n\t\t\t\treturn this.timeFormat.format(oDate);\n\t\t\t} else if (iElapsedDays === 1) {\n\t\t\t\treturn \"Yesterday\";\n\t\t\t} else if (iElapsedDays < 7) {\n\t\t\t\treturn this.weekdayFormat.format(oDate);\n\t\t\t}\n\t\t}\n\n```\n\n----------------------------------------\n\nTITLE: Transforming sap:topable to TopSupported\nDESCRIPTION: This snippet illustrates how the `sap:topable` annotation is transformed into the `Org.OData.Capabilities.V1.TopSupported` annotation.  The `Bool` property is set to `false` to indicate that the $top system query option is not supported.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_41\n\nLANGUAGE: xml\nCODE:\n```\nsap:topable = \"false\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Capabilities.V1.TopSupported\": {\"Bool\" : \"false\" }\n```\n\n----------------------------------------\n\nTITLE: Binding Date to Formatter in XML View (Post.view.xml)\nDESCRIPTION: This XML snippet demonstrates how to bind the 'Timestamp' property to a custom formatter function named 'date' within the view's controller. The path 'Timestamp' specifies the data source, and the formatter '.formatter.date' indicates the function to be used for formatting. The leading '.' specifies the controller instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-16-adding-the-date-formatter-2ca583d.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Text text=\"{\n\t\t\t\t\t\tpath: 'Timestamp',\n\t\t\t\t\t\tformatter: '.formatter.date'\n\t\t\t\t\t}\"/>\n```\n\n----------------------------------------\n\nTITLE: Attaching Data to Button with Write to DOM - JavaScript\nDESCRIPTION: Attaches custom data to a Button control instance and marks it to be written to the HTML DOM as a data attribute. This allows the data to be accessed and used by CSS or JavaScript for styling or testing purposes. The `myButton` variable is assumed to hold a reference to an existing `sap.m.Button` instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/writing-data-to-the-html-dom-as-data-attribute-1ef9fef.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyButton.data(\"mydata\", \"Hello\", true); // attach some data to the Button and mark it as\n          \"write to HTML\"\n```\n\n----------------------------------------\n\nTITLE: Adding Semantic Actions for Reorder and Unlist\nDESCRIPTION: This snippet adds two semantic actions, `PositiveAction` and `NegativeAction`, to the `semantic:SemanticPage` in the `Worklist.view.xml` file.  These actions are displayed as buttons in the footer bar. The `PositiveAction` triggers the `.onUpdateStockObjects` event handler, and the `NegativeAction` triggers the `.onUnlistObjects` event handler.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-adding-actions-to-the-worklist-2da220f.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\t controllerName=\"mycompany.myapp.MyWorklistApp.controller.Worklist\"\n\t xmlns=\"sap.m\"\n\t xmlns:mvc=\"sap.ui.core.mvc\"\n\t xmlns:semantic=\"sap.f.semantic\">\n\n\t <semantic:SemanticPage\n\t\t  id=\"page\"\n\t\t  headerPinnable=\"false\"\n\t\t  toggleHeaderOnTitleClick=\"false\"\n\t\t  showFooter=\"true\">\n\n\t\t  <semantic:titleHeading>\n\t\t\t\t<Title text=\"{i18n>worklistTitle}\"/>\n\t\t  </semantic:titleHeading>\n\t\t  ...\n\t </semantic:headerContent>\n\t <semantic:sendEmailAction>\n\t\t  <semantic:SendEmailAction id=\"shareEmail\" press=\".onShareEmailPress\"/>\n\t </semantic:sendEmailAction>\n\t <semantic:positiveAction>\n\t\t  <semantic:PositiveAction text=\"{i18n>TableProductsReorder}\" press=\".onUpdateStockObjects\"/>\n\t </semantic:positiveAction>\n\t <semantic:negativeAction>\n\t\t  <semantic:NegativeAction text=\"{i18n>TablePorductsUnlist}\" press=\".onUnlistObjects\"/>\n\t </semantic:negativeAction>\n</semantic:SemanticPage>\n```\n\n----------------------------------------\n\nTITLE: Test Suite Configuration (QUnit)\nDESCRIPTION: This code defines the configuration for the test suite. It specifies the QUnit version, UI5 theme, and includes a unit test for the formatter.  It also configures the test page and loader paths.  The test suite acts as the entry point for all tests.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-27-unit-test-with-qunit-e1ce1de.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define(() => {\n    \"use strict\";\n    return {\n        name: \"QUnit test suite for UI5 Walkthrough\",\n        defaults: {\n            page: \"ui5://test-resources/ui5/walkthrough/Test.qunit.html?testsuite={suite}&test={name}\",\n            qunit: {\n                version: 2\n            },\n            ui5: {\n                theme: \"sap_horizon\"\n            },\n            loader: {\n                paths: {\n                    \"ui5/walkthrough\": \"../\"\n                }\n            }\n        },\n        tests: {\n            \"unit/unitTests\": {\n                title: \"UI5 Walkthrough - Unit Tests\"\n            }\n        }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Switch to Draft Version on Edit - JavaScript\nDESCRIPTION: This JavaScript code shows how to display the active version of an `Artist` entity initially and switch to the draft version when the Edit button is pressed. It uses `bindContext` and `invoke` to call the EditAction and update the binding context of the object page.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// display \"active\" version of artist initially\nonInit : function () {\n    var oActiveArtistContext = oModel\n        \t.bindContext(\"/Artists(ArtistID='42',IsActiveEntity=true)\")\n        \t.getBoundContext();\n    this.byId(\"objectPage\").setBindingContext(oActiveArtistContext);\n},\n \n// display the \"inactive\" version of the entity returned by the \"EditAction\"\nonEdit : function () {\n    var that = this;\n    oModel.bindContext(\"name.space.EditAction(...)\", this.byId(\"objectPage\").getBindingContext(), {$$inheritExpandSelect : true})\n        .invoke()\n        .then(function (oInactiveArtistContext) {\n            that.byId(\"objectPage\").setBindingContext(oInactiveArtistContext);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Mode via API in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to set the animation mode for an OpenUI5 application using the `ControlBehavior.setAnimationMode` API. It uses the `sap/ui/core/AnimationMode` enumeration to control the level of animations used in the application. The possible values are `full`, `basic`, `minimal`, and `none`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-options-and-url-parameters-91f2d03.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[`ControlBehavior.setAnimationMode`](https://ui5.sap.com/#/api/module:sap/ui/core/ControlBehavior%23methods/sap/ui/core/ControlBehavior.setAnimationMode)\n```\n\n----------------------------------------\n\nTITLE: Theming Parameter Correct Usage (Good)\nDESCRIPTION: This JavaScript snippet shows the correct usage of theming parameters for attributes they are intended for. Do not use background colors for fonts or vice versa, for example, and do not use border colors for anything else but borders.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/css-styling-issues-9d87f92.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar sColor = sap.ui.core.theming.Parameters.get(\"sapUiButtonBorderColor\");\n$(oSomeDomElement).css(\"border-color\", sColor);\n```\n\n----------------------------------------\n\nTITLE: Update i18n Properties File (English)\nDESCRIPTION: This INI snippet updates the `i18n.properties` file to include new labels for address and panel header text. These labels are used for internationalization, allowing the application to be displayed in different languages. This file contains the default language (English) translations.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-binding-paths-accessing-properties-in-hierarchically-structured-models-9373793.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# Field labels\nfirstName=First Name\nlastName=Last Name\nenabled=Enabled\naddress=Address\n\n# Screen titles\npanel1HeaderText=Data Binding Basics \npanel2HeaderText=Address Details\n```\n\n----------------------------------------\n\nTITLE: Defining Final Methods in Controller Extensions\nDESCRIPTION: This example demonstrates how to define a final method in a controller extension.  Final methods can be called, but not overridden by subsequent controller extensions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-controller-extension-21515f0.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn ControllerExtension.extend(\"sap.my.ReuseExtension\", {\n        metadata: {\n            methods: {\n                \"myPublicMethod\": {\"public\": true, \"final\": true}\n            }\n        },\n        myPublicMethod: function() {\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Date with OData V2 Annotation\nDESCRIPTION: This code snippet shows how the `sap:semantics=\"yearmonthday\"` annotation in OData V2 is transformed to the `com.sap.vocabularies.Common.v1.IsCalendarDate` annotation with a boolean value of \"true\" in OData V4. The OData V2 annotation signifies that the property represents a calendar date, and the OData V4 annotation expresses this using a standard vocabulary term.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_63\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.IsCalendarDate\" : {\"Bool\" : \"true\"}\n```\n\n----------------------------------------\n\nTITLE: Conditional Visibility based on Rating and Order Amount - XML\nDESCRIPTION: This XML snippet sets the visibility of a control based on either the rating being 'VIP' (case-insensitive) or the order amount being greater than 10000. It uses the `toUpperCase()` method for case-insensitive comparison and the `||` operator for logical OR. The expression uses embedded binding syntax.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Set to visible if the rating is VIP, ignoring case or if the order amount is greater than 10,000. -->\nvisible=\"{=%{/rating}.toUpperCase() === 'VIP' || %{/orderAmount} > 10000}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple View using XML\nDESCRIPTION: This XML snippet defines a simple OpenUI5 view containing a button that is initially invisible. The button has an ID 'pressMeButton', the text 'Press me', and a press event handler 'onPress'. This view simulates a common scenario where UI elements appear or change asynchronously.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/getting-started-with-opa5-22f175e.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View controllerName=\"view.Main\"\n  xmlns=\"sap.m\"\n  xmlns:mvc=\"sap.ui.core.mvc\">\n  <App>\n    <Page>\n      <headerContent>\n        <Button id=\"pressMeButton\" text=\"Press me\" press=\"onPress\" visible=\"false\"/>\n      </headerContent>\n    </Page>\n  </App>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Model Values with Manual Type Creation\nDESCRIPTION: This JavaScript snippet shows how to initialize valid model values by manually creating a data type instance. It creates a DateTime type with specific constraints defined in the metadata. This approach is useful when there's no existing binding or metadata available to derive the type from. It formats a UI5Date instance before creating a new item.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/date/UI5Date\",\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/ui/model/odata/type/DateTime\"\n], function (UI5Date, Controller, DateTime) {\n    \"use strict\";         \n \n    return Controller.extend(\"myController\", { \n        onCreateItem() {\n            const oBirthDay = UI5Date.getInstance(1995, 5, 13);\n            // Create the type with the constraints as defined in the $metadata document\n            const oType = new DateTime(undefined, {displayFormat: \"date\"});  \n                          \n            this.byId(\"contacts\").getBinding(\"rows\").create({\n                Name: \"Max\",\n                LastName: \"Mustermann\",\n                BirthDay: oType.getModelValue(oBirthDay)\n            });\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Integer Data Type in XML View\nDESCRIPTION: This XML snippet demonstrates how to use the Integer data type within an OpenUI5 XML view. It defines an Input field with a value bound to the '/company/revenue' path of the data model and specifies the 'Integer' type. The 'core:require' attribute ensures that the Integer type is available.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    core:require=\"{Integer: 'sap/ui/model/type/Integer'}\">\n    <Input value=\"{path: '/company/revenue', type: 'Integer'}\"/>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Link to DetailDetail View - XML\nDESCRIPTION: Adds a link within the DetailDetail.view.xml which triggers the navigation to the new page. This modification adds a m:Link that is linked to an event handler in the DetailDetail controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-adding-more-pages-a59b3de.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.fcl.controller.DetailDetail\"\n\txmlns=\"sap.f\"\n\txmlns:m=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<DynamicPage toggleHeaderOnTitleClick=\"false\">\n\t\t<title>\n\t\t\t<DynamicPageTitle>\n\t\t\t\t<heading>\n\t\t\t\t\t<m:FlexBox wrap=\"Wrap\" fitContainer=\"true\" alignItems=\"Center\">\n\t\t\t\t\t\t<m:Title text=\"{products>text}\" wrapping=\"true\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t\t</m:FlexBox>\n\t\t\t\t</heading>\n\t\t\t</DynamicPageTitle>\n\t\t</title>\n\t\t<content>\n\t\t\t<m:Link text=\"Navigate to next page…\" press=\".handleAboutPress\"/>\n\t\t</content>\n\t</DynamicPage>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Resume on Link Press (JavaScript)\nDESCRIPTION: This JavaScript code adds the `onShowResume` event handler to the `Employee` controller. When the 'Flip to Resume' link is pressed, this handler retrieves the `EmployeeID` from the bound context of the view and navigates to the `employeeResume` route, passing the `employeeId` as a parameter. It relies on the `sap.ui.demo.nav.controller.BaseController` and uses the router to navigate.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-navigate-with-flip-transition-3e5f6f3.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.Employee\", {\n\t\t...\n\t\t_onBindingChange : function (oEvent) {\n\t\t\t// No data for the binding\n\t\t\tif (!this.getView().getBindingContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"notFound\");\n\t\t\t}\n\t\t}\n\t\t\t...\n\t\t},\n\t\tonShowResume : function (oEvent) {\n\t\t\tvar oCtx = this.getView().getElementBinding().getBoundContext();\n\n\t\t\tthis.getRouter().navTo(\"employeeResume\", {\n\t\t\t\temployeeId : oCtx.getProperty(\"EmployeeID\")\n\t\t\t});\n\t\t}\n\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Using LabelFor Matcher with I18N Key in OPA\nDESCRIPTION: This snippet demonstrates how to use the `sap.ui.test.matchers.LabelFor` matcher to find an `sap.m.Input` control associated with a `sap.m.Label` that has an i18n text with the key \"CART_ORDER_NAME_LABEL\". An action is then performed to enter text into the matched input field.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn new Opa5().waitFor({\n    controlType: \"sap.m.Input\",\n    // Get sap.m.Input which is associated with Label which have i18n text with key \"CART_ORDER_NAME_LABEL\"\n    matchers: new sap.ui.test.matchers.LabelFor({ key: \"CART_ORDER_NAME_LABEL\", modelName: \"i18n\" }),\n    // It will enter the given text in the matched sap.m.Input\n    actions: new sap.ui.test.actions.EnterText({ text: \"MyName\" })\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Currency Model in Detail Controller - TypeScript\nDESCRIPTION: This TypeScript code initializes a JSON model with currency information in the `Detail` controller. It creates a new `JSONModel` instance with a `currency` property set to \"EUR\". This model is then set on the view with the name \"view\", enabling data binding to display currency information within the view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-35-device-adaptation-typescript-ab8ed1b.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport UIComponent from \"sap/ui/core/ UIComponent\";\nimport { Route$PatternMatchedEvent } from \"sap/ui/core/routing/Route\";\nimport History from \"sap/ui/core/routing/History\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport ProductRating, { ProductRating$ChangeEvent } from \"../control/ProductRating\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\n\n/**\n * @namespace ui5.walkthrough.controller\n */\nexport default class Detail extends Controller {\n\n    onInit(): void {\n        const viewModel = new JSONModel({\n            currency: \"EUR\"\n        });\n        this.getView().setModel(viewModel, \"view\");   \n\n        const router = UIComponent.getRouterFor(this);\n        router.getRoute(\"detail\").attachPatternMatched(this.onObjectMatched, this);\n    }\n\t\t…\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing in Manifest - JSON\nDESCRIPTION: This JSON snippet configures the routing in the `manifest.json` file. It defines a route named `employeeList` with the URL pattern `employees` and associates it with the `employees` target.  The targets section defines the view to be displayed when this route is matched.  The `level` property helps determine the slide transition animation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-navigate-to-routes-with-hard-coded-patterns-782aac0.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"_version\": \"1.12.0\",\n\t\"sap.app\": {\n\t\t...\n\t},\n\t\"sap.ui\": {\n\t\t...\n\t},\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.nav.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"transition\": \"slide\",\n\t\t\t\t\"bypassed\": {\n\t\t\t\t\t\"target\": \"notFound\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"routes\": [{\n\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\"name\": \"appHome\",\n\t\t\t\t\"target\": \"home\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees\",\n\t\t\t\t\"name\": \"employeeList\",\n\t\t\t\t\"target\": \"employees\"\n\t\t\t}],\n\t\t\t\"targets\": {\n\t\t\t\t\"home\": {\n\t\t\t\t\t\"id\": \"home\",\n\t\t\t\t\t\"name\": \"Home\",\n\t\t\t\t\t\"level\" : 1\n\t\t\t\t},\n\t\t\t\t\"notFound\": {\n\t\t\t\t\t\"id\": \"notFound\",\n\t\t\t\t\t\"name\": \"NotFound\",\n\t\t\t\t\t\"transition\": \"show\"\n\t\t\t\t},\n\t\t\t\t\"employees\": {\n\t\t\t\t\t\"id\": \"employeeList\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee\",\n\t\t\t\t\t\"name\": \"EmployeeList\",\n\t\t\t\t\t\"level\" : 2\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Annotation File Term Replacement - XML\nDESCRIPTION: Shows how to add an additional property (`AscendingOnlyProperties`) to an existing annotation term (`Org.OData.Capabilities.V1.SortRestrictions`) defined in the annotation file. Because annotation terms are replaced as a whole, the existing `NonSortableProperties` also needs to be included.  This demonstrates the 'PUT' semantics used for annotation term merging.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-annotation-files-fd715d9.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Annotations Target=\"GWSAMPLE_BASIC.GWSAMPLE_BASIC_Entities/BusinessPartnerSet\">\n    <Annotation Term=\"Org.OData.Capabilities.V1.SortRestrictions\">\n        <Record>\n            <PropertyValue Property=\"AscendingOnlyProperties\">\n                <Collection>\n                    <PropertyPath>AnyPropertyPath</PropertyPath>\n                </Collection>\n            </PropertyValue>\n            <PropertyValue Property=\"NonSortableProperties\">\n                <Collection>\n                    <PropertyPath>BusinessPartnerID</PropertyPath>\n                </Collection>\n            </PropertyValue>\n        </Record>\n    </Annotation>\n</Annotations>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Entry with ODataListBinding - JavaScript\nDESCRIPTION: This snippet shows the `onCreate` event handler, which is triggered by pressing the \"Add User\" button. It uses `ODataListBinding.create` to create a new user with initial data and inserts it at the top of the table. It then focuses and selects the new row for data entry. The `_setUIChanges` method is called, and the `usernameEmpty` property in `appView` model is set to true.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-create-and-edit-b4f1266.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n        onCreate : function () {\n            var oList = this.byId(\"peopleList\"),\n                oBinding = oList.getBinding(\"items\"),\n                oContext = oBinding.create({\n                    \"UserName\" : \"\",\n                    \"FirstName\" : \"\",\n                    \"LastName\" : \"\",\n                    \"Age\" : \"18\"\n                });\n\n            this._setUIChanges();\n            this.getView().getModel(\"appView\").setProperty(\"/usernameEmpty\", true);\n\n            oList.getItems().some(function (oItem) {\n                if (oItem.getBindingContext() === oContext) {\n                    oItem.focus();\n                    oItem.setSelected(true);\n                    return true;\n                }\n            });\n        },\n...\n```\n\n----------------------------------------\n\nTITLE: Using InvisibleMessage with MessageStrip - JavaScript\nDESCRIPTION: This code demonstrates how to use the `sap.ui.core.InvisibleMessage` class to announce a dynamically generated `sap.m.MessageStrip` to screen readers. It initializes the InvisibleMessage instance, creates a MessageStrip with specific properties, and uses the announce method to inform the user about the message.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/invisible-messaging-b9a7d6f.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t'sap/ui/core/mvc/Controller',\n\t'sap/m/MessageStrip',\n\t'sap/ui/core/Element',\n\t'sap/ui/core/InvisibleMessage',\n\t'sap/ui/core/library'\n], function(Controller, MessageStrip, Element, InvisibleMessage, library) {\n\t\"use strict\";\n​\n\tvar InvisibleMessageMode = library.InvisibleMessageMode;\n​\n\treturn Controller.extend(\"sap.m.sample.DynamicMessageStripGenerator.C\", {\n        onInit: function () {\n            // Instantiate the Invisible Message service\n            this.oInvisibleMessage = InvisibleMessage.getInstance();\n        },\n​\n        // Create and show message strip with InvisibleMessage announcement based on a certain condition\n        showMessageStrip: function () {\n            var oMessageStrip = Element.getElementById(\"msgStrip\");\n            var iProductItems= this.getView().getModel().getProperty(\"/productItems\");\n​\n            if (oMessageStrip) {\n                oMessageStrip.destroy();\n            }\n​\n            if (iProductItems <= 99) {\n                this._createWarningMessage();\n            }\n        },\n​\n        _createWarningMessage: function () {\n            var sText = \"This product is likely to sell out soon.\",\n                oVerticalContent = this.byId(\"oVerticalContent\"),\n                oMessageStrip = new MessageStrip(\"msgStrip\", {\n                    text: sText,\n                    showCloseButton: true,\n                    showIcon: true,\n                    type: \"Warning\"\n                });\n​\n            // Announce the generated message and its type via the Invisible Message service\n            this.oInvisibleMessage.announce(\"New Information Bar of type warning: \" + sText, InvisibleMessageMode.Assertive);\n            oVerticalContent.addContent(oMsgStrip);\n        }\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Personalization State Changes - JavaScript\nDESCRIPTION: This code demonstrates how to handle state change events triggered by the personalization engine using `sap.m.p13n.Engine#attachStateChange`. The event handler receives the new control state after personalization changes and processes it to update the control's appearance and behavior. In this example, the table columns are toggled based on the `Columns` state.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/enablement-of-personalization-with-variant-management-f280251.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n//Registration of the event handler\nEngine.getInstance().attachStateChange(function(){\n\n    //The new control state after the personalization\n    var oState = oEvt.getParameter(\"state\");\n\n    //--> The following lines are meant to process the personalization state by toggling the table columns and recreating the binding and template.\n\t// this is just a demo implementation. The sorters and groupings can be created in a similar approach, also see the more detailed exmaple linked below.\n\n    oTable.getColumns().forEach(function(oColumn, iIndex){\n        oColumn.setVisible(false);\n    });\n\n    oState.Columns.forEach(function(oProp, iIndex){\n        var oCol = this.byId(oProp.key);\n        oCol.setVisible(true);\n\n        oTable.removeColumn(oCol);\n        oTable.insertColumn(oCol, iIndex);\n    }.bind(this));\n\n    var aCells = oState.Columns.map(function(oColumnState) {\n        return new Text({\n            text: \"{\" + oColumnState.key + \"}\"\n        });\n    });\n\n    oTable.bindItems({\n        templateShareable: false,\n        path: '/items',\n        sorter: aSorter,\n        template: new ColumnListItem({\n            cells: aCells\n        })\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Currency - OpenUI5 JavaScript\nDESCRIPTION: This code demonstrates how to parse a currency string into its numeric value and currency code using the `parse` method. It takes a currency string as input and returns an array containing the numeric value and the currency code. The NumberFormat module must be required prior to execution.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-formatting-e978728.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"NumberFormat\" required from module \"sap/ui/core/format/NumberFormat\"\nvar oCurrencyFormat = NumberFormat.getCurrencyInstance();\n\noCurrencyFormat.parse(\"EUR 12,345.678\"); // output: [12345.678, \"EUR\"]\n\n```\n\n----------------------------------------\n\nTITLE: Using Controller Extensions with TypeScript: Overrides\nDESCRIPTION: This snippet demonstrates how to define a controller extension with overrides in TypeScript.  It uses the `overrides` keyword, which the UI5 Babel transformer plugin handles to properly move into the `extend` definition block.  The `@namespace` comment is required for the extension class to be known by its full name at runtime.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-controller-extension-21515f0.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\n/**\n * @namespace my.sample\n */\nexport default class AppExtension extends ControllerExtension {\n   static readonly overrides = {\n     onInit: function() {\n       // ...\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Unit Type - JavaScript\nDESCRIPTION: This code snippet defines a new custom type, `MeterType`, as a subclass of `sap.ui.model.type.Unit`. It demonstrates how to include dynamic format options (like 'decimals') in the type definition. This type can then be used in property bindings to handle unit formatting and parsing out of the box.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/unit-formatting-8e618a8.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// defining a new custom Type as a subclass of the sap.ui.model.type.Unit type\nsap.ui.define([\"sap/ui/model/type/Unit\"], function(UnitType) {\n       \"use strict\";\n \n       return UnitType.extend(\"sap.ui.core.samples.MeterType\", {\n              constructor: function(oFormatOptions, oConstraints){\n                     // define the dynamic format options as the third argument\n                     // 'aDynamicFormatOptionNames'\n                     UnitType.apply(this, [oFormatOptions, oConstraints, [\"decimals\"]]);\n              }\n       });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining i18n properties for text localization - OpenUI5\nDESCRIPTION: This .properties file contains text definitions used for internationalization within the OpenUI5 application.  It includes button labels and tooltips. These texts are referenced in the XML view to provide a localized user experience.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-create-and-edit-b4f1266.md#_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n# Toolbar\n#XBUT: Button text for save\nsaveButtonText=Save\n\n#XBUT: Button text for cancel\ncancelButtonText=Cancel\n\n#XBUT: Button text for add user\ncreateButtonText=Add User\n\n\n\n#XTOL: Tooltip for sort\nsortButtonText=Sort by Last Name\n...\n# Messages\n#XMSG: Message for user changes sent to the service\nchangesSentMessage=User data sent to the server\n...\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Router from Controller - OpenUI5 (JavaScript)\nDESCRIPTION: This code illustrates how to access the router from within a controller. It uses `this.getOwnerComponent()` to obtain a reference to the owning component, and then calls `getRouter()` on the component instance. This ensures the controller has access to the component's router for navigation purposes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initializing-and-accessing-a-routing-instance-acdb6cd.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oRouter = this.getOwnerComponent().getRouter();\n```\n\n----------------------------------------\n\nTITLE: Alternative Route Definition without Layout (JSON)\nDESCRIPTION: This JSON snippet illustrates a route definition without a predefined layout. The layout can be dynamically changed in the `beforeRouteMatched` event handler. This approach is useful when the layout cannot be determined in advance. It provides flexibility by allowing the layout to adapt based on application logic.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/router-c6da1a5.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"pattern\": \"itemInfo\",\n   \"name\": \"itemInfo\",\n   \"target\": [\n      \"list\",\n      \"detail\",\n      \"detailDetail\"\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation and Data Binding - JavaScript\nDESCRIPTION: This JavaScript snippet defines the controller logic for the App view, including the onPress function to navigate to the second page, the onInit function to set up the JSON model with features data, and the onChange function to handle the switch event and toggle the visibility of the ready layout.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-go-073d107.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/m/MessageToast\",\n\t\"sap/ui/model/json/JSONModel\"\n], (Controller, MessageToast, JSONModel) => {\n\t\"use strict\";\n\n\treturn Controller.extend(\"ui5.quickstart.App\", {\n\t\tonPress() {\n\t\t\tMessageToast.show(\"Hello UI5!\");\n\t\t\tthis.byId(\"app\").to(this.byId(\"intro\"));\n\t\t},\n\n\t\tonInit() {\n\t\t\tthis.getView().setModel(new JSONModel({\n\t\t\t\t\tfeatures: [\n\t\t\t\t\t\t\"Enterprise-Ready Web Toolkit\",\n\t\t\t\t\t\t\"Powerful Development Concepts\",\n\t\t\t\t\t\t\"Feature-Rich UI Controls\",\n\t\t\t\t\t\t\"Consistent User Experience\",\n\t\t\t\t\t\t\"Free and Open Source\",\n\t\t\t\t\t\t\"Responsive Across Browsers and Devices\"\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t);\n\t\t},\n\n\t\tonChange(oEvent) {\n\t\t\tconst bState = oEvent.getParameter(\"state\");\n\t\t\tthis.byId(\"ready\").setVisible(bState);\n\t\t}\n\t});\n\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Photo with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"photo\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"photo\" property pointing to the given property's path in OData V4. PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_82\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"photo\" : { \"Path\" : \"PROPERTY\" } }\n```\n\n----------------------------------------\n\nTITLE: Extending BaseObject with `extend` in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a new class `foo.bar.MyClass` in OpenUI5 by extending `sap.ui.base.Object` using the `extend` method. It defines the constructor and adds a new method `ownMethod` to the prototype.  The class `Foo` is then returned as the module's value. The JSDoc `@alias` tag is used to associate the global name with the variable.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/creating-control-and-class-modules-c78c07c.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\"sap/ui/base/Object\"], function(BaseObject) {\n\n    /**\n     * Constructor for a new MyClass instance.\n     * \n     * @class\n     * Description for MyClass\n     * @extends sap.ui.base.Object\n     * @alias foo.bar.MyClass\n     */  \n    const Foo = BaseObject.extend(\"foo.bar.MyClass\", /** @lends foo.bar.MyClass.prototype */ {\n      constructor: function() {\n      }\n    });\n\n    Foo.prototype.ownMethod = function(a) {\n        return a * 2;\n    };\n\n    // return the module value, in this example a class\n    return Foo;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Default Content for Extension Point in XML View\nDESCRIPTION: This XML snippet illustrates how to define default content within an extension point in an OpenUI5 XML view. The content inside the `<core:ExtensionPoint>` tag is used as a template for data binding and is displayed unless custom content is provided.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-extension-403c050.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns=\"sap.m\"  xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\">\n    <ListBox items=\"{/names}\">\n        <core:ExtensionPoint name=\"extension1\">\n            <ListItem text=\"{firstName}\" />\n        </core:ExtensionPoint>\n    </ListBox>  \n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to Dialog Fragment (XML)\nDESCRIPTION: This snippet adds an icon to the `HelloDialog.fragment.xml` file, which is a dialog fragment. The `sap.ui.core.Icon` control is used to display the icon. The `src` attribute is set to `sap-icon://hello-world` to specify the \"Hello World\" icon from the SAP icon font.  The size and margin of the icon are also set.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-18-icons-typescript-49b1ac6.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<core:FragmentDefinition\n   xmlns=\"sap.m\"\n   xmlns:core=\"sap.ui.core\" >\n   <Dialog\n      id=\"helloDialog\"\n      title =\"Hello {/recipient/name}\">\n      <content>\n         <core:Icon\n            src=\"sap-icon://hello-world\"\n            size=\"8rem\"\n            class=\"sapUiMediumMargin\"/>\n      </content>\n      <beginButton>\n         <Button\n            text=\"{i18n>dialogCloseButtonText}\"\n            press=\".onCloseDialog\"/>\n      </beginButton>\n   </Dialog>\n</core:FragmentDefinition>\n```\n\n----------------------------------------\n\nTITLE: Deferred Function Binding with Primitive Result (OData V4)\nDESCRIPTION: This XML snippet displays a deferred function binding (`GetNumberOfAvailableItems(...)`) that returns a primitive value.  The result is accessed using the `value` binding. The function will not be executed immediately. It needs to be triggered by an invoke call.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Form id=\"getNumberOfAvailableItems\" binding=\"{/GetNumberOfAvailableItems(...)}\">\n    <Label text=\"Number of available items:\"/>\n    <Text text=\"{value}\"/>\n    <Button text=\"Call the function\" press=\"onGetNumberOfAvailableItems\"/>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Handling BeforeFastNavigationFocus Event for Custom Navigation\nDESCRIPTION: This code snippet illustrates the usage of the `onBeforeFastNavigationFocus` event handler for custom fast navigation handling. This handler is called before the central handling attempts to focus an element within the control. It determines whether the focus should be handled within the control, setting focus to first or last element based on navigation direction. `preventDefault` is called to skip the central focus setting if the focus is handled inside the control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-groups-for-fast-navigation-10b14c7.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nonBeforeFastNavigationFocus = function(oEvent) {\n  var oTarget;\n  if (jQuery.contains(this.getDomRef(), oEvent.source)) {\n    //The source is within the custom area (e.g. might happen when the focus is on a popup which is attached to an element within the custom area)\n    oTarget = oEvent.forward ? findNextDomRefToFocus(oEvent.source) : findPreviousDomRefToFocus(oEvent.source);\n  } else {\n    //The source is outside of the custom area\n    oTarget = oEvent.forward ? findFirstDomRefToFocus() : findLastDomRefToFocus();\n  }\n  if (oTarget) {\n    oEvent.preventDefault();\n    oTarget.focus();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Modules Via Inline Scripts - Avoid\nDESCRIPTION: This example highlights the issue of defining modules within inline scripts in HTML. This makes it difficult for other modules to address them. The module definition must be moved to a separate file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-for-loading-modules-4363b3f.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- BAD EXAMPLE - DON'T DO THIS -->\n<html>\n...  \n    <script>  \n        //Boot UI5  \n    </script>  \n    <script>  \n        //Definition for Module A  \n        sap.ui.define(function(){  \n            ...  \n        });  \n    </script>  \n    <script>  \n        // Start UI5 Application  \n    </script>  \n...  \n</html>\n```\n\n----------------------------------------\n\nTITLE: Replacing synchronous sap.ui.xmlview with asynchronous XMLView.create - JavaScript\nDESCRIPTION: This snippet demonstrates replacing the synchronous `sap.ui.xmlview` with the asynchronous `XMLView.create` method. It loads the `sap/ui/core/mvc/XMLView` module and then uses the `create` method to instantiate the XML view. The `then` method handles the created view instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-factories-replacement-491bd9c.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oView = sap.ui.xmlview({\n    viewName: \"my.View\"\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/mvc/XMLView\"], (XMLView) => {\n    XMLView.create({ \n        viewName: \"my.View\"\n    }).then((oView) => {/*...*/});\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Text Properties for Internationalization in INI\nDESCRIPTION: This INI snippet adds new text properties to the `i18n.properties` file for internationalization. These properties define the labels and titles used in the detail area, such as address and best friend information. The keys are used in the XML view to bind the text properties to the corresponding labels and titles.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-list-detail-scenario-ec44581.md#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n...\n# Detail Area\n#XTIT: Title for Address\naddressTitleText=Address\n \n#XFLD: Label for Address\naddressLabelText=Address\n \n#XFLD: Label for City\ncityLabelText=City\n \n#XFLD: Label for Region\nregionLabelText=Region\n \n#XFLD: Label for Country\ncountryLabelText=Country\n \n#XTIT: Title for Best Friend\nbestFriendTitleText=Best Friend\n \n#XFLD: Label for Best Friend Name\nnameLabelText=Name\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Control Methods - Bad Example\nDESCRIPTION: This example demonstrates the incorrect way of overriding a control's lifecycle method (`onAfterRendering`) directly. This replaces the original method, preventing it from being called and potentially breaking the control's functionality.  It also shows directly modifying a prototype's `setText` function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\noControl.onAfterRendering = function() {\n       // do something\n};\n\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Control Busy State - JavaScript\nDESCRIPTION: This code snippet shows how to define the default state of a control as `busy` so that it will be displayed as busy when it has been rendered.  The `Input` control must be required from module \"sap/m/Input\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/busy-indicators-0dd2110.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n\t\nvar oInput = new Input({\n    value: 'Hello World',\n    busy: true\n});   \n\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Formatter in XML View\nDESCRIPTION: This snippet shows how to use the defined custom formatter function `statusText` in an XML view. It uses the `core:require` attribute to load the formatter module. It binds the `text` property of an `ObjectStatus` control to the `Status` property of the data model and applies the `statusText` formatter, ensuring the controller's context is correctly bound using `.bind($controller)`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-22-custom-formatters-0f8626e.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <List\n        headerText=\"{i18n>invoiceListTitle}\"\n        class=\"sapUiResponsiveMargin\"\n        width=\"auto\"\n        items=\"{invoice>/Invoices}\">\n        <items>\n            <ObjectListItem\n                core:require=\"{\n                    Currency: 'sap/ui/model/type/Currency'\n                }\"\n                title=\"{invoice>Quantity} x {invoice>ProductName}\"\n                number=\"{\n                    parts: [\n                        'invoice>ExtendedPrice',\n                        'view>/currency'\n                    ],\n                    type: 'Currency',\n                    formatOptions: {\n                        showMeasure: false\n                    }\n                }\"\n                numberUnit=\"{view>/currency}\"\n                numberState=\"{= ${invoice>ExtendedPrice} > 50 ? 'Error' : 'Success' }\">\n                <firstStatus>\n                    <ObjectStatus\n                        core:require=\"{\n                            Formatter: 'ui5/walkthrough/model/formatter'\n                        }\"\n                        text=\"{\n                            path: 'invoice>Status',\n                            formatter: 'Formatter.statusText.bind($controller)'\n                        }\"/>\n                </firstStatus>\n            </ObjectListItem>\n        </items>\n    </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: XML Button with Model Property Parameter\nDESCRIPTION: This code shows how to pass a model property (`products>unitPrice`) as a parameter to the `.doSomething` function. The binding path is enclosed in `${...}`. The binding context is the context of the control that triggers the event.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-events-in-xml-views-b0fb4de.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Press Me\" press=\".doSomething(${products>unitPrice})\"/>\n```\n\n----------------------------------------\n\nTITLE: Finalize Rating and Reset State - JavaScript\nDESCRIPTION: This JavaScript snippet is part of the custom ProductRating control in OpenUI5. It disables the rating indicator and button, updates the label text with a final rating message from the resource bundle, and fires a \"change\" event with the current rating value. Dependencies include ResourceModel, ResourceBundle, RatingIndicator, Label, and Button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n\t\tconst resourceBundle = (this?.getModel(\"i18n\") as ResourceModel)?.getResourceBundle() as ResourceBundle;\n\t\t\n\t\t(this.getAggregation(\"_rating\") as RatingIndicator).setEnabled(false);\n\t\t(this.getAggregation(\"_label\") as Label).setText(resourceBundle.getText(\"productRatingLabelFinal\"));\n\t\t(this.getAggregation(\"_button\") as Button).setEnabled(false);\n\t\tthis.fireEvent(\"change\", {\n\t\t\tvalue: this.getValue()\n\t\t})\n\t}\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level with sap/base/Log (New)\nDESCRIPTION: This snippet demonstrates the new way of setting the log level using the sap/base/Log module. It uses sap.ui.require to load the module and then sets the level using either a numeric value or the Log.Level enum. This requires the sap/base/Log module to be loaded first.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-20f6ea7.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require(\"sap/base/Log\").setLevel(3);\n// OR\nvar Log = sap.ui.require(\"sap/base/Log\"); Log.setLevel(Log.Level.INFO);\n```\n\n----------------------------------------\n\nTITLE: Adding Text Resources to i18n.properties\nDESCRIPTION: This code adds new text resources to the `i18n.properties` file for the custom product rating control. It includes labels for user interaction and a confirmation message to be displayed on the detail page after the user provides a rating. The placeholders in `ratingConfirmation` are used for data binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n…\n# Detail Page\ndetailPageTitle=Walkthrough - Details\nratingConfirmation=You have rated this product with {0} stars\n\n# Product Rating\nproductRatingLabelInitial=Please rate this product\nproductRatingLabelIndicator=Your rating: {0} out of {1}\nproductRatingLabelFinal=Thank you for your rating!\nproductRatingButton=Rate\n```\n\n----------------------------------------\n\nTITLE: Hiding the Global Busy Indicator - JavaScript\nDESCRIPTION: This code snippet demonstrates how to hide the global busy indicator using `sap.ui.core.BusyIndicator`. Calling this function immediately releases the UI, making it responsive again. The `BusyIndicator` must be required from module \"sap/ui/core/BusyIndicator\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/busy-indicators-0dd2110.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nBusyIndicator.hide();\n```\n\n----------------------------------------\n\nTITLE: Enabling Header Adaptation in manifest.json - JSON\nDESCRIPTION: This code snippet demonstrates how to enable the full functionality of the automatic header adapter in the manifest.json file by setting the `sapFiori2Adaptation` property to `true` within the `sap.ui5/config` section. This enables all adaptations including style, collapse, title, back, and hierarchy settings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enabling-the-automatic-header-adaptation-for-legacy-applications-0635156.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n \"config\": {\n            ...\n            \"sapFiori2Adaptation\": true,\n            ...\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Logging an Error Message\nDESCRIPTION: This snippet demonstrates how to log an error message using the `Log.error` method in OpenUI5.  It requires the `sap/base/Log` module to be imported. The logged error message will be highlighted in red in the browser console, indicating a critical application issue.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/logging-and-tracing-9f4d62c.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Log\" required from module \"sap/base/Log\"\nLog.error(\"This should never have happened!\");\n```\n\n----------------------------------------\n\nTITLE: Resume View with Icon Tab Bar (XML)\nDESCRIPTION: This XML defines the `Resume` view, displaying employee resume data using an `IconTabBar`.  The `IconTabBar` is bound to the `Resume` data.  It includes tabs for information, projects, hobbies, and notes. The 'Projects' tab uses a nested `XMLView` for displaying project data. The view includes a back navigation button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-navigate-with-flip-transition-3e5f6f3.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.Resume\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page\n\t\ttitle=\"{i18n>ResumeOf} {FirstName} {LastName}\"\n\t\tid=\"employeeResumePage\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\">\n\t\t<content>\n\t\t\t<IconTabBar\n\t\t\t\tid=\"iconTabBar\"\n\t\t\t\theaderBackgroundDesign=\"Transparent\"\n\t\t\t\tclass=\"sapUiResponsiveContentPadding\"\n\t\t\t\tbinding=\"{Resume}\">\n\t\t\t\t<items>\n\t\t\t\t\t<IconTabFilter id=\"infoTab\" text=\"{i18n>tabInfo}\" key=\"Info\">\n\t\t\t\t\t\t<Text text=\"{Information}\"/>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"projectsTab\" text=\"{i18n>tabProjects}\" key=\"Projects\">\n\t\t\t\t\t\t<mvc:XMLView viewName=\"sap.ui.demo.nav.view.employee.ResumeProjects\"></mvc:XMLView>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"hobbiesTab\" text=\"{i18n>tabHobbies}\" key=\"Hobbies\">\n\t\t\t\t\t\t<Text text=\"{Hobbies}\"/>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"notesTab\" text=\"{i18n>tabNotes}\" key=\"Notes\">\n\t\t\t\t\t\t<Text text=\"{Notes}\"/>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t</items>\n\t\t\t</IconTabBar>\n\t\t</content>\n\t</Page>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Route with Optional Query Parameter in manifest.json\nDESCRIPTION: This snippet configures a route in the `manifest.json` file to allow optional query parameters. It adds the `:?query:` parameter to the `employeeResume` route pattern, enabling the passing of queries with any parameters.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-allow-bookmarkable-tabs-with-optional-query-parameters-b8561ff.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"_version\": \"1.12.0\",\n\t\"sap.app\": {\n\t\t...\n\t},\n\t\"sap.ui\": {\n\t\t...\n\t},\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.nav.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"transition\": \"slide\",\n\t\t\t\t\"bypassed\": {\n\t\t\t\t\t\"target\": \"notFound\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"routes\": [{\n\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\"name\": \"appHome\",\n\t\t\t\t\"target\": \"home\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees\",\n\t\t\t\t\"name\": \"employeeList\",\n\t\t\t\t\"target\": \"employees\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}\",\n\t\t\t\t\"name\": \"employee\",\n\t\t\t\t\"target\": \"employee\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}/resume:?query:\",\n\t\t\t\t\"name\": \"employeeResume\",\n\t\t\t\t\"target\": \"employeeResume\"\n\t\t\t}],\n\t\t\t\"targets\": {\n\t\t\t\t...\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Composite Binding Property with Paths - JS\nDESCRIPTION: This code snippet demonstrates how to create a composite binding using the bindValue method of an OpenUI5 control, specifying only the paths for the individual binding parts. It binds the 'value' property of an Input control to the 'firstName' and 'lastName' properties. The types are inferred implicitly.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/composite-binding-a2fe8e7.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\noTxt.bindValue({\n    parts: [\"/firstName\", \"/lastName\"]\n}); \n```\n\n----------------------------------------\n\nTITLE: Define package.json for UI5 Quickstart\nDESCRIPTION: This package.json file defines the project metadata, including the name, version, and description.  It also defines a \"start\" script that uses UI5 Tooling to serve the application from the index.html file. This file is essential for managing project dependencies and running the application.  Dependencies: UI5 Tooling.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-ready-851bde4.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ui5.quickstart\",\n  \"version\": \"1.0.0\",\n  \"description\": \"The UI5 quickstart tutorial\",\n  \"scripts\": {\n      \"start\": \"ui5 serve -o index.html\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: OData Hierarchy with Group Levels - XML View\nDESCRIPTION: This XML view example demonstrates how to configure an OData V4 table to display hierarchical data with group levels. The `$$aggregation` parameter is used to define `aggregate` properties (SalesAmount, grandTotal, and subtotals) and `group` properties (Country and Region) along with `groupLevels` (Country, Region, Segment). It includes a count, orderby, and filters.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-aggregation-and-recursive-hierarchy-7d91431.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<table:Table fixedRowCount=\"1\"\n   rows=\"{\n      path : '/BusinessPartners',\n      parameters : {\n         $$aggregation : {\n            aggregate : {\n               SalesAmount : {\n                  grandTotal : true,\n                  subtotals : true,\n                  unit : 'Currency'\n               }\n            },\n            group : {\n                Country : {additionally : ['CountryText']},\n                Region : {additionally : ['RegionText']}\n            },\n            groupLevels : ['Country','Region','Segment']\n         },\n         $count : false,\n         $orderby : 'Country,Region desc,Segment',\n         filters : {path : 'Region', operator : 'GE', value1 : 'Mid'}\n      }\n   }\">\n   <table:Column template=\"CountryText\">\n      <Label text=\"Country\"/>\n   </table:Column>\n   <table:Column template=\"RegionText\">\n      <Label text=\"Region\"/>\n   </table:Column>\n   <table:Column template=\"Segment\">\n      <Label text=\"Segment\"/>\n   </table:Column>\n   <table:Column hAlign=\"End\" template=\"SalesAmount\">\n      <Label text=\"Sales Amount\"/>\n   </table:Column>\n   <table:Column template=\"Currency\">\n      <Label text=\"Currency\"/>\n   </table:Column>\n</table:Table>\n```\n\n----------------------------------------\n\nTITLE: Static Binding Part Example 2 - XML\nDESCRIPTION: This XML snippet demonstrates using a static binding part with a DateTimeWithTimezone type. It displays only the timezone by using a static 'null' value for the date and time parts, combined with the TimezoneID property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/composite-binding-a2fe8e7.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{DateTimeWithTimezone: 'sap/ui/model/odata/type/DateTimeWithTimezone'}\">\n    <!-- 'TimezoneID' refers to an Edm.String property holding the IANA time zone ID -->\n    <Text text=\"{\n        formatOptions: {showDate: false, showTime: false},\n        parts: [{value: null}, {path: 'TimezoneID'}],\n        type: 'DateTimeWithTimezone'\n    }\"/>\n```\n\n----------------------------------------\n\nTITLE: XML Fragment with Conditional Rendering - XML\nDESCRIPTION: This XML fragment defines a reusable piece of UI with conditional rendering based on OData annotations. It checks for a specific semantic type ('tel') and displays an icon if the condition is met. The fragment leverages the template:with and template:if tags for conditional rendering and data binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-templating-5ee619f.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n1  <core:FragmentDefinition\n2      xmlns=\"sap.m\"\n3      xmlns:core=\"sap.ui.core\"\n4      xmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\">\n5   \n6      <!-- \"field\" MUST point to a com.sap.vocabularies.Communication.v1.DataField -->\n7      <HBox>\n8          <template:with path=\"field>Value\" helper=\"sap.ui.model.odata.AnnotationHelper.resolvePath\" var=\"target\">\n9              <!-- go to entity type's property and check SAP Annotations for OData Version 2.0 -->\n10             <template:if test=\"{= ${target>sap:semantics} === 'tel'}\" >\n11                 <core:Icon src=\"sap-icon://phone\" width=\"2em\"/>\n12             </template:if>\n13         </template:with>\n14         <Text text=\"{path: 'field>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\"/>\n15     </HBox>\n16 </core:FragmentDefinition>\n```\n\n----------------------------------------\n\nTITLE: i18n Properties for Detail Page\nDESCRIPTION: This INI snippet defines the i18n properties for the detail page, including the page title, rating confirmation text, and attribute titles for order date and quantity.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-35-device-adaptation-d63a15e.md#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Detail Page\ndetailPageTitle=Walkthrough - Details\nratingConfirmation=You have rated this product with {0} stars\ndateTitle=Order date\nquantityTitle=Quantity\n```\n\n----------------------------------------\n\nTITLE: Using AnnotationHelper.format with Currencies or Units (XML)\nDESCRIPTION: This XML snippet shows how to utilize `sap.ui.model.odata.v4.AnnotationHelper.format` to generate the composite binding for currency and unit data types within an XML template. It includes template aliases for both `format` and `label` from the `AnnotationHelper`. The example iterates through line items to create a table, dynamically generating input fields based on the `Value` property annotated with `@@format`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-and-unit-customizing-in-odata-v4-4d1b9d4.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<template:alias name=\"format\" value=\"sap.ui.model.odata.v4.AnnotationHelper.format\">\n<template:alias name=\"label\" value=\"sap.ui.model.odata.v4.AnnotationHelper.label\">\n<VBox>\n   <template:with path=\"meta>/ProductList/@com.sap.vocabularies.UI.v1.LineItem\" var=\"lineItem\">\n      <Table items=\"{/ProductList}\">\n         <columns>\n            <template:repeat list=\"{lineItem>}\" var=\"field\">\n               <Column>\n                  <Label text=\"{field>@@label}\" />\n               </Column>\n            </template:repeat>\n         </columns>\n         <ColumnListItem>\n            <template:repeat list=\"{lineItem>}\" var=\"field\">\n               <Input value=\"{field>Value/@@format}\" />\n            </template:repeat>\n         </ColumnListItem>\n      </Table>\n   </template:with>\n</VBox>\n</template:alias>\n</template:alias>\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Densities in manifest.json (JSON)\nDESCRIPTION: This code snippet shows the configuration of the `contentDensities` section within the `sap.ui5` namespace of the app descriptor (`manifest.json`). It specifies the modes that the application supports. Setting both `compact` and `cozy` to `true` enables the app to run in both modes, depending on the devices capabilities.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-36-content-density-typescript-667aa4a.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n...\n  \"sap.ui5\": {\n    ...  \n    },\n    \"contentDensities\": {\n      \"compact\": true,\n      \"cozy\": true\n    }\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Button with Expression Binding Parameter\nDESCRIPTION: This example showcases how to use Expression Binding to multiply a model property value and pass the result as an event parameter to a controller method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-events-in-xml-views-b0fb4de.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Press Me\" press=\".doSomething(10 * ${products>unitPrice})\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Control in TypeScript\nDESCRIPTION: This code defines a custom control named `ProductRating` in OpenUI5 using TypeScript. It imports the `Control` and `RenderManager` classes from `sap/ui/core`. The control's metadata, initialization logic (`init`), and rendering logic (`renderer`) are defined.  The renderer uses `apiVersion: 4` to leverage the latest features of the RenderManager.  The `metadata` and `init` are currently empty and the render function does nothing.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Control from \"sap/ui/core/Control\";\nimport RenderManager from \"sap/ui/core/RenderManager\";\n\n/**\n * @namespace ui5.walkthrough.control\n */\nexport default class ProductRating extends Control {\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\n\t}\n\tinit(): void {\n\t\n\t}\n\t\n\trenderer = {  \n\t\tapiVersion: 4,\n\t\trender: (rm: RenderManager, control: ProductRating) => {\n\t\t}\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Code List URL in OData V2 Metadata\nDESCRIPTION: This code snippet demonstrates how to specify the URL for the code list in the OData V2 metadata. Unlike OData V4, OData V2 requires all metadata information to be within the main metadata.xml file. The URL property is set to point to the current metadata file itself.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_93\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyValue Property=\"Url\" String=\"./$metadata\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Device Model in Component.js (JavaScript)\nDESCRIPTION: This JavaScript snippet initializes the device model using `sap.ui.Device` and sets it as a named model on the component. The model's binding mode is set to `OneWay` to prevent accidental modification of device properties.  Requires `sap/ui/Device` dependency.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-35-device-adaptation-d63a15e.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], (UIComponent, JSONModel, Device) => {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"ui5.walkthrough.Component\", {\n\t\tmetadata: {\n\t\t\tinterfaces: [\"sap.ui.core.IAsyncContentCreation\"],\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\t\tinit() {\n\t\t\t// call the init function of the parent\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// set data model\n\t\t\tconst oData = {\n\t\t\t\trecipient: {\n\t\t\t\t\tname: \"World\"\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst oModel = new JSONModel(oData);\n\t\t\tthis.setModel(oModel);\n\n\t\t\t// set device model\n\t\t\tconst oDeviceModel = new JSONModel(Device);\n\t\t\toDeviceModel.setDefaultBindingMode(\"OneWay\");\n\t\t\tthis.setModel(oDeviceModel, \"device\");\n\n\t\t\t// create the views based on the url/hash\n\t\t\tthis.getRouter().initialize();\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Deferred Action Binding in XML View (OData V4)\nDESCRIPTION: This XML snippet demonstrates a deferred action binding using `Submit(...)`. The action is bound to a Form, and a Button is used to trigger the action via the controller. The `...` is required to mark the binding as deferred, even though the action's resource URL does not contain it.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Form id=\"Submit\" binding=\"{/Submit(...)}\">\n    <Button text=\"Submit the action\" press=\"onSubmit\"/>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: XML Fragment Definition for Dialog - OpenUI5\nDESCRIPTION: This XML fragment defines a simple dialog with a title, text, and a close button. This fragment is intended to be loaded and used in a controller, and can be styled independently, including applying content densities. The root namespace must be `sap.m` and include the `sap.ui.core` namespace.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/how-to-use-densities-for-controls-13e6f3b.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\n    <Dialog title=\"Alert\" type=\"Message\">\n        <Text text=\"Lorem ipsum dolor sit amet\" />\n        <beginButton>\n            <Button text=\"Close\" press=\"onDialogClose\" />\n        </beginButton>\n    </Dialog>\n</core:FragmentDefinition>\n```\n\n----------------------------------------\n\nTITLE: Declarative XML Fragment Example\nDESCRIPTION: This XML fragment defines a simple UI containing two buttons. One button has an explicit ID (`btnInFragment`), while the other relies on auto-generation.  The namespace is `sap.m` and defines an HBox container for the buttons.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/ids-in-declarative-fragments-0715706.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<HBox xmlns=\"sap.m\">\n   <Button                    text=\"Hello World\" />\n   <Button id=\"btnInFragment\" text=\"Hello World\" />\n</HBox>\n```\n\n----------------------------------------\n\nTITLE: Accessing OData Properties via Binding Context in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve properties from an OData entity using the binding context obtained from an event source (e.g., a button click within a table row). It shows how to retrieve a property in both internal and external formats. The `getProperty` method is called on the binding context of the event source to get the 'SalesOrderID' and 'GrossAmount' properties.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-api-22ee78b.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// assume oEvent is an event fired when a button is pressed in an item of a table bound to /SalesOrderList\nsOrderID = oEvent.getSource().getBindingContext().getProperty(\"SalesOrderID\"); // the SalesOrderID in the same item\n\n// get a value in external format e.g. \"1.234,23\" instead of 1234.23\nsGrossAmount = oEvent.getSource().getBindingContext().getProperty(\"GrossAmount\", true);\n```\n\n----------------------------------------\n\nTITLE: i18n Property File Updates\nDESCRIPTION: This INI snippet shows the additions to the i18n.properties file to support the Employee Details view.  It defines labels and text for displaying employee details, such as Employee ID, First Name, Last Name, Address, and other contact information.  These properties are used for internationalization and localization of the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-navigate-to-routes-with-mandatory-parameters-f96d252.md#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n...\nEmployeeDetailsOf=Employee Details of\nEmployeeIDColon=Employee ID:\nformFirstName=First Name\nformLastName=Last Name\nformAddress=Address\nformCity=City\nformPostalCode=Postal Code\nformPhoneHome=Phone (Home)\nformCountry=Country\n```\n\n----------------------------------------\n\nTITLE: XML View - Incorrect Button Tag Case\nDESCRIPTION: This code snippet illustrates the incorrect way to define a Button control in an XML view.  Using lowercase letters for control tags will cause loading issues.  This example leads to the error message: `Uncaught Error: failed to load 'sap/m/button.js'`\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/an-empty-page-comes-up-51fe8f4.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<button text=\"Click me\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom OPA5 Extension\nDESCRIPTION: This JavaScript code defines a custom OPA5 extension by extending `sap.ui.test.OpaExtension`. It includes a `getAssertions` method that returns a map of custom assertion functions.  The assertion function returns a Promise that resolves with a QUnit.pushResult object indicating the assertion's success or failure.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/extensions-for-opa5-9c22d2a.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n  'sap/ui/test/OpaExtension'\n], function(OpaExtension) {\n  \"use strict\";\n  var customExtension = OpaExtension.extend(\"sap.ui.test.sample.CustomOpaExtension\", {\n    metadata : {\n      publicMethods : [\n        \"getAssertions\"\n      ]\n    },\n    getAssertions : function() {\n      return {\n        myCustomAssertion: function() {\n          return new Promise(function(resolve, reject) {\n\n            // start custom assertion logic, resolve the promise when ready\n            setTimeout(function() {\n\n              // Assertion passes\n              resolve({\n                result: true,\n                message: \"Custom assertion passes\"\n              });\n\n              // OR Assertion fails\n              resolve({\n                result: false,\n                message: \"Custom assertion fails\"\n              });\n\n              // OR Propagate an error while evaluating assertion\n              reject(new Error(\"Error while evaluating assertion, details: \" + details));\n\n            },0);\n\n          });\n        }\n      }\n    }\n  });\n  \n  return customExtension;\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying App Controller JS for Data Passing\nDESCRIPTION: This JavaScript code modifies the app controller to pass data for the supplier in the detail-detail page. The `onRouteMatched` function now saves the supplier ID from the route arguments in the `currentSupplier` property.  The `onStateChanged` function now includes the `currentSupplier` property when navigating, allowing the layout, product, and supplier information to be preserved.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-adding-a-detail-detail-page-e4d21fd.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\t\t...\n\t\tonRouteMatched: function (oEvent) {\n\t\t\tvar sRouteName = oEvent.getParameter(\"name\"),\n\t\t\t\toArguments = oEvent.getParameter(\"arguments\");\n\n\t\t\t// Save the current route name\n\t\t\tthis.currentRouteName = sRouteName;\n\t\t\tthis.currentProduct = oArguments.product;\n\t\t\tthis.currentSupplier = oArguments.supplier;\n\t\t},\n\n\t\tonStateChanged: function (oEvent) {\n\t\t\tvar bIsNavigationArrow = oEvent.getParameter(\"isNavigationArrow\"),\n\t\t\t\tsLayout = oEvent.getParameter(\"layout\");\n\n\t\t\t// Replace the URL with the new layout if a navigation arrow was used\n\t\t\tif (bIsNavigationArrow) {\n\t\t\t\tthis.oRouter.navTo(this.currentRouteName, {layout: sLayout, product: this.currentProduct, supplier: this.currentSupplier}, true);\n\t\t\t}\n\t\t},\n\n\t\tonExit: function () {\n\t\t\tthis.oRouter.detachRouteMatched(this.onRouteMatched, this);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: OData V4 List-Detail View Definition with XML\nDESCRIPTION: Defines a list and detail view using XML. The list view displays a table of SalesOrderList items with columns for SalesOrderID, CompanyName, GrossAmount, and Currency. The detail view displays the SalesOrderID, CompanyName, NetAmount, Currency, and Note for a selected SalesOrderList item. This demonstrates a typical master-detail scenario leveraging OData V4.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-reuse-648e360.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View id=\"list\">\n    <Table items=\"{/SalesOrderList}\">\n        <ColumnListItem>\n            <Text text=\"{SalesOrderID}\"/>\n            <Text text=\"{SO_2_BP/CompanyName}\"/>\n            <Text text=\"{GrossAmount}\"/>\n            <Text text=\"{Currency}\"/>\n        </ColumnListItem>\n    </Table>\n</mvc:View>\n \n<mvc:View id=\"detail\">\n    <Text text=\"{SalesOrderID}\"/>\n    <Text text=\"{SO_2_BP/CompanyName}\"/>\n    <Text text=\"{NetAmount}\"/>       \n    <Text text=\"{Currency}\"/>\n    <Text text=\"{Note}\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Setting Field Group IDs in Composite Controls\nDESCRIPTION: This code snippet demonstrates how a composite control should propagate the `fieldGroupIds` property to its inner aggregated controls. The `setFieldGroupIds` method is overridden to update the inner control's `fieldGroupIds` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/field-groups-5b07753.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nMyCompositeControl.prototype.setFieldGroupIds = function(vValue, bSuppressInvalidate) {\n    this._myAggregatedInnerControl.setFieldGroupIds(vValue, bSuppressInvalidate);\n    this.setProperty(\"fieldGroupIds\",vValue, bSuppressInvalidate);\n} \n```\n\n----------------------------------------\n\nTITLE: XML Button with Event Object Parameter\nDESCRIPTION: This code shows how to pass the original event object as a parameter to the `.doSomething` function using the `$event` special value. This is necessary if parameters are already being passed to the handler.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-events-in-xml-views-b0fb4de.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Press Me\" press=\".doSomething($event)\" />\n```\n\n----------------------------------------\n\nTITLE: Binding `this` Context using .bind($control) in XML\nDESCRIPTION: This XML snippet illustrates how to explicitly bind the `this` context to the control instance when using a formatter function in an OpenUI5 XML view. By using `.bind($control)` in the formatter string, the formatter function will have access to the control's properties and methods.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/formatting-parsing-and-validating-data-07e4b92.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<Text xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\" core:require=\"{\n\t\tMyFormatter: 'path/to/formatter'\n\t}\"\n\ttext=\"{\n\t\tpath: 'person/name',\n\t\tformatter: 'MyFormatter.upperFirstLetter.bind($control)'\n    }\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mock Server and Handling Custom URL Parameter\nDESCRIPTION: This code initializes the mock server with a custom URL parameter handler. It creates a mock server, simulates metadata, and defines a function to filter data based on the \"first\" parameter in the URL. This parameter is used to return only the first few entries of the Meetups entity set.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-handling-custom-url-parameters-46c1ca4.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/util/MockServer\",\n    \"sap/base/Log\"\n], (MockServer, Log) => {\n    \"use strict\";\n\n    return {\n        /**\n         * Initializes the mock server.\n         * You can configure the delay with the URL parameter \"serverDelay\".\n         * The local mock data in this folder is returned instead of the real data for testing.\n         * @public\n         */\n        init() {\n            // create\n            const oMockServer = new MockServer({rootUri: \"/\"});\n\n            oMockServer.simulate(\"../localService/metadata.xml\", {\n                sMockdataBaseUrl: \"../localService/mockdata\",\n                bGenerateMissingMockData: true\n            });\n\n            // handling custom URL parameter step\n            const fnCustom = (oEvent) => {\n                const oXhr = oEvent.getParameter(\"oXhr\");\n                if (oXhr?.url.includes(\"first\")) {\n                    oEvent.getParameter(\"oFilteredData\").results.splice(3, 100);\n                }\n            };\n            oMockServer.attachAfter(\"GET\", fnCustom, \"Meetups\");\n\n\n            // start\n            oMockServer.start();\n\n            Log.info(\"Running the app with mock data\");\n        }\n    };\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using I18NText Matcher with Library Bundle in OPA\nDESCRIPTION: This snippet uses `sap.ui.test.matchers.I18NText` with the `useLibraryBundle` option to find a `sap.m.Button` control whose text property matches the I18N key \"VIEWSETTINGS_ACCEPT\" from a library resource bundle.  Opa5 waits for the button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn new Opa5().waitFor({\n    controlType : \"sap.m.Button\",\n    matchers : new sap.ui.test.matchers.I18NText({\n       propertyName: \"text\",\n        key: \"VIEWSETTINGS_ACCEPT\",\n        useLibraryBundle: true\n    }),\n    success : function () {\n        Opa5.assert.ok(true, \"OK button is matched\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Declarative Component Initialization\nDESCRIPTION: This HTML snippet demonstrates how to initialize a UI5 component declaratively. The `data-sap-ui-on-init` attribute triggers the `sap/ui/core/ComponentSupport` module, which scans the DOM for elements with the `data-sap-ui-component` attribute. These elements are then treated as containers for `sap.ui.core.ComponentContainer` instances. The component's name, ID, and settings are defined using data attributes on the div element. The `autoPrefixId` property is set to `true` by default by the `ComponentSupport` module and is not needed here.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-descriptor-for-applications-typescript-2a46b75.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>UI5 TypeScript Walkthrough</title>\n\t<script\n\t\tid=\"sap-ui-bootstrap\"\n\t\tsrc=\"resources/sap-ui-core.js\"\n\t\tdata-sap-ui-theme=\"sap_horizon\"\n\t\tdata-sap-ui-compat-version=\"edge\"\n\t\tdata-sap-ui-async=\"true\"\n\t\tdata-sap-ui-on-init=\"module:sap/ui/core/ComponentSupport\"\n\t\tdata-sap-ui-resource-roots='{\n\t\t\t\"ui5.walkthrough\": \"./\"\n\t\t}'>\n\t</script>\n</head>\n<body class=\"sapUiBody\" id=\"content\">\n\t<div data-sap-ui-component data-name=\"ui5.walkthrough\" data-id=\"container\" data-settings='{\"id\" : \"walkthrough\"}'></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fast Navigation with onsapskipforward and onsapskipback\nDESCRIPTION: This code snippet demonstrates implementing custom fast navigation behavior using the `onsapskipforward` and `onsapskipback` event handlers. These handlers search for the next or previous DOM element to focus within the control. If a suitable target is found, the event is prevented from propagating further, and the focus is set on the target. If no suitable target is found within the control, the event is allowed to propagate, enabling central handling.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-groups-for-fast-navigation-10b14c7.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nonsapskipforward = function(oEvent){ //F6\n  var oTarget = findNextDomRefToFocus(oEvent.target); //Search for the next DOM element within the control which should be focused.\n  if(!oTarget){\n    //target is in the last group -> focus should jump to the first group after the control (done by the central handling, preventDefault not called)\n  }else{\n    oEvent.preventDefault();\n    oTarget.focus();\n  }\n};\n\nonsapskipback = function(oEvent){ //Shift+F6\n  var oTarget = findPreviousDomRefToFocus(oEvent.target); //Search for the previous DOM element within the control which should be focused.\n  if (!oTarget) {\n    //target is in the first group -> focus should jump to the first group before the control (done by the central handling, preventDefault not called)\n  } else {\n    oEvent.preventDefault();\n    oTarget.focus();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Operation Mode in manifest.json - JavaScript\nDESCRIPTION: This code snippet shows how to configure the OData V4 model to use server operation mode by setting the `operationMode` and `synchronizationMode` parameters within the `manifest.json` file of a SAPUI5 application. Setting `operationMode` to \"Server\" enables server-side filtering, sorting, and paging for list bindings. The `synchronizationMode` can be set to \"None\" for performance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/filtering-5338bd1.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n\"models\" : {\n    \"\" : {\n        \"dataSource\" : \"default\",\n        \"settings\" : {\n            \"operationMode\" : \"Server\",\n            \"synchronizationMode\" : \"None\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LabelFor Matcher with Text Property in OPA\nDESCRIPTION: This snippet shows how to use the `sap.ui.test.matchers.LabelFor` matcher to find an `sap.m.Input` control associated with a `sap.m.Label` that has the text \"Name\". An action is performed to enter text into the matched input, and then an assertion is used to ensure the input's value is correct.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn new Opa5().waitFor({\n    controlType: \"sap.m.Input\",\n    // Get sap.m.Input which is associated with Label which have i18n text with text \"Name\"\n    matchers: new sap.ui.test.matchers.LabelFor({ text: \"Name\" }),\n    // It will enter the given text in the matched sap.m.Input\n    actions: new sap.ui.test.actions.EnterText({ text: \"MyName\" }),\n    success: function (oInput) {\n        Opa5.assert.ok(oInput.getValue() === \"MyName\", \"Input value is correct\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Renderer Function Definition - JavaScript\nDESCRIPTION: This example shows a simple renderer function that directly defines the render logic. It opens a div, adds text from the control, and closes the div.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/renderer-object-c9ab345.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nrenderer: function(oRm, oControl) {\n    oRm.openStart(\"div\", oControl).openEnd().text(oControl.getText()).close(\"div\");\n}\n```\n\n----------------------------------------\n\nTITLE: IsOf Expression in OData JSON\nDESCRIPTION: This JSON snippet describes the structure of an OData IsOf expression. It contains properties to determine if a value is of a specific type, whether it's a collection, and to define max length, precision, scale, and SRID if applicable. The $IsOf property stores the value to be checked, and annotations are supported via the @... property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v4-metadata-json-format-87aac89.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n\"$IsOf\" : <value>,\n\"$isCollection\" : true, // omit in case of default value: false\n\"$Type\" : \"<14.5.7.1 IsOf Type>\",\n\"$MaxLength\" : <6.2.2 MaxLength>, // optional, number\n\"$Precision\" : <6.2.3 Precision>, // optional, number\n\"$Scale\" : <6.2.4 Scale> | \"variable\", // optional, number or fixed string\n\"$SRID\" : \"<6.2.6 SRID>\", // optional\n\"@...\" : <value>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Binding Context with and without Model Name in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to set the binding context for an OpenUI5 control, both without and with a specified model name.  Setting the binding context establishes a base path for relative bindings defined on the control. The first `setBindingContext` call sets the context without specifying a model name, while the second sets the context for a specific model named 'myModelName'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/binding-path-2888af4.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\noControl.setBindingContext(oContext );\noControl.setBindingContext(oContext,\"myModelName\");\n```\n\n----------------------------------------\n\nTITLE: Override getFocusDomRef in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to override the getFocusDomRef method in an OpenUI5 control to specify a custom DOM node to receive focus. It returns the second child node of the control's root DOM node as the focusable element.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/implementing-focus-handling-91f19f0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/Control\"\n], (Control) => {\n    \"use strict\";\n\n    return Control.extend(\"my.custom.SampleControl1\", {\n        // ...\n\n        getFocusDomRef() {\n            return this.getDomRef()?.firstChild?.nextSibling;\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Table Pagination Assertion\nDESCRIPTION: The `theTableShouldHavePagination` assertion verifies if the table has the correct number of items per page. It uses `Opa5.waitFor` and the `AggregationLengthEquals` matcher to check the number of items in the 'items' aggregation of the table. If the table has 20 items as defined, the `success` function confirms the assertion; otherwise, an error message is displayed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-a-first-opa-test-1b47457.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntheTableShouldHavePagination: function () {\n\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\tid: sTableId,\n\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\tmatchers: new AggregationLengthEquals({\n\t\t\t\t\t\t\tname: \"items\",\n\t\t\t\t\t\t\tlength: 20\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\tOpa5.assert.ok(true, \"The table has 20 items on the first page\");\n\t\t\t\t\t\t},\n\t\t\t\t\t\terrorMessage: \"The table does not contain all items.\"\n\t\t\t\t\t});\n\t\t\t\t}\n```\n\n----------------------------------------\n\nTITLE: Navigating with `navTo` method in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `navTo` method of the OpenUI5 Router to navigate to a specific route with parameters. It retrieves the Router instance and then calls `navTo` with the route name and parameters.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/methods-and-events-for-navigation-516e477.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.require([\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/ui/core/UIComponent\", ...\n], function(UIComponent, ...) {\n    \"use strict\";\n    return Controller.extend(\"MyApp.View2\",\n        anyEvent: function() {\n            var oRouter = this.getOwnerComponent().getRouter();\n            oRouter.navTo(\"product\", {\n                id: \"5\",\n                productId: \"3\"\n            });\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting frame-options to trusted with callback - HTML/JavaScript\nDESCRIPTION: This example demonstrates setting `frame-options` to `trusted` and configuring a callback function using `globalThis[\"sap-ui-config\"]`. The callback is executed based on the success state of the frame embedding check, allowing application-specific behavior. Requires OpenUI5 core library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/frame-options-62d9c4d.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\nglobalThis[\"sap-ui-config\"] = {\n    \"frame-options\": \"trusted\",\n    \"frame-options-config\": {\n        callback: function(bSuccess) {\n            if (bSuccess) {\n                alert(\"App is allowed to run!\");\n            } else {\n                alert(\"App is not allowed to run!\");\n            }\n        }\n    }\n};\n</script>\n<script id=\"sap-ui-bootstrap\"\n    src=\"resources/sap-ui-core.js\"\n    data-...=\"...\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling Blanket.js Code Coverage via JavaScript\nDESCRIPTION: This snippet demonstrates how to enable code coverage measurement using Blanket.js via JavaScript require statement.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/qunit/qunit-coverage\"], function(/*coverage*/){\n    // code\n});\n```\n\n----------------------------------------\n\nTITLE: Binding a Form Element in JavaScript with OData V4\nDESCRIPTION: This JavaScript code snippet demonstrates how to bind a form element to a specific sales order using the `bindElement` method. It showcases the use of binding expressions with properties such as `path`, `parameters` (including `$expand`), and `events` (including `dataReceived`) to further configure the binding. The binding is done to display or change single properties of the sales order.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-bindings-95cf4b1.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\noForm.bindElement({path : \"/SalesOrderList('0500000000')\", parameters : {$expand : \"SO_2_SOITEM\", ...}, events : {dataReceived : '.onDataEvents', ...}});\n```\n\n----------------------------------------\n\nTITLE: Initializing FullscreenPage\nDESCRIPTION: This code initializes a FullscreenPage using semantic pages. It uses the sap.m.semantic library to create a full-screen layout suitable for scenarios where the page should always take the entire screen. It demonstrates the basic structure for incorporating semantic pages in an OpenUI5 application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/semantic-page-sap-m-4a97a07.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\nheight=\"100%\"\nxmlns:mvc=\"sap.ui.core.mvc\"\nxmlns=\"sap.m\"\ncontrollerName=\"mycompany.myController\"\nxmlns:semantic=\"sap.m.semantic\"\ndisplayBlock=\"true\">\n\n<App>\n   <pages>\n      <semantic:FullscreenPage>\n         <!-- page content goes here -->\n      </semantic: FullscreenPage >\n   </pages>\n</App>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining Field Group IDs in XML View\nDESCRIPTION: This code snippet demonstrates how to define field group IDs for an input control within an XML view. The `fieldGroupIds` attribute is used with a comma-separated string of IDs.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/field-groups-5b07753.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n//XMLView declaration of multiple groups\n<input fieldGroupIds=\"MyGroup,MyGroup2\" /> \n```\n\n----------------------------------------\n\nTITLE: Exporting Data from sap.ui.table.Table (OpenUI5)\nDESCRIPTION: Demonstrates how to export data directly from a `sap.ui.table.Table` control. It calls the `exportData` method of the table, providing an `ExportTypeCSV` instance.  The `saveFile` method is then called to trigger the download, and `always` destroys the export object.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-data-binding-for-data-export-f1ee7a8.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// \"ExportTypeCSV\" required from module \"sap/ui/core/util/ExportTypeCSV\"\n\noTable.exportData({\n    exportType: ExportTypeCSV()\n})\n.saveFile()\n.always(function() {\n    this.destroy();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring neo-app.json for OpenUI5 in SAP Web IDE (JSON)\nDESCRIPTION: This code snippet demonstrates the configuration of a `neo-app.json` file to define routes for accessing OpenUI5 resources and test resources within an SAP Web IDE project. The `welcomeFile` specifies the entry point, while the `routes` array configures paths for `/resources` (SAPUI5 runtime) and `/test-resources` (test resources). The 'snapshot' version ensures usage of the latest OpenUI5 version. This configuration is required to correctly run and test OpenUI5 applications within the SAP Web IDE environment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/create-a-neo-app-json-project-configuration-file-28fa753.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"welcomeFile\": \"index.html\",\n  \"routes\": [\n    {\n      \"path\": \"/resources\",\n      \"target\": {\n        \"type\": \"service\",\n        \"name\": \"sapui5\",\n        \"version\": \"snapshot\",\n        \"entryPath\": \"/resources\"\n      },\n      \"description\": \"SAPUI5 Resources\"\n    },\n    {\n      \"path\": \"/test-resources\",\n      \"target\": {\n        \"type\": \"service\",\n        \"name\": \"sapui5\",\n        \"entryPath\": \"/test-resources\"\n      },\n      \"description\": \"SAPUI5 Test Resources\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Detail View XML with ProductRating Integration\nDESCRIPTION: This XML snippet integrates the custom ProductRating control into the detail view of an OpenUI5 application. It adds a new XML namespace (`wt`) for referencing custom controls, includes an instance of ProductRating, sets its `tooltip` and `class` properties and attaches the `onRatingChange` event handler. The control ID \"rating\" is essential for resetting when navigating.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.Detail\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:wt=\"ui5.walkthrough.control\">\n\t<Page\n\t\ttitle=\"{i18n>detailPageTitle}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\">\n\t\t<ObjectHeader\n\t\t\tintro=\"{invoice>ShipperName}\"\n\t\t\ttitle=\"{invoice>ProductName}\"/>\n\t\t<wt:ProductRating \n\t\t\tid=\"rating\"\n\t\t\ttooltip=\"{invoice>ProductName}\"\n\t\t\tclass=\"sapUiSmallMarginBeginEnd\" \n\t\t\tchange=\".onRatingChange\"/>\n\t</Page>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source in manifest.json for Remote Destination (OData)\nDESCRIPTION: This code snippet demonstrates how to configure a data source in the `manifest.json` file to use a remote destination for an OData service. The `uri` property points to `/V2/Northwind/Northwind.svc/`, which will be resolved using the configured destination. The `type` is set to \"OData\", and the `odataVersion` is set to \"2.0\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/request-fails-due-to-same-origin-policy-cross-origin-resource-sharing-cors-672301f.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_version\": \"1.59.0\",\n  \"sap.app\": {\n\t...\n\t\"dataSources\": {\n\t  \"invoiceRemote\": {\n\t\t\"uri\": \"/V2/Northwind/Northwind.svc/\",\n\t\t\"type\": \"OData\",\n\t\t\"settings\": {\n\t\t  \"odataVersion\": \"2.0\"\n\t\t}\n\t  }\n\t}\n  },\n  \"sap.ui\": {\n\t...\n  },\n  \"sap.ui5\": {\n\t...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Semantic Content to SemanticPage (OpenUI5 XML)\nDESCRIPTION: This XML snippet illustrates how to add semantic content to a `SemanticPage`, specifically `sendEmailAction` and `discussOnSAPWorkZoneAction`. These actions are automatically styled and positioned according to the underlying semantics. The `press` event handler defines the action to be performed when the button is clicked.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/semantic-page-sap-f-47dc868.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   height=\"100%\"\n   xmlns:mvc=\"sap.ui.core.mvc\"\n   xmlns=\"sap.m\"\n   xmlns:semantic=\"sap.f.semantic\">\n\n   <semantic:SemanticPage>\n      ...\n\n      <!-- will automatically create a button with \"email\" icon and style and position it in accord with the underlying semantics -->\n      <semantic:sendEmailAction press=\"onSendEmailPress >\n         <semantic:SendEmailAction />\n      </semantic:sendEmailAction>\n\n\n     <!-- will automatically create a button with icon, styling and positioning in accord with the underlying semantics -->\n      <semantic:discussOnSAPWorkZoneAction press=\"onDiscussOnSAPWorkZonePress\">\n         <semantic:DiscussOnSAPWorkZoneAction />\n      </semantic:discussOnSAPWorkZoneAction>\n \n     ...\n\n   </semantic:SemanticPage>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Using a Formatter Function in an XML View\nDESCRIPTION: This XML snippet demonstrates how to use a formatter function defined in a JavaScript module within an OpenUI5 view.  It utilizes the `core:require` namespace to import the formatter module and then references the specific formatting function within the `text` binding of a `Text` control. The `path` attribute specifies the data source, and the `formatter` attribute specifies the formatter function to apply.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/formatting-parsing-and-validating-data-07e4b92.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Text xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\" core:require=\"{\n\t\tMyFormatter: 'path/to/formatter'\n\t}\"\n\ttext=\"{\n\t\tpath: 'person/name',\n\t\tformatter: 'MyFormatter.upperFirstLetter'\n    }\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Grouping List Items Declaratively - XML\nDESCRIPTION: This code snippet shows how to group a list of invoices by the 'ShipperName' field using the 'sorter' property with the 'group' attribute set to true in the XML view. The 'path' property within the sorter specifies the data path to group by.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-24-sorting-and-grouping-c4b2a32.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <List\n        id=\"invoiceList\"\n        headerText=\"{i18n>invoiceListTitle}\"\n        class=\"sapUiResponsiveMargin\"\n        width=\"auto\"\n        items=\"{\n            path : 'invoice>/Invoices',\n            sorter : {\n                path : 'ShipperName',\n                group : true\n            }\n\n        }\">\n        ...\n    </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Year Quarter with OData V2 Annotation\nDESCRIPTION: This code snippet shows how the `sap:semantics=\"yearquarter\"` annotation in OData V2 is converted to the `com.sap.vocabularies.Common.v1.IsCalendarYearQuarter` annotation with a boolean value of \"true\" in OData V4. The OData V2 annotation indicates the property is a calendar year quarter, and the OData V4 annotation standardizes this.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_65\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.IsCalendarYearQuarter\" : {\"Bool\" : \"true\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing FileSizeFormat Instance\nDESCRIPTION: This code snippet demonstrates how to instantiate the sap.ui.core.format.FileSizeFormat class using the getInstance() method.  It returns a singleton instance of the formatter. No parameters are passed in this basic example.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/file-size-format-24f340b.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar oFileSizeFormat = sap.ui.core.format.FileSizeFormat.getInstance();\n```\n\n----------------------------------------\n\nTITLE: Declarative Matcher Syntax OPA5 (JavaScript)\nDESCRIPTION: These snippets show how to use declarative matchers in OPA5 with JSON objects to simplify the `waitFor` statement. It covers declaring matchers on the top level and within the `matchers` parameter, including how to declare multiple matchers and handle ancestors/descendants. The declarative syntax uses JSON-compatible properties available in a typical `waitFor` statement.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nreturn this.waitFor({\n    controlType : \"sap.m.Text\",\n    matchers : function () {\n        // ...\n    }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.waitFor({\n    controlType : \"sap.m.Text\",\n    propertyStrictEquals: {\n        name : \"text\",\n        value : \"foo\"\n    }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.waitFor({\n    controlType : \"sap.m.Text\",\n    matchers: {\n        propertyStrictEquals: {\n            name : \"text\",\n            value : \"foo\"\n        }\n    }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// declaration\nthis.waitFor({\n    controlType : \"sap.m.Text\",\n    matchers: {\n        propertyStrictEquals: {\n            name : \"text\",\n            value : \"foo\"\n        }\n    }\n});\n\n// instantiation\nthis.waitFor({\n    controlType : \"sap.m.Text\",\n    matchers: new PropertyStrictEquals({\n        name : \"text\",\n        value : \"foo\"\n    })\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// declaration\nthis.waitFor({\n    matchers: {\n        properties: [{\n            text: \"hello\"\n        }, {\n            number: 0\n        }]\n    }\n});\n\n// instantiation\nthis.waitFor({\n    matchers: [\n        new PropertyStrictEquals({\n            name : \"text\",\n            value : \"foo\"\n        }),\n        new PropertyStrictEquals({\n            name : \"number\",\n            value : 0\n        })\n    ]\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// declaration\nthis.waitFor({\n    controlType: \"sap.m.Text\",\n    matchers: {\n        ancestor: {\n            controlType : \"sap.m.Bar\",\n            properties: {\n                text: \"hello\"\n            }\n        }\n    }\n});\n\n// instantiation\nthis.waitFor({\n    controlType : \"sap.m.Bar\",\n    matchers: new Properties({\n        text: \"hello\"\n    }),\n    success: function (aAncestors) {\n        var oAncestor = aAncestors[0]; // order not guaranteed\n        return this.waitFor({\n            controlType: \"sap.m.Text\",\n            matchers: new Ancestor(oAncestor)\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting File Size with Binary and Decimal Options\nDESCRIPTION: This snippet demonstrates how to format file sizes using different options, specifically setting the `binaryFilesize` parameter to true or false. When set to true, base 2 (1024 bytes per KB) is used; otherwise, base 10 (1000 bytes per KB) is used. The `decimals` parameter is also set.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/file-size-format-24f340b.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar oFileSizeFormat =  sap.ui.core.format.FileSizeFormat.getInstance({\n    binaryFilesize: true,\n    decimals: 2\n});\n \noFileSizeFormat.format(1023); //returns 1,023.00 Bytes because it's smaller than 1 KB (1024 Bytes)\n \noFileSizeFormat = sap.ui.core.format.FileSizeFormat.getInstance({\n    binaryFilesize: false,\n    decimals: 2\n});\noFileSizeFormat.format(1023); //returns 1.02 KB because it's bigger than 1 KB (1000 Bytes)\n```\n\n----------------------------------------\n\nTITLE: Binding Date Value to DatePicker - XML\nDESCRIPTION: This code binds a date value from the backend (Edm.DateTime or Edm.DateTimeOffset) to a DatePicker control. The `displayFormat` constraint specifies whether the value should be interpreted as a Date or DateTime. The DateTime data type from 'sap/ui/model/odata/type/DateTime' is required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/date-and-time-related-controls-data-binding-e1ddc69.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<DatePicker\n    core:require=\"{\n        DateTime: 'sap/ui/model/odata/type/DateTime'\n    }\"\n    value=\"{\n        path: 'EntryDate',\n        type: 'DateTime',\n        constraints: {\n            displayFormat: 'Date'\n        }\n    }\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Private EventBus Instance - SAPUI5 JavaScript\nDESCRIPTION: Shows how to create a new, private EventBus instance using the `EventBus` constructor. This decouples the new instance from the global EventBus, allowing for isolated event handling and preventing unintended side effects in other parts of the application.  It supports subscribing to and publishing on channels.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst oMyOwnEventBus = new EventBus();\noMyEventBus.subscribe(\"my-channel-id\", \"my-event-id\")\noMyEventBus.publish(\"my-channel-id\", \"my-event-id\", { /* data */ })\n```\n\n----------------------------------------\n\nTITLE: Creating List.view.xml: DynamicPage for product list\nDESCRIPTION: This XML view defines the list page using the `sap.f.DynamicPage` control. It includes a title, content (table with product information), and a footer with action buttons. The table displays product names, IDs, prices, and currencies.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-using-dynamic-page-for-the-list-view-0830bce.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.fcl.controller.List\"\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:f=\"sap.f\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<f:DynamicPage id=\"dynamicPageId\" toggleHeaderOnTitleClick=\"false\">\n\t\t<!-- DynamicPage Title -->\n\t\t<f:title>\n\t\t\t<f:DynamicPageTitle>\n\t\t\t\t<f:heading>\n\t\t\t\t\t<Title text=\"Products ({products>/ProductCollectionStats/Counts/Total})\"/>\n\t\t\t\t</f:heading>\n\t\t\t</f:DynamicPageTitle>\n\t\t</f:title>\n\n\t\t<!-- DynamicPage Content -->\n\t\t<f:content>\n\t\t\t<VBox fitContainer=\"true\">\n\t\t\t\t<OverflowToolbar class=\"sapFDynamicPageAlignContent\">\n\t\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t\t<SearchField search=\".onSearch\" width=\"17.5rem\"/>\n\t\t\t\t\t<OverflowToolbarButton icon=\"sap-icon://add\" text=\"Add\" type=\"Transparent\" press=\".onAdd\"/>\n\t\t\t\t\t<OverflowToolbarButton icon=\"sap-icon://sort\" text=\"Sort\" type=\"Transparent\" press=\".onSort\"/>\n\t\t\t\t</OverflowToolbar>\n\t\t\t\t<Table\n\t\t\t\t\tid=\"productsTable\"\n\t\t\t\t\tinset=\"false\"\n\t\t\t\t\titems=\"{\n\t\t\t\t\t\tpath: 'products>/ProductCollection',\n\t\t\t\t\t\tsorter: {\n\t\t\t\t\t\t\tpath: 'Name'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\"\n\t\t\t\t\tclass=\"sapFDynamicPageAlignContent\"\n\t\t\t\t\twidth=\"auto\">\n\t\t\t\t\t<columns>\n\t\t\t\t\t\t<Column width=\"12em\">\n\t\t\t\t\t\t\t<Text text=\"Product\"/>\n\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t<Column\thAlign=\"End\">\n\t\t\t\t\t\t\t<Text text=\"Price\"/>\n\t\t\t\t\t\t</Column>\n\t\t\t\t\t</columns>\n\t\t\t\t\t<items>\n\t\t\t\t\t\t<ColumnListItem type=\"Navigation\">\n\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t<ObjectIdentifier title=\"{products>Name}\" text=\"{products>ProductId}\"/>\n\t\t\t\t\t\t\t\t<ObjectNumber\n\t\t\t\t\t\t\t\t\tcore:require=\"{\n\t\t\t\t\t\t\t\t\t\tCurrency: 'sap/ui/model/type/Currency'\n\t\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t\tnumber=\"{\n\t\t\t\t\t\t\t\t\t\tparts:[\n\t\t\t\t\t\t\t\t\t\t\t{path:'products>Price'},\n\t\t\t\t\t\t\t\t\t\t\t{path:'products>CurrencyCode'}\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\ttype: 'Currency',\n\t\t\t\t\t\t\t\t\t\tformatOptions: {showMeasure: false}\n\t\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t\tunit=\"{products>CurrencyCode}\"/>\n\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t</ColumnListItem>\n\t\t\t\t\t</items>\n\t\t\t\t</Table>\n\t\t\t</VBox>\n\t\t</f:content>\n\n\t\t<!-- DynamicPage Footer -->\n\t\t<f:footer>\n\t\t\t<OverflowToolbar>\n\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t<Button type=\"Accept\" text=\"Accept\"/>\n\t\t\t\t<Button type=\"Reject\" text=\"Reject\"/>\n\t\t\t</OverflowToolbar>\n\t\t</f:footer>\n\t</f:DynamicPage>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Actions in Detail View (XML)\nDESCRIPTION: This code modifies the `Detail.view.xml` file to add navigation actions for entering and exiting fullscreen mode, and closing the column.  These actions are implemented using `OverflowToolbarButton` elements within the `navigationActions` aggregation of the `ObjectPageDynamicHeaderTitle` control. The visibility of these buttons is controlled by data binding against the `/actionButtonsInfo/midColumn` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-using-the-flexible-column-layout-semantic-helper-276f001.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n\t\t\t\t...\n\t\t\t\t<snappedHeading>\n\t\t\t\t\t<m:FlexBox wrap=\"Wrap\" fitContainer=\"true\" alignItems=\"Center\">\n\t\t\t\t\t\t<m:FlexBox wrap=\"NoWrap\" fitContainer=\"true\" alignItems=\"Center\" class=\"sapUiTinyMarginEnd\">\n\t\t\t\t\t\t\t<m:Avatar\n\t\t\t\t\t\t\t\tsrc=\"https://ui5.sap.com/{products>ProductPicUrl}\"\n\t\t\t\t\t\t\t\tdisplaySize=\"S\"\n\t\t\t\t\t\t\t\tdisplayShape=\"Square\"\n\t\t\t\t\t\t\t\tclass=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t\t\t\t<m:Title text=\"{products>Name}\" wrapping=\"true\"/>\n\t\t\t\t\t\t</m:FlexBox>\n\t\t\t\t\t</m:FlexBox>\n\t\t\t\t</snappedHeading>\n\n\t\t\t\t<navigationActions>\n\t\t\t\t\t<m:OverflowToolbarButton\n\t\t\t\t\t\ttype=\"Transparent\"\n\t\t\t\t\t\ticon=\"sap-icon://full-screen\"\n\t\t\t\t\t\tpress=\".handleFullScreen\"\n\t\t\t\t\t\ttooltip=\"Enter Full Screen Mode\"\n\t\t\t\t\t\tvisible=\"{= ${/actionButtonsInfo/midColumn/fullScreen} !== null }\"/>\n\t\t\t\t\t<m:OverflowToolbarButton\n\t\t\t\t\t\ttype=\"Transparent\"\n\t\t\t\t\t\ticon=\"sap-icon://exit-full-screen\"\n\t\t\t\t\t\tpress=\".handleExitFullScreen\"\n\t\t\t\t\t\ttooltip=\"Exit Full Screen Mode\"\n\t\t\t\t\t\tvisible=\"{= ${/actionButtonsInfo/midColumn/exitFullScreen} !== null }\"/>\n\t\t\t\t\t<m:OverflowToolbarButton\n\t\t\t\t\t\ttype=\"Transparent\"\n\t\t\t\t\t\ticon=\"sap-icon://decline\"\n\t\t\t\t\t\tpress=\".handleClose\"\n\t\t\t\t\t\ttooltip=\"Close column\"\n\t\t\t\t\t\tvisible=\"{= ${/actionButtonsInfo/midColumn/closeColumn} !== null }\"/>\n\t\t\t\t</navigationActions>\n\n\t\t\t\t<actions>\n\t\t\t\t\t<m:ToggleButton\n\t\t\t\t\t\ttext=\"Edit\"\n\t\t\t\t\t\ttype=\"Emphasized\"\n\t\t\t\t\t\tpress=\".onEditToggleButtonPress\"/>\n\t\t\t\t\t<m:Button\n\t\t\t\t\t\ttext=\"Delete\"\n\t\t\t\t\t\ttype=\"Transparent\"/>\n\t\t\t\t\t<m:Button\n\t\t\t\t\t\ttext=\"Copy\"\n\t\t\t\t\t\ttype=\"Transparent\"/>\n\t\t\t\t\t<m:Button\n\t\t\t\t\t\ticon=\"sap-icon://action\"\n\t\t\t\t\t\ttype=\"Transparent\"/>\n\t\t\t\t</actions>\n\t\t\t</ObjectPageDynamicHeaderTitle>\n\t\t</headerTitle>\n\t\t...\n```\n\n----------------------------------------\n\nTITLE: Checking Module Availability in OpenUI5\nDESCRIPTION: This snippet demonstrates how to check the availability of a module using `sap.ui.require`. It attempts to retrieve a reference to the module `name/of/module/in/Question`. If the module is loaded, a reference is returned; otherwise, `undefined` is returned, without triggering a load.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/loading-a-module-d12024e.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar ModuleInQuestion = sap.ui.require(\"name/of/module/in/Question\");\n```\n\n----------------------------------------\n\nTITLE: Initializing OData V4 Model with URL Parameters\nDESCRIPTION: This code snippet shows how to initialize the OData V4 model with custom query parameters appended to the service URL. The custom query parameter `customParam` is added to the `serviceUrl`. Note that system query options (starting with '$') or OData parameter aliases (starting with '@') should not be provided at model level.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/model-instantiation-and-data-access-9613f1f.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\"sap/ui/model/odata/v4/ODataModel\"], function (ODataModel) {\n    var oModel = new ODataModel({\n    \tserviceUrl : \"/sap/opu/odata4/IWBEP/V4_SAMPLE/default/IWBEP/V4_GW_SAMPLE_BASIC/0001/?customParam=foo\"\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:sortable to NonSortableProperties\nDESCRIPTION: This snippet demonstrates how `sap:sortable = \"false\"` is converted to `NonSortableProperties` in the `SortRestrictions` vocabulary. This prevents sorting on the specified properties.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_55\n\nLANGUAGE: xml\nCODE:\n```\nsap:sortable = \"false\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Capabilities.V1.SortRestrictions\": {\n\"NonSortableProperties\" : [\n{ \"PropertyPath\" : \"PropA \" },\n{ \"PropertyPath\" : \"PropC \" }]}\n```\n\n----------------------------------------\n\nTITLE: Resetting Changes in ODataModel JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to reset changes made to an entity in the OData V2 model.  After setting a property and initiating a change, the `resetChanges` function is called with the entity path, reverting the change. This only resets changes on the client, without communication with the back end.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_22\n\nLANGUAGE: js\nCODE:\n```\n// \"ODataModel\" required from module \"sap/ui/model/odata/v2/ODataModel\"\nvar oModel = new ODataModel(myServiceUrl);\n//do a change\noModel.setProperty(\"/myEntity(0)\", oValue);\n\n//reset the change\noModel.resetChanges([\"/myEntity(0)\"]);\n```\n\n----------------------------------------\n\nTITLE: Property Binding to Array Element\nDESCRIPTION: This code snippet illustrates property binding to an array element within a collection of primitive types. It binds the `longitude` and `latitude` Text controls to specific indices (0 and 1 respectively) of the `coordinates` array.  It also showcases binding to the entire array via an expression binding, stringifying it using JSON.stringify.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initialization-and-read-requests-fccfb2e.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<FlexBox binding=\"{/Person('42')/Address/GeoLocation}\">\n    <Text id=\"coordinates\" text=\"{= JSON.stringify(%{coordinates}) }\"/>\n    <Text id=\"longitude\" text=\"{coordinates/0}\"/>\n    <Text id=\"latitude\" text=\"{coordinates/1}\"/>\n</FlexBox>\n\n```\n\n----------------------------------------\n\nTITLE: XML Button with Controller Parameter\nDESCRIPTION: This snippet shows how to pass the controller instance as a parameter to an event handler that is not defined in the controller using the `$controller` special value. This provides access to controller methods and properties from other event handler locations.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-events-in-xml-views-b0fb4de.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Press Me\" press=\".doSomething($controller)\" />\n```\n\n----------------------------------------\n\nTITLE: Using 'with' Instruction with Annotation Helper - XML\nDESCRIPTION: This code snippet illustrates the use of the `<template:with>` instruction along with an annotation helper function in an XML template. It uses `sap.ui.model.odata.AnnotationHelper.resolvePath` to resolve the path from the 'Value' property in the 'meta' model. The resolved path is then assigned to the 'target' variable which is used in subsequent `template:if` statements to render different icons based on the 'sap:semantics' annotation of the target. The instruction relies on the `meta` model with a current binding context that points to a field inside an annotation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/with-58cf64c.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<template:with path=\"meta>Value\" helper=\"sap.ui.model.odata.AnnotationHelper.resolvePath\" var=\"target\">\n  <template:if test=\"{= {target>sap:semantics} === 'email'}\" >\n    <core:Icon src=\"sap-icon://email\" />\n  </template:if>\n  <template:if test=\"{= {target>sap:semantics} === 'tel'}\" >\n    <core:Icon src=\"sap-icon://phone\" />\n  </template:if>\n</template:with>\n```\n\n----------------------------------------\n\nTITLE: Creating OPA5 Page Objects\nDESCRIPTION: This code snippet shows how to create OPA5 page objects using `Opa5.createPageObjects`. It defines a page object with actions and assertions, and optionally a base class for utility functionality. The actions and assertions use `waitFor` to interact with the UI.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/structuring-opa-tests-with-page-objects-f2f843d.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nOpa5.createPageObjects({\n\n       //give a meaningful name for the test code\n       inThe<Page Object> : {\n            //Optional: a class extending Opa5, with utility functionality\n            baseClass : fnSomeClassExtendingOpa5,\n             \n            actions : {\n               //place all arrangements and actions here\n               <iDoSomething> : function(){\n                   //always return this or a waitFor to allow chaining\n                    return this.waitFor({\n                        //see documentation for possibilities\n                    });\n                }\n           },\n           assertions : {\n               //place all assertions here\n               <iCheckSomething> : function(){\n                   //always return this or a waitFor to allow chaining\n                    return this.waitFor({\n                        //see documentation for possibilities\n                    });\n                }\n           }\n       }\n   });\n```\n\n----------------------------------------\n\nTITLE: Overriding Control Property Setter Method\nDESCRIPTION: This code snippet shows how to override the automatically generated setter method for a control property in OpenUI5. It demonstrates how to use `setProperty` to validate and store the new value and returns `this` to enable method chaining.  It modifies the behavior of the `setShowLogoutButton` method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-control-properties-ac56d92.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMyControl.prototype.setShowLogoutButton = function(show) {\n    this.setProperty(\"showLogoutButton\", show); // this validates and stores the new value\n    return this; // return \"this\" to allow method chaining\n};\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Data in XML View - No Data Binding\nDESCRIPTION: This example shows how to attach custom data to a control in an XML view without using data binding. A custom namespace is defined to allow writing data attributes directly into the control tag.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/custom-data-attaching-data-objects-to-controls-91f0c3e.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"my.own.controller\"\n           xmlns:app=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1\">\n     <Button id=\"myBtn\" text=\"Click to show stored coordinates data\" app:mySuperExtraData=\"just great\" press=\"alertCoordinates\"></Button>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Add i18n Properties (OpenUI5)\nDESCRIPTION: This `i18n.properties` file adds a new string for the detail page title.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-e5200ee.md#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n…\n# Invoice List\ninvoiceListTitle=Invoices\ninvoiceStatusA=New\ninvoiceStatusB=In Progress\ninvoiceStatusC=Done\n\n# Detail Page\ndetailPageTitle=Walkthrough - Details\n```\n\n----------------------------------------\n\nTITLE: Using autoWait in a specific waitFor statement\nDESCRIPTION: This code shows how to use `autoWait` in a standard OPA `waitFor` statement. The `success` function will only be called when the control is found, its state is valid, and the app is responsive. In this example, the code asserts that the control is not busy.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-the-autowait-parameter-fb487ef.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// in an OPA test\noOpa.waitFor({\n    id: \"myControlID\",\n    success: function (oControl) {\n        Opa5.assert.ok(!oControl.getBusy(), \"My control was not busy\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Text to i18n Properties (INI)\nDESCRIPTION: This INI snippet adds the missing text properties to the `i18n.properties` file. This includes the `objectTitle`, `postDateLabel`, and `postDescriptionLabel` properties, which are used for internationalization of the application's text.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-adding-tabs-6e9c6bd.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n#~~~ Object View ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#XTIT: Object view title\nobjectTitle=Post\n\n\n#XTIT: Post view date label\npostDateLabel=Posted At\n\n#XTIT: Post view description label\npostDescriptionLabel=Description\n\n\n#~~~ Footer Options ~~~~~~~~~~~~~~~~~~~~~~~\n```\n\n----------------------------------------\n\nTITLE: Enabling ResourceServlet in web.xml (OpenUI5, Java)\nDESCRIPTION: This XML snippet configures the `ResourceServlet` for OpenUI5 within a Java web application. It defines the servlet, its class, and the URL patterns it should handle (`/resources/*` and `/test-resources/*`). The `ResourceServlet` is responsible for managing access to OpenUI5 resources within the web application and the UI libraries in the classpath.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-handling-modularization-and-localization-91f2b4d.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <!-- ============================================================ -->\n  <!-- SAPUI5 resource servlet used to handle application resources -->\n  <!-- ============================================================ -->\n   \n\n  <servlet>\n\n    <display-name>ResourceServlet</display-name>\n\n    <servlet-name>ResourceServlet</servlet-name>\n\n    <servlet-class>com.sap.ui5.resource.ResourceServlet</servlet-class>\n\n  </servlet>\n\n  <servlet-mapping>\n\n    <servlet-name>ResourceServlet</servlet-name>\n\n    <url-pattern>/resources/*</url-pattern>\n\n  </servlet-mapping>\n\n  <servlet-mapping>\n\n    <servlet-name>ResourceServlet</servlet-name>\n\n    <url-pattern>/test-resources/*</url-pattern>\n\n  </servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Checking for Density with jQuery closest() - OpenUI5\nDESCRIPTION: This snippet uses jQuery's `closest()` function to check if any parent element has the `sapUiSizeCompact` class.  If found, the `sapUiSizeCompact` class is added to a newly created dialog. This ensures that the dialog inherits the density from its surroundings.  The modules `sap/m/Button` and `sap/m/Dialog` are required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/how-to-use-densities-for-controls-13e6f3b.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// \"Button\" required from module \"sap/m/Button\"\n// \"Dialog\" required from module \"sap/m/Dialog\"\nvar btn = new Button({\n    text: \"Hello World\",\n    press: function(){\n        var dialog = new Dialog({\n            title: \"Hello World\",\n            content: new Button({text:\"Test Me\"})\n        });\n        \n        \n        // add the 'sapUiSizeCompact' class if the Button is in an area using Compact density\n        if (this.$().closest(\".sapUiSizeCompact\").length > 0) { // \"this\" in the event handler is the control that triggered the event\n            dialog.addStyleClass(\"sapUiSizeCompact\");\n        }\n        \n        \n        dialog.open();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Detail-Detail Page View XML\nDESCRIPTION: This XML snippet defines the view for the detail-detail page using `sap.f.DynamicPage`. The view contains a title using `DynamicPageTitle` and `FlexBox` with a `Title` element that is bound to the `products>text` model to display the selected supplier's name. The `toggleHeaderOnTitleClick` property is set to false.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-adding-a-detail-detail-page-e4d21fd.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.fcl.controller.DetailDetail\"\n\txmlns=\"sap.f\"\n\txmlns:m=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<DynamicPage toggleHeaderOnTitleClick=\"false\">\n\t\t<title>\n\t\t\t<DynamicPageTitle>\n\t\t\t\t<heading>\n\t\t\t\t\t<m:FlexBox wrap=\"Wrap\" fitContainer=\"true\" alignItems=\"Center\">\n\t\t\t\t\t\t<m:Title text=\"{products>text}\" wrapping=\"true\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t\t</m:FlexBox>\n\t\t\t\t</heading>\n\t\t\t</DynamicPageTitle>\n\t\t</title>\n\t</DynamicPage>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Creating OData Metadata XML\nDESCRIPTION: Defines the structure of the OData service, including entity types and properties. It is used by the mock server to simulate the backend service. A simplified version of the Northwind OData metadata is used, with the addition of a 'status' field.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-26-mock-server-configuration-typescript-3e1c64f.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<edmx:Edmx Version=\"1.0\" xmlns:edmx=\"http://schemas.microsoft.com/ado/2007/06/edmx\">\n\t<edmx:DataServices m:DataServiceVersion=\"1.0\" m:MaxDataServiceVersion=\"3.0\"\n\t\t\txmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\">\n\t\t<Schema Namespace=\"NorthwindModel\" xmlns=\"http://schemas.microsoft.com/ado/2008/09/edm\">\n\t\t\t<EntityType Name=\"Invoice\">\n\t\t\t\t<Key>\n\t\t\t\t\t<PropertyRef Name=\"ProductName\"/>\n\t\t\t\t\t<PropertyRef Name=\"Quantity\"/>\n\t\t\t\t\t<PropertyRef Name=\"ShipperName\"/>\n\t\t\t\t</Key>\n\t\t\t\t<Property Name=\"ShipperName\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"40\" FixedLength=\"false\"\n\t\t\t\t\t\t\tUnicode=\"true\"/>\n\t\t\t\t<Property Name=\"ProductName\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"40\" FixedLength=\"false\"\n\t\t\t\t\t\t\tUnicode=\"true\"/>\n\t\t\t\t<Property Name=\"Quantity\" Type=\"Edm.Int16\" Nullable=\"false\"/>\n\t\t\t\t<Property Name=\"ExtendedPrice\" Type=\"Edm.Decimal\" Precision=\"19\" Scale=\"4\"/>\n\t\t\t\t<Property Name=\"Status\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"1\" FixedLength=\"false\"\n\t\t\t\t\t\t\tUnicode=\"true\"/>\n\t\t\t</EntityType>\n\t\t</Schema>\n\t\t<Schema Namespace=\"ODataWebV2.Northwind.Model\" xmlns=\"http://schemas.microsoft.com/ado/2008/09/edm\">\n\t\t\t<EntityContainer Name=\"NorthwindEntities\" m:IsDefaultEntityContainer=\"true\" p6:LazyLoadingEnabled=\"true\"\n\t\t\t\t\txmlns:p6=\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\">\n\t\t\t\t<EntitySet Name=\"Invoices\" EntityType=\"NorthwindModel.Invoice\"/>\n\t\t\t</EntityContainer>\n\t\t</Schema>\n\t</edmx:DataServices>\n</edmx:Edmx>\n\n```\n\n----------------------------------------\n\nTITLE: Adding Button to HelloDialog Fragment (XML)\nDESCRIPTION: This XML snippet adds a button to the beginButton aggregation of the dialog within the fragment definition. It refers the press handler to the event handler defined in the controller, allowing the dialog to be closed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-17-fragment-callbacks-typescript-f030afc.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<core:FragmentDefinition\n   xmlns=\"sap.m\"\n   xmlns:core=\"sap.ui.core\">\n   <Dialog\n      id=\"helloDialog\"\n      title =\"Hello {/recipient/name}\">\n      <beginButton>\n         <Button\n            text=\"{i18n>dialogCloseButtonText}\"\n            press=\".onCloseDialog\"/>\n      </beginButton>\n   </Dialog>\n</core:FragmentDefinition>\n```\n\n----------------------------------------\n\nTITLE: Record Expression in OData JSON\nDESCRIPTION: This JSON snippet illustrates the structure of an OData Record expression. The record is essentially a map that includes a $Type property to specify the record type, properties with their corresponding values, and annotations using the @... property. This allows defining structured data within the OData JSON format.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v4-metadata-json-format-87aac89.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"$Type\" : \"<14.5.14.1 Record Type>\",\n  \"<14.5.14.2.1 PropertyValue Property>\" : <value>,\n  \"@...\" : <value>\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer JSON Model Dates to OData V4 - JavaScript\nDESCRIPTION: This JavaScript code demonstrates transferring dates, times, and timestamps from a JSON model to an OData V4 model.  It sets the properties in the OData V4 model using `oContext.setProperty`. It assumes that the JSON model contains properties `Date`, `DateTimeOffset`, and `Time` in the correct format for OData V4 and that oContext is a valid OData V4 context.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntransferDatesTimesAndTimestampsFromJSONModelToODataV4Model(oContext, oJSONModel) {\n    // assume \"oContext\"  is an OData V4 context referencing an entity with the properties \n    //   \"Date\" (date), \"DateTimeOffset\" (timestamp) and \"TimeOfDay\" (time)\n    // assume \"oJSONModel\" is a JSONModel containing the values to be transferred \n    //   to the OData V4 Model \"oDataModel\"\n    oContext.setProperty(\"DateTime\", oJSONModel.getProperty(\"/Date\"));\n    oContext.setProperty(\"DateTimeOffset\", oJSONModel.getProperty(\"/DateTimeOffset\"));\n    oContext.setProperty(\"Time\", oJSONModel.getProperty(\"/Time\"));\n},\n```\n\n----------------------------------------\n\nTITLE: OData V2 $select Query in XML View\nDESCRIPTION: This XML snippet shows how to use the `$select` query in an `sap.m.List` to fetch only the necessary properties of an entity from the OData service. The `select` parameter in the `items` binding configuration specifies the properties to be retrieved, reducing the response size and improving performance. Key properties, like CustomerID, should still be included even if not displayed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/performance-speed-up-your-app-408b40e.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<List\n    id=\"myList\"\n    ...\n    items=\"{\n        path: '/Customers',\n        parameters: {\n            select: 'CustomerID,CompanyName'\n        }\n    }\">\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: JSON Data with Regions and Companies\nDESCRIPTION: This JSON data represents a nested structure with regions, each containing a list of companies with detailed properties. It is used to showcase element binding in combination with list binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"regions\": [{\n        \"name\": \"Americas\",\n        \"companies\" : [{\n            \"name\": \"Acme Inc.\",\n            \"zip\": \"03301\",\n            \"city\": \"Belmont\",\n            \"county\": \"Belknap\",\n            \"state\": \"NH\",\n            \"revenue\": 123214125.34, \n            \"publ\": true\n        }, {\n            \"name\": \"Beam Hdg.\",\n            \"zip\": \"03451\",\n            \"city\": \"Hancock\",\n            \"county\": \"Sullivan\",\n            \"state\": \"NH\",\n            \"revenue\": 3235235235.23,\n            \"publ\": true\n        }, {\n            \"name\": \"Carot Ltd.\",\n            \"zip\": \"03251\",\n            \"city\": \"Cheshire\",\n            \"county\": \"Sullivan\",\n            \"state\": \"NH\",\n            \"revenue\": \"Not Disclosed\",\n            \"publ\": false \n        }]\n    },{\n        \"name\": \"DACH\",\n        \"companies\" : [{\n            \"name\": \"Taubtrueb\",\n            \"zip\": \"89234\",\n            \"city\": \"Ginst\",\n            \"county\": \"Musenhain\",\n            \"state\": \"NRW\",\n            \"revenue\": 2525, \n            \"publ\": true\n        }, {\n            \"name\": \"Krawehl\",\n            \"zip\": \"45362\",\n            \"city\": \"Schlonz\",\n            \"county\": \"Humpf\",\n            \"state\": \"BW\",\n            \"revenue\": 2342525, \n            \"publ\": true\n        }]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message\nDESCRIPTION: This example demonstrates the expected format for a commit message, including the prefix, component, summary, description, and data section. It showcases how to include issue references and Change-Id.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/git-guidelines-b2f5639.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n[FIX] sap.m.Popover: scrolling is removed after Popover is rerendered\n\n- this was caused by the special treatment in dealing with rerendering\nin Popover.\n\n- Now the normal invalidation is used and Popup.js takes care of the\nfocus/blur event listener in onBefore/AfterRerendering\n\nChange-Id: I3c7d6e4d52fa71e9412b729b7a234a112915c2a4\nFixes: https://github.com/SAP/openui5/issues/1\n```\n\n----------------------------------------\n\nTITLE: Activate Terminologies via API - JavaScript\nDESCRIPTION: This code snippet demonstrates how to activate terminologies in an OpenUI5 component using the `sap.ui.core.Component.create` method. It defines the component name, manifest, and active terminologies as an array of strings. The component is then created, and a nested reuse component inherits the active terminologies.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/terminologies-eba8d25.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Component\"], function(Component) {\n    return Component.create({\n        name: \"my.sample.app\",\n        manifest: true,\n        activeTerminologies: [\"travel\", \"services\"]\n    }).then(function(oComponent) {\n        // Component and resource bundles are loaded\n        return oComponent.createComponent(\"myReuseComponent\").then(function(oReuseComponent) {\n            // oReuseComponent inherits from owner component\n            oReuseComponent.getActiveTerminologies(); // returns [\"travel\", \"services\"]\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using onLocalizationChanged generic control hook in SAPUI5\nDESCRIPTION: This code snippet demonstrates how to use the `onLocalizationChanged` generic control hook to handle localization changes in a `sap.ui.core.Element` subclass. It shows how to attach to the `Localization` and `Formatting` facades. Requires `sap/base/i18n/Localization` and `sap/base/i18n/Formatting` modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/// generic control hook\nMyControl.prototype.onLocalizationChanged = function() {};\n \n// Localization API\nsap.ui.require([\n    \"sap/base/i18n/Localization\",\n    \"sap/base/i18n/Formatting\"\n], (Localization, Formatting) => {\n    Localization.attachChange((oEvent) => {\n        // Note: The event callback has no <this> context anymore,\n        // thus we use an arrow function here\n \n        // Note: the Event object has a different API than on the Core facade:\n        // no more getParameters(), but simple properties like the Web API events.\n        // Therefore, you can access the newly set \"language\" like so:\n        const sLanguage = oEvent.language;\n    });\n \n    // additional setting changes can be captured via the Formatting facade\n    Formatting.attachChange((oEvent) => {\n        // s.a.\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Additional Page View - XML\nDESCRIPTION: Creates a simple additional page view named AboutPage.view.xml using sap.m and sap.f controls. The view defines a DynamicPage with a title set to \"About supplier\".  It utilizes the sap.f library for the DynamicPage layout.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-adding-more-pages-a59b3de.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:f=\"sap.f\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<f:DynamicPage toggleHeaderOnTitleClick=\"false\">\n\t\t<!-- DynamicPage Title -->\n\t\t<f:title>\n\t\t\t<f:DynamicPageTitle>\n\t\t\t\t<f:heading>\n\t\t\t\t\t<Title text=\"About supplier\"/>\n\t\t\t\t</f:heading>\n\t\t\t</f:DynamicPageTitle>\n\t\t</f:title>\n\t</f:DynamicPage>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Data in XML View - With Data Binding\nDESCRIPTION: This example shows how to attach custom data to a control in an XML view using data binding. A custom namespace is defined to allow writing data attributes directly into the control tag. The value of the custom data is bound to a property named `data`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/custom-data-attaching-data-objects-to-controls-91f0c3e.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"my.own.controller\"\n           xmlns:app=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1\">\n     <Button id=\"myBtn\" text=\"Click to show stored coordinates data\" app:coords=\"{data}\" press=\"alertCoordinates\"></Button>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.os properties with sap/ui/Device in JavaScript\nDESCRIPTION: This snippet demonstrates how to replace the jQuery.os properties with the sap/ui/Device API.  It shows how to check the operating system name and version using the Device.os property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.name === \"Android\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.name === \"bb\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.version\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.name === \"iOS\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.name === \"linux\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.name === \"mac\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.versionStr\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.name === \"win\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDevice.os.name === \"winphone\"\n```\n\n----------------------------------------\n\nTITLE: Applying Margin and Width Classes to IconTabBar in XML View\nDESCRIPTION: This XML snippet shows how to apply margin classes and the 'sapUiForceWidthAuto' class to an IconTabBar control within an OpenUI5 XML view. 'sapUiForceWidthAuto' ensures that the control's default width of 100% is overwritten with 'auto'. 'sapUiMediumMarginBeginEnd' provides horizontal margins.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-predefined-css-margin-classes-777168f.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n      height=\"100%\"\n      controllerName=\"sap.m.sample.StandardMarginsEnforceWidthAuto.Page\"\n      xmlns:mvc=\"sap.ui.core.mvc\"\n      xmlns=\"sap.m\">\n      .\n      .\n      .\n      <Panel width=\"auto\" class=\"sapUiLargeMarginBegin sapUiLargeMarginBottom\">\n          <content>\n                  \n          </content>\n      </Panel>\n<IconTabBar\n  expanded=\"{device>/isNoPhone}\"\n  class=\"sapUiForceWidthAuto sapUiMediumMarginBeginEnd\">\n  <items>\n\t\t.\n\t\t.\n\t\t.\n  </items>\n</IconTabBar>\n      .\n      .\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Modifying Post.js for Tab Press Action and View Counter Assertion (OPA)\nDESCRIPTION: This code snippet modifies the Post.js file to add a new action `iPressOnTheTabWithTheKey` and a new assertion `iShouldSeeTheViewCounter`. The `iPressOnTheTabWithTheKey` action simulates pressing an icon tab filter based on its key, while the `iShouldSeeTheViewCounter` assertion checks if the view counter is visible. It relies on Opa5, Properties, and Press modules for OPA testing.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-13-testing-user-interaction-19ccd47.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t'sap/ui/test/Opa5',\n\t'sap/ui/test/matchers/Properties',\n\t'sap/ui/test/actions/Press'\n], function (Opa5, Properties, Press) {\n\t\"use strict\";\n \n\t\tvar sViewName = \"Post\";\n \n\t\tOpa5.createPageObjects({\n\t\t\tonThePostPage: {\n\t\t\t\tactions: {\n\t\t\t\t\tiPressTheBackButton: function () {\n\t\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\t\tid: \"page\",\n\t\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\t\tactions: new Press(),\n\t\t\t\t\t\t\terrorMessage: \"Did not find the nav button on object page\"\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tiPressOnTheTabWithTheKey: function (sKey) {\n\t\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\t\tcontrolType: \"sap.m.IconTabFilter\",\n\t\t\t\t\t\t\tviewName : sViewName,\n\t\t\t\t\t\t\tmatchers: new Properties({\n\t\t\t\t\t\t\t\tkey: sKey\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tactions: new Press(),\n\t\t\t\t\t\t\terrorMessage: \"Cannot find the icon tab bar\"\n\t\t\t\t\t\t});\n \n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tassertions: {\n\t\t\t\t\ttheTitleShouldDisplayTheName: function (sName) {\n\t\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\t\tid: \"objectHeader\",\n\t\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\t\tmatchers: new Properties({\n\t\t\t\t\t\t\t\ttitle: sName\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tsuccess: function (oPage) {\n\t\t\t\t\t\t\t\tOpa5.assert.ok(true, \"was on the remembered detail page\");\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terrorMessage: \"The Post \" + sName + \" is not shown\"\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n \n\t\t\t\t\tiShouldSeeTheViewCounter: function () {\n\t\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\t\tid: \"viewCounter\",\n\t\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\t\tOpa5.assert.ok(true, \"The view counter was visible\");\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terrorMessage: \"The view counter could not be found\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n```\n\n----------------------------------------\n\nTITLE: Adding Flip to Resume link in Employee View (XML)\nDESCRIPTION: This XML snippet adds a 'Flip to Resume' link to the Employee Details view.  The link triggers the `.onShowResume` event handler when pressed. The view is defined using sap.m controls and utilizes data binding for dynamic content. The `i18n` model is used for internationalization.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-navigate-with-flip-transition-3e5f6f3.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.Employee\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:f=\"sap.ui.layout.form\"\n\tbusyIndicatorDelay=\"0\">\n\t<Page\n\t\tid=\"employeePage\"\n\t\ttitle=\"{i18n>EmployeeDetailsOf} {FirstName} {LastName}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\"\n\t\tclass=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<Panel\n\t\t\t\tid=\"employeePanel\"\n\t\t\t\twidth=\"auto\"\n\t\t\t\tclass=\"sapUiResponsiveMargin sapUiNoContentPadding\">\n\t\t\t\t<headerToolbar>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Title text=\"{i18n>EmployeeIDColon} {EmployeeID}\" level=\"H2\"/>\n\t\t\t\t\t\t<ToolbarSpacer />\n\t\t\t\t\t\t<Link text=\"{i18n>FlipToResume}\" tooltip=\"{i18n>FlipToResume.tooltip}\" press=\".onShowResume\"/>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</headerToolbar>\n\t\t\t\t<content>\n\t\t\t\t\t...\n\t\t\t\t</content>\n\t\t\t</Panel>\n\t\t</content>\n\t</Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining a Controller for the XML View\nDESCRIPTION: This JavaScript code defines a controller for the XML view. The `findControls` function demonstrates how to locate controls within the fragments based on their IDs. It highlights the importance of understanding ID prefixes when fragments are instantiated within XML views. It uses `View.byId()` and `Fragment.createId()` to correctly locate controls.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/example-js-fragments-used-in-xml-views-faaff35.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(['sap/ui/core/mvc/Controller', 'sap/ui/core/Fragment'], function (Controller, Fragment) {\n    \"use strict\";\n    return Controller.extend(\"my.own.Controller\", {\n        metadata: {\n            methods:{\n                findControls: {public: true }\n            }\n        },\n        findControls: function() {\n            // Fragment is instantiated within an XMLView => all GIVEN IDs are prefixed with the\n            // View ID and View.byId() needs to be used to find the controls\n            var b1 = null; // ID is generated: \"__button1\"\n            var b2 = this.byId(\"btn2\"); // Button ID is given, Fragment has no ID: \"myView--btn2\"\n            var b3 = null // Fragment has an ID, but Control ID is generated and hence not prefixed: \"__button2\"\n            var b4 = this.byId(Fragment.createId(\"myFrag\", \"btn2\")); // Button and Fragment ID are given, \n                //let the Fragment construct the prefixed ID and then let the View search the again prefixed ID\n            alert(\"Controls in Fragment:\\nButton 1: has no given ID, cannot be found\\nButton 2: \" + b2 + \n               \"\\nButton 3: has no given ID, cannot be found\\nButton 4: \" + b4);\n        }\n    });\n});\n\n```\n\n----------------------------------------\n\nTITLE: OpenUI5 Bootstrap with Cache Buster\nDESCRIPTION: This HTML snippet shows how to bootstrap OpenUI5 with the cache buster enabled. It changes the `src` attribute of the script tag to point to the cache buster version of `sap-ui-core.js`. The `data-sap-ui-libs` and `data-sap-ui-theme` attributes are used to specify the libraries to load and the theme to use, respectively.  This ensures that OpenUI5 resources are cached efficiently and updated only when necessary.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cache-buster-for-openui5-91f0809.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n  <script type=\"text/javascript\" \n  \tid=\"sap-ui-bootstrap\"\n  \tsrc=\"resources/sap-ui-cachebuster/sap-ui-core.js\"\n  \tdata-sap-ui-libs=\"sap.ui.core,sap.m,sap.ui.table\"\n\tdata-sap-ui-theme=\"sap_horizon\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configure OData V4 Service in manifest.json (JSON)\nDESCRIPTION: This code snippet configures the OData V4 service as the default data source in the `manifest.json` file. It specifies the service URI, type, and OData version. The `uri` property points to the TripPin OData service endpoint. The `odataVersion` is set to 4.0.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-the-initial-app-15d84f3.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"dataSources\": {\n\t\"default\": {\n\t\t\"uri\": \"https://services.odata.org/TripPinRESTierService/(S(id))/\",\n\t\t\"type\": \"OData\",\n\t\t\"settings\": {\n\t\t\t\"odataVersion\": \"4.0\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Karma configuration for Headless Chrome\nDESCRIPTION: This JavaScript snippet configures Karma to use Headless Chrome. It sets the `browsers` option to `['ChromeHeadless']` and the `singleRun` option to `true`.  `singleRun: true` ensures that Karma exits after running the tests once, which is required for CI environments.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-automation-ae44824.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(config) {\n  config.set({\n    [...]\n    browsers: ['ChromeHeadless'],\n    singleRun: true\n    [...]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting writeToDom Flag in XML View\nDESCRIPTION: Demonstrates how to configure a `sap.ui.core.CustomData` element within an XML view to write its key-value pair as a data attribute to the HTML DOM. The `writeToDom` property must be set to \"true\".  Requires a `sap.m.Button` and `sap.ui.core.CustomData` library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/writing-data-to-the-html-dom-as-data-attribute-1ef9fef.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Button ... >\n  <customData>\n  <core:CustomData key=\"mydata\" value=\"Hello\" writeToDom=\"true\" />\n  </customData>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using componentUsages for asynchronous Component creation - JavaScript\nDESCRIPTION: Demonstrates using `componentUsages` within the manifest.json along with createComponent to asynchronously instantiate a component. This approach offers an alternative to directly calling Component.create, especially when dealing with reusable components. It highlights how the `createComponent` function within the `createContent` function of another component can be used to achieve asynchronous component creation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-factories-replacement-491bd9c.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateContent: function() {\n   var oReuseComponentPromise = this.createComponent({\n      \"usage\": \"reuse\"\n  }).then((oComp) => {/*...*/});\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests for Price State Formatter (QUnit)\nDESCRIPTION: This code defines a QUnit module for testing the `priceState` formatter function.  It includes a reusable `priceStateTestCase` function to streamline testing different price values and expected states. Several test cases are defined to cover various price ranges and edge cases, ensuring the formatter behaves as expected according to the defined specification. The tests initially fail as the formatter implementation is empty.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-a-first-unit-test-b81736e.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*global QUnit*/\nsap.ui.define([\n\t  \"sap/ui/demo/bulletinboard/model/formatter\"\n], function (formatter) {\n\t\"use strict\";\n\n\tQUnit.module(\"Number unit\");\n\t\t// …\n\tQUnit.module(\"Price State\");\n\n\tfunction priceStateTestCase(oOptions) {\n\t\t// Act\n\t\tvar sState = formatter.priceState(oOptions.price);\n\n\t\t// Assert\n\t\toOptions.assert.strictEqual(sState, oOptions.expected, \"The price state was correct\");\n\t}\n\n\tQUnit.test(\"Should format the products with a price lower than 50 to Success\", function (assert) {\n\t\tpriceStateTestCase.call(this, {\n\t\t\tassert: assert,\n\t\t\tprice: 42,\n\t\t\texpected: \"Success\"\n\t\t});\n\t});\n\n\tQUnit.test(\"Should format the products with a price of 50 to Normal\", function (assert) {\n\t\tpriceStateTestCase.call(this, {\n\t\t\tassert: assert,\n\t\t\tprice: 50,\n\t\t\texpected: \"None\"\n\t\t});\n\t});\n\n\tQUnit.test(\"Should format the products with a price between 50 and 250 to Normal\", function (assert) {\n\t\tpriceStateTestCase.call(this, {\n\t\t\tassert: assert,\n\t\t\tprice: 112,\n\t\t\texpected: \"None\"\n\t\t});\n\t});\n\n\tQUnit.test(\"Should format the products with a price between 250 and 2000 to Warning\", function (assert) {\n\t\tpriceStateTestCase.call(this, {\n\t\t\tassert: assert,\n\t\t\tprice: 798,\n\t\t\texpected: \"Warning\"\n\t\t});\n\t});\n\n\tQUnit.test(\"Should format the products with a price higher than 2000 to Error\", function (assert) {\n\t\tpriceStateTestCase.call(this, {\n\t\t\tassert: assert,\n\t\t\tprice: 2001,\n\t\t\texpected: \"Error\"\n\t\t});\n\t});\n});\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Setter for Property Propagation\nDESCRIPTION: This JavaScript code overrides the setter for the 'value' property of the 'SearchField' composite control. It propagates the new value to the internal Input control using `setValue`.  The third parameter of `setProperty` is set to `true` to prevent re-rendering of the entire `SearchField` control when the value change originates from within the Input.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/standard-composite-controls-c1512f6.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Propagate value to input.\n */\nSearchField.prototype.setValue = function(sValue){\n    this.setProperty(\"value\", sValue, true /*no re-rendering of whole search field needed*/);\n    this.getAggregation(\"_input\").setValue(sValue); // Note: this triggers re-rendering of input!\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Margins and Padding in XML View (OpenUI5)\nDESCRIPTION: This XML snippet demonstrates how to apply responsive margins to a Panel control and a small margin to a Button control in an OpenUI5 application. The Panel uses the `sapUiResponsiveMargin` class to add a margin that adapts to different screen sizes. The Button uses `sapUiSmallMarginEnd` to create space between the button and the following input. The width of the panel is set to \"auto\" to accommodate the margin without exceeding the page size.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-13-margins-and-paddings-17b87fb.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n\t<Shell>\n\t\t<App>\n\t\t\t<pages>\n\t\t\t\t<Page title=\"{i18n>homePageTitle}\">\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<Panel\n\t\t\t\t\t\t\theaderText=\"{i18n>helloPanelTitle}\"\n\t\t\t\t\t\t\tclass=\"sapUiResponsiveMargin\"\n\t\t\t\t\t\t\twidth=\"auto\">\n\t\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttext=\"{i18n>showHelloButtonText}\"\n\t\t\t\t\t\t\t\t\tpress=\".onShowHello\"\n\t\t\t\t\t\t\t\t\tclass=\"sapUiSmallMarginEnd\"/>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tvalue=\"{/recipient/name}\"\n\t\t\t\t\t\t\t\t\tvalueLiveUpdate=\"true\"\n\t\t\t\t\t\t\t\t\twidth=\"60%\"/>\n\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\ttext=\"Hello {/recipient/name}\"\n\t\t\t\t\t\t\t\t\tclass=\"sapUiSmallMargin\"/>\n\t\t\t\t\t\t\t</content>\n\t\t\t\t\t\t</Panel>\n\t\t\t\t\t</content>\n\t\t\t\t</Page>\n\t\t\t</pages>\n\t\t</App>\n\t</Shell>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Clicking a Table Item by Field Value with OPA5\nDESCRIPTION: This snippet shows how to simulate a click on a specific item in a `sap.m.Table` based on a field/value combination. It searches for a `sap.m.ColumnListItem` where a specific field in the bound object matches a given value, and then simulates a `press` event on that item.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/simulating-user-interactions-on-controls-8615a0b.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\niClickOnTableItemByFieldValue: function () {\n                    return this.waitFor({\n                        controlType: \"sap.m.ColumnListItem\",\n\n                        // Retrieve all list items in the table\n                        matchers: [function(oCandidateListItem) {\n                            var oTableLine = {};\n                            oTableLine = oCandidateListItem.getBindingContext().getObject();\n                            var sFound = false;\n\n                            // Iterate through the list items until the specified cell is found\n                            for (var sName in oTableLine) {\n                                if ((sName === \"Field Name\") && (oTableLine[sName].toString() === \"Cell Value\")) {\n                                     QUnit.ok(true, \"Cell has been found\");\n                                    sFound = true;\n                                    break;\n                                }\n                            }\n                            return sFound;\n                        }],\n\n                        // Click on the specified item\n                        actions: new Press(),\n                        errorMessage: \"Cell could not be found in the table\"\n                     });\n                }\n```\n\n----------------------------------------\n\nTITLE: Binding Items with OData Parameters in XML View (Object Values)\nDESCRIPTION: This XML view snippet illustrates binding items to a `Table` control with OData V4 parameters, specifically using object notation for the `$expand` parameter. It shows how to define nested `$orderby` and `$select` options within the `$expand` parameter for the `SO_2_SOITEM` navigation property. This demonstrates a more structured way to define complex OData query options directly in the XML view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/parameters-1ab4f62.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Table growing=\"true\" growingThreshold=\"5\" id=\"SalesOrders\"\n    items=\"{\n            path : '/SalesOrderList',\n            parameters : {\n                $count : true,\n                $expand : {\n                       'SO_2_SOITEM' : {\n                               '$orderby' : 'ItemPosition',\n                               '$select' : ['ItemPosition','Quantity','QuantityUnit','SalesOrderID']\n                       }\n               },\n                $filter : 'BuyerName ge \\'M\\' ',\n                $orderby : 'GrossAmount desc',\n                $select : ['BuyerName','CurrencyCode','GrossAmount','Note','SalesOrderID']\n            },\n        }\">\n\n```\n\n----------------------------------------\n\nTITLE: Redirecting Package to Local Web App using sap.ui.loader.config\nDESCRIPTION: This snippet shows how to redirect a specific package, 'my/webapp', to a local web application.  It utilizes the sap.ui.loader.config function to map the 'my/webapp' prefix to the 'my-webapp/resources/my/webapp' path. Subsequently, it uses sap.ui.require to load modules from the configured path, demonstrating how OpenUI5 resolves module paths based on the configuration.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/multiple-module-locations-1dfab2e.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// redirect the 'my.webapp' package to the local web app\nsap.ui.loader.config({\n\tpaths: {\n\t\t\"my/webapp\": \"my-webapp/resources/my/webapp\"\n\t}\n});\nsap.ui.require([\n\t\"sap/ui/core/Core\",\t\n\t\"my/webapp/MyModule01\"\t// loads /my-webapp/resources/my/webapp/MyModule01.js\n], (Core, MyModule01) => {\n\t// … \n});\n```\n\n----------------------------------------\n\nTITLE: Overriding renderTooltipContent for Custom Tooltip - JavaScript\nDESCRIPTION: This code demonstrates how to override the renderTooltipContent method of sap.m.SliderTooltipBase to define custom content for the slider's tooltip. It shows how to write directly to the DOM during rendering to provide custom tooltip content. oRm is a RenderManager instance and oControl is an instance of sap.ui.core.Control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/sliders-84ec82e.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderTooltipContent: function (oRm, oControl) {\n\n\t\t\t\t\t\t\t// you can write any DOM here - render controls or anything you want\n\t\t\t\t\t\t\t// (inline elements are not recommended as you need to style them on your own)\n\t\t\t\t\t\t\toRm.openStart(\"div\", oControl.getId() + \"-inner\");\n\t\t\t\t\t\t\toRm.class(\"sapCustomSliderTooltip\");\n\t\t\t\t\t\t\toRm.openEnd();\n\t\t\t\t\t\t\toRm.close(\"div\")\n```\n\n----------------------------------------\n\nTITLE: Update App View (OpenUI5 XML)\nDESCRIPTION: This XML code defines the `App` view, which now only contains the `Shell` and `App` controls. The router will load the appropriate view into the `App` control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-e5200ee.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.App\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    displayBlock=\"true\">\n    <Shell>\n        <App\n            class=\"myAppDemoWT\"\n            id=\"app\"/>\n    </Shell>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 CLI Globally\nDESCRIPTION: This shell command installs the UI5 CLI (Command Line Interface) globally, allowing you to use UI5 tooling commands from any directory. This is a prerequisite for developing OpenUI5 applications.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-typescript-c20489e.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --global @ui5/cli\n```\n\n----------------------------------------\n\nTITLE: Redefining jQuery.now with QUnitUtils\nDESCRIPTION: QUnitUtils redefines jQuery.now to delegate to the current Date.now. This ensures that Sinon fake timers work correctly with jQuery 2.2, even when Sinon is started after jQuery.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/upgrading-from-a-version-below-1-38-c1025c2.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAs a workaround, `QUnitUtils` redefines `jQuery.now` so that it delegates to the current `Date.now`. This will then use any installed fake timer.\n```\n\n----------------------------------------\n\nTITLE: DateTimePicker with OData V2 DateTimeOffset (XML View)\nDESCRIPTION: This XML snippet shows how to use the sap.m.DateTimePicker with an OData V2 DateTimeOffset in an XML view. It binds the DateTimePicker to an OData V2 property, specifying the 'DateTimeOffset' type.  The model value is a JavaScript Date object.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n\n<!-- Model value is a JavaScript Date object -->\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{DateTimeOffset: 'sap/ui/model/odata/type/DateTimeOffset'}\">\n    ...\n    <DateTimePicker value=\"{path: '/V2/DateTimeOffset', type: 'DateTimeOffset'}\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Creatable Navigation Properties\nDESCRIPTION: This code snippet illustrates how the `sap:creatable = \"false\"` annotation in OData V2 is converted to the `Org.OData.Capabilities.V1.InsertRestrictions` annotation in OData V4. The OData V2 annotation indicates that navigation properties NavPropA and NavPropC are not creatable, and the OData V4 annotation expresses this restriction using a standard vocabulary term.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_71\n\nLANGUAGE: JSON\nCODE:\n```\n\"Org.OData.Capabilities.V1.InsertRestrictions\": {    \"NonInsertableNavigationProperties\" : [    { \"NavigationPropertyPath\" : \"NavPropA \" },    { \"NavigationPropertyPath\" : \"NavPropC \" }    ] }\n```\n\n----------------------------------------\n\nTITLE: Debugging OpenUI5 Controller\nDESCRIPTION: Illustrates setting a breakpoint in an OpenUI5 controller's JavaScript file using the browser's developer tools. It involves navigating to the `App.controller.js` file in the Sources tab and setting a breakpoint to pause execution and inspect variables.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-browser-developer-tools-eadd60a.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsMessage = this.getResourceBundle().getText(\"buttonOk\", [oEvent.getSourceXYZ().getId()]);\n```\n\n----------------------------------------\n\nTITLE: Modifying App View XML for Detail Page\nDESCRIPTION: This XML snippet modifies the App.view.xml to include the detail page within the FlexibleColumnLayout's midColumnPages aggregation. This configures the detail page to be displayed in the middle column of the layout.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-adding-a-detail-page-4e4315c.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tdisplayBlock=\"true\"\n\theight=\"100%\"\n\txmlns=\"sap.f\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<FlexibleColumnLayout id=\"flexibleColumnLayout\" backgroundDesign=\"Solid\">\n\t\t<beginColumnPages>\n\t\t\t<mvc:XMLView id=\"beginView\" viewName=\"sap.ui.demo.fcl.view.List\"/>\n\t\t</beginColumnPages>\n\t\t<midColumnPages>\n\t\t\t<mvc:XMLView id=\"detailView\" viewName=\"sap.ui.demo.fcl.view.Detail\"/>\n\t\t</midColumnPages>\n\t</FlexibleColumnLayout>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Individual Data Attributes Configuration (HTML)\nDESCRIPTION: This HTML code shows how to configure OpenUI5 using individual `data-sap-ui-<config-option>` attributes on the bootstrap script tag.  It sets the compatibility version to \"edge\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-of-the-openui5-runtime-91f08de.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n            src=\"resources/sap-ui-core.js\"\n            data-sap-ui-compat-version=\"edge\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Incorrect XML Usage with Case Insensitive Tags\nDESCRIPTION: This XML snippet demonstrates the incorrect usage of component tags with inconsistent casing. This can lead to the same resource being loaded and evaluated multiple times, causing performance issues and potential `instanceof` check failures in OpenUI5. Avoid using different casing for the same component.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-for-loading-modules-4363b3f.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- BAD EXAMPLE - DON'T DO THIS -->\n<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns:m=\"sap.m\">\n    ...\n    <m:Button></m:Button>\n    <m:button></m:button>\n    ...\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining Expression Binding in InvoiceList View - XML\nDESCRIPTION: This code snippet demonstrates how to use expression binding in an OpenUI5 XML view to conditionally set the `numberState` property of an `ObjectListItem` based on the `ExtendedPrice`. It utilizes the ternary operator to determine the state (Error or Success) based on whether the price is greater than 50.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-21-expression-binding-c98d573.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <List\n        headerText=\"{i18n>invoiceListTitle}\"\n        class=\"sapUiResponsiveMargin\"\n        width=\"auto\"\n        items=\"{invoice>/Invoices}\">\n        <items>\n            <ObjectListItem\n                core:require=\"{\n                    Currency: 'sap/ui/model/type/Currency'\n                }\"\n                title=\"{invoice>Quantity} x {invoice>ProductName}\"\n                number=\"{\n                    parts: [\n                        'invoice>ExtendedPrice',\n                        'view>/currency'\n                    ],\n                    type: 'Currency',\n                    formatOptions: {\n                        showMeasure: false\n                    }\n                }\"\n                numberUnit=\"{view>/currency}\"\n                numberState=\"{= ${invoice>ExtendedPrice} > 50 ? 'Error' : 'Success' }\"/>\n        </items>\n    </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Setting frame-options to deny - HTML\nDESCRIPTION: This code snippet demonstrates how to set the `frame-options` to `deny` using the `data-sap-ui-frame-options` attribute in the OpenUI5 bootstrap script tag.  This prevents the application from running inside a frame, mitigating clickjacking risks. No external dependencies are required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/frame-options-62d9c4d.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n    src=\"resources/sap-ui-core.js\"\n    data-sap-ui-frame-options=\"deny\"\n    data-sap-ui-...=\"...\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom Unit Formatting - JavaScript\nDESCRIPTION: Illustrates how to define and use custom units for formatting and parsing. It defines a custom 'zomb' unit with specific patterns for singular and plural forms and initializes a NumberFormat instance with these custom units. Custom units are exclusive to the instance they are defined on. Requires sap/ui/core/format/NumberFormat.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/unit-formatting-8e618a8.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/format/NumberFormat\"], function(NumberFormat) {\n \n       var oFormat = NumberFormat.getUnitInstance({\n              customUnits: {\n                     \"zomb\": {\n                            \"unitPattern-count-one\": \"{0} Zombie...\",\n                            \"unitPattern-count-other\": \"{0} Zombies!!\"\n                     }\n              }\n       });\n \n       console.log(oFormat.format(1, \"zomb\"));     // 1 Zombie...\n       console.log(oFormat.format(9001, \"zomb\"));  // 9.001 Zombies!!\n       \n       console.log(oFormat.parse(\"12 Zombies!!\")); // [12, \"zomb\"];\n});\n```\n\n----------------------------------------\n\nTITLE: Updating i18n properties file\nDESCRIPTION: This code snippet shows the updated i18n.properties file with new key/value pairs for the start page title and the panel title.  It adds translations for 'homePageTitle' and 'helloPanelTitle' to the existing text bundle.  These properties are used in the XML view to display localized text.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-pages-and-panels-typescript-feed613.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# App Descriptor\nappTitle=Hello World\nappDescription=A simple walkthrough app that explains the most important concepts of OpenUI5\n\n# Hello Panel\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\nhomePageTitle=UI5 TypeScript Walkthrough\nhelloPanelTitle=Hello World\n```\n\n----------------------------------------\n\nTITLE: Faking Timers with Performance API Mocks - JavaScript\nDESCRIPTION: This snippet illustrates how to use Sinon.JS fake timers in conjunction with mocking the Performance API. The code sets up fake timers and mocks the `performance.getEntriesByType` and `performance.timeOrigin` properties, which might be used by the code under test. After executing the test logic, it cleans up the mocks, executes any pending timer callbacks using `this.clock.runAll()`, and restores the original timers.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sinon-js-spies-stubs-mocks-faked-timers-and-xhr-457eaad.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nQUnit.test(\"Test with fake timers\", assert() => {\n    // Setup fake timer\n    const timeOrigin = performance.timeOrigin;\n    const clock = sinon.useFakeTimers();\n    // Mock performance API in case it's used by the code under test\n    performance.getEntriesByType = function() {\n        return [];\n    };\n    performance.timeOrigin = timeOrigin;\n\n    ...\n\n    // Cleanup\n    delete performance.getEntriesByType;\n    delete performance.timeOrigin;\n    // Execute all pending timer callbacks\n    this.clock.runAll();\n    this.clock.restore();\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing synchronous sap.ui.controller with asynchronous Controller.extend & Controller.create - JavaScript\nDESCRIPTION: This snippet demonstrates replacing the synchronous `sap.ui.controller` with `Controller.extend` for defining a controller class and `Controller.create` for instantiating a controller. It loads the `sap/ui/core/mvc/Controller` module and then uses the `extend` method to define a new controller class or the `create` method to instantiate a controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-factories-replacement-491bd9c.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oController = sap.ui.controller({/*...*/});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/mvc/Controller\"], (Controller) => {\n    return Controller.extend(\"my.sample.ControllerClass\", {\n\n        /* lifecycle hooks, controller methods etc. */\n        onInit: function() {/*...*/}\n    });\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/mvc/Controller\"], (Controller) => {\n    Controller.create({ \n        // ...\n    }).then((oController) => {/*...*/});\n});\n```\n\n----------------------------------------\n\nTITLE: Setting CalendarType with Formatting module in OpenUI5\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `sap/base/i18n/Formatting` module to set the calendar type. This replaces the deprecated `getFormatSettings` API. It requires loading both `sap/base/i18n/Formatting` and `sap/base/i18n/date/CalendarType` modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-configuration-api-2acafbf.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\n    \"sap/base/i18n/Formatting\",\n    \"sap/base/i18n/date/CalendarType\"\n], (Formatting, CalendarType) => {\n    Formatting.setCalendarType(CalendarType.Islamic);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure in XML - OpenUI5\nDESCRIPTION: This XML snippet defines the structure of an OpenUI5 table, including columns and row settings. It specifies how the table is populated with data using bindings. `items` attribute of the Table is bound to the SalesOrderList. `rows` attribute of the table:Table is also bound to the SalesOrderList.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/server-messages-in-the-odata-v4-model-fbe1cb5.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- m.Table -->\n<Table items=\"{/SalesOrderList}\">\n    <columns>\n        ...\n    </columns>\n    <ColumnListItem id=\"row\">\n        ...\n    </ColumnListItem>\n</Table>\n \n<!-- table.Table -->\n<table:Table rows=\"{/SalesOrderList}\">\n    <table:rowSettingsTemplate>\n        <t:RowSettings id=\"row\"/>\n    </table:rowSettingsTemplate>\n</table:Table>\n```\n\n----------------------------------------\n\nTITLE: Add Header Content to Detail.view.xml\nDESCRIPTION: This snippet adds header content to the `ObjectPageLayout` using `sap.m.FlexBox`, `sap.m.Avatar`, and `sap.m.VBox` controls.  It displays an avatar, main category, subcategory, and price information in the header.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-using-object-page-layout-as-a-detail-page-d1ffe61.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\t\t...\n\t\t<headerTitle>\n\t\t\t<ObjectPageDynamicHeaderTitle>\n\t\t\t\t<actions>\n\t\t\t\t\t<m:ToggleButton\n\t\t\t\t\t\ttext=\"Edit\"\n\t\t\t\t\t\ttype=\"Emphasized\"/>\n\t\t\t\t\t<m:Button\n\t\t\t\t\t\ttext=\"Delete\"\n\t\t\t\t\t\ttype=\"Transparent\"/>\n\t\t\t\t\t<m:Button\n\t\t\t\t\t\ttext=\"Copy\"\n\t\t\t\t\t\ttype=\"Transparent\"/>\n\t\t\t\t\t<m:Button\n\t\t\t\t\t\ticon=\"sap-icon://action\"\n\t\t\t\t\t\ttype=\"Transparent\"/>\n\t\t\t\t</actions>\n\t\t\t</ObjectPageDynamicHeaderTitle>\n\t\t</headerTitle>\n\n\t\t<headerContent>\n\t\t\t<m:FlexBox wrap=\"Wrap\" fitContainer=\"true\" alignItems=\"Stretch\">\n\t\t\t\t<m:Avatar\n\t\t\t\t\tdisplaySize=\"L\"\n\t\t\t\t\tdisplayShape=\"Square\"\n\t\t\t\t\tclass=\"sapUiTinyMarginEnd\">\n\t\t\t\t</m:Avatar>\n\t\t\t\t<m:VBox justifyContent=\"Center\" class=\"sapUiSmallMarginEnd\">\n\t\t\t\t\t<m:Label text=\"Main Category\"/>\n\t\t\t\t</m:VBox>\n\t\t\t\t<m:VBox justifyContent=\"Center\" class=\"sapUiSmallMarginEnd\">\n\t\t\t\t\t<m:Label text=\"Subcategory\"/>\n\t\t\t\t</m:VBox>\n\t\t\t\t<m:VBox justifyContent=\"Center\" class=\"sapUiSmallMarginEnd\">\n\t\t\t\t\t<m:Label text=\"Price\"/>\n\t\t\t\t</m:VBox>\n\t\t\t</m:FlexBox>\n\t\t</headerContent>\n```\n\n----------------------------------------\n\nTITLE: Detail Controller Logic - JavaScript\nDESCRIPTION: This JavaScript snippet defines the Detail controller in an OpenUI5 application. It handles object matching based on route parameters, navigation back to the overview page, and rating changes using the `sap.m.MessageToast` for displaying confirmation messages. The controller extends the `sap.ui.core.mvc.Controller` and depends on `sap/ui/core/routing/History` and `sap/m/MessageToast`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-d12d2ee.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\",\n\t\"sap/m/MessageToast\"\n], (Controller, History, MessageToast) => {\n\t\"use strict\";\n\n\treturn Controller.extend(\"ui5.walkthrough.controller.Detail\", {\n\t\t…\n\t\tonObjectMatched(oEvent) {\n\t\t\tthis.byId(\"rating\").reset();\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: \"/\" + window.decodeURIComponent(oEvent.getParameter(\"arguments\").invoicePath),\n\t\t\t\tmodel: \"invoice\"\n\t\t\t});\n\t\t},\n\n\t\tonNavBack() {\n\t\t\tconst oHistory = History.getInstance();\n\t\t\tconst sPreviousHash = oHistory.getPreviousHash();\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\twindow.history.go(-1);\n\t\t\t} else {\n\t\t\t\tconst oRouter = this.getOwnerComponent().getRouter();\n\t\t\t\toRouter.navTo(\"overview\", {}, true);\n\t\t\t}\n\t\t},\n\n\t\tonRatingChange(oEvent) {\n\t\t\tconst fValue = oEvent.getParameter(\"value\");\n\t\t\tconst oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\n\n\t\t\tMessageToast.show(oResourceBundle.getText(\"ratingConfirmation\", [fValue]));\n\t\t}\n\t});\n});\n\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Placing the Custom Control\nDESCRIPTION: This code snippet demonstrates how to instantiate the custom `my.Hello` control with the name \"UI5\" and place it in the HTML element with the ID \"content\".  It assumes that the `my.Hello` control has already been defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/creating-a-simple-control-91f02ec.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew my.Hello({name:\"UI5\"}).placeAt(\"content\");\n```\n\n----------------------------------------\n\nTITLE: Initial Component.js Structure (Before Changes) - JavaScript\nDESCRIPTION: This JavaScript code snippet shows the initial structure of a Component.js file before making changes to adapt it for OpenUI5. It includes the definition of the component with its metadata, dependencies, configuration, and routing. This snippet showcases the pre-manifest structure.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(\"cust.emp.myleaverequests.Component\");\nsap.ui.require([\n    \"cust/emp/myleaverequests/Configuration\",\n    \"hcm/emp/myleaverequests/Component\"], function(ComponentBase, Configuration) {\n    ComponentBase.extend(\"hcm.emp.myleaverequests.Component\", {\n    \tmetadata : {\n            \"name\" : \"My Leave Requests\",\n            \"version\" : \"...\",\n            \"library\" : \"cust.emp.myleaverequests\",\n            \"includes\" : [],\n            \"dependencies\" : {\n                \"libs\" : [\"sap.m\", \"sap.me\"],\n                \"components\" : [\"sap.app.otherComponent\"]\n            },\n            \"rootView\": ...,\n            \"handleValidation\": ...,\n            \"config\": {\n                ...\n            },\n            \"routing\": {\n                ...\n            },\n            \"config\" : {\n                \"titleResource\": \"app.Identity\",\n                \"resourceBundle\": \"i18n/i18n.properties\",\n                \"icon\": \"sap-icon://Fiori2/F0394\",\n                \"favIcon\": \"./resources/sap/ca/ui/themes/base/img/favicon/My_Leave_Requests.ico\",\n                \"homeScreenIconPhone\": \"./resources/sap/ca/ui/themes/base/img/launchicon/My_Leave_Requests/57_iPhone_Desktop_Launch.png\",\n                \"homeScreenIconPhone@2\": \"./resources/sap/ca/ui/themes/base/img/launchicon/My_Leave_Requests/114_iPhone-Retina_Web_Clip.png\",\n                \"homeScreenIconTablet\": \"./resources/sap/ca/ui/themes/base/img/launchicon/My_Leave_Requests/72_iPad_Desktop_Launch.png\",\n                \"homeScreenIconTablet@2\": \"./resources/sap/ca/ui/themes/base/img/launchicon/My_Leave_Requests/144_iPad_Retina_Web_Clip.png\"\n            }\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping with Evergreen OpenUI5 Version\nDESCRIPTION: This code snippet demonstrates how to bootstrap OpenUI5 using an evergreen version from the CDN. It utilizes a versioned URL with only the major and minor versions.  It also shows how to initialize components using the `data-sap-ui-on-init` attribute, and define resource roots and compatibility versions. Asynchronous loading with `data-sap-ui-async=\"true\"` is a requirement.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/variant-for-bootstrapping-from-content-delivery-network-2d3eb2f.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- ... -->\n    <script id=\"sap-ui-bootstrap\"\n        src=\"https://sdk.openui5.org/1.120/resources/sap-ui-core.js\"\n        data-sap-ui-async=\"true\"\n        data-sap-ui-on-init=\"module:sap/ui/core/ComponentSupport\"\n        data-sap-ui-resource-roots='{ \"my.app\": \"./\" }'\n        data-sap-ui-compat-version=\"edge\">\n    </script>\n</head>\n<body id=\"content\" class=\"sapUiBody\">\n    <div data-sap-ui-component\n        data-id=\"myComponentContainer\"\n        data-name=\"my.app\"\n        data-height=\"100%\"\n        data-settings='{ \"id\": \"myComponent\" }'\n        data-...=\"...\">\n    </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:visible to Hidden\nDESCRIPTION: This snippet demonstrates how `sap:visible = \"false\"` is transformed into `com.sap.vocabularies.UI.v1.Hidden` set to true, indicating that the property should be hidden in the UI.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_58\n\nLANGUAGE: xml\nCODE:\n```\nsap:visible=\"false\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"com.sap.vocabularies.UI.v1.Hidden\" : { \"Bool\" : \"true\" }\n\"com.sap.vocabularies.Common.v1.FieldControl\": { \"EnumMember\" :\n\"com.sap.vocabularies.Common.v1.FieldControlType/Hidden\" }\n```\n\n----------------------------------------\n\nTITLE: Custom Currencies on Instance - OpenUI5 JavaScript\nDESCRIPTION: This code demonstrates how to define custom currencies on a specific currency format instance.  Custom currencies are defined as an additional format option in the `sap.ui.core.format.NumberFormat.getCurrencyInstance()` factory. The example shows how to format and parse values using the custom currency and also how to fall back to existing currency symbols using the `isoCode` configuration.  'NumberFormat' must be required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-formatting-e978728.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"NumberFormat\" required from module \"sap/ui/core/format/NumberFormat\"\nvar oCurrencyFormat = NumberFormat.getCurrencyInstance({\n    customCurrencies: {\n        \"Bitcoin\": {\n            decimals: 5\n         }\n     }\n});\n\noCurrencyFormat.format(10.1234567, \"Bitcoin\"); // 10,12346 Bitcoin\noCurrencyFormat.parse(\"12 Bitcoin\"); // [12, \"Bitcoin\"];\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"NumberFormat\" required from module \"sap/ui/core/format/NumberFormat\"\nvar oCurrencyFormat = NumberFormat.getCurrencyInstance({\n    currencyCode: false,\n    customCurrencies: {\n        \"MyEuro\": {\n            decimals: 5,\n            isoCode: \"EUR\"\n        }\n    }\n});\n\noCurrencyFormat.format(10.1234567, \"MyEuro\"); // €10.12346\n```\n\n----------------------------------------\n\nTITLE: Writing Device-Dependent CSS using Media Queries in JS\nDESCRIPTION: This snippet demonstrates how to apply CSS styles based on the device type using the `sapUiMedia-Std-Phone` CSS class. This approach allows specific styles to be applied only to phone devices based on screen size.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/options-for-further-adaptation-04eb520.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n.sapUiMedia-Std-Phone .yourSelector{\n\tStyle-applied-to-phone-only: someValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregations in OpenUI5 (JavaScript)\nDESCRIPTION: This snippet shows how to define aggregations within the metadata of an OpenUI5 control. It provides examples for different aggregation configurations, including specifying the type, singular name, and multiplicity. It showcases a simple type assignment, a default type assignment, and a fully specified aggregation with type, multiplicity and singular name.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-the-control-metadata-7b52540.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naggregations: {\n   \"acceptButton\" : \"sap.m.Button\", // if only type is given, no object is required\n   \"content\" : {singularName: \"content\"},    // default type is \"sap.ui.core.Control\", \n                                                 // which is appropriate for generic containers\n   \"toolbarItems\" : {type : \"sap.m.Button\", multiple : true, singularName : \"toolbarItem\"}\n                                                 // a fully specified aggregation\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Tests Entry Point\nDESCRIPTION: This TypeScript code imports the formatter unit test to ensure it's included when running unit tests. This file acts as the entry point for all unit tests and aggregates individual test modules.  By importing the formatter test module, all tests related to that module will be executed when the unit test suite is run.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-27-unit-test-with-qunit-typescript-750c8c1.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"./model/formatter\";\n```\n\n----------------------------------------\n\nTITLE: Logging an Info Message\nDESCRIPTION: This snippet demonstrates how to log an information message using the `Log.info` method in OpenUI5. It requires the `sap/base/Log` module to be imported.  The browser may not display this message if the log console is filtered to only show errors or higher severity levels.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/logging-and-tracing-9f4d62c.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Log\" required from module \"sap/base/Log\"\nLog.info(\"Something has happened\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Resource Bundles and Terminologies in manifest.json\nDESCRIPTION: This JSON snippet illustrates how to define a library's ResourceBundle, including terminologies, within the `sap.ui5/library/i18n` section of a library's `manifest.json` file.  It shows the configuration of the main bundle, supported locales, fallback locale, and different terminologies such as sports, travel, and services.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/terminologies-eba8d25.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    ...\n    \"sap.ui5\": {\n        \"library\": {\n            \"i18n\": {\n                \"bundleUrl\": \"i18n/i18n.properties\",\n                \"supportedLocales\": [\"en\", \"de\"],\n                \"fallbackLocale\": \"en\",\n                \"terminologies\": {\n                    \"sports\": {\n                        \"bundleUrl\": \"i18n/terminologies/sports/i18n.terminologies.sports.properties\",\n                        \"supportedLocales\": [\"en\", \"de\"]\n                    },\n                    \"travel\": {\n                        \"bundleUrl\": \"i18n/terminologies/travel/i18n.terminologies.travel.properties\",\n                        \"supportedLocales\": [\"en\", \"de\"]\n                    },\n                    \"services\": {\n                        \"bundleUrl\": \"i18n/terminologies/services/i18n.terminologies.services.properties\",\n                        \"supportedLocales\": [\"en\", \"de\"]\n                    }\n                },\n                ...\n            }\n        }\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Text using Math.max Function - XML\nDESCRIPTION: This XML snippet sets the text of a control to the maximum value among three values using the `Math.max()` function. The expression uses embedded binding syntax.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Text is maximum of three values. -->\ntext=\"{= Math.max(%{/value1}, %{/value2}, %{/value3})}\"\n```\n\n----------------------------------------\n\nTITLE: Implement IAsyncContentCreation Interface (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to implement the `sap.ui.core.IAsyncContentCreation` interface in a UIComponent. Implementing this interface automatically sets the component's `rootView` and router configuration to `async: true`, ensuring asynchronous handling of nested views.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/use-asynchronous-loading-676b636.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/UIComponent\"], function(UIComponent) {\n    return UIComponent.extend(\"my.app.Component\", {\n        metadata: {\n            interfaces: [\"sap.ui.core.IAsyncContentCreation\"],\n            manifest: \"json\"\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Target Definitions for sap.f.routing.Router (JSON)\nDESCRIPTION: This JSON snippet shows how targets are defined for use with the `sap.f.routing.Router`. Each target specifies the view's type and name, and crucially, the `controlAggregation` to which the view should be added within the `FlexibleColumnLayout`. These aggregations determine which column the view will be displayed in.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/router-c6da1a5.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"targets\": {\n   \"list\": {\n      \"type\": \"View\",\n      \"name\": \"list\",\n      \"controlAggregation\": \"beginColumnPages\"\n   },\n   \"detail\": {\n      \"type\": \"View\",\n      \"name\": \"Detail\",\n      \"controlAggregation\": \"midColumnPages\"\n   },\n   \"detailDetail\": {\n      \"type\": \"View\",\n      \"name\": \"DetailDetail\",\n      \"controlAggregation\": \"endColumnPages\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Data Example\nDESCRIPTION: This JSON data represents company information including name, address, and revenue, serving as a sample data model for demonstrating property binding in OpenUI5.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"company\": {\n        \"name\": \"Acme Inc.\",\n        \"street\": \"23 Franklin St.\",\n        \"city\": \"Claremont\",\n        \"state\": \"New Hampshire\",\n        \"zip\": \"03301\",\n        \"revenue\": \"1833990\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UI Controls in XML View (OpenUI5)\nDESCRIPTION: This XML snippet demonstrates how to define basic UI controls such as `SearchField` and `List` in an OpenUI5 XML view. It binds the `items` aggregation of the list to the `/Products` model and uses a `StandardListItem` to display the `Name` property of each product.  It also shows attaching the `.onSearch` handler to the change event of the search field.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/keep-your-views-short-and-simple-b0d7db7.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<SearchField change=\".onSearch\"/>\n<List items=\"{/Products}\" headerText=\"Search Results\">\n\t<StandardListItem title=\"{Name}\"/>\n</List>\n</Panel>\n```\n\n----------------------------------------\n\nTITLE: Gherkin Feature File Example\nDESCRIPTION: This Gherkin feature file defines a scenario for testing a 'life saving' button in an application. The scenario outlines the steps of starting the app, checking for the button, and simulating a button click to save a lemming's life. It uses 'Given', 'When', and 'Then' keywords to structure the test.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/basic-example-how-to-use-gherkin-4b0c519.md#_snippet_0\n\nLANGUAGE: Gherkin\nCODE:\n```\nFeature: Clicking Buttons is a Life Saving Activity\n\n    Let's save some lemmings' lives\n\n  Scenario: Click a button, save a life!\n    Given I have started the app\n      And I can see the life saving button\n      And I check how many lemmings have been saved already\n     When I click on the life saving button\n     Then I save a lemming's life\n```\n\n----------------------------------------\n\nTITLE: Configure Sinon.JS in Test Suite - JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure Sinon.JS within an OpenUI5 test suite using the sap.ui.define module definition. It sets the Sinon.JS version, enables the QUnit bridge, and disables fake timers by default. This configuration ensures Sinon.JS is properly initialized for use in QUnit tests.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sinon-js-spies-stubs-mocks-faked-timers-and-xhr-457eaad.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define(function() {\n\t\"use strict\";\n \n\treturn {\n\t\tname: \"TestSuite for myapp\",\n\t\tdefaults: {\n\t\t\tqunit: {\n\t\t\t\tversion: 2\n\t\t\t},\n\t\t\tsinon: {\n\t\t\t\tversion: 4,\n\t\t\t\tqunitBridge: true,\n\t\t\t\tuseFakeTimers: false\n\t\t\t}\n\t\t},\n\n\t\t// ...\n\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Integer Type with Default Formatting - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize the `sap.ui.model.type.Integer` type with default formatting options. The source value is a JavaScript number, and the output is transformed based on the bound control property. If the target property is a string, default output pattern parameters are used based on the locale and fixed settings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-integer-91f3145.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"TypeInteger\" required from module \"sap/ui/model/type/Integer\"\n\n// The source value is given as JavaScript number. Output is transformed into the type of the bound control property.\n// If this type is \"string\" (e.g. the value property of the TextField control) the used default output pattern parameters depend on locale and fixed settings.\nvar oType = new TypeInteger();\n```\n\n----------------------------------------\n\nTITLE: Binding select event of IconTabBar in Resume.view.xml\nDESCRIPTION: This code snippet shows how to bind the `select` event of the `IconTabBar` control in `Resume.view.xml` to the `.onTabSelect` event handler. It also binds the `selectedKey` property to a view model, allowing to change the selected tab based on the URL.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-allow-bookmarkable-tabs-with-optional-query-parameters-b8561ff.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.Resume\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page\n\t\ttitle=\"{i18n>ResumeOf} {FirstName} {LastName}\"\n\t\tid=\"employeeResumePage\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\">\n\t\t<content>\n\t\t\t<IconTabBar\n\t\t\t\tid=\"iconTabBar\"\n\t\t\t\theaderBackgroundDesign=\"Transparent\"\n\t\t\t\tclass=\"sapUiResponsiveContentPadding\"\n\t\t\t\tbinding=\"{Resume}\"\n\t\t\t\tselect=\".onTabSelect\"\n\t\t\t\tselectedKey=\"{view>/selectedTabKey}\">\n\t\t\t\t<items>\n\t\t\t\t\t<IconTabFilter id=\"infoTab\" text=\"{i18n>tabInfo}\" key=\"Info\">\n\t\t\t\t\t\t<Text text=\"{Information}\"/>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"projectsTab\" text=\"{i18n>tabProjects}\" key=\"Projects\">\n\t\t\t\t\t\t<mvc:XMLView viewName=\"sap.ui.demo.nav.view.employee.ResumeProjects\"></mvc:XMLView>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"hobbiesTab\" text=\"{i18n>tabHobbies}\" key=\"Hobbies\">\n\t\t\t\t\t\t<Text text=\"{Hobbies}\"/>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"notesTab\" text=\"{i18n>tabNotes}\" key=\"Notes\">\n\t\t\t\t\t\t<Text text=\"{Notes}\"/>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t</items>\n\t\t\t</IconTabBar>\n\t\t</content>\n\t</Page>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Example Feature File Structure\nDESCRIPTION: This code snippet demonstrates the basic structure of a feature file using Gherkin syntax. It includes a feature declaration, a description, scenarios with Given/When/Then steps, comments, and alternative bullet-point steps. The file extension is `.feature`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/feature-files-9113397.md#_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: this is the name of the feature\n\n    Here you can describe the feature. Indentation is purely to make \n    this more readable for you. This section will not be used for \n    testing, it is solely for human consumption.\n\n  Scenario: this is the scenario's name\n\n      This is a comment about the scenario\n\n    Given you make a certain assumption here\n    And you make another assumption\n    When some action is taken\n    Then there is an expected response that you write here\n    But there is an exception you should test for\n\n  # comment lines must start with #, and will be skipped by the parser\n\n  Scenario: another scenario's name\n    * you can also just create a bulleted list of steps\n    * instead of using keywords\n```\n\n----------------------------------------\n\nTITLE: Simulating Press on Delete Button using Custom OPA5 Action (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a custom OPA5 action to simulate a press on the delete button of a list item. It uses `sap.ui.require` to load necessary modules like `sap/ui/test/opaQUnit` and `sap/ui/test/matchers/Properties`.  The `When.waitFor` function is used to locate the list, then a custom action function is executed to trigger the `fireDelete` event on the first list item. Requires OpenUI5 framework and OPA5 testing library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/simulating-user-interactions-on-controls-8615a0b.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/test/opaQUnit\", \"sap/ui/test/matchers/Properties\"], function (opaTest, Properties) {\n\n    opaTest(\"Should simulate press on the delete button\", function (Given, When, Then) {\n        // Startup the application using Given\n\n        When.waitFor({\n            id : \"entryList\",\n            matchers : new Properties({ mode : \"Delete\"}),\n            actions: function (oList) {\n                oList.fireDelete({listItem : oList.getItems()[0]});\n            },\n            errorMessage : \"The delete button could not be pressed\"\n        });\n\n        // Assert what happened after selecting the item using Then\n\n    });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling Edit with OData V4 Model in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to cancel editing and revert to the active version of an entity using the OData V4 model in OpenUI5. It either replaces the draft context with the previously stored active context or retrieves the active entity using the `SiblingEntity` navigation property, inheriting expand and select properties, and replaces the row context *in situ*. It then deletes the draft entity without requesting a new count from the server.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/draft-handling-with-the-odata-v4-model-40986e6.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nonCancel : function () {\n    var oObjectPage = this.byId(\"objectPage\"),\n        oDraftContext = oObjectPage.getBindingContext();\n \n    function gotoActiveContext(oActiveContext) {\n        oObjectPage.setBindingContext(oActiveContext);\n        that.oActiveContext = null; // not needed anymore\n        oDraftContext.delete(\"$auto\", /*bDoNotRequestCount*/true);\n    }\n \n    if (this.oActiveContext) {\n        oDraftContext.replaceWith(this.oActiveContext);\n        gotoActiveContext(this.oActiveContext);\n    } else {\n        oDraftContext.getModel().bindContext(\"SiblingEntity(...)\", oDraftContext,\n                {$$inheritExpandSelect : true})\n            .invoke(\"$auto\", false, null, /*bReplaceWithRVC*/true).then(gotoActiveContext);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App.controller.js (JavaScript)\nDESCRIPTION: This JavaScript snippet defines the controller for the App view. In this step, it is an empty stub, as the functionality has been moved to the HelloPanel controller. It serves as a placeholder for future enhancements.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-nested-views-df8c9c3.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n   \"sap/ui/core/mvc/Controller\"\n], (Controller) => {\n   \"use strict\";\n\n   return Controller.extend(\"ui5.walkthrough.controller.App\", {\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Button View in OpenUI5 with a stable ID\nDESCRIPTION: This HTML snippet defines a simple OpenUI5 view named ButtonView containing a single button with the stable ID 'aButton'.  The view is defined using XML syntax with the sap.m namespace for mobile controls and sap.ui.core.mvc namespace for MVC related elements.  This stable ID is used to reference and modify the button during runtime.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/support-for-unique-ids-91f28be.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<mvc:View viewName=\"sap.hcm.ButtonView\" controllerName=\"sap.hcm.myController\" xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\">\n      <Button id=\"aButton\" text=\"Click me\"/><mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Logic to DetailDetail Controller - JS\nDESCRIPTION: Adds a handleAboutPress function to the DetailDetail.controller.js to navigate to the \"page2\" route with the layout set to EndColumnFullScreen.  This enables navigation to the additional page using the Flexible Column Layout.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-adding-more-pages-a59b3de.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t'sap/f/library'\n], function (Controller, fioriLibrary) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.DetailDetail\", {\n\t\tonInit: function () {\n\t\t\tvar oOwnerComponent = this.getOwnerComponent();\n\n\t\t\tthis.oRouter = oOwnerComponent.getRouter();\n\t\t\tthis.oModel = oOwnerComponent.getModel();\n\n\t\t\tthis.oRouter.getRoute(\"detailDetail\").attachPatternMatched(this._onPatternMatch, this);\n\t\t},\n\n\t\thandleAboutPress: function () {\n\t\t\tthis.oRouter.navTo(\"page2\", {layout: fioriLibrary.LayoutType.EndColumnFullScreen});\n\t\t},\n\n\t\t_onPatternMatch: function (oEvent) {\n\t\t...\n\n```\n\n----------------------------------------\n\nTITLE: Handling Touch and Mouse Events with Native Browser API\nDESCRIPTION: This code snippet demonstrates how to handle both touch and mouse events using native browser event listeners (`addEventListener`). It checks for the `_sapui_delayedMouseEvent` flag directly on the event object to suppress emulated mouse events. It attaches the same handler function to both `touchmove` and `mousemove` events.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/adapting-event-handling-for-devices-supporting-both-mouse-and-touch-input-b54d7d7.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar fnHandler = function (oEvent ) { if (oEvent . _sapui_delayedMouseEvent ) { // Suppress the emulated mouse event from the touch interface\n         return ; } ...... };\n        \ndocument . addEventListener ( \"touchmove\" , fnHandler );\ndocument . addEventListener ( \"mousemove\" , fnHandler );\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.isEqualNode with Node.isEqualNode (Native)\nDESCRIPTION: This snippet demonstrates replacing `jQuery.sap.isEqualNode` with the native `Node.isEqualNode` method.  `Node.isEqualNode` tests whether two nodes are equal.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nNode.isEqualNode\n```\n\n----------------------------------------\n\nTITLE: Hiding the Anchor Bar in XML - SAPUI5\nDESCRIPTION: This snippet shows how to hide the anchor bar within an ObjectPageLayout using the `showAnchorBar` property set to `false` in the XML view. This prevents the anchor bar from being displayed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/anchor-bar-370b679.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ObjectPageLayout id=\"ObjectPageLayout\" showAnchorBar=\"false\">\n</ObjectPageLayout>\n```\n\n----------------------------------------\n\nTITLE: Accessing 1..n Aggregations in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to access a 1..n aggregation of a control using the `get<Aggregation>s()` method in OpenUI5. The example shows how to retrieve the `rows` aggregation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/writing-a-control-renderer-91f3939.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n    \n    // var aAggregations = oControl.get<Aggregation>s();\n    // for example for rows-aggregation\n    var aAggregations = oControl.getRows();\n    \n```\n\n----------------------------------------\n\nTITLE: Initializing Integer Type with Custom Formatting - JavaScript\nDESCRIPTION: This code snippet illustrates how to initialize the `sap.ui.model.type.Integer` type with custom formatting options.  Specific parameters are provided to control the number of integer and fraction digits, grouping behavior, and separators. Parameters not specified will use default values. The source value is a JavaScript number, and the output is transformed to match the specified format.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-integer-91f3145.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\noType = new TypeInteger({\n  minIntegerDigits: 1, // minimal number of non-fraction digits\n  maxIntegerDigits: 99, // maximal number of non-fraction digits\n  minFractionDigits: 0, // minimal number of fraction digits\n  maxFractionDigits: 0, // maximal number of fraction digits\n  groupingEnabled: false, // enable grouping (show the grouping separators)\n  groupingSeparator: \",\", // the used grouping separator\n  decimalSeparator: \".\" // the used decimal separator\n});\n```\n\n----------------------------------------\n\nTITLE: Adding IconTabBar to Post View (XML)\nDESCRIPTION: This XML snippet adds a `sap.m.IconTabBar` with two tabs: 'info' and 'statistics'. The 'info' tab contains a `sap.ui.layout.form.SimpleForm` displaying the post's date and description. The 'statistics' tab contains a `sap.m.Text` control, which currently displays static text. The `expanded` property is bound to the `device>/isNoPhone` model to control the tab bar's expansion on different devices.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-adding-tabs-6e9c6bd.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n      controllerName=\"sap.ui.demo.bulletinboard.controller.Post\"\n      xmlns=\"sap.m\"\n      xmlns:form=\"sap.ui.layout.form\"\n      xmlns:mvc=\"sap.ui.core.mvc\"\n      xmlns:semantic=\"sap.m.semantic\">\n   <semantic:FullscreenPage\n         id=\"page\"\n         busy=\"{postView>/busy}\"\n         busyIndicatorDelay=\"0\"\n         navButtonPress=\".onNavBack\"\n         showNavButton=\"true\"\n         title=\"{i18n>objectTitle}\">\n      <semantic:content>\n         <ObjectHeader\n               id=\"objectHeader\"\n               title=\"{Title}\"\n               number=\"{\n                  path: 'Price',\n                  formatter: '.formatter.numberUnit'\n               }\"\n               numberUnit=\"{Currency}\"\n               backgroundDesign=\"Translucent\">\n         </ObjectHeader>\n         <IconTabBar id=\"iconTabBar\"\n                  expanded=\"{device>/isNoPhone}\"\n                  class=\"sapUiNoContentPadding\">\n            <items>\n               <IconTabFilter icon=\"sap-icon://hint\" key=\"info\" >\n                  <form:SimpleForm>\n                     <form:content>\n                        <Label text=\"{i18n>postDateLabel}\"/>\n                        <Text text=\"{Timestamp}\"/>\n                        <Label text=\"{i18n>postDescriptionLabel}\"/>\n                        <Text text=\"{Description}\"/>\n                     </form:content>\n                  </form:SimpleForm>\n               </IconTabFilter>\n               <IconTabFilter icon=\"sap-icon://inspection\" key=\"statistics\">\n                  <Text text=\"Viewed 55555 times\" id=\"viewCounter\"/>\n               </IconTabFilter>\n            </items>\n         </IconTabBar>\n\n      </semantic:content>\n   </semantic:FullscreenPage>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Configuring Blanket.js Code Coverage in OpenUI5 HTML (Legacy)\nDESCRIPTION: This HTML snippet configures Blanket.js for code coverage in OpenUI5 (legacy approach). It loads the `qunit-coverage.js` script and specifies which files to include (`data-sap-ui-cover-only`) and exclude (`data-sap-ui-cover-never`) from coverage calculation. Note the attribute name difference from standard Blanket.js usage.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-20737a4.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"../../resources/sap/ui/qunit/qunit-coverage.js\"\n  data-sap-ui-cover-only=\"GherkinWithOPA5/\"\n  data-sap-ui-cover-never=\"sap/ui/\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Direct Event Handler Implementation in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet shows how to directly implement an event handler for a common event type (onclick) in an OpenUI5 control. OpenUI5 automatically registers event handlers for certain common event types on the root element of a control.  This method requires less code and reduces the number of event handler registrations. It is only available for specific event types.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/browser-events-91f1b38.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nMyControl.prototype.onclick = function(oEvent) {\n   // do something...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Swipe Event in OpenUI5 Controller\nDESCRIPTION: This JavaScript snippet handles the swipe event in an OpenUI5 controller. It retrieves the swiped list item and swipe content from the event parameters. Based on whether the list item is already approved, it dynamically changes the button text to \"Disapprove\" or \"Approve\" and adjusts its type accordingly.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/events-e498329.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nhandleSwipe: function(e) {   // register swipe event\n        var oSwipeListItem = e.getParameter(\"listItem\"),    // get swiped list item from event\n            oSwipeContent = e.getParameter(\"swipeContent\"); // get swiped content from event\n\n        // Check swiped list item if it is already approved or not\n        if (oSwipeListItem.data(\"approved\")) {    \n            // List item is approved, change swipeContent(button) text to Disapprove and type to Reject\n            oSwipeContent.setText(\"Disapprove\").setType(\"Reject\");  \n        } else  {\n            // List item is not approved, change swipeContent(button) text to Approve and type to Accept\n            oSwipeContent.setText(\"Approve\").setType(\"Accept\");     \n        }\n    },\n```\n\n----------------------------------------\n\nTITLE: Adding i18n properties for table columns\nDESCRIPTION: This INI snippet adds new properties to the i18n.properties file for the OpenUI5 application.  These properties define the text labels for the columns in the invoice list table, as well as invoice statuses. This allows for easy internationalization and localization of the application's user interface.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-34-responsiveness-a96e18b.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n...\n# Invoice List\ninvoiceListTitle=Invoices\ninvoiceStatusA=New\ninvoiceStatusB=In Progress\ninvoiceStatusC=Done\ncolumnQuantity=Quantity\ncolumnName=Name\ncolumnSupplier=Supplier\ncolumnStatus=Status\ncolumnPrice=Price\n\n# Detail Page\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Control Combination as Swipe Content in OpenUI5 List (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to add a control combination (in this case, an HBox) as `swipeContent` to an OpenUI5 List using Javascript. The `swipeContent` contains a `Button`, which can be utilized to perform actions like deleting items. Requires `sap.m.List` and `sap.m.HBox`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/aggregation-d4e69ad.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew sap.m.List({\n        swipeContent : new sap.m.HBox({\n            items : [\n          <List\n        headerText=\"Products\"\n        items=\"{/ProductCollection}\" >\n        <StandardListItem\n          title=\"{Name}\"\n          description=\"{ProductId}\"\n          icon=\"{ProductPicUrl}\" \n          iconDensityAware=\"false\"\n          iconInset=\"false\" />\n        <swipeContent>\n          <Button\n            text=\"Delete Item\"\n            type=\"Reject\"\n            press=\"handleReject\" />\n        </swipeContent>\n      </List>\n```\n\n----------------------------------------\n\nTITLE: Attaching parse error handler to component in SAPUI5\nDESCRIPTION: This snippet demonstrates how to attach a parse error handler to a component in SAPUI5, using `Component.create()` and `attachParseError()`. It also shows how to detach the handler. Requires `sap/ui/core/Component` module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\n    \"sap/ui/core/Component\"\n], async (Component) => {\n    const oComponent = await Component.create({\n        name: \"my.component\"\n    });\n    const fnParseErrorHandler = function () {\n        // Error handling\n    };\n    oComponent.attachParseError(fnParseErrorHandler);\n    oComponent.detachParseError(fnParseErrorHandler);\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring a Typed View in XML - OpenUI5\nDESCRIPTION: This XML snippet demonstrates how to declare a typed view within an XML view using the sap.ui.core.mvc.View class. The viewName attribute must be prefixed with 'module:' to indicate the module path to the typed view. The mvc namespace must be defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/typed-view-e6bb33d.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View viewName=\"module:myapp/views/MyView\" />\n```\n\n----------------------------------------\n\nTITLE: Test Suite Configuration\nDESCRIPTION: This TypeScript code configures the test suite for the UI5 TypeScript Walkthrough application.  It specifies the QUnit version, UI5 theme, and loader paths.  The `tests` section defines the unit tests to be included in the test suite, referencing the `unitTests` module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-27-unit-test-with-qunit-typescript-750c8c1.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default {\n        name: \"QUnit test suite for UI5 TypeScript Walkthrough\",\n        defaults: {\n\t\t\tpage: \"ui5://test-resources/ui5/walkthrough/Test.qunit.html?testsuite={suite}&test={name}\",\n\t\t\tqunit: {\n\t\t\t\tversion: 2\n\t\t\t},\n\t\t\tui5: {\n\t\t\t\ttheme: \"sap_horizon\"\n\t\t\t},\n\t\t\tloader: {\n\t\t\t\tpaths: {\n\t\t\t\t\t  \"ui5/walkthrough\": \"../\"\n\t\t\t   }\n\t\t\t}\n        },\n        tests: {\n               \"unit/unitTests\": {\n                       title: \"UI5 TypeScript Walkthrough - Unit Tests\"\n               }\n        }\n};\n```\n\n----------------------------------------\n\nTITLE: Grid with defaultSpan and defaultIndent XML\nDESCRIPTION: This XML snippet showcases a `sap.ui.layout.Grid` with both `defaultSpan` and `defaultIndent` properties set.  The `defaultIndent` property specifies the number of columns to indent each item by for different screen sizes, enabling more complex layouts and spacing configurations. This example builds upon the basic Grid by adding indentation to the image placement.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/sap-ui-layout-grid-43ae317.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<l:Grid\n\t\tdefaultSpan=\"XL3 L4 M6 S12\"\n\t\tdefaultIndent=\"XL1 L1 M1 S1\">\n\t<Image src=\"/item1.png\" width=\"100%\"></Image>\n\t<Image src=\"/item2.png\" width=\"100%\"></Image>\n\t<Image src=\"/item3.png\" width=\"100%\"></Image>\n\t<Image src=\"/item4.png\" width=\"100%\"></Image>\n</l:Grid>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Styles - style.css\nDESCRIPTION: This CSS snippet defines custom styles for an OpenUI5 application, including adjustments to button margins based on text direction (LTR/RTL) and styling for a custom text class. It uses a custom namespace class (`myAppDemoWT`) to scope the styles to the application. The styles aim to adjust the button spacing and format the text with bold styling.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-custom-css-and-theme-colors-typescript-4cc841e.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nhtml[dir=\"ltr\"] .myAppDemoWT .myCustomButton.sapMBtn {\n   margin-right: 0.125rem\n}\n\nhtml[dir=\"rtl\"] .myAppDemoWT .myCustomButton.sapMBtn {\n   margin-left: 0.125rem\n}\n\n.myAppDemoWT .myCustomText {\n   display: inline-block;\n   font-weight: bold;\n}\n\n```\n\n----------------------------------------\n\nTITLE: OData Property Extensions - JSON\nDESCRIPTION: This code shows how extensions are added to OData properties, demonstrating the 'extensions' array and the transformation into simple properties with an 'sap:' prefix. This allows addressing annotations via simple relative paths.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_32\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"BusinessPartnerID\",\n    \"extensions\": [{\n      \"name\": \"label\",\n      \"value\": \"Bus. Part. ID\",\n      \"namespace\": \"http://www.sap.com/Protocols/SAPData\"\n    }],\n    \"sap:label\": \"Bus. Part. ID\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Internationalization Text for Out of Stock (Properties)\nDESCRIPTION: These property file entries define the `outOfStock` text in both English and German for internationalization. This text is used within the factory function in `App.controller.js` when a product is temporarily out of stock.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-aggregation-binding-using-a-factory-function-284a036.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\n...# Product Details...outOfStock=Out of Stock\n```\n\nLANGUAGE: properties\nCODE:\n```\n...# Product Details...outOfStock=Nicht vorr\\u00e4tig\n```\n\n----------------------------------------\n\nTITLE: Loading Fragment Using Controller's loadFragment with ID\nDESCRIPTION: This JavaScript code demonstrates how to load a fragment with a specified ID using the `loadFragment` method.  This prefixes the fragment's control IDs with both the view ID and the provided fragment ID (e.g., `myFragment`). This helps avoid potential ID collisions when instantiating the fragment multiple times.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/ids-in-declarative-fragments-0715706.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/Controller\"], function(Controller){\n\n   return Controller.extend({\n\n      onInit: function(){\n         this.loadFragment({\n            id: \"myFragment\",\n            name: \"my.useful.UiPartZ\",\n         }).then(function(oFragment){\n            // ...\n         }); // Button ID will be prefixed by the view ID and the fragment ID\n      }\n   })\n  \n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Pop-in Display Style in OpenUI5 Table\nDESCRIPTION: This code snippet demonstrates how to configure the pop-in display style for columns in an OpenUI5 table. The `popinDisplay` property is used to specify whether the column content should be displayed in `Block` (header and content vertically arranged) or `Inline` (header and content next to each other) mode when the column is displayed in a pop-in. The `minScreenWidth` and `demandPopin` properties control when the pop-in is displayed.  The columns `Supplier`, `Dimensions` and `Weight` have different configurations, `Supplier` shows content in block, `Dimensions` and `Weight` shows content inline.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/table-design-d3234bc.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n   <columns>\n      <Column\n        width=\"12em\">\n        <Text text=\"Product\" />\n      </Column>\n      <Column\n        popinDisplay: \"Block\"\n        minScreenWidth=\"Tablet\"\n        demandPopin=\"true\">\n        <Text text=\"Supplier\" />\n      </Column>\n      <Column\n        popinDisplay: \"Inline\"\n        minScreenWidth=\"Tablet\"\n        hAlign=\"End\">\n        <Text text=\"Dimensions\" />\n      </Column>\n      <Column\n        popinDisplay: \"Inline\"\n        minScreenWidth=\"Tablet\"\n        demandPopin=\"true\"\n        hAlign=\"Center\">\n        <Text text=\"Weight\" />\n      </Column>\n      <Column\n        hAlign=\"End\">\n        <Text text=\"Price\" />\n      </Column>\n    </columns>\n\n```\n\n----------------------------------------\n\nTITLE: Updating App View (XML)\nDESCRIPTION: This snippet updates the `App.view.xml` file.  It removes all content and adds an `id` to the `App` control to be used for router configuration in `manifest.json`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-typescript-6173e3d.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.App\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    displayBlock=\"true\">\n    <Shell>\n        <App\n            class=\"myAppDemoWT\"\n            id=\"app\"/>\n    </Shell\n></mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Modifying Detail Controller JS for Supplier Press Event\nDESCRIPTION: This JavaScript code modifies the detail page controller to include an `onSupplierPress` function.  This function is triggered when a supplier is selected in the table. It retrieves the supplier's path from the binding context and extracts the supplier ID. The `navTo` method of the router is then used to navigate to the `detailDetail` route, passing the layout, supplier ID, and product ID as parameters. The Fiori library is imported to define the layout.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-adding-a-detail-detail-page-e4d21fd.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t'sap/f/library'\n], function (Controller, fioriLibrary) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.Detail\", {\n\t\tonInit: function () {\n\t\t\tvar oOwnerComponent = this.getOwnerComponent();\n\n\t\t\tthis.oRouter = oOwnerComponent.getRouter();\n\t\t\tthis.oModel = oOwnerComponent.getModel();\n\n\t\t\tthis.oRouter.getRoute(\"list\").attachPatternMatched(this._onProductMatched, this);\n\t\t\tthis.oRouter.getRoute(\"detail\").attachPatternMatched(this._onProductMatched, this);\n\t\t\tthis.oRouter.getRoute(\"detailDetail\").attachPatternMatched(this._onProductMatched, this);\n\t\t},\n\n\t\tonSupplierPress: function (oEvent) {\n\t\t\tvar supplierPath = oEvent.getSource().getBindingContext(\"products\").getPath(),\n\t\t\t\tsupplier = supplierPath.split(\"/\").slice(-1).pop();\n\n\t\t\tthis.oRouter.navTo(\"detailDetail\", {layout: fioriLibrary.LayoutType.ThreeColumnsMidExpanded, supplier: supplier, product: this._product});\n\t\t},\n\n\t\t_onProductMatched: function (oEvent) {\n\t\t...\n```\n\n----------------------------------------\n\nTITLE: Define Service URL in manifest.json\nDESCRIPTION: This code snippet defines the service URL for the Northwind OData service in the `manifest.json` file. It specifies the URI relative to the destination path configured in `neo-app.json`. The `odataVersion` is set to \"2.0\", and the data source is named with an empty string.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/create-a-northwind-destination-3a16c7a.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n...\n\"sap.app\": {\n \"dataSources\": {\n   \"\": {\n     \"uri\": \"/destinations/northwind/V2/Northwind/Northwind.svc/\",\n     \"type\": \"OData\",\n     \"settings\": {\n       \"odataVersion\": \"2.0\"\n     }\n   }\n }\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Instantiating XML and JS Fragments in XML View\nDESCRIPTION: This XML snippet demonstrates how to instantiate XML and JS fragments within an XML view in SAPUI5. It uses the core:Fragment tag to include fragments, specifying the fragmentName and type (XML or JS). Fragments can be instantiated with or without an ID, allowing for unique identification of controls within the fragment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/instantiating-fragments-in-declarative-views-234320f.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns:core=\"sap.ui.core\" controllerName=\"testdata.fragments.XMLViewController\" >\n    <!-- Runtime resource name of the fragment: my/useful/SimpleUiPart.fragment.xml -->\n    <core:Fragment               fragmentName=\"my.useful.SimpleUiPart\" type=\"XML\" />\n    <core:Fragment id=\"xmlInXml\" fragmentName=\"my.useful.SimpleUiPart\" type=\"XML\" />\n\n    <!-- Runtime resource name of the fragment: my/useful/UiPartX.js -->\n    <core:Fragment              fragmentName=\"module:my/useful/UiPartX\" />\n    <core:Fragment id=\"jsInXml\" fragmentName=\"module:my/useful/UiPartX\" />\n\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Resume Notes View XML (New) (XML)\nDESCRIPTION: This XML snippet defines the `ResumeNotes` view, which contains a text element bound to the `Notes` property. This view is lazy-loaded into the Notes tab of the Resume view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-implement-lazy-loading-cdab0a1.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\">\n\t<Text text=\"{Notes}\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Installing ui5-middleware-simpleproxy (Shell)\nDESCRIPTION: This command installs the ui5-middleware-simpleproxy package as a development dependency using npm. This middleware is used to avoid cross-origin resource sharing issues when accessing the remote OData service.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-25-remote-odata-service-typescript-b68d321.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i -D ui5-middleware-simpleproxy\n```\n\n----------------------------------------\n\nTITLE: Example EntitySet XML Definition\nDESCRIPTION: This XML snippet illustrates an EntitySet definition with a NavigationPropertyBinding. It shows an EntitySet named \"Customer\" and its NavigationPropertyBinding targeting another entity set. This example is provided to demonstrate the structure that the JSON representation mirrors, especially concerning path specifications.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v4-metadata-json-format-87aac89.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<EntitySet Name=\"Customer\" EntityType=\"...CustomerParameters\">\n<NavigationPropertyBinding Path=\"Set/Parameters\" Target=\"Customer\"/>\n```\n\n----------------------------------------\n\nTITLE: Get Element by ID, Fragment ID, OpenUI5\nDESCRIPTION: Retrieves a control instance using its ID when a fragment ID is given and the fragment is not part of a view. Requires `sap/ui/core/Fragment` module. Uses `Fragment.byId` to find the control within the fragment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-control-instances-by-their-id-8b32551.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmyControl = Fragment.byId(\"myFrag\", \"myControl\")\n```\n\n----------------------------------------\n\nTITLE: Component Extension in manifest.json - JavaScript\nDESCRIPTION: This code shows how to represent component extension within the `manifest.json` file. It specifies the ID of the extended component (`hcm.emp.myleaverequests`) and optionally the minimum version required. This allows OpenUI5 to properly load and initialize the extended component.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n    \"sap.ui5\": {\n        ...\n        \"extends\": {\n            \"component\": \"hcm.emp.myleaverequests\",\n            \"minVersion\": \"1.1.0\"\n        }\n    \n```\n\n----------------------------------------\n\nTITLE: Resume Hobbies View XML (New) (XML)\nDESCRIPTION: This XML snippet defines the `ResumeHobbies` view, which is a simple view containing a text element bound to the `Hobbies` property.  This view is lazy-loaded into the Hobbies tab of the Resume view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-implement-lazy-loading-cdab0a1.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\">\n\t<Text text=\"{Hobbies}\"/>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Handling Item Selection - JavaScript\nDESCRIPTION: This JavaScript snippet defines the `onItemSelected` function in the controller. This function is triggered when an item in the list is pressed. It retrieves the binding context of the selected item, determines the path to that item in the 'products' model, and then binds the 'productDetailsPanel' to this path using the `bindElement` method, establishing element binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-13-element-binding-6c7c5c2.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\t\t\"sap/m/library\",\n\t\t\t\"sap/ui/core/mvc/Controller\",\n\t\t\t\"sap/ui/model/type/Currency\"\n\t\t], (mobileLibrary, Controller, Currency) => {\n\t\t\t\"use strict\";\n\n\t\t\treturn Controller.extend(\"ui5.databinding.controller.App\", {\n\t\t\t\tformatMail(sFirstName, sLastName) {\n\t\t\t\t\tconst oBundle = this.getView().getModel(\"i18n\").getResourceBundle();\n\n\t\t\t\t\treturn mobileLibrary.URLHelper.normalizeEmail(\n\t\t\t\t\t\tsFirstName + \".\" + sLastName + \"@example.com\",\n\t\t\t\t\t\toBundle.getText(\"mailSubject\", [sFirstName]),\n\t\t\t\t\t\toBundle.getText(\"mailBody\"));\n\t\t\t\t},\n\n\t\t\t\tformatStockValue(fUnitPrice, iStockLevel, sCurrCode) {\n\t\t\t\t\tconst oCurrency = new Currency();\n\t\t\t\t\treturn oCurrency.formatValue([fUnitPrice * iStockLevel, sCurrCode], \"string\");\n\t\t\t\t},\n\n\t\t\t\tonItemSelected(oEvent) {\n\t\t\t\t\tconst oSelectedItem = oEvent.getSource();\n\t\t\t\t\tconst oContext = oSelectedItem.getBindingContext(\"products\");\n\t\t\t\t\tconst sPath = oContext.getPath();\n\t\t\t\t\tconst oProductDetailPanel = this.byId(\"productDetailsPanel\");\n\t\t\t\t\toProductDetailPanel.bindElement({ path: sPath, model: \"products\" });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n```\n\n----------------------------------------\n\nTITLE: Package JSON Configuration\nDESCRIPTION: This JSON snippet defines the package.json file, which manages project dependencies and scripts for the OpenUI5 application. It includes the application name, version, description, and a start script to run the application using UI5 Tooling.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-typescript-c20489e.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"ui5.walkthrough\",\n  \"version\": \"1.0.0\",\n  \"description\": \"UI5 TypeScript Walkthrough\",\n  \"scripts\": {\n      \"start\": \"ui5 serve -o index.html\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Controller Definition in OpenUI5 (Main.controller.js)\nDESCRIPTION: Defines the standard controller Main.controller.js with lifecycle hook onInit and two methods: doSomething and doSomeStandardAction. It extends from sap.ui.core.mvc.Controller and uses sap.ui.define for dependency injection. The controller is named samples.components.ext.sap.Main.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/using-component-configuration-c264d66.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/mvc/Controller\"], function(Controller) {\n    \"use strict\";\n    return Controller.extend(\"samples.components.ext.sap.Main\", {\n        onInit : function () {\n            console.log(\"samples.components.ext.sap.Main - onInit\");\n        },\n\n        doSomething: function() {\n            alert(\"this is an original standard action\");\n        },\n\n        doSomeStandardAction: function() {\n            alert(\"this is another original standard action\");\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting OPA5 App Load Timeout - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set the timeout value for loading an application using OPA5's `iStartMyAppInAFrame` function. The timeout is specified in seconds, allowing OPA5 to wait for the application to load before proceeding with tests. Adjust the timeout value based on the application's loading time to prevent premature test failures.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/frequently-asked-questions-02ef39f.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar opa5 = new Opa5();\nopa5.iStartMyAppInAFrame(\"path/to/your/app.html\", 30); // wait time in seconds\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Styles - style.css\nDESCRIPTION: This CSS code defines custom styles for an OpenUI5 application. It includes styles for button margins (with LTR/RTL considerations) and text formatting using custom CSS classes combined with a namespace class (`myAppDemoWT`) to avoid conflicts with other styles.  It also targets the `sapMBtn` class for increased specificity. Custom margin is added to the button and text is made bold.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-custom-css-and-theme-colors-723f4b2.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nhtml[dir=\"ltr\"] .myAppDemoWT .myCustomButton.sapMBtn {\n   margin-right: 0.125rem\n}\n\nhtml[dir=\"rtl\"] .myAppDemoWT .myCustomButton.sapMBtn {\n   margin-left: 0.125rem\n}\n\n.myAppDemoWT .myCustomText {\n   display: inline-block;\n   font-weight: bold;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Writing Device-Dependent CSS using CSS Cascades\nDESCRIPTION: This snippet shows how to apply CSS styles based on the device type using CSS cascades and the `sap-phone` CSS class, which is added to the html root tag. This approach allows specific styles to be applied based on the device detected.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/options-for-further-adaptation-04eb520.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n.sap-phone .myControl {\n      font-size: small;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding child controls to aggregations in XML views - XML\nDESCRIPTION: This XML snippet demonstrates how to add child controls to the 'content' aggregation of a Panel within an XML view. The 'content' aggregation is explicitly specified using the <content> tag, containing an Image and a Button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/aggregation-handling-in-xml-views-19eabf5.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View controllerName=\"module:sap/hcm/Address\" xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\">\n   <Panel>\n      <content>  <!-- this is the general way of adding children: use the aggregation name -->\n         <Image src=\"http://www.sap.com/global/ui/images/global/sap-logo.png\"/>\n         <Button text=\"Press Me\"/>\n      </content>\n   </Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Using Nested Control for Aggregation - XML\nDESCRIPTION: This XML snippet shows how to define a nested text control as the value for the 'noData' aggregation of a SmartTable. The aggregation tag <noData> is used to encapsulate the Text control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/aggregation-handling-in-xml-views-19eabf5.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<SmartTable ....>\n\t<noData>\n\t\t<Text text=\"No data available\" icon=\"sap-icon://...\" />\n\t</noData>\n\t...\n</SmartTable>\n```\n\n----------------------------------------\n\nTITLE: Extending OPA5 Configuration for Global Actions - JavaScript\nDESCRIPTION: Extends the global OPA5 configuration from within a test library to set global test statements. This makes actions available to the entire application test, such as setup and teardown procedures. The code snippet shows how to define a common action and expose it globally.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-libraries-for-opa5-a88a5e5.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Common = Opa5.extend(\"testLibrary.pageObjects.Common\", {\n    iSetupTheApp: function () {\n        // do some setup actions\n    }\n});\nOpa5.extendConfig({\n    actions: new Common()\n});\n```\n\n----------------------------------------\n\nTITLE: Manual hyphenation control with 3rd party resources - JavaScript\nDESCRIPTION: This code snippet demonstrates how to manually initialize the `sap.ui.core.hyphenation.Hyphenation` API to ensure that third-party hyphenation resources are loaded before the application renders. This prevents flickering between unhyphenated and hyphenated states of text controls during the initial render.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/hyphenation-for-text-controls-6322164.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nHyphenation.getInstance()\n    .initialize()\n    .then(function() {\n        // continue with application initialization/rendering\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating Messages Manually - JavaScript\nDESCRIPTION: This code snippet shows how to manually create and add validation messages to the `sap.ui.core.Messaging` module. It demonstrates the creation of a `sap.ui.core.message.Message` instance, specifying properties like message text, type, target (control property), and processor. The message is then added to the message manager using `Messaging.addMessages`. Requires modules `sap/ui/core/message/ControlMessageProcessor`, `sap/ui/core/Messaging`, `sap/m/Input`, `sap/ui/model/type/Float`, and `sap/ui/core/message/Message`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/validation-messages-a90d93d.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"ControlMessageProcessor\" required from module \"sap/ui/core/message/ControlMessageProcessor\"\n// \"Messaging\" required from module \"sap/ui/core/Messaging\"\n// \"Input\" required from module \"sap/m/Input\"\n// \"Float\" required from module \"sap/ui/model/type/Float\"\n// \"Message\" required from modle \"sap/ui/core/message/Message\"\nvar oMessageProcessor = new ControlMessageProcessor();\n\nMessaging.registerMessageProcessor(oMessageProcessor);\n\nvar oInput = new Input({\n    id: \"myInputId\",\n    value: { path: \"/Products(1)/Price\" , type: Float }\n});\n\nMessaging.addMessages(\n    new Message({\n        message: \"ZIP codes must have at least 23 digits\",\n        type: sap.ui.core.MessageType.Error,\n        target: \"myInputId/value\",\n        processor: oMessageProcessor\n     })\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Karma locally with npm\nDESCRIPTION: This command installs Karma locally in the current working directory. The `--save-dev` flag adds Karma as a development dependency to the `package.json` file. This means that Karma is only required during development and testing, not in the production environment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-automation-ae44824.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev karma\n```\n\n----------------------------------------\n\nTITLE: OData Payload for New Node Placement\nDESCRIPTION: When creating a new node, a similar payload is used to point to the new parent as part of the POST. For root nodes, a `null` value is sent.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-aggregation-and-recursive-hierarchy-7d91431.md#_snippet_9\n\nLANGUAGE: OData\nCODE:\n```\npayload like `\"EMPLOYEE_2_MANAGER@odata.bind\" : \"EMPLOYEES('9')\"`\n```\n\n----------------------------------------\n\nTITLE: Loading FlaggedType Test Module\nDESCRIPTION: This code snippet demonstrates how to include the FlaggedType unit test module into the main unit test suite.  By adding the module as a dependency, its tests will be executed automatically when the unit tests are run.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-testing-a-new-module-a5bb7a6.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"./model/models\",\n\t\"./model/formatter\",\n\t\"./model/FlaggedType\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Getting a Control by ID in OpenUI5 using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve a control within a view using the `byId()` method. `oButtonView1` is the view instance, and \"aButton\" is the ID of the button to be retrieved. This example illustrates how to access nested controls within reused views.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/support-for-unique-ids-91f28be.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n   var oButton = oButtonView1.byId(\"aButton\");\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to SemanticPage (OpenUI5 XML)\nDESCRIPTION: This XML snippet demonstrates how to add custom, non-semantic content to the `SemanticPage`, including a title heading, header content with object attributes and status, and the main content section utilizing a table. The code illustrates the flexibility of the `SemanticPage` in accommodating both semantic and application-specific UI elements.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/semantic-page-sap-f-47dc868.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   height=\"100%\"\n   xmlns:mvc=\"sap.ui.core.mvc\"\n   xmlns=\"sap.m\"\n   xmlns:semantic=\"sap.f.semantic\">\n\n   <semantic:SemanticPage>\n\n       ...\n<!-- Title Heading-->\n<semantic:titleHeading>\n   <Title text=\"{/title}\" />\n</semantic:titleHeading>\n\n\n<!-- Header Content -->\n<semantic:headerContent>\n      <!-- custom header Content goes here -->\n<FlexBox\n      alignItems=\"Start\"\n      justifyContent=\"SpaceBetween\">\n   <items>\n      <Panel backgroundDesign=\"Transparent\">\n         <content>\n            <ObjectAttribute title=\"Functional Area\" text=\"{/objectDescription/category}\"/>\n            <ObjectAttribute title=\"Cost Center\" text=\"{/objectDescription/center}\"/>\n            <ObjectAttribute title=\"Email\" text=\"{/objectDescription/email}\"/>\n         </content>\n      </Panel>\n      <ObjectStatus text=\"In Stock\" state=\"{/objectDescription/status}\" />\n   </items>\n</FlexBox>\n\n</semantic:headerContent>\n\n\n<!-- Content -->\n<semantic:content>\n    <!-- Custom page-body content goes here -->\n   <Table\n      id=\"idProductsTable\"\n      inset=\"false\"\n      items=\"{path:'/ProductCollection'}\">\n     ...\n   </Table>\n</semantic:content>\n\n\n   </semantic:SemanticPage>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Initializing JSON Model for Data Export (OpenUI5)\nDESCRIPTION: Creates a JSON model with sample data to be used for data export in OpenUI5. The model contains an array of objects, each representing a person with 'firstname' and 'lastname' properties. This model serves as the data source for the export process.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-data-binding-for-data-export-f1ee7a8.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// \"JSONModel\" required from module \"sap/ui/model/json/JSONModel\"\nvar oModel = JSONModel([\n    {\n        firstname: \"Al\",\n        lastname: \"Dente\"\n    },\n    {\n        firstname: \"Andy\",\n        lastname: \"Friese\"\n    },\n    {\n        firstname: \"Anita\",\n        lastname: \"Mann\"\n    },\n    {\n        firstname: \"Doris\",\n        lastname: \"Schutt\"\n    },\n    {\n        firstname: \"Kenya\",\n        lastname: \"Dewit\"\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing SemanticPage in XML View (OpenUI5)\nDESCRIPTION: This XML snippet demonstrates how to initialize a `sap.f.semantic.SemanticPage` within an OpenUI5 XML view. It defines the necessary XML namespaces and creates a basic semantic page structure. The `controllerName` attribute specifies the associated controller for handling user interactions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/semantic-page-sap-f-47dc868.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns:semantic=\"sap.f.semantic\"\n    controllerName=\"mycompany.myController\"\n    height=\"100%\">\n    <semantic:SemanticPage id=\"mySemanticPage\">\n        <!-- Semantic page content specified here -->\n    </semantic:SemanticPage >\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Replacing synchronous sap.ui.component with asynchronous Component.getComponentById - JavaScript\nDESCRIPTION: This snippet demonstrates replacing the synchronous `sap.ui.component(id)` call with the asynchronous `Component.getComponentById(id)` method. It uses `sap.ui.require` to ensure the `sap/ui/core/Component` module is loaded before calling `getComponentById`. This asynchronous approach is important for adhering to best practices and preparing applications for the removal of synchronous requests.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-factories-replacement-491bd9c.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oComponentInstance = sap.ui.component(\"my-comp-id\");\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Component\"], (Component) => {\n    var oComponentInstance = Component.getComponentById(\"my-comp-id\");\n});\n```\n\n----------------------------------------\n\nTITLE: List Control in XML View with List Binding\nDESCRIPTION: This XML view defines a `List` control with `items` aggregation bound to the `companies` property. The `StandardListItem` displays the company name and city. Requires context to resolve {companies}.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\">\n      <List id=\"companyList\" items=\"{companies}\">\n            <StandardListItem title=\"{name}\" description=\"{city}\" />\n      </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Registering External URLs with AppCacheBuster\nDESCRIPTION: This code snippet shows how to register additional locations with the Application Cache Buster during runtime using the `sap.ui.core.AppCacheBuster.register()` method.  This is useful when not all applications are specified in the bootstrap configuration. The method takes a string representing the URL of the component as input.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/application-cache-buster-enhanced-concept-94e0c33.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.core.AppCacheBuster.register(\"/sap/bc/my/other/component\");\n```\n\n----------------------------------------\n\nTITLE: Formatter for Highlighting Table Row - OpenUI5 JavaScript\nDESCRIPTION: This JavaScript code defines a formatter function that dynamically sets the `highlight` property of a table row based on the severity of messages associated with the row's data context. It retrieves messages using `oRowContext.getMessages()` and returns a `MessageType` based on the first message's type. The `parts` array ensures the formatter is re-evaluated when the message model changes or when scrolling occurs.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/server-messages-in-the-odata-v4-model-fbe1cb5.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// \"MessageType\" required from module \"sap/ui/core/message/MessageType\"\n\nthis.byId(\"row\").bindProperty(\"highlight\", {\n    formatter: function () {\n        var aMessages,\n            //formatter MUST be defined in a way that this is the control!\n            oRowContext = this.getBindingContext();\n \n        if (oRowContext) { // formatter is called with oRowContext null initially\n            aMessages = oRowContext.getMessages();\n            return aMessages.length ? aMessages[0].type : MessageType.None;\n        }\n    },\n    parts: [\n        'messageModel>/',\n        { // ensure formatter is called on scrolling\n            mode: 'OneTime',\n            path: '',\n            targetType: 'any'\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Roots via Global Config - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure theme roots using the global configuration object `globalThis[\"sap-ui-config\"]`. It shows how to define theme locations for specific libraries and for all libraries.  It assumes an additional-config.js file is created and loaded.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/setting-themes-e9fc648.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n // Be mindful of already existing configuration options\n            globalThis[\"sap-ui-config\"] ??= {};\n            globalThis[\"sap-ui-config\"] = Object.assign(globalThis[\"sap-ui-config\"][\"theme-roots\"] || {}, {\n                \"my_preconfigured_theme\" : \"http://preconfig.com/ui5-themes\",\n                \"my_second_preconfigured_theme\" : {\n                    \"\" : \"http://preconfig.com/ui5-themes\",\n                    \"sap.ui.core\" : \"http://core.com/ui5\"\n                }\n            });\n```\n\n----------------------------------------\n\nTITLE: Reading Parameter Values using Parameter Context (OData V4)\nDESCRIPTION: This JavaScript code shows how to access parameter values using the `getParameterContext` method. In this example, the code reads the `TeamID` parameter and sets the `Budget` parameter based on the `TeamID` value. The `oParameterContext` only exist if the operation binding is resolved.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nadaptBudgetToTeam : function (){\n    var oDialog = this.oView.byId(\"operation2\"); // the second dialog in the paragraph before\n        oParameterContext = oDialog.getObjectBinding().getParameterContext();\n \n \n    if (oParameterContext.getProperty(\"TeamID\") === \"STARTUP\") {\n        oParameterContext.setProperty(\"Budget\", 555.55);\n    else {\n        oParameterContext.setProperty(\"Budget\", 123.45);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Float Data Type with Format Options in XML View\nDESCRIPTION: This XML snippet demonstrates the usage of the Float data type with format options in an OpenUI5 XML view. The `minFractionDigits` and `maxFractionDigits` format options are set to 2 to specify the number of fraction digits. The 'core:require' attribute ensures that the Float type is available.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    core:require=\"{Float: 'sap/ui/model/type/Float'}\">\n    <Input\n        value=\"{ \n            path: '/company/revenue', \n            type: 'Float',\n            formatOptions: {\n                minFractionDigits: 2,\n                maxFractionDigits: 2\n            }\n    \"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Registering OPA5 Step Definitions in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to register OPA5-based step definitions within the `init` method of a Gherkin step definition file. It registers steps for starting the application in an iframe and checking for the existence of a button with specific text. This uses `oOpa5.iStartMyAppInAFrame` and `oOpa5.waitFor` for the steps.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/basic-example-how-to-use-gherkin-4b0c519.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oOpa5 = new Opa5();\n\nthis.register(/^I have started the app$/i, function() {\n  oOpa5.iStartMyAppInAFrame(\"Website.html\");\n});\n\nthis.register(/^I can see the life saving button$/i, function() {\n  oOpa5.waitFor({\n    id: \"life-saving-button\",\n    success: function(oButton) {\n      Opa5.assert.strictEqual(oButton.getText(), \"Save a Lemming\",\n      \"Verified that we can see the life saving button\");\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Standard OpenUI5 View Definition\nDESCRIPTION: This XML snippet defines a standard OpenUI5 view named 'Sub1' with a simple TextView. The view is part of the standard application and serves as a placeholder to be replaced by a custom view. It uses the sap.m library for the TextView and sap.ui.core.mvc for the view definition.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-replacement-98861cf.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\">\n    <TextView text=\"SAP View 'Sub1' - this one should have been replaced by the customer View\"></TextView>  \n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining Product Data in Products.json (JSON)\nDESCRIPTION: This snippet defines the structure of the product data in JSON format. It contains an array of `Products`, each with properties like `ProductID`, `ProductName`, `UnitPrice`, etc. This data will be used to populate the list control in the UI.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-12-aggregation-binding-using-templates-97830de.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"Products\": [ {\n         \"ProductID\": 1,\n         \"ProductName\": \"Chai\",\n         \"SupplierID\": 1,\n         \"CategoryID\": 1,\n         \"QuantityPerUnit\": \"10 boxes x 20 bags\",\n         \"UnitPrice\": \"18.0000\",\n         \"UnitsInStock\": 39,\n         \"UnitsOnOrder\": 0,\n         \"ReorderLevel\": 10,\n         \"Discontinued\": false\n        }, {\n         \"ProductID\": 2,\n         \"ProductName\": \"Chang\",\n         \"SupplierID\": 1,\n         \"CategoryID\": 1,\n         \"QuantityPerUnit\": \"24 - 12 oz bottles\",\n         \"UnitPrice\": \"19.0000\",\n         \"UnitsInStock\": 17,\n         \"UnitsOnOrder\": 40,\n         \"ReorderLevel\": 25,\n         \"Discontinued\": true\n        }, {\n         \"ProductID\": 3,\n         \"ProductName\": \"Aniseed Syrup\",\n         \"SupplierID\": 1,\n         \"CategoryID\": 2,\n         \"QuantityPerUnit\": \"12 - 550 ml bottles\",\n         \"UnitPrice\": \"10.0000\",\n         \"UnitsInStock\": 0,\n         \"UnitsOnOrder\": 70,\n         \"ReorderLevel\": 25,\n         \"Discontinued\": false\n        }, {\n         \"ProductID\": 4,\n         \"ProductName\": \"Chef Anton's Cajun Seasoning\",\n         \"SupplierID\": 2,\n         \"CategoryID\": 2,\n         \"QuantityPerUnit\": \"48 - 6 oz jars\",\n         \"UnitPrice\": \"22.0000\",\n         \"UnitsInStock\": 53,\n         \"UnitsOnOrder\": 0,\n         \"ReorderLevel\": 0,\n         \"Discontinued\": false\n        }, {\n         \"ProductID\": 5,\n         \"ProductName\": \"Chef Anton's Gumbo Mix\",\n         \"SupplierID\": 2,\n         \"CategoryID\": 2,\n         \"QuantityPerUnit\": \"36 boxes\",\n         \"UnitPrice\": \"21.3500\",\n         \"UnitsInStock\": 0,\n         \"UnitsOnOrder\": 0,\n         \"ReorderLevel\": 0,\n         \"Discontinued\": true\n        }]\n      }\n```\n\n----------------------------------------\n\nTITLE: Updating i18n properties file\nDESCRIPTION: This i18n properties file updates the application with new texts related to the Employee Overview. It includes entries for the page title, label and for column headers in the employee table. This enables the application to support multiple languages.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-assign-multiple-targets-b01840e.md#_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n...\nEmployeeOverview=Employee Overview\nShowEmployeeOverview=Show Employee Overview\n\nEmployeeOverviewTop=Employee Overview Top\n\nRegion=Region\nEmployeeID=Employee ID\nPhone=Phone\nEmployees=Employees\n\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Suite Configuration (JavaScript)\nDESCRIPTION: This snippet configures the QUnit test suite to include the integration tests defined in `integration/opaTests.qunit.js`. It adds a new entry to the `tests` object, specifying the title and path to the integration tests. The path omits the `.qunit.js` extension.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-28-integration-test-with-opa-9bf4dce.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define(() => {\n\t    \"use strict\";\n\t    return {\n\t\t      // ...\n\t\t      tests: {\n\t\t\t        \"unit/unitTests\": {\n\t\t\t\t           title: \"UI5 Walkthrough - Unit Tests\"\n\t\t\t        },\n\t\t\t        \"integration/opaTests\": {\n\t\t\t\t           title: \"UI5 Walkthrough - Integration Tests\"\n\t\t\t        }\n\t\t     }\n\t   };\n});\n```\n\n----------------------------------------\n\nTITLE: Simulating a Press Event on a Button with OPA5\nDESCRIPTION: This code snippet demonstrates how to simulate a `press` event on a button using OPA5's `waitFor` function and the `Press` action. The action is triggered on the button identified by its `id`.  It makes sure that the UI is in a state that allows the action to be executed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/simulating-user-interactions-on-controls-8615a0b.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\noOpa.waitFor({\n    id: \"myButton\",\n    actions: new Press()\n});\n```\n\n----------------------------------------\n\nTITLE: EmployeeOverview View - XML\nDESCRIPTION: This XML snippet defines the `EmployeeOverview` view, which serves as the parent container for the top and content sections. It includes a `Page` control with a navigation button and a content aggregation that will be populated by the router with the `EmployeeOverviewTop` and `EmployeeOverviewContent` views.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-assign-multiple-targets-b01840e.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverview\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page id=\"EmployeeOverviewParent\" title=\"{i18n>EmployeeOverview}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\"\n\t\tclass=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<!-- inserted by routing -->\n\t\t</content>\n\t</Page>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OPA5 Control Search Timeout - JavaScript\nDESCRIPTION: This snippet configures the default timeout for OPA5 control searches and the QUnit test timeout to prevent early termination. `sap.ui.test.Opa.config.timeout` sets the time OPA5 waits for a control to become available. `QUnit.config.testTimeout` sets the overall QUnit test timeout, ensuring it's longer than the OPA5 timeout.  These settings are crucial for reliable control finding during OPA5 tests.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/frequently-asked-questions-02ef39f.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.test.Opa.config.timeout = 20; // wait time in seconds\nQUnit.config.testTimeout = 20000; // wait time in milliseconds\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic QUnit Test Module in OpenUI5\nDESCRIPTION: This code snippet shows a basic QUnit test template for OpenUI5. It defines a module and a simple test case with assertions.  It requires the sap.ui.define function for module definition and the QUnit framework for testing.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-qunit-test-7080029.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*global QUnit */\nsap.ui.define([], function() {\n  \"use strict\";\n\n  QUnit.module(\"Module A\"); \n\n  QUnit.test(\"Basic test example\", function(assert) {\n    assert.ok(true, \"this test is fine\"); \n    var value = \"hello1\"; \n    assert.equal(value, \"hello1\", \"We expect value to be 'hello1'\"); \n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Time Value as a String to TimePicker - XML\nDESCRIPTION: This example demonstrates how to bind a time value that is stored as a string in the backend to a TimePicker control. The `valueFormat` property specifies the format of the time value in the backend. No conversion is done because the whole coding is string-based (the data field is a string, and the EDM type is an `Edm.String`).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/date-and-time-related-controls-data-binding-e1ddc69.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<TimePicker value=\"{EntryTimeString}\" valueFormat=\"HH:mm:ss\"/>\n```\n\n----------------------------------------\n\nTITLE: JSON Data for List-Detail Binding\nDESCRIPTION: This JSON data represents a list of companies, each with properties such as name, city, state, county, and revenue. It is used to demonstrate element binding in list-detail scenarios.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"companies\" : [{\n        \"name\": \"Acme Inc.\",\n        \"city\": \"Belmont\",\n        \"state\": \"NH\",\n        \"county\": \"Belknap\",\n        \"revenue\": 123214125.34\n    }, {\n        \"name\": \"Beam Hdg.\",\n        \"city\": \"Hancock\",\n        \"state\": \"NH\",\n        \"county\": \"Belknap\",\n        \"revenue\": 3235235235.23\n    }, {\n        \"name\": \"Carot Ltd.\",\n        \"city\": \"Cheshire\",\n        \"state\": \"NH\",\n        \"county\": \"Sullivan\",\n        \"revenue\": \"Not Disclosed\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Pressing 'More Data' Button Action\nDESCRIPTION: The `iPressOnMoreData` action simulates pressing the 'More Data' button on the table. It uses `Opa5.waitFor` to ensure the table is available and interactable before triggering the `Press` action. The `sTableId` and `sViewName` variables define the target table. If the table is not found or interactable, an error message is displayed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-a-first-opa-test-1b47457.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\niPressOnMoreData: function () {\n\t\t\t\t\t// Press action hits the \"more\" trigger on a table\n\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\tid: sTableId,\n\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\tactions: new Press(),\n\t\t\t\t\t\terrorMessage: \"The table does not have a trigger.\"\n\t\t\t\t\t});\n\t\t\t\t}\n```\n\n----------------------------------------\n\nTITLE: Starting a UIComponent in OPA5\nDESCRIPTION: This JavaScript snippet shows how to start a UIComponent within an OPA5 test using `iStartMyUIComponent`.  It configures the component and optionally sets a hash value in the URL, allowing for testing specific component targets.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/getting-started-with-opa5-22f175e.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Opa5\" required from \"sap/ui/test/Opa5\"\nnew Opa5().iStartMyUIComponent({\n    componentConfig: {\n        name: \"samples.components.button\"\n    }\n});\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Opa5\" required from \"sap/ui/test/Opa5\"\nnew Opa5().iStartMyUIComponent({\n    componentConfig: {\n        name: \"samples.components.button\"\n    } ,\n    hash: \"newHashValue\"\n});\n```\n\n----------------------------------------\n\nTITLE: Using ToggleButton as Custom Anchor Bar Button - SAPUI5\nDESCRIPTION: This XML snippet provides a complete example of customizing anchor bar buttons using a `sap.m.ToggleButton` for one section and a standard `sap.m.Button` for another section within an ObjectPageLayout. It illustrates how different controls can be used for anchor bar navigation. Requires sap.m library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/anchor-bar-370b679.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<ObjectPageLayout id=\"ObjectPageLayout\">       \n    <headerTitle>\n        <ObjectPageHeader id=\"headerExpandedGrid\" />\n    </headerTitle>\n    <sections>\n        <ObjectPageSection id=\"section1\" title=\"Employee Info\" >\n            <customAnchorBarButton>\n                <!-- this sap.m.ToggleButton will be used in the anchor bar for navigating to that section -->\n                <m:ToggleButton text=\"Employee Info\" />\n            </customAnchorBarButton>\n        </ObjectPageSection>\n\n        <ObjectPageSection  id=\"section2\" title=\"Personal Info\">\n           <customAnchorBarButton>\n                <!-- this sap.m.Button will be used in the anchor bar for navigating to that section -->\n               <m:Button type=\"Accept\" text=\"Personal Info\" />\n           </customAnchorBarButton>\n        </ObjectPageSection>\n\n    </sections>\n</ObjectPageLayout>\n```\n\n----------------------------------------\n\nTITLE: Initializing an OpenUI5 Library\nDESCRIPTION: This code shows how to initialize an OpenUI5 library using the `sap/ui/core/Lib.init` method within the `library.js` file.  The object passed to `Library.init` defines the library's metadata, including API version, name, version, design-time information, types, interfaces, controls, elements, and extensions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/Lib\"\n], (Library) => {\n    \"use strict\";\n    const thisLib = Library.init(({{\n        apiVersion: 2,\n        name: \"my.lib\",\n        version: \"${version}\",\n        designtime: \"my/lib/designtime/library.designtime\",\n        types: [\n            \"my.lib.MyType\"\n        ],\n        interfaces: [\n            \"my.lib.MyInterface\"\n        ],\n        controls: [\n            \"my.lib.MyType\"\n        ],\n        elements: [\n            \"my.lib.MyElement\"\n        ],\n        extensions: {}\n    }});\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Table Item Count Assertion\nDESCRIPTION: The `theTableShouldHaveAllEntries` assertion verifies that the table contains the expected number of items (23 in this case). It uses `Opa5.waitFor` and the `AggregationLengthEquals` matcher to check the `items` aggregation of the table. The `success` function confirms the assertion if the length matches, otherwise, an error message is displayed. This relies on a hardcoded value.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-a-first-opa-test-1b47457.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntheTableShouldHaveAllEntries: function () {\n\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\tid: sTableId,\n\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\tmatchers: new AggregationLengthEquals({\n\t\t\t\t\t\t\tname: \"items\",\n\t\t\t\t\t\t\tlength: 23\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\tOpa5.assert.ok(true, \"The table has 23 items\");\n\t\t\t\t\t\t},\n\t\t\t\t\t\terrorMessage: \"The table does not contain all items.\"\n\t\t\t\t\t});\n\t\t\t\t}\n```\n\n----------------------------------------\n\nTITLE: Template Repeat with Start Index and Length\nDESCRIPTION: This XML snippet illustrates how to use the `startIndex` and `length` attributes within the `<template:repeat>` instruction to control the iteration range of the list. `startIndex` specifies the starting index, and `length` specifies the maximum number of items to iterate.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/repeat-512e545.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<template:repeat list=\"{path:'entityType>com.sap.vocabularies.UI.v1.Identification',startIndex:1,length:3}\" var=\"field\">\n  <!-- ... -->\n</template:repeat>\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping OpenUI5 with Compatibility Version\nDESCRIPTION: This code snippet demonstrates the basic bootstrapping of the OpenUI5 runtime using a script tag. It sets the `data-sap-ui-compat-version` attribute to \"edge\" to ensure the application runs with the latest feature set.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-of-the-openui5-runtime-91f08de.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n            src=\"resources/sap-ui-core.js\"\n            data-sap-ui-compat-version=\"edge\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Table Columns\nDESCRIPTION: This XML snippet defines the columns for the worklist table, including columns for product name, supplier, price, units on order, and units in stock.  It specifies column properties such as `demandPopin`, `minScreenWidth`, and `hAlign` to control responsiveness and alignment. It uses `i18n` keys for translatable column titles.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-extending-the-worklist-table-84100bc.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<columns>\n\t\t\t<Column id=\"nameColumn\">\n\t\t\t\t<Text\n\t\t\t\t\tid=\"nameColumnTitle\"\n\t\t\t\t\ttext=\"{i18n>TableNameColumnTitle}\"/>\n\t\t\t</Column>\n\t\t\t<Column\n\t\t\t\tid=\"supplierNameColumn\"\n\t\t\t\tdemandPopin=\"false\"\n\t\t\t\tminScreenWidth=\"Tablet\">\n\t\t\t\t<Text text=\"{i18n>TableSupplierColumnTitle}\"/>\n\t\t\t</Column>\n\t\t\t<Column\n\t\t\t\tid=\"unitPriceColumn\"\n\t\t\t\thAlign=\"End\"\n\t\t\t\tdemandPopin=\"true\"\n\t\t\t\tminScreenWidth=\"Tablet\">\n\t\t\t\t<Text text=\"{i18n>TablePriceColumnTitle}\"/>\n\t\t\t</Column>\n\t\t\t<Column\n\t\t\t\tid=\"unitsOnOrderColumn\"\n\t\t\t\tdemandPopin=\"true\"\n\t\t\t\tminScreenWidth=\"Tablet\"\n\t\t\t\thAlign=\"End\">\n\t\t\t\t<Text text=\"{i18n>TableUnitsOrderedColumnTitle}\"/>\n\t\t\t</Column>\n\t\t\t<Column\n\t\t\t\tid=\"unitsInStockColumn\"\n\t\t\t\thAlign=\"End\">\n\t\t\t\t<Text text=\"{i18n>TableUnitsInStockColumnTitle}\"/>\n\t\t\t</Column>\n\t\t</columns>\n```\n\n----------------------------------------\n\nTITLE: Defining Translatable Texts in i18n.properties\nDESCRIPTION: This snippet defines the translatable texts for the application in the `i18n.properties` file. It includes the text for the 'Say Hello' button and the greeting message. The greeting message includes a placeholder `{0}` for dynamic content.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-translatable-texts-typescript-4dcf52e.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\n```\n\n----------------------------------------\n\nTITLE: Configuring OPA5 with Support Assistant Extension - JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure OPA5 to include the Support Assistant OPA extension. It shows how to add the extension path and application parameters to the OPA5 configuration, enabling the Support Assistant in silent mode during OPA tests. This allows the tests to check for issues using the Support Assistant rules without displaying the UI.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/integrating-the-rules-in-opa-tests-cfabbd4.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/test/Opa5\",\n    ...\n], function(Opa5, ...) {\n    ...\n\n    Opa5.extendConfig({\n        ...\n        extensions: [\"sap/ui/core/support/RuleEngineOpaExtension\"],\n        appParams: {\n            \"sap-ui-support\": \"true,silent\"\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Default Content for Extension Point in JS View\nDESCRIPTION: This JavaScript snippet demonstrates how to define default content for an extension point in a JS view.  A callback function (`fnCreateDefaultContent`) is passed to `sap.ui.extensionpoint`. This function returns the default content (control or array of controls), and is only executed if no customizing is configured.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-extension-403c050.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.extensionpoint(this, \"extension4\", fnCreateDefaultContent); // this extension point has a callback function creating default content\n\n```\n\n----------------------------------------\n\nTITLE: Loading a JS Fragment with an ID in OpenUI5\nDESCRIPTION: This code shows how to load a JavaScript fragment and assign a specific ID to it.  The `loadFragment` method is called with the fragment's name (\"module:my/useful/UiPartX\") and the desired ID (\"someId\").  This allows for referencing the fragment's controls using the specified ID.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/programmatically-instantiating-js-fragments-3cff5d0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst oMyButton = await this.loadFragment({\n\tname: \"module:my/useful/UiPartX\",\n\tid: \"someId\"\n});\n// oMyButton is now usable\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic XML View\nDESCRIPTION: This snippet shows the basic structure of an XML view in OpenUI5. It defines the root <mvc:View> element and declares the sap.m and sap.ui.core.mvc namespaces.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-xml-views-1409791.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Modify List Controller for Routing - JavaScript\nDESCRIPTION: This JavaScript code modifies the List.controller.js to use the router for navigation when an item is pressed. It replaces manual FlexibleColumnLayout manipulation with the router's navTo method to change the layout.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-routing-7f65131.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/MessageBox\",\n\t\"sap/f/library\"\n], function (Controller, Filter, FilterOperator, Sorter, MessageBox, fioriLibrary) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.List\", {\n\t\tonInit: function () {\n\t\t\tthis.oView = this.getView();\n\t\t\tthis._bDescendingSort = false;\n\t\t\tthis.oProductsTable = this.oView.byId(\"productsTable\");\n\t\t\tthis.oRouter = this.getOwnerComponent().getRouter();\n\t\t},\n\n\t\tonSearch: function (oEvent) {\n\t\t\tvar oTableSearchState = [],\n\t\t\t\tsQuery = oEvent.getParameter(\"query\");\n\n\t\t\tif (sQuery && sQuery.length > 0) {\n\t\t\t\toTableSearchState = [new Filter(\"Name\", FilterOperator.Contains, sQuery)];\n\t\t\t}\n\n\t\t\tthis.oProductsTable.getBinding(\"items\").filter(oTableSearchState, \"Application\");\n\t\t},\n\n\t\tonAdd: function () {\n\t\t\tMessageBox.information(\"This functionality is not ready yet.\", {title: \"Aw, Snap!\"});\n\t\t},\n\n\t\tonSort: function () {\n\t\t\tthis._bDescendingSort = !this._bDescendingSort;\n\t\t\tvar oBinding = this.oProductsTable.getBinding(\"items\"),\n\t\t\toSorter = new Sorter(\"Name\", this._bDescendingSort);\n\n\t\t\toBinding.sort(oSorter);\n\t\t},\n\n\t\tonListItemPress: function (oEvent) {\n\t\t\tvar productPath = oEvent.getSource().getBindingContext(\"products\").getPath(),\n\t\t\t\tproduct = productPath.split(\"/\").slice(-1).pop();\n\n\t\t\tthis.oRouter.navTo(\"detail\", {layout: fioriLibrary.LayoutType.TwoColumnsMidExpanded, product: product});\n\t\t}\n\t});\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using CustomListItem in OpenUI5 List\nDESCRIPTION: This code snippet showcases how to use the `CustomListItem` control within an OpenUI5 `List` to create custom list item content.  The `CustomListItem` inherits from `ListItemBase` and provides the `content` aggregation, allowing you to add custom UI elements like labels and buttons.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/lists-1da1581.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n    \n    <CustomListItem type=\"Inactive\">\n        <Label text=\"A first custom list item ...\"  class=\"content\"/>\n        <Button text=\"Press me!\" class=\"content\"/>\n    </CustomListItem>\n    \n    \n```\n\n----------------------------------------\n\nTITLE: Global Custom Currencies - OpenUI5 JavaScript\nDESCRIPTION: This code illustrates how to add custom currencies globally in the core configuration. These custom currencies are available in all currency formatter instances for the current locale, unless the instance also defines a set of custom currencies. The code also shows how to overwrite CLDR currencies. 'Formatting' and 'NumberFormat' must be required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-formatting-e978728.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Formatting\" required from module \"sap/base/i18n/Formatting\"\n// \"NumberFormat\" required from module \"sap/ui/core/format/NumberFormat\"\nFormatting.addCustomCurrencies({\n\t     \"MyCoin\": {\n            \"symbol\": \"MC\"\n        },\n        \"Bitcoin\": {\n            \"digits\": 3\n        },\n        \"USD\": { // overwrite of an existing CLDR currency\n            \"digits\": 5\n        }\n});\n\n\nvar oCurrencyFormat = NumberFormat.getCurrencyInstance();\n\n// formatting a custom currency\noCurrencyFormat.format(12, \"MyCoin\"); // 12,00 MyCoin\n\n\n// formatting an existing CLDR currency\noCurrencyFormat.format(5, \"EUR\"); // 5,00 EUR\n\n\n// formatting an existing CLDR currency\noCurrencyFormat.format(12, \"USD\"); // 12,00000 USD // Default decimal setting would have been two\n```\n\n----------------------------------------\n\nTITLE: Modifying manifest.json: Adding sap.m library dependency\nDESCRIPTION: This code snippet modifies the `manifest.json` file to add the `sap.m` library as a dependency.  This ensures that the application has access to the controls and functionalities provided by the `sap.m` library. The modified manifest is used for declaring the application metadata and dependencies.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-using-dynamic-page-for-the-list-view-0830bce.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"_version\": \"1.38.0\",\n\t\"sap.app\": {\n\t\t\"id\": \"sap.ui.demo.fcl\",\n\t\t\"type\": \"application\",\n\t\t\"applicationVersion\": {\n\t\t\t\"version\": \"1.0.0\"\n\t\t}\n\t},\n\t\"sap.ui5\": {\n\t\t\"rootView\": {\n\t\t\t\"viewName\": \"sap.ui.demo.fcl.view.App\",\n\t\t\t\"type\": \"XML\",\n\t\t\t\"async\": true,\n\t\t\t\"id\": \"fcl\"\n\t\t},\n\t\t\"dependencies\": {\n\t\t\t\"minUI5Version\": \"1.98.0\",\n\t\t\t\"libs\": {\n\t\t\t\t\"sap.f\": {},\n\t\t\t\t\"sap.m\": {},\n\t\t\t\t\"sap.ui.core\": {}\n\t\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Module Loading with template:require in XML\nDESCRIPTION: This XML snippet demonstrates how to use the `template:require` attribute at the root element of an XML template view to asynchronously load modules and assign aliases.  The aliases are then used in formatter and expression bindings to access the modules. It requires `sap.ui.core.sample.ViewTemplate.scenario.Helper` and `sap.ui.model.odata.AnnotationHelper`. The `template:alias` tag creates local aliases. The aliases can then be used within the template, specifically in formatter and expression bindings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/require-263f6e5.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n  controllerName=\"sap.ui.core.sample.ViewTemplate.scenario.Detail\"\n  template:require=\"{Helper: 'sap/ui/core/sample/ViewTemplate/scenario/Helper',\n    AnnotationHelper: 'sap/ui/model/odata/AnnotationHelper'}\"\n  xmlns:mvc=\"sap.ui.core.mvc\"\n  xmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\">\n<template:alias name=\"bar\" value=\"Helper.bar\">\n<Text text=\"{formatter: 'bar', path: '/foo'}\"/>\n<Text text=\"{= bar(${/foo}) }\"/>\n```\n\n----------------------------------------\n\nTITLE: EmployeeOverviewTop View - XML\nDESCRIPTION: This XML snippet defines the `EmployeeOverviewTop` view, which displays a static title for illustration. No controller is required for this view.  It's placed inside the content aggregation of the EmployeeOverview Page.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-assign-multiple-targets-b01840e.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\" class=\"sapUiMediumMarginBottom\">\n\t<Title text=\"{i18n>EmployeeOverviewTop}\"/>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Views for Block Modes\nDESCRIPTION: This JavaScript code shows how to define different views for various layout modes within a `BlockBase` extension.  The `views` section within the metadata allows specifying different views for modes like `Collapsed` and `Expanded`, including their names and types (e.g., XML).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-blocks-4527729.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsap.uxap.BlockBase.extend(\"<BlockName>\", {\n                metadata: {\n                    views: {\n                        Collapsed: {\n                            viewName: \"<collapsedViewName>\",\n                            type: \"XML\"\n                        },\n                        Expanded: {\n                            viewName: \"<expendedViewName>\",\n                            type: \"XML\"\n                        }\n                    }\n                 }\n             });\n```\n\n----------------------------------------\n\nTITLE: Overriding Property Setter to Suppress Rerendering - JavaScript\nDESCRIPTION: This code snippet demonstrates how to override a generated property setter method in an OpenUI5 control to suppress default rerendering when the property value changes. By calling `this.setProperty` with the `true` argument, the rerendering is prevented, and the control developer is responsible for manually updating the UI.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/writing-a-control-faq-3f472df.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.m.Button.prototype.setText = function(sText) {\n\tthis.setProperty(\"text\", sText);\n};\n```\n\n----------------------------------------\n\nTITLE: Panel with Toolbar and Title using aria-labelledby - OpenUI5 XML View\nDESCRIPTION: This code snippet shows how to use a `Title` control within a `Toolbar` inside a `Panel` to provide screen reader support. The text within the title will be read out by screen readers to describe the content of the panel. The example creates a panel with a header toolbar containing a title, a spacer, and two buttons, along with content inside the panel.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/screen-reader-support-33fae34.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n      xmlns:mvc=\"sap.ui.core.mvc\"\n      xmlns=\"sap.m\">\n   <Panel expandable=\"true\">\n      <headerToolbar>\n         <Toolbar height=\"3rem\">\n            <Title text=\"Header\"/>\n\n            <ToolbarSpacer/>\n            <Button icon=\"sap-icon://settings\"/>\n            <Button icon=\"sap-icon://drop-down-list\"/>\n         </Toolbar>\n      </headerToolbar>\n      <content>\n         <Text text=\"Lorem ipsum\"/>\n      </content>\n   </Panel>\n</mvc:View>\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Faking Timers - JavaScript\nDESCRIPTION: This example showcases the use of Sinon.JS fake timers to control the execution of time-dependent code. The code uses sinon.useFakeTimers() to replace the global timer functions with fake versions. It then sets a timeout for a function that asserts a condition and advances the fake clock by 800 milliseconds using oClock.tick(800) to trigger the timeout. Finally, it restores the original timers using oClock.restore().\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sinon-js-spies-stubs-mocks-faked-timers-and-xhr-457eaad.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/*global QUnit sinon */\nsap.ui.define([], function() {\n \t\"use strict\";\n\n \n \tQUnit.test(\"Basic\", 1, function(assert) {\n \t\tvar oClock = sinon.useFakeTimers();\n \t\tsetTimeout(function() {\n \t\t\tassert.ok(true, \"Called without need of async test\");\n \t\t}, 800);\n \t\toClock.tick(800);\n \t\toClock.restore();\n \t});\n});\n```\n\n----------------------------------------\n\nTITLE: Component Definition and Initialization in TypeScript\nDESCRIPTION: This code snippet defines an OpenUI5 component by extending `sap/ui/core/UIComponent`. It sets the component's metadata, initializes data and i18n models, and creates the content (UI control tree) using an XML view. The component implements the `sap/ui/core/IAsyncContentCreation` interface for asynchronous instantiation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-component-configuration-typescript-f9d0e2f.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport Control from \"sap/ui/core/Control\";\nimport UIComponent from \"sap/ui/core/UIComponent\";\nimport XMLView from \"sap/ui/core/mvc/XMLView\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\n\n/**\n* @namespace ui5.walkthrough\n*/\nexport default class Component extends UIComponent {\npublic static metadata = {\n\"interfaces\": [\"sap.ui.core.IAsyncContentCreation\"]\n};\n    init(): void {\n        // call the init function of the parent\n        super.init();\n\n        // set data model\n        const data = {\n            recipient: {\n                name: \"World\"\n            }\n        };\n        const dataModel = new JSONModel(data);\n        this.setModel(dataModel);\n\n        // set i18n model\n        const i18nModel = new ResourceModel({\n            bundleName: \"ui5.walkthrough.i18n.i18n\"\n        });\n        this.setModel(i18nModel, \"i18n\");\n    };\n\n    createContent(): Control | Promise<Control | null> | null {\n        return XMLView.create({\n            \"viewName\": \"ui5.walkthrough.view.App\",\n            \"id\": \"app\"\n        });\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Dialog using JS Fragment in OpenUI5\nDESCRIPTION: This JavaScript fragment defines a dialog containing an input field and a close button. The fragment's `createContent` function instantiates the dialog and its content, binding the input field's text to the '/dialogText' model property. The close button's press event closes the dialog. Requires `sap/m/Dialog`, `sap/m/Input`, and `sap/m/Button` modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/defining-dialogs-as-fragments-0457545.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// fragment is located in a file named: testdata/fragments/JSFragmentDialog.fragment.js,\nsap.ui.define([\"sap/m/Dialog\", \"sap/m/Input\", \"sap/m/Button\"], function(Dialog, Input, Button) {\n    return {\n        createContent: function(oController) {\n            var oDialog = new Dialog({\n                title: \"JavaScript Fragment Dialog\",\n                content: [\n                    new Input({\n                        text: \"{/dialogText}\"\n                    })\n                ],\n                buttons: [\n                    new Button({\n                        text: \"Close\",\n                        press: function(){\n                            oDialog.close();\n                        }\n                    })\n                ]\n            });\n            return oDialog;\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining XML View with Button and Controller - XML\nDESCRIPTION: This XML snippet defines the structure of the UI using `sap.m` controls within an OpenUI5 `mvc:View`. It includes an `App` containing a `Page` with a button. The button's `press` event is bound to the `.onPress` function in the associated controller 'ui5.quickstart.App'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-steady-128214a.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.quickstart.App\"\n\tdisplayBlock=\"true\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<App>\n\t\t<Page title=\"My App\">\n\t\t\t<Button\n\t\t\t\ttext=\"Steady...\"\n\t\t\t\tpress=\".onPress\"\n\t\t\t\ttype=\"Emphasized\"\n\t\t\t\tclass=\"sapUiSmallMargin\"/>\n\t\t</Page>\n\t</App>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Extending sap.m.Button with a Hover Event (JavaScript)\nDESCRIPTION: This code extends the sap.m.Button control to create a new control called 'HoverButton' that includes a 'hover' event. It defines the metadata for the new event and an event handler that is triggered when the mouse hovers over the button. The renderer is inherited from sap.m.ButtonRenderer.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/extending-buttons-with-additional-events-d5b756b.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.m.Button.extend(\"HoverButton\", { // call the new Control type \"HoverButton\" \n                                                // and let it inherit from sap.m.Button\n      metadata: {\n          events: {\n              \"hover\" : {}  // this Button has also a \"hover\" event, in addition to \"press\" of the normal Button\n          }\n      },\n  \n      // the hover event handler:\n      onmouseover : function(evt) {   // is called when the Button is hovered - no event registration required\n          this.fireHover();\n      },\n\n      renderer: {} // add nothing, just inherit the ButtonRenderer as is; \n                   // In this case (since the renderer is not changed) you could also specify this explicitly with:  renderer:\"sap.m.ButtonRenderer\"\n                   // (means you reuse the ButtonRenderer instead of creating a new view\n  });\n```\n\n----------------------------------------\n\nTITLE: Delaying Component Initialisation - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to delay the component initialisation by using a custom bootstrap module. The module loads any dependencies needed and then loads the ComponentSupport module to start the component initialisation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-api-for-initial-components-82a0fce.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// my/app/bootstrap.js\nsap.ui.define([\"my/app/MyModule\"], (MyModule) => {\n  \"use strict\";\n    // Execute code which needs to be executed before component initialization\n    // Requiring the ComponentSupport module automatically executes the component initialisation for all declaratively defined components\n    MyModule.init().then(() => sap.ui.require([\"sap/ui/core/ComponentSupport\"]));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Target for Routing (JSON)\nDESCRIPTION: This JSON snippet configures a routing target to load a component using the `componentUsages` definition. It sets the `type` to `Component`, specifies the `usage` key, and provides optional `options` and `containerOptions` to customize the component instantiation and rendering. The `controlId` and `controlAggregation` are used to specify where the component is rendered in the parent view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enabling-routing-in-nested-components-fb19f50.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"sap.ui5\": {\n        \"componentUsages\": {\n            \"myreuse\": {\n                \"name\": \"reuse.component\",\n                \"settings\": {},\n                \"componentData\": {},\n                \"lazy\": false\n            }\n\n        },\n        \"routing\": {\n            \"config\": {\n                ...\n            },\n            \"routes\": [\n                ...\n            ],\n            \"targets\": {\n                \"attachment\": {\n                    \"type\": \"Component\",\n                    \"usage\": \"myreuse\",\n\n                    \"options\": {\n                        // optional\n                        // define the additional parameter for\n                        // instatiating the component instance\n                    },\n                    \"containerOptions\": {\n                        // optional\n                        // define the additional parameter for\n                        // instantiating the component container\n                        // which enables the component to be rendered\n                        // in the parent control\n                    },\n                    \"controlId\": \"page\",\n                    \"controlAggregation\": \"content\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ObjectHeader with Data Binding and Formatting\nDESCRIPTION: This XML snippet configures the `ObjectHeader` control in the Detail view to display product information and invoice details. It uses data binding to connect the control's properties to the invoice model. It also utilizes the `Currency` and `Date` types for formatting the extended price and shipped date respectively, ensuring the data is displayed in a user-friendly format. The 'responsive' and 'fullScreenOptimized' properties enable adaptive behavior across different screen sizes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-35-device-adaptation-typescript-ab8ed1b.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.Detail\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns:wt=\"ui5.walkthrough.control\">\n    <Page\n        title=\"{i18n>detailPageTitle}\"\n        showNavButton=\"true\"\n        navButtonPress=\".onNavBack\">\n        <ObjectHeader\n            core:require=\"{\n                Date: 'sap/ui/model/type/Date',\n                Currency: 'sap/ui/model/type/Currency'\n            }\"\n            responsive=\"true\"\n            fullScreenOptimized=\"true\"\n            number=\"{\n                parts: [\n                    'invoice>ExtendedPrice',\n                    'view>/currency'\n                ],\n                type: 'Currency',\n                formatOptions: {\n                    showMeasure: false\n                }\n            }\"\n            numberUnit=\"{view>/currency}\"\n            intro=\"{invoice>ShipperName}\"\n            title=\"{invoice>ProductName}\">\n            <attributes>\n                <ObjectAttribute\n                    title=\"{i18n>quantityTitle}\"\n                    text=\"{invoice>Quantity}\"/>\n                <ObjectAttribute\n                    title=\"{i18n>dateTitle}\"\n                    text=\"{\n                        path: 'invoice>ShippedDate',\n                        type: 'Date',\n                        formatOptions: {\n                            style: 'long',\n                            source: {\n                                pattern: 'yyyy-MM-ddTHH:mm:ss'\n                            }\n                        }\n                    }\"/>\n            </attributes>\n        </ObjectHeader>\n        <wt:ProductRating\n            id=\"rating\"\n            class=\"sapUiSmallMarginBeginEnd\"\n            change=\".onRatingChange\"/>\n    </Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Setting FlexBox direction - JavaScript\nDESCRIPTION: This snippet demonstrates setting the direction property of the FlexBox to \"Column\", which will arrange the items vertically. It requires the sap/m/FlexBox and sap/m/Button modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/getting-started-with-flexbox-988d2c7.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// FlexBox required from \"sap/m/FlexBox\"\n// Button required from \"sap/m/Button\"\n\nvar oMyFlexbox = new FlexBox({\n    items: [\n        new Button({text: \"Button 1\"}),\n        new Button({text: \"Button 2\"})\n    ],\n    direction: \"Column\"\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Object Page - HTML\nDESCRIPTION: This HTML snippet shows a sample object page with a form. SimpleForm displaying Artist data. It includes a toolbar with an edit button, labels and input fields bound to properties of an `Artist` entity. The `enabled` state of the edit button depends on the `IsActiveEntity` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<form:SimpleForm id=\"objectPage\">\n    <Toolbar>\n        <Button text=\"Edit\" enabled=\"{IsActiveEntity}\" press=\".onEdit\"/>\n    </Toolbar>\n    <Label text=\"ID\"/> <Text text=\"{ArtistID}\"/>\n    <Label text=\"Is Active\"/> <Text text=\"{IsActiveEntity}\"/>\n    <Label text=\"Name\"/> <Input value=\"{Name}\" />\n    ...\n</form:SimpleForm>\n```\n\n----------------------------------------\n\nTITLE: Defining Sections and Subsections in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define sections and subsections within an ObjectPageLayout using JavaScript. It shows how to structure the content using ObjectPageSection and ObjectPageSubSection controls, programmatically adding subsections to sections and sections to the ObjectPage.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-layout-2e61ab6.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar oSubSection1 = new sap.uxap.ObjectPageSubSection({title:\"sub payroll title\"});\n    var oSection1 = new sap.uxap.ObjectPageSection({title:\"Payroll\"});\n    oSection1.addSubSection(oSubSection1);\n    oObjectPage.addSection(oSection1);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Type in XML View\nDESCRIPTION: This XML snippet demonstrates how to use the custom `Zipcode` type within an OpenUI5 XML view. It defines an Input field with its value bound to the '/company/zip' path, and specifies the 'Zipcode' type. The `core:require` attribute is necessary to make the custom type available.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    core:require=\"{Zipcode: 'sap/ui/sample/Zipcode'}\">\n    <Input value=\"{path: '/company/zip', type: 'Zipcode'}\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Redirect to Custom URL using URLHelper (JavaScript)\nDESCRIPTION: This code snippet shows how to use the `redirect` method of the `sap.m.URLHelper` to redirect to a custom URL. The URL parameter is required and can be used for custom protocols such as http or ftp.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/url-helper-4f1c107.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.m.URLHelper.redirect( URL ); \n//URL is required and can be used for custom protocols (e.g http, ftp, ...)\n```\n\n----------------------------------------\n\nTITLE: Defining a Controller for the View in JavaScript\nDESCRIPTION: This JavaScript snippet defines the controller logic for the view. It uses `sap.ui.define` to define a module that extends `sap/ui/core/mvc/Controller`. The `onInit` function sets a timeout to make the button visible after a random delay. The `onPress` function changes the button's text when it is pressed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/getting-started-with-opa5-22f175e.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/mvc/Controller\"], function(Controller) {\n    \"use strict\";\n    return Controller.extend(\"view.Main\", {\n        onInit: function() {\n          \n            var that = this;\n            window.setTimeout(function() {\n                that.byId(\"pressMeButton\").setVisible(true);\n            }, Math.random() * 10000);\n        },\n\n\n      onPress: function() {\n            this.byId(\"pressMeButton\").setText(\"I got pressed\");\n      }\n\n    });\n   });\n\n    // \"Controller\" required from module \"sap/ui/core/mvc/Controller\"\n   Controller.create({\n    name: \"view.Main\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous JS Fragment in OpenUI5\nDESCRIPTION: This code defines a JavaScript fragment that creates its content asynchronously.  The `createContent` function returns a Promise. The Promise resolves with the controls to be used as the fragment's content.  The fragment depends on `sap/ui/core/Fragment`, `sap/m/Button`, and `heavy/work/SomeModule`.  `SomeModule.doStuffAsync()` is called to asynchronously create the content.  The fragment is located in \"reuse/SampleFragment.js\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/programmatically-instantiating-js-fragments-3cff5d0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// fragment is located in a file named \"reuse/SampleFragment.js\"\nsap.ui.define([\"sap/ui/core/Fragment\", \"sap/m/Button\", \"heavy/work/SomeModule\"], function(Fragment, Button, SomeModule) {\n\treturn {\n\t\tasync createContent() {\n\t\t\treturn await SomeModule.doStuffAsync();\n\t\t}\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Orientation Change Handler - JavaScript\nDESCRIPTION: This code snippet demonstrates how to attach a handler function to the `orientationChange` event of the `sap.ui.Device` API. The handler function is executed whenever the device orientation changes between landscape and portrait. It utilizes the `attachHandler` method to register the handler function. No external dependencies beyond the SAPUI5 library are required. The handler in this example simply displays an alert when triggered.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/the-device-api-69a8e46.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.Device.orientationChange.attachHandler(function(){\n\talert(\"orientation changed\");\n});\n```\n\n----------------------------------------\n\nTITLE: Update InvoiceList View (OpenUI5 XML)\nDESCRIPTION: This XML code updates the `InvoiceList` view to include a press event handler and sets the `type` of the `ObjectListItem` to `Navigation`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-e5200ee.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    ...\n        <items>\n            <ObjectListItem\n                core:require=\"{\n                    Currency: 'sap/ui/model/type/Currency'\n                }\"\n                title=\"{invoice>Quantity} x {invoice>ProductName}\"\n                number=\"{\n                    parts: [\n                        'invoice>ExtendedPrice',\n                        'view>/currency'\n                    ],\n                    type: 'Currency',\n                    formatOptions: {\n                        showMeasure: false\n                    }\n                }\"\n                numberUnit=\"{view>/currency}\"\n                numberState=\"{= ${invoice>ExtendedPrice} > 50 ? 'Error' : 'Success' }\"\n                type=\"Navigation\"\n                press=\".onPress\" >\n                <firstStatus>\n                    <ObjectStatus\n                        core:require=\"{\n                          Formatter: 'ui5/walkthrough/model/formatter'\n                        }\"\n                        text=\"{\n                            path: 'invoice>Status',\n                            formatter: 'Formatter.statusText.bind($controller)'\n                        }\"/>\n                </firstStatus>\n            </ObjectListItem>\n        </items>\n    </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Measuring Object Method Average Time (Class)\nDESCRIPTION: This snippet registers, activates, and unregisters a method on a class prototype for performance measurement, calculating its average execution time. It requires the `sap/m/Button` and `sap/ui/performance/Measurement` modules. Category is 'class'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/performance-measurement-using-sap-ui-performance-measurement-module-78880c0.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// \"Button\" required from module \"sap/m/Button\"\n// \"Measurement\" required from module \"sap/ui/performance/Measurement\"\nMeasurement.registerMethod(\"oButton.setText\", Button.prototype, \"setText\",[\"class\"]); //register to Button class on method setText\nMeasurement.setActive(true,[\"class\"]); //measure only category \"class\"\nfor (var i=0;i<1000;i++) {\n    var oButton = new Button();\n    oButton.setText(\"MyButton\" + i);\n}\n \nMeasurement.unregisterMethod(oButton, \"setText\");\n//or Measurement.unregisterAllMethods();\n \nMeasurement.getAllMeasurements();\n```\n\n----------------------------------------\n\nTITLE: Extending ExportType for Custom Export Formats (OpenUI5)\nDESCRIPTION: Extends the base `ExportType` class to create a custom export type in OpenUI5. It overrides the `init` and `generate` methods to define the file extension, MIME type, charset, and the logic for generating the file content.  Requires `sap/ui/core/util/ExportType` and `sap/base/security/encodeXML`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-data-binding-for-data-export-f1ee7a8.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// \"ExportType\" required from module \"sap/ui/core/util/ExportType\"\n// \"encodeXML\" required from module \"sap/base/security/encodeXML\"\nExportType.extend(\"my.own.ExportType\", {\n\n    init: function() {\n        // Set default values\n        this.setProperty(\"fileExtension\", \"mytype\", true);\n        this.setProperty(\"mimeType\", \"text/mytype\", true);\n        this.setProperty(\"charset\", \"utf-8\", true);\n    },\n\n    generate: function() {\n        var aBuffer = [];\n\n        var oColumns = this.columnGenerator(),\n            oColumn;\n\n        aBuffer.push(\"<columns>\");\n\n        while (!(oColumn = oColumns.next()).done) {\n            aBuffer.push(\"<column>\" + encodeXML(oColumn.value.name) + \"</column>\");\n        }\n\n        aBuffer.push(\"</columns>\");\n        \n        var oRows = this.rowGenerator(),\n            oRow;\n\n        aBuffer.push(\"<rows>\");\n\n        while (!(oRow = oRows.next()).done) {\n            var oCells = oRow.value.cells,\n                oCell;\n\n            aBuffer.push(\"<row>\");\n            aBuffer.push(\"<cells>\");\n\n            while (!(oCell = oCells.next()).done) {\n                aBuffer.push(\"<cell\");\n                if (oCell.value.customData.color) {\n                    aBuffer.push(\" color=\\\"\" + encodeXML(oCell.value.customData.color) + \"\\\"\");\n                }\n                aBuffer.push(\">\");\n                aBuffer.push(encodeXML(oCell.value.content));\n                aBuffer.push(\"</cell>\");\n            }\n\n\n        \n        aBuffer.push(\"</rows>\");\n        \n        return aBuffer.join(\"\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Templating Output Example (XML)\nDESCRIPTION: This XML snippet shows an example of templating output for displaying currency and unit values in an OpenUI5 application. It uses various data types such as `Currency`, `Decimal`, `StringType`, and `Unit` from the `sap.ui.model.odata.type` namespace. The example demonstrates a table with columns and labels for Weight and Price, which are presumably bound to OData properties with currency or unit information.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-and-unit-customizing-in-odata-v4-4d1b9d4.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{\n        Currency: 'sap/ui/model/odata/type/Currency',\n        Decimal: 'sap/ui/model/odata/type/Decimal',\n        StringType: 'sap/ui/model/odata/type/String',\n        Unit: 'sap/ui/model/odata/type/Unit'\n    }\">\n    <VBox>\n        <Table items=\"{/ProductList}\">\n            <columns>\n                ...\n                <Column>\n                    <Label text=\"Weight\" />\n                </Column>\n                <Column>\n                    <Label text=\"Price\" />\n                </Column>\n```\n\n----------------------------------------\n\nTITLE: Using runAsOwner in a Controller Instance - JavaScript\nDESCRIPTION: This code demonstrates how to use the `runAsOwner` method within a controller instance to ensure that any `ManagedObject` created within the callback function is properly associated with the owner component. This is crucial for applying extensions defined in the component's manifest.json. The example handles asynchronous factories like `XMLView.create` and `Fragment.load`, emphasizing the need to call `runAsOwner` again within their `then` handlers due to the loss of owner-component scope.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/the-owner-component-a7a3138.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In this sample, the 'this' context is a controller instance\n// The controller class provides a shorthand getter for its owner component\nvar oComponent = this.getOwnerComponent();\n// oComponent is now the owner component instance which owns the controller\noComponent.runAsOwner(function() {\n    // create additional ManagedObjects here, e.g. via\n    //   * a View and Fragment factory\n    //   * or simply via a control's constructor\n    XMLView.create(...).then(function() {\n        // Due to the asynchronous nature of the XMLView factory\n        // the owner-component scope is lost again inside the 'then' handler!\n        // Make sure to call runAsOwner again if more controls are created here.\n    });\n    Fragment.load(....).then(...);\n    new Button(...);\n}.bind(this));\n```\n\n----------------------------------------\n\nTITLE: OData Request with Descendants Transformation\nDESCRIPTION: This OData request retrieves the descendants of a specific employee using the `descendants` transformation. It filters the hierarchy based on the employee's ID (ID eq '0') and retrieves one level of descendants. This is useful for expanding individual nodes in a hierarchical structure.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-aggregation-and-recursive-hierarchy-7d91431.md#_snippet_6\n\nLANGUAGE: OData\nCODE:\n```\nGET /sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/EMPLOYEES?<b>$apply=descendants($root/EMPLOYEES,OrgChart,ID,filter(ID eq '0'),1)</b>/orderby(AGE)&amp;$select=AGE,DrillState,ID,MANAGER_ID,Name&amp;$count=true&amp;$skip=0&amp;$top=6</code>\n```\n\n----------------------------------------\n\nTITLE: Model Mapping Example 1: Goals as Navigation Property\nDESCRIPTION: Example of using `ModelMapping` to map external models to internal models within a block. Here, the 'Goals' are a navigation property of the 'Employee' in the 'ApplicationModel'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-blocks-4527729.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<EmployeeGoals>\n    <mappings>\n        <uxap:ModelMapping externalModelName=\"ApplicationModel\" externalPath=\"/Employee('121')\" internalModelName=\"Employee\" />\n        <uxap:ModelMapping externalModelName=\"ApplicationModel\" externalPath=\"/Employee('121')/Goals\" internalModelName=\"Goals\" />\n    </mappings>\n</EmployeeGoals>\n```\n\n----------------------------------------\n\nTITLE: Initializing ComponentSupport via Bootstrap - HTML\nDESCRIPTION: This snippet shows how to enable the declarative `ComponentSupport` API using the bootstrap in the HTML file. The `data-sap-ui-on-init` attribute is set to `module:sap/ui/core/ComponentSupport`, which triggers the module to scan the DOM for component declarations.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-api-for-initial-components-82a0fce.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n<script id=\"sap-ui-bootstrap\"\n    src=\"resources/sap-ui-core.js\"\n    data-sap-ui-on-init=\"module:sap/ui/core/ComponentSupport\"\n    data-sap-ui-async=\"true\"\n    data-sap-ui-resource-roots='{ \"my.app\": \"./\" }'\n    data-...=\"...\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Starting a Mock Server for OData V2 - JavaScript\nDESCRIPTION: This code defines a function `startMockServer` that configures and starts an OData V2 mock server using `sap/ui/core/util/MockServer`. It simulates OData requests based on metadata and data files. The `autoRespond` and `autoRespondAfter` configurations control the server's behavior. The server's root URI is set, and the simulation is started before the MockServer instance is returned. It depends on the 'sap/ui/core/util/MockServer' module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-testing-controls-with-qunit-0ddcc60.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// \"MockServer\" required from module \"sap/ui/core/util/MockServer\"\n\nfunction startMockServer(iRespondAfter) {\n    // configure respond to requests delay\n    MockServer.config({\n        autoRespond : true,\n        autoRespondAfter : iRespondAfter || 10\n    });\n\n    // create mockserver\n    const oMockServer = new MockServer({\n        rootUri : \"http://sap.com/service/\"\n    });\n\n    // start and return\n    oMockServer.simulate(\"data/metadata.xml\", \"data\");\n    oMockServer.start();\n    return oMockServer;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Component in HTML (index.html)\nDESCRIPTION: This HTML code bootstraps the OpenUI5 application and declares the component within the body. The `ComponentSupport` module is enabled, and a `div` tag with data attributes is used to instantiate the component. The data attributes specify the component's name, ID, and settings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-descriptor-for-applications-8f93bf2.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>UI5 Walkthrough</title>\n\t<script\n\t\tid=\"sap-ui-bootstrap\"\n\t\tsrc=\"resources/sap-ui-core.js\"\n\t\tdata-sap-ui-theme=\"sap_horizon\"\n\t\tdata-sap-ui-compat-version=\"edge\"\n\t\tdata-sap-ui-async=\"true\"\n\t\tdata-sap-ui-on-init=\"module:sap/ui/core/ComponentSupport\"\n\t\tdata-sap-ui-resource-roots='{\n\t\t\t\"ui5.walkthrough\": \"./\"\n\t\t}'>\n\t</script>\n</head>\n<body class=\"sapUiBody\" id=\"content\">\n\t<div data-sap-ui-component data-name=\"ui5.walkthrough\" data-id=\"container\" data-settings='{\"id\" : \"walkthrough\"}'></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Point using JSON notation in JS View\nDESCRIPTION: This JavaScript snippet shows how to create the surrounding control using JSON notation and add the extension point to an aggregation. It uses the `content` aggregation of `sap.ui.layout.VerticalLayout` to include buttons and the extension point.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-extension-403c050.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[...]\n\tvar oLayout = new sap.ui.layout.VerticalLayout({\n\t\tcontent: [\n\t\t          new sap.m.Button({text: \"I am preceding the extension point\"}),\n\t\t          sap.ui.extensionpoint(this, \"extension4\"),\n\t\t          new sap.m.Button({text: \"I am following the extension point\"})\n\t\t         ]\n\t});\n[...]\n\n```\n\n----------------------------------------\n\nTITLE: XML View Cache Configuration with Single Key\nDESCRIPTION: This code snippet demonstrates how to configure the XML view cache with a single cache key. It uses `sap.ui.require` to load the `sap/ui/core/mvc/XMLView` module and then calls the `create` method with a cache configuration that includes a single key. The `sCalculatedCacheKey` variable represents the key calculated by a key provider.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-view-cache-3d85d5e.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar sCalculatedCacheKey = oKeyProvider.getCacheKey();\n\nsap.ui.require(\"sap/ui/core/mvc/XMLView\", function (XMLView) {\n\tXMLView.create({\n\t\tid: \"cacheableView\",\n\t\tviewName: \"my.cacheableView\",\n\t\tcache: {\n\t\t\t// one key is mandatory\n\t\t\tkeys:[sCalculatedCacheKey]\n\t\t}\n\t}).then(function (oXmlView) {\n\t\t// ...\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: View Modification Extension\nDESCRIPTION: This JavaScript snippet defines a view modification extension that sets the `visible` property of the `someCustomizableTextControl` in the `samples.components.ext.sap.Sub3` view to `false`. This hides the control in the custom application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-modification-aa93e1c.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nextensions: {  \n    \"sap.ui.viewModifications\": {\n        \"samples.components.ext.sap.Sub3\": {\n            \"someCustomizableTextControl\": {\n                \"visible\": false\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UI5 Tooling (ui5.yaml)\nDESCRIPTION: This code snippet configures the UI5 Tooling setup by specifying the OpenUI5 framework and version, along with libraries dependencies and custom tasks. It defines custom middleware for transpiling modern JavaScript, serving the OpenUI5 framework, and enabling live reload. The configuration ensures that TypeScript is transpiled and that the development environment is optimized with live reload functionality.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-bootstrap-typescript-32b14d8.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nframework:\n  name: OpenUI5\n  version: \"1.136.0\"\n  libraries:\n    - name: sap.ui.core\n    - name: themelib_sap_horizon\nbuilder:\n  customTasks:\n  - name: ui5-tooling-transpile-task\n    afterTask: replaceVersion\nserver:\n  customMiddleware:\n  - name: ui5-tooling-transpile-middleware\n    afterMiddleware: compression\n  - name: ui5-middleware-serveframework\n    afterMiddleware: compression\n  - name: ui5-middleware-livereload\n    afterMiddleware: compression\n```\n\n----------------------------------------\n\nTITLE: Initializing App Controller with Route Handling in OpenUI5 (JavaScript)\nDESCRIPTION: This code initializes the App controller for an OpenUI5 application. It retrieves the component's router and attaches a handler (`onRouteMatched`) to the router's `routeMatched` event. It also includes functions for handling UI state changes based on the current route and updating the visibility of UI elements.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-using-the-flexible-column-layout-semantic-helper-276f001.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function (Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.App\", {\n\t\tonInit: function () {\n\t\t\tthis.oOwnerComponent = this.getOwnerComponent();\n\t\t\tthis.oRouter = this.oOwnerComponent.getRouter();\n\t\t\tthis.oRouter.attachRouteMatched(this.onRouteMatched, this);\n\t\t},\n\n\t\tonRouteMatched: function (oEvent) {\n\t\t\tvar sRouteName = oEvent.getParameter(\"name\"),\n\t\t\t\toArguments = oEvent.getParameter(\"arguments\");\n\n\t\t\tthis._updateUIElements();\n\n\t\t\t// Save the current route name\n\t\t\tthis.currentRouteName = sRouteName;\n\t\t\tthis.currentProduct = oArguments.product;\n\t\t\tthis.currentSupplier = oArguments.supplier;\n\t\t},\n\n\t\tonStateChanged: function (oEvent) {\n\t\t\tvar bIsNavigationArrow = oEvent.getParameter(\"isNavigationArrow\"),\n\t\t\t\tsLayout = oEvent.getParameter(\"layout\");\n\n\t\t\tthis._updateUIElements();\n\n\t\t\t// Replace the URL with the new layout if a navigation arrow was used\n\t\t\tif (bIsNavigationArrow) {\n\t\t\t\tthis.oRouter.navTo(this.currentRouteName, {layout: sLayout, product: this.currentProduct, supplier: this.currentSupplier}, true);\n\t\t\t}\n\t\t},\n\n\t\t// Update the close/fullscreen buttons visibility\n\t\t_updateUIElements: function () {\n\t\t\tvar oModel = this.oOwnerComponent.getModel(),\n\t\t\t\toUIState;\n\t\t\tthis.oOwnerComponent.getHelper().then(function(oHelper) {\n\t\t\t\toUIState = oHelper.getCurrentUIState();\n\t\t\t\toModel.setData(oUIState);\n\t\t\t});\n\t\t},\n\n\t\tonExit: function () {\n\t\t\tthis.oRouter.detachRouteMatched(this.onRouteMatched, this);\n\t\t\tthis.oRouter.detachBeforeRouteMatched(this.onBeforeRouteMatched, this);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Items with Key Function in OpenUI5\nDESCRIPTION: This code snippet shows how to bind items to a control in OpenUI5 using a key function for extended change detection.  The `bindItems` method is used with a path and a function that calculates a unique key based on context properties (user and timestamp).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/extended-change-detection-7cdff73.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\noControl.bindItems({\n  path: \"/listData\",\n  key: function(oContext) {\n    return oContext.getProperty(\"user\") + oContext.getProperty(\"timestamp\"); \n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting EventBus Instance - SAPUI5 JavaScript\nDESCRIPTION: Demonstrates how to obtain an EventBus instance using `EventBus.getInstance()` as a replacement for the deprecated `sap.ui.core.Core.getEventBus()`. The global EventBus should be used sparingly, preferring control or component events where possible. This ensures communication between different components.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\n    \"sap/ui/core/EventBus\"\n], (EventBus) => {\n    const oEventBus = EventBus.getInstance();\n});\n```\n\n----------------------------------------\n\nTITLE: VerticalLayout in XML View\nDESCRIPTION: This XML view contains a `VerticalLayout` with ID `vLayout` and a specified width.  This is a basic layout used in the previous examples.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns:layout=\"sap.ui.layout\"\n    xmlns=\"sap.m\">\n    <layout:VerticalLayout id=\"vLayout\" width=\"100%\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Disabling Customizing in OpenUI5 - JavaScript\nDESCRIPTION: This code snippet disables customizing in an OpenUI5 application. It sets the `xxDisableCustomizing` configuration option to `true` within the `sap-ui-config` object.  This can be useful for troubleshooting issues related to custom extensions or modifications.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/supportability-c44813d.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n \n  window[\"sap-ui-config\"] = window[\"sap-ui-config\"] ||{};\n  window[\"sap-ui-config\"][\"xxDisableCustomizing\"] = true;\n\n```\n\n----------------------------------------\n\nTITLE: Adding Comments Section to Object View XML - OpenUI5\nDESCRIPTION: This code adds a panel for displaying and adding comments to the object detail view. It includes a FeedInput control for posting comments and a List to display existing comments. The comments are bound to a productFeedback model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-adding-a-comments-section-c73dfe3.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"mycompany.myapp.MyWorklistApp.controller.Object\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns:semantic=\"sap.f.semantic\"\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns:l=\"sap.ui.layout\">\n\n...\n\n        <semantic:content>\n            <l:VerticalLayout width=\"100%\">\n            <Panel\n                backgroundDesign=\"Transparent\"\n                headerText=\"{i18n>ObjectSupplierTabTitle}\">\n\n...\n            </Panel>\n                <Panel\n                    backgroundDesign=\"Transparent\"\n                    headerText=\"{i18n>ObjectCommentsTabTitle}\">\n                    <content>\n                        <FeedInput post=\".onPost\"/>\n                        <List\n                            id=\"idCommentsList\"\n                            noDataText=\"{i18n>ObjectCommentNoData}\"\n                            showSeparators=\"Inner\"\n                            items=\"{\n                                path: 'productFeedback>/productComments',\n                                sorter: {\n                                    path: 'date',\n                                    descending: true\n                                }\n                            }\">\n                            <FeedListItem\n                                info=\"{productFeedback>type}\"\n                                text=\"{productFeedback>comment}\"\n                                timestamp=\"{productFeedback>date}\"/>\n                        </List>\n                    </content>\n                </Panel>\n            </l:VerticalLayout>\n        </semantic:content>\n```\n\n----------------------------------------\n\nTITLE: Creating Home.controller.js (JavaScript)\nDESCRIPTION: This JavaScript code defines the controller for the `Home` view. In this step, the controller does not contain any custom logic. It extends the `sap/ui/core/mvc/Controller` and returns a new controller instance. Requires `sap/ui/core/mvc/Controller`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-enable-routing-cf3c57c.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n   \"sap/ui/core/mvc/Controller\"\n], function (Controller) {\n   \"use strict\";\n\n   return Controller.extend(\"sap.ui.demo.nav.controller.Home\", {\n\n   });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Table Title to $count with ODataListBinding in XML\nDESCRIPTION: This code snippet demonstrates how to bind the title of a table to the inline count of a SalesOrderList collection using OData V4. The `$count` parameter is set to `true` in the ODataListBinding, and the `text` property of the `Title` control is bound to `{$count}`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/binding-collection-inline-count-77d2310.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Table id=\"SalesOrders\"\n    items=\"{\n        path : '/SalesOrderList',\n        parameters : {\n            $count : true\n        }\n    }\"\n>\n    <headerToolbar>\n        <Toolbar>\n            <content>\n                <Title id=\"SalesOrdersTitle\" text=\"{$count} Sales Orders\"/>\n            </content>\n        </Toolbar>\n    </headerToolbar>\n    ...\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Pressing a Button Inside a Dialog in OPA\nDESCRIPTION: This code searches for a button with the text \"Order Now\" inside an open dialog.  It sets `searchOpenDialogs` to true and uses the `check` function to filter buttons based on their text. After finding the button, it triggers a press action. `Opa5` is used for control waiting and interaction.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\niPressOrderNow : function () {\n    var oOrderNowButton = null;\n    this.waitFor({\n        searchOpenDialogs : true,\n        controlType : \"sap.m.Button\",\n        check : function (aButtons) {\n            return aButtons.filter(function (oButton) {\n                if(oButton.getText() !== \"Order Now\") {\n                    return false;\n                }\n\n                oOrderNowButton = oButton;\n                return true;\n            });\n        },\n        actions: new sap.ui.test.actions.Press(),\n        errorMessage : \"Did not find the Order Now button\"\n    });\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple XML Fragment in OpenUI5\nDESCRIPTION: This code snippet demonstrates a basic XML fragment containing a single button. The fragment is defined without a root <View> tag and can be loaded and integrated into an OpenUI5 view or control. The button's ID and text are defined within the XML.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-fragments-2c677b5.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Button xmlns=\"sap.m\" id=\"btnInFragment\" text=\"Hello\n    World\"/>\n```\n\n----------------------------------------\n\nTITLE: Grid with GridData XML\nDESCRIPTION: This XML snippet illustrates the use of `sap.ui.layout.GridData` to customize the span of individual items within a `sap.ui.layout.Grid`. The `GridData` element allows overriding the `defaultSpan` property defined in the Grid for specific child elements, giving fine-grained control over the layout of each item. In this example, item2 and item4 have custom span settings, while item1 and item3 inherit the default span.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/sap-ui-layout-grid-43ae317.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<l:Grid\n\t\tdefaultSpan=\"XL3 L4 M6 S6\">\n\t<Image src=\"/item1.png\" width=\"100%\"></Image>\n\t<Image src=\"/item2.png\" width=\"100%\">\n\t\t<layoutData>\n\t\t\t<l:GridData span=\"XL4\"/>\n\t\t</layoutData>\n\t</Image>\n\t<Image src=\"/item3.png\" width=\"100%\"></Image>\n\t<Image src=\"/item4.png\" width=\"100%\">\n\t\t<layoutData>\n\t\t\t<l:GridData span=\"XL2\"/>\n\t\t</layoutData>\n\t</Image>\n</l:Grid>\n```\n\n----------------------------------------\n\nTITLE: OData V4 Expand and Select System Query Options\nDESCRIPTION: This example illustrates how OData V4 system query options for expanding line items are converted into equivalent OData V2 system query options. It demonstrates the flattening of the $expand and $select structure.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/consuming-odata-v2-services-with-the-odata-v4-model-365bdbd.md#_snippet_1\n\nLANGUAGE: OData\nCODE:\n```\n$expand=SO_2_SOITEM($select=DeliveryDate,ItemPosition,SalesOrderID)\n$select=SalesOrderID,GrossAmount\n```\n\nLANGUAGE: OData\nCODE:\n```\n$expand=SO_2_SOITEM\n$select=SO_2_SOITEM/DeliveryDate,SO_2_SOITEM/ItemPosition,SO_2_SOITEM/SalesOrderID,SalesOrderID,GrossAmount\n```\n\n----------------------------------------\n\nTITLE: Teardown App/iFrame using OPA5 (JavaScript)\nDESCRIPTION: This code snippet shows how to remove the iFrame and teardown the application using either iTeardownMyApp or iTeardownMyAppFrame methods of the Opa5 class. The iTeardownMyApp method removes the application instance. The iTeardownMyAppFrame specifically targets and removes the iFrame.  Ensure 'sap/ui/test/Opa5' is required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/getting-started-with-opa5-22f175e.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Opa5\" required from \"sap/ui/test/Opa5\"\nnew Opa5().iTeardownMyApp();\n// or\nnew Opa5().iTeardownMyAppFrame();\n```\n\n----------------------------------------\n\nTITLE: Routing Configuration in manifest.json - JSON\nDESCRIPTION: This JSON snippet configures the routing within the `manifest.json` file. It defines a new route, `employeeOverview`, which is associated with two targets: `employeeOverviewTop` and `employeeOverviewContent`. The targets specify the views to be loaded and displayed within the `employeeOverview` parent view. The parent property establishes the hierarchical relationship between these views.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-assign-multiple-targets-b01840e.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"_version\": \"1.12.0\",\n\t\"sap.app\": {\n\t\t...\n\t},\n\t\"sap.ui\": {\n\t\t...\n\t},\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.nav.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"transition\": \"slide\",\n\t\t\t\t\"bypassed\": {\n\t\t\t\t\t\"target\": \"notFound\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"routes\": [{\n\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\"name\": \"appHome\",\n\t\t\t\t\"target\": \"home\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees\",\n\t\t\t\t\"name\": \"employeeList\",\n\t\t\t\t\"target\": \"employees\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/overview\",\n\t\t\t\t\"name\": \"employeeOverview\",\n\t\t\t\t\"target\": [\"employeeOverviewTop\", \"employeeOverviewContent\"]\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}\",\n\t\t\t\t\"name\": \"employee\",\n\t\t\t\t\"target\": \"employee\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}/resume:?query:\",\n\t\t\t\t\"name\": \"employeeResume\",\n\t\t\t\t\"target\": \"employeeResume\"\n\t\t\t}],\n\t\t\t\"targets\": {\n\t\t\t\t...\n\t\t\t\t\"resumeTabNotes\": {\n\t\t\t\t\t\"id\": \"resumeNotes\",\n\t\t\t\t\t\"parent\": \"employeeResume\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee\",\n\t\t\t\t\t\"name\": \"ResumeNotes\",\n\t\t\t\t\t\"controlId\": \"notesTab\",\n\t\t\t\t\t\"controlAggregation\": \"content\"\n\t\t\t\t},\n\t\t\t\t\"employeeOverview\": {\n\t\t\t\t\t\"id\": \"employeeOverview\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee.overview\",\n\t\t\t\t\t\"name\": \"EmployeeOverview\",\n\t\t\t\t\t\"level\" : 2\n\t\t\t\t},\n\t\t\t\t\"employeeOverviewTop\": {\n\t\t\t\t\t\"id\": \"employeeOverviewTop\",\n\t\t\t\t\t\"parent\": \"employeeOverview\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee.overview\",\n\t\t\t\t\t\"name\": \"EmployeeOverviewTop\",\n\t\t\t\t\t\"controlId\": \"EmployeeOverviewParent\",\n\t\t\t\t\t\"controlAggregation\": \"content\"\n\t\t\t\t},\n\t\t\t\t\"employeeOverviewContent\": {\n\t\t\t\t\t\"id\": \"employeeOverviewContent\",\n\t\t\t\t\t\"parent\": \"employeeOverview\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee.overview\",\n\t\t\t\t\t\"name\": \"EmployeeOverviewContent\",\n\t\t\t\t\t\"controlId\": \"EmployeeOverviewParent\",\n\t\t\t\t\t\"controlAggregation\": \"content\"\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deferred Function Binding with Collection Result (OData V4)\nDESCRIPTION: This XML snippet shows how to bind a deferred function (`GetAvailableItems(...)`) that returns a collection to a `VBox` and display the result in a `List`.  The `items` aggregation of the `List` is bound to the `value` property of the function result.  The `$select` parameter is used to specify the properties to be retrieved.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<VBox id=\"getAvailableItems\" binding=\"{path : '/GetAvailableItems(...)', parameters : {$select : ['ProductName', 'ProductId']}}\">\n    <List id=\"xyz\" items=\"{value}\">\n        <items>\n            <ObjectListItem title=\"{ProductName}\" />\n        </items>\n    </List>\n</VBox>\n```\n\n----------------------------------------\n\nTITLE: Add PostJourney to opaTests.qunit.js\nDESCRIPTION: This code adds the new `PostJourney` to the `opaTests.qunit.js` file, which is the entry point for OPA tests.  This ensures that the navigation tests are included when the test suite is executed.  It defines dependencies on `sap/ui/test/Opa5`, `./arrangements/Startup`, `./WorklistJourney`, and `./PostJourney`.  It also extends the OPA configuration with the `Startup` arrangement and the view namespace.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-testing-navigation-10592af.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/test/Opa5\",\n\t\"./arrangements/Startup\",\n\t\"./WorklistJourney\",\n\t\"./PostJourney\"\n], function (Opa5, Startup) {\n\t\"use strict\";\n\n\tOpa5.extendConfig({\n\t\tarrangements: new Startup(),\n\t\tviewNamespace: \"sap.ui.demo.bulletinboard.view.\",\n\t\tautoWait: true\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic title in Target using binding\nDESCRIPTION: This code snippet shows how to define a dynamic title for a target using binding syntax.  The title is resolved dynamically based on the values of `helperModel>/PRODUCTS_TITLE` and `myModel>productName`, and formatted by the `.myFormatterFunction`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-the-title-property-in-targets-1238d70.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    ...,\n    \"routes\": [{\n        \"pattern\": \"products/{id}\",\n        \"name\": \"Product\",\n        \"target\": \"product\"\n    }],\n    \"targets\": {\n        \"product\": {\n            \"type\": \"View\",\n            \"path\": \"shop.products\",\n            \"title\": \"{ parts: ['helperModel>/PRODUCTS_TITLE', 'myModel>productName'], formatter: '.myFormatterFunction' }\"\n        }\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Specific Range in Table with XML View - OpenUI5\nDESCRIPTION: This XML snippet defines a table that displays a specific range of records from the '/Notes' data source. It uses the `length` property to limit the number of displayed items to 3, and the `startIndex` property to start displaying from the 4th item (index 3). The table is sorted by the 'Rank' property in ascending order. The 'Note' property from the data source is displayed in each row.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/displaying-a-specific-range-of-records-in-a-control-9b5bdd8.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Table \n    items=\"{\n        path: '/Notes',\n        sorter: { path: 'Rank' },\n        length: 3,\n        startIndex: 3\n}\">\n    <columns>\n        <Column>\n            <Text text=\"Note\" />\n        </Column>\n    </columns>\n    <items>\n        <ColumnListItem>\n            <cells>\n                <Text text=\"{Note}\" />\n            </cells>\n        </ColumnListItem>\n    </items>\n</Table>\n\n```\n\n----------------------------------------\n\nTITLE: Navigating to Route from Hash with Nested Components (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to navigate to a route using a hash in an OpenUI5 application with nested components. It retrieves the router instance and route information, then uses navTo to navigate. The \"Component\" module from \"sap/ui/core/Component\" is required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enabling-routing-in-nested-components-fb19f50.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Component\" required from module \"sap/ui/core/Component\"\nvar oRouter = Component.getComponent(sOwnerComponentId).getRouter();\nvar oRouteInfo = oRouter.getRouteInfoByHash(sHash);\nif (oRouteInfo) {\n  oRouter.navTo(oRouteInfo.name, oRouteInfo.arguments);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Strict Mode - JavaScript (Controller)\nDESCRIPTION: This snippet demonstrates how to implement strict handling for bound actions using JavaScript in an OpenUI5 controller. It shows how to define the `onStrictHandlingFailed` callback, invoke the action with the callback, and handle user confirmation to repeat the action without strict handling.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// controller code:\n// event handler that invokes the bound action\nonInvokeAction : function () {\n  var that = this;\n \n...\n \n    function onStrictHandlingFailed (aMessages) {\n        var oView = that.oView;\n \n        oView.getModel(\"ui\").setProperty(\"/strictMessages\", aMessages);\n        oView.byId(\"onStrictMessagesDialog\").open();\n            return new Promise(function (fnResolve) {\n                that.fnStrictResolve = fnResolve;\n            });\n        }\n    }\n \n    oAction.invoke(undefined, undefined, onStrictHandlingFailed).then(\n      function () {\n        MessageToast.show(\"Invoice created for sales order\");\n      },\n      function (oError) {\n        if (!oError.canceled)\n          MessageBox.alert(oError.message, {icon : MessageBox.Icon.ERROR, title : \"Error\"});\n      });\n});\n \n// event handler to confirm the message and repeat the action\nonConfirmStrictMessages : function () {\n    this.fnStrictResolve(true);\n    this.oView.byId(\"onStrictMessagesDialog\").close();\n},\n \n// event handler to reject the action\nonCancelStrictMessages : function () {\n    this.fnStrictResolve(false);\n    this.oView.byId(\"onStrictMessagesDialog\").close();\n},\n\n```\n\n----------------------------------------\n\nTITLE: OData Aggregation with Grand Total - XML View\nDESCRIPTION: This XML view example demonstrates how to configure an OData V4 table to display aggregated data with a grand total. It sets the `$$aggregation` parameter within the `rows` binding to define the `aggregate` (SalesAmount and its unit) and `group` (Country) properties. It applies a filter and orderby to the data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-aggregation-and-recursive-hierarchy-7d91431.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<table:Table fixedRowCount=\"1\"\n   rows=\"{\n      path : '/BusinessPartners',\n      parameters : {\n         $$aggregation : {\n            aggregate : {\n               SalesAmount : {\n                  grandTotal : true,\n                  unit : 'Currency'\n               }\n            },\n            group : {\n               Country : {additionally : ['Texts/Country']}\n            }\n         },\n         $filter : 'SalesAmount gt 1000000',\n         $orderby : 'SalesAmount desc'\n      }\n   }\">\n   <table:Column template=\"Texts/Country\">\n      <Label text=\"Country\"/>\n   </table:Column>\n   <table:Column hAlign=\"End\" template=\"SalesAmount\">\n      <Label text=\"Sales Amount\"/>\n   </table:Column>\n   <table:Column template=\"Currency\">\n      <Label text=\"Currency\"/>\n   </table:Column>\n</table:Table>\n```\n\n----------------------------------------\n\nTITLE: Extended UI5 Test Suite Module with Configuration\nDESCRIPTION: This JavaScript snippet extends the previous test suite module example by providing default configurations for QUnit, Sinon, and the OpenUI5 runtime. It also includes the `loader.paths` configuration to map the project-specific namespace. The `page` configuration defines the generic test page and passes test suite and test names as query parameters. Replace `<NAMESPACE>` with your project's namespace.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/concept-and-basic-setup-22f50c0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(function () {\n\t\"use strict\";\n\n\treturn {\n\t\tname: \"QUnit test suite for NAMESPACE\",\n\t\tdefaults: {\n\t\t\tpage: \"ui5://test-resources/<NAMESPACE>/Test.qunit.html?testsuite={suite}&test={name}\",\n\t\t\tqunit: {\n\t\t\t\tversion: 2,\n\t\t\t},\n\t\t\tsinon: {\n\t\t\t\tversion: 4,\n\t\t\t},\n\t\t\tui5: {\n\t\t\t\ttheme: \"sap_horizon\",\n\t\t\t},\n\t\t\tloader: {\n\t\t\t\tpaths: {\n\t\t\t\t\t\"<NAMESPACE>\": \"../\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\ttests: {},\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect JavaScript Usage with Case Insensitive Requires\nDESCRIPTION: This JavaScript snippet illustrates the incorrect usage of `sap.ui.require` with inconsistent casing for module names.  This anti-pattern results in multiple loading and evaluation of the same module, affecting performance and potentially causing issues with `instanceof` checks.  Always use consistent casing when requiring modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-for-loading-modules-4363b3f.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n...\n    // BAD EXAMPLE - DON'T DO THIS\n    sap.ui.require(['sap/m/button'], function(){\n        ...\n    });\n    sap.ui.require(['sap/m/Button'], function(){\n        ...\n    });\n...\n```\n\n----------------------------------------\n\nTITLE: XML Fragment Definition for Aggregation Forwarding\nDESCRIPTION: This example shows the XML fragment definition for an XML composite control using aggregation forwarding.  It defines a `VBox` with the ID used in the `idSuffix` configuration.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/aggregation-forwarding-64a5e17.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<core:FragmentDefinition xmlns:m=\"sap.m\" xmlns:core=\"sap.ui.core\">\n    <m:VBox id=\"myInternalVBox\"/>\n</core:FragmentDefinition>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Scroll Container in OpenUI5\nDESCRIPTION: This JavaScript code snippet demonstrates the recommended steps for implementing a custom scroll container in OpenUI5. It initializes a sap.ui.core.delegate.ScrollEnablement delegate in the onAfterRendering callback, implements a getScrollDelegate method to return the delegate instance, and destroys the delegate on exit. The scroll delegate is responsible for providing scrolling functionality to the control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/scrolling-implementation-details-f5f6a47.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmyCustomScroller.prototype.onAfterRendering = function() {\n  if(!this._oScroller){\n    sap.ui.require(\"sap/ui/core/delegate/ScrollEnablement\");\n    // attach a scroller to the scrollable container DOM element\n    this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this._scrollContainerId, {\n      horizontal: false,\n      vertical: true\n    });\n  }\n};\n\nmyCustomScroller.prototype.getScrollDelegate = function() {\n  return this._oScroller;\n};\n\nmyCustomScroller.prototype.exit = function() {\n  if(this._oScroller){\n    this._oScroller.destroy();\n    this._oScroller = null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: DateFormatter Format Function (JS)\nDESCRIPTION: This snippet implements the format function in the DateFormatter class. It returns an empty string as a placeholder to pass the null input test.  It serves as minimal implementation during TDD.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/base/Object\"\n], function(Object) {\n\t   return Object.extend(\"sap.ui.demo.bulletinboard.model.DateFormatter\", {\n  \tformat: function() {\n\t\t\t\t    return \"\";\n\t\t\t }\n\t   });\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.resources with sap/base/i18n/ResourceBundle.create - JavaScript\nDESCRIPTION: This snippet demonstrates replacing the deprecated `jQuery.sap.resources` with the modern `sap/base/i18n/ResourceBundle.create`. It loads the `sap/base/i18n/ResourceBundle` module asynchronously using `sap.ui.require` and then uses the `create` method to load the resource bundle. The `async` property is set to `true` to ensure asynchronous loading.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-factories-replacement-491bd9c.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\njQuery.sap.resources({\n    url: \"mybundle.properties\"\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// jquery.sap.resources -> sap/base/i18n/ResourceBundle\n\nsap.ui.require([\"sap/base/i18n/ResourceBundle\"], (Resource) => {\n    ResourceBundle.create({\n        url: \"mybundle.properties\",\n\t   async: true\n    }).then((oResource) => {/*...*/});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Root Fragment in XML - OpenUI5\nDESCRIPTION: This XML snippet demonstrates how to define a multi-root fragment in OpenUI5. The `<FragmentDefinition>` tag acts as the root element, containing the actual controls. This tag is not rendered in the final HTML; instead, its children are added directly. The XML namespaces for `sap.m` and `sap.ui.core` are required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/fragments-with-multiple-root-nodes-23b9c77.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\n    <Label text=\"These controls are within one multi-root Fragment:\" />\n    <Input />\n    <Button text=\"Still in the same Fragment\" />\n</core:FragmentDefinition>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Composite Control\nDESCRIPTION: This JavaScript code defines the renderer for the 'SearchField' composite control. It renders the control by opening a div, setting a CSS class, and then rendering the internal Input and Button controls using the render manager.  The `updateAllParts()` function, called depending on the 'sync' approach, ensures settings are synchronized before rendering.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/standard-composite-controls-c1512f6.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nSearchFieldRenderer.render = function(oRm, oSearchField) {\n  // oSearchField.updateAllParts(); // called depending on your 'sync' approach\n  oRm.openStart(\"div\", oSearchField); \n  oRm.class(\"SearchField\"); \n  oRm.openEnd();\n  oRm.renderControl(oSearchField.getAggregation(\"_input\"));\n  oRm.renderControl(oSearchField.getAggregation(\"_btn\"));\n  oRm.close(\"div\");\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CSS rules for theme parameters\nDESCRIPTION: Defines CSS rules for applying the color from the `@sapUiText` theme parameter to different CSS properties. It shows how to define the color once as text color, background color, and border color using the `-asColor`, `-asBackgroundColor`, and `-asBorderColor` suffixes respectively. For the default color of `@sapUiText`, which is text color, no suffix is used.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/css-classes-for-theme-parameters-ea08f53.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.sapThemeText {\n   color: @sapUiText;\n}\n.sapThemeText-asColor {\n   color: @sapUiText;\n}\n.sapThemeText-asBackgroundColor {\n   background-color: @sapUiText;\n}\n.sapThemeText-asBorderColor {\n   border-color: @sapUiText;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting compatibility version using meta tag\nDESCRIPTION: This code snippet shows how to set the OpenUI5 compatibility version to 'edge' using a meta tag.  The `name` attribute uses the `sap-ui-compat-version` following the defined naming convention.  The `content` attribute specifies the desired value.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-of-the-openui5-runtime-91f08de.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"sap-ui-compat-version\" content=\"edge\">\n```\n\n----------------------------------------\n\nTITLE: Step Definitions Stub in JavaScript\nDESCRIPTION: This JavaScript code provides a stub for defining step definitions in a Gherkin test. It imports necessary modules from SAPUI5, including `StepDefinitions`, `Opa5`, and `dataTableUtils`. The `extend` method is used to create a custom step definition object, which can be extended with actual test implementations. The path and file name in the call to `extend` needs to be adjusted to match the scenario.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/basic-example-how-to-use-gherkin-4b0c519.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n  \"jquery.sap.global\",\n  \"sap/ui/test/gherkin/StepDefinitions\",\n  \"sap/ui/test/Opa5\",\n  \"sap/ui/test/gherkin/dataTableUtils\"\n], function(StepDefinitions, Opa5, dataTableUtils) {\n  \"use strict\";\n\n  return StepDefinitions.extend(\"GherkinWithOPA5.Steps\", {\n    init: function() {\n    }\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Paths in OpenUI5 with sap.ui.loader.config\nDESCRIPTION: This code snippet demonstrates how to use the sap.ui.loader.config function to associate a module name prefix with a URL prefix.  This allows OpenUI5 to load modules from a specified URL instead of the default resource root URL. The snippet defines a path for 'my/module' to load from 'https://example.com/resources/my/module'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/multiple-module-locations-1dfab2e.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.loader.config({\n\tpaths: {\n\t\t\"my/module\": \"https://example.com/resources/my/module\"\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Controller for Initial Visibility Issue\nDESCRIPTION: The corresponding JavaScript controller handles the switching between the display and edit panels by toggling their visibility properties.  This approach is inefficient because the hidden panel's controls are initialized even when they are not visible. Requires `sap/ui/core/mvc/Controller` and `sap/ui/core/Fragment` dependencies.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/performance-issues-966d67c.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/Fragment\"\n], function (Controller, Fragment) {\n\t\"use strict\";\n\treturn Controller.extend(\"my.own.controller\", {\n\t\ttoEditMode: function() {\n\t\t\tthis.byId(\"displayPanel\").setVisible(false);\n\t\t\tthis.byId(\"editPanel\").setVisible(true);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a View in OpenUI5 using JavaScript\nDESCRIPTION: This JavaScript snippet shows how to create an OpenUI5 view using the View.create() method. The 'View' module is required from 'sap/ui/core/mvc/View'. The then() method is used to handle the promise returned by View.create(), providing the newly created view instance in the callback function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/support-for-unique-ids-91f28be.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n   // \"View\" required from module \"sap/ui/core/mvc/View\"\n   View.create().then(function(oView) {/* code */});\n...\n```\n\n----------------------------------------\n\nTITLE: Calling Actions and Assertions in OPA5 Tests\nDESCRIPTION: This code snippet demonstrates how to call actions and assertions defined within a page object in OPA5 tests. The actions are accessed via `When.inThe<Page Object>.<iDoSomething>()` and assertions via `Then.inThe<Page Object>.<iCheckSomething>()`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/structuring-opa-tests-with-page-objects-f2f843d.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nWhen.inThe<Page Object>.<iDoSomething>();\n\nThen.inThe<Page Object>.<iCheckSomething>();\n```\n\n----------------------------------------\n\nTITLE: Resource Bundle (i18n.properties)\nDESCRIPTION: This INI file defines the resource bundle for the OpenUI5 application. It contains text properties used for internationalization, including the application title, description, and text for the Hello Panel. These properties are referenced in the manifest.json using handlebars syntax.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-descriptor-for-applications-8f93bf2.md#_snippet_2\n\nLANGUAGE: INI\nCODE:\n```\n# App Descriptor\nappTitle=Hello World\nappDescription=A simple walkthrough app that explains the most important concepts of OpenUI5\n\n# Hello Panel\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Person Data for Examples JavaScript\nDESCRIPTION: This snippet defines a JavaScript object named 'person' containing sample data for a person's name, telephone number, SMS number, email address, and website. This object is used in the subsequent code examples to demonstrate how to trigger external applications with the person's contact information.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/examples-for-triggering-telephone-text-and-e-mail-applications-021ac23.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar person = {\n    name : \"John Smith\",\n    tel : \"+49 62227\n          747474\",\n    sms : \"+49 173 123456\",\n    email : \"john.smith@sap.com\",\n    website : \"http://www.sap.com\"\n};\n```\n\n----------------------------------------\n\nTITLE: Unsupported Expression as Dependency - JavaScript\nDESCRIPTION: This code shows an unsupported usage of an expression (variable) within the dependency array of `sap.ui.define`.  OpenUI5 requires literal strings for specifying dependencies to ensure proper module resolution.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Do NOT use an expression in the list of dependencies\n// in an sap.ui.define or sap.ui.require call.\nconst sController = \"sap/ui/core/mvc/Controller\";\nsap.ui.define([\n  sController\n], (Controller) => {\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Export Type Output (OpenUI5)\nDESCRIPTION: Illustrates the output generated by a custom export type that utilizes custom data. The XML structure includes columns and rows, with cells containing content and optional 'color' attributes based on the custom data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-data-binding-for-data-export-f1ee7a8.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<columns>\n    <column>First name</column>\n    <column>Last name</column>\n</columns>\n<rows>\n    <row>\n        <cells>\n            <cell color=\"red\">Al</cell>\n            <cell>Dente</cell>\n        </cells>\n    </row>\n    <row>\n        <cells>\n            <cell color=\"black\">Andy</cell>\n            <cell>Friese</cell>\n        </cells>\n    </row>\n    <row>\n        <cells>\n            <cell color=\"yellow\">Anita</cell>\n            <cell>Mann</cell>\n        </cells>\n    </row>\n    <row>\n        <cells>\n            <cell color=\"green\">Doris</cell>\n            <cell>Schutt</cell>\n        </cells>\n    </row>\n    <row>\n        <cells>\n            <cell color=\"blue\">Kenya</cell>\n            <cell>Dewit</cell>\n        </cells>\n    </row>\n</rows>\n```\n\n----------------------------------------\n\nTITLE: Initializing a String Type\nDESCRIPTION: This snippet demonstrates how to initialize a `sap.ui.model.type.String` object in JavaScript. It creates a new instance of the `TypeString` class with a `maxLength` constraint of 5. This means the string value must not exceed 5 characters. The `TypeString` class needs to be required from the `sap/ui/model/type/String` module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-string-91f31c2.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"TypeString\" required from module \"sap/ui/model/type/String\"\n\n// The source value is given as string. The length of the string must not be greater than 5.\nvar oType = new TypeString(null, {maxLength: 5});\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Duration\nDESCRIPTION: This snippet demonstrates how to calculate the average duration of an operation using the `Measurement.average` method within a loop. It requires `sap/base/Log` and `sap/ui/performance/Measurement` modules. The measurement ID is \"myId\", with associated information 'Average of myId'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/performance-measurement-using-sap-ui-performance-measurement-module-78880c0.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// \"Log\" required from module \"sap/base/Log\"\n// \"Measurement\" required from module \"sap/ui/performance/Measurement\"\nMeasurement.setActive(true);\nfor (var i=0;i<1000;i++) {\n    Measurement.average(\"myId\",\"Average of myId\");\n    Log.info(\"Foo \" + i);\n    Measurement.end(\"myId\");\n}\n```\n\n----------------------------------------\n\nTITLE: Library Support JS Before Splitting - JavaScript\nDESCRIPTION: This example shows a `library.support.js` file before it is split into multiple files. It defines multiple rules (for `sap.m.Button` and `sap.m.Label`) within a single file. The `ruleset` property contains an array of all the rules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/create-a-ruleset-for-a-library-b5a5135.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/support/library\"],\n  function(SupportLib) {\n    \"use strict\";\n    var buttonRule = {…};\n\n    var labelRule1 = {…};\n\n    var labelRule2 = {…};\n\n    return {\n      name: \"sap.ui.core\",\n      niceName: \"UI5 Core Library\",\n      ruleset: [\n        buttonRule,\n        labelRule1,\n        labelRule2\n      ]\n    };\n  }, true);\n```\n\n----------------------------------------\n\nTITLE: Initializing SemanticPage in JavaScript (OpenUI5)\nDESCRIPTION: This JavaScript snippet shows how to create and add a `sap.f.semantic.SemanticPage` to a view programmatically.  It initializes a new `SemanticPage` instance and adds it to the view's content. This allows for dynamic page creation and modification.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/semantic-page-sap-f-47dc868.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar oSemanticPage = new sap.f.semantic.SemanticPage(\"mySemanticPage\");\noView.addContent(oSemanticPage);\n```\n\n----------------------------------------\n\nTITLE: Defining an XML View in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to define an XML view in OpenUI5. It includes the necessary XML namespaces for `sap.m` controls and `sap.ui.core.mvc` for the view definition. The view contains a Panel, an Image, and a Button control. The `controllerName` attribute specifies the controller associated with this view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-view-91f2928.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View controllerName=\"module:sap/hcm/Address\" xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\">\n   <Panel>\n      <Image src=\"http://www.sap.com/global/ui/images/global/sap-logo.png\"/>\n      <Button text=\"Press Me!\"/>\n   </Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Specifying Debug Modules via URL Parameter\nDESCRIPTION: This section describes how to load specific modules in debug mode by specifying a comma-separated list of modules as a string in the `sap-ui-debug` URL parameter. A trailing slash indicates that the complete package should be included, while `**/` matches any package or sequence of packages. `*` matches any part of a simple name.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-options-and-url-parameters-91f2d03.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nindex.html?sap-ui-debug=sap/ui/model/odata/v2/\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Object for Element Selection in UI5\nDESCRIPTION: This JavaScript code snippet demonstrates how to define a query object to select a specific subset of elements when using the `getElements` method within the OpenUI5 Support Assistant. The query object allows filtering based on element type, public API status, and whether the element is a clone.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/create-a-rule-c24569d.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar queryObject = {\n\n  type: \"sap.m.Button\", // String property specifying the type to select\n\n  public: true, // Boolean property specifying whether only public elements should be loaded\n\n  cloned: false // Boolean argument specifying if cloned elements are needed\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing sap.ui.model.type.Time in JavaScript\nDESCRIPTION: This code demonstrates various ways to initialize the `sap.ui.model.type.Time` data type in OpenUI5.  It covers initializing with default locale-dependent patterns, custom patterns for source and output, and using styles for locale-dependent formatting. It shows how to handle JavaScript Date objects, strings, and timestamps as source values.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-time-91f322a.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"TypeTime\" required from module \"sap/ui/model/type/Time\"\n\n// The source value is given as JavaScript Date object. The used output pattern depends on the locale settings (default).\nvar oType = new TypeTime();\n\n// The source value is given as JavaScript Date object. The used output pattern is \"hh-mm-ss\": e.g. 09-11-27\noType = new TypeTime({pattern: \"hh-mm-ss\"}); \n\n// The source value is given as string in \"hh-mm-ss\" format. The used output style is \"short\". The styles are language dependent.\n// The following styles are possible: short, medium (default), long, full\n// This might be the common use case.\noType = new TypeTime({source: {pattern: \"hh-mm-ss\"}, style: \"short\"}); \n\n// The source value is given as string in \"hh/mm/ss/SSS\" format. The used output pattern is \"HH:mm:ss '+' SSS 'ms'\": e.g. 18:48:48 + 374 ms\noType = new TypeTime({source: {pattern: \"hh/mm/ss/SSS\"}, pattern: \"HH:mm:ss '+' SSS 'ms'\"}); \n\n// The source value is given as timestamp. The used output pattern is \"HH 'Hours' mm 'Minutes'\": e.g. 18 Hours 48 Minutes\noType = new TypeTime({source: {pattern: \"timestamp\"}, pattern: \"HH 'Hours' mm 'Minutes'\"}); \n\n// The source value is given as string. The used input pattern depends on the locale settings (default). The used output pattern is \"hh:mm a\": e.g. 06:48 PM\noType = new TypeTime({source: {}, pattern: \"hh:mm a\"});\n```\n\n----------------------------------------\n\nTITLE: RadioButtonGroup with Title using ariaLabelledBy - OpenUI5 XML View\nDESCRIPTION: This code snippet demonstrates how to use a `Title` control with a `RadioButtonGroup` in an OpenUI5 XML view to provide screen reader support. The `ariaLabelledBy` attribute of the `RadioButtonGroup` is used to associate the title with the radio button group, allowing screen readers to announce the title when the radio button group receives focus. This improves accessibility by providing context for the radio button options.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/screen-reader-support-33fae34.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n      xmlns:mvc=\"sap.ui.core.mvc\"\n      xmlns=\"sap.m\">\n   <Title id=\"rbGroupTitle\" text=\"Select an option\" textAlign=\"Center\"/>\n\n   <RadioButtonGroup columns=\"2\" selectedIndex=\"2\" ariaLabelledBy=\"rbGroupTitle\">\n      <buttons>\n         <RadioButton id=\"RB2-1\" text=\"Option 1\"/>\n         <RadioButton id=\"RB2-2\" text=\"Option 2\" editable=\"false\"/>\n         <RadioButton id=\"RB2-3\" text=\"Option 3\"/>\n      </buttons>\n   </RadioButtonGroup>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Busy Indicator with autoWait disabled\nDESCRIPTION: This code snippet shows how to use OPA5's `waitFor` function to check if a control is covered by a busy indicator. The `autoWait` parameter is set to `false` to prevent OPA from waiting for controls to become interactable, which is not desired in this specific scenario because we specifically test the busy state. The `PropertyStrictEquals` matcher checks the `busy` property of the control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/pitfalls-and-troubleshooting-698f8c0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noOpa.waitFor({\n\tautoWait: false,\n\tid: \"myBusyList\", // a control that is expected be covered by a busy indicator\n\tmatchers: new PropertyStrictEquals({\n\t\tname: \"busy\",\n\t\tvalue: true\n\t}),\n\tsuccess: function (oList) {\n\t\tOpa5.assert.ok(true, \"My list is busy\");\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value List Type for a Property (OData V4)\nDESCRIPTION: This JavaScript code snippet demonstrates how to retrieve the value list type for a property using `ODataPropertyBinding.requestValueListType`. It then uses the returned type to determine how to render the control and attach an event handler for value help requests.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/value-lists-ab267a6.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n       onModelContextChange : function (oEvent) {\n        var oBinding = this.getBinding(\"value\");\n \n        if (oBinding && oBinding.isResolved()) {\n            oBinding.requestValueListType().then(function (sValueListType) {\n \n \n                // render the control depending on the value list type and attach the below\n                // event handler onValueHelp which is invoked when the user requests value help\n \n                switch (sValueListType) {\n                    case ValueListType.Standard:\n                        ...\n                        break;\n                    case ValueListType.Fixed:\n                        ...\n                        break;\n                    case ValueListType.None:\n                        ...\n                        break;\n                }\n                that.setAggregation(\"field\", oField);\n            });\n        }\n    },\n...\n    onValueHelp : function (oEvent) {\n        var oBinding = this.getBinding(\"value\");\n \n        oBinding.requestValueListInfo().then(function (mValueListInfo) {\n            // this assumes value list type \"Fixed\"\n            var oValueListMapping = mValueListInfo[\"\"],\n                oValueListMetaModel = oValueListMapping.$model.getMetaModel();\n  \n            ...\n        });\n    },\n...\n```\n\n----------------------------------------\n\nTITLE: Unsupported: Template Literal Expression as Class Name\nDESCRIPTION: This code demonstrates that using template literals with expressions is not supported as the class name parameter within the `extend` call. Using a literal string is the correct way.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst sControllerPath = \"my.app.controller.\";\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\"\n], (Controller) => {\n    \"use strict\";\n    return Controller.extend(`${sControllerPath}MyController`, {});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Given Name with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"givenname\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"n\" (name) property, where the given name property points to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_75\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"n\" : { \"given\" : { \"Path\" : \"PROPERTY\" } } }\n```\n\n----------------------------------------\n\nTITLE: Creating Employee List View - XML\nDESCRIPTION: This XML snippet defines the `EmployeeList` view. It displays a list of employees using the `sap.m.List` control. The list items are bound to the `/Employees` data source. The view also includes a back button that triggers the `onNavBack` event handler from the base controller. A custom namespace \"employee\" is used in the path to the view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-navigate-to-routes-with-hard-coded-patterns-782aac0.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.EmployeeList\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page\n\t\tid=\"employeeListPage\"\n\t\ttitle=\"{i18n>EmployeeList}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\"\n\t\tclass=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<List id=\"employeeList\" headerText=\"{i18n>ListOfAllEmployees}\" items=\"{/Employees}\">\n\t\t\t\t<items>\n\t\t\t\t\t<StandardListItem\n\t\t\t\t\t\ttitle=\"{FirstName} {LastName}\"\n\t\t\t\t\t\ticonDensityAware=\"false\"\n\t\t\t\t\t\ticonInset=\"false\"/>\n\t\t\t\t</items>\n\t\t\t</List>\n\t\t</content>\n\t</Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Providing Density Support for Custom Control - CSS\nDESCRIPTION: This CSS snippet demonstrates how to provide density support for a custom control. It defines the default style for the control and then provides an override for the `sapUiSizeCompact` class, effectively reducing the height of the control when it's rendered in 'Compact' density.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/how-to-use-densities-for-controls-13e6f3b.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.myOwnControl { /* the standard (big) style */\n   ...\n   height: 3rem;\n   ...\n}\n\n.sapUiSizeCompact .myOwnControl { /* reduce the height in compact density */\n   height: 2rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 Tooling Locally\nDESCRIPTION: This command installs the UI5 Tooling as a dev dependency in the project, ensuring consistent tooling versions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-no-data-binding-4cde849.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i -D @ui5/cli\n```\n\n----------------------------------------\n\nTITLE: Attaching Media Range Change Handler - JavaScript\nDESCRIPTION: This code snippet demonstrates how to attach a handler function to the `media` event of the `sap.ui.Device` API to respond to screen width changes based on predefined ranges (SAP_STANDARD).  The `fnSizeChanged` function is called when the screen width enters a new range. The handler function receives the current interval information via `mParams` argument. The required dependency is SAPUI5 library. The example uses predefined ranges such as Phone, Tablet, and Desktop.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/the-device-api-69a8e46.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// attach to event\nsap.ui.Device.media.attachHandler(fnSizeChanged, null, sap.ui.Device.media.RANGESETS.SAP_STANDARD);\n// eventHandler: \nfunction fnSizeChanged(mParams) {\n    switch(mParams.name) {\n        case \"Phone\":\n            // Do what is needed for a little screen\n            break;\n        case \"Tablet\":\n            // Do what is needed for a medium sized screen\n            break;\n        case \"Desktop\":\n            // Do what is needed for a large screen\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Binding in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to create an `Input` control and bind its `value` property to the `/company/name` path using the `settings` object. It requires the `Input` module from `sap/m/Input`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Input\" required from module \"sap/m/Input\"\nconst oInput = new Input({value: \"{/company/name}\"});\n```\n\n----------------------------------------\n\nTITLE: Updating i18n.properties\nDESCRIPTION: This snippet shows how to add new text keys and values to the `i18n.properties` file.  These entries are used for localization and are referenced in the application UI. The keys are used to bind the text properties of UI elements to their localized values.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-navigate-with-flip-transition-3e5f6f3.md#_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n...\nResumeOf=Resume of\ntabInfo=Info\ntabProjects=Projects\ntabHobbies=Hobbies\ntabNotes=Notes\nFlipToResume=Flip to Resume\nFlipToResume.tooltip=See the resume of this employee\n```\n\n----------------------------------------\n\nTITLE: List with infoToolbar and ariaLabelledBy - OpenUI5 XML View\nDESCRIPTION: This code snippet shows how to associate the text content of a non-active `infoToolbar` with a `List` control using the `ariaLabelledBy` attribute. This ensures that screen readers announce the text in the info toolbar when the first list item is focused, improving accessibility for visually impaired users.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/screen-reader-support-33fae34.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n...\n<List ariaLabelledBy=\"textInInfoToolbarId\">\n                <infoToolbar>\n                               <OverflowToolbar active=\"false\">\n                                               <Label id=\"textInInfoToolbarId\" text=\"Announce this text when the first list item is focused\" />\n                               </OverflowToolbar>\n                </infoToolbar>\n                <items>\n\t\t  ...\n</List>\n...\n```\n\n----------------------------------------\n\nTITLE: Highlighting Table Rows with CSS in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to highlight alternating rows in an OpenUI5 table using CSS. The `nth-child(even)` selector is used to target even-numbered rows within the `tbody` of the table. The background color is then set for these rows to achieve the striping effect. The example uses the table ID `ProductsView-ProductsTable`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/table-design-d3234bc.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n#ProductsView-ProductsTable tbody tr:nth-child(even) {\n\tbackground: rgb(245, 245, 245);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Theming Parameter Usage (Bad)\nDESCRIPTION: This JavaScript snippet shows the incorrect usage of theming parameters for attributes they were not intended for. Ensures that you do not use combinations of theme colors which may clash after future theme changes, do not use background colors for fonts or vice versa, for example, and do not use border colors for anything else but borders.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/css-styling-issues-9d87f92.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar sColor = sap.ui.core.theming.Parameters.get(\"sapUiButtonBorderColor\");\n$(oSomeDomElement).css(\"background-color\", sColor);\n```\n\n----------------------------------------\n\nTITLE: Accessing Test Library Configuration - JavaScript\nDESCRIPTION: Accesses the configuration provided by the consumer test within a test library.  This allows the test library to retrieve application-specific parameters such as app ID.  This information can then be used to customize the library's behavior.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-libraries-for-opa5-a88a5e5.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oConfiguration = Opa5.getTestLibConfig(\"myAwesomeTestLibrary\");\noConfiguration.appId === \"my.application.appId\" // true\n```\n\n----------------------------------------\n\nTITLE: Excluding jQuery Compatibility Layer via URL Parameter\nDESCRIPTION: This code snippet demonstrates how to exclude the jQuery compatibility layer by setting the `sap-ui-excludeJQueryCompat` URL parameter to `true`. This allows developers to test their applications against the raw jQuery 3.5.1 without the compatibility fixes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/upgrading-from-a-version-below-1-82-147eef9.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nsap-ui-excludeJQueryCompat=true\n```\n\n----------------------------------------\n\nTITLE: Defining Array Properties\nDESCRIPTION: This code snippet demonstrates how to define array properties in OpenUI5. It shows examples of one-dimensional and two-dimensional arrays using the `[]` notation.  The example features integer arrays but any supported type can be used as array elements.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-control-properties-ac56d92.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nproperties: {\n    myProperty1 : \"int[]\",\n    myProperty2 : \"int[][]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating XML View and Controller Instance (HTML)\nDESCRIPTION: This HTML file initializes the OpenUI5 environment, loads necessary libraries (sap.m, sap.ui.layout), and defines the resource root. It then uses `sap.ui.require` to instantiate the XML view and its controller, placing the view in the 'content' div.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/example-js-fragments-used-in-xml-views-faaff35.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\t<head>\n\t<meta content=\"charset=utf-8\">\n\t\n\t<title>JSFragment used in XmlView</title>\n\t\n\t<!-- Load UI5 and select the \"sap.m\", \"sap.ui.layout\" control libraries -->\n\t<script id='sap-ui-bootstrap' type='text/javascript'\n\t\t\tsrc='/sapui5/resources/sap-ui-core.js'\n\t\t\tdata-sap-ui-libs='sap.m,sap.ui.layout'\n\t\t\tdata-sap-ui-resource-roots='{\"my.own\": \".\"}'\n\t</script>\n\n\t<script>\n\t\tsap.ui.require([\n\t\t\t'sap/ui/core/mvc/Controller',\n\t\t\t'sap/ui/core/mvc/XMLView'\n\t\t], function (Controller, XMLView) {\n\t\t\tController.create({\n\t\t\t\tname: \"module:my/own/Controller\"\n\t\t\t}).then(function (oController) {\n\t\t\t\t/*** THIS IS THE \"APPLICATION\" CODE ***/\n\n\t\t\t\t// instantiate the View\n\t\t\t\tXMLView.create({\n                        viewName:\"my.own.View\",\n                        controller: oController\n\t\t\t\t}).then(function (oView) {\n\t\t\t\t\t// put the View onto the screen\n\t\t\t\t\toView.placeAt('content');\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t</script>\n\t\n\t</head>\n\t<body class='sapUiBody'>\n\t\t<div id='content'></div>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller Extension Hook in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to implement a controller extension that utilizes a predefined hook 'onDataReceived' in OpenUI5. The extension function receives a data object 'oData' as an argument and modifies it based on specific conditions (e.g., status is 'important'). The extension doesn't need to return anything, as it modifies the original data object directly. The extension is defined within a `sap.ui.define` call.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/providing-hooks-in-the-standard-controller-8fbf4e7.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(\"customer.xy.Sub2ControllerExtension\", [], function () {\n   \"use strict\";\n   return {\n      onDataReceived: function(oData){ // oSomeData will be passed in\n         if (oData && oData.status === \"important\") {\n            oData.message = oData.message + \"!!!\"; // modify some part of the data object, adding exclamation marks to a message text\n         }\n      } // no need to return anything as in this example the original object is modified\n   };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an XML View\nDESCRIPTION: This XML snippet defines a basic OpenUI5 view using the sap.m namespace for UI elements and sap.ui.core.mvc for MVC-related elements. The root element is mvc:View which declares the necessary XML namespaces.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-xml-views-typescript-6c66ed8.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Creating UI5 Test Suite Page (testsuite.qunit.html)\nDESCRIPTION: This HTML snippet creates the test suite page for OpenUI5 tests. It uses the `sap/ui/test/starter/createSuite.js` script to initialize the test suite, configured via `data-sap-ui-testsuite` and `data-sap-ui-resource-roots` attributes. The `data-sap-ui-resource-roots` attribute registers the project-specific namespaces. Replace `<NAMESPACE>` and `<NAMESPACE-WITH-DOTS>` with your project's namespace.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/concept-and-basic-setup-22f50c0.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>QUnit test suite for NAMESPACE</title>\n    <script\n        src=\"../resources/sap/ui/test/starter/createSuite.js\"\n        data-sap-ui-testsuite=\"test-resources/<NAMESPACE>/testsuite.qunit\"\n        data-sap-ui-resource-roots='{\n            \"test-resources.<NAMESPACE-WITH-DOTS>\": \"./\"\n        }'\n    ></script>\n</head>\n<body>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Unsupported: Variable for Library Name\nDESCRIPTION: This example demonstrates that using a variable for the library name is not supported when initializing a library using `sap/ui/core/Lib`. The library name must be a literal string.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst key = \"name\";\nsap.ui.define([\n    \"sap/ui/core/Lib\"\n], (Library) => {\n    \"use strict\";\n    const thisLib = Library.init({{\n        [key]: \"my.lib\"\n    }});\n});\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:filterable to NonFilterableProperties\nDESCRIPTION: This snippet demonstrates the transformation of `sap:filterable = \"false\"` for properties PropA and PropC to a `NonFilterableProperties` annotation on the EntitySet, which prevents filtering on those specific properties.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_49\n\nLANGUAGE: xml\nCODE:\n```\nsap:filterable = \"false\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Capabilities.V1.FilterRestrictions\":\n{ \"NonFilterableProperties\" : [\n{ \"PropertyPath\" : \"PropA \" },\n{ \"PropertyPath\" : \"PropC \" }] }\n```\n\n----------------------------------------\n\nTITLE: Defining title for Component Target\nDESCRIPTION: This code snippet demonstrates how to define a static title for a component target. This component is loaded into a target, and it utilizes the `usage` property to specify a component to use.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-the-title-property-in-targets-1238d70.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    ...,\n    \"routes\": [{\n        \"pattern\": \"attachment/{id}\",\n        \"name\": \"Attachment\",\n        \"target\": {\n          \"name\": \"attachment\",\n          \"prefix\": \"atch\"\n        }\n    }],\n    \"targets\": {\n        \"attachment\": {\n            \"type\": \"Component\",\n            \"usage\": \"productComponent\",\n            \"title\": \"Attachment\"\n        }\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Two-Way Binding - Component.js\nDESCRIPTION: This JavaScript code modifies the `Component.js` file to enable two-way data binding for the model.  Setting `this.getModel().setDefaultBindingMode(\"TwoWay\")` ensures that changes made in the view (e.g., toggling the flag button) are automatically propagated back to the underlying data model. The init function is extended to set the binding mode after the base component is initialized.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-adding-a-flag-button-69a25bf.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t// …\n], function (UIComponent, ResourceModel, models) {\n\t\"use strict\";\n\treturn UIComponent.extend(\"sap.ui.demo.bulletinboard.Component\", {\n\t// …\n\t\tinit: function () {\n\t\t\t// call the base component's init function\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// allow saving values to the OData model\n\t\t\tthis.getModel().setDefaultBindingMode(\"TwoWay\");\n\n\t\t\t// …\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining UI Structure with Controls - XML\nDESCRIPTION: This XML snippet defines the structure of the App view, including the second page with various UI controls such as BlockLayout, Icon, Panel, Switch, Text, and Link. It uses data binding to display features and handles the switch change event.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-go-073d107.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.quickstart.App\"\n\tdisplayBlock=\"true\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:l=\"sap.ui.layout\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:tnt=\"sap.tnt\">\n\t<App id=\"app\">\n\t\t<Page title=\"My App\">\n\t\t\t<Button\n\t\t\t\ticon=\"sap-icon://sap-ui5\"\n\t\t\t\ttext=\"Go!\"\n\t\t\t\tpress=\".onPress\"\n\t\t\t\ttype=\"Emphasized\"\n\t\t\t\tclass=\"sapUiSmallMargin\"/>\n\t\t</Page>\n\t\t<Page id=\"intro\" title=\"Create Enterprise-Ready Web Apps with Ease\">\n\t\t\t<l:BlockLayout background=\"Light\">\n\t\t\t\t<l:BlockLayoutRow>\n\t\t\t\t\t<l:BlockLayoutCell>\n\t\t\t\t\t\t<core:Icon color=\"#1873B4\" src=\"sap-icon://sap-ui5\" size=\"20rem\" class=\"sapUiMediumMarginBottom\" width=\"100%\"/>\n\t\t\t\t\t\t<Title level=\"H1\" titleStyle=\"H1\" text=\"This is UI5!\" width=\"100%\" textAlign=\"Center\"/>\n\t\t\t\t\t</l:BlockLayoutCell>\n\t\t\t\t</l:BlockLayoutRow>\n\t\t\t\t<l:BlockLayoutRow>\n\t\t\t\t\t<l:BlockLayoutCell>\n\t\t\t\t\t\t<FlexBox items=\"{/features}\" justifyContent=\"Center\" wrap=\"Wrap\" class=\"sapUiSmallMarginBottom\">\n\t\t\t\t\t\t\t<tnt:InfoLabel text=\"{}\" class=\"sapUiSmallMarginTop sapUiSmallMarginEnd\"/>\n\t\t\t\t\t\t</FlexBox>\n\t\t\t\t\t</l:BlockLayoutCell>\n\t\t\t\t</l:BlockLayoutRow>\n\n\t\t\t\t<l:BlockLayoutRow>\n\t\t\t\t\t<l:BlockLayoutCell>\n\t\t\t\t\t\t<Panel headerText=\"Are you ready?\" expandable=\"true\">\n\t\t\t\t\t\t\t<Switch change=\".onChange\" customTextOn=\"yes\" customTextOff=\"no\"/>\n\t\t\t\t\t\t\t<l:HorizontalLayout id=\"ready\" visible=\"false\" class=\"sapUiSmallMargin\">\n\t\t\t\t\t\t\t\t<Text text=\"Ok, let's get you started!\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t\t\t\t\t<Link text=\"Learn more\" href=\"https://sdk.openui5.org/\"/>\n\t\t\t\t\t\t\t</l:HorizontalLayout>\n\t\t\t\t\t\t</Panel>\n\t\t\t\t\t</l:BlockLayoutCell>\n\t\t\t\t</l:BlockLayoutRow>\n\t\t\t</l:BlockLayout>\n\t\t</Page>\n\n\t</App>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Configuring Annotation Files in manifest.json - JavaScript\nDESCRIPTION: Demonstrates how to configure annotation files within the `manifest.json` file for an OpenUI5 application using the OData V4 model. It defines data sources, including a default OData service and a local annotation file, and specifies the relationship between them. This allows the application to augment the service metadata with custom annotations defined in the local XML file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-annotation-files-fd715d9.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"dataSources\" : {\n    \"default\" : {\n        \"uri\" : \"/sap/opu/odata4/IWBEP/V4_SAMPLE/default/IWBEP/V4_GW_SAMPLE_BASIC/0001/\",\n        \"type\" : \"OData\",\n        \"settings\" : {\n            \"annotations\": [\"localAnnotations\"],\n            \"odataVersion\" : \"4.0\"\n        }\n    },\n    \"localAnnotations\": {\n        \"uri\": \"data/annotations.xml\",\n        \"type\": \"ODataAnnotation\"\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Using Matcher Pipeline in OPA\nDESCRIPTION: This snippet demonstrates a matcher pipeline in OPA where the first matcher returns the jQuery instance of a `sap.m.StandardListItem` if it exists. The second matcher then checks if this jQuery instance has the class \"specialItem\". The matching jQuery instance is then used to trigger a click. Opa5 is used for control waiting and interaction.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn new Opa5().waitFor({\n    controlType : \"sap.m.StandardListItem\",\n    matchers : [\n        function(oItem) {\n            // returns jQuery instance of control\n            return oItem.$().length && oItem.$();\n        },\n        function($item) {\n        // $item is the matching control's jQuery instance\n            return $item.hasClass(\"specialItem\");\n        }\n    ],\n    actions : function ($item) {\n        // $item is the matching control's jQuery instance\n        $item.trigger(\"click\");\n    },\n    errorMessage: \"No special items found\"\n});\n```\n\n----------------------------------------\n\nTITLE: Preprocessor Integration with XML View Cache\nDESCRIPTION: This code snippet shows how to implement a preprocessor that influences the creation of views.  The `getCacheKey` function is used to check if the preprocessor triggers changes that invalidate the cache.  It returns a cache key or a promise that resolves a cache key.  The code defines a `TestPreprocessor` object with `process` and `getCacheKey` functions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-view-cache-3d85d5e.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example preprocessor implementation\nsap.ui.define(['sap/ui/base/Object'],\n\tfunction(BaseObject) {\n\t\t'use strict';\n\n\t\tvar TestPreprocessor = BaseObject.extend(\"smy.TestPreprocessor\", {});\n\n\t\tTestPreprocessor.process = function(vSource, sCaller, mSettings) {\n\t\t\treturn doSomething(vSource));\n\t\t};\n\n\t\tTestPreprocessor.getCacheKey = function(oViewInfo) {\n\t\t\treturn sCacheKey;\n\t\t};\n\n\t\treturn TestPreprocessor;\n\n\t});\n```\n\n----------------------------------------\n\nTITLE: OData Metadata Definition in XML\nDESCRIPTION: This XML file defines the OData service metadata, including entity types, properties, and entity sets. It provides the structure and schema for the mock OData service. The `Meetup` entity type and related properties are defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-creating-a-mock-server-to-simulate-data-50897de.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<edmx:Edmx Version=\"1.0\"\n    xmlns:edmx=\"http://schemas.microsoft.com/ado/2007/06/edmx\">\n    <edmx:DataServices\n        xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\" m:DataServiceVersion=\"1.0\">\n        <Schema Namespace=\"Meetup.Models\"\n            xmlns:d=\"http://schemas.microsoft.com/ado/2007/08/dataservices\"\n            xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\"\n            xmlns=\"http://schemas.microsoft.com/ado/2006/04/edm\">\n            <EntityType Name=\"Meetup\">\n                <Key>\n                    <PropertyRef Name=\"MeetupID\" />\n                </Key>\n                <Property Name=\"MeetupID\" Type=\"Edm.Int32\" Nullable=\"false\" />\n                <Property Name=\"Title\" Type=\"Edm.String\" Nullable=\"true\" />\n                <Property Name=\"EventDate\" Type=\"Edm.DateTime\" Nullable=\"false\" />\n                <Property Name=\"Description\" Type=\"Edm.String\" Nullable=\"true\" />\n                <Property Name=\"HostedBy\" Type=\"Edm.String\" Nullable=\"true\" />\n                <Property Name=\"ContactPhone\" Type=\"Edm.String\" Nullable=\"true\" />\n                <Property Name=\"Address\" Type=\"Edm.String\" Nullable=\"true\" />\n                <Property Name=\"Country\" Type=\"Edm.String\" Nullable=\"true\" />\n                <Property Name=\"Latitude\" Type=\"Edm.Double\" Nullable=\"false\" />\n                <Property Name=\"Longitude\" Type=\"Edm.Double\" Nullable=\"false\" />\n                <Property Name=\"HostedById\" Type=\"Edm.String\" Nullable=\"true\" />\n                <Property Name=\"Location\" Type=\"Meetup.Models.LocationDetail\" Nullable=\"false\" />\n            </EntityType>\n            <ComplexType Name=\"LocationDetail\" />\n            <EntityContainer Name=\"Meetups\" m:IsDefaultEntityContainer=\"true\">\n                <EntitySet Name=\"Meetups\" EntityType=\"Meetup.Models.Meetup\" />\n                <FunctionImport Name=\"FindUpcomingMeetups\" EntitySet=\"Meetups\" ReturnType=\"Collection(Meetup.Models.Meetup)\" m:HttpMethod=\"GET\" />\n            </EntityContainer>\n        </Schema>\n    </edmx:DataServices>\n</edmx:Edmx>\n```\n\n----------------------------------------\n\nTITLE: Defining App View with Shell Control - XML\nDESCRIPTION: This XML snippet defines the main application view. It uses the `sap.m.Shell` control as the root element, which contains an `sap.m.App` control.  Inside the `App`, there's a `sap.m.Page` containing a `sap.m.Panel` with a button and an input field. The button is bound to the `.onShowHello` event and the input is bound to the `/recipient/name` model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-12-shell-control-as-container-4df1d91.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n\t<Shell>\n\t\t<App>\n\t\t\t<pages>\n\t\t\t\t<Page title=\"{i18n>homePageTitle}\">\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<Panel\n\t\t\t\t\t\t\theaderText=\"{i18n>helloPanelTitle}\">\n\t\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttext=\"{i18n>showHelloButtonText}\"\n\t\t\t\t\t\t\t\t\tpress=\".onShowHello\"/>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tvalue=\"{/recipient/name}\"\n\t\t\t\t\t\t\t\t\tdescription=\"Hello {/recipient/name}\"\n\t\t\t\t\t\t\t\t\tvalueLiveUpdate=\"true\"\n\t\t\t\t\t\t\t\t\twidth=\"60%\"/>\n\t\t\t\t\t\t\t</content>\n\t\t\t\t\t\t</Panel>\n\t\t\t\t\t</content>\n\t\t\t\t</Page>\n\t\t\t</pages>\n\t\t</App>\n\t</Shell>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Handling single invalid grouping separator with NumberFormat\nDESCRIPTION: Illustrates a scenario where a number contains a single grouping separator but misses additional separators. In this case, the number is parsed successfully, although it may hint at a confusion between decimal and grouping separators.  Requires `NumberFormat` from `sap/ui/core/format/NumberFormat`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/number-format-91f2f28.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\noFloatFormat.parse(\"1234,567\"); // 1234567\n```\n\n----------------------------------------\n\nTITLE: Add Flagged Column and ToggleButton - Worklist.view.xml\nDESCRIPTION: This XML code updates the `Worklist.view.xml` file to include a new column for the flagged state.  A `sap.m.ToggleButton` control is added within this column, bound to the `Flagged` field in the model using the custom `FlaggedType` data type. This allows the user to toggle the flagged state of a post. It also includes a tooltip and a flag icon to visually represent the button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-adding-a-flag-button-69a25bf.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Table …>\n\t…\n\t<columns>\n\t\t…\n\t\t<Column width=\"33%\" id=\"unitNumberColumn\" hAlign=\"End\" vAlign=\"Middle\">\n\t\t\t<Text text=\"{i18n>TableUnitNumberColumnTitle}\" id=\"unitNumberColumnTitle\"/>\n\t\t</Column>\n\t\t<Column width=\"80px\" id=\"flaggedColumn\" demandPopin=\"true\" vAlign=\"Middle\"/>\n\n\t</columns>\n\t<items>\n\t\t<ColumnListItem vAlign=\"Middle\">\n\t\t\t<cells>\n\t\t\t\t…\n\t\t\t\t<ObjectNumber… />\n\t\t\t\t<ToggleButton\n\t\t\t\t\tid=\"flaggedButton\"\n\t\t\t\t\ttooltip=\"{i18n>flaggedTooltip}\"\n\t\t\t\t\ticon=\"sap-icon://flag\"\n\t\t\t\t\tpressed=\"{\n\t\t\t\t\t\tpath: 'Flagged',\n\t\t\t\t\t\ttype: '.types.flagged'\n\t\t\t\t\t}\"\n\t\t\t\t\tclass=\"sapUiMediumMarginBeginEnd\"/>\n\n\t\t\t</cells>\n\t\t</ColumnListItem>\n\t</items>\n</Table>\n…\n```\n\n----------------------------------------\n\nTITLE: XML View with Lazy Instantiation (Improved)\nDESCRIPTION: This XML view defines only the initially visible display panel.  The edit panel is moved to a separate fragment and is loaded only when needed. Requires `sap/ui/core/mvc/View` and `sap.m` namespace definitions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/performance-issues-966d67c.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"my.own.controller\">\n\t<Page>\n            \n\t\t<!-- only the initially needed display panel -->\n\t\t<Panel id=\"displayPanel\" headerText=\"Display Data\">\n\t\t\t<Table...>\n\t\t</Panel>\n      \n\t\t<Button text=\"Edit\" press=\"toEditMode\"/>\n\t</Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding Margin Classes Programmatically with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to add a margin class to a control (e.g., a Panel) programmatically using the 'addStyleClass' method.  It also illustrates how to set the control's width to 'auto' using the 'setWidth' method to properly apply horizontal margins.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-predefined-css-margin-classes-777168f.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmyPanel.addStyleClass('sapUiLargeMargin')\nmyPanel.setWidth('auto')\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source in manifest.json using Remote Destination - JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure a data source in the `manifest.json` file to use a remote destination. It replaces the actual URI with a reference to a destination, enabling the application to access the remote OData service without violating the same-origin policy when deployed in SAP Business Application Studio or SAP BTP.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/request-fails-due-to-same-origin-policy-cross-origin-resource-sharing-cors-5bb388f.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"_version\": \"1.59.0\",\n  \"sap.app\": {\n\t...\n\t\"dataSources\": {\n\t  \"invoiceRemote\": {\n\t\t\"uri\": \"/V2/Northwind/Northwind.svc/\",\n\t\t\"type\": \"OData\",\n\t\t\"settings\": {\n\t\t  \"odataVersion\": \"2.0\"\n\t\t}\n\t  }\n\t}\n  },\n  \"sap.ui\": {\n\t...\n  },\n  \"sap.ui5\": {\n\t...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Bootstrap and Body Definition\nDESCRIPTION: This HTML code bootstraps the OpenUI5 framework and defines a simple webpage structure. It includes a title, a bootstrap script that loads the sap.m and sap.ui.layout libraries from the OpenUI5 SDK, and a link to an external JavaScript file (WebsiteCode.js).  The body contains a div with the ID 'uiArea' where the UI elements will be placed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/basic-example-how-to-use-gherkin-4b0c519.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <title>Using Gherkin with OPA5 Website</title>\n    <script\n      id=\"sap-ui-bootstrap\"\n      src=\"https://sdk.openui5.org/nightly/resources/sap-ui-core.js\"\n      data-sap-ui-libs=\"sap.m,sap.ui.layout\"\n    ></script>\n    <script src=\"WebsiteCode.js\"></script>\n  </head>\n  <body class=\"sapUiBody\">\n    <div id=\"uiArea\"></div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source URI with Local Proxy in manifest.json\nDESCRIPTION: This JSON snippet shows how to configure the `uri` property in the `manifest.json` file to use a local proxy server for accessing a remote OData service. The `uri` points to the local proxy (`http://localhost:8081`) followed by the remote service URL (`https://services.odata.org/V2/Northwind/Northwind.svc/`). This allows the application to bypass CORS restrictions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/request-fails-due-to-same-origin-policy-cross-origin-resource-sharing-cors-672301f.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"sap.app\": {\n\t\t...\n\t\t\"dataSources\": {\n\t\t\t\"northwind\": {\n\t\t\t\t\"uri\": \"http://localhost:8081/https://services.odata.org/V2/Northwind/Northwind.svc/\",\n\n\t\t\t\t\"type\": \"OData\",\n\t\t\t\t\"settings\": {\n\t\t\t\t\t\"odataVersion\": \"2.0\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: i18n Model Configuration in manifest.json\nDESCRIPTION: This code snippet shows how to configure the i18n model in the `manifest.json` file to specify supported locales and a fallback locale. The `supportedLocales` array lists the languages for which i18n files are available. The `fallbackLocale` specifies the default language to use if a translation for the current locale is not found. This ensures proper internationalization support for the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/performance-speed-up-your-app-408b40e.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"sap.ui5\": {\n\t\t\"models\": {\n\t\t\t\"i18n\": {\n\t\t\t\t\"type\": \"sap.ui.model.resource.ResourceModel\",\n\t\t\t\t\"settings\": {\n\t\t\t\t\t\"bundleName\": \"sap.ui.demo.todo.i18n.i18n\",\n\t\t\t\t\t\"supportedLocales\": [\"en\", \"de\"],\n\t\t\t\t\t\"fallbackLocale\": \"en\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Unsupported: Spread Element for Library Name\nDESCRIPTION: This code illustrates that using a spread element for the library name is not supported when initializing a library.  The library name must be explicitly defined as a literal.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst mylib = {{\n    name: \"my.lib\"\n}};\nsap.ui.define([\n    \"sap/ui/core/Lib\"\n], (Library) => {\n    \"use strict\";\n    const thisLib = Library.init({{\n        ...mylib\n    }});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Table Rows with Data Binding - XML\nDESCRIPTION: This XML snippet defines the structure of a table row in an OpenUI5 application.  It configures data binding for various UI elements within the row, including an ObjectIdentifier, Text, and ObjectNumber controls.  The data is bound to properties like ProductName, Supplier/CompanyName, UnitPrice, UnitsOnOrder, and UnitsInStock, using formatters for specific fields. The `press` event on the `ColumnListItem` navigates to a detailed view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-extending-the-worklist-table-84100bc.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<items>\n    <ColumnListItem\n        type=\"Navigation\"\n        press=\"onPress\">\n        <cells>\n         <ObjectIdentifier\n            title=\"{ProductName}\"/>\n         <Text text = \"{Supplier/CompanyName}\"/>\n         <ObjectNumber\n            unit=\"EUR\"\n            number=\"{\n               path: 'UnitPrice',\n               formatter: '.formatter.numberUnit'\n            }\"/>\n         <ObjectNumber\n            number=\"{UnitsOnOrder}\"\n            unit=\"PC\"/>\n         <ObjectNumber\n            number=\"{UnitsInStock}\"\n            unit=\"PC\"\n            state=\"{\n               path: 'UnitsInStock',\n               formatter: '.formatter.quantityState'\n            }\"/>\n\n      </cells>\n   </ColumnListItem>\n</items>\n```\n\n----------------------------------------\n\nTITLE: Setting Compact Density for a Dialog - OpenUI5\nDESCRIPTION: This snippet illustrates how to set the 'Compact' density for a `sap.m.Dialog` in JavaScript. It creates a new `Dialog` instance and then uses the `addStyleClass` method to apply the `sapUiSizeCompact` CSS class. This ensures the dialog's contents are rendered with the 'Compact' density. The `Dialog` class is required from the 'sap/m/Dialog' module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/how-to-use-densities-for-controls-13e6f3b.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// \"Dialog\" required from module \"sap/m/Dialog\"\nvar myDialog = new Dialog({.....}).addStyleClass(\"sapUiSizeCompact\");\nmyDialog.open();\n```\n\n----------------------------------------\n\nTITLE: Embedding Native HTML within XML View\nDESCRIPTION: Demonstrates how to embed a native HTML button within an OpenUI5 XML view using the XHTML namespace. It shows the XML view structure and the integration of the HTML element alongside a standard OpenUI5 Button. The xmlns:html namespace is essential for this to work.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-native-html-in-xml-views-deprecated-be54950.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View controllerName=\"module:sap/hcm/Address\" xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\"\n           xmlns:html=\"http://www.w3.org/1999/xhtml\">\n   <Panel>\n      <Button text=\"Press Me. I am an SAPUI5 Button\"/>\n      <html:button>No, press me. I am native HTML Button.</html:button>\n   </Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Correct Button Tag in XML View - OpenUI5\nDESCRIPTION: This example demonstrates the correct way to define a button control in an XML view. Control tags should always start with a capital letter after the namespace. This ensures the correct loading and rendering of the control within the OpenUI5 application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/an-empty-page-comes-up-55db2bc.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<B>Button text=\"Click me\" </B>\n```\n\n----------------------------------------\n\nTITLE: Defining Submit Mode for Application Groups in manifest.json\nDESCRIPTION: This code snippet shows how to define the submit mode for application group IDs within the `manifest.json` file.  It sets the submit mode to `Auto` for both `fastGroup` and `slowGroup`. This allows separating requests based on expected processing time on the server.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/batch-control-74142a3.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"models\" : {\n    \"\" : {\n        \"dataSource\" : \"default\",\n        \"settings\" : {\n            \"operationMode\" : \"Server\",\n            \"synchronizationMode\" : \"None\",\n            \"groupProperties\" : {\n                \"fastGroup\" : {\"submit\" : \"Auto\"},\n                \"slowGroup\" : {\"submit\" : \"Auto\"}\n            }\n        }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Control by ID in OPA5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to retrieve a control by its ID using OPA5's `waitFor` function. It searches for a control with the specified ID and view name. The `success` function is executed when the control is found, and an assertion is performed to check if the control is visible.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew sap.ui.test.Opa5().waitFor({\n    id : \"page-title\",\n    viewName : \"Category\",\n    viewNamespace : \"my.Application.\",\n    success : function (oTitle) {\n        Opa5.assert.ok(oTitle.getVisible(), \"the title was visible\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using StandardListItem in OpenUI5 List\nDESCRIPTION: This example demonstrates how to use the `StandardListItem` control within an OpenUI5 `List` to display a title. The `StandardListItem` inherits from `ListItemBase` and provides the `title`, `description`, and `icon` properties for showing information.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/lists-1da1581.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n    \n    <List headerText=\"Products\"\n        items=\"{/ProductCollection}\">\n        <items>\n          <StandardListItem\n            title=\"{Name}\" />\n        </items>\n      </List>\n    \n```\n\n----------------------------------------\n\nTITLE: Testing Model Binding with UI Update - JavaScript\nDESCRIPTION: This QUnit test demonstrates testing model binding using a mock server and ensuring the UI is updated using `nextUIUpdate`. It creates a label bound to a model property, places it on the page, and waits for the UI to update.  It uses `sinon.clock.tick` to advance the clock and trigger the server response. Then, it asserts that the label's text is as expected. It depends on the 'sap/m/Label' and 'sap/ui/test/utils/nextUIUpdate' modules.  It also uses sinon for clock control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-testing-controls-with-qunit-0ddcc60.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Label\" required from module \"sap/m/Label\"\n// \"nextUIUpdate\" required from module \"sap/ui/test/utils/nextUIUpdate\"\n\n//Your test:\nQUnit.test(\"Should do something with the model\", async(assert) => {\n    // Arrange\n    const oModel = createODataModel();\n    const oMockServer = startMockServer(50);\n\n    // System under Test\n    const oLabel = new Label({\n        text : \"{/myProperty}\"\n    });\n\n    oLabel.placeAt(\"qunit-fixture\");\n    await nextUIUpdate();\n\n    // Act - trigger the request\n    sinon.clock.tick(50);\n\n    // Assert\n    assert.strictEqual(\"myExpected\", oLabel.getText(), \"The expected text was present\");\n\n    // Cleanup\n    oModel.destroy();\n    oMockServer.stop();\n    sinon.clock.reset() \n});\n```\n\n----------------------------------------\n\nTITLE: Transforming sap:deletable to DeleteRestrictions\nDESCRIPTION: This snippet demonstrates how the `sap:deletable` annotation in OData V2 is transformed to `Org.OData.Capabilities.V1.DeleteRestrictions` in OData V4. The `Deletable` property is set to `false` when `sap:deletable` is `false`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\nsap:deletable = \"false\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Capabilities.V1.DeleteRestrictions\": { \"Deletable\" : { \"Bool\" : \"false\" } }\n```\n\n----------------------------------------\n\nTITLE: OData V4 Annotations Example - JSON\nDESCRIPTION: This code illustrates how OData V4 annotations are merged into the existing ODataMetadata structure. It includes extensions, constraints like nullable and maxLength, and inlined V4 annotations such as Org.OData.Measures.V1.Unit and com.sap.vocabularies.UI.v1.Identification. Understanding this structure is essential for XML templating.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_33\n\nLANGUAGE: JSON\nCODE:\n```\n\"dataServices\" : {\n    \"schema\" : [{\n        \"namespace\" : \"GWSAMPLE_BASIC\",\n        \"entityType\" : [{\n            \"name\" : \"Product\",\n            \"property\" : [{\n                \"name\" : \"ProductID\",\n                \"type\" : \"Edm.String\",\n                \"nullable\" : \"false\",\n                \"maxLength\" : \"10\"\n            }, {\n                \"name\" : \"SupplierName\",\n                \"type\" : \"Edm.String\",\n                \"maxLength\" : \"80\",\n                \"extensions\" : [{\n                  \"name\" : \"label\",\n                  \"value\" : \"Company Name\",\n                  \"namespace\" : \"http://www.sap.com/Protocols/SAPData\"\n                }, {\n                  \"name\" : \"creatable\",\n                  \"value\" : \"false\",\n                  \"namespace\" : \"http://www.sap.com/Protocols/SAPData\"\n                }, {\n                  \"name\" : \"updatable\",\n                  \"value\" : \"false\",\n                  \"namespace\" : \"http://www.sap.com/Protocols/SAPData\"\n                }],\n                \"sap:label\" : \"Company Name\",\n                \"sap:creatable\" : \"false\",\n                \"sap:updatable\" : \"false\"\n                \"Org.OData.Core.V1.Computed\" : {\n                    \"Bool\" : \"true\"\n                }\n            }, {\n                \"name\" : \"WeightMeasure\",\n                \"type\" : \"Edm.Decimal\",\n                \"precision\" : \"13\",\n                \"scale\" : \"3\",\n                \"Org.OData.Measures.V1.Unit\" : {\n                    \"Path\" : \"WeightUnit\"\n                }\n            }, {\n                \"name\" : \"WeightUnit\",\n                \"type\" : \"Edm.String\",\n                \"maxLength\" : \"3\"\n            }],\n            \"com.sap.vocabularies.UI.v1.DataPoint\" : {\n                \"Value\" : {\n                    \"Path\" : \"WeightMeasure\",\n                    \"EdmType\" : \"Edm.Decimal\"\n                }\n            },\n            \"com.sap.vocabularies.UI.v1.Identification\" : [{\n                \"Value\" : {\"Path\" : \"ProductID\"}\n            }, {\n                \"Value\" : {\"Path\" : \"SupplierName\"}\n            }, {\n                \"Value\" : {\"Path\" : \"WeightMeasure\"}\n            }]\n        }]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Bound Action on Single Entity - JavaScript\nDESCRIPTION: This snippet shows how to invoke a bound action on a single entity or navigation property using a relative binding in OpenUI5. It retrieves the selected sales order context from a table, binds the 'InvoiceCreated' action to it, and invokes the action. A message toast is displayed on success, and an error message box appears if the invocation fails.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oModel = this.getView().getModel(),\n    oTable = this.getView().byId(\"SalesOrders\"),\n    oSalesOrderContext = oTable.getSelectedItem().getBindingContext(),\n    oAction = oModel.bindContext(\"name.space.InvoiceCreated(...)\", oSalesOrderContext);\n \noAction.invoke().then(\n    function () {\n        MessageToast.show(\"Invoice created for sales order \" + oSalesOrderContext.getProperty(\"SalesOrderID\"));\n    },\n    function (oError) {\n        MessageBox.alert(oError.message, {\n            icon : MessageBox.Icon.ERROR,\n            title : \"Error\"});\n        });\n    }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Controller Extensions Directly in Controllers\nDESCRIPTION: This code shows how to override a controller extension's methods directly within the controller. It uses the `override` method of the extension to provide custom implementations for specific hooks or methods.  This allows inline customization of extension behavior.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-controller-extension-21515f0.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define(['sap/ui/core/mvc/Controller', 'my/extension/SampleExtension'],\n    function(Controller, SampleExtension) {\n    \"use strict\";\n    return MainController = Controller.extend(\"sample.Main\", {\n        //inline override of an extension. E.g. to provide a hook implementation\n        sample: SampleExtension.override({\n            someHook: function() {},\n            someOtherMethod: function() {}\n        }),\n        onLifecycleHook: function() {\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Model for Data Binding (OpenUI5)\nDESCRIPTION: This JSON file defines the data structure used for data binding in the OpenUI5 application. It includes properties for the first name, last name, enablement status, and panel header text. These properties are accessed using binding expressions in the XML view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-two-way-data-binding-c72b922.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"firstName\" : \"Harry\",\n\t\"lastName\" : \"Hawk\",\n\t\"enabled\" : true,\n\t\"panelHeaderText\" : \"Data Binding Basics\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Hyphenation with wrappingType in Label - JavaScript\nDESCRIPTION: This code snippet shows how to enable hyphenation for a `sap.m.Label` control by setting the `wrapping` property to `true` and the `wrappingType` property to `WrappingType.Hyphenated`. It requires importing `Label` from `sap/m/Label` and `WrappingType` from `sap/m/library`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/hyphenation-for-text-controls-6322164.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Label required from \"sap/m/Label\"\n// WrappingType required from \"sap/m/library\"\n\nnew Label({\n    text: \"Liquiditätspositionshierarchie Datenänderungsbelege\",\n    wrapping: true,\n    wrappingType: WrappingType.Hyphenated\n});\n```\n\n----------------------------------------\n\nTITLE: Declarative Routing Title Configuration in manifest.json\nDESCRIPTION: This JSON snippet demonstrates how to declaratively define titles for routes and targets in the `manifest.json` file using the `title` and `titleTarget` properties.  It configures routing for a product parts view and sets titles for the 'Product' and 'Product Parts' targets. Requires OpenUI5 version 1.42 or later.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/migration-information-for-upgrading-the-manifest-file-a110f76.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t...,\n\t\"routes\": [{\n\t\t\"pattern\": \"product/{id}/parts\",\n\t\t\"name\": \"ProductParts\",\n\t\t\t\"target\": [\"product\", \"productParts\"],\n\t\t\"titleTarget\": \"productParts\"\n\n\t}],\n\t\"targets\": {\n\t\t\"product\": {\n\t\t\t\"type\": \"View\",\n\t\t\t\"path\": \"shop.products\",\n\t\t\t\"name\": \"Product\",\n\t\t\t\"title\": \"Product\"\n\t\t},\n\t\t\"productParts\": {\n\t\t\t\"type\": \"View\",\n\t\t\t\"path\": \"shop.products\",\n\t\t\t\"name\": \"Product\",\n\t\t\t\"title\": \"Product Parts\"\n\t\t}\n\t},\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript List Binding - unbindAggregation Method (OpenUI5)\nDESCRIPTION: This JavaScript code shows how to remove a list binding using the `unbindAggregation` method. The \"items\" aggregation of the `ComboBox` is unbound, optionally keeping the items instead of destroying them.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/list-binding-aggregation-binding-91f0577.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\noComboBox.unbindAggregation(\"items\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Freestyle Card with OpenUI5 XML\nDESCRIPTION: This code snippet demonstrates how to create a `sap.f.Card` using XML view in OpenUI5. It includes a header (using `card:Header`) and content area with a `List` control displaying product items. The `List` uses data binding to display item properties such as title, subtitle, and revenue with status indicators.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/cards-5b46b03.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<f:Card\n\tclass=\"sapUiMediumMargin\"\n\twidth=\"300px\">\n\t<f:header>\n\t\t<card:Header\n\t\t\ttitle=\"Project Cloud Transformation\"\n\t\t\tsubtitle=\"Revenue per Product | EUR\"/>\n\t</f:header>\n\t<f:content>\n\t\t<List\n\t\t\tshowSeparators=\"None\"\n\t\t\titems=\"{path: '/productItems'}\" >\n\t\t\t<CustomListItem>\n\t\t\t<HBox\n\t\t\t\t alignItems=\"Center\"\n\t\t\t\tjustifyContent=\"SpaceBetween\">\n\t\t\t\t<VBox class=\"sapUiSmallMarginBegin sapUiSmallMarginTopBottom\" >\n\t\t\t\t\t<Title level=\"H3\" text=\"{title}\" />\n\t\t\t\t\t\t<Text text=\"{subtitle}\"/>\n\t\t\t\t</VBox>\n\t\t\t\t<tnt:InfoLabel\n\t\t\t\t\tclass=\"sapUiTinyMargin\"\n\t\t\t\t\ttext=\"{revenue}\"\n\t\t\t\t\tcolorScheme= \"{statusSchema}\"/>\n\t\t\t</HBox>\n\t\t\t</CustomListItem>\n\t\t</List>\n\t</f:content>\n</f:Card>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Favicon Theme via API in OpenUI5\nDESCRIPTION: This snippet demonstrates how to set the favicon for an OpenUI5 application using the `Theming.setFavicon` API.  It defines whether a custom theme's favicon should be used or a specific favicon path. The input is a boolean or a relative path to the favicon.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-options-and-url-parameters-91f2d03.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[`Theming.setFavicon`](https://ui5.sap.com/#/api/module:sap/ui/core/Theming%23methods/sap/ui/core/Theming.setFavicon)\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Annotations in INI Files\nDESCRIPTION: This code snippet illustrates the different formats for annotating strings within an INI file for translation purposes. It shows how to specify text types (e.g., XMSG, XBUT), length restrictions, and notes for translators to provide context for the strings being translated. These annotations are crucial for ensuring accurate and contextually appropriate translations in OpenUI5 applications.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/annotations-in-translation-files-8310398.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n#<SAP-Text-Type>\n#<SAP-Text-Type>:<Note for translator>\n#<SAP-Text-Type>,<Length-Restriction>\n#<SAP-Text-Type>,<Length-Restriction>:<Note for translator>\n```\n\n----------------------------------------\n\nTITLE: Modifying index.html: Adding mock data link\nDESCRIPTION: This snippet modifies the `index.html` file to include a reference to mock data. This mock data is used for development and testing purposes. The `data-sap-ui-resourceroots` attribute is updated to point to the mock data location.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-using-dynamic-page-for-the-list-view-0830bce.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\t...\n\t<script id=\"sap-ui-bootstrap\"\n\t\tsrc=\"resources/sap-ui-core.js\"\n\t\tdata-sap-ui-theme=\"sap_horizon\"\n\t\tdata-sap-ui-resourceroots='{\n\t\t\t\"sap.ui.demo.fcl\": \"./\",\n\t\t\t\"sap.ui.demo.mock\": \"test-resources/sap/ui/documentation/sdk/\"\n\t\t}'\n\t\tdata-sap-ui-oninit=\"module:sap/ui/core/ComponentSupport\"\n\t\tdata-sap-ui-compatversion=\"edge\"\n\t\tdata-sap-ui-async=\"true\"\n\t\tdata-sap-ui-frameoptions=\"trusted\">\n\t</script>\n\t...\n```\n\n----------------------------------------\n\nTITLE: Initializing DateTime type with different source and output patterns\nDESCRIPTION: Initializes the `DateTime` type with a source pattern \"dd.MM.yyyy HH:mm:ss\" and an output pattern \"MMMM d, yyyy, HH:mm:ss.SSS\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-datetime-91f3070.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The source value is given as string in \"dd.MM.yyyy HH:mm:ss\" format (no timezone given). The used output pattern is \"MMMM d, yyyy, HH:mm:ss.SSS\": e.g. August 22, 2043, 18:48:48.374\noType = new TypeDateTime({source: {pattern: \"dd.MM.yyyy HH:mm:ss\"}, pattern: \"MMMM d, yyyy, HH:mm:ss.SSS\"});\n```\n\n----------------------------------------\n\nTITLE: Defining Worklist OPA5 Page Object\nDESCRIPTION: This code defines an OPA5 page object named `onTheWorklistPage` for the Worklist view. It encapsulates actions and assertions related to the Worklist view, making it easier to write integration tests. It uses `sap.ui.define` to manage dependencies like `Opa5`, `AggregationLengthEquals`, `I18NText`, and `Press`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-a-first-opa-test-1b47457.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t'sap/ui/test/Opa5',\n\t'sap/ui/test/matchers/AggregationLengthEquals',\n\t'sap/ui/test/matchers/I18NText',\n\t'sap/ui/test/actions/Press'\n], function (Opa5, AggregationLengthEquals, I18NText, Press) {\n\t\"use strict\";\n\n\tvar sViewName = \"Worklist\",\n\tsTableId = \"table\";\n\n\tOpa5.createPageObjects({\n\t\tonTheWorklistPage: {\n\t\t\tactions: {\n\t\t\t\tiPressOnMoreData: function () {\n\t\t\t\t\t// Press action hits the \"more\" trigger on a table\n\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\tid: sTableId,\n\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\tactions: new Press(),\n\t\t\t\t\t\terrorMessage: \"The table does not have a trigger.\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tassertions: {\n\t\t\t\ttheTableShouldHavePagination: function () {\n\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\tid: sTableId,\n\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\tmatchers: new AggregationLengthEquals({\n\t\t\t\t\t\t\tname: \"items\",\n\t\t\t\t\t\t\tlength: 20\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\tOpa5.assert.ok(true, \"The table has 20 items on the first page\");\n\t\t\t\t\t\t},\n\t\t\t\t\t\terrorMessage: \"The table does not contain all items.\"\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\ttheTableShouldHaveAllEntries: function () {\n\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\tid: sTableId,\n\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\tmatchers: new AggregationLengthEquals({\n\t\t\t\t\t\t\tname: \"items\",\n\t\t\t\t\t\t\tlength: 23\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\tOpa5.assert.ok(true, \"The table has 23 items\");\n\t\t\t\t\t\t},\n\t\t\t\t\t\terrorMessage: \"The table does not contain all items.\"\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\ttheTitleShouldDisplayTheTotalAmountOfItems: function () {\n\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\tid: \"tableHeader\",\n\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\tmatchers: new I18NText({\n\t\t\t\t\t\t\tkey: \"worklistTableTitleCount\",\n\t\t\t\t\t\t\tpropertyName: \"text\",\n\t\t\t\t\t\t\tparameters: [23]\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\tOpa5.assert.ok(true, \"The table header has 23 items\");\n\t\t\t\t\t\t},\n\t\t\t\t\t\terrorMessage: \"The table header does not contain the number of items: 23\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Stashed-Based Lazy Loading with ObjectPageLazyLoader (JS)\nDESCRIPTION: This code snippet demonstrates how to use `ObjectPageLazyLoader` with the `stashed` property set to `true` to enable stashed-based lazy loading.  The content within the `ObjectPageLazyLoader` is automatically unstashed as the user scrolls, loading the content only when it becomes visible.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-layout-2e61ab6.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<ObjectPageLazyLoader stashed=\"true\" id=\"SectionStashed\">\n```\n\n----------------------------------------\n\nTITLE: Hiding the Anchor Bar in JavaScript - SAPUI5\nDESCRIPTION: This JavaScript snippet demonstrates how to programmatically hide the anchor bar in an ObjectPageLayout using the `setShowAnchorBar` method. It allows dynamic control over the anchor bar's visibility at runtime. The input is the boolean value 'false'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/anchor-bar-370b679.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noObjectPage.setShowAnchorBar(false);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Button Tag in XML View - OpenUI5\nDESCRIPTION: This example shows an incorrect button definition within an XML view, which can cause an error. Using lowercase letters for control tags will result in the control not being loaded correctly, particularly on case-sensitive file systems like Linux.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/an-empty-page-comes-up-55db2bc.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<b>button text=\"Click me\" </b>\n```\n\n----------------------------------------\n\nTITLE: Adding URLs to URLListValidator in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to add URLs to the URLListValidator in OpenUI5. It uses the `URLListValidator.add` method to allow various URLs with different protocols, hosts, and ports. The `URLListValidator` module needs to be required first.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/url-list-validation-91f3768.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// URLListValidator required from module sap/base/security/URLListValidator\n\nURLListValidator.add(undefined, \"www.sap.com\");\n\nURLListValidator.add(\"https\", \"sdn.sap.com\");\n\nURLListValidator.add(undefined, \"sap.de\", \"1080\");\n\nURLListValidator.add(\"https\", \"community.sap.de\", undefined, \"/topics\");\n```\n\n----------------------------------------\n\nTITLE: Removing Item Navigation Delegate - destroy - JavaScript\nDESCRIPTION: This code snippet demonstrates how to properly remove the item navigation delegate in the `destroy` function of a UI5 control (sap.m.List). This is crucial to prevent memory leaks. It removes the delegate from the control and then destroys the delegate instance. The delegate will be properly removed when the control is destroyed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/integrating-item-navigation-7e24524.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsap.m.List.prototype.destroy = function() {\n                   if (this.oItemNavigation) {\n                            this.removeDelegate(this.oItemNavigation);\n                            this.oItemNavigation.destroy();\n                   }\n }; \n```\n\n----------------------------------------\n\nTITLE: OData V4 Table View for Nested Collection (XML)\nDESCRIPTION: This XML snippet defines a table within a SimpleForm, bound to a nested collection 'SO_2_SOITEM'. It includes input fields for ProductID, Amount, and Unit. The '$$ownRequest' parameter is set to true in the binding parameters.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-an-entity-in-a-collection-c9723f8.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<SimpleForm id=\"form\">\n    <Table id=\"items\" items=\"{path : 'SO_2_SOITEM', parameters : {$$ownRequest : true}}\">\n         <ColumnListItem>\n             <Input value=\"{ProductID}\"/>\n             <Input value=\"{Amount}\"/>\n             <Input value=\"{Unit}\"/>\n           </ColumnListItem>\n    </Table>\n</SimpleForm>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mock Server in Test (TypeScript)\nDESCRIPTION: Initializes the mock server and then initializes the app component.  This file is used to launch the application in test mode, using the mock server instead of a real backend service. It imports the mockserver module and ComponentSupport.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-26-mock-server-configuration-typescript-3e1c64f.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport mockserver from \"../localService/mockserver\";\n\n// initialize the mock server\nmockserver.init();\n\n// initialize the embedded component on the HTML page\nimport(\"sap/ui/core/ComponentSupport\");\n```\n\n----------------------------------------\n\nTITLE: Detail Controller - onRatingChange and onObjectMatched\nDESCRIPTION: This JavaScript code defines the `onRatingChange` and `onObjectMatched` methods within the `Detail` controller. `onRatingChange` retrieves the rating value from the ProductRating custom event, gets the resource bundle, and displays a confirmation message in a MessageToast. `onObjectMatched` resets the rating control when the detail view is displayed for a new object. Dependencies: Controller, UIComponent, Route$PatternMatchedEvent, History, MessageToast, ProductRating, ResourceBundle, ResourceModel.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport UIComponent from \"sap/ui/core/ UIComponent\";\nimport { Route$PatternMatchedEvent } from \"sap/ui/core/routing/Route\";\nimport History from \"sap/ui/core/routing/History\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport ProductRating, { ProductRating$ChangeEvent } from \"../control/ProductRating\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\n\n/**\n * @namespace ui5.walkthrough.controller\n */\nexport default class Detail extends Controller {\n\n    onInit(): void {\n        const router = UIComponent.getRouterFor(this);\n        router.getRoute(\"detail\").attachPatternMatched(this.onObjectMatched, this);\n    }\n\t\n    onObjectMatched(event: Route$PatternMatchedEvent): void {\n    \n        (<ProductRating> this.byId(\"rating\")).reset();\n        this.getView().bindElement({\n            path: \"/\" + window.decodeURIComponent((<any> event.getParameter(\"arguments\")).invoicePath),\n            model: \"invoice\"\n        });\n    }\n\t\n    onNavBack(): void {\n        const history = History.getInstance();\n        const previousHash = history.getPreviousHash();\n\t\t\n        if (previousHash !== undefined) {\n            window.history.go(-1);\n        } else {\n            const router = UIComponent.getRouterFor(this);\n            router.navTo(\"overview\", {}, true);\n        }\n    }    \n   \n    onRatingChange(event: ProductRating$ChangeEvent): void {\n        const value = event.getParameter(\"value\");\n        const resourceBundle = <ResourceBundle> (<ResourceModel> this?.getView().getModel(\"i18n\"))?.getResourceBundle();\n\t\t\n        MessageToast.show(resourceBundle.getText(\"ratingConfirmation\", [value]));\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:precision to Scale\nDESCRIPTION: This snippet demonstrates the transformation of `sap:precision` to `Org.OData.Measures.V1.Scale`. The path specifies where the number of decimal places is stored.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_52\n\nLANGUAGE: xml\nCODE:\n```\nsap:precision = \"AnyPath\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Measures.V1.Scale\": { \"Path\" : \"AnyPath\" }\n```\n\n----------------------------------------\n\nTITLE: Initializing a Text Control with Setter Methods - JavaScript\nDESCRIPTION: This code snippet demonstrates an alternative method for creating and configuring an OpenUI5 Text control. It creates the control with an ID and then uses setter methods to set the text, tooltip, and width properties individually.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/working-with-controls-91f0a22.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// required from sap/m/Text\nvar oText = new Text(\"testText\"); \noText.setText(\"Hello World\");\noText.setTooltip(\"This is an example tooltip\");\noText.setWidth(\"100px\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Control by ID with Timeout in OPA5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates retrieving a control by ID using OPA5 with a specific timeout. If the control is not found within the given timeout, the test will fail. The `success` function contains an assertion. The check function is omitted, OPA5 will create it automatically to check if the control is found.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew sap.ui.test.Opa5().waitFor({\n    id : \"productList\",\n    viewName : \"Category\",\n    success : function (oList) {\n        Opa5.assert.ok(oList.getItems().length, \"The list did contain products\");\n    },\n    timeout: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers in manifest.json\nDESCRIPTION: This JSON snippet demonstrates how to set HTTP headers for the OData V4 model within the `manifest.json` file. The `httpHeaders` property allows you to specify custom headers, such as `custom: foo`, to be included in requests sent by the model.  `autoExpandSelect` is also set to true.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/model-instantiation-and-data-access-9613f1f.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"sap.app\" : {\n        \"dataSources\" : {\n            \"default\" : {\n                \"uri\" : \"/sap/opu/odata4/IWBEP/V4_SAMPLE/default/IWBEP/V4_GW_SAMPLE_BASIC/0001/\",\n                \"type\" : \"OData\",\n                \"settings\" : {\n                    \"odataVersion\" : \"4.0\"\n                }\n            }\n        }\n    },\n    \"sap.ui5\" : {\n        \"models\" : {\n            \"\" : {\n                \"dataSource\" : \"default\",\n                \"settings\" : {\n                    \"autoExpandSelect\" : true,\n                    \"httpHeaders\" : {\n                        \"custom\" : \"foo\"\n                    },\n                     \n                }\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing sap.m.Image with Density Awareness (JS)\nDESCRIPTION: This JavaScript code demonstrates how to initialize an sap.m.Image control with and without density awareness. It highlights the behavior of the control when densityAware is set to false versus when it relies on the naming convention to load appropriate images based on the device's pixel density.\n\nDependencies: sap.m.Image\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/image-f86dbe9.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew sap.m.Image({\n\t    densityAware: false, // tells the image control that there are no different optimized image variants\n\t    src : \"first.png\"   // therefore Image control will directly load first.png \n})\n\nnew sap.m.Image({\n    \tsrc : \"second.png\"    // Image control will first look for second@2.png, then fall back to second.png\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing getStaticAreaRef with StaticArea.getDomRef() in UI5 JavaScript\nDESCRIPTION: This snippet demonstrates replacing the deprecated `getStaticAreaRef` with `StaticArea.getDomRef()` to retrieve the DOM reference of the static area in SAP UI5. It also shows retrieving the static UIArea directly and checking if a DOM element is contained within it.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\n    \"sap/ui/core/StaticArea\"\n], (StaticArea) => {\n    // Direct replacement\n    const oStaticArea = StaticArea.getDomRef();\n \n    // Retrieving the static UIArea directly\n    oStaticUIArea = StaticArea.getUIArea();\n \n    // Check whether the given DOM element is part of the static area\n    const bContainedInArea = StaticArea.contains(myControl.getDomRef())\n});\n```\n\n----------------------------------------\n\nTITLE: Add priceThreshold Property to JSON Model (data.json)\nDESCRIPTION: This code snippet shows how to add a new property `priceThreshold` to the `data.json` file. This property stores the threshold value used in the expression binding to determine the color of the price. The value is set to 20.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-expression-binding-5cff8d1.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"firstName\": \"Harry\",\n\t\"lastName\": \"Hawk\",\n\t\"enabled\": true,\n\t\"address\": {\n\t\t\"street\": \"Dietmar-Hopp-Allee 16\",\n\t\t\"city\": \"Walldorf\",\n\t\t\"zip\": \"69190\",\n\t\t\"country\": \"Germany\"\n\t},\n\t\"salesAmount\": 12345.6789,\n\t\"priceThreshold\": 20,\n\t\"currencyCode\": \"EUR\"\n}\n```\n\n----------------------------------------\n\nTITLE: Define Custom Data Type for Flagged Status - FlaggedType.js\nDESCRIPTION: This JavaScript code defines a custom data type `FlaggedType` that extends `sap.ui.model.SimpleType`. It handles the conversion between a boolean value used by the `sap.m.ToggleButton` and an integer value used in the model, which is either 1 (true) or 0 (false). The `formatValue` converts integer to boolean, `parseValue` converts boolean to integer, and `validateValue` always returns true as no client-side validation is needed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-adding-a-flag-button-69a25bf.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/model/SimpleType\"\n], function (SimpleType) {\n\t\"use strict\";\n\treturn SimpleType.extend(\"sap.ui.demo.bulletinboard.model.FlaggedType\", {\n\t\t/**\n\t\t * Formats the integer value from the model to a boolean for the pressed state of the flagged button\n\t\t *\n\t\t * @public\n\t\t * @param {number} iFlagged the integer value of the formatted property\n\t\t * @returns {boolean} 1 means true, all other numbers means false\n\t\t */\n\t\tformatValue: function (iFlagged) {\n\t\t\treturn iFlagged === 1;\n\t\t},\n\t\t/**\n\t\t * Parses a boolean value from the property to an integer\n\t\t *\n\t\t * @public\n\t\t * @param {boolean} bFlagged true means flagged, false means not flagged\n\t\t * @returns {number} true means 1 , false means 0\n\t\t */\n\t\tparseValue: function (bFlagged) {\n\t\t\tif (bFlagged) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t},\n\t\t/**\n\t\t * Validates the value to be parsed\n\t\t *\n\t\t * @public\n\t\t * Since there is only true and false, no client side validation is required\n\t\t * @returns {boolean} true\n\t\t */\n\t\tvalidateValue: function () {\n\t\t\treturn true;\n\t\t}\n\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration in Component.js - JavaScript\nDESCRIPTION: This snippet shows examples of configurations (e.g., rootView, handleValidation, config, routing) defined directly within the `sap.ui5` namespace of the `Component.js` file. These configurations will need to be migrated to the manifest.json file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n        ...\n        \"rootView\": \"myRootView\",\n        \"handleValidation\": true,\n        \"config\": {\n            ...\n        },\n        \"routing\": {\n            ...\n        }\n    \n```\n\n----------------------------------------\n\nTITLE: Template Repeat Output Example\nDESCRIPTION: This XML snippet shows the output of the `<template:repeat>` instruction after preprocessing. It demonstrates how the template is replaced by multiple clones of its content, with each clone corresponding to a list element.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/repeat-512e545.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Label text=\"Product ID\" />\n<Text core:require=\"{StringType: 'sap/ui/model/odata/type/String'}\" text=\"{\n    path: 'ProductID', type:'StringType', constraints: {\"nullable\": false, \"maxLength\": 10}}\" />\n<Label text=\"Price\" />\n<Text core:require=\"{Decimal: 'sap/ui/model/odata/type/Decimal'}\" text=\"{\n    path: 'Price/Amount', type: 'Decimal', constraints: {\"precision\":13, \"scale\":3}}\" />\n<Label text=\"Category\" />\n<Text core:require=\"{StringType: 'sap/ui/model/odata/type/String'}\" text=\"{\n    path: 'Category', type: 'StringType', constraints: {\"maxLength\": 40}}\" />\n<Label text=\"Supplier\" />\n<Text core:require=\"{StringType: 'sap/ui/model/odata/type/String'}\" text=\"{\n    path: 'SupplierName', type: 'StringType', constraints: {\"maxLength\": 80}}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Proxy Dependency and Script to package.json - JSON\nDESCRIPTION: This code adds a `devDependency` for a proxy server (named `myProxy`) to the `package.json` file.  It also adds a script to the `scripts` section allowing the proxy server to be started using `npm run proxy`. This enables local development without CORS errors.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/request-fails-due-to-same-origin-policy-cross-origin-resource-sharing-cors-5bb388f.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"name\": \"Sample-Package\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"Sample package.json\",\n\t\"scripts\": {\n\t\t\"proxy\": \"node proxy.js\"\n\t},\n\t\"devDependencies\": {\n\t\t\"myProxy\": \"^x.y.z\"\n\t},\n\t\"dependencies\": {\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting i18n and Title\nDESCRIPTION: This JSON snippet shows how to populate the `sap.app/i18n` and `sap.app/title` properties in the `manifest.json` file using the `resourceBundle` and `titleResource` values from the Component.js file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"sap.app\": {\n    ...\n    \"i18n\": \"i18n/i18n.properties\",\n    ...\n    \"title\": \"{{app.Identity}}\",\n\n```\n\n----------------------------------------\n\nTITLE: Replacing synchronous sap.ui.component with asynchronous Component.create - JavaScript\nDESCRIPTION: This snippet demonstrates how to replace the synchronous `sap.ui.component` call with the asynchronous `Component.create` method.  It utilizes `sap.ui.require` to load the `sap/ui/core/Component` module and then uses the `create` method, which returns a Promise. The `then` method is used to handle the created component instance. The asynchronous adoption starts from the beginning with the bootstrap script tag, where the `async` configuration parameter should be set to `true`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-factories-replacement-491bd9c.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oComponentInstance = sap.ui.component({\n    name: \"my.comp\"\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Component\"], (Component)=> {\n    Component.create({\n        name: \"my.comp\"\n    }).then((oComp) => {/*...*/});\n});\n```\n\n----------------------------------------\n\nTITLE: Deferred Function Binding in XML View (OData V4)\nDESCRIPTION: This XML snippet showcases a deferred function binding using `GetNextAvailableItem(...)`. The function is bound to a Form element, and its result (`Description`) is displayed in a Text control using a relative binding.  The `...` indicates that the function will not be executed immediately.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Form id=\"getNextAvailableItem\" binding=\"{/GetNextAvailableItem(...)}\">\n    <Label text=\"Description\"/>\n    <Text text=\"{Description}\"/>\n    <Button text=\"Call the function\" press=\"onGetNextAvailableItem\"/>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Cache Control Header Example\nDESCRIPTION: This example shows the cache control headers sent by the server for cache buster resources. The `Cache-Control` header is set to `max-age=315360000, public`, which specifies that the resource can be cached for one year by the browser and any intermediate caches.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cache-buster-for-openui5-91f0809.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nDate: Mon, 16 Jul 2012 05:17:54 GMT\nExpires: Sun, 14 Jul 2013 05:17:54 GMT\nCache-Control: max-age=315360000, public\n```\n\n----------------------------------------\n\nTITLE: Logging warnings with support information using sap/base/Log\nDESCRIPTION: This example shows how to log a warning message with additional support information using the `sap/base/Log` module in OpenUI5. The support information is provided as an object within a callback function, allowing support tooling to access and utilize it for analysis. The function returns an object containing information about the type and id of the related element.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/common-rule-patterns-3fc1412.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Log\" required from module \"sap/base/Log\"\n\n// Pass additional support information for automatic use by support tooling when sap-ui-support=true is set\nLog.warning(\"Log this text\", function() {\n  //return additional object for further processing in support tooling\n  return {\n    type: \"sap.mylib.supportType\", //type can be used to filter the logs in support tooling\n    elementId: \"sap.mylib.Class or ID\" //can be given to narrow the scope of support tooling to a certain element ID, normally used as control ID.\n    mylogobject: {\n      context: \"Identify Context\"\n    }\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Data Table as Simple Array Example\nDESCRIPTION: Demonstrates the runtime value of `aDataTable` when the feature file data table contains only a single row or a single column. In this case, the step definition function receives a simple array instead of a two-dimensional array.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n[\"Alice\", \"Bob\", \"Charlie\"]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring NumberFormat with Strict Grouping - JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure NumberFormat with strict grouping validation enabled. The `strictGroupingValidation` option is set to `true`, enforcing that any present grouping separators are correctly placed according to the locale.  The parse method will return NaN if the number string is not correctly formatted. Dependencies: sap.ui.core.format.NumberFormat\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/number-format-91f2f28.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"NumberFormat\" required from module \"sap/ui/core/format/NumberFormat\"\nvar oOptions = {\n  decimalSeparator : \".\",\n  groupingSeparator : \",\",\n  groupingSize : 3,\n  strictGroupingValidation: true\n};\nvar oFloatFormat = NumberFormat.getFloatInstance(oOptions);\n\noFloatFormat.parse(\"1,2,3\"); // NaN (before: 123)\n```\n\n----------------------------------------\n\nTITLE: Handling Message Binding Changes - JavaScript\nDESCRIPTION: This snippet shows the event handler for the `change` event of the `ListBinding` bound to the `MessageModel`. It extracts and removes technical messages, displays the first one as an error using `MessageBox`, and updates the UI to keep the save/discard toolbar visible.  It sets `_bTechnicalErrors` to true to indicate a technical error has occurred.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-create-and-edit-b4f1266.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n        onMessageBindingChange : function (oEvent) {\n            var aContexts = oEvent.getSource().getContexts(),\n                aMessages,\n                bMessageOpen = false;\n\n            if (bMessageOpen || !aContexts.length) {\n                return;\n            }\n\n            // Extract and remove the technical messages\n            aMessages = aContexts.map(function (oContext) {\n                return oContext.getObject();\n            });\n            sap.ui.getCore().getMessageManager().removeMessages(aMessages);\n\n            this._setUIChanges(true);\n            this._bTechnicalErrors = true;\n            MessageBox.error(aMessages[0].message, {\n                id : \"serviceErrorMessageBox\",\n                onClose : function () {\n                    bMessageOpen = false;\n                }\n            });\n\n            bMessageOpen = true;\n        },\n...\n```\n\n----------------------------------------\n\nTITLE: Using BindingPath Matcher in OPA\nDESCRIPTION: This snippet uses the `sap.ui.test.matchers.BindingPath` matcher to find a `sap.m.CheckBox` control located inside a `ListItem`. The CheckBox has a property binding with relative path \"Selected\", and the ListItem has a binding context path \"/products/0\". Opa5 is used to wait for this CheckBox to be found.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Match a CheckBox located inside a ListItem:\n// the CheckBox has a property binding with relative path \"Selected\"\n// the ListItem has a binding context path \"/products/0\"\nreturn new Opa5().waitFor({\n    controlType : \"sap.m.CheckBox\",\n    matchers : new sap.ui.test.matchers.BindingPath({\n        path: \"/products/0\",\n        propertyPath: \"Selected\"\n    }),\n    success : function (aResult) {\n        Opa5.assert.ok(aResult[0], \"CheckBox is matched\")\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Strict Mode - XML (Dialog)\nDESCRIPTION: This snippet provides the XML view code for displaying messages when strict handling fails for a bound action. It defines a dialog containing a message view to show warnings and errors, along with buttons to confirm or cancel the action.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_14\n\nLANGUAGE: XML\nCODE:\n```\n// XML view:\n// the messages may be visualized in a sap.m.Dialog via sap.m.MessageView and sap.m.MessageItem like this\n    <Dialog id=\"onStrictMessagesDialog\"\n            title=\"Messages during order confirmation, do you want to continue?\"\n            resizable=\"true\" contentHeight=\"50%\" contentWidth=\"50%\"\n            verticalScrolling=\"false\" state=\"Warning\">\n        <buttons>\n            <Button id=\"confirmStrictMode\" text=\"Yes\"\n                    tooltip=\"Ignore warnings and confirm anyhow\"\n                press=\"onConfirmStrictMessages\"/>\n            <Button id=\"cancelStrictMode\" text=\"No\"\n                    tooltip=\"Cancel confirmation\"\n                press=\"onCancelStrictMessages\" type=\"Emphasized\"/>\n        </buttons>\n        <MessageView items=\"{ui>/strictMessages}\">\n            <MessageItem\n                type=\"{ui>type}\"\n                title=\"{ui>message}\"\n                subtitle=\"{ui>target}\">\n            </MessageItem>\n        </MessageView>\n    </Dialog>\n \n```\n\n----------------------------------------\n\nTITLE: Creating a Local Proxy Server with proxy.js - JavaScript\nDESCRIPTION: This code creates a simple proxy server using the `myProxy` npm package. It listens on a specified host and port, forwarding requests to a remote server.  This allows you to circumvent the same-origin policy during local development. Requires the 'myProxy' npm package to be installed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/request-fails-due-to-same-origin-policy-cross-origin-resource-sharing-cors-5bb388f.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar cors_proxy = require('myProxy');\n\n// Listen on a specific IP Address\nvar host = 'localhost';\n\n// Listen on a specific port, adjust if necessary\nvar port = 8081;\n\ncors_proxy.createServer({\n\t// Set parameters for:\n\t// allowed origins,\n\t// required headers ['origin', 'x-requested-with'],\n\t// headers to be removed ['cookie', 'cookie2']\n}).listen(port, host, function() {\n\tconsole.log('Running myProxy on ' + host + ':' + port);\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing Density with syncStyleClass - OpenUI5\nDESCRIPTION: This example demonstrates how to synchronize a style class (like `sapUiSizeCompact`) from a source element (like a view) to a destination element (like a dialog) using the `syncStyleClass` function from `sap/ui/core/syncStyleClass`. The modules `sap/ui/core/mvc/Controller`, `sap/ui/core/Fragment`, and `sap/ui/core/syncStyleClass` are required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/how-to-use-densities-for-controls-13e6f3b.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\"sap/ui/core/mvc/Controller\", \"sap/ui/core/Fragment\", \"sap/ui/core/syncStyleClass\"], function(Controller, Fragment, syncStyleClass) {\n    return Controller.extend(\"mycontroller\", {\n        onOpenDialog: function (oEvent) {\n            var fnSync = function(oDialog) {\n                // sync compact style\n                syncStyleClass(\"sapUiSizeCompact\", this.getView(), this.oDialog);\n                this.oDialog.open();\n            }.bind(this);\n\n            if (!this.oDialog) {\n                this.pDialog = this.loadFragment({\n                    name: \"mydialog\"\n                });\n            }\n\n            // chain the style-class sync to the fragment loading promise\n            this.pDialog.then(fnSync);\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implement Item Press Handler - OpenUI5 JavaScript\nDESCRIPTION: This JavaScript code defines the `onItemPressed` event handler in the `EmployeeOverviewContent` controller. It retrieves the selected item's binding context and navigates to the `employeeResume` route, passing the `EmployeeID` as a parameter and a query parameter to select the 'Info' tab.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-reuse-an-existing-route-877d57e.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/ViewSettingsDialog\",\n\t\"sap/m/ViewSettingsItem\"\n], function(\n\tBaseController,\n\tFilter,\n\tFilterOperator,\n\tSorter,\n\tViewSettingsDialog,\n\tViewSettingsItem\n) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverviewContent\", {\n\t\t...\n\t\t_syncViewSettingsDialogSorter: function (sSortField, bSortDescending) {\n\t\t\t// the possible keys are: \"EmployeeID\" | \"FirstName\" | \"LastName\"\n\t\t\t// Note: no input validation is implemented here\n\t\t\tthis._oVSD.setSelectedSortItem(sSortField);\n\t\t\tthis._oVSD.setSortDescending(bSortDescending);\n\t\t},\n\t\tonItemPressed: function (oEvent) {\n\t\t\tvar oItem, oCtx, oRouter;\n\t\t\toItem = oEvent.getParameter(\"listItem\");\n\t\t\toCtx = oItem.getBindingContext();\n\t\t\tthis.getRouter().navTo(\"employeeResume\",{\n\t\t\t\temployeeId : oCtx.getProperty(\"EmployeeID\"),\n\t\t\t\t\"?query\": {\n\t\t\t\t\ttab: \"Info\"\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Analytics Dimension with OData V2 Annotation\nDESCRIPTION: This code snippet shows how the `sap:aggregation-role=\"dimension\"` annotation in OData V2 is converted to the `com.sap.vocabularies.Analytics.v1.Dimension` annotation with a boolean value of \"true\" in OData V4. The OData V2 annotation indicates that the property represents a dimension in analytics, and the OData V4 annotation expresses the same meaning.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_59\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Analytics.v1.Dimension\" : { \"Bool\" : \"true\" }\n```\n\n----------------------------------------\n\nTITLE: Using Event.create for Native Events\nDESCRIPTION: Application code simulating events should either omit the originalEvent or use Event.create to create a native event before creating a jQuery.Event. This avoids issues related to missing methods in the originalEvent.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/upgrading-from-a-version-below-1-38-c1025c2.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nApplication code that needs to simulate an event, either should omit the `originalEvent` or use `Event.create` to create a native event and only then create a `jQuery.Event`.\n```\n\n----------------------------------------\n\nTITLE: Using opaTodo for temporarily deactivating tests\nDESCRIPTION: This JavaScript code snippet demonstrates how to use `opaTodo` to mark a test as needing adaptation. The test includes an assertion that always fails, indicating that the test requires modification. `oOpa.waitFor` is used with a success handler to execute the failing assertion.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-opa5-ce4b180.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\noOpa.waitFor({\n    success: function () {\n        Opa5.assert.ok(false, \"Should not report test that needs adaptation\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Allowlist Service GET Request\nDESCRIPTION: This code snippet shows the format of the GET request made to the allowlist service. The `parentOrigin` parameter, which is URL encoded, specifies the origin of the parent frame.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/allowlist-service-d04a6d4.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nGET url/to/allowlist/service?parentOrigin=https://parent.domain.com\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Check Function Example in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to define an asynchronous check function for a Support Assistant rule. The function uses `setTimeout` to simulate an asynchronous operation and calls `fnResolve` to signal the completion of the check. This is necessary when the rule's check function involves operations that don't immediately return a result.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/rules-management-3fc864a.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction(issueManager, oCoreFacade, oScope, fnResolve) {\n  // Some async operation\n  setTimeout(function () {\n    …\n    fnResolve();\n  }, 2000);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Blanket.js Code Coverage via HTML\nDESCRIPTION: This snippet shows how to enable code coverage using Blanket.js by including the `qunit-coverage.js` script in the HTML head tag.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../resources/sap/ui/qunit/qunit-coverage.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Searching for Controls Inside a Dialog in OPA\nDESCRIPTION: This snippet demonstrates how to search for a control with a specific ID located inside an open dialog.  It uses `searchOpenDialogs: true` along with the `id` and `viewName` options. An action is performed on the button.  The ID is relative to the specified view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.waitFor({\n    searchOpenDialogs: true,\n    id: \"testButton\",\n    viewName: \"main.view\"\n    actions: new sap.ui.test.actions.Press(),\n    errorMessage : \"Did not find the dialog button\"\n});\n```\n\n----------------------------------------\n\nTITLE: Remove Panel Header Text from data.json (JSON)\nDESCRIPTION: This snippet removes the `panelHeaderText` property from the `data.json` file.  Since the text is now managed by the `i18n` resource model, it is no longer needed in the data model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-resource-models-9790d9a.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"firstName\": \"Harry\",\n\t\"lastName\": \"Hawk\",\n\t\"enabled\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ariaLabelledBy Association in OpenUI5\nDESCRIPTION: This code snippet defines the `ariaLabelledBy` association within an OpenUI5 control. It specifies that this association can hold multiple references to `sap.ui.core.Control` instances. These controls will have their `aria-labelledby` attribute set, allowing the current control to be labeled by them. The `singularName` property defines the name used for individual elements within the association.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/aria-attribute-mapping-3e9c010.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nariaLabelledBy : {\n\ntype : \"sap.ui.core.Control\",\n\nmultiple : true,\n\nsingularName : \"ariaLabelledBy\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Expression Binding with Runtime Data Only\nDESCRIPTION: This example shows an expression binding that refers to runtime data only, using a hardcoded value for comparison.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-bindings-604b1eb.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{= ${runtime>value} > 42 }\n```\n\n----------------------------------------\n\nTITLE: Excluding objects from Istanbul instrumentation via HTML\nDESCRIPTION: This snippet excludes specific objects from Istanbul instrumentation by setting the `data-sap-ui-cover-never` attribute in the HTML file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../resources/sap/ui/qunit/qunit-coverage-istanbul.js\"\n\tdata-sap-ui-cover-never=\"sap/ui/example/thirdparty/\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Unsupported Async Controller Module - JavaScript\nDESCRIPTION: This code demonstrates an unsupported approach of defining an OpenUI5 Controller module using an asynchronous factory function with `async/await`.  This is not supported as OpenUI5 may not properly handle asynchronous modules for Controllers.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Do NOT use the ECMAScript async/await statements when loading/defining modules\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\"\n], async (Controller) => {\n    \"use strict\";\n    return Controller.extend(\"my.app.controller.MyController\", {});\n});\n```\n\n----------------------------------------\n\nTITLE: Transfer JSON Model Dates to OData V2 - JavaScript\nDESCRIPTION: This JavaScript code demonstrates transferring dates, times, and timestamps from a JSON model to an OData V2 model.  It retrieves the JSON model properties `DateTime`, `DateTimeOffset`, and `Time`, then sets these properties in the OData V2 model using `oDataModel.setProperty`, converting the date and timestamp values using `UI5Date.getInstance`. It assumes the existence of `oContext` and `oJSONModel`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntransferDatesTimesAndTimestampsFromJSONModelToODataV2Model(oContext, oJSONModel) {\n    // assume \"oContext\" is an OData V2 context referencing an entity with the properties \n    //   \"DateTime\" (date), \"DateTimeOffset\" (timestamp) and \"Time\" (time)\n    // assume \"oJSONModel\" is a JSONModel containing the values to be transferred \n    //   to the OData V2 model \"oDataModel\"\n    const oDate = oJSONModel.getProperty(\"/DateTime\");\n    const oDateTimeOffset = oJSONModel.getProperty(\"/DateTimeOffset\");\n    const oTime = oJSONModel.getProperty(\"/Time\");\n    const oDataModel = oContext.getModel();\n \n    oDataModel.setProperty(\"DateTime\", oDate ? UI5Date.getInstance(oDate) : null, oContext);\n    oDataModel.setProperty(\"DateTimeOffset\", oDateTimeOffset ? UI5Date.getInstance(oDateTimeOffset) : null, oContext);\n    oDataModel.setProperty(\"Time\", oTime ? Object.assign({}, oTime) : null, oContext);\n},\n```\n\n----------------------------------------\n\nTITLE: DatePicker with OData V4 Date (XML View)\nDESCRIPTION: This XML snippet demonstrates the usage of sap.m.DatePicker with an OData V4 date in an XML view.  It shows how to bind the DatePicker's value directly to an OData V4 property.  It also shows how to specify the data type when binding an Edm.Date, for example via a JSON model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Model value is a string in the format \"yyyy-MM-dd\" -->\n<DatePicker value=\"{/V4/Date1}\" />\n \n<!-- When binding an Edm.Date, for example via a JSON model, you have to specify a type -->\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{DateType: 'sap/ui/model/odata/type/Date'}\">\n    ...\n    <DatePicker value=\"{path: 'json>/V4/Date1', type: 'DateType'}\" />\n```\n\n----------------------------------------\n\nTITLE: RatingIndicator ontouchstart Adaptation (Before)\nDESCRIPTION: This code shows the original `ontouchstart` function of the `RatingIndicator` control *before* adaptation for hybrid devices.  It uses `Device.support.touch` to conditionally bind to either touch or mouse events. This approach is problematic on devices that support both input methods.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/adapting-event-handling-for-devices-supporting-both-mouse-and-touch-input-b54d7d7.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// \"RatingIndicator\" defined in module \"sap/m/RatingIndicator\"\n// \"Device\" required from module \"sap/ui/Device\"\nRatingIndicator.prototype.ontouchstart = function(oEvent) {\n    if (this.getEnabled()) {\n        ......\n\n        if (!this._touchEndProxy) {\n            this._touchEndProxy = jQuery.proxy(this._ontouchend, this);\n        }\n\n        if (!this._touchMoveProxy) {\n            this._touchMoveProxy = jQuery.proxy(this._ontouchmove, this);\n        }\n\n        // here also bound to the mouseup mousemove event to enable it working in\n        // desktop browsers\n        if (Device.support.touch) {\n            jQuery(window.document).on(\"touchend touchcancel\", this._touchEndProxy);\n            jQuery(window.document).on(\"touchmove\", this._touchMoveProxy);\n        } else {\n            jQuery(window.document).on(\"mouseup\", this._touchEndProxy);\n            jQuery(window.document).on(\"mousemove\", this._touchMoveProxy);\n        }\n\n        ......\n    }\n};\n\nRatingIndicator.prototype._ontouchmove = function(oEvent) {\n    ......\n};\n\nRatingIndicator.prototype._ontouchend = function(oEvent) {\n    if (this.getEnabled()) {\n        ......\n        if (Device.support.touch) {\n            jQuery(window.document).off(\"touchend touchcancel\", this._touchEndProxy);\n            jQuery(window.document).off(\"touchmove\", this._touchMoveProxy);\n        } else {\n            jQuery(window.document).off(\"mouseup\", this._touchEndProxy);\n            jQuery(window.document).off(\"mousemove\", this._touchMoveProxy);\n        }\n        ......\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting OpenUI5 Theme Programmatically with Theming API\nDESCRIPTION: This code snippet shows how to programmatically set the OpenUI5 theme using the `Theming.setTheme` method. This method requires the `sap/ui/core/Theming` module to be imported.  The code demonstrates setting the theme to `sap_horizon_hcw`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/colors-and-theming-086c41c.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Theming\" required from module \"sap/ui/core/Theming\"\nTheming.setTheme(\"sap_horizon_hcw\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Validation in manifest.json (SAPUI5)\nDESCRIPTION: This code snippet demonstrates how to enable validation in the `manifest.json` file of a SAPUI5 application. Setting `handleValidation` to `true` ensures that validation errors detected by OpenUI5 types are displayed on the UI using the message manager.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-automatic-data-type-detection-96bb6e0.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"_version\": \"1.12.0\",\n\t\"sap.app\": {...\n\t},\n\t\"sap.ui\": {\n\t\t\"technology\": \"UI5\",\n\t\t\"deviceTypes\": {\n\t\t   \n\t\t}\n\t},\n\t\"sap.ui5\": {\n\t\t\"rootView\": {\n\t\t...\n\t\t},\n\t\t\"dependencies\": {\n\t\t\t...\n\t\t\t}\n\t\t},\n\t\t\"contentDensities\": {\n\t\t\t...\n\t\t},\n\t\t\"handleValidation\": true,\n\t\t\n\t\t\"models\": {\n\t\t\t...\n\t\t}\n\t},\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling NavContainer Navigate Event in JavaScript\nDESCRIPTION: This code snippet demonstrates how to attach to the `navigate` event of a `NavContainer` instance (named `app`). The event handler extracts the navigation direction (back or forward) and the ID of the target page.  It requires an existing NavContainer instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/events-fired-centrally-by-the-app-or-the-navcontainer-6ec0a7e.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.attachNavigate(function(evt) {\n   var isBack = !evt.getParameter(\"isTo\"); // there are several types of back animation, but we want the general direction only\n   alert(\"Navigating \" + (isBack ? \"back \" : \"\") + \" to page \" + evt.getParameter(\"toId\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Adding I18N Properties - INI\nDESCRIPTION: This INI snippet adds the new texts used in the view and controller to the `i18n.properties` file. The texts provide internationalization support for the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-navigate-to-routes-with-hard-coded-patterns-782aac0.md#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n...\nShowEmployeeList=Show Employee List\nEmployeeList=Employee List\nListOfAllEmployees=List of all employees\n```\n\n----------------------------------------\n\nTITLE: Initializing Router in Component.ts (TypeScript)\nDESCRIPTION: This snippet initializes the router in the component's `init` method.  It calls `this.getRouter().initialize()` to start the routing process. This will evaluate the current URL and load the corresponding view based on the routes defined in the `manifest.json` file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-30-routing-and-navigation-typescript-6173e3d.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport UIComponent from \"sap/ui/core/UIComponent\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\n\n/**\n * @namespace ui5.walkthrough\n */\nexport default class Component extends UIComponent {\n    public static metadata = {\n        \"interfaces\": [\"sap.ui.core.IAsyncContentCreation\"],\n        \"manifest\": \"json\"\n    };\n    init(): void {\n        // call the init function of the parent\n        super.init();\n        \n        // set data model\n        const data = {\n            recipient: {\n                name: \"World\"\n            }\n        };\n        const model = new JSONModel(data);\n        this.setModel(model);\n\n        // create the views based on the url/hash\n        this.getRouter().initialize();\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering with 'any' and 'all' - JavaScript\nDESCRIPTION: This code shows the structure for filtering using the `any` and `all` operators in OData V4 using `sap.ui.model.Filter`. The `path` specifies the collection to filter, `operator` should be `sap.ui.model.FilterOperator.Any` or `sap.ui.model.FilterOperator.All`, `variable` is the iterator variable, and `condition` is a filter applied to each element in the collection.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/filtering-5338bd1.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.model.Filter({\n        // the path of the collection for which the condition needs to be evaluated\n        path : \"TEAM_2_EMPLOYEES\",\n        // either sap.ui.model.FilterOperator.Any or sap.ui.model.FilterOperator.All\n        operator : sap.ui.model.FilterOperator.Any,    \n        // any OData identifier which is a variable for the current element of the collection referenced by path\n        variable : \"employee\",\n        // the filter condition; the path of the nested filter contains the variable as prefix to reference current element of the collection\n        condition : new sap.ui.model.Filter(\"employee/AGE\", sap.ui.model.FilterOperator.GT, 42)  \n    })\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Test Page (Test.qunit.html)\nDESCRIPTION: This HTML snippet creates the generic test page used to run individual tests. It includes the `sap/ui/test/starter/runTest.js` script, which is responsible for loading the test suite configuration and starting the test. The `data-sap-ui-resource-roots` attribute registers project-specific namespaces. Replace `<NAMESPACE-WITH-DOTS>` with your project's namespace.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/concept-and-basic-setup-22f50c0.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<script\n\t\tsrc=\"../resources/sap/ui/test/starter/runTest.js\"\n\t\tdata-sap-ui-resource-roots='{\n\t\t\t\"test-resources.<NAMESPACE-WITH-DOTS>\": \"./\"\n\t\t}'\n\t></script>\n</head>\n<body class=\"sapUiBody\">\n\t<div id=\"qunit\"></div>\n\t<div id=\"qunit-fixture\"></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: OData Error with Inner Errors Example\nDESCRIPTION: This example demonstrates an OData error response containing multiple inner errors, which provide detailed information about the cause of the failure.  The outer error may contain a general message, while the inner errors contain specific error messages, codes, and severities. Proper handling of these inner errors is crucial for providing informative feedback to the user.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-messages-81c735e.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"code\": \"MYCODE/111\",\n  \"message\": \"Failed operations!\",\n  \"severity\": \"error\",\n    \"details\": [\n    {\n      \"code\": \"MYCODE/222\",\n      \"message\": \"Object 1 already exists!\"\n      \"severity\": \"error\"\n    },\n    {\n      \"code\": \"MYCODE/222\",\n      \"message\": \"Object 2 already exists!\"\n      \"severity\": \"error\"\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency with Options - OpenUI5 JavaScript\nDESCRIPTION: This code snippet illustrates how to use formatting options such as `currencyCode` to control the output format of currency values.  The `NumberFormat.getCurrencyInstance()` method is used to create a currency formatter with the specified options, and then the `format` method is used to format currency values with symbols based on the configured options. The 'NumberFormat' module must be required first.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-formatting-e978728.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"NumberFormat\" required from module \"sap/ui/core/format/NumberFormat\"\nvar oCurrencyFormat = NumberFormat.getCurrencyInstance({\n    currencyCode: false\n});\n\noCurrencyFormat.format(1234.567, \"USD\"); // returns $1,234.57\noCurrencyFormat.format(1234.567, \"JPY\"); // returns ¥1,235\n\noCurrencyFormat.parse(\"$1,234.57\"); // returns [1234.57, \"USD\"]\noCurrencyFormat.parse(\"¥1,235\"); // returns [1235, \"JPY\"]\n```\n\n----------------------------------------\n\nTITLE: Creating UI5 Test Suite Module (testsuite.qunit.js)\nDESCRIPTION: This JavaScript snippet defines the test suite module. It returns a configuration object with properties such as `name`, `defaults`, and `tests`.  The `defaults` object contains default configuration options for the tests, including QUnit and Sinon versions, and UI5 theme. The `loader.paths` configuration maps the project-specific namespace to the correct location. Replace `<NAMESPACE>` with your project's namespace.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/concept-and-basic-setup-22f50c0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(() => {\n\t\"use strict\";\n\n\treturn {\n\t\tname: \"QUnit test suite for NAMESPACE\",\n\t\tdefaults: {},\n\t\ttests: {}\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Additional Annotations When Using XML Templating (XML)\nDESCRIPTION: This XML snippet shows additional annotations required when using XML templating to define currency and unit fields.  Specifically, it annotates `SAP__self.Product` with `com.sap.vocabularies.UI.v1.LineItem` to define data fields for the Weight and Price. These are later referenced in the XML template to create the UI elements.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-and-unit-customizing-in-odata-v4-4d1b9d4.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- used in view template -->\n<Annotations Target=\"SAP__self.Product\">\n  <Annotation Term=\"com.sap.vocabularies.UI.v1.LineItem\">\n    <Collection>\n      ...\n      <Record Type=\"com.sap.vocabularies.UI.v1.DataField\">\n        <PropertyValue Property=\"Label\" String=\"Weight\" />\n        <PropertyValue Property=\"Value\" Path=\"WeightMeasure\" />\n      </Record>\n      <Record Type=\"com.sap.vocabularies.UI.v1.DataField\">\n        <PropertyValue Property=\"Label\" String=\"Price\" />\n        <PropertyValue Property=\"Value\" Path=\"Price\" />\n      </Record>\n      ...\n    </Collection>\n  </Annotation>\n</Annotations>\n```\n\n----------------------------------------\n\nTITLE: CSS Attribute Selector for Custom Data\nDESCRIPTION: Illustrates how to use CSS attribute selectors to target HTML elements based on the presence or value of custom data attributes. This enables data-driven styling, allowing the application to visually represent the data stored in the DOM. Requires the custom data to already be present as an attribute on the target HTML element.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/writing-data-to-the-html-dom-as-data-attribute-1ef9fef.md#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\nbutton[data-mydata=\"Hello\"] { border: 3px solid red !important; }\n```\n\n----------------------------------------\n\nTITLE: Defining Component Container Declaratively - HTML\nDESCRIPTION: This snippet demonstrates how to define a `ComponentContainer` declaratively within the HTML body. The `data-sap-ui-component` attribute marks the element as a container for a UI5 component. Additional `data-` attributes are used to configure the `ComponentContainer` such as `data-name` for the component name and `data-settings` for component settings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-api-for-initial-components-82a0fce.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n<body id=\"content\" class=\"sapUiBody sapUiSizeCompact\" role=\"application\">\n    <div data-sap-ui-component\n        data-id=\"myRootComponentContainer\"\n        data-name=\"my.app\"\n        data-height=\"100%\"\n        data-settings='{ \"id\": \"myRootComponent\" }'\n        data-handle-validation=\"true\"\n        data-...=\"...\">\n    </div>\n    <!-- ... -->\n</body>\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Data in JSON View (Deprecated) - JavaScript\nDESCRIPTION: This snippet demonstrates how to attach custom data to an element in a JSON view using the `customData` property. The `Type` property specifies the `sap.ui.core.CustomData` type, and the `key` and `value` properties define the custom data's key and value, respectively. This approach is deprecated as of UI5 version 1.120.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/custom-data-attaching-data-objects-to-controls-91f0c3e.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ncustomData: {\n  Type:\"sap.ui.core.CustomData\",\n    key:\"coords\",\n    value:\"{data}\" // bind custom data\n  }\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Custom Data\nDESCRIPTION: Shows the resulting HTML output after setting the `writeToDom` flag to true in JavaScript or XML view. The custom data key-value pair is rendered as a `data-` attribute on the button element.  Assumes a button and corresponding custom data have been configured to be written to the DOM.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/writing-data-to-the-html-dom-as-data-attribute-1ef9fef.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<button ...  data-myData=\"Hello\"  ... >\n```\n\n----------------------------------------\n\nTITLE: Add i18n Texts for Comments Section - OpenUI5 i18n\nDESCRIPTION: This code adds new texts to the i18n.properties file for the comments section. It includes labels for the comments tab title and the no comments text.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-adding-a-comments-section-c73dfe3.md#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n...\n#Comments tab title\nObjectCommentsTabTitle=Comments\n\n#No comments text\nObjectCommentNoData=No Comments\n\n\n#~~~ Footer Options ~~~~~~~~~~~~~~~~~~~~~~~\n...\n```\n\n----------------------------------------\n\nTITLE: Synchronously Retrieving a Module Value in OpenUI5\nDESCRIPTION: This code snippet shows how to synchronously retrieve a module value using `sap.ui.require`. It attempts to retrieve the `sap/ui/model/json/JSONModel` module. If the module is already loaded, it's returned; otherwise, no additional loading request is triggered, and the variable might be undefined. This is discouraged in favor of asynchronous loading.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/loading-a-module-d12024e.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// If JSONModel class is loaded, it is returned. If the module is not loaded yet, there will be no additional loading request.\n// The variable JSONModel might be undefined after making this call.\nvar JSONModel = sap.ui.require(\"sap/ui/model/json/JSONModel\");\n```\n\n----------------------------------------\n\nTITLE: Gherkin Data Table with Single Column\nDESCRIPTION: This example shows how data table with single column is defined in a Gherkin feature file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_10\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: lots of data\n\n  Given I see the following lemmings:\n    | Alice   |\n    | Bob     |\n    | Charlie |\n\n  And I see the following lemmings:\n    | Alice | Bob | Charlie |\n\n```\n\n----------------------------------------\n\nTITLE: ObjectHeader Configuration in Detail View (XML)\nDESCRIPTION: This XML snippet configures the `ObjectHeader` control for responsive behavior by setting `responsive` and `fullScreenOptimized` attributes to `true`. It also defines the `number` and `numberUnit` properties using a currency type and adds attributes for quantity and shipped date.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-35-device-adaptation-d63a15e.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.Detail\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns:wt=\"ui5.walkthrough.control\">\n    <Page\n        title=\"{i18n>detailPageTitle}\"\n        showNavButton=\"true\"\n        navButtonPress=\".onNavBack\">\n        <ObjectHeader\n            core:require=\"{\n                Date: 'sap/ui/model/type/Date',\n                Currency: 'sap/ui/model/type/Currency'\n            }\"\n            responsive=\"true\"\n            fullScreenOptimized=\"true\"\n            number=\"{\n                parts: [\n                    'invoice>ExtendedPrice',\n                    'view>/currency'\n                ],\n                type: 'Currency',\n                formatOptions: {\n                    showMeasure: false\n                }\n            }\"\n            numberUnit=\"{view>/currency}\"\n            intro=\"{invoice>ShipperName}\"\n            title=\"{invoice>ProductName}\">\n            <attributes>\n                <ObjectAttribute\n                    title=\"{i18n>quantityTitle}\"\n                    text=\"{invoice>Quantity}\"/>\n                <ObjectAttribute\n                    title=\"{i18n>dateTitle}\"\n                    text=\"{\n                        path: 'invoice>ShippedDate',\n                        type: 'Date',\n                        formatOptions: {\n                            style: 'long',\n                            source: {\n                                pattern: 'yyyy-MM-ddTHH:mm:ss'\n                            }\n                        }\n                    }\"/>\n            </attributes>\n        </ObjectHeader>\n        <wt:ProductRating\n            id=\"rating\"\n            class=\"sapUiSmallMarginBeginEnd\"\n            change=\".onRatingChange\"/>\n    </Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Using Core.ready() as Promise or with await in SAPUI5\nDESCRIPTION: This code snippet demonstrates how to use `Core.ready()` as an alternative to `attachInit()` in SAPUI5.  It shows both the callback approach and using it as a Promise with `then()` or `await`. Requires `sap/ui/core/Core` module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Core\"], async function(Core) {\n    Core.ready(() => {\n        // this callback is executed directly in case the Core is\n        // already in ready state, otherwise it is executed at a later point in time\n    });\n    // You can also use the ready() function as a Promise, e.g.\n    Core.ready().then(...)\n    // or await it\n    await Core.ready();\n});\n```\n\n----------------------------------------\n\nTITLE: Updating App Controller (TypeScript)\nDESCRIPTION: Removes the onShowHello method from the App controller.  The App controller is now an empty stub, ready for additional functionality in later steps. It imports only the Controller module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-nested-views-typescript-9bbbfaa.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Controller from \"sap/ui/core/mvc/Controller\";\n\n/**\n * @namespace ui5.walkthrough.controller\n */\nexport default class App extends Controller {\n};\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters Between waitFor Calls in OPA5 (JavaScript)\nDESCRIPTION: This code shows two ways to pass a control found in one `waitFor` to another: storing it in a variable in the outer scope and storing it in the OPA context. This allows checks based on the relationship between controls found in different `waitFor` statements. It uses `sap.ui.test.Opa.getContext()` to store and retrieve the control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-opa5-ce4b180.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\niDoSomething: function () {\n        var oControl;\n        this.waitFor({\n            id : \"myControlId\",\n            success : function (oCtrl) {\n                //store control in outer scope\n                oControl = oCtrl;\n                \n                //as alternative you could store the control in the Opa context\n                sap.ui.test.Opa.getContext().control = oCtrl;\n            }\n        });\n        return this.waitFor({\n            controlType : \"some.other.control\"\n            check: function (aControlsFromThisWaitFor) {\n                //now you can compare oControl with aControlsFromThisWaitFor\n\n                //or you can compare sap.ui.test.Opa.getContext().control with aControlsFromThisWaitFor\n            }\n        });\n    },\n```\n\n----------------------------------------\n\nTITLE: Supported: Template Literal as Class Name\nDESCRIPTION: This example shows that using template literals is supported as the class name parameter within the `extend` call as long as no expressions are included.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\"\n], (Controller) => {\n    \"use strict\";\n    return Controller.extend(`my.app.controller.MyController`, {});\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Theme Change - JavaScript\nDESCRIPTION: This QUnit test verifies that a theme change is applied correctly. It uses `sap.ui.require` to load the `sap/ui/core/Theming` module. It sets a new theme and attaches a function to the `Theming.attachApplied` event, which asserts that the theme change has been applied.  The event handler detaches itself after execution.  It depends on the 'sap/ui/core/Theming' module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-testing-controls-with-qunit-0ddcc60.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Theming\"], (Theming) => {\n    QUnit.test(\"Check if theme change was done correctly\", function(assert){\n        const myTestFunction = () => {\n            // Test changes are applied\n            Theming.detachApplied(myTestFunction);\n        }\n        Theming.setTheme(\"myTestTheme\");\n        Theming.attachApplied(myTestFunction);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Create Browser page object with forward navigation action\nDESCRIPTION: This code creates a new OPA5 page object for browser-level actions. It includes an action to simulate pressing the browser's forward button. The `iPressOnTheForwardButton` function uses `Opa5.getWindow().history.forward()` to trigger the forward navigation. The action is wrapped in a `waitFor` statement to ensure that it is executed after the app has started. Dependency: `sap/ui/test/Opa5`\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-testing-navigation-10592af.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t'sap/ui/test/Opa5'\n], function (Opa5) {\n\t\"use strict\";\n\t\tOpa5.createPageObjects({\n\t\t\tonTheBrowser: {\n\t\t\t\tactions: {\n\t\t\t\t\tiPressOnTheForwardButton: function () {\n\t\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\t\tOpa5.getWindow().history.forward();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tassertions: {}\n\t\t\t}\n\t\t});\n\t}); \n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies in Component Metadata (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how dependencies are defined in the component metadata. It specifies the UI5 version, required libraries, and other components.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/migrating-from-component-metadata-to-manifest-e282db2.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n\"dependencies\": {\n    \"ui5version\": \"1.30.0\",\n    \"libs\": [\n        \"sap.m\",\n        \"sap.ui.unified\"\n    ],\n    \"components\": [ \"sap.app.otherComponent\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic and Static Filters in Table Binding - JavaScript\nDESCRIPTION: This snippet illustrates how to combine static and dynamic filters in a SAPUI5 XML view using OData V4. The static filter is defined using the `$filter` parameter, while the dynamic filter's initial value is set via the `filters` aggregation binding information.  Both filters are combined with a logical AND on the server side.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/filtering-5338bd1.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<Table growing=\"true\" growingThreshold=\"5\" id=\"Equipments\"\n    items=\"{\n            path : '/Equipments',\n            parameters : {\n                $$operationMode : 'Server',\n                $filter : 'Category eq \\'Electronics\\'',                             <-- static filter\n                $select : 'Category,EmployeeId,ID,Name'\n            },\n            filters : {                                      <-- dynamic filter initial value\n                path : 'EmployeeId',\n                operator : 'GE',\n                value1 : '0000'\n            }\n        }\">\n```\n\n----------------------------------------\n\nTITLE: Dynamic and Static Sorters - XML View - OpenUI5\nDESCRIPTION: This XML snippet demonstrates the usage of both dynamic and static sorters within an OpenUI5 XML view for a table bound to an OData V4 service.  The static sorter is defined using the '$orderby' parameter within the binding parameters, while the dynamic sorter is specified using the 'sorter' property in the aggregation binding. The 'group' property on the dynamic sorter enables grouping by 'Category'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sorting-d2ce3f5.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Table growing=\"true\" growingThreshold=\"5\" id=\"Equipments\"\n    items=\"{\n            path : '/Equipments',\n            parameters : {\n                $$operationMode : 'Server',\n                $orderby : 'Name',                             <-- static sorter\n                $select : 'Category,EmployeeId,ID,Name'\n            },\n            sorter : {                                      <-- dynamic sorter; can be overwritten by calling sort on the list binding\n                path : 'Category',\n                group : true                                <-- optional, see parameter vGroup of sap.ui.model.Sorter\n            }\n        }\">\n```\n\n----------------------------------------\n\nTITLE: Calling OData Function Import\nDESCRIPTION: This code snippet demonstrates how to call an OData function import using the `callFunction` method of the `ODataModel`. It specifies the function name, HTTP method, and URL parameters. This request can be deferred and submitted later via `submitChanges`. Only \"IN\" parameters are supported.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\noModel.callFunction(\"/GetProductsByRating\",{method:\"GET\", urlParameters:{\"rating\":3}})\n```\n\n----------------------------------------\n\nTITLE: Loading Fragment Using Fragment.load without ID\nDESCRIPTION: This JavaScript code demonstrates how to load a fragment using `Fragment.load` without specifying an ID. The IDs of the controls inside the fragment will not be prefixed in this case.  This can lead to ID collisions if the fragment is instantiated multiple times without unique IDs.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/ids-in-declarative-fragments-0715706.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Fragment\"], function(Fragment){\n   Fragment.load({\n      name: \"my.useful.UiPartZ\"\n   }).then(function(oFragment){\n      // ...\n   }); // Button ID will not be prefixed\n});\n```\n\n----------------------------------------\n\nTITLE: Karma Configuration for non-UI5 Tooling projects\nDESCRIPTION: This JavaScript snippet shows the Karma configuration for projects that do not use UI5 Tooling. It defines the `ui5` framework and the `Chrome` browser, and it also requires that you specify the URL to your OpenUI5 resources. Adapt the URL to your specific OpenUI5 installation. The `module.exports` function is necessary for Karma to read the configuration file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-automation-ae44824.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(config) {\n  config.set({\n\n    frameworks: [\"ui5\"],\n\n    ui5: {\n      url: \"https://<<server>>:<<port>>\"\n    },\n\n    browsers: [\"Chrome\"]\n\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using asyncPolling in a specific waitFor statement\nDESCRIPTION: This code shows how to set `asyncPolling` for a specific `waitFor` statement. It is used to address issues where interactions with controls, such as those in overflow toolbars, happen before the controls are fully rendered. Setting asyncPolling to true allows for the execution flows caused by the interaction to complete.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-the-autowait-parameter-fb487ef.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// in an OPA test\noOpa.waitFor({\n    id: \"controlId\",\n    asyncPolling: true,\n    success: function (oControl) {\n        // TODO assert status\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configure UI5 Loader Paths - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the UI5 loader to define custom paths. This is essential for resolving `ui5://` URLs within the manifest file. The configured paths allow referencing resources using a prefix, which is then resolved to a specific location.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-descriptor-for-applications-components-and-libraries-be0cf40.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.loader.config({\n    paths: {\n        \"my/url/prefix\": \"this/url/is/reachable\"\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: External Renderer Module Definition - JavaScript\nDESCRIPTION: This example illustrates the definition of a renderer module. The `MyControlRenderer` object encapsulates the `render` function and can include other helper functions. The `apiVersion` property is crucial for selecting a rendering approach.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/renderer-object-c9ab345.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// module 'my/lib/MyControlRenderer'\nsap.ui.define([], function() {\n    \"use strict\";\n   \n    var MyControlRenderer = {\n        apiVersion: 2, // explained later\n        render: function(oRm, oControl) {\n            // okay, not really complex, but you get the idea\n            oRm.openStart(\"div\", oControl).openEnd().text(oControl.getText()).close(\"div\");\n        }\n    };\n    \n    return MyControlRenderer;\n});\n```\n\n----------------------------------------\n\nTITLE: Expanding Table Items Aggregation\nDESCRIPTION: This XML snippet modifies the `items` aggregation of the table to include an `expand` parameter for the `Supplier` entity. This ensures that supplier data is included in the service request for products, reducing the number of requests needed. The `expand` parameter allows binding directly to `{Supplier/CompanyName}` later.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-extending-the-worklist-table-84100bc.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Table\n\t\t\tid=\"table\"\n\t\t\twidth=\"auto\"\n\t\t\titems=\"{\n\t\t\t\tpath: '/Products',\n\t\t\t\tsorter: {\n\t\t\t\t\tpath: 'ProductName',\n\t\t\t\t\tdescending: false\n\t\t\t\t},\n\t\t\t\tparameters: {\n\t\t\t\t\t'expand': 'Supplier'\n\t\t\t\t}\n\t\t\t}\"\n\t\t\tnoDataText=\"{worklistView>/tableNoDataText}\"\n\t\t\tbusyIndicatorDelay=\"{worklistView>/tableBusyDelay}\"\n\t\t\tgrowing=\"true\"\n\t\t\tgrowingScrollToLoad=\"true\"\n\t\t\tupdateFinished=\".onUpdateFinished\">\n\t\t\t<headerToolbar>\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<Title id=\"tableHeader\" text=\"{worklistView>/worklistTableTitle}\"/>\n\t\t\t\t\t<ToolbarSpacer />\n\t\t\t\t\t<SearchField\n\t\t\t\t\t\tid=\"searchField\"\n\t\t\t\t\t\ttooltip=\"{i18n>worklistSearchTooltip}\"\n\t\t\t\t\t\tsearch=\".onSearch\"\n\t\t\t\t\t\twidth=\"auto\">\n\t\t\t\t\t</SearchField>\n\t\t\t\t</Toolbar>\n…\n```\n\n----------------------------------------\n\nTITLE: Defining FlaggedType (Custom Data Type)\nDESCRIPTION: This code defines a custom data type, FlaggedType, which extends sap.ui.model.SimpleType. It includes empty formatValue, parseValue, and validateValue functions. These functions will handle the conversion between the model value and the UI value, and validation if needed.  This is the initial, empty implementation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-testing-a-new-module-a5bb7a6.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/model/SimpleType\"\n], function (SimpleType) {\n\t\"use strict\";\n\treturn SimpleType.extend(\"sap.ui.demo.bulletinboard.model.FlaggedType\", {\n\t\tformatValue: function () {\n\t\t},\n\t\tparseValue: function () {\n\t\t},\n\t\tvalidateValue: function () {\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: DateRangeSelection with OData V2 dates - XML View\nDESCRIPTION: This example demonstrates how to use the `sap.m.DateRangeSelection` control with OData V2 dates in an XML view. It binds to `Edm.DateTime` properties with the `sap:display-format='Date'` annotation. The `DateTime` type from `sap.ui.model.odata.type.DateTime` is used with a `displayFormat: 'Date'` constraint, and `DateInterval` to bind the date range. The `formatOptions` are set to `UTC: true` to handle dates in UTC format. Dependencies include `sap/ui/model/type/DateInterval` and `sap/ui/model/odata/type/DateTime`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{\n        DateInterval: 'sap/ui/model/type/DateInterval',\n        DateTime: 'sap/ui/model/odata/type/DateTime'\n    }\">\n    <DateRangeSelection\n        value=\"{\n            parts: [{\n                path: '/V2/Date1',\n                type: 'DateTime',\n                constraints: {displayFormat: 'Date'}\n            }, {\n                path: '/V2/Date2',\n                type: 'DateTime',\n                constraints: {displayFormat: 'Date'}\n            }],\n            type: 'DateInterval',\n            formatOptions: {UTC: true}\n        }\" />\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:creatable and sap:updatable to Immutable\nDESCRIPTION: This snippet illustrates how setting `sap:creatable` to true and `sap:updatable` to false on a property translates to the `Org.OData.Core.V1.Immutable` annotation being set to true. This means the property can be set on creation but cannot be changed afterwards.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_44\n\nLANGUAGE: xml\nCODE:\n```\nsap:creatable = \"true\" \nsap:updatable = \"false\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Core.V1.Immutable\": { \"Bool\" : \"true\" }\n```\n\n----------------------------------------\n\nTITLE: OData Request with ExpandLevels Parameter\nDESCRIPTION: This OData request demonstrates how to maintain the expand/collapsed state of nodes using the `ExpandLevels` parameter in the `TopLevels` function. It specifies which nodes should be expanded to which levels (e.g., NodeID '8' to level 0, NodeID '1' to level 1). This is crucial for preserving the tree state during refreshes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-aggregation-and-recursive-hierarchy-7d91431.md#_snippet_7\n\nLANGUAGE: OData\nCODE:\n```\nGET /sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/EMPLOYEES?$apply=com.sap.vocabularies.Hierarchy.v1.TopLevels(HierarchyNodes=$root/EMPLOYEES,HierarchyQualifier='OrgChart',NodeProperty='ID',Levels=2,<b>ExpandLevels=[{NodeID : \"8\", Levels : 0}, {NodeID : \"1\", Levels : 1}]</b>)&amp;...\n```\n\n----------------------------------------\n\nTITLE: Getting OpenUI5/SAPUI5 Version\nDESCRIPTION: This code snippet demonstrates how to retrieve the OpenUI5 and SAPUI5 versions at runtime using `sap.ui.VersionInfo` and `sap/base/util/Version`. It requires the `sap/ui/VersionInfo` and `sap/base/util/Version` modules. The snippet shows how to asynchronously load version information and then create Version objects to access the version strings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-configuration-api-2acafbf.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\n    \"sap/ui/VersionInfo\",\n    \"sap/base/util/Version\"\n], function(VersionInfo, VersionUtil) {\n    // access the SAPUI5 version at runtime\n    VersionInfo.load().then(function(oCurrentVersionInfo) {\n        const oSAPUI5Version = new VersionUtil(oCurrentVersionInfo.version);\n        // ...\n    });\n \n    // access the OpenUI5 version (core version) at runtime\n    VersionInfo.load(\"sap.ui.core\").then(function(oCurrentVersionInfo) {\n        const oOpenUI5Version = new VersionUtil(oCurrentVersionInfo.version);\n        // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming Localization LanguageTag to Locale\nDESCRIPTION: This code shows how to replace deprecated API calls by transforming the retrieved new `LanguageTag` into an `sap/ui/core/Locale`. It also demonstrates how to adjust the usage of the locale to the new `LanguageTag` API, accessing the language component directly.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-configuration-api-2acafbf.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// either transform LanguageTag into Locale and use as before\nsap.ui.require([\n    \"sap/base/i18n/Localization\",\n    \"sap/ui/core/Locale\"\n], (Localization, Locale) => {\n    // Transform LanguageTag to Locale\n    const oLocale = new Locale(Localization.getLanguageTag());\n    const sLanguage = oLocale.getLanguage();\n});\n \n// or adjust usage of Locale to LanguageTag API\nsap.ui.require([\n    \"sap/base/i18n/Localization\"\n], (Localization) => {\n    const oLanguageTag = Localization.getLanguageTag();\n    const sLanguage = oLanguageTag.language;\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Router Using getRouterFor - OpenUI5 (JavaScript)\nDESCRIPTION: This code shows how to access the router instance using the static `getRouterFor` function of the `sap.ui.core.UIComponent`.  It requires a reference to `this` (either a controller or a view) to determine the component context.  The function returns the router instance associated with the component.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initializing-and-accessing-a-routing-instance-acdb6cd.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oRouter = sap.ui.core.UIComponent.getRouterFor(this);\n```\n\n----------------------------------------\n\nTITLE: Component.js: Retrieving ID and Version\nDESCRIPTION: This JavaScript code snippet shows how to extract the application ID and version from the Component.js file, which are then used to populate the `sap.app/id` and `sap.app/applicationVersion/version` properties in the manifest.json file. The ID is obtained from the argument of `sap.ui.define`, and the version is obtained from the metadata.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(\"cust.emp.myleaverequests.Component\");\nsap.ui.require([\n    \"cust/emp/myleaverequests/Configuration\", \n    \"hcm/emp/myleaverequests/Component\"], function(Configuration, ComponentBase) {\n    ComponentBase.extend(\"cust.emp.myleaverequests.Component\", { \n        metadata : {\n            \"name\" : \"My Leave Requests\",\n            \"version\" : \"1.2.6\"\n            ...\n\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.support.retina with window.devicePixelRatio (Native)\nDESCRIPTION: This snippet demonstrates replacing `jQuery.support.retina` with the native `window.devicePixelRatio` property. `window.devicePixelRatio` returns the ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.devicePixelRatio >= 2\n```\n\n----------------------------------------\n\nTITLE: Specifying Initialization Module for Bootstrap - HTML\nDESCRIPTION: This code snippet shows how to specify an initialization module to be loaded and executed after the core initialization using the `data-sap-ui-oninit` configuration parameter in the bootstrap script tag. It defines the module path and resource roots for the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/01_Whats-New/what-s-new-in-openui5-1-54-c838330.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/sapui5/resources/sap-ui-core.js\" \n\tid=\"sap-ui-bootstrap\"\n\tdata-sap-ui-libs=\"sap.m\" \n\tdata-sap-ui-oninit=\"module:sap/app/App\"\n\tdata-sap-ui-resourceroots='{\"sap.app\": \"my/local/path\"}'\n\n\tdata-sap-ui-theme=\"sap_belize\"></script>\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Description Label via Local Annotation File (OData)\nDESCRIPTION: This XML code snippet demonstrates how to modify the label of a description field in a value list's metadata using a local annotation file. It shows how to target a specific property within the value list schema and overwrite its existing label.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/value-lists-ab267a6.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<Schema Namespace=\"my.local.annotations\">\n    <Annotations Target=\"com.sap.gateway.f4.d_pr_type-fv.v0001.D_PR_TYPE_FV/DESCRIPTION\">\n        <Annotation Term=\"com.sap.vocabularies.Common.v1.Label\" String=\"My fancy description\"/>\n    </Annotations>\n</Schema>\n```\n\n----------------------------------------\n\nTITLE: Submitting Changes in ODataModel JavaScript\nDESCRIPTION: This JavaScript code submits the changes made to an ODataModel. The `submitChanges()` method triggers the sending of deferred OData requests.  It accepts success and error handler functions as parameters, allowing you to handle the results of the operation. If no groupId is specified, all deferred groups are submitted.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\noModel.submitChanges({success: mySuccessHandler, error: myErrorHandler});\n```\n\n----------------------------------------\n\nTITLE: Parsing invalid numbers with NumberFormat\nDESCRIPTION: Demonstrates the behavior of `NumberFormat` when parsing numbers with invalid grouping separators. According to the parsing logic, these inputs are considered invalid because the grouping separator appears at an unexpected position and is treated as `NaN` in case of Float, Percent and Integer instances and `null` in case of Unit and Currency instances. It relies on the `NumberFormat` module from `sap/ui/core/format/NumberFormat`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/number-format-91f2f28.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\noFloatFormat.parse(\"1,2\"); // NaN (before: 12)\noFloatFormat.parse(\"1,23\"); // NaN (before: 123)\noFloatFormat.parse(\"1,2345\"); // NaN (before: 12345)\n```\n\n----------------------------------------\n\nTITLE: XML View with Initial Visibility Issues\nDESCRIPTION: This XML view demonstrates a common anti-pattern where both display and edit panels are defined, but the edit panel is initially hidden using the `visible` property. This results in unnecessary instantiation and initialization of controls within the hidden panel, negatively impacting performance. The controller toggles visibility of the panels.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/performance-issues-966d67c.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"my.own.controller\">\n\t<Page>\n                        \n\t\t<Panel id=\"displayPanel\" headerText=\"Display Data\">\n\t\t\t<Table...>\n\t\t</Panel>\n                        \n\t\t<!-- edit panel is initially hidden, but still instantiated -->\n\t\t<Panel id=\"editPanel\" headerText=\"Edit Data\" visible=\"false\">\n\t\t\t<Table...> \n\t\t</Panel>\n                        \n\t\t<Button text=\"Edit\" press=\"toEditMode\"/>\n\t</Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Checking for Missing Controls OPA5 (JavaScript)\nDESCRIPTION: This snippet shows how to verify that a control is not present by using a custom `check` function in OPA5. It locates a parent control and iterates over its children to ensure that none of them match a given condition. The `check` function should return `true` if no children match the condition.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nthis.waitFor({\n   controlType: \"sap.m.Popover\",\n    success: function (aPopovers) {\n        return this.waitFor({\n            check: function () {\n                var aPopoverContent = aPopovers[0].getContent();\n                var aButtons = aPopoverContent.forEach(function (oChild) {\n                    return oChild.getMetadata().getName() === \"sap.m.Button\" &&\n                        oChild.getText() === \"Another text\";\n                });\n                return !aButtons || !aButtons.length;\n            },\n            success: function () {\n                Opa5.assert.ok(true, \"The popover button is missing\");\n            },\n            errorMessage: \"The popover button is present\"\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: OpenUI5 Currency Data Binding in XML View\nDESCRIPTION: This snippet demonstrates currency data binding in an OpenUI5 XML view. It binds the 'Price' and 'CurrencyCode' properties to an input field using the 'Currency' type, allowing two-way data binding with constraints for decimal precision, string length, and nullability.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-and-unit-customizing-in-odata-v4-4d1b9d4.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<Input value=\"{\n                    mode: 'TwoWay', \n                    parts: [{\n                       path: 'Price', \n                       type: 'Decimal', \n                       constraints: {'precision': 15, 'scale': 'variable', 'nullable': false}\n                    }, {\n                       path: 'CurrencyCode', \n                       type: 'StringType', \n                       constraints: {'maxLength': 5, 'nullable': false}\n                    }, {\n                       mode: 'OneTime', \n                       path: '/##@@requestCurrencyCodes', \n                       targetType: 'any'\n                    }], \n                    type: 'Currency'}\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring Component Dependencies in manifest.json\nDESCRIPTION: This snippet demonstrates the old approach of declaring component dependencies directly within the `dependencies` section of the `manifest.json` file.  It is intended for projects that have not yet adopted the component reuse feature.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-and-nesting-components-346599f.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sap.ui5\": {\n    \"dependencies\": {\n      \"components\": {\n        \"sap.reuse.component\": {}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing with Title Propagation in OpenUI5 (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure routing in an OpenUI5 application to propagate the 'titleChanged' event from a nested component to the parent component. The 'propagateTitle' property is set to true in the target configuration.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enabling-routing-in-nested-components-fb19f50.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"sap.ui5\": {\n        \"componentUsages\": {\n            \"myreuse\": {\n                \"name\": \"reuse.component\",\n                \"settings\": {},\n                \"componentData\": {},\n                \"lazy\": false\n            }\n        },\n        \"routing\": {\n            \"config\": {\n                ...\n            },\n            \"routes\": [{\n                \"name\": \"home\",\n                \"pattern\": \"\",\n                \"target\": {\n                    \"name\": \"attachment\",\n                    \"prefix\": \"atch\",\n\n            \"propagateTitle\": true     \n                }\n            }],\n            \"targets\": {\n                \"attachment\": {\n                    \"type\": \"Component\",\n                    \"usage\": \"myreuse\",\n                    \"options\": {\n                        // optional\n                        // define the additional parameter for\n                        // instatiating the component instance\n                    },\n                    \"containerOptions\": {\n                        // optional\n                        // define the additional parameter for\n                        // instantiating the component container\n                        // which enables the component to be rendered\n                        // in the parent control\n                    },\n                    \"controlId\": \"page\",\n                    \"controlAggregation\": \"content\"\n                }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OData Request with Ancestors Transformation\nDESCRIPTION: This OData request retrieves employees using the `ancestors` transformation. It filters the hierarchy based on specific criteria (AGE ge 0 and (Is_Manager)) and searches for employees matching the search term 'developer'. The `ancestors` transformation helps to retrieve the ancestors of matching employees within the hierarchy.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-aggregation-and-recursive-hierarchy-7d91431.md#_snippet_5\n\nLANGUAGE: OData\nCODE:\n```\nGET /sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/EMPLOYEES?<b>$apply=ancestors($root/EMPLOYEES,OrgChart,ID,filter(AGE ge 0 and (Is_Manager))/search(developer),keep start)</b>/orderby(AGE)/com.sap.vocabularies.Hierarchy.v1.TopLevels(HierarchyNodes=$root/EMPLOYEES,HierarchyQualifier='OrgChart',NodeProperty='ID',Levels=2) &amp;$select=AGE,DescendantCount,DistanceFromRoot,DrillState,ID,MANAGER_ID,Name&amp;$count=true&amp;$skip=0&amp;$top=115</code>\n```\n\n----------------------------------------\n\nTITLE: XML View without Stable IDs - OpenUI5\nDESCRIPTION: This XML view demonstrates a basic OpenUI5 layout structure without explicitly defined IDs for the Page and Table controls. OpenUI5 will dynamically generate IDs for these elements at runtime. These IDs might change if the app structure is modified.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/use-stable-ids-79e910e.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page>\n\t\t<content>\n\t\t\t<Table>\n\t\t\t</Table>\n\t\t</content>\n\t</Page>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Performing instanceof Checks in OpenUI5\nDESCRIPTION: This code snippet shows how to use `instanceof` checks in OpenUI5 to determine the type of a control. It loads `sap/ui/core/mvc/View` and `sap/ui/core/Fragment` and uses `instanceof` to check if `oControl` is an instance of either of these classes. This requires that the respective classes are already loaded.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/loading-a-module-d12024e.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define(['sap/ui/core/mvc/View', 'sap/ui/core/Fragment'], function(View, Fragment) {\n    ...\n    if (oControl instanceof View) {\n        ...\n    } else if (oControl instanceof Fragment) {\n        ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: XML Button with Boolean Expression Parameter\nDESCRIPTION: This snippet uses a boolean expression to determine the value passed to the event handler. This is an example of expression binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-events-in-xml-views-b0fb4de.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Press Me\" press=\".doSomething(${products>type} === 'Laptop')\" />\n```\n\n----------------------------------------\n\nTITLE: XML View with Binding Error - OpenUI5\nDESCRIPTION: This XML view demonstrates a common error in OpenUI5 applications: a typo in the binding path of a number attribute. Specifically, 'invoice>ExtendedPrice' is misspelled as 'invoice>ExTendedPrice'. The purpose is to simulate an error that can be identified with the OpenUI5 diagnostics tool and browser developer tools. The binding path is used in the `number` attribute of an `ObjectListItem` within a `List` control, intended to display the extended price of an invoice.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-29-debugging-tools-typescript-50990a0.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n\n    <List\n        id=\"invoiceList\"\n        headerText=\"{i18n>invoiceListTitle}\"\n        class=\"sapUiResponsiveMargin\"\n        width=\"auto\"\n        items=\"{\n            path : 'invoice>/Invoices',\n            sorter : {\n                path : 'ShipperName',\n                group : true\n            }\n        }\">\n\n        <headerToolbar>\n            <Toolbar>\n                <Title text=\"{i18n>invoiceListTitle}\" />\n                <ToolbarSpacer />\n                <SearchField\n                    width=\"50%\"\n                    search=\".onFilterInvoices\"/>\n            </Toolbar>\n        </headerToolbar>\n        <items>\n            <ObjectListItem\n                core:require=\"{\n                    Currency: 'sap/ui/model/type/Currency'\n                }\"\n                title=\"{invoice>Quantity} x {invoice>ProductName}\"\n                number=\"{\n                    parts: [\n                        'invoice>ExTendedPrice',\n                        'view>/currency'\n                    ],\n                    type: 'Currency',\n                    formatOptions: {\n                        showMeasure: false\n                    }\n                }\"\n                numberUnit=\"{view>/currency}\"\n                numberState=\"{= ${invoice>ExtendedPrice} > 50 ? 'Error' : 'Success' }\">\n                <firstStatus>\n                    <ObjectStatus\n                        core:require=\"{\n                            Formatter: 'ui5/walkthrough/model/formatter'\n                        }\"\n                        text=\"{\n                            path: 'invoice>Status',\n                            formatter: 'Formatter.statusText.bind($controller)'\n                        }\"/>\n                </firstStatus>\n            </ObjectListItem>\n        </items>\n    </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Conditional Module Definitions - Avoid\nDESCRIPTION: This example shows the incorrect usage of conditional module definitions using `sap.ui.define`. The module's export value and dependencies become unclear, hindering bundling and parameter passing. The recommendation is to split the definitions into separate files.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-for-loading-modules-4363b3f.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// BAD EXAMPLE - DON'T DO THIS\nif (myProperty){\n    sap.ui.define([], function(){\n        ... \n    });\nelse {\n    sap.ui.define([], function(){\n        ... \n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Image with Press Handler in OpenUI5\nDESCRIPTION: This code snippet shows how to define an interactive image in OpenUI5 that triggers an action when pressed. The `alt` attribute provides a text description, and `decorative=false` indicates that the image is interactive.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/labeling-and-tooltips-329a029.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Image src=\"IMAGE_PATH\" alt=\"This is an image with a press handler\" decorative=false press=onImagePress>\n```\n\n----------------------------------------\n\nTITLE: Grid with defaultSpan XML\nDESCRIPTION: This XML snippet demonstrates how to define a basic `sap.ui.layout.Grid` with a `defaultSpan` property. The `defaultSpan` attribute controls the number of columns each item spans across different screen sizes (XL, L, M, S). The images within the grid will adjust their width based on the available screen size and the specified span values.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/sap-ui-layout-grid-43ae317.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<l:Grid\n\t\tdefaultSpan=\"XL3 L4 M6 S12\">\n\t<Image src=\"/item1.png\" width=\"100%\"></Image>\n\t<Image src=\"/item2.png\" width=\"100%\"></Image>\n\t<Image src=\"/item3.png\" width=\"100%\"></Image>\n\t<Image src=\"/item4.png\" width=\"100%\"></Image>\n</l:Grid>\n```\n\n----------------------------------------\n\nTITLE: Placing ValueList Annotation in Local Annotation File (OData)\nDESCRIPTION: This XML snippet shows how to place a `ValueList` annotation in a local annotation file for an OData service. It includes specifying the `CollectionRoot`, `CollectionPath`, and parameters for the value list.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/value-lists-ab267a6.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Annotations Target=\"com.sap.gateway.default.zui5_epm_sample.v0002.Product/Category\">\n        <Annotation Term=\"SAP__common.ValueList\" Qualifier=\"existing\">\n            <Record>\n                <PropertyValue Property=\"Label\" String=\"Category (Modified Mapping)\" />\n                <PropertyValue Property=\"CollectionRoot\" String=\"../../../../f4/sap/h_epm_pd_cats-sh/0001;ps='default-zui5_epm_sample-0002';va='com.sap.gateway.default.zui5_epm_sample.v0002.ET-PRODUCT.CATEGORY'/$metadata\" />\n                <PropertyValue Property=\"CollectionPath\" String=\"H_EPM_PD_CATS_SH_Set\" />\n                <PropertyValue Property=\"Parameters\">\n                    <Collection>\n                        <Record Type=\"SAP__common.ValueListParameterDisplayOnly\">\n                            <PropertyValue Property=\"Label\" String=\"Category\" />\n                            <PropertyValue Property=\"ValueListProperty\" String=\"CATEGORY\" />\n                        </Record>\n                    </Collection>\n                </PropertyValue>\n            </Record>\n        </Annotation>\n    </Annotations>\n```\n\n----------------------------------------\n\nTITLE: Adding InvoiceList View to App.view.xml\nDESCRIPTION: Adds the `InvoiceList` view to the `App.view.xml` file. The `InvoiceList` view is embedded within a panel below the existing `HelloPanel`. This integration allows displaying the invoice data alongside the existing application components.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-19-aggregation-binding-typescript-24580fb.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n    <Shell>\n        <App class=\"myAppDemoWT\">\n            <pages>\n                <Page title=\"{i18n>homePageTitle}\">\n                    <content>\n                        <Panel\n                            headerText=\"{i18n>helloPanelTitle}\"\n                            class=\"sapUiResponsiveMargin\"\n                            width=\"auto\">\n                            <content>\n                                <mvc:XMLView\n                                    viewName=\"ui5.walkthrough.view.HelloPanel\"/>\n                                <mvc:XMLView\n                                    viewName=\"ui5.walkthrough.view.InvoiceList\"/>\n                            </content>\n                        </Panel>\n                    </content>\n                </Page>\n            </pages>\n        </App>\n    </Shell>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: XML View for Upsert with Two-Way Binding\nDESCRIPTION: This XML snippet demonstrates how to create a new entity via upsert using two-way data binding with the `Input` control. When the user enters text into the input field and a `Description` entity doesn't exist for the product with ID '42', the V4 OData model automatically creates a PATCH request. This requires that the object page is bound to a single product instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-single-entity-ba0e73c.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<FlexBox binding=\"{/Products('42')}\">\n    <Input value=\"{Description/Text}\"/>\n</FlexBox>\n```\n\n----------------------------------------\n\nTITLE: Binding Items with OData Parameters in XML View (String Values)\nDESCRIPTION: This XML view snippet shows how to bind items to a `Table` control using OData V4 and parameters. It specifies `$count`, `$expand`, `$filter`, `$orderby`, and `$select` parameters as string values within the `items` binding.  The `$expand` and `$select` parameters are defined as strings representing the desired properties.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/parameters-1ab4f62.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Table growing=\"true\" growingThreshold=\"5\" id=\"SalesOrders\"\n    items=\"{\n            path : '/SalesOrderList',\n            parameters : {\n                $count : true,\n                $expand : 'SO_2_BP',\n                $filter : 'BuyerName ge \\'M\\' ',\n                $orderby : 'GrossAmount desc',\n                $select : 'BuyerName,CurrencyCode,GrossAmount,Note,SalesOrderID'\n            },\n        }\">\n```\n\n----------------------------------------\n\nTITLE: Refresh Selected Sales Order Context - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to refresh the OData V4 context of a selected sales order in a `sap.m.Table` bound to an OData V4 list binding. It first retrieves the context for the selected entity and then calls the `refresh()` method on the context, after checking for pending changes. It requires a table with sales order data and the selection of a row.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initialization-and-read-requests-fccfb2e.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nonRefreshSelectedSalesOrder : function () {\n    // within a sap.m.Table bound to a OData V4 list binding get the OData V4 context for the selected entity\n    var oSalesOrderContext = this.byId(\"SalesOrders\").getSelectedItem().getBindingContext();\n      \n    if (!oSalesOrderContext.hasPendingChanges()) {\n        oSalesOrderContext.refresh();\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Explicit Aggregation in OpenUI5 (Deprecated)\nDESCRIPTION: Shows how to explicitly declare the 'content' aggregation for a Panel control and add buttons to it. The `data-sap-ui-aggregation=\"content\"` attribute is used to specify the target aggregation. This provides more control over aggregation but is now deprecated.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-aggregations-deprecated-91f136c.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-sap-ui-type=\"sap.ui.commons.Panel\">\n  <div data-sap-ui-aggregation=\"content\">\n    <div data-sap-ui-type=\"sap.ui.commons.Button\" data-text=\"My Button 1\"></div>\n    <div data-sap-ui-type=\"sap.ui.commons.Button\" data-text=\"My Button 2\"></div>\n    <div data-sap-ui-type=\"sap.ui.commons.Button\" data-text=\"My Button 3\"></div>\n    <div data-sap-ui-type=\"sap.ui.commons.Button\" data-text=\"My Button 4\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Recursive UI Element Actions OPA5 (JavaScript)\nDESCRIPTION: This snippet demonstrates a recursive function for expanding tree nodes in OPA5.  It waits for collapsed tree nodes and expands them recursively.  OPA ensures `waitFor` statements in the success handler execute before the next arrangement, action, or assertion. The `iExpandRecursively` function expands tree nodes to the next level.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\niExpandRecursively : function() {\n    return this.waitFor({\n        controlType : \"sap.m.StandardTreeItem\",\n        matchers : new sap.ui.test.matchers.PropertyStrictEquals({\n            name : \"expanded\", \n            value : false\n        }),\n        actions : function (oTreeNode) {\n            oTreeNode.getTree().expandToLevel(oTreeNode.getLevel() + 1)\n            that.iExpandRecursively();\n        },\n        errorMessage : \"Didn't find collapsed tree nodes\"\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Formatter Function Usage in XML Template View (AH.format)\nDESCRIPTION: This code snippet demonstrates how to use the `format` formatter function of the `AnnotationHelper` within an XML template view in SAPUI5. The `format` function handles escaping and formatting of constant values and provides binding expressions with suitable types based on OData v4 annotations. It requires the `sap.ui.model.odata.AnnotationHelper` to be available via template:require.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/annotation-helper-dbec058.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n        xmlns=\"sap.m\"\n        xmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\"\n        template:require=\"{AH: 'sap/ui/model/odata/AnnotationHelper'}\">\n        ...\n        <Text text=\"{path: 'meta>Value', formatter: 'AH.format'}\"/>\n```\n\n----------------------------------------\n\nTITLE: Example .supportrc File - JSON\nDESCRIPTION: A `.supportrc` file specifies the availability of public and internal rules for a library. This JSON file is used by the Support Assistant to determine whether to load ruleset files, reducing redundant requests. If a property is missing, its value defaults to false.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/create-a-ruleset-for-a-library-b5a5135.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"publicRules\": true,\n  \"internalRules\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Non-Creatable Navigation Properties\nDESCRIPTION: This code snippet demonstrates how the `sap:creatable-path=\"Creatable\"` annotation in OData V2 is converted to the `Org.OData.Capabilities.V1.InsertRestrictions` annotation in OData V4. It specifies conditional restrictions based on the 'Creatable' property, where navigation property 'NavPropA' is non-insertable if 'Creatable' is false.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_72\n\nLANGUAGE: JSON\nCODE:\n```\n\"Org.OData.Capabilities.V1.InsertRestrictions\": {    \"NonInsertableNavigationProperties\" : [{        \"IF\" : [{            \"Not\" : {                \"Path\" : \"Creatable\"            }        }, {            \"NavigationPropertyPath\" : \"NavPropA\"        }]    }] }\n```\n\n----------------------------------------\n\nTITLE: Initializing Composite Control and Aggregations\nDESCRIPTION: This JavaScript code initializes the 'SearchField' composite control by creating instances of Input and Button controls and assigning them to the hidden aggregations '_input' and '_btn', respectively. It also defines event handlers for the Input's 'change' event and the Button's 'press' event to propagate changes and trigger the 'search' event.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/standard-composite-controls-c1512f6.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// \"Button\" required from \"sap/m/Button\"\n// \"Input\" required from \"sap/m/Input\"\n/**\n * Initialization hook... creating composite parts\n */\nSearchField.prototype.init = function(){\n  var that = this;\n  this.setAggregation(\"_input\", new Input({\n    change: function(oEvent){\n      that.setProperty(\"value\", oEvent.getParameter(\"Value\"), true /*no re-rendering needed, change originates in HTML*/); //see section Properties for explanation\n    }\n  }));\n  this.setAggregation(\"_btn\", new Button({\n    text: \"Search\",\n    press: function(){\n      that.fireSearch();\n    }\n  }));\n};\n```\n\n----------------------------------------\n\nTITLE: Creating OData Entry with createEntry() (JavaScript)\nDESCRIPTION: This example demonstrates how to create a new entry in an OData entity set using the `createEntry()` method. It creates an entry in the `ProductSet` collection with specified initial properties such as `Name`, `Description`, `Price`, and `CurrencyCode`. The code also shows how to bind a form to the transient context of the new entry, submit changes to persist the entity in the backend, handle successful creation, and delete the created entity.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// create an entry in the Products collection with the specified properties and values as initial data\nvar oContext = oModel.createEntry(\"/ProductSet\", {\n    properties : {Name : \"Laptop X\", Description:\"New Laptop\", Price:\"1000\", CurrencyCode : \"USD\"}\n});\n// bind a form against the transient context for the newly created entity\noForm.setBindingContext(oContext);\n \n// submit the changes: creates entity in the back end\noModel.submitChanges({success: mySuccessHandler, error: myErrorHandler});\n// handle successful creation or reset\noContext.created().then(\n  function () { /* successful creation */ },\n  function () { /* deletion of the created entity before it is persisted */ }\n);\n \n// delete the created entity\noContext.delete();\n```\n\n----------------------------------------\n\nTITLE: XML View with Object Value Property Binding\nDESCRIPTION: This XML snippet showcases a property binding in an SAPUI5 SimpleForm control. It binds to a complex property ('BP_2_CONTACT') within the context of a BusinessPartnerList entity. The `targetType: 'any'` is used to pass the object value to the formatter function, and the `mode: 'OneTime'` specifies that the binding should only be evaluated once.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/changes-compared-to-odata-v2-model-abd4d7c.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<SimpleForm binding=\"{/BusinessPartnerList('42')}\">\n\t<Label text=\"Phone number list\"/>\n\t<Text\n\t\ttext=\"{\n\t\t\tpath: 'BP_2_CONTACT', \n\t\t\tmode: 'OneTime', \n\t\t\ttargetType: 'any', \n\t\t\tformatter: '.formatPhoneNumbersAsCSV'\n\t\t}\"/>\n</SimpleForm>\n```\n\n----------------------------------------\n\nTITLE: Globally Configure Custom Units - JavaScript\nDESCRIPTION: This code snippet demonstrates how to globally configure custom units in OpenUI5 using `sap.base.i18n.Formatting.addCustomUnits`. These units are then available in all unit-formatted instances for the current locale, unless overridden by a specific instance's custom units. It also demonstrates how to overwrite existing CLDR units.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/unit-formatting-8e618a8.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.require([\"sap/base/i18n/Formatting\", \"sap/ui/core/format/NumberFormat\"], function(Formatting, NumberFormat) {\n   Formatting.addCustomUnits({\n       \"cats\": {\n          \"displayName\": \"kitties\",\n          \"unitPattern-count-one\": \"{0} kitty\",\n          \"unitPattern-count-other\": \"{0} kitties\"\n       },\n       \"dogs\": {\n          \"displayName\": \"puppies\",\n          \"unitPattern-count-one\": \"{0} puppy\",\n          \"unitPattern-count-other\": \"{0} puppies\"\n       },\n       \"power-horsepower\": { // overwrite of an existing CLDR unit\n          \"displayName\": \"Horsepower\",\n          \"unitPattern-count-one\": \"{0} AmazingHorse\", // singular form\n          \"unitPattern-count-other\": \"{0} AmazingHorses\" // plural form\n       }\n    });\n \n \n    var oUnitFormat = NumberFormat.getUnitInstance({decimals:2, style:\"long\"});\n \n    // formatting a custom unit\n    console.log(oUnitFormat.format(12, \"cats\")); // 12,00 kitties\n \n \n    // formatting and existing CLDR unit\n    console.log(oUnitFormat.format(5, \"speed-meter-per-second\")); // 5,00 m/s\n \n \n    // formatting and existing CLDR unit\n    console.log(oUnitFormat.format(12, \"power-horsepower\")); // 12,00 AmazingHorses\n});\n```\n\n----------------------------------------\n\nTITLE: OData Metadata JSON Structure\nDESCRIPTION: This JSON snippet represents the overall structure of an OData metadata document. It includes definitions for schemas, entity types, complex types, enum types, type definitions, actions, functions, entity containers, and terms.  It uses placeholders like `<Schema Namespace>`, `<EntityType Name>`, etc. to represent actual values. Understanding this structure is crucial for parsing and interpreting OData metadata.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v4-metadata-json-format-87aac89.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$Version\" : \"<3.1.1 Edmx Version>\",\n  \"$Annotations\" : {\n    \"<14.2.1 Annotations Target>\" : {\n      // Note: \"<14.3.2 Annotation Qualifier>\" defaults to \"<14.2.2 Annotations Qualifier>\",\n      // qualifiers are optional, \"#\" is omitted then\n      \"@<14.3.1 Annotation Term>#<14.3.2 Annotation Qualifier>\" : <value> // constant or dynamic expression\n      \"@<14.3.1 Annotation Term>#<14.3.2 Annotation Qualifier>@...\" : <value> // annotation of an annotation\n    }\n  },\n  \"$EntityContainer\" : \"<5.1.1 Schema Namespace>.<13.1.1 EntityContainer Name>\", // root entity container for this $metadata document\n  \"$Reference\" : {\n    // server-relative, dereferencable URLs (to $metadata) only!\n    \"<3.3.1 Reference Uri>\" : { \"@...\" : <value>,\n      \"$Include\" : [\"<3.4.1 Include Namespace>.\", ...], // optional\n      \"$IncludeAnnotations\" : [{\n        \"$TermNamespace\" : \"<3.5.1 IncludeAnnotations TermNamespace>.\",\n        \"$Qualifier\" : \"<3.5.2 IncludeAnnotations Qualifier>\", // optional\n        \"$TargetNamespace\" : \"<3.5.3 IncludeAnnotations TargetNamespace>.\" // optional\n      }, ...] // optional\n    }\n  }, // optional\n  \"<5.1.1 Schema Namespace>.\" : {\n    \"$kind\" : \"Schema\",\n    \"@...\" : <value> // place inline annotations for schema itself here!\n  },\n  \"<5.1.1 Schema Namespace>.<8.1.1 EntityType Name>\" : {\n    \"$kind\" : \"EntityType\",\n    \"$BaseType\" : \"<8.1.2 EntityType BaseType>\", // optional\n    \"$Abstract\" : true, // omit in case of default value: false\n    \"$OpenType\" : true, // omit in case of default value: false\n    \"$HasStream\" : true, // omit in case of default value: false\n    \"$Key\" : [\n      \"<8.3.1 PropertyRef Name>\", // in case no Alias is given\n      {\"<8.3.1 PropertyRef Alias>\" : \"<8.3.1 PropertyRef Name>\"},\n      ...\n    ], // optional\n    \"<6.1.1 Property Name>\" : {\n      \"$kind\" : \"Property\",\n      \"$Type\" : \"<6.1.2 Property Type>\",\n      \"$isCollection\" : true, // omit in case of default value: false\n      \"$Nullable\" : false, // omit in case of default value: true\n      \"$MaxLength\" : <6.2.2 MaxLength>, // optional, number\n      \"$Precision\" : <6.2.3 Precision>, // optional, number\n      \"$Scale\" : <6.2.4 Scale> | \"variable\", // optional, number or fixed string\n      \"$Unicode\" : false, // omit in case of default value: true\n      \"$SRID\" : \"<6.2.6 SRID>\", // optional\n      \"$DefaultValue\" : \"<6.2.7 DefaultValue>\" // optional\n    },\n    \"<7.1.1 NavigationProperty Name>\" : {\n      \"$kind\" : \"NavigationProperty\",\n      \"$Type\" : \"<7.1.2 NavigationProperty Type>\",\n      \"$isCollection\" : true, // omit in case of default value: false\n      \"$Nullable\" : false, // omit in case of default value: true\n      \"$Partner\" : \"<7.1.4 NavigationProperty Partner>\", // optional\n      \"$ContainsTarget\" : true, // omit in case of default value: false\n      \"$ReferentialConstraint\" : {\n        \"<7.2.1 ReferentialConstraint Property>\" : \"<7.2.2 ReferentialConstraint ReferencedProperty>\",\n        \"<7.2.1 ReferentialConstraint Property>@...\" : <value>\n      }, // optional\n      \"$OnDelete\" : \"<7.3.1. OnDelete Action>\", // optional\n      \"$OnDelete@...\" : <value>\n    },\n  },\n  \"<5.1.1 Schema Namespace>.<9.1.1 ComplexType Name>\" : {\n    \"$kind\" : \"ComplexType\",\n    \"$BaseType\" : \"<9.1.2 ComplexType BaseType>\", // optional\n    \"$Abstract\" : true, // omit in case of default value: false\n    \"$OpenType\" : true, // omit in case of default value: false\n    \"<6.1.1 Property Name>\" : {\n      // see above\n    },\n    \"<7.1.1 NavigationProperty Name>\" : {\n      // see above\n    }\n  },\n  \"<5.1.1 Schema Namespace>.<10.1.1 EnumType Name>\" : {\n    \"$kind\" : \"EnumType\",\n    \"$UnderlyingType\" : \"<10.1.2 EnumType UnderlyingType>\", // omit in case of default value: Edm.Int32\n    \"$IsFlags\" : true, // omit in case of default value: false\n    \"<10.2.1 Member Name>\" : \"<10.2.2 Member Value>\" // use string value in case of base type Edm.Int64, else number\n  },\n  \"<5.1.1 Schema Namespace>.<11.1.1 TypeDefinition Name>\" : {\n    \"$kind\" : \"TypeDefinition\",\n    \"$UnderlyingType\" : \"<11.1.2 TypeDefinition UnderlyingType>\",\n    \"$MaxLength\" : <11.1.3 MaxLength>, // optional, number\n    \"$Precision\" : <11.1.3 Precision>, // optional, number\n    \"$Scale\" : <11.1.3 Scale> | \"variable\", // optional, number or fixed string\n    \"$Unicode\" : false, // omit in case of default value: true\n    \"$SRID\" : \"<11.1.3 SRID>\" // optional\n  },\n  \"<5.1.1 Schema Namespace>.<12.1.1 Action Name>\" : [{\n    \"$kind\" : \"Action\",\n    \"$IsBound\" : true, // omit in case of default value: false\n    \"$EntitySetPath\" : \"<12.1.3 Action EntitySetPath>\", // optional\n    \"$Parameter\" : [{\n      \"$Name\" : \"<12.4.1 Parameter Name>\",\n      \"$isCollection\" : true, // omit in case of default value: false\n      \"$Type\" : \"<12.4.2 Parameter Type>\",\n      \"$Nullable\" : false, // omit in case of default value: true\n      \"$MaxLength\" : <12.4.4 MaxLength>, // optional, number\n      \"$Precision\" : <12.4.4 Precision>, // optional, number\n      \"$Scale\" : <12.4.4 Scale> | \"variable\", // optional, number or fixed string\n      \"$SRID\" : \"<12.4.4 SRID>\" // optional\n    }, ...], // optional\n    \"$ReturnType\" : {\n      \"$isCollection\" : true, // omit in case of default value: false\n      \"$Type\" : \"<12.3.1 ReturnType Type>\",\n      \"$Nullable\" : false, // omit in case of default value: true\n      \"$MaxLength\" : <11.1.3 MaxLength>, // optional, number\n      \"$Precision\" : <11.1.3 Precision>, // optional, number\n      \"$Scale\" : <11.1.3 Scale> | \"variable\", // optional, number or fixed string\n      \"$SRID\" : \"<11.1.3 SRID>\" // optional\n    } // optional\n  }, ...],\n  \"<5.1.1 Schema Namespace>.<12.2.1 Function Name>\" : [{\n    \"$kind\" : \"Function\",\n    \"$IsBound\" : true, // omit in case of default value: false\n    \"$IsComposable\" : true, // omit in case of default value: false\n    \"$EntitySetPath\" : \"<12.2.4 Function EntitySetPath>\", // optional\n    \"$Parameter\" : [{\n      // see above\n    }, ...], // optional\n    \"$ReturnType\" : {\n      // see above\n    }\n  }, ...],\n  \"<5.1.1 Schema Namespace>.<13.1.1 EntityContainer Name>\" : {\n    \"$kind\" : \"EntityContainer\"\n//      \"$Extends\" : \"<13.1.2 EntityContainer Extends>\", // not in the 1st step\n    \"<13.2.1 EntitySet Name>\" : {\n      \"$kind\" : \"EntitySet\",\n      \"$Type\" : \"<13.2.2 EntitySet EntityType>\", // Note: renamed for consistency!\n      \"$IncludeInServiceDocument\" : false, // omit in case of default value: true\n      \"$NavigationPropertyBinding\" : {\n        \"<13.4.1 NavigationPropertyBinding Path>\" : \"<13.4.2 NavigationPropertyBinding Target>\" // normalized\n      } // optional\n    },\n    \"<13.3.1 Singleton Name>\" : {\n      \"$kind\" : \"Singleton\",\n      \"$Type\" : \"<13.3.2 Singleton Type>\",\n      \"$NavigationPropertyBinding\" : {\n        \"<13.4.1 NavigationPropertyBinding Path>\" : \"<13.4.2 NavigationPropertyBinding Target>\" // normalized\n      } // optional\n    },\n    \"<13.5.1 ActionImport Name>\" : {\n      \"$kind\" : \"ActionImport\",\n      \"$Action\" : \"<13.5.2 ActionImport Action>\",\n      \"$EntitySet\" : \"<13.5.3 ActionImport EntitySet>\" // optional, normalized\n    },\n    \"<13.6.1 FunctionImport Name>\" : {\n      \"$kind\" : \"FunctionImport\",\n      \"$Function\" : \"<13.6.2 FunctionImport Function>\",\n      \"$EntitySet\" : \"<13.6.3 FunctionImport EntitySet>\", // optional, normalized\n      \"$IncludeInServiceDocument\" : true // omit in case of default value: false\n    }\n  },\n  \"<5.1.1 Schema Namespace>.<14.1.1 Term Name>\" : {\n    \"$kind\" : \"Term\",\n    \"$isCollection\" : true, // omit in case of default value: false\n    \"$Type\" : \"<14.1.2 Term Type>\",\n    \"$BaseTerm\" : \"<14.1.3 Term BaseTerm>\", // optional\n//    \"$DefaultValue\" : \"<14.1.4 Term DefaultValue>\", // omit in case of default value: null\n//    \"$AppliesTo\" : \"<14.1.5 Term AppliesTo>\", // JSON clients need not validate\n    \"$Nullable\" : false, // omit in case of default value: true\n    \"$MaxLength\" : <14.1.6 MaxLength>, // optional, number\n    \"$Precision\" : <14.1.6 Precision>, // optional, number\n    \"$Scale\" : <14.1.6 Scale> | \"variable\", // optional, number or fixed string\n    \"$SRID\" : \"<14.1.6 SRID>\" // optional\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Binding List Control to Region in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to bind a list control to a specific region using `bindElement`. It sets the binding context to the first region (`/regions/0`), displaying companies from the Americas.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst oList = this.byId(\"companyList\");\noList.bindElement(\"/regions/0\");\n```\n\n----------------------------------------\n\nTITLE: Component Metadata with Manifest Definition (JSON)\nDESCRIPTION: This code snippet demonstrates how to define component metadata using the `manifest` property set to `json`. This indicates that the component's metadata will be loaded from a `manifest.json` file. The `Component.extend` method is used to create a new component class.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/component-metadata-0187ea5.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// \"Component\" required from module \"sap/ui/core/Component\"\nComponent.extend(\"some.sample.Component\", {\n    \"metadata\": {\n        \"manifest\": \"json\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Resolve Path with resolvePath helper in XML Template\nDESCRIPTION: This XML snippet illustrates the use of the `resolvePath` helper function with a `<template:with>` instruction. It resolves dynamic expressions such as AnnotationPath, NavigationPropertyPath, Path, and PropertyPath. The resolved path is stored in the `target` variable. The `path` property needs to point to an annotation or annotation property of type `Edm.AnnotationPath`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/annotation-helper-dbec058.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n    \n    <template:with path=\"meta>Value\" helper=\"sap.ui.model.odata.AnnotationHelper.resolvePath\" var=\"target\">\n    \n```\n\n----------------------------------------\n\nTITLE: Defining Invoices Data - JSON\nDESCRIPTION: This JSON file defines an array of invoice objects, each containing properties like ProductName, Quantity, ExtendedPrice, ShipperName, ShippedDate, and Status. This data will be used to populate the invoice list in the OpenUI5 application. The 'Invoices' array holds the collection of invoice objects.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-19-aggregation-binding-bf71375.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Invoices\": [\n        {\n            \"ProductName\": \"Pineapple\",\n            \"Quantity\": 21,\n            \"ExtendedPrice\": 87.2,\n            \"ShipperName\": \"Fun Inc.\",\n            \"ShippedDate\": \"2015-04-01T00:00:00\",\n            \"Status\": \"A\"\n        },\n        {\n            \"ProductName\": \"Milk\",\n            \"Quantity\": 4,\n            \"ExtendedPrice\": 10,\n            \"ShipperName\": \"ACME\",\n            \"ShippedDate\": \"2015-02-18T00:00:00\",\n            \"Status\": \"B\"\n        },\n        {\n            \"ProductName\": \"Canned Beans\",\n            \"Quantity\": 3,\n            \"ExtendedPrice\": 6.85,\n            \"ShipperName\": \"ACME\",\n            \"ShippedDate\": \"2015-03-02T00:00:00\",\n            \"Status\": \"B\"\n        },\n        {\n            \"ProductName\": \"Salad\",\n            \"Quantity\": 2,\n            \"ExtendedPrice\": 8.8,\n            \"ShipperName\": \"ACME\",\n            \"ShippedDate\": \"2015-04-12T00:00:00\",\n            \"Status\": \"C\"\n        },\n        {\n            \"ProductName\": \"Bread\",\n            \"Quantity\": 1,\n            \"ExtendedPrice\": 2.71,\n            \"ShipperName\": \"Fun Inc.\",\n            \"ShippedDate\": \"2015-01-27T00:00:00\",\n            \"Status\": \"A\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:text to Text\nDESCRIPTION: This snippet illustrates how `sap:text` is transformed to `com.sap.vocabularies.Common.v1.Text`. It links a property to a human-readable text representation using a path.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_56\n\nLANGUAGE: xml\nCODE:\n```\nsap:text = \"AnyPath\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.Text\":{ \"Path\" : \"AnyPath\" }\n```\n\n----------------------------------------\n\nTITLE: Excluding objects from Istanbul instrumentation via JavaScript\nDESCRIPTION: This JavaScript snippet dynamically sets the `data-sap-ui-cover-never` attribute to exclude specified objects from Istanbul instrumentation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oScript = document.querySelector('script[src$=\"qunit/qunit-coverage-istanbul.js\"]');\nif (oScript) {\n    oScript.setAttribute(\"data-sap-ui-cover-never\", \"sap/ui/example/thirdparty/\");\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Density Based on Touch Support - OpenUI5\nDESCRIPTION: This snippet shows how to conditionally apply either the 'Cozy' or 'Compact' density based on touch support detection using `sap.ui.Device`. It adds the `sapUiSizeCozy` class if touch is supported and the `sapUiSizeCompact` class otherwise. The `Controller` and `Device` modules from `sap/ui/core/mvc/Controller` and `sap/ui/Device` respectively are required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/how-to-use-densities-for-controls-13e6f3b.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define(['sap/ui/core/mvc/Controller', 'sap/ui/Device'], function(Controller, Device) {\n    return Controller.extend(\"sap.my.controller\", {\n            onInit: function() {\n                // apply compact density if touch is not supported, the standard cozy design otherwise\n                this.getView().addStyleClass(Device.support.touch ? \"sapUiSizeCozy\" : \"sapUiSizeCompact\");\n            }\n        }\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Semantic Rendering with RenderManager - JavaScript\nDESCRIPTION: This code snippet demonstrates how to enable the new semantic rendering with RenderManager by setting the apiVersion property of the control renderer to 2. This approach allows for more efficient updates to the DOM structure.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/01_Whats-New/what-s-new-in-openui5-1-68-f94bf93.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\napiVersion: 2\n```\n\n----------------------------------------\n\nTITLE: Requiring Test Library Modules - JavaScript\nDESCRIPTION: Requires the necessary modules from the test library, including OPA5 and any page objects defined within the library. The callback function then allows access to the library's actions and assertions.  This snippet demonstrates how to import and use a test library in an OPA5 test.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-libraries-for-opa5-a88a5e5.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\n    \"sap/ui/test/Opa5\",\n    \"my/awesome/testlibrary/integration/testLibrary/ExampleList/pages/ExampleList\"\n], function (Opa5, ExampleList) {\n    // you can now use ExampleList's actions and assertions\n    When.onTheTestLibraryPage.iDoThings();\n    Then.onTheTestLibraryPage.iCheckTheResult();\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking an API Method - JavaScript\nDESCRIPTION: This code shows how to use Sinon.JS to mock an API method and verify that it is called with the expected behavior. The snippet defines a simple API object with a 'method' function and creates a mock object for this API. It then sets an expectation that the 'method' function will be called once and throw an exception. The code then calls the 'method' and catches the expected exception. Finally, it verifies that the mock's expectations were fulfilled and restores the original method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sinon-js-spies-stubs-mocks-faked-timers-and-xhr-457eaad.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/*global QUnit sinon */\nsap.ui.define([], function() {\n\t \"use strict\";\n\n \tQUnit.test(\"Mock\", 2, function(assert) {\n \t\tvar myAPI = { method: function () {} };\n \n \t\tvar mock = sinon.mock(myAPI);\n\t\tmock.expects(\"method\").once().throws();\n \n \t\ttry {\n \t\t\tmyAPI.method();\n \t\t} catch (exc) {\n \t\t\tassert.ok(mock.verify(), \"Mock function called and all expectations are fullfilled\");\n \t\t}\n \t\tmock.restore();\n \t});\n});\n```\n\n----------------------------------------\n\nTITLE: Finding nodes matching CSS rules in JavaScript\nDESCRIPTION: This code snippet iterates through the rules of a given stylesheet and uses `document.querySelectorAll` to find all nodes that match the selector of each rule. It logs each selector and the matched nodes to the console (the logging part is not included in the code snippet).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/common-rule-patterns-3fc1412.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nArray.from(styleSheet.rules).forEach(function(rule) {\n  var selector = rule.selectorText,\n    matchedNodes = document.querySelectorAll(selector);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Applying the Price Formatter in XML View\nDESCRIPTION: This XML code snippet shows how to apply the price formatter to an `ObjectNumber` control in an OpenUI5 view. It binds the `state` property to the `Price` model field and uses the `priceState` formatter function to determine the state.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-adding-the-price-formatter-2bf4892.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ColumnListItem vAlign=\"Middle\">\n\t<cells>\n\t\t…\n\t\t<ObjectNumber\n\t\t\tnumber=\"{\n\t\t\t\tpath: 'Price',\n\t\t\t\tformatter: '.formatter.numberUnit'\n\t\t\t}\"\n\t\t\tstate=\"{\n\t\t\t\tpath: 'Price',\n\t\t\t\tformatter: '.formatter.priceState'\n\t\t\t}\"\n\t\t\tunit=\"{Currency}\"/>\n\t</cells>\n</ColumnListItem>\n```\n\n----------------------------------------\n\nTITLE: Limiting Istanbul instrumentation to a single file via HTML\nDESCRIPTION: This snippet configures Istanbul to only instrument a specific file, in this case, `sap/ui/core/Popup.js`. This is achieved by setting the `data-sap-ui-cover-only` attribute on the coverage script tag in the HTML file. This will reduce the size of the coverage results.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../resources/sap/ui/qunit/qunit-coverage-istanbul.js\"\n\tdata-sap-ui-cover-only=\"sap/ui/core/Popup.js\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Custom Properties in OpenUI5\nDESCRIPTION: This snippet shows how to use CSS custom properties (CSS variables) provided by the SAP Theming Base Content to make application or custom controls theme-aware. The color property of a button is set using the `--sapButton_TextColor` variable. The browser substitutes the reference to the CSS custom property by its current value.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enhanced-theming-concepts-45df6df.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbutton {\n    color: var(--sapButton_TextColor); /* buttons will automatically have the current text color, which is '#000000' right now */\n    [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Content Padding to a Page in XML View - OpenUI5\nDESCRIPTION: This code snippet demonstrates how to apply the `sapUiResponsiveContentPadding` CSS class to an OpenUI5 `Page` control within an XML view. This class enables responsive padding behavior, adjusting the padding size based on the user's screen size.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-container-content-padding-css-classes-c71f6df.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Page class=\"sapUiResponsiveContentPadding\">\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Proxy Server with Node.js\nDESCRIPTION: This JavaScript code defines a simple proxy server using the `myProxy` package. It configures the server to listen on a specific host (`localhost`) and port (`8081`). The server is created using `cors_proxy.createServer()`, which can be configured with allowed origins and headers. The `listen()` method starts the server and logs a message to the console.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/request-fails-due-to-same-origin-policy-cross-origin-resource-sharing-cors-672301f.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar cors_proxy = require('myProxy');\n\n// Listen on a specific IP Address\nvar host = 'localhost';\n\n// Listen on a specific port, adjust if necessary\nvar port = 8081;\n\ncors_proxy.createServer({\n\t// Set parameters for:\n\t// allowed origins,\n\t// required headers ['origin', 'x-requested-with'],\n\t// headers to be removed ['cookie', 'cookie2']\n}).listen(port, host, function() {\n\tconsole.log('Running myProxy on ' + host + ':' + port);\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling library-preload.js loading in SAPUI5\nDESCRIPTION: This code snippet demonstrates how to disable the loading of `library-preload.js` files in SAPUI5 when running in a hybrid app.  This is done by setting the `data-sap-ui-preload` attribute to an empty string in the SAPUI5 bootstrap script tag, preventing unnecessary HTTP requests for files that are not required in a hybrid environment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/development-for-hybrid-web-containers-293eb94.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\ndata-sap-ui-preload=\"\"\n```\n\n----------------------------------------\n\nTITLE: Styling the Square Control with CSS\nDESCRIPTION: This CSS code defines the styles for the 'mySquare' class, which is applied to the custom OpenUI5 control. It sets the display to inline-block, adds a red border, a light grey background color, padding, centers the text, and uses border-box sizing to include padding and border in the element's width and height.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/creating-a-simple-square-control-9a6100b.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n<style>\n    .mySquare {                  /* style the CSS class that has been written by the renderer method */\n        display: inline-block;   /* enable squares to appear next to each other within one line */\n        border: 1px solid red;   /* add some border, so the square can actually be seen */\n        background-color: #ddd;\n        padding: 8px;\n        text-align: center;\n        -moz-box-sizing: border-box; /* consider padding+border part of the width/height */\n        box-sizing: border-box;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Model in manifest.json\nDESCRIPTION: Configures a JSON model named `invoice` in the `manifest.json` file. Sets the model type to `sap.ui.model.json.JSONModel` and the URI to the `localInvoices.json` file, which holds the invoice data. This allows the application to automatically instantiate and load the invoice data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-19-aggregation-binding-typescript-24580fb.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  ...\n  \"sap.ui5\": {\n    \"models\": {\n      \"i18n\": {\n        \"type\": \"sap.ui.model.resource.ResourceModel\",\n        \"settings\": {\n          \"bundleName\": \"ui5.walkthrough.i18n.i18n\",\n          \"supportedLocales\": [\n            \"\"\n          ],\n          \"fallbackLocale\": \"\"\n        }\n      },\n      \"invoice\": {\n        \"type\": \"sap.ui.model.json.JSONModel\",\n        \"uri\": \"model/localInvoices.json\"\n      }\n        },\n        \"resources\": {\n          \"css\": [\n            {\n              \"uri\": \"css/style.css\"\n            }\n          ]\n        }\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: OData Batch Request Example\nDESCRIPTION: Shows an example of an OData batch request including `Content-ID` headers for each request within the change set.  These IDs are later used in the response to correlate messages with the appropriate request.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/server-messages-in-the-odata-v4-model-fbe1cb5.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n--changeset_id-1612779902438-25\nContent-Type:application/http\nContent-ID:0.0\n \nPATCH SalesOrderList('0500000005')/SO_2_SOITEM(SalesOrderID='0500000005',ItemPosition='0000000010')?custom-option=value HTTP/1.1\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n \n{\"Quantity\":\"0\",\"QuantityUnit\":\"EA\"}\n--changeset_id-1612779902438-25\nContent-Type:application/http\nContent-ID:1.0\n \nPATCH SalesOrderList('0500000005')/SO_2_SOITEM(SalesOrderID='0500000005',ItemPosition='0000000020')?custom-option=value HTTP/1.1\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n \n{\"Quantity\":\"5\",\"QuantityUnit\":\"EA\"}\n--changeset_id-1612779902438-25--\n```\n\n----------------------------------------\n\nTITLE: XML View with Property Binding and Target Type\nDESCRIPTION: This XML snippet demonstrates a property binding in an SAPUI5 view where `targetType: 'any'` is used to prevent type determination issues when the target type of the control property is different from the property's metadata type. This ensures the formatter function receives the raw value and can handle the conversion to the boolean expected by the `visible` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/changes-compared-to-odata-v2-model-abd4d7c.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Icon \n\t\tsrc=\"sap-icon://message-warning\" \n\t\tvisible=\"{\n\t\t\tpath: 'DeliveryDate', \n\t\t\ttargetType: 'any', \n\t\t\tformatter: '.isOverdue'\n\t\t}\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Check Function Signature\nDESCRIPTION: This snippet demonstrates the structure of a rule check function for the OpenUI5 Support Assistant. The function takes three parameters: `issueManager`, `oCoreFacade`, and `oScope`.  The `issueManager` is used to report issues, `oCoreFacade` provides access to core functionality, and `oScope` defines the scope of the rule's execution. An optional `resolve` parameter is included when `Async` is set to true.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/guidelines-and-best-practices-eaeea19.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (issueManager, oCoreFacade, oScope) { ... }\n```\n\n----------------------------------------\n\nTITLE: Navigate to nested components with navTo in SAPUI5\nDESCRIPTION: This code snippet demonstrates how to use the `navTo` method to navigate to specific routes within nested SAPUI5 components.  It specifies the route and parameters for each component in the hierarchy, allowing for deep linking within the application. The `componentTargetInfo` property is used to define navigation information for nested components.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/navigate-with-nested-components-8e9d6e4.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\noRouter.navTo(\"home\", {\n    // this route doesn't need any parameter\n}, {\n    childComp1: {\n        route: \"detail\",\n        parameters: {\n            ...\n        }\n    },\n    childComp2: {\n        route: \"detail\",\n        parameters: {\n            ...\n        },\n        componentTargetInfo: {\n            grandChildComp1: {\n                route: \"detail\",\n                parameters: {\n                    ...\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Property Setter with Rerendering Suppression - JavaScript\nDESCRIPTION: This code shows how to override a property setter in an OpenUI5 control to prevent rerendering on property change. The `setProperty` method is called with the third argument set to `true` to suppress rerendering. The developer must then manually update the DOM to reflect the property change.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/writing-a-control-faq-3f472df.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.m.Button.prototype.setText = function(sText) {\n\tthis.setProperty(\"text\", sText, true);\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Control Class Styling (Bad)\nDESCRIPTION: This CSS snippet demonstrates the incorrect way to override control class styling directly in OpenUI5.  Directly targeting OpenUI5's internal CSS classes can lead to unpredictable behavior and break with future OpenUI5 updates.  It's not recommended to use this approach.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/css-styling-issues-9d87f92.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.sapMInputBaseError {\n\tfont-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Gherkin Scenario using Page Objects\nDESCRIPTION: This Gherkin scenario demonstrates the use of OPA5 page objects. The 'When' and 'Then' steps refer to actions and assertions defined within OPA5 page objects for the 'overview' and 'page 1' views. This assumes that the page objects 'overview' and 'page 1' are defined and contain the corresponding methods.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/gherkin-and-opa-page-objects-c689cd8.md#_snippet_1\n\nLANGUAGE: Gherkin\nCODE:\n```\nScenario: Page 1 journey\n  When on the overview: I press on \"Go to Page 1\"\n  Then on page 1: I should see the page 1 text\n```\n\n----------------------------------------\n\nTITLE: Side Effects Annotation Example\nDESCRIPTION: This example shows the structure of a `com.sap.vocabularies.Common.v1.SideEffects` annotation as it appears when requested from the OData V4 meta model. It includes properties like `SourceEntities`, `SourceProperties`, `TargetEntities`, and `TargetProperties`.  These properties are used to specify which entities and properties are affected by side effects.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initialization-and-read-requests-fccfb2e.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"SourceEntities\" : [{\n        \"$NavigationPropertyPath\" : \"\"\n    }, ...],\n    \"SourceProperties\" : [{\n        \"$PropertyPath\" : \"Name\"\n    }, ...],\n    \"TargetEntities\" : [{\n        \"$NavigationPropertyPath\" : \"DraftAdministrativeData\"\n    }, ...],\n    \"TargetProperties\" : [\"DraftAdministrativeData/*\", ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Firing Message Change Event in OpenUI5\nDESCRIPTION: This JavaScript code snippet demonstrates how to fire the `messageChange` event in OpenUI5 to notify the message processor about changes in the messages. It takes two parameters: `oldMessages` which specifies the messages to be removed, and `newMessages` which specifies the messages to be added. This code relies on the `getProcessor()` method which should return the message processor instance (typically the model instance).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/implementing-your-own-odata-v2-message-parser-2e532e6.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.getProcessor().fireMessageChange({\n    oldMessages: aRemovedMessages,\n    newMessages: aNewMessages\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Zip Code with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"zip\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation, with the address's code property pointing to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_87\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"adr\" : { \"code\" : { \"Path\" : \"PROPERTY\" } } }\n```\n\n----------------------------------------\n\nTITLE: Extension content in CustomSubSubView1.view.xml\nDESCRIPTION: This XML snippet shows the content for custom sub-sub view that extends a standard view, demonstrating that even custom views can be extended further. Extension points can be added into these views in the same way as in standard views.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-extension-403c050.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns=\"sap.m\"  xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\">\n    <core:ExtensionPoint name=\"extension1\" />\n    <TextView text=\"Customer View 'SubSubView1' - this one extends the original SAP View 'Sub2' - and even custom Views can be extended:\"></TextView>   \n    <core:ExtensionPoint name=\"extension2\" />   \n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Activating Table Personalization with Unified Shell - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to instantiate and activate a table personalization controller using the Unified Shell's Personalization service. It retrieves a personalization service provider from the shell, creates a table personalization controller instance connected to a table and persistence service, activates the controller, and attaches a press event to a button to open the dialog.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/table-personalization-deprecated-1c60212.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a persistence key\nvar oPersId = {container: \"mycontainer-1\", item: \"myitem-1\"};\n\n// Get a personalization service provider from the shell (or create your own)\nvar oProvider = sap.ushell.Container.getService(\"Personalization\").getPersonalizer(oPersId);\n\n// Instantiate a controller connecting your table and the persistence service\nvar oTablePersoController = new sap.m.TablePersoController({\n    table: oTable,\n    persoService: oProvider\n}).activate();\n\n// Cause the dialog to open when the button is pressed\nsap.ui.getCore().byId(\"idPersonalization\").attachPress(function() {\n    oTablePersoController.openDialog();\n});\n```\n\n----------------------------------------\n\nTITLE: Button with Text in OpenUI5\nDESCRIPTION: This snippet demonstrates a standard OpenUI5 button with text. According to the guidelines, buttons with text should not have tooltips to avoid ambiguity.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/labeling-and-tooltips-329a029.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Default\" press=\"onPress\" />\n```\n\n----------------------------------------\n\nTITLE: Bad Example: Using Timeouts in OpenUI5\nDESCRIPTION: This code snippet exemplifies the anti-pattern of using `setTimeout` in conjunction with `jQuery.ajax`.  The `fnProcessResults` function is called after a fixed delay of 300ms, regardless of whether the AJAX request has completed. This can lead to unpredictable behavior and is not recommended.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\njQuery.ajax(\"someData.json\");\nsetTimeout(fnProcessResults, 300);\n```\n\n----------------------------------------\n\nTITLE: OData Complex Type for Messages\nDESCRIPTION: This code snippet defines a complex type in OData metadata for representing messages. It includes properties like `code`, `message`, `target`, `additionalTargets`, `transition`, `numericSeverity`, and `longtextUrl` which are used to convey message details.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/server-messages-in-the-odata-v4-model-fbe1cb5.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n  <ComplexType Name=\"<name of message type>\">\n      <Property Name=\"code\" Type=\"Edm.String\" Nullable=\"false\" />\n      <Property Name=\"message\" Type=\"Edm.String\" Nullable=\"false\" />\n      <Property Name=\"target\" Type=\"Edm.String\" Nullable=\"true\" />\n      <Property Name=\"additionalTargets\" Type=\"Collection(Edm.String)\" Nullable=\"false\" />\n      <Property Name=\"transition\" Type=\"Edm.Boolean\" Nullable=\"false\" />\n      <Property Name=\"numericSeverity\" Type=\"Edm.Byte\" Nullable=\"false\" />\n      <Property Name=\"longtextUrl\" Type=\"Edm.String\" Nullable=\"true\" />\n  </ComplexType>\n```\n\n----------------------------------------\n\nTITLE: Disable Auto Refresh After Change\nDESCRIPTION: This code shows how to disable the automatic refresh of bindings after create, update, or remove operations in the OData V2 model.  When auto refresh is disabled, the application is responsible for manually refreshing the affected bindings to reflect the changes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\noModel.setRefreshAfterChange(false);\n```\n\n----------------------------------------\n\nTITLE: Using Global Configuration - JavaScript\nDESCRIPTION: Demonstrates how to use global configurations, such as actions set by a test library. This snippet shows how to use the `iSetupTheApp` action which assumed to be exposed by the library. `Given` is part of the BDD style testing with OPA5.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-libraries-for-opa5-a88a5e5.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nGiven.iSetupTheApp();\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Control - CSS\nDESCRIPTION: This CSS snippet provides styling for the custom `ProductRating` control in the OpenUI5 application. It adds padding to the root class for spacing and overrides the alignment of the `RatingIndicator` control to ensure it aligns with the label and button within the custom control.  It assumes the existence of `myAppDemoWT` class at a higher level in the DOM.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-d12d2ee.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nhtml[dir=\"ltr\"] .myAppDemoWT .myCustomButton.sapMBtn {\n    margin-right: 0.125rem\n}\nhtml[dir=\"rtl\"] .myAppDemoWT .myCustomButton.sapMBtn {\n    margin-left: 0.125rem\n}\n.myAppDemoWT .myCustomText {\n    display: inline-block;\n    font-weight: bold;\n}\n/*  ProductRating */\n.myAppDemoWTProductRating {\n    padding: 0.75rem;\n}\n.myAppDemoWTProductRating .sapMRI {\n    vertical-align: initial;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listening to the `titleChanged` event\nDESCRIPTION: This JavaScript code snippet demonstrates how to attach to the `titleChanged` event on the OpenUI5 Router instance. It retrieves the new title and history from the event parameters and updates the document title. The aHistory parameter can be used to update the dropdown with navigation history.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-the-title-property-in-targets-1238d70.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\noRouter.attachTitleChanged(function(oEvent) {\n    var sTitle = oEvent.getParameter(\"title\"),\n        aHistory = oEvent.getParameter(\"history\");\n\n    // Example usage: set the browser page title (optional)\n    document.title = sTitle;\n\n    aHistory.reverse().forEach(function(oHistory) {\n        // show the history in a dropdown\n        // oDropdown.addItem(new Item({\n        //\ttext: oHistory.title\n        //}).data(\"hash\", oHistory.hash));\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing App Context with OPA5 Getters (JavaScript)\nDESCRIPTION: This code illustrates how to access properties of the application context when running in an iFrame using OPA5's getter methods (getJQuery, getPlugin, getWindow).  These getters return the iFrame's objects when an iFrame is used, and the test window's objects by default.  It is important to keep the correct context in mind when manipulating app data. Ensure 'sap/ui/test/Opa5' is required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/getting-started-with-opa5-22f175e.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Opa5\" required from \"sap/ui/test/Opa5\"\n\n// returns the body of the app window wrapped in a jQuery object\nOpa5.getJQuery()(\"body\");\n// returns the OpenUI5 OPA plugin object of the app window\nOpa5.getPlugin();\n// returns the OpenUI5 core interface of the app window\nOpa5.getWindow().sap.ui.getCore();\n// returns the Date in the app context\nOpa5.getWindow().Date();\n// the following test code will return false if the app is started in an iFrame\nnew Opa5.getWindow().Date() instanceof Date\n```\n\n----------------------------------------\n\nTITLE: Adding Text for Dialog Close Button\nDESCRIPTION: This ini code extends the i18n properties file with a text entry for the dialog's close button.  The `dialogCloseButtonText` key provides the text that will be displayed on the button within the dialog.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-17-fragment-callbacks-354f98e.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# App Descriptor\nappTitle=Hello World\nappDescription=A simple walkthrough app that explains the most important concepts of OpenUI5\n\n# Hello Panel\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\nhomePageTitle=Walkthrough\nhelloPanelTitle=Hello World\nopenDialogButtonText=Say Hello With Dialog\ndialogCloseButtonText=Ok\n```\n\n----------------------------------------\n\nTITLE: Declaring Views for Block Modes (JS)\nDESCRIPTION: This code snippet illustrates how to declare views for different modes (e.g., Collapsed, Expanded) within a `BlockBase` extension.  Each mode has an associated view, which is rendered at runtime. This declaration is crucial for lazy loading to function correctly with `BlockBase`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-layout-2e61ab6.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsap.uxap.BlockBase.extend(\"<BlockName>\", {\n            metadata: {\n                views: {\n                    **Collapsed: { \n                        viewName: \"<collapsedViewName>\",\n                        type: \"XML\"\n                    },\n                    Expanded: { \n                        viewName: \"<expendedViewName>\",\n                        type: \"XML\"\n    **\n                    }\n                }\n             }\n         });\n```\n\n----------------------------------------\n\nTITLE: Formatter Function Usage in JavaScript\nDESCRIPTION: This code snippet shows how to call a formatter function from JavaScript code, outside of the XML templating context.  It retrieves a context object based on an OData path and then uses the `format` function of `sap.ui.model.odata.AnnotationHelper` to format the context.  A new `sap.m.Label` is then created with the formatted text.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/annotation-helper-dbec058.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar oModel = this.getModel(),\n    sPath = \"##com.sap.vocabularies.UI.v1.HeaderInfo/Description/Label\",\n    oContext = oModel.getContext(oModel.resolve(sPath, this.getBindingContext())),\n    oLabel = new sap.m.Label({\n        text : sap.ui.model.odata.AnnotationHelper.format(oContext)\n    }));\n...\n```\n\n----------------------------------------\n\nTITLE: Overriding Lifecycle Methods in OpenUI5 with JavaScript\nDESCRIPTION: This code snippet demonstrates how to properly override OpenUI5 lifecycle methods such as `onAfterRendering` and `exit` in a custom class. It emphasizes the importance of calling the superclass implementation to maintain compatibility with future OpenUI5 updates.  It also showcases how to invoke the super class's method using `apply` to ensure the correct context.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/compatibility-rules-91f0873.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nMyClass.prototype.onAfterRendering = function() {\n  SuperClass.prototype.onAfterRendering.apply(this, arguments);\n  // ...\n};\n\nMyClass.prototype.exit = function() {\n  // Cleanups of your subclass ...\n  // Invoke the exit method of the superclass at the end:\n  SuperClass.prototype.exit.apply(this, arguments);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding i18n Text for Page and Panel - INI\nDESCRIPTION: This INI snippet defines new key-value pairs in the i18n.properties file. These entries are used for the application title, description, button text, home page title, and panel title. The `i18n` model binds these texts to the corresponding UI elements in the XML view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-pages-and-panels-3b9d9f8.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# App Descriptor\nappTitle=Hello World\nappDescription=A simple walkthrough app that explains the most important concepts of OpenUI5\n\n# Hello Panel\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\nhomePageTitle=Walkthrough\nhelloPanelTitle=Hello World\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Header Adaptations - JSON\nDESCRIPTION: This snippet shows how to enable specific header adaptations by setting the `sapFiori2Adaptation` property to a JSON object containing individual flags for `style`, `collapse`, `title`, `back`, and `hierarchy`. In this example, only transparent headers (`style`) and title propagation (`title`) are enabled.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enabling-the-automatic-header-adaptation-for-legacy-applications-0635156.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n \"config\": {\n            ...\n            \"sapFiori2Adaptation\": {\n                  \"style\": true,       \n                  \"collapse\": false,   \n                  \"title\": true,       \n                  \"back\": false,       \n                  \"hierarchy\": false   \n            },\n            ...\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Component.js: Retrieving DataSource Information\nDESCRIPTION: This Javascript snippet shows how to retrieve the service URL and mock data URL from the `Component.js` file, which is used to configure the data source in the `manifest.json` file. The `name`, `serviceUrl`, and mock server simulation path are extracted from the component's configuration.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmetadata : {\n    ...\n    \"config\" : {\n        ...           \n        \"serviceConfig\" : {\n            name: \"LEAVEREQUEST\",\n            serviceUrl: \"/sap/opu/odata/GBHCM/LEAVEREQUEST;v=2/\"\n        }\n    },\n...\n \ninit : function() {\n    ...\n        oMockServer.simulate(rootPath + \"/model/metadata.xml\", rootPath + \"/model/\");\n```\n\n----------------------------------------\n\nTITLE: OData Model Preload Configuration in Manifest\nDESCRIPTION: This JSON snippet demonstrates how to configure the OData model preload feature within the `sap.ui5` section of the application manifest. Setting `preload` to `true` enables the metadata to be loaded in parallel during component load, improving performance. This is especially beneficial for OData V2 and V4 models. It also recommends to use `earlyTokenRequest` for V2 and `earlyRequests` for V4 models.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/performance-speed-up-your-app-408b40e.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"sap.ui5\": {\n  ...\n  \"models\": {\n      \"mymodel\": {\n          \"preload\": true,\n...\n\n```\n\n----------------------------------------\n\nTITLE: Value List Type Check on edm:Path in XML\nDESCRIPTION: This XML snippet demonstrates how to use AnnotationHelper.getValueListType on an edm:Path within a LineItem annotation.  It checks if the value list type is 'Standard'.  The snippet assumes that 'entityType' is bound to the type of the 'BusinessPartnerList' entity set and 'lineItem' is bound to its 'com.sap.vocabularies.UI.v1.LineItem' annotation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/meta-model-for-odata-v4-7f29fb3.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<template:with path=\"meta>/BusinessPartnerList/\" var=\"entityType\">\n  <template:with path=\"entityType>@com.sap.vocabularies.UI.v1.LineItem\" var=\"lineItem\">\n...    \n            <template:repeat list=\"{lineItem>}\" var=\"field\">\n              <template:with path=\"field>Value/$Path\" var=\"target\">\n                <template:if test=\"{= ${target>@@AnnotationHelper.getValueListType} === 'Standard' }\">\n...\n\n```\n\n----------------------------------------\n\nTITLE: OData V4 Model Configuration in manifest.json\nDESCRIPTION: This JSON snippet showcases how to configure the OData V4 model within the `manifest.json` file. It defines a data source with the service URI and OData version, and then references this data source within the `models` section to configure settings such as the `updateGroupId`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/model-instantiation-and-data-access-9613f1f.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"sap.app\" : {\n        \"dataSources\" : {\n            \"default\" : {\n                \"uri\" : \"/sap/opu/odata4/IWBEP/V4_SAMPLE/default/IWBEP/V4_GW_SAMPLE_BASIC/0001/\",\n                \"type\" : \"OData\",\n                \"settings\" : {\n                    \"odataVersion\" : \"4.0\"\n                }\n            }\n        }\n    },\n    \"sap.ui5\" : {\n        \"models\" : {\n            \"\" : {\n                \"dataSource\" : \"default\",\n                \"settings\" : {\n                    \"updateGroupId\" : \"myAppUpdateGroup\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Binding with Resource Bundle in JSON View\nDESCRIPTION: Shows how to bind control properties to a language-dependent resource bundle in a JSON view.  It defines the resource bundle name and alias within the view definition. The binding path uses the alias to access the resource bundle content. A ResourceModel is created and set as a secondary model with the given alias to the view instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/json-view-deprecated-91f2852.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{   \"Type\": \"sap.ui.core.JSONView\",\n    \"controllerName\":\"my.own.views.test\",\n    \"resourceBundleName\":\"myBundle\",\n    \"resourceBundleAlias\":\"i18n\",\n    \"content\": [{\n        \"Type\":\"sap.m.Panel\",\n        \"id\":\"myPanel\",\n        \"content\":[{\n            \"Type\":\"sap.m.Button\",\n            \"id\":\"Button1\",\n            \"text\":\"{i18n>MY_TEXT}\",\n            \"press\": \"doIt\"\n        }]\n    }]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating and placing the HighlightInput control\nDESCRIPTION: This code snippet demonstrates how to create an instance of the HighlightInput control and place it within the application's content area. It sets the 'value' property to 'Highlighted editing'. The placeAt function renders the control in the specified HTML element with id 'content'. Requires that the 'HighlightInput' control has already been defined and the 'content' element exists in the HTML.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/extending-input-rendering-bcee26a.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar myControl = new HighlightInput({value:\"Highlighted editing\"});\nmyControl.placeAt(\"content\");\n```\n\n----------------------------------------\n\nTITLE: Using on-init module with sap-ui-bootstrap in SAPUI5\nDESCRIPTION: This snippet shows how to use the `data-sap-ui-on-init` attribute in the `sap-ui-bootstrap` script tag to execute a module when the Core is ready.  It automatically requires and executes the specified module. Requires an `initModule.js` file in the specified resource root.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script id='sap-ui-bootstrap'\n    data-sap-ui-async='true'\n    data-sap-ui-resource-roots='{\"my\": \"./\"}'\n    data-sap-ui-on-init='module:my/initModule'\n    ...>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Resuming OData List Binding in Controller\nDESCRIPTION: This code snippet demonstrates how to resume a suspended OData list binding within a controller.  It retrieves the binding from the `Input` control's `suggestionItems` aggregation and calls the `resume()` method if the binding is currently suspended. This triggers the data request.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/suspend-and-resume-b0f5c53.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar oBPListBinding = this.byId(\"NewBuyerID\").getBinding(\"suggestionItems\");\n \nif (oBPListBinding.isSuspended()) {\n    oBPListBinding.resume();\n}\n```\n\n----------------------------------------\n\nTITLE: RatingIndicator ontouchstart Adaptation (After)\nDESCRIPTION: This code shows the adapted `ontouchstart` function of the `RatingIndicator` control. The conditional logic based on `Device.support.touch` is removed, and both touch and mouse events are always bound. The `_ontouchmove` and `_ontouchend` functions check for the `delayedMouseEvent` flag to prevent duplicated event processing.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/adapting-event-handling-for-devices-supporting-both-mouse-and-touch-input-b54d7d7.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// \"RatingIndicator\" defined in module \"sap/m/RatingIndicator\"\n// \"Device\" required from module \"sap/ui/Device\"\nRatingIndicator.prototype.ontouchstart = function (oEvent) {\n    if (this.getEnabled()) {\n        ......\n\n        if (!this._touchEndProxy) {\n            this._touchEndProxy = jQuery.proxy(this._ontouchend, this);\n        }\n        if (!this._touchMoveProxy) {\n            this._touchMoveProxy = jQuery.proxy(this._ontouchmove, this);\n        }\n\n        // The if (Device.support.touch) is removed and both mouse and touch events are supported always\n        jQuery(window.document).on(\"touchend touchcancel mouseup\", this._touchEndProxy);\n        jQuery(window.document).on(\"touchmove mousemove\", this._touchMoveProxy);\n\n        ......\n    }\n};\n\nRatingIndicator.prototype._ontouchmove = function (oEvent) {\n    // Check the _sapui_delayedMouseEvent flag for the emulated mouse event from the touch interface\n    if (oEvent.isMarked(\"delayedMouseEvent\")) {\n        return;\n    }\n    ......\n};\n\nRatingIndicator.prototype._ontouchend = function (oEvent) {\n    // Check the _sapui_delayedMouseEvent flag for the emulated mouse event from the touch interface\n    if (oEvent.isMarked(\"delayedMouseEvent\")) {\n        return;\n    }\n    \n    if (this.getEnabled()) {\n        ......\n\n        // The if (Device.support.touch) is removed, just deregister from every event\n        jQuery(window.document).off(\"touchend touchcancel mouseup\", this._touchEndProxy);\n        jQuery(window.document).off(\"touchmove mousemove\", this._touchMoveProxy);\n\n        ......\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Event Handling in JSON View\nDESCRIPTION: Demonstrates how to define event handlers for controls within a JSON view. Event handlers are bound as attributes, where the attribute name is the event name (e.g., 'press') and the attribute value is the event handler function name defined in the controller (e.g., 'doSomething').  This example binds the 'press' event of a button to the 'doSomething' function in the controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/json-view-deprecated-91f2852.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n   {\n      \"Type\":\"sap.m.Button\",\n      \"id\":\"MyButton\",\n      \"text\":\"Press Me\",\n      \"press\":\"doSomething\"\n   }\n...\n```\n\n----------------------------------------\n\nTITLE: Test Empty Date Input (JS)\nDESCRIPTION: This snippet adds a unit test to check the format function's behavior when null is passed as input. The test ensures that an empty string is returned if no date is provided. It extends previous testing snippet.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/bulletinboard/model/DateFormatter\"\n], function(DateFormatter) {\n\tQUnit.module(\"DateFormatter\");\n\tQUnit.test(\"Should return empty string if no date is given\", function(assert) {\n\t\tvar oFormatter = new DateFormatter();\n\t\tvar sFormattedDate = oFormatter.format(null);\n\t\tassert.strictEqual(sFormattedDate, \"\");\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying i18n.properties - OpenUI5\nDESCRIPTION: This snippet adds new text keys to the `i18n.properties` file for internationalization. These keys include labels for displaying product price, discontinued status, supplier information, and product ID, as well as labels for supplier details such as name, address, and country. These keys are used in the XML view to provide localized text for the added UI elements.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-extending-the-detail-page-b561d14.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n...\n#Price per unit text\nObjectPriceTitle=Price\n\n#Discontinued text\nObjectDiscontinuedStatusText=Discontinued\n\n#Supplier tab title\nObjectSupplierTabTitle=Supplier Info\n\n#Supplier company name\nObjectSupplierName=Name\n\n#Supplier contact person name\nObjectSupplierContact=Contact\n\n#Supplier contact address\nObjectSupplierAddress=Address\n\n#Supplier zip code\nObjectSupplierZipcode=ZIP Code\n\n#Supplier city name\nObjectSupplierCity=City\n\n#Supplier country\nObjectSupplierCountry=Country\n\n#Object Product ID text\nObjectProductIdText=Product ID\n\n\n#~~~ Footer Options ~~~~~~~~~~~~~~~~~~~~~~~\n...\n```\n\n----------------------------------------\n\nTITLE: Get Element by ID, No Fragment, OpenUI5\nDESCRIPTION: Retrieves a control instance using its ID when the fragment is not part of a view and no fragment ID was given.  Requires `sap/ui/core/Element` module.  Uses `Element.getElementbyId` to find the control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-control-instances-by-their-id-8b32551.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyControl = Element.getElementbyId(\"myControl\")\n```\n\n----------------------------------------\n\nTITLE: Defining ProductRating metadata in OpenUI5 (TypeScript)\nDESCRIPTION: This code defines the metadata for the custom ProductRating control. It specifies the properties (value), aggregations (_rating, _label, _button) with visibility set to hidden, and events (change) that the control will expose. The aggregations are used to manage internal controls, and the change event is fired when the rating is submitted.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nstatic readonly metadata: MetadataOptions = {\n\t\tproperties: {\n\t\t\tvalue: {\n\t\t\t\ttype: \"float\",\n\t\t\t\tdefaultValue: 0\n\t\t\t}\n\t\t},\n\t\taggregations: {\n\t\t\t_rating: {\n\t\t\t\ttype: \"sap.m.RatingIndicator\", \n\t\t\t\tmultiple: false,\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t},\n\t\t\t_label: {\n\t\t\t\ttype: \"sap.m.Label\", \n\t\t\t\tmultiple: false,\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t},\n\t\t\t_button: {\n\t\t\t\ttype: \"sap.m.Button\",\n\t\t\t\tmultiple: false,\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t} \n\t\t},\n\t\tevents: {\n\t\t\tchange: {\n\t\t\t\tparameters: {\n\t\t\t\t\t\"value\": \"int\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: XML View with Stable IDs - OpenUI5\nDESCRIPTION: This XML view demonstrates the implementation of stable IDs for the Page and Table controls using the `id` attribute. Setting the `id` attribute ensures that these controls are consistently identified by the specified IDs throughout the application's lifecycle.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/use-stable-ids-79e910e.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page id=\"page\">\n\t\t<content>\n\t\t\t<Table id=\"table\">\n\t\t\t</Table>\n\t\t</content>\n\t</Page>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Istanbul Code Coverage via JavaScript\nDESCRIPTION: This snippet demonstrates how to enable code coverage measurement using Istanbul by requiring the `sap/ui/qunit/qunit-coverage-istanbul` module in JavaScript before running tests. This achieves the same result as including the script in HTML.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/qunit/qunit-coverage-istanbul\"], function(/*coverage*/){\n    // code\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous View Loading Configuration in manifest.json\nDESCRIPTION: This JSON snippet demonstrates how to configure asynchronous view loading in the `manifest.json` file using the `async` property within the `routing` configuration. Setting `async` to `true` loads views asynchronously.  Requires OpenUI5 version 1.34 or later.  Using `async: true` is recommended for performance reasons.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/migration-information-for-upgrading-the-manifest-file-a110f76.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"sap.ui5\": {\n   \"_version\": \"1.2.0\",\n   ...\n    \"routing\": {\n        \"config\": {\n            \"viewType\": \"XML\",\n            \"async\": true\n        ...\n        },\n        ...\n```\n\n----------------------------------------\n\nTITLE: Installing Karma UI5 plugin with npm\nDESCRIPTION: This command installs the `karma-ui5` plugin locally in the current working directory. The `karma-ui5` plugin provides integration between Karma and OpenUI5, allowing you to test OpenUI5 applications with Karma. The `--save-dev` flag adds the plugin as a development dependency.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-automation-ae44824.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev karma-ui5\n```\n\n----------------------------------------\n\nTITLE: Controller with Formatter Function\nDESCRIPTION: Shows the JavaScript code for a controller that defines a formatter function named `myFormatter`. This function is used to determine the visibility of an icon based on the `status` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n...\nmyFormatter(sStatus) {\n    return sStatus === \"critical\";\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Configuration in manifest.json - JavaScript\nDESCRIPTION: This snippet demonstrates how the configurations such as rootView, handleValidation, routing, config are moved from the `Component.js` file to the `sap.ui5` namespace in the `manifest.json` file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n    \"sap.ui5\": {\n        ...\n        \"rootView\": \"myRootView\",\n        \"handleValidation\": true,\n        \"config\": {\n            ...\n        },\n        \"routing\": {\n            ...\n        },\n    \n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Root Fragment in JS - OpenUI5\nDESCRIPTION: This JavaScript snippet shows how to define a multi-root fragment in OpenUI5. The `createContent` function returns an array of controls which will be rendered as part of the fragment. It depends on `sap/m/Label`, `sap/m/Input`, and `sap/m/Button` modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/fragments-with-multiple-root-nodes-23b9c77.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// fragment is located in a file named: sap/ui/core/fragmenttest/MultiRootFragment.fragment.js,\nsap.ui.define([\"sap/m/Label\", \"sap/m/Input\", \"sap/m/Button\"], function(Label, Input, Button) {\n    return {\n        createContent: function(oController) {\n            var oLabel = new Label({text:\"These controls are within one multi-root Fragment:\"});\n            var oInput = new Input();\n            var oButton = new Button({text: \"Still in the same Fragment\"});\n            return [ oLabel, oInput, oButton ];\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Normalization Function Example - JavaScript\nDESCRIPTION: This code demonstrates how to use a custom normalization function with `dataTableUtils.toTable`. The custom function is passed as the second argument to `toTable` and is applied to each header value. This allows for specialized normalization needs, like renaming properties.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar aData = dataTableUtils.toTable(aRawData, function(s) {\n  return dataTableUtils.normalization.camelCase(s).replace(\"role\", \"job\");\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuration File Example (JavaScript)\nDESCRIPTION: This JavaScript code shows an example configuration file (`config.js`) that sets the `compat-version` option to \"edge\" within the `globalThis[\"sap-ui-config\"]` object. It is loaded before the OpenUI5 bootstrap.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-of-the-openui5-runtime-91f08de.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nglobalThis[\"sap-ui-config\"] ??= {}; // globalThis[\"sap-ui-config\"] could be already available\nglobalThis[\"sap-ui-config\"][\"compat-version\"] = \"edge\";\n```\n\n----------------------------------------\n\nTITLE: Disabling Fake Timers for OPA Tests in QUnit\nDESCRIPTION: This code snippet demonstrates how to disable fake timers provided by `sinon-qunit.js` before running OPA tests, and re-enable them after the tests have completed. This is necessary because OPA relies on the native `setTimeout` and `setInterval` functions, which are overwritten by `sinon-qunit.js` when fake timers are enabled.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/pitfalls-and-troubleshooting-698f8c0.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule(\"Opatests\", {\n    beforeEach : function () {\n        sinon.config.useFakeTimers = false;\n    },\n    afterEach : function () {\n        sinon.config.useFakeTimers = true;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Fast Navigation Group (XML View)\nDESCRIPTION: This XML view example demonstrates how to remove a default fast navigation group from a Panel control. It uses the `core:CustomData` element to set the `sap-ui-fastnavgroup` property to `false` and enables `writeToDom` to ensure the attribute is rendered in the HTML.  This prevents the Panel from acting as a fast navigation group.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/fast-navigation-d23e2cf.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n  xmlns:core=\"sap.ui.core\"\n  xmlns:mvc=\"sap.ui.core.mvc\"\n  xmlns=\"sap.m\">\n  <Panel>\n    <headerToolbar>\n      <Toolbar>\n        <Button icon=\"sap-icon://settings\" />\n      </Toolbar>\n    </headerToolbar>\n    <content>\n      <Text text=\"Lorem ipsum dolor st amet...\" />\n    </content>\n    <customData>\n      <core:CustomData key=\"sap-ui-fastnavgroup\" value=\"false\" writeToDom=\"true\" />\n    </customData>\n  </Panel>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Override getFocusInfo and applyFocusInfo in OpenUI5\nDESCRIPTION: This code snippet shows how to override the getFocusInfo and applyFocusInfo methods in an OpenUI5 control to preserve and restore focus after rerendering. It stores the ID and index of the focused element in getFocusInfo and uses this information to restore focus in applyFocusInfo.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/implementing-focus-handling-91f19f0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/Control\"\n], (Control) => {\n    \"use strict\";\n\n    return Control.extend(\"my.custom.SampleControl2\", {\n        // ...\n\n        getFocusInfo() {\n            return {\n                id: this.getId(),\n                idx: this.myFocusElementIndex\n            };\n        },\n\n        applyFocusInfo(oFocusInfo) {\n            const oDomRef = this.getDomRef();\n            if (oDomRef) {\n                this.myFocusElementIndex = oFocusInfo.idx;\n                this.focus();\n            }\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping with Specific OpenUI5 Version\nDESCRIPTION: This code snippet demonstrates how to bootstrap OpenUI5 using a specific version from the CDN. It includes the script tag with the `src` attribute pointing to a versioned URL. The `data-sap-ui-async` attribute is set to `true` for asynchronous loading.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/variant-for-bootstrapping-from-content-delivery-network-2d3eb2f.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n    src=\"https://sdk.openui5.org/1.136.0/resources/sap-ui-core.js\"\n    data-sap-ui-async=\"true\"\n    data-...=\"...\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: JSON Model with Initial OData V4 Date Values - JavaScript\nDESCRIPTION: This JavaScript code creates a JSON model with fixed initial date, timestamp, and time values suitable for OData V4.  It initializes `Date`, `DateTimeOffset`, and `TimeOfDay` properties with strings formatted according to OData V4 conventions.  This function returns a `JSONModel` instance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ngetJSONModelWithFixInitialValues() {\n    return new JSONModel({\n        Date: \"2022-12-15\", // for Dec 15th 2022\n        DateTimeOffset: \"2022-12-15T10:45:00Z\", \n          // for Dec 15th 2022, 10:45 AM (UTC) resp. Dec 15th 2022 11:45:00 CEST\n        TimeOfDay: \"10:35:15\",  // for 10:35:15 AM\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding i18n Text - Properties\nDESCRIPTION: This `i18n.properties` snippet adds text for the fourth panel's header and labels for the product details.  These texts are used to populate the UI with translated, human-readable labels.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-13-element-binding-6c7c5c2.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n...\n# Screen titles\npanel1HeaderText=Data Binding Basics\npanel2HeaderText=Address Details\npanel3HeaderText=Aggregation Binding\npanel4HeaderText=Product Details\n\n...\n\n# Product Details\nProductID=Product ID\nProductName=Product Name\nQuantityPerUnit=Quantity per Unit\nUnitPrice=Unit Price\nUnitsInStock=Number of Units in Stock\nDiscontinued=Discontinued\n\n```\n\n----------------------------------------\n\nTITLE: XML Fragment Instantiation in OpenUI5\nDESCRIPTION: This code snippet shows how to instantiate an XML fragment in an OpenUI5 view. The `fragmentName` attribute specifies the fragment to be used, and the `type` attribute indicates that it is an XML fragment. The referenced fragment will be inlined during preprocessing.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/xml-fragments-65da02b.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<core:Fragment fragmentName=\"sap.ui.core.sample.ViewTemplate.tiny.Field\" type=\"XML\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating FacetFilter with FacetFilterLists and FacetFilterItems in SAPUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a `sap.m.FacetFilter` control with two `sap.m.FacetFilterList` controls, each representing a different facet (City and Restaurants). Each `FacetFilterList` contains `sap.m.FacetFilterItem` controls representing the filter options for that facet. The snippet also shows how to pre-select filter items using the `selected` property. Note that this example does not include model binding, which is required for the search functionality.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/facet-filter-list-and-facet-filter-item-395392f.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n    \nvar oFacetFilter = new sap.m.FacetFilter({ // define FacetFilter Control\n        lists : [ new sap.m.FacetFilterList({ // city facet\n            title : \"City\",\n            items : [ new sap.m.FacetFilterItem({\n                text : \"Waldorf\",\n                key : \"WDF\"\n            }), new sap.m.FacetFilterItem({\n                selected : true, // filter is selected (from ListItemBase)\n                text : \"Atlanta\",\n                key : \"ATL\"\n            }) ]\n        }), new sap.m.FacetFilterList({ // restaurant facet\n            title : \"Restaurants\",\n            items : [ new sap.m.FacetFilterItem({\n                text : \"Caribbean\",\n                key : \"CRB\"\n            }), new sap.m.FacetFilterItem({\n                selected : true, // filter is selected (from ListItemBase)\n                text : \"Italian\",\n                key : \"ITL\"\n            }) ]\n        }) ]\n    });\n\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Structure with Arrange-Act-Assert Pattern (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the recommended structure for QUnit tests using the Arrange-Act-Assert pattern. It includes sections for setting up dependencies (Arrange), creating the control under test (System under Test), executing the function to be tested (Act), and verifying the results (Assert), along with optional cleanup.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/how-to-test-openui5-controls-with-qunit-a6b0657.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nQUnit.test(\"Should do Something\", function (assert) { \n    // Arrange\n    \n    // System under Test\n    var oMyControl = new nameSpace.myControl({\n    });\n    \n    // Act\n    \n    // Assert\n\n    // Cleanup\n    oMyControl.destroy();\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to Employee List Route - JavaScript\nDESCRIPTION: This JavaScript snippet defines the `onNavToEmployees` event handler in the `Home` controller. When the button is pressed, it triggers navigation to the `employeeList` route defined in the application's router configuration. The router's `navTo` method is used to perform the navigation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-navigate-to-routes-with-hard-coded-patterns-782aac0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.Home\", {\n\t\tonDisplayNotFound : function () {\n\t\t\t// display the \"notFound\" target without changing the hash\n\t\t\tthis.getRouter().getTargets().display(\"notFound\", {\n\t\t\t\tfromTarget : \"home\"\n\t\t\t});\n\t\t},\n\t\tonNavToEmployees : function (){\n\t\t\tthis.getRouter().navTo(\"employeeList\");\n\t\t}\n\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Update i18n Properties File (German)\nDESCRIPTION: This INI snippet updates the `i18n_de.properties` file to include German translations for address and panel header text.  This enables the OpenUI5 application to display the user interface in German when the locale is set to German. These translations correspond to the keys defined in the default i18n file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-binding-paths-accessing-properties-in-hierarchically-structured-models-9373793.md#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# Field labels\nfirstName=Vorname\nlastName=Nachname\nenabled=Aktiviert\naddress=Adresse\n\n# Screen titles\npanel1HeaderText=Data Binding Grundlagen\npanel2HeaderText=Adressdetails\n```\n\n----------------------------------------\n\nTITLE: Setting Deferred and Change Groups in OData JavaScript\nDESCRIPTION: This JavaScript code configures deferred and change groups in the OData V2 model. It sets deferred groups and then configures change groups for a specific entity type, including the group ID, change set ID, and single change set flag. This affects how changes are bundled and submitted to the backend.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n// \"ODataModel\" required from module \"sap/ui/model/odata/v2/ODataModel\"\nvar oModel = new ODataModel(myServiceUrl);\noModel.setDeferredGroups([\"myGroupId\", \"myGroupId2\"]);\noModel.setChangeGroups({\n    \"EntityTypeName\": {\n        groupId: \"myGroupId\",  \n        changeSetId: \"ID\",/*optional*/\n        single: true, /*optional, can be true or false*/\n    }\n});\noModel.submitChanges({groupId: \"myGroupId\", success: mySuccessHandler, error: myErrorHandler});\n```\n\n----------------------------------------\n\nTITLE: Data Source Reference (After Changes) - JavaScript\nDESCRIPTION: This JavaScript code snippet shows how data source references are handled after adapting the Component.js file. It demonstrates how the service URL is retrieved from the manifest using the `getMetadata().getManifestEntry(\"sap.app\")` method. This enables dynamic configuration of the service URL based on the manifest.json file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nmetadata : {\n    \"manifest\": \"json\",\n    ...\n     \ninit : function() {\n    ...\n    var sServiceUrl = this.getMetadata().getManifestEntry(\"sap.app\").dataSources[\"LEAVEREQUEST\"].uri;\n    ...\n    oMockServer.simulate(rootPath + \"/\" + this.getMetadata().getManifestEntry(\"sap.app\").dataSources[\"LEAVEREQUEST\"].settings.localUri, rootPath + \"/model/\");\n```\n\n----------------------------------------\n\nTITLE: Defining titleTarget in Route\nDESCRIPTION: This code snippet defines the `titleTarget` within a route, enabling explicit selection of the target from which the title should be taken. In this example, the `productParts` target's title is used.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-the-title-property-in-targets-1238d70.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    ...,\n    \"routes\": [{\n        \"pattern\": \"product/{id}/parts\",\n        \"name\": \"ProductParts\",\n        \"target\": [\"product\", \"productParts\"],\n        \"titleTarget\": \"productParts\"\n\n    }],\n    \"targets\": {\n        \"product\": {\n            \"type\": \"View\",\n            \"viewType\": \"XML\",\n            \"path\": \"shop.products\",\n            \"name\": \"Product\",\n            \"title\": \"Product\"\n        },\n        \"productParts\": {\n            \"type\": \"View\",\n            \"viewType\": \"XML\",\n            \"path\": \"shop.products\",\n            \"name\": \"Product\",\n            \"title\": \"Product Parts\"\n        }\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Request Binding Parameter Usage in OData V4\nDESCRIPTION: Demonstrates how to use the `$$sharedRequest` binding parameter for a list binding. This ensures that the data for the BusinessPartnerList is requested only once and shared among all bindings with the same parameters, improving performance. The parameter makes the binding read-only.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-reuse-648e360.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\n...\n<Table items=\"{/SalesOrderList}\">\n    ...\n   <ColumnListItem>\n      <Select selectedKey=\"{BuyerID}\"\n            forceSelection=\"false\"\n            items=\"{path: '/BusinessPartnerList', templateShareable: false,\n               parameters : {$$sharedRequest:true}}\">\n         <items>\n            <core:ListItem key=\"{BusinessPartnerID}\" text=\"{CompanyName}\"/>\n         </items>\n      </Select>\n   </ColumnListItem>\n</Table>\n...\n\n```\n\n----------------------------------------\n\nTITLE: Rewriting jQuery.Event Constructor with QUnitUtils\nDESCRIPTION: The QUnitUtils module rewrites the jQuery.Event constructor to enrich object literals used for event creation with missing methods like preventDefault, stopPropagation, and stopImmediatePropagation. This addresses robustness checks removed in jQuery event handling.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/upgrading-from-a-version-below-1-38-c1025c2.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nThe module `QUnitUtils` now rewrites the `jQuery.Event` constructor so that any given object literal is enriched with the missing methods. Most OpenUI5 unit tests include the `QUnitUtils` module early, which then fixes the issue.\n```\n\n----------------------------------------\n\nTITLE: OpenUI5 Unit Data Binding in XML View\nDESCRIPTION: This snippet demonstrates unit data binding in an OpenUI5 XML view. It binds the 'WeightMeasure' and 'WeightUnit' properties to an input field using the 'Unit' type, enabling two-way data binding with specific constraints for precision, scale, and nullability.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-and-unit-customizing-in-odata-v4-4d1b9d4.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<Input value=\"{\n                    mode: 'TwoWay', \n                    parts: [{\n                       path: 'WeightMeasure', \n                       type: 'Decimal', \n                       constraints:{'precision': 13, 'scale': 'variable', 'nullable': false}\n                    }, {\n                       path: 'WeightUnit', \n                       type: 'StringType', \n                       constraints: {'maxLength': 3, 'nullable': false}\n                    }, {\n                       mode: 'OneTime',\n                       path: '/##@@requestUnitsOfMeasure',\n                       targetType: 'any'\n                    }], \n                    type: 'Unit'\n                }\" />\n```\n\n----------------------------------------\n\nTITLE: Output of Custom Formatter\nDESCRIPTION: These XML snippets demonstrates the output of the custom `formatParts` formatter function.  It shows how the label (Customer) is enclosed in square brackets.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-bindings-604b1eb.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Text text=\"[Customer]: {CustomerName}\"/>\n<Text text=\"[Customer] {CustomerName}\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing UI5 project - ui5\nDESCRIPTION: Initializes the UI5 project within the app root folder. This sets up the necessary configurations and project structure required for UI5 development. Requires UI5 Tooling to be installed either globally or locally.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-2680aa9.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nui5 init\n```\n\n----------------------------------------\n\nTITLE: Modifying _setDetailArea function in App.controller.js (JavaScript)\nDESCRIPTION: This code snippet modifies the `_setDetailArea` function within the `App.controller.js` file. It first checks for an existing binding context and sets its `keepAlive` property to `false`. Then, for the new binding context, it sets `keepAlive` to `true` and assigns `_setDetailArea` as the `onBeforeDestroy` function. This ensures that the detail area is hidden when the linked user is deleted and the list is refreshed. The function takes an optional user context as input. Dependencies include `sap.ui.model.Context` and UI5 framework.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-enable-data-reuse-e687dbd.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n\t\t onMessageBindingChange : function (oEvent) {\n\t\t\t...\n\t\t},\n\n\t\t onSelectionChange : function (oEvent) {\n            this._setDetailArea(oEvent.getParameter(\"listItem\").getBindingContext());\n        },\n...\n        /**\n         * Toggles the visibility of the detail area\n         *\n         * @param {object} [oUserContext] - the current user context\n         */\n        _setDetailArea : function (oUserContext) {         \n            var oDetailArea = this.byId(\"detailArea\"),\n                oLayout = this.byId(\"defaultLayout\"),\n                oOldContext,\n                oSearchField = this.byId(\"searchField\");\n \n            if (!oDetailArea) {\n                return; // do nothing when running within view destruction\n            }\n \n            oOldContext = oDetailArea.getBindingContext();\n            if (oOldContext) {\n                oOldContext.setKeepAlive(false);\n            }\n            if (oUserContext) {\n                oUserContext.setKeepAlive(true,\n                    // hide details if kept entity was refreshed but does not exists any more\n                    this._setDetailArea.bind(this));\n\n            }\n            oDetailArea.setBindingContext(oUserContext || null);\n            // resize view\n            oDetailArea.setVisible(!!oUserContext);\n            oLayout.setSize(oUserContext ? \"60%\" : \"100%\");\n            oLayout.setResizable(!!oUserContext);\n            oSearchField.setWidth(oUserContext ? \"40%\" : \"20%\");\n        }\n ...\n```\n\n----------------------------------------\n\nTITLE: Configure Support Assistant Extension - JavaScript\nDESCRIPTION: Configures the `sap.ui.support` extension within the `initLibrary()` function of the `library.js` file. This enables the loading of public rules for the Support Assistant. Setting `publicRules` to `true` makes the rules accessible.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/create-a-ruleset-for-a-library-b5a5135.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nextensions: {\n    //Configuration used for rule loading of Support Assistant\n    \"sap.ui.support\": {\n      publicRules: true\n    }\n…\n```\n\n----------------------------------------\n\nTITLE: Allowlist Service Configuration - HTML/JavaScript\nDESCRIPTION: This snippet demonstrates how to configure an allowlist service using `globalThis[\"sap-ui-config\"]` along with setting `frame-options` to `trusted`.  The allowlist service URL is specified, and a callback function is defined for handling the success or failure of the frame embedding check. Depends on OpenUI5 core and an external allowlist service.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/frame-options-62d9c4d.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\nglobalThis[\"sap-ui-config\"] = {\n    \"allowlist-service\": \"url/to/allowlist/service\",\n    \"frame-options\": \"trusted\",\n    \"frame-options-config\": {\n        callback: function(bSuccess) {\n            if (bSuccess) {\n                alert(\"App is allowed to run!\");\n            } else {\n                alert(\"App is not allowed to run!\");\n            }\n        }\n    }\n};\n</script>\n<script id=\"sap-ui-bootstrap\"\n    src=\"resources/sap-ui-core.js\"\n    data-...=\"...\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: View example for Resetting Property Changes\nDESCRIPTION: This example shows the view part to implement \"Save\" and \"Cancel\" functionality of a form with OData V4. It defines buttons for saving and canceling changes and uses `$$updateGroupId` parameter to group the updates.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/batch-control-74142a3.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Toolbar design=\"Transparent\">\n    <content>\n        <Button icon=\"sap-icon://save\" press=\"onSaveSalesOrder\"/>\n        <Button icon=\"sap-icon://sys-cancel-2\" press=\"onCancelSalesOrder\"/>\n    </content>\n</Toolbar>\n<form:SimpleForm id=\"mySimpleForm\" binding=\"{path: '/SalesOrderList(ID=\\'42\\')', $$updateGroupId: 'SalesOrderUpdateGroup'}\">\n    <Label text=\"Sales Order ID\" />\n    <Text text=\"{SalesOrderID}\" />\n    <Label labelFor=\"Note\" text=\"Note\" />\n    <Input id=\"Note\" value=\"{Note}\" />\n</form:SimpleForm>\n```\n\n----------------------------------------\n\nTITLE: DOM Manipulation with Delegates - Good Example\nDESCRIPTION: This example demonstrates the recommended approach of using `addEventDelegate` to modify a control's DOM structure within the `onAfterRendering` hook. It also includes sanity checks to ensure that the change still makes sense and a reminder to re-test after UI5 updates.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\noControl.addEventDelegate({\n\t\"onAfterRendering\": function() {\n\t\tvar $label = oControl.$().find(\".sapMLabel\");\n\t\tif (/* sanity check whether the change still makes sense */) { \n\t\t      // TODO: re-test after UI5 updates, create automated test\n\t\t\t$label.text(\"Better\");\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Library ResourceBundle - SAPUI5 JavaScript\nDESCRIPTION: Illustrates how to retrieve a ResourceBundle for a library using `Lib.getResourceBundleFor()` instead of the deprecated `sap.ui.core.Core.getLibraryResourceBundle()`.  The library must be loaded beforehand, which is ensured by adding the library as component dependency to prevent synchronous loading. Synchronous loading must be avoided.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Retrieve ResourceBundle when library was already loaded beforehand.\n// This is the case for controls inside their own library\nsap.ui.require([\"sap/ui/core/Lib\"], async (Library) => {\n    // ensures the library is loaded\n    await Library.load({ name: \"sap.m\" });\n    // ResourceBundle can be retrieved\n    const oRB = Library.getResourceBundleFor(\"sap.m\")\n});\n```\n\n----------------------------------------\n\nTITLE: Action Buttons Info Sample\nDESCRIPTION: This code snippet shows a sample value for the `actionButtonsInfo` field returned by the `getCurrentUIState()` method. It provides information on which action buttons to display in each column (Mid and End), and what layout to switch to when each button is chosen.  It showcases that the Mid column has no buttons and the End column has Fullscreen and Close buttons with associated layouts.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/main-methods-933965b.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"actionButtonsInfo\":{\n       \"midColumn\":{\n         \"fullScreen\":null,\n         \"exitFullScreen\":null,\n         \"closeColumn\":null\n       },\n       \"endColumn\":{\n         \"fullScreen\":\"EndColumnFullScreen\",\n         \"exitFullScreen\":null,\n         \"closeColumn\":\"TwoColumnsBeginExpanded\"\n       }\n   }\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Data to Cell Templates (OpenUI5)\nDESCRIPTION: Defines column templates with custom data for cells, allowing additional metadata to be passed to the `ExportType`. In this example, a 'color' property is passed as custom data to the 'First name' column. This custom data can then be used within a custom ExportType implementation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-data-binding-for-data-export-f1ee7a8.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// column definitions with column name, binding info for the content and additional custom data\ncolumns: [\n    {\n        name: \"First name\",\n        template: {\n            content: {\n                path: \"firstname\"\n            },\n            customData: [\n                {\n                    \"key\": \"color\",\n                    \"value\": {\n                        path: \"color\"\n                    }\n                }\n            ]\n        }\n    },\n    {\n        name: \"Last name\",\n        template: {\n            content: {\n                path: \"lastname\"\n            }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: setValue Method in ProductRating (TypeScript)\nDESCRIPTION: This code overrides the setValue method to update both the control's 'value' property and the internal RatingIndicator's value. It uses setProperty with the suppress rerendering flag (true) to avoid unnecessary rerendering. This ensures that the RatingIndicator reflects the current value of the ProductRating control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n\tsetValue(value: \"float\" ): ProductRating {\n\t\tthis.setProperty(\"value\", value, true);\n\t\t(this.getAggregation(\"_rating\") as RatingIndicator).setValue(value);\n\t\treturn this;\t\t\n\t}\n```\n\n----------------------------------------\n\nTITLE: Defining a Module with Explicit Name - Avoid\nDESCRIPTION: This example demonstrates a discouraged practice of explicitly providing a module name in `sap.ui.define`. This can lead to inconsistencies and naming conflicts. The recommended approach is to omit the module name, allowing the loader to infer it from the file path.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-for-loading-modules-4363b3f.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// CAUTION: BAD EXAMPLE - DON'T DO THIS\nsap.ui.define(\"myLib.MyModule\", [], function(){\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ResponsiveGridLayout in sap.ui.layout.form.Form - HTML\nDESCRIPTION: This code snippet demonstrates how to configure the ResponsiveGridLayout within a sap.ui.layout.form.Form to control the number of columns displayed based on the screen size. The columnsL property defines the number of columns for large screens, while columnsM defines it for medium screens.  The f namespace is assumed to be declared as sap.ui.layout.form.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/controls-with-built-in-device-adaptation-328a340.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<f:layout>\n\t<f:ResponsiveGridLayout\n\t\tcolumnsL=\"4\"\n\t\tcolumnsM=\"2\"/>\n</f:layout>\n```\n\n----------------------------------------\n\nTITLE: Manifest.json Template\nDESCRIPTION: This is a template for the manifest.json file.  Placeholders marked with <...> need to be replaced with actual values based on the application's configuration and Component.js file.  The template includes sections for defining application metadata, UI settings, dependencies, models, and routing configurations.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"_version\": \"1.35.0\",\n\t\n\t\"start_url\": \"<startUrl>\",\n\t\n    \"sap.app\": {\n        \"id\": \"<id>\",\n        \"type\": \"application\",\n        \"i18n\": \"<i18nPathRelativeToManifest>\",\n        \"applicationVersion\": {\n            \"version\": \"<version>\"\n        },\n        \"title\": \"{{<title>}}\",\n        \"tags\": {\n            \"keywords\": [\n                \"{{<keyword1>}}\", \"{{<keyword2>}}\"\n            ]\n        },\n        \"dataSources\": {\n            \"<dataSourceAlias>\": {\n                \"uri\": \"<uri>\",\n                \"settings\": {\n                    \"localUri\": \"<localUri>\"\n                }\n            }\n        }\n    },\n    \"sap.ui\": {\n        \"icons\": {\n            \"icon\": \"<icon>\",\n            \"favIcon\": \"<favIcon>\",\n            \"phone\": \"<phone>\",\n            \"phone@2\": \"<phone@2>\",\n            \"tablet\": \"<tablet>\",\n            \"tablet@2\": \"<tablet@2>\"\n        },\n        \"deviceTypes\": {\n            \"desktop\": true,\n            \"tablet\": true,\n            \"phone\": true\n        },\n    },\n    \"sap.ui5\": {\n        \"resources\": {\n            \"css\": [\n                {\n                    \"uri\": \"<uri>\",\n                    \"id\": \"<id>\"\n                }\n            ]\n        },\n        \"dependencies\": {\n            \"minUI5Version\": \"<minUI5Version>\",\n            \"libs\": {\n                \"<ui5lib1>\": {                   \n                    \"minVersion\": \"<minVersion1>\"\n                },\n                \"<ui5lib2>\": {                   \n                    \"minVersion\": \"<minVersion2>\"\n                }\n            },\n            \"components\": {\n                \"<ui5component1>\": {\n                    \"minVersion\": \"<minComp1Version>\"\n                }\n            }\n        },\n        \"models\": {\n            \"i18n\": {\n                \"type\": \"sap.ui.model.resource.ResourceModel\",\n                \"uri\": \"<uriRelativeToManifest>\"\n            },\n            \"\": {\n                \"dataSource\": \"<dataSourceAlias>\",\n                \"settings\": {}\n            }\n        },\n        \"rootView\": \"<rootView>\",\n        \"handleValidation\": <true|false>,\n        \"config\": {\n          \n        },\n        \"routing\": {\n          \n        },\n        \"extends\": {\n            \"component\" : \"<extendedComponentId>\",\n\t\t\t\"minVersion\": \"<minComp1Version>\",\n\t\t\t\"extensions\": {}\n        }\n        \"contentDensities\": {\n            \"compact\": <true|false>,\n            \"cozy\": <true|false>\n        }\n    },\n\n    \"sap.platform.abap\": {\n        \"uri\": \"<uri>\"\n    },\n    \"sap.platform.hcp\": {\n        \"uri\": \"<uri>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gherkin with OPA5: JavaScript\nDESCRIPTION: This JavaScript snippet configures Gherkin to work with OPA5 page objects by setting the `generateMissingSteps` parameter to `true` when calling `opa5TestHarness.test`. This instructs Gherkin to use OPA5 page object calls if a matching step definition isn't found in the steps file. The `featurePath` specifies the path to the Gherkin feature file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/gherkin-and-opa-page-objects-c689cd8.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nopa5TestHarness.test({\n  featurePath: \"GherkinWithPageObjects/Requirements1\",\n  generateMissingSteps: true\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Image Inclusion Based on URL with <template:if>\nDESCRIPTION: This snippet demonstrates how to use `<template:if>` to conditionally include an `Image` control in an OpenUI5 XML view. The `Image` is only included if the `ImageUrl` property in the data model is set. The `test` attribute specifies the condition to evaluate. If true the content is included, otherwise omitted.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/if-fc18595.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<template:if test=\"{meta>ImageUrl}\">\n  <Image src=\"{path: 'meta>ImageUrl', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\" />\n</template:if>\n```\n\n----------------------------------------\n\nTITLE: Binding Text Property to i18n Model in XML View\nDESCRIPTION: This snippet demonstrates how to bind the text property of a button control to the `showHelloButtonText` key in the `i18n` model within the XML view. It ensures the button's text is dynamically updated based on the translated value.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-translatable-texts-typescript-4dcf52e.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.App\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Button\n      text=\"{i18n>showHelloButtonText}\"\n      press=\".onShowHello\"/>\n   <Input\n      value=\"{/recipient/name}\"\n      description=\"Hello {/recipient/name}\"\n      valueLiveUpdate=\"true\"\n      width=\"60%\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining ariaDescribedBy Association in OpenUI5\nDESCRIPTION: This code snippet defines the `ariaDescribedBy` association within an OpenUI5 control. It allows for multiple references to `sap.ui.core.Control` instances, which will have their `aria-describedby` attribute set. This association enables the current control to be described by these referenced controls. The `singularName` property sets the name for individual elements in the association.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/aria-attribute-mapping-3e9c010.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nariaDescribedBy : {\n\ntype : \"sap.ui.core.Control\",\n\nmultiple : true,\n\nsingularName : \"ariaDescribedBy\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Dependencies in manifest.json - JavaScript\nDESCRIPTION: This code snippet shows how to declare OpenUI5 library and component dependencies in the `manifest.json` file. It specifies the minimum required version for each dependency, ensuring that the application runs with compatible versions of these libraries and components.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n    \"sap.ui5\": {\n        ...\n        \"dependencies\": {\n            \"minUI5Version\": \"1.30\",\n            \"libs\": {\n                \"sap.m\": {                   \n                    \"minVersion\": \"1.30\"\n                },\n                \"sap.me\": {                   \n                    \"minVersion\": \"1.30\"\n                }\n            },\n            \"components\": {\n                \"sap.app.otherComponent\": {                   \n                    \"minVersion\": \"1.2.0\"\n                }\n            }\n        },\n    \n```\n\n----------------------------------------\n\nTITLE: Asynchronous createContent Implementation in UI5\nDESCRIPTION: This code snippet demonstrates how to implement the `createContent` function in an OpenUI5 component to create the root control asynchronously using XMLView.create. It implements the `sap.ui.core.IAsyncContentCreation` interface. The component metadata is defined via a manifest file, specifying the interface.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/methods-controlling-the-initial-instantiation-b430345.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/UIComponent\", \"sap/ui/core/mvc/XMLView\"], function(UIComponent, XMLView) {\n        return UIComponent.extend(\"my.app.Component\", {\n            metadata: {\n                manifest: \"json\",\n                interfaces: [\"sap.ui.core.IAsyncContentCreation\"]\n            },\n            createContent: function () {\n                return XMLView.create({ ... });\n            }\n        });\n    });\n```\n\n----------------------------------------\n\nTITLE: OData V4 Binding with Group ID in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to create an OData V4 model and bind a context and property with a specified update group ID. The `$$updateGroupId` parameter is used to assign the group ID 'myGroup' to the update requests for the binding, allowing batching of updates.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/batch-control-74142a3.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/model/odata/v4/ODataModel\"], function (ODataModel) {\n    var oModel = new ODataModel({serviceUrl : \"/myService/\", synchronizationMode : \"None\"}),\n        oContextBinding = oModel.bindContext(\"/SalesOrderList(SalesOrderID='42')\", /*oContext*/ undefined, {$$updateGroupId : \"myGroup\"}), \n        oPropertyBinding = oModel.bindProperty(\"Note\", oContextBinding.getBoundContext());\n});  \n```\n\n----------------------------------------\n\nTITLE: Defining Associations with HTML Data Attributes in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to create a Label and an Input control and associate them using the `data-label-for` attribute. The `data-sap-ui-type` attribute specifies the UI5 control type, and the `data-text` attribute sets the label's text. The `data-label-for` attribute links the Label to the Input control by referencing the Input's ID.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-associations-deprecated-91f13d9.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-sap-ui-type=\"sap.m.Label\" data-text=\"Message:\" data-label-for=\"message\"></div>\n<div data-sap-ui-type=\"sap.m.Input\" id=\"message\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Units via FormatSettings in OpenUI5\nDESCRIPTION: This code snippet shows how to set custom units using the `FormatSettings` API in OpenUI5. The example demonstrates the recommended way to modify format configuration settings. Note that modifications should ideally be done early in the application lifecycle or any locale-dependent UI recreated.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-configuration-options-b474a71.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.getCore().getConfiguration().getFormatSettings().setCustomUnits(...)\n```\n\n----------------------------------------\n\nTITLE: Creating Page Objects with Test Library Utilities - JavaScript\nDESCRIPTION: Creates a page object that utilizes utility functions from a test library. The utility functions are accessed through a property on the page object instance that matches the test library's name. This simplifies interaction with complex controls and promotes code reuse.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-libraries-for-opa5-a88a5e5.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nOpa5.createPageObjects({\n    onTheListPage: {\n        viewName: \"myTestView\",\n        actions: {\n            iSetTheFilter: function () {\n                this.myAwesomeTestLibrary.iSelectItem();\n                // trigger other interactions\n            }\n        }\n    }\n});\n\nThen.onTheListPage.iSetTheFilter();\n```\n\n----------------------------------------\n\nTITLE: Modifying Object.view.xml to Extend Detail Page - OpenUI5\nDESCRIPTION: This XML snippet modifies the Object.view.xml file to extend the detail page of an OpenUI5 application. It adds a new `headerContent` section with `ObjectAttribute` controls for displaying product price and ID. It also incorporates `ObjectStatus` and `ProgressIndicator` controls to represent the stock status. Additionally, it includes a `SimpleForm` inside a `Panel` to display supplier information.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-extending-the-detail-page-b561d14.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\ncontrollerName=\"mycompany.myapp.MyWorklistApp.controller.Object\"\nxmlns=\"sap.m\"\nxmlns:mvc=\"sap.ui.core.mvc\"\nxmlns:semantic=\"sap.f.semantic\"\nxmlns:form=\"sap.ui.layout.form\">\n\n<semantic:SemanticPage\n    id=\"page\"\n    headerPinnable=\"false\"\n    toggleHeaderOnTitleClick=\"false\"\n    busy=\"{objectView>/busy}\"\n    busyIndicatorDelay=\"{objectView>/delay}\">\n    <semantic:titleHeading>\n    <Title text=\"{ProductName}\" />\n    </semantic:titleHeading>\n    <semantic:headerContent>\n\t\t\t<FlexBox\n\t\t\t\talignItems=\"Start\"\n\t\t\t\tjustifyContent=\"SpaceBetween\">\n\t\t\t\t<Panel backgroundDesign=\"Transparent\">\n\t\t\t\t\t<ObjectAttribute\n\t\t\t\t\t\ttitle=\"{i18n>ObjectProductIdText}\"\n\t\t\t\t\t\ttext=\"{\n\t\t\t\t\t\tpath: 'ProductID',\n\t\t\t\t\t\tformatter: '.formatter.numberUnit'}\"/>\n\t\t\t\t\t<ObjectAttribute\n\t\t\t\t\t\ttitle=\"{i18n>ObjectPriceTitle}\"\n\t\t\t\t\t\ttext=\"{\n\t\t\t\t\t\tpath: 'UnitPrice',\n\t\t\t\t\t\tformatter: '.formatter.numberUnit'} EUR\"/>\n\t\t\t\t</Panel>\n\t\t\t\t<Panel backgroundDesign=\"Transparent\">\n\t\t\t\t\t<ObjectNumber\n\t\t\t\t\t\tid=\"objectHeader\"\n\t\t\t\t\t\tunit=\"PC\"\n\t\t\t\t\t\ttextAlign=\"End\"\n\t\t\t\t\t\tstate=\"{\n\t\t\t\t\t\tpath: 'UnitsInStock',\n\t\t\t\t\t\tformatter: '.formatter.quantityState'}\"\n\t\t\t\t\t\tnumber=\"{\n\t\t\t\t\t\tpath: 'UnitsInStock',\n\t\t\t\t\t\tformatter: '.formatter.numberUnit'}\">\n\t\t\t\t\t</ObjectNumber>\n\t\t\t\t\t<ObjectStatus\n\t\t\t\t\t\ttext=\"{i18n>ObjectDiscontinuedStatusText}\"\n\t\t\t\t\t\tstate=\"Error\"\n\t\t\t\t\t\tvisible=\"{path:'Discontinued'}\"/>\n\t\t\t\t\t<ProgressIndicator\n\t\t\t\t\t\twidth=\"300px\"\n\t\t\t\t\t\tpercentValue=\"{UnitsInStock}\"\n\t\t\t\t\t\tdisplayValue=\"{UnitsInStock}\"\n\t\t\t\t\t\tshowValue=\"true\"\n\t\t\t\t\t\tstate=\"{\n\t\t\t\t\t\tpath: 'UnitsInStock',\n\t\t\t\t\t\tformatter: '.formatter.quantityState'}\"/>\n\t\t\t\t</Panel>\n\t\t\t</FlexBox>\n    </semantic:headerContent>\n    <semantic:content>\n        <Panel\n            class=\"sapUiNoContentPadding\"\n            headerText=\"{i18n>ObjectSupplierTabTitle}\">\n            <content>\n                <form:SimpleForm\n                    minWidth=\"1024\"\n                    maxContainerCols=\"2\"\n                    editable=\"false\"\n                    layout=\"ResponsiveGridLayout\"\n                    labelSpanL=\"3\"\n                    labelSpanM=\"3\"\n                    emptySpanL=\"4\"\n                    emptySpanM=\"4\"\n                    columnsL=\"1\"\n                    columnsM=\"1\">\n                    <form:content>\n                        <Label text=\"{i18n>ObjectSupplierName}\"/>\n                        <Text text=\"{Supplier/CompanyName}\"/>\n                        <Label text=\"{i18n>ObjectSupplierAddress}\"/>\n                        <Text text=\"{Supplier/Address}\"/>\n                        <Label text=\"{i18n>ObjectSupplierZipcode} / {i18n>ObjectSupplierCity}\"/>\n                        <Text text=\"{Supplier/PostalCode} / {Supplier/City}\"/>\n                        <Label text=\"{i18n>ObjectSupplierCountry}\"/>\n                        <Text text=\"{Supplier/Country}\"/>\n                    </form:content>\n                </form:SimpleForm>\n            </content>\n        </Panel>\n\n    </semantic:content>\n    <semantic:sendEmailAction>\n        <semantic:SendEmailAction id=\"shareEmail\" press=\"onShareEmailPress\"/>\n    </semantic:sendEmailAction>\n</semantic:SemanticPage>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Transforming sap:pageable to SkipSupported and TopSupported\nDESCRIPTION: This snippet demonstrates how `sap:pageable` is converted to `Org.OData.Capabilities.V1.SkipSupported` and `Org.OData.Capabilities.V1.TopSupported` annotations, both indicating that skipping and requesting a top number of entries is disabled.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\nsap:pageable = \"false\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Capabilities.V1.SkipSupported\": {\"Bool\" : \"false\" },\n\"Org.OData.Capabilities.V1.TopSupported\": {\"Bool\" : \"false\" }\n```\n\n----------------------------------------\n\nTITLE: Configuration String in Data Attribute (HTML)\nDESCRIPTION: This HTML code shows how to configure OpenUI5 using the `data-sap-ui-config` attribute on the bootstrap script tag. It sets the animation mode and compatibility version.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-of-the-openui5-runtime-91f08de.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n\tsrc=\"resources/sap-ui-core.js\"\n\tdata-sap-ui-config=\"\n\t\\\"anmination-mode\\\":\\\"full\\\",\n\t\t\\\"compat-version\\\":\\\"edge\\\"\n\t\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Filterable Properties - Navigation Property (Deprecated)\nDESCRIPTION: This code snippet shows how the `sap:filterable = \"false\"` annotation in OData V2 is converted to the `Org.OData.Capabilities.V1.FilterRestrictions` annotation in OData V4. The OData V2 annotation indicates that the property is not filterable, and the OData V4 annotation expresses this restriction using a standard vocabulary term. This example applies to properties PropA and PropC and is deprecated since version 1.54.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_69\n\nLANGUAGE: JSON\nCODE:\n```\n\"Org.OData.Capabilities.V1.FilterRestrictions\": { \"NonFilterableProperties\" : [ { \"PropertyPath\" : \"PropA \" }, { \"PropertyPath\" : \"PropC \" } ] }\n```\n\n----------------------------------------\n\nTITLE: Initializing MasterPage and DetailPage\nDESCRIPTION: This code initializes a MasterPage and a DetailPage within a SplitContainer using semantic pages. It uses the sap.m.semantic library to create a split-screen layout suitable for List-Detail scenarios. It demonstrates the basic structure for incorporating semantic pages in an OpenUI5 application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/semantic-page-sap-m-4a97a07.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\nheight=\"100%\"\nxmlns:mvc=\"sap.ui.core.mvc\"\nxmlns=\"sap.m\"\ncontrollerName=\"mycompany.myController\"\nxmlns:semantic=\"sap.m.semantic\"\ndisplayBlock=\"true\">\n\n<SplitContainer>\n   <masterPages>\n      <semantic:MasterPage>\n         <!-- master page content goes here -->\n      </semantic:MasterPage>\n   </masterPages>\n   <detailPages>\n      <semantic:DetailPage>\n         <!-- detail page content goes here -->\n      </semantic:DetailPage>\n   </detailPages>\n</SplitContainer>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Attaching DOM Event Handlers - Good Example (addEventDelegate)\nDESCRIPTION: This example shows how to attach an event listener using `addEventDelegate` for specific browser events. This is an even better approach than `attachBrowserEvent` for common events as it avoids additional event registrations and utilizes the regular OpenUI5 event dispatching.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\noControl.addEventDelegate({\n        onmouseover:function() {\n            // do something\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Keywords in manifest.json\nDESCRIPTION: This JSON snippet shows how to configure keywords in the `sap.app/tags/keywords` section of the `manifest.json` file, which are used for SAP Fiori launchpad tile configuration.  The keywords are typically text symbols from the i18n file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"sap.app\": {\n    ... \n    \"tags\": {\n        \"keywords\": [\n            \"{{Leave}}\"\n        ],\n    },\n\n```\n\n----------------------------------------\n\nTITLE: Creating Component.js\nDESCRIPTION: This JavaScript file defines the UI5 component. It extends sap.ui.core.UIComponent and specifies the metadata, including the manifest file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-no-data-binding-4cde849.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/UIComponent\"\n], (UIComponent) => {\n\t\"use strict\";\n\treturn UIComponent.extend(\"ui5.databinding.Component\", {\n\t\tmetadata: {\n\t\t\tinterfaces: [\"sap.ui.core.IAsyncContentCreation\"],\n\t\t\tmanifest: \"json\"\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.inArray with Array.prototype.indexOf.call (Native)\nDESCRIPTION: This snippet shows replacing `jQuery.inArray` with `Array.prototype.indexOf.call`. The code uses the `indexOf` method to search for an element within an array-like structure.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar b = (aElements ? Array.prototype.indexOf.call(aElements, 4) : -1);\n```\n\n----------------------------------------\n\nTITLE: Registering a Failing Step Definition in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to register a step definition within the `init` method of a Gherkin step definition file using Opa5. It registers a step that matches the text 'I have started the app' and asserts that the test will fail.  The `register` method takes a regular expression and a function as arguments.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/basic-example-how-to-use-gherkin-4b0c519.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.register(/^I have started the app$/i, function() {\n  Opa5.assert.ok(false, 'This test will fail!');\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure with OpenUI5 Bootstrap\nDESCRIPTION: Defines the basic HTML structure with the OpenUI5 bootstrap script.  It sets the theme, libraries, compatibility version, and resource roots.  The `data-sap-ui-on-init` attribute specifies the module to be executed after the bootstrap process is complete.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-controls-ddbceec.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>UI5 Walkthrough</title>\n\t<script\n\t\tid=\"sap-ui-bootstrap\"\n\t\tsrc=\"resources/sap-ui-core.js\"\n\t\tdata-sap-ui-theme=\"sap_horizon\"\n\t\tdata-sap-ui-libs=\"sap.m\"\n\t\tdata-sap-ui-compat-version=\"edge\"\n\t\tdata-sap-ui-async=\"true\"\n\t\tdata-sap-ui-on-init=\"module:ui5/walkthrough/index\"\n\t\tdata-sap-ui-resource-roots='{\n\t\t\t\"ui5.walkthrough\": \"./\"\n\t\t}'>\n\t</script>\n</head>\n<body class=\"sapUiBody\" id=\"content\">\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Tunneling a Remote Location (OpenUI5, XML)\nDESCRIPTION: This XML snippet configures the `ResourceServlet` to tunnel/proxy requests to another server hosting OpenUI5 resources. The `com.sap.ui5.resource.REMOTE_LOCATION` context parameter specifies the URL of the remote server. This avoids cross-domain issues when referencing OpenUI5 from a remote location in the bootstrap script tag.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-handling-modularization-and-localization-91f2b4d.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <context-param>\n    <param-name>com.sap.ui5.resource.REMOTE_LOCATION</param-name>\n    <param-value>http://%server%:%port%/sapui5</param-value>\n  </context-param>\n```\n\n----------------------------------------\n\nTITLE: Generic Test Page (Test.qunit.html)\nDESCRIPTION: This HTML file serves as a generic test page to run individual tests. It includes the `runTest.js` script, which loads the test suite configuration and starts the test.  It configures the resource roots to allow module loading for the test environment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-27-unit-test-with-qunit-typescript-750c8c1.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n     <meta charset=\"utf-8\">\n     <script\n\t\t  src=\"../resources/sap/ui/test/starter/runTest.js\"\n\t\t  data-sap-ui-resource-roots='{\n\t\t\t      \"test-resources.ui5.walkthrough\": \"./\"\n\t\t  }' \n\t></script>\n</head>\n<body class=\"sapUiBody\">\n     <div id=\"qunit\"></div>\n     <div id=\"qunit-fixture\"></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing Controls by Field Group ID with VerticalLayout\nDESCRIPTION: This code snippet shows how to use the `getControlsByFieldGroupId` method of a `sap.ui.layout.VerticalLayout` to retrieve controls based on their field group IDs.  It demonstrates retrieving all controls with any field group ID and all controls with a specific field group ID.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/field-groups-5b07753.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar aAllControlsWithFieldGroupId = myVerticalLayout.getControlsByFieldGroupId();              //all where fieldGroupId is not empty \nvar aMyGroupControls             = myVerticalLayout.getControlsByFieldGroupId(\"myGroup\");     //exact matches to myGroup\n```\n\n----------------------------------------\n\nTITLE: Gherkin Feature File Example\nDESCRIPTION: This Gherkin feature file outlines a scenario for applying sunscreen to protect skin. It showcases the use of `Feature`, `Scenario`, `Given`, `When`, and `Then` keywords to define the test steps in a human-readable format. This file serves as a specification for the desired behavior of the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/behavior-driven-development-with-gherkin-45ac9f1.md#_snippet_0\n\nLANGUAGE: Gherkin\nCODE:\n```\nFeature: Wearing sunscreen stops skin cancer\n\n  Scenario: Apply sunscreen\n    Given the sun is dangerous\n    When I apply sunscreen\n    Then I protect my skin\n```\n\n----------------------------------------\n\nTITLE: Installing Karma Chrome Launcher with npm\nDESCRIPTION: This command installs the `karma-chrome-launcher` plugin locally. This plugin allows Karma to launch Google Chrome for testing. The `--save-dev` flag adds the plugin as a development dependency. Other browser launchers are also available on npm.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-automation-ae44824.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev karma-chrome-launcher\n```\n\n----------------------------------------\n\nTITLE: Formatter Function Usage in XML Template View (AH.isMultiple)\nDESCRIPTION: This code snippet demonstrates how to use the `isMultiple` formatter function of the `AnnotationHelper` within an XML template view in SAPUI5. The `isMultiple` function returns whether a navigation path ends with an association end with multiple \"*\". It requires the `sap.ui.model.odata.AnnotationHelper` to be available via template:require.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/annotation-helper-dbec058.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n        xmlns=\"sap.m\"\n        xmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\"\n        template:require=\"{AH: 'sap/ui/model/odata/AnnotationHelper'}\">\n        ...\n        <template:if test=\"{path: 'facet>Target', formatter: 'AH.isMultiple'}\">\n```\n\n----------------------------------------\n\nTITLE: Implementing exit() Method in OpenUI5 Control (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to implement the `exit()` method in an OpenUI5 control. It shows how to perform cleanup operations, such as detaching event handlers and then calls the superclass's `exit()` method to ensure that the control is properly destroyed and to avoid memory leaks. It checks for the existence of superclass's `exit` method before calling it.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/exit-method-d4ac0ed.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nSomeControl.extend(\"my.OwnControl\", {\n       ...\n       exit: function() {\n             //... do any further cleanups of your subclass, e.g. detach events ...\n             this.$().off(\"click\", this.handleClick);\n\n             if (SomeControl.prototype.exit) { // check whether superclass implements the method\n                    SomeControl.prototype.exit.apply(this, arguments); // call the method with the original arguments\n             }\n       }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Tabpanel Role with ARIA\nDESCRIPTION: This code snippet shows how to set the ARIA role 'tabpanel' for an element, which identifies the element as a tab panel within a widget. This improves accessibility by providing screen readers with semantic information about the element's function within a tab structure.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/screen-reader-support-for-openui5-controls-656e825.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nrole=\"tabpanel\"\n```\n\n----------------------------------------\n\nTITLE: Defining OPA5 Actions\nDESCRIPTION: This JavaScript snippet defines an OPA5 action to press the button. The `iPressOnTheButton` function uses `waitFor` to locate the button in the view by its ID and view name, and then performs a `Press` action. It also includes an error message if the button is not found.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/getting-started-with-opa5-22f175e.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar actions = new Opa5({\n    iPressOnTheButton : function () {\n        return this.waitFor({\n            viewName : \"Main\",\n            id : \"pressMeButton\",\n            actions : new Press(),\n            errorMessage : \"did not find the Button\"\n        });\n    }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating manifest.json\nDESCRIPTION: This JSON file is the application descriptor. It contains metadata about the application, including its ID, version, dependencies, and root view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-no-data-binding-4cde849.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"_version\": \"1.60.0\",\n\t\"sap.app\": {\n\t\t\"id\": \"ui5.databinding\",\n\t\t\"type\": \"application\",\n\t\t\"applicationVersion\": {\n\t\t\t\"version\": \"1.0.0\"\n\t\t}\n\t},\n\t\"sap.ui\": {\n\t\t\"technology\": \"UI5\",\n\t\t\"deviceTypes\": {\n\t\t\t\"desktop\": true,\n\t\t\t\"tablet\": true,\n\t\t\t\"phone\": true\n\t\t}\n\t},\n\t\"sap.ui5\": {\n\t\t\"dependencies\": {\n\t\t\t\"minUI5Version\": \"1.120.0\",\n\t\t\t\"libs\": {\n\t\t\t\t\"sap.m\": {},\n\t\t\t\t\"sap.ui.core\": {}\n\t\t\t}\n\t\t},\n\t\t\"rootView\": {\n\t\t\t\"viewName\": \"ui5.databinding.view.App\",\n\t\t\t\"type\": \"XML\",\n\t\t\t\"id\": \"app\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OData V4 Model with Update Group ID\nDESCRIPTION: This code snippet demonstrates setting the `updateGroupId` when instantiating the OData V4 model.  This allows grouping update requests into a specific batch group (in this case, \"myAppUpdateGroup\").  The batch request can then be sent using `oModel.submitBatch(\"myAppUpdateGroup\")`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/model-instantiation-and-data-access-9613f1f.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\"sap/ui/model/odata/v4/ODataModel\"], function (ODataModel) {\n    var oModel = new ODataModel({\n        serviceUrl : \"/sap/opu/odata4/IWBEP/V4_SAMPLE/default/IWBEP/V4_GW_SAMPLE_BASIC/0001/\",\n        updateGroupId : \"myAppUpdateGroup\"\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using ActionListItem in OpenUI5 List\nDESCRIPTION: This code snippet demonstrates how to use the `ActionListItem` control within an OpenUI5 `List` to trigger actions. The `ActionListItem` displays a center-aligned text that, when tapped, can trigger specific events.  It inherits features from `ListItemBase` and adds the `text` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/lists-1da1581.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n    \n      <List headerText=\"Actions\">\n        <ActionListItem text=\"Reject\" />\n        <ActionListItem text=\"Accept\" />\n      </List>\n    \n```\n\n----------------------------------------\n\nTITLE: Modified Component.js Structure (After Changes) - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates the modified structure of a Component.js file after adapting it for OpenUI5 using a manifest.json file. It shows the removal of specific metadata properties like 'name', 'library', 'version', and the addition of the 'manifest': 'json' property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(\"cust.emp.myleaverequests.Component\");\n//sap.ui.require(\"cust.emp.myleaverequests.Configuration\");\nsap.ui.require([\"hcm/emp/myleaverequests/Component\"], function(ComponentBase) {\n\n    ComponentBase.extend(\"cust.emp.myleaverequests.Component\", {\n        metadata : {\n            \"manifest\": \"json\",\n            ...\n\n});\n```\n\n----------------------------------------\n\nTITLE: Property Binding with Object Value\nDESCRIPTION: This example showcases property binding with an object value, specifically targeting a comma-separated list of phone numbers. It utilizes a formatter function (`.formatPhoneNumbersAsCSV`) to transform the `BP_2_CONTACT` object value into a CSV string. The binding mode is set to `OneTime` and the targetType is `any`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initialization-and-read-requests-fccfb2e.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SimpleForm binding=\"{/BusinessPartnerList('42')}\">\n\t<Label text=\"Phone number list\" />\n\t<Text text=\"{path : 'BP_2_CONTACT', mode : 'OneTime', targetType : 'any', formatter : '.formatPhoneNumbersAsCSV'}\" />\n</SimpleForm>\n```\n\n----------------------------------------\n\nTITLE: Enabling Development Mode (OpenUI5, XML)\nDESCRIPTION: This XML snippet enables development mode for OpenUI5 by setting the `com.sap.ui5.resource.DEV_MODE` context parameter to `true` in the `web.xml` file. This disables caching of resources in the `resources/` and `test-resources/` servlet paths and enables resource browsing, facilitating easier development of OpenUI5 controls and modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-handling-modularization-and-localization-91f2b4d.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <!-- BEGIN: DEV MODE -->\n  <context-param>\n    <param-name>com.sap.ui5.resource.DEV_MODE</param-name>\n    <param-value>true</param-value>\n  </context-param>\n  <!-- END: DEV MODE -->\n```\n\n----------------------------------------\n\nTITLE: Attaching Multiple Custom Data Elements in JSON View (Deprecated) - JavaScript\nDESCRIPTION: This snippet shows how to add multiple custom data elements to an element in a JSON view using an array of `customData` objects.  Each object represents a custom data entry with a `Type`, `key`, and `value`. This approach is deprecated as of UI5 version 1.120.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/custom-data-attaching-data-objects-to-controls-91f0c3e.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ncustomData: [{\n  Type:\"sap.ui.core.CustomData\",\n    key:\"coords\",\n    value:\"{data}\" // bind custom data\n  },\n  {\n  Type:\"sap.ui.core.CustomData\",\n    key:\"coords\",\n    value:\"{data}\" // bind custom data\n  }]\n```\n\n----------------------------------------\n\nTITLE: Defining a JS Fragment\nDESCRIPTION: This JavaScript fragment defines a simple UI containing two buttons. The fragment uses `sap.ui.define` to declare its dependencies and exports a `createContent` function.  The button text is bound to a model, and the 'press' action is bound to the controller's event handler.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/example-js-fragments-used-in-xml-views-faaff35.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The fragment is available under the resource name: my/own/MyFragment.js,\nsap.ui.define([\"sap/m/Button\"], function (Button) {\n    return {\n        createContent: function() {\n            // button text is bound to Model, \"press\" action is bound to Controller's event handler\n            return [\n                new Button({text:'my Fragment Button'}),\n                new Button(this.createId(\"btn2\"), {text:'my second Fragment Button'})\n            ]\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: XML Table Definition with OData Aggregation\nDESCRIPTION: This XML snippet defines a table with rows bound to the `/EMPLOYEES` path. It uses the `$$aggregation` parameter to configure hierarchy-specific settings like `expandTo` and `hierarchyQualifier`. It also utilizes `$orderby` and `$count` parameters for sorting and counting.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-aggregation-and-recursive-hierarchy-7d91431.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Table rows=\"{\n    path: '/EMPLOYEES',\n    parameters: {\n        $count: false,\n        $orderby: 'AGE',\n        $$aggregation: {\n            expandTo: 2,\n            hierarchyQualifier: 'OrgChart'\n        },\n        $$patchWithoutSideEffects: true\n    },\n    ...\n}\">\n```\n\n----------------------------------------\n\nTITLE: Limiting Blanket.js instrumentation to a specific library via HTML\nDESCRIPTION: This snippet demonstrates how to limit Blanket.js instrumentation to a specific library via HTML using the `data-sap-ui-cover-only` attribute.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../resources/sap/ui/qunit/qunit-coverage.js\"\n\tdata-sap-ui-cover-only=\"sap/ui/core/\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: XML Binding Example with OData Annotation Helper\nDESCRIPTION: This XML snippet shows how to use the `sap.ui.model.odata.AnnotationHelper.format` method as a formatter for labels and values, referencing OData V4 annotations. The path attribute specifies the data source, and the formatter attribute applies the specified formatting function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-bindings-604b1eb.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Label text=\"{path: 'badge>MainInfo/Label', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\"/>\n<Text text=\"{path: 'field>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\" />\n```\n\n----------------------------------------\n\nTITLE: Extending BlockBase for Lazy Loading (JS)\nDESCRIPTION: This code snippet shows how to extend `sap.uxap.BlockBase` to create a custom block that supports lazy loading.  Extending `BlockBase` is a prerequisite for the first lazy loading approach. All your subsection blocks must be based on `BlockBase`, otherwise they're loaded as normal OpenUI5 components.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-layout-2e61ab6.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n**sap.uxap.BlockBase.extend**(\"<BlockName>\", {\n            metadata: {\n             }\n         });\n```\n\n----------------------------------------\n\nTITLE: Unsupported Promise-Returning Controller - JavaScript\nDESCRIPTION: This code illustrates an unsupported approach of defining an OpenUI5 Controller module by returning a Promise from the `sap.ui.define` callback. OpenUI5's module loading mechanism does not fully support Promises as module content for Controllers.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Do NOT return a Promise when loading/defining modules\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\"\n], (Controller) => {\n    \"use strict\";\n    return Promise.resolve(Controller.extend(\"my.app.controller.MyController\", {}));\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.endsWith with String.prototype.endsWith (Native)\nDESCRIPTION: This snippet shows how to replace `jQuery.sap.endsWith` with the native `String.prototype.endsWith` method. `endsWith` determines whether a string ends with the characters of a specified string.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nsMyString.endsWith(\"abc\")\n```\n\n----------------------------------------\n\nTITLE: Synchronous Access to Module Definition Export - Avoid\nDESCRIPTION: This example demonstrates the discouraged practice of synchronously accessing the export of a module definition immediately after the `sap.ui.define` call. Module definitions can be asynchronous, so relying on synchronicity can lead to unpredictable behavior. Access the export in a separate module with a properly defined dependency.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-for-loading-modules-4363b3f.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// BAD EXAMPLE - DON'T DO THIS\nsap.ui.define([], function(){\n    ...\n});  \n...\nvar oMyModule = new myLib.MyModule();  \n...\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.getResourcePath with sap.ui.require.toUrl (Complex)\nDESCRIPTION: This snippet shows how to replace the deprecated `jQuery.sap.getResourcePath` with `sap.ui.require.toUrl` in OpenUI5. `sap.ui.require.toUrl` is used to get the URL of a resource.  It returns a string representing the URL.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require.toUrl(\"some/path/to/resource.json\");\n```\n\n----------------------------------------\n\nTITLE: Synchronous createContent Implementation in UI5\nDESCRIPTION: This code snippet demonstrates how to implement the `createContent` function in an OpenUI5 component to create the root control synchronously. It extends `sap.ui.core.UIComponent` and returns a new `sap/m/Label` control directly. The component metadata is defined via a manifest file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/methods-controlling-the-initial-instantiation-b430345.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/UIComponent\", \"sap/m/Label\"], function(UIComponent, Label) {\n    return UIComponent.extend(\"my.app.Component\", {\n        metadata: {\n            manifest: \"json\"\n        },\n\n        createContent: function () {\n            return new Label({ text: \"Hello!\" });\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Only Time Zone using DateTimeWithTimezone - XML View\nDESCRIPTION: Demonstrates how to display only the time zone part of a `sap.ui.model.odata.type.DateTimeWithTimezone` using the `formatOptions` to hide date and time. This is configured within the XML view by setting `showDate` and `showTime` to `false`. The `value: null` part in the `parts` array is used as a placeholder.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 'TimezoneID' refers to an Edm.String property holding the IANA time zone ID -->\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{DateTimeWithTimezone: 'sap/ui/model/odata/type/DateTimeWithTimezone'}\">\n    ...\n    <Text text=\"{\n        formatOptions: {showDate: false, showTime: false},\n        parts: [{value: null}, {path: 'TimezoneID'}],\n        type: 'DateTimeWithTimezone'\n     }\" />\n```\n\n----------------------------------------\n\nTITLE: OpenUI5 Button Creation and Placement\nDESCRIPTION: This JavaScript code uses the sap.ui.require function to asynchronously load the Button, Core, and VerticalLayout modules from the sap.m and sap.ui.layout libraries. It then creates a vertical layout and a button, adds the button to the layout, and places the layout in the HTML element with the ID 'uiArea'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/basic-example-how-to-use-gherkin-4b0c519.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\n  \"sap/m/Button\",\n  \"sap/ui/core/Core\",\n  \"sap/ui/layout/VerticalLayout\"\n], function(Button, Core, VerticalLayout) {\n  \"use strict\";\n\n  Core.ready().then( () => {\n    var oLayout = new VerticalLayout({id: \"layout\"});\n\n    var oButton = new Button({\n      id: \"life-saving-button\",\n      text: \"Save a Lemming\",\n      press: function() {}\n    });\n\n    oLayout.addContent(oButton);\n    oLayout.placeAt(\"uiArea\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Gherkin Feature File with Background\nDESCRIPTION: This Gherkin snippet demonstrates the use of a Background section to define steps that are executed before each scenario in the feature file. This avoids repetition of common steps, such as application startup. All scenarios within the feature automatically execute the background steps.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Clicking Buttons is a Life Saving Activity\n\n  Background:\n    Given I have started the app\n\n  Scenario: Click a button, save a life!\n    Then I save a lemming's life\n\n  Scenario: The saved lemming has a name\n    Then I see Alice at the end of the list\n```\n\n----------------------------------------\n\nTITLE: Normalize Telephone Number using URLHelper (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `normalizeTel` method of `sap.m.URLHelper` to get the URI scheme back as string without redirecting. The telephone number is optional.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/url-helper-4f1c107.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.m.URLHelper.normalizeTel( [Telephone Number] );\n```\n\n----------------------------------------\n\nTITLE: Executing Statements after waitFor in OPA5 (JavaScript)\nDESCRIPTION: This snippet demonstrates how to execute a single statement after all other `waitFor` calls have completed.  By skipping parameters except for `success`, the code within the `success` function executes after previous `waitFor` calls finish. It changes the browser's hash to a specific product.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-opa5-ce4b180.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\niChangeTheHashToTheThirdProduct : function () {\n        return this.waitFor({\n            success : function () {\n                sap.ui.test.Opa5.getWindow().location.hash = \"#/Products(2)\";\n            }\n        });\n    },\n```\n\n----------------------------------------\n\nTITLE: OData TopLevels Request\nDESCRIPTION: This OData request retrieves the first page of a hierarchical table using the `com.sap.vocabularies.Hierarchy.v1.TopLevels` function. It orders the results by AGE, selects specific properties, and includes count, skip, and top parameters for pagination. The `HierarchyQualifier` parameter specifies the hierarchy being used.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-aggregation-and-recursive-hierarchy-7d91431.md#_snippet_2\n\nLANGUAGE: OData\nCODE:\n```\nGET /sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/EMPLOYEES?$apply=orderby(AGE)/com.sap.vocabularies.Hierarchy.v1.TopLevels(HierarchyNodes=$root/EMPLOYEES,HierarchyQualifier='OrgChart',NodeProperty='ID',Levels=2)&$select=AGE,DescendantCount,DistanceFromRoot,DrillState,ID,MANAGER_ID,Name&$count=true&$skip=0&$top=115\n```\n\n----------------------------------------\n\nTITLE: Browser-Specific CSS with data-sap-ui-browser\nDESCRIPTION: This code snippet demonstrates how to use the `data-sap-ui-browser` attribute on the HTML root tag to apply browser-specific CSS rules in OpenUI5 applications. The example targets any version of Safari to adjust the `padding-top` of buttons.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/theming-faq-d0db4d5.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nhtml[data-sap-ui-browser*=\"sf\"] button {  /* this rule will only be applied if the current browser is ANY version of Safari */\n   padding-top: 0px;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Event in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to define a custom event called \"logout\" within the metadata of an OpenUI5 control.  The event is defined by its name only, indicating a basic event without specific configuration. Methods for attaching, detaching, and firing the event (e.g., `attachLogout`, `detachLogout`, `fireLogout`) will be automatically created.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-the-control-metadata-7b52540.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nevents: {\n   \"logout\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Handlebars Compilation with Compat Flag - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to compile Handlebars templates while passing the `compat` flag. This flag is essential when accessing parent contexts within Handlebars templates after upgrading to Handlebars.js version 4.0.5. The `compat` flag ensures compatibility with older versions and prevents potential issues with context resolution.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/01_Whats-New/what-s-new-in-openui5-1-48-fa1efac.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nHandlebars.compile(source, {\n\tcompat: true\n});\n```\n\n----------------------------------------\n\nTITLE: OpenUI5 Bootstrap Configuration in HTML\nDESCRIPTION: This snippet shows how to configure the OpenUI5 bootstrap within an HTML file to enable INFO level logging.  This configuration is required to see detailed logs during test execution.  It sets the resource roots and log level for the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/logging-ebcf60c.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Using Gherkin with OPA5</title>\n\n    <script\n      id=\"sap-ui-bootstrap\"\n      src=\"https://sdk.openui5.org/nightly/resources/sap-ui-core.js\"\n      data-sap-ui-resource-roots='{\"GherkinWithOPA5\": \"./\"}'\n      data-sap-ui-log-level=\"INFO\">\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Component Creation without Manifest Loading - JavaScript\nDESCRIPTION: This example shows how to create an OpenUI5 component without initially loading the `manifest.json` file. This is useful for legacy components or scenarios where the manifest is loaded later or not at all. Case 1 loads the manifest after the Component controller while Case 2 loads no manifest.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-descriptor-for-applications-components-and-libraries-be0cf40.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Component\" required from module \"sap/ui/core/Component\"\n// load component without loading a manifest first\n//  - Case 1: the manifest.json is loaded after the Component controller\n//  - Case 2: no manifest.json is loaded (legacy)\nComponent.create({\n  name: \"sap.my.component\",\n  manifest: false\n});\n```\n\n----------------------------------------\n\nTITLE: Flagging Control for Custom Fast Navigation Handling in OpenUI5\nDESCRIPTION: This code snippet illustrates how to flag a control as a custom handling area for fast navigation. This involves setting the `data-sap-ui-customfastnavgroup` attribute to \"true\" on the root element of the control during rendering. This indicates that the control will handle fast navigation events internally.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-groups-for-fast-navigation-10b14c7.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender = function(oRm, oControl){\n  //...\n  oRm.openStart(\"div\", oControl);\n  oRm.attr(\"data-sap-ui-customfastnavgroup\", \"true\"); //Attribute must be on the root element of the control.\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Example Meta Model Structure (JSON)\nDESCRIPTION: This JSON-like snippet shows the structure of the meta model used for the example, specifically focusing on the HeaderInfo and its nested properties. It demonstrates how 'title>' refers to the header info's title property, specifically Label and Value.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-bindings-604b1eb.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n                    \n1   \"com.sap.vocabularies.UI.v1.HeaderInfo\": {\n2       \"Title\": {\n3           \"Label\": {\n4               \"String\": \"Customer\"\n5           },\n6           \"Value\": {\n7               \"Path\": \"CustomerName\"\n8           }\n9       }\n10  }\n```\n\n----------------------------------------\n\nTITLE: Synchronous Module Loading with template:require in XML\nDESCRIPTION: This XML snippet demonstrates how to use the `template:require` attribute to synchronously load modules using `jQuery.sap.require`. The modules are specified as a space-separated list. Accessing the required modules is done via their global names. It requires `sap.ui.core.sample.ViewTemplate.scenario.Helper`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/require-263f6e5.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n  controllerName=\"sap.ui.core.sample.ViewTemplate.scenario.Detail\"\n  template:require=\"sap.ui.core.sample.ViewTemplate.scenario.Helper\"\n  xmlns:mvc=\"sap.ui.core.mvc\"\n  xmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\">\n```\n\n----------------------------------------\n\nTITLE: Searching Controls Inside Fragment OPA5 (JavaScript)\nDESCRIPTION: This snippet demonstrates how to search for a control located inside a fragment within a view using OPA5. The `fragmentId` option limits the control search to the specified fragment. It relies on the fragment having a user-assigned ID different from its parent view ID for correct control ID formation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nthis.waitFor({\n    viewId: \"theMainView\",\n    fragmentId: \"greeting\",\n    id: \"hello\",\n    actions: new Press(),\n    errorMessage : \"Did not find the Hello button\"\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming sap:updatable-path to UpdateRestrictions with Path\nDESCRIPTION: This snippet illustrates how `sap:updatable-path` is transformed into the `Org.OData.Capabilities.V1.UpdateRestrictions` annotation with the `Updatable` property dynamically determined by a path expression.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_43\n\nLANGUAGE: xml\nCODE:\n```\nsap:updatable-path = \"AnyPath\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Capabilities.V1.UpdateRestrictions\": { \"Updatable\" : { \"Path\" : \"AnyPath\" } }\n```\n\n----------------------------------------\n\nTITLE: Loading XML Fragments using sap.ui.core.Fragment.load in OpenUI5\nDESCRIPTION: This code snippet shows how to load an XML fragment using the generic sap.ui.core.Fragment.load() method. It takes the fragment name as a parameter and returns a promise that resolves with the fragment's content. The code checks if the component is still valid using isDestroyStarted() before using the loaded content.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/instantiation-of-fragments-04129b2.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Sample for loading an XML Fragment\nFragment.load({\n    name: \"myapp.fragments.MyFragment\"\n }).then(function(oContent){\n    if(!this.isDestroyStarted()){\n       // do stuff\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Text Direction in DisplayListItem - JavaScript\nDESCRIPTION: This code snippet demonstrates how to set the `valueTextDirection` property of an `sap.m.DisplayListItem` control to ensure that numeric data is displayed correctly in a right-to-left (RTL) context. Because `sap.m.DisplayListItem` enforces correct text alignment, the `textAlign` property does not need to be set. This example relies on the sap.m library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/api-properties-for-right-to-left-support-in-text-displaying-controls-7e7cd0a.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nnew sap.m.DisplayListItem({\n     label: \"Phone Correct\", \n     value: \"(+359) 111 222 333\", \n     valueTextDirection: sap.ui.core.TextDirection.LTR\n});\n```\n\n----------------------------------------\n\nTITLE: Data Binding with Event Handling in XML View - OpenUI5\nDESCRIPTION: This snippet demonstrates how to define an event handler for data binding in an OpenUI5 XML view. It binds the `value` property of an `Input` control to the `/firstName` path and specifies an event handler function `.onMyDataRequested` for the `dataRequested` event. This allows custom logic to be executed when data is requested for the binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/binding-syntax-e2e6f41.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Input value=\"{path: '/firstName', events: {dataRequested: '.onMyDataRequested'} }\"/>\n```\n\n----------------------------------------\n\nTITLE: Transformed Data Table Example (Array of Objects)\nDESCRIPTION: This example shows the runtime value of variable `aData` after applying the `dataTableUtils.toTable` transformation. It is now an array of objects, where each object represents a row from the original data table, and the object properties are derived from the header row, using camelCase convention.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n [\n  {\n    ageInMonths: \"24\"\n    name: \"Alice\"\n    role: \"Support\"\n  },\n  {\n    ageInMonths: \"70\"\n    name: \"Bob\"\n    role: \"\"\n  },\n  {\n    ageInMonths: \"120\"\n    name: \"Charlie\"\n    role: \"Stories\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Passing Data with Navigation in OpenUI5 (JavaScript)\nDESCRIPTION: This code demonstrates how to pass data when navigating between pages using the `to()` method of the `NavContainer`. The data is passed as an object, which can be accessed in the `beforeShow` event of the target page. The example shows how to pass an ID and retrieve data based on that ID.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/passing-data-when-navigating-cddf7e5.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.to(\"detailPage\", {id:\"42\"}); // trigger navigation and hand over a data object\n                                 // this data object could also be a binding context when dealing with data binding\n...\n\n\n// and where the detail page is implemented:\nmyDetailPage.addEventDelegate({\n   onBeforeShow: function(evt) {\n      var idToRetrieve = evt.data.id;\n      // ...now retrieve the data element with the given ID and update the page UI\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Extension content in CustomFrag1.fragment.xml\nDESCRIPTION: This XML snippet defines the content of the extension fragment. It demonstrates how to include a simple Button control within the fragment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-extension-403c050.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<Button xmlns=\"sap.m\" text=\"This Button is in an Extension Fragment\" />\n\n```\n\n----------------------------------------\n\nTITLE: Loading Nested Reuse Component in Component.js (Old)\nDESCRIPTION: This snippet presents the older method of loading a reuse component directly within the `createContent` function of a `Component.js` file. It utilizes `sap.ui.component` to instantiate the component. This approach is discouraged in favor of the `createComponent` method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-and-nesting-components-346599f.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncreateContent: function() {\n   \n  var oReuseComponent = sap.ui.component({\n    \"name\": \"sap.reuse.component\"\n  });\n \n}\n```\n\n----------------------------------------\n\nTITLE: Setting FlexItem order with layoutData - JavaScript\nDESCRIPTION: This code snippet shows how to set the order of a button within the FlexBox using the layoutData aggregation and the FlexItemData object.  It requires the sap/m/FlexBox, sap/m/Button and sap/m/FlexItemData modules. The `order` property within `FlexItemData` determines the order of the item.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/getting-started-with-flexbox-988d2c7.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// FlexBox required from \"sap/m/FlexBox\"\n// Button required from \"sap/m/Button\"\n// FlexItemData required from \"sap/m/FlexItemData\"\n\nvar oMyFlexbox = new FlexBox({\n    items: [\n        new Button({\n            text: \"Button 1\",\n            layoutData: new FlexItemData({order: 2})\n        }),\n        new Button({text: \"Button 2\"})\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Simulating a Press Event with Coordinates in OPA5\nDESCRIPTION: This code snippet demonstrates how to simulate a `press` event at specific coordinates within a button using OPA5. The `Press` action is configured with `xPercentage` and `yPercentage` properties, specifying the location as percentages relative to the control's size. The values are converted to pixels.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/simulating-user-interactions-on-controls-8615a0b.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\noOpa.waitFor({\n    id: \"myButton\",\n    actions: new Press({\n        xPercentage: 80,\n        yPercentage: 20\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Add and Use SupportLib - JavaScript\nDESCRIPTION: Demonstrates how to add and use the `SupportLib` within a `library.support.js` file. `SupportLib` provides constants and enumerations for defining rules, audiences, categories, and severities. The example shows how to define a rule using these constants and how to return the ruleset with a `name` and `niceName`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/create-a-ruleset-for-a-library-b5a5135.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/support/library\"],\n  function(SupportLib) {\n    \"use strict\";\n    var rule1 = {\n      ...\n      audiences: [SupportLib.Audiences.Control],\n      categories: [SupportLib.Categories.Usability],\n        ...\n      check: function(oIssueManager, ...) {\n        ...\n        oIssueManager.addIssue({\n          severity: SupportLib.Severity.Medium,\n          ...\n        });\n      }\n    };\n\n    var rule2 = {…};\n\n    return {\n      name: \"sap.ui.core\",\n      niceName: \"UI5 Core Library\",\n      ruleset: [\n        rule1,\n        rule2\n      ]\n    };\n  }, true);\n```\n\n----------------------------------------\n\nTITLE: Accessing Operation Results - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to access the results of an OData operation after invoking it. It uses the `getBoundContext().getObject()` method to retrieve the results from the operation's context.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// let oOperation be the operation's context binding\noOperation.invoke().then(function () {\n    // Note: invoke does not deliver the results\n\n    var oResults = oOperation.getBoundContext().getObject();\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining theme name `sap_platinum` in OpenUI5\nDESCRIPTION: This code snippet shows the declaration of the theme name `sap_platinum`. It is used to identify a specific visual theme within the OpenUI5 framework. The context suggests that this theme might be deprecated or removed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/supported-combinations-of-themes-and-libraries-38ff8c2.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`sap_platinum`\n```\n\n----------------------------------------\n\nTITLE: Gherkin Feature File with Tags\nDESCRIPTION: This Gherkin snippet demonstrates the use of tags to categorize and provide metadata to features and scenarios. Tags, prefixed with the @ symbol, can be used to mark features or scenarios for filtering or categorization during test execution. Feature-level tags are inherited by all scenarios within that feature.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\n@lemmings\nFeature: Clicking Buttons is a Life Saving Activity\n\n  @saved @button\n  Scenario: Click a button, save a life!\n    Then  I save a lemming's life\n```\n\n----------------------------------------\n\nTITLE: Binding Time Value to TimePicker with Edm.Time - XML\nDESCRIPTION: This code snippet shows how to bind a time value from the backend (Edm.Time) to a TimePicker control in OpenUI5. It uses a dedicated data binding type that recognizes the Edm.Time format and handles time conversions in both directions. The Time data type from 'sap/ui/model/odata/type/Time' is required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/date-and-time-related-controls-data-binding-e1ddc69.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<TimePicker displayFormat=\"short\"\n    core:require=\"{\n        Time: 'sap/ui/model/odata/type/Time'\n    }\"\n    value=\"{ path: 'EntryTime', type: 'Time' }\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom RegExp Type\nDESCRIPTION: This code snippet demonstrates how to create a custom regular expression (RegExp) type in OpenUI5 using `DataType.createType`.  It defines a validation function (`isValid`) that checks if a given value matches the specified regular expression. Requires `sap/ui/base/DataType`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-control-properties-ac56d92.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar fooType = DataType.createType('foo', {\n    isValid : function(vValue) {\n        return /^(foo(bar)?)$/.test(vValue);\n    }\n}, DataType.getType('string'));\n```\n\n----------------------------------------\n\nTITLE: Starting the Web Server\nDESCRIPTION: This shell command starts the web server using the configured start script in the package.json file.  It will open the index.html file in a new browser window.  This command assumes UI5 tooling is set up.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-typescript-c20489e.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation Property Binding in OData V4 Metadata (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to access a navigation property binding within the OData V4 metadata using the `getObject` method of the `oMetaModel` object. It highlights the need to URL-encode the forward slash character ('/') as '%2F' when specifying the path.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v4-metadata-json-format-87aac89.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\noMetaModel.getObject('/Customer/$NavigationPropertyBinding/Set%2FParameters')\n```\n\n----------------------------------------\n\nTITLE: Replacing synchronous sap.ui.component.load with asynchronous Component.load - JavaScript\nDESCRIPTION: This snippet illustrates the replacement of the synchronous `sap.ui.component.load` with the asynchronous `Component.load` method. It loads the `sap/ui/core/Component` module asynchronously and then uses the `load` method, which returns a Promise. The `then` method handles the loaded component class, allowing for instantiation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-factories-replacement-491bd9c.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oComponentClass = sap.ui.component.load({\n    name: \"my.comp\"\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Component\"], (Component) => {\n    Component.load({\n        name: \"my.comp\"\n    }).then((oClass) => {\n        var oComponentInstance = new oClass({/*...*/});\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Type Determination with targetType in Property Binding (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to override the automatic type determination by specifying the `targetType` property in the binding. It's used to prevent type-related errors when the control property expects a different type than the OData property's type. The `targetType` is set to 'any' to avoid type formatting by the binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/type-determination-53cdd55.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<Icon src=\"sap-icon://message-warning\" visible=\"{path : 'DeliveryDate', targetType : 'any', formatter : '.isOverdue'}\">\n```\n\n----------------------------------------\n\nTITLE: Setting DataSource in manifest.json\nDESCRIPTION: This JSON snippet shows how to configure the data source in the `sap.app/dataSources` section of the `manifest.json` file, using the information extracted from the `Component.js` file, including the alias, URI, and local URI for mock data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"sap.app\": {\n    ...       \n    \"dataSources\": {\n        \"LEAVEREQUEST\": {\n            \"uri\": \"/sap/opu/odata/GBHCM/LEAVEREQUEST;v=2/\",\n            \"settings\": {\n                \"localUri\": \"model/metadata.xml\"\n            }\n        }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Suspending OData List Binding in XML View\nDESCRIPTION: This snippet shows how to suspend an OData list binding in an XML view using the `suspended` flag within the binding information.  This prevents initial data loading when the view is initialized. It is applied to the `suggestionItems` aggregation of an `Input` control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/suspend-and-resume-b0f5c53.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Dialog id=\"CreateSalesOrderDialog\" title=\"Create New Sales Order\">\n...\n    <Input id=\"NewBuyerID\" suggestionItems=\"{path : '/BusinessPartnerList', suspended : true}\">\n        <suggestionItems>\n            <core:ListItem key=\"{BusinessPartnerID}\" additionalText=\"{CompanyName}\"  text=\"{BusinessPartnerID}\"/>\n        </suggestionItems>\n    </Input>\n...\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Using sap.ui.core.hyphenation.Hyphenation API - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `sap.ui.core.hyphenation.Hyphenation` API to check for native hyphenation support and to hyphenate text using Hyphenopoly if native support is not available. It shows asynchronous initialization of the Hyphenation singleton and hyphenation of a sample string.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/hyphenation-for-text-controls-6322164.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Hyphenation required from \"sap/ui/core/hyphenation/Hyphenation\"\nvar oHyphenationApi = Hyphenation.getInstance();\n\nif (!oHyphenationApi.canUseNativeHyphenation(\"en\")) {\n    oHyphenationApi.initialize(\"en\").then(function() {\n        console.log(oHyphenationApi.hyphenate(\"An example text to hyphenate.\", \"en\"));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Usage in manifest.json\nDESCRIPTION: This JSON snippet shows how to define component usages within the `manifest.json` file of an SAP OpenUI5 application. The `componentUsages` section allows you to declare and configure reusable UI components. This example defines a usage named 'myusage' pointing to a component named 'my.used'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/migration-information-for-upgrading-the-manifest-file-a110f76.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n     ...\n\t\"componentUsages\": {\n\t\t\"myusage\": {\n\t\t\t\"name\": \"my.used\",\n\t\t\t\"settings\": {},\n\t\t\t\"componentData\": {}\n\t\t}\n\t},\n     ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UI Libraries in MANIFEST.MF\nDESCRIPTION: This code snippet shows the entry in the MANIFEST.MF file of a UI library's JAR file that the OSGiResourceServlet uses to determine the relevant UI libraries. It defines the content type as UILibrary using the x-sap-ui5-ContentTypes property. This allows the servlet to identify OpenUI5 UI libraries within the OSGi container.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-handling-modularization-and-localization-91f2b4d.md#_snippet_3\n\nLANGUAGE: Manifest\nCODE:\n```\nx-sap-ui5-ContentTypes: UILibrary\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Honorific with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"honorific\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"n\" (name) property, where the prefix property points to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_79\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"n\" : { \"prefix\" : { \"Path\" : \"PROPERTY\" } } }\n```\n\n----------------------------------------\n\nTITLE: Template Repeat Example\nDESCRIPTION: This XML snippet demonstrates the use of `<template:repeat>` to iterate over a list of fields from the identification annotation in the metadata model. It displays a label and text for each field, using a formatter to handle SAP UI vocabulary.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/repeat-512e545.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<template:repeat list=\"{meta>com.sap.vocabularies.UI.v1.Identification}\" var=\"field\">\n  <Label text=\"{path: 'field>Label', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\" />\n  <Text text=\"{path: 'field>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\" />\n</template:repeat>\n```\n\n----------------------------------------\n\nTITLE: Setting Compact Density in JS View - OpenUI5\nDESCRIPTION: This snippet demonstrates how to set the 'Compact' density for a JavaScript view.  The `addStyleClass` method is called on the view instance within the `createContent` function to apply the `sapUiSizeCompact` CSS class.  This ensures that all controls within the view are rendered using the 'Compact' density.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/how-to-use-densities-for-controls-13e6f3b.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ncreateContent: function(oController) {\n   ...\n   this.addStyleClass(\"sapUiSizeCompact\"); // make everything inside this View appear in Compact density\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Compact Density When Instantiating a View - OpenUI5\nDESCRIPTION: This snippet demonstrates how to set the 'Compact' density when instantiating a view using `sap.ui.core.mvc.View.create`.  It calls `addStyleClass` on the created view within the `then` promise to apply the `sapUiSizeCompact` CSS class. The `View` class is required from the 'sap/ui/core/mvc/View' module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/how-to-use-densities-for-controls-13e6f3b.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// \"View\" required from module \"sap/ui/core/mvc/View\"\nView.create({ ... }).then(function(oView) {\n    oView.addStyleClass(\"sapUiSizeCompact\");\n});\n```\n\n----------------------------------------\n\nTITLE: Encoding XML Strings with sap/base/security/encodeXML in OpenUI5\nDESCRIPTION: This snippet illustrates using `sap/base/security/encodeXML` to escape a string property when neither `writeEscaped` nor `writeAttributeEscaped` are suitable. It's useful for encoding strings where further processing is needed after escaping.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/prevention-of-cross-site-scripting-4de64e2.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap/base/security/encodeXML\n```\n\n----------------------------------------\n\nTITLE: Adding a Search Test to WorklistJourney.js in OpenUI5\nDESCRIPTION: This code snippet adds a new OPA test case to `WorklistJourney.js` that simulates a user entering text into the search field. It uses the `iSearchFor` action on the worklist page and asserts that the table contains one item after the search. The teardown step is moved to the last test case to ensure the app is not destroyed prematurely.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-testing-user-input-92959b1.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*global QUnit*/\nsap.ui.define([\n\t\"sap/ui/test/opaQunit\",\n\t\"./pages/Worklist\"\n], function (opaTest) {\n\t\"use strict\";\n\n\tQUnit.module(\"Posts\");\n\n\topaTest(\"Should see the table with all posts\", function (Given, When, Then) {\n\t\t// Arrangements\n\t\tGiven.iStartMyApp();\n\n\t\t// Assertions\n\t\tThen.onTheWorklistPage.theTableShouldHavePagination().\n\t\t\tand.theTitleShouldDisplayTheTotalAmountOfItems();\n\t});\n\n\n\topaTest(\"Should be able to load more items\", function (Given, When, Then) {\n\t\t//Actions\n\t\tWhen.onTheWorklistPage.iPressOnMoreData();\n\n\t\t// Assertions\n\t\tThen.onTheWorklistPage.theTableShouldHaveAllEntries();\n\t});\n\topaTest(\"Should be able to search for items\", function (Given, When, Then) {\n\t\t//Actions\n\t\tWhen.onTheWorklistPage.iSearchFor(\"Bear\");\n\n\t\t// Assertions\n\t\tThen.onTheWorklistPage.theTableHasOneItem();\n\n\t\t// Cleanup\n\t\tThen.iTeardownMyApp();\n\t});\n\n});\n```\n\n----------------------------------------\n\nTITLE: Getting a Keep-Alive Context in OData V4 Detail View Controller\nDESCRIPTION: Retrieves the keep-alive context in the detail view controller using `ODataModel#getKeepAliveContext`. It assumes that the key predicate for the SalesOrderList entity is available in the route arguments, retrieved from the router. The retrieved context is then set as the binding context for the detail view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-reuse-648e360.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\n...\nonPatternMatched : function (oEvent) {\n    var // Note: We assume that the key predicate is encoded correctly because it has been\n        // taken from an existing context when calling Router#navTo\n        sPath = \"/SalesOrderList\" + oEvent.getParameter(\"arguments\").key,\n        oView = this.getView();\n  \n    oView.setBindingContext(oView.getModel().getKeepAliveContext(sPath));\n...\n\n```\n\n----------------------------------------\n\nTITLE: Sample Supported Locales\nDESCRIPTION: Demonstrates the supportedLocales functionality with a given input locale, fallbackLocale, and a list of supportedLocales. Only locales listed in supportedLocales and present in the fallback chain are requested.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/supported-locales-and-fallback-chain-ec753bc.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\ninput locale: \"de_DE\"\nfallbackLocale: \"en\"\n\nfallback chain: \"de_DE\" -> \"de\" -> \"en\" -> \"\"\n\nsupportedLocales: [\"de\", \"fr\", \"en\"]\n```\n\n----------------------------------------\n\nTITLE: XML View for Upsert With Object Binding\nDESCRIPTION: This XML snippet demonstrates using an object binding for upsert operations.  The `Input` control's binding is set to `Description`, and its `value` is bound to `Text`. This illustrates how to bind an input field to an object allowing the upsert of the properties belonging to the object.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-single-entity-ba0e73c.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<FlexBox binding=\"{/Products('42')}\">\n    <Input  binding=\"{Description}\" id=\"input\" value=\"{Text}\"/>\n</FlexBox>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Control for List Item Content in OpenUI5\nDESCRIPTION: This JavaScript code defines a custom control named `MyListItemContent` extending `sap.ui.core.Control`. It uses properties for name, description, price, currency, and image. The renderer function defines the structure and styling of the custom control, displaying the properties.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/custom-list-item-3e426f1.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\"sap/ui/core/Control\", \"sap/m/Image\"], function (Control, Image) {\n    var MyListItemContent = Control.extend(\"my.control.ListItemContent\", {\n        metadata: {\n            properties : {\n                \"name\": {type: \"string\", defaultValue: \"\"},\n                \"description\": {type: \"string\", defaultValue: \"\"},\n                \"price\": {type: \"string\", defaultValue: \"\"},\n                \"currency\": {type: \"string\", defaultValue: \"\"},\n                \"image\": {type: \"string\", defaultValue: \"\"}\n            },\n            events: {\n                \"myTap\": {},\n            },\n        },\n        init: function(){\n            this._image = new Image({src:\"<myImageSrc>\"}).addStyleClass(\"myImageCSS\").setParent(this);\n        },\n renderer: {\n            apiVersion: 2,  // see 'Renderer Methods' for an explanation of this flag\n            render: function(oRm, oControl) {\n                oRm.openStart(\"div\", oControl);\n                oRm.class(\"listItemCSS\");\n                oRm.openEnd();\n                    oRm.renderControl(oControl._image);\n                    oRm.openStart(\"div\").class(\"descCSS\").openEnd();\n                    oRm.text(oControl.getDescription());\n                    oRm.close(\"div\");\n                    oRm.openStart(\"div\").class(\"priceCSS\").openEnd();\n                    oRm.text(oControl.getPrice());\n                    oRm.close(\"div\");\n                    oRm.openStart(\"div\").class(\"curCSS\").openEnd();\n                    oRm.text(oControl.getCurrency());\n                    oRm.close(\"div\");\n                    oRm.openStart(\"div\").class(\"nameCSS\").openEnd();\n                    oRm.text(oControl.getName());\n                    oRm.close(\"div\");\n                oRm.close(\"div\");\n            }\n        }\n    });\n\n    //example how to react on browser events and convert them to control events\n    ListItemContent.prototype.ontap = function(){\n        //your own tap logic\n        this.fireMyTap({});\n    };\n\n    return MyListItemContent;\n});\n```\n\n----------------------------------------\n\nTITLE: Model Mapping Example 2: Goals as Unrelated Entity\nDESCRIPTION: Example of using `ModelMapping` to map external models to internal models when 'Goals' and 'Employees' are unrelated entities in the backend service. This demonstrates the flexibility of model mapping to adapt to different backend service structures.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-blocks-4527729.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<EmployeeGoals>\n    <mappings>\n        <uxap:ModelMapping externalModelName=\"ApplicationModel2\" externalPath=\"/Employee('121')\" internalModelName=\"Employee\" />\n        <uxap:ModelMapping externalModelName=\"ApplicationModel2\" externalPath=\"/Goals\" internalModelName=\"Goals\" />\n    </mappings>\n</EmployeeGoals>\n```\n\n----------------------------------------\n\nTITLE: Complex Syntax with Global Type - XML\nDESCRIPTION: This XML snippet shows how to use a global type. The 'text' property of a Label control is bound to the '/singleEntry/amount' property, using the 'Float' type imported via core:require and applying format options.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/composite-binding-a2fe8e7.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{Float: 'sap/ui/model/type/Float'}\">\n    <Label text=\"A type test: {path: '/singleEntry/amount', type: 'Float', formatOptions: {minFractionDigits: 1}} EUR\"/>\n```\n\n----------------------------------------\n\nTITLE: EmployeeOverview Controller - JavaScript\nDESCRIPTION: This JavaScript snippet defines the controller for the `EmployeeOverview` view.  Initially, it doesn't contain any specific logic, but it will be extended later to handle back navigation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-assign-multiple-targets-b01840e.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverview\", {\n\t});\n});\n\n```\n\n----------------------------------------\n\nTITLE: Detail Controller with View Model (JavaScript)\nDESCRIPTION: This JavaScript snippet defines the `Detail` controller and initializes a view model with a currency definition. It also attaches a pattern matched event handler to the detail route.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-35-device-adaptation-d63a15e.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\",\n\t\"sap/m/MessageToast\",\n\t\"sap/ui/model/json/JSONModel\"\n], (Controller, History, MessageToast, JSONModel) => {\n\t\"use strict\";\n\n\treturn Controller.extend(\"ui5.walkthrough.controller.Detail\", {\n\t\tonInit() {\n\t\t\tconst oViewModel = new JSONModel({\n\t\t\t\tcurrency: \"EUR\"\n\t\t\t});\n\t\t\tthis.getView().setModel(oViewModel, \"view\");\n\n\t\t\tconst oRouter = this.getOwnerComponent().getRouter();\n\t\t\toRouter.getRoute(\"detail\").attachPatternMatched(this.onObjectMatched, this);\n\t\t},\n\t\t…\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Region with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"region\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation, with the address's region property pointing to the given property's path in OData V4. PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_86\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"adr\" : { \"region\" : { \"Path\" : \"PROPERTY\" } } }\n```\n\n----------------------------------------\n\nTITLE: Add Tooltip to Resource Bundle - i18n.properties\nDESCRIPTION: This INI-style code adds a new entry to the `i18n.properties` file for the tooltip of the flag button. The `flaggedTooltip` key is assigned the text \"Mark this post as flagged\", providing a user-friendly description when hovering over the button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-adding-a-flag-button-69a25bf.md#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n#~~~ Worklist View ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n…\n#XTOL: tooltip for the flagged button\nflaggedTooltip=Mark this post as flagged\n\n…\n```\n\n----------------------------------------\n\nTITLE: dataTableUtils.toTable Transformation - JavaScript\nDESCRIPTION: This JavaScript code shows how to transform a two-dimensional array into an array of objects using the `dataTableUtils.toTable` function.  It converts a raw data table into a structured array where each element is an object with properties derived from the header row of the table.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nthis.register(\n  /^I see the following lemmings:$/i, function(aRawData) {\n    var aData = dataTableUtils.toTable(aRawData, \"camelCase\");\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Names - Bad Example\nDESCRIPTION: This example illustrates the incorrect practice of directly accessing a module via its global name (`sap.m.Input`) inside a `sap.ui.define` callback. This assumes that the module is already loaded and available, which may not be the case, leading to errors.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(['sap/m/Button'], function(Button) {\n    var fnCreateContent = function() {\n        // global reference on sap.m.Input, which might not be loaded yet\n        return new sap.m.Input({\n            color: ...,\n        });\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering with 'all' Operator - JavaScript\nDESCRIPTION: This example shows how to use the 'all' operator to retrieve teams where all employees are older than 42. It creates a `sap.ui.model.Filter` with the `operator` set to `sap.ui.model.FilterOperator.All`, filtering the `TEAM_2_EMPLOYEES` collection based on the `employee/AGE`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/filtering-5338bd1.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\noOrdersListBinding.filter(\n    new sap.ui.model.Filter({\n        path : \"TEAM_2_EMPLOYEES\",\n        operator : sap.ui.model.FilterOperator.All,\n        variable : \"employee\",\n        condition : new sap.ui.model.Filter(\"employee/AGE\", sap.ui.model.FilterOperator.GT, 42)\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Suffix with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"suffix\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"n\" (name) property, where the suffix property points to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_80\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"n\" : { \"suffix\" : { \"Path\" : \"PROPERTY\" } } }\n```\n\n----------------------------------------\n\nTITLE: Using $filter with ODataPropertyBinding to read count in XML\nDESCRIPTION: This XML snippet shows how to use the `$filter` system query option with an `ODataPropertyBinding` to read a filtered count from the SalesOrderList collection. The `$filter` is applied within the binding parameters to retrieve the count of 'New' LifecycleStatus sales orders.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/binding-collection-inline-count-77d2310.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<Title \n\ttext=\"{\n\t\tpath: '/SalesOrderList/$count', \n\t\tparameters: {$filter: 'LifecycleStatus eq \\'N\\''} \n\t\t  } New Sales Orders\"/>\n```\n\n----------------------------------------\n\nTITLE: Resources Attribute in manifest.json - JavaScript\nDESCRIPTION: This example illustrates how to declare JavaScript and CSS resources in the `manifest.json` file.  It maps the resources previously defined in `Component.js` to a structured format suitable for `manifest.json`.  Using this approach allows OpenUI5 to load these resources automatically.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n    \"sap.ui5\": {\n        ...\n        \"resources\": {\n            \"js\": [\n                {\n                    \"uri\": \"myfile.js\"\n                }\n            ],\n            \"css\": [\n                {\n                    \"uri\": \"css/shopStyles.css\"\n                }\n            ]\n        },\n    \n```\n\n----------------------------------------\n\nTITLE: Setting selectedItems Association in sap.m.MultiComboBox\nDESCRIPTION: This snippet demonstrates how to set the `selectedItems` association of a `sap.m.MultiComboBox` control in an XML view. Multiple item IDs are specified, separated by a space. Here, 'item2' and 'item3' are selected.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/control-properties-and-associations-in-xml-views-5ee3be4.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<MultiComboBox selectedItems=\"item2 item3\">\n <items>\n <core:Item id=\"item1\" key=\"article_1\" text=\"Article 1\" />\n <core:Item id=\"item2\" key=\"article_2\" text=\"Article 2\" />\n <core:Item id=\"item3\" key=\"article_3\" text=\"Article 3\" />\n </items>\n</MultiComboBox>\n```\n\n----------------------------------------\n\nTITLE: Defining Contact City with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"city\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation, with the address's locality property pointing to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_83\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"adr\" : { \"locality\" : { \"Path\" : \"PROPERTY\" } } }\n```\n\n----------------------------------------\n\nTITLE: Data Table as Two-Dimensional Array Example\nDESCRIPTION: This shows the runtime value of `aDataTable` when a data table is passed from a feature file with multiple rows and columns to the step definition function. It represents a two-dimensional array, where each sub-array corresponds to a row in the data table.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  [\"Name\", \"Age in Months\", \"Role\"],\n  [\"Alice\", \"24\", \"Support\"],\n  [\"Bob\", \"70\", \"\"],\n  [\"Charlie\", \"120\", \"Stories\"]\n]\n\n```\n\n----------------------------------------\n\nTITLE: Forwarding Buttons Aggregation to Internal Grid - JS\nDESCRIPTION: This example demonstrates forwarding a `buttons` aggregation from a `ButtonList` composite control to the `content` aggregation of an internal `sap.ui.layout.Grid` control using a `getter` function. This enables the `ButtonList` to leverage the layout capabilities of the `Grid` control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/aggregation-forwarding-64a5e17.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\naggregations: {\n\t // The items forwarded from the ButtonList to the internal sap.ui.layout.Grid\n\t buttons: {type: \"sap.m.Button\", multiple: true, forwarding: {\n\t\t   getter: \"_getInternalGrid\",\n\t\t   aggregation: \"content\"\n\t }}\n\n```\n\n----------------------------------------\n\nTITLE: Unit Formatting with RTL (Hebrew) - JavaScript\nDESCRIPTION: Demonstrates unit formatting in Hebrew, which is a right-to-left language. It formats a number with 'speed-mile-per-hour' and takes the RTL orientation into account. Requires sap/ui/core/Locale and sap/ui/core/format/NumberFormat.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/unit-formatting-8e618a8.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Locale\", \"sap/ui/core/format/NumberFormat\"], function(Locale, NumberFormat) {\n   var he = new Locale(\"he\");\n   var oUnitFormat = NumberFormat.getUnitInstance({decimals:2, style:\"long\"}, he);\n   console.log(oUnitFormat.format(12345.678, \"speed-mile-per-hour\")); // ‏12.35 אלף mph\n});\n```\n\n----------------------------------------\n\nTITLE: Unnecessary Module Definition\nDESCRIPTION: This code snippet shows a module definition within the `App.controller.js` file that includes an unnecessary dependency (`sap/m/CheckBox`).  The tutorial advises removing the `CheckBox` reference as it's not used in the controller's logic, helping to optimize the application's loading time.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-browser-developer-tools-eadd60a.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t'sap/ui/core/mvc/Controller',\n\t'sap/m/MessageToast',\n\t'sap/base/Log',\n\t'sap/m/CheckBox'\n], function(Controller, MessageToast, Log, CheckBox) {\n...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Version with OData V2 Annotation\nDESCRIPTION: This code snippet showcases how the `schema-version=\"foo\"` annotation in OData V2 is converted to the `@Org.Odata.Core.V1.SchemaVersion` annotation with a value of \"foo\" in OData V4. The OData V2 attribute specifies the schema version, and the OData V4 annotation expresses the same information.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_73\n\nLANGUAGE: JSON\nCODE:\n```\n\"@Org.Odata.Core.V1.SchemaVersion\" : \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Working with Message Toasts in OPA5 (JavaScript)\nDESCRIPTION: This example demonstrates how to work with message toasts in OPA5 tests. It sets `autoWait` to `false` for the affected `waitFor` method to ensure stable execution and uses jQuery selectors to locate the message toast element. `Opa5.getJQuery()` is used for jQuery interaction.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-opa5-ce4b180.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.waitFor({\n        ...\n        autoWait: false,\n        ...\n        }\n    });\n\n\niShouldSeeMessageToastAppearance: function () {\n                     return this.waitFor({\n                        // Turn off autoWait\n                        autoWait: false,\n                        check: function () {\n                            // Locate the message toast using its class name in a jQuery function\n                            return Opa5.getJQuery()(\".sapMMessageToast\").length > 0;\n                        },\n                        success: function () {\n                            Opa5.assert.ok(true, \"The message toast was shown\");\n                        },\n                        errorMessage: \"The message toast did not show up\"\n                    });\n                }\n```\n\n----------------------------------------\n\nTITLE: Defining Contact PO Box with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"pobox\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation, with the address's PO Box property pointing to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_88\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"adr\" : { \"pobox\" : { \"Path\" : \"PROPERTY\" } } }\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Roots via Bootstrap - HTML\nDESCRIPTION: This snippet shows how to define theme roots for custom themes using the `data-sap-ui-theme-roots` attribute in the OpenUI5 bootstrap script tag. The attribute takes a JSON object where keys are theme names and values are URLs.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/setting-themes-e9fc648.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"sap-ui-bootstrap\" \n        \ttype=\"text/javascript\"\n        \tsrc=\"resources/sap-ui-core.js\"\n        \tdata-sap-ui-theme-roots='{\"my_custom_theme\" : \"http://themes.org/ui5\"}'>\n        </script>\n```\n\n----------------------------------------\n\nTITLE: OData V2 Metadata - EntityType Definition\nDESCRIPTION: This example demonstrates an extract from an OData V2 `$metadata` document, showing the recommended way to define date and time properties within an `EntityType`. Properties like `Date`, `DateTimeOffset`, and `Time` are defined using `Edm.DateTime` with `sap:display-format=\"Date\"`, `Edm.DateTimeOffset`, and `Edm.Time`, respectively. The `Precision` and `sap:label` attributes provide additional metadata.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<EntityType Name=\"MyEntityType\" sap:content-version=\"1\">\n    ...\n    <Property Name=\"Date\" Type=\"Edm.DateTime\" Precision=\"0\" sap:display-format=\"Date\" sap:label=\"Date\" />\n    <Property Name=\"DateTimeOffset\" Type=\"Edm.DateTimeOffset\" Precision=\"7\" sap:label=\"Time Stamp\" />\n    <Property Name=\"Time\" Type=\"Edm.Time\" Precision=\"0\" sap:label=\"Field of type TIMS\" />\n    ...\n</EntityType>\n```\n\n----------------------------------------\n\nTITLE: ResourceServlet Configuration in web.xml - XML\nDESCRIPTION: This XML snippet demonstrates the configuration of the ResourceServlet in the web.xml file to specify a remote location for the OpenUI5 libraries. It configures the `com.sap.ui5.resource.PREFER_REMOTE_LOCATION` parameter to `true` to force the use of the remote location.  The `com.sap.ui5.resource.REMOTE_LOCATION` parameter defines the URL template for the remote OpenUI5 library, which includes placeholders for the protocol, host name, port number, and path to the UI5 library. These placeholders should be replaced with the actual values for the target environment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/openui5-library-location-used-for-testing-61ee9ed.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<servlet>\n    <display-name>ResourceServlet</display-name>\n    <servlet-name>ResourceServlet</servlet-name>\n    <servlet-class>com.sap.ui5.resource.ResourceServlet</servlet-class>\n </servlet>\n  ...\n  <!-- force to use the remote location -->\n <context-param>\n    <param-name>com.sap.ui5.resource.PREFER_REMOTE_LOCATION</param-name>\n    <param-value>true</param-value>\n </context-param>\n <!-- add the remote location for the UI5 libraries -->\n <context-param>\n    <param-name>com.sap.ui5.resource.REMOTE_LOCATION</param-name>\n    <param-value>{protocol}://{host name}:{port number}/{path to UI5 library}</param-value>\n </context-param>\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:quickinfo to QuickInfo\nDESCRIPTION: This snippet illustrates the transformation of `sap:quickinfo` to `com.sap.vocabularies.Common.v1.QuickInfo`. It provides a short description or tooltip for the property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_53\n\nLANGUAGE: xml\nCODE:\n```\nsap:quickinfo = \"foo\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.QuickInfo\": { \"String\" : \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Validating all links in MessagePopover - JavaScript\nDESCRIPTION: This code snippet demonstrates how to validate all links in the long-text description of messages displayed in the MessagePopover control. It sets the 'allowed' flag to true and resolves the promise immediately, ensuring all links are automatically validated. This snippet must be used carefully because it bypasses security features.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/message-popover-52824a6.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasyncURLHandler: function(config){\n\tconfig.promise.resolve({\n\t\tallowed: true,\n\t\tid: config.id\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Factory Function and Assertions in QUnit - JS\nDESCRIPTION: This code defines a factory function to generate QUnit test cases for an OpenUI5 control (sap/m/Bar). It renders the control, applies context-specific classes, and asserts that the DOM structure and classes are correctly updated. The test utilizes `nextUIUpdate` to ensure the DOM is updated before assertions are made. The control is then destroyed after the test to prevent side effects.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-testing-controls-with-qunit-0ddcc60.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// \"Bar\" required from module \"sap/m/Bar\"\n// \"nextUIUpdate\" required from module \"sap/ui/test/utils/nextUIUpdate\"\nfunction renderBarInPageTestCase(sTestName, oOptions) {\n    QUnit.test(sTestName, async(assert) => { \n        // System under Test\n        const oBar = new Bar();\n\n        oBar.placeAt(\"qunit-fixture\");\n\n        // Act\n        oBar.applyTagAndContextClassFor(oOptions.context);\n\n        await nextUIUpdate();\n\n        // Assert\n       assert.strictEqual(oBar.getDomRef().nodeName, oOptions.expectedTag.toUpperCase());\n       assert.ok(oBar.$().hasClass(oOptions.expectedClass), \"The bar has the context class: \" + oOptions.expectedClass);\n\n        // Cleanup\n        oBar.destroy();\n    });\n};\n\nrenderBarInPageTestCase(\"Should render the header context\", {\n    context : \"header\",\n    expectedTag : \"header\",\n    expectedClass : \"sapMHeader-CTX\"\n});\n\nrenderBarInPageTestCase(\"Should render the header context\", {\n    context : \"subheader\",\n    expectedTag : \"header\",\n    expectedClass : \"sapMSubHeader-CTX\"\n});\n\nrenderBarInPageTestCase(\"Should render the header context\", {\n    context : \"footer\",\n    expectedTag : \"footer\",\n    expectedClass : \"sapMFooter-CTX\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Control with init() Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a control using the init() method in JavaScript. It sets a boolean flag and creates a new sap.m.Button control as a subcontrol.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/init-method-6d6b5bd.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n   init: function() {\n\n      this._bSearchHasBeenTriggered = false;\n\n      this._oSearchButton = new sap.m.Button(this.getId() + \"-searchBtn\", {text: \"Search\"});\n\n   }\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Square Control in OpenUI5 (JavaScript)\nDESCRIPTION: This code defines a custom OpenUI5 control named 'Square' by extending sap.ui.core.Control. It defines properties 'text' (string) and 'size' (CSSSize) with a default value of '200px'. The control's renderer generates the HTML for the square, including inline styles for width and height based on the 'size' property, and a CSS class 'mySquare'. It also includes an onclick event handler that displays an alert with the control's text.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/creating-a-simple-square-control-9a6100b.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Control\" required from \"sap/ui/core/Control\"\nvar Square = Control.extend(\"my.Square\", { // call the new Control type \"my.Square\" and let it inherit\n                                           // from sap.ui.core.Control\n\n      // the Control API:\n      metadata : {\n          properties : {           // setter and getter are created behind the scenes, \n                                   // incl. data binding and type validation\n              \"text\" : \"string\",   // in simple cases, just define the type\n              \"size\" : {type: \"sap.ui.core.CSSSize\", defaultValue: \"200px\"} \n                                   // you can also give a default value and more\n          }\n      },\n      \n\n      // the part creating the HTML:\n      renderer : {      \n          apiVersion: 2,\n          render: function(oRm, oControl) {    // static function, so use the given \"oControl\" instance\n                                               // instead of \"this\" in the render function\n              oRm.openStart(\"div\", oControl);  // creates the root element incl. the Control ID and enables event handling - important!\n              oRm.style(\"width\", oControl.getSize());  // write the Control property size; the Control has validated it to be a CSS size\n              oRm.style(\"height\", oControl.getSize());\n              oRm.class(\"mySquare\");           // add a CSS class for styles common to all Control instances\n              oRm.openEnd();                   // this call writes the above class plus enables support \n                                               // for Square.addStyleClass(...)\n              oRm.text(oControl.getText());    // write another Control property, with protection against cross-site-scripting\n              oRm.close(\"div\");\n          }\n      },\n\n\n      // an event handler:\n      onclick : function(evt) {   // is called when the Control's area is clicked - no event registration required\n          alert(\"Control clicked! Text of the Control is:\\n\" + this.getText());\n      }\n  });\n```\n\n----------------------------------------\n\nTITLE: Addressing Entity Properties via Binding Parameter - XML\nDESCRIPTION: This snippet shows how to address properties of an entity through the operation's binding parameter in OpenUI5 XML view. It uses the binding parameter '_it' to access the 'Note' property of the 'SalesOrder' entity within a dialog form.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n<Dialog binding=\"{name.space.CreateInvoice(...)}\" id=\"operation\" title=\"Address Note property of the sales order\">\n    <form:SimpleForm binding=\"{$Parameter}\">\n        <Label text=\"Note\" />\n        <Input value=\"{_it/Note}\" />\n    </form:SimpleForm>\n</Dialog>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Content in Custom Application\nDESCRIPTION: This JavaScript snippet shows how to define the extension content within a custom application. It illustrates how to specify the class name, fragment name, and type of the content for different extension points, along with an ID that overwrites the original view ID.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-extension-403c050.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nextensions: {\n        \n    \"sap.ui.viewExtensions\": {\n        \"samples.components.ext.sap.Sub2\": {\n            \"extension2\": {\n                className: \"sap.ui.core.Fragment\",\n                fragmentName: \"samples.components.ext.customer.CustomFrag1\",\n                type: \"XML\"\n                id: \"stableid\"\n            },\n            \"extension3\": {\n                className: \"sap.ui.core.mvc.View\",\n                viewName: \"samples.components.ext.customer.CustomSubSubView1\",\n                type: \"XML\"\n            }\n        },\n    .....some more content\n\n```\n\n----------------------------------------\n\nTITLE: Handling Selection Change in OpenUI5 List (OData V4)\nDESCRIPTION: This code snippet defines the `onSelectionChange` function.  This function is an event handler triggered when the selection in a list changes. It extracts the binding context of the selected list item and passes it to the `_setDetailArea` function to update the detail area with the selected item's data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-list-detail-scenario-ec44581.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nonSelectionChange : function (oEvent) {\n            this._setDetailArea(oEvent.getParameter(\"listItem\").getBindingContext());\n        },\n```\n\n----------------------------------------\n\nTITLE: Setting deviceTypes in manifest.json - JavaScript\nDESCRIPTION: This code snippet demonstrates how to define the supported device types for an OpenUI5 application within the `manifest.json` file.  It specifies whether the application supports desktop, tablet, and phone devices.  The snippet should be placed within the `sap.ui` namespace in the `manifest.json` file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n    \"sap.ui\": {\n        ...       \n        \"deviceTypes\": {\n            \"desktop\": true,\n            \"tablet\": true,\n            \"phone\": true\n        },\n    \n```\n\n----------------------------------------\n\nTITLE: Implementing Growing Feature with Scroll - OpenUI5 (JavaScript)\nDESCRIPTION: This code demonstrates how to embed an OpenUI5 table within an `sap.m.Page` which is within an `sap.m.App` to enable scroll-to-load behavior for the growing feature. The `growingScrollToLoad` property should be set to true when using a scrollable container.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/growing-feature-for-table-and-list-9164ba7.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<App>\n   <Page title=\"Table Events\">\n      <Table>\n         ...\n      </Table>\n   </Page>\n<App>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Headers on Model Instance - JavaScript\nDESCRIPTION: This code snippet shows how to set custom HTTP headers globally on an existing OData V2 Model instance using the setHeaders() function.  Calling this function removes all previously set custom headers, so ensure all desired headers are included in the provided map. Avoid setting private headers.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\noModel.setHeaders({\"myHeader1\" : \"value1\", \"myHeader2\" : \"value2\"});\n```\n\n----------------------------------------\n\nTITLE: OData PATCH Request for Moving a Node\nDESCRIPTION: This describes how to move a node within the hierarchy using a PATCH request.  The payload `\"EMPLOYEE_2_MANAGER@odata.bind\" : \"EMPLOYEES('9')\"` indicates that the employee is being moved to become a child of employee with ID '9'. This effectively changes the parent of the node.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/data-aggregation-and-recursive-hierarchy-7d91431.md#_snippet_8\n\nLANGUAGE: OData\nCODE:\n```\n\"EMPLOYEE_2_MANAGER@odata.bind\" : \"EMPLOYEES('9')\"\n```\n\n----------------------------------------\n\nTITLE: Setting OpenUI5 Theme with URL Parameter\nDESCRIPTION: This snippet demonstrates how to set the OpenUI5 theme using the `sap-ui-theme` URL parameter.  This allows users to easily switch between different themes, such as `sap_horizon_hcb` or `sap_horizon_hcw`, without modifying the application's code. The URL parameter is appended to the application's URL.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/colors-and-theming-086c41c.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsap-ui-theme=sap_horizon_hcw\n```\n\n----------------------------------------\n\nTITLE: Creating List.controller.js: Implementing search and sort\nDESCRIPTION: This JavaScript controller handles the logic for the list view. It includes functions for initializing the view, performing a search operation based on user input, displaying a message when the 'Add' button is pressed, and sorting the product list.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-using-dynamic-page-for-the-list-view-0830bce.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/MessageBox\"\n], function (Controller, Filter, FilterOperator, Sorter, MessageBox) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.List\", {\n\t\tonInit: function () {\n\t\t\tthis.oView = this.getView();\n\t\t\tthis._bDescendingSort = false;\n\t\t\tthis.oProductsTable = this.oView.byId(\"productsTable\");\n\t\t},\n\n\t\tonSearch: function (oEvent) {\n\t\t\tvar oTableSearchState = [],\n\t\t\t\tsQuery = oEvent.getParameter(\"query\");\n\n\t\t\tif (sQuery && sQuery.length > 0) {\n\t\t\t\toTableSearchState = [new Filter(\"Name\", FilterOperator.Contains, sQuery)];\n\t\t\t}\n\n\t\t\tthis.oProductsTable.getBinding(\"items\").filter(oTableSearchState, \"Application\");\n\t\t},\n\n\t\tonAdd: function () {\n\t\t\tMessageBox.information(\"This functionality is not ready yet.\", {title: \"Aw, Snap!\"});\n\t\t},\n\n\t\tonSort: function () {\n\t\t\tthis._bDescendingSort = !this._bDescendingSort;\n\t\t\tvar oBinding = this.oProductsTable.getBinding(\"items\"),\n\t\t\t\toSorter = new Sorter(\"Name\", this._bDescendingSort);\n\n\t\t\toBinding.sort(oSorter);\n\t\t}\n\t});\n});\n\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom OPA5 Assertion\nDESCRIPTION: This JavaScript code demonstrates how to call a custom OPA5 assertion defined in an extension. It uses `Opa5.createPageObjects` to define a page object with an assertion that calls the `myCustomAssertion` from the extension using `Opa5.assert`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/extensions-for-opa5-9c22d2a.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nOpa5.createPageObjects({\n  onMyView : {\n    viewName : \"MyView\",\n    assertions : {\n      iShouldUseMyCustomAssertion : function () {\n        return this.waitFor({\n          id: \"MyControlId\",\n          actions: new Press(),\n          success : function () {\n            Opa5.assert.myCustomAssertion();\n          }\n        });\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript List Binding - unbindItems Method (OpenUI5)\nDESCRIPTION: This JavaScript snippet shows how to remove a list binding using the typed `unbindItems` method for an OpenUI5 ComboBox.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/list-binding-aggregation-binding-91f0577.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\noComboBox.unbindItems();\n```\n\n----------------------------------------\n\nTITLE: Unsupported Async Lifecycle Hook - JavaScript\nDESCRIPTION: This code demonstrates an unsupported usage of async functions for OpenUI5 lifecycle hooks like `onInit` and `onExit`. Using async functions in lifecycle hooks can lead to unpredictable behavior due to the framework's lifecycle management.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/mvc/Controller\"], (Controller) => {\n  return Controller.extend(\"my.controller.Sample\", {\n      // Do NOT use async event handlers for lifecycle hooks such as \"onInit\" or \"onExit\"\n      async onInit() {\n          await doSomething();\n      },\n      async onExit() {\n          await doSomethingOnExit();\n      }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Page Objects from Test Library - JavaScript\nDESCRIPTION: Demonstrates how to consume page objects defined within a test library in an application's OPA5 tests. This enables reusing pre-defined actions and assertions for UI elements. The code assumes that `onTheListPage` is a page object defined by the test library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-libraries-for-opa5-a88a5e5.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nThen.onTheListPage.iSearchForItem();\n```\n\n----------------------------------------\n\nTITLE: Excluding jQuery Compatibility Layer via Global Configuration\nDESCRIPTION: This code snippet shows how to exclude the jQuery compatibility layer using a global configuration object before OpenUI5 is initialized. Setting `window[\"sap-ui-config\"][\"excludejQueryCompat\"]` to `true` prevents the compatibility layer from being loaded, ensuring that the application uses the standard jQuery 3.5.1 behavior.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/upgrading-from-a-version-below-1-82-147eef9.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow[\"sap-ui-config\"][\"excludejQueryCompat\"]=true\n```\n\n----------------------------------------\n\nTITLE: SAP Messages Header Example\nDESCRIPTION: This code snippet shows an example of the `sap-messages` header in an OData response. It includes properties such as `code`, `message`, `numericSeverity`, `longtextUrl`, and `target` which provide information about messages from the backend.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/server-messages-in-the-odata-v4-model-fbe1cb5.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nsap-messages:[\n     {\n          \"code\" : \"0815\",\n          \"message\" : \"Delivery date is in the past\",\n          \"numericSeverity\" : 3\n          \"longtextUrl\" : \"Messages(3)/LongText/$value\",\n          \"target\" : \"DeliveryDate\"\n     }\n]\n```\n\n----------------------------------------\n\nTITLE: Extending Element to create CustomScale - JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a custom scale for an OpenUI5 slider by extending the sap.ui.core.Element class.  It implements the IScale interface, allowing for custom logic to determine tickmark labels, numbers, resizing, and label retrieval. Requires \"sap/ui/core/Element\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/sliders-84ec82e.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Element\" required from \"sap/ui/core/Element\"\nvar CustomScale = Element.extend(\"sap.xx.custom.CustomScale\", {\n\t\t\t\tinterfaces: [\n\t\t\t\t\t\"sap.m.IScale\"\n\t\t\t\t],\n\t\t\t\tlibrary: \"sap.xx.custom\",\n\t\t\t});\n```\n\n----------------------------------------\n\nTITLE: Registering NavContainer Event Delegates\nDESCRIPTION: Registers event delegates for `beforeShow` and `afterHide` events on a page. This allows custom logic to be executed before a page is shown or after it is hidden. Uses the `addEventDelegate` function, which is available on every control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/events-fired-on-the-pages-b6ab31c.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npage1.addEventDelegate({\n   onBeforeShow: function(evt) {\n      // page1 is about to be shown; act accordingly - if required you can read event information from the evt object\n   },\n   onAfterHide: function(evt) {\n      // ...\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Gherkin Scenario Outline Example\nDESCRIPTION: This demonstrates how to use a scenario outline in a Gherkin feature file to avoid repetition in test scenarios. It uses placeholders enclosed in angle brackets and an `Examples` table to define multiple test cases.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_14\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario Outline: Using a scenario outline to Save Lemmings\n  When I click on the life saving button <NUM CLICKS> times\n  Then I see <NAME> at the end of the list of saved lemmings\n\nExamples: list of lemmings\n  | NUM CLICKS | NAME     |\n  |  1         |  Alice   |\n  |  2         |  Bob     |\n  |  3         |  Charlie |\n\n```\n\n----------------------------------------\n\nTITLE: Loading Reuse Component in Component.js (Recommended)\nDESCRIPTION: This snippet illustrates the recommended way to load a reuse component using the `createComponent` method within the `createContent` function of a `Component.js` file. It uses the `usage` parameter to specify the component usage defined in the `manifest.json` file.  The `createComponent` method returns a promise.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-and-nesting-components-346599f.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncreateContent: function() {\n   \n  var oReuseComponentPromise = this.createComponent({ /* this = Component instance */\n    \"usage\": \"reuse\"\n  });\n \n}\n```\n\n----------------------------------------\n\nTITLE: Component Creation with Alternative Manifest URL - JavaScript\nDESCRIPTION: This snippet showcases creating an OpenUI5 component by specifying an alternative URL for the `manifest.json` file. This allows loading the manifest from a non-standard location. The provided URL will be used to fetch and evaluate the manifest before the component is instantiated.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-descriptor-for-applications-components-and-libraries-be0cf40.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Component\" required from module \"sap/ui/core/Component\"\n// load via manifest URL\nComponent.create({\n  name: \"sap.my.component\",\n  manifest: \"any/location/sap/my/component/manifest.json\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining OpenUI5 Modules\nDESCRIPTION: Demonstrates the proper way to define OpenUI5 modules using `sap.ui.define`. Every module file must contain exactly one unnamed `sap.ui.define` call at the top level. All module-related functions should be defined within the callback function to prevent side effects.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/best-practices-for-loading-modules-00737d6.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(function(){\n    ...\n});\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Local IDs - Good Example\nDESCRIPTION: This example shows the correct way to create a control with a unique ID using `this.createId(\"myBtn\")` inside a typed view. This ensures that the ID is prefixed with the view's ID, preventing ID clashes and ensuring the application's stability.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateContent: function(oController) {\n\tvar btn = new sap.m.Button(this.createId(\"myBtn\"), {text: \"Hello\"});\n\treturn btn;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Title with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"title\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"title\" property pointing to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_92\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"title\" : { \"Path\" : \"PROPERTY\" } }\n```\n\n----------------------------------------\n\nTITLE: Content Densities in manifest.json - JavaScript\nDESCRIPTION: This code snippet defines the supported content densities for an OpenUI5 application within the `manifest.json` file.  It specifies whether the application supports compact and cozy content density modes. This allows the application to adapt to different screen sizes and user preferences.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n    \"sap.ui5\": {\n        ...       \n        \"contentDensities\": {\n            \"compact\": true,\n            \"cozy\": true\n        }\n    \n```\n\n----------------------------------------\n\nTITLE: Image with Alternative Text in OpenUI5\nDESCRIPTION: This example demonstrates how to provide meaningful alternative text for non-decorative images in OpenUI5 using the `alt` property. The `decorative=false` attribute indicates that the image is not purely for visual decoration and conveys important information.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/labeling-and-tooltips-329a029.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Image id=\"image_not_decorative\" src=\"IMAGE_PATH\" alt=\"This is an image showing an elephant\" decorative=false>\n```\n\n----------------------------------------\n\nTITLE: Custom Controller Definition in OpenUI5 (CustomMain.controller.js)\nDESCRIPTION: Defines the custom controller CustomMain.controller.js as a plain JavaScript object with a lifecycle hook onInit and two methods: doSomething and doSomeCustomAction. It uses sap.ui.define for module definition. The controller is intended to extend the standard controller.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/using-component-configuration-c264d66.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([], function() {\n    \"use strict\";\n    return {\n       onInit : function () {\n            console.log(\"samples.components.ext.customer.CustomMain - onInit\");\n        },\n\n        doSomething: function() {\n            alert(\"this is a customer action\");\n        },\n\n        doSomeCustomAction: function() {\n            alert(\"this is another customer action\");\n        }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Validating URLs using URLListValidator in OpenUI5\nDESCRIPTION: This code snippet demonstrates how to validate URLs using the URLListValidator in OpenUI5. It uses the `URLListValidator.validate` method to check if a given URL is allowed based on the URLs added to the validator. The `URLListValidator` module needs to be required first. The example shows the expected boolean results of different validation attempts.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/url-list-validation-91f3768.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// URLListValidator required from module sap/base/security/URLListValidator\n\nURLListValidator.validate(\"http://www.sap.com\"); // => true\n\nURLListValidator.validate(\"http://sdn.sap.com\"); // => false (wrong protocol)\n\nURLListValidator.validate(\"https://sdn.sap.com\"); // => true\n\nURLListValidator.validate(\"ftp://sap.de:1080/anyftppath\"); // => true\n\nURLListValidator.validate(\"https://community.sap.de/anypath\"); // => false (wrong path)\n\nURLListValidator.validate(\"https://community.sap.de/topics\"); // => true\n```\n\n----------------------------------------\n\nTITLE: Extending an OpenUI5 Class using `extend`\nDESCRIPTION: This code shows the best practice for extending an existing class delivered by OpenUI5.  It uses `sap.ui.define` to load the necessary modules and the `Controller.extend` method to create a new controller class. This ensures proper integration with the OpenUI5 framework.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/mvc/Controller\"], (Controller) => {\n    \"use strict\";\n    return Controller.extend(\"my.app.controller.MyController\", {});\n});\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping OpenUI5 with noJQuery\nDESCRIPTION: This HTML snippet demonstrates how to bootstrap an OpenUI5 application using the `sap-ui-core-nojQuery.js` file. It requires that jQuery and `jquery-ui-position.js` are loaded before the OpenUI5 bootstrap script. The `data-sap-ui-libs` attribute specifies the SAPUI5 libraries to be loaded.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/nojquery-variant-for-bootstrapping-91f1dd0.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- include some jQuery version -->\n    <script src=\"my-jQuery-min.js\" ></script>\n\n    <!-- application does not have its own jquery-ui-position, so it might use the one from SAPUI5 -->\n    <script src=\"resources/sap/ui/thirdparty/jqueryui/jquery-ui-position.js\" ></script>\n\n    <!-- now booting SAPUI5 -->\n    <script \n            id=\"sap-ui-bootstrap\"            \n            src=\"resources/sap-ui-core-nojQuery.js\" \n            data-sap-ui-libs=\"sap.m\">\n    </script> \n```\n\n----------------------------------------\n\nTITLE: Parsing File Size String\nDESCRIPTION: This snippet demonstrates how to parse a string containing a file size (with or without a unit) into a number representing the equivalent size in bytes. It showcases the use of the `parse` method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/file-size-format-24f340b.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar oFileSizeFormat =  sap.ui.core.format.FileSizeFormat.getInstance();\n \noFileSizeFormat.parse(\"1.23 MiB\"); //returns 1289748.48\noFileSizeFormat.parse(\"1 MB\"); // returns 1230000\n```\n\n----------------------------------------\n\nTITLE: Creating Custom List Item using XML in OpenUI5\nDESCRIPTION: This XML snippet defines a List with CustomListItems in OpenUI5. It uses sap.m.HBox and sap.m.VBox for layout and data binding to display product information.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/custom-list-item-3e426f1.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<List headerText=\"Custom Content\" mode=\"Delete\" items=\"{path: '/ProductCollection'}\" >\n\t<CustomListItem>\n\t\t<HBox>\n\t\t\t<core:Icon size=\"2rem\" src=\"sap-icon://attachment-photo\" class=\"sapUiSmallMarginBegin sapUiSmallMarginTopBottom\" />\n\t\t\t<VBox  class=\"sapUiSmallMarginBegin sapUiSmallMarginTopBottom\" >\n\t\t\t\t<Link text=\"{Name}\" target=\"{ProductPicUrl}\" press=\"handlePress\"/>\n\t\t\t\t<Label text=\"{ProductId}\"/>\n\t\t\t</VBox>\n\t\t</HBox>\n\t</CustomListItem>\n</List>\n```\n\n----------------------------------------\n\nTITLE: Using IconTabBar for Navigation in JavaScript - SAPUI5\nDESCRIPTION: This JavaScript snippet demonstrates enabling a sap.m.IconTabBar for navigation within an ObjectPageLayout by setting the `useIconTabBar` property to `true`. This programmatically activates the IconTabBar and hides the default anchor bar. The input is the boolean value 'true'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/anchor-bar-370b679.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\noObjectPage.setUseIconTabBar(true);\n```\n\n----------------------------------------\n\nTITLE: Label Support Rules - JavaScript\nDESCRIPTION: This snippet shows the content of `Label.support.js`, containing the rules related to the `sap.m.Label` control. It returns an array of rule objects. This illustrates how rules can be returned as a single rule or as an array of rules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/create-a-ruleset-for-a-library-b5a5135.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/support/library\"],\n  function(SupportLib) {\n    \"use strict\";\n    var labelRule1 = {…};\n\n    var labelRule2 = {…};\n\n    return [labelRule1, labelRule2];\n  }, true);\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:required-in-filter to RequiredProperties\nDESCRIPTION: This snippet shows the transformation of `sap:required-in-filter` to `RequiredProperties`. The specified properties must be included in any filter expression.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_54\n\nLANGUAGE: xml\nCODE:\n```\nsap:required-in-filter = \"true\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Capabilities.V1.FilterRestrictions\": {\n\"RequiredProperties\" : [\n{ \"PropertyPath\" : \"PropA \" },\n { \"PropertyPath\" : \"PropC \" }] }\n```\n\n----------------------------------------\n\nTITLE: Formatting date using pattern option\nDESCRIPTION: This code snippet illustrates how to format a date using the 'pattern' option within the getDateInstance method. The date is formatted according to the given LDML date format pattern.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/date-format-91f2eba.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({\n    pattern: \"EEE, MMM d, yyyy\"\n});\n\noDateFormat.format(UI5Date.getInstance()); //string in the same format as \"Thu, Jan 29, 2017\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Control Test Template - JS\nDESCRIPTION: This is a template for writing rendering tests for OpenUI5 controls using QUnit. It includes the necessary steps for placing the control in the DOM using `placeAt(\"qunit-fixture\")`, waiting for the rendering to complete using `nextUIUpdate()`, performing assertions, and cleaning up by destroying the control using `destroy()`. This ensures that the test environment is clean and avoids memory leaks.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-testing-controls-with-qunit-0ddcc60.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// \"nextUIUpdate\" required from module \"sap/ui/test/utils/nextUIUpdate\"\nQUnit.test(\"Should do Something\", async(assert) => {\n    // Arrange\n    const oConstructor = {\n\n    };\n\n    // System under Test\n    const oMyControl = new nameSpace.myControl(oConstructor);\n    oMyControl.placeAt(\"qunit-fixture\");\n\n    // Wait for the rendering before proceeding the test\n    await nextUIUpdate();\n\n    // Act\n\n    // Assert\n\n    // Cleanup\n    oMyControl.destroy();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an XML View with JS Fragments\nDESCRIPTION: This XML view defines a layout with buttons and includes JS fragments using the `<core:Fragment>` tag. It demonstrates referencing fragments both inline without an ID and with a specified ID (`myFrag`).  The `fragmentName` attribute specifies the module path to the JS fragment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/example-js-fragments-used-in-xml-views-faaff35.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View xmlns:core=\"sap.ui.core\"\n    xmlns:layout=\"sap.ui.layout\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\">\n    <layout:VerticalLayout id=\"vl\">\n        <Button text=\"Find controls by ID\" press=\"findControls\"></Button>\n        <Text text=\"Fragment referenced inline, no Fragment ID:\" />\n        <core:Fragment fragmentName='module:my/own/MyFragment' />\n        <Text text=\"Fragment referenced inline, with Fragment ID 'myFrag':\" />\n        <core:Fragment id=\"myFrag\" fragmentName='module:my/own/MyFragment' />\n    </layout:VerticalLayout>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Table Columns Using CSS in OpenUI5\nDESCRIPTION: This example highlights a column by applying a CSS style to it using the `styleClass` property of the column. A custom class name (e.g., `myPrice`) is specified for the `styleClass` property of the column.  CSS is used to define a style for this class and apply it to the entire column.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/table-design-d3234bc.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n#products .MyPrice {\n  background: @sapUiNeutralBG;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Replacing synchronous sap.ui.getVersionInfo with asynchronous VersionInfo.load - JavaScript\nDESCRIPTION: This snippet demonstrates replacing the synchronous `sap.ui.getVersionInfo` with the asynchronous `VersionInfo.load` method. It loads the `sap/ui/core/VersionInfo` module and then uses the `load` method, which returns a Promise. The `then` method handles the loaded version information.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-factories-replacement-491bd9c.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oVersionInfo = sap.ui.getVersionInfo();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/VersionInfo\"], (VersionInfo) => {\n    VersionInfo.load({ \n        // ...\n    }).then((oVersionInfo) => {/*...*/});\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Models for UI Controls in OpenUI5 (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set models for UI controls in OpenUI5 using JavaScript. It creates a JSONModel and an ODataModel, then assigns them to an input control. It also shows how to set a named model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/assigning-the-model-to-the-ui-91f0d1c.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar oJSONModel = new sap.ui.model.json.JSONModel();\nvar oODataModel  = new sap.ui.model.odata.v2.ODataModel(\"myServicelUrl\");\nvar oControl  = new sap.m.Input();\n\noControl.setModel(oODataModel);\n//set the JSONModel with the name 'myJSONModel' to the same control\noControl.setModel(oJSONModel,\"myJSONModel\");\n```\n\n----------------------------------------\n\nTITLE: Enable Button Based on Advertised Action - HTML\nDESCRIPTION: This HTML snippet demonstrates how to enable a button based on the advertisement of an OData action on an entity. It uses the `%` operator to cast the action advertisement to a boolean value, which is then used to control the `enabled` property of the button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<FlexBox binding=\"{/EMPLOYEES('1')}\">\n    <Button text=\"Set occupied\" enabled=\"{= !!%{#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsOccupied} }\"/>\n</FlexBox>\n```\n\n----------------------------------------\n\nTITLE: Setting selectedItem Association in sap.m.Select\nDESCRIPTION: This snippet demonstrates how to set the `selectedItem` association of a `sap.m.Select` control in an XML view. The association is set by referencing the ID of the associated `core:Item` element. Here, 'item2' is selected.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/control-properties-and-associations-in-xml-views-5ee3be4.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Select selectedItem=\"item2\">\n <items>\n <core:Item id=\"item1\" key=\"article_1\" text=\"Article 1\" />\n <core:Item id=\"item2\" key=\"article_2\" text=\"Article 2\" />\n <core:Item id=\"item3\" key=\"article_3\" text=\"Article 3\" />\n </items>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Creating index.html - HTML\nDESCRIPTION: This `index.html` file is the entry point of the application. It contains the basic HTML structure with a head and a body. The body contains a simple `div` element that displays \"Hello World\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-2680aa9.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>UI5 Walkthrough</title>\n</head>\n<body>\n\t<div>Hello World</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Resulting XML Binding after Preprocessing\nDESCRIPTION: This XML snippet demonstrates the result of preprocessing the earlier XML.  It showcases the type information and constraints inserted into the binding, replacing the original meta model references. This provides details on the `PhoneNumber` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-bindings-604b1eb.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Label text=\"Phone\"/>\n<Text text=\"{path : 'PhoneNumber', type : 'sap.ui.model.odata.type.String', constraints : {'maxLength':'30'}}\" />\n```\n\n----------------------------------------\n\nTITLE: Showing the Global Busy Indicator - JavaScript\nDESCRIPTION: This code snippet demonstrates how to display a global busy indicator using `sap.ui.core.BusyIndicator`. It blocks the entire UI and takes a delay parameter in milliseconds to specify when the indicator should appear. The `BusyIndicator` must be required from module \"sap/ui/core/BusyIndicator\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/busy-indicators-0dd2110.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// BusyIndicator required from module \"sap/ui/core/BusyIndicator\"\n\nBusyIndicator.show(<number>);\n```\n\n----------------------------------------\n\nTITLE: Setting Tablist Role with ARIA\nDESCRIPTION: This code snippet shows how to set the ARIA role 'tablist' for an element, which identifies the element as a tab list within a composite UI widget. This helps screen readers understand the structure and function of the tab interface.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/screen-reader-support-for-openui5-controls-656e825.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\ni.e. role=\"tablist\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Reuse Components in manifest.json\nDESCRIPTION: This snippet shows the recommended way to declare reuse components using the `componentUsages` section in `manifest.json`. It specifies the component name and whether it should be lazily loaded.  Using `componentUsages` is preferred over declaring component dependencies directly.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-and-nesting-components-346599f.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sap.ui5\": {\n    \"componentUsages\": {\n      \"reuse\": {\n        \"name\": \"sap.reuse.component\",\n        \"lazy\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Global IDs - Bad Example\nDESCRIPTION: This example demonstrates the incorrect approach of creating a control with a hardcoded ID (`\"myBtn\"`) inside a typed view. This can lead to ID clashes and break the application, especially when running with other views or apps.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateContent: function(oController) {\n\tvar btn = new sap.m.Button(\"myBtn\", {text: \"Hello\"});\n\treturn btn;\n}\n```\n\n----------------------------------------\n\nTITLE: Delaying Component Initialisation with Custom Module - HTML\nDESCRIPTION: This HTML snippet shows how to set up the bootstrap to use a custom module to delay the initialisation of components. The `data-sap-ui-on-init` attribute is used to specify the custom bootstrap module `my/app/bootstrap`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-api-for-initial-components-82a0fce.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n<script id=\"sap-ui-bootstrap\"\n  src=\"resources/sap-ui-core.js\"\n  data-sap-ui-on-init=\"module:my/app/bootstrap\"\n  data-sap-ui-resource-roots='{ \"my.app\": \"./\" }'\n  data-sap-ui-async=\"true\"\n  data-...=\"...\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Value List Type Check with AnnotationHelper in XML\nDESCRIPTION: This XML snippet demonstrates how to use AnnotationHelper.getValueListType to determine the type of value list for a property and conditionally render content based on the result.  It checks if the value list type is 'Fixed'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/meta-model-for-odata-v4-7f29fb3.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n <template:with path=\"/BusinessPartnerList/Role\" var=\"property\">\n        <template:if test=\"{= ${property>@@AnnotationHelper.getValueListType} === 'Fixed'}\">\n            ...\n        </template:if>\n    </template:with>\n```\n\n----------------------------------------\n\nTITLE: Binding Rows with Custom Query Options JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to bind rows in a table with custom query options for a service operation. The custom parameters `param1` and `param2` are defined within the `custom` property of the `parameters` object. These custom parameters can be used as input parameters for service operations.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_25\n\nLANGUAGE: js\nCODE:\n```\noTable.bindRows({\n        path: \"/Products\", \n        parameters: {\n        custom: {\n            param1: \"value1\",\n            param2: \"value2\"\n        }\n    },\n    template: rowTemplate\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing OData V4 Model\nDESCRIPTION: This code snippet demonstrates how to create a new instance of the OData V4 model.  It requires the `sap/ui/model/odata/v4/ODataModel` module. The `serviceUrl` parameter specifies the URL of the OData V4 service endpoint.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/model-instantiation-and-data-access-9613f1f.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\"sap/ui/model/odata/v4/ODataModel\"], function (ODataModel) {\n    var oModel = new ODataModel({\n        serviceUrl : \"/sap/opu/odata4/IWBEP/V4_SAMPLE/default/IWBEP/V4_GW_SAMPLE_BASIC/0001/\"\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Application Subtitle in manifest.json\nDESCRIPTION: This JSON snippet shows how to define the application's `subTitle` attribute in the `manifest.json` file using the `{{...}}` syntax.  The value references a text symbol defined in the `i18n` properties file. Requires OpenUI5 version 1.34 or later.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/migration-information-for-upgrading-the-manifest-file-a110f76.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n\"sap.app\": {\n    \"_version\": \"1.3.0\",\n    ...\n    \"title\": \"{{title}}\",\n    \"subTitle\": \"{{subtitle}}\",\n```\n\n----------------------------------------\n\nTITLE: Text Based on Amount Level - XML\nDESCRIPTION: This XML snippet dynamically sets the text of a control based on the amount value. It uses a conditional (ternary) operator to select between two language-dependent texts from a resource model (i18n). The expression utilizes embedded binding syntax.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Text for amount level using language-dependent texts from the resource model. -->\ntext=\"{=%{/amount} > 10000 ? %{i18n>/high} : %{i18n>/normal}}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Container View embedding ButtonView in OpenUI5\nDESCRIPTION: This HTML snippet defines a container view that embeds the ButtonView twice. Each embedded ButtonView instance has a unique ID ('ButtonView1' and 'ButtonView2'). This demonstrates how views can be reused within other views. The container view uses sap.ui.commons, sap.ui.core, and html namespaces.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/support-for-unique-ids-91f28be.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<mvc:View viewName=\"sap.hcm.ContainerView\" controllerName=\"sap.hcm.Address\" xmlns=\"sap.ui.commons\" xmlns:core=\"sap.ui.core\"\n           xmlns:html=\"http://www.w3.org/1999/xhtml\">\n      <mvc:View id=\"ButtonView1\" viewName=\"sap.hcm.ButtonView\"/>\n      <mvc:View id=\"ButtonView2\" viewName=\"sap.hcm.ButtonView\"/>\n<mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Resume View XML - IconTabBar with Lazy Loading (XML)\nDESCRIPTION: This XML snippet defines the `Resume` view with an `IconTabBar`. The content for 'Hobbies' and 'Notes' tabs is removed, enabling lazy loading. The `selectedKey` property of the `IconTabBar` is bound to a model, and the `.onTabSelect` method is called when a tab is selected.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-implement-lazy-loading-cdab0a1.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.Resume\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page\n\t\ttitle=\"{i18n>ResumeOf} {FirstName} {LastName}\"\n\t\tid=\"employeeResumePage\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\">\n\t\t<content>\n\t\t\t<IconTabBar\n\t\t\t\tid=\"iconTabBar\"\n\t\t\t\theaderBackgroundDesign=\"Transparent\"\n\t\t\t\tclass=\"sapUiResponsiveContentPadding\"\n\t\t\t\tbinding=\"{Resume}\"\n\t\t\t\tselect=\".onTabSelect\"\n\t\t\t\tselectedKey=\"{view>/selectedTabKey}\">\n\t\t\t\t<items>\n\t\t\t\t\t<IconTabFilter id=\"infoTab\" text=\"{i18n>tabInfo}\" key=\"Info\">\n\t\t\t\t\t\t<Text text=\"{Information}\"/>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"projectsTab\" text=\"{i18n>Projects}\" key=\"Projects\">\n\t\t\t\t\t\t<mvc:XMLView viewName=\"sap.ui.demo.nav.view.employee.ResumeProjects\"></mvc:XMLView>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"hobbiesTab\" text=\"{i18n>Hobbies}\" key=\"Hobbies\">\n\t\t\t\t\t\t<!-- place content via lazy loading -->\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"notesTab\" text=\"{i18n>Notes}\" key=\"Notes\">\n\t\t\t\t\t\t<!-- place content via lazy loading -->\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t</items>\n\t\t\t</IconTabBar>\n\t\t</content>\n\t</Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML Attributes with RenderManager in OpenUI5\nDESCRIPTION: This snippet shows how to use the `RenderManager` instance to escape a string property when writing it as an HTML attribute.  This prevents XSS vulnerabilities when setting attribute values dynamically from application data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/prevention-of-cross-site-scripting-4de64e2.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noRenderManager.writeAttributeEscaped(\"someHtmlProperty\", oControl.getSomeStringProperty())\n```\n\n----------------------------------------\n\nTITLE: Defining Fiscal Year with OData V2 Annotation\nDESCRIPTION: This code snippet shows how the `sap:semantics=\"fiscalyear\"` annotation in OData V2 is converted to the `com.sap.vocabularies.Common.v1.IsFiscalYear` annotation with a boolean value of \"true\" in OData V4. The OData V2 annotation indicates the property is a fiscal year, and the OData V4 annotation standardizes this.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_67\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.IsFiscalYear\" : {\"Bool\" : \"true\"}\n```\n\n----------------------------------------\n\nTITLE: Get Element by ID in Controller, No Fragment ID, OpenUI5\nDESCRIPTION: Retrieves a control instance using its ID when the fragment is embedded in a view and the code is inside a controller, and no fragment ID was given. Assumes `this` refers to the controller instance.  Uses `this.byId` to find the control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-control-instances-by-their-id-8b32551.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmyControl = this.byId(\"myControl\")\n```\n\n----------------------------------------\n\nTITLE: Concatenating GroupId to Deferred Groups in OData JavaScript\nDESCRIPTION: This JavaScript code adds a new `groupId` to the existing list of deferred groups.  The `concat()` method is used to combine the existing array `aDeferredGroups` with a new array containing the `groupId` to be deferred. This prepares the group ID for later setting on the model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\naDeferredGroups=aDeferredGroups.concat([\"myId\"]);\n```\n\n----------------------------------------\n\nTITLE: Applying theme text color to custom HTML using CSS class\nDESCRIPTION: Demonstrates how to apply the theme's text color to custom HTML content by adding the `sapThemeText` CSS class to a `span` element. This ensures that the text color of the `span` element automatically updates when the theme is switched or modified.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/css-classes-for-theme-parameters-ea08f53.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"sapThemeText\">some custom text in custom HTML</span>\n```\n\n----------------------------------------\n\nTITLE: ariaLabelledBy with InvisibleText in OpenUI5\nDESCRIPTION: This example demonstrates how to use `ariaLabelledBy` in conjunction with `sap.ui.core.InvisibleText` to provide a hidden label for accessibility purposes. The button's label is defined in the `InvisibleText` element.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/labeling-and-tooltips-329a029.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n <Page title=\"Page\">\n\t<content>   \n\t\t<Button text=\"Home\" ariaLabelledBy=\"invisibleId\"/>   \n\t\t<core:InvisibleText id=\"invisibleId\" text=\"I am a hidden label\"/>  \n\t</content> \n </Page>\n```\n\n----------------------------------------\n\nTITLE: Excluding jQuery Compatibility Layer via Data Attribute\nDESCRIPTION: This code snippet illustrates how to disable the jQuery compatibility layer using a data attribute on the OpenUI5 bootstrap element. Setting `data-sap-ui-excludejquerycompat` to `true` bypasses the compatibility layer, enabling testing with the native jQuery 3.5.1 behavior.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/upgrading-from-a-version-below-1-82-147eef9.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\ndata-sap-ui-excludejquerycompat=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Register Step Definition with Data Table Parameter - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to register a step definition function that receives a data table as an argument.  The data table is passed as the last parameter of the step definition function.  The function sAnimalType captures the matched string from the regular expression.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nthis.register(\n  /^I see the following (.*?):$/i,\n  function(sAnimalType, aDataTable) {}\n);\n\n```\n\n----------------------------------------\n\nTITLE: Initial DateFormatter Unit Test (JS)\nDESCRIPTION: This snippet creates a basic unit test for the DateFormatter class. It checks whether a DateFormatter object can be instantiated. It uses QUnit for assertion. It serves as the base test to verify basic setup.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/bulletinboard/model/DateFormatter\"\n], function(DateFormatter) {\n\tQUnit.module(\"DateFormatter\");\n\n\tQUnit.test(\"initial\", function(assert) {\n\t\tassert.ok(new DateFormatter());\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Model Preloading Configuration in manifest.json\nDESCRIPTION: This JSON snippet illustrates how to configure model preloading in the `manifest.json` file using the `preload` property. Setting `preload` to `true` initializes the model before the component instance is created.  Requires OpenUI5 version 1.38 or later.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/migration-information-for-upgrading-the-manifest-file-a110f76.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"equipment\": { \n    \"preload\": true,\n    \"dataSource\": \"equipment\",\n     ...\n}\n```\n\n----------------------------------------\n\nTITLE: XML Fragment for Lazy Instantiation\nDESCRIPTION: This XML fragment defines the edit panel, which is loaded and instantiated only when the user switches to edit mode.  This prevents unnecessary resource consumption during initial application load. Requires `sap.m` namespace definition.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/performance-issues-966d67c.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Panel xmlns=\"sap.m\" id=\"editPanel\" headerText=\"Edit Data\" visible=\"false\">\n\t<Table...>\n</Panel>\n```\n\n----------------------------------------\n\nTITLE: Accessing 1..1 Aggregations in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to access a 1..1 aggregation of a control using the `get<Aggregation>()` method in OpenUI5. The example shows how to retrieve the `content` aggregation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/writing-a-control-renderer-91f3939.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n    \n    // var oAggregation = oControl.get<Aggregation>();\n    // for example for content-aggregation\n    var oAggregation = oControl.getContent();\n    \n```\n\n----------------------------------------\n\nTITLE: Metadata Example for a Code List Service (XML)\nDESCRIPTION: This XML snippet provides an example of the metadata structure required for a code list service to be used for currency and unit customizing. It defines EntityTypes for `Currency` and `UnitOfMeasure`, including properties like CurrencyCode, ISOCode, Text, DecimalPlaces, UnitCode, and ExternalCode. It shows relevant annotations such as `Common.Text`, `Common.UnitSpecificScale`, `CodeList.StandardCode`, `CodeList.ExternalCode`, and `Core.AlternateKeys`. The `AlternateKeys` annotation provides an option to use another property for the visualization of a certain code.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-and-unit-customizing-in-odata-v4-4d1b9d4.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n...\n<EntityType Name=\"Currency\">\n  <Key>\n    <PropertyRef Name=\"CurrencyCode\" />\n  </Key>\n  <Property Name=\"CurrencyCode\" Type=\"Edm.String\" MaxLength=\"5\" />\n  <Property Name=\"ISOCode\" Type=\"Edm.String\" MaxLength=\"3\" />\n  <Property Name=\"Text\" Type=\"Edm.String\" MaxLength=\"15\" />\n  <Property Name=\"DecimalPlaces\" Type=\"Edm.SByte\" />\n</EntityType>\n\n<EntityType Name=\"UnitOfMeasure\">\n  <Key>\n    <PropertyRef Name=\"UnitCode\" />\n  </Key>\n  <Property Name=\"UnitCode\" Type=\"Edm.String\" MaxLength=\"3\" />\n  <Property Name=\"ISOCode\" Type=\"Edm.String\" MaxLength=\"3\" />\n  <Property Name=\"ExternalCode\" Type=\"Edm.String\" MaxLength=\"3\" />\n  <Property Name=\"Text\" Type=\"Edm.String\" MaxLength=\"30\" />\n  <Property Name=\"DecimalPlaces\" Type=\"Edm.Int16\" />\n</EntityType>\n\n<Annotations Target=\"SAP__self.Currency/CurrencyCode\">\n  <Annotation Term=\"Common.Text\" Path=\"Text\" />\n  <Annotation Term=\"Common.UnitSpecificScale\" Path=\"DecimalPlaces\" />\n  <Annotation Term=\"CodeList.StandardCode\" Path=\"ISOCode\" />\n</Annotations>\n\n<Annotations Target=\"SAP__self.UnitOfMeasure\">\n  <Annotation Term=\"Core.AlternateKeys\">\n    <Collection>\n      <Record>\n        <PropertyValue Property=\"Key\">\n          <Collection>\n            <Record>\n              <PropertyValue Property=\"Name\" PropertyPath=\"ExternalCode\" />\n              <PropertyValue Property=\"Alias\" String=\"ExternalCode\" />\n            </Record>\n          </Collection>\n        </PropertyValue>\n      </Record>\n    </Collection>\n  </Annotation>\n</Annotations>\n\n<Annotations Target=\"SAP__self.UnitOfMeasure/UnitCode\">\n  <Annotation Term=\"Common.Text\" Path=\"Text\" />\n  <Annotation Term=\"Common.UnitSpecificScale\" Path=\"DecimalPlaces\" />\n  <Annotation Term=\"CodeList.StandardCode\" PropertyPath=\"ISOCode\" />\n  <Annotation Term=\"CodeList.ExternalCode\" PropertyPath=\"ExternalCode\" />\n</Annotations>\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Page Object Utilities - JavaScript\nDESCRIPTION: Defines utility functions within a test library to be used as building blocks for user page objects.  This is achieved by extending the `testLibBase` configuration. This pattern is used to expose reusable actions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-libraries-for-opa5-a88a5e5.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nOpa5.extendConfig({\n    testLibBase: {\n        myAwesomeTestLibrary: {\n            actions: {\n                iSelectItem: function: () {\n                    // choose item of a Select\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Operation Parameters in Controller (OData V4)\nDESCRIPTION: This JavaScript snippet demonstrates how to set operation parameters programmatically using the `setParameter` method of the operation binding. In this example, the `Comment` parameter is set to the `sComment` value before invoking the `Submit` action.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nonSubmit : function (oEvent) {\n    this.getView().byId(\"Submit\").getObjectBinding().setParameter(\"Comment\", sComment).invoke();\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting List Items Declaratively - XML\nDESCRIPTION: This code snippet shows how to sort a list of invoices by the 'ProductName' field using the 'sorter' property in the XML view. The 'path' property specifies the data path to sort by. By default, the sorting is ascending.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-24-sorting-and-grouping-c4b2a32.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <List\n      id=\"invoiceList\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\"\n      items=\"{\n         path : 'invoice>/Invoices',\n         sorter : {\n            path : 'ProductName' \n         }\n      }\" >\n      ...\n   </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Component.js: Retrieving Icon Information\nDESCRIPTION: This JavaScript snippet shows how to extract the icon configuration from the `Component.js` file. The `icon`, `favIcon`, and `homeScreenIcon` properties are retrieved from the `config` section.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"config\" : {\n    ...\n    \"icon\": \"sap-icon://Fiori2/F0394\",\n    \"favIcon\": \"./resources/sap/ca/ui/themes/base/img/favicon/My_Leave_Requests.ico\",\n    \"homeScreenIconPhone\": \"./resources/sap/ca/ui/themes/base/img/launchicon/My_Leave_Requests/57_iPhone_Desktop_Launch.png\",\n    \"homeScreenIconPhone@2\": \"./resources/sap/ca/ui/themes/base/img/launchicon/My_Leave_Requests/114_iPhone-Retina_Web_Clip.png\",\n    \"homeScreenIconTablet\": \"./resources/sap/ca/ui/themes/base/img/launchicon/My_Leave_Requests/72_iPad_Desktop_Launch.png\",\n    \"homeScreenIconTablet@2\": \"./resources/sap/ca/ui/themes/base/img/launchicon/My_Leave_Requests/144_iPad_Retina_Web_Clip.png\"\n},\n\n```\n\n----------------------------------------\n\nTITLE: Example of Interaction Measurement in JavaScript\nDESCRIPTION: This code snippet demonstrates the structure and properties of an `InteractionMeasurement` object. It showcases the various attributes tracked during a user interaction, including IDs, events, timings, and request details. This data can be used to analyze and optimize application performance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/interaction-tracking-for-performance-measurement-b2825ea.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nInteractionMeasurement = {\n    id: uid()                   // interaction ID\n    event: \"click\",             // event which triggered interaction - default is startup interaction\n    trigger: \"Button1\",         // element ID\n    component: \"my.Component\",  // component or app identifier\n    start : 0,                  // interaction start\n    end: 0,                     // interaction end\n    navigation: 0,              // sum over all navigation times\n    roundtrip: 0,               // time from first request sent to last received response end - without gaps and ignored overlap\n    processing: 0,              // client processing time\n    duration: 0,                // interaction duration\n    requests: [],               // all requests (XHRs) that occured during the interaction\n    measurements: [],           // sap/ui/performance/Measurement measurements\n    sapStatistics: [],          // SAP Statistics for OData\n    requestTime: 0,             // sum over all requests in the interaction\n    networkTime: 0,             // request time minus server time from the sap-perf-fesrec header\n    bytesSent: 0,               // sum over all requests bytes\n    bytesReceived: 0,           // sum over all response bytes\n    requestCompression: false,  // true if all responses have been sent gzipped - default is undefined\n    busyIndication: 0           // summed BusyIndicator duration during this interaction\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fiscal Year Period with OData V2 Annotation\nDESCRIPTION: This code snippet shows how the `sap:semantics=\"fiscalyearperiod\"` annotation in OData V2 is converted to the `com.sap.vocabularies.Common.v1.IsFiscalYearPeriod` annotation with a boolean value of \"true\" in OData V4. The OData V2 annotation indicates the property is a fiscal year period, and the OData V4 annotation standardizes this.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_68\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.IsFiscalYearPeriod\" : {\"Bool\" : \"true\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Istanbul Code Coverage in OpenUI5 HTML\nDESCRIPTION: This HTML snippet configures Istanbul for code coverage in OpenUI5. It loads the `qunit-coverage-istanbul.js` script and specifies which files to include (`data-sap-ui-cover-only`) and exclude (`data-sap-ui-cover-never`) from coverage calculation. This requires a UI5 server and UI5 Middleware Code Coverage to be set up.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-20737a4.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"path/to/resources/sap/ui/qunit/qunit-coverage-istanbul.js\"\n  data-sap-ui-cover-only=\"GherkinWithOPA5/\"\n  data-sap-ui-cover-never=\"sap/ui/\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Invoking Bound Action on Collection - JavaScript (Absolute Path)\nDESCRIPTION: This snippet demonstrates how to invoke a bound action on a collection specified by an OData entity set using an absolute path in OpenUI5. It binds the 'DestroyOutdated' action to the '/LeaveRequests' entity set and invokes the action.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oModel = this.getView().getModel();\n \noModel.bindContext(\"/LeaveRequests/name.space.DestroyOutdated(...)\").invoke();\n```\n\n----------------------------------------\n\nTITLE: Setting Application Parameters in OPA5 (JavaScript)\nDESCRIPTION: This snippet illustrates how to set application parameters using `Opa5.extendConfig()`. These parameters are serialized to a URL search string and made available to the application under test.  Only primitive types are supported.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-opa5-ce4b180.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nOpa5.extendConfig({\n    appParams: {\n        \"key\": \"value\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Element Binding to View - XML\nDESCRIPTION: This XML snippet adds a 'press' event handler to the `ObjectListItem` in the list. A new `Panel` containing an `sap.m.SimpleForm` is added below the list panel. The form's controls are bound relatively to the 'products' model, allowing display and two-way editing of selected product details.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-13-element-binding-6c7c5c2.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n...\n  \t<Panel headerText=\"{i18n>panel3HeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n  \t\t<List headerText=\"{i18n>productListTitle}\" items=\"{products>/Products}\">\n  \t\t\t<items>\n  \t\t\t\t<ObjectListItem\n  \t\t\t\t\tpress=\".onItemSelected\"\n  \t\t\t\t\ttype=\"Active\"\n  \t\t\t\t\ttitle=\"{products>ProductName}\"\n  \t\t\t\t\tnumber=\"{\n  \t\t\t\t\t\tparts: [\n  \t\t\t\t\t\t\t{path: 'products>UnitPrice'},\n  \t\t\t\t\t\t\t{path: '/currencyCode'}\n  \t\t\t\t\t\t],\n  \t\t\t\t\t\ttype: 'Currency',\n  \t\t\t\t\t\tformatOptions: { showMeasure: false }\n  \t\t\t\t\t}\"\n  \t\t\t\t\tnumberUnit=\"{/currencyCode}\">\n  \t\t\t\t\t<attributes>\n  \t\t\t\t\t\t<ObjectAttribute text=\"{products>QuantityPerUnit}\"/>\n  \t\t\t\t\t\t<ObjectAttribute title=\"{i18n>stockValue}\"\n  \t\t\t\t\t\t\ttext=\"{\n  \t\t\t\t\t\t\t\tparts: [\n  \t\t\t\t\t\t\t\t\t{path: 'products>UnitPrice'},\n  \t\t\t\t\t\t\t\t\t{path: 'products>UnitsInStock'},\n  \t\t\t\t\t\t\t\t\t{path: '/currencyCode'}\n  \t\t\t\t\t\t\t\t],\n  \t\t\t\t\t\t\t\tformatter: '.formatStockValue'\n  \t\t\t\t\t\t\t}\"/>\n  \t\t\t\t\t</attributes>\n  \t\t\t\t</ObjectListItem>\n  \t\t\t</items>\n  \t\t</List>\n  \t</Panel>\n  \t<Panel id=\"productDetailsPanel\" headerText=\"{i18n>panel4HeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n  \t\t<form:SimpleForm editable=\"true\" layout=\"ColumnLayout\">\n  \t\t\t<Label text=\"{i18n>ProductID}\"/>\n  \t\t\t<Input value=\"{products>ProductID}\"/>\n  \n  \t\t\t<Label text=\"{i18n>ProductName}\"/>\n  \t\t\t<Input value=\"{products>ProductName}\"/>\n  \n  \t\t\t<Label text=\"{i18n>QuantityPerUnit}\"/>\n  \t\t\t<Input value=\"{products>QuantityPerUnit}\"/>\n  \n  \t\t\t<Label text=\"{i18n>UnitPrice}\"/>\n  \t\t\t<Input value=\"{products>UnitPrice}\"/>\n  \n  \t\t\t<Label text=\"{i18n>UnitsInStock}\"/>\n  \t\t\t<Input value=\"{products>UnitsInStock}\"/>\n  \n  \t\t\t<Label text=\"{i18n>Discontinued}\"/>\n  \t\t\t<CheckBox selected=\"{products>Discontinued}\"/>\n  \t\t</form:SimpleForm>\n  \t</Panel>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Extending sap.m.Input with custom rendering (HighlightInput)\nDESCRIPTION: This code snippet extends the sap.m.Input control to create a new control called HighlightInput. The renderInnerAttributes method of the InputRenderer is overwritten to add a yellow background color to the input field. This allows customizing the appearance of the input field.  No specific dependencies are needed beyond OpenUI5 libraries.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/extending-input-rendering-bcee26a.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsap.m.Input.extend(\"HighlightInput\", {// call the new Control type \"HighlightInput\" \n                                      // and let it inherit from sap.m.Input\n\n\t\t\trenderer: {\n\t\t\t\t// note that no render() function is given here. The Input's render() function is used. \n\t\t\t\t// But one function is overwritten:\n\n\t\t\t\twriteInnerAttributes : function(oRm, oInput) {\n\t\t\t\t\tsap.m.InputRenderer.writeInnerAttributes.apply(this, arguments); // the default method should be called\n\t\t\t\t\t                                                                 // this will make sure that all default input attributes will be there\n\n\t\t\t\t\toRm.addStyle('background-color', '#ffff00');  // this change could also be done with plain CSS. \n\t\t\t\t\t                                              // But you get the idea...\n\t\t\t\t\t  }\n\t\t\t\t  }\n\t\t\t  });\n```\n\n----------------------------------------\n\nTITLE: Trigger Telephone Application using URLHelper (JavaScript)\nDESCRIPTION: This code snippet shows how to use the `triggerTel` method of the `sap.m.URLHelper` to trigger the native telephone application on a mobile device. The telephone number is optional.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/url-helper-4f1c107.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.m.URLHelper.triggerTel( [Telephone Number] ); //Telephone number is optional\n```\n\n----------------------------------------\n\nTITLE: Initializing DateTime type with pattern\nDESCRIPTION: Initializes the `DateTime` type with a JavaScript Date object and a specific output pattern \"yyyy/MM/dd HH:mm:ss\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-datetime-91f3070.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The source value is given as JavaScript Date object. The used output pattern is \"yyyy/MM/dd HH:mm:ss\": e.g. 2011/04/11 09:11:27\noType = new TypeDateTime({pattern: \"yyyy/MM/dd HH:mm:ss\"}); \n```\n\n----------------------------------------\n\nTITLE: CSS Math Function Escaping in LESS with min and calc\nDESCRIPTION: This code snippet demonstrates how to correctly escape the `min` and `calc` CSS math functions within LESS files. This ensures the CSS is processed correctly and prevents unexpected results.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/control-development-guidelines-theming-css-5e08ff9.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.sapUiMyControl {\n    height: ~\"min(48rem, calc(80vh - 5rem))\";\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mixing of Runtime and Metadata in Binding\nDESCRIPTION: This binding example demonstrates an incorrect way to mix runtime and meta data within a single binding. It highlights that direct mixing will not work as expected because runtime data is not available during XML templating.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-bindings-604b1eb.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{= ${runtime>value} > ${meta>threshold} }\n```\n\n----------------------------------------\n\nTITLE: Defining manifest.json Version\nDESCRIPTION: This JSON snippet demonstrates how to define the manifest version using the `_version` property in the `manifest.json` file.  This value is crucial for indicating the manifest schema version.  The snippet shows the version for V5 which corresponds to OpenUI5 version 1.4.0.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/migration-information-for-upgrading-the-manifest-file-a110f76.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"_version\": \"1.4.0\",\n    \"sap.app\": {\n        ...\n```\n\n----------------------------------------\n\nTITLE: Loading Module with sap.ui.define - JavaScript\nDESCRIPTION: This code demonstrates the recommended way to load a module using `sap.ui.define` in OpenUI5. It defines a controller by extending `sap/ui/core/mvc/Controller`. This ensures compatibility with the OpenUI5 module loading mechanism.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Best practice of loading a module delivered by OpenUI5\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\"\n], (Controller) => {\n    \"use strict\";\n    return Controller.extend(\"my.app.controller.MyController\", {});\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Associations in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to access an association of a control using the `get<Association>()` method in OpenUI5. The example shows how to retrieve the `labelFor` association, which returns the ID of the associated control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/writing-a-control-renderer-91f3939.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n    \n    // var sAssociatedControlId = oControl.get<Association>();\n    // for example labelFor-association\n    var sAssociatedControlId = oControl.getLabelFor();\n    \n```\n\n----------------------------------------\n\nTITLE: Labeling with Label Element in OpenUI5 (XML)\nDESCRIPTION: This example demonstrates how to use the `Label` element with the `labelFor` attribute in OpenUI5 XML views to associate a label with a specific control.  The `labelFor` attribute specifies the ID of the control that the label is for.  This method supports single ID references.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/aria-labeling-f38c21c.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Label text=\"Product price\" required=\"true\" <b>labelFor=\"productPriceInput\"</b>/>\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in sap.m.Text Property\nDESCRIPTION: This snippet illustrates how to escape special characters within the `text` property of a `sap.m.Text` control in an XML view. XML entities such as `&lt;` and `&gt;` are used to represent `<`, and `>` respectively.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/control-properties-and-associations-in-xml-views-5ee3be4.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Text text=\"&lt;div&gt;My HTML Text&lt;/div&gt;\"/>\n```\n\n----------------------------------------\n\nTITLE: Component Extension in Component.js - JavaScript\nDESCRIPTION: This JavaScript code snippet illustrates how component extension is defined in the `Component.js` file.  It shows how a component (`cust.emp.myleaverequests.Component`) extends another component (`hcm.emp.myleaverequests.Component`).  This relationship needs to be reflected in the `manifest.json` file during migration.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n    \n    hcm.emp.myleaverequests.Component.extend(\"cust.emp.myleaverequests.Component\", {\n    \n```\n\n----------------------------------------\n\nTITLE: OData Error Response Example\nDESCRIPTION: Illustrates an example of an OData error response containing a message, target, additional targets, and ContentID. The `Content-ID` is used to assign the error message to a specific request within a change set.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/server-messages-in-the-odata-v4-model-fbe1cb5.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": {\n        \"message\": \"Value must be greater than 0\",\n        \"target\": \"Quantity\",\n        \"@com.sap.vocabularies.Common.v1.additionalTargets\": [\"ProductID\"],\n        \"@Org.OData.Core.V1.ContentID\":\"0.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Avoid Using Timeouts in OpenUI5\nDESCRIPTION: This example demonstrates how to avoid using `setTimeout` with `jQuery.ajax` by using the `.done` callback instead.  This approach ensures the function `fnProcessResults` is executed only after the AJAX request is complete, avoiding potential timing issues.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\njQuery.ajax(\"someData.json\").done(fnProcessResults);\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.getObject with sap/base/util/ObjectPath in JavaScript\nDESCRIPTION: This snippet demonstrates how to replace jQuery.sap.getObject with the sap/base/util/ObjectPath.get method. If the object path doesn't exist, the method no longer creates it automatically; ObjectPath.create must be used separately to create the path.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nObjectPath.get(\"some.object.path\", \"someProperty\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nObjectPath.create(\"some.object.path\", window.myLib);\n```\n\n----------------------------------------\n\nTITLE: Creating a package.json file with npm\nDESCRIPTION: This command creates a `package.json` file in the current directory. The `package.json` file is used by npm to manage project dependencies and other metadata. The `--yes` flag automatically accepts the default values for all prompts.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-automation-ae44824.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm init --yes\n```\n\n----------------------------------------\n\nTITLE: Initializing DateTime with GMT/UTC timezone source pattern\nDESCRIPTION: Initializes the `DateTime` type with a source pattern including GMT/UTC timezone format \"dd.MM.yyyy HH:mm:ss z\". The output pattern depends on the locale settings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-datetime-91f3070.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The source value is given as string in \"dd.MM.yyyy HH:mm:ss z\" format (timezone is currently defined as e.g. \"GMT+02:00\", \"UTC+02:00\", \"UT+02:00\" or \"Z\" (shortcut for \"UTC+00:00\")).\n// The used output pattern depends on the locale settings (default).\noType = new TypeDateTime({source: {pattern: \"dd.MM.yyyy HH:mm:ss z\"}});\n```\n\n----------------------------------------\n\nTITLE: Resource Definition in Component.js - JavaScript\nDESCRIPTION: This snippet from a `Component.js` file demonstrates how JavaScript and CSS resources are included within an OpenUI5 application. These includes define the style and behavior of the application. This code needs to be migrated to the `manifest.json`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n    \"includes\": [\"css/shopStyles.css\", \"myfile.js\"],\n```\n\n----------------------------------------\n\nTITLE: ViewSettingsDialog Confirm Handler - JavaScript\nDESCRIPTION: This snippet defines the confirm handler within the ViewSettingsDialog initialization.  It captures the selected sorting parameters and updates the router arguments. Crucially, it deletes the 'showDialog' parameter to prevent the dialog from reopening after confirmation. Finally, it navigates to the 'employeeOverview' route without history.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-make-dialogs-bookmarkable-5cc3147.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconfirm: function (oEvent) {\n\t\t\t\t\tvar oSortItem = oEvent.getParameter(\"sortItem\");\n\t\t\t\t\tthis._oRouterArgs[\"?query\"].sortField = oSortItem.getKey();\n\t\t\t\t\tthis._oRouterArgs[\"?query\"].sortDescending = oEvent.getParameter(\"sortDescending\");\n\t\t\t\t\tdelete this._oRouterArgs[\"?query\"].showDialog;\n\t\t\t\t\toRouter.navTo(\"employeeOverview\", this._oRouterArgs, true /*without history*/);\n\t\t\t\t}.bind(this)\n```\n\n----------------------------------------\n\nTITLE: Defining Resources in Component Metadata (JavaScript)\nDESCRIPTION: This JavaScript code snippet illustrates how resources (includes) are defined in the component metadata. It uses an array to list the included JavaScript and CSS files.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/migrating-from-component-metadata-to-manifest-e282db2.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\"includes\": [\"script.js\", \"style.css\"]\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Rule in UI5\nDESCRIPTION: This JavaScript code shows an example of an asynchronous rule for the OpenUI5 Support Assistant. It utilizes `setTimeout` to simulate an asynchronous operation and then calls the `fnResolve` function to signal the completion of the rule check. The `async` property of the rule must be set to `true` for this to work.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/create-a-rule-c24569d.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction(issueManager, oCoreFacade, oScope, fnResolve) {\n  // Some async operation\n  setTimeout(function () {\n    …\n    fnResolve();\n  }, 2000);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Usages in manifest.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to define a reusable component in the `componentUsages` section of a parent component's `manifest.json` file. The configuration includes the component's name, settings, component data, and lazy loading property. This allows the parent component to load and instantiate the reusable component.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enabling-routing-in-nested-components-fb19f50.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"sap.ui5\": {\n        \"componentUsages\": {\n            \"myreuse\": {\n                \"name\": \"reuse.component\",\n                \"settings\": {},\n                \"componentData\": {},\n                \"lazy\": false\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XML View: Employee First Name\nDESCRIPTION: Example of binding a Text control to the Employee model's FirstName property within a block view.  This demonstrates a simple data binding example using the {Employee>FirstName} syntax.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-blocks-4527729.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Text text=\"{Employee>FirstName}\"></Text>\n```\n\n----------------------------------------\n\nTITLE: Getting a Child View by ID in OpenUI5 using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve a child view within a container view using the `byId()` method.  `oView` represents the container view instance.  The method returns the child view instance corresponding to the specified ID.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/support-for-unique-ids-91f28be.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\nvar oButtonView1 = oView.byId(\"ButtonView1\");\n...\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:filter-restriction to FilterExpressionRestrictions\nDESCRIPTION: This snippet shows the transformation of `sap:filter-restriction` to `FilterExpressionRestrictions` at the EntitySet level. It uses a PropertyPath to identify the property and an EnumMember to define the allowed filter expression type (e.g., MultiValue).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_50\n\nLANGUAGE: xml\nCODE:\n```\nsap:filter-restriction=\"multi-value\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.FilterExpressionRestrictions\":\n[{ \"Property\" : { \"PropertyPath\" : \"BusinessPartnerID\" },\n\"AllowedExpressions\" : { \"EnumMember\":\n\"com.sap.vocabularies.Common.v1.FilterExpressionType/MultiValue\" } }]\n```\n\n----------------------------------------\n\nTITLE: Complex Property Binding in XML\nDESCRIPTION: This XML snippet illustrates complex property binding, including specifying the binding path and binding mode (OneWay). The `value` property of the `Input` control is bound to `/company/name` with a `OneWay` binding mode.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <Input value=\"{path: '/company/name', mode: 'OneWay'}\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Unsupported Template Literal Dependency - JavaScript\nDESCRIPTION: This code presents an unsupported usage of a template literal with an expression as a dependency in `sap.ui.define`. OpenUI5 does not support dynamic dependency paths constructed using template literals with expressions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Do NOT use template literals with one or more\n// expressions inside an sap.ui.define or sap.ui.require call.\nconst sLibName = `ui/core`;\n \nsap.ui.define([\n  `sap/${sLibName}/mvc/Controller`\n], (Controller) => {\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching DOM Event Handlers - Good Example (attachBrowserEvent)\nDESCRIPTION: This example shows how to attach a DOM event listener to an OpenUI5 control using `attachBrowserEvent`. This is a preferred method compared to directly attaching event listeners to the DOM, as it allows OpenUI5 to manage the event lifecycle.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\noControl.attachBrowserEvent(\"mousemove\", function() {\n\t// do something\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.endsWithIgnoreCase with String.prototype.endsWith (Native)\nDESCRIPTION: This code snippet demonstrates how to replace `jQuery.sap.endsWithIgnoreCase` by converting both strings to lowercase before using the native `String.prototype.endsWith` method. This performs a case-insensitive comparison.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nsMyString.toLowerCase().endsWith(sMyOtherString.toLowerCase())\n```\n\n----------------------------------------\n\nTITLE: Test With Locale (JS)\nDESCRIPTION: This snippet implements dependency injection by passing the locale settings to the formatter's constructor. The test ensures that the formatter returns the time in the 'en-US' locale when the input is today's date.  It imports Locale and UI5Date to create test inputs.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/bulletinboard/model/DateFormatter\",\n\t\"sap/ui/core/Locale\",\n\t\"sap/ui/core/date/UI5Date\"\n], function(DateFormatter, Locale, UI5Date) {\n\tQUnit.module(\"DateFormatter\");\n\tQUnit.test(\"Should return empty string if no date is given\", function(assert) {\n\t\tvar oFormatter = new DateFormatter({\n\t\t\tlocale : new Locale(\"en-US\")\n\t\t});\n\t\tvar sFormattedDate = oFormatter.format(null);\n\t\tassert.strictEqual(sFormattedDate, \"\");\n\t});\n\tQUnit.test(\"Should return time if date from today\", function(assert) {\n\t\tvar oFormatter = new DateFormatter({\n\t\t\tlocale : new Locale(\"en-US\")\n\t\t});\n\t\tvar oDate = UI5Date.getInstance(2015, 2, 14, 12, 5, 0, 0);\n\t\tvar sFormattedDate = oFormatter.format(oDate);\n\t\tassert.strictEqual(sFormattedDate, \"12:05 PM\");\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Renderer Class Name Reference - JavaScript\nDESCRIPTION: This demonstrates how to reference an existing renderer class by its name. This approach reuses the rendering logic defined in another renderer class without modifications.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/renderer-object-c9ab345.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nrenderer: \"sap.m.ButtonRenderer\"\n```\n\n----------------------------------------\n\nTITLE: Handling 'sapnext' Event in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to handle the OpenUI5-specific 'sapnext' event. The handler function, named 'onsapnext', is triggered when the user presses an arrow key (down, right, or left in RTL mode) to navigate to the next item. The function receives an event object ('events') which contains information about the event, and it is intended to perform the navigation to the next item.  This is considered an internal event and should only be called by OpenUI5 core.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/event-handler-methods-bdf3e98.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nonsapnext: function(events) {\n   // navigate to next item, an arrow key was pressed\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.resources.isBundle with instanceof (Native)\nDESCRIPTION: This snippet shows replacing `jQuery.sap.resources.isBundle` with the `instanceof` operator. The `instanceof` operator tests to see if the prototype property of a constructor appears anywhere in the prototype chain of an object.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\ninstanceof\n```\n\n----------------------------------------\n\nTITLE: Adding E-mail Properties to i18n Resource Bundle (INI)\nDESCRIPTION: This code snippet shows how to add E-mail related properties to the `i18n.properties` and `i18n_de.properties` files, which serve as the resource bundles for internationalization. These properties define the text for sending an email, the email subject, and the email body.  The `mailSubject` property includes a placeholder `{0}` to insert the recipient's first name.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-9-formatting-values-6fdf0ac.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n…\n# Screen titles\npanel1HeaderText=Data Binding Basics \npanel2HeaderText=Address Details\n\n# E-mail\nsendEmail=Send Mail\nmailSubject=Hi {0}!\nmailBody=How are you?\n```\n\nLANGUAGE: ini\nCODE:\n```\n…\n# Screen titles\npanel1HeaderText=Data Binding Grundlagen\npanel2HeaderText=Adressdetails\n\n# E-mail\nsendEmail=E-mail versenden\nmailSubject=Hallo {0}!\nmailBody=Wie geht es dir?\n```\n\n----------------------------------------\n\nTITLE: Setting Root View in manifest.json (OpenUI5)\nDESCRIPTION: This snippet configures the `rootView` property within `manifest.json` to point to the newly created `App.view.xml`. Also set async to false and config to fullWidth.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-creating-an-empty-flexible-column-layout-bf38e4d.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"_version\": \"1.38.0\",\n\t\"sap.app\": {\n\t\t\"id\": \"sap.ui.demo.fcl\",\n\t\t\"type\": \"application\",\n\t\t\"applicationVersion\": {\n\t\t\t\"version\": \"1.0.0\"\n\t\t}\n\t},\n\t\"sap.ui5\": {\n\t\t\"rootView\": {\n\t\t\t\"viewName\": \"sap.ui.demo.fcl.view.App\",\n\t\t\t\"type\": \"XML\",\n\t\t\t\"async\": false,\n\t\t\"id\": \"fcl\"\n\t\t},\n\t\t\"dependencies\": {\n\t\t\t\"minUI5Version\": \"1.98.0\",\n\t\t\t\"libs\": {\n\t\t\t\t\"sap.f\": {},\n\t\t\t\t\"sap.ui.core\": {}\n\t\t\t}\n\t\t},\n\t\t\"config\": {\n\t\t\t\"fullWidth\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying DateTimeWithTimezone in OData V2 - XML View\nDESCRIPTION: Illustrates how to use `sap.ui.model.odata.type.DateTimeWithTimezone` in an XML view with OData V2. Similar to the OData V4 example, it requires an `Edm.DateTimeOffset` property ('/v2/DateTimeOffset') and a string property ('TimezoneID') for the time zone ID.  The parameters `useUndefinedIfUnresolved: true` should be set to handle unresolved paths.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- '/v2/DateTimeOffset' refers to an Edm.DateTimeOffset property -->\n<!-- 'TimezoneID' refers to an Edm.String property holding the IANA time zone ID -->\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{DateTimeWithTimezone: 'sap/ui/model/odata/type/DateTimeWithTimezone'}\">\n    ...\n    <Text text=\"{\n        parts: [\n            {path: '/v2/DateTimeOffset', parameters: {useUndefinedIfUnresolved: true}},\n            {path: 'TimezoneID', parameters: {useUndefinedIfUnresolved: true}}\n        ],\n        type: 'DateTimeWithTimezone'\n     }\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Library for Utilities - JavaScript\nDESCRIPTION: Configures a test library within OPA5 to enable the use of utility functions provided by the library.  These utilities can simplify interactions with complex controls. The provided configuration makes the utility functions accessible within page objects.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-libraries-for-opa5-a88a5e5.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nOpa5.extendConfig({\n    testLibs: {\n        myAwesomeTestLibrary: {...}\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Step Definition with OPA5 Assertion\nDESCRIPTION: This JavaScript code shows how to use QUnit assertions within step definitions when using OPA5. OPA5 makes the assertion object available via `Opa5.assert`. This example asserts that the state of `this.myWombat` is 'orbit'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.register(/^My wombat is currently in orbit$/i, function() {\n  Opa5.assert.strictEqual(this.myWombat.state, \"orbit\");\n});\n```\n\n----------------------------------------\n\nTITLE: Normalize Email using URLHelper (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `normalizeEmail` method of `sap.m.URLHelper` to get the URI scheme back as string without redirecting.  All parameters are optional.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/url-helper-4f1c107.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.m.URLHelper.normalizeEmail( [Destination Email], [Subject], [Default Message Text], [CC], [BCC] );\n```\n\n----------------------------------------\n\nTITLE: Checking Input Controls for Parent Elements in UI5\nDESCRIPTION: This JavaScript check function iterates through Input controls that are part of the public aggregation and checks if they have a parent element. If an Input control lacks a parent, an issue is added to the issue manager with details about the missing parent.  It requires access to the `issueManager`, `oCoreFacade`, and `oScope` parameters provided by the Support Assistant.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/create-a-rule-c24569d.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction(issueManager, oCoreFacade, oScope) {\n    var mElements = oScope.getElements({\n        type: \"sap.m.Input\",\n        public: true,\n        cloned: false\n    });\n\n    for (var n in mElements) {\n        var oElement = mElements[n];\n\n        if (!oElement.getParent()) {\n            issueManager.addIssue({\n                severity: Severity.Medium, // Severity enum is taken from \"sap/ui/support/library\" import\n                details: \"The element \" + oElement.getId() + \" has no parent.\",\n                context: {\n                    id: oElement.getId()\n                }\n            });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Dummy Controller in OpenUI5 Fragment\nDESCRIPTION: This code snippet demonstrates how to define a simple JavaScript object (oDummyController) to serve as a controller for an OpenUI5 fragment. The object contains a doSomething function that will be called when the button in the fragment is pushed. The fragment is loaded with the dummy controller provided.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-other-objects-instead-of-controllers-c24ea6d.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar oDummyController = { \n\tdoSomething: function() { \n\t\t// do whatever should happen when the button in the fragment is pushed...\n\t} \n};\n\n// this specific fragment needs a controller and gets a dummy controller here. \nsap.ui.require([\"sap/ui/core/Fragment\"], function(Fragment){\n    Fragment.load({\n\t\tname: \"my.useful.UiPartZ\",\n        controller: oDummyController\n    }).then(function(oButton){\n        // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Bootstrap Module for Component Container - HTML\nDESCRIPTION: This snippet showcases an alternative approach using a custom bootstrap module defined in HTML. Instead of directly using `ComponentSupport`, a custom module `my/app/bootstrap` is specified in the `data-sap-ui-on-init` attribute. This allows for more control over the component initialization process.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-api-for-initial-components-82a0fce.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- .... -->\n    <script id=\"sap-ui-bootstrap\"\n      src=\"resources/sap-ui-core.js\"\n      data-sap-ui-on-init=\"module:my/app/bootstrap\"\n      data-sap-ui-resource-roots='{ \"my.app\": \"./\" }'\n      data-sap-ui-async=\"true\"\n      data-...=\"...\">\n    </script>\n  </head>\n  <body id=\"content\" class=\"sapUiBody sapUiSizeCompact\" role=\"application\">\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Placing the Square Control (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to create an instance of the custom 'Square' control with specified text and size properties. It then places the control within the HTML element with the ID 'content' using the 'placeAt' method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/creating-a-simple-square-control-9a6100b.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Square\" required from \"my/Square\"\nvar myControl = new Square({text:\"Hello\", size: \"100px\"});\nmyControl.placeAt(\"content\");\n```\n\n----------------------------------------\n\nTITLE: Searching for Disabled Controls OPA5 (JavaScript)\nDESCRIPTION: This snippet illustrates how to search for controls by their enabled state using the `enabled` property in OPA5.  When `enabled` is set to `false`, it matches both enabled and disabled controls. The `autoWait` property influences matching behavior when no actions are defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nthis.waitFor({\n    controlType: \"sap.m.Button\",\n    enabled: false,\n    autoWait: true,\n    success: function () {...}\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Fast Navigation Group (JavaScript)\nDESCRIPTION: This code snippet shows how to explicitly set a control as a fast navigation group using JavaScript. It uses the `data` method to set the `sap-ui-fastnavgroup` property to `true` and writes this into the DOM. This will ensure that the control is treated as a fast navigation group.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/fast-navigation-d23e2cf.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\noControl.data(\"sap-ui-fastnavgroup\", \"true\", true/*Write into DOM*/);\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:creatable and sap:updatable to Computed\nDESCRIPTION: This snippet shows the transformation of `sap:creatable = \"false\"` and `sap:updatable = \"false\"` to `Org.OData.Core.V1.Computed`: { \"Bool\" : \"true\"}. This indicates that the property is computed and cannot be set or updated.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_45\n\nLANGUAGE: xml\nCODE:\n```\nsap:creatable = \"false\"\nsap:updatable = \"false\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Core.V1.Computed\": { \"Bool\" : \"true\"}\n```\n\n----------------------------------------\n\nTITLE: Filtering with 'any' Operator (No Condition) - JavaScript\nDESCRIPTION: This example demonstrates how to use the 'any' operator without a filter condition. It retrieves all teams with at least one employee assigned (collection not empty).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/filtering-5338bd1.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\noTeamsBinding.filter(\n    new sap.ui.model.Filter({\n        path : \"TEAM_2_EMPLOYEES\",\n        operator : sap.ui.model.FilterOperator.Any\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Renderer Object with Render Function - JavaScript\nDESCRIPTION: This example showcases the expanded form of the simple renderer. It defines a `renderer` object containing a `render` method. This is equivalent to the previous, more concise example.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/renderer-object-c9ab345.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrenderer: {\n    render: function(oRm, oControl) {\n        oRm.openStart(\"div\", oControl).openEnd().text(oControl.getText()).close(\"div\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 CLI as Dev Dependency\nDESCRIPTION: This shell command installs the UI5 CLI as a development dependency for the project.  This ensures the project has the UI5 tooling available. This command should be executed from the app root folder.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-typescript-c20489e.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @ui5/cli\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Website from InputListItem OpenUI5 JavaScript\nDESCRIPTION: This snippet creates an OpenUI5 sap.m.InputListItem containing a sap.m.Button.  When the button is pressed, it redirects the user to the person's website using sap.m.URLHelper.redirect(). The button's text is set to the person's website address.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/examples-for-triggering-telephone-text-and-e-mail-applications-021ac23.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew sap.m.InputListItem({\n    label : \"Website\",\n    content : new sap.m.Button({\n        text : person.website,\n        press : function() {\n            sap.m.URLHelper.redirect(person.website);\n        }\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.isArray with Array.isArray (Native)\nDESCRIPTION: This example demonstrates replacing `jQuery.isArray` with the native `Array.isArray` method.  It returns a boolean indicating whether the argument is an array.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nArray.isArray\n```\n\n----------------------------------------\n\nTITLE: Non-Namespaced CSS Selector (Bad)\nDESCRIPTION: This CSS snippet exemplifies the incorrect way of creating CSS selectors in shared environments like SAP Fiori launchpad. Custom selectors that are not namespaced could cause style clashes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/css-styling-issues-9d87f92.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.title {\n\tfont-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Tearing down a UIComponent in OPA5\nDESCRIPTION: This JavaScript snippet demonstrates how to teardown an existing UIComponent before starting a new OPA5 test for a different component. This prevents conflicts and ensures proper test execution.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/getting-started-with-opa5-22f175e.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Opa5\" required from \"sap/ui/test/Opa5\"\nnew Opa5().iTeardownMyApp();\n// or\nnew Opa5().iTeardownMyUIComponent();\n```\n\n----------------------------------------\n\nTITLE: Input Control in XML View for List-Detail\nDESCRIPTION: This XML view defines an input control with its value bound to the `name` property.  This is used in conjunction with `bindElement` to create the context for the binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/context-binding-element-binding-91f05e8.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\">\n    <Input id=\"companyInput\" value=\"{name}\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Consuming Custom Control in CustomListItem in OpenUI5\nDESCRIPTION: This JavaScript code shows how to instantiate a `sap.m.CustomListItem` and add the previously defined `MyListItemContent` control as a content aggregation. Requires `sap/m/CustomListItem`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/custom-list-item-3e426f1.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// \"CustomListItem\" required from \"sap/m/CustomListItem\"\nvar oCustomListItem = new CustomListItem({content: [new MyListItemContent({\n    //usual control setup\n})]});\n```\n\n----------------------------------------\n\nTITLE: Using Public APIs - Good Example\nDESCRIPTION: This example demonstrates the correct way to access a control's text property using the public `getText()` method. Public APIs are guaranteed to be stable and supported, ensuring compatibility across OpenUI5 versions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar sText = oControl.getText();\n```\n\n----------------------------------------\n\nTITLE: Normalize SMS Number using URLHelper (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `normalizeSms` method of `sap.m.URLHelper` to get the URI scheme back as string without redirecting. The telephone number is optional.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/url-helper-4f1c107.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.m.URLHelper.normalizeSms( [Telephone Number] );\n```\n\n----------------------------------------\n\nTITLE: Conditional Visibility using Regular Expression - XML\nDESCRIPTION: This XML snippet sets the visibility of a control based on whether the rating contains 'vip' (case-insensitive). It uses a regular expression to perform the case-insensitive search. The expression uses embedded binding syntax.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Set to visible if the rating contains VIP, ignoring the case. -->\nvisible={=RegExp('vip', 'i').test(%{/rating})}\n```\n\n----------------------------------------\n\nTITLE: Trigger Text Messaging Application using URLHelper (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `triggerSms` method of the `sap.m.URLHelper` to trigger the native SMS application on a mobile device. The telephone number is optional.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/url-helper-4f1c107.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.m.URLHelper.triggerSms( [Telephone Number] ); //Telephone number is optional\n```\n\n----------------------------------------\n\nTITLE: Replacing isInitialized with Core.ready() in UI5 JavaScript\nDESCRIPTION: This snippet demonstrates replacing the deprecated `isInitialized` method with `Core.ready()` to check if the Core is initialized in SAP UI5. It sets a flag to true when the Core is ready.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Nevertheless, if you still have a need for isInitialized, maybe use the following\nsap.ui.require([\"sap/ui/core/Core\"], async function(Core) {\n    let isInitialized = false;\n    Core.ready(() => {\n        isInitialized = true;\n    });\n    if (isInitialized) {\n        ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Container Control in OpenUI5\nDESCRIPTION: This code demonstrates how to instantiate and use the `ColorBoxContainer` control. It creates a button and an input field, then adds them as content to the container. The `boxColor` property is set to \"#ff7700\", and the container is placed in the HTML element with the ID 'content'. Requires `sap.m.Button` and `sap.m.Input` modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/creating-a-simple-container-control-39d2564.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar oButton = new sap.m.Button({text:'Hello World'});\nvar oInput = new sap.m.Input({placeholder:'edit text here'});\n\nvar container = new ColorBoxContainer({\n    boxColor: \"#ff7700\",\n    content:[\n        oButton,\n        oInput\n    ]});\ncontainer.placeAt('content');\n```\n\n----------------------------------------\n\nTITLE: Using Currency Data Type in XML View\nDESCRIPTION: This XML snippet defines an ObjectListItem within a List, binding the ExtendedPrice from the 'invoice' model and the currency from the 'view' model to the 'number' property.  It uses the sap.ui.model.type.Currency data type to format the price, and specifies format options such as hiding the currency code in the number and displaying it separately in the numberUnit property. The core:require attribute imports the Currency type.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-20-data-types-typescript-0dad01a.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <List\n        headerText=\"{i18n>invoiceListTitle}\"\n        class=\"sapUiResponsiveMargin\"\n        width=\"auto\"\n        items=\"{invoice>/Invoices}\">\n        <items>\n            <ObjectListItem\n                core:require=\"{\n                    Currency: 'sap/ui/model/type/Currency'\n                }\"\n                title=\"{invoice>Quantity} x {invoice>ProductName}\"\n                number=\"{\n                    parts: [\n                        'invoice>ExtendedPrice',\n                        'view>/currency'\n                    ],\n                    type: 'Currency',\n                    formatOptions: {\n                        showMeasure: false\n                    }\n                }\"\n                numberUnit=\"{view>/currency}\"/>\n        </items>\n    </List>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Adding Button as Swipe Content in OpenUI5 List\nDESCRIPTION: This code snippet demonstrates how to add a button as `swipeContent` to an OpenUI5 list. The button is displayed when a user swipes the list item and can be used to trigger an action, such as deleting the item. It uses the sap.m.List, sap.m.StandardListItem and sap.m.Button controls.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/aggregation-d4e69ad.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<List\n        headerText=\"Products\"\n        items=\"{/ProductCollection}\" >\n        <StandardListItem\n          title=\"{Name}\"\n          description=\"{ProductId}\"\n          icon=\"{ProductPicUrl}\" \n          iconDensityAware=\"false\"\n          iconInset=\"false\" />\n        <swipeContent>\n          <Button\n            text=\"Delete Item\"\n            type=\"Reject\"\n            press=\"handleReject\" />\n        </swipeContent>\n      </List>\n```\n\n----------------------------------------\n\nTITLE: FlexBox HTML Structure\nDESCRIPTION: This HTML snippet shows the resulting HTML structure of a FlexBox with two buttons. Each button is wrapped in a div with the class 'sapMFlexItem', and the FlexBox itself has the class 'sapMFlexBox'. The actual button elements are also present.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/getting-started-with-flexbox-988d2c7.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"sapMFlexBox\">\n\n       <div class=\"sapMFlexItem\">\n\n              <button id=\"__button1\">Button 1</button>\n\n       </div>\n\n       <div class=\"sapMFlexItem\">\n              \n              <button id=\"__button2\">Button 2</button>\n\n       </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Replacing synchronous sap.ui.view with asynchronous View.create - JavaScript\nDESCRIPTION: This snippet demonstrates replacing the synchronous `sap.ui.view` with the asynchronous `View.create` method. It loads the `sap/ui/core/mvc/View` module and then uses the `create` method to instantiate the view. The `then` method handles the created view instance. The type and viewName parameters are passed to the create method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-factories-replacement-491bd9c.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oView = sap.ui.view({\n    viewName: \"my.View\",\n    type: \"XML\"\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/mvc/View\"], (View) => {\n    View.create({ \n        viewName: \"my.View\",\n        type: \"XML\"\n    }).then((oView) => {/*...*/});\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying App.view.xml: Adding the List View\nDESCRIPTION: This XML view modifies the main application view (`App.view.xml`) to include the list view created in the previous step.  The `List.view.xml` is embedded within the `FlexibleColumnLayout`'s `beginColumnPages` aggregation, placing it in the first column of the layout.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-using-dynamic-page-for-the-list-view-0830bce.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tdisplayBlock=\"true\"\n\theight=\"100%\"\n\txmlns=\"sap.f\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<FlexibleColumnLayout id=\"flexibleColumnLayout\" backgroundDesign=\"Solid\">\n\t\t<beginColumnPages>\n\t\t\t<mvc:XMLView id=\"beginView\" viewName=\"sap.ui.demo.fcl.view.List\"/>\n\t\t</beginColumnPages>\n\t</FlexibleColumnLayout>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Defining URL with OData V2 Annotation\nDESCRIPTION: This code snippet illustrates the conversion of the `sap:semantics = url` annotation in OData V2 to the `Org.OData.Core.V1.IsURL` annotation with a boolean value of \"true\" in OData V4. The OData V2 annotation indicates that the property contains a URL, and the OData V4 annotation expresses the same meaning using a standard vocabulary term.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_64\n\nLANGUAGE: JSON\nCODE:\n```\n\"Org.OData.Core.V1.IsURL\" : { \"Bool\" : \"true\" }\n```\n\n----------------------------------------\n\nTITLE: JavaScript Step Definition with Regular Expression\nDESCRIPTION: This JavaScript code demonstrates how to define step definitions that use regular expressions to capture arguments from Gherkin steps. The capturing groups in the regular expression are passed as string parameters to the step definition function. Requires the 'this.register' function to be available in the context.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.register(\n  /^I click on the life saving button (\\d+) times?$/i,\n  function(sNumTimes) {}\n);\n\nthis.register(\n  /^I see (.*?) at the end of the list of saved lemmings$/i,\n  function(sName) {}\n);\n```\n\n----------------------------------------\n\nTITLE: ProductRating Renderer - JavaScript\nDESCRIPTION: This JavaScript snippet defines the renderer for the custom ProductRating control. It retrieves the tooltip, opens a div, applies a CSS class, sets the title attribute if a tooltip exists, and then renders the internal controls: rating indicator, label, and button. It uses the RenderManager to output the HTML structure for the control. Requires RenderManager and ProductRating.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-33-custom-controls-typescript-3cc020e.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n\trenderer = {  \n\t\tapiVersion: 4,\n\t\trender: (rm: RenderManager, control: ProductRating) => {\n\t\t\tconst tooltip = control.getTooltip_AsString();\n\t\t\trm.openStart(\"div\", control);\n\t\t\trm.class(\"myAppDemoWTProductRating\");\n\t\t\tif (tooltip) {\n\t\t\t\trm.attr(\"title\", tooltip);\n\t\t\t}\n\t\t\trm.openEnd();\n\t\t\trm.renderControl(control.getAggregation(\"_rating\") as Control);\n\t\t\trm.renderControl(control.getAggregation(\"_label\") as Control);\n\t\t\trm.renderControl(control.getAggregation(\"_button\") as Control);\n\t\t\trm.close(\"div\");\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Disabling autoWait for a specific waitFor statement\nDESCRIPTION: This snippet shows how to disable `autoWait` for a specific `waitFor` statement when you need to explicitly check for a blocking condition, such as a control being busy.  The `autoWait` property is set to false, allowing explicit checks to be performed without automatic waiting.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-the-autowait-parameter-fb487ef.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// and then in a special waitFor case which requires a control to be non-interactable\noOpa.waitFor({\n    autoWait: false,\n    id: \"myControlID\",\n    success: function (oControl) {\n        // now you can explicitly check for some blocking condition\n        Opa5.assert.ok(oControl.getBusy(), \"My control was busy\");\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing DateTime with default source and specific pattern\nDESCRIPTION: Initializes the `DateTime` type with a default source pattern (locale-dependent) and a specific output pattern \"hh-mm-ss '/' yy-MM-dd\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-datetime-91f3070.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The source value is given as string. The used input pattern depends on the locale settings (default). The used output pattern is \"hh-mm-ss '/' yy-MM-dd\": e.g. 06-48-48 / 43-08-22\noType = new TypeDateTime({source: {}, pattern: \"hh-mm-ss '/' yy-MM-dd\"}); \n```\n\n----------------------------------------\n\nTITLE: Hard-coded Colors in CSS (Bad)\nDESCRIPTION: This CSS snippet shows the incorrect usage of hard-coded colors in CSS if the application should be themable. Using hard-coded colors prevents theming which could lead to accessibility and design issues.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/css-styling-issues-9d87f92.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.myCustomHTML {\n\tcolor: #FFF;\n\tbackground-color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Library Resource Root - HTML\nDESCRIPTION: Defines the resource root for an OPA5 test library in the HTML QUnit start page. This allows the application to locate the test library's resources.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-libraries-for-opa5-a88a5e5.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n    src=\"../../resources/sap-ui-core.js\"\n    data-sap-ui-resource-roots='{\n        \"my.application.test.integration\": \"./\",\n        \"my.awesome.testlibrary.integration.testLibrary\" : \"../../../test-resources/my/awesome/testlibrary/integration/testLibrary\"\n\n    }'>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing XML View and Placing in DOM - JavaScript\nDESCRIPTION: This JavaScript snippet initializes an XML view named 'ui5.quickstart.App' and places it in the DOM element with the ID 'content'. It utilizes `sap.ui.define` to manage dependencies and asynchronous loading of the view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-steady-128214a.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/core/mvc/XMLView\"\n], (XMLView) => {\n\t\"use strict\";\n\n\tXMLView.create({\n\t\tviewName: \"ui5.quickstart.App\"\n\t}).then((oView) => oView.placeAt(\"content\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Unit Test: Returning Date without Time\nDESCRIPTION: This unit test verifies that the DateFormatter returns the date without time when the input date is more than 7 days ago. It uses QUnit.test to define a test case and assert.strictEqual to verify the formatted date against the expected value. It depends on sap.ui.demo.bulletinboard.model.DateFormatter, sap.ui.core.Locale, and sap.ui.core.date.UI5Date.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/bulletinboard/model/DateFormatter\",\n\t\"sap/ui/core/Locale\",\n\t\"sap/ui/core/date/UI5Date\"\n], function(DateFormatter, Locale, UI5Date) {\n\tvar oFormatter = null;\n\t// ...\n\tQUnit.test(\"Should return date w/o time if date > 7 days ago\", function(assert) {\n\t\tvar oDate = UI5Date.getInstance(2015, 2, 7);\n\t\tvar sFormattedDate = oFormatter.format(oDate);\n\t\tassert.strictEqual(sFormattedDate, \"Mar 7, 2015\");\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.getter with a closure (Native)\nDESCRIPTION: This example demonstrates replacing `jQuery.sap.getter` with a JavaScript closure.  It creates a function that returns a pre-defined value. Useful for creating getter functions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction(value) { return function() { return value; }; }(myValue);\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.device.is.standalone with window.navigator.standalone (Native)\nDESCRIPTION: This example shows how to replace `jQuery.device.is.standalone` with the native JavaScript property `window.navigator.standalone`. This property returns a boolean indicating whether the application is running in standalone mode.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.navigator.standalone\n```\n\n----------------------------------------\n\nTITLE: Defining Text Property in sap.m.Text Control\nDESCRIPTION: This snippet demonstrates how to set the `text` property of a `sap.m.Text` control in an XML view using a plain text string. The `text` attribute is assigned the desired string value.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/control-properties-and-associations-in-xml-views-5ee3be4.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Text text=\"My Text\"/>\n```\n\n----------------------------------------\n\nTITLE: XML Namespace Definition in OpenUI5 View\nDESCRIPTION: Defines XML namespaces for OpenUI5 control libraries within an XML view. It includes the default namespace (sap.m) and aliases for sap.ui.core.mvc, sap.ui.layout, and sap.ui.layout.form.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/namespaces-in-xml-views-2421a2c.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n     xmlns:mvc=\"sap.ui.core.mvc\"\n     xmlns:layout=\"sap.ui.layout\"\n     xmlns:form=\"sap.ui.layout.form\"\n     xmlns=\"sap.m\">\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Installing Karma Chrome Launcher as dev dependency\nDESCRIPTION: This command installs the `karma-chrome-launcher` as a development dependency using npm. This is required if Chrome is not already defined as the browser for karma.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-automation-ae44824.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D karma-chrome-launcher\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration File Before Bootstrap (HTML)\nDESCRIPTION: This HTML code demonstrates how to include a configuration file (`config.js`) before bootstrapping OpenUI5. The `config.js` file contains the `globalThis[\"sap-ui-config\"]` settings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/configuration-of-the-openui5-runtime-91f08de.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"config.js\"></script>\n<script id=\"sap-ui-bootstrap\"\n            src=\"resources/sap-ui-core.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: XML View Definition\nDESCRIPTION: This XML snippet defines an OpenUI5 view named `Sub3.view.xml` containing two TextView controls. One of the TextView controls has the ID `someCustomizableTextControl`, which will be targeted for modification to hide it via customization.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-modification-aa93e1c.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns=\"sap.\" xmlns:mvc=\"sap.ui.core.mvc\">\n    <TextView text=\"SAP View 'Sub3' - the text after this one is hidden by customizing: \"></TextView>\n    <TextView id=\"someCustomizableTextControl\" text=\"This text is made invisible by customization\"></TextView>  \n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Using sap.ui.require at the Top Level - Avoid\nDESCRIPTION: This example illustrates the incorrect usage of `sap.ui.require` instead of `sap.ui.define` at the top level of a module definition. `sap.ui.require` cannot export values or register a module name, potentially breaking the dependency graph and module execution order. Use `sap.ui.define` for defining reusable JavaScript objects.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-for-loading-modules-4363b3f.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Adding Fast Navigation Group (XML View)\nDESCRIPTION: This XML view example demonstrates how to define a Panel control as a fast navigation group.  It achieves this by using the `core:CustomData` element to set the `sap-ui-fastnavgroup` property to `true`. Setting `writeToDom` to `true` ensures that the `data-sap-ui-fastnavgroup` attribute is rendered in the HTML, making the panel a fast navigation group.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/fast-navigation-d23e2cf.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n  xmlns:core=\"sap.ui.core\"\n  xmlns:mvc=\"sap.ui.core.mvc\"\n  xmlns=\"sap.m\">\n  <Panel>\n    <headerToolbar>\n      <Toolbar>\n        <Button icon=\"sap-icon://settings\" />\n      </Toolbar>\n    </headerToolbar>\n    <content>\n      <Text text=\"Lorem ipsum dolor st amet...\" />\n    </content>\n    <customData>\n      <core:CustomData key=\"sap-ui-fastnavgroup\" value=\"true\" writeToDom=\"true\" />\n    </customData>\n  </Panel>\n</mvc:View>\n\n```\n\n----------------------------------------\n\nTITLE: Entering Text and Pressing Enter Key with OPA5\nDESCRIPTION: This snippet shows how to simulate pressing the Enter key after entering text into an input using OPA5. The `pressEnterKey` property of the `EnterText` action is set to `true`.  This triggers the `change` event and keeps the input focused.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/simulating-user-interactions-on-controls-8615a0b.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\noOpa.waitFor({\n    controlType: \"sap.m.Input\",\n    searchOpenDialogs: true,\n    actions: new EnterText({\n        text: \"test\",\n        pressEnterKey: true\n    })\n});\noOpa.waitFor({\n    controlType: \"sap.m.Popover\",\n    searchOpenDialogs: true,\n    success: function (aPopover) {\n        Opa5.assert.ok(aPopover[0].isOpen(), \"Popover should remain open on any browser\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Step Definition with Context\nDESCRIPTION: This JavaScript code demonstrates how to use the `this` context to share data between step definitions within the same scenario. Variables set in one step definition are accessible in subsequent step definitions. Each new scenario starts with a new `this` object.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.register(/^I have a (.*?) in front of me$/i, function(coffeeType) {\n  this.coffeeType = coffeeType;\n});\n\nthis.register(/^I drink the coffee$/i, function() {\n  this.sleepinessBefore = user.getSleepiness();\n  user.drink(this.coffeeType);\n});\n\nthis.register(/^I feel less sleepy$/i, function() {\n  Opa5.assert.ok(user.getSleepiness() < this.sleepinessBefore, \"Verified...\");\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Step Definition Example\nDESCRIPTION: This JavaScript code snippet shows a step definition that translates the Gherkin step \"I protect my skin\" into executable code.  It uses the `register` function to associate the Gherkin step with a JavaScript function that performs the assertion. The `this.assert.assertEqual` function verifies that the `this.mySkin` property is equal to 'protected'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/behavior-driven-development-with-gherkin-45ac9f1.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.register(/^I protect my skin$/i, function() {\n  this.assert.assertEqual(this.mySkin, 'protected');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Organization Unit with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"org-unit\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"orgunit\" property pointing to the given property's path in OData V4. PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_90\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"orgunit\" : { \"Path\" : \"PROPERTY\" } }\n```\n\n----------------------------------------\n\nTITLE: Add Unit Mappings - JavaScript\nDESCRIPTION: This snippet shows how to define unit mappings in OpenUI5 using `sap.base.i18n.Formatting.addUnitMappings`. Unit mappings allow you to use aliases for existing units, mapping ISO unit codes to CLDR keys, or custom units.  This enables using more user-friendly or application-specific unit names.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/unit-formatting-8e618a8.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nFormatting.addUnitMappings({\n   \"kitties\": \"cats\", // maps to a custom defined unit\n   \"mySpeedAlias\": \"speed-kilometer-per-hour\" // maps to an existing the CLDR unit\n});\n```\n\n----------------------------------------\n\nTITLE: Manifest JSON Configuration\nDESCRIPTION: This JSON snippet defines the application descriptor (manifest.json) for an OpenUI5 application.  It includes the application ID, type, title, and version, which are essential for OpenUI5 to instantiate and manage the application.  The _version indicates the manifest format version.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-typescript-c20489e.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_version\": \"1.65.0\",\n  \"sap.app\": {\n    \"id\": \"ui5.walkthrough\",\n    \"type\": \"application\",\n    \"title\": \"UI5 TypeScript Walkthrough\",\n    \"applicationVersion\": {\n      \"version\": \"1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer OData V2 Dates to JSON Model - JavaScript\nDESCRIPTION: This JavaScript code demonstrates transferring dates, times, and timestamps from an OData V2 model to a JSON model. It retrieves the OData V2 context properties `DateTime`, `DateTimeOffset`, and `Time`, then creates a new JSON model with cloned instances using `UI5Date.getInstance` for dates/timestamps and `Object.assign` for times to ensure that objects are not passed by reference. It returns a JSON model containing the data.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/dates-times-timestamps-and-time-zones-6c9e61d.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntransferDatesTimesAndTimestampsFromODataV2ModelToJSONModel(oContext) {\n    // assume \"oContext\" is an OData V2 context referencing an entity with the properties \n    // \"DateTime\" (date), \"DateTimeOffset\" (timestamp) and \"Time\" (time)\n    const oDate = oContext.getProperty(\"DateTime\");\n    const oDateTimeOffset = oContext.getProperty(\"DateTimeOffset\");\n    const oTime = oContext.getProperty(\"Time\");\n \n    return new JSONModel({\n        DateTime: oDate ? UI5Date.getInstance(oDate) : null,\n        DateTimeOffset: oDateTimeOffset ? UI5Date.getInstance(oDateTimeOffset) : null,\n        Time: oTime ? Object.assign({}, oTime) : null\n    });\n},\n```\n\n----------------------------------------\n\nTITLE: Adding Invoice List Title - i18n.properties\nDESCRIPTION: This entry adds the \"invoiceListTitle\" to the i18n.properties file.  This allows the title of the invoice list to be internationalized. The value is set to \"Invoices\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-19-aggregation-binding-bf71375.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\n# Invoice List\ninvoiceListTitle=Invoices\n```\n\n----------------------------------------\n\nTITLE: Initializing DateTime type with timestamp source\nDESCRIPTION: Initializes the `DateTime` type with a timestamp as the source value and a specific output pattern \"dd.MMM.yyyy HH:mm\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-datetime-91f3070.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The source value is given as timestamp. The used output pattern is \"dd.MM.yyyy HH:mm\": e.g. 22.12.2010 13:15\noType = new TypeDateTime({source: {pattern: \"timestamp\"}, pattern: \"dd.MMM.yyyy HH:mm\"}); \n```\n\n----------------------------------------\n\nTITLE: Excluding objects from Blanket.js instrumentation via HTML\nDESCRIPTION: This snippet excludes objects from Blanket.js instrumentation using the `data-sap-ui-cover-never` attribute.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../resources/sap/ui/qunit/qunit-coverage.js\"\n\tdata-sap-ui-cover-never=\"sap/ui/example/thirdparty/\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Limiting Blanket.js instrumentation to a single file via HTML\nDESCRIPTION: This snippet shows how to limit Blanket.js instrumentation to a single file via HTML using `data-sap-ui-cover-only`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../resources/sap/ui/qunit/qunit-coverage.js\"\n\tdata-sap-ui-cover-only=\"sap/ui/core/Popup.js\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Creating HelloPanel View (XML)\nDESCRIPTION: Creates a new XML view for the HelloPanel.  It defines a Panel with a header, a Button, an Input field, and a FormattedText control. The view is associated with the HelloPanel controller via the controllerName attribute.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-nested-views-typescript-9bbbfaa.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.HelloPanel\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Panel\n      headerText=\"{i18n>helloPanelTitle}\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\">\n      <content>\n         <Button\n            text=\"{i18n>showHelloButtonText}\"\n            press=\".onShowHello\"\n            class=\"myCustomButton\"/>\n         <Input\n            value=\"{/recipient/name}\"\n            valueLiveUpdate=\"true\"\n            width=\"60%\"/>\n         <FormattedText\n            htmlText=\"Hello {/recipient/name}\"\n            class=\"sapUiSmallMargin sapThemeHighlight-asColor myCustomText\"/>\n      </content>\n   </Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Resolve Entity Set using gotoEntityset in XML Template\nDESCRIPTION: This XML snippet demonstrates how to use the `gotoEntitySet` helper function within a `<template:with>` instruction. It navigates to an entity set based on the provided path, storing the result in the `entitySet` variable. The `path` property must point to a simple string or an annotation of type `Edm.AnnotationPath`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/annotation-helper-dbec058.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n    \n    <template:with path=\"facet>Target\" helper=\"sap.ui.model.odata.AnnotationHelper.gotoEntitySet\" var=\"entitySet\" />\n    <template:with path=\"associationSetEnd>entitySet\" helper=\"sap.ui.model.odata.AnnotationHelper.gotoEntitySet\" var=\"entitySet\"/>\n    \n```\n\n----------------------------------------\n\nTITLE: OData V2 Metadata: Currency and Unit Code Lists\nDESCRIPTION: This code snippet shows the OData V2 metadata definition for currency and unit code lists, including EntityTypes for `SAP__Currency` and `SAP__UnitOfMeasure`. It defines properties such as CurrencyCode, ISOCode, Text, DecimalPlaces, UnitCode, and ExternalCode, along with their associated annotations for UI representation and data handling.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_94\n\nLANGUAGE: xml\nCODE:\n```\n<edmx:Include Namespace=\"com.sap.vocabularies.Common.v1\" Alias=\"SAP__common\"/>\n<edmx:Include Namespace=\"Org.OData.Core.V1\" Alias=\"SAP__core\"/>\n<edmx:Include Namespace=\"com.sap.vocabularies.CodeList.v1\" Alias=\"SAP__CodeList\"/>\n...\n<EntityType Name=\"Product\">\n    ...\n    <Property Name=\"WeightMeasure\" Type=\"Edm.Decimal\" Precision=\"13\" Scale=\"3\" />\n    <Property Name=\"WeightUnit\" Type=\"Edm.String\" MaxLength=\"3\" />\n    <Property Name=\"CurrencyCode\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"5\" />\n    <Property Name=\"Price\" Type=\"Edm.Decimal\" Precision=\"16\" Scale=\"3\" /> \n    ...\n</EntityType>\n...\n<EntityType Name=\"SAP__Currency\" sap:content-version=\"1\">\n<Key>\n    <PropertyRef Name=\"CurrencyCode\"/>\n</Key>\n    <Property Name=\"CurrencyCode\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"5\" sap:label=\"Currency\" sap:semantics=\"currency-code\"/>\n    <Property Name=\"ISOCode\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"3\" sap:label=\"ISO Code\"/>\n    <Property Name=\"Text\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"15\" sap:label=\"Short Text\"/>\n    <Property Name=\"DecimalPlaces\" Type=\"Edm.Byte\" Nullable=\"false\" sap:label=\"Decimals\"/>\n</EntityType>\n \n<EntityType Name=\"SAP__UnitOfMeasure\" sap:content-version=\"1\">\n<Key>\n    <PropertyRef Name=\"UnitCode\"/>\n</Key>\n    <Property Name=\"UnitCode\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"3\" sap:label=\"Internal UoM\" sap:semantics=\"unit-of-measure\"/>\n    <Property Name=\"ISOCode\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"3\" sap:label=\"ISO Code\"/>\n    <Property Name=\"ExternalCode\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"3\" sap:label=\"Commercial\"/>\n    <Property Name=\"Text\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"30\" sap:label=\"UoM Text\"/>\n    <Property Name=\"DecimalPlaces\" Type=\"Edm.Int16\" sap:label=\"Decimal Places\"/>\n</EntityType>\n...\n<EntityContainer Name=\"GWSAMPLE_BASIC_Entities\" m:IsDefaultEntityContainer=\"true\" sap:message-scope-supported=\"true\" sap:supported-formats=\"atom json xlsx\">\n<EntitySet Name=\"ProductSet\" EntityType=\"GWSAMPLE_BASIC.Product\" sap:content-version=\"1\"/>\n...\n<EntitySet Name=\"SAP__Currencies\" EntityType=\"GWSAMPLE_BASIC.SAP__Currency\" sap:creatable=\"false\" sap:updatable=\"false\" sap:deletable=\"false\" sap:pageable=\"false\" sap:content-version=\"1\"/>\n<EntitySet Name=\"SAP__UnitsOfMeasure\" EntityType=\"GWSAMPLE_BASIC.SAP__UnitOfMeasure\" sap:creatable=\"false\" sap:updatable=\"false\" sap:deletable=\"false\" sap:pageable=\"false\" sap:content-version=\"1\"/>\n...\n<Annotations\n    xmlns=\"http://docs.oasis-open.org/odata/ns/edm\"\n    Target=\"GWSAMPLE_BASIC.GWSAMPLE_BASIC_Entities\"> \n    <Annotation Term=\"SAP__CodeList.CurrencyCodes\">\n        <Record>\n            <PropertyValue Property=\"Url\" String=\"./$metadata\"/>\n            <PropertyValue Property=\"CollectionPath\" String=\"SAP__Currencies\"/>\n        </Record>\n    </Annotation>\n    <Annotation Term=\"SAP__CodeList.UnitsOfMeasure\">\n        <Record>\n            <PropertyValue Property=\"Url\" String=\"./$metadata\"/>\n            <PropertyValue Property=\"CollectionPath\" String=\"SAP__UnitsOfMeasure\"/>\n        </Record>\n    </Annotation>\n</Annotations>\n\n<Annotations Target=\"SAP__self.Currency/CurrencyCode\">\n    <Annotation Term=\"Common.Text\" Path=\"Text\" />\n    <Annotation Term=\"Common.UnitSpecificScale\" Path=\"DecimalPlaces\" />\n    <Annotation Term=\"CodeList.StandardCode\" Path=\"ISOCode\" />\n</Annotations>\n  \n<Annotations\n    xmlns=\"http://docs.oasis-open.org/odata/ns/edm\"\n    Target=\"GWSAMPLE_BASIC.SAP__UnitOfMeasure/UnitCode\">\n    <Annotation Term=\"Common.Text\" Path=\"Text\" />\n    <Annotation Term=\"Common.UnitSpecificScale\" Path=\"DecimalPlaces\" />\n    <Annotation Term=\"CodeList.StandardCode\" PropertyPath=\"ISOCode\" />\n    <Annotation Term=\"CodeList.ExternalCode\" PropertyPath=\"ExternalCode\" />\n</Annotations>\n  \n<Annotations \n    xmlns=\"http://docs.oasis-open.org/odata/ns/edm\"\n    Target=\"GWSAMPLE_BASIC.SAP__UnitOfMeasure\">\n    <Annotation Term=\"Core.AlternateKeys\">\n      <Collection>\n        <Record>\n          <PropertyValue Property=\"Key\">\n            <Collection>\n              <Record>\n                <PropertyValue Property=\"Name\" PropertyPath=\"ExternalCode\" />\n                <PropertyValue Property=\"Alias\" String=\"ExternalCode\" />\n              <Record>\n            </Collection>\n          </PropertyValue>\n        <Record>\n      </Collection>\n    </Annotation>\n</Annotations>\n...\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes in XML View\nDESCRIPTION: This XML snippet shows how to apply custom CSS classes to OpenUI5 controls within an XML view. It applies the `myAppDemoWT` class to the `App` control to define the application namespace, and the `myCustomButton` class to the `Button` control to adjust spacing.  A `FormattedText` control is styled using `myCustomText` and a theme-dependent CSS class.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-custom-css-and-theme-colors-723f4b2.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n\t<Shell>\n\t\t<App class=\"myAppDemoWT\">\n\t\t\t<pages>\n\t\t\t\t<Page title=\"{i18n>homePageTitle}\">\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<Panel\n\t\t\t\t\t\t\theaderText=\"{i18n>helloPanelTitle}\"\n\t\t\t\t\t\t\tclass=\"sapUiResponsiveMargin\"\n\t\t\t\t\t\t\twidth=\"auto\">\n\t\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttext=\"{i18n>showHelloButtonText}\"\n\t\t\t\t\t\t\t\t\tpress=\".onShowHello\"\n\t\t\t\t\t\t\t\t\tclass=\"myCustomButton\"/>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tvalue=\"{/recipient/name}\"\n\t\t\t\t\t\t\t\t\tvalueLiveUpdate=\"true\"\n\t\t\t\t\t\t\t\t\twidth=\"60%\"/>\n\t\t\t\t\t\t\t\t<FormattedText\n\t\t\t\t\t\t\t\t\thtmlText=\"Hello {/recipient/name}\"\n\t\t\t\t\t\t\t\t\tclass=\"sapUiSmallMargin sapThemeHighlight-asColor myCustomText\"/>\n\t\t\t\t\t\t\t</content>\n\t\t\t\t\t\t</Panel>\n\t\t\t\t\t</content>\n\t\t\t\t</Page>\n\t\t\t</pages>\n\t\t</App>\n\t</Shell>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Creating App.view.xml\nDESCRIPTION: This XML view defines the UI of the application. It contains a sap.m.Text control with hard-coded text, demonstrating no data binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-no-data-binding-4cde849.md#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Text text=\"Hi, my name is Harry Hawk\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Excluding objects from Blanket.js instrumentation via JavaScript\nDESCRIPTION: This snippet demonstrates how to exclude objects from Blanket.js instrumentation via JavaScript using `blanket.options`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (window.blanket) {\n\tblanket.options(\"sap-ui-cover-never\", \"sap/ui/example/thirdparty/\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using String Value for Aggregation - XML\nDESCRIPTION: This XML snippet shows how to specify a string value directly as an attribute for the 'noData' aggregation of a SmartTable control, when the aggregation's cardinality is 0..1 and has an alternative type.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/aggregation-handling-in-xml-views-19eabf5.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<SmartTable noData=\"No data available\">\n\t...\n</SmartTable>\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Year Week with OData V2 Annotation\nDESCRIPTION: This code snippet shows how the `sap:semantics=\"yearweek\"` annotation in OData V2 is converted to the `com.sap.vocabularies.Common.v1.IsCalendarYearWeek` annotation with a boolean value of \"true\" in OData V4. The OData V2 annotation indicates the property is a calendar year week, and the OData V4 annotation standardizes this.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_66\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.IsCalendarYearWeek\" : {\"Bool\" : \"true\"}\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.intervalCall with window.setInterval (Native)\nDESCRIPTION: This snippet demonstrates replacing `jQuery.sap.intervalCall` with the native `window.setInterval`. `window.setInterval` repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.setInterval\n```\n\n----------------------------------------\n\nTITLE: Limiting Blanket.js instrumentation to a specific library via JavaScript\nDESCRIPTION: This snippet demonstrates how to limit Blanket.js instrumentation to a specific library via JavaScript using `blanket.options`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (window.blanket) {\n\tblanket.options(\"sap-ui-cover-only\", \"sap/ui/core/\");\n}\n```\n\n----------------------------------------\n\nTITLE: Absolute Binding to Metadata (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to create an `sap.m.Label` control and bind its `text` property to the `sap:label` annotation of the `CompanyName` property using an absolute binding path. The binding path starts with `/#` followed by the EntityType and property name.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-metadata-binding-f5aa4bb.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar myLabel = new sap.m.Label({text:\"{/#Company/CompanyName/@sap:label}\"});\n```\n\n----------------------------------------\n\nTITLE: OData Metadata Basic Structure - JSON\nDESCRIPTION: This code snippet shows the basic nested structure of OData metadata, including dataServices, schema, association, complexType, entityContainer, and entityType. It illustrates the core elements and their relationships within the OData model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_30\n\nLANGUAGE: JSON\nCODE:\n```\n\"dataServices\": {\n    \"schema\": [{\n      \"association\": [{\n        \"end\": []\n      }],\n      \"complexType\": [{\n        \"property\": []\n      }],\n      \"entityContainer\": [{\n        \"associationSet\": [{\n          \"end\": []\n        }],\n        \"entitySet\": [],\n        \"functionImport\": [{\n          \"parameter\": []\n        }]\n      }],\n      \"entityType\": [{\n        \"property\": [],\n        \"navigationProperty\": []\n      }]\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Year Month with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics=\"yearmonth\"` annotation in OData V2 is converted to the `com.sap.vocabularies.Common.v1.IsCalendarYearMonth` annotation with a boolean value of \"true\" in OData V4. The OData V2 annotation indicates that the property represents a calendar year and month, and the OData V4 annotation conveys the same meaning using a standard vocabulary.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_62\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.IsCalendarYearMonth\" : {\"Bool\" : \"true\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple OPA Test\nDESCRIPTION: This JavaScript snippet demonstrates a basic OPA test using `opaQUnit`. It defines a test case that starts the application, presses a button, and asserts that the button's text has changed. It relies on OPA5, opaQUnit, Press, and PropertyStrictEquals modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/getting-started-with-opa5-22f175e.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.require([\n  \"sap/ui/test/Opa5\",\n    \"sap/ui/test/opaQUnit\",\n    \"sap/ui/test/actions/Press\",\n    \"sap/ui/test/matchers/PropertyStrictEquals\"\n], function (Opa5, opaQUnit, Press, PropertyStrictEquals) {\n\n  opaQUnit(\"Should press a Button\", function (Given, When, Then) {\n        // Arrangements\n        Given.iStartMyApp();\n\n        //Actions\n        When.iPressOnTheButton();\n\n        // Assertions\n        Then.theButtonShouldHaveADifferentText();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Unit Test: Returning Day of the Week\nDESCRIPTION: This unit test checks if the DateFormatter returns the correct day of the week when the input date is less than 7 days ago. It uses QUnit.test to define a test case and assert.strictEqual to verify the formatted date against the expected value. It depends on sap.ui.demo.bulletinboard.model.DateFormatter, sap.ui.core.Locale, and sap.ui.core.date.UI5Date.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/bulletinboard/model/DateFormatter\",\n\t\"sap/ui/core/Locale\",\n\t\"sap/ui/core/date/UI5Date\"\n], function(DateFormatter, Locale, UI5Date) {\n\tvar oFormatter = null;\n\t// ...\n\tQUnit.test(\"Should return day of the week if date < 7 days ago\", function(assert) {\n\t\tvar oDate = UI5Date.getInstance(2015, 2, 8);\n\t\tvar sFormattedDate = oFormatter.format(oDate);\n\t\tassert.strictEqual(sFormattedDate, \"Sunday\");\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Supported Binding Mode - JSONModel - JavaScript\nDESCRIPTION: Checks if a specific binding mode (OneTime) is supported by the JSONModel. If supported, it sets the default binding mode to OneTime. Requires sap.ui.model.json.JSONModel.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/setting-the-default-binding-mode-1a08f70.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oModel = new sap.ui.model.json.JSONModel();\nif (oModel.isBindingModeSupported(sap.ui.model.BindingMode.OneTime)) { // true\n    oModel.setDefaultBindingMode(sap.ui.model.BindingMode.OneTime); \n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Manifest Content via API (JavaScript)\nDESCRIPTION: This code shows how to access the manifest content from the component via the `sap.ui.core.Component` APIs.  `oComponent.getManifest()` returns the entire manifest object, while `oComponent.getManifestEntry()` allows access to specific sections or properties within the manifest. `oComponent` is an instance of `sap.ui.core.Component`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-descriptor-for-applications-components-and-libraries-be0cf40.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Given: oComponent === instance of sap.ui.core.Component (e.g. returned by sap.ui.core.mvc.Controller#getOwnerComponent)\noComponent.getManifest(); // returns reference to the entire manifest object if it exists; otherwise returns null\noComponent.getManifestEntry(\"sap.app\"); // returns reference to the configuration section of the manifest\noComponent.getManifestEntry(\"/sap.ui5/dependencies/libs\"); // returns reference or value of the manifest configuration by path; the syntax must start with a slash\n```\n\n----------------------------------------\n\nTITLE: i18n Properties Update\nDESCRIPTION: This code snippet shows how to update the i18n.properties file with new name-value pairs for the app title and description. These texts are used in the application descriptor (manifest.json). The properties file is also commented to improve readability and organization.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-descriptor-for-applications-typescript-2a46b75.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# App Descriptor\nappTitle=Hello World\nappDescription=A simple walkthrough app that explains the most important concepts of UI5\n\n# Hello Panel\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\n\n```\n\n----------------------------------------\n\nTITLE: Measuring Object Method Average Time (Instance)\nDESCRIPTION: This snippet registers, activates, and unregisters a method on an object instance for performance measurement, calculating its average execution time. It requires the `sap/m/Button` and `sap/ui/performance/Measurement` modules. Category is 'instance'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/performance-measurement-using-sap-ui-performance-measurement-module-78880c0.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// \"Button\" required from module \"sap/m/Button\"\n// \"Measurement\" required from module \"sap/ui/performance/Measurement\"\nvar oButton = new Button();\nMeasurement.registerMethod(\"oButton.setText\", oButton, \"setText\", [\"instance\"]); //register to oButton instance on method setText\nMeasurement.setActive(true,[\"instance\"]); //measure only category \"instance\"\nfor (var i=0;i<1000;i++) {\n    oButton.setText(\"MyButton\" + i);\n}\n \nMeasurement.unregisterMethod(oButton, \"setText\");\n// or Measurement.unregisterAllMethods();\n\nMeasurement.getAllMeasurements();\n```\n\n----------------------------------------\n\nTITLE: Limiting Blanket.js instrumentation to multiple files via JavaScript\nDESCRIPTION: This snippet limits Blanket.js instrumentation to multiple files via JavaScript using `blanket.options`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (window.blanket) {\n\tblanket.options(\"sap-ui-cover-only\", \"[sap/ui/core/Popup.js, sap/ui/core/EventProvider]\");\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping String Constants in Expression Binding\nDESCRIPTION: This JavaScript code shows an example of how to escape string constants within an expression binding.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-bindings-604b1eb.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{= '{= \\'' + ${meta>A} + '\\' + ${/B} } // --> {= 'A' + ${/B} }\n```\n\n----------------------------------------\n\nTITLE: Add Dynamic Header to Detail.view.xml\nDESCRIPTION: This snippet adds a dynamic header to the `ObjectPageLayout` using the `ObjectPageDynamicHeaderTitle`. It includes actions such as \"Edit\", \"Delete\", and \"Copy\" using `sap.m.ToggleButton` and `sap.m.Button` controls. This allows users to interact with the header content.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-using-object-page-layout-as-a-detail-page-d1ffe61.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\txmlns=\"sap.uxap\"\n\txmlns:m=\"sap.m\"\n\txmlns:f=\"sap.f\"\n\txmlns:form=\"sap.ui.layout.form\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<ObjectPageLayout\n\t\tid=\"ObjectPageLayout\"\n\t\tshowTitleInHeaderContent=\"true\"\n\t\talwaysShowContentHeader=\"false\"\n\t\tpreserveHeaderStateOnScroll=\"false\"\n\t\theaderContentPinnable=\"true\"\n\t\tisChildPage=\"true\"\n\t\tupperCaseAnchorBar=\"false\">\n\t\t<headerTitle>\n\t\t\t<ObjectPageDynamicHeaderTitle>\n\t\t\t\t<actions>\n\t\t\t\t\t<m:ToggleButton\n\t\t\t\t\t\ttext=\"Edit\"\n\t\t\t\t\t\ttype=\"Emphasized\"/>\n\t\t\t\t\t<m:Button\n\t\t\t\t\t\ttext=\"Delete\"\n\t\t\t\t\t\ttype=\"Transparent\"/>\n\t\t\t\t\t<m:Button\n\t\t\t\t\t\ttext=\"Copy\"\n\t\t\t\t\t\ttype=\"Transparent\"/>\n\t\t\t\t\t<m:Button\n\t\t\t\t\t\ticon=\"sap-icon://action\"\n\t\t\t\t\t\ttype=\"Transparent\"/>\n\t\t\t\t</actions>\n\t\t\t</ObjectPageDynamicHeaderTitle>\n\t\t</headerTitle>\n\n\t</ObjectPageLayout>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Setting Search Role with ARIA\nDESCRIPTION: This code snippet shows how to set the ARIA role 'search' for an element, which identifies the element as a search landmark within the page. This is helpful for screen readers to navigate the page by landmarks.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/screen-reader-support-for-openui5-controls-656e825.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nrole=\"search\"\n```\n\n----------------------------------------\n\nTITLE: Removing Property Binding\nDESCRIPTION: This JavaScript snippet demonstrates how to remove a property binding using the `unbindProperty` method.  It removes the binding from the `value` property of the `oTextField` control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-binding-91f0652.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\noTextField.unbindProperty(\"value\");\n```\n\n----------------------------------------\n\nTITLE: RTL-Specific CSS Styling in OpenUI5\nDESCRIPTION: This snippet demonstrates how to apply RTL-specific styles in OpenUI5 using the `html[dir=\"rtl\"]` selector. This allows for specific styling when the application is running in right-to-left mode, overriding default styles where necessary.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enhanced-theming-concepts-45df6df.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nhtml[dir=\"rtl\"]  .myselector {\n}\n```\n\n----------------------------------------\n\nTITLE: Controller with Factory Function Implementation (createContent)\nDESCRIPTION: This JavaScript code defines the controller for the XML view and includes the 'createContent' factory function. The 'createContent' function receives the ID and context for each item in the bound aggregation.  It checks the data type of the 'revenue' property in the context and returns an Input (number), CheckBox (boolean) or Text (string) control accordingly. It depends on modules such as Controller, JSONModel, StringType, Float, Input, Text, and CheckBox.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-factory-functions-335848a.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/ui/model/json/JSONModel\",\n    \"sap/ui/model/type/String\",\n    \"sap/ui/model/type/Float\",\n    \"sap/m/Input\",\n    \"sap/m/Text\",\n    \"sap/m/CheckBox\"\n], function (Controller, JSONModel, StringType, Float, Input, Text, CheckBox) {\n    \"use strict\";\n\n    return Controller.extend(\"sap.ui.sample.App\", {\n        onInit() {\n            …\n        },\n        createContent(sId, oContext) {\n            const oRevenue = oContext.getProperty(\"revenue\");\n            switch(typeof oRevenue) {\n                case \"number\":\n                    return new Input(sId, {value: {path: \"revenue\", type: Float}});\n                case \"boolean\":\n                    return new CheckBox(sId, {checked: {path: \"revenue\"}});\n                default: // For Strings and other cases\n                    return new Text(sId, {text: {path: \"revenue\", type: StringType}});\n            }\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Aggregation Forwarding in XML Composite Control - JS\nDESCRIPTION: This example demonstrates how to define aggregation forwarding with `idSuffix` for an XML composite control (deprecated). It shows the JavaScript definition of the control with the forwarding configuration.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/aggregation-forwarding-64a5e17.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/XMLComposite\"], \n    function( XMLComposite ) {\n    \"use strict\";\n    var TextList = XMLComposite.extend(\"fragments.TextList\", {\n        metadata: {\n            aggregations: {\n                texts: { \n                    type: \"sap.ui.core.Item\",\n                    multiple: true, forwarding: {\n                           idSuffix: \"--myInternalVBox\",\n                           aggregation: \"items\"\n                     }\n                }\n            }\n        }\n    })\n    return TextList;\n});\n```\n\n----------------------------------------\n\nTITLE: Event Handler with Parameters in XML View - OpenUI5\nDESCRIPTION: This XML snippet demonstrates the new event handler parameter syntax introduced in OpenUI5 1.56.  It shows how to pass static values, bindings, and expressions as parameters to an event handler function defined in the controller. This feature reduces controller code by directly passing required input values from the view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/01_Whats-New/what-s-new-in-openui5-1-56-108b7fd.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Add Product\" press=\".modifyList('add ', ${products>unitPrice})\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Deferred Groups in ODataModel JavaScript\nDESCRIPTION: This JavaScript snippet sets the deferred groups for an ODataModel. The `setDeferredGroups()` method takes an array of group IDs, specifying which groups should be deferred.  OData requests in deferred groups are only sent when `submitChanges()` is called.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\noModel.setDeferredGroups(aDeferredGroups);\n```\n\n----------------------------------------\n\nTITLE: Transforming sap:updatable to UpdateRestrictions\nDESCRIPTION: This snippet demonstrates how the `sap:updatable` annotation is transformed into the `Org.OData.Capabilities.V1.UpdateRestrictions` annotation. Setting `sap:updatable` to `false` results in `Updatable` being set to `false`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_42\n\nLANGUAGE: xml\nCODE:\n```\nsap:updatable = \"false\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Capabilities.V1.UpdateRestrictions\": { \"Updatable\" : { \"Bool\" : \"false\" } }\n```\n\n----------------------------------------\n\nTITLE: OData Metadata Detailed Structure - JSON\nDESCRIPTION: This snippet provides a detailed example of the OData metadata structure, including properties such as namespace, entity types with their keys and properties, complex types, associations, and entity containers with entity sets and function imports. It showcases a real-world OData model representation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_31\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"version\": \"1.0\",\n  \"dataServices\": {\n    \"dataServiceVersion\": \"2.0\",\n    \"schema\": [{\n      \"namespace\": \"GWSAMPLE_BASIC\",\n      \"entityType\": [{\n        \"name\": \"BusinessPartner\",\n        \"key\": {\n          \"propertyRef\": [{\n            \"name\": \"BusinessPartnerID\"\n          }]\n        },\n        \"property\": [{\n          \"name\": \"BusinessPartnerID\",\n          \"type\": \"Edm.String\",\n          \"nullable\": \"false\",\n          \"maxLength\": \"10\"\n        }],\n        \"navigationProperty\": [{\n          \"name\": \"ToSalesOrders\",\n          \"relationship\": \"GWSAMPLE_BASIC.Assoc_BusinessPartner_SalesOrders\",\n          \"fromRole\": \"FromRole_Assoc_BusinessPartner_SalesOrders\",\n          \"toRole\": \"ToRole_Assoc_BusinessPartner_SalesOrders\"\n        }]\n      }],\n      \"complexType\": [{\n        \"name\": \"CT_Address\",\n        \"property\": [{\n          \"name\": \"City\",\n          \"type\": \"Edm.String\",\n          \"maxLength\": \"40\"\n        }]\n      }],\n      \"association\": [{\n        \"name\": \"Assoc_BusinessPartner_SalesOrders\",\n        \"end\": [{\n          \"type\": \"GWSAMPLE_BASIC.BusinessPartner\",\n          \"multiplicity\": \"1\",\n          \"role\": \"FromRole_Assoc_BusinessPartner_SalesOrders\"\n        }, {\n          \"type\": \"GWSAMPLE_BASIC.SalesOrder\",\n          \"multiplicity\": \"*\",\n          \"role\": \"ToRole_Assoc_BusinessPartner_SalesOrders\"\n        }],\n        \"referentialConstraint\": {\n          \"principal\": {\n            \"role\": \"FromRole_Assoc_BusinessPartner_SalesOrders\",\n            \"propertyRef\": [{\n              \"name\": \"BusinessPartnerID\"\n            }]\n          },\n          \"dependent\": {\n            \"role\": \"ToRole_Assoc_BusinessPartner_SalesOrders\",\n            \"propertyRef\": [{\n              \"name\": \"CustomerID\"\n            }]\n          }\n        }\n      }],\n      \"entityContainer\": [{\n        \"name\": \"GWSAMPLE_BASIC_Entities\", \n        \"isDefaultEntityContainer\": \"true\",\n        \"entitySet\": [{\n          \"name\": \"BusinessPartnerSet\",\n          \"entityType\": \"GWSAMPLE_BASIC.BusinessPartner\"\n        }],\n        \"associationSet\": [{\n          \"name\": \"Assoc_BusinessPartner_SalesOrders_AssocS\",\n          \"association\": \"GWSAMPLE_BASIC.Assoc_BusinessPartner_SalesOrders\",\n          \"end\": [{\n            \"entitySet\": \"BusinessPartnerSet\",\n            \"role\": \"FromRole_Assoc_BusinessPartner_SalesOrders\"\n          }, {\n            \"entitySet\": \"SalesOrderSet\",\n            \"role\": \"ToRole_Assoc_BusinessPartner_SalesOrders\"\n          }]\n        }],\n        \"functionImport\": [{\n          \"name\": \"SalesOrder_Confirm\",\n          \"returnType\": \"GWSAMPLE_BASIC.SalesOrder\",\n          \"entitySet\": \"SalesOrderSet\",\n          \"httpMethod\": \"POST\",\n          \"parameter\": [{\n            \"name\": \"SalesOrderID\",\n            \"type\": \"Edm.String\",\n            \"mode\": \"In\",\n            \"maxLength\": \"10\"\n          }]\n        }]\n      }]\n    }]\n  }}\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Filterable Navigation Properties\nDESCRIPTION: This code snippet shows how the `sap:filterable = \"false\"` annotation in OData V2 is converted to the `Org.OData.Capabilities.V1.NavigationRestrictions` annotation in OData V4.  This specifies that navigation properties cannot be filtered on.  In this case navigation properties NavPropA and NavPropB are non-filterable.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_70\n\nLANGUAGE: JSON\nCODE:\n```\n\"Org.OData.Capabilities.V1.NavigationRestrictions\": {  \"RestrictedProperties\": [    {      \"FilterRestrictions\": {\"Filterable\": false},      \"NavigationProperty\": {\"NavigationPropertyPath\": \"NavPropA\"}    },    {      \"FilterRestrictions\": {\"Filterable\": false},      \"NavigationProperty\": {\"NavigationPropertyPath\": \"NavPropB\"}    }  ] }\n```\n\n----------------------------------------\n\nTITLE: Component Definition (Component.js)\nDESCRIPTION: This JavaScript code defines the OpenUI5 component. It extends `sap.ui.core.UIComponent` and defines the component's metadata, including a reference to the `manifest.json` file using the `manifest` property. It initializes the component, sets up a JSON model, and overrides the base class init function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-descriptor-for-applications-8f93bf2.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n   \"sap/ui/core/UIComponent\",\n   \"sap/ui/model/json/JSONModel\"\n], (UIComponent, JSONModel) => {\n   \"use strict\";\n\n   return UIComponent.extend(\"ui5.walkthrough.Component\", {\n      metadata : {\n         interfaces: [\"sap.ui.core.IAsyncContentCreation\"],\n         manifest: \"json\"\n      },\n\n      init() {\n         // call the init function of the parent\n         UIComponent.prototype.init.apply(this, arguments);\n\n         // set data model\n         const oData = {\n            recipient : {\n               name : \"World\"\n            }\n         };\n         const oModel = new JSONModel(oData);\n         this.setModel(oModel);\n      }\n   });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Defining Code List Annotations for Currency and Units in OData Metadata (XML)\nDESCRIPTION: This XML snippet demonstrates how to define code list annotations for currency codes and units of measure in an OData metadata document. It specifies the annotations `com.sap.vocabularies.CodeList.v1.CurrencyCodes` and `com.sap.vocabularies.CodeList.v1.UnitsOfMeasure` pointing to the respective code list services and their collection paths. It also showcases the use of `Org.OData.Measures.V1.ISOCurrency` and `Org.OData.Measures.V1.Unit` to associate properties with currency codes and units.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-and-unit-customizing-in-odata-v4-4d1b9d4.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<EntityType Name=\"Product\">\n  ...\n  <Property Name=\"WeightMeasure\" Type=\"Edm.Decimal\" Nullable=\"false\" Precision=\"13\" Scale=\"variable\" />\n  <Property Name=\"WeightUnit\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"3\" />\n  <Property Name=\"CurrencyCode\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"5\" />\n  <Property Name=\"Price\" Type=\"Edm.Decimal\" Nullable=\"false\" Precision=\"15\" Scale=\"variable\" />\n  ...\n</EntityType>\n...\n<Annotations Target=\"SAP__self.Container\">\n  <Annotation Term=\"com.sap.vocabularies.CodeList.v1.CurrencyCodes\">\n    <Record>\n      <PropertyValue Property=\"Url\" String=\"../../../../default/iwbep/common/0001/$metadata\" />\n      <PropertyValue Property=\"CollectionPath\" String=\"Currencies\" />\n    </Record>\n  </Annotation>\n</Annotations>\n<Annotations Target=\"SAP__self.Container\">\n  <Annotation Term=\"com.sap.vocabularies.CodeList.v1.UnitsOfMeasure\">\n    <Record>\n      <PropertyValue Property=\"Url\" String=\"../../../../default/iwbep/common/0001/$metadata\" />\n      <PropertyValue Property=\"CollectionPath\" String=\"UnitsOfMeasure\" />\n    </Record>\n  </Annotation>\n</Annotations>\n...\n<Annotations Target=\"SAP__self.Product/Price\">\n  ...\n  <Annotation Term=\"Org.OData.Measures.V1.ISOCurrency\" Path=\"CurrencyCode\" />\n  ...\n</Annotations>\n...\n<Annotations Target=\"SAP__self.Product/WeightMeasure\">\n  ...\n  <Annotation Term=\"Org.OData.Measures.V1.Unit\" Path=\"WeightUnit\" />\n  ...\n</Annotations>\n```\n\n----------------------------------------\n\nTITLE: Creating Page Objects in a Test Library - JavaScript\nDESCRIPTION: Creates a page object within a test library. These page objects are automatically available for application tests. This snippet shows a simple page object definition with a single action.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-libraries-for-opa5-a88a5e5.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nOpa5.createPageObjects({\n    onTheListPage: {\n        viewName: \"myTestView\",\n        actions: {\n            iSearchForItem: function () {\n                // find a search field and enter some text\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to FullscreenPage\nDESCRIPTION: This code shows how to add custom content to a FullscreenPage, using customHeaderContent, content, customFooterContent, and customShareMenuContent aggregations. It includes examples of adding a Button and OverflowToolbarButton to the header, footer, and share menu, and an AddAction to the content area. Event handlers are included for each button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/semantic-page-sap-m-4a97a07.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<semantic:FullscreenPage title=\"FullScreen Page Title\"\n                            showNavButton=\"true\"\n                            navButtonPress=\"onNavButtonPress\">\n\n                          <semantic:customHeaderContent>\n                   <!-- custom header controls go here -->\n                  <Button text=\"CustomHeaderBtn\" press=\"onHeaderBtnPress\"/>\n               </semantic:customHeaderContent>\n\n\n               <semantic:content>\n                   <!-- custom page content goes here -->\n                  <semantic:AddAction press=\"onSemanticButtonPress\"/>\n               </semantic:content>\n\n\n                          <semantic:customFooterContent>\n                   <!-- custom footer controls go here -->\n                  <Button text=\"CustomFooterBtn\" press=\"onFooterBtnPress\"/>\n                  <OverflowToolbarButton icon=\"sap-icon://settings\" text=\"Settings\" press=\"onSettingsPress\"/>\n               </semantic:customFooterContent>\n\n\n                          <semantic:customShareMenuContent>\n                   <!-- custom share-menu controls go here -->\n                  <Button text=\"CustomShareMenuBtn\" press=\"onShareMenuBtnPress\"/>\n               </semantic: customShareMenuContent >\n\n</semantic:FullscreenPage>\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Name with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"name\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"fn\" (full name) property pointing to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_74\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"fn\" : { \"Path\" : \"PROPERTY\" } }\n```\n\n----------------------------------------\n\nTITLE: Globally Configure Custom Units with Decimals - JavaScript\nDESCRIPTION: This example demonstrates how to add a custom unit with the `decimals` format option. This option defines the number of decimal places to be displayed when formatting the unit. The example defines a new unit called \"lux\" with two decimal places.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/unit-formatting-8e618a8.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.require([\"sap/base/i18n/Formatting\", \"sap/ui/core/format/NumberFormat\"], function(Formatting, NumberFormat) {\n   // define a new unit called Lux\n   Formatting.addCustomUnits({\n       \"lux\": {\n           \"displayName\": \"Lux\",\n           \"unitPattern-count-one\": \"{0} lx\",\n           \"unitPattern-count-other\": \"{0} lx\",\n           \"decimals\": 2\n        }\n     });\n  \n    var oUnitFormat = NumberFormat.getUnitInstance({style:\"long\"});\n \n    console.log(oUnitFormat.format(2.4, \"lux\")); // 2,40 lux (notice the padded 0 after the 4, this is due to the decimals option)\n});\n```\n\n----------------------------------------\n\nTITLE: Function Import Declaration in Metadata - XML\nDESCRIPTION: This snippet defines a function import named `FindUpcomingMeetups` within the `metadata.xml` file.  It specifies the function returns a collection of `Meetup` entities. The `m:HttpMethod` attribute is set to GET.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-4-calling-a-function-import-95e5b87.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<EntityContainer Name=\"Meetups\" m:IsDefaultEntityContainer=\"true\">\n        <EntitySet Name=\"Meetups\" EntityType=\"Meetup.Models.Meetup\" />\n        <FunctionImport Name=\"FindUpcomingMeetups\" EntitySet=\"Meetups\" ReturnType=\"Collection(Meetup.Models.Meetup)\" m:HttpMethod=\"GET\" />\n      </EntityContainer>\n```\n\n----------------------------------------\n\nTITLE: Filtering for external CSS stylesheets in JavaScript\nDESCRIPTION: This function filters the `document.styleSheets` array to return only external CSS stylesheets (i.e., those not part of the standard `library.css`). It uses `sap/ui/core/Theming` to get the current theme and checks if the stylesheet's `href` ends with the theme's `library.css` path. It also checks if the stylesheet has rules defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/common-rule-patterns-3fc1412.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Theming\" required from module \"sap/ui/core/Theming\"\ngetExternalStyleSheets: function() {\n  return Array.from(document.styleSheets).filter(function(styleSheet) {\n    var themeName = Theming.getTheme(),\n      styleSheetEnding = \"/themes/\" + themeName + \"/library.css\",\n      hasHref = !styleSheet.href || !styleSheet.href.endsWith(styleSheetEnding),\n      hasRules = !!styleSheet.rules;\n\n    return hasHref && hasRules;\n  });\n},\n\n```\n\n----------------------------------------\n\nTITLE: Adding Button to Home View - XML\nDESCRIPTION: This XML snippet adds a button to the `Home` view that triggers navigation to the employee list.  The `press` event of the button is bound to the `.onNavToEmployees` event handler defined in the corresponding controller. The button also uses i18n for text.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-navigate-to-routes-with-hard-coded-patterns-782aac0.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.Home\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page title=\"{i18n>homePageTitle}\" class=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<Button id=\"displayNotFoundBtn\" text=\"{i18n>DisplayNotFound}\" press=\".onDisplayNotFound\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t<Button id=\"employeeListBtn\" text=\"{i18n>ShowEmployeeList}\" press=\".onNavToEmployees\" class=\"sapUiTinyMarginEnd\"/>\n\t\t</content>\n\t</Page>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Enabling HCB Theme via URL Parameter\nDESCRIPTION: This code snippet demonstrates how to enable the High Contrast Black (HCB) theme in an OpenUI5 application by appending the `sap_horizon_hcb` URL parameter. The parameter is appended to the base URL of the application. No dependencies required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/high-contrast-themes-for-openui5-controls-cfcbde2.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nhttp://<hostname>:<port>...?<parameter>=<value>&...&<b>sap_horizon_hcb</b>\n```\n\n----------------------------------------\n\nTITLE: Multi-Level Renderer Extension - JavaScript\nDESCRIPTION: This example extends an already extended Renderer, `LabelRenderer`, demonstrating how to create a `FancyLabelRenderer` which calls methods on the base class, allowing for rendering logic reuse and augmentation.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/renderer-object-c9ab345.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define(['mylib/LabelRenderer'],\n    function(LabelRenderer) {\n    \"use strict\";\n\n    var FancyLabelRenderer = LabelRenderer.extend('mylib.FancyLabelRenderer', {\n        render: function(oRM, oControl) {\n\n            // call base renderer\n            LabelRenderer.renderPreamble(oRM, oControl);\n\n            // ... do your own fancy rendering here\n\n            // call base renderer again\n            LabelRenderer.renderPostamble(oRM, oControl);\n        }\n    });\n\n    return FancyLabelRenderer;\n});\n```\n\n----------------------------------------\n\nTITLE: Activate Terminologies via Bootstrap Configuration - HTML\nDESCRIPTION: This snippet demonstrates how to activate terminologies using the `data-sap-ui-active-terminologies` attribute in the bootstrap configuration. The terminologies are specified as a comma-separated list. This is also mainly intended for testing.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/terminologies-eba8d25.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n     type=\"text/javascript\"\n     src=\"resources/sap-ui-core.js\"\n     data-sap-ui-active-terminologies=\"travel,services\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Annotation Helper in Expression Binding\nDESCRIPTION: This JavaScript code showcases the use of the `sap.ui.model.odata.AnnotationHelper.format` method within an expression binding to format meta data values.  It formats both the value and threshold.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-bindings-604b1eb.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{= '{= $' + ${path : 'meta>value, formatter :\n'sap.ui.model.odata.AnnotationHelper.format'} + ' > ' + ${path : 'meta>threshold',\nformatter : 'sap.ui.model.odata.AnnotationHelper.format'} + ' }' }\n// --> {= ${path : 'path/to/property/value', type : 'sap.ui.model.odata.type.Int16'} > 42 }\n```\n\n----------------------------------------\n\nTITLE: Transforming sap:deletable-path to DeleteRestrictions with Path\nDESCRIPTION: This snippet shows how `sap:deletable-path` is converted into the `Org.OData.Capabilities.V1.DeleteRestrictions` annotation, using a path expression to determine deletability based on a boolean property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\nsap:deletable-path = \"AnyPath\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Capabilities.V1.DeleteRestrictions\": { \"Deletable\" : { \"Path\" : \"AnyPath\" } }\n```\n\n----------------------------------------\n\nTITLE: Defining SAPUI5 module with global jQuery dependency (legacy)\nDESCRIPTION: This code snippet demonstrates how a SAPUI5 module was defined with a global jQuery dependency. The `jQuery` object is implicitly available without being explicitly declared as a dependency in the `sap.ui.define` function. This approach is deprecated.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([], function() {\n  var oDomRef = jQuery(\"#myElement\").firstFocusableDomRef();\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Element Modification\nDESCRIPTION: Shows how to dynamically modify the HTML of a button element through the browser's developer tools to add a CSS class. This immediately changes the appearance of the button and demonstrates how to quickly test different styling options.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-browser-developer-tools-eadd60a.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"container-HeapOfShards---app--myButton\" data-sap-ui=\"container-HeapOfShards---app--myButton\" aria-describedby=\"__text1\"\n\tclass=\"sapMBtn sapMBtnBase sapMBtnInverted sapUiLargeMargin\">\n</button>\n```\n\n----------------------------------------\n\nTITLE: Mocking sap/base/Log Module for Testing\nDESCRIPTION: This snippet shows how to mock or spy on the new modules, specifically sap/base/Log, within a QUnit test. It uses sinon.js to create a spy on the warning function of the Log module. The Log module must be loaded using sap.ui.require before spying. After testing, the spy needs to be restored.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-20f6ea7.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/base/Log\"],function(Log){\n\n    QUnit.test(\"My Test\", function(assert) {\n\n        var oLogSpy = sinon.spy(Log, \"warning\");\n\n        ...\n\n        assert.equal(oLogSpy.callCount, 1, \"Warning should be logged\");\n\n        Log.warning.restore();\n\n    });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Creating ResumeProjects View (XML)\nDESCRIPTION: This XML snippet defines the structure of the `ResumeProjects.view.xml` file. It uses an `sap.m.Text` control to display the `Projects` data bound from the model. It leverages the `sap.ui.core.mvc` namespace for defining the view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-navigate-with-flip-transition-3e5f6f3.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\">\n\t<Text text=\"{Projects}\"/>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Limiting Istanbul instrumentation to a single file via JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to limit Istanbul instrumentation to a single file by setting the `data-sap-ui-cover-only` attribute on the script tag dynamically. It queries the DOM for the coverage script and then sets the attribute. This method provides runtime configuration.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oScript = document.querySelector('script[src$=\"qunit/qunit-coverage-istanbul.js\"]');\nif (oScript) {\n    oScript.setAttribute(\"data-sap-ui-cover-only\", \"sap/ui/core/Popup.js\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating App.view.xml with FlexibleColumnLayout (OpenUI5)\nDESCRIPTION: This code snippet demonstrates how to create a new `App.view.xml` file containing an instance of the `sap.f.FlexibleColumnLayout` control. The view is defined using XML and utilizes the `sap.f` namespace. The `backgroundDesign` is set to \"Solid\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-creating-an-empty-flexible-column-layout-bf38e4d.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tdisplayBlock=\"true\"\n\theight=\"100%\"\n\txmlns=\"sap.f\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t\t<FlexibleColumnLayout id=\"flexibleColumnLayout\" backgroundDesign=\"Solid\"></FlexibleColumnLayout>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Accessing OpenUI5 Version at Runtime (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to access the OpenUI5 version at runtime using `sap.ui.require`. It loads the `sap/ui/VersionInfo` and `sap/base/util/Version` modules and then retrieves the version information.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/versioning-and-maintenance-of-openui5-91f0214.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.require([\n    \"sap/ui/VersionInfo\",\n    \"sap/base/util/Version\"\n], (VersionInfo, VersionUtil) => {\n    VersionInfo.load().then(oCurrentVersionInfo => {\n    const oOpenUI5Version = new VersionUtil(oCurrentVersionInfo.version);\n        // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Anchor Bar Button in XML - SAPUI5\nDESCRIPTION: This XML snippet demonstrates how to define a custom button for a section within the anchor bar of an ObjectPageLayout. It uses the `customAnchorBarButton` aggregation to specify a `sap.m.Button` with custom text. The event `press` can be handled to customize the button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/anchor-bar-370b679.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<ObjectPageSection>\n    <customAnchorBarButton>\n        <m:Button text=\"Employee Info\"/>\n    </customAnchorBarButton>\n</ObjectPageSection>\n```\n\n----------------------------------------\n\nTITLE: Entering Text and Keeping Focus with OPA5\nDESCRIPTION: This snippet demonstrates how to enter text into a `sap.m.Input` and keep the focus on the input field using the `keepFocus` property of the `EnterText` action. This is useful when the input has suggestions that need to remain open after text entry.  It then selects a suggestion from the list.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/simulating-user-interactions-on-controls-8615a0b.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Show the suggestion list with filter \"Jo\"\noOpa.waitFor({\n    id: \"formInput\",\n    actions: new EnterText({\n        text: \"Jo\",\n        keepFocus: true\n    }),\n    success: function (oInput) {\n        // Select a suggestion by pressing an item with text \"John\".\n        // After the press action, the value of the input should be changed to \"John\".\n        // Note that the focus will remain in the input field.\n        this.waitFor({\n            controlType: \"sap.m.StandardListItem\",\n            matchers: [\n                new Ancestor(oInput),\n                new Properties({\n                    title: \"John\"\n                })\n            ],\n            actions: new Press()\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling HCW Theme via URL Parameter\nDESCRIPTION: This code snippet demonstrates how to enable the High Contrast White (HCW) theme in an OpenUI5 application by appending the `sap_horizon_hcw` URL parameter. The parameter is appended to the base URL of the application. No dependencies required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/high-contrast-themes-for-openui5-controls-cfcbde2.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nhttp://<hostname>:<port>...?<parameter>=<value>&...&<b>sap_horizon_hcw</b>\n```\n\n----------------------------------------\n\nTITLE: Loading Fragment Using Controller's loadFragment\nDESCRIPTION: This JavaScript code demonstrates how to load a fragment using the `loadFragment` method available on controller instances in OpenUI5. This method automatically prefixes the fragment's content IDs with the view ID, preventing ID collisions. The fragment `my.useful.UiPartZ` is loaded asynchronously.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/ids-in-declarative-fragments-0715706.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/Controller\"], function(Controller){\n\n   return Controller.extend({\n\n      onInit: function(){\n         this.loadFragment({\n            name: \"my.useful.UiPartZ\"\n         }).then(function(oFragment){\n            // ...\n         }); // Button ID will be prefixed by the view ID\n      }\n   })\n  \n});\n```\n\n----------------------------------------\n\nTITLE: Composite Binding Examples with Custom Formatter\nDESCRIPTION: These XML snippets show examples of using a custom formatter function in composite bindings. The first uses the formatter at the root level, while the second uses it for individual parts.  The formatter is called 'formatParts'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-bindings-604b1eb.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n1   <Text text=\"{path: 'title>Label', formatter: 'formatParts'}: {path: 'title>Value', formatter: 'formatParts'}\"/>\n2   <Text text=\"{parts: [{path: 'title>Label', formatter: 'formatParts'}: {path: 'title>Value'}], formatter: 'formatParts'}\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Private APIs - Bad Example\nDESCRIPTION: This example demonstrates the incorrect usage of a 'private' property (`mProperties[\"text\"]`) within an OpenUI5 control. Private members are intended for internal use and are subject to change without notice, potentially breaking your application. It also uses a private property `oSelectDialog._oList.setGrowing(false);` and accesses a binding context's internal structure `oEvent.oSource.oBindingContexts.description.sPath.split('/')[3];` which are all bad practices.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar sText = oControl.mProperties[\"text\"];\n```\n\n----------------------------------------\n\nTITLE: Add UXAP library to manifest.json\nDESCRIPTION: This snippet modifies the `manifest.json` file to include the `sap.uxap` library as a dependency. This is required to use the `sap.uxap.ObjectPageLayout` control in the application. The `minUI5Version` is set to \"1.98.0\" and the sap.f, sap.m, and sap.ui.core libraries are also included.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-5-using-object-page-layout-as-a-detail-page-d1ffe61.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"_version\": \"1.38.0\",\n\t\"sap.app\": {\n\t\t\"id\": \"sap.ui.demo.fcl\",\n\t\t\"type\": \"application\",\n\t\t\"applicationVersion\": {\n\t\t\t\"version\": \"1.0.0\"\n\t\t}\n\t},\n\t\"sap.ui5\": {\n\t\t\"rootView\": {\n\t\t\t\"viewName\": \"sap.ui.demo.fcl.view.App\",\n\t\t\t\"type\": \"XML\",\n\t\t\t\"async\": true,\n\t\t\t\"id\": \"fcl\"\n\t\t},\n\t\t\"dependencies\": {\n\t\t\t\"minUI5Version\": \"1.98.0\",\n\t\t\t\"libs\": {\n\t\t\t\t\"sap.f\": {},\n\t\t\t\t\"sap.m\": {},\n\t\t\t\t\"sap.ui.core\": {},\n\t\t\t\t\"sap.uxap\": {}\n\t\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options (tsconfig.json)\nDESCRIPTION: This code snippet configures the TypeScript compiler options in the tsconfig.json file. It specifies the target ECMAScript version, module system, module resolution strategy, and other compiler settings such as enabling strict mode and allowing JavaScript files. It also defines the root directory, base URL, and path mappings for the project.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-bootstrap-typescript-32b14d8.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"compilerOptions\": {\n      \"target\": \"es2023\",\n      \"module\": \"es2022\",\n      \"moduleResolution\": \"node\",\n      \"skipLibCheck\": true,\n      \"allowJs\": true,\n      \"strict\": true,\n      \"strictPropertyInitialization\": false,\n      \"rootDir\": \"webapp\",\n      \"baseUrl\": \"./\",\n      \"paths\": {\n        \"ui5/walkthrough/*\": [\"webapp/*\"]\n      }\n    },\n    \"include\": [\"webapp/**/*\"]\n  }\n```\n\n----------------------------------------\n\nTITLE: Multiple Unnamed Module Definitions in One File - Avoid\nDESCRIPTION: This example demonstrates the incorrect use of multiple `sap.ui.define` calls within a single JavaScript file. The module loader cannot determine which definition represents the module, leading to errors. The solution is to split the definitions into separate modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-for-loading-modules-4363b3f.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// BAD EXAMPLE - DON'T DO THIS\nsap.ui.define([], function(){\n    ...\n});\nsap.ui.define([], function(){\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Employee List Controller - JavaScript\nDESCRIPTION: This JavaScript snippet defines the `EmployeeList` controller. It extends from `BaseController` and currently contains no additional logic. The empty controller serves as a placeholder for future enhancements to the employee list functionality. The folder structure of the views and controllers is synced to follow a namespace approach.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-6-navigate-to-routes-with-hard-coded-patterns-782aac0.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.EmployeeList\", {\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Middle Name with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"middlename\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"n\" (name) property, where the additional name property points to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_76\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"n\" : { \"additional\" : { \"Path\" : \"PROPERTY\" } } }\n```\n\n----------------------------------------\n\nTITLE: Paging Configuration in XML Table\nDESCRIPTION: This XML snippet demonstrates how to configure paging in an OpenUI5 table using OData V4. It sets the `path` to an OData collection and specifies the `$expand` parameter. The `visibleRowCount` property determines the initial number of rows displayed and influences the `$top` parameter in the OData request. Note that adding `$top` and `$skip` for a nested collection is not supported.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/initialization-and-read-requests-fccfb2e.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<table:Table id=\"PeopleTable\" width=\"auto\" title=\"People\" visibleRowCount=\"7\"\n        rows=\"{\n            path:'/People(\\'angelhuffman\\')/Friends',\n            parameters: {\n                $expand:'Friends'\n            }\n        }\">\n \n    <table:columns>\n    ...\n    </table:columns>\n</table:Table>\n\n```\n\n----------------------------------------\n\nTITLE: Button Support Rules - JavaScript\nDESCRIPTION: This snippet shows the content of `Button.support.js`, which contains the rules related to the `sap.m.Button` control.  It returns a single rule object.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/create-a-ruleset-for-a-library-b5a5135.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/support/library\"],\n  function(SupportLib) {\n    \"use strict\";\n    var buttonRule = {…};\n\n    return buttonRule;\n  }, true);\n```\n\n----------------------------------------\n\nTITLE: Initializing DateFormatter and Formatting Date (Initial)\nDESCRIPTION: This snippet defines a DateFormatter class that extends sap.ui.base.Object. It initializes a time formatter using DateFormat.getTimeInstance with a short style. The format function returns the time if the date is today, \"Yesterday\" if it was yesterday, or an empty string if the date is null. A helper function, _getElapsedDays, calculates the number of days between the input date and the current time.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/ui/core/format/DateFormat\"\n], function(Object, DateFormat) {\n\treturn Object.extend(\"sap.ui.demo.bulletinboard.model.DateFormatter\", {\n\t\tconstructor : function(oProperties) {\n\t\t\tthis.timeFormat = DateFormat.getTimeInstance({\n\t\t\t\tstyle : \"short\"\n\t\t\t}, oProperties.locale);\n\t\t\tthis.now = oProperties.now;\n\t\t},\n\t\tformat : function(oDate) {\n\t\t\tif (!oDate) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tvar iElapsedDays = this._getElapsedDays(oDate);\n\t\t\tif (iElapsedDays === 0) {\n\t\t\treturn this.timeFormat.format(oDate);\n\t\t\t} else if (iElapsedDays === 1) {\n\t\t\t\treturn \"Yesterday\";\n\t\t\t}\n\t\t},\n\t\t_getElapsedDays : function(oDate) {\n\t\t\tvar iElapsedMilliseconds = this.now() - oDate.getTime();\n\t\t\tvar fElapsedDays = iElapsedMilliseconds / 1000 / 60 / 60 / 24;\n\t\t\treturn Math.floor(fElapsedDays);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Simulating a Press Event with Key Modifiers in OPA5\nDESCRIPTION: This code snippet shows how to simulate a `press` event with key modifiers (Alt, Shift, Ctrl) on a button using OPA5. The `Press` action is configured with `altKey`, `shiftKey`, and `ctrlKey` properties set to `true`.  This is useful for testing keyboard shortcuts.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/simulating-user-interactions-on-controls-8615a0b.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\noOpa.waitFor({\n    id: \"myButton\",\n    actions: new Press({\n        altKey: true,\n        shiftKey: true,\n        ctrlKey: true\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Suppressing Re-rendering Test with Event Delegate - JS\nDESCRIPTION: This QUnit test verifies that a control (sap/m/Label) correctly suppresses re-rendering when its tooltip property is set. It uses an event delegate to spy on the `onBeforeRendering` function and asserts that it is not called when the tooltip is changed. The test also verifies that the tooltip property is set correctly and that the DOM attribute is updated accordingly. This demonstrates how to test the re-rendering behavior of OpenUI5 controls and ensure that they are optimized for performance.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-testing-controls-with-qunit-0ddcc60.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// \"Label\" required from module \"sap/m/Label\"\n// \"nextUIUpdate\" required from module \"sap/ui/test/utils/nextUIUpdate\"\nQUnit.test(\"Should suppress rerendering when tooltip is set\", async(assert) => { \n    // Arrange\n    const oConstructor = {\n        tooltip : \"foo\"\n        };\n    const oRerenderingSpy = this.spy();\n\n    // System under Test\n    const oLabel = new Label(oConstructor);\n    oLabel.placeAt(\"qunit-fixture\");\n\n    // wait for rendering\n    await nextUIUpdate();\n\n    oLabel.addEventDelegate({\n        onBeforeRendering : oRerenderingSpy\n    });\n\n    // Act\n    oLabel.setTooltip(\"bar\");\n\n   // wait for rendering\n    await nextUIUpdate();\n\n    // Assert\n    assert.strictEqual(oRerenderingSpy.callCount, 0, \"Did not rerender\");\n    assert.strictEqual(oLabel.getTooltip(), \"bar\", \"Tooltip property got set\");\n    assert.strictEqual(oLabel.$().attr(\"title\"), \"bar\", \"Tooltip got updated\");\n\n    // Cleanup\n    oLabel.destroy();\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Suite Definition - JavaScript\nDESCRIPTION: This JavaScript code defines a QUnit test suite, adding test pages for unit and integration tests. It retrieves the context path and adds test pages using relative paths. Dependencies: QUnit, jsUnitTestSuite. Input: None. Output: QUnit test suite object.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/make-your-app-csp-compliant-1f81a09.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.suite = function() {\n\t\"use strict\";\n\n\tvar oSuite = new parent.jsUnitTestSuite(),\n\t\tsContextPath = location.pathname.substring(0, location.pathname.lastIndexOf(\"/\") + 1);\n\n\toSuite.addTestPage(sContextPath + \"unit/unitTests.qunit.html\");\n\toSuite.addTestPage(sContextPath + \"integration/opaTests.qunit.html\");\n\n\treturn oSuite;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in OpenUI5 - JavaScript\nDESCRIPTION: This code snippet sets the log level in an OpenUI5 application to `INFO`. It requires the `Log` module from `sap/base/Log`. Setting the log level to `INFO` will display all messages of level \"INFO\" or more important in the console, which is useful for debugging.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/supportability-c44813d.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n// \"Log\" required from module \"sap/base/Log\"\nLog.setLevel(Log.Level.INFO)\n\n```\n\n----------------------------------------\n\nTITLE: JSON View Structure Example\nDESCRIPTION: Illustrates the basic structure of a JSON view file in OpenUI5. It defines the view type, controller name, and includes UI control definitions within the content aggregation.  Controls are nested according to the desired UI structure. This snippet demonstrates nesting an Image and a Button inside the view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/json-view-deprecated-91f2852.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ \n   \"Type\":\"sap.ui.core.mvc.JSONView\",\n   \"controllerName\":\"sap.hcm.Address\",\n   \"content\": [{\n      \"Type\":\"sap.m.Image\",\n      \"id\":\"MyImage\",\n      \"src\":\"http://www.sap.com/global/ui/images/global/sap-logo.png\"\n   },\n   {\n      \"Type\":\"sap.m.Button\",\n      \"id\":\"MyButton\",\n      \"text\":\"Press Me\"\n\n   }]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Controller Extension using ControllerExtension.use() in UI5 (JS)\nDESCRIPTION: This code snippet demonstrates how to assign a controller extension in a UI5 controller using `ControllerExtension.use()`. The `ControllerExtension.use()` method is a dummy method provided in UI5 type definitions, that is later removed by the UI5 Babel transformer plugin.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-controller-extension-21515f0.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SomeControllerExtension from \"my/some/SomeControllerExtension\";\nimport ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\n\n/**\n * @namespace my.sample\n */\nclass MyController extends Controller {\n  someControllerExtension = ControllerExtension.use(SomeControllerExtension); // use the \"SomeControllerExtension\" extension\n  \n  someMethod() {\n    this.someControllerExtension.doSomething(...);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample Fallback Chain\nDESCRIPTION: Demonstrates how the fallback chain works given an input locale and a fallback locale. The input locale is 'de_DE' and the fallbackLocale is 'en'.  The fallback chain will be checked in the following order: 'de_DE' -> 'de' -> 'en' -> ''\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/supported-locales-and-fallback-chain-ec753bc.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\ninput locale: \"de_DE\"\nfallbackLocale: \"en\"\n\nfallback chain: \"de_DE\" -> \"de\" -> \"en\" -> \"\"\n```\n\n----------------------------------------\n\nTITLE: Unsupported Spread Element as Dependency - JavaScript\nDESCRIPTION: This code demonstrates an unsupported usage of a spread element within the dependency array of `sap.ui.define`. OpenUI5 requires a statically defined array of string literals for dependency declaration, and spread elements are not allowed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Do NOT use a spread element as a parameter\n// in an sap.ui.define or sap.ui.require call.\nconst dependencies = [\n    \"sap/ui/core/mvc/Controller\", \n    \"sap/ui/model/Filter\", \n    \"sap/ui/model/FilterOperator\", \n    \"sap/ui/model/json/JSONModel\"\n];\nsap.ui.define([\n  ...dependencies\n], (Controller, Filter, FilterOperator, JSONModel) => {\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying General Information Section in Detail.view.xml (XML)\nDESCRIPTION: This XML snippet modifies the *General Information* section of the detail page to display the product ID, description, and supplier name using a `sap.ui.layout.form.SimpleForm`.  It uses data binding to the `products` model to populate the `sap.m.Text` controls with the corresponding product data.  Requires the `sap.ui.layout.form` and `sap.m` namespaces.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-enhancing-the-detail-page-e5ee491.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\t\t...\n\t\t<sections>\n\t\t\t<ObjectPageSection title=\"General Information\">\n\t\t\t\t<subSections>\n\t\t\t\t\t<ObjectPageSubSection>\n\t\t\t\t\t\t<blocks>\n\t\t\t\t\t\t\t<form:SimpleForm\n\t\t\t\t\t\t\t\tmaxContainerCols=\"2\"\n\t\t\t\t\t\t\t\teditable=\"false\"\n\t\t\t\t\t\t\t\tlayout=\"ResponsiveGridLayout\"\n\t\t\t\t\t\t\t\tlabelSpanL=\"12\"\n\t\t\t\t\t\t\t\tlabelSpanM=\"12\"\n\t\t\t\t\t\t\t\temptySpanL=\"0\"\n\t\t\t\t\t\t\t\temptySpanM=\"0\"\n\t\t\t\t\t\t\t\tcolumnsL=\"1\"\n\t\t\t\t\t\t\t\tcolumnsM=\"1\">\n\t\t\t\t\t\t\t\t<form:content>\n\t\t\t\t\t\t\t\t\t<m:Label text=\"Product ID\"/>\n\t\t\t\t\t\t\t\t\t<m:Text text=\"{products>ProductId}\"/>\n\t\t\t\t\t\t\t\t\t<m:Label text=\"Description\"/>\n\t\t\t\t\t\t\t\t\t<m:Text text=\"{products>Description}\"/>\n\t\t\t\t\t\t\t\t\t<m:Label text=\"Supplier\"/>\n\t\t\t\t\t\t\t\t\t<m:Text text=\"{products>SupplierName}\"/>\n\t\t\t\t\t\t\t\t</form:content>\n\t\t\t\t\t\t\t</form:SimpleForm>\n\t\t\t\t\t\t</blocks>\n\t\t\t\t\t</ObjectPageSubSection>\n\t\t\t\t</subSections>\n\t\t\t</ObjectPageSection>\n\t\t\t...\n\n```\n\n----------------------------------------\n\nTITLE: XML View - Correct Button Tag Case\nDESCRIPTION: This code snippet demonstrates the correct way to define a Button control in an XML view in OpenUI5. The tag must start with a capital letter following the namespace (e.g., <Button>). Using correct casing is crucial for the application to function correctly, especially on case-sensitive operating systems.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/an-empty-page-comes-up-51fe8f4.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Click me\" />\n```\n\n----------------------------------------\n\nTITLE: Add Sales Amount and Currency Code to JSON Model - JSON\nDESCRIPTION: This JSON snippet adds two new properties, `salesAmount` and `currencyCode`, to the existing data model. These properties will be used to display and format the sales amount in the UI. The `salesAmount` is a numeric value, and `currencyCode` is a string representing the currency.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-10-property-formatting-using-data-types-9252ee4.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"firstName\": \"Harry\",\n\t\"lastName\": \"Hawk\",\n\t\"enabled\": true,\n\t\"address\": {\n\t\t\"street\": \"Dietmar-Hopp-Allee 16\",\n\t\t\"city\": \"Walldorf\",\n\t\t\"zip\": \"69190\",\n\t\t\"country\": \"Germany\"\n\t},\n\t\"salesAmount\": 12345.6789,\n\t\"currencyCode\": \"EUR\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Family Name with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"familyname\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"n\" (name) property, where the surname property points to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_77\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"n\" : { \"surname\" : { \"Path\" : \"PROPERTY\" } } }\n```\n\n----------------------------------------\n\nTITLE: Defining a Formatter Function (Empty)\nDESCRIPTION: This code snippet defines a formatter function called `priceState` within the `formatter.js` file. This function is initially left empty as part of the Test-Driven Development (TDD) approach. The purpose of the function is to convert a numeric price value into a semantic state value (e.g., Success, Warning, Error).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-a-first-unit-test-b81736e.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([], function () {\n\t   \"use strict\";\n\t   return {\n\t\t      numberUnit: function (sValue) {\n\t\t             // …\n\t\t      },\n\t\t      priceState: function () {\n\t   }\n\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Setting subSectionLayout in XML\nDESCRIPTION: This code snippet shows how to set the `subSectionLayout` property of the ObjectPageLayout using XML.  The subSectionLayout property controls how the blocks are arranged within the subsections, either with titles on top or on the left.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-layout-2e61ab6.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<ObjectPageLayout id=\"ObjectPageLayout\" subSectionLayout=\"titleOnTop\">\n        <sections>\n            <ObjectPageSection title=\"Payroll\" >\n                <subSections>\n                    <ObjectPageSubSection title=\"sub payroll title\">\n                        <blocks>\n                            <myNameSpace:myBlock/>\n                            <myNameSpace:myBlock/>\n                            <myNameSpace:myBlock/>\n                        </blocks>\n                    </ObjectPageSubSection>\n                </subSections>\n            </ObjectPageSection>\n        </sections>\n    </ObjectPageLayout>\n```\n\n----------------------------------------\n\nTITLE: Setting Selected Section on Object Page in XML - OpenUI5\nDESCRIPTION: This XML snippet shows how to set the `selectedSection` property of the `ObjectPageLayout` to specify which section should be displayed initially.  It defines an `ObjectPageLayout` with a section identified by `mySectionId`.  Upon loading, the page will automatically scroll to this section. It requires the sap.uxap library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/object-page-scrolling-bc410e9.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <ObjectPageLayout id=\"ObjectPageLayout\" selectedSection=\"mySectionId\">\n        <sections>\n            <ObjectPageSection title=\"Payroll\" id=\"mySectionId\">\n                <subSections>\n                    <ObjectPageSubSection title=\"sub payroll title\">\n                        <blocks>\n                            <myNameSpace:myBlock/>\n                            <myNameSpace:myBlock/>\n                            <myNameSpace:myBlock/>\n                        </blocks>\n                    </ObjectPageSubSection>\n                </subSections>\n            </ObjectPageSection>\n        </sections>\n    </ObjectPageLayout>\n```\n\n----------------------------------------\n\nTITLE: Retrieve Unit Display Name from CLDR - JavaScript\nDESCRIPTION: Retrieves and logs the display name of a unit ('speed-mile-per-hour') from the CLDR data. Requires sap/ui/core/Locale and sap/ui/core/LocaleData.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/unit-formatting-8e618a8.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/Locale\", \"sap/ui/core/LocaleData\"],\n    function(Locale, LocaleData) {\n    console.log(LocaleData.getInstance(new Locale(\"en\")).getUnitDisplayName(\"speed-mile-per-hour\")); // output: miles/hour\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level with jQuery.sap.log (Old)\nDESCRIPTION: This snippet demonstrates the old way of setting the log level using jQuery.sap.log. It directly accesses the jQuery.sap.log object and sets the level using either a numeric value or the jQuery.sap.log.Level enum. This approach is deprecated with the new module system.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-20f6ea7.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\njQuery.sap.log.setLevel(3);\n// OR\njQuery.sap.log.setLevel(jQuery.sap.log.Level.INFO);\n```\n\n----------------------------------------\n\nTITLE: Using I18NText Matcher in OPA\nDESCRIPTION: This snippet uses the `sap.ui.test.matchers.I18NText` matcher to find a `sap.m.Button` control with the text property that matches the I18N key \"search\". `Opa5` is used to wait for the button.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-controls-21aeff6.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn new Opa5().waitFor({\n    controlType : \"sap.m.Button\",\n    matchers : new sap.ui.test.matchers.I18NText({\n        propertyName: \"text\",\n        key: \"search\"\n    }),\n    success : function () {\n        Opa5.assert.ok(true, \"Search button is matched\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Point to VerticalLayout in JS View\nDESCRIPTION: This JavaScript snippet demonstrates how to add an extension point to an aggregation of a `VerticalLayout` control in an OpenUI5 JS view. It uses `sap.ui.extensionpoint` with parameters for the view instance, extension point name, target control (oLayout), and target aggregation (content).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/06_Extending_SAPUI5_Applications/view-extension-403c050.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[...] \n      createContent(oController){\n         var oLayout = new sap.ui.layout.VerticalLayout(\"Layout1\");\n         sap.ui.extensionpoint(this, \"extension4\", null, oLayout, \"content\" /*not mandatory, as content is the default aggregation*/);\n      }\n[...]\n\n```\n\n----------------------------------------\n\nTITLE: Defining HelloPanel.controller.js (JavaScript)\nDESCRIPTION: This JavaScript snippet defines the controller for the HelloPanel view. It includes the onShowHello function, which handles the button press event.  It retrieves the message from the i18n model, replaces the recipient name, and displays it using MessageToast. It depends on sap/ui/core/mvc/Controller and sap/m/MessageToast modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-nested-views-df8c9c3.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n   \"sap/ui/core/mvc/Controller\",\n   \"sap/m/MessageToast\"\n], (Controller, MessageToast) => {\n   \"use strict\";\n\n   return Controller.extend(\"ui5.walkthrough.controller.HelloPanel\", {\n      onShowHello() {\n         // read msg from i18n model\n         const oBundle = this.getView().getModel(\"i18n\").getResourceBundle();\n         const sRecipient = this.getView().getModel().getProperty(\"/recipient/name\");\n         const sMsg = oBundle.getText(\"helloMsg\", [sRecipient]);\n\n         // show message\n         MessageToast.show(sMsg);\n      }\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.padLeft with String.prototype.padStart (Native)\nDESCRIPTION: This snippet shows how to replace `jQuery.sap.padLeft` with the native `String.prototype.padStart` method.  `padStart` pads the current string with another string (repeated, if needed) so that the resulting string reaches a given length.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"a\".padStart(110, \"0\");\n```\n\n----------------------------------------\n\nTITLE: Extending OPA5 Configuration with autoWait - JavaScript\nDESCRIPTION: This code snippet demonstrates how to extend the default OPA5 configuration by setting the `autoWait` property to `true`. When `autoWait` is enabled, every `waitFor` statement will execute extra checks to ensure the UI is in a stable state before proceeding, such as waiting for XMLHttpRequests to complete. This enhances the reliability and stability of OPA5 tests by preventing actions from being executed prematurely.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/01_Whats-New/what-s-new-in-openui5-1-42-468b05d.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nOpa5.extendConfig({\n    autoWait: true\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming LanguageTag to Locale in OpenUI5\nDESCRIPTION: This JavaScript code demonstrates how to transform a LanguageTag obtained from `sap/base/i18n/Formatting` into a `sap/ui/core/Locale` object. This is a replacement strategy for deprecated APIs that previously returned a Locale object directly.  The code also shows an alternative approach by adjusting the usage of locale to the new `LanguageTag` API, accessing the language component directly.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-configuration-api-2acafbf.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// either transform LanguageTag into Locale and use as before\nsap.ui.require([\n    \"sap/base/i18n/Formatting\",\n    \"sap/ui/core/Locale\"\n], (Formatting, Locale) => {\n    // Transform LanguageTag to Locale\n    const oFormatLocale = new Locale(Formatting.getLanguageTag());\n    const sFormatLanguage = oFormatLocale.getLanguage();\n});\n \n// or adjust usage of Locale to LanguageTag API\nsap.ui.require([\n    \"sap/base/i18n/Formatting\"\n], (Formatting) => {\n    const oFormatLanguageTag = Formatting.getLanguageTag();\n    const sFormatLanguage = oFormatLanguageTag.language;\n});\n```\n\n----------------------------------------\n\nTITLE: Supported Template Literal Dependency - JavaScript\nDESCRIPTION: This code showcases a supported scenario where a template literal without any expressions is used as a dependency in `sap.ui.define`. OpenUI5 allows template literals as long as they are effectively static strings.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Using template literals without any expressions inside\n// an sap.ui.define or sap.ui.require call is supported\nsap.ui.define([\n  `sap/ui/core/mvc/Controller`\n], (Controller) => {\n});\n```\n\n----------------------------------------\n\nTITLE: Iterating through elements using Support Assistant scope in JavaScript\nDESCRIPTION: Demonstrates how to iterate through elements obtained from the Support Assistant scope. This snippet fetches elements using `oScope.getElements()` and iterates through them to perform checks or analysis within a Support Assistant rule.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/common-rule-patterns-3fc1412.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar mElements = oScope.getElements();\nfor (var n in mElements) {\n  ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Compact Density in XML View - OpenUI5\nDESCRIPTION: This snippet demonstrates how to set the 'Compact' density for an XML view by adding the `sapUiSizeCompact` CSS class to the root element of the view. This ensures all controls within the view will render using the compact density.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/how-to-use-densities-for-controls-13e6f3b.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View class=\"sapUiSizeCompact\" xmlns=....>\n   ...\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Template Repeat with Filtering\nDESCRIPTION: This XML snippet demonstrates filtering within the `<template:repeat>` instruction to iterate over `FieldGroup` annotations. It uses the `@sapui.name` path to filter annotations based on their name, ensuring that only annotations starting with 'com.sap.vocabularies.UI.v1.FieldGroup' are included in the iteration.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/repeat-512e545.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<template:repeat list=\"{path:'entityType>', filters: {path: '@sapui.name', operator: 'StartsWith', value1: 'com.sap.vocabularies.UI.v1.FieldGroup'}}\" var=\"fieldGroup\">\n  <form:SimpleForm>\n    <form:title>\n      <core:Title text=\"{path: 'fieldGroup>Label', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\"/>\n    </form:title>\n    <template:repeat list=\"{fieldGroup>Data}\" var=\"field\">\n      <Label text=\"{path: 'field>Label', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\"/>\n      <core:Fragment fragmentName=\"sap.ui.core.sample.ViewTemplate.scenario.Field\" type=\"XML\"/>\n    </template:repeat>\n  </form:SimpleForm>\n</template:repeat>\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Note with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"note\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"note\" property pointing to the given property's path in OData V4. PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_81\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"note\" : { \"Path\" : \"PROPERTY\" } }\n```\n\n----------------------------------------\n\nTITLE: Loading Root View Asynchronously - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to configure the loading of the root view asynchronously within the Component.js file. Asynchronous loading improves performance by allowing the browser to load resources in parallel.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/01_Whats-New/what-s-new-in-openui5-1-52-849e1b6.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrootView : {\n                viewName: \"sap.m.sample.ActionListItem.List\",\n                type: \"XML\",\n                async: true,\n                id: \"app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Analytics Measure with OData V2 Annotation\nDESCRIPTION: This code snippet showcases how the `sap:aggregation-role=\"measure\"` annotation in OData V2 is converted to the `com.sap.vocabularies.Analytics.v1.Measure` annotation with a boolean value of \"true\" in OData V4. The OData V2 annotation indicates that the property represents a measure in analytics, and the OData V4 annotation expresses the same meaning.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_60\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Analytics.v1.Measure\" : { \"Bool\" : \"true\" }\n```\n\n----------------------------------------\n\nTITLE: CSS Math Function Escaping in LESS\nDESCRIPTION: This code snippet demonstrates how to escape CSS math functions within LESS files to prevent incorrect calculations and syntax errors. It shows examples for the `calc` and `min + calc` functions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/control-development-guidelines-theming-css-5e08ff9.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.sapUiMyControl {\n    width: ~\"calc(100% - 3rem)\";\n}\n```\n\n----------------------------------------\n\nTITLE: XML Button with Parameterized Controller Event Handler\nDESCRIPTION: This code snippet illustrates passing a string literal as a parameter to the `.doSomething` function in the controller when the button is pressed.  The event object is not passed when parameters are specified.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/handling-events-in-xml-views-b0fb4de.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Button text=\"Press Me\" press=\".doSomething('Hello World')\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining static title in Target\nDESCRIPTION: This code snippet demonstrates how to define a static title for a target in OpenUI5 routing configuration. The `title` property is set to \"Products Overview\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-the-title-property-in-targets-1238d70.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    ...,\n    \"routes\": [{\n        \"pattern\": \"products/overview\",\n        \"name\": \"ProductsOverview\",\n        \"target\": \"products\"\n    }],\n    \"targets\": {\n        \"products\": {\n            \"type\": \"View\",\n            \"path\": \"shop.products\",\n            \"title\": \"Products Overview\"\n\n        }\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing List Controller with Search and Sort in OpenUI5 (JavaScript)\nDESCRIPTION: This code initializes the List controller.  It sets up the view, a descending sort flag, and references the products table and router. The onSearch function filters the product list based on the search query. The `onSort` function toggles the sorting order of the product list.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-using-the-flexible-column-layout-semantic-helper-276f001.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/MessageBox\"\n], function (Controller, Filter, FilterOperator, Sorter, MessageBox) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.List\", {\n\t\tonInit: function () {\n\t\t\tthis.oView = this.getView();\n\t\t\tthis._bDescendingSort = false;\n\t\t\tthis.oProductsTable = this.oView.byId(\"productsTable\");\n\t\t\tthis.oRouter = this.getOwnerComponent().getRouter();\n\t\t},\n\n\t\tonSearch: function (oEvent) {\n\t\t\tvar oTableSearchState = [],\n\t\t\tsQuery = oEvent.getParameter(\"query\");\n\n\t\t\tif (sQuery && sQuery.length > 0) {\n\t\t\t\toTableSearchState = [new Filter(\"Name\", FilterOperator.Contains, sQuery)];\n\t\t\t}\n\n\t\t\tthis.oProductsTable.getBinding(\"items\").filter(oTableSearchState, \"Application\");\n\t\t},\n\n\t\tonAdd: function () {\n\t\t\tMessageBox.information(\"This functionality is not ready yet.\", {title: \"Aw, Snap!\"});\n\t\t},\n\n\t\tonSort: function () {\n\t\t\tthis._bDescendingSort = !this._bDescendingSort;\n\t\t\tvar oBinding = this.oProductsTable.getBinding(\"items\"),\n\t\t\toSorter = new Sorter(\"Name\", this._bDescendingSort);\n\n\t\t\toBinding.sort(oSorter);\n\t\t},\n\n\t\tonListItemPress: function (oEvent) {\n\t\t\tvar productPath = oEvent.getSource().getBindingContext(\"products\").getPath(),\n\t\t\t\tproduct = productPath.split(\"/\").slice(-1).pop(),\n\t\t\t\toNextUIState;\n\t\t\tthis.getOwnerComponent().getHelper().then(function (oHelper) {\n\t\t\t\toNextUIState = oHelper.getNextUIState(1);\n\t\t\t\tthis.oRouter.navTo(\"detail\", {\n\t\t\t\t\tlayout: oNextUIState.layout,\n\t\t\t\t\tproduct: product\n\t\t\t\t});\n\t\t\t}.bind(this));\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fast Navigation Group (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to set a control as NOT a fast navigation group using JavaScript.  It utilizes the `data` method to set the `sap-ui-fastnavgroup` property to `false` and writes it into the DOM. This can be used to remove a default fast navigation group from a control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/fast-navigation-d23e2cf.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\noControl.data(\"sap-ui-fastnavgroup\", \"false\", true/*Write into DOM*/);\n```\n\n----------------------------------------\n\nTITLE: Testing User Interactions with QUnitUtils - JS\nDESCRIPTION: This QUnit test simulates a user pressing the Escape key on an OpenUI5 Select control. It creates a Select control with items, places it in the DOM, and then uses `QUnitUtils.triggerKeydown` to simulate the key press. Assertions are made to verify that the `onsapescape` method is called, but the `close` method is not. This demonstrates how to test event handling in OpenUI5 controls using QUnit and `sap.ui.test.qunit`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-testing-controls-with-qunit-0ddcc60.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// \"Item\" required from module \"sap/ui/core/Item\"\n// \"Select\" required from module \"sap/m/Select\"\n// \"KeyCodes\" required from module \"sap/ui/events/KeyCodes\"\n// \"nextUIUpdate\" required from module \"sap/ui/test/utils/nextUIUpdate\"\n// \"QUnitUtils\" required from module \"sap/ui/qunit/QUnitUtils\"\nQUnit.test(\"Should close the popup menu if it is open and you press escape\", async(assert) => {\n    // Arrange\n    const oConstructor = {\n        items: [\n        new Item({\n            key: \"0\",\n            text: \"item 0\"\n        }),\n\n        new Item({\n            key: \"1\",\n            text: \"item 1\"\n        })\n       ]\n    };\n\n    // System under test\n    const oSelect = new Select(oConstructor);\n\n    oSelect.placeAt(\"select-content\");\n    await nextUIUpdate();\n\n    // Arrange after rendering\n    oSelect.focus();\n    const fnEscapeSpy = this.spy(oSelect, \"onsapescape\");\n    const fnCloseSpy = this.spy(oSelect, \"close\");\n\n    // Act\n    QUnitUtils.triggerKeydown(oSelect.getDomRef(), KeyCodes.ESCAPE);\n\n    // Assertion\n    assert.strictEqual(fnEscapeSpy.callCount, 1, \"onsapescape() method was called exactly once\");\n    assert.strictEqual(fnCloseSpy.callCount, 0, \"close() method is not called\");\n\n    // Cleanup\n    oSelect.destroy();\n});\n```\n\n----------------------------------------\n\nTITLE: Limiting Istanbul instrumentation to a specific library via HTML\nDESCRIPTION: This snippet demonstrates how to limit the instrumentation to a specific library by setting the `data-sap-ui-cover-only` attribute with the library's path. In this case, it is `sap/ui/core/`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../resources/sap/ui/qunit/qunit-coverage-istanbul.js\"\n\tdata-sap-ui-cover-only=\"sap/ui/core/\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 Tooling locally - npm\nDESCRIPTION: Installs UI5 Tooling as a project dependency. This enables UI5-specific commands within the project's context and ensures consistency across development environments. It's installed as a dev dependency (`-D`) because it's primarily used during development.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-2680aa9.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D @ui5/cli\n```\n\n----------------------------------------\n\nTITLE: Generic Renderer Extension - JavaScript\nDESCRIPTION: Demonstrates how `Renderer.extend` can be used as a generic function to extend renderers that were written as plain objects instead of using the `extend` method directly.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/renderer-object-c9ab345.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define(['sap/ui/core/Renderer', \n               'sap/m/InputBaseRenderer'],\n    function(Renderer, InputBaseRenderer) {\n        \"use strict\";\n        var CustomInputRenderer = Renderer.extend(InputBaseRenderer);\n\n        CustomInputRenderer.render: function(oRM, oControl) {\n            // call base renderer\n            InputBaseRenderer.render(oRM, oControl);\n\n            // ... do your own rendering here\n        }\n        return CustomInputRenderer;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Typed View in JavaScript - OpenUI5\nDESCRIPTION: This JavaScript code defines a typed view (myapp.views.MyView) by extending sap.ui.core.mvc.View. It includes the getControllerModuleName method to specify the controller and createContent to define the view's content. The createContent function asynchronously loads a fragment and creates a Panel control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/typed-view-e6bb33d.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n  \"sap/ui/core/mvc/View\",\n  \"sap/m/Panel\"\n], function(View, Panel) {\n  \"use strict\";\n  return View.extend(\"myapp.views.MyView\", {\n    // define which controller to use\n    getControllerModuleName: function() {\n      return \"myapp/controller/Main\";\n    },\n    // create view content and return the root control\n    createContent: async function(oController) {\n      // \"createContent\" allows for asynchronous actions\n      const someControl = await oController.loadFragment(...);\n\n      return new Panel({\n        //create stable id, prefixed with the view id\n        id: this.createId(\"myPanel\"),\n        headerText: \"My Panel\",\n        content: [someControl, /* ... */]\n      });\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Support Assistant Assertions to OPA5 - JavaScript\nDESCRIPTION: This code snippet showcases how to add custom assertions to OPA5 that leverage the Support Assistant for issue detection and reporting. It includes an example of an assertion that checks for high-severity errors, limiting the analysis to specific rules and a global execution scope. Another example shows how to retrieve and display the final Support Assistant report.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/integrating-the-rules-in-opa-tests-cfabbd4.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nassertions: new Opa5({\n...\niShouldSeeNoHighSeverityErrors: function() {\n  return this.waitFor({\n    success: function() {\n      Opa5.assert.noRuleFailures({\n        \"failOnHighIssues\": true,\n        rules: [{\n          libName: \"sap.ui.core\",\n          ruleId: \"preloadAsyncCheck\"\n        }, {\n          libName: \"sap.ui.core\",\n          ruleId: \"orphanedElement\"\n        }, {\n          libName: \"sap.ui.core\",\n          ruleId: \"deprecatedEntities\"\n        }],\n        executionScope: {\n          type: \"global\"\n        }\n      });\n    }\n  });\n},\niShouldGetSupportRuleReport: function() {\n  return this.waitFor({\n    success: function() {\n      Opa5.assert.getFinalReport();\n    }\n  });\n}\n...\n\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS in XML View\nDESCRIPTION: This XML snippet shows how to apply custom CSS classes to OpenUI5 controls within an XML view. It demonstrates adding the `myAppDemoWT` class to the `App` control for namespacing, and `myCustomButton` to the `Button` control for custom spacing. It also adds the `myCustomText` and `sapThemeHighlight-asColor` classes to the `FormattedText` control for theme-aware highlighting of the output text.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-14-custom-css-and-theme-colors-typescript-4cc841e.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n\t<Shell>\n\t\t<App class=\"myAppDemoWT\">\n\t\t\t<pages>\n\t\t\t\t<Page title=\"{i18n>homePageTitle}\">\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<Panel\n\t\t\t\t\t\t\theaderText=\"{i18n>helloPanelTitle}\"\n\t\t\t\t\t\t\tclass=\"sapUiResponsiveMargin\"\n\t\t\t\t\t\t\twidth=\"auto\">\n\t\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttext=\"{i18n>showHelloButtonText}\"\n\t\t\t\t\t\t\t\t\tpress=\".onShowHello\"\n\t\t\t\t\t\t\t\t\tclass=\"myCustomButton\"/>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tvalue=\"{/recipient/name}\"\n\t\t\t\t\t\t\t\t\tvalueLiveUpdate=\"true\"\n\t\t\t\t\t\t\t\t\twidth=\"60%\"/>\n\t\t\t\t\t\t\t\t<FormattedText\n\t\t\t\t\t\t\t\t\thtmlText=\"Hello {/recipient/name}\"\n\t\t\t\t\t\t\t\t\tclass=\"sapUiSmallMargin sapThemeHighlight-asColor myCustomText\"/>\n\t\t\t\t\t\t\t</content>\n\t\t\t\t\t\t</Panel>\n\t\t\t\t\t</content>\n\t\t\t\t</Page>\n\t\t\t</pages>\n\t\t</App>\n\t</Shell>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Using 'with' Instruction to Change Variable Value - XML\nDESCRIPTION: This code snippet demonstrates the usage of the `<template:with>` instruction in an XML template. It changes the variable's value by assigning `oMetaModel, \"/dataServices/schema/0/entityType/0/com.sap.vocabularies.UI.v1.Badge\"` to the 'badge' variable. The 'badge' variable is only accessible within the scope of this with instruction. The 'path' attribute specifies the model and path, and the 'var' attribute assigns a new name to the model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/with-58cf64c.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<template:with path=\"meta>com.sap.vocabularies.UI.v1.Badge\" var=\"badge\">\n    <!-- ... -->\n</template:with>\n```\n\n----------------------------------------\n\nTITLE: Reference Callback Function in a Class - HTML\nDESCRIPTION: This snippet shows how to specify a callback function that is defined within a JavaScript class for the `change` event of an `sap.m.Input` control (deprecated). The `data-change` attribute points to the fully qualified name of the function, e.g., `my.company.MyClass.handleChange`.  OpenUI5 will then attempt to resolve and execute that function upon the event being triggered.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-events-deprecated-91f15ad.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-sap-ui-type=\"sap.m.Input\" data-value=\"Change me!\" data-change= \"my.company.MyClass.handleChange\"></div>\n```\n\n----------------------------------------\n\nTITLE: Dialog with ariaLabelledBy OpenUI5 JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a Dialog with the `ariaLabelledBy` association in OpenUI5. The `ariaLabelledBy` attribute provides a reference to another control, allowing the screen reader to announce additional text after the title when the dialog opens. It depends on `sap/m/Dialog`, `sap/m/Button`, and `sap/m/Text` modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/dialogs-popups-and-popovers-5709e73.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Dialog required from \"sap/m/Dialog\"\n// Button required from \"sap/m/Button\"\n// Text required from \"sap/m/Text\"\n\nvar oDialog = new Dialog({\n    title: \"Dialog Title\",\n    ariaLabelledBy: \"textId\",\n    content: [\n        new Text({\n            id: \"textId\",\n            text: \"A sample text that will be annoucned by JAWS after the title, when the dialog is opened.\"\n        })\n    ]\n});\n\nvar btn = new Button({\n    text:\"Hello World\",\n    press: function() {\n        oDialog.open();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Fast Navigation Group within a Control during Rendering\nDESCRIPTION: This code snippet shows how to write the `data-sap-ui-fastnavgroup` attribute to an arbitrary DOM element of a control during the rendering process. This is done using the `RenderManager`'s `attr` method in the `render` function. While this approach allows for flexibility, it makes it harder for applications to adapt the behavior.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/defining-groups-for-fast-navigation-10b14c7.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// assuming a renderer that uses the new rendering API\nrender = function(oRm, oControl){\n  //...\n  oRm.attr(\"data-sap-ui-fastnavgroup\", \"true\");\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Step Definition with QUnit Assertion\nDESCRIPTION: This JavaScript code demonstrates how to use QUnit assertions within step definitions. When not using OPA5, `this.assert` provides access to the assertion methods. This example asserts that the state of `this.myWombat` is 'launched'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.register(/^I have launched my wombat$/i, function() {\n  this.assert.strictEqual(this.myWombat.state, \"launched\");\n});\n```\n\n----------------------------------------\n\nTITLE: ComboBox ListItems Aggregation (Deprecated)\nDESCRIPTION: Illustrates how to add ListItems to a ComboBox using declarative aggregation.  This example uses nested `div` elements with the `data-sap-ui-type` attribute to define the ListItems. The ListItems are automatically added to the ComboBox's default aggregation, but is now deprecated.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-aggregations-deprecated-91f136c.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-sap-ui-type=\"sap.ui.commons.ComboBox\" data-value=\"Item 1\">\n  <div data-sap-ui-type=\"sap.ui.core.ListItem\" data-text=\"Item 1\"></div>\n  <div data-sap-ui-type=\"sap.ui.core.ListItem\" data-text=\"Item 2\"></div>\n  <div data-sap-ui-type=\"sap.ui.core.ListItem\" data-text=\"Item 3\"></div>\n  <div data-sap-ui-type=\"sap.ui.core.ListItem\" data-text=\"Item 4\"></div>\n  <div data-sap-ui-type=\"sap.ui.core.ListItem\" data-text=\"Item 5\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Service Metadata Annotation Term - XML\nDESCRIPTION: Illustrates an example of an annotation term, `Org.OData.Capabilities.V1.SortRestrictions`, defined within the service metadata document using XML.  This annotation restricts sorting on `BusinessPartnerID`.  This snippet showcases how annotations can be used to define capabilities and constraints on OData entities.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-annotation-files-fd715d9.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Annotations Target=\"GWSAMPLE_BASIC.GWSAMPLE_BASIC_Entities/BusinessPartnerSet\">\n    <Annotation Term=\"Org.OData.Capabilities.V1.SortRestrictions\">\n        <Record>\n            <PropertyValue Property=\"NonSortableProperties\">\n                <Collection>\n                    <PropertyPath>BusinessPartnerID</PropertyPath>\n                </Collection>\n            </PropertyValue>\n        </Record>\n    </Annotation>\n</Annotations>\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider with CustomScale and Tooltip - JavaScript\nDESCRIPTION: This snippet shows how to create an OpenUI5 slider with a custom scale and tooltip. It sets the min, max, value, width, enables tickmarks and advanced tooltips, and assigns the custom scale and tooltips to the slider. Requires \"sap/m/Slider\", \"sap/xx/custom/CustomScale\", and \"sap/xx/custom/CustomTooltip\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/sliders-84ec82e.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Slider\" required from \"sap/m/Slider\"\n// \"CustomScale\" required from \"sap/xx/custom/CustomScale\"\n// \"CustomTooltip\" required from \"sap/xx/custom/CustomTooltip\"\nvar oSlider = new Slider({\n\t\t\t\tmin: 0,\n\t\t\t\tmax: 30,\n\t\t\t\tvalue: 15,\n\t\t\t\twidth: \"80%\",\n\t\t\t\tenableTickmarks: true,\n\t\t\t\tshowAdvancedTooltip: true,\n\t\t\t\tscale: new CustomScale(),\n\t\t\t\tcustomTooltips: [new CustomTooltip()]\n\t\t\t})\n```\n\n----------------------------------------\n\nTITLE: Cancelling Swipe Event in OpenUI5\nDESCRIPTION: This JavaScript snippet demonstrates how to cancel a swipe event in OpenUI5. It retrieves the control that triggered the swipe event. If the triggering control is an sap.m.Input instance, it calls preventDefault on the event to cancel the swipe action.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/events-e498329.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nhandleSwipe : function(e) {\n         // get which control inside the list item fired swipe event\n        var oSrcControl = e.getParameter(\"srcControl\");\n\n        // check if the event is coming from Input\n        if (oSrcControl instanceof sap.m.Input) {\n            e.preventDefault();   // cancel swipe\n        }\n    },\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Year with OData V2 Annotation\nDESCRIPTION: This code snippet illustrates how the `sap:semantics=\"year\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Common.v1.IsCalendarYear` annotation with a boolean value of \"true\" in OData V4. The OData V2 annotation signifies that the property represents a calendar year, and the OData V4 annotation expresses the same information using a standard vocabulary term.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_61\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.IsCalendarYear\" : {\"Bool\" : \"true\"}\n```\n\n----------------------------------------\n\nTITLE: Unit Tests Entry Point (QUnit)\nDESCRIPTION: This code defines the entry point for all unit tests. It imports the unit test module for the custom formatter, ensuring that the formatter tests are included when running unit tests.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-27-unit-test-with-qunit-e1ce1de.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n    \"./model/formatter\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing ComponentContainer with ID - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize a ComponentContainer with a specific ID. This ensures that the component has a unique identifier, which is crucial for testing and tools that rely on consistent IDs.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/01_Whats-New/what-s-new-in-openui5-1-52-849e1b6.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew ComponentContainer({\n   height : \"100%\",\n   name : \"sap.ui.demo.worklist\",\n   settings : {\n      id : \"worklist\"\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Data Type in JavaScript\nDESCRIPTION: This JavaScript code outlines the structure for defining a custom data type in OpenUI5, extending the `sap.ui.model.SimpleType` class. It requires implementing the `formatValue`, `parseValue`, and `validateValue` methods to handle custom formatting, parsing, and validation logic.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/formatting-parsing-and-validating-data-07e4b92.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/model/SimpleType\"\n], function (SimpleType) {\n    \"use strict\";\n    return SimpleType.extend(\"sap.ui.demo.myCustomType\", {\n\n        formatValue: ...\n\n        parseValue: ...\n\n        validateValue: ...\n\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Unsupported ECMAScript Import - JavaScript\nDESCRIPTION: This code illustrates an unsupported way of loading modules in OpenUI5 using ECMAScript `import` statements. OpenUI5 relies on `sap.ui.define` and `sap.ui.require` for module management. Using `import` and `export` is not compatible with the OpenUI5 module loading mechanism.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Do NOT use ECMAScript import and export statements when loading/defining OpenUI5 modules\nimport Controller from \"sap/ui/core/mvc/Controller\";\nexport class MyController extends Controller {};\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 Tooling\nDESCRIPTION: This command installs the UI5 Tooling globally, allowing you to use UI5 commands from your terminal.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-no-data-binding-4cde849.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --global @ui5/cli\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Bundle Content - JavaScript\nDESCRIPTION: This code snippet defines the content of a resource bundle. It contains a key-value pair where the key is MY_TEXT and the value is Hello World. This allows you to bind this text in XML views.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/resource-model-91f122a.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nMY_TEXT=Hello World\n```\n\n----------------------------------------\n\nTITLE: Text using String Split - XML\nDESCRIPTION: This XML snippet sets the text of a control to the second element of an array generated by splitting the string 'small@middle@long' using the '@' delimiter. It demonstrates string manipulation within an expression. The expression uses embedded binding syntax.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Set text to the second string 'middle', access second element in the array generated via 'split'. -->\ntext=\"{='small@middle@long'.split('@')[1]}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Istanbul Code Coverage via HTML\nDESCRIPTION: This snippet demonstrates how to enable code coverage measurement using Istanbul by including the `qunit-coverage-istanbul.js` script in the HTML head tag. This will instrument and add all executed files to the result by default.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../resources/sap/ui/qunit/qunit-coverage-istanbul.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Limiting Istanbul instrumentation to a specific library via JavaScript\nDESCRIPTION: This JavaScript snippet dynamically sets the `data-sap-ui-cover-only` attribute to limit Istanbul instrumentation to a specific library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oScript = document.querySelector('script[src$=\"qunit/qunit-coverage-istanbul.js\"]');\nif (oScript) {\n    oScript.setAttribute(\"data-sap-ui-cover-only\", \"sap/ui/core/\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Currency and Unit Types in an OpenUI5 Application (XML View)\nDESCRIPTION: This XML view snippet demonstrates how to use the `sap.ui.model.odata.type.Currency` and `sap.ui.model.odata.type.Unit` data types in an OpenUI5 application. It shows the composite binding syntax with the amount/measure, currency code/unit, and the code list customizing information.  The `core:require` section makes the types available for use in the view. The `mode` property is set to TwoWay for the Input fields.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/currency-and-unit-customizing-in-odata-v4-4d1b9d4.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    core:require=\"{\n        Currency: 'sap/ui/model/odata/type/Currency',\n        Unit: 'sap/ui/model/odata/type/Unit'\n    }\">\n    ...\n    <Input value=\"{mode: 'TwoWay', parts: ['WeightMeasure', 'WeightUnit', {mode: 'OneTime', path: '/##@@requestUnitsOfMeasure', targetType: 'any'}], type: 'Unit'}\" />\n    ...\n    <Input value=\"{mode: 'TwoWay', parts: ['Price', 'CurrencyCode', {mode: 'OneTime', path: '/##@@requestCurrencyCodes', targetType: 'any'}], type: 'Currency'}\" />\n    ...\n```\n\n----------------------------------------\n\nTITLE: Adding i18n (German) Text - Properties\nDESCRIPTION: This `i18n_de.properties` snippet adds German translations for the fourth panel's header and the product details labels, providing a localized user experience.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-13-element-binding-6c7c5c2.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n# Screen titles\npanel1HeaderText=Data Binding Grundlagen\npanel2HeaderText=Adressdetails\npanel3HeaderText=Aggregation Binding\npanel4HeaderText=Produktdetails\n \n...\n\n# Product Details\nProductID=Produkt-ID\nProductName=Produktname\nQuantityPerUnit=Menge pro Einheit\nUnitPrice=Preis pro Einheit\nUnitsInStock=Lagerbestand\nDiscontinued=Eingestellt\n```\n\n----------------------------------------\n\nTITLE: Reading Count Separately with ODataPropertyBinding in XML\nDESCRIPTION: This XML snippet demonstrates how to read the count separately using an ODataPropertyBinding with an absolute path to the SalesOrderList collection's `$count` property. This approach allows for retrieving the count directly without relying on the ODataListBinding's header context.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/binding-collection-inline-count-77d2310.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<Title text=\"{/SalesOrderList/$count} Sales Orders\"/>\n```\n\n----------------------------------------\n\nTITLE: Create Empty DateFormatter Class (JS)\nDESCRIPTION: This snippet defines an empty DateFormatter class extending sap.ui.base.Object. This serves as the initial skeleton for the formatter, allowing it to be included in tests even before its core logic is implemented. It returns an extended `sap/ui/base/Object`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/base/Object\"\n], function(Object) {\n\t   return Object.extend(\"sap.ui.demo.bulletinboard.model.DateFormatter\", {\n\t   });\n});\n```\n\n----------------------------------------\n\nTITLE: XML View Binding with templateShareable Property\nDESCRIPTION: This XML snippet demonstrates how to use the `templateShareable` property within an OpenUI5 XML view to configure the lifecycle of a list binding template. It shows the property being set to both `false` and `true` within nested list bindings. The `Table` and `List` controls are bound to OData properties.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/lifecycle-of-binding-templates-3a4a9e5.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Table id=\"EmployeeEquipments\" headerText=\"Employee Equipments\" items=\"{\n    path: 'EMPLOYEE_2_EQUIPMENTS',\n    templateShareable: false\n}\">\n    <columns>\n        <!-- ... -->\n    </columns>\n    <items>\n        <ColumnListItem>\n            <cells>\n                <Text text=\"{ID}\"/>\n            </cells>\n            <cells>\n                <Text text=\"{EQUIPMENT_2_PRODUCT/Name}\"/>\n            </cells>\n            <cells>\n                <Text text=\"{Category}\"/>\n            </cells>\n            <cells>\n                <!-- Name=\"PRODUCT_2_CATEGORY\" Type=\"Collection(...)\" -->\n                <List items=\"{\n                    path: 'EQUIPMENT_2_PRODUCT/PRODUCT_2_CATEGORY',\n                    templateShareable: true\n                }\">\n                    <StandardListItem title=\"{CategoryName}\"/>\n                </List>\n            </cells>\n            <cells>\n                <Text text=\"{EQUIPMENT_2_PRODUCT/PRODUCT_2_SUPPLIER/Supplier_Name}\"/>\n            </cells>\n        </ColumnListItem>\n    </items>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Implement click action on Worklist item using BindingPath\nDESCRIPTION: This code extends the Worklist page object in OPA5 to include an action that simulates a click on a list item with a specific ID.  It uses `sap/ui/test/matchers/BindingPath` to locate the item based on its data binding path, ensuring the correct item is selected even if the list order changes. A `Press` action is used to trigger the click event. Dependencies: `sap/ui/test/Opa5`, `sap/ui/test/matchers/AggregationLengthEquals`, `sap/ui/test/matchers/I18NText`, `sap/ui/test/matchers/BindingPath`, `sap/ui/test/actions/Press`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-testing-navigation-10592af.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\n\t\t'sap/ui/test/Opa5',\n\t\t'sap/ui/test/matchers/AggregationLengthEquals',\n\t\t'sap/ui/test/matchers/I18NText',\n\t\t'sap/ui/test/matchers/BindingPath',\n\t\t'sap/ui/test/actions/Press'\n],   function (Opa5, AggregationLengthEquals, I18NText, BindingPath, Press) {\n\t\t\"use strict\";\n\n\t\tvar sViewName = \"Worklist\",\n\t\t\tsTableId = \"table\";\n\n\t\tOpa5.createPageObjects({\n\t\t\tonTheWorklistPage: {\n\t\t\t\tactions: {\n…\n                        ,\n\t\t\t\t\tiPressOnTheItemWithTheID: function (sId) {\n\t\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\t\tcontrolType: \"sap.m.ColumnListItem\",\n\t\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\t\tmatchers:  new BindingPath({\n\t\t\t\t\t\t\t\tpath: \"/Posts('\" + sId + \"')\"\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tactions: new Press(),\n\t\t\t\t\t\t\terrorMessage: \"No list item with the id \" + sId + \" was found.\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n```\n\n----------------------------------------\n\nTITLE: Operation Parameters Binding in XML View (Option 2)\nDESCRIPTION: This XML snippet shows an alternative approach to binding operation parameters in an XML view. The entire `form:SimpleForm` is bound to the `$Parameter` context, and the input fields directly reference the parameter names without the `$Parameter` prefix (e.g., `{TeamID}`).\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-operations-b54f789.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<Dialog binding=\"{/ChangeTeamBudgetByID(...)}\" id=\"operation2\" title=\"Change Team Budget\">\n    <buttons>\n        ...         \n    </buttons>\n    <form:SimpleForm binding=\"{$Parameter}\">\n        <Label text=\"TeamID\" />\n        <Input value=\"{TeamID}\" />\n        <Label text=\"Budget\" />\n        <Input value=\"{Budget}\" />\n    </form:SimpleForm>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Gherkin Data Table Example\nDESCRIPTION: This example demonstrates how to define a data table in a Gherkin feature file. The data table is placed under a test step and is composed of rows and columns separated by line breaks and pipe characters.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/additional-options-for-feature-files-a509db4.md#_snippet_6\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: lots of data\n  Given I see the following lemmings:\n    | Name    | Age in Months | Role         |\n    | Alice   | 24            | Support      |\n    | Bob     | 70            |              |\n    | Charlie | 120           | Stories      |\n\n```\n\n----------------------------------------\n\nTITLE: Setting Text Property of a Button (deprecated)\nDESCRIPTION: Sets the text property of an `sap.m.Button` control using a `data-text` attribute. This is a deprecated method.  The HTML tag is scanned by the UI5 framework to find the definition of the control.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-properties-deprecated-91f1619.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-sap-ui-type=\"sap.m.Button\" data-text=\"HelloWorld\"></div>\n```\n\n----------------------------------------\n\nTITLE: Add Address Sub-object to JSON Model\nDESCRIPTION: This JSON snippet adds an 'address' sub-object with properties 'street', 'city', 'zip', and 'country' to the existing data model. This allows demonstrating hierarchical data binding within an OpenUI5 application using a JSON model. It defines the structure of the data that will be displayed in the UI.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-8-binding-paths-accessing-properties-in-hierarchically-structured-models-9373793.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"firstName\": \"Harry\",\n\t\"lastName\": \"Hawk\",\n\t\"enabled\": true,\n\t\"address\": {\n\t\t\"street\": \"Dietmar-Hopp-Allee 16\",\n\t\t\"city\": \"Walldorf\",\n\t\t\"zip\": \"69190\",\n\t\t\"country\": \"Germany\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated ID in CSS (Bad)\nDESCRIPTION: This CSS snippet demonstrates the incorrect practice of using generated IDs as CSS selectors in OpenUI5. These IDs are dynamic and can change, leading to broken styles.  Using CSS classes is the preferred approach.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/css-styling-issues-9d87f92.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n#__view1__button0 {\n\tfont-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling autoWait when starting the app in a frame\nDESCRIPTION: This snippet demonstrates how to enable `autoWait` when starting an application using `iStartMyAppInAFrame`.  Setting `autoWait` to true ensures the app is fully loaded before the first test step. This mitigates timeout issues during app startup. It requires the `source` parameter to specify the application's index.html file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-the-autowait-parameter-fb487ef.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nGiven.iStartMyAppInAFrame({\n    source: \"applicationUnderTest/index.html\",\n    autoWait: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Panel Width to Auto with Margin Classes in XML\nDESCRIPTION: This XML snippet demonstrates how to set the width of a Panel to 'auto' and apply margin classes to control the spacing around it. The classes 'sapUiLargeMarginBegin' and 'sapUiLargeMarginBottom' add margins to the beginning (left in LTR, right in RTL) and bottom of the panel.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-predefined-css-margin-classes-777168f.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Panel width=\"auto\" class=\"sapUiLargeMarginBegin\n      sapUiLargeMarginBottom\">\n```\n\n----------------------------------------\n\nTITLE: List Binding with Templates (HTML)\nDESCRIPTION: This snippet shows how to use a template for list binding to populate the content of an `sap.m.Carousel` control. The `data-content` attribute binds the carousel's content to the `/buttons` property of the model. For each item in the `/buttons` array, a new `sap.m.Button` is created using the provided template, with its `text` property bound to the `title` property of the corresponding item.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-data-binding-deprecated-020990b.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-sap-ui-type=\"sap.m.Carousel\" data-content=\"{/buttons}\">\n    <div data-sap-ui-type=\"sap.m.Button\" data-text=\"{title}\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:display-format to IsDigitSequence\nDESCRIPTION: This snippet illustrates the transformation of `sap:display-format = \"NonNegative\"` to `com.sap.vocabularies.Common.v1.IsDigitSequence`: { \"Bool\" : \"true\" }. It signifies that the field should contain only non-negative numeric values.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\nsap:display-format = \"NonNegative\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.IsDigitSequence\": { \"Bool\" : \"true\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Boolean Properties (deprecated)\nDESCRIPTION: Sets the `displayLogoff` and `displayWelcome` properties of an `sap.ui.commons.ApplicationHeader` control to `false` using `data-display-logoff` and `data-display-welcome` attributes. Note the properties with upper case characters are \"escaped\" with a dash character. This is a deprecated method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-properties-deprecated-91f1619.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-sap-ui-type=\"sap.ui.commons.ApplicationHeader\" data-display-logoff=\"false\" data-display-welcome=\"false\"></div>\n```\n\n----------------------------------------\n\nTITLE: Resolve Function Import with gotoFunctionImport helper in XML Template\nDESCRIPTION: This XML snippet shows how to use the `gotoFunctionImport` helper function within a `<template:with>` instruction. It navigates to a function import based on the provided path, storing the result in the `function` variable. The path represents the name the `oContext` points at.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/annotation-helper-dbec058.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n    \n    <template:with path=\"dataField>Action\" helper=\"sap.ui.model.odata.AnnotationHelper.gotoEntityType\" var=\"function\">\n    \n```\n\n----------------------------------------\n\nTITLE: Incorrect HTML: Manual Module Loading via Script Tag\nDESCRIPTION: This HTML snippet demonstrates the incorrect approach of manually loading UI5 modules using `<script>` tags. The module loader will not be aware of this module.  UI5 modules must be loaded and evaluated using the UI5 module loader APIs, such as `sap.ui.require` or `sap.ui.define`. Avoid using script tags for loading UI5 modules.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-for-loading-modules-4363b3f.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<html>\n...\n    <script src=\"https://myhost/mypath/myModule.js\"></script>\n...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Organization Role with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"org-role\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation with the \"role\" property pointing to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_91\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"role\" : { \"Path\" : \"PROPERTY\" } }\n```\n\n----------------------------------------\n\nTITLE: Get Element by ID in Controller, Fragment ID, OpenUI5\nDESCRIPTION: Retrieves a control instance using its ID when the fragment is embedded in a view and the code is inside a controller, and a fragment ID was given. Requires `sap/ui/core/Fragment` module. Uses `this.byId` in conjunction with `Fragment.createId` to find the control within the fragment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/retrieving-control-instances-by-their-id-8b32551.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyControl = this.byId(Fragment.createId(\"myFrag\", \"myControl\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Resources in Manifest (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how resources are defined in the manifest file (manifest.json). It uses objects for JavaScript and CSS resources, with the uri property specifying the file path.  Note: Usage of `js` resources is deprecated since 1.94, prefer regular `dependencies` instead.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/migrating-from-component-metadata-to-manifest-e282db2.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n\"resources\": {\n    \"js\": [ //deprecated since 1.94\n        {\n            \"uri\": \"script.js\"\n        }\n    ],\n    \"css\": [\n        {\n            \"uri\": \"style.css\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Karma with a specific configuration file\nDESCRIPTION: This command starts Karma using a specific configuration file (e.g., `karma-ci.conf.js`). This allows you to have different configurations for local development and CI environments.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-automation-ae44824.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nkarma start karma-ci.conf.js\n```\n\n----------------------------------------\n\nTITLE: Custom onfocusfail Handler in OpenUI5\nDESCRIPTION: This code provides a custom `onfocusfail` handler for an OpenUI5 control, which redirects focus to a specified alternative element (a `TextArea`) when the original element (`Button`) loses focus (e.g., when disabled). It relies on parent-child aggregation to trigger `focusfail` event correctly.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/implementing-focus-handling-91f19f0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n    \"sap/ui/core/Control\",\n    \"sap/m/Button\",\n    \"sap/m/TextArea\"\n], (Control, Button, TextArea) => {\n    \"use strict\";\n\n    return Control.extend(\"my.custom.SampleControl3\", {\n        metadata: {\n            aggregations: {\n                \"_myButton\": {\n                    multiple: false,\n                    visibility: \"hidden\",\n                    type: \"sap.m.Button\"\n                },\n                \"_myTextArea\": {\n                    multiple: false,\n                    visibility: \"hidden\",\n                    type: \"sap.m.TextArea\"\n                }\n            }\n        },\n\n        init() {\n            Control.prototype.init.apply(this, arguments);\n            this.setAggregation(\"_myButton\", new Button({\n                text: \"Action Button\",\n                press: [this.onButtonPress, this]\n            }));\n            this.setAggregation(\"_myTextArea\", new TextArea({\n                value: \"Default Fallback Focus\"\n            }));\n        },\n\n        onButtonPress() {\n            this.getAggregation(\"_myButton\").setEnabled(false); // making it no longer focusable\n        },\n\n        // Custom onfocusfail handler to redirect focus\n        onfocusfail(oEvent) {\n            const oControlLosingFocus = oEvent.srcControl;\n            if (oControlLosingFocus === this.getAggregation(\"_myButton\")) {\n                // Shift focus to the specified alternative element\n                this.getAggregation(\"_myTextArea\").focus();\n            } else {\n                // Optional: fallback to the default onfocusfail behavior\n                Control.prototype.onfocusfail.apply(this, arguments);\n            }\n        },\n\n        // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Composite Control Exit Hook\nDESCRIPTION: This JavaScript code implements the 'exit' hook for the 'SearchField' composite control. In this example, it's empty, signifying that no specific cleanup is required when the control is destroyed. The framework automatically handles the destruction of inner controls within hidden aggregations.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/standard-composite-controls-c1512f6.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Clean-up hook... destroying composite parts.\n */\nSearchField.prototype.exit = function() {\n  //nothing to do here\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Street with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"street\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation, with the address's street property pointing to the given property's path in OData V4. PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_84\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"adr\" : { \"street\" : { \"Path\" : \"PROPERTY\" } } }\n```\n\n----------------------------------------\n\nTITLE: Adding missing text to i18n.properties - OpenUI5\nDESCRIPTION: This code snippet shows how to add a missing text entry to the `i18n.properties` file in an OpenUI5 application. The text is used to resolve a binding issue identified by the Support Assistant. The entry provides a translation for the `Label_Missing_I18N_Text` key.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-3-support-assistant-35f08e1.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n[…]\nitem1Text=Item 1\nitem2Text=Item 2\nselectEventMessage=Event \"{0}\" fired.\nLabel_Missing_I18N_Text=Label Text\n\n```\n\n----------------------------------------\n\nTITLE: OpenUI5 Bootstrap with Declarative Support - HTML\nDESCRIPTION: This code snippet shows the complete OpenUI5 bootstrap script tag with declarative support enabled. It includes attributes for theme (`sap_horizon`), libraries (`sap.m`), and the declarative support module.  Note that this declarative support method is deprecated in UI5 version 1.120 and replaced by XML Views.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enabling-declarative-support-deprecated-91f17d6.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n  type=\"text/javascript\"\n  src=\"resources/sap-ui-core.js\"\n  data-sap-ui-theme=\"sap_horizon\"\n  data-sap-ui-libs=\"sap.m\"\n  data-sap-ui-modules=\"sap.ui.core.plugin.DeclarativeSupport\"\n  >\n</script>\n```\n\n----------------------------------------\n\nTITLE: Data Binding to Control Properties (HTML)\nDESCRIPTION: This snippet demonstrates binding the `text` and `enabled` properties of an `sap.m.Button` control to data from models.  The `data-text` attribute binds the button's text to the `/stringValue` property of the default model. The `data-enabled` attribute binds the button's enabled state to the `booleanValue` property of the `model2` model.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-data-binding-deprecated-020990b.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-sap-ui-type=\"sap.m.Button\" data-text=\"{/stringValue}\" data-enabled=\"{model2>/booleanValue}\"></div>\n```\n\n----------------------------------------\n\nTITLE: HTML Element Inspection\nDESCRIPTION: Demonstrates inspecting DOM elements and CSS styles in the Elements tab of the browser's developer tools. It shows how to find a specific element, view its styles, and edit the HTML to dynamically change the styling and layout.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-browser-developer-tools-eadd60a.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"container-HeapOfShards---app--myButton\" data-sap-ui=\"container-HeapOfShards---app--myButton\" aria-describedby=\"__text1\"\n\tclass=\"sapMBtn sapMBtnBase sapMBtnInverted\">\n</button>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Table Columns Using CSS in OpenUI5\nDESCRIPTION: This example shows how to assign the CSS class defined in the previous snippet to the `styleClass` property of the column. A custom class name (e.g., `myPrice`) is specified for the `styleClass` property of the column.  The `Text` control sets the column header. The column aligns content to the end.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/table-design-d3234bc.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Column\n   hAlign=\"End\"\n   class=\"myPrice\">\n   <Text text=\"Price\" />\n</Column>\n\n```\n\n----------------------------------------\n\nTITLE: Activate Terminologies via URL Parameter - HTML\nDESCRIPTION: This snippet shows how to activate terminologies by appending the `sap-ui-active-terminologies` URL parameter with a comma-separated list of terminologies. This method is primarily intended for testing purposes.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/terminologies-eba8d25.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n?sap-ui-active-terminologies=travel,services\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.clearIntervalCall with window.clearInterval (Native)\nDESCRIPTION: This snippet shows how to replace `jQuery.sap.clearIntervalCall` with the native `window.clearInterval`. `window.clearInterval` cancels a repeating timeout previously established by calling `setInterval()`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.clearInterval\n```\n\n----------------------------------------\n\nTITLE: Refactoring Tests with beforeEach (JS)\nDESCRIPTION: This snippet refactors the unit tests by moving the DateFormatter object instantiation to the QUnit module's beforeEach function. This reduces code duplication and makes the tests easier to maintain. The 'oFormatter' is initialized before each test.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-15-writing-a-short-date-formatter-using-tdd-bc4114a.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n\t\"sap/ui/demo/bulletinboard/model/DateFormatter\",\n\t\"sap/ui/core/Locale\",\n\t\"sap/ui/core/date/UI5Date\"\n], function(DateFormatter, Locale, UI5Date) {\n\tvar oFormatter = null;\n\tQUnit.module(\"DateFormatter\", {\n\t\tbeforeEach: function() {\n\t\t\toFormatter = new DateFormatter({\n\t\t\t\tlocale: new Locale(\"en-US\")\n\t\t\t});\n\t\t}\n\t});\n\n\tQUnit.test(\"Should return empty string if no date is given\", function(assert) {\n\t\t// Delete in your code: var oFormatter = new DateFormatter();\n\t\t\t    // ...\n\t});\n\tQUnit.test(\"Should return time if date from today\", function(assert) {\n\t\t// Delete in your code: var oFormatter = new DateFormatter({\n\t\t// Delete in your code: \tlocale: new Locale(\"en-US\")\n\t\t// Delete in your code: });\n\t\t// ...\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Controller with Formatter Function - JavaScript\nDESCRIPTION: This JavaScript code defines an OpenUI5 controller with a formatter function. The formatter function `formatMessage` is assigned directly from `sap/base/strings/formatMessage`. The controller's `onInit` function is intentionally left empty, and more controller logic may be implemented where `...` appears.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/expression-binding-daf6852.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Controller\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/base/strings/formatMessage\"\n], function(Controller, formatMessage) {\n    return Controller.extend(\"sample.App\", {\n        onInit() {\n            ...\n        },\n        formatMessage: formatMessage,\n        ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing :visible Selector\nDESCRIPTION: Instead of using the `:visible` selector, which changed behavior between jQuery 1.11.1 and 2.2.0, the sap.ui.dt library now uses its own implementation similar to jQuery 1.11.1. This ensures consistent behavior for empty inline elements.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/upgrading-from-a-version-below-1-38-c1025c2.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nInstead of using `:visible`, that functionality now uses its own implementation similar to jQuery 1.11.1.\n```\n\n----------------------------------------\n\nTITLE: Creating package.json\nDESCRIPTION: This file defines project metadata, dependencies, and scripts for the UI5 application. It includes the UI5 CLI as a dev dependency and a script to start the application.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-no-data-binding-4cde849.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"data-binding-tutorial\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"author\": \"SAP SE\",\n  \"description\": \"UI5 Demo App - Data Binding Tutorial\",\n  \"devDependencies\": {\n    \"@ui5/cli\": \"^3\"\n  },\n  \"scripts\": {\n    \"start\": \"ui5 serve -o index.html\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add i18n Properties for Refresh Functionality\nDESCRIPTION: This `i18n.properties` code snippet defines the texts used for the refresh button's tooltip and the messages displayed when the refresh operation is successful or not possible due to pending changes.  These properties allow the application to support multiple languages.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-data-access-and-client-server-communication-e9de002.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\n# App Descriptor\n...\n\n# Toolbar\n#XTOL: Tooltip for refresh data\nrefreshButtonText=Refresh Data\n\n# Table Area\n...\n\n# Messages\n#XMSG: Message for refresh failed\nrefreshNotPossibleMessage=Before refreshing, please save or revert your changes\n\n#XMSG: Message for refresh succeeded\nrefreshSuccessMessage=Data refreshed\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Country with OData V2 Annotation\nDESCRIPTION: This code snippet demonstrates how the `sap:semantics = \"country\"` annotation in OData V2 is translated to the `com.sap.vocabularies.Communication.v1.Contact` annotation, with the address's country property pointing to the given property's path in OData V4.  PROPERTY is a placeholder for the property where sap:semantics is defined.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_85\n\nLANGUAGE: JSON\nCODE:\n```\n\"com.sap.vocabularies.Communication.v1.Contact\" : { \"adr\" : { \"country\" : { \"Path\" : \"PROPERTY\" } } }\n```\n\n----------------------------------------\n\nTITLE: Querying DOM Element in Console\nDESCRIPTION: Demonstrates how to query a DOM element using jQuery within the browser's console. This allows you to inspect the element's properties and attributes directly from the console for debugging purposes. Requires jQuery to be available in the context.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-browser-developer-tools-eadd60a.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$(\"#container-HeapOfShards---app--myButton\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Compatibility Version via Bootstrap - HTML\nDESCRIPTION: This code snippet demonstrates how to configure the compatibility version for OpenUI5 via the bootstrap tag in an HTML file.  It sets the global compatibility version to \"1.18\" and a feature-specific compatibility version for \"xyz\" to \"1.16\".  This ensures the application uses the behavior of OpenUI5 version 1.18 globally, except for the xyz feature, which will use the behavior of version 1.16. The usage of explicit version is deprecated, and it is recommended to use \"edge\".\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/compatibility-version-information-9feb96d.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script id=\"sap-ui-bootstrap\" \n            type=\"text/javascript\"\n            src=\"resources/sap-ui-core.js\"\n            data-sap-ui-theme=\"sap_horizon\"\n            data-sap-ui-libs=\"sap.m\"\n            data-sap-ui-compat-version=\"1.18\"\n            data-sap-ui-compat-version-xyz=\"1.16\"\n            >\n    </script> \n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Dependencies Configuration in manifest.json\nDESCRIPTION: This JSON snippet illustrates how to configure lazy loading of libraries and components in the `manifest.json` file using the `lazy` property within the `dependencies` section.  Setting `lazy` to `true` indicates that a dependency should be loaded only when needed. Requires OpenUI5 version 1.34 or later.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/migration-information-for-upgrading-the-manifest-file-a110f76.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"sap.ui5\": {\n   \"_version\": \"1.2.0\",\n   ...\n   \"dependencies\": {\n        \"minUI5Version\": \"1.34.0\",\n        \"libs\": {\n            \"sap.m\": {\n                \"minVersion\": \"1.34.0\"\n            },\n            \"sap.ui.commons\": {\n                \"minVersion\": \"1.34.0\",\n                \"lazy\": true\n            }\n        },\n        \"components\": {\n            \"sap.ui.app.other\": {\n                \"minVersion\": \"1.1.0\"\n                \"lazy\": true\n            }\n        }\n    },\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery.sap.clearDelayedCall with window.clearTimeout (Native)\nDESCRIPTION: This snippet shows how to replace `jQuery.sap.clearDelayedCall` with the native `window.clearTimeout`. `window.clearTimeout` cancels a timeout previously established by calling `setTimeout()`.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/replacement-of-deprecated-jquery-apis-a075ed8.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.clearTimout\n```\n\n----------------------------------------\n\nTITLE: Create Comments Model - OpenUI5 JavaScript\nDESCRIPTION: This code creates a JSON model to store product comments. The model contains a single property, productComments, which is an empty array that will be populated with comments.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-7-adding-a-comments-section-c73dfe3.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsap.ui.define([\n   \"sap/ui/model/json/JSONModel\",\n   \"sap/ui/Device\"\n], function(JSONModel, Device) {\n   \"use strict\";\n   return {\n      createDeviceModel: function() {\n         var oModel = new JSONModel(Device);\n         oModel.setDefaultBindingMode(\"OneWay\");\n         return oModel;\n      },   \n      createCommentsModel: function() {\n         return new JSONModel({ productComments : [] });\n      }\n   };\n});\n```\n\n----------------------------------------\n\nTITLE: Property: Transforming sap:display-format to IsUpperCase\nDESCRIPTION: This snippet demonstrates how `sap:display-format = \"UpperCase\"` is converted to `com.sap.vocabularies.Common.v1.IsUpperCase`: { \"Bool\" : \"true\" }. It indicates that the property should contain only uppercase characters.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_47\n\nLANGUAGE: xml\nCODE:\n```\nsap:display-format = \"UpperCase\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.IsUpperCase\": { \"Bool\" : \"true\" }\n```\n\n----------------------------------------\n\nTITLE: Unsupported: ECMAScript Class Extension\nDESCRIPTION: This code shows an unsupported way of extending an OpenUI5 class using ECMAScript classes. OpenUI5 uses its own class extension mechanism (`sap.ui.core.ManagedObject#extend`), so using `class ... extends Controller` is not recommended.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/mvc/Controller\"], (Controller) => {\n    \"use strict\";\n    return class MyController extends Controller {};\n});\n```\n\n----------------------------------------\n\nTITLE: Mock Data in JSON Format\nDESCRIPTION: This JSON file provides the mock data for the `Meetups` entity set. It contains a flat array of `Meetup` objects, each representing a meetup event.  The `EventDate` property uses a specific format that needs to be parsed correctly by the mock server.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-2-creating-a-mock-server-to-simulate-data-50897de.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[{\n    \"MeetupID\": 1,\n    \"Title\": \"Toronto Tech Meetup\",\n    \"EventDate\": \"/Date(1704562837000)/\",\n    \"Description\": \"The best way to expand your knowledge and network of the Toronto technology community\"\n}, {\n    \"MeetupID\": 2,\n    \"Title\": \"Los Angeles redditors\",\n    \"EventDate\": \"/Date(1765839621000)/\",\n    \"Description\": \"This is a meetup group specifically for redditors of r/LosAngeles. If you don't know what that is, this isn't the meetup you're looking for\"\n}, {\n    \"MeetupID\": 3,\n    \"Title\": \"San Francisco UI5 Lovers\",\n    \"EventDate\": \"/Date(1822123800000)/\",\n    \"Description\": \"Meet the Bay Area UI5 community and spread the love for UI5 technology\"\n}, {\n    \"MeetupID\": 4,\n    \"Title\": \"Designers + Geeks New York\",\n    \"EventDate\": \"/Date(1828283400000)/\",\n    \"Description\": \"Bringing designers + geeks together to talk shop, startups, and do some knowledge sharing. All types of designers + geeks welcome\"\n}, {\n    \"MeetupID\": 5,\n    \"Title\": \"New York City Geek Adventure Group\",\n    \"EventDate\": \"/Date(1836732600000)/\",\n    \"Description\": \"Are you looking to have fun and go on random adventures?\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Setting Toolbar Role with ARIA\nDESCRIPTION: This code snippet shows how to set the ARIA role 'toolbar' for an element, which identifies the element as a toolbar within the document structure. This improves accessibility by providing screen readers with semantic information about the element's function.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/screen-reader-support-for-openui5-controls-656e825.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nrole=\"toolbar\"\n```\n\n----------------------------------------\n\nTITLE: Absolute Binding with Model Prefix (JavaScript)\nDESCRIPTION: This JavaScript code shows how to use an absolute binding with a model prefix when the EntityType does not occur in the default model. The `myModel>` prefix specifies the model defined in the manifest.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/property-metadata-binding-f5aa4bb.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myLabel = new sap.m.Label({text:\"{myModel>/#Company/CompanyName/@sap:label}\"});\n```\n\n----------------------------------------\n\nTITLE: Controller Extension Metadata Definition (JavaScript)\nDESCRIPTION: This code shows how to define controller extension metadata using the `methods` section. It allows controlling the visibility (public/private), finality, and override execution strategy of controller methods. Requires 'sap/ui/core/mvc/OverrideExecution'.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/controller-121b8e6.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define(['sap/ui/core/mvc/Controller', 'sap/ui/core/mvc/OverrideExecution'], function (Controller, OverrideExecution) {\n    \"use strict\";\n    return Controller.extend(\"sap.hcm.Address\", {\n        metadata: {\n            // extension can declare the public methods\n            // in general methods that start with \"_\" are private\n            methods:{\n                publicMethod: {public: true /*default*/, final: false /*default*/, overrideExecution: OverrideExecution.Instead /*default*/},\n                finalMethod: {final: true},\n                onMyHook: {public: true /*default*/, final: false /*default*/, overrideExecution: OverrideExecution.After},\n                couldBePrivate: {public: false}\n            }\n        },\n\n        // adding a private method, only accessible from this controller\n        _privateMethod: function() {\n        },\n        // adding a public method, might be called from, but not overridden by other controllers or controller extensions as well\n        publicMethod: function() {\n        },\n        // adding a final method, might be called from, but not overridden by other controllers or controller extensions as well\n        finalMethod: function() {\n        },\n        // adding a hook method, might be called from, but not overridden by a controller extension\n        // override these method does not replace the implementation, but executes after the original method\n        onMyHook: function() {\n        },\n        // method public by default, but made private via metadata\n        couldBePrivate: function() {\n        }\n       \n    });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Synchronous Probing After Module Definition - Avoid\nDESCRIPTION: This example illustrates the issue of synchronously probing for a module immediately after its definition using `sap.ui.require`. This can lead to unpredictable results as module definitions can be asynchronous. Probe for the module in a separate module that declares a dependency on the probed module.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-for-loading-modules-4363b3f.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// BAD EXAMPLE - DON'T DO THIS\nsap.ui.define([], function(){\n    ...\n});\nvar MyModule = sap.ui.require('myLib/MyModule');\n```\n\n----------------------------------------\n\nTITLE: Creating manifest.json - JSON\nDESCRIPTION: This `manifest.json` file is the application descriptor. It contains metadata about the application, such as its ID and version. It's used by OpenUI5 to configure the application and its dependencies.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-1-hello-world-2680aa9.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_version\": \"1.65.0\",\n  \"sap.app\": {\n    \"id\": \"ui5.walkthrough\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cast Expression in OData JSON\nDESCRIPTION: This JSON snippet represents the structure of an OData Cast expression. It includes properties for specifying the target type, collection status, max length, precision, scale, and SRID. The $Cast property holds the value to be cast, and annotations can be added using the @... property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v4-metadata-json-format-87aac89.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n\"$Cast\" : <value>,\n\"$isCollection\" : true, // omit in case of default value: false\n\"$Type\" : \"<14.5.4.1 Cast Type>\",\n\"$MaxLength\" : <6.2.2 MaxLength>, // optional, number\n\"$Precision\" : <6.2.3 Precision>, // optional, number\n\"$Scale\" : <6.2.4 Scale> | \"variable\", // optional, number or fixed string\n\"$SRID\" : \"<6.2.6 SRID>\", // optional\n\"@...\" : <value>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Karma CLI globally with npm\nDESCRIPTION: This command installs the Karma command-line interface globally, allowing you to run Karma from any directory. It uses npm, the Node.js package manager, to download and install the `karma-cli` package.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-automation-ae44824.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --global karma-cli\n```\n\n----------------------------------------\n\nTITLE: Replacing sap.ui.jsview and showing View.extend with View.create - JavaScript\nDESCRIPTION: This section explains how to replace the `sap.ui.jsview` factory and shows the recommended approach of extending `sap.ui.core.mvc.View` using `View.extend` for defining views.  It also demonstrates how to use `View.create` to load and create a view instance. The example uses `sap.ui.define` to define a new View class that extends `sap.ui.core.mvc.View`. It also shows how to load and instantiate this typed view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-factories-replacement-491bd9c.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar oView = sap.ui.jsview({\n    viewName: \"my.View\"\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\"sap/ui/core/mvc/View\", \"sap/m/Panel\"], function(View, Panel){\n    return View.extend(\"my.View\", {\n\n\t\t// define, which controller to use\n\t\tgetControllerName: function() {\n\t\t\treturn \"my.Controller\";\n\t\t},\n\n\t\t// whether the ID of content controls should be prefixed automatically with the view ID\n\t\tgetAutoPrefixId: function() {\n\t\t\treturn true; // default is false\n\t\t},\n\n\t\t// create view content and return the root control(s)\n\t\tcreateContent: async function() {\n\t\t\tconst someControl = await somethingAsync();\n\t\t\treturn new Panel({\n\t\t\t\tcontent: [someControl, /*...*/]\n\t\t\t});\n    \t}\n    });\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/ui/core/mvc/View\"], (View) => {\n    View.create({ \t\t\n        viewName: \"module:my/View\"\n    }).then((oView) => {/*...*/});\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming sap:searchable to SearchRestrictions\nDESCRIPTION: This snippet demonstrates the transformation of `sap:searchable` to `Org.OData.Capabilities.V1.SearchRestrictions`.  It illustrates setting the `Searchable` property to `false` to indicate that searching is disabled.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\nsap:searchable = \"false\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Org.OData.Capabilities.V1.SearchRestrictions\": { \"Searchable\" : { \"Bool\" : \"false\" } }\n```\n\n----------------------------------------\n\nTITLE: Conditional Image or Text Inclusion with <template:if/then/else>\nDESCRIPTION: This example uses `<template:if>`, `<template:then>`, and `<template:else>` to conditionally display either an `Image` or a `Text` control based on the presence of an `ImageUrl`. If `ImageUrl` is set, the `Image` is displayed; otherwise, the `Text` control is displayed showing the title. This structure allows for more complex conditional UI rendering.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/if-fc18595.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<template:if test=\"{meta>ImageUrl}\">\n  <template:then>\n    <Image src=\"{path: 'meta>ImageUrl', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\" />\n  </template:then>\n  <template:else>\n    <Text text=\"{path: 'meta>Title/Value', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\" />\n  </template:else>\n</template:if>\n```\n\n----------------------------------------\n\nTITLE: Transforming sap:label to Common.Label\nDESCRIPTION: This snippet illustrates the transformation of the `sap:label` annotation in OData V2 to the `com.sap.vocabularies.Common.v1.Label` annotation in OData V4. It demonstrates how a simple text label is converted into a structured annotation with a `String` property.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/odata-v2-model-6c47b2b.md#_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\nsap:label = \"foo\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"com.sap.vocabularies.Common.v1.Label\": {\"String\" : \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: JSON View Example with Custom Data (Deprecated) - JavaScript\nDESCRIPTION: This snippet provides a complete JSON view example demonstrating how custom data can be added to a button within a panel. The `customData` property is used to define the custom data with a key and a bound value. This example is deprecated as of UI5 version 1.120.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/custom-data-attaching-data-objects-to-controls-91f0c3e.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nvar json =\n  {\n    Type: \"sap.ui.core.mvc.JSONView\",\n    controllerName:\"my.own.controller\",\n    content: [{\n      Type:\"sap.m.Panel\",\n      content:[{\n        Type:\"sap.m.Button\",\n        text:\"{actionName}\",\n        press: \"doSomething\",\n        customData: {\n          Type:\"sap.ui.core.CustomData\",\n          key:\"coords\",\n          value:\"{data}\" // bind custom data\n        }\n      }]\n    }]\n  };\n```\n\n----------------------------------------\n\nTITLE: Extending OPA5 Configuration - JavaScript\nDESCRIPTION: Extends the OPA5 configuration to include the test library and its specific settings, such as the application ID, entity set, and view namespace. This configuration is then used by the library to access application-specific resources and perform actions.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/test-libraries-for-opa5-a88a5e5.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nOpa5.extendConfig({\n    testLibs: {\n        myAwesomeTestLibrary: {\n            appId: \"my.application.appId\",\n            entitySet: \"MyExampleEntitySet\",\n            viewNamespace: \"my.application.mainView\"\n        }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Accessing RTL Configuration in OpenUI5 (JavaScript)\nDESCRIPTION: This code snippet shows how to programmatically access the current RTL (right-to-left) mode configuration in OpenUI5. It utilizes the `sap.base.i18n.Localization.getRTL()` function within a `sap.ui.require` block to ensure the `Localization` module is loaded before use. The `bRtl` variable will then contain a boolean indicating whether RTL mode is active.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/07_Developing_Controls/programmatic-access-to-rtl-8bb4723.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.require([\"sap/base/i18n/Localization\"], (Localization) => {\n    const bRtl = Localization.getRTL();\n});\n```\n\n----------------------------------------\n\nTITLE: Unsupported: Template Literal Expression for Library Name\nDESCRIPTION: This example demonstrates that using a template literal with an expression for the library name parameter during library initialization is not supported. A literal string must be used for the library name.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst libraryName = \"lib\";\nsap.ui.define([\n    \"sap/ui/core/Lib\"\n], (Library) => {\n    \"use strict\";\n    const thisLib = Library.init({{\n        name: `my.${libraryName}`\n    }});\n});\n```\n\n----------------------------------------\n\nTITLE: nextUIUpdate with Fake Timers in QUnit - JS\nDESCRIPTION: This QUnit test demonstrates how to use `nextUIUpdate` in combination with fake timers (`sinon.useFakeTimers`).  It emphasizes the importance of passing the fake timer's clock to `nextUIUpdate` and running all timeouts or ensuring no rendering is pending before restoring the timer. Failure to do so can lead to rendering issues in subsequent tests. The example shows how to create an OpenUI5 button, place it in the DOM, wait for rendering using `nextUIUpdate` with the fake clock, perform the test, destroy the button, and then run and restore the fake timer.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/cookbook-for-testing-controls-with-qunit-0ddcc60.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// nextUIUpdate with fake timer\nQUnit.test(\"Test with fake timers\", async() => {\n    this.clock = sinon.useFakeTimers();\n\n    // Coding which requires rendering, e.g.\n    const oButton = new Button();\n    oButton.placeAt(\"qunit-fixture\");\n\n    await nextUIUpdate(this.clock);\n\n    // Continue with your test\n\n    // Release all timers at the end of the test\n    // to avoid e.g. blocking the rendering within\n    // following tests and to ensure that other\n    // timeouts triggered through integration are\n    // released\n    oButton.destroy()\n    this.clock.runAll();\n    this.clock.restore();\n}\n```\n\n----------------------------------------\n\nTITLE: OpenUI5 Model Creation (Before Changes) - JavaScript\nDESCRIPTION: This JavaScript code snippet illustrates the creation of i18n and data models directly within the `init` function of the Component.js file before adaptation. It involves instantiating `sap.ui.model.resource.ResourceModel` and `sap.ui.model.odata.v2.ODataModel` and setting them on the component.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit : function() {\n    ...\n    // set i18n model\n    var i18nModel = new sap.ui.model.resource.ResourceModel({\n        bundleUrl : rootPath + \"/i18n/i18n.properties\"\n    });\n    this.setModel(i18nModel, \"i18n\");\n     \n    // set data model\n    var m = new sap.ui.model.odata.v2.ODataModel(sServiceUrl);\n    this.setModel(m);\n```\n\n----------------------------------------\n\nTITLE: Defining an OpenUI5 Button in HTML (Deprecated)\nDESCRIPTION: This snippet demonstrates how to define an OpenUI5 sap.m.Button control within an HTML document using the data-sap-ui-type attribute. The HTML tag acts as the UI area for the rendered button. This method is deprecated and should be replaced with XML Views.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/defining-controls-deprecated-91f1539.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <div data-sap-ui-type=\"sap.m.Button\"></div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Implicit Aggregation in OpenUI5 (Deprecated)\nDESCRIPTION: Demonstrates adding buttons to the default aggregation ('content') of a Panel control implicitly.  The HTML structure defines the Panel and its children, which are automatically added to the panel's default aggregation. This approach simplifies UI definition but is now deprecated.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-aggregations-deprecated-91f136c.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-sap-ui-type=\"sap.ui.commons.Panel\">\n    <div data-sap-ui-type=\"sap.ui.commons.Button\" data-text=\"My Button 1\"></div>\n    <div data-sap-ui-type=\"sap.ui.commons.Button\" data-text=\"My Button 2\"></div>\n    <div data-sap-ui-type=\"sap.ui.commons.Button\" data-text=\"My Button 3\"></div>\n    <div data-sap-ui-type=\"sap.ui.commons.Button\" data-text=\"My Button 4\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Search Action and Assertion to Worklist.js in OpenUI5\nDESCRIPTION: This code snippet adds the `iSearchFor` action and the `theTableHasOneItem` assertion to the `Worklist.js` page object. The `iSearchFor` action simulates entering text into the search field using `sap/ui/test/actions/EnterText`. The `theTableHasOneItem` assertion verifies that the table contains exactly one item after the search.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/03_Get-Started/step-11-testing-user-input-92959b1.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsap.ui.define([\n\t\t'sap/ui/test/Opa5',\n\t\t'sap/ui/test/matchers/AggregationLengthEquals',\n\t\t'sap/ui/test/matchers/I18NText',\n\t\t'sap/ui/test/matchers/BindingPath',\n\t\t'sap/ui/demo/bulletinboard/test/integration/pages/Common',\n\t\t'sap/ui/test/actions/Press',\n\t\t'sap/ui/test/actions/EnterText'\n\t],\n\tfunction (Opa5,\n\t\t\t  AggregationLengthEquals,\n\t\t\t  I18NText,\n\t\t\t  BindingPath,\n\t\t\t  Common,\n\t\t\t  Press,\n\t\t\t  EnterText) {\n\t\t\"use strict\";\n\n\t\tvar sViewName = \"Worklist\",\n\t\t\tsTableId = \"table\";\n\n\t\tOpa5.createPageObjects({\n\t\t\tonTheWorklistPage: {\n\t\t\t\tbaseClass: Common,\n\t\t\t\tactions: {\n...\n\t\t\t\t\t},\n\t\t\t\t\t\n\t\t\t\t\tiSearchFor: function (sSearchString) {\n\t\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\t\tid: \"searchField\",\n\t\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\t\tactions: new EnterText({\n\t\t\t\t\t\t\t\ttext: sSearchString\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\terrorMessage: \"SearchField was not found.\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tassertions: {\n\t\t\t\t\ttheTableHasOneItem: function () {\n\t\t\t\t\t\treturn this.waitFor({\n\t\t\t\t\t\t\tid: sTableId,\n\t\t\t\t\t\t\tviewName: sViewName,\n\t\t\t\t\t\t\tmatchers: new AggregationLengthEquals({\n\t\t\t\t\t\t\t\tname: \"items\",\n\t\t\t\t\t\t\t\tlength: 1\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\t\tOpa5.assert.ok(true, \"The table contains one corresponding entry\");\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terrorMessage: \"The table does not contain one item.\"\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n...\n\n```\n\n----------------------------------------\n\nTITLE: Handle Input Change Event with Alert - HTML/JavaScript\nDESCRIPTION: This snippet demonstrates how to handle the 'change' event of an `sap.m.Input` control using declarative support in OpenUI5 (deprecated).  It defines a JavaScript function `handleChange` that displays an alert with the new value of the input field when the input loses focus. The `data-change` attribute is used to associate the function with the event. No dependencies beyond OpenUI5 are required.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-events-deprecated-91f15ad.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  function handleChange (oEvent) {\n    alert (oEvent.getSource().getValue());\n  }\n</script>\n\n<div data-sap-ui-type=\"sap.m.Input\" data-value=\"Change me!\" data-change=\"handleChange\"></div>\n```\n\n----------------------------------------\n\nTITLE: Adding a CSS Class to a Control (deprecated)\nDESCRIPTION: Adds the CSS class \"my-button\" to an `sap.m.Button` control using the `class` attribute.  This allows you to style the button using CSS rules defined for that class. This is a deprecated method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-properties-deprecated-91f1619.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-sap-ui-type=\"sap.m.Button\" class=\"my-button\"></div>\n```\n\n----------------------------------------\n\nTITLE: Limiting Istanbul instrumentation to multiple files via HTML\nDESCRIPTION: This snippet shows how to limit Istanbul instrumentation to multiple files using the `data-sap-ui-cover-only` attribute in the HTML. An array of file paths is provided as a comma-separated list within the attribute's value.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../resources/sap/ui/qunit/qunit-coverage-istanbul.js\"\n\tdata-sap-ui-cover-only=\"[sap/ui/core/Popup.js, sap/ui/core/EventProvider]\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Styling DOM Element Directly (Bad)\nDESCRIPTION: This CSS snippet illustrates the incorrect way to style DOM elements directly in OpenUI5. Targeting generic HTML elements can lead to unintended side effects and conflicts with OpenUI5's internal structure, which is subject to change. This is not recommended.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/css-styling-issues-9d87f92.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\ndiv {\n\twidth: 120px;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Float Type with Default Pattern - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `Float` type with the default output pattern. The source value is a JavaScript number, and the output is transformed based on the bound control property type. If the target is a string, locale and fixed settings influence the output pattern.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/sap-ui-model-type-float-91f30db.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// \"TypeFloat\" required from module \"sap/ui/model/type/Float\"\n\n// The source value is given as JavaScript number. Output is transformed into the type of the bound control property.\n// If this type is \"string\" (e.g. the value property of the TextField control) the used default output pattern parameters depend on locale and fixed settings.\n\nvar oType = new TypeFloat();\n```\n\n----------------------------------------\n\nTITLE: MatrixLayout Aggregation (Deprecated)\nDESCRIPTION: Shows how to define a MatrixLayout using declarative aggregation. This example demonstrates how to add rows and cells to the MatrixLayout using nested `div` elements with the appropriate `data-sap-ui-type` attributes. This approach is now deprecated.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-aggregations-deprecated-91f136c.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-sap-ui-type=\"sap.ui.commons.layout.MatrixLayout\" data-layout-fixed=\"false\">\n  <div data-sap-ui-type=\"sap.ui.commons.layout.MatrixLayoutRow\">\n    <div data-sap-ui-type=\"sap.ui.commons.layout.MatrixLayoutCell\">\n      <div data-sap-ui-type=\"sap.ui.commons.TextField\" data-value=\"Hello World\"></div>\n    </div>\n    <div data-sap-ui-type=\"sap.ui.commons.layout.MatrixLayoutCell\">\n      <div data-sap-ui-type=\"sap.ui.commons.Button\" data-text=\"Hello World\"></div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Declaring Library Dependencies in .library XML file (Libraries)\nDESCRIPTION: This snippet illustrates how to declare library dependencies in the `.library` XML file for libraries. It uses `<dependency>` tags to specify mandatory libraries (e.g., `sap.m`) and optional libraries flagged as `lazy` (e.g., `sap.suite.ui.commons`).  These dependencies are crucial for defining the library's external requirements. The `lazy` tag determines whether the library is loaded on demand.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/manifest-dependencies-to-libraries-and-components-8521ad1.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependencies>\n    <dependency>\n       <libraryName>sap.m</libraryName>\n    </dependency>\n    <dependency>\n       <libraryName>sap.suite.ui.commons</libraryName>\n       <lazy>true</lazy>\n    </dependency>\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Default Aggregation Attribute (Deprecated)\nDESCRIPTION: Illustrates the use of `data-sap-ui-default-aggregation` to specify a default aggregation for child controls. This can be used to avoid unnecessary meta tags. This example shows how to set the 'title' aggregation as the default, but it's now deprecated.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-aggregations-deprecated-91f136c.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-sap-ui-type=\"sap.ui.commons.Panel\" data-sap-ui-default-aggregation=\"title\">\n  <div data-sap-ui-type=\"sap.ui.commons.Title\" text=\"My Panel\"></div>\n  <div data-sap-ui-default-aggregation=\"content\">\n    <div data-sap-ui-type=\"sap.ui.commons.Button\" data-text=\"My Button 1\"></div>\n    <div data-sap-ui-type=\"sap.ui.commons.Button\" data-text=\"My Button 2\"></div>\n  </div>\n/div>\n```\n\n----------------------------------------\n\nTITLE: Compiling Declarative HTML with JavaScript\nDESCRIPTION: This JavaScript snippet uses `sap.ui.core.plugin.DeclarativeSupport.compile` to process the declarative HTML markup within the element with the ID \"button\".  It requires that the OpenUI5 library has been loaded and initialized. The input is the DOM element containing the declarative markup, and the output is the compiled UI control being rendered.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/compiling-declarative-html-deprecated-91f1454.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsap.ui.core.plugin.DeclarativeSupport.compile(document.getElementById(\"button\"));\n```\n\n----------------------------------------\n\nTITLE: Aggregation Cardinality 0..1 (Deprecated)\nDESCRIPTION: Demonstrates how to define an aggregation with cardinality \"0..1\", such as the 'title' aggregation of a Panel, directly on the control tag using the `data-sap-ui-aggregation` attribute. This approach is suitable for aggregations that can have at most one child but is now deprecated.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-aggregations-deprecated-91f136c.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-sap-ui-type=\"sap.ui.commons.Panel\">\n  <div data-sap-ui-aggregation=\"title\" div data-sap-ui-type=\"sap.ui.commons.Title\" data-text=\"My Panel\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Limiting Blanket.js instrumentation to a single file via JavaScript\nDESCRIPTION: This snippet demonstrates how to limit Blanket.js instrumentation to a single file via JavaScript using `blanket.options` if blanket is present.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/code-coverage-measurement-7ef3242.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (window.blanket) {\n\tblanket.options(\"sap-ui-cover-only\", \"sap/ui/core/Popup.js\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting sap.app ID and Version\nDESCRIPTION: This JSON snippet illustrates how to populate the `sap.app/id` and `sap.app/applicationVersion/version` properties in the manifest.json file using the values extracted from the Component.js file. The `id` should match the component name, and the `version` should match the application version.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"sap.app\": {\n    ...\n    \"id\": \"cust.emp.myleaverequests\",\n    ...\n    \"applicationVersion\": {\n        \"version\": \"1.2.6\"\n    },\n\n```\n\n----------------------------------------\n\nTITLE: HTML Bootstrap File for Gherkin Tests\nDESCRIPTION: This HTML file serves as a bootstrap for executing Gherkin tests with OPA5 in SAPUI5. It includes necessary scripts for loading SAPUI5, defining resource roots, and running the Gherkin test harness.  It requires adjustments to the OpenUI5 `src`, OpenUI5 resourceroots, and the feature and steps file names to match the scenario and the app.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/basic-example-how-to-use-gherkin-4b0c519.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Using Gherkin with OPA5</title>\n\n    <script\n      id=\"sap-ui-bootstrap\"\n      src=\"https://sdk.openui5.org/nightly/resources/sap-ui-core.js\"\n      data-sap-ui-resource-roots='{\"GherkinWithOPA5\": \"./\"}'\n      data-sap-ui-log-level=\"INFO\"\n    ></script>\n\n    <script>\n      sap.ui.require([\n        \"jquery.sap.global\",\n        \"sap/ui/test/gherkin/opa5TestHarness\",\n        \"GherkinWithOPA5/Steps\"\n      ], function(opa5TestHarness, Steps) {\n        \"use strict\";\n\n        opa5TestHarness.test({\n          featurePath: \"GherkinWithOPA5/Requirements\",\n          steps: Steps\n        });\n\n      });\n    </script>\n\n  </head>\n  <body>\n    <div id=\"qunit\"></div>\n    <div id=\"qunit-fixture\"></div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Swipe Content in OpenUI5 List\nDESCRIPTION: This snippet defines a swipeContent button within an OpenUI5 List control. The button's text is \"Approve Item\", its type is \"Accept\", and it calls the \"handleApprove\" function on a press event. This is the basic structure for adding interactive content on swipe.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/08_More_About_Controls/events-e498329.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<List \n    id=... \n    swipe=\"handleSwipe\" ... >\n    ...\n    <swipeContent>\n      <Button\n        text=\"Approve Item\"\n        type=\"Accept\"\n        press=\"handleApprove\" />\n    </swipeContent>\n  </List>\n```\n\n----------------------------------------\n\nTITLE: Configure Hash Prefix for Nested Component (JSON)\nDESCRIPTION: This JSON snippet shows how to configure a hash prefix for a nested component within the routing configuration. By defining a `prefix` within the `target` object in a `route`, the router will persist the hash of the nested component with the specified prefix in the browser's hash. This allows the nested component to manage its own navigation state within the global application hash.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enabling-routing-in-nested-components-fb19f50.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"sap.ui5\": {\n        \"componentUsages\": {\n            \"myreuse\": {\n                \"name\": \"reuse.component\",\n                \"settings\": {},\n                \"componentData\": {},\n                \"lazy\": false\n            }\n        },\n        \"routing\": {\n            \"config\": {\n                ...\n            },\n            \"routes\": [{\n                \"name\": \"home\",\n                \"pattern\": \"\",\n                \"target\": {\n                    \"name\": \"attachment\",\n                    \"prefix\": \"atch\"\n\n                }\n            }],\n            \"targets\": {\n                \"attachment\": {\n                    \"type\": \"Component\",\n                    \"usage\": \"myreuse\",\n                    \"options\": {\n                        // optional\n                        // define the additional parameter for\n                        // instatiating the component instance\n                    },\n                    \"containerOptions\": {\n                        // optional\n                        // define the additional parameter for\n                        // instantiating the component container\n                        // which enables the component to be rendered\n                        // in the parent control\n                    },\n                    \"controlId\": \"page\",\n                    \"controlAggregation\": \"content\"\n                }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component.js: Retrieving i18n and Title\nDESCRIPTION: This snippet from Component.js shows how to locate the resource bundle path (`i18n`) and the title resource key.  These are then used to populate the manifest.json.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"config\" : {\n    \"titleResource\": \"app.Identity\",\n    \"resourceBundle\": \"i18n/i18n.properties\",\n\n```\n\n----------------------------------------\n\nTITLE: Data Source Reference (Before Changes) - JavaScript\nDESCRIPTION: This JavaScript code snippet illustrates how data source references were handled in the Component.js file before the adaptation. It showcases the 'serviceConfig' section within the 'config' metadata, which defines the service name and URL.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nmetadata : {\n    ...\n    \"config\" : {\n        ...\n        \"serviceConfig\" : {\n            name: \"LEAVEREQUEST\",\n            serviceUrl: \"/sap/opu/odata/GBHCM/LEAVEREQUEST;v=2/\"\n        }\n    },\n...\n \ninit : function() {\n    ...\n    var oServiceConfig = this.getMetadata().getConfig()[\"serviceConfig\"];\n    var sServiceUrl = oServiceConfig.serviceUrl;\n    ...\n    oMockServer.simulate(rootPath + \"/model/metadata.xml\", rootPath + \"/model/\");\n```\n\n----------------------------------------\n\nTITLE: Enable Declarative Support Module - HTML\nDESCRIPTION: This code snippet shows how to enable the declarative support module by adding the `data-sap-ui-modules` attribute to the OpenUI5 bootstrap script tag. This attribute loads the `sap.ui.core.plugin.DeclarativeSupport` plugin, which parses and enhances special HTML tags to create UI elements declaratively. This method is deprecated in favor of XML views.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/enabling-declarative-support-deprecated-91f17d6.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\ndata-sap-ui-modules=\"sap.ui.core.plugin.DeclarativeSupport\"\n```\n\n----------------------------------------\n\nTITLE: Unsupported: Variable as Class Name\nDESCRIPTION: This example showcases an unsupported practice: using a variable directly as the class name parameter within the `extend` call. The class name parameter should be a literal string.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst sController = \"sap/ui/core/mvc/Controller\";\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\"\n], (Controller) => {\n    \"use strict\";\n    return Controller.extend(sController, {});\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Data in HTML View (Deprecated) - HTML\nDESCRIPTION: This snippet shows how to attach custom data objects to a control in an HTML view using the `data-custom-data:*` attribute syntax. The key is specified after `data-custom-data:`, with dashes converting to upper case. The value can be a string or a binding expression. This method is deprecated as of UI5 version 1.108.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/custom-data-attaching-data-objects-to-controls-91f0c3e.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-sap-ui-type=\"sap.m.Button\" data-text=\"This button is added dynamically\" data-custom-data:my-key=\"myValue\" data-custom-data:my-bound-key=\"{/mypath}\"></div>\n```\n\n----------------------------------------\n\nTITLE: Model Creation in Component.js - JavaScript\nDESCRIPTION: This code illustrates how models are created and set within the `Component.js` file of an OpenUI5 application.  It demonstrates the creation of an i18n resource model and an OData model, and the setting of these models on the component. After migration to manifest.json, this model creation can be removed from Component.js\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n    init : function() {\n        ...\n        // set i18n model\n        var i18nModel = new sap.ui.model.resource.ResourceModel({\n            bundleUrl : rootPath + \"/i18n/i18n.properties\"\n        });\n        this.setModel(i18nModel, \"i18n\");\n         \n        // set data model\n        var m = new sap.ui.model.odata.v2.ODataModel(sServiceUrl);\n        this.setModel(m);\n    \n```\n\n----------------------------------------\n\nTITLE: DOM Manipulation - Bad Example\nDESCRIPTION: This example illustrates the incorrect practice of directly manipulating the DOM structure of a control using jQuery (`oControl.$().find(\".sapMLabel\")[0].innerHTML = \"reallybad\";`). This can lead to unpredictable behavior and break the control's functionality if the DOM structure changes in a future OpenUI5 version. Also shown is simply removing an element from the DOM via `oControl.$().find(\".sapMLabel\").remove();`\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/05_Developing_Apps/javascript-code-issues-030fcd1.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\noControl.$().find(\".sapMLabel\")[0].innerHTML = \"reallybad\";\n```\n\n----------------------------------------\n\nTITLE: core:require in Fragments - Incorrect Usage\nDESCRIPTION: This XML snippet illustrates the incorrect usage of `core:require` within a FragmentDefinition when the fragment is defined inline within a View. `core:require` defined on the `FragmentDefinition` node will not have any effect because the `FragmentDefinition` node is not part of the resulting view.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/require-modules-in-xml-view-and-fragment-b11d853.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View controllerName=\"module:some/Controller\" xmlns=\"sap.m\"\n          xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\">\n      <FragmentDefinition>\n          <!-- core:require can't be defined on the above FragmentDefinition -->\n          ...\n      </FragmentDefinition>\n      ...\n    </mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Declarative HTML with OpenUI5 Button\nDESCRIPTION: This HTML snippet defines a `div` element containing another `div` with `data-sap-ui-type` attribute, indicating that it should be treated as an `sap.m.Button` by OpenUI5's declarative support. The `data-text` attribute sets the button's text.  This assumes that the OpenUI5 library and its dependencies are already loaded and available.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/compiling-declarative-html-deprecated-91f1454.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"button\">\n  <div data-sap-ui-type=\"sap.m.Button\" data-text=\"This button is added dynamically\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dependencies in Component.js - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how OpenUI5 library and component dependencies are defined in the `Component.js` file.  It specifies the libraries (e.g., `sap.m`, `sap.me`) and components (`sap.app.otherComponent`) required by the application.  These dependencies need to be migrated to the `manifest.json` file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n    \"dependencies\": {\n        \"libs\": [\n            \"sap.m\",\n            \"sap.me\"\n        ],\n        \"components\": [\"sap.app.otherComponent\"]\n    } \n```\n\n----------------------------------------\n\nTITLE: Mixing Old and New Loader APIs - Avoid\nDESCRIPTION: This example demonstrates the incorrect practice of mixing deprecated APIs (`jQuery.sap.declare`) with the new module loader APIs (`sap.ui.define`). This can cause timing issues and inconsistencies due to changes in synchronicity. The deprecated APIs should be omitted.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/troubleshooting-for-loading-modules-4363b3f.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// BAD EXAMPLE - DON'T DO THIS\njQuery.sap.declare(\"myLib.myModule\");\nsap.ui.define([], function(){\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Declarative UI Definition with sap.m.Input and sap.m.Button HTML\nDESCRIPTION: This HTML snippet demonstrates how to define a `sap.m.Input` and a `sap.m.Button` control declaratively using the `data-sap-ui-type` attribute. The button's `data-press` attribute specifies the event handler function. The `sap-ui-bootstrap` script tag loads the necessary OpenUI5 resources, including the `sap.ui.core.plugin.DeclarativeSupport` module, which parses the HTML and creates the corresponding OpenUI5 controls. Note that this feature is deprecated.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-deprecated-91f1301.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!Doctype HTML>\n<html>\n<head>\n\t<title>Declarative Programming for SAPUI5 - sample01</title>\n\t<script id=\"sap-ui-bootstrap\"\n\t     type=\"text/javascript\"\n\t     src=\"resources/sap-ui-core.js\"\n\t     data-sap-ui-theme=\"sap_horizon\"\n\t     data-sap-ui-libs=\"sap.m\"\n\t     data-sap-ui-modules=\"sap.ui.core.plugin.DeclarativeSupport\"\n\t     >\n\t</script>\n</head>\n<body class=\"sapUiBody\">\n  <div data-sap-ui-type=\"sap.m.Input\" id=\"message\" class=\"my-button\" data-value=\"Hello World\"></div>\n  <div data-sap-ui-type=\"sap.m.Button\" data-text=\"Click me!\" data-press=\"handlePress\"></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Class to Control via JavaScript\nDESCRIPTION: This JavaScript snippet shows how to add a CSS class to an OpenUI5 control programmatically using the `addStyleClass` method.  This allows for dynamic styling and requires the corresponding CSS rule to be defined in an external stylesheet.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-css-style-sheets-in-xml-views-deprecated-b564935.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n    myButton.addStyleClass(\"mySuperRedButton\");\n```\n\n----------------------------------------\n\nTITLE: Embedding CSS Styles in XML View (Deprecated)\nDESCRIPTION: This XML snippet demonstrates how to embed CSS styles directly within an OpenUI5 XML view. It defines a style for a button to change its color to red and applies it using the `class` attribute.  This approach is deprecated in favor of external stylesheets.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/using-css-style-sheets-in-xml-views-deprecated-b564935.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:View controllerName=\"module:sap/hcm/Address\" xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\"\n           xmlns:html=\"http://www.w3.org/1999/xhtml\">\n   <html:style>\n      .mySuperRedButton {\n         color: red;\n      }\n   </html:style>\n   <Panel>\n      <Button class=\"mySuperRedButton\" text=\"Press Me\"/>\n   </Panel>\n</mvc:View>\n```\n\n----------------------------------------\n\nTITLE: Unsupported: Expression for Library Name\nDESCRIPTION: This code shows that using an expression for the library name is not supported when initializing a library using `sap/ui/core/Lib`. The library name must be a literal string.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst libraryName = \"lib\";\nsap.ui.define([\n    \"sap/ui/core/Lib\"\n], (Library) => {\n    \"use strict\";\n    const thisLib = Library.init({{\n         name: \"my.\" + libraryName\n    }});\n});\n```\n\n----------------------------------------\n\nTITLE: Unsupported: Expression as Class Name\nDESCRIPTION: This example demonstrates an unsupported practice: using an expression to dynamically construct the class name within the `extend` call. The class name parameter should be a literal string.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/ecmascript-support-0cb44d7.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst sControllerPath = \"my.app.controller.\";\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\"\n], (Controller) => {\n    \"use strict\";\n    return Controller.extend(sControllerPath + \"MyController\", {});\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing initLibrary with Lib.init() in UI5 JavaScript\nDESCRIPTION: This snippet shows the replacement of the deprecated `sap.ui.getCore().initLibrary()` with `Library.init()` for initializing a library in SAP UI5. The `init` function takes a configuration object with details about the library.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/deprecated-core-api-798dd9a.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// the object is no longer passed into sap.ui.getCore().initLibrary()\nsap.ui.require([\"sap/ui/core/Lib\"], (Library) => {\n    Library.init({\n        name: \"my.library\",\n        version: \"${version}\",\n        dependencies: [\"sap.ui.core\", \"...\"],\n        types: [\n            ...\n        ],\n        interfaces: [],\n        controls: [\n            ...\n        ],\n        elements: [\n            ...\n        ],\n        extensions: {\n            ...\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining theme name `sap_ux` in OpenUI5\nDESCRIPTION: This code snippet shows the declaration of the theme name `sap_ux`. It is used to identify a specific visual theme within the OpenUI5 framework. The context suggests that this theme might be deprecated or removed.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/02_Read-Me-First/supported-combinations-of-themes-and-libraries-38ff8c2.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n`sap_ux`\n```\n\n----------------------------------------\n\nTITLE: Setting Control ID (deprecated)\nDESCRIPTION: Sets the ID of an `sap.m.Button` control to \"myButton\" using the `id` attribute. This allows you to retrieve a reference to the control later. This is a deprecated method.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/declarative-support-properties-deprecated-91f1619.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-sap-ui-type=\"sap.m.Button\" id=\"myButton\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectPageLayout Alignment CSS Class - XML\nDESCRIPTION: This XML snippet demonstrates how to apply the `sapUxAPObjectPageSubSectionAlignContent` CSS class to a `sap.m.Panel` within an `ObjectPageLayout` to vertically align content. The width is set to 'auto' to ensure proper alignment.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/01_Whats-New/what-s-new-in-openui5-1-60-5a0e1f7.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Panel class=\"sapUxAPObjectPageSubSectionAlignContent\" width=\"auto\"></Panel>\n```\n\n----------------------------------------\n\nTITLE: Setting Theme via Bootstrap - HTML\nDESCRIPTION: This snippet demonstrates how to set the application theme using the `data-sap-ui-theme` attribute in the OpenUI5 bootstrap script tag. The `src` attribute specifies the location of the `sap-ui-core.js` file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/setting-themes-e9fc648.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"sap-ui-bootstrap\"\n        type=\"text/javascript\"\n        src=\"resources/sap-ui-core.js\"\n        data-sap-ui-theme=\"my_custom_theme\">\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Overwriting Inbound Subtitle in manifest.json\nDESCRIPTION: This JSON snippet demonstrates how to overwrite the `subTitle` attribute for an inbound navigation intent in the `manifest.json` file. The `subTitle` is defined using the `{{...}}` syntax, referring to a text symbol in the `i18n` properties file. Requires OpenUI5 version 1.34 or later.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/migration-information-for-upgrading-the-manifest-file-a110f76.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"sap.app\": {\n    \"_version\": \"1.3.0\",\n    ...\n    \"crossNavigation\": {\n        \"inbounds\": {\n            \"contactCreate\":\n                {\n                    \"semanticObject\": \"Contact\",\n                    \"action\": \"create\",\n                    \"icon\": \"sap-icon://add-contact\",\n                    \"title\": \"{{title}}\",\n                    \"subTitle\": \"{{subtitleOther}}\",\n```\n\n----------------------------------------\n\nTITLE: Setting the start_url in manifest.json\nDESCRIPTION: This snippet shows how to replace the `<start_url>` placeholder with the actual start URL of the application, such as `index.html`. If the application does not have a start URL, the `start_url` section can be removed from the manifest file.\nSOURCE: https://github.com/sap/openui5-docs/blob/main/docs/04_Essentials/creating-a-manifest-file-for-existing-apps-3a9baba.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"start_url\": \"index.html\",\n    ...\n}\n```"
  }
]