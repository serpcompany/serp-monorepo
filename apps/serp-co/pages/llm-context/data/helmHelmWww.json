[
  {
    "owner": "helm",
    "repo": "helm-www",
    "content": "TITLE: Installing Helm using the official script\nDESCRIPTION: This snippet demonstrates how to download and execute the official Helm installation script. The script automatically fetches the latest version of Helm and installs it locally.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/install.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n$ chmod 700 get_helm.sh\n$ ./get_helm.sh\n```\n\n----------------------------------------\n\nTITLE: Accessing Helm Command Help\nDESCRIPTION: Demonstrates how to get help for Helm commands using the -h flag, which displays usage information for a specific command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/quickstart.md#2025-04-08_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ helm get -h\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Help Command\nDESCRIPTION: Command to access Helm's built-in documentation and help system showing available commands and their usage.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/using_helm.md#2025-04-08_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm help\n```\n\n----------------------------------------\n\nTITLE: Installing Helm via Homebrew on macOS\nDESCRIPTION: This command installs Helm using the Homebrew package manager on macOS. The Helm formula is maintained by the community and is generally up to date.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/install.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nbrew install helm\n```\n\n----------------------------------------\n\nTITLE: Installing Helm via Snap\nDESCRIPTION: This command installs Helm using the Snap package manager. The Helm package is maintained by the Snapcrafters community.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/install.md#2025-04-08_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nsudo snap install helm --classic\n```\n\n----------------------------------------\n\nTITLE: Basic Helm Install Command Syntax\nDESCRIPTION: The basic syntax for the helm install command. This requires a NAME for the release and a CHART reference, along with optional flags.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_install.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install [NAME] [CHART] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing a Chart with Helm\nDESCRIPTION: Demonstrates installing a WordPress chart using 'helm install' with a custom release name. The output shows installation details and post-installation instructions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/using_helm.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm install happy-panda bitnami/wordpress\nNAME: happy-panda\nLAST DEPLOYED: Tue Jan 26 10:27:17 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n** Please be patient while the chart is being deployed **\n\nYour WordPress site can be accessed through the following DNS name from within your cluster:\n\n    happy-panda-wordpress.default.svc.cluster.local (port 80)\n\nTo access your WordPress site from outside the cluster follow the steps below:\n\n1. Get the WordPress URL by running these commands:\n\n  NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n        Watch the status with: 'kubectl get svc --namespace default -w happy-panda-wordpress'\n\n   export SERVICE_IP=$(kubectl get svc --namespace default happy-panda-wordpress --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n   echo \"WordPress URL: http://$SERVICE_IP/\"\n   echo \"WordPress Admin URL: http://$SERVICE_IP/admin\"\n\n2. Open a browser and access WordPress using the obtained URL.\n\n3. Login with the following credentials below to see your blog:\n\n  echo Username: user\n  echo Password: $(kubectl get secret --namespace default happy-panda-wordpress -o jsonpath=\"{.data.wordpress-password}\" | base64 --decode)\n```\n\n----------------------------------------\n\nTITLE: Searching for Charts in Artifact Hub with Helm\nDESCRIPTION: Demonstrates how to use 'helm search hub' to find publicly available charts in Artifact Hub. This command searches for WordPress charts and displays their versions and descriptions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/using_helm.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm search hub wordpress\nURL                                                 CHART VERSION APP VERSION DESCRIPTION\nhttps://hub.helm.sh/charts/bitnami/wordpress        7.6.7         5.2.4       Web publishing platform for building blogs and ...\nhttps://hub.helm.sh/charts/presslabs/wordpress-...  v0.6.3        v0.6.3      Presslabs WordPress Operator Helm Chart\nhttps://hub.helm.sh/charts/presslabs/wordpress-...  v0.7.1        v0.7.1      A Helm chart for deploying a WordPress site on ...\n```\n\n----------------------------------------\n\nTITLE: Adding and Searching Local Helm Repositories\nDESCRIPTION: Shows how to add a repository to the local Helm client with 'helm repo add' and then search for charts within that repository using 'helm search repo'.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/using_helm.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add brigade https://brigadecore.github.io/charts\n\"brigade\" has been added to your repositories\n$ helm search repo brigade\nNAME                          CHART VERSION APP VERSION DESCRIPTION\nbrigade/brigade               1.3.2         v1.2.1      Brigade provides event-driven scripting of Kube...\nbrigade/brigade-github-app    0.4.1         v0.2.1      The Brigade GitHub App, an advanced gateway for...\nbrigade/brigade-github-oauth  0.2.0         v0.20.0     The legacy OAuth GitHub Gateway for Brigade\nbrigade/brigade-k8s-gateway   0.1.0                     A Helm chart for Kubernetes\nbrigade/brigade-project       1.0.0         v1.0.0      Create a Brigade project\nbrigade/kashti                0.4.0         v0.4.0      A Helm chart for Kubernetes\n```\n\n----------------------------------------\n\nTITLE: Using Helm Uninstall Command in Bash\nDESCRIPTION: This command is used to uninstall a Helm release from a Kubernetes cluster. It removes all resources associated with the release as well as the release history, freeing it up for future use.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_uninstall.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall RELEASE_NAME [...] [flags]\n```\n\n----------------------------------------\n\nTITLE: Helm Template Command Options\nDESCRIPTION: Comprehensive list of available options and flags for the helm template command, including configuration for API versions, certificates, validation, and various rendering controls.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_template.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -a, --api-versions strings                       Kubernetes api versions used for Capabilities.APIVersions\n      --atomic                                     if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used\n      --ca-file string                             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string                           identify HTTPS client using this SSL certificate file\n      --create-namespace                           create the release namespace if not present\n      --dependency-update                          update dependencies if they are missing before installing the chart\n      --description string                         add a custom description\n      --devel                                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n      --disable-openapi-validation                 if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema\n      --dry-run string[=\"client\"]                  simulate an install. If --dry-run is set with no option being specified or as '--dry-run=client', it will not attempt cluster connections. Setting '--dry-run=server' allows attempting cluster connections.\n      --enable-dns                                 enable DNS lookups when rendering templates\n      --force                                      force resource updates through a replacement strategy\n  -g, --generate-name                              generate the name (and omit the NAME parameter)\n  -h, --help                                       help for template\n      --hide-notes                                 if set, do not show notes in install output. Does not affect presence in chart metadata\n      --include-crds                               include CRDs in the templated output\n      --insecure-skip-tls-verify                   skip tls certificate checks for the chart download\n      --is-upgrade                                 set .Release.IsUpgrade instead of .Release.IsInstall\n      --key-file string                            identify HTTPS client using this SSL key file\n      --keyring string                             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --kube-version string                        Kubernetes version used for Capabilities.KubeVersion\n  -l, --labels stringToString                      Labels that would be added to release metadata. Should be divided by comma. (default [])\n      --name-template string                       specify template used to name the release\n      --no-hooks                                   prevent hooks from running during install\n      --output-dir string                          writes the executed templates to files in output-dir instead of stdout\n      --pass-credentials                           pass credentials to all domains\n      --password string                            chart repository password where to locate the requested chart\n      --plain-http                                 use insecure HTTP connections for the chart download\n      --post-renderer postRendererString           the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path\n      --post-renderer-args postRendererArgsSlice   an argument to the post-renderer (can specify multiple) (default [])\n      --release-name                               use release name in the output-dir path.\n      --render-subchart-notes                      if set, render subchart notes along with the parent\n      --replace                                    re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production\n      --repo string                                chart repository url where to locate the requested chart\n      --set stringArray                            set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --set-file stringArray                       set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --set-json stringArray                       set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)\n      --set-literal stringArray                    set a literal STRING value on the command line\n      --set-string stringArray                     set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n  -s, --show-only stringArray                      only show manifests rendered from the given templates\n      --skip-crds                                  if set, no CRDs will be installed. By default, CRDs are installed if not already present\n      --skip-schema-validation                     if set, disables JSON schema validation\n      --skip-tests                                 skip tests from templated output\n      --take-ownership                             if set, install will ignore the check for helm annotations and take ownership of the existing resources\n      --timeout duration                           time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n      --username string                            chart repository username where to locate the requested chart\n      --validate                                   validate your manifests against the Kubernetes cluster you are currently pointing at. This is the same validation performed on an install\n  -f, --values strings                             specify values in a YAML file or a URL (can specify multiple)\n      --verify                                     verify the package before using it\n      --version string                             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n      --wait                                       if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout\n      --wait-for-jobs                              if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout\n```\n\n----------------------------------------\n\nTITLE: Executing Helm List Command\nDESCRIPTION: Basic syntax for running the 'helm list' command. This command lists all releases for a specified namespace or the current namespace context if not specified.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_list.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm list [flags]\n```\n\n----------------------------------------\n\nTITLE: Reference to Helm Get Command\nDESCRIPTION: Command to retrieve information about a release including its values, manifest, and notes.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/using_helm.md#2025-04-08_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhelm get\n```\n\n----------------------------------------\n\nTITLE: Basic Helm Template Command Syntax\nDESCRIPTION: The basic syntax for the helm template command to render chart templates locally. The command accepts a name parameter, chart parameter, and optional flags.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_template.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm template [NAME] [CHART] [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Repo Command in Bash\nDESCRIPTION: This code block lists the options inherited from parent commands when using 'helm repo'. It includes various configuration options for Kubernetes API server connection, authentication, and Helm-specific settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Installing a Chart with String Values\nDESCRIPTION: Example showing how to install a Redis chart with string values using the --set-string flag, which ensures values are treated as strings even if they look like numbers.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_install.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set-string long_int=1234567890 myredis ./redis\n```\n\n----------------------------------------\n\nTITLE: Chart.yaml Configuration Schema\nDESCRIPTION: Complete configuration schema for Chart.yaml showing all available fields including required and optional properties.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: The chart API version (required)\nname: The name of the chart (required)\nversion: A SemVer 2 version (required)\nkubeVersion: A SemVer range of compatible Kubernetes versions (optional)\ndescription: A single-sentence description of this project (optional)\ntype: The type of the chart (optional)\nkeywords:\n  - A list of keywords about this project (optional)\nhome: The URL of this projects home page (optional)\nsources:\n  - A list of URLs to source code for this project (optional)\ndependencies: # A list of the chart requirements (optional)\n  - name: The name of the chart (nginx)\n    version: The version of the chart (\"1.2.3\")\n    repository: (optional) The repository URL (\"https://example.com/charts\") or alias (\"@repo-name\")\n    condition: (optional) A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )\n    tags: # (optional)\n      - Tags can be used to group charts for enabling/disabling together\n    import-values: # (optional)\n      - ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.\n    alias: (optional) Alias to be used for the chart. Useful when you have to add the same chart multiple times\nmaintainers: # (optional)\n  - name: The maintainers name (required for each maintainer)\n    email: The maintainers email (optional for each maintainer)\n    url: A URL for the maintainer (optional for each maintainer)\nicon: A URL to an SVG or PNG image to be used as an icon (optional).\nappVersion: The version of the app that this contains (optional). Needn't be SemVer. Quotes recommended.\ndeprecated: Whether this chart is deprecated (optional, boolean)\nannotations:\n  example: A list of annotations keyed by name (optional).\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Repository with Basic Authentication\nDESCRIPTION: Shows how to add a Helm repository to the local client with and without authentication credentials. Includes examples of listing the configured repositories.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/chart_repository.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add fantastic-charts https://fantastic-charts.storage.googleapis.com\n$ helm repo list\nfantastic-charts    https://fantastic-charts.storage.googleapis.com\n```\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add fantastic-charts https://fantastic-charts.storage.googleapis.com --username my-username --password my-password\n$ helm repo list\nfantastic-charts    https://fantastic-charts.storage.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Upgrade Command Options in Bash\nDESCRIPTION: A comprehensive list of available options for the helm upgrade command, including flags for customizing the upgrade process, specifying values, and controlling output.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_upgrade.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --atomic                                     if set, upgrade process rolls back changes made in case of failed upgrade. The --wait flag will be set automatically if --atomic is used\n      --ca-file string                             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string                           identify HTTPS client using this SSL certificate file\n      --cleanup-on-fail                            allow deletion of new resources created in this upgrade when upgrade fails\n      --create-namespace                           if --install is set, create the release namespace if not present\n      --dependency-update                          update dependencies if they are missing before installing the chart\n      --description string                         add a custom description\n      --devel                                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n      --disable-openapi-validation                 if set, the upgrade process will not validate rendered templates against the Kubernetes OpenAPI Schema\n      --dry-run string[=\"client\"]                  simulate an install. If --dry-run is set with no option being specified or as '--dry-run=client', it will not attempt cluster connections. Setting '--dry-run=server' allows attempting cluster connections.\n      --enable-dns                                 enable DNS lookups when rendering templates\n      --force                                      force resource updates through a replacement strategy\n  -h, --help                                       help for upgrade\n      --hide-notes                                 if set, do not show notes in upgrade output. Does not affect presence in chart metadata\n      --hide-secret                                hide Kubernetes Secrets when also using the --dry-run flag\n      --history-max int                            limit the maximum number of revisions saved per release. Use 0 for no limit (default 10)\n      --insecure-skip-tls-verify                   skip tls certificate checks for the chart download\n  -i, --install                                    if a release by this name doesn't already exist, run an install\n      --key-file string                            identify HTTPS client using this SSL key file\n      --keyring string                             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n  -l, --labels stringToString                      Labels that would be added to release metadata. Should be separated by comma. Original release labels will be merged with upgrade labels. You can unset label using null. (default [])\n      --no-hooks                                   disable pre/post upgrade hooks\n  -o, --output format                              prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --pass-credentials                           pass credentials to all domains\n      --password string                            chart repository password where to locate the requested chart\n      --plain-http                                 use insecure HTTP connections for the chart download\n      --post-renderer postRendererString           the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path\n      --post-renderer-args postRendererArgsSlice   an argument to the post-renderer (can specify multiple) (default [])\n      --render-subchart-notes                      if set, render subchart notes along with the parent\n      --repo string                                chart repository url where to locate the requested chart\n      --reset-then-reuse-values                    when upgrading, reset the values to the ones built into the chart, apply the last release's values and merge in any overrides from the command line via --set and -f. If '--reset-values' or '--reuse-values' is specified, this is ignored\n      --reset-values                               when upgrading, reset the values to the ones built into the chart\n      --reuse-values                               when upgrading, reuse the last release's values and merge in any overrides from the command line via --set and -f. If '--reset-values' is specified, this is ignored\n      --set stringArray                            set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --set-file stringArray                       set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --set-json stringArray                       set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)\n      --set-literal stringArray                    set a literal STRING value on the command line\n      --set-string stringArray                     set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --skip-crds                                  if set, no CRDs will be installed when an upgrade is performed with install flag enabled. By default, CRDs are installed if not already present, when an upgrade is performed with install flag enabled\n      --skip-schema-validation                     if set, disables JSON schema validation\n      --take-ownership                             if set, upgrade will ignore the check for helm annotations and take ownership of the existing resources\n      --timeout duration                           time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n      --username string                            chart repository username where to locate the requested chart\n  -f, --values strings                             specify values in a YAML file or a URL (can specify multiple)\n      --verify                                     verify the package before using it\n      --version string                             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n      --wait                                       if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout\n      --wait-for-jobs                              if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout\n```\n\n----------------------------------------\n\nTITLE: Creating a New Helm Chart\nDESCRIPTION: Command to create a new Helm chart named 'mychart' using the helm create command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/getting_started.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ helm create mychart\nCreating mychart\n```\n\n----------------------------------------\n\nTITLE: Using required Function to Enforce Value Presence in Helm Templates\nDESCRIPTION: This snippet shows how to use the required function to declare that a specific values entry is mandatory for template rendering. If the value is empty, template rendering will fail with the specified error message.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/charts_tips_and_tricks.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvalue: {{ required \"A valid .Values.who entry required!\" .Values.who }}\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading a Helm Release with a Single Command\nDESCRIPTION: This command demonstrates how to use the --install flag with helm upgrade to perform an install-or-upgrade operation as a single action. Helm will automatically detect if the release exists and perform the appropriate operation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/charts_tips_and_tricks.md#2025-04-08_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ helm upgrade --install <release name> --values <values file> <chart directory>\n```\n\n----------------------------------------\n\nTITLE: Formatting Examples for Helm --set Option\nDESCRIPTION: This section illustrates various ways to use the --set option in Helm to override chart values, including simple key-value pairs, nested structures, lists, and special character handling.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/using_helm.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: value\n```\n\nLANGUAGE: yaml\nCODE:\n```\na: b\nc: d\n```\n\nLANGUAGE: yaml\nCODE:\n```\nouter:\n  inner: value\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname:\n  - a\n  - b\n  - c\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: []\na: null\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - port: 80\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - port: 80\n    host: example\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"value1,value2\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnodeSelector:\n  kubernetes.io/role: master\n```\n\n----------------------------------------\n\nTITLE: Dry Run and Debug Installation\nDESCRIPTION: Command to perform a dry run installation with debug output, showing the rendered template without actually installing the chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/getting_started.md#2025-04-08_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ helm install --debug --dry-run goodly-guppy ./mychart\ninstall.go:149: [debug] Original chart version: \"\"\ninstall.go:166: [debug] CHART PATH: /Users/ninja/mychart\n\nNAME: goodly-guppy\nLAST DEPLOYED: Thu Dec 26 17:24:13 2019\nNAMESPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\n{}\n\nCOMPUTED VALUES:\naffinity: {}\nfullnameOverride: \"\"\nimage:\n  pullPolicy: IfNotPresent\n  repository: nginx\nimagePullSecrets: []\ningress:\n  annotations: {}\n  enabled: false\n  hosts:\n  - host: chart-example.local\n    paths: []\n  tls: []\nnameOverride: \"\"\nnodeSelector: {}\npodSecurityContext: {}\nreplicaCount: 1\nresources: {}\nsecurityContext: {}\nservice:\n  port: 80\n  type: ClusterIP\nserviceAccount:\n  create: true\n  name: null\ntolerations: []\n\nHOOKS:\nMANIFEST:\n---\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: goodly-guppy-configmap\ndata:\n  myvalue: \"Hello World\"\n\n```\n\n----------------------------------------\n\nTITLE: Rolling Back a Helm Release\nDESCRIPTION: Example showing how to roll back a Helm release to a previous revision when something goes wrong with an upgrade.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/intro/using_helm.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm rollback happy-panda 1\n```\n\n----------------------------------------\n\nTITLE: Using Pipelines in Helm Templates\nDESCRIPTION: Shows how to use pipeline syntax to chain template functions together for string transformation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/functions_and_pipelines.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | quote }}\n  food: {{ .Values.favorite.food | quote }}\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Labels Template\nDESCRIPTION: Example of defining a template for Kubernetes labels with basic metadata.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/named_templates.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{- define \"mychart.labels\" }}\n  labels:\n    generator: helm\n    date: {{ now | htmlDate }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Helm Release\nDESCRIPTION: Example demonstrating how to completely remove a Helm release from the cluster using the helm uninstall command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/intro/using_helm.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ helm uninstall happy-panda\n```\n\n----------------------------------------\n\nTITLE: CronTab Resource Template\nDESCRIPTION: Example of a templated CronTab resource that uses the custom resource definition.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: stable.example.com\nkind: CronTab\nmetadata:\n  name: {{ .Values.name }}\nspec:\n   # ...\n```\n\n----------------------------------------\n\nTITLE: Range Loop with Index Variables in Helm\nDESCRIPTION: Demonstrates using variables in a range loop to capture both index and value when iterating over a list.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/variables.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  toppings: |-\n    {{- range $index, $topping := .Values.pizzaToppings }}\n      {{ $index }}: {{ $topping }}\n    {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Using the Helm Rollback Command\nDESCRIPTION: The basic syntax for the helm rollback command. It requires a RELEASE name and optionally a REVISION number. If the revision is omitted or set to 0, it rolls back to the previous release.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_rollback.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm rollback <RELEASE> [REVISION] [flags]\n```\n\n----------------------------------------\n\nTITLE: Conditional with Improper Whitespace\nDESCRIPTION: Shows an example of problematic whitespace handling in a Helm template that leads to invalid YAML output.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n  {{ if eq .Values.favorite.drink \"coffee\" }}\n    mug: \"true\"\n  {{ end }}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes ReplicationController Template\nDESCRIPTION: Example template for a Kubernetes replication controller using Helm template syntax and values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: deis-database\n  namespace: deis\n  labels:\n    app.kubernetes.io/managed-by: deis\nspec:\n  replicas: 1\n  selector:\n    app.kubernetes.io/name: deis-database\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: deis-database\n    spec:\n      serviceAccount: deis-database\n      containers:\n        - name: deis-database\n          image: {{ .Values.imageRegistry }}/postgres:{{ .Values.dockerTag }}\n          imagePullPolicy: {{ .Values.pullPolicy }}\n          ports:\n            - containerPort: 5432\n          env:\n            - name: DATABASE_STORAGE\n              value: {{ default \"minio\" .Values.storage }}\n```\n\n----------------------------------------\n\nTITLE: Overriding Chart Values with YAML in Helm\nDESCRIPTION: This snippet demonstrates how to override default chart values by creating a YAML file and passing it to the helm install command using the -f flag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/using_helm.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmariadb.auth.database: user0db\nmariadb.auth.username: user0\n```\n\nLANGUAGE: console\nCODE:\n```\n$ echo '{mariadb.auth.database: user0db, mariadb.auth.username: user0}' > values.yaml\n$ helm install -f values.yaml bitnami/wordpress --generate-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Values for WordPress Chart Dependencies\nDESCRIPTION: Example of a values.yaml file showing how to configure values for a WordPress chart and its MySQL and Apache dependencies. Demonstrates value scoping and namespace hierarchy.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"My WordPress Site\" # Sent to the WordPress template\n\nmysql:\n  max_connections: 100 # Sent to MySQL\n  password: \"secret\"\n\napache:\n  port: 8080 # Passed to Apache\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Scope Example in Helm Template\nDESCRIPTION: Demonstrates a scoping issue where Release.Name is not accessible within a with block.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/variables.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  release: {{ .Release.Name }}\n  {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Helm Get Values Command Options in Bash\nDESCRIPTION: These are the specific options available for the 'helm get values' command. They include flags for dumping all values, getting help, specifying output format, and selecting a specific revision.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_values.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --all             dump all (computed) values\n  -h, --help            help for values\n  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --revision int    get the named release with revision\n```\n\n----------------------------------------\n\nTITLE: Subchart ConfigMap Using Global Value\nDESCRIPTION: Subchart template that accesses both its local dessert value and the global salad value.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/subcharts_and_globals.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-cfgmap2\ndata:\n  dessert: {{ .Values.dessert }}\n  salad: {{ .Values.global.salad }}\n```\n\n----------------------------------------\n\nTITLE: Using Glob Patterns with Current Scope in Helm Templates\nDESCRIPTION: A Helm template example that demonstrates how to use the .Files.Glob method to find files matching a pattern (all YAML files in this case) and maintain the current scope while accessing file contents.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/accessing_files.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{{ $currentScope := .}}\n{{ range $path, $_ :=  .Files.Glob  \"**.yaml\" }}\n    {{- with $currentScope}}\n        {{ .Files.Get $path }}\n    {{- end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Checking API Version Availability in Helm Templates\nDESCRIPTION: Demonstrates how to check if a specific Kubernetes API version is available in the cluster.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/builtin_objects.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nCapabilities.APIVersions.Has $version\n```\n\n----------------------------------------\n\nTITLE: Installing the Helm Chart\nDESCRIPTION: Command to install the Helm chart and its output, showing the release name and status.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/getting_started.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm install full-coral ./mychart\nNAME: full-coral\nLAST DEPLOYED: Tue Nov  1 17:36:01 2016\nNAMESPACE: default\nSTATUS: DEPLOYED\nREVISION: 1\nTEST SUITE: None\n```\n\n----------------------------------------\n\nTITLE: Getting File Contents in Helm Templates\nDESCRIPTION: Shows how to retrieve the contents of a file within a chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/builtin_objects.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n.Files.Get config.ini\n```\n\n----------------------------------------\n\nTITLE: Template Function Documentation\nDESCRIPTION: Example of documenting a defined template function with proper comments.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/templates.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n{{- /*\nmychart.shortname provides a 6 char truncated version of the release name.\n*/}}\n{{ define \"mychart.shortname\" -}}\n{{ .Release.Name | trunc 6 }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Installing a Helm Chart\nDESCRIPTION: Updates the local repository index and installs the MySQL chart from Bitnami with an auto-generated release name, showing deployment information upon completion.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo update              # Make sure we get the latest list of charts\n$ helm install bitnami/mysql --generate-name\nNAME: mysql-1612624192\nLAST DEPLOYED: Sat Feb  6 16:09:56 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES: ...\n```\n\n----------------------------------------\n\nTITLE: Installing a Helm Chart\nDESCRIPTION: Updates the local repository index and installs the MySQL chart from Bitnami with an auto-generated release name, showing deployment information upon completion.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo update              # Make sure we get the latest list of charts\n$ helm install bitnami/mysql --generate-name\nNAME: mysql-1612624192\nLAST DEPLOYED: Sat Feb  6 16:09:56 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES: ...\n```\n\n----------------------------------------\n\nTITLE: Viewing Configurable Values in a Chart\nDESCRIPTION: Demonstrates how to use 'helm show values' to view the configurable options for a chart before installation, showing the beginning of WordPress chart values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/using_helm.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ helm show values bitnami/wordpress\n## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry and imagePullSecrets\n##\n# global:\n#   imageRegistry: myRegistryName\n#   imagePullSecrets:\n#     - myRegistryKeySecretName\n#   storageClass: myStorageClass\n\n## Bitnami WordPress image version\n## ref: https://hub.docker.com/r/bitnami/wordpress/tags/\n```\n\n----------------------------------------\n\nTITLE: URL Generation from Components\nDESCRIPTION: Shows how to join URL components into a complete URL string using the urlJoin function with a dictionary of URL parts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_98\n\nLANGUAGE: go\nCODE:\n```\nurlJoin (dict \"fragment\" \"fragment\" \"host\" \"host:80\" \"path\" \"/path\" \"query\" \"query\" \"scheme\" \"http\")\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML in Helm Template\nDESCRIPTION: This snippet demonstrates how to use the fromYaml function to parse a YAML string into an object that can be used in templates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\nname: Bob\nage: 25\nhobbies:\n  - hiking\n  - fishing\n  - cooking\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{- $person := .Files.Get \"yamls/person.yaml\" | fromYaml }}\ngreeting: |\n  Hi, my name is {{ $person.name }} and I am {{ $person.age }} years old.\n  My hobbies are {{ range $person.hobbies }}{{ . }} {{ end }}.\n```\n\n----------------------------------------\n\nTITLE: Helm Pull Command Syntax\nDESCRIPTION: Basic command syntax for pulling Helm charts from a repository. Allows downloading a chart using either a URL or repository/chartname format.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_pull.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm pull [chart URL | repo/chartname] [...] [flags]\n```\n\n----------------------------------------\n\nTITLE: Finding First Regex Match in Go\nDESCRIPTION: This snippet illustrates the use of regexFind function to find the first (leftmost) match of a regular expression in a given string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_58\n\nLANGUAGE: go\nCODE:\n```\nregexFind \"[a-zA-Z][1-9]\" \"abcd1234\"\n```\n\n----------------------------------------\n\nTITLE: Managing Helm Repositories\nDESCRIPTION: Commands for adding, listing, updating, and removing Helm chart repositories. These operations are essential for managing chart sources and keeping local repository information up to date.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/CheatSheet.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add <repo-name> <url>   # Add a repository from the internet:\nhelm repo list                    # List added chart repositories\nhelm repo update                  # Update information of available charts locally from chart repositories\nhelm repo remove <repo_name>      # Remove one or more chart repositories\nhelm repo index <DIR>             # Read the current directory and generate an index file based on the charts found.\nhelm repo index <DIR> --merge     # Merge the generated index with an existing index file\nhelm search repo <keyword>        # Search repositories for a keyword in charts\nhelm search hub <keyword>         # Search for charts in the Artifact Hub or your own hub instance\n```\n\n----------------------------------------\n\nTITLE: Wrapping Text at Specified Column Count in Go\nDESCRIPTION: This example shows how to use the wrap function to wrap text at a given column count, in this case 80 columns.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_33\n\nLANGUAGE: go\nCODE:\n```\nwrap 80 $someText\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Helm Release with New Values\nDESCRIPTION: This example shows how to upgrade an existing Helm release using the helm upgrade command with a new YAML file containing updated values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/using_helm.md#2025-04-08_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ helm upgrade -f panda.yaml happy-panda bitnami/wordpress\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmariadb.auth.username: user1\n```\n\n----------------------------------------\n\nTITLE: Basic Helm Push Command Syntax\nDESCRIPTION: Basic command syntax for pushing a Helm chart to a remote registry. Takes a chart and remote destination as arguments.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_push.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm push [chart] [remote] [flags]\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Go\nDESCRIPTION: This example demonstrates the cat function to concatenate multiple strings into one, separating them with spaces.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_37\n\nLANGUAGE: go\nCODE:\n```\ncat \"hello\" \"beautiful\" \"world\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Helm Chart Repository\nDESCRIPTION: Adds the Bitnami chart repository to your Helm installation, which provides access to a collection of pre-packaged applications.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add bitnami https://charts.bitnami.com/bitnami\n```\n\n----------------------------------------\n\nTITLE: Accessing Chart Metadata in Helm Templates\nDESCRIPTION: Shows how to combine chart name and version from Chart.yaml in a Helm template.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/builtin_objects.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ .Chart.Name }}-{{ .Chart.Version }}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Helm Chart Structure\nDESCRIPTION: Shows the typical directory structure of a Helm chart, including Chart.yaml, values.yaml, and templates directory.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/getting_started.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmychart/\n  Chart.yaml\n  values.yaml\n  charts/\n  templates/\n  ...\n```\n\n----------------------------------------\n\nTITLE: Adding a Helm Chart Repository\nDESCRIPTION: Adds the Bitnami chart repository to your Helm installation, which provides access to a collection of pre-packaged applications.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add bitnami https://charts.bitnami.com/bitnami\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Helm Chart Structure\nDESCRIPTION: Shows the typical directory structure of a Helm chart, including Chart.yaml, values.yaml, and templates directory.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/getting_started.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmychart/\n  Chart.yaml\n  values.yaml\n  charts/\n  templates/\n  ...\n```\n\n----------------------------------------\n\nTITLE: Rolling Back a Helm Release\nDESCRIPTION: This console command shows how to rollback a Helm release named 'happy-panda' to its first revision (version 1).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ helm rollback happy-panda 1\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Helm Chart Structure\nDESCRIPTION: Shows the typical directory structure of a Helm chart, including Chart.yaml, values.yaml, and templates directory.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/getting_started.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmychart/\n  Chart.yaml\n  values.yaml\n  charts/\n  templates/\n  ...\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Hooks in Helm Chart\nDESCRIPTION: This YAML snippet shows how to define multiple hooks for a single resource in a Helm chart using annotations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts_hooks.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  \"helm.sh/hook\": post-install,post-upgrade\n\n```\n\n----------------------------------------\n\nTITLE: Literal Regex Replacement in Go Templates\nDESCRIPTION: Shows how to use regexReplaceAllLiteral function to replace matches of a regular expression with a literal replacement string, without interpreting special characters.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_60\n\nLANGUAGE: go\nCODE:\n```\nregexReplaceAllLiteral \"a(x*)b\" \"-ab-axxb-\" \"${1}\"\n```\n\n----------------------------------------\n\nTITLE: Using helm repo add Command in Bash\nDESCRIPTION: This command adds a chart repository to Helm. It requires a NAME and URL for the repository, and supports various optional flags for configuration.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_add.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add [NAME] [URL] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using helm repo add Command in Bash\nDESCRIPTION: This command adds a chart repository to Helm. It requires a NAME and URL for the repository, and supports various optional flags for configuration.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_add.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add [NAME] [URL] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Dictionary Operations in Helm Templates\nDESCRIPTION: Examples of basic dictionary operations including get, set, unset, and hasKey functions for manipulating key-value pairs in Helm dictionaries.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_84\n\nLANGUAGE: go\nCODE:\n```\nget $myDict \"name1\"\n```\n\nLANGUAGE: go\nCODE:\n```\n$_ := set $myDict \"name4\" \"value4\"\n```\n\nLANGUAGE: go\nCODE:\n```\n$_ := unset $myDict \"name4\"\n```\n\nLANGUAGE: go\nCODE:\n```\nhasKey $myDict \"name1\"\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding File Content in Helm Secrets\nDESCRIPTION: A Helm template that creates a Secret and base64 encodes the contents of a file using the b64enc function for secure storage.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/accessing_files.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ .Release.Name }}-secret\ntype: Opaque\ndata:\n  token: |-\n    {{ .Files.Get \"config1.toml\" | b64enc }}\n```\n\n----------------------------------------\n\nTITLE: Range Generation with Until Function\nDESCRIPTION: Shows how to generate a range of integers from 0 to n-1.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_89\n\nLANGUAGE: helm\nCODE:\n```\nuntil 5\n```\n\n----------------------------------------\n\nTITLE: Float Math Operations\nDESCRIPTION: Examples of floating-point math operations including addition, division, and multiplication.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_93\n\nLANGUAGE: helm\nCODE:\n```\naddf 1.5 2 2\n```\n\nLANGUAGE: helm\nCODE:\n```\nsubf 7.5 2 3\n```\n\nLANGUAGE: helm\nCODE:\n```\ndivf 10 2 4\n```\n\nLANGUAGE: helm\nCODE:\n```\nmulf 1.5 2 2\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Helm Release\nDESCRIPTION: Demonstrates how to completely remove a Helm release from the cluster, including all associated resources and release history.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm uninstall mysql-1612624192\nrelease \"mysql-1612624192\" uninstalled\n```\n\n----------------------------------------\n\nTITLE: Creating Dictionaries in Go Templates\nDESCRIPTION: Demonstrates how to create a dictionary using the dict function by passing a list of key-value pairs.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_83\n\nLANGUAGE: go\nCODE:\n```\n$myDict := dict \"name1\" \"value1\" \"name2\" \"value2\" \"name3\" \"value 3\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Shared Template\nDESCRIPTION: Example of defining a named template that can be shared between charts and subcharts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/subcharts_and_globals.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n{{- define \"labels\" }}from: mychart{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Upgrading and Rolling Back Helm Applications\nDESCRIPTION: Commands for upgrading Helm releases and rolling back to previous versions. These operations allow for updating applications and reverting changes if needed, with options for atomic upgrades, dependency updates, and forced updates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/CheatSheet.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <release> <chart>                            # Upgrade a release\nhelm upgrade <release> <chart> --atomic                   # If set, upgrade process rolls back changes made in case of failed upgrade.\nhelm upgrade <release> <chart> --dependency-update        # update dependencies if they are missing before installing the chart\nhelm upgrade <release> <chart> --version <version_number> # specify a version constraint for the chart version to use\nhelm upgrade <release> <chart> --values                   # specify values in a YAML file or a URL (can specify multiple)\nhelm upgrade <release> <chart> --set key1=val1,key2=val2  # Set values on the command line (can specify multiple or separate valuese)\nhelm upgrade <release> <chart> --force                    # Force resource updates through a replacement strategy\nhelm rollback <release> <revision>                        # Roll back a release to a specific revision\nhelm rollback <release> <revision>  --cleanup-on-fail     # Allow deletion of new resources created in this rollback when rollback fails\n```\n\n----------------------------------------\n\nTITLE: Showing Easy-to-Use Value Structure with --set in Helm\nDESCRIPTION: Demonstrates a values structure that is easier to override using the --set flag in Helm commands, using a map structure instead of an array.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/values.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  foo:\n    port: 80\n  bar:\n    port: 81\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Labels in Helm Charts\nDESCRIPTION: This snippet demonstrates how to implement recommended standard labels in a Helm chart. It uses Helm templating to dynamically set values for app name, chart version, release name, and app version.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/labels.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napp.kubernetes.io/name: {{ template \"name\" . }}\nhelm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace \"+\" \"_\" }}\napp.kubernetes.io/managed-by: {{ .Release.Service }}\napp.kubernetes.io/instance: {{ .Release.Name }}\napp.kubernetes.io/version: {{ .Chart.AppVersion }}\n```\n\n----------------------------------------\n\nTITLE: Setting Hook Weight in Helm Chart\nDESCRIPTION: This YAML snippet demonstrates how to set a weight for a hook in a Helm chart, which determines the execution order of hooks.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts_hooks.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  \"helm.sh/hook-weight\": \"5\"\n\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificate in Go Templates\nDESCRIPTION: Illustrates the use of genSelfSignedCert function to create a new, self-signed x509 certificate with specified parameters including common name, IPs, DNS names, and validity duration.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_70\n\nLANGUAGE: go\nCODE:\n```\n$cert := genSelfSignedCert \"foo.com\" (list \"10.0.0.1\" \"10.0.0.2\") (list \"bar.com\" \"bat.com\") 365\n```\n\n----------------------------------------\n\nTITLE: Generating Signed Certificate in Go Templates\nDESCRIPTION: Demonstrates how to use genSignedCert function to generate a new x509 certificate signed by a specified Certificate Authority (CA) with given parameters.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_71\n\nLANGUAGE: go\nCODE:\n```\n$ca := genCA \"foo-ca\" 365\n$cert := genSignedCert \"foo.com\" (list \"10.0.0.1\" \"10.0.0.2\") (list \"bar.com\" \"bat.com\") 365 $ca\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Plugin using Command-line Syntax\nDESCRIPTION: This snippet shows the command-line syntax for installing a Helm plugin. It allows installation from a URL to a VCS repo or a local path.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_plugin_install.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm plugin install [options] <path|url> [flags]\n```\n\n----------------------------------------\n\nTITLE: Using 'default' Function in Helm Templates\nDESCRIPTION: The 'default' function sets a simple default value. If the specified value is empty, the default value is returned instead.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ndefault \"foo\" .Bar\n```\n\n----------------------------------------\n\nTITLE: Parent Chart Values with Subchart Overrides\nDESCRIPTION: Values file for the parent chart that includes values for itself and overrides for the subchart, demonstrating the hierarchical structure.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/subcharts_and_globals.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfavorite:\n  drink: coffee\n  food: pizza\npizzaToppings:\n  - mushrooms\n  - cheese\n  - peppers\n  - onions\n\nmysubchart:\n  dessert: ice cream\n```\n\n----------------------------------------\n\nTITLE: Creating a ConfigMap with Multiple File Contents in Helm\nDESCRIPTION: A Helm template that creates a ConfigMap containing the contents of multiple files. It uses a range function with tuple to iterate through a list of files and includes their contents using the .Files.Get function.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/accessing_files.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  {{- $files := .Files }}\n  {{- range tuple \"config1.toml\" \"config2.toml\" \"config3.toml\" }}\n  {{ . }}: |-\n    {{ $files.Get . }}\n  {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Using 'ternary' Function in Helm Templates\nDESCRIPTION: The 'ternary' function takes two values and a test value. If the test value is true, the first value is returned. If the test value is empty, the second value is returned.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nternary \"foo\" \"bar\" true\n```\n\nLANGUAGE: go\nCODE:\n```\ntrue | ternary \"foo\" \"bar\"\n```\n\nLANGUAGE: go\nCODE:\n```\nternary \"foo\" \"bar\" false\n```\n\nLANGUAGE: go\nCODE:\n```\nfalse | ternary \"foo\" \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Managing Helm Charts\nDESCRIPTION: Commands for creating, packaging, linting, inspecting, and managing dependencies of Helm charts. These operations are essential for chart development and maintenance.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/CheatSheet.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm create <name>                      # Creates a chart directory along with the common files and directories used in a chart.\nhelm package <chart-path>               # Packages a chart into a versioned chart archive file.\nhelm lint <chart>                       # Run tests to examine a chart and identify possible issues:\nhelm show all <chart>                   # Inspect a chart and list its contents:\nhelm show values <chart>                # Displays the contents of the values.yaml file\nhelm pull <chart>                       # Download/pull chart \nhelm pull <chart> --untar=true          # If set to true, will untar the chart after downloading it\nhelm pull <chart> --verify              # Verify the package before using it\nhelm pull <chart> --version <number>    # Default-latest is used, specify a version constraint for the chart version to use\nhelm dependency list <chart>            # Display a list of a chart's dependencies:\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Helm Plugins using Command-Line Interface\nDESCRIPTION: This command is used to uninstall one or more Helm plugins. It accepts one or more plugin names as arguments and supports an optional help flag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/helm/helm_plugin_uninstall.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm plugin uninstall <plugin>... [flags]\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates for HTML with Timezone in Go Templates\nDESCRIPTION: Shows how to use the htmlDateInZone function to format the current date for an HTML date picker input field with a specified timezone.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_81\n\nLANGUAGE: go\nCODE:\n```\nhtmlDateInZone (now) \"UTC\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Service Template with Common Chart\nDESCRIPTION: This YAML snippet shows how to modify the service.yaml file to use the common chart template. It provides an example of how to override service configurations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/library_charts.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.service\" (list . \"demo.service\") -}}\n{{- define \"demo.service\" -}}\n## Defina aquí anulaciones para su Service, p. Ej.\n# metadata:\n#   labels:\n#     custom: label\n# spec:\n#   ports:\n#   - port: 8080\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Value Import Configuration\nDESCRIPTION: Examples showing how to import values from child charts using exports format and child-parent format\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: subchart\n    repository: http://localhost:10191\n    version: 0.1.0\n    import-values:\n      - data\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: subchart1\n    repository: http://localhost:10191\n    version: 0.1.0\n    import-values:\n      - child: default.data\n        parent: myimports\n```\n\n----------------------------------------\n\nTITLE: Performing Helm List Operation with Go SDK\nDESCRIPTION: This example demonstrates how to use the Helm Go SDK to perform a 'helm list' operation. It initializes the Helm configuration, creates a list client, and runs the list operation to retrieve deployed releases.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/sdk/gosdk.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n    \"os\"\n\n    \"helm.sh/helm/v3/pkg/action\"\n    \"helm.sh/helm/v3/pkg/cli\"\n)\n\nfunc main() {\n    settings := cli.New()\n\n    actionConfig := new(action.Configuration)\n    // You can pass an empty string instead of settings.Namespace() to list\n    // all namespaces\n    if err := actionConfig.Init(settings.RESTClientGetter(), settings.Namespace(), os.Getenv(\"HELM_DRIVER\"), log.Printf); err != nil {\n        log.Printf(\"%+v\", err)\n        os.Exit(1)\n    }\n\n    client := action.NewList(actionConfig)\n    // Only list deployed\n    client.Deployed = true\n    results, err := client.Run()\n    if err != nil {\n        log.Printf(\"%+v\", err)\n        os.Exit(1)\n    }\n\n    for _, rel := range results {\n        log.Printf(\"%+v\", rel)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Chart with File Values\nDESCRIPTION: Example showing how to install a Redis chart with values from a file using the --set-file flag. This is useful for long values or dynamically generated content.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_install.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set-file my_script=dothings.sh myredis ./redis\n```\n\n----------------------------------------\n\nTITLE: Searching Available Charts in a Repository\nDESCRIPTION: Uses the helm search command to list available charts from the Bitnami repository, showing chart names, versions, and descriptions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ helm search repo bitnami\nNAME                             \tCHART VERSION\tAPP VERSION  \tDESCRIPTION\nbitnami/bitnami-common           \t0.0.9        \t0.0.9        \tDEPRECATED Chart with custom templates used in ...\nbitnami/airflow                  \t8.0.2        \t2.0.0        \tApache Airflow is a platform to programmaticall...\nbitnami/apache                   \t8.2.3        \t2.4.46       \tChart for Apache HTTP Server\nbitnami/aspnet-core              \t1.2.3        \t3.1.9        \tASP.NET Core is an open-source framework create...\n# ... and many more\n```\n\n----------------------------------------\n\nTITLE: Incorrect Template Directive Formatting\nDESCRIPTION: Examples of incorrect template directive formatting without proper whitespace.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/templates.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{{.foo}}\n{{print \"foo\"}}\n{{-print \"bar\"-}}\n```\n\n----------------------------------------\n\nTITLE: Loading Helm Bash Completion for Current Session\nDESCRIPTION: Command to generate and source Helm's bash completion script for the current shell session.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_bash.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource <(helm completion bash)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Template Name Definition\nDESCRIPTION: Example of incorrect template naming without proper namespacing, which should be avoided to prevent naming conflicts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/templates.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{- define \"fullname\" -}}\n{{/* ... */}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: String Prefix Check in Go\nDESCRIPTION: This snippet shows the usage of the hasPrefix function to test if a string has a given prefix.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_36\n\nLANGUAGE: go\nCODE:\n```\nhasPrefix \"cat\" \"catch\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Chart to OCI Registry\nDESCRIPTION: Example of pushing a packaged Helm chart to an OCI-based registry.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/registries.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm push mychart-0.1.0.tgz oci://localhost:5000/helm-charts\nPushed: localhost:5000/helm-charts/mychart:0.1.0\nDigest: sha256:ec5f08ee7be8b557cd1fc5ae1a0ac985e8538da7c93f51a51eff4b277509a723\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Dependencies in YAML\nDESCRIPTION: Example showing how to define chart dependencies with name, version and repository in Chart.yaml\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: apache\n    version: 1.2.3\n    repository: https://example.com/charts\n  - name: mysql\n    version: 3.2.1\n    repository: https://another.example.com/charts\n```\n\n----------------------------------------\n\nTITLE: Structured Values File Example\nDESCRIPTION: Example of using nested structure in values.yaml file to organize related configuration items.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/values_files.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfavorite:\n  drink: coffee\n  food: pizza\n```\n\n----------------------------------------\n\nTITLE: Setting Up Permanent Helm Completions for Zsh\nDESCRIPTION: This command saves the Helm autocompletion script to the Zsh completion directory, making it available for all future shell sessions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_zsh.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm completion zsh > \"${fpath[1]}/_helm\"\n```\n\n----------------------------------------\n\nTITLE: Using Repository Aliases in Dependencies\nDESCRIPTION: Example showing how to reference a repository by alias instead of URL in dependencies\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: awesomeness\n    version: 1.0.0\n    repository: \"@fantastic-charts\"\n```\n\n----------------------------------------\n\nTITLE: Reference to Helm Status Command\nDESCRIPTION: Command to check the status of a Helm release, displaying information about deployed resources.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/using_helm.md#2025-04-08_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm status\n```\n\n----------------------------------------\n\nTITLE: Chart Alias Configuration\nDESCRIPTION: Example demonstrating how to use aliases to reference the same chart multiple times with different names\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: subchart\n    repository: http://localhost:10191\n    version: 0.1.0\n    alias: new-subchart-1\n  - name: subchart\n    repository: http://localhost:10191\n    version: 0.1.0\n    alias: new-subchart-2\n  - name: subchart\n    repository: http://localhost:10191\n    version: 0.1.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Release Values\nDESCRIPTION: Command to verify the configured values of a Helm release using helm get values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/using_helm.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ helm get values happy-panda\nmariadb:\n  auth:\n    username: user1\n```\n\n----------------------------------------\n\nTITLE: Reference to Helm Status Command\nDESCRIPTION: Command to check the status of a Helm release, displaying information about deployed resources.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/using_helm.md#2025-04-08_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm status\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Helm Release\nDESCRIPTION: This command uninstalls a Helm release, removing all associated Kubernetes resources. It demonstrates how to remove a specific MySQL release.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm uninstall mysql-1612624192\nrelease \"mysql-1612624192\" uninstalled\n```\n\n----------------------------------------\n\nTITLE: Using include Function with YAML Templates in Helm\nDESCRIPTION: This snippet demonstrates how to use the include function to embed a template and then pipe its output to other template functions. The example shows including a template called 'mytpl', then lowercasing the result and wrapping it in quotes.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/charts_tips_and_tricks.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvalue: {{ include \"mytpl\" . | lower | quote }}\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigMap and Secret from File Globs in Helm\nDESCRIPTION: A Helm template that demonstrates using the AsConfig and AsSecrets utility methods to populate a ConfigMap and Secret with the contents of files matching different glob patterns.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/accessing_files.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: conf\ndata:\n{{ (.Files.Glob \"foo/*\").AsConfig | indent 2 }}\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: very-secret\ntype: Opaque\ndata:\n{{ (.Files.Glob \"bar/*\").AsSecrets | indent 2 }}\n```\n\n----------------------------------------\n\nTITLE: Helm 3 Chart.yaml Dependencies Example\nDESCRIPTION: Example of how chart dependencies are defined directly in Chart.yaml in Helm 3, replacing the separate requirements.yaml file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/faq/changes_since_helm2.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n- name: mariadb\n  version: 5.x.x\n  repository: https://charts.helm.sh/stable\n  condition: mariadb.enabled\n  tags:\n    - database\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Structure with if/else in Helm Templates\nDESCRIPTION: Shows the basic structure for conditional blocks in Helm templates using if/else/else if statements that evaluate pipelines.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ if PIPELINE }}\n  # Do something\n{{ else if OTHER PIPELINE }}\n  # Do something else\n{{ else }}\n  # Default case\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Conditional Chart Loading Configuration\nDESCRIPTION: Example showing how to use tags and conditions to control chart loading\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: subchart1\n    repository: http://localhost:10191\n    version: 0.1.0\n    condition: subchart1.enabled,global.subchart1.enabled\n    tags:\n      - front-end\n      - subchart1\n  - name: subchart2\n    repository: http://localhost:10191\n    version: 0.1.0\n    condition: subchart2.enabled,global.subchart2.enabled\n    tags:\n      - back-end\n      - subchart2\n```\n\n----------------------------------------\n\nTITLE: Creating Helm Charts with Starter Templates\nDESCRIPTION: Examples showing how to create new Helm charts using starter templates. Demonstrates both the full --starter flag and -p shorthand, including the ability to use absolute paths to starter templates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nhelm create my-chart --starter starter-name\nhelm create my-chart -p starter-name\nhelm create my-chart -p /absolute/path/to/starter-name\n```\n\n----------------------------------------\n\nTITLE: Helm Template with Tuple Range\nDESCRIPTION: Example showing how to create and iterate over a tuple of fixed values using the range action.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n  sizes: |-\n    {{- range tuple \"small\" \"medium\" \"large\" }}\n    - {{ . }}\n    {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Helper Template Definition\nDESCRIPTION: Example of a documented helper template defined in _helpers.tpl file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/named_templates.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{{/* Generate basic labels */}}\n{{- define \"mychart.labels\" }}\n  labels:\n    generator: helm\n    date: {{ now | htmlDate }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Pages Branch Command\nDESCRIPTION: Command to create a new gh-pages branch for hosting a Helm chart repository on GitHub Pages.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/chart_repository.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git checkout -b gh-pages\n```\n\n----------------------------------------\n\nTITLE: Adding Template Directive to ConfigMap in YAML\nDESCRIPTION: Enhances the ConfigMap template by using a template directive to dynamically set the resource name based on the release name.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/getting_started.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing a Helm Chart\nDESCRIPTION: Commands to install a Helm chart and then run its test suite. The example shows installing the 'demo' chart and running the test command, which executes all test pods defined in the chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/chart_tests.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ helm install demo demo --namespace default\n$ helm test demo\nNAME: demo\nLAST DEPLOYED: Mon Feb 14 20:03:16 2022\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE:     demo-test-connection\nLast Started:   Mon Feb 14 20:35:19 2022\nLast Completed: Mon Feb 14 20:35:23 2022\nPhase:          Succeeded\n[...]\n```\n\n----------------------------------------\n\nTITLE: Helm Install Command Options\nDESCRIPTION: Complete list of available options for the helm install command, including flags for validation, verification, waiting conditions, and output formatting.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_install.md#2025-04-08_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n      --atomic                                     if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used\n      --ca-file string                             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string                           identify HTTPS client using this SSL certificate file\n      --create-namespace                           create the release namespace if not present\n      --dependency-update                          update dependencies if they are missing before installing the chart\n      --description string                         add a custom description\n      --devel                                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n      --disable-openapi-validation                 if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema\n      --dry-run string[=\"client\"]                  simulate an install. If --dry-run is set with no option being specified or as '--dry-run=client', it will not attempt cluster connections. Setting '--dry-run=server' allows attempting cluster connections.\n      --enable-dns                                 enable DNS lookups when rendering templates\n      --force                                      force resource updates through a replacement strategy\n  -g, --generate-name                              generate the name (and omit the NAME parameter)\n  -h, --help                                       help for install\n      --hide-notes                                 if set, do not show notes in install output. Does not affect presence in chart metadata\n      --hide-secret                                hide Kubernetes Secrets when also using the --dry-run flag\n      --insecure-skip-tls-verify                   skip tls certificate checks for the chart download\n      --key-file string                            identify HTTPS client using this SSL key file\n      --keyring string                             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n  -l, --labels stringToString                      Labels that would be added to release metadata. Should be divided by comma. (default [])\n      --name-template string                       specify template used to name the release\n      --no-hooks                                   prevent hooks from running during install\n  -o, --output format                              prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --pass-credentials                           pass credentials to all domains\n      --password string                            chart repository password where to locate the requested chart\n      --plain-http                                 use insecure HTTP connections for the chart download\n      --post-renderer postRendererString           the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path\n      --post-renderer-args postRendererArgsSlice   an argument to the post-renderer (can specify multiple) (default [])\n      --render-subchart-notes                      if set, render subchart notes along with the parent\n      --replace                                    re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production\n      --repo string                                chart repository url where to locate the requested chart\n      --set stringArray                            set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --set-file stringArray                       set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --set-json stringArray                       set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)\n      --set-literal stringArray                    set a literal STRING value on the command line\n      --set-string stringArray                     set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --skip-crds                                  if set, no CRDs will be installed. By default, CRDs are installed if not already present\n      --skip-schema-validation                     if set, disables JSON schema validation\n      --take-ownership                             if set, install will ignore the check for helm annotations and take ownership of the existing resources\n      --timeout duration                           time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n      --username string                            chart repository username where to locate the requested chart\n  -f, --values strings                             specify values in a YAML file or a URL (can specify multiple)\n      --verify                                     verify the package before using it\n      --version string                             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n      --wait                                       if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout\n      --wait-for-jobs                              if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout\n```\n\n----------------------------------------\n\nTITLE: Computing SHA256 Digest in Go Templates\nDESCRIPTION: Shows the usage of sha256sum function to compute the SHA256 digest of a given string in an ASCII armored format.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_63\n\nLANGUAGE: go\nCODE:\n```\nsha256sum \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Demo Helm Chart\nDESCRIPTION: Command to create a new Helm chart named 'demo' using the helm create command, which will automatically generate the folder structure including test templates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/chart_tests.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm create demo\n```\n\n----------------------------------------\n\nTITLE: YAML Multi-line String with Comment Protection\nDESCRIPTION: Demonstrates a technique to protect against indentation errors in multi-line strings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/yaml_techniques.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncoffee: |\n  # Commented first line\n         Latte\n  Cappuccino\n  Espresso\n\n```\n\n----------------------------------------\n\nTITLE: Using 'required' Function in Helm Templates\nDESCRIPTION: The 'required' function specifies values that must be set. If the value is empty or not defined, the template will not render and will return the specified error message.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nrequired \"A valid foo is required!\" .Bar\n```\n\n----------------------------------------\n\nTITLE: Automatically Rolling Deployments with SHA256 Checksums in Helm\nDESCRIPTION: This snippet shows how to ensure deployments are automatically rolled when their configurations change. It uses the sha256sum function on a ConfigMap to create a checksum annotation that will trigger a rolling update when the configuration changes.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/charts_tips_and_tricks.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Deployment\nspec:\n  template:\n    metadata:\n      annotations:\n        checksum/config: {{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}\n[...]\n```\n\n----------------------------------------\n\nTITLE: Deploying an Application with Helm 3\nDESCRIPTION: Example of deploying an application using Helm 3, which no longer requires Tiller and uses a simplified security model based on kubeconfig.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/faq/changes_since_helm2.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install myapp ./myapp\n```\n\n----------------------------------------\n\nTITLE: Upgrading Helm Release with Custom Values\nDESCRIPTION: Example showing how to upgrade a Helm release named 'happy-panda' using the bitnami/wordpress chart with custom values from panda.yaml file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/using_helm.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm upgrade -f panda.yaml happy-panda bitnami/wordpress\n```\n\n----------------------------------------\n\nTITLE: Creating a ClusterRole from a YAML File\nDESCRIPTION: Command to create a ClusterRole using a YAML definition file, specifically for the custom secret-reader role needed for Helm operations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/rbac.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl create -f clusterrole-secret-reader.yaml​\n```\n\n----------------------------------------\n\nTITLE: Formatting Duration in Go Templates\nDESCRIPTION: Illustrates the use of duration function to format a given amount of seconds as a time.Duration.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_76\n\nLANGUAGE: go\nCODE:\n```\nduration \"95\"\n```\n\n----------------------------------------\n\nTITLE: Creating ClusterRoleBindings for Cluster-Scope Access\nDESCRIPTION: These commands create ClusterRoleBindings that grant a user cluster-wide 'view' access and the ability to read secrets across all namespaces, which is needed for certain Helm operations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/rbac.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl create clusterrolebinding sam-view\n    --clusterrole view \\​\n    --user sam\n\n$ kubectl create clusterrolebinding sam-secret-reader\n    --clusterrole secret-reader \\​\n    --user sam\n```\n\n----------------------------------------\n\nTITLE: Searching for Charts in a Repository\nDESCRIPTION: This command searches for available charts in the Bitnami repository. It displays a list of charts with their versions and descriptions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ helm search repo bitnami\nNAME                             \tCHART VERSION\tAPP VERSION  \tDESCRIPTION\nbitnami/bitnami-common           \t0.0.9        \t0.0.9        \tDEPRECATED Chart with custom templates used in ...\nbitnami/airflow                  \t8.0.2        \t2.0.0        \tApache Airflow is a platform to programmaticall...\nbitnami/apache                   \t8.2.3        \t2.4.46       \tChart for Apache HTTP Server\nbitnami/aspnet-core              \t1.2.3        \t3.1.9        \tASP.NET Core is an open-source framework create...\n# ... and many more\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Storage Backend for Helm\nDESCRIPTION: Demonstrates how to set environment variables to use the SQL storage backend for Helm, including the connection string for a PostgreSQL database.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/advanced.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport HELM_DRIVER=sql\nexport HELM_DRIVER_SQL_CONNECTION_STRING=postgresql://helm-postgres:5432/helm?user=helm&password=changeme\n```\n\n----------------------------------------\n\nTITLE: UUID Generation\nDESCRIPTION: Shows how to generate a version 4 UUID using Helm's built-in uuidv4 function.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_100\n\nLANGUAGE: go\nCODE:\n```\nuuidv4\n```\n\n----------------------------------------\n\nTITLE: Defining PostRenderer Interface in Go\nDESCRIPTION: Shows the Go interface definition for a custom post renderer. This interface allows for flexible implementation of post-rendering logic in the Helm Go SDK.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/advanced.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype PostRenderer interface {\n    // Run expects a single buffer filled with Helm rendered manifests. It\n    // expects the modified results to be returned on a separate buffer or an\n    // error if there was an issue or failure while running the post render step\n    Run(renderedManifests *bytes.Buffer) (modifiedManifests *bytes.Buffer, err error)\n}\n```\n\n----------------------------------------\n\nTITLE: Packaging and Indexing Helm Charts\nDESCRIPTION: Demonstrates how to package a Helm chart, create a directory for storing charts, and generate an index file. The process includes packaging an Alpine chart example and creating an index.yaml file with the specified repository URL.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/chart_repository.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm package docs/examples/alpine/\n$ mkdir fantastic-charts\n$ mv alpine-0.1.0.tgz fantastic-charts/\n$ helm repo index fantastic-charts --url https://fantastic-charts.storage.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Plugin from URL\nDESCRIPTION: Command to install a Helm plugin from a GitHub repository URL.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/plugins.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm plugin install https://github.com/adamreese/helm-env\n```\n\n----------------------------------------\n\nTITLE: Options for helm plugin list Command\nDESCRIPTION: Available command-specific options for the helm plugin list command. Currently only includes the help flag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_plugin_list.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Chart with Custom Values\nDESCRIPTION: This console command demonstrates how to install a WordPress chart using a custom values file to override default settings for the MariaDB database name and username.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ echo '{mariadb.auth.database: user0db, mariadb.auth.username: user0}' > values.yaml\n$ helm install -f values.yaml bitnami/wordpress --generate-name\n```\n\n----------------------------------------\n\nTITLE: Simple App Template Definition\nDESCRIPTION: Basic template showing app name and version definition.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/named_templates.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{{- define \"mychart.app\" -}}\napp_name: {{ .Chart.Name }}\napp_version: \"{{ .Chart.Version }}\"\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Installing a Chart with Multiple Set Values\nDESCRIPTION: Example showing how to install a Redis chart with multiple --set flags. The right-most value takes precedence for the same key.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_install.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set foo=bar --set foo=newbar  myredis ./redis\n```\n\n----------------------------------------\n\nTITLE: Declaring Chart Dependencies in Chart.yaml\nDESCRIPTION: This YAML snippet demonstrates how to declare dependencies for a Helm chart in the Chart.yaml file. It shows two example dependencies, one for nginx and another for memcached, specifying their names, versions, and repository URLs.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_dependency.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Chart.yaml\ndependencies:\n- name: nginx\n  version: \"1.2.3\"\n  repository: \"https://example.com/charts\"\n- name: memcached\n  version: \"3.2.1\"\n  repository: \"https://another.example.com/charts\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates in Go Templates\nDESCRIPTION: Demonstrates how to use the date function to format the current date (now) into a specific format (YEAR-MONTH-DAY).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_74\n\nLANGUAGE: go\nCODE:\n```\nnow | date \"2006-01-02\"\n```\n\n----------------------------------------\n\nTITLE: Pulling a Helm Chart from an OCI Repository using the Helm SDK in Go\nDESCRIPTION: This snippet demonstrates how to pull a chart from an OCI repository using the Helm SDK.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/sdk/examples.md#2025-04-08_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n{{< highlightexamplego file=\"sdkexamples/pull.go\" >}}\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Releases using the Helm SDK in Go\nDESCRIPTION: This example shows how to list all released charts in the currently configured namespace using the Helm SDK.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/sdk/examples.md#2025-04-08_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n{{< highlightexamplego file=\"sdkexamples/list.go\" >}}\n```\n\n----------------------------------------\n\nTITLE: Installing a Chart with Multiple JSON Values for Arrays\nDESCRIPTION: Example showing how to set and override JSON array values when installing a Redis chart. The right-most JSON value takes precedence.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_install.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set-json='foo=[\"one\", \"two\", \"three\"]' --set-json='foo=[\"four\"]' myredis ./redis\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON in Helm Template\nDESCRIPTION: This example shows how to use the fromJson function to parse a JSON string into an object that can be used in templates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Bob\",\n  \"age\": 25,\n  \"hobbies\": [\n    \"hiking\",\n    \"fishing\",\n    \"cooking\"\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{- $person := .Files.Get \"jsons/person.json\" | fromJson }}\ngreeting: |\n  Hi, my name is {{ $person.name }} and I am {{ $person.age }} years old.\n  My hobbies are {{ range $person.hobbies }}{{ . }} {{ end }}.\n```\n\n----------------------------------------\n\nTITLE: Using Helm Get Manifest Command in Bash\nDESCRIPTION: This command fetches the generated manifest for a given release. The manifest is a YAML-encoded representation of the Kubernetes resources generated from the release's chart(s), including resources from dependent charts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_manifest.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm get manifest RELEASE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Registry Login Command\nDESCRIPTION: Example of logging into an OCI registry with Helm using manual password entry.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/registries.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ helm registry login -u myuser localhost:5000\nPassword:\nLogin succeeded\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Get Metadata Command in Bash\nDESCRIPTION: This command fetches metadata for a specified release. It allows for specifying the output format and release revision.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_metadata.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm get metadata RELEASE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Kubernetes API Version Checking\nDESCRIPTION: Examples of checking for API version and resource availability in a Kubernetes cluster using Capabilities.APIVersions.Has.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_101\n\nLANGUAGE: go\nCODE:\n```\n.Capabilities.APIVersions.Has \"apps/v1\"\n.Capabilities.APIVersions.Has \"apps/v1/Deployment\"\n```\n\n----------------------------------------\n\nTITLE: Building Custom Certificate in Go Templates\nDESCRIPTION: Demonstrates how to use the buildCustomCert function to create a certificate object from base64 encoded PEM format certificate and private key.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_68\n\nLANGUAGE: go\nCODE:\n```\n$ca := buildCustomCert \"base64-encoded-ca-crt\" \"base64-encoded-ca-key\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Get Notes Command in Markdown\nDESCRIPTION: This code block lists all the options inherited from parent commands for 'helm get notes'. It includes various Kubernetes API server configurations, authentication options, and Helm-specific settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_notes.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Helm History Command\nDESCRIPTION: Basic syntax for running the helm history command to view release history. Takes a required RELEASE_NAME parameter and optional flags.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_history.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm history RELEASE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: OCI Registry Operations Examples\nDESCRIPTION: Various examples of Helm commands working with OCI-based charts including pull, show, template, install, and upgrade operations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/registries.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm pull oci://localhost:5000/helm-charts/mychart --version 0.1.0\nPulled: localhost:5000/helm-charts/mychart:0.1.0\nDigest: sha256:0be7ec9fb7b962b46d81e4bb74fdcdb7089d965d3baca9f85d64948b05b402ff\n\n$ helm show all oci://localhost:5000/helm-charts/mychart --version 0.1.0\napiVersion: v2\nappVersion: 1.16.0\ndescription: A Helm chart for Kubernetes\nname: mychart\n...\n\n$ helm template myrelease oci://localhost:5000/helm-charts/mychart --version 0.1.0\n---\n# Source: mychart/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\n...\n\n$ helm install myrelease oci://localhost:5000/helm-charts/mychart --version 0.1.0\nNAME: myrelease\nLAST DEPLOYED: Wed Oct 27 15:11:40 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n...\n\n$ helm upgrade myrelease oci://localhost:5000/helm-charts/mychart --version 0.2.0\nRelease \"myrelease\" has been upgraded. Happy Helming!\nNAME: myrelease\nLAST DEPLOYED: Wed Oct 27 15:12:05 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 2\nNOTES:\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Values for a Subchart\nDESCRIPTION: Simple values.yaml file for the subchart that defines a dessert value.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/subcharts_and_globals.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndessert: cake\n```\n\n----------------------------------------\n\nTITLE: Using Helm Create Command\nDESCRIPTION: The basic syntax for creating a new Helm chart with a specified name. This command will generate the standard Helm chart directory structure.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_create.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm create NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Helm Get Notes Command Options in Markdown\nDESCRIPTION: This snippet lists the specific options available for the 'helm get notes' command. It includes the help flag and an option to specify a particular revision of the release.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_notes.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n  -h, --help           help for notes\n      --revision int   get the named release with revision\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced Dictionary Operations in Helm\nDESCRIPTION: Advanced dictionary operations including pluck and dig functions for accessing nested values and working with multiple dictionaries.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_85\n\nLANGUAGE: go\nCODE:\n```\npluck \"name1\" $myDict $myOtherDict\n```\n\nLANGUAGE: go\nCODE:\n```\ndig \"user\" \"role\" \"humanName\" \"guest\" $dict\n```\n\n----------------------------------------\n\nTITLE: Installing a Chart with JSON Values\nDESCRIPTION: Example showing how to install a Redis chart with complex JSON values using the --set-json flag. This is useful for setting arrays or objects directly.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_install.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set-json 'master.sidecars=[{\"name\":\"sidecar\",\"image\":\"myImage\",\"imagePullPolicy\":\"Always\",\"ports\":[{\"name\":\"portname\",\"containerPort\":1234}]}]' myredis ./redis\n```\n\n----------------------------------------\n\nTITLE: Dry-running Helm v2 to v3 conversion in Bash\nDESCRIPTION: Demonstrates how to safely test the migration process with the --dry-run flag before performing the actual conversion.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 2to3 convert --dry-run postgres\n2019/11/14 15:03:17 NOTE: This is in dry-run mode, the following actions will not be executed.\n2019/11/14 15:03:17 Run without --dry-run to take the actions described below:\n2019/11/14 15:03:17\n2019/11/14 15:03:17 Release \"postgres\" will be converted from Helm v2 to Helm v3.\n2019/11/14 15:03:17 [Helm 3] Release \"postgres\" will be created.\n2019/11/14 15:03:17 [Helm 3] ReleaseVersion \"postgres.v1\" will be created.\n```\n\n----------------------------------------\n\nTITLE: Main Driver for Helm SDK Actions in Go\nDESCRIPTION: This example provides a complete driver that demonstrates the necessary auxiliary functions for Helm SDK actions. It showcases pulling, installing, updating, and uninstalling the 'podinfo' chart from an OCI repository.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/sdk/examples.md#2025-04-08_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n{{< highlightexamplego file=\"sdkexamples/main.go\" >}}\n```\n\n----------------------------------------\n\nTITLE: Installing a Chart with Multiple JSON Values for Objects\nDESCRIPTION: Example showing how to set and override JSON object values when installing a Redis chart. Individual properties can be updated with dot notation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_install.md#2025-04-08_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set-json='foo={\"key1\":\"value1\",\"key2\":\"value2\"}' --set-json='foo.key2=\"bar\"' myredis ./redis\n```\n\n----------------------------------------\n\nTITLE: Indenting Multi-line Text with New Line Prefix in Go\nDESCRIPTION: This example illustrates the nindent function, which indents every line of text by 4 space characters and adds a new line to the beginning.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nnindent 4 $lots_of_text\n```\n\n----------------------------------------\n\nTITLE: Using 'substr' Function in Helm Templates\nDESCRIPTION: The 'substr' function gets a substring from a string. It takes three parameters: start (int), end (int), and string (string).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nsubstr 0 5 \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Helm Package Command Options\nDESCRIPTION: Available command-line options for the helm package command, including flags for version control, signing, and destination configuration.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_package.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --app-version string         set the appVersion on the chart to this version\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n  -u, --dependency-update          update dependencies from \"Chart.yaml\" to dir \"charts/\" before packaging\n  -d, --destination string         location to write the chart. (default \".\")\n  -h, --help                       help for package\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key string                 name of the key to use when signing. Used if --sign is true\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of a public keyring (default \"~/.gnupg/pubring.gpg\")\n      --passphrase-file string     location of a file which contains the passphrase for the signing key. Use \"-\" in order to read from stdin.\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --sign                       use a PGP private key to sign this package\n      --username string            chart repository username where to locate the requested chart\n      --version string             set the version on the chart to this semver version\n```\n\n----------------------------------------\n\nTITLE: Generating Random Bytes in Go Templates\nDESCRIPTION: Shows how to use the randBytes function to generate a cryptographically secure random sequence of bytes, returned as a base64 encoded string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_66\n\nLANGUAGE: go\nCODE:\n```\nrandBytes 24\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Status Command in Bash\nDESCRIPTION: This command shows the status of a named release in Helm. It displays information such as deployment time, namespace, state, revision, and optionally resources and description.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_status.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm status RELEASE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing a Helm Chart using the Helm SDK in Go\nDESCRIPTION: This snippet demonstrates how to install a given chart/release using the Helm SDK. It specifies the chart, version, and values for installation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/sdk/examples.md#2025-04-08_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n{{< highlightexamplego file=\"sdkexamples/install.go\" >}}\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Get Values Command in Bash\nDESCRIPTION: This command downloads a values file for a given release in Helm. It allows specifying options such as dumping all computed values, setting output format, and specifying a revision.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_values.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm get values RELEASE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Downloading Helm Release Information\nDESCRIPTION: Commands for retrieving detailed information about Helm releases, including notes, hooks, values, and manifests. These operations are useful for debugging and inspecting the configuration of deployed releases.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/CheatSheet.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm get all <release>      # A human readable collection of information about the notes, hooks, supplied values, and generated manifest file of the given release.\nhelm get hooks <release>    # This command downloads hooks for a given release. Hooks are formatted in YAML and separated by the YAML '---\\n' separator.\nhelm get manifest <release> # A manifest is a YAML-encoded representation of the Kubernetes resources that were generated from this release's chart(s). If a chart is dependent on other charts, those resources will also be included in the manifest.\nhelm get notes <release>    # Shows notes provided by the chart of a named release.\nhelm get values <release>   # Downloads a values file for a given release. use -o to format output\n```\n\n----------------------------------------\n\nTITLE: Using 'trimPrefix' Function in Helm Templates\nDESCRIPTION: The 'trimPrefix' function trims just the prefix from a string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ntrimPrefix \"-\" \"-hello\"\n```\n\n----------------------------------------\n\nTITLE: Basic Helm Plugin Options\nDESCRIPTION: Lists the basic help option available for the helm plugin command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_plugin.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for plugin\n```\n\n----------------------------------------\n\nTITLE: Helm Push Command Options\nDESCRIPTION: Available flags and options specific to the helm push command, including SSL certificate configuration and authentication options.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_push.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify registry client using this SSL certificate file\n  -h, --help                       help for push\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart upload\n      --key-file string            identify registry client using this SSL key file\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart upload\n      --username string            chart repository username where to locate the requested chart\n```\n\n----------------------------------------\n\nTITLE: Using 'initials' Function in Helm Templates\nDESCRIPTION: The 'initials' function takes the first letter of each word in a string and combines them.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_31\n\nLANGUAGE: go\nCODE:\n```\ninitials \"First Try\"\n```\n\n----------------------------------------\n\nTITLE: Helm Repo Index Inherited Options\nDESCRIPTION: Options inherited from parent commands that can be used with the helm repo index command, including Kubernetes API configuration, authentication, and repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Importando claves de Keybase a GnuPG\nDESCRIPTION: Muestra cómo importar claves de Keybase.io al anillo de claves local de GnuPG para su uso en la firma de charts de Helm.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/provenance.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ keybase pgp export -s | gpg --import\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hard-to-Use Value Structure with --set in Helm\nDESCRIPTION: Illustrates a values structure that is difficult to override using the --set flag in Helm commands, due to its nested array structure.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/values.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - name: foo\n    port: 80\n  - name: bar\n    port: 81\n```\n\n----------------------------------------\n\nTITLE: Helm Repo Remove Command Options in Markdown\nDESCRIPTION: Lists the specific options available for the 'helm repo remove' command. Currently, it only includes the help flag for displaying command usage information.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_remove.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n  -h, --help   help for remove\n```\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Package Naming Example\nDESCRIPTION: Example of how a Helm chart package is named based on its version number.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nnginx-1.2.3.tgz\n```\n\n----------------------------------------\n\nTITLE: Using tpl Function to Evaluate Strings as Templates in Helm\nDESCRIPTION: This example shows how to use the tpl function to evaluate strings as templates inside a template. The function syntax is 'tpl TEMPLATE_STRING VALUES' and it allows for dynamic template rendering.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/charts_tips_and_tricks.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# values\ntemplate: \"{{ .Values.name }}\"\nname: \"Tom\"\n\n# template\n{{ tpl .Values.template . }}\n\n# output\nTom\n```\n\n----------------------------------------\n\nTITLE: Converting Unix Octal to Decimal in Go\nDESCRIPTION: This snippet shows how to use the toDecimal function to convert a unix octal permission to a decimal number.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_48\n\nLANGUAGE: go\nCODE:\n```\n\"0777\" | toDecimal\n```\n\n----------------------------------------\n\nTITLE: Helm Search Repo Command Options\nDESCRIPTION: Available flags and options for the helm search repo command, including development versions, output formatting, and search constraints.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_search_repo.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --devel                use development versions (alpha, beta, and release candidate releases), too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n      --fail-on-no-result    search fails if no results are found\n  -h, --help                 help for repo\n      --max-col-width uint   maximum column width for output table (default 50)\n  -o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)\n  -r, --regexp               use regular expressions for searching repositories you have added\n      --version string       search using semantic versioning constraints on repositories you have added\n  -l, --versions             show the long listing, with each version of each chart on its own line, for repositories you have added\n```\n\n----------------------------------------\n\nTITLE: Listing Deployed Helm Releases\nDESCRIPTION: Shows how to list all currently deployed Helm releases in the cluster using the 'helm list' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/intro/using_helm.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ helm list\nNAME            VERSION UPDATED                         STATUS          CHART\ninky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Package Naming Example\nDESCRIPTION: Example of how a Helm chart package is named based on its version number.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nnginx-1.2.3.tgz\n```\n\n----------------------------------------\n\nTITLE: Using Range Action to Iterate Through a List in Helm Template\nDESCRIPTION: ConfigMap template that uses range to iterate through pizza toppings list and applies title case and quote functions to each item. Also shows with action and string formatting.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  {{- end }}\n  toppings: |-\n    {{- range .Values.pizzaToppings }}\n    - {{ . | title | quote }}\n    {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Managing Helm Repositories\nDESCRIPTION: Demonstrates how to list, add, and update Helm repositories using various 'helm repo' commands.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/using_helm.md#2025-04-08_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo list\n$ helm repo add dev https://example.com/dev-charts\n$ helm repo update\n```\n\n----------------------------------------\n\nTITLE: Basic Values File Configuration in YAML\nDESCRIPTION: Simple example of setting a single parameter in values.yaml file for use in Helm templates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/values_files.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfavoriteDrink: coffee\n```\n\n----------------------------------------\n\nTITLE: Helm Show Chart Inherited Options\nDESCRIPTION: Options inherited from parent commands that can be used with 'helm show chart', including Kubernetes cluster configuration, authentication, and Helm repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_chart.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Computing SHA1 Digest in Go Templates\nDESCRIPTION: Demonstrates how to use the sha1sum function to compute the SHA1 digest of a given string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_62\n\nLANGUAGE: go\nCODE:\n```\nsha1sum \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Helm Command Options\nDESCRIPTION: Additional options inherited from parent commands that can be used with 'helm list', including Kubernetes API server configuration and authentication options.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_list.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Show CRDs Command Options in Bash\nDESCRIPTION: This code block lists all available options for the 'helm show crds' command, including flags for authentication, versioning, and connection security. These options allow users to customize the command's behavior based on their specific requirements.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_crds.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n  -h, --help                       help for crds\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --pass-credentials           pass credentials to all domains\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --repo string                chart repository url where to locate the requested chart\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the package before using it\n      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n```\n\n----------------------------------------\n\nTITLE: Instalando un chart de Helm con verificación\nDESCRIPTION: Demuestra cómo instalar un chart de Helm mientras se verifica su integridad utilizando la bandera --verify.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/provenance.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm install --generate-name --verify mychart-0.1.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Inherited Helm Command Options\nDESCRIPTION: Additional options inherited from parent commands that can be used with 'helm list', including Kubernetes API server configuration and authentication options.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_list.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands in Helm\nDESCRIPTION: Lists all the options inherited from parent commands that can be used with the 'helm show readme' command, including Kubernetes configuration options and repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_readme.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: AES Encryption in Go Templates\nDESCRIPTION: Shows how to use the encryptAES function to encrypt text with AES-256 CBC and return a base64 encoded string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_72\n\nLANGUAGE: go\nCODE:\n```\nencryptAES \"secretkey\" \"plaintext\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Helm Command Options in Bash\nDESCRIPTION: These options are inherited from parent commands and provide additional configuration for Kubernetes API interaction, authentication, and Helm-specific settings like repository and registry configurations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_status.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Basic Helm Package Command\nDESCRIPTION: The basic syntax for packaging a Helm chart into a versioned archive file. This command looks for a Chart.yaml file in the specified path and creates a packaged chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_package.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm package [CHART_PATH] [...] [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Helm Test Command\nDESCRIPTION: This snippet shows the basic syntax for running the 'helm test' command. It takes a RELEASE name as an argument and runs the tests defined in the installed chart for that release.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_test.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm test [RELEASE] [flags]\n```\n\n----------------------------------------\n\nTITLE: Managing Helm Plugins\nDESCRIPTION: Commands for installing, listing, updating, and removing Helm plugins. These commands allow you to extend Helm's functionality with additional tools and features through the plugin system.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/CheatSheet.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm plugin install <path/url1>     # Instalar plugins\nhelm plugin list                    # Ver una lista de todos los plugins instalados\nhelm plugin update <plugin>         # Actualizar plugins\nhelm plugin uninstall <plugin>      # Desinstalar un plugin\n```\n\n----------------------------------------\n\nTITLE: Managing Helm Plugins\nDESCRIPTION: Commands for installing, listing, updating, and uninstalling Helm plugins. These operations allow for extending Helm's functionality with custom plugins.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/CheatSheet.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm plugin install <path/url>      # Install plugins\nhelm plugin list                    # View a list of all installed plugins\nhelm plugin update <plugin>         # Update plugins\nhelm plugin uninstall <plugin>      # Uninstall a plugin\n```\n\n----------------------------------------\n\nTITLE: Basic Chart Repository Structure Example\nDESCRIPTION: Shows the typical file structure of a Helm chart repository including the index.yaml and chart package files.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/chart_repository.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncharts/\n  |\n  |- index.yaml\n  |\n  |- alpine-0.1.2.tgz\n  |\n  |- alpine-0.1.2.tgz.prov\n```\n\n----------------------------------------\n\nTITLE: Setting ImagePullPolicy in Helm Chart Deployment\nDESCRIPTION: Illustrates how to set the imagePullPolicy in a Helm chart deployment.yaml file, referencing a value from values.yaml.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/pods.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullPolicy: {{ .Values.image.pullPolicy }}\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Repositories\nDESCRIPTION: Command showing configured Helm chart repositories.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/using_helm.md#2025-04-08_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo list\nNAME            URL\nstable          https://charts.helm.sh/stable\nmumoshu         https://mumoshu.github.io/charts\n```\n\n----------------------------------------\n\nTITLE: Using 'fail' Function in Helm Templates\nDESCRIPTION: The 'fail' function unconditionally returns an empty string and an error with the specified text. It's useful when other conditionals have determined that template rendering should fail.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfail \"Please accept the end user license agreement\"\n```\n\n----------------------------------------\n\nTITLE: Helm Parent Command Options in Bash\nDESCRIPTION: Shows options inherited from the parent 'helm' command that can be used with the 'uninstall' subcommand, including Kubernetes API server configuration, authentication options, and repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_uninstall.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Global Command Options\nDESCRIPTION: Global options inherited from parent commands including Kubernetes configuration, authentication, and Helm repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_verify.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Using 'coalesce' Function in Helm Templates\nDESCRIPTION: The 'coalesce' function takes a list of values and returns the first non-empty one. It's useful for scanning through multiple variables or values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ncoalesce 0 1 2\n```\n\nLANGUAGE: go\nCODE:\n```\ncoalesce .name .parent.name \"Matt\"\n```\n\n----------------------------------------\n\nTITLE: Installing Helm via Apt on Debian/Ubuntu\nDESCRIPTION: This snippet shows how to add the Helm repository and install Helm using the Apt package manager on Debian/Ubuntu systems. It includes steps for adding the repository key and updating the package list.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/install.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncurl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null\nsudo apt-get install apt-transport-https --yes\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main\" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list\nsudo apt-get update\nsudo apt-get install helm\n```\n\n----------------------------------------\n\nTITLE: Markdown Code of Conduct Reference\nDESCRIPTION: A markdown heading and text that specifies Helm's adherence to the CNCF Code of Conduct with a link to the source document.\nSOURCE: https://github.com/helm/helm-www/blob/main/code-of-conduct.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Community Code of Conduct\n\nHelm follows the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md).\n```\n\n----------------------------------------\n\nTITLE: Defining Container Image and Tag Separately in Helm Chart\nDESCRIPTION: Shows how to reference a container image and its tag as separate fields from the values.yaml file in a Helm chart manifest.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/pods.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage: \"{{ .Values.redisImage }}:{{ .Values.redisTag }}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Helm via Scoop on Windows\nDESCRIPTION: This command installs Helm using the Scoop package manager on Windows. The Helm package is maintained by the community and is generally up to date.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/install.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nscoop install helm\n```\n\n----------------------------------------\n\nTITLE: Helm Registry Base Options\nDESCRIPTION: Basic command line options available for the helm registry command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_registry.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for registry\n```\n\n----------------------------------------\n\nTITLE: Global Root Context Variable in Helm\nDESCRIPTION: Illustrates using the $ variable to access the root context within deeply nested scopes, particularly useful in range loops.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/variables.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{{- range .Values.tlsSecrets }}\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ .name }}\n  labels:\n    app.kubernetes.io/name: {{ template \"fullname\" $ }}\n    helm.sh/chart: \"{{ $.Chart.Name }}-{{ $.Chart.Version }}\"\n    app.kubernetes.io/instance: \"{{ $.Release.Name }}\"\n    app.kubernetes.io/version: \"{{ $.Chart.AppVersion }}\"\n    app.kubernetes.io/managed-by: \"{{ $.Release.Service }}\"\ntype: kubernetes.io/tls\ndata:\n  tls.crt: {{ .certificate }}\n  tls.key: {{ .key }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Adding a Helm Repository\nDESCRIPTION: Example demonstrating how to add a new chart repository to Helm's configuration using the helm repo add command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/intro/using_helm.md#2025-04-08_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add dev https://example.com/dev-charts\n```\n\n----------------------------------------\n\nTITLE: Rolling Back a Release to a Previous Version\nDESCRIPTION: Shows how to roll back a Helm release named 'happy-panda' to revision 1 using the 'helm rollback' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/intro/using_helm.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm rollback happy-panda 1\n```\n\n----------------------------------------\n\nTITLE: Managing Helm Repositories\nDESCRIPTION: Commands for adding, listing, updating, and removing Helm chart repositories.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/CheatSheet.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add <repo-name> <url>   # Add a repository from the internet:\nhelm repo list                    # List added chart repositories\nhelm repo update                  # Update information of available charts locally from chart repositories\nhelm repo remove <repo_name>      # Remove one or more chart repositories\nhelm repo index <DIR>             # Read the current directory and generate an index file based on the charts found.\nhelm repo index <DIR> --merge     # Merge the generated index with an existing index file\nhelm search repo <keyword>        # Search repositories for a keyword in charts\nhelm search hub <keyword>         # Search for charts in the Artifact Hub or your own hub instance\n```\n\n----------------------------------------\n\nTITLE: Defining ImagePullPolicy in Helm Chart Values\nDESCRIPTION: Shows the default imagePullPolicy setting in the values.yaml file of a Helm chart created with 'helm create'.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/pods.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Adding a New Helm Repository\nDESCRIPTION: Demonstrates how to add a new chart repository to Helm using the 'helm repo add' command with a name and URL.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/intro/using_helm.md#2025-04-08_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add dev https://example.com/dev-charts\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Repositories\nDESCRIPTION: Example showing how to list configured Helm chart repositories using the helm repo list command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/intro/using_helm.md#2025-04-08_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo list\nNAME            URL\nstable          https://charts.helm.sh/stable\nmumoshu         https://mumoshu.github.io/charts\n```\n\n----------------------------------------\n\nTITLE: Range Loop with Key-Value Pairs in Helm\nDESCRIPTION: Shows how to use range to iterate over a map structure with both keys and values assigned to variables.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/variables.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- range $key, $val := .Values.favorite }}\n  {{ $key }}: {{ $val | quote }}\n  {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Helm Path\nDESCRIPTION: Bash command to update the PATH environment variable to include the local Helm binary directory for development testing.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/developers.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"<path to your binary folder>:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Helm Releases\nDESCRIPTION: Commands for listing and viewing status of Helm releases. These commands provide visibility into deployed Helm charts across different states and namespaces, including options for filtering and formatting output.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/CheatSheet.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm list                       # Lista todas las release. Usa el contexto del namespace actual si no se especifica.\nhelm list -all                  # Muestra todas las releases sin aplicar ningún filtro, puede usar -a\nhelm list -all-namespaces       # Muestra todas las releases de todos los namespaces, podemos usar -A\nhelm list -l key1=value1,key2=value2 # Selector (label query) para filtrar, soporta '=', '==', y '!='\nhelm list --date                # Ordenar por fecha de publicación\nhelm list --deployed            # Muestra las releases desplegadas. Si no se especifica otra, se activará automáticamente\nhelm list --pending             # Muestra las releases pendientes\nhelm list --failed              # Muestra las releases fallidas\nhelm list --uninstalled         # Muestra las releases desinstaladas (si se uso 'helm uninstall --keep-history')\nhelm list --superseded          # Muestra las releases sustituidas\nhelm list -o yaml               # Imprime la salida en el formato especificado. Valores permitidos: table, json, yaml (por defecto table)\nhelm status <release>           # Este comando muestra el estado de una release con nombre.\nhelm status <release> --revision <number>   # si se establece, muestra el estado de la release nombrada con la revisión\nhelm history <release>          # Historial de revisiones para una release dada.\nhelm env                        # Imprime toda la información de entorno usada por Helm\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Helm Repo Command in Bash\nDESCRIPTION: This code snippet shows the basic usage of the 'helm repo' command with the help flag. It displays the available options specific to the repo command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for repo\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Agreement Text\nDESCRIPTION: The full text of the Developer Certificate of Origin (DCO) version 1.1 that contributors must agree to when making contributions to the project.\nSOURCE: https://github.com/helm/helm-www/blob/main/CONTRIBUTING.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Correct Scope Management After 'with' Block\nDESCRIPTION: Shows how to correctly access a parent scope variable by placing it outside the 'with' block where the scope is reset.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  {{- end }}\n  release: {{ .Release.Name }}\n```\n\n----------------------------------------\n\nTITLE: Creating Release Branch for Major/Minor Releases\nDESCRIPTION: Git commands to create and checkout the release branch from main for major/minor releases\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\ngit checkout upstream/main\ngit checkout -b $RELEASE_BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Downloading Release Candidate - Linux\nDESCRIPTION: Command to download Helm release candidate binary for Linux AMD64 architecture.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nwget https://get.helm.sh/helm-$RELEASE_CANDIDATE_NAME-linux-amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Helm Global Command Options\nDESCRIPTION: Global configuration options inherited from parent commands, including Kubernetes authentication, API settings, and repository configurations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_push.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Basic ConfigMap Template with Values\nDESCRIPTION: Example of a Kubernetes ConfigMap template that uses a value from values.yaml file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/values_files.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favoriteDrink }}\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing a Helm Chart\nDESCRIPTION: Demonstrates how to create a new Helm chart and sign it during packaging. This process generates both the chart archive (.tgz) and its provenance file (.prov).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/provenance.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm create mychart\nCreating mychart\n\n$ helm package --sign --key 'John Smith' --keyring path/to/keyring.secret mychart\n```\n\n----------------------------------------\n\nTITLE: Basic ConfigMap Template with Values\nDESCRIPTION: Example of a Kubernetes ConfigMap template that uses a value from values.yaml file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/values_files.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favoriteDrink }}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Helm Chart with helm create\nDESCRIPTION: This command creates a new Helm chart scaffold named 'deis-workflow' with the basic structure and files needed for chart development.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/intro/using_helm.md#2025-04-08_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ helm create deis-workflow\nCreating deis-workflow\n```\n\n----------------------------------------\n\nTITLE: Basic ConfigMap Template with Values\nDESCRIPTION: Example of a Kubernetes ConfigMap template that uses a value from values.yaml file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/values_files.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favoriteDrink }}\n```\n\n----------------------------------------\n\nTITLE: Accessing List Elements in YAML with --set\nDESCRIPTION: This YAML snippet shows how to access and set values for specific list elements using array index notation, equivalent to using --set with square brackets.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - port: 80\n```\n\n----------------------------------------\n\nTITLE: Values Configuration File\nDESCRIPTION: Example values.yaml file containing default values for the Helm chart template.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nimageRegistry: \"quay.io/deis\"\ndockerTag: \"latest\"\npullPolicy: \"Always\"\nstorage: \"s3\"\n```\n\n----------------------------------------\n\nTITLE: Using 'with' to Change Scope in Helm Templates\nDESCRIPTION: Demonstrates using the 'with' action to modify the current scope and simplify variable references within a block.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Korean Language in TOML Configuration\nDESCRIPTION: This snippet shows how to add Korean language support to the Helm website configuration file. It includes parameters for title, description, content directory, language name, and weight for navigation order.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/localization.md#2025-04-08_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# Korean\n[languages.ko]\ntitle = \"Helm\"\ndescription = \"Helm - The Kubernetes Package Manager.\"\ncontentDir = \"content/ko\"\nlanguageName = \"한국어 Korean\"\nweight = 1\n```\n\n----------------------------------------\n\nTITLE: Creating and Copying Files for Korean Translation in Bash\nDESCRIPTION: This snippet demonstrates how to create the necessary directory structure and copy English source files to begin translating Helm documentation into Korean. It creates the appropriate directories and copies an example file to be translated.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/localization.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p content/ko/docs/intro\ncp content/en/docs/intro/install.md content/ko/docs/intro/install.md\n```\n\n----------------------------------------\n\nTITLE: Defining Values in YAML\nDESCRIPTION: Example values.yaml file showing the structure for favorite drinks, food, and pizza toppings list.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nfavorite:\n  drink: coffee\n  food: pizza\npizzaToppings:\n  - mushrooms\n  - cheese\n  - peppers\n  - onions\n  - pineapple\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Repository Instructions in Markdown\nDESCRIPTION: A markdown snippet providing instructions for users on how to add the Helm repository, install charts, and uninstall charts. It includes placeholders for repository alias, organization name, and chart name.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/chart_releaser_action.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Usage\n\n[Helm](https://helm.sh) must be installed to use the charts.  Please refer to\nHelm's [documentation](https://helm.sh/docs) to get started.\n\nOnce Helm has been set up correctly, add the repo as follows:\n\n  helm repo add <alias> https://<orgname>.github.io/helm-charts\n\nIf you had already added this repo earlier, run `helm repo update` to retrieve\nthe latest versions of the packages.  You can then run `helm search repo\n<alias>` to see the charts.\n\nTo install the <chart-name> chart:\n\n    helm install my-<chart-name> <alias>/<chart-name>\n\nTo uninstall the chart:\n\n    helm uninstall my-<chart-name>\n```\n\n----------------------------------------\n\nTITLE: Defining a Post-Install Job Hook in Helm Chart\nDESCRIPTION: This YAML snippet defines a Kubernetes Job resource as a post-install hook in a Helm chart. It demonstrates how to use annotations to specify the hook type, weight, and deletion policy.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts_hooks.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: \"{{ .Release.Name }}\"\n  labels:\n    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}\n    app.kubernetes.io/instance: {{ .Release.Name | quote }}\n    app.kubernetes.io/version: {{ .Chart.AppVersion }}\n    helm.sh/chart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"\n  annotations:\n    # This is what defines this resource as a hook. Without this line, the\n    # job is considered part of the release.\n    \"helm.sh/hook\": post-install\n    \"helm.sh/hook-weight\": \"-5\"\n    \"helm.sh/hook-delete-policy\": hook-succeeded\nspec:\n  template:\n    metadata:\n      name: \"{{ .Release.Name }}\"\n      labels:\n        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}\n        app.kubernetes.io/instance: {{ .Release.Name | quote }}\n        helm.sh/chart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"\n    spec:\n      restartPolicy: Never\n      containers:\n      - name: post-install-job\n        image: \"alpine:3.3\"\n        command: [\"/bin/sleep\",\"{{ default \\\"10\\\" .Values.sleepyTime }}\"]\n\n```\n\n----------------------------------------\n\nTITLE: Global Values Configuration in Helm Charts\nDESCRIPTION: Example showing how to use global values that are accessible across all subcharts. Demonstrates the global values inheritance pattern.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"My WordPress Site\" # Sent to the WordPress template\n\nglobal:\n  app: MyWordPress\n\nmysql:\n  max_connections: 100 # Sent to MySQL\n  password: \"secret\"\n\napache:\n  port: 8080 # Passed to Apache\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx Ingress Chart with Helm 3\nDESCRIPTION: Demonstrates the installation of the Nginx Ingress chart using Helm 3's install command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-11-13-helm-3-released.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install my-ingress-controller nginx/nginx-ingress\n```\n\n----------------------------------------\n\nTITLE: Reference to Helm Repo Command\nDESCRIPTION: Command for managing Helm chart repositories including adding, updating, and listing repositories.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/using_helm.md#2025-04-08_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo\n```\n\n----------------------------------------\n\nTITLE: YAML Quoted Numbers as Strings\nDESCRIPTION: Demonstrates how quotes convert numeric values to strings in YAML.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/yaml_techniques.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncount: \"1\" # <-- string, not int\nsize: '2.34' # <-- string, not float\n```\n\n----------------------------------------\n\nTITLE: Creating a New Helm Chart\nDESCRIPTION: Demonstrates how to create a new Helm chart named 'diy' using Helm 3's create command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-11-13-helm-3-released.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ helm create diy\nCreating diy\n```\n\n----------------------------------------\n\nTITLE: Using 'ge' Function in Helm Templates\nDESCRIPTION: The 'ge' function returns a boolean true if the first argument is greater than or equal to the second. False is returned otherwise (e.g., Arg1 >= Arg2).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nge .Arg1 .Arg2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Release Values in Helm\nDESCRIPTION: Demonstrates how to retrieve the current values for a Helm release using the 'helm get values' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/using_helm.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm get values happy-panda\n```\n\n----------------------------------------\n\nTITLE: Illustrating Incorrect Naming Conventions in YAML for Helm Values\nDESCRIPTION: Demonstrates incorrect naming practices for variables in a Helm chart's values.yaml file, including initial caps and use of hyphens.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/values.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nChicken: true  # initial caps may conflict with built-ins\nchicken-noodle-soup: true # do not use hyphens in the name\n```\n\n----------------------------------------\n\nTITLE: Helm Dependency Update Command Syntax\nDESCRIPTION: Basic command syntax for updating Helm chart dependencies. This command verifies and updates required charts as specified in Chart.yaml.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_dependency_update.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm dependency update CHART [flags]\n```\n\n----------------------------------------\n\nTITLE: Migrating Helm v2 Configuration to Helm v3 (Dry Run)\nDESCRIPTION: Demonstrates a dry run of migrating Helm v2 configuration to Helm v3 using the helm-2to3 plugin, showing what actions would be taken without actually performing them.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 2to3 move config --dry-run\n2019/11/14 14:54:04 NOTE: This is in dry-run mode, the following actions will not be executed.\n2019/11/14 14:54:04 Run without --dry-run to take the actions described below:\n2019/11/14 14:54:04\n2019/11/14 14:54:04 WARNING: Helm v3 configuration maybe overwritten during this operation.\n2019/11/14 14:54:04\n[Move Config/confirm] Are you sure you want to move the v2 configration? [y/N]: y\n2019/11/14 14:54:12\nHelm v2 configuration will be moved to Helm v3 configration.\n2019/11/14 14:54:12 [Helm 2] Home directory: /Users/rimas/.helm\n2019/11/14 14:54:12 [Helm 3] Config directory: /Users/rimas/Library/Preferences/helm\n2019/11/14 14:54:12 [Helm 3] Data directory: /Users/rimas/Library/helm\n2019/11/14 14:54:12 [Helm 3] Create config folder \"/Users/rimas/Library/Preferences/helm\" .\n2019/11/14 14:54:12 [Helm 2] repositories file \"/Users/rimas/.helm/repository/repositories.yaml\" will copy to [Helm 3] config folder \"/Users/rimas/Library/Preferences/helm/repositories.yaml\" .\n2019/11/14 14:54:12 [Helm 3] Create data folder \"/Users/rimas/Library/helm\" .\n2019/11/14 14:54:12 [Helm 2] plugins \"/Users/rimas/.helm/plugins\" will copy to [Helm 3] data folder \"/Users/rimas/Library/helm/plugins\" .\n2019/11/14 14:54:12 [Helm 2] starters \"/Users/rimas/.helm/starters\" will copy to [Helm 3] data folder \"/Users/rimas/Library/helm/starters\" .\n```\n\n----------------------------------------\n\nTITLE: Basic TOML Configuration File Example (config1.toml)\nDESCRIPTION: A simple TOML configuration file containing a message property. TOML is a configuration file format similar to old-school Windows INI files.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/accessing_files.md#2025-04-08_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nmessage = Hello from config 1\n```\n\n----------------------------------------\n\nTITLE: Converting Tillerless Helm v2 release in Bash\nDESCRIPTION: Shows how to migrate a release from Tillerless Helm v2 to Helm v3 using the --tiller-out-cluster flag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 2to3 convert postgres --tiller-out-cluster\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Helm Release\nDESCRIPTION: Demonstrates how to uninstall a Helm release using the 'helm uninstall' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/using_helm.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ helm uninstall happy-panda\n```\n\n----------------------------------------\n\nTITLE: Defining Nested YAML Values with --set\nDESCRIPTION: This YAML snippet shows how to represent nested values in YAML format, equivalent to using the --set option with dot notation for nested structures.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nouter:\n  inner: value\n```\n\n----------------------------------------\n\nTITLE: Viewing helm-2to3 cleanup options in Bash\nDESCRIPTION: Displays the available options for the cleanup command, which is used to remove Helm v2 configuration, release data, and Tiller deployment.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 2to3 cleanup -h\ncleanup Helm v2 configuration, release data and Tiller deployment\n\nUsage:\n  2to3 cleanup [flags]\n\nFlags:\n      --config-cleanup           if set, configuration cleanup performed\n      --dry-run                  simulate a command\n  -h, --help                     help for cleanup\n  -l, --label string             label to select Tiller resources by (default \"OWNER=TILLER\")\n      --release-cleanup          if set, release data cleanup performed\n  -s, --release-storage string   v2 release storage type/object. It can be 'secrets' or 'configmaps'. This is only used with the 'tiller-out-cluster' flag (default \"secrets\")\n      --tiller-cleanup           if set, Tiller cleanup performed\n  -t, --tiller-ns string         namespace of Tiller (default \"kube-system\")\n      --tiller-out-cluster       when  Tiller is not running in the cluster e.g. Tillerless\n```\n\n----------------------------------------\n\nTITLE: Second TOML Configuration File Example (config2.toml)\nDESCRIPTION: Another simple TOML configuration file containing a different message property.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/accessing_files.md#2025-04-08_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nmessage = This is config 2\n```\n\n----------------------------------------\n\nTITLE: OCI Image Manifest Structure for Helm Charts\nDESCRIPTION: Example JSON structure showing the composition of an OCI-based Helm chart manifest, including config and layers with their associated media types, sizes, and digests. The manifest demonstrates how charts and provenance files are stored as OCI artifacts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2023-05-15-helm-oci-mediatypes.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.cncf.helm.config.v1+json\",\n    \"digest\": \"sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111\",\n    \"size\": 117\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.cncf.helm.chart.content.v1.tar+gzip\",\n      \"digest\": \"sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617\",\n      \"size\": 2487\n    },\n    {\n      \"mediaType\": \"application/vnd.cncf.helm.chart.provenance.v1.prov\",\n      \"digest\": \"sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a\",\n      \"size\": 643\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Values Schema Validation Example\nDESCRIPTION: Example values.yaml file that meets the requirements defined in the JSON schema.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nname: frontend\nprotocol: https\nport: 443\n```\n\n----------------------------------------\n\nTITLE: Installing a Helm Chart\nDESCRIPTION: This command updates the local chart repository cache and installs the MySQL chart from the Bitnami repository. It generates a unique name for the release.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo update              # 确定我们可以拿到最新的charts列表\n$ helm install bitnami/mysql --generate-name\nNAME: mysql-1612624192\nLAST DEPLOYED: Sat Feb  6 16:09:56 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES: ...\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling Helm Charts\nDESCRIPTION: Commands for installing Helm charts with various options and uninstalling releases.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/CheatSheet.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install <name> <chart>                           # Install the chart with a name\nhelm install <name> <chart> --namespace <namespace>   # Install the chart in a specific namespace\nhelm install <name> <chart> --set key1=val1,key2=val2 # Set values on the command line (can specify multiple or separate values with commas)\nhelm install <name> <chart> --values <yaml-file/url>  # Install the chart with your specified values\nhelm install <name> <chart> --dry-run --debug         # Run a test installation to validate chart (p)\nhelm install <name> <chart> --verify                  # Verify the package before using it \nhelm install <name> <chart> --dependency-update       # update dependencies if they are missing before installing the chart\nhelm uninstall <name>                                 # Uninstall a release\n```\n\n----------------------------------------\n\nTITLE: Example Helm Install Output with NOTES.txt\nDESCRIPTION: The console output when installing a Helm chart that includes a NOTES.txt file. It shows the resources created by the installation followed by the rendered NOTES.txt template with actual values substituted.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/notes_files.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRESOURCES:\n==> v1/Secret\nNAME                   TYPE      DATA      AGE\nrude-cardinal-secret   Opaque    1         0s\n\n==> v1/ConfigMap\nNAME                      DATA      AGE\nrude-cardinal-configmap   3         0s\n\n\nNOTES:\nThank you for installing mychart.\n\nYour release is named rude-cardinal.\n\nTo learn more about the release, try:\n\n  $ helm status rude-cardinal\n  $ helm get all rude-cardinal\n```\n\n----------------------------------------\n\nTITLE: Managing Helm Charts\nDESCRIPTION: Commands for creating, packaging, linting, inspecting, and managing dependencies of Helm charts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/CheatSheet.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm create <name>                      # Creates a chart directory along with the common files and directories used in a chart.\nhelm package <chart-path>               # Packages a chart into a versioned chart archive file.\nhelm lint <chart>                       # Run tests to examine a chart and identify possible issues:\nhelm show all <chart>                   # Inspect a chart and list its contents:\nhelm show values <chart>                # Displays the contents of the values.yaml file\nhelm pull <chart>                       # Download/pull chart \nhelm pull <chart> --untar=true          # If set to true, will untar the chart after downloading it\nhelm pull <chart> --verify              # Verify the package before using it\nhelm pull <chart> --version <number>    # Default-latest is used, specify a version constraint for the chart version to use\nhelm dependency list <chart>            # Display a list of a chart's dependencies:\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Helm Release\nDESCRIPTION: Shows how to rollback a Helm release to a previous revision using the 'helm rollback' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/using_helm.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm rollback happy-panda 1\n```\n\n----------------------------------------\n\nTITLE: Installing a Packaged Helm Chart\nDESCRIPTION: Shows how to install a locally packaged Helm chart using the 'helm install' command with a release name and path to the chart archive.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/intro/using_helm.md#2025-04-08_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ helm install deis-workflow ./deis-workflow-0.1.0.tgz\n...\n```\n\n----------------------------------------\n\nTITLE: Updating ConfigMap Template with Release Name\nDESCRIPTION: Modified ConfigMap template using the .Release.Name template directive to dynamically set the ConfigMap name.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/getting_started.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Conditional in a ConfigMap Template\nDESCRIPTION: Demonstrates adding a conditional property to a ConfigMap based on a drink preference setting in values.yaml.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n  {{ if eq .Values.favorite.drink \"coffee\" }}mug: \"true\"{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Incorrect YAML Indentation with template Function\nDESCRIPTION: Example showing incorrect indentation when using the template function in Helm, where app_version values are not properly aligned.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/named_templates.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: measly-whippet-configmap\n  labels:\n    app_name: mychart\napp_version: \"0.1.0\"\ndata:\n  myvalue: \"Hello World\"\n  drink: \"coffee\"\n  food: \"pizza\"\napp_name: mychart\napp_version: \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Lookup Function with Service Range\nDESCRIPTION: Shows how to use lookup to iterate over services in a namespace.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/functions_and_pipelines.md#2025-04-08_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n{{ range $index, $service := (lookup \"v1\" \"Service\" \"mynamespace\" \"\").items }}\n    {{/* do something with each service */}}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Testing a Subchart with Helm Install\nDESCRIPTION: Dry run command to test the subchart independently, showing how the template is rendered with the dessert value.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/subcharts_and_globals.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm install --generate-name --dry-run --debug mychart/charts/mysubchart\nSERVER: \"localhost:44134\"\nCHART PATH: /Users/mattbutcher/Code/Go/src/helm.sh/helm/_scratch/mychart/charts/mysubchart\nNAME:   newbie-elk\nTARGET NAMESPACE:   default\nCHART:  mysubchart 0.1.0\nMANIFEST:\n---\n# Source: mysubchart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: newbie-elk-cfgmap2\ndata:\n  dessert: cake\n```\n\n----------------------------------------\n\nTITLE: List Operations in Helm Templates\nDESCRIPTION: Examples of list creation and manipulation using Helm's list functions including first, last, append, and prepend operations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_87\n\nLANGUAGE: go\nCODE:\n```\n$myList := list 1 2 3 4 5\n```\n\nLANGUAGE: go\nCODE:\n```\n$new = append $myList 6\n```\n\nLANGUAGE: go\nCODE:\n```\nconcat $myList ( list 6 7 ) ( list 8 )\n```\n\nLANGUAGE: go\nCODE:\n```\nwithout $myList 1 3 5\n```\n\n----------------------------------------\n\nTITLE: Using the Helm Search Hub Command\nDESCRIPTION: The primary command syntax for searching Helm charts in Artifact Hub or a custom hub instance. The command accepts a keyword string or quoted string of rich query options.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_search_hub.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm search hub [KEYWORD] [flags]\n```\n\n----------------------------------------\n\nTITLE: Multiple Pipeline Functions in Helm\nDESCRIPTION: Demonstrates chaining multiple functions using pipelines including string transformation functions like upper.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/functions_and_pipelines.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Release Name in Helm Templates\nDESCRIPTION: Demonstrates how to access the release name in a Helm template using dot notation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/builtin_objects.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ .Release.Name }}\n```\n\n----------------------------------------\n\nTITLE: Helm Uninstall Command Options in Bash\nDESCRIPTION: Lists the available options for the 'helm uninstall' command, including flags to control deletion strategy, add descriptions, simulate uninstalls, and configure timeouts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_uninstall.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --cascade string       Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents. Defaults to background. (default \"background\")\n      --description string   add a custom description\n      --dry-run              simulate a uninstall\n  -h, --help                 help for uninstall\n      --ignore-not-found     Treat \"release not found\" as a successful uninstall\n      --keep-history         remove all associated resources and mark the release as deleted, but retain the release history\n      --no-hooks             prevent hooks from running during uninstallation\n      --timeout duration     time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n      --wait                 if set, will wait until all the resources are deleted before returning. It will wait for as long as --timeout\n```\n\n----------------------------------------\n\nTITLE: Advanced Default Value Computation\nDESCRIPTION: Shows how to use default with computed values using printf and include functions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/functions_and_pipelines.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndrink: {{ .Values.favorite.drink | default (printf \"%s-tea\" (include \"fullname\" .)) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Helm Architecture Documentation\nDESCRIPTION: This YAML snippet defines the metadata for the Helm Architecture documentation page. It specifies the title, description, aliases, and weight of the page in the documentation structure.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/architecture.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Helm Architecture\"\ndescription: \"Describes the Helm architecture at a high level.\"\naliases: [\"/docs/architecture/\"]\nweight: 8\n---\n```\n\n----------------------------------------\n\nTITLE: Empaquetando y firmando un chart de Helm\nDESCRIPTION: Demuestra cómo empaquetar y firmar un chart de Helm utilizando una clave PGP específica y un anillo de claves.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/provenance.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ helm package --sign --key 'John Smith' --keyring path/to/keyring.secret mychart\n```\n\n----------------------------------------\n\nTITLE: Rendering External Configuration Files with tpl Function in Helm\nDESCRIPTION: This example demonstrates how to use the tpl function to render an external configuration file with values from the Helm chart. It shows retrieving a file with .Files.Get and processing it as a template.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/charts_tips_and_tricks.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# external configuration file conf/app.conf\nfirstName={{ .Values.firstName }}\nlastName={{ .Values.lastName }}\n\n# values\nfirstName: Peter\nlastName: Parker\n\n# template\n{{ tpl (.Files.Get \"conf/app.conf\") . }}\n\n# output\nfirstName=Peter\nlastName=Parker\n```\n\n----------------------------------------\n\nTITLE: Helm Uninstall Command Options in Bash\nDESCRIPTION: Lists the available options for the 'helm uninstall' command, including flags to control deletion strategy, add descriptions, simulate uninstalls, and configure timeouts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_uninstall.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --cascade string       Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents. Defaults to background. (default \"background\")\n      --description string   add a custom description\n      --dry-run              simulate a uninstall\n  -h, --help                 help for uninstall\n      --ignore-not-found     Treat \"release not found\" as a successful uninstall\n      --keep-history         remove all associated resources and mark the release as deleted, but retain the release history\n      --no-hooks             prevent hooks from running during uninstallation\n      --timeout duration     time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n      --wait                 if set, will wait until all the resources are deleted before returning. It will wait for as long as --timeout\n```\n\n----------------------------------------\n\nTITLE: Installing helm-2to3 Plugin in Helm v3\nDESCRIPTION: Demonstrates how to install the helm-2to3 plugin for Helm v3, which is used to migrate Helm v2 configuration and releases to Helm v3.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 plugin install https://github.com/helm/helm-2to3\nDownloading and installing helm-2to3 v0.2.0 ...\nhttps://github.com/helm/helm-2to3/releases/download/v0.2.0/helm-2to3_0.2.0_darwin_amd64.tar.gz\nInstalled plugin: 2to3\n```\n\n----------------------------------------\n\nTITLE: Using the Helm Dependency Build Command\nDESCRIPTION: The basic syntax for the helm dependency build command, which rebuilds the charts/ directory based on the Chart.lock file without re-negotiating dependencies.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_dependency_build.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm dependency build CHART [flags]\n```\n\n----------------------------------------\n\nTITLE: Parent Chart ConfigMap Using Global Value\nDESCRIPTION: Parent chart template that accesses a global value defined in the values.yaml file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/subcharts_and_globals.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  salad: {{ .Values.global.salad }}\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Get All Command in Bash\nDESCRIPTION: This command retrieves all information for a named release in Helm. It prints a human-readable collection of information about the notes, hooks, supplied values, and generated manifest file of the given release.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_all.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm get all RELEASE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Helm Show Values Basic Command Syntax\nDESCRIPTION: Basic command syntax for showing a chart's values.yaml contents. The command accepts a chart reference which can be a directory, file, or URL.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_values.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values [CHART] [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic NOTES.txt Template for Helm Charts\nDESCRIPTION: A simple NOTES.txt template file that provides users with information after chart installation. It uses template variables to display the chart name and release name, along with commands for getting more information about the release.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/notes_files.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThank you for installing {{ .Chart.Name }}.\n\nYour release is named {{ .Release.Name }}.\n\nTo learn more about the release, try:\n\n  $ helm status {{ .Release.Name }}\n  $ helm get all {{ .Release.Name }}\n\n```\n\n----------------------------------------\n\nTITLE: Default Function Usage in Helm\nDESCRIPTION: Demonstrates using the default function to provide fallback values when a value is not defined.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/functions_and_pipelines.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndrink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n```\n\n----------------------------------------\n\nTITLE: Basic RBAC and ServiceAccount Configuration in Helm\nDESCRIPTION: Basic YAML structure for configuring RBAC and ServiceAccount settings in Helm charts. Shows separate configuration blocks for RBAC creation and ServiceAccount management with customizable names.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/rbac.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrbac:\n  # Specifies whether RBAC resources should be created\n  create: true\n\nserviceAccount:\n  # Specifies whether a ServiceAccount should be created\n  create: true\n  # The name of the ServiceAccount to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name:\n```\n\n----------------------------------------\n\nTITLE: Modifying Service Template for Common Helm Helper Chart\nDESCRIPTION: Illustrates how to edit the service.yaml file to use the common service template and define overrides for the Service resource.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/library_charts.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.service\" (list . \"demo.service\") -}}\n{{- define \"demo.service\" -}}\n## Define overrides for your Service resource here, e.g.\n# metadata:\n#   labels:\n#     custom: label\n# spec:\n#   ports:\n#   - port: 8080\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Adding Common Chart as Dependency in Chart.yaml\nDESCRIPTION: Shows how to add the common chart as a dependency in the Chart.yaml file, specifying the name, version, and repository.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/library_charts.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n- name: common\n  version: \"^0.0.5\"\n  repository: \"https://charts.helm.sh/incubator/\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Object Types in Helm Templates with printf\nDESCRIPTION: A simple technique to determine an object's type in Helm templates by using the printf function with the %T format specifier. This helps in debugging and understanding variable types when working with templates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/data_types.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nprintf \"%T\"\n```\n\n----------------------------------------\n\nTITLE: Helm List Command Options\nDESCRIPTION: Lists all available options (flags) for the 'helm list' command. These options allow customization of the command's behavior, such as showing all releases, sorting, filtering, and output formatting.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/helm/helm_list.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -a, --all                  show all releases without any filter applied\n  -A, --all-namespaces       list releases across all namespaces\n  -d, --date                 sort by release date\n      --deployed             show deployed releases. If no other is specified, this will be automatically enabled\n      --failed               show failed releases\n  -f, --filter string        a regular expression (Perl compatible). Any releases that match the expression will be included in the results\n  -h, --help                 help for list\n  -m, --max int              maximum number of releases to fetch (default 256)\n      --no-headers           don't print headers when using the default output format\n      --offset int           next release index in the list, used to offset from start value\n  -o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --pending              show pending releases\n  -r, --reverse              reverse the sort order\n  -l, --selector string      Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Works only for secret(default) and configmap storage backends.\n  -q, --short                output short (quiet) listing format\n      --superseded           show superseded releases\n      --time-format string   format time using golang time formatter. Example: --time-format \"2006-01-02 15:04:05Z0700\"\n      --uninstalled          show uninstalled releases (if 'helm uninstall --keep-history' was used)\n      --uninstalling         show releases that are currently being uninstalled\n```\n\n----------------------------------------\n\nTITLE: Values File Example - YAML\nDESCRIPTION: Example values.yaml file providing default values for template parameters.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/charts.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimageRegistry: \"quay.io/deis\"\ndockerTag: \"latest\"\npullPolicy: \"Always\"\nstorage: \"s3\"\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaced Helm Template\nDESCRIPTION: Examples of correct and incorrect template name definition using the define directive. Templates should be namespaced to avoid conflicts across charts and subcharts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/templates.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- define \"nginx.fullname\" }}\n{{/* ... */}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Exemplifying Nested Values Structure in YAML for Helm Charts\nDESCRIPTION: Shows how to structure nested values in a Helm chart's values.yaml file, which can be useful for related variables but may require more complex checks in templates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/values.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  name: nginx\n  port: 80\n```\n\n----------------------------------------\n\nTITLE: Using helm plugin list Command\nDESCRIPTION: Basic syntax for listing installed Helm plugins. This command displays all plugins currently installed in the Helm environment.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_plugin_list.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm plugin list [flags]\n```\n\n----------------------------------------\n\nTITLE: Required Function Usage in Helm Templates\nDESCRIPTION: This snippet demonstrates the required function which enforces that a value must be defined. It will render the template when .Values.foo is defined but will fail with the specified error message when .Values.foo is undefined.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/charts_tips_and_tricks.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n{{ required \"A valid foo is required!\" .Values.foo }}\n```\n\n----------------------------------------\n\nTITLE: Using 'eq' Function in Helm Templates\nDESCRIPTION: The 'eq' function returns the boolean equality of the arguments (e.g., Arg1 == Arg2).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\neq .Arg1 .Arg2\n```\n\n----------------------------------------\n\nTITLE: Creating Image Pull Secrets in Helm Templates\nDESCRIPTION: This snippet demonstrates how to create image pull secrets in Helm templates. It defines credentials in values.yaml and uses a helper template to generate the Docker configuration file encoded in base64 for the Secret's payload.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/charts_tips_and_tricks.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimageCredentials:\n  registry: quay.io\n  username: someone\n  password: sillyness\n  email: someone@host.com\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{- define \"imagePullSecret\" }}\n{{- with .Values.imageCredentials }}\n{{- printf \"{\\\"auths\\\":{\\\"%s\\\":{\\\"username\\\":\\\"%s\\\",\\\"password\\\":\\\"%s\\\",\\\"email\\\":\\\"%s\\\",\\\"auth\\\":\\\"%s\\\"}}}\" .registry .username .password .email (printf \"%s:%s\" .username .password | b64enc) | b64enc }}\n{{- end }}\n{{- end }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: myregistrykey\ntype: kubernetes.io/dockerconfigjson\ndata:\n  .dockerconfigjson: {{ template \"imagePullSecret\" . }}\n```\n\n----------------------------------------\n\nTITLE: Helm Pull Command Options\nDESCRIPTION: Available command-line options specific to the helm pull command, including flags for certificate handling, destination configuration, and chart verification.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_pull.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n  -d, --destination string         location to write the chart. If this and untardir are specified, untardir is appended to this (default \".\")\n      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored.\n  -h, --help                       help for pull\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --pass-credentials           pass credentials to all domains\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --prov                       fetch the provenance file, but don't perform verification\n      --repo string                chart repository url where to locate the requested chart\n      --untar                      if set to true, will untar the chart after downloading it\n      --untardir string            if untar is specified, this flag specifies the name of the directory into which the chart is expanded (default \".\")\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the package before using it\n      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n```\n\n----------------------------------------\n\nTITLE: WordPress Chart Directory Structure\nDESCRIPTION: Example showing how WordPress chart expresses dependencies on Apache and MySQL charts through the charts directory structure.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nwordpress:\n  Chart.yaml\n  # ...\n  charts/\n    apache/\n      Chart.yaml\n      # ...\n    mysql/\n      Chart.yaml\n      # ...\n```\n\n----------------------------------------\n\nTITLE: Helm Status Command Options in Bash\nDESCRIPTION: These are the specific options available for the 'helm status' command. They allow for customizing the output format, specifying a revision, and showing additional details like description and resources.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_status.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help             help for status\n  -o, --output format    prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --revision int     if set, display the status of the named release with revision\n      --show-desc        if set, display the description message of the named release\n      --show-resources   if set, display the resources of the named release\n```\n\n----------------------------------------\n\nTITLE: URL Query Escaping\nDESCRIPTION: Example of escaping a string for use in a URL query parameter using the urlquery function.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_99\n\nLANGUAGE: go\nCODE:\n```\n$var := urlquery \"string for query\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Helm Chart Repository\nDESCRIPTION: This command adds the Bitnami chart repository to Helm. It allows access to Bitnami's collection of Helm charts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add bitnami https://charts.bitnami.com/bitnami\n```\n\n----------------------------------------\n\nTITLE: Implementing Utility Merge Function\nDESCRIPTION: YAML template defining a utility function to merge two YAML templates, allowing for template customization.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/library_charts.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{{- /*\nmylibchart.util.merge will merge two YAML templates and output the result.\nThis takes an array of three values:\n- the top context\n- the template name of the overrides (destination)\n- the template name of the base (source)\n*/}}\n{{- define \"mylibchart.util.merge\" -}}\n{{- $top := first . -}}\n{{- $overrides := fromYaml (include (index . 1) $top) | default (dict ) -}}\n{{- $tpl := fromYaml (include (index . 2) $top) | default (dict ) -}}\n{{- toYaml (merge $overrides $tpl) -}}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Listing All Helm Releases Including Uninstalled\nDESCRIPTION: Example demonstrating how to list all Helm releases, including those that have been uninstalled with the --keep-history flag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/intro/using_helm.md#2025-04-08_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$  helm list --all\nNAME            VERSION UPDATED                         STATUS          CHART\nhappy-panda     2       Wed Sep 28 12:47:54 2016        UNINSTALLED     wordpress-10.4.5.6.0\ninky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0\nkindred-angelf  2       Tue Sep 27 16:16:10 2016        UNINSTALLED     alpine-0.1.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Helm Release Information\nDESCRIPTION: Commands for gathering detailed information about deployed Helm releases. These commands allow you to access manifests, hooks, values, and notes associated with a specific release for troubleshooting and information purposes.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/CheatSheet.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm get all <release>      # Una colección legible por humanos de información sobre las notas, hooks, valores suministrados, y fichero de manifiesto generado de la release dada.\nhelm get hooks <release>    # Este comando descarga los hooks para una release dada. Los hooks están formateados en YAML y separados por el separador YAML '---\\n'.\nhelm get manifest <release> # Un manifiesto es una representación codificada en YAML de los recursos de Kubernetes que se generaron a partir de la(s) chart(s) de esta release. Si un chart depende de otras charts, esos recursos también se incluirán en el manifiesto.\nhelm get notes <release>    # Muestra las notas proporcionadas por la chart de una release con nombre.\nhelm get values <release>   # Descarga un archivo de valores para un lanzamiento dado. use -o para formatear la salida\n```\n\n----------------------------------------\n\nTITLE: Sample Helm Repository Index File\nDESCRIPTION: Example of an index.yaml file that contains metadata about charts in the repository, including versions, descriptions, and download URLs.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/chart_repository.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nentries:\n  alpine:\n    - created: 2016-10-06T16:23:20.499814565-06:00\n      description: Deploy a basic Alpine Linux pod\n      digest: 99c76e403d752c84ead610644d4b1c2f2b453a74b921f422b9dcb8a7c8b559cd\n      home: https://helm.sh/helm\n      name: alpine\n      sources:\n      - https://github.com/helm/helm\n      urls:\n      - https://technosophos.github.io/tscharts/alpine-0.2.0.tgz\n      version: 0.2.0\n    - created: 2016-10-06T16:23:20.499543808-06:00\n      description: Deploy a basic Alpine Linux pod\n      digest: 515c58e5f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cd78727\n      home: https://helm.sh/helm\n      name: alpine\n      sources:\n      - https://github.com/helm/helm\n      urls:\n      - https://technosophos.github.io/tscharts/alpine-0.1.0.tgz\n      version: 0.1.0\n  nginx:\n    - created: 2016-10-06T16:23:20.499543808-06:00\n      description: Create a basic nginx HTTP server\n      digest: aaff4545f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cdffffff\n      home: https://helm.sh/helm\n      name: nginx\n      sources:\n      - https://github.com/helm/charts\n      urls:\n      - https://technosophos.github.io/tscharts/nginx-1.1.0.tgz\n      version: 1.1.0\ngenerated: 2016-10-06T16:23:20.499029981-06:00\n```\n\n----------------------------------------\n\nTITLE: Using the Helm Show Command Options\nDESCRIPTION: Basic options available when using the 'helm show' command. These are specific to the show command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for show\n```\n\n----------------------------------------\n\nTITLE: Searching for Nginx Ingress Chart in Helm 3\nDESCRIPTION: Shows how to search for the Nginx Ingress chart in the added repository using Helm 3.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-11-13-helm-3-released.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ helm search repo nginx-ingress\n```\n\n----------------------------------------\n\nTITLE: Correct YAML Template with include Function\nDESCRIPTION: Proper template implementation using the include function with indent pipe to ensure correct YAML formatting.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/named_templates.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  labels:\n{{ include \"mychart.app\" . | indent 4 }}\ndata:\n  myvalue: \"Hello World\"\n  {{- range $key, $val := .Values.favorite }}\n  {{ $key }}: {{ $val | quote }}\n  {{- end }}\n{{ include \"mychart.app\" . | indent 2 }}\n```\n\n----------------------------------------\n\nTITLE: Declaring Local Chart Dependencies in Chart.yaml\nDESCRIPTION: This YAML snippet shows how to declare a local chart dependency in the Chart.yaml file. It demonstrates using the 'file://' prefix to specify a local directory path for the dependency chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_dependency.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Chart.yaml\ndependencies:\n- name: nginx\n  version: \"1.2.3\"\n  repository: \"file://../dependency_chart/nginx\"\n```\n\n----------------------------------------\n\nTITLE: Creating RoleBindings for Namespace-Scoped Read Access\nDESCRIPTION: Commands to create a namespace and grant a user both view access and secret reading permissions within that namespace, which enables basic Helm operations in the specific namespace.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/rbac.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl create namespace foo\n\n$ kubectl create rolebinding sam-view\n    --clusterrole view \\​\n    --user sam \\​\n    --namespace foo\n\n$ kubectl create rolebinding sam-secret-reader\n    --clusterrole secret-reader \\​\n    --user sam \\​\n    --namespace foo\n```\n\n----------------------------------------\n\nTITLE: Stepped Range Generation with UntilStep\nDESCRIPTION: Demonstrates how to generate a range with custom start, stop, and step values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_90\n\nLANGUAGE: helm\nCODE:\n```\nuntilStep 3 6 2\n```\n\n----------------------------------------\n\nTITLE: Searching Helm Chart Repository (Console)\nDESCRIPTION: Searches the stable repository for available charts. This command lists all charts in the stable repository along with their versions and descriptions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ja/docs/intro/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm search repo stable\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Manifest with Provenance\nDESCRIPTION: Example of a Helm chart manifest with an additional provenance file layer in an OCI registry.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/registries.md#2025-04-08_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.cncf.helm.config.v1+json\",\n    \"digest\": \"sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111\",\n    \"size\": 117\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.cncf.helm.chart.content.v1.tar+gzip\",\n      \"digest\": \"sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617\",\n      \"size\": 2487\n    },\n    {\n      \"mediaType\": \"application/vnd.cncf.helm.chart.provenance.v1.prov\",\n      \"digest\": \"sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a\",\n      \"size\": 643\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Helm Chart Manifest\nDESCRIPTION: Example of a basic Helm chart manifest structure as represented in an OCI registry.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/registries.md#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.cncf.helm.config.v1+json\",\n    \"digest\": \"sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111\",\n    \"size\": 117\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.cncf.helm.chart.content.v1.tar+gzip\",\n      \"digest\": \"sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617\",\n      \"size\": 2487\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Packaging a Helm Chart for Distribution\nDESCRIPTION: This command packages the 'deis-workflow' chart into a compressed tarball (.tgz) file that can be distributed and installed. The package includes the chart's version number.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/intro/using_helm.md#2025-04-08_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ helm package deis-workflow\ndeis-workflow-0.1.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Timezone in Go Templates\nDESCRIPTION: Shows how to use the dateInZone function to format the current date (now) into a specific format with a specified timezone.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_75\n\nLANGUAGE: go\nCODE:\n```\ndateInZone \"2006-01-02\" (now) \"UTC\"\n```\n\n----------------------------------------\n\nTITLE: Helm Get All Command Options in Bash\nDESCRIPTION: These are the specific options available for the 'helm get all' command. They allow users to specify help output, revision number, and custom output templating.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_all.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for all\n      --revision int      get the named release with revision\n      --template string   go template for formatting the output, eg: {{.Release.Name}}\n```\n\n----------------------------------------\n\nTITLE: Verifying Packages with Keybase.io\nDESCRIPTION: Demonstrates how to verify a package signed by someone else's Keybase key by following the user and pulling their OpenPGP keys.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/provenance.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ keybase follow technosophos\n$ keybase pgp pull\n\n$ helm verify somechart-1.2.3.tgz\n```\n\n----------------------------------------\n\nTITLE: Helm Rollback Command Options\nDESCRIPTION: The specific options available for the helm rollback command, including flags for controlling the rollback behavior such as dry-run simulation, force updating, preventing hooks, and setting timeouts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_rollback.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n      --cleanup-on-fail    allow deletion of new resources created in this rollback when rollback fails\n      --dry-run            simulate a rollback\n      --force              force resource update through delete/recreate if needed\n  -h, --help               help for rollback\n      --history-max int    limit the maximum number of revisions saved per release. Use 0 for no limit (default 10)\n      --no-hooks           prevent hooks from running during rollback\n      --recreate-pods      performs pods restart for the resource if applicable\n      --timeout duration   time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n      --wait               if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout\n      --wait-for-jobs      if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout\n```\n\n----------------------------------------\n\nTITLE: Helm Dependency Build Command Options\nDESCRIPTION: Available options for the helm dependency build command, including certificate handling, repository authentication, and verification settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_dependency_build.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n  -h, --help                       help for build\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             keyring containing public keys (default \"~/.gnupg/pubring.gpg\")\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --skip-refresh               do not refresh the local repository cache\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the packages against signatures\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Dependency Update Command in Bash\nDESCRIPTION: This command updates on-disk dependencies to mirror the Chart.yaml file. It verifies that required charts are present in the 'charts/' directory and have acceptable versions, downloading the latest charts that satisfy dependencies and cleaning up old ones.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/helm/helm_dependency_update.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm dependency update CHART [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Values in a Helm ConfigMap Template\nDESCRIPTION: A Helm template that creates a ConfigMap and accesses a value from the Values object.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/values_files.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favoriteDrink }}\n```\n\n----------------------------------------\n\nTITLE: Generating Updated Index.yaml for Chart Repository\nDESCRIPTION: Command to generate an updated index.yaml file for the chart repository using Helm, specifying the local directory and remote repository URL.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/chart_repository_sync_example.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo index fantastic-charts/ --url https://fantastic-charts.storage.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Example Static Auto-completion for Fullstatus Plugin\nDESCRIPTION: Demonstrates a simple completion.yaml file for the fullstatus plugin, which has no sub-commands but accepts the same flags as the helm status command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/plugins.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: fullstatus\nflags:\n- o\n- output\n- revision\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Values with YAML in Helm\nDESCRIPTION: This snippet shows how to override default chart values using a YAML file. It creates a custom values.yaml file to set MariaDB username and database name, then installs the WordPress chart using those custom values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/using_helm.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\necho '{mariadb.auth.database: user0db, mariadb.auth.username: user0}' > values.yaml\n```\n\nLANGUAGE: console\nCODE:\n```\n$ helm install -f values.yaml bitnami/wordpress --generate-name\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Helm Release using the Helm SDK in Go\nDESCRIPTION: This snippet demonstrates how to uninstall a given release using the Helm SDK.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/sdk/examples.md#2025-04-08_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n{{< highlightexamplego file=\"sdkexamples/uninstall.go\" >}}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back a Helm Release\nDESCRIPTION: Example of rolling back a Helm release, highlighting the difference in behavior between Helm 2 and Helm 3 when live state has changed.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/faq/changes_since_helm2.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ helm rollback myapp\n```\n\n----------------------------------------\n\nTITLE: Helm History Inherited Options\nDESCRIPTION: Additional options inherited from parent commands, including Kubernetes configuration settings and authentication parameters.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_history.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Plugin Update Inherited Options\nDESCRIPTION: Options inherited from parent commands that can be used with the plugin update command. Includes various Kubernetes configuration and authentication options.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_plugin_update.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Plugin Uninstall Help Options\nDESCRIPTION: Available help options specific to the uninstall command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_plugin_uninstall.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for uninstall\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Named Template in YAML\nDESCRIPTION: Basic syntax for defining a named template using the define action.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/named_templates.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- define \"MY.NAME\" }}\n  # body of template here\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Using Root Scope Variable to Access Parent Scope\nDESCRIPTION: Demonstrates using the '$' variable to access the root scope from within a restricted 'with' block scope.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  release: {{ $.Release.Name }}\n  {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Helm Release\nDESCRIPTION: This console command demonstrates how to uninstall a Helm release named 'happy-panda' from the cluster.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ helm uninstall happy-panda\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Helm Release\nDESCRIPTION: Demonstrates how to remove a release named 'happy-panda' from the cluster using the 'helm uninstall' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/intro/using_helm.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm uninstall happy-panda\n```\n\n----------------------------------------\n\nTITLE: Syncing Remote Charts to Local Directory\nDESCRIPTION: Commands demonstrating how to sync charts from a GCS bucket to a local directory using gsutil rsync, including both dry run and actual sync operations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/chart_repository_sync_example.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ gsutil rsync -d -n gs://bucket-name local-dir/    # the -n flag does a dry run\nBuilding synchronization state...\nStarting synchronization\nWould copy gs://bucket-name/alpine-0.1.0.tgz to file://local-dir/alpine-0.1.0.tgz\nWould copy gs://bucket-name/index.yaml to file://local-dir/index.yaml\n\n$ gsutil rsync -d gs://bucket-name local-dir/       # performs the copy actions\nBuilding synchronization state...\nStarting synchronization\nCopying gs://bucket-name/alpine-0.1.0.tgz...\nDownloading file://local-dir/alpine-0.1.0.tgz:                        740 B/740 B\nCopying gs://bucket-name/index.yaml...\nDownloading file://local-dir/index.yaml:                              346 B/346 B\n```\n\n----------------------------------------\n\nTITLE: Syncing Local Charts to GCS Bucket\nDESCRIPTION: Example output of syncing local chart repository to Google Cloud Storage bucket using sync-repo.sh script, showing the verification and upload process.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/chart_repository_sync_example.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ pwd\n/Users/me/code/go/src/helm.sh/helm\n$ scripts/sync-repo.sh fantastic-charts/ fantastic-charts\nGetting ready to sync your local directory (fantastic-charts/) to a remote repository at gs://fantastic-charts\nVerifying Prerequisites....\nThumbs up! Looks like you have gsutil. Let's continue.\nBuilding synchronization state...\nStarting synchronization\nWould copy file://fantastic-charts/alpine-0.1.0.tgz to gs://fantastic-charts/alpine-0.1.0.tgz\nWould copy file://fantastic-charts/index.yaml to gs://fantastic-charts/index.yaml\nAre you sure you would like to continue with these changes?? [y/N]} y\nBuilding synchronization state...\nStarting synchronization\nCopying file://fantastic-charts/alpine-0.1.0.tgz [Content-Type=application/x-tar]...\nUploading   gs://fantastic-charts/alpine-0.1.0.tgz:              740 B/740 B\nCopying file://fantastic-charts/index.yaml [Content-Type=application/octet-stream]...\nUploading   gs://fantastic-charts/index.yaml:                    347 B/347 B\nCongratulations your remote chart repository now matches the contents of fantastic-charts/\n```\n\n----------------------------------------\n\nTITLE: Using 'title' Function in Helm Templates\nDESCRIPTION: The 'title' function converts the string to title case.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_23\n\nLANGUAGE: go\nCODE:\n```\ntitle \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Helm Version Command Options\nDESCRIPTION: Available command-line options specific to the version command including help, short output, and template formatting.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_version.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for version\n      --short             print the version number\n      --template string   template for version string format\n```\n\n----------------------------------------\n\nTITLE: Helm Repository List Command Options\nDESCRIPTION: Available flags specific to the repo list command including output format options\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_list.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for list\n  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Major/Minor Releases\nDESCRIPTION: Shell commands to set up environment variables needed for major or minor Helm releases\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport RELEASE_NAME=vX.Y.0\nexport RELEASE_BRANCH_NAME=\"release-X.Y\"\nexport RELEASE_CANDIDATE_NAME=\"$RELEASE_NAME-rc.1\"\n```\n\n----------------------------------------\n\nTITLE: Adding Nginx Repository in Helm 3\nDESCRIPTION: Demonstrates how to add the Nginx repository to Helm 3 for searching and installing charts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-11-13-helm-3-released.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm repo add nginx https://helm.nginx.com/stable\n```\n\n----------------------------------------\n\nTITLE: Conditional with Corrected Indentation\nDESCRIPTION: Fixes the indentation issue from the previous example to produce valid YAML, but still has whitespace problems.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n  {{ if eq .Values.favorite.drink \"coffee\" }}\n  mug: \"true\"\n  {{ end }}\n```\n\n----------------------------------------\n\nTITLE: Building Helm Using Make\nDESCRIPTION: Basic command to build the Helm binary using Make. This will install dependencies, validate configuration, and compile Helm into the bin/helm directory.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/developers.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ make\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Values in Helm Template\nDESCRIPTION: A Helm template example showing how to access nested values from the Values object using dot notation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/values_files.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink }}\n  food: {{ .Values.favorite.food }}\n```\n\n----------------------------------------\n\nTITLE: Updating Helm v3 Repository Location\nDESCRIPTION: Command to update the stable repository location in Helm v3 to the new charts.helm.sh domain. Works with Helm v3.4.0 and earlier versions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2020-10-26-new-location-stable-incubator-charts.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add stable https://charts.helm.sh/stable --force-update\n```\n\n----------------------------------------\n\nTITLE: Signing Release Packages\nDESCRIPTION: Commands to generate PGP signatures for release packages.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nexport VERSION=\"$RELEASE_NAME\"\nmake clean\nmake fetch-dist\nmake sign\n```\n\n----------------------------------------\n\nTITLE: Verifying Helm v3 Repository and Plugin List After Migration\nDESCRIPTION: Shows how to check the repository and plugin list in Helm v3 after migrating from Helm v2, confirming that repositories and plugins have been successfully transferred.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 repo list\nNAME       \tURL\nstable     \thttps://kubernetes-charts.storage.googleapis.com\njfrog      \thttps://charts.jfrog.io\nrimusz     \thttps://charts.rimusz.net\nbuildkite  \thttps://buildkite.github.io/charts\njetstack   \thttps://charts.jetstack.io\nodavid     \thttps://odavid.github.io/k8s-helm-charts\nelastic    \thttps://helm.elastic.co\nappscode   \thttps://charts.appscode.com/stable\n\n$ helm3 plugin list\nNAME   \tVERSION\tDESCRIPTION\n2to3   \t0.1.0  \tmigrate Helm v2 configuration and releases in-place to Helm v3\nedit   \t0.3.0  \tEdit a release.\ngcs    \t0.2.0  \tProvides Google Cloud Storage protocol support.\n       \t       \thttps://github.com/vigles...\nlinter \t0.1.1  \tHelm plugin to find hardcoded passwords in values.yaml files\nmonitor\t0.3.0  \tQuery at a given interval a Prometheus, ElasticSearch or Sentry instance...\n```\n\n----------------------------------------\n\nTITLE: Accessing Structured Values in a Helm Template\nDESCRIPTION: Template that demonstrates how to access nested properties from a structured values.yaml file. Shows dot notation to reach nested values within the Values object.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/values_files.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink }}\n  food: {{ .Values.favorite.food }}\n```\n\n----------------------------------------\n\nTITLE: Creating Release Branch for Patch Releases\nDESCRIPTION: Git commands to create patch release branch and cherry-pick commits\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\ngit checkout -b $RELEASE_BRANCH_NAME upstream/$RELEASE_BRANCH_NAME\n# get the commits ids we want to cherry-pick\ngit log --oneline\n# cherry-pick the commits starting from the oldest one, without including merge commits\ngit cherry-pick -x <commit-id>\ngit push upstream $RELEASE_BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Helm Get Basic Options\nDESCRIPTION: Displays the basic options available for the helm get command, showing the help flag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for get\n```\n\n----------------------------------------\n\nTITLE: Helm List Command Options\nDESCRIPTION: Comprehensive list of available options for the 'helm list' command, including flags for filtering, sorting, and formatting the output of release information.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_list.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --all                  show all releases without any filter applied\n  -A, --all-namespaces       list releases across all namespaces\n  -d, --date                 sort by release date\n      --deployed             show deployed releases. If no other is specified, this will be automatically enabled\n      --failed               show failed releases\n  -f, --filter string        a regular expression (Perl compatible). Any releases that match the expression will be included in the results\n  -h, --help                 help for list\n  -m, --max int              maximum number of releases to fetch (default 256)\n      --no-headers           don't print headers when using the default output format\n      --offset int           next release index in the list, used to offset from start value\n  -o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --pending              show pending releases\n  -r, --reverse              reverse the sort order\n  -l, --selector string      Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Works only for secret(default) and configmap storage backends.\n  -q, --short                output short (quiet) listing format\n      --superseded           show superseded releases\n      --time-format string   format time using golang time formatter. Example: --time-format \"2006-01-02 15:04:05Z0700\"\n      --uninstalled          show uninstalled releases (if 'helm uninstall --keep-history' was used)\n      --uninstalling         show releases that are currently being uninstalled\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Directory Structure\nDESCRIPTION: Standard directory structure for a Helm chart showing required and optional files/directories.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nwordpress/\n  Chart.yaml          # A YAML file containing information about the chart\n  LICENSE             # OPTIONAL: A plain text file containing the license for the chart\n  README.md           # OPTIONAL: A human-readable README file\n  values.yaml         # The default configuration values for this chart\n  values.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml file\n  charts/             # A directory containing any charts upon which this chart depends.\n  crds/               # Custom Resource Definitions\n  templates/          # A directory of templates that, when combined with values,\n                      # will generate valid Kubernetes manifest files.\n  templates/NOTES.txt # OPTIONAL: A plain text file containing short usage notes\n```\n\n----------------------------------------\n\nTITLE: Adding a New Helm Repository\nDESCRIPTION: This console command demonstrates how to add a new Helm repository named 'dev' with a specified URL.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add dev https://example.com/dev-charts\n```\n\n----------------------------------------\n\nTITLE: Convirtiendo el llavero secreto de GnuPG v2 al formato heredado\nDESCRIPTION: Muestra cómo convertir el llavero secreto de GnuPG v2 al formato gpg heredado para su uso con Helm.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/provenance.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ gpg --export-secret-keys >~/.gnupg/secring.gpg\n```\n\n----------------------------------------\n\nTITLE: Helm List Command Options\nDESCRIPTION: Comprehensive list of available options for the 'helm list' command, including flags for filtering, sorting, and formatting the output of release information.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_list.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --all                  show all releases without any filter applied\n  -A, --all-namespaces       list releases across all namespaces\n  -d, --date                 sort by release date\n      --deployed             show deployed releases. If no other is specified, this will be automatically enabled\n      --failed               show failed releases\n  -f, --filter string        a regular expression (Perl compatible). Any releases that match the expression will be included in the results\n  -h, --help                 help for list\n  -m, --max int              maximum number of releases to fetch (default 256)\n      --no-headers           don't print headers when using the default output format\n      --offset int           next release index in the list, used to offset from start value\n  -o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --pending              show pending releases\n  -r, --reverse              reverse the sort order\n  -l, --selector string      Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Works only for secret(default) and configmap storage backends.\n  -q, --short                output short (quiet) listing format\n      --superseded           show superseded releases\n      --time-format string   format time using golang time formatter. Example: --time-format \"2006-01-02 15:04:05Z0700\"\n      --uninstalled          show uninstalled releases (if 'helm uninstall --keep-history' was used)\n      --uninstalling         show releases that are currently being uninstalled\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Directory Structure\nDESCRIPTION: Standard directory structure for a Helm chart showing required and optional files/directories.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nwordpress/\n  Chart.yaml          # A YAML file containing information about the chart\n  LICENSE             # OPTIONAL: A plain text file containing the license for the chart\n  README.md           # OPTIONAL: A human-readable README file\n  values.yaml         # The default configuration values for this chart\n  values.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml file\n  charts/             # A directory containing any charts upon which this chart depends.\n  crds/               # Custom Resource Definitions\n  templates/          # A directory of templates that, when combined with values,\n                      # will generate valid Kubernetes manifest files.\n  templates/NOTES.txt # OPTIONAL: A plain text file containing short usage notes\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Values with --set in Helm\nDESCRIPTION: Console output showing how to override default values using the --set parameter during helm install. Demonstrates changing the favoriteDrink value from 'coffee' to 'slurm'.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/values_files.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm install solid-vulture ./mychart --dry-run --debug --set favoriteDrink=slurm\ninstall.go:158: [debug] Original chart version: \"\"\ninstall.go:175: [debug] CHART PATH: /home/bagratte/src/playground/mychart\n\nNAME: solid-vulture\nLAST DEPLOYED: Wed Feb 19 23:25:54 2020\nNAMESPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\nfavoriteDrink: slurm\n\nCOMPUTED VALUES:\nfavoriteDrink: slurm\n\nHOOKS:\nMANIFEST:\n---\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: solid-vulture-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: slurm\n```\n\n----------------------------------------\n\nTITLE: Defining Simple YAML Values with --set\nDESCRIPTION: This YAML snippet shows the equivalent YAML structure for using the --set option to define simple name-value pairs when installing a Helm chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: value\n```\n\n----------------------------------------\n\nTITLE: Pushing Helm Charts to OCI Registry via CLI\nDESCRIPTION: Example showing how to create, package, and push a Helm chart to an OCI registry using the Helm CLI. Includes login authentication and pushing process.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2022-02-28-storing-charts-in-oci.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ helm create demo\nCreating demo\n\n$ helm package demo\nSuccessfully packaged chart and saved it to: /tmp/demo-0.1.0.tgz\n\n$ echo \"mypass\" | helm registry login r.example.com -u myuser --password-stdin\nLogin Succeeded\n\n$ helm push demo-0.1.0.tgz oci://r.example.com/myuser\nPushed: r.example.com/myuser/demo:0.1.0\nDigest: sha256:7ed393daf1ffc94803c08ffcbecb798fa58e786bebffbab02da5458f68d0ecb0\n```\n\n----------------------------------------\n\nTITLE: Migrating Helm v2 Configuration to Helm v3\nDESCRIPTION: Shows the actual migration of Helm v2 configuration to Helm v3 using the helm-2to3 plugin, including the copying of repositories, plugins, and starters.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 2to3 move config\nWARNING: Helm v3 configuration maybe overwritten during this operation.\n\n[Move Config/confirm] Are you sure you want to move the v2 configration? [y/N]: y\n\n2019/11/14 14:55:00 Helm v2 configuration will be moved to Helm v3 configration.\n2019/11/14 14:55:00 [Helm 2] Home directory: /Users/rimas/.helm\n2019/11/14 14:55:00 [Helm 3] Config directory: /Users/rimas/Library/Preferences/helm\n2019/11/14 14:55:00 [Helm 3] Data directory: /Users/rimas/Library/helm\n2019/11/14 14:55:00 [Helm 3] Create config folder \"/Users/rimas/Library/Preferences/helm\" .\n2019/11/14 14:55:00 [Helm 3] Config folder \"/Users/rimas/Library/Preferences/helm\" created.\n2019/11/14 14:55:00 [Helm 2] repositories file \"/Users/rimas/.helm/repository/repositories.yaml\" will copy to [Helm 3] config folder \"/Users/rimas/Library/Preferences/helm/repositories.yaml\" .\n2019/11/14 14:55:00 [Helm 2] repositories file \"/Users/rimas/.helm/repository/repositories.yaml\" copied successfully to [Helm 3] config folder \"/Users/rimas/Library/Preferences/helm/repositories.yaml\" .\n2019/11/14 14:55:00 [Helm 3] Create data folder \"/Users/rimas/Library/helm\" .\n2019/11/14 14:55:00 [Helm 3] data folder \"/Users/rimas/Library/helm\" created.\n2019/11/14 14:55:00 [Helm 2] plugins \"/Users/rimas/.helm/plugins\" will copy to [Helm 3] data folder \"/Users/rimas/Library/helm/plugins\" .\n2019/11/14 14:55:00 [Helm 2] plugins \"/Users/rimas/.helm/plugins\" copied successfully to [Helm 3] data folder \"/Users/rimas/Library/helm/plugins\" .\n2019/11/14 14:55:00 [Helm 2] starters \"/Users/rimas/.helm/starters\" will copy to [Helm 3] data folder \"/Users/rimas/Library/helm/starters\" .\n2019/11/14 14:55:00 [Helm 2] starters \"/Users/rimas/.helm/starters\" copied successfully to [Helm 3] data folder \"/Users/rimas/Library/helm/starters\" .\n2019/11/14 14:55:00 Helm v2 configuration was moved successfully to Helm v3 configration.\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Array in Helm Template\nDESCRIPTION: This snippet illustrates how to use the fromJsonArray function to parse a JSON Array into a list that can be used in templates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n[\n { \"name\": \"Bob\",\"age\": 25 },\n { \"name\": \"Ram\",\"age\": 16 }\n]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{- $people := .Files.Get \"jsons/people.json\" | fromJsonArray }}\n{{- range $person := $people }}\ngreeting: |\n  Hi, my name is {{ $person.name }} and I am {{ $person.age }} years old.\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Values with --set Flag in Helm\nDESCRIPTION: Console output demonstrating how to override a default value using the --set flag during Helm installation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/values_files.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm install solid-vulture ./mychart --dry-run --debug --set favoriteDrink=slurm\ninstall.go:158: [debug] Original chart version: \"\"\ninstall.go:175: [debug] CHART PATH: /home/bagratte/src/playground/mychart\n\nNAME: solid-vulture\nLAST DEPLOYED: Wed Feb 19 23:25:54 2020\nNAMESPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\nfavoriteDrink: slurm\n\nCOMPUTED VALUES:\nfavoriteDrink: slurm\n\nHOOKS:\nMANIFEST:\n---\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: solid-vulture-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: slurm\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Show CRDs Command in Bash\nDESCRIPTION: This code block lists options inherited from parent commands. These options provide additional functionality for Kubernetes API server configuration, authentication, and Helm repository management. They can be used in conjunction with the 'helm show crds' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_crds.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Helm release migration in Bash\nDESCRIPTION: Demonstrates how to check that releases have been successfully migrated by listing both Helm v2 and Helm v3 releases.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ helm list\nNAME    \tREVISION\tUPDATED                 \tSTATUS  \tCHART           \tAPP VERSION\tNAMESPACE\npostgres\t1       \tThu Nov 14 15:01:00 2019\tDEPLOYED\tpostgresql-7.1.0\t11.5.0     \tpostgres\nredis   \t1       \tThu Nov 14 15:02:12 2019\tDEPLOYED\tredis-9.5.4     \t5.0.6      \tredis\n\n$ helm3 list -n postgres\nNAME    \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART           \tAPP VERSION\npostgres\tpostgres \t1       \t2019-11-14 13:01:00.188487 +0000 UTC\tdeployed\tpostgresql-7.1.0\t11.5.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Downloader Plugin in YAML\nDESCRIPTION: Defines the structure for declaring a downloader plugin in the plugin.yaml file. This configuration allows Helm to use the plugin for downloading charts from custom protocols.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/plugins.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndownloaders:\n- command: \"bin/mydownloader\"\n  protocols:\n  - \"myprotocol\"\n  - \"myprotocols\"\n```\n\n----------------------------------------\n\nTITLE: Using 'trunc' Function in Helm Templates\nDESCRIPTION: The 'trunc' function truncates a string. It can truncate from the beginning or end of the string based on the sign of the length parameter.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_28\n\nLANGUAGE: go\nCODE:\n```\ntrunc 5 \"hello world\"\n```\n\nLANGUAGE: go\nCODE:\n```\ntrunc -5 \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Helm Search Example Commands\nDESCRIPTION: Example commands showing different ways to search for nginx-related charts, including searching for stable releases and specific versions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_search_repo.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Search for stable release versions matching the keyword \"nginx\"\n$ helm search repo nginx\n\n# Search for release versions matching the keyword \"nginx\", including pre-release versions\n$ helm search repo nginx --devel\n\n# Search for the latest stable release for nginx-ingress with a major version of 1\n$ helm search repo nginx-ingress --version ^1.0.0\n```\n\n----------------------------------------\n\nTITLE: Helm Install Command with Dry Run and Debug\nDESCRIPTION: Console output showing a dry run of Helm installation with computed values and the resulting manifest.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/values_files.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ helm install geared-marsupi ./mychart --dry-run --debug\ninstall.go:158: [debug] Original chart version: \"\"\ninstall.go:175: [debug] CHART PATH: /home/bagratte/src/playground/mychart\n\nNAME: geared-marsupi\nLAST DEPLOYED: Wed Feb 19 23:21:13 2020\nNAMESPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\n{}\n\nCOMPUTED VALUES:\nfavoriteDrink: coffee\n\nHOOKS:\nMANIFEST:\n---\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: geared-marsupi-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: coffee\n```\n\n----------------------------------------\n\nTITLE: Creating a New Helm Chart\nDESCRIPTION: Shows how to create a new Helm chart with a basic structure using the 'helm create' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/intro/using_helm.md#2025-04-08_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ helm create deis-workflow\nCreating deis-workflow\n```\n\n----------------------------------------\n\nTITLE: Declaring Library Chart Dependencies in Helm 3\nDESCRIPTION: This code snippet demonstrates how to declare a library chart dependency in a Helm chart's Chart.yaml file. It shows the dependencies directive with name, version, and repository fields for a library chart called 'mylib'.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-05-09-helm-3-preview-pt6.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: mylib\n    version: 1.x.x\n    repository: quay.io\n```\n\n----------------------------------------\n\nTITLE: Rendered ConfigMaps with Global Values\nDESCRIPTION: Output showing how both the parent and subchart ConfigMaps access the same global value.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/subcharts_and_globals.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: silly-snake-configmap\ndata:\n  salad: caesar\n\n---\n# Source: mychart/charts/mysubchart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: silly-snake-cfgmap2\ndata:\n  dessert: ice cream\n  salad: caesar\n```\n\n----------------------------------------\n\nTITLE: Parent Chart Final Values - YAML\nDESCRIPTION: Example showing final merged values in parent chart after importing from subchart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/charts.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmyimports:\n  myint: 999\n  mybool: true\n  mystring: \"helm rocks!\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Get Metadata Command in Bash\nDESCRIPTION: These options are inherited from parent commands and provide additional configuration for Kubernetes API interaction, authentication, and Helm repository management.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_metadata.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Downloading Release Candidate - Windows\nDESCRIPTION: PowerShell command to download Helm release candidate binary for Windows AMD64 architecture.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Invoke-WebRequest -Uri \"https://get.helm.sh/helm-$RELEASE_CANDIDATE_NAME-windows-amd64.tar.gz\" -OutFile \"helm-$ReleaseCandidateName-windows-amd64.tar.gz\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Selectors in PodTemplates for Helm Charts\nDESCRIPTION: Demonstrates the recommended way to specify selectors in PodTemplate sections of Helm chart manifests, ensuring proper pod selection.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/pods.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nselector:\n  matchLabels:\n      app.kubernetes.io/name: MyName\ntemplate:\n  metadata:\n    labels:\n      app.kubernetes.io/name: MyName\n```\n\n----------------------------------------\n\nTITLE: Using Helm Dependency List Command\nDESCRIPTION: The basic syntax for the helm dependency list command, which lists all dependencies declared in a Helm chart. It accepts chart archives and chart directories as input without altering chart contents.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_dependency_list.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm dependency list CHART [flags]\n```\n\n----------------------------------------\n\nTITLE: Chart Dependencies Directory Structure\nDESCRIPTION: Text showing the expected file structure after downloading dependencies, with chart archives stored in the charts/ directory.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/charts.md#2025-04-08_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ncharts/\n  apache-1.2.3.tgz\n  mysql-3.2.1.tgz\n```\n\n----------------------------------------\n\nTITLE: Complex Helm Plugin Configuration\nDESCRIPTION: Advanced plugin.yaml configuration showing platform-specific commands and lifecycle hooks.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/plugins.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: myplugin\nversion: 0.1.0\nusage: example plugin\ndescription: example plugin\nignoreFlags: false\nplatformCommand:\n  - command: ${HELM_PLUGIN_DIR}/bin/myplugin\n  - os: windows\n    command: ${HELM_PLUGIN_DIR}\\bin\\myplugin.exe\nplatformHooks:\n  install:\n    - command: ${HELM_PLUGIN_DIR}/scripts/install.sh\n    - os: windows\n      command: pwsh\n      args:\n        - -c\n        - ${HELM_PLUGIN_DIR}\\scripts\\install.ps1\n  update:\n    - command: ${HELM_PLUGIN_DIR}/scripts/install.sh\n      args:\n        - -u\n    - os: windows\n      command: pwsh\n      args:\n        - -c\n        - ${HELM_PLUGIN_DIR}\\scripts\\install.ps1\n        - -Update\n```\n\n----------------------------------------\n\nTITLE: Parent Chart Values Configuration - YAML\nDESCRIPTION: Example showing parent chart's values.yaml configuration with basic value types.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/charts.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmyimports:\n  myint: 0\n  mybool: false\n  mystring: \"helm rocks!\"\n```\n\n----------------------------------------\n\nTITLE: Template Example - YAML\nDESCRIPTION: Example template file showing a Kubernetes ReplicationController with templated values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/charts.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: deis-database\n  namespace: deis\n  labels:\n    app.kubernetes.io/managed-by: deis\nspec:\n  replicas: 1\n  selector:\n    app.kubernetes.io/name: deis-database\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: deis-database\n    spec:\n      serviceAccount: deis-database\n      containers:\n        - name: deis-database\n          image: {{ .Values.imageRegistry }}/postgres:{{ .Values.dockerTag }}\n          imagePullPolicy: {{ .Values.pullPolicy }}\n          ports:\n            - containerPort: 5432\n          env:\n            - name: DATABASE_STORAGE\n              value: {{ default \"minio\" .Values.storage }}\n```\n\n----------------------------------------\n\nTITLE: Defining Helm v2 Documentation Metadata in YAML\nDESCRIPTION: This YAML snippet defines the configuration for the Helm v2 documentation website. It specifies the URL path, name, GitHub repository URL, and the branch to use for the documentation source.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/code/helm-v2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"helm/v2\"\nname: \"helm/v2\"\nrepoURL: \"https://github.com/helm/helm\"\nbranch: \"dev-v2\"\n---\n```\n\n----------------------------------------\n\nTITLE: Tuple Range Output\nDESCRIPTION: The rendered output of the tuple range example showing the list of sizes.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n  sizes: |-\n    - small\n    - medium\n    - large\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Verify Command\nDESCRIPTION: Basic command syntax for verifying a Helm chart's signature using the verify command. The command takes a path argument to the chart location.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_verify.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm verify PATH [flags]\n```\n\n----------------------------------------\n\nTITLE: Chart Directory Structure - YAML\nDESCRIPTION: Example showing WordPress chart directory structure with Apache and MySQL dependencies.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/charts.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nwordpress:\n  Chart.yaml\n  # ...\n  charts/\n    apache/\n      Chart.yaml\n      # ...\n    mysql/\n      Chart.yaml\n      # ...\n```\n\n----------------------------------------\n\nTITLE: Creating Local Chart Repository Directory\nDESCRIPTION: Commands to create a local directory for storing Helm charts and moving packaged charts into it.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/chart_repository_sync_example.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir fantastic-charts\n$ mv alpine-0.1.0.tgz fantastic-charts/\n```\n\n----------------------------------------\n\nTITLE: Defining Containers in Kubernetes Manifest\nDESCRIPTION: YAML snippet showing how containers are defined in a Kubernetes manifest, used to illustrate differences in upgrade behavior between Helm 2 and 3.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/faq/changes_since_helm2.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n- name: server\n  image: nginx:2.0.0\n```\n\n----------------------------------------\n\nTITLE: Helm Create Command Options\nDESCRIPTION: Lists the specific options available for the 'helm create' command, including help and starter scaffold options.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_create.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help             help for create\n  -p, --starter string   the name or absolute path to Helm starter scaffold\n```\n\n----------------------------------------\n\nTITLE: Rendered ConfigMap Output\nDESCRIPTION: Example of the rendered YAML output showing the processed template with transformed values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: edgy-dragonfly-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: \"coffee\"\n  food: \"PIZZA\"\n  toppings: |-\n    - \"Mushrooms\"\n    - \"Cheese\"\n    - \"Peppers\"\n    - \"Onions\"\n    - \"Pineapple\"\n```\n\n----------------------------------------\n\nTITLE: Custom Values Configuration in YAML Format\nDESCRIPTION: A simple YAML configuration file that sets the 'mariadbUser' value to 'user1', which will be used during Helm chart installation or upgrade.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/intro/using_helm.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmariadbUser: user1\n```\n\n----------------------------------------\n\nTITLE: Verifying a Helm Chart\nDESCRIPTION: Verifies the integrity of a signed Helm chart using the 'helm verify' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/provenance.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm verify mychart-0.1.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Using 'trim' Function in Helm Templates\nDESCRIPTION: The 'trim' function removes white space from both sides of a string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ntrim \"   hello    \"\n```\n\n----------------------------------------\n\nTITLE: Excessive Whitespace Chomping Example\nDESCRIPTION: Demonstrates how improper use of whitespace chomping modifiers can lead to unintended concatenation of template elements.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  food: {{ .Values.favorite.drink | upper | quote }}\n  {{- if eq .Values.favorite.drink \"coffee\" -}}\n  mug: \"true\"\n  {{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Upgrading and Rolling Back Helm Releases\nDESCRIPTION: Commands for upgrading Helm releases with various options and rolling back to previous versions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/CheatSheet.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <release> <chart>                            # Upgrade a release\nhelm upgrade <release> <chart> --atomic                   # If set, upgrade process rolls back changes made in case of failed upgrade.\nhelm upgrade <release> <chart> --dependency-update        # update dependencies if they are missing before installing the chart\nhelm upgrade <release> <chart> --version <version_number> # specify a version constraint for the chart version to use\nhelm upgrade <release> <chart> --values                   # specify values in a YAML file or a URL (can specify multiple)\nhelm upgrade <release> <chart> --set key1=val1,key2=val2  # Set values on the command line (can specify multiple or separate valuese)\nhelm upgrade <release> <chart> --force                    # Force resource updates through a replacement strategy\nhelm rollback <release> <revision>                        # Roll back a release to a specific revision\nhelm rollback <release> <revision>  --cleanup-on-fail     # Allow deletion of new resources created in this rollback when rollback fails\n```\n\n----------------------------------------\n\nTITLE: Helm Search Hub Command Options\nDESCRIPTION: Lists the available options specific to the 'helm search hub' command, including setting a custom endpoint, output format control, and failure behavior.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_search_hub.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --endpoint string      Hub instance to query for charts (default \"https://hub.helm.sh\")\n      --fail-on-no-result    search fails if no results are found\n  -h, --help                 help for hub\n      --list-repo-url        print charts repository URL\n      --max-col-width uint   maximum column width for output table (default 50)\n  -o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling Helm Applications\nDESCRIPTION: Commands for installing and uninstalling Helm charts with various options such as namespace specification, value overrides, and dry-run installations. These commands are crucial for deploying and removing applications managed by Helm.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/CheatSheet.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install <name> <chart>                           # Install the chart with a name\nhelm install <name> <chart> --namespace <namespace>   # Install the chart in a specific namespace\nhelm install <name> <chart> --set key1=val1,key2=val2 # Set values on the command line (can specify multiple or separate values with commas)\nhelm install <name> <chart> --values <yaml-file/url>  # Install the chart with your specified values\nhelm install <name> <chart> --dry-run --debug         # Run a test installation to validate chart (p)\nhelm install <name> <chart> --verify                  # Verify the package before using it \nhelm install <name> <chart> --dependency-update       # update dependencies if they are missing before installing the chart\nhelm uninstall <name>                                 # Uninstall a release\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling Helm Applications\nDESCRIPTION: Commands for installing and uninstalling Helm charts with various options such as namespace specification, value overrides, and dry-run installations. These commands are crucial for deploying and removing applications managed by Helm.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/CheatSheet.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install <name> <chart>                           # Install the chart with a name\nhelm install <name> <chart> --namespace <namespace>   # Install the chart in a specific namespace\nhelm install <name> <chart> --set key1=val1,key2=val2 # Set values on the command line (can specify multiple or separate values with commas)\nhelm install <name> <chart> --values <yaml-file/url>  # Install the chart with your specified values\nhelm install <name> <chart> --dry-run --debug         # Run a test installation to validate chart (p)\nhelm install <name> <chart> --verify                  # Verify the package before using it \nhelm install <name> <chart> --dependency-update       # update dependencies if they are missing before installing the chart\nhelm uninstall <name>                                 # Uninstall a release\n```\n\n----------------------------------------\n\nTITLE: Custom Text Wrapping with Specified Delimiter in Go\nDESCRIPTION: This snippet illustrates the use of wrapWith function to wrap text at 5 columns using a tab character as the delimiter.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_34\n\nLANGUAGE: go\nCODE:\n```\nwrapWith 5 \"\\t\" \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Secret-Reader ClusterRole in Kubernetes\nDESCRIPTION: YAML definition for a custom ClusterRole that grants read access to Secrets. This is needed because the default 'view' ClusterRole doesn't include Secret access, which is required for Helm to list releases.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/rbac.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1​\nkind: ClusterRole​\nmetadata:​\n  name: secret-reader​\nrules:​\n- apiGroups: [\"\"]​\n  resources: [\"secrets\"]​\n  verbs: [\"get\", \"watch\", \"list\"]\n```\n\n----------------------------------------\n\nTITLE: Regex Replacement in Go Templates\nDESCRIPTION: Demonstrates the usage of regexReplaceAll function to replace matches of a regular expression with a replacement string. The function interprets $ signs in the replacement string for capturing groups.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_59\n\nLANGUAGE: go\nCODE:\n```\nregexReplaceAll \"a(x*)b\" \"-ab-axxb-\" \"${1}W\"\n```\n\n----------------------------------------\n\nTITLE: Using Alias Field in Chart Dependencies\nDESCRIPTION: YAML configuration showing how to use the alias field to reference the same chart multiple times with different names.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/charts.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# parentchart/Chart.yaml\n\ndependencies:\n  - name: subchart\n    repository: http://localhost:10191\n    version: 0.1.0\n    alias: new-subchart-1\n  - name: subchart\n    repository: http://localhost:10191\n    version: 0.1.0\n    alias: new-subchart-2\n  - name: subchart\n    repository: http://localhost:10191\n    version: 0.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining a List in values.yaml for Range Iteration in Helm\nDESCRIPTION: Sample values.yaml file containing a list of pizza toppings that will be used for demonstrating the range action in Helm templates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfavorite:\n  drink: coffee\n  food: pizza\npizzaToppings:\n  - mushrooms\n  - cheese\n  - peppers\n  - onions\n```\n\n----------------------------------------\n\nTITLE: Custom Values Configuration\nDESCRIPTION: YAML configuration showing MariaDB authentication username setting.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/using_helm.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmariadb.auth.username: user1\n```\n\n----------------------------------------\n\nTITLE: Checking Status of an Uninstalled Release\nDESCRIPTION: This command checks the status of an uninstalled release when the --keep-history flag was used during uninstallation. It shows how to retrieve information about a release that has been removed but its history is retained.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ helm status mysql-1612624192\nStatus: UNINSTALLED\n...\n```\n\n----------------------------------------\n\nTITLE: Updating Stable Helm Repository\nDESCRIPTION: This command updates the 'stable' Helm repository to use the new archive URL after the deprecation of the old Google storage location.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/faq/troubleshooting.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add stable https://charts.helm.sh/stable --force-update\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Upgrade Command\nDESCRIPTION: Options inherited from parent commands that can be used with the helm upgrade command, including debug mode, Kubernetes API server settings, and configuration file paths.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/helm/helm_upgrade.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --debug                       장황한(verbose) 출력 활성화\n      --kube-apiserver string       쿠버네티스 API 서버의 주소 및 포트\n      --kube-as-group stringArray   작업의 가상화를 위한 그룹. 이 플래그를 반복하여 여러 그룹을 지정 가능\n      --kube-as-user string         작업의 가상화를 위한 사용자 이름\n      --kube-context string         사용할 kubeconfig 컨텍스트 이름\n      --kube-token string           인증에 사용될 베어러(bearer) 토큰\n      --kubeconfig string           kubeconfig 파일 경로\n  -n, --namespace string            요청에 대한 네임스페이스 지정\n      --registry-config string      레지스트리 구성 파일에 대한 경로 (기본값 \"~/.config/helm/registry.json\")\n      --repository-cache string     캐시된 저장소 색인이 포함된 파일의 경로 (기본값 \"~/.cache/helm/repository\")\n      --repository-config string    저장소 이름 및 URL 을 포함하는 파일 경로 (기본값 \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Repo Remove Command in Bash\nDESCRIPTION: This command removes one or more chart repositories from Helm. It accepts one or more repository names as arguments and supports various flags for customization.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_remove.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo remove [REPO1 [REPO2 ...]] [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying Helm Command Help\nDESCRIPTION: This command demonstrates how to get help information for a specific Helm command (in this case, the 'get' command) by using the -h flag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/quickstart.md#2025-04-08_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ helm get -h\n```\n\n----------------------------------------\n\nTITLE: Creating a Scaffold Chart with Helm\nDESCRIPTION: Demonstrates the console command to create a new scaffold chart named 'demo' using Helm.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/library_charts.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ helm create demo\nCreating demo\n```\n\n----------------------------------------\n\nTITLE: Helm Get Hooks Basic Command\nDESCRIPTION: Basic command syntax for downloading hooks from a named Helm release. The command outputs hooks formatted in YAML, separated by YAML document separators.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_hooks.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm get hooks RELEASE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Default Drupal Liveness Probe Configuration in Helm\nDESCRIPTION: Example of default liveness probe configuration in the stable Drupal chart, showing the httpGet probe that can be overridden or removed.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/values_files.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlivenessProbe:\n  httpGet:\n    path: /user/login\n    port: http\n  initialDelaySeconds: 120\n```\n\n----------------------------------------\n\nTITLE: Helm Registry Login Command Options\nDESCRIPTION: These are the specific options available for the 'helm registry login' command. They include settings for SSL certificates, insecure connections, and authentication credentials.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_registry_login.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --ca-file string     verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string   identify registry client using this SSL certificate file\n  -h, --help               help for login\n      --insecure           allow connections to TLS registry without certs\n      --key-file string    identify registry client using this SSL key file\n  -p, --password string    registry password or identity token\n      --password-stdin     read password or identity token from stdin\n  -u, --username string    registry username\n```\n\n----------------------------------------\n\nTITLE: Creating Base Library Chart Structure\nDESCRIPTION: Console commands to create and prepare a basic library chart structure by removing default templates and values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/library_charts.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm create mylibchart\nCreating mylibchart\n$ rm -rf mylibchart/templates/*\n$ rm -f mylibchart/values.yaml\n```\n\n----------------------------------------\n\nTITLE: Using Tags and Conditions in Chart Dependencies\nDESCRIPTION: YAML configuration showing how to use tags and conditions to control loading of dependent charts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/charts.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# parentchart/Chart.yaml\n\ndependencies:\n  - name: subchart1\n    repository: http://localhost:10191\n    version: 0.1.0\n    condition: subchart1.enabled, global.subchart1.enabled\n    tags:\n      - front-end\n      - subchart1\n  - name: subchart2\n    repository: http://localhost:10191\n    version: 0.1.0\n    condition: subchart2.enabled,global.subchart2.enabled\n    tags:\n      - back-end\n      - subchart2\n```\n\n----------------------------------------\n\nTITLE: Using Keybase.io for Helm Chart Signing\nDESCRIPTION: Explains how to use Keybase.io credentials to sign Helm charts, including importing Keybase keys and signing packages.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/provenance.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ keybase pgp export -s | gpg --import\n\n$ gpg --list-secret-keys\n\n$ helm package --sign --key technosophos --keyring ~/.gnupg/secring.gpg mychart\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Registry Login\nDESCRIPTION: These options are inherited from parent commands and provide additional configuration for Kubernetes API interactions, repository management, and general Helm settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_registry_login.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Example Chart.yaml Configuration in YAML\nDESCRIPTION: Demonstrates a sample Chart.yaml configuration with all possible fields including metadata, versioning, dependencies, and maintainer information. This file is required for all Helm charts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/charts.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: La versión de la API de chart (requerido)\nname: El nombre del chart (requerido)\nversion: An versión SemVer 2 (requerido)\nkubeVersion: Un rango SemVer de versiones compatibles de Kubernetes (opcional)\ndescription: Una descripción de una sola frase de este proyecto (opcional)\ntype: El tipo de chart (opcional)\nkeywords:\n  - Una lista de palabras clave sobre este proyecto (opcional)\nhome: La URL de la página de inicio de este proyecto (opcional)\nsources:\n  - Una lista de URL al código fuente de este proyecto (opcional)\ndependencies: # Una lista de los requisitos del chart. (opcional)\n  - name: El nombre del chart (nginx)\n    version: La versión del chart (\"1.2.3\")\n    repository: (opcional) La URL del repositorio (\"https://example.com/charts\") o el alias (\"@repo-name\")\n    condition: (opcional) Una ruta yaml que se resuelve en un booleano, que se usa para habilitar/deshabilitar charts (e.g. subchart1.enabled)\n    tags: # (opcional)\n      - Las etiquetas se pueden usar para agrupar charts para habilitar/deshabilitar en for conjunta\n    import-values: # (opcional)\n      - ImportValues contiene la asignación de valores de origen a la clave principal que se va a importar. Cada elemento puede ser una cadena o un par de elementos hijo/padre de la sublista.\n    alias: (opcional) Alias que se utilizará para el chart. Útil cuando tiene que agregar el mismo chart varias veces\nmaintainers: # (opcional)\n  - name: El nombre de los mantenedores (requerido para cada mantenedor)\n    email: El correo electrónico de los mantenedores (opcional para cada mantenedor)\n    url: Una URL para el mantenedor (opcional para cada mantenedor)\nicon: Una URL a una imagen SVG o PNG que se utilizará como icono (opcional).\nappVersion: La versión de la aplicación que contiene. (opcional). No es necesario que sea SemVer. Se recomienda encerrar en comillas.\ndeprecated: Si este chart está obsoleto (optional, boolean)\nannotations:\n  example: Una lista de anotaciones codificadas por nombre (opcional).\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Options for Helm Plugin Install Command\nDESCRIPTION: This snippet shows the options inherited from parent commands, including various Kubernetes API server configurations, authentication options, and Helm-specific settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_plugin_install.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Using include Function with Indentation in Helm Templates\nDESCRIPTION: This example shows how to use the include function with pipe operations to manage indentation in YAML templates. It includes a template called 'toYaml', passes it a value, and then indents the output.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/charts_tips_and_tricks.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{{ include \"toYaml\" $value | indent 2 }}\n```\n\n----------------------------------------\n\nTITLE: Generating Helm Autocompletion for Zsh\nDESCRIPTION: The helm completion zsh command generates an autocompletion script for the Zsh shell. This command can be used to load completions for the current session or to set up completions for all future sessions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_zsh.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm completion zsh [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Test Connection YAML in Helm Chart\nDESCRIPTION: A sample test-connection.yaml file that creates a test Pod which verifies connectivity to the deployed service. The Pod uses busybox to run a wget command against the service endpoint.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/chart_tests.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"{{ include \"demo.fullname\" . }}-test-connection\"\n  labels:\n    {{- include \"demo.labels\" . | nindent 4 }}\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: wget\n      image: busybox\n      command: ['wget']\n      args: ['{{ include \"demo.fullname\" . }}:{{ .Values.service.port }}']\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options inherited from parent commands that can be used with the helm registry logout command. Includes various Kubernetes configuration options and Helm-specific settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_registry_logout.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Checking Helm Release Status (Console)\nDESCRIPTION: Retrieves the status of a specific Helm release, even after it has been uninstalled (if --keep-history flag was used during uninstallation).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ja/docs/intro/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ helm status smiling-penguin\n```\n\n----------------------------------------\n\nTITLE: Setting Tag and Condition Values with Helm CLI\nDESCRIPTION: Console command showing how to override tag and condition values when installing a chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/charts.md#2025-04-08_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nhelm install --set tags.front-end=true --set subchart2.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Verificando un chart de Helm\nDESCRIPTION: Ilustra cómo verificar la integridad de un chart de Helm empaquetado utilizando el comando 'helm verify'.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/provenance.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm verify mychart-0.1.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Basic Helm Plugin Uninstall Command\nDESCRIPTION: Basic command syntax for uninstalling one or more Helm plugins. The command accepts one or more plugin names as arguments.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_plugin_uninstall.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm plugin uninstall <plugin>... [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for helm repo add Command in Bash\nDESCRIPTION: These options are inherited from parent commands and provide additional configuration for Kubernetes API interaction, authentication, and Helm repository management.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_add.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Using Helm Show Chart Command\nDESCRIPTION: The basic syntax for the helm show chart command, which displays the contents of the Chart.yaml file from a specified chart source (directory, file, or URL).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_chart.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm show chart [CHART] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Tag in values.yaml\nDESCRIPTION: This YAML snippet shows how to set the image tag in the values.yaml file to ensure compatibility with Helm 3 and the common chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/library_charts.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  tag: 1.16.0\n```\n\n----------------------------------------\n\nTITLE: Template Whitespace Control\nDESCRIPTION: Example of proper whitespace chomping in templates using range directive.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/templates.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfoo:\n  {{- range .Values.items }}\n  {{ . }}\n  {{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Showing Template Usage with Nested Values in Helm Charts\nDESCRIPTION: Demonstrates how to safely check and use nested values in a Helm chart template, requiring checks at each level of nesting.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/values.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n{{ if .Values.server }}\n  {{ default \"none\" .Values.server.name }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Showing Template Usage with Nested Values in Helm Charts\nDESCRIPTION: Demonstrates how to safely check and use nested values in a Helm chart template, requiring checks at each level of nesting.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/values.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n{{ if .Values.server }}\n  {{ default \"none\" .Values.server.name }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Repo Remove Command in Markdown\nDESCRIPTION: Displays a comprehensive list of options inherited from parent commands. These options provide various configurations for API server connection, authentication, namespace scoping, and repository management.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_remove.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n```\n\n----------------------------------------\n\nTITLE: YAML Scalar Number Types\nDESCRIPTION: Shows how numeric values are represented in YAML with and without quotes.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/yaml_techniques.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncount: 1\nsize: 2.34\n```\n\n----------------------------------------\n\nTITLE: Creating a New Helm Chart\nDESCRIPTION: This snippet shows how to create a new Helm chart using the 'helm create' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/library_charts.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm create demo\nCreating demo\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for helm show readme\nDESCRIPTION: Lists all the options specifically available for the 'helm show readme' command, including options for certificate verification, repository authentication, and version selection.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_readme.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n  -h, --help                       help for readme\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --pass-credentials           pass credentials to all domains\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --repo string                chart repository url where to locate the requested chart\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the package before using it\n      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n```\n\n----------------------------------------\n\nTITLE: Building Helm from source on Linux/macOS\nDESCRIPTION: This snippet demonstrates how to clone the Helm repository and build Helm from source. This method requires a working Go environment and is useful for testing pre-release versions or contributing to Helm development.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/install.md#2025-04-08_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/helm/helm.git\n$ cd helm\n$ make\n```\n\n----------------------------------------\n\nTITLE: Adding Common Chart as a Dependency\nDESCRIPTION: This YAML snippet demonstrates how to add the common chart as a dependency in the Chart.yaml file. It specifies the chart name, version, and repository.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/library_charts.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n- name: common\n  version: \"^0.0.5\"\n  repository: \"https://charts.helm.sh/incubator/\"\n```\n\n----------------------------------------\n\nTITLE: Using the Helm Registry Logout Command\nDESCRIPTION: Command syntax for logging out from a Helm registry. The command removes credentials stored for a remote registry specified by the host parameter.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_registry_logout.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm registry logout [host] [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple List Element Values in YAML\nDESCRIPTION: This YAML snippet demonstrates setting multiple values for a list element, equivalent to using multiple --set commands with array index notation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - port: 80\n    host: example\n```\n\n----------------------------------------\n\nTITLE: Inherited Helm Command Options\nDESCRIPTION: Global options inherited from parent commands that can be used with the package command, including Kubernetes API configuration and repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_package.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Global Options\nDESCRIPTION: Lists the global options that can be inherited from parent commands when using 'helm create', including Kubernetes connection settings, authentication, and repository configurations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_create.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Library Chart Dependencies in Chart.yaml\nDESCRIPTION: Example showing how to declare library chart dependencies in Chart.yaml. This demonstrates the new dependency format where library charts can be specified with name, version and repository.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/faq/changes_since_helm2.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: mylib\n    version: 1.x.x\n    repository: quay.io\n```\n\n----------------------------------------\n\nTITLE: Installing Helm via pkg on FreeBSD\nDESCRIPTION: This command installs Helm using the pkg package manager on FreeBSD systems. The Helm package is maintained by the FreeBSD community.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/install.md#2025-04-08_snippet_8\n\nLANGUAGE: console\nCODE:\n```\npkg install helm\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Get Manifest Command in Shell\nDESCRIPTION: This command is used to retrieve the manifest file for a specified release. The manifest is a YAML-encoded representation of the Kubernetes resources generated by the chart for that release.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/helm/helm_get_manifest.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm get manifest RELEASE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Managing Helm Charts with basic commands\nDESCRIPTION: Commands for creating, packaging, validating, and inspecting Helm charts. These commands help with the development workflow of Helm charts including creating new charts, checking for issues, and viewing chart details.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/CheatSheet.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm create <name>                      # Crea un directorio de chart junto con los archivos y directorios comunes usados en una chart.\nhelm package <chart-path>               # Empaqueta una chart en un archivo chart versionado.\nhelm lint <chart>                       # Ejecuta pruebas para examinar una chart e identificar posibles problemas\nhelm show all <chart>                   # Inspeccionar una chart y listar su contenido\nhelm show values <chart>                # Muestra el contenido del archivo values.yaml.\nhelm pull <chart>                       # Descargar/extraer chart \nhelm pull <chart> --untar=true          #  Si se establece en true, se desempaquetará la chart después de descargar\nhelm pull <chart> --verify              # Verificar el paquete antes de usarlo\nhelm pull <chart> --version <number>    # Se usa Default-latest, especifica una restricción de versión para la versión de la chart a usar\nhelm dependency list <chart>            # Mostrar una lista de las dependencias de una chart\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Releases\nDESCRIPTION: Shows how to list all Helm releases, including uninstalled ones, using the 'helm list' command with the '--all' flag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/using_helm.md#2025-04-08_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$  helm list --all\n```\n\n----------------------------------------\n\nTITLE: Helm Plugin Uninstall Inherited Options\nDESCRIPTION: Configuration options inherited from parent commands, including Kubernetes API settings, authentication, and repository configurations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_plugin_uninstall.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Test Command Options\nDESCRIPTION: This snippet lists the specific options available for the 'helm test' command. It includes options for filtering tests, hiding notes, showing logs, and setting a timeout for Kubernetes operations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_test.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n      --filter strings     specify tests by attribute (currently \"name\") using attribute=value syntax or '!attribute=value' to exclude a test (can specify multiple or separate values with commas: name=test1,name=test2)\n  -h, --help               help for test\n      --hide-notes         if set, do not show notes in test output. Does not affect presence in chart metadata\n      --logs               dump the logs from test pods (this runs after all tests are complete, but before any cleanup)\n      --timeout duration   time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n```\n\n----------------------------------------\n\nTITLE: Creating a RoleBinding with Edit Permission in Kubernetes\nDESCRIPTION: This command creates a RoleBinding in a specific namespace, granting a user the 'edit' ClusterRole which provides read/write access to most objects in that namespace.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/rbac.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl create namespace foo\n$ kubectl create rolebinding sam-edit\n    --clusterrole edit \\​\n    --user sam \\​\n    --namespace foo\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Chart from Local File\nDESCRIPTION: Demonstrates how to install a Helm chart from a local .tgz file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/using_helm.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ helm install foo foo-0.1.1.tgz\n```\n\n----------------------------------------\n\nTITLE: Removing Default Templates\nDESCRIPTION: Command to remove all default templates from the newly created chart for a clean start.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/getting_started.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ rm -rf mychart/templates/*\n```\n\n----------------------------------------\n\nTITLE: Removing Default Templates\nDESCRIPTION: Command to remove all default templates from the newly created chart for a clean start.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/getting_started.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ rm -rf mychart/templates/*\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Upgrade Command in Bash\nDESCRIPTION: The basic syntax for the helm upgrade command. It requires specifying a RELEASE name and a CHART, along with optional flags for customization.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_upgrade.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade [RELEASE] [CHART] [flags]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Helm Release Information from Secrets\nDESCRIPTION: Shows the kubectl command to retrieve Helm release information stored as Secrets across all namespaces.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/advanced.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secret --all-namespaces -l \"owner=helm\"\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Upgrade Command in Bash\nDESCRIPTION: The basic syntax for the helm upgrade command. It requires specifying a RELEASE name and a CHART, along with optional flags for customization.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_upgrade.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade [RELEASE] [CHART] [flags]\n```\n\n----------------------------------------\n\nTITLE: Helm Dependency List Command Options\nDESCRIPTION: Options specific to the helm dependency list command, including help flag and maximum column width setting for output table display.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_dependency_list.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                 help for list\n      --max-col-width uint   maximum column width for output table (default 80)\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Upgrade Command in Bash\nDESCRIPTION: The basic syntax for the helm upgrade command. It requires specifying a RELEASE name and a CHART, along with optional flags for customization.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_upgrade.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade [RELEASE] [CHART] [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing All Helm Release History\nDESCRIPTION: Demonstrates how to view all Helm releases including uninstalled ones with their status using the 'helm list --all' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/intro/using_helm.md#2025-04-08_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$  helm list --all\nNAME            VERSION UPDATED                         STATUS          CHART\nhappy-panda     2       Wed Sep 28 12:47:54 2016        UNINSTALLED     mariadb-0.3.0\ninky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0\nkindred-angelf  2       Tue Sep 27 16:16:10 2016        UNINSTALLED     alpine-0.1.0\n```\n\n----------------------------------------\n\nTITLE: Generating bcrypt Hash for Basic Authentication in Go Templates\nDESCRIPTION: Demonstrates the use of htpasswd function to generate a bcrypt hash of a password for basic authentication on Apache HTTP Server.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_65\n\nLANGUAGE: go\nCODE:\n```\nhtpasswd \"myUser\" \"myPassword\"\n```\n\n----------------------------------------\n\nTITLE: YAML Multiple Documents Example\nDESCRIPTION: Shows how to include multiple YAML documents in a single file using document separators.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/yaml_techniques.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndocument: 1\n...\n---\ndocument: 2\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Release Values with 'helm get values'\nDESCRIPTION: Demonstrates how to check the values currently applied to a release named 'happy-panda' using the 'helm get values' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/intro/using_helm.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ helm get values happy-panda\nmariadbUser: user1\n```\n\n----------------------------------------\n\nTITLE: Helm Fish Completion Command Syntax\nDESCRIPTION: Basic command syntax for generating Helm Fish shell completions\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_fish.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm completion fish [flags]\n```\n\n----------------------------------------\n\nTITLE: Helm List Inherited Command Options\nDESCRIPTION: Options inherited from parent commands that can be used with the helm list command, including Kubernetes API configuration options.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/helm/helm_list.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 Limite coté client de la bande passante (par défaut 100)\n      --debug                           Active la sortie détaillée\n      --kube-apiserver string           L'adresse et le port API du serveur Kubernetes\n      --kube-as-group stringArray       Groupe à utiliser pour l'opération, cet argument peut être répété pour spécifier plusieurs groupes\n      --kube-as-user string             Nom d'utilisateur à utiliser pour l'operation\n      --kube-ca-file string             Le fichier de l'autorité de certification pour la connexion à l'API Kubernetes\n      --kube-context string             Nom du contexte kubeconfig à utiliser\n      --kube-insecure-skip-tls-verify   Si true, la validité du certificat du serveur API Kubernetes ne sera pas vérifiée. Cela fera les connexions HTTPS non sûres\n      --kube-tls-server-name string     Nom du serveur utilisé pour la validation du certificat du serveur API Kubernetes. S'il n'est pas fourni, le nom de la machine cliente utilisée pour contacter le serveur sera utilisé\n      --kube-token string               Jeton utilisé pour l'authentification\n      --kubeconfig string               Chemin du fichier de configuration kubeconfig\n  -n, --namespace string                Namespace à utilisé pour la requête\n      --qps float32                     Requêtes par seconde utilisées lors de la communication avec l'API Kubernetes, sans compter le bursting\n      --registry-config string          Chemin vers le fichier de configuration du registre (par défaut \"~/.config/helm/registry/config.json\")\n      --repository-cache string         Chemin vers le fichier contenant les index du répertoire mis en cache (par défaut \"~/.cache/helm/repository\")\n      --repository-config string        Chemin vers le fichier contenant les noms et URLs des répertoires (par défaut \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Example YAML Values Structure for MariaDB Authentication\nDESCRIPTION: A snippet showing the YAML structure for configuring MariaDB authentication parameters in a values.yaml file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/intro/using_helm.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nmariadb:\n  auth:\n    username: user1\n```\n\n----------------------------------------\n\nTITLE: Upgraded Container Definition in Helm Chart\nDESCRIPTION: YAML snippet showing an upgraded container definition in a Helm chart, used to demonstrate how Helm 3 handles upgrades differently from Helm 2.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/faq/changes_since_helm2.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n- name: server\n  image: nginx:2.1.0\n```\n\n----------------------------------------\n\nTITLE: Lookup Function for Namespace Annotations\nDESCRIPTION: Demonstrates how to use the lookup function to retrieve namespace annotations from a running cluster.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/functions_and_pipelines.md#2025-04-08_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n(lookup \"v1\" \"Namespace\" \"\" \"mynamespace\").metadata.annotations\n```\n\n----------------------------------------\n\nTITLE: YAML Multi-line String Basic\nDESCRIPTION: Shows how to create basic multi-line strings using the pipe character.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/yaml_techniques.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncoffee: |\n  Latte\n  Cappuccino\n  Espresso\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Show All Command\nDESCRIPTION: Shows how to use the 'helm show all' command to display all information of a chart. This command inspects a chart (directory, file, or URL) and displays its entire content, including values.yaml, Chart.yaml, and README.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_all.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm show all [CHART] [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Show All Command\nDESCRIPTION: Lists the options inherited from parent commands for the 'helm show all' command. These options provide additional configuration for Kubernetes API server interaction, repository management, and other global settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_all.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Verify Command Options\nDESCRIPTION: Specific options available for the helm verify command, including help flag and keyring path specification.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_verify.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help             help for verify\n      --keyring string   keyring containing public keys (default \"~/.gnupg/pubring.gpg\")\n```\n\n----------------------------------------\n\nTITLE: Updating and Rolling Back Helm Applications\nDESCRIPTION: Commands for upgrading releases and rolling back to previous versions. These commands allow for updating deployed applications with new configurations or chart versions, with options for handling failures and enforcing specific deployment behaviors.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/CheatSheet.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <release> <chart>                            # Actualizar una release\nhelm upgrade <release> <chart> --atomic                   # Si se establece, el proceso de actualización deshace los cambios realizados en caso de actualización fallida.\nhelm upgrade <release> <chart> --dependency-update        # Actualiza las dependencias si faltan antes de instalar la chart\nhelm upgrade <release> <chart> --version <version_number> # especifica una restricción de versión para la versión de la chart a usar\nhelm upgrade <release> <chart> --values                   # especificar valores en un archivo YAML o una URL (puede especificar múltiple\nhelm upgrade <release> <chart> --set key1=val1,key2=val2  # Establecer valores en la línea de comandos (puede especificar valores múltiples o separadose)\nhelm upgrade <release> <chart> --force                    # Forzar actualizaciones de recursos mediante una estrategia de reemplazo.\nhelm rollback <release> <revision>                        # Retroceder una versión a una revisión específica\nhelm rollback <release> <revision>  --cleanup-on-fail     # Permitir el borrado de nuevos recursos creados en este rollback cuando el rollback falla\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions in Helm Templates\nDESCRIPTION: Demonstrates various regular expression functions available in Helm templates, including regexMatch, regexFindAll, regexFind, regexReplaceAll, regexReplaceAllLiteral, and regexSplit. Each function is explained with an example.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/function_list.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nregexMatch \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\" \"test@acme.com\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nregexFindAll \"[2,4,6,8]\" \"123456789\" -1\n```\n\nLANGUAGE: yaml\nCODE:\n```\nregexFind \"[a-zA-Z][1-9]\" \"abcd1234\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nregexReplaceAll \"a(x*)b\" \"-ab-axxb-\" \"${1}W\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nregexReplaceAllLiteral \"a(x*)b\" \"-ab-axxb-\" \"${1}\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nregexSplit \"z+\" \"pizza\" -1\n```\n\n----------------------------------------\n\nTITLE: Helm CLI Command Options\nDESCRIPTION: Command line options available for the main Helm CLI command. These options control API server connectivity, authentication, request throttling, and configuration file locations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n  -h, --help                            help for helm\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Environment Basic Options\nDESCRIPTION: Available command-specific options for the helm env command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_env.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for env\n```\n\n----------------------------------------\n\nTITLE: Scope Limitation Example with 'with' Action\nDESCRIPTION: Shows an error scenario where parent scope variables cannot be accessed directly inside a 'with' block.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  release: {{ .Release.Name }}\n  {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Date Functions in Helm Templates\nDESCRIPTION: Explains various date and time functions available in Helm templates, including now, ago, date formatting, time zone handling, duration formatting, and date modification.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/function_list.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nago .CreatedAt\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnow | date \"2006-01-02\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndateInZone \"2006-01-02\" (now) \"UTC\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nduration 95\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndurationRound \"2h10m5s\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnow | unixEpoch\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnow | date_modify \"-1.5h\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnow | htmlDate\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntoDate \"2006-01-02\" \"2017-12-31\" | date \"02/01/2006\"\n```\n\n----------------------------------------\n\nTITLE: URL Parsing in Helm\nDESCRIPTION: Demonstrates how to parse a URL string into its component parts using the urlParse function, which returns a dictionary containing URL elements.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_97\n\nLANGUAGE: yaml\nCODE:\n```\nscheme:   'http'\nhost:     'server.com:8080'\npath:     '/api'\nquery:    'list=false'\nopaque:   nil\nfragment: 'anchor'\nuserinfo: 'admin:secret'\n```\n\n----------------------------------------\n\nTITLE: Helm Registry Inherited Options\nDESCRIPTION: Command line options inherited from parent commands including Kubernetes configuration, authentication, and repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_registry.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Helm Release (Console)\nDESCRIPTION: Removes a Helm release from the Kubernetes cluster, deleting all associated resources and release history. The example uninstalls the 'smiling-penguin' release.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ja/docs/intro/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm uninstall smiling-penguin\n```\n\n----------------------------------------\n\nTITLE: Type Reflection Examples\nDESCRIPTION: Demonstrates type reflection and comparison operations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_95\n\nLANGUAGE: helm\nCODE:\n```\nkindOf \"hello\"\n```\n\nLANGUAGE: helm\nCODE:\n```\nkindIs \"int\" 123\n```\n\nLANGUAGE: helm\nCODE:\n```\ndeepEqual (list 1 2 3) (list 1 2 3)\n```\n\n----------------------------------------\n\nTITLE: Helm Command Inherited Options\nDESCRIPTION: Global options that can be used with the 'helm completion powershell' command, inherited from parent commands. These include Kubernetes configuration options and Helm repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_powershell.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: YAML List Representations\nDESCRIPTION: Examples of different YAML list syntax styles, showing both traditional YAML and JSON-style formatting.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/templates.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\narguments:\n  - \"--dirname\"\n  - \"/foo\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\narguments: [\"--dirname\", \"/foo\"]\n```\n\n----------------------------------------\n\nTITLE: Listing All Helm Releases Including Uninstalled\nDESCRIPTION: Command showing all Helm releases including those that have been uninstalled but kept in history.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/using_helm.md#2025-04-08_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$  helm list --all\nNAME            VERSION UPDATED                         STATUS          CHART\nhappy-panda     2       Wed Sep 28 12:47:54 2016        UNINSTALLED     wordpress-10.4.5.6.0\ninky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0\nkindred-angelf  2       Tue Sep 27 16:16:10 2016        UNINSTALLED     alpine-0.1.0\n```\n\n----------------------------------------\n\nTITLE: Helm List Command Options\nDESCRIPTION: Available flags and options for the helm list command, including options to filter by release state, sort order, and output format.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/helm/helm_list.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --all                  Affiche toutes les publications sans filtre d'appliqué\n  -A, --all-namespaces       Liste les publications à travers tous les namespace\n  -d, --date                 Trie par date de publication\n      --deployed             Affiche les publications déployées. Si aucun autre n'est spécifié, celle-ci sera automatiquement activé\n      --failed               Affiche les publications échouées\n  -f, --filter string        Une expression régulière (compatible Perl). Toutes les publications correspondant à l'expression régulières seront incluses dans les résultats\n  -h, --help                 Aide pour la commande list\n  -m, --max int              Nombre maximum de publications à récupérer (par défaut 256)\n      --no-headers           Ne pas afficher les en-têtes lors de l'utilisation de sortie par défaut\n      --offset int           Index de la prochaine publication dans la liste, utilisé pour décaler à partir de la valeur de départ\n  -o, --output format        Affiche la sortie dans un format spécifique. Valeurs possible : table, json, yaml (par défaut table)\n      --pending              Affiche les publications en attente\n  -r, --reverse              Inverse l'ordre de tri\n  -l, --selector string      Sélecteur (requête d'étiquette) à utiliser comme filtre, prend en charge '=', '==', et '!='.(ex : -l key1=value1,key2=value2). Fonctionne uniquement avec les backends de stockage secret (par défaut) et configmap\n  -q, --short                Format de la liste de sortie courte (silencieux)\n      --superseded           Affiche les publications remplacées\n      --time-format string   Format du temps en utilisant le formateur de temps de GoLang. Exemple : --time-format \"2006-01-02 15:04:05Z0700\"\n      --uninstalled          Affiche les publications désinstallées (Si 'helm uninstall --keep-history' a été utilisé)\n      --uninstalling         Affiche les publications en cours de désinstallation\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Test Command\nDESCRIPTION: This snippet shows the options inherited from parent commands when using 'helm test'. These options include various Kubernetes configuration settings, authentication options, and Helm-specific configurations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_test.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Deprecation Notice for Common Helm Helper Chart\nDESCRIPTION: Shows a markdown note indicating that the Common Helm Helper Chart repository is no longer actively maintained and has been deprecated and archived.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/library_charts.md#2025-04-08_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nNote: The Common Helm Helper Chart repo on Github is no longer actively maintained, and the repo has been deprecated and archived.\n```\n\n----------------------------------------\n\nTITLE: Shuffling Characters in a String in Go\nDESCRIPTION: This snippet shows how to use the shuffle function to randomize the letters in a string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_46\n\nLANGUAGE: go\nCODE:\n```\nshuffle \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Operations\nDESCRIPTION: Examples of semantic version parsing and comparison.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_96\n\nLANGUAGE: helm\nCODE:\n```\n$version := semver \"1.2.3-alpha.1+123\"\n```\n\nLANGUAGE: helm\nCODE:\n```\nsemver \"1.4.3\" | (semver \"1.2.3\").Compare\n```\n\n----------------------------------------\n\nTITLE: Options for Helm Zsh Completion Command\nDESCRIPTION: These are the specific options available for the helm completion zsh command. The --help flag displays help information, while --no-descriptions disables completion descriptions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_zsh.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options that can be used with the helm plugin list command, inherited from parent commands. These include Kubernetes configuration options, repository settings, and output controls.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_plugin_list.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Rendered ConfigMap with Overridden Subchart Values\nDESCRIPTION: Output showing how the subchart's ConfigMap is rendered with the overridden dessert value from the parent chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/subcharts_and_globals.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: mychart/charts/mysubchart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: unhinged-bee-cfgmap2\ndata:\n  dessert: ice cream\n```\n\n----------------------------------------\n\nTITLE: Converting CamelCase to snake_case in Go\nDESCRIPTION: This snippet demonstrates the snakecase function to convert a string from camelCase to snake_case.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_42\n\nLANGUAGE: go\nCODE:\n```\nsnakecase \"FirstName\"\n```\n\n----------------------------------------\n\nTITLE: Multi-Component ServiceAccount Configuration in Helm\nDESCRIPTION: Extended YAML structure for configuring multiple ServiceAccounts in more complex Helm charts. Demonstrates how to define separate ServiceAccount configurations for different components.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/rbac.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsomeComponent:\n  serviceAccount:\n    create: true\n    name:\nanotherComponent:\n  serviceAccount:\n    create: true\n    name:\n```\n\n----------------------------------------\n\nTITLE: Helm Get Metadata Command Options in Bash\nDESCRIPTION: These are the specific options available for the 'helm get metadata' command. They include help, output format selection, and revision specification.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_metadata.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for metadata\n  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --revision int    specify release revision\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Helm v3 Plugins\nDESCRIPTION: Shows how to list installed plugins in Helm v3, including the newly installed helm-2to3 plugin.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 plugin list\nNAME  \tVERSION\tDESCRIPTION\n2to3  \t0.2.0  \tmigrate and cleanup Helm v2 configuration and releases in-place to Helm v3\n```\n\n----------------------------------------\n\nTITLE: Accessing Subchart Values in Helm Templates\nDESCRIPTION: Demonstrates how to access values from a subchart in a parent chart's template.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/builtin_objects.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n.Subcharts.mySubChart.myValue\n```\n\n----------------------------------------\n\nTITLE: Accessing Subchart Values in Helm Templates\nDESCRIPTION: Demonstrates how to access values from a subchart in a parent chart's template.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/builtin_objects.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n.Subcharts.mySubChart.myValue\n```\n\n----------------------------------------\n\nTITLE: Indenting Multi-line Text in Go\nDESCRIPTION: This snippet shows how to use the indent function to indent every line in a given string by 4 space characters.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_38\n\nLANGUAGE: go\nCODE:\n```\nindent 4 $lots_of_text\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON with fromJson in Helm Templates\nDESCRIPTION: Shows how to use the fromJson function to convert a JSON string into an object that can be used in Helm templates. It includes an example of reading a JSON file and using its contents in a template.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/function_list.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Bob\",\n  \"age\": 25,\n  \"hobbies\": [\n    \"hiking\",\n    \"fishing\",\n    \"cooking\"\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{- $person := .Files.Get \"jsons/person.json\" | fromJson }}\ngreeting: |\n  Hi, my name is {{ $person.name }} and I am {{ $person.age }} years old.\n  My hobbies are {{ range $person.hobbies }}{{ . }} {{ end }}.\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Plugin Uninstall Command\nDESCRIPTION: This code block lists all the options inherited from parent commands. These options provide various configurations for Kubernetes API server connection, authentication, and Helm-specific settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/helm/helm_plugin_uninstall.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the file containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Values Schema Definition\nDESCRIPTION: JSON Schema definition for validating Helm values, specifying required fields and data types for chart configuration.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"image\": {\n      \"description\": \"Container Image\",\n      \"properties\": {\n        \"repo\": {\n          \"type\": \"string\"\n        },\n        \"tag\": {\n          \"type\": \"string\"\n        }\n      },\n      \"type\": \"object\"\n    },\n    \"name\": {\n      \"description\": \"Service name\",\n      \"type\": \"string\"\n    },\n    \"port\": {\n      \"description\": \"Port\",\n      \"minimum\": 0,\n      \"type\": \"integer\"\n    },\n    \"protocol\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"protocol\",\n    \"port\"\n  ],\n  \"title\": \"Values\",\n  \"type\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Helm Values Schema Definition\nDESCRIPTION: JSON Schema definition for validating Helm values, specifying required fields and data types for chart configuration.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"image\": {\n      \"description\": \"Container Image\",\n      \"properties\": {\n        \"repo\": {\n          \"type\": \"string\"\n        },\n        \"tag\": {\n          \"type\": \"string\"\n        }\n      },\n      \"type\": \"object\"\n    },\n    \"name\": {\n      \"description\": \"Service name\",\n      \"type\": \"string\"\n    },\n    \"port\": {\n      \"description\": \"Port\",\n      \"minimum\": 0,\n      \"type\": \"integer\"\n    },\n    \"protocol\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"protocol\",\n    \"port\"\n  ],\n  \"title\": \"Values\",\n  \"type\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: String Containment Check in Go\nDESCRIPTION: This example demonstrates the contains function to check if one string is contained within another.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_35\n\nLANGUAGE: go\nCODE:\n```\ncontains \"cat\" \"catch\"\n```\n\n----------------------------------------\n\nTITLE: Optional Flags for Helm Plugin Uninstall Command\nDESCRIPTION: This snippet shows the available optional flag for the 'helm plugin uninstall' command. The -h or --help flag can be used to display help information for the command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/helm/helm_plugin_uninstall.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for uninstall\n```\n\n----------------------------------------\n\nTITLE: Defining Hook Deletion Policies in Helm Chart\nDESCRIPTION: This YAML snippet shows how to define deletion policies for hooks in a Helm chart using annotations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts_hooks.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  \"helm.sh/hook-delete-policy\": before-hook-creation,hook-succeeded\n\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Dependency Update Command in Bash\nDESCRIPTION: These options are inherited from parent commands and provide additional configuration for Kubernetes cluster interaction, authentication, and Helm repository management.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/helm/helm_dependency_update.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --debug                       장황한(verbose) 출력 활성화\n      --kube-apiserver string       쿠버네티스 API 서버의 주소 및 포트\n      --kube-as-group stringArray   작업에 관해 제시할 그룹. 플래그를 여러 번 사용하여 여러 그룹 지정 가능\n      --kube-as-user string         작업에 관해 제시할 사용자명\n      --kube-context string         사용할 kubeconfig 컨텍스트 이름\n      --kube-token string           인증에 사용될 베어러(bearer) 토큰\n      --kubeconfig string           kubeconfig 파일 경로\n  -n, --namespace string            이 요청에 대한 네임스페이스 스코프\n      --registry-config string      레지스트리 구성 파일에 대한 경로 (기본값 \"~/.config/helm/registry.json\")\n      --repository-cache string     캐시된 저장소 색인이 포함된 파일의 경로 (기본값 \"~/.cache/helm/repository\")\n      --repository-config string    저장소 이름 및 URL 을 포함하는 파일 경로 (기본값 \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Converting CamelCase to kebab-case in Go\nDESCRIPTION: This snippet illustrates the kebabcase function to convert a string from camelCase to kebab-case.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_44\n\nLANGUAGE: go\nCODE:\n```\nkebabcase \"FirstName\"\n```\n\n----------------------------------------\n\nTITLE: Helm Show Values Inherited Options\nDESCRIPTION: Global options inherited from parent commands that affect the behavior of helm show values, including Kubernetes cluster configuration and client settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_values.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Using 'print' Function in Helm Templates\nDESCRIPTION: The 'print' function returns a string from the combination of its parts. Types that are not strings are converted to strings where possible.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nprint \"Matt has \" .Dogs \" dogs\"\n```\n\n----------------------------------------\n\nTITLE: Using 'gt' Function in Helm Templates\nDESCRIPTION: The 'gt' function returns a boolean true if the first argument is greater than the second. False is returned otherwise (e.g., Arg1 > Arg2).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ngt .Arg1 .Arg2\n```\n\n----------------------------------------\n\nTITLE: Basic Math Operations\nDESCRIPTION: Examples of basic math operations using add and mul functions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_92\n\nLANGUAGE: helm\nCODE:\n```\nadd 1 2 3\n```\n\nLANGUAGE: helm\nCODE:\n```\nmul 1 2 3\n```\n\n----------------------------------------\n\nTITLE: Default Liveness Probe Configuration\nDESCRIPTION: Example of default liveness probe configuration in a Helm chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/values_files.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlivenessProbe:\n  httpGet:\n    path: /user/login\n    port: http\n  initialDelaySeconds: 120\n```\n\n----------------------------------------\n\nTITLE: Helm Install Command with Null Override\nDESCRIPTION: Example of using helm install command to override and null out default values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/values_files.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nhelm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null\n```\n\n----------------------------------------\n\nTITLE: Siguiendo y obteniendo claves PGP de un usuario de Keybase\nDESCRIPTION: Muestra cómo seguir a un usuario de Keybase y obtener sus claves PGP para verificar charts firmados por ellos.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/provenance.md#2025-04-08_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ keybase follow technosophos\n$ keybase pgp pull\n```\n\n----------------------------------------\n\nTITLE: Using 'le' Function in Helm Templates\nDESCRIPTION: The 'le' function returns a boolean true if the first argument is less than or equal to the second. False is returned otherwise (e.g., Arg1 <= Arg2).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nle .Arg1 .Arg2\n```\n\n----------------------------------------\n\nTITLE: Helm-Kubernetes Version Compatibility Table\nDESCRIPTION: Comprehensive markdown table showing the compatibility matrix between Helm versions (2.x and 3.x) and their supported Kubernetes versions. Spans from Helm 2.0.x through 3.17.x.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/version_skew.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Helm Version | Supported Kubernetes Versions |\n|--------------|-------------------------------|\n| 3.17.x       | 1.32.x - 1.29.x               |\n| 3.16.x       | 1.31.x - 1.28.x               |\n| 3.15.x       | 1.30.x - 1.27.x               |\n| 3.14.x       | 1.29.x - 1.26.x               |\n| 3.13.x       | 1.28.x - 1.25.x               |\n| 3.12.x       | 1.27.x - 1.24.x               |\n| 3.11.x       | 1.26.x - 1.23.x               |\n| 3.10.x       | 1.25.x - 1.22.x               |\n| 3.9.x        | 1.24.x - 1.21.x               |\n| 3.8.x        | 1.23.x - 1.20.x               |\n| 3.7.x        | 1.22.x - 1.19.x               |\n| 3.6.x        | 1.21.x - 1.18.x               |\n| 3.5.x        | 1.20.x - 1.17.x               |\n| 3.4.x        | 1.19.x - 1.16.x               |\n| 3.3.x        | 1.18.x - 1.15.x               |\n| 3.2.x        | 1.18.x - 1.15.x               |\n| 3.1.x        | 1.17.x - 1.14.x               |\n| 3.0.x        | 1.16.x - 1.13.x               |\n| 2.16.x       | 1.16.x - 1.15.x               |\n| 2.15.x       | 1.15.x - 1.14.x               |\n| 2.14.x       | 1.14.x - 1.13.x               |\n| 2.13.x       | 1.13.x - 1.12.x               |\n| 2.12.x       | 1.12.x - 1.11.x               |\n| 2.11.x       | 1.11.x - 1.10.x               |\n| 2.10.x       | 1.10.x - 1.9.x                |\n| 2.9.x        | 1.10.x - 1.9.x                |\n| 2.8.x        | 1.9.x - 1.8.x                 |\n| 2.7.x        | 1.8.x - 1.7.x                 |\n| 2.6.x        | 1.7.x - 1.6.x                 |\n| 2.5.x        | 1.6.x - 1.5.x                 |\n| 2.4.x        | 1.6.x - 1.5.x                 |\n| 2.3.x        | 1.5.x - 1.4.x                 |\n| 2.2.x        | 1.5.x - 1.4.x                 |\n| 2.1.x        | 1.5.x - 1.4.x                 |\n| 2.0.x        | 1.4.x - 1.3.x                 |\n```\n\n----------------------------------------\n\nTITLE: Installing a Chart with Multiple Values Files\nDESCRIPTION: Example showing how to install a Redis chart with multiple values files. The right-most file's values take precedence in case of conflicts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_install.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install -f myvalues.yaml -f override.yaml  myredis ./redis\n```\n\n----------------------------------------\n\nTITLE: Using Tags and Conditions with CLI\nDESCRIPTION: Demonstrates how to use the --set parameter to modify tag and condition values when installing a chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/topics/charts.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm install --set tags.front-end=true --set subchart2.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Inspecting Helm Releases\nDESCRIPTION: Commands for listing, filtering, and checking the status of Helm releases across namespaces.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/CheatSheet.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm list                       # Lists all of the releases for a specified namespace, uses current namespace context if namespace not specified\nhelm list --all                 # Show all releases without any filter applied, can use -a\nhelm list --all-namespaces      # List releases across all namespaces, we can use -A\nhelm list -l key1=value1,key2=value2 # Selector (label query) to filter on, supports '=', '==', and '!='\nhelm list --date                # Sort by release date\nhelm list --deployed            # Show deployed releases. If no other is specified, this will be automatically enabled\nhelm list --pending             # Show pending releases\nhelm list --failed              # Show failed releases\nhelm list --uninstalled         # Show uninstalled releases (if 'helm uninstall --keep-history' was used)\nhelm list --superseded          # Show superseded releases\nhelm list -o yaml               # Prints the output in the specified format. Allowed values: table, json, yaml (default table)\nhelm status <release>           # This command shows the status of a named release.\nhelm status <release> --revision <number>   # if set, display the status of the named release with revision\nhelm history <release>          # Historical revisions for a given release.\nhelm env                        # Env prints out all the environment information in use by Helm.\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Get Values Command in Bash\nDESCRIPTION: These options are inherited from parent commands and provide additional configuration for Kubernetes API interaction, authentication, and Helm repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_values.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v4 in Go\nDESCRIPTION: Shows how to generate a new UUID v4 (random) using the uuidv4 function.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/function_list.md#2025-04-08_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nuuidv4\n```\n\n----------------------------------------\n\nTITLE: Structured Values in YAML Configuration\nDESCRIPTION: A YAML example showing how to create nested values in a Helm values file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/values_files.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfavorite:\n  drink: coffee\n  food: pizza\n```\n\n----------------------------------------\n\nTITLE: Generating Release Notes\nDESCRIPTION: Commands to generate baseline release notes including changelog.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nexport VERSION=\"$RELEASE_NAME\"\nexport PREVIOUS_RELEASE=vX.Y.Z\nmake clean\nmake fetch-dist\nmake release-notes\n```\n\n----------------------------------------\n\nTITLE: Escaping URL Query Parameters in Go\nDESCRIPTION: Illustrates how to escape a string for use in a URL query parameter using the urlquery function.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/function_list.md#2025-04-08_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n$var := urlquery \"string for query\"\n```\n\n----------------------------------------\n\nTITLE: Viewing helm-2to3 convert options in Bash\nDESCRIPTION: Displays the available options for the helm-2to3 convert command, which is used to migrate Helm v2 releases to Helm v3.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 2to3 convert -h\nmigrate Helm v2 release in-place to Helm v3\n\nUsage:\n  2to3 convert [flags] RELEASE\n\nFlags:\n      --delete-v2-releases         v2 release versions are deleted after migration. By default, the v2 release versions are retained\n      --dry-run                    simulate a command\n  -h, --help                       help for convert\n  -l, --label string               label to select Tiller resources by (default \"OWNER=TILLER\")\n  -s, --release-storage string     v2 release storage type/object. It can be 'secrets' or 'configmaps'. This is only used with the 'tiller-out-cluster' flag (default \"secrets\")\n      --release-versions-max int   limit the maximum number of versions converted per release. Use 0 for no limit (default 10)\n  -t, --tiller-ns string           namespace of Tiller (default \"kube-system\")\n      --tiller-out-cluster         when  Tiller is not running in the cluster e.g. Tillerless\n```\n\n----------------------------------------\n\nTITLE: Helm Global Command Options\nDESCRIPTION: Global flags inherited from parent commands that can be used with the dependency update command, including Kubernetes cluster configuration and API settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_dependency_update.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Template with Root Scope Access\nDESCRIPTION: ConfigMap template showing how to access list values from parent scope using $ variable within a with block.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  toppings: |-\n    {{- range $.Values.pizzaToppings }}\n    - {{ . | title | quote }}\n    {{- end }}\n  {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Helm Global Command Options\nDESCRIPTION: Global command-line options inherited from parent commands, including Kubernetes configuration and repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_pull.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Finding All Regex Matches in Go\nDESCRIPTION: This example demonstrates the regexFindAll function to find all matches of a regular expression in a given string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_57\n\nLANGUAGE: go\nCODE:\n```\nregexFindAll \"[2,4,6,8]\" \"123456789\" -1\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Auto-completion in Shell Script\nDESCRIPTION: Demonstrates how to create a plugin.complete script that calls the main plugin executable with a special flag for generating dynamic auto-completions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/plugins.md#2025-04-08_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n#!/usr/bin/env sh\n\n# \"$@\" is the entire command-line that requires completion.\n# It is important to double-quote the \"$@\" variable to preserve a possibly empty last parameter.\n$HELM_PLUGIN_DIR/status.sh --complete \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Subchart Values Configuration - YAML\nDESCRIPTION: Example showing subchart's values.yaml configuration with nested data structure.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/charts.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n  data:\n    myint: 999\n    mybool: true\n```\n\n----------------------------------------\n\nTITLE: ServiceAccount Name Helper Template in Helm\nDESCRIPTION: Helm template helper function for generating ServiceAccount names. Creates appropriate ServiceAccount names based on configuration settings and includes fallback to default values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/rbac.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"mychart.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create -}}\n    {{ default (include \"mychart.fullname\" .) .Values.serviceAccount.name }}\n{{- else -}}\n    {{ default \"default\" .Values.serviceAccount.name }}\n{{- end -}}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Auto-completion in YAML\nDESCRIPTION: Specifies the structure of the completion.yaml file used for providing static shell auto-completion for a plugin. It includes sections for flags, valid arguments, and nested commands.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/plugins.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: <pluginName>\nflags:\n- <flag 1>\n- <flag 2>\nvalidArgs:\n- <arg value 1>\n- <arg value 2>\ncommands:\n  name: <commandName>\n  flags:\n  - <flag 1>\n  - <flag 2>\n  validArgs:\n  - <arg value 1>\n  - <arg value 2>\n  commands:\n     <and so on, recursively>\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Dependencies in Helm 2 (YAML)\nDESCRIPTION: Example of how chart dependencies were defined in Helm 2 using requirements.yaml. It specifies a MariaDB dependency with version, repository, condition, and tags.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-05-06-helm-3-preview-pt5.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n- name: mariadb\n  version: 5.x.x\n  repository: https://kubernetes-charts.storage.googleapis.com/\n  condition: mariadb.enabled\n  tags:\n    - database\n```\n\n----------------------------------------\n\nTITLE: Parent Values Configuration in YAML\nDESCRIPTION: Example showing how parent chart's final values are structured with imported fields from subchart1.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmyimports:\n  myint: 999\n  mybool: true\n  mystring: \"helm rocks!\"\n```\n\n----------------------------------------\n\nTITLE: Parent Values Configuration in YAML\nDESCRIPTION: Example showing how parent chart's final values are structured with imported fields from subchart1.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/charts.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmyimports:\n  myint: 999\n  mybool: true\n  mystring: \"helm rocks!\"\n```\n\n----------------------------------------\n\nTITLE: Helm Command Global Options\nDESCRIPTION: Options inherited from parent commands that can be used with any Helm command, including options for Kubernetes API server configuration, authentication, and Helm repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_rollback.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Plugin Update Command Options\nDESCRIPTION: Direct command options available for the helm plugin update command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_plugin_update.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for update\n```\n\n----------------------------------------\n\nTITLE: Template Comments Example\nDESCRIPTION: Example of using Helm template comments for documentation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/templates.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n{{- /*\nThis is a comment.\n*/}}\ntype: frobnitz\n```\n\n----------------------------------------\n\nTITLE: Quoting Strings in Helm Templates\nDESCRIPTION: A demonstration of the proper way to quote string values in Helm templates. The example uses the quote function to ensure the string value from .Values.MyName is properly quoted.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/charts_tips_and_tricks.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: {{ .Values.MyName | quote }}\n```\n\n----------------------------------------\n\nTITLE: Registry Logout Command\nDESCRIPTION: Example of logging out from an OCI registry using Helm.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/registries.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ helm registry logout localhost:5000\nLogout succeeded\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Repository\nDESCRIPTION: Command to add a new Helm chart repository.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/using_helm.md#2025-04-08_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add dev https://example.com/dev-charts\n```\n\n----------------------------------------\n\nTITLE: Using Helm 1 Template Generation with YAML Front-matter\nDESCRIPTION: Example of how Helm 1 handled template substitution using YAML front-matter and sed commands. This was an early approach before the introduction of modern template languages.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-04-22-helm-3-preview-pt1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#helm:generate sed -i -e s|ubuntu-debootstrap|fluffy-bunny| my/pod.yaml\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Helm Release\nDESCRIPTION: Command to rollback a Helm release to a previous revision.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/using_helm.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm rollback happy-panda 1\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Chart Release\nDESCRIPTION: A YAML configuration for a GitHub Actions workflow that automates the release of Helm charts. It uses the Chart Releaser Action to create GitHub releases for new chart versions and update the index.yaml file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/chart_releaser_action.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Release Charts\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      - name: Run chart-releaser\n        uses: helm/chart-releaser-action@v1.6.0\n        env:\n          CR_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Chart Release\nDESCRIPTION: A YAML configuration for a GitHub Actions workflow that automates the release of Helm charts. It uses the Chart Releaser Action to create GitHub releases for new chart versions and update the index.yaml file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/chart_releaser_action.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Release Charts\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      - name: Run chart-releaser\n        uses: helm/chart-releaser-action@v1.6.0\n        env:\n          CR_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```\n\n----------------------------------------\n\nTITLE: Converting snake_case to CamelCase in Go\nDESCRIPTION: This example shows how to use the camelcase function to convert a string from snake_case to CamelCase.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_43\n\nLANGUAGE: go\nCODE:\n```\ncamelcase \"http_server\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Client Logging in Helm\nDESCRIPTION: This command demonstrates how to enable Kubernetes client logging in Helm by setting the verbosity level to 6 when running the 'list' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/faq/troubleshooting.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhelm list -v 6\n```\n\n----------------------------------------\n\nTITLE: Using 'printf' Function in Helm Templates\nDESCRIPTION: The 'printf' function returns a string based on a formatting string and the arguments to pass to it in order. It supports various placeholders for different data types.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nprintf \"%s has %d dogs.\" .Name .NumberDogs\n```\n\n----------------------------------------\n\nTITLE: Installing Helm via Winget on Windows\nDESCRIPTION: This command installs Helm using the Winget package manager on Windows. The Helm package is maintained by the community and is generally up to date.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/install.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwinget install Helm.Helm\n```\n\n----------------------------------------\n\nTITLE: Installing Helm via Winget on Windows\nDESCRIPTION: This command installs Helm using the Winget package manager on Windows. The Helm package is maintained by the community and is generally up to date.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/install.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwinget install Helm.Helm\n```\n\n----------------------------------------\n\nTITLE: Retrieving Helm Release Metadata Using Command Line\nDESCRIPTION: Example of using the new 'helm get metadata' command to retrieve information about a WordPress release, showing chart details like version, namespace, and deployment timestamp.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2023-09-29-helm-3.13.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ helm get metadata wp\nNAME: wp\nCHART: wordpress\nVERSION: 17.1.13\nAPP_VERSION: 6.3.1\nNAMESPACE: default\nREVISION: 1\nSTATUS: deployed\nDEPLOYED_AT: 2023-09-28T16:28:30-04:00\n```\n\n----------------------------------------\n\nTITLE: Declaring Library Chart Dependencies in Chart.yaml (YAML)\nDESCRIPTION: This snippet demonstrates how to declare library chart dependencies in the Chart.yaml file using the dependencies directive. It shows how to specify the name, version, and repository for a library chart named 'mylib'.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ja/docs/faq/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: mylib\n    version: 1.x.x\n    repository: quay.io\n```\n\n----------------------------------------\n\nTITLE: Using Repository Name Alias in Chart Dependencies\nDESCRIPTION: YAML configuration showing how to reference a repository by its alias name instead of full URL after adding it with 'helm repo add'.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/charts.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: awesomeness\n    version: 1.0.0\n    repository: \"@fantastic-charts\"\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Lists with --set\nDESCRIPTION: This YAML snippet demonstrates how to represent a list of values in YAML format, equivalent to using the --set option with curly braces to define a list.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname:\n  - a\n  - b\n  - c\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Lists with --set\nDESCRIPTION: This YAML snippet demonstrates how to represent a list of values in YAML format, equivalent to using the --set option with curly braces to define a list.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname:\n  - a\n  - b\n  - c\n```\n\n----------------------------------------\n\nTITLE: Basic Helm List Command Syntax\nDESCRIPTION: Shows the basic syntax for the 'helm list' command with optional flags. This command lists releases in the current or specified namespace.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/helm/helm_list.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm list [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Repo Update Command\nDESCRIPTION: This command updates information of available charts locally from chart repositories. It can update all repositories or specific ones as specified.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_update.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update [REPO1 [REPO2 ...]] [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Repo Update Command\nDESCRIPTION: This command updates information of available charts locally from chart repositories. It can update all repositories or specific ones as specified.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_update.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update [REPO1 [REPO2 ...]] [flags]\n```\n\n----------------------------------------\n\nTITLE: Amending the Latest Commit to Add a DCO Sign-off\nDESCRIPTION: This command shows how to amend the most recent Git commit to add a DCO sign-off when you forgot to include it initially. The -s flag adds the 'Signed-off-by' line to the commit message.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2018-08-27-helm-switch-dco.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit --amend -s\n```\n\n----------------------------------------\n\nTITLE: Pushing Helm Charts to OCI Registry via SDK\nDESCRIPTION: Go code example demonstrating how to programmatically push a Helm chart to an OCI registry using the Helm SDK. Shows client initialization, file reading, and push operation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2022-02-28-storing-charts-in-oci.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"helm.sh/helm/v3/pkg/registry\"\n)\n\nfunc check(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc main() {\n\tclient, err := registry.NewClient()\n\tcheck(err)\n\n\tb, err := ioutil.ReadFile(\"demo-0.1.0.tgz\")\n\tcheck(err)\n\n\tinfo, err := client.Push(b, \"r.example.com/myuser/demo:0.1.0\")\n\tcheck(err)\n\n\tfmt.Printf(\"Pushed: %s\\n\", info.Ref)\n\tfmt.Printf(\"Digest: %s\\n\", info.Manifest.Digest)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Object to JSON in Go\nDESCRIPTION: This example illustrates the toJson function to encode an item into a JSON string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_49\n\nLANGUAGE: go\nCODE:\n```\ntoJson .Item\n```\n\n----------------------------------------\n\nTITLE: Dictionary Operations in Helm Templates\nDESCRIPTION: Describes functions for working with dictionaries in Helm templates, including creating dictionaries, getting and setting values, checking for keys, merging dictionaries, and more.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/function_list.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n$myDict := dict \"name1\" \"value1\" \"name2\" \"value2\" \"name3\" \"value 3\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nget $myDict \"name1\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$_ := set $myDict \"name4\" \"value4\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$_ := unset $myDict \"name4\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhasKey $myDict \"name1\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\npluck \"name1\" $myDict $myOtherDict\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndig \"user\" \"role\" \"humanName\" \"guest\" $dict\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$newdict := merge $dest $source1 $source2\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$newdict := mergeOverwrite $dest $source1 $source2\n```\n\n----------------------------------------\n\nTITLE: Using Glob Patterns with Root Scope in Helm Templates\nDESCRIPTION: Another approach to use the .Files.Glob method to find files matching a pattern (all YAML files) and access file contents using the root scope ($).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/accessing_files.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{{ range $path, $_ :=  .Files.Glob  \"**.yaml\" }}\n      {{ $.Files.Get $path }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Releases\nDESCRIPTION: Command output showing currently deployed Helm releases.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/using_helm.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ helm list\nNAME            VERSION UPDATED                         STATUS          CHART\ninky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0\n```\n\n----------------------------------------\n\nTITLE: Setting ConfigMap Storage Backend for Helm\nDESCRIPTION: Demonstrates how to set the HELM_DRIVER environment variable to use the ConfigMap storage backend instead of the default Secret backend.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/advanced.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport HELM_DRIVER=configmap\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm v4 Documentation Metadata in YAML\nDESCRIPTION: YAML frontmatter configuration that defines the URL path, name, GitHub repository URL, and branch for Helm v4 documentation. Used to set up documentation routing and source control references.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/code/helm-v4.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nurl: \"helm/v4\"\nname: \"helm/v4\"\nrepoURL: \"https://github.com/helm/helm\"\nbranch: \"main\"\n```\n\n----------------------------------------\n\nTITLE: Using 'not' Function in Helm Templates\nDESCRIPTION: The 'not' function returns the boolean negation of its argument.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nnot .Arg\n```\n\n----------------------------------------\n\nTITLE: Helm Repository List Inherited Options\nDESCRIPTION: Options inherited from parent commands including Kubernetes API configuration, authentication, and repository settings\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_list.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Setting a Basic Value in YAML Configuration File\nDESCRIPTION: A simple YAML configuration example for Helm that sets a favorite drink value.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/values_files.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfavoriteDrink: coffee\n```\n\n----------------------------------------\n\nTITLE: Using 'and' Function in Helm Templates\nDESCRIPTION: The 'and' function returns the boolean AND of two or more arguments. It returns the first empty argument, or the last argument if all are non-empty.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nand .Arg1 .Arg2\n```\n\n----------------------------------------\n\nTITLE: Following and Importing Keybase User's PGP Keys\nDESCRIPTION: Follows a Keybase user and imports their PGP keys into the local GnuPG keyring.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/provenance.md#2025-04-08_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ keybase follow technosophos\n$ keybase pgp pull\n```\n\n----------------------------------------\n\nTITLE: Conditional with Whitespace Control Using Chomp Modifiers\nDESCRIPTION: Uses the whitespace chomp modifiers ({{- and -}}) to properly control whitespace in the template output.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n  {{- if eq .Values.favorite.drink \"coffee\" }}\n  mug: \"true\"\n  {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Resulting Dependencies from Using Aliases\nDESCRIPTION: Text showing the three dependency entries that result from using aliases in the configuration.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/charts.md#2025-04-08_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nsubchart\nnew-subchart-1\nnew-subchart-2\n```\n\n----------------------------------------\n\nTITLE: Enabling OCI Support in Helm Pre-v3.8.0\nDESCRIPTION: Command to enable experimental OCI support in Helm versions prior to 3.8.0 by setting an environment variable.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/registries.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nexport HELM_EXPERIMENTAL_OCI=1\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Patch Releases\nDESCRIPTION: Shell commands to set up environment variables needed for Helm patch releases\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport PREVIOUS_PATCH_RELEASE=vX.Y.Z\nexport RELEASE_NAME=vX.Y.Z+1\nexport RELEASE_BRANCH_NAME=\"release-X.Y\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Deployment Template for Common Helm Helper Chart\nDESCRIPTION: Shows how to edit the deployment.yaml file to use the common deployment template and define overrides for the Deployment resource.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/library_charts.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.deployment\" (list . \"demo.deployment\") -}}\n{{- define \"demo.deployment\" -}}\n## Define overrides for your Deployment resource here, e.g.\napiVersion: apps/v1\nspec:\n  replicas: {{ .Values.replicaCount }}\n  selector:\n    matchLabels:\n      {{- include \"demo.selectorLabels\" . | nindent 6 }}\n  template:\n    metadata:\n      labels:\n        {{- include \"demo.selectorLabels\" . | nindent 8 }}\n\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Chart Repository (Console)\nDESCRIPTION: Adds the official Helm Stable chart repository to your local Helm installation. This allows you to access and install charts from the stable repository.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ja/docs/intro/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add stable https://charts.helm.sh/stable\n```\n\n----------------------------------------\n\nTITLE: Example Release Notes Template\nDESCRIPTION: Markdown template for Helm release notes including version information, notable changes, and download links.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n## vX.Y.Z\n\nHelm vX.Y.Z is a feature release. This release, we focused on <insert focal point>. Users are encouraged to upgrade for the best experience.\n\nThe community keeps growing, and we'd love to see you there!\n\n- Join the discussion in [Kubernetes Slack](https://kubernetes.slack.com):\n  - `#helm-users` for questions and just to hang out\n  - `#helm-dev` for discussing PRs, code, and bugs\n- Hang out at the Public Developer Call: Thursday, 9:30 Pacific via [Zoom](https://zoom.us/j/696660622)\n- Test, debug, and contribute charts: [Artifact Hub helm charts](https://artifacthub.io/packages/search?kind=0)\n\n## Notable Changes\n\n- Kubernetes 1.16 is now supported including new manifest apiVersions\n- Sprig was upgraded to 2.22\n\n## Installation and Upgrading\n\nDownload Helm X.Y. The common platform binaries are here:\n\n- [MacOS amd64](https://get.helm.sh/helm-vX.Y.Z-darwin-amd64.tar.gz) ([checksum](https://get.helm.sh/helm-vX.Y.Z-darwin-amd64.tar.gz.sha256sum) / CHECKSUM_VAL)\n- [Linux amd64](https://get.helm.sh/helm-vX.Y.Z-linux-amd64.tar.gz) ([checksum](https://get.helm.sh/helm-vX.Y.Z-linux-amd64.tar.gz.sha256sum) / CHECKSUM_VAL)\n- [Linux arm](https://get.helm.sh/helm-vX.Y.Z-linux-arm.tar.gz) ([checksum](https://get.helm.sh/helm-vX.Y.Z-linux-arm.tar.gz.sha256) / CHECKSUM_VAL)\n- [Linux arm64](https://get.helm.sh/helm-vX.Y.Z-linux-arm64.tar.gz) ([checksum](https://get.helm.sh/helm-vX.Y.Z-linux-arm64.tar.gz.sha256sum) / CHECKSUM_VAL)\n- [Linux i386](https://get.helm.sh/helm-vX.Y.Z-linux-386.tar.gz) ([checksum](https://get.helm.sh/helm-vX.Y.Z-linux-386.tar.gz.sha256) / CHECKSUM_VAL)\n- [Linux ppc64le](https://get.helm.sh/helm-vX.Y.Z-linux-ppc64le.tar.gz) ([checksum](https://get.helm.sh/helm-vX.Y.Z-linux-ppc64le.tar.gz.sha256sum) / CHECKSUM_VAL)\n- [Linux s390x](https://get.helm.sh/helm-vX.Y.Z-linux-s390x.tar.gz) ([checksum](https://get.helm.sh/helm-vX.Y.Z-linux-s390x.tar.gz.sha256sum) / CHECKSUM_VAL)\n- [Windows amd64](https://get.helm.sh/helm-vX.Y.Z-windows-amd64.zip) ([checksum](https://get.helm.sh/helm-vX.Y.Z-windows-amd64.zip.sha256sum) / CHECKSUM_VAL)\n```\n\n----------------------------------------\n\nTITLE: Converting GnuPG v2 Keyring to Legacy Format\nDESCRIPTION: Converts a GnuPG v2 keyring from the new kbx format to the traditional gpg format.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/provenance.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ gpg --export >~/.gnupg/pubring.gpg\n$ gpg --export-secret-keys >~/.gnupg/secring.gpg\n```\n\n----------------------------------------\n\nTITLE: Upgrading Helm Release with Custom Values\nDESCRIPTION: Shows how to upgrade an existing Helm release named 'happy-panda' using a custom values file 'panda.yaml'.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/using_helm.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ helm upgrade -f panda.yaml happy-panda bitnami/wordpress\n```\n\n----------------------------------------\n\nTITLE: Deprecated Kubernetes Deployment API Example\nDESCRIPTION: Example showing a deprecated Deployment API version that was removed in Kubernetes 1.16\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/kubernetes_apis.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1beta1\nkind: Deployment\n```\n\n----------------------------------------\n\nTITLE: Defining Library Chart ConfigMap Template\nDESCRIPTION: YAML template defining a reusable ConfigMap structure with merge functionality for library chart usage.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/library_charts.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{- define \"mylibchart.configmap.tpl\" -}}\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name | printf \"%s-%s\" .Chart.Name }}\ndata: {}\n{{- end -}}\n{{- define \"mylibchart.configmap\" -}}\n{{- include \"mylibchart.util.merge\" (append . \"mylibchart.configmap.tpl\") -}}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Naming Conventions in YAML for Helm Values\nDESCRIPTION: Shows the correct way to name variables in a Helm chart's values.yaml file, using lowercase first letter and camelCase for multiple words.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/values.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nchicken: true\nchickenNoodleSoup: true\n```\n\n----------------------------------------\n\nTITLE: Dry-running Helm v2 cleanup in Bash\nDESCRIPTION: Demonstrates how to safely test the cleanup process using the --dry-run flag before actually removing Helm v2 data.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 2to3 cleanup --dry-run\n2019/11/14 15:06:59 NOTE: This is in dry-run mode, the following actions will not be executed.\n2019/11/14 15:06:59 Run without --dry-run to take the actions described below:\n2019/11/14 15:06:59\nWARNING: \"Helm v2 Configuration\" \"Release Data\" \"Release Data\" will be removed.\nThis will clean up all releases managed by Helm v2. It will not be possible to restore them if you haven't made a backup of the releases.\nHelm v2 may not be usable afterwards.\n\n[Cleanup/confirm] Are you sure you want to cleanup Helm v2 data? [y/N]: y\n2019/11/14 15:07:01\nHelm v2 data will be cleaned up.\n2019/11/14 15:07:01 [Helm 2] Releases will be deleted.\n2019/11/14 15:07:01 [Helm 2] ReleaseVersion \"postgres.v1\" will be deleted.\n2019/11/14 15:07:01 [Helm 2] ReleaseVersion \"redis.v1\" will be deleted.\n2019/11/14 15:07:01 [Helm 2] Home folder \"/Users/rimasm/.helm\" will be deleted.\n```\n\n----------------------------------------\n\nTITLE: Creating a New Helm Chart\nDESCRIPTION: Creates a new Helm chart using the 'helm create' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/provenance.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm create mychart\nCreating mychart\n```\n\n----------------------------------------\n\nTITLE: Structured Values in Helm values.yaml File\nDESCRIPTION: Example of using nested structured data in a values.yaml file. This creates a 'favorite' object with drink and food properties that can be accessed in templates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/values_files.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfavorite:\n  drink: coffee\n  food: pizza\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Releases\nDESCRIPTION: Shows how to view all deployed Helm releases in the cluster, displaying release names, namespaces, revision numbers, update timestamps, status, and chart information.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm list\nNAME            \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART      \tAPP VERSION\nmysql-1612624192\tdefault  \t1       \t2021-02-06 16:09:56.283059 +0100 CET\tdeployed\tmysql-8.3.0\t8.0.23\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Releases\nDESCRIPTION: Shows how to view all deployed Helm releases in the cluster, displaying release names, namespaces, revision numbers, update timestamps, status, and chart information.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm list\nNAME            \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART      \tAPP VERSION\nmysql-1612624192\tdefault  \t1       \t2021-02-06 16:09:56.283059 +0100 CET\tdeployed\tmysql-8.3.0\t8.0.23\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm CLI Global Options\nDESCRIPTION: Common command line flags inherited by Helm commands for configuring Kubernetes connectivity, authentication, rate limiting, and repository locations. Includes options for API server connection, context selection, namespace specification, and cache paths.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_upgrade.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Example Git Commit Message Format\nDESCRIPTION: Demonstrates the semantic commit message format used in Helm development, showing proper structure with type, scope, description and issue reference.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/developers.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nfix(helm): add --foo flag to 'helm install'\n\nWhen 'helm install --foo bar' is run, this will print \"foo\" in the\noutput regardless of the outcome of the installation.\n\nCloses #1234\n```\n\n----------------------------------------\n\nTITLE: YAML String Representation Styles\nDESCRIPTION: Shows different ways to represent strings in YAML using quotes and bare words.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/yaml_techniques.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nway1: bare words\nway2: \"double-quoted strings\"\nway3: 'single-quoted strings'\n```\n\n----------------------------------------\n\nTITLE: Helm Global Command Options\nDESCRIPTION: Inherited global options available for all Helm commands including completion\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_fish.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Get Manifest Command Options in Bash\nDESCRIPTION: These are the specific options available for the 'helm get manifest' command. They allow you to get help information and specify a particular revision of the named release.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_manifest.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help           help for manifest\n      --revision int   get the named release with revision\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Dependencies in Helm 3 (YAML)\nDESCRIPTION: Example of how chart dependencies are defined in Helm 3 using Chart.yaml. The structure remains the same as Helm 2, but it's now part of the Chart.yaml file instead of a separate requirements.yaml.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-05-06-helm-3-preview-pt5.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n- name: mariadb\n  version: 5.x.x\n  repository: https://kubernetes-charts.storage.googleapis.com/\n  condition: mariadb.enabled\n  tags:\n    - database\n```\n\n----------------------------------------\n\nTITLE: Updating Helm v2 Repository Location\nDESCRIPTION: Two commands required to update the stable repository location in Helm v2. First removes the old repository, then adds the new one.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2020-10-26-new-location-stable-incubator-charts.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo rm stable\nhelm repo add stable https://charts.helm.sh/stable\n```\n\n----------------------------------------\n\nTITLE: Using 'lower' Function in Helm Templates\nDESCRIPTION: The 'lower' function converts the entire string to lowercase.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nlower \"HELLO\"\n```\n\n----------------------------------------\n\nTITLE: Using Library Chart in Application\nDESCRIPTION: YAML template showing how to implement and customize the library chart's ConfigMap in an application chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/library_charts.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{{- include \"mylibchart.configmap\" (list . \"mychart.configmap\") -}}\n{{- define \"mychart.configmap\" -}}\ndata:\n  myvalue: \"Hello World\"\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Example Chart Names in Helm\nDESCRIPTION: Demonstrates valid naming conventions for Helm charts, which must use lowercase letters and numbers. Words may be separated with dashes. The example shows three properly formatted chart names.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/conventions.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndrupal\nnginx-lego\naws-cluster-autoscaler\n```\n\n----------------------------------------\n\nTITLE: Signing Helm Downloads with PGP in Shell\nDESCRIPTION: This shell script signs the Helm downloads with PGP. It sets the version environment variable, cleans the workspace, fetches distributions if not already done, and then signs the files. This process generates ASCII-armored signature files for each file pushed by CI.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/community/release_checklist.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport VERSION=\"$RELEASE_NAME\"\nmake clean\t\t# if not already run\nmake fetch-dist\t# if not already run\nmake sign\n```\n\n----------------------------------------\n\nTITLE: Dictionary Merging Operations in Helm\nDESCRIPTION: Examples of merging dictionaries using merge and mergeOverwrite functions, with deep copy operations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_86\n\nLANGUAGE: go\nCODE:\n```\n$newdict := merge $dest $source1 $source2\n```\n\nLANGUAGE: go\nCODE:\n```\ndeepCopy $source | merge $dest\n```\n\nLANGUAGE: go\nCODE:\n```\n$newdict := mergeOverwrite $dest $source1 $source2\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Options inherited from parent commands that can be used with the helm template command, including Kubernetes cluster configuration and authentication options.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_template.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Signing a Helm Chart Package\nDESCRIPTION: Signs a Helm chart package using a PGP key, specifying the key and keyring location.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/provenance.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ helm package --sign --key 'John Smith' --keyring path/to/keyring.secret mychart\n```\n\n----------------------------------------\n\nTITLE: Using 'trimAll' Function in Helm Templates\nDESCRIPTION: The 'trimAll' function removes the given characters from the front and back of a string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ntrimAll \"$\" \"$5.00\"\n```\n\n----------------------------------------\n\nTITLE: Schema Definition Example - JSON\nDESCRIPTION: Example JSON schema for validating values in a Helm chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/charts.md#2025-04-08_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"image\": {\n      \"description\": \"Container Image\",\n      \"properties\": {\n        \"repo\": {\n          \"type\": \"string\"\n        },\n        \"tag\": {\n          \"type\": \"string\"\n        }\n      },\n      \"type\": \"object\"\n    },\n    \"name\": {\n      \"description\": \"Service name\",\n      \"type\": \"string\"\n    },\n    \"port\": {\n      \"description\": \"Port\",\n      \"minimum\": 0,\n      \"type\": \"integer\"\n    },\n    \"protocol\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"protocol\",\n    \"port\"\n  ],\n  \"title\": \"Values\",\n  \"type\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creando un nuevo chart de Helm\nDESCRIPTION: Muestra cómo crear un nuevo chart de Helm utilizando el comando 'helm create'.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/provenance.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm create mychart\nCreating mychart\n```\n\n----------------------------------------\n\nTITLE: CRD Definition Example - YAML\nDESCRIPTION: Example CustomResourceDefinition (CRD) YAML definition for a CronTab resource.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/charts.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CustomResourceDefinition\nmetadata:\n  name: crontabs.stable.example.com\nspec:\n  group: stable.example.com\n  versions:\n    - name: v1\n      served: true\n      storage: true\n  scope: Namespaced\n  names:\n    plural: crontabs\n    singular: crontab\n    kind: CronTab\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes API Versions in Go\nDESCRIPTION: Demonstrates how to check if a specific API version or resource is available in the cluster using the .Capabilities.APIVersions.Has function.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/function_list.md#2025-04-08_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n.Capabilities.APIVersions.Has \"apps/v1\"\n.Capabilities.APIVersions.Has \"apps/v1/Deployment\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Helm Release Information\nDESCRIPTION: Commands for downloading and viewing detailed information about Helm releases, including hooks, manifests, notes, and values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/CheatSheet.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm get all <release>      # A human readable collection of information about the notes, hooks, supplied values, and generated manifest file of the given release.\nhelm get hooks <release>    # This command downloads hooks for a given release. Hooks are formatted in YAML and separated by the YAML '---\\n' separator.\nhelm get manifest <release> # A manifest is a YAML-encoded representation of the Kubernetes resources that were generated from this release's chart(s). If a chart is dependent on other charts, those resources will also be included in the manifest.\nhelm get notes <release>    # Shows notes provided by the chart of a named release.\nhelm get values <release>   # Downloads a values file for a given release. use -o to format output\n```\n\n----------------------------------------\n\nTITLE: Initial Git Commit of Helm Project\nDESCRIPTION: The first Git commit that marked the creation of the Helm project at Deis, showing the timestamp and author details from October 19, 2015\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2020-10-19-helm-turns-five.md#2025-04-08_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ncommit ecad6e2ef9523a0218864ec552bbfc724f0b9d3d\nAuthor: Matt Butcher <mbutcher@engineyard.com>\nDate:   Mon Oct 19 17:43:26 2015 -0600\n\n    initial add\n```\n\n----------------------------------------\n\nTITLE: Helm Dependency Command Options\nDESCRIPTION: This code block lists the options available for the 'helm dependency' command, including both command-specific and inherited options from parent commands.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_dependency.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nOptions:\n  -h, --help   help for dependency\n\nOptions inherited from parent commands:\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Creating New Release Candidate\nDESCRIPTION: Commands to create and push a new release candidate tag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nexport RELEASE_CANDIDATE_NAME=\"$RELEASE_NAME-rc.2\"\ngit tag --sign --annotate \"${RELEASE_CANDIDATE_NAME}\" --message \"Helm release ${RELEASE_CANDIDATE_NAME}\"\ngit push upstream $RELEASE_CANDIDATE_NAME\n```\n\n----------------------------------------\n\nTITLE: Defining ChartMuseum Repository Configuration in YAML\nDESCRIPTION: YAML configuration that specifies the ChartMuseum project details including the name, GitHub repository URL, and the main branch to use. This is likely used for documentation site generation or integration purposes.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/code/chartmuseum.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: \"chartmuseum\"\nrepoURL: \"https://github.com/helm/chartmuseum\"\nbranch: \"main\"\n---\n```\n\n----------------------------------------\n\nTITLE: Global Values Example - YAML\nDESCRIPTION: Example showing global values configuration that is accessible across all charts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/charts.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"My WordPress Site\" # Sent to the WordPress template\n\nglobal:\n  app: MyWordPress\n\nmysql:\n  max_connections: 100 # Sent to MySQL\n  password: \"secret\"\n\napache:\n  port: 8080 # Passed to Apache\n```\n\n----------------------------------------\n\nTITLE: Modifying Deployment Template with Common Chart\nDESCRIPTION: This YAML snippet demonstrates how to modify the deployment.yaml file to use the common chart template. It allows for overriding specific deployment configurations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/library_charts.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.deployment\" (list . \"demo.deployment\") -}}\n{{- define \"demo.deployment\" -}}\n## Defina anulaciones para su deployment aquí, p. Ej.\nspec:\n  replicas: {{ .Values.replicaCount }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Repo Update Command\nDESCRIPTION: These options are inherited from parent commands and provide additional configuration for Kubernetes API interaction, authentication, and Helm-specific settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_update.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Feature Comparison Table in Markdown\nDESCRIPTION: A markdown table comparing various Helm management tools across features like release info retention, hook support, OCI support, and Helm binary requirements.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2022-04-19-tools-to-manage-helm-declaratively.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| | Retains Helm release info | Supports Helm hooks | OCI support | Does not require Helm binary |\n| -- | -- | -- | -- | -- |\n| Flux Helm controller | ✅ | ✅ | 🚫 | ✅ |\n| Argo CD | 🚫 | :warning: | ✅ | 🚫 |\n| Helmfile | ✅ | :warning: | :warning: | 🚫 |\n| Captain | ✅ | ✅ | :warning: | ✅ |\n| Terraform Helm provider | ✅ | :warning: | ✅ | ✅ |\n| Orkestra | ✅ | ✅ | 🚫 | ✅ |\n| Fleet | ✅ | ✅ | 🚫 | ✅ |\n```\n\n----------------------------------------\n\nTITLE: Helm Upgrade Command Options\nDESCRIPTION: List of available options for the helm upgrade command, including flags for atomic upgrades, certificate handling, namespace creation, and value overrides.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/helm/helm_upgrade.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --atomic                       설정된 경우, 업그레이드 실패 시 변경 사항을 롤백. --atomic 을 사용하면 --wait 플래그가 자동으로 설정\n      --ca-file string               이 CA 번들을 사용하여 HTTPS 사용 서버의 인증서를 확인\n      --cert-file string             이 SSL 인증서 파일을 사용하여 HTTPS 클라이언트를 식별\n      --cleanup-on-fail              업그레이드 실패 시, 이 업그레이드에서 생성된 새 리소스 삭제를 허용\n      --create-namespace             --install 이 설정된 경우 릴리스 네임스페이스가 없으면 생성\n      --description string           사용자 정의 설명을 추가\n      --devel                        개발 버전도 사용. 버전 '>0.0.0-0'에 해당하며 --version 이 설정되어 있으면 무시\n      --disable-openapi-validation   설정된 경우, 업그레이드 프로세스는 쿠버네티스 OpenAPI 스키마에 대해 렌더링된 템플릿의 유효성 검사 미수행\n      --dry-run                      업그레이드 시뮬레이션\n      --force                        대체 전략을 통해 리소스 강제 업데이트\n  -h, --help                         업그레이드 명령어에 대한 도움말\n      --history-max int              릴리스 당 저장되는 최대 리비전 수를 제한. 0으로 지정할 경우 무제한(기본값 10)\n      --insecure-skip-tls-verify     차트 다운로드를 위한 TLS 인증서 검사 건너뛰기\n  -i, --install                      이 이름의 릴리스가 아직 없는 경우 설치 수행\n      --key-file string              이 SSL 키 파일을 사용하여 HTTPS 클라이언트 식별\n      --keyring string               확인에 사용되는 공개키의 위치 (기본값 \"~/.gnupg/pubring.gpg\")\n      --no-hooks                     사전/사후 업그레이드 훅 비활성화\n  -o, --output format                지정된 형식으로 출력을 인쇄. 허용되는 값:table, json, yaml (기본값 table)\n      --password string              요청된 차트를 찾을 수 있는 차트 저장소 비밀번호\n      --post-renderer postrenderer   포스트 렌더링에 사용될 실행 파일의 경로. $PATH 에 있으면 바이너리가 사용되며 그렇지 않은 경우, 주어진 경로에서 실행파일을 탐색(기본 exec)\n      --render-subchart-notes        설정된 경우, 상위 차트와 함께 하위 차트 메모도 렌더링\n      --repo string                  요청된 차트를 찾을 수 있는 차트 저장소 URL\n      --reset-values                 업그레이드 할 때, 값을 차트에 내장된 값으로 재설정\n      --reuse-values                 업그레이드 할 때, 마지막 릴리스의 값을 재사용하고 --set 및 -f 를 통해 명령 줄에서 재정의를 병합. '--reset-values' 가 지정될 경우 무시\n      --set stringArray              명령줄에서 값 설정(쉼표로 여러 값 또는 개별 값을 지정 가능. key1=val1,key2=val2)\n      --set-file stringArray         명령줄을 통해 지정된 각 파일에서 값 설정(쉼표로 여러 값 또는 개별 값을 지정 가능. key1=val1,key2=val2)\n      --set-string stringArray       명령줄에서 STRING 값 설정(쉼표로 여러 값 또는 개별 값을 지정 가능. key1=val1,key2=val2)\n      --skip-crds                    설정된 경우, 설치 플래그가 활성화 된 상태에서 업그레이드를 수행할 때 CRD 미설치. 기본적으로 설치 플래그가 활성화된 상태에서 업그레이드가 수행될때, 아직 없는 경우에는 CRD 설치\n      --timeout duration             개별 쿠버네티스 (훅에 대한 작업과 같이)작업을 기다리는 시간 (기본값 5m0s)\n      --username string              요청된 차트를 찾을 수 있는 차트 저장소 사용자 이름\n  -f, --values strings               YAML 파일 또는 URL에 값 지정 (여러 개 지정 가능)\n      --verify                       사용하기 전에 패키지 확인\n      --version string               사용할 정확한 차트 버전 지정. 지정하지 않을 경우 최신 버전 사용\n      --wait                         설정된 경우, 릴리스를 성공으로 표시하기 전에 모든 파드, PVC, 서비스, 및 스테이트풀셋 또는 레플리카셋의 최소 파드 수가 준비 상태가 될때까지 대기. --timeout 플래그로 설정된 시간까지 대기\n```\n\n----------------------------------------\n\nTITLE: Using 'repeat' Function in Helm Templates\nDESCRIPTION: The 'repeat' function repeats a string multiple times.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nrepeat 3 \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Converting List to Strings in Go\nDESCRIPTION: This example demonstrates the toStrings function to convert a list of integers to a list of strings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_47\n\nLANGUAGE: go\nCODE:\n```\nlist 1 2 3 | toStrings\n```\n\n----------------------------------------\n\nTITLE: Rendering a Helm Chart with Default Values\nDESCRIPTION: Console output showing how a Helm chart is rendered using the default values from values.yaml during a dry run. Demonstrates the computed values and resulting manifest.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/values_files.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ helm install geared-marsupi ./mychart --dry-run --debug\ninstall.go:158: [debug] Original chart version: \"\"\ninstall.go:175: [debug] CHART PATH: /home/bagratte/src/playground/mychart\n\nNAME: geared-marsupi\nLAST DEPLOYED: Wed Feb 19 23:21:13 2020\nNAMESPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\n{}\n\nCOMPUTED VALUES:\nfavoriteDrink: coffee\n\nHOOKS:\nMANIFEST:\n---\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: geared-marsupi-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: coffee\n```\n\n----------------------------------------\n\nTITLE: Managing Helm Repositories\nDESCRIPTION: Commands for handling Helm chart repositories including adding, listing, updating and removing repositories. These commands help manage where Helm looks for charts and how it indexes and searches for available charts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/CheatSheet.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add <repo-name> <url>   # Añadir un repositorio desde internet\nhelm repo list                    # Listar los repositorios de chart añadidas\nhelm repo update                  # Actualizar la información de las charts disponibles localmente desde los repositorios de charts.\nhelm repo remove <repo_name>      # Eliminar uno o más repositorios de charts\nhelm repo index <DIR>             # Leer el directorio actual y generar un fichero índice basado en las charts encontradas.\nhelm repo index <DIR> --merge     # Fusionar el índice generado con un archivo de índice existente.\nhelm search repo <keyword>        # Buscar en los repositorios una palabra clave en las charts\nhelm search hub <keyword>         # Buscar charts en Artifact Hub o en la propia instancia de hub.\n```\n\n----------------------------------------\n\nTITLE: Helm Global Command Options\nDESCRIPTION: Inherited global options that apply to all Helm commands including authentication, API server configuration, and repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_version.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Converting Object to Pretty JSON in Go\nDESCRIPTION: This snippet demonstrates the toPrettyJson function to encode an item into a pretty (indented) JSON string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_50\n\nLANGUAGE: go\nCODE:\n```\ntoPrettyJson .Item\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML with fromYaml in Helm Templates\nDESCRIPTION: Demonstrates how to use the fromYaml function to convert a YAML string into an object that can be used in Helm templates. It includes an example of reading a YAML file and using its contents in a template.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/function_list.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Bob\nage: 25\nhobbies:\n  - hiking\n  - fishing\n  - cooking\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{- $person := .Files.Get \"yamls/person.yaml\" | fromYaml }}\ngreeting: |\n  Hi, my name is {{ $person.name }} and I am {{ $person.age }} years old.\n  My hobbies are {{ range $person.hobbies }}{{ . }} {{ end }}.\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Show CRDs Command in Bash\nDESCRIPTION: This command inspects a chart (directory, file, or URL) and displays the contents of the CustomResourceDefinition files. It can be used with various options to customize the behavior and authentication.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_crds.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm show crds [CHART] [flags]\n```\n\n----------------------------------------\n\nTITLE: Converting Object to Raw JSON in Go\nDESCRIPTION: This example shows the toRawJson function to encode an item into a JSON string with HTML characters unescaped.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_51\n\nLANGUAGE: go\nCODE:\n```\ntoRawJson .Item\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling Helm Applications\nDESCRIPTION: Commands for installing and uninstalling Helm charts with various configuration options. These commands support deployment customization through command-line values, value files, and testing configurations before actual deployment.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/intro/CheatSheet.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install <name> <chart>                           # Instalar la chart con un nombre\nhelm install <name> <chart> --namespace <namespace>   # Instalar la chart en un namespace específico\nhelm install <name> <chart> --set key1=val1,key2=val2 # Establecer valores en la línea de comandos (se pueden especificar varios valores o separarlos con comas)\nhelm install <name> <chart> --values <yaml-file/url>  # Instalar la chart con los valores especificados\nhelm install <name> <chart> --dry-run --debug         # Ejecuta una instalación de prueba para validar la chart (p)\nhelm install <name> <chart> --verify                  # Verificar el paquete antes de usarlo \nhelm install <name> <chart> --dependency-update       # actualizar dependencias si faltan antes de instalar la chart\nhelm uninstall <name>                                 # Desinstalar una release\n```\n\n----------------------------------------\n\nTITLE: Executing Helm List Command with Filter\nDESCRIPTION: Demonstrates how to use the 'helm list' command with a filter to show specific releases. The filter is a regular expression that matches release names starting with 'ara' followed by any lowercase letters.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/helm/helm_list.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ helm list --filter 'ara[a-z]+'\n```\n\n----------------------------------------\n\nTITLE: Installing a Chart with Command Line Values\nDESCRIPTION: Example showing how to install a Redis chart with values set directly from the command line using the --set flag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_install.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set name=prod myredis ./redis\n```\n\n----------------------------------------\n\nTITLE: Converting String to Date in Go Templates\nDESCRIPTION: Illustrates the use of toDate function to convert a string date to another format using pipe.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_82\n\nLANGUAGE: go\nCODE:\n```\ntoDate \"2006-01-02\" \"2017-12-31\" | date \"02/01/2006\"\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading a Helm Release\nDESCRIPTION: This command demonstrates how to install a new release or upgrade an existing one using Helm. It combines the install and upgrade operations into a single command, simplifying chart management.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/howto/charts_tips_and_tricks.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm upgrade --install <release name> --values <values file> <chart directory>\n```\n\n----------------------------------------\n\nTITLE: Modifying Dates in Go Templates\nDESCRIPTION: Illustrates the use of dateModify function to subtract an hour and thirty minutes from the current time.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_79\n\nLANGUAGE: go\nCODE:\n```\nnow | dateModify \"-1.5h\"\n```\n\n----------------------------------------\n\nTITLE: Pluralization Based on Length in Go\nDESCRIPTION: This example shows the usage of the plural function to pluralize a string based on the length of another string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_41\n\nLANGUAGE: go\nCODE:\n```\nlen $fish | plural \"one anchovy\" \"many anchovies\"\n```\n\n----------------------------------------\n\nTITLE: Rounding Duration in Go Templates\nDESCRIPTION: Demonstrates how to use the durationRound function to round a given duration to the most significant unit.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_77\n\nLANGUAGE: go\nCODE:\n```\ndurationRound \"2h10m5s\"\n```\n\n----------------------------------------\n\nTITLE: Helm Show Chart Command Options\nDESCRIPTION: Available flags and options specific to the 'helm show chart' command, including options for authentication, version specification, and certificate verification.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_chart.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n  -h, --help                       help for chart\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --pass-credentials           pass credentials to all domains\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --repo string                chart repository url where to locate the requested chart\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the package before using it\n      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n```\n\n----------------------------------------\n\nTITLE: Creating a ConfigMap Template for a Subchart\nDESCRIPTION: ConfigMap template that uses the dessert value defined in the subchart's values.yaml file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/subcharts_and_globals.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-cfgmap2\ndata:\n  dessert: {{ .Values.dessert }}\n```\n\n----------------------------------------\n\nTITLE: Sequence Generation Examples\nDESCRIPTION: Shows various ways to generate number sequences using the seq command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_91\n\nLANGUAGE: helm\nCODE:\n```\nseq 5       => 1 2 3 4 5\nseq -3      => 1 0 -1 -2 -3\nseq 0 2     => 0 1 2\nseq 2 -2    => 2 1 0 -1 -2\nseq 0 2 10  => 0 2 4 6 8 10\nseq 0 -2 -5 => 0 -2 -4\n```\n\n----------------------------------------\n\nTITLE: Complete ConfigMap with Template Usage\nDESCRIPTION: Example showing how to embed and use a defined template within a ConfigMap manifest.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/named_templates.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{{- define \"mychart.labels\" }}\n  labels:\n    generator: helm\n    date: {{ now | htmlDate }}\n{{- end }}\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  {{- template \"mychart.labels\" }}\ndata:\n  myvalue: \"Hello World\"\n  {{- range $key, $val := .Values.favorite }}\n  {{ $key }}: {{ $val | quote }}\n  {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Basic String Quoting in Helm Templates\nDESCRIPTION: Demonstrates how to properly quote string values from .Values object using the quote function in a ConfigMap template.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/functions_and_pipelines.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ quote .Values.favorite.drink }}\n  food: {{ quote .Values.favorite.food }}\n```\n\n----------------------------------------\n\nTITLE: Basic Helm Repository List Command\nDESCRIPTION: Basic command syntax for listing Helm chart repositories\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_list.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo list [flags]\n```\n\n----------------------------------------\n\nTITLE: Verifying a Helm Chart\nDESCRIPTION: Shows how to verify a Helm chart using the 'helm verify' command and during installation with the '--verify' flag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/provenance.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ helm verify mychart-0.1.0.tgz\n\n$ helm install --generate-name --verify mychart-0.1.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Using 'or' Function in Helm Templates\nDESCRIPTION: The 'or' function returns the boolean OR of two or more arguments. It returns the first non-empty argument, or the last argument if all are empty.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nor .Arg1 .Arg2\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Helm Get Manifest Command in Bash\nDESCRIPTION: These options are inherited from parent commands and provide various configurations for Kubernetes API server connection, authentication, and Helm repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_manifest.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Example Helm Release Version Progression Table\nDESCRIPTION: A markdown table showing how release numbers increment across different Helm operations including install, upgrade, and rollback.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/glossary/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Operation  | Release Number                                       |\n|------------|------------------------------------------------------|\n| install    | release 1                                            |\n| upgrade    | release 2                                            |\n| upgrade    | release 3                                            |\n| rollback 1 | release 4 (but running the same config as release 1) |\n```\n\n----------------------------------------\n\nTITLE: List Manipulation with Compact Function\nDESCRIPTION: Demonstrates how to remove empty entries from a list using the compact function.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_88\n\nLANGUAGE: helm\nCODE:\n```\n$list := list 1 \"a\" \"foo\" \"\"\n$copy := compact $list\n```\n\n----------------------------------------\n\nTITLE: Using Helm Repo Index Command\nDESCRIPTION: The basic syntax for the helm repo index command, which generates an index.yaml file based on packaged charts found in the specified directory.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo index [DIR] [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Node Selector in YAML with Escaped Characters\nDESCRIPTION: This YAML snippet demonstrates how to set a node selector with a key containing dots, equivalent to using --set with backslashes to escape the special characters.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nnodeSelector:\n  kubernetes.io/role: master\n```\n\n----------------------------------------\n\nTITLE: Modified Live State with Injected Sidecar\nDESCRIPTION: YAML snippet demonstrating how live state might be modified by a service mesh or controller, injecting a sidecar container.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/faq/changes_since_helm2.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n- name: server\n  image: nginx:2.0.0\n- name: my-injected-sidecar\n  image: my-cool-mesh:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Displaying helm-2to3 Plugin Usage\nDESCRIPTION: Shows the usage information for the helm-2to3 plugin, including available commands for migration and cleanup.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 2to3\nMigrate and Cleanup Helm v2 configuration and releases in-place to Helm v3\n\nUsage:\n  2to3 [command]\n\nAvailable Commands:\n  cleanup     cleanup Helm v2 configuration, release data and Tiller deployment\n  convert     migrate Helm v2 release in-place to Helm v3\n  help        Help about any command\n  move        migrate Helm v2 configuration in-place to Helm v3\n\nFlags:\n  -h, --help   help for 2to3\n\nUse \"2to3 [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings with Regex in Go Templates\nDESCRIPTION: Illustrates the use of regexSplit function to split a string into substrings based on a regular expression pattern. The last parameter determines the number of substrings to return.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_61\n\nLANGUAGE: go\nCODE:\n```\nregexSplit \"z+\" \"pizza\" -1\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates for HTML in Go Templates\nDESCRIPTION: Demonstrates how to use the htmlDate function to format the current date for inserting into an HTML date picker input field.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_80\n\nLANGUAGE: go\nCODE:\n```\nnow | htmlDate\n```\n\n----------------------------------------\n\nTITLE: Verifying Deployment with kubectl\nDESCRIPTION: Shows how to verify the deployment of the Nginx Ingress controller using kubectl.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-11-13-helm-3-released.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get deployments\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of helm show readme Command\nDESCRIPTION: The basic syntax for using the helm show readme command to display the README file of a specified chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_readme.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm show readme [CHART] [flags]\n```\n\n----------------------------------------\n\nTITLE: Computing Adler-32 Checksum in Go Templates\nDESCRIPTION: Illustrates how to use the adler32sum function to compute the Adler-32 checksum of a given string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_64\n\nLANGUAGE: go\nCODE:\n```\nadler32sum \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Matching in Go\nDESCRIPTION: This snippet shows how to use the regexMatch function to check if a string matches a given regular expression pattern.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_56\n\nLANGUAGE: go\nCODE:\n```\nregexMatch \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\" \"test@acme.com\"\n```\n\n----------------------------------------\n\nTITLE: YAML Boolean Types\nDESCRIPTION: Shows boolean value representation in YAML with and without quotes.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/yaml_techniques.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nisGood: true   # bool\nanswer: \"true\" # string\n```\n\n----------------------------------------\n\nTITLE: Generating Certificate Authority in Go Templates\nDESCRIPTION: Shows how to use the genCA function to generate a new, self-signed x509 certificate authority with specified common name and validity duration.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_69\n\nLANGUAGE: go\nCODE:\n```\n$ca := genCA \"foo-ca\" 365\n```\n\n----------------------------------------\n\nTITLE: String Replacement in Go\nDESCRIPTION: This snippet demonstrates the replace function to perform simple string replacement, replacing spaces with hyphens.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_40\n\nLANGUAGE: go\nCODE:\n```\n\"I Am Henry VIII\" | replace \" \" \"-\"\n```\n\n----------------------------------------\n\nTITLE: Commenting Out Problematic YAML in Helm Templates\nDESCRIPTION: This snippet demonstrates how to comment out a problematic section in a Helm template to bypass YAML parsing errors and view the generated content. It shows both the original template with comments and the rendered output.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/debugging.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v2\n# some: problem section\n# {{ .Values.foo | quote }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v2\n# some: problem section\n#  \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Commenting Out Problematic YAML in Helm Templates\nDESCRIPTION: This snippet demonstrates how to comment out a problematic section in a Helm template to bypass YAML parsing errors and view the generated content. It shows both the original template with comments and the rendered output.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/debugging.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v2\n# some: problem section\n# {{ .Values.foo | quote }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v2\n# some: problem section\n#  \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Using Helm Completion PowerShell Command\nDESCRIPTION: The basic command syntax for generating PowerShell autocompletion scripts for Helm. This command generates the autocompletion script that can be loaded into a PowerShell session.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_powershell.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm completion powershell [flags]\n```\n\n----------------------------------------\n\nTITLE: Well-Formatted YAML Template\nDESCRIPTION: Example of a well-formatted YAML template with minimal whitespace.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/templates.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: example\n  labels:\n    first: first\n    second: second\n```\n\n----------------------------------------\n\nTITLE: Using 'nospace' Function in Helm Templates\nDESCRIPTION: The 'nospace' function removes all whitespace from a string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nnospace \"hello w o r l d\"\n```\n\n----------------------------------------\n\nTITLE: Deriving Passwords in Go Templates\nDESCRIPTION: Illustrates the use of derivePassword function to generate a specific password based on shared master password constraints using a well-specified algorithm.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_67\n\nLANGUAGE: go\nCODE:\n```\nderivePassword 1 \"long\" \"password\" \"user\" \"example.com\"\n```\n\n----------------------------------------\n\nTITLE: Helm Show Values Command Options\nDESCRIPTION: Available command-line options specific to the helm show values command, including TLS configuration, repository access, and version control options.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show_values.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n  -h, --help                       help for values\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --jsonpath string            supply a JSONPath expression to filter the output\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --pass-credentials           pass credentials to all domains\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --repo string                chart repository url where to locate the requested chart\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the package before using it\n      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n```\n\n----------------------------------------\n\nTITLE: Using 'trimSuffix' Function in Helm Templates\nDESCRIPTION: The 'trimSuffix' function trims just the suffix from a string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ntrimSuffix \"-\" \"hello-\"\n```\n\n----------------------------------------\n\nTITLE: Installing a Chart with Values File\nDESCRIPTION: Example showing how to install a Redis chart with values from a custom YAML file. The -f flag allows you to specify a values file to override default chart values.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_install.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install -f myvalues.yaml myredis ./redis\n```\n\n----------------------------------------\n\nTITLE: Helm History Command Options\nDESCRIPTION: Primary command-specific options for the helm history command, including help flag, maximum revision limit, and output format selection.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_history.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help            help for history\n      --max int         maximum number of revision to include in history (default 256)\n  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)\n```\n\n----------------------------------------\n\nTITLE: Scoped Template with Chart Metadata\nDESCRIPTION: Template definition that includes chart name and version, demonstrating scope usage.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/named_templates.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{{/* Generate basic labels */}}\n{{- define \"mychart.labels\" }}\n  labels:\n    generator: helm\n    date: {{ now | htmlDate }}\n    chart: {{ .Chart.Name }}\n    version: {{ .Chart.Version }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Using 'empty' Function in Helm Templates\nDESCRIPTION: The 'empty' function returns true if the given value is considered empty, and false otherwise. Empty values include 0, \"\", [], {}, false, and nil.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nempty .Foo\n```\n\n----------------------------------------\n\nTITLE: Displaying Helm Chart Directory Structure\nDESCRIPTION: Shows the expected file and directory structure of a Helm chart, using WordPress as an example. The structure includes the required Chart.yaml file, optional documentation files, values configuration, and the templates directory.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/charts.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nwordpress/\n  Chart.yaml          # Un archivo YAML que contiene información sobre el chart.\n  LICENSE             # OPCIONAL: Un archivo de texto sin formato que contiene la licencia del chart.\n  README.md           # OPCIONAL: Un archivo README legible por humanos\n  values.yaml         # Los valores de configuración predeterminados para este chart\n  values.schema.json  # OPCIONAL: Un esquema JSON para imponer una estructura en el archivo values.yaml\n  charts/             # Un directorio que contiene los charts de los que depende este chart.\n  crds/               # Custom Resource Definitions\n  templates/          # Un directorio de plantillas que, cuando se combinan con valores, \n                      # generarán archivos de manifiesto de Kubernetes válidos.\n  templates/NOTES.txt # OPCIONAL: Un archivo de texto sin formato que contiene breves notas de uso.\n```\n\n----------------------------------------\n\nTITLE: Inherited Flags for Helm Get Manifest Command in Shell\nDESCRIPTION: These flags are inherited from the parent command and provide various options for configuring the Kubernetes API server connection, authentication, and Helm repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/helm/helm_get_manifest.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the file containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Using 'lt' Function in Helm Templates\nDESCRIPTION: The 'lt' function returns a boolean true if the first argument is less than the second. False is returned otherwise (e.g., Arg1 < Arg2).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nlt .Arg1 .Arg2\n```\n\n----------------------------------------\n\nTITLE: Getting Unix Epoch in Go Templates\nDESCRIPTION: Shows how to use the unixEpoch function to get the seconds since the Unix epoch for the current time.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_78\n\nLANGUAGE: go\nCODE:\n```\nnow | unixEpoch\n```\n\n----------------------------------------\n\nTITLE: Helm Environment Command Usage\nDESCRIPTION: Basic command syntax for running the helm env command to display environment information.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_env.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm env [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Helm Command Options\nDESCRIPTION: Lists options inherited from parent commands. These options are generally applicable to all Helm commands and provide configuration for Kubernetes API server connection, authentication, and Helm-specific settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/helm/helm_list.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the file containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Using Repeat Function with Pipelines\nDESCRIPTION: Shows how to use the repeat function with multiple arguments in a pipeline to repeat strings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/functions_and_pipelines.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | repeat 5 | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Registry Login Command\nDESCRIPTION: This command is used to authenticate to a remote registry in Helm. It allows specifying the host and various options for secure connections and authentication methods.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_registry_login.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm registry login [host] [flags]\n```\n\n----------------------------------------\n\nTITLE: Helm Search Inherited Options\nDESCRIPTION: Comprehensive list of inherited command line options for helm search, including Kubernetes configuration, authentication, and repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_search.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Installed Manifest\nDESCRIPTION: Command to retrieve and display the installed manifest for the Helm release.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/getting_started.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ helm get manifest full-coral\n\n---\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mychart-configmap\ndata:\n  myvalue: \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Helm Dependency Command Inherited Options\nDESCRIPTION: Global options inherited from parent commands that can be used with the dependency list command, including Kubernetes configuration options, namespace settings, and repository configuration paths.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_dependency_list.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Migrating Helm v2 Configuration with Custom Paths\nDESCRIPTION: Demonstrates how to migrate Helm v2 configuration to Helm v3 using custom paths for Helm v2 home and Helm v3 config and data directories.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ export HELM_V2_HOME=$HOME/.helm2\n$ export HELM_V3_CONFIG=$HOME/.helm3\n$ export HELM_V3_DATA=$PWD/.helm3\n$ helm3 2to3 move config\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Additional options inherited from parent commands, including Kubernetes configuration and authentication options.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_search_repo.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ConfigMap Template in YAML\nDESCRIPTION: A simple ConfigMap template file (configmap.yaml) with a static value, to be placed in the mychart/templates/ directory.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/getting_started.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mychart-configmap\ndata:\n  myvalue: \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Using 'ne' Function in Helm Templates\nDESCRIPTION: The 'ne' function returns the boolean inequality of the arguments (e.g., Arg1 != Arg2).\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nne .Arg1 .Arg2\n```\n\n----------------------------------------\n\nTITLE: Helm Global Command Options\nDESCRIPTION: Global options that can be used with the 'helm show' command. These options are inherited from parent commands and control Kubernetes API interactions, authentication, and configuration file locations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_show.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Template with Range Loop\nDESCRIPTION: ConfigMap template demonstrating range iteration over pizza toppings with scope handling using the with action.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  {{- end }}\n  toppings: |-\n    {{- range .Values.pizzaToppings }}\n    - {{ . | title | quote }}\n    {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Template Control Structure Indentation\nDESCRIPTION: Example of template control structure formatting with proper indentation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/templates.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{{ if $foo -}}\n  {{- with .Bar }}Hello{{ end -}}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Converting Helm v2 release to Helm v3 in Bash\nDESCRIPTION: Shows the actual process of migrating a Helm v2 release to Helm v3 using the convert command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 2to3 convert postgres\n2019/11/14 15:03:57 Release \"postgres\" will be converted from Helm v2 to Helm v3.\n2019/11/14 15:03:57 [Helm 3] Release \"postgres\" will be created.\n2019/11/14 15:03:57 [Helm 3] ReleaseVersion \"postgres.v1\" will be created.\n2019/11/14 15:03:57 [Helm 3] ReleaseVersion \"postgres.v1\" created.\n2019/11/14 15:03:57 [Helm 3] Release \"postgres\" created.\n2019/11/14 15:03:57 Release \"postgres\" was converted successfully from Helm v2 to Helm v3.\n2019/11/14 15:03:57 Note: The v2 release information still remains and should be removed to avoid conflicts with the migrated v3 release.\n2019/11/14 15:03:57 v2 release information should only be removed using `helm 2to3` cleanup and when all releases have been migrated over.\n```\n\n----------------------------------------\n\nTITLE: Parsing Semantic Versions in Go\nDESCRIPTION: Shows how to parse a semantic version string into a Version object using the semver function.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/function_list.md#2025-04-08_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n$version := semver \"1.2.3-alpha.1+123\"\n```\n\n----------------------------------------\n\nTITLE: Third TOML Configuration File Example (config3.toml)\nDESCRIPTION: A third simple TOML configuration file with a farewell message property.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/accessing_files.md#2025-04-08_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nmessage = Goodbye from config 3\n```\n\n----------------------------------------\n\nTITLE: Correctly Formatted Output YAML\nDESCRIPTION: The resulting YAML output showing proper indentation after using the include function with indent pipe.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/named_templates.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: edgy-mole-configmap\n  labels:\n    app_name: mychart\n    app_version: \"0.1.0\"\ndata:\n  myvalue: \"Hello World\"\n  drink: \"coffee\"\n  food: \"pizza\"\n  app_name: mychart\n  app_version: \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Semantic Versions in Go\nDESCRIPTION: Illustrates how to compare two semantic versions using the Compare method.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/function_list.md#2025-04-08_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nsemver \"1.4.3\" | (semver \"1.2.3\").Compare\n```\n\n----------------------------------------\n\nTITLE: Helm Template Directive Formatting\nDESCRIPTION: Examples of correct and incorrect formatting for template directives, showing proper whitespace usage.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/templates.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{{ .foo }}\n{{ print \"foo\" }}\n{{- print \"bar\" -}}\n```\n\n----------------------------------------\n\nTITLE: Scaling a Deployment in Kubernetes\nDESCRIPTION: Example of scaling a deployment to zero replicas using kubectl, demonstrating how live state can be modified outside of Helm.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/faq/changes_since_helm2.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl scale --replicas=0 deployment/myapp\n```\n\n----------------------------------------\n\nTITLE: Checking Helm v3 Repository List\nDESCRIPTION: Shows how to check the repository list in Helm v3, which is initially empty as the stable repository is not set up by default.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm3 repo list\nError: no repositories to show\n```\n\n----------------------------------------\n\nTITLE: Helm 2 Requirements.yaml Example\nDESCRIPTION: Example of a requirements.yaml file used in Helm 2 for defining chart dependencies.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/faq/changes_since_helm2.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n- name: mariadb\n  version: 5.x.x\n  repository: https://charts.helm.sh/stable\n  condition: mariadb.enabled\n  tags:\n    - database\n```\n\n----------------------------------------\n\nTITLE: Defining Container Image in Helm Chart Values\nDESCRIPTION: Demonstrates how to reference a container image defined in the values.yaml file within a Helm chart manifest.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/pods.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage: {{ .Values.redisImage | quote }}\n```\n\n----------------------------------------\n\nTITLE: Values File with Global Values\nDESCRIPTION: Extended values file that includes global values which can be accessed by any chart or subchart in the hierarchy.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/subcharts_and_globals.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfavorite:\n  drink: coffee\n  food: pizza\npizzaToppings:\n  - mushrooms\n  - cheese\n  - peppers\n  - onions\n\nmysubchart:\n  dessert: ice cream\n\nglobal:\n  salad: caesar\n```\n\n----------------------------------------\n\nTITLE: Illustrating Template Usage with Flat Values in Helm Charts\nDESCRIPTION: Shows how flat values can be used more simply in Helm chart templates, avoiding the need for multiple existence checks.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/values.md#2025-04-08_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n{{ default \"none\" .Values.serverName }}\n```\n\n----------------------------------------\n\nTITLE: Options for Helm Registry Logout Command\nDESCRIPTION: Available command-specific options for the helm registry logout command. Only includes the help flag for displaying command help.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_registry_logout.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for logout\n```\n\n----------------------------------------\n\nTITLE: Using null to Remove Default Keys in Helm Values\nDESCRIPTION: Helm command that demonstrates how to remove a default key by setting it to null while also setting new values. This example removes the httpGet probe and replaces it with an exec probe.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/values_files.md#2025-04-08_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nhelm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Helm Commands\nDESCRIPTION: The Helm client commands that are vulnerable to unpacking malicious content outside of the chart's path. These commands may allow a maliciously crafted chart to write files to unauthorized locations on the filesystem.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-01-14-helm-security-notice.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm fetch --untar\nhelm lint some.tgz\n```\n\n----------------------------------------\n\nTITLE: Illustrating Incorrect Documentation in values.yaml for Helm Charts\nDESCRIPTION: Shows an example of poorly documented values in a Helm chart's values.yaml file, where comments do not begin with the property name.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/values.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# the host name for the webserver\nserverHost: example\nserverPort: 9191\n```\n\n----------------------------------------\n\nTITLE: Helm Completion PowerShell Command Options\nDESCRIPTION: Available flags specific to the 'helm completion powershell' command. Includes help flag and an option to disable completion descriptions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_powershell.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking Commits for Release\nDESCRIPTION: Command to cherry-pick commits from main branch into release branch.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit cherry-pick -x <commit_id>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Documentation in values.yaml for Helm Charts\nDESCRIPTION: Illustrates proper documentation of values in a Helm chart's values.yaml file, with comments beginning with the property name for easy correlation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/values.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# serverHost is the host name for the webserver\nserverHost: example\n# serverPort is the HTTP listener port for the webserver\nserverPort: 9191\n```\n\n----------------------------------------\n\nTITLE: Loading Helm Completions in PowerShell Session\nDESCRIPTION: Example command to load Helm completions into the current PowerShell session. This pipes the completion script through Out-String and then evaluates it.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_powershell.md#2025-04-08_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> helm completion powershell | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Defining Service Overrides with Helm Common Chart\nDESCRIPTION: A template that demonstrates how to override Service resource properties when inheriting from a common helper chart. Includes commented examples for adding custom labels and configuring service ports.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/topics/library_charts.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.service\" (list . \"demo.service\") -}}\n{{- define \"demo.service\" -}}\n## Define overrides for your Service resource here, e.g.\n# metadata:\n#   labels:\n#     custom: label\n# spec:\n#   ports:\n#   - port: 8080\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: CircleCI Configuration for Chart Testing\nDESCRIPTION: CircleCI configuration file that sets up chart linting using the chart-testing Docker image\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2018-09-25-chart-testing-intro.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\njobs:\n  lint-charts:\n    docker:\n      - image: quay.io/helmpack/chart-testing:v1.1.0\n    steps:\n      - checkout\n      - run:\n          name: lint\n          command: |\n            chart_test.sh --config .testenv --no-install\nworkflows:\n  version: 2\n  lint:\n    jobs:\n      - lint-charts\n```\n\n----------------------------------------\n\nTITLE: Helm Dependency Update Command Options\nDESCRIPTION: Available flags specific to the dependency update command, including options for SSL certificates, repository authentication, and verification settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_dependency_update.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n  -h, --help                       help for update\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             keyring containing public keys (default \"~/.gnupg/pubring.gpg\")\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --skip-refresh               do not refresh the local repository cache\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the packages against signatures\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Bash Completion Command\nDESCRIPTION: Basic command syntax for generating bash completion with optional flags.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_bash.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm completion bash [flags]\n```\n\n----------------------------------------\n\nTITLE: Using custom paths with helm-2to3 cleanup in Bash\nDESCRIPTION: Shows how to use the cleanup command with custom Helm v2 home directory and Tiller namespace configurations.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2019-09-11-migrate-from-helm-v2-to-helm-v3.md#2025-04-08_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ export HELM_V2_HOME=$PWD/.helm2\n$ helm 2to3 cleanup --tiller-ns some_namespace\n```\n\n----------------------------------------\n\nTITLE: Helm Lint Inherited Options in Bash\nDESCRIPTION: This code block lists the options inherited from parent commands. These options provide additional configuration for Kubernetes API server connection, authentication, and Helm-specific settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_lint.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Git Commit Log Example\nDESCRIPTION: Example showing proper git commit log format with author and sign-off information that matches git config settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/CONTRIBUTING.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAuthor: Joe Smith <joe.smith@example.com>\nDate:   Thu Feb 2 11:41:15 2018 -0800\n\n    Update README\n\n    Signed-off-by: Joe Smith <joe.smith@example.com>\n```\n\n----------------------------------------\n\nTITLE: Loading Helm Completions in Current Zsh Session\nDESCRIPTION: This command loads Helm autocompletions for the current Zsh shell session only. The completions will be lost when the session ends.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_zsh.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource <(helm completion zsh)\n```\n\n----------------------------------------\n\nTITLE: Signing a Git Commit with DCO using the -s Flag\nDESCRIPTION: This command demonstrates how to sign a Git commit with the Developer Certificate of Origin (DCO) using the -s flag, which adds a 'Signed-off-by' line to the commit message.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2018-08-27-helm-switch-dco.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -s -m 'An example commit message'\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote for Helm Release\nDESCRIPTION: Command to add the upstream remote repository for Helm releases\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream git@github.com:helm/helm.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote for Helm Release\nDESCRIPTION: Command to add the upstream remote repository for Helm releases\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream git@github.com:helm/helm.git\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Get Notes Command in Bash\nDESCRIPTION: This command shows how to use the 'helm get notes' command to retrieve notes for a specific release. It includes the basic syntax and allows for specifying a particular revision.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_notes.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm get notes RELEASE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Helm Plugin Options\nDESCRIPTION: Comprehensive list of inherited options from parent commands, including Kubernetes configuration, authentication, and Helm repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_plugin.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies in Helm 2 requirements.yaml Format\nDESCRIPTION: Example of how chart dependencies were defined in Helm 2 using a separate requirements.yaml file. This shows the structure for declaring a MariaDB dependency with condition and tags.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/faq/changes_since_helm2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n- name: mariadb\n  version: 5.x.x\n  repository: https://charts.helm.sh/stable\n  condition: mariadb.enabled\n  tags:\n    - database\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Helm Release\nDESCRIPTION: Command to remove a Helm release from the cluster.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/using_helm.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm uninstall happy-panda\n```\n\n----------------------------------------\n\nTITLE: Helm Repo Index Command Options\nDESCRIPTION: Available flags specific to the helm repo index command, including options to help display, format as JSON, merge with existing index, and specify repository URL.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_repo_index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help           help for index\n      --json           output in JSON format\n      --merge string   merge the generated index into the given index\n      --url string     url of chart repository\n```\n\n----------------------------------------\n\nTITLE: Generating Random Numeric String in Go\nDESCRIPTION: This snippet demonstrates the usage of the randNumeric function to generate a cryptographically secure random string with three digits.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_32\n\nLANGUAGE: go\nCODE:\n```\nrandNumeric 3\n```\n\n----------------------------------------\n\nTITLE: Testing Local Helm Plugin\nDESCRIPTION: Commands for setting up and testing a local Helm plugin using symbolic links.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/plugins.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm env\n```\n\nLANGUAGE: bash\nCODE:\n```\nln -s ~/GitHub/helm-mapkubeapis ./helm-mapkubeapis\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Chart Values in YAML\nDESCRIPTION: This YAML snippet shows how to configure values for a WordPress Helm chart, including image registry, repository and tag settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  registry: docker.io\n  repository: bitnami/wordpress\n  tag: 5.6.0-debian-10-r35\n  [..]\n```\n\n----------------------------------------\n\nTITLE: Creating New Helm Chart\nDESCRIPTION: Command to create a new Helm chart structure.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/using_helm.md#2025-04-08_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ helm create deis-workflow\nCreating deis-workflow\n```\n\n----------------------------------------\n\nTITLE: Example Static Auto-completion for 2to3 Plugin\nDESCRIPTION: Shows a more complex completion.yaml file for the 2to3 plugin, which includes multiple sub-commands and their respective flags.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/plugins.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: 2to3\ncommands:\n- name: cleanup\n  flags:\n  - config-cleanup\n  - dry-run\n  - l\n  - label\n  - release-cleanup\n  - s\n  - release-storage\n  - tiller-cleanup\n  - t\n  - tiller-ns\n  - tiller-out-cluster\n- name: convert\n  flags:\n  - delete-v2-releases\n  - dry-run\n  - l\n  - label\n  - s\n  - release-storage\n  - release-versions-max\n  - t\n  - tiller-ns\n  - tiller-out-cluster\n- name: move\n  commands:\n  - name: config\n    flags:\n    - dry-run\n```\n\n----------------------------------------\n\nTITLE: Parent Chart Values for Dependency Control\nDESCRIPTION: YAML values file showing how to enable/disable dependencies using the conditions and tags defined in Chart.yaml.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/charts.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# parentchart/values.yaml\n\nsubchart1:\n  enabled: true\ntags:\n  front-end: false\n  back-end: true\n```\n\n----------------------------------------\n\nTITLE: Initializing Helm with a Specific Tiller Version\nDESCRIPTION: This command initializes Helm with a specific version of Tiller using the GitHub Container Registry, which is useful for accessing legacy versions after the removal of images from the old Google Container Registry.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/faq/troubleshooting.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhelm init --tiller-image ghcr.io/helm/tiller:v2.16.9\n```\n\n----------------------------------------\n\nTITLE: Empaquetando y firmando un chart con una clave de Keybase\nDESCRIPTION: Demuestra cómo empaquetar y firmar un chart de Helm utilizando una clave importada de Keybase.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/provenance.md#2025-04-08_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ helm package --sign --key technosophos --keyring ~/.gnupg/secring.gpg mychart\n```\n\n----------------------------------------\n\nTITLE: Packaging Helm Chart\nDESCRIPTION: Commands showing how to package and install a Helm chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/using_helm.md#2025-04-08_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ helm package deis-workflow\ndeis-workflow-0.1.0.tgz\n\n$ helm install deis-workflow ./deis-workflow-0.1.0.tgz\n...\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Version Command\nDESCRIPTION: Basic command syntax for running the helm version command with optional flags.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_version.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm version [flags]\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML Array in Helm Template\nDESCRIPTION: This example demonstrates how to use the fromYamlArray function to parse a YAML Array into a list that can be used in templates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Bob\n  age: 25\n- name: Ram\n  age: 16\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{- $people := .Files.Get \"yamls/people.yml\" | fromYamlArray }}\n{{- range $person := $people }}\ngreeting: |\n  Hi, my name is {{ $person.name }} and I am {{ $person.age }} years old.\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Helm Command Help (Console)\nDESCRIPTION: Shows the help text for a specific Helm command, providing information on usage, flags, and options. The example displays help for the 'get' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ja/docs/intro/quickstart.md#2025-04-08_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ helm get -h\n```\n\n----------------------------------------\n\nTITLE: Chart Testing Environment Configuration\nDESCRIPTION: Environment variable configuration file (.testenv) for chart testing setup, including remote settings, target branch, and chart directories\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2018-09-25-chart-testing-intro.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# The name of the Git remote\nREMOTE=k8s\n\n# The name of the Git target branch\nTARGET_BRANCH=master\n\n# Chart directories separated by a space\nCHART_DIRS=(\n    stable\n    incubator\n)\n\n# Charts that should be skipped\nEXCLUDED_CHARTS=(\n    common\n)\n\n# Additional chart repos to add (<name>=<url>), separated by a space\nCHART_REPOS=(\n    incubator=https://kubernetes-charts-incubator.storage.googleapis.com/\n)\n\nTIMEOUT=600\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple YAML Values with --set\nDESCRIPTION: This YAML snippet demonstrates the equivalent YAML structure when using --set to define multiple comma-separated name-value pairs for a Helm chart installation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\na: b\nc: d\n```\n\n----------------------------------------\n\nTITLE: Preventing Resource Uninstallation with Resource Policy Annotation in Helm\nDESCRIPTION: This snippet shows how to prevent Helm from uninstalling a specific resource during operations like helm uninstall, helm upgrade, or helm rollback. The helm.sh/resource-policy: keep annotation instructs Helm to skip deletion of the resource.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/howto/charts_tips_and_tricks.md#2025-04-08_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Secret\nmetadata:\n  annotations:\n    helm.sh/resource-policy: keep\n[...]\n```\n\n----------------------------------------\n\nTITLE: Importing Keybase PGP Key to Local GnuPG Keyring\nDESCRIPTION: Exports a Keybase PGP key and imports it into the local GnuPG keyring.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/provenance.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ keybase pgp export -s | gpg --import\n```\n\n----------------------------------------\n\nTITLE: Creating Release Candidate Tag in Shell\nDESCRIPTION: Commands to create and push a signed, annotated git tag for a Helm release candidate.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit tag --sign --annotate \"${RELEASE_CANDIDATE_NAME}\" --message \"Helm release ${RELEASE_CANDIDATE_NAME}\"\ngit push upstream $RELEASE_CANDIDATE_NAME\n```\n\n----------------------------------------\n\nTITLE: Helm Search Basic Options\nDESCRIPTION: Basic command line options for the helm search command, showing the help flag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_search.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for search\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in YAML Values\nDESCRIPTION: This YAML snippet shows how to represent a value containing a comma when using --set, by escaping the comma with a backslash in the equivalent YAML structure.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"value1,value2\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Release Candidate - MacOS\nDESCRIPTION: Command to download Helm release candidate binary for MacOS AMD64 architecture.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/community/release_checklist.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nwget https://get.helm.sh/helm-$RELEASE_CANDIDATE_NAME-darwin-amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Using 'upper' Function in Helm Templates\nDESCRIPTION: The 'upper' function converts the entire string to uppercase.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nupper \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm v3 Documentation Settings in YAML\nDESCRIPTION: YAML configuration block that defines the URL path, name, GitHub repository URL, and branch for Helm v3 documentation. This configuration is likely used for documentation build and deployment purposes.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/code/helm-v3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"helm/v3\"\nname: \"helm/v3\"\nrepoURL: \"https://github.com/helm/helm\"\nbranch: \"dev-v3\"\n---\n```\n\n----------------------------------------\n\nTITLE: ConfigMap Template with Structured Values\nDESCRIPTION: Example of accessing nested values in a Helm template using dot notation.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/values_files.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink }}\n  food: {{ .Values.favorite.food }}\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Helm Release with Custom Values\nDESCRIPTION: This console command shows how to upgrade an existing Helm release named 'happy-panda' using a custom values file 'panda.yaml' to modify the configuration.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ helm upgrade -f panda.yaml happy-panda bitnami/wordpress\n```\n\n----------------------------------------\n\nTITLE: Helm Fish Completion Options\nDESCRIPTION: Available flags specific to the Fish completion command\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_fish.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Installing a Helm Chart with Verification\nDESCRIPTION: Installs a Helm chart while verifying its integrity using the '--verify' flag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/provenance.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm install --generate-name --verify mychart-0.1.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Listing Secret Keys in GnuPG Keyring\nDESCRIPTION: Lists the secret keys stored in the local GnuPG keyring.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/topics/provenance.md#2025-04-08_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ gpg --list-secret-keys\n/Users/mattbutcher/.gnupg/secring.gpg\n-------------------------------------\nsec   2048R/1FC18762 2016-07-25\nuid                  technosophos (keybase.io/technosophos) <technosophos@keybase.io>\nssb   2048R/D125E546 2016-07-25\n```\n\n----------------------------------------\n\nTITLE: Running Chart Tests Locally on Mac\nDESCRIPTION: Command to execute chart testing on Docker for Mac using the chart-testing tool\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/blog/2018-09-25-chart-testing-intro.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ /path/to/chart-testing/examples/docker-for-mac/my_test.sh\n```\n\n----------------------------------------\n\nTITLE: Viewing Custom Values for a Helm Release\nDESCRIPTION: This console command and YAML output demonstrate how to view the custom values that have been applied to a Helm release named 'happy-panda'.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ helm get values happy-panda\nmariadb:\n  auth:\n    username: user1\n```\n\n----------------------------------------\n\nTITLE: AES Decryption in Go Templates\nDESCRIPTION: Illustrates the use of decryptAES function to decrypt a base64 encoded string that was encrypted with AES-256 CBC algorithm.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_73\n\nLANGUAGE: go\nCODE:\n```\n\"30tEfhuJSVRhpG97XCuWgz2okj7L8vQ1s6V9zVUPeDQ=\" | decryptAES \"secretkey\"\n```\n\n----------------------------------------\n\nTITLE: Listando claves secretas de GnuPG\nDESCRIPTION: Ilustra cómo listar las claves secretas disponibles en el anillo de claves de GnuPG local.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/provenance.md#2025-04-08_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ gpg --list-secret-keys\n/Users/mattbutcher/.gnupg/secring.gpg\n-------------------------------------\nsec   2048R/1FC18762 2016-07-25\nuid                  technosophos (keybase.io/technosophos) <technosophos@keybase.io>\nssb   2048R/D125E546 2016-07-25\n```\n\n----------------------------------------\n\nTITLE: Basic Helm List Command Usage\nDESCRIPTION: The basic syntax for using the helm list command to list releases in a namespace.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/helm/helm_list.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm list [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Helm Releases\nDESCRIPTION: This console command and output show how to list all installed Helm releases in the cluster, displaying their names, versions, and statuses.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ helm list\nNAME            VERSION UPDATED                         STATUS          CHART\ninky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0\n```\n\n----------------------------------------\n\nTITLE: Helm Get Inherited Options\nDESCRIPTION: Shows all inherited parent command options including Kubernetes cluster configuration, authentication, and Helm repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Upgrade Error Message\nDESCRIPTION: Example error message when attempting to upgrade a release with removed Kubernetes APIs\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/kubernetes_apis.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nError: UPGRADE FAILED: current release manifest contains removed kubernetes api(s)\nfor this kubernetes version and it is therefore unable to build the kubernetes\nobjects for performing the diff. error from kubernetes: unable to recognize \"\": \nno matches for kind \"Deployment\" in version \"apps/v1beta1\"\n```\n\n----------------------------------------\n\nTITLE: Listing All Helm Release History\nDESCRIPTION: This console command and output demonstrate how to list all Helm release history, including uninstalled releases, showing their names, versions, and statuses.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$  helm list --all\nNAME            VERSION UPDATED                         STATUS          CHART\nhappy-panda     2       Wed Sep 28 12:47:54 2016        UNINSTALLED     wordpress-10.4.5.6.0\ninky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0\nkindred-angelf  2       Tue Sep 27 16:16:10 2016        UNINSTALLED     alpine-0.1.0\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options that can be applied to all Helm commands, including Kubernetes cluster configuration, authentication, and repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_dependency_build.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Using 'untitle' Function in Helm Templates\nDESCRIPTION: The 'untitle' function removes title casing from a string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nuntitle \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Repositories\nDESCRIPTION: This console command and output show how to list configured Helm repositories, displaying their names and URLs.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/fr/docs/intro/using_helm.md#2025-04-08_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo list\nNAME            URL\nstable          https://charts.helm.sh/stable\nmumoshu         https://mumoshu.github.io/charts\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Dependencies in Chart.yaml\nDESCRIPTION: YAML configuration for specifying chart dependencies, including the name, version, and repository URL for required charts.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/es/docs/topics/charts.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: apache\n    version: 1.2.3\n    repository: https://example.com/charts\n  - name: mysql\n    version: 3.2.1\n    repository: https://another.example.com/charts\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Helm Release with Custom Values File\nDESCRIPTION: Shows how to upgrade an existing Helm release named 'happy-panda' using the MariaDB chart with a custom values file named 'panda.yaml'.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/intro/using_helm.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm upgrade -f panda.yaml happy-panda stable/mariadb\nFetched stable/mariadb-0.3.0.tgz to /Users/mattbutcher/Code/Go/src/helm.sh/helm/mariadb-0.3.0.tgz\nhappy-panda has been upgraded. Happy Helming!\nLast Deployed: Wed Sep 28 12:47:54 2016\nNamespace: default\nStatus: DEPLOYED\n...\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Functions in Helm Templates\nDESCRIPTION: Outlines various cryptographic and security functions available in Helm templates, including SHA1 and SHA256 hashing, Adler-32 checksum, htpasswd generation, password derivation, and AES encryption/decryption.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/function_list.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsha1sum \"Hello world!\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsha256sum \"Hello world!\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nadler32sum \"Hello world!\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhtpasswd \"myUser\" \"myPassword\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nderivePassword 1 \"long\" \"password\" \"user\" \"example.com\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nencryptAES \"secretkey\" \"plaintext\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"30tEfhuJSVRhpG97XCuWgz2okj7L8vQ1s6V9zVUPeDQ=\" | decryptAES \"secretkey\"\n```\n\n----------------------------------------\n\nTITLE: Listing Configured Helm Repositories\nDESCRIPTION: Shows how to view the list of chart repositories currently configured in Helm using the 'helm repo list' command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/intro/using_helm.md#2025-04-08_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo list\nNAME            URL\nstable          https://charts.helm.sh/stable\nmumoshu         https://mumoshu.github.io/charts\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Container Image in Helm Values\nDESCRIPTION: A snippet showing how to configure the WordPress image settings in a Helm values.yaml file, specifying the registry, repository, and tag.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/intro/using_helm.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  registry: docker.io\n  repository: bitnami/wordpress\n  tag: 5.6.0-debian-10-r35\n  [..]\n```\n\n----------------------------------------\n\nTITLE: Updating a Helm Release with New Values\nDESCRIPTION: Example showing how to upgrade an existing Helm release with new configuration values from a YAML file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/intro/using_helm.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ helm upgrade -f panda.yaml happy-panda bitnami/wordpress\n```\n\n----------------------------------------\n\nTITLE: Viewing Current Values of a Helm Release\nDESCRIPTION: Example demonstrating how to retrieve the current values that are applied to a Helm release using the helm get values command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/intro/using_helm.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm get values happy-panda\nmariadb:\n  auth:\n    username: user1\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies in Helm 3 Chart.yaml Format\nDESCRIPTION: Example of how chart dependencies are defined in Helm 3 by consolidating them directly in the Chart.yaml file. The structure remains the same but the location has changed.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/de/docs/faq/changes_since_helm2.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n- name: mariadb\n  version: 5.x.x\n  repository: https://charts.helm.sh/stable\n  condition: mariadb.enabled\n  tags:\n    - database\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment Overrides with Helm Common Chart\nDESCRIPTION: A template that shows how to define customizations for a Deployment resource while inheriting from a common helper chart. This demonstrates setting replicas based on values from the chart's values.yaml file.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/topics/library_charts.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  replicas: {{ .Values.replicaCount }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Default Liveness Probe Configuration in Drupal Chart\nDESCRIPTION: Default YAML configuration for a liveness probe in the Drupal Helm chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/values_files.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlivenessProbe:\n  httpGet:\n    path: /user/login\n    port: http\n  initialDelaySeconds: 120\n```\n\n----------------------------------------\n\nTITLE: Overriding Values and Nullifying Keys in Helm\nDESCRIPTION: A Helm command showing how to override default values and nullify specific keys when installing a chart.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/values_files.md#2025-04-08_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nhelm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null\n```\n\n----------------------------------------\n\nTITLE: Comparing Deep Equality in Go\nDESCRIPTION: Demonstrates the use of the deepEqual function to compare two lists for deep equality.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/function_list.md#2025-04-08_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ndeepEqual (list 1 2 3) (list 1 2 3)\n```\n\n----------------------------------------\n\nTITLE: Parsing URLs in Go\nDESCRIPTION: Demonstrates how to parse a URL string into a dictionary of URL components using the urlParse function.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/function_list.md#2025-04-08_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nurlParse \"http://admin:secret@server.com:8080/api?list=false#anchor\"\n```\n\n----------------------------------------\n\nTITLE: Joining URL Components in Go\nDESCRIPTION: Shows how to join URL components stored in a dictionary to form a complete URL string using the urlJoin function.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/function_list.md#2025-04-08_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nurlJoin (dict \"fragment\" \"fragment\" \"host\" \"host:80\" \"path\" \"/path\" \"query\" \"query\" \"scheme\" \"http\")\n```\n\n----------------------------------------\n\nTITLE: Rendered Output of Range Action in Helm Template\nDESCRIPTION: The final rendered YAML output showing how the range action creates a formatted list of pizza toppings in the ConfigMap.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: edgy-dragonfly-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: \"coffee\"\n  food: \"PIZZA\"\n  toppings: |-\n    - \"Mushrooms\"\n    - \"Cheese\"\n    - \"Peppers\"\n    - \"Onions\"\n```\n\n----------------------------------------\n\nTITLE: Using Range with Tuple Function in Helm Templates\nDESCRIPTION: Example of using the tuple function to create an inline list and iterate over it with range action, creating a list of t-shirt sizes.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  sizes: |-\n    {{- range tuple \"small\" \"medium\" \"large\" }}\n    - {{ . }}\n    {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Output of Range with Tuple in Helm Template\nDESCRIPTION: The rendered output showing how the range action combined with the tuple function produces a list of t-shirt sizes.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/ko/docs/chart_template_guide/control_structures.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  sizes: |-\n    - small\n    - medium\n    - large\n```\n\n----------------------------------------\n\nTITLE: Problematic Merged Helm Values with Multiple Probe Handlers\nDESCRIPTION: Example of problematic merged configuration that would result in multiple liveness probe handlers, which is not supported by Kubernetes and would cause deployment failure.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/chart_template_guide/values_files.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlivenessProbe:\n  httpGet:\n    path: /user/login\n    port: http\n  exec:\n    command:\n    - cat\n    - docroot/CHANGELOG.txt\n  initialDelaySeconds: 120\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Helm Release using the Helm SDK in Go\nDESCRIPTION: This example shows how to upgrade an existing release with a new chart version and values using the Helm SDK.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/sdk/examples.md#2025-04-08_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n{{< highlightexamplego file=\"sdkexamples/upgrade.go\" >}}\n```\n\n----------------------------------------\n\nTITLE: Using 'abbrev' Function in Helm Templates\nDESCRIPTION: The 'abbrev' function truncates a string with ellipses (...). It takes two parameters: max length and the string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_29\n\nLANGUAGE: go\nCODE:\n```\nabbrev 5 \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Using 'abbrevboth' Function in Helm Templates\nDESCRIPTION: The 'abbrevboth' function abbreviates both sides of a string. It takes three parameters: left offset, max length, and the string.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_30\n\nLANGUAGE: go\nCODE:\n```\nabbrevboth 5 10 \"1234 5678 9123\"\n```\n\n----------------------------------------\n\nTITLE: File Path Operations\nDESCRIPTION: Examples of file path manipulation functions.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/function_list.md#2025-04-08_snippet_94\n\nLANGUAGE: helm\nCODE:\n```\nbase \"foo/bar/baz\"\n```\n\nLANGUAGE: helm\nCODE:\n```\nclean \"foo/bar/../baz\"\n```\n\nLANGUAGE: helm\nCODE:\n```\next \"foo.bar\"\n```\n\n----------------------------------------\n\nTITLE: YAML Type Forcing with Node Tags\nDESCRIPTION: Demonstrates how to force specific types using YAML node tags.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/yaml_techniques.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncoffee: \"yes, please\"\nage: !!str 21\nport: !!int \"80\"\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment in Helm Template\nDESCRIPTION: Shows how to use variable assignment to solve scoping issues by storing Release.Name in a variable before the with block.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/variables.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- $relname := .Release.Name -}}\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  release: {{ $relname }}\n  {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Processing Files Line by Line in Helm Templates\nDESCRIPTION: A Helm template snippet that demonstrates how to access and process each line of a file using the .Files.Lines method and a range function.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_template_guide/accessing_files.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  some-file.txt: {{ range .Files.Lines \"foo/bar.txt\" }}\n    {{ . }}{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Installing Helm via dnf/yum on Fedora\nDESCRIPTION: This command installs Helm using the dnf package manager on Fedora systems. Helm is available in the official repository since Fedora 35.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/intro/install.md#2025-04-08_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nsudo dnf install helm\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Namespace Access in PostgreSQL\nDESCRIPTION: SQL command to create a Row Level Security (RLS) policy that grants a specific role access to releases in a particular namespace. This allows the role to read and write resources within that namespace when using Helm commands.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/permissions_sql_storage_backend.md#2025-04-08_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY <name> ON releases_v1 FOR ALL TO <role> USING (namespace = 'default');\n```\n\n----------------------------------------\n\nTITLE: Helm Search Repo Command Syntax\nDESCRIPTION: Basic command syntax for searching Helm repositories. Used to find charts by keyword with optional flags.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_search_repo.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm search repo [keyword] [flags]\n```\n\n----------------------------------------\n\nTITLE: Helm Search Repo Command Syntax\nDESCRIPTION: Basic command syntax for searching Helm repositories. Used to find charts by keyword with optional flags.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_search_repo.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm search repo [keyword] [flags]\n```\n\n----------------------------------------\n\nTITLE: Helm Get Hooks Command Options\nDESCRIPTION: Specific options available for the helm get hooks command, including help flag and revision selection.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_hooks.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help           help for hooks\n      --revision int   get the named release with revision\n```\n\n----------------------------------------\n\nTITLE: Helm Get Hooks Inherited Options\nDESCRIPTION: Global options inherited from parent commands, including Kubernetes configuration, authentication, and Helm repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_get_hooks.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Environment Inherited Options\nDESCRIPTION: Global options inherited from parent commands including authentication, API server configuration, and repository settings.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_env.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Helm Bash Completion Options\nDESCRIPTION: Available flags specific to the bash completion command.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_bash.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Helm Global Options\nDESCRIPTION: Inherited global configuration options available for all Helm commands including completion.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion_bash.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Helm Completion Command Options in Bash\nDESCRIPTION: This code snippet shows the available options for the 'helm completion' command. It includes the help option and inherited options from parent commands.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/helm/helm_completion.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for completion\n```\n\nLANGUAGE: bash\nCODE:\n```\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Debugging Helm Plugin Completion in Bash\nDESCRIPTION: This snippet demonstrates how to debug dynamic completion for Helm plugins using the __complete command. It shows examples of completing plugin arguments and options.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/topics/plugins.md#2025-04-08_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm __complete <pluginName> <arguments to complete>\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm __complete fullstatus --output js\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm __complete fullstatus -o json \"\"\n```\n\n----------------------------------------\n\nTITLE: Managing Helm Plugins\nDESCRIPTION: Commands for installing, listing, updating, and uninstalling Helm plugins.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/zh/docs/intro/CheatSheet.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm plugin install <path/url1>     # Install plugins\nhelm plugin list                    # View a list of all installed plugins\nhelm plugin update <plugin>         # Update plugins\nhelm plugin uninstall <plugin>      # Uninstall a plugin\n```\n\n----------------------------------------\n\nTITLE: YAML Comments Example\nDESCRIPTION: Example of using YAML comments in templates.\nSOURCE: https://github.com/helm/helm-www/blob/main/content/en/docs/chart_best_practices/templates.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# This is a comment\ntype: sprocket\n```\n\n----------------------------------------\n\nTITLE: Running Helm SDK Examples from Command Line in Bash\nDESCRIPTION: Command to execute the Helm Go SDK examples from the helm-www/sdkexamples directory. The command uses Go's run feature to execute all files in the current directory.\nSOURCE: https://github.com/helm/helm-www/blob/main/sdkexamples/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# cd helm-www/sdkexamples\n$ go run ./...\n```"
  }
]