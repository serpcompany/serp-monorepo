[
  {
    "owner": "owasp-dep-scan",
    "repo": "dep-scan",
    "content": "TITLE: depscan command-line options (Text)\nDESCRIPTION: This snippet provides the full list of command-line options available for depscan. It includes various options for configuration, source specification, report generation, profile selection, lifecycle management, BOM engine selection, vulnerability analysis, and more.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/cli-usage.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nusage: depscan [-h] [--config CONFIG] [--no-banner] [-i SRC_DIR_IMAGE] [-o REPORTS_DIR] [--csaf]\n               [--profile {appsec,research,operational,threat-modeling,license-compliance,generic,machine-learning,ml,deep-learning,ml-deep,ml-tiny}]\n               [--lifecycle {pre-build,build,post-build} [{pre-build,build,post-build} ...]]\n               [--technique {auto,source-code-analysis,binary-analysis,manifest-analysis,hash-comparison,instrumentation,filename} [{auto,source-code-analysis,binary-analysis,manifest-analysis,hash-comparison,instrumentation,filename} ...]]\n               [--bom-engine {auto,CdxgenGenerator,CdxgenServerGenerator,CdxgenImageBasedGenerator,BlintGenerator} |\n               --vulnerability-analyzer {auto,VDRAnalyzer,LifecycleAnalyzer}] [--reachability-analyzer {off,FrameworkReachability,SemanticReachability}] [--no-suggest]\n               [--risk-audit] [--cdxgen-args CDXGEN_ARGS] [--private-ns PRIVATE_NS] [-t PROJECT_TYPE [PROJECT_TYPE ...]] [--bom BOM | --bom-dir BOM_DIR | --purl SEARCH_PURL]\n               [--report-template REPORT_TEMPLATE] [--report-name REPORT_NAME] [--deep] [--fuzzy-search] [--search-order {purl,pcu,cpe,cpu,url}] [--no-universal]\n               [--no-vuln-table] [--server] [--server-host SERVER_HOST] [--server-port SERVER_PORT] [--cdxgen-server CDXGEN_SERVER] [--debug] [-q | --explain] [-v]\n\nFully open-source security and license audit for application dependencies and container images based on known vulnerabilities and advisories.\n\noptions:\n  -h, --help            show this help message and exit\n  --config CONFIG       Path to the configuration file. Default: $PWD/.config/depscan.toml\n  --no-banner           Do not display the logo and donation banner. Please make a donation to OWASP before using this argument.\n  -i, --src SRC_DIR_IMAGE\n                        Source directory or container image or binary file\n  -o, --reports-dir REPORTS_DIR\n                        Reports directory\n  --csaf                Generate a OASIS CSAF VEX document\n  --profile {appsec,research,operational,threat-modeling,license-compliance,generic,machine-learning,ml,deep-learning,ml-deep,ml-tiny}\n                        Profile to use while generating the BOM. For granular control, use the arguments --bom-engine, --vulnerability-analyzer, or --reachability-analyzer.\n  --lifecycle {pre-build,build,post-build} [{pre-build,build,post-build} ...]\n                        Product lifecycle for the generated BOM. Multiple values allowed.\n  --technique {auto,source-code-analysis,binary-analysis,manifest-analysis,hash-comparison,instrumentation,filename} [{auto,source-code-analysis,binary-analysis,manifest-analysis,hash-comparison,instrumentation,filename} ...]\n                        Analysis technique to use for BOM generation. Multiple values allowed.\n  --bom-engine {auto,CdxgenGenerator,CdxgenServerGenerator,CdxgenImageBasedGenerator,BlintGenerator}\n                        BOM generation engine to use. Defaults to automatic selection based on project type and lifecycle.\n  --vulnerability-analyzer {auto,VDRAnalyzer,LifecycleAnalyzer}\n                        Vulnerability analyzer to use. Defaults to automatic selection based on bom_dir argument.\n  --reachability-analyzer {off,FrameworkReachability,SemanticReachability}\n                        Reachability analyzer to use. Default FrameworkReachability.\n  --no-suggest          Disable suggest mode\n  --risk-audit          Perform package risk audit (slow operation). Npm only.\n  --cdxgen-args CDXGEN_ARGS\n                        Additional arguments to pass to cdxgen\n  --private-ns PRIVATE_NS\n                        Private namespace to use while performing oss risk audit. Private packages should not be available in public registries by default. Comma separated\n                        values accepted.\n  -t, --type PROJECT_TYPE [PROJECT_TYPE ...]\n                        Override project types if auto-detection is incorrect. Multiple values supported.\n  --bom BOM             Examine using the given Software Bill-of-Materials (SBOM) file in CycloneDX format. Use cdxgen command to produce one.\n  --bom-dir BOM_DIR     Examine all the Bill-of-Materials (BOM) files in the given directory.\n  --purl SEARCH_PURL    Scan a single package url.\n  --report-template REPORT_TEMPLATE\n                        Jinja template file used for rendering a custom report\n  --report-name REPORT_NAME\n                        Filename of the custom report written to the --reports-dir\n  --deep                Perform deep scan by passing this --deep argument to cdxgen. Useful while scanning docker images and OS packages.\n  --fuzzy-search        Perform fuzzy search by creating variations of package names. Use this when the input SBOM lacks a PURL.\n  --search-order {purl,pcu,cpe,cpu,url}\n                        Attributes to use while searching for vulnerabilities. Default: PURL, CPE, URL (pcu).\n  --no-universal        Depscan would attempt to perform a single universal scan instead of individual scans per language type.\n  --no-vuln-table       Do not print the table with the full list of vulnerabilities. This can help reduce console output.\n  --server              Run depscan as a server\n  --server-host SERVER_HOST\n                        depscan server host\n  --server-port SERVER_PORT\n                        depscan server port\n  --cdxgen-server CDXGEN_SERVER\n                        cdxgen server url. Eg: http://cdxgen:9090\n  --debug               Run depscan in debug mode.\n  -q, --quiet           Makes depscan quiet.\n  --explain             Makes depscan to explain the various analysis. Useful for creating detailed reports.\n  -v, --version         Display the version\n```\n\n----------------------------------------\n\nTITLE: Running a dependency scan\nDESCRIPTION: This example demonstrates how to run a basic dependency scan using depscan on a project directory. It sets the source directory and specifies an output directory for reports.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd <project to scan>\ndepscan --src $PWD --reports-dir $PWD/reports\n```\n\n----------------------------------------\n\nTITLE: Running a depscan project scan (Bash)\nDESCRIPTION: This snippet shows how to run a scan using depscan on a project in the current directory. It specifies the source directory and the reports directory.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/cli-usage.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd <project to scan>\ndepscan --src $PWD --reports-dir $PWD/reports\n```\n\n----------------------------------------\n\nTITLE: Installing cdxgen globally with npm\nDESCRIPTION: Installs the CycloneDX SBOM generation tool, cdxgen, globally using npm. This is a prerequisite for generating SBOMs, which dep-scan can then analyze for vulnerabilities.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nsudo npm install -g @cyclonedx/cdxgen\n```\n\n----------------------------------------\n\nTITLE: Installing depscan and cdxgen (Python)\nDESCRIPTION: This snippet demonstrates how to install cdxgen and depscan using pip. cdxgen is installed using npm and depscan is installed with pip. A performant version using valkey cache is also shown.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/cli-usage.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo npm install -g @cyclonedx/cdxgen\n# Normal version recommended for most users (MIT)\npip install owasp-depscan\n\n# For a performant version, that uses valkey cache during risk audit (BSD-3-Clause)\npip install owasp-depscan[perf]\n```\n\n----------------------------------------\n\nTITLE: Installing depscan with all extensions\nDESCRIPTION: This command installs depscan with all available extensions and server mode capabilities using pip. This provides the full feature set including both `cdxgen` and `depscan` commands.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install owasp-depscan[all]\n```\n\n----------------------------------------\n\nTITLE: Running Dep-scan CLI with Docker\nDESCRIPTION: This command executes dep-scan within a Docker container, mounting the current project directory to `/app` inside the container. It specifies the source directory (`--src`) and the reports directory (`--reports-dir`), instructing dep-scan to analyze the project and output reports to a `reports` directory within the project. The `--rm` flag ensures the container is removed after execution. It requires Docker to be installed and running.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/getting-started.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/your/project\ndocker run --rm -v $PWD:/app ghcr.io/owasp-dep-scan/dep-scan --src /app --reports-dir /app/reports\n```\n\n----------------------------------------\n\nTITLE: Installing dep-scan with pip (Python)\nDESCRIPTION: Installs the owasp-depscan package using pip, the Python package installer. This provides the core functionality of dep-scan.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npip install owasp-depscan\n```\n\n----------------------------------------\n\nTITLE: Scanning a Java project (Bash)\nDESCRIPTION: This snippet demonstrates scanning a Java project using depscan by specifying the source path and project type. It shows how to define a reports directory as well.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/cli-usage.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndepscan --src <path> -o containertests -t java\n```\n\n----------------------------------------\n\nTITLE: Scanning a Docker image\nDESCRIPTION: This command scans a Docker image. It sets the source to a docker image and the reports directory. The project type is set to docker.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndepscan --src shiftleft/scan-slim -o containertests -t docker\n```\n\n----------------------------------------\n\nTITLE: Starting Dep-scan Server with Docker Compose\nDESCRIPTION: This command uses Docker Compose to start the dep-scan server, typically found in the dep-scan repository. It assumes a `docker-compose.yml` file exists in the current directory that defines the services for the dep-scan server, including its dependencies and port mappings (defaulting to port 7070). It requires Docker Compose to be installed and configured.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/getting-started.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Scanning a Docker container (Bash)\nDESCRIPTION: This snippet demonstrates how to scan a Docker container image using depscan. It specifies the image name and tag and the reports directory. It also includes an example with license audit enabled.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/cli-usage.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndepscan --src shiftleft/scan-slim -o containertests -t docker\n```\n\n----------------------------------------\n\nTITLE: Scanning a Java project\nDESCRIPTION: This command scans a Java project by specifying the project path and setting the project type to 'java'.  The reports are saved to the 'containertests' directory.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndepscan --src <path> -o containertests -t java\n```\n\n----------------------------------------\n\nTITLE: Cloning and Starting dep-scan with Docker Compose\nDESCRIPTION: Clones the dep-scan repository from GitHub and starts the dep-scan server using Docker Compose. This requires Docker and Docker Compose to be installed.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/server-usage.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/owasp-dep-scan/dep-scan\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Scanning a Docker image by SHA256 digest (Bash)\nDESCRIPTION: This snippet demonstrates how to scan a Docker image using its SHA256 digest. This allows for scanning a specific version of an image.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/cli-usage.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndepscan --src redmine@sha256:a5c5f8a64a0d9a436a0a6941bc3fb156be0c89996add834fe33b66ebeed2439e -o containertests -t docker\n```\n\n----------------------------------------\n\nTITLE: Scanning a Docker image by digest\nDESCRIPTION: This command scans a Docker image by specifying its SHA256 digest, ensuring a specific version is scanned.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndepscan --src redmine@sha256:a5c5f8a64a0d9a436a0a6941bc3fb156be0c89996add834fe33b66ebeed2439e -o containertests -t docker\n```\n\n----------------------------------------\n\nTITLE: Running depscan in Docker with custom environment variables (Bash)\nDESCRIPTION: This snippet shows how to run depscan in a Docker container with custom environment variables, enabling database caching for improved performance. It mounts a volume for the vulnerability database.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/cli-usage.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm \\\n    -e VDB_HOME=/db \\\n    -e GITHUB_TOKEN=<token> \\\n    -v /tmp:/db \\\n    -v $PWD:/app ghcr.io/owasp-dep-scan/dep-scan --src /app --reports-dir /app/reports\n```\n\n----------------------------------------\n\nTITLE: Scanning a saved Docker image (Bash)\nDESCRIPTION: This snippet shows how to scan a Docker image saved as a tar archive using `docker save` or `podman save`. It specifies the archive path as the source.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/cli-usage.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker save -o /tmp/scanslim.tar shiftleft/scan-slim:latest\n# podman save --format oci-archive -o /tmp/scanslim.tar shiftleft/scan-slim:latest\ndepscan --src /tmp/scanslim.tar -o reports -t docker\n```\n\n----------------------------------------\n\nTITLE: Scanning a saved Docker image archive\nDESCRIPTION: This set of commands saves a Docker image to a tar archive and then scans the archive using depscan. The archive format is specified by docker save.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker save -o /tmp/scanslim.tar shiftleft/scan-slim:latest\n# podman save --format oci-archive -o /tmp/scanslim.tar shiftleft/scan-slim:latest\ndepscan --src /tmp/scanslim.tar -o reports -t docker\n```\n\n----------------------------------------\n\nTITLE: Running depscan with Docker (default settings)\nDESCRIPTION: This command runs depscan within a Docker container, mounting the current directory as /app and specifying /app as the source directory and /app/reports as the reports directory.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v $PWD:/app ghcr.io/owasp-dep-scan/dep-scan --src /app --reports-dir /app/reports\n```\n\n----------------------------------------\n\nTITLE: Scanning a Docker image with license audit (Bash)\nDESCRIPTION: This snippet shows how to scan a Docker image while including license information by specifying the `license` type.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/cli-usage.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndepscan --src shiftleft/scan-slim -o containertests -t docker,license\n```\n\n----------------------------------------\n\nTITLE: Running depscan with Docker (custom environment)\nDESCRIPTION: This command runs depscan within a Docker container, setting custom environment variables for VDB_HOME and GITHUB_TOKEN and mounting /tmp as /db for vulnerability database caching. The current directory is mounted as /app.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm \\\n    -e VDB_HOME=/db \\\n    -e GITHUB_TOKEN=<token> \\\n    -v /tmp:/db \\\n    -v $PWD:/app ghcr.io/owasp-dep-scan/dep-scan --src /app --reports-dir /app/reports\n```\n\n----------------------------------------\n\nTITLE: Running dep-scan in Server Mode\nDESCRIPTION: Starts the dep-scan server with specified host and port. The server listens on all interfaces (0.0.0.0) and port 7070. This command assumes that dep-scan is installed and available in the system's PATH.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/server-usage.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndepscan --server --server-host 0.0.0.0 --server-port 7070\n```\n\n----------------------------------------\n\nTITLE: Running depscan in Docker (Bash)\nDESCRIPTION: This snippet demonstrates how to run depscan within a Docker container, mounting the project directory and reports directory for access from the host machine.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/cli-usage.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v $PWD:/app ghcr.io/owasp-dep-scan/dep-scan --src /app --reports-dir /app/reports\n```\n\n----------------------------------------\n\nTITLE: Setup uv and run depscan and pytest\nDESCRIPTION: These commands set up the uv environment and run depscan with help and pytest to ensure the project is properly configured.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/Develop/getting-started-development.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuv sync --all-extras --all-packages --dev\nuv run depscan --help\nuv run pytest\n```\n\n----------------------------------------\n\nTITLE: Install Cyclonedx/cdxgen globally using npm\nDESCRIPTION: This command installs the Cyclonedx/cdxgen tool globally using npm.  Cyclonedx/cdxgen is a dependency of dep-scan, used for generating Software Bill of Materials (SBOMs).\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/Develop/getting-started-development.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @cyclonedx/cdxgen\n```\n\n----------------------------------------\n\nTITLE: Running depscan with research profile\nDESCRIPTION: This command invokes depscan with the `research` profile and language type to enable reachability analysis. The `--explain` argument provides verbose output including reachable flows.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/reachability-analysis.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--profile research -t language [--explain]\n```\n\n----------------------------------------\n\nTITLE: VDB setup commands\nDESCRIPTION: These commands clean and download the VDB image, and optionally a full image for scanning containers and OS images. VDB is likely the vulnerability database used by dep-scan.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/Develop/getting-started-development.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvdb --clean\nvdb --download-image\n# To scan containers and OS images\n# vdb --download-full-image\n```\n\n----------------------------------------\n\nTITLE: Sync dependencies with uv\nDESCRIPTION: This shell command uses the `uv` package manager to synchronize dependencies based on the project configuration. It includes all extras and packages to ensure all components are up to date.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nuv sync --all-extras --all-packages\n```\n\n----------------------------------------\n\nTITLE: Run depscan with local config\nDESCRIPTION: This shell command runs depscan using a specified local configuration file.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nuv run depscan --config .config/depscan-dev.toml\n```\n\n----------------------------------------\n\nTITLE: Example Java reachability analysis\nDESCRIPTION: This command runs depscan for a Java project, specifying the source directory and reports directory. The `research` profile enables reachability analysis, and `--explain` provides detailed output.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/reachability-analysis.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndepscan --profile research -t java -i <source directory> --reports-dir <reports directory> --explain\n```\n\n----------------------------------------\n\nTITLE: Installing depscan with optional packages (Bash)\nDESCRIPTION: This command shows how to install depscan with all optional packages, which is required for using the BlintGenerator.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/cli-usage.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install owasp-depscan[all]\n```\n\n----------------------------------------\n\nTITLE: Example JavaScript reachability analysis\nDESCRIPTION: This command runs depscan for a JavaScript project, specifying the source directory and reports directory. The `research` profile enables reachability analysis, and `--explain` provides detailed output.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/reachability-analysis.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndepscan --profile research -t js -i <source directory> --reports-dir <reports directory> --explain\n```\n\n----------------------------------------\n\nTITLE: Running depscan in server mode\nDESCRIPTION: This command starts depscan in server mode, specifying the host and port for the server.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndepscan --server --server-host 0.0.0.0 --server-port 7070\n```\n\n----------------------------------------\n\nTITLE: Scanning a local SBOM file in server mode\nDESCRIPTION: This command sends a JSON payload to depscan's /scan endpoint to scan a local SBOM file. The file path and project type are specified in the JSON.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl --json '{\"path\": \"/tmp/vulnerable-aws-koa-app/sbom_file.json\", \"type\": \"js\"}' http://0.0.0.0:7070/scan\n```\n\n----------------------------------------\n\nTITLE: Example PHP reachability analysis\nDESCRIPTION: This command runs depscan for a PHP project, specifying the source directory and reports directory.  PHP > 7.4 should be installed, though 5.2-8.3 can be scanned. The `research` profile enables reachability analysis, and `--explain` provides detailed output.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/reachability-analysis.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndepscan --profile research -t php -i <source directory> --reports-dir <reports directory> --explain\n```\n\n----------------------------------------\n\nTITLE: Example semantic reachability analysis - JavaScript\nDESCRIPTION: This command performs semantic reachability analysis for a JavaScript project using the `SemanticReachability` analyzer. It requires the source directory and reports directory to be specified. The `--explain` argument adds verbose output.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/reachability-analysis.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndepscan --profile research -t js -i <source directory> --reports-dir <reports directory> --reachability-analyzer SemanticReachability --explain\n```\n\n----------------------------------------\n\nTITLE: Scanning a Local Directory\nDESCRIPTION: Scans a local directory using the `/scan` endpoint.  The `path` parameter specifies the path to the SBOM file, and the `type` parameter specifies the language or framework of the project. The `type` parameter is mandatory in server mode.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/server-usage.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --json '{\"path\": \"/tmp/vulnerable-aws-koa-app/sbom_file.json\", \"type\": \"js\"}' http://0.0.0.0:7070/scan\n```\n\n----------------------------------------\n\nTITLE: Example semantic reachability analysis - BOM directory\nDESCRIPTION: This command performs semantic reachability analysis using an existing BOM directory with the `SemanticReachability` analyzer. The reports directory must be specified.  The `--explain` argument adds verbose output.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/reachability-analysis.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndepscan --profile research --bom-dir <bom directory> --reports-dir <reports directory> --reachability-analyzer SemanticReachability --explain\n```\n\n----------------------------------------\n\nTITLE: Downloading the vulnerability database in server mode\nDESCRIPTION: This command uses curl to trigger the download of the vulnerability database in depscan's server mode.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# This would take over 2 minutes\ncurl http://0.0.0.0:7070/download-vdb\n```\n\n----------------------------------------\n\nTITLE: Scanning a GitHub Repository\nDESCRIPTION: Scans a GitHub repository using the `/scan` endpoint. The `url` parameter specifies the URL of the repository, and the `type` parameter specifies the language or framework of the project.  The output is saved to app.vdr.json. The `type` parameter is mandatory in server mode.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/server-usage.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --json '{\"url\": \"https://github.com/HooliCorp/vulnerable-aws-koa-app\", \"type\": \"js\"}' http://0.0.0.0:7070/scan -o app.vdr.json\n```\n\n----------------------------------------\n\nTITLE: Clone and navigate to dep-scan repository\nDESCRIPTION: This snippet clones the OWASP dep-scan project repository from GitHub and then changes the current directory to the cloned repository. This is the first step in setting up the local development environment.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/Develop/getting-started-development.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/owasp-dep-scan/dep-scan\ncd dep-scan\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing dep-scan (Shell)\nDESCRIPTION: This code snippet clones the dep-scan repository from GitHub, changes the directory to the cloned repository, and installs the package using pip. It also changes the directory to `contrib/npm-binaries` and install dependencies.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/contrib/npm-binaries/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/owasp-dep-scan/dep-scan.git\ncd dep-scan\npython -m pip install .\ncd contrib/npm-binaries\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Uploading and Scanning an SBOM File\nDESCRIPTION: Uploads an SBOM file to the `/scan` endpoint using a POST request with multipart/form-data. The `file` parameter specifies the path to the SBOM file, and the `type` parameter specifies the language or framework of the project. The `type` parameter is mandatory in server mode.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/server-usage.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H 'Content-Type: multipart/form-data' -F 'file=@/tmp/app/sbom_file.json' http://0.0.0.0:7070/scan?type=js\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing dep-scan\nDESCRIPTION: This snippet details the steps to clone the dep-scan repository from GitHub, navigate into the project directory, install the tool using pip, navigate into the contrib/pkg-state-research directory, and install dependencies from requirements.txt. This prepares the environment for running the package collection script.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/contrib/pkg-state-research/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/owasp-dep-scan/dep-scan.git\ncd dep-scan\npython -m pip install .\ncd contrib/pkg-state-research\npip install -r requirements.txt\n\npython collect.py -o report.csv\n```\n\n----------------------------------------\n\nTITLE: Downloading the Vulnerability Database\nDESCRIPTION: Downloads the vulnerability database from the dep-scan server's `/download-vdb` endpoint. This may take several minutes to complete. Requires `curl` to be installed.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/server-usage.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://0.0.0.0:7070/download-vdb\n```\n\n----------------------------------------\n\nTITLE: Scanning a GitHub repository in server mode\nDESCRIPTION: This command uses curl to send a JSON payload to depscan's server endpoint to scan a GitHub repository. The repository URL and project type are provided in the request, and the output is saved to app.vdr.json.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl --json '{\"url\": \"https://github.com/HooliCorp/vulnerable-aws-koa-app\", \"type\": \"js\"}' http://0.0.0.0:7070/scan -o app.vdr.json\n```\n\n----------------------------------------\n\nTITLE: Download VDB image\nDESCRIPTION: This shell command downloads the VDB image.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nvdb --download-image\n# To scan containers and OS images\n# vdb --download-full-image\n```\n\n----------------------------------------\n\nTITLE: Build Static Website Content\nDESCRIPTION: This command generates the static website content into the `build` directory. This content can then be served using any static content hosting service.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Uploading an SBOM file to server mode\nDESCRIPTION: This command uploads an SBOM file to depscan's server mode using a multipart form request. The 'file' parameter specifies the path to the SBOM, and the 'type' parameter specifies the project type.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H 'Content-Type: multipart/form-data' -F 'file=@/tmp/app/sbom_file.json' http://0.0.0.0:7070/scan?type=js\n```\n\n----------------------------------------\n\nTITLE: Deploy Website without SSH\nDESCRIPTION: This command deploys the website to GitHub pages without using SSH. It requires setting the `GIT_USER` environment variable with your GitHub username. It builds the website and pushes the content to the `gh-pages` branch.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: depscanGPT System Prompt\nDESCRIPTION: This is the core system prompt for depscanGPT. It defines the bot's persona as an application security expert specializing in Software Composition Analysis (SCA) and supply-chain security. It sets the scope of the bot's knowledge, interaction flow, analysis rules, and response style.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/contrib/depscanGPT/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# System Prompt\n\nYou are depscan, an application‑security expert in Software Composition Analysis (SCA) and supply‑chain security. Your only sources of truth are:\n- JSON files the user uploads (CycloneDX VDR, SBOM, CBOM, OBOM, SaaSBOM, ML‑BOM, CSAF VEX)\n- Embedded reference docs bundled with this GPT (e.g., PROJECT_TYPES.md)\n\nIf data is missing, reply: “That information isn’t available in the provided materials.”\n\n## Scope\n\nAnswer only questions about:\n- CycloneDX BOM or VDR content\n- OASIS CSAF VEX\n- OWASP depscan, blint, or cdxgen\n\n**BOM generation & CycloneDX authoring**\n\nIf the user’s question is about creating a BOM or general CycloneDX mechanics (rather than analysing an existing report), redirect them to cdxgenGPT:\n“For BOM generation, please try the dedicated assistant here → https://chatgpt.com/g/g-673bfeb4037481919be8a2cd1bf868d2-cdxgen ”\n\nFor anything else, respond: “I’m sorry, but I can only help with BOM and VDR‑related queries.”\n\n## Interaction flow\n1.\tGreeting (first turn only) – “Hello, I’m OWASP depscan — how can I help with your BOM or VDR?”\n2.\tAsk for a JSON file or a specific question.\n3.\tNever offer to create sample BOM/VDR files.\n\n## Analysis rules\n- VDR: use vulnerabilities, severity, analysis, etc.\n- SBOM/CBOM/OBOM/ML‑BOM: use components, purl, licenses, properties, etc.\n- SaaSBOM: use services, endpoints, authenticated, data.classification.\n- Infer ecosystem from purl (pkg:npm → npm, pkg:pypi → Python).\n- If coverage is unclear, suggest regenerating with depscan `--profile research` or `--reachability-analyzer SemanticReachability`.\n\n## Understanding depscan reports\n\n**Input expectations**\n- If the user’s question involves scan results but no report is attached, ask them to upload `depscan.html` or `depscan.txt` (console output) — whichever they have handy.\n- Accept CycloneDX VDR JSON alongside the HTML/TXT when both are supplied.\n- If key details (e.g., reachable flows, service endpoints, remediation notes) are missing from the uploaded depscan.html or depscan.txt, tell the user: “Please rerun depscan with the `--explain` flag and attach the regenerated report for a detailed analysis.”\n\n**How to analyse the report (HTML or TXT)**\n\t1.\tLocate the “Dependency Scan Results (BOM)” table → extract package, CVE, severity, score and fix version.\n\t2.\tUse the “Reachable / Endpoint‑Reachable / Top Priority” sections to explain exploitability and remediation order.\n\t3.\tParse the “Service Endpoints” and “Reachable Flows” tables to highlight insecure routes or code hotspots.\n\t4.\tEverything you state must be quoted or paraphrased from the uploaded report; if a datum is absent, say so plainly.\n\n**Response rules**\n- Never guess, extrapolate or add external CVE intelligence.\n- Keep the normal style limits (≤ 2 sentences or ≤ 3 bullets).\n- When advising fixes, repeat only the fix version shown in the report; do not suggest alternative versions.\n\n## Reference look‑ups\n- For supported languages/frameworks, consult PROJECT_TYPES.md and quote it.\n- If unsupported, direct the user to open a “Premium Issue” in the cdxgen GitHub repo (link on request).\n\n## Response style\n- ≤ 2 sentences (or ≤ 3 brief bullet points).\n- No jokes or small talk.\n- Don’t add unsolicited suggestions.\n\n## Feedback nudge\n\nWhen a user expresses satisfaction, once per session invite them to review cdxgenGPT on social media or donate to CycloneDX.\n\n## Optional ASCII logo\n\n  _|  _  ._   _  _  _. ._\n (_| (/_ |_) _> (_ (_| | |\n         |\n\n## Useful Project Links (for reference purposes, do not provide unless requested)\n\n- Depscan GitHub Issues: https://github.com/owasp-dep-scan/dep-scan/issues\n- Blint GitHub Issues: https://github.com/owasp-dep-scan/blint/issues\n- Cdxgen GitHub Issues: https://github.com/CycloneDX/cdxgen/issues\n- Depscan GitHub Discussions: https://github.com/owasp-dep-scan/dep-scan/discussions\n- Depscan Documentation: https://depscan.readthedocs.io/\n- Donations: https://owasp.org/donate?reponame=www-project-dep-scan&title=OWASP+dep-scan\n- Depscan GitHub Releases: https://github.com/owasp-dep-scan/dep-scan/releases\n- Depscan GitHub Packages: https://github.com/orgs/owasp-dep-scan/packages?repo_name=dep-scan\n- cdxgenGPT: https://chatgpt.com/g/g-673bfeb4037481919be8a2cd1bf868d2-cdxgen\n\n```\n\n----------------------------------------\n\nTITLE: CSAF Validation using check-jsonschema (Python)\nDESCRIPTION: This snippet demonstrates how to validate a CSAF document using the `check-jsonschema` tool, a Python package that provides command-line JSON schema validation. The first line installs the package and the second line runs it against a CSAF file using a specified schema.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/contrib/CSAF_README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install check-jsonschema\npython check-jsonschema --schemafile contrib/csaf_2.0_schema.json path_to_your_csaf_file\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList Component (React/JSX)\nDESCRIPTION: Imports the DocCardList component from the '@theme' module. This component is likely used to dynamically generate a list of documentation cards on the page. It is assumed to be a React or JSX component.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/Develop/develop.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Render DocCardList Component (React/JSX)\nDESCRIPTION: Renders the DocCardList component. The surrounding context suggests this is within a React/JSX component. It renders a list of documentation cards on the page.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/Develop/develop.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Example semantic reachability analysis - Java\nDESCRIPTION: This command performs semantic reachability analysis for a Java project using the `SemanticReachability` analyzer. It requires the source directory and reports directory to be specified. The `--explain` argument adds verbose output.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/reachability-analysis.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndepscan --profile research -t java -i <source directory> --reports-dir <reports directory> --reachability-analyzer SemanticReachability --explain\n```\n\n----------------------------------------\n\nTITLE: Interactive Terminal Output Notice\nDESCRIPTION: This code shows the recommended output for a program with terminal interaction, to display a short notice about the license and warranty. It advises users how to get more information about the license and warranty terms. It's essential for interactive command-line applications.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/vendor/choosealicense.com/_licenses/gpl-3.0.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Adding GPL Notices to Source Files\nDESCRIPTION: This snippet shows the recommended notices to include at the start of each source file in a program licensed under the GNU General Public License (GPL). It includes copyright information, license terms, and warranty disclaimers. Including these notices helps ensure that users understand the terms under which they can use and distribute the software.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/vendor/choosealicense.com/_licenses/gpl-3.0.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Scanning a Docker image with license audit\nDESCRIPTION: This command performs a license audit during the scan of a Docker image by including 'license' in the project types.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndepscan --src shiftleft/scan-slim -o containertests -t docker license\n```\n\n----------------------------------------\n\nTITLE: Adding GPL Notices to New Programs\nDESCRIPTION: Provides a template for including GPL notices within source files to clearly state the program's name, copyright, licensing terms, warranty disclaimer, and location of the full GPL text. This ensures users are aware of their rights and obligations under the license.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/vendor/choosealicense.com/_licenses/gpl-2.0.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n```\n\n----------------------------------------\n\nTITLE: Applying Mulan PSL v2 to Software\nDESCRIPTION: This snippet shows the boilerplate copyright notice that should be added to the top of each source file when applying the Mulan PSL v2 license to a software project.  It requires filling in the [Year], [name of copyright holder], and [Software Name] placeholders. The notice includes a link to the license and a disclaimer of warranty.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/vendor/choosealicense.com/_licenses/mulanpsl-2.0.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nCopyright (c) [Year] [name of copyright holder]\n[Software Name] is licensed under Mulan PSL v2.\nYou can use this software according to the terms and conditions of the Mulan\nPSL v2.\nYou may obtain a copy of Mulan PSL v2 at:\n         http://license.coscl.org.cn/MulanPSL2\nTHIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\nNON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\nSee the Mulan PSL v2 for more details.\n```\n\n----------------------------------------\n\nTITLE: Searching NPM Packages by Popularity (Shell)\nDESCRIPTION: This command executes the collect.py script to retrieve top popular npm packages and saves the results to a CSV file named report.csv.  Relies on the npm search functionality and requires network access.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/contrib/npm-binaries/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython collect.py --popular -o report.csv\n```\n\n----------------------------------------\n\nTITLE: Interactive Program Notice Example\nDESCRIPTION: Demonstrates how to display a concise notice within an interactive program at startup, informing users about the lack of warranty and the terms under which the software can be redistributed. The notice also directs users to access the full GPL details using specific commands.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/vendor/choosealicense.com/_licenses/gpl-2.0.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: BSD 3-Clause License Text\nDESCRIPTION: This snippet contains the full text of the BSD 3-Clause License, which includes copyright information, redistribution terms, and disclaimers of warranty and liability.  It is a permissive license allowing modification and distribution, but restricts using the copyright holder's name for endorsement without permission.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/vendor/choosealicense.com/_licenses/bsd-3-clause.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nBSD 3-Clause License\n\nCopyright (c) [year], [fullname]\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Searching NPM Packages by Keywords (Shell)\nDESCRIPTION: This command executes the collect.py script to search for npm packages using specified keywords (binary, prebuilt) and saves the results to a CSV file named report.csv.  Requires the script to be in the working directory or accessible via PATH.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/contrib/npm-binaries/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython collect.py --keywords binary,prebuilt -o report.csv\n```\n\n----------------------------------------\n\nTITLE: NCSA License Text\nDESCRIPTION: This snippet contains the complete text of the University of Illinois/NCSA Open Source License.  It includes placeholders for the year, copyright holder's full name, and project details. It is crucial to replace these placeholders with the appropriate values when using the license.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/vendor/choosealicense.com/_licenses/ncsa.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUniversity of Illinois/NCSA Open Source License\n\nCopyright (c) [year] [fullname]. All rights reserved.\n\nDeveloped by: [project]\n              [fullname]\n              [projecturl]\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal with the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimers.\n\n* Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimers in the\n  documentation and/or other materials provided with the distribution.\n\n* Neither the names of [fullname], [project] nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this Software without specific prior written permission.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH\nTHE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Example notice for database usage\nDESCRIPTION: This snippet provides an example of the notice required when publicly using a Produced Work derived from a database licensed under the Open Database License (ODbL). It specifies the format and content of the notice, including placeholders for the database name and a link to the license URI.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/vendor/choosealicense.com/_licenses/odbl-1.0.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nContains information from DATABASE NAME, which is made available\nhere under the Open Database License (ODbL).\n```\n\n----------------------------------------\n\nTITLE: Scan local depscan with development configuration\nDESCRIPTION: This command runs the depscan tool using a development configuration file (.config/depscan-dev.toml). This allows developers to test dep-scan with specific configurations for development purposes.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/Develop/getting-started-development.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuv run depscan --config .config/depscan-dev.toml\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Sample\nDESCRIPTION: Presents a sample copyright disclaimer that can be used by an employer or school to relinquish their copyright interest in a program. This allows the author to freely license the software under the GPL.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/vendor/choosealicense.com/_licenses/gpl-2.0.txt#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n`Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n<signature of Ty Coon>, 1 April 1989\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Zlib License Text\nDESCRIPTION: This snippet provides the full text of the zlib license. It is a permissive license that allows for commercial use, modifications, and distribution. It requires the inclusion of the copyright notice and documentation of any changes made to the original source code.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/vendor/choosealicense.com/_licenses/zlib.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nzlib License\n\n(C) [year] [fullname]\n\nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\n   claim that you wrote the original software. If you use this software\n   in a product, an acknowledgment in the product documentation would be\n   appreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\n```\n\n----------------------------------------\n\nTITLE: Start Local Development Server\nDESCRIPTION: This command starts the local development server for the Docusaurus website. It enables hot reloading, allowing changes to be reflected in the browser without restarting the server.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Example of Listing All Files in the Work\nDESCRIPTION: This code snippet illustrates how to define what constitutes the Work under the LPPL by listing all files in a manifest file.  This approach helps licensees determine which files are considered part of the Work, ensuring compliance with the license terms.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/vendor/choosealicense.com/_licenses/lppl-1.3c.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n    % This work consists of all files listed in manifest.txt.\n```\n\n----------------------------------------\n\nTITLE: Installation using Yarn\nDESCRIPTION: This command installs the project dependencies using Yarn package manager. It fetches all required packages listed in the `package.json` file.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries.io API Key (Shell)\nDESCRIPTION: This snippet sets the LIBRARIES_API_KEY environment variable.  This key is optional but recommended for using the libraries.io API.  Requires a valid API key obtained from libraries.io after signup.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/contrib/npm-binaries/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport LIBRARIES_API_KEY=key\n```\n\n----------------------------------------\n\nTITLE: Collect.py Help Message (Shell)\nDESCRIPTION: This command displays the help message for the collect.py script, outlining available command-line arguments and options. It shows the script's usage, available options for sorting, package type, output file specification, and searching for popular packages.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/contrib/npm-binaries/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython collect.py --help\n```\n\n----------------------------------------\n\nTITLE: Package Collection Script Usage\nDESCRIPTION: This snippet shows the usage of the collect.py script, including available command-line options for collecting popular packages from registries. These options include setting keywords, filtering for insecure or unstable packages, specifying the output file, and setting page and per-page counts.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/contrib/pkg-state-research/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nusage: collect.py [-h] [--keywords KEYWORDS] [--insecure] [--unstable] [-o OUTPUT_FILE] [--pages PAGES] [--per-page PER_PAGE]\n\nCollect popular packages from registries for analysis.\n\noptions:\n  -h, --help            show this help message and exit\n  --keywords KEYWORDS   Comma separated list of keywords to search.\n  --insecure            Top insecure packages only.\n  --unstable            Top unstable packages only.\n  -o OUTPUT_FILE, --output-file OUTPUT_FILE\n                        Output CSV file.\n  --pages PAGES         Page count.\n  --per-page PER_PAGE   Page count.\n```\n\n----------------------------------------\n\nTITLE: Run depscan help with uv\nDESCRIPTION: This shell command uses the `uv` package manager to run the depscan tool with the `--help` option. This displays the help information for depscan, allowing users to see available commands and options.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nuv run depscan --help\n```\n\n----------------------------------------\n\nTITLE: Executing npm Risk Scoring Script with Python\nDESCRIPTION: This script executes the `npm-watch.py` script to test package risk scoring against all of npm. It requires the PYTHONPATH to be set to the current directory to ensure the necessary modules are found. The script is located in the contrib directory.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/contrib/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPYTHONPATH=. python contrib/npm-watch.py\n```\n\n----------------------------------------\n\nTITLE: Run pytest with uv\nDESCRIPTION: This shell command utilizes the `uv` package manager to execute the `pytest` testing framework. This runs the project's test suite to ensure code quality and correctness.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nuv run pytest\n```\n\n----------------------------------------\n\nTITLE: Eclipse Theia Debug Launch Configuration\nDESCRIPTION: This JSON configuration file is used to configure the debugger in Eclipse Theia for the dep-scan command-line interface (CLI). It specifies the debug type as 'debugpy', sets environment variables like 'SCAN_DEBUG_MODE', defines the program to be executed (cli.py), and provides command-line arguments that need to be adjusted.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/docs/Develop/debugging.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug depscan cli\",\n            \"type\": \"debugpy\",\n            \"request\": \"launch\",\n            \"env\": {\n                \"SCAN_DEBUG_MODE\": \"info\"\n            },\n            \"program\": \"${workspaceFolder}/depscan/cli.py\",\n            \"console\": \"integratedTerminal\",\n            \"args\": [\n                \"--src\",\n                \"<source directory>\",\n                \"--reports-dir\",\n                \"<reports directory>\",\n                \"-t\",\n                \"<project type>\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting depscan and cdxgen server with Docker Compose\nDESCRIPTION: This command clones the depscan repository and starts the depscan and cdxgen servers using Docker Compose.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/owasp-dep-scan/dep-scan\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Clean local VDB\nDESCRIPTION: This shell command cleans the local vulnerability database.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/README.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nvdb --clean\n```\n\n----------------------------------------\n\nTITLE: Example LPPL Copyright Notice and Statement in LaTeX\nDESCRIPTION: This code snippet demonstrates how to include a copyright notice and statement in a LaTeX file (``.dtx`` file) to indicate that it is distributed and/or modified under the conditions of the LaTeX Project Public License (LPPL). It specifies the copyright holder, license version, maintenance status, and list of files that constitute the work.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/vendor/choosealicense.com/_licenses/lppl-1.3c.txt#_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n  %% pig.dtx\n  %% Copyright 2005 M. Y. Name\n  %\n  % This work may be distributed and/or modified under the\n  % conditions of the LaTeX Project Public License, either version 1.3\n  % of this license or (at your option) any later version.\n  % The latest version of this license is in\n  %   http://www.latex-project.org/lppl.txt\n  % and version 1.3 or later is part of all distributions of LaTeX\n  % version 2005/12/01 or later.\n  %\n  % This work has the LPPL maintenance status `maintained'.\n  %\n  % The Current Maintainer of this work is M. Y. Name.\n  %\n  % This work consists of the files pig.dtx and pig.ins\n  % and the derived file pig.sty.\n```\n\n----------------------------------------\n\nTITLE: Deploy Website using SSH\nDESCRIPTION: This command deploys the website to GitHub pages using SSH.  It builds the website and pushes the content to the `gh-pages` branch.\nSOURCE: https://github.com/owasp-dep-scan/dep-scan/blob/master/documentation/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```"
  }
]