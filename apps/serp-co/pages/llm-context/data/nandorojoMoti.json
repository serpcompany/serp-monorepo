[
  {
    "owner": "nandorojo",
    "repo": "moti",
    "content": "TITLE: Creating Mount Animations with MotiView in React Native\nDESCRIPTION: Shows how to set initial state and animate opacity using MotiView component.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView from={{ opacity: 0 }} animate={{ opacity: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Basic MotiPressable Usage Example\nDESCRIPTION: A simple example of using MotiPressable to change opacity based on pressed or hovered states. This demonstrates the fundamental usage pattern of the component.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MotiPressable\n  onPress={onPress}\n  animate={({ hovered, pressed }) => {\n    'worklet'\n\n    return {\n      opacity: hovered || pressed ? 0.5 : 1,\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Building an Interactive Hover Dropdown Menu with Moti and React Native\nDESCRIPTION: A complete implementation of a web-focused dropdown menu that responds to hover states using Moti animations. It includes components for menu items, dropdown container, animations, and styling. The implementation uses Moti's pressable interactions API to handle hover states and create smooth transitions.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/examples/dropdown.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {\n  StyleSheet,\n  SafeAreaView,\n  View,\n  Text,\n  ViewProps,\n  Platform,\n} from 'react-native'\nimport {\n  MotiPressable,\n  useMotiPressable,\n  useMotiPressableAnimatedProps,\n} from 'moti/interactions'\nimport { MotiView } from 'moti'\nimport { Ionicons } from '@expo/vector-icons'\n\nfunction MenuItemBg() {\n  const state = useMotiPressable(\n    'item',\n    ({ hovered, pressed }) => {\n      'worklet'\n      return {\n        opacity: hovered || pressed ? 0.4 : 0,\n      }\n    },\n    []\n  )\n\n  return <MotiView state={state} style={styles.itemBg} />\n}\n\nfunction MenuItemArrow() {\n  const state = useMotiPressable(\n    'item',\n    ({ hovered, pressed }) => {\n      'worklet'\n\n      return {\n        opacity: hovered || pressed ? 1 : 0,\n        translateX: hovered || pressed ? 0 : -10,\n      }\n    },\n    []\n  )\n\n  return (\n    <MotiView\n      transition={{ type: 'timing' }}\n      style={styles.itemArrow}\n      state={state}\n    >\n      <Ionicons name=\"ios-arrow-forward\" size={18} color=\"white\" />\n    </MotiView>\n  )\n}\n\nfunction MenuItem({\n  title,\n  description,\n  color,\n  icon,\n}: {\n  title: string\n  description: string\n  color: string\n  icon: React.ComponentProps<typeof Ionicons>['name']\n}) {\n  return (\n    <MotiPressable onPress={console.log} style={styles.item} id=\"item\">\n      <MenuItemBg />\n      <View style={[styles.iconContainer, { backgroundColor: color }]}>\n        <Ionicons size={32} color=\"black\" name={icon} />\n      </View>\n      <View style={styles.itemContent}>\n        <View style={styles.titleContainer}>\n          <Text style={[styles.text, styles.title]}>{title}</Text>\n          <MenuItemArrow />\n        </View>\n        <Text style={[styles.text, styles.subtitle]}>{description}</Text>\n      </View>\n    </MotiPressable>\n  )\n}\n\nfunction Dropdown() {\n  const dropdownState = useMotiPressable(\n    'menu',\n    ({ hovered, pressed }) => {\n      'worklet'\n\n      return {\n        opacity: pressed || hovered ? 1 : 0,\n        translateY: pressed || hovered ? 0 : -5,\n      }\n    },\n    []\n  )\n  const animatedProps = useMotiPressableAnimatedProps<ViewProps>(\n    'menu',\n    ({ hovered, pressed }) => {\n      'worklet'\n\n      console.log('hovered', hovered)\n      return {\n        pointerEvents: pressed || hovered ? 'auto' : 'none',\n      }\n    },\n    []\n  )\n\n  return (\n    <MotiView\n      style={styles.dropdown}\n      animatedProps={animatedProps}\n      transition={{ type: 'timing' }}\n    >\n      <MotiView\n        style={[styles.dropdownContent, shadow]}\n        transition={{ type: 'timing', delay: 20 }}\n        state={dropdownState}\n      >\n        <Text style={[styles.text, styles.heading]}>BeatGig Products</Text>\n        <MenuItem\n          title=\"Colleges\"\n          description=\"For Greek organizations & university program boards\"\n          color=\"#FFF500\"\n          icon=\"school-outline\"\n        />\n        <MenuItem\n          title=\"Venues\"\n          description=\"For bars, nightclubs, restaurants, country clubs, & vineyards\"\n          color=\"#50E3C2\"\n          icon=\"business-outline\"\n        />\n        <MenuItem\n          title=\"Artists\"\n          description=\"For artists, managers & agents\"\n          color=\"#FF0080\"\n          icon=\"mic-outline\"\n        />\n      </MotiView>\n    </MotiView>\n  )\n}\n\nfunction TriggerBg() {\n  const state = useMotiPressable(\n    'trigger',\n    ({ hovered, pressed }) => {\n      'worklet'\n\n      return {\n        opacity: hovered || pressed ? 0.2 : 0,\n      }\n    },\n    []\n  )\n  return <MotiView state={state} style={styles.triggerBg} />\n}\n\nfunction Trigger() {\n  return (\n    <MotiPressable id=\"trigger\">\n      <TriggerBg />\n      <View style={styles.triggerContainer}>\n        <Text style={[styles.text, styles.trigger]}>Our Products</Text>\n        <Ionicons\n          name=\"chevron-down\"\n          style={styles.chevron}\n          color=\"white\"\n          size={20}\n        />\n      </View>\n    </MotiPressable>\n  )\n}\n\nfunction Menu() {\n  return (\n    <MotiPressable id=\"menu\">\n      <Trigger />\n      <Dropdown />\n    </MotiPressable>\n  )\n}\n\nexport default function MotiPressableMenu() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.wrapper}>\n        <Menu />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst shadow = Platform.select({\n  web: {\n    boxShadow: `rgb(255 255 255 / 10%) 0px 50px 100px -20px, rgb(255 255 255 / 50%) 0px 30px 60px -30px`,\n  },\n}) as any\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n  },\n  wrapper: {\n    padding: 32,\n    alignItems: 'flex-start',\n  },\n  text: {\n    color: 'white',\n    fontFamily: Platform.OS === 'web' ? 'SF Pro Rounded' : undefined,\n    fontSize: 14,\n  },\n  dropdown: {\n    position: 'absolute',\n    top: '100%',\n    width: 500,\n    paddingTop: 4,\n  },\n  dropdownContent: {\n    backgroundColor: 'black',\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    paddingVertical: 32,\n  },\n  trigger: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    alignItems: 'center',\n    ...Platform.select({\n      web: { cursor: 'pointer' },\n    }),\n  },\n  triggerBg: {\n    backgroundColor: 'white',\n    borderRadius: 4,\n    ...StyleSheet.absoluteFillObject,\n  },\n  heading: {\n    textTransform: 'uppercase',\n    fontWeight: 'bold',\n    color: '#888888',\n    marginLeft: 16,\n    fontSize: 16,\n  },\n  item: {\n    padding: 16,\n    borderRadius: 8,\n    flexDirection: 'row',\n    marginTop: 8,\n    ...Platform.select({\n      web: { cursor: 'pointer' },\n    }),\n  },\n  itemBg: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#333',\n  },\n  iconContainer: {\n    height: 50,\n    width: 50,\n    borderRadius: 25,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 16,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: '#888888',\n    fontWeight: '500',\n  },\n  itemContent: {\n    flex: 1,\n  },\n  titleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  itemArrow: {\n    marginLeft: 4,\n  },\n  chevron: {\n    marginTop: 1,\n    marginLeft: 8,\n  },\n  triggerContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginHorizontal: 12,\n    marginVertical: 8,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Fade and Scale Animation with Moti in React Native\nDESCRIPTION: Implements a basic animation that fades and scales a white square shape using Moti's MotiView component. The animation is triggered by a toggle press action and uses timing-based transitions. The component demonstrates Moti's from/animate pattern for defining animation states.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hello-world.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useReducer } from 'react'\nimport { StyleSheet, Pressable } from 'react-native'\nimport { MotiView } from 'moti'\n\nfunction Shape() {\n  return (\n    <MotiView\n      from={{\n        opacity: 0,\n        scale: 0.5,\n      }}\n      animate={{\n        opacity: 1,\n        scale: 1,\n      }}\n      transition={{\n        type: 'timing',\n      }}\n      style={styles.shape}\n    />\n  )\n}\n\nexport default function HelloWorld() {\n  const [visible, toggle] = useReducer((s) => !s, true)\n\n  return (\n    <Pressable onPress={toggle} style={styles.container}>\n      {visible && <Shape />}\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  shape: {\n    justifyContent: 'center',\n    height: 250,\n    width: 250,\n    borderRadius: 25,\n    marginRight: 10,\n    backgroundColor: 'white',\n  },\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    backgroundColor: '#9c1aff',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic MotiView Animation with Opacity Transition in JSX\nDESCRIPTION: A simple example showing how to create a fade-in animation using MotiView component. It transitions opacity from 0 to 1 using Moti's declarative API.\nSOURCE: https://github.com/nandorojo/moti/blob/master/README.md#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MotiView from={{ opacity: 0 }} animate={{ opacity: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Full Example: Touchable Pulse Animation Component with useDynamicAnimation\nDESCRIPTION: A complete example of a touchable component that pulses on touch using useDynamicAnimation, TapGestureHandler, and Moti animations.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-dynamic-animation.md#2025-04-15_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { MotiView, useDynamicAnimation } from 'moti'\nimport {\n  TapGestureHandler,\n  TapGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler'\nimport { useAnimatedGestureHandler } from 'react-native-reanimated'\n\nexport default function HoverPulse({\n  scaleTo = 1.05,\n  style,\n  children,\n  ...props\n}) {\n  const animation = useDynamicAnimation(() => ({\n    // this is the initial state\n    scale: 1,\n  }))\n\n  const onGestureEvent = useAnimatedGestureHandler<TapGestureHandlerGestureEvent>(\n    {\n      onStart: () => {\n        animation.animateTo({ scale: scaleTo })\n      },\n      onFinish: () => {\n        animation.animateTo({ scale: 1 })\n      },\n    }\n  )\n\n  return (\n    <TapGestureHandler onGestureEvent={onGestureEvent}>\n      <MotiView style={style} state={animation}>\n        {children}\n      </MotiView>\n    </TapGestureHandler>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fade and Scale Animation with Moti in React Native\nDESCRIPTION: This snippet demonstrates how to use Moti to create a simple animation that fades and scales in a shape. It uses MotiView for animation and React hooks for state management. The component renders a pressable area that toggles the visibility of an animated shape.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/examples/hello-world.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useReducer } from 'react'\nimport { StyleSheet, Pressable } from 'react-native'\nimport { MotiView } from 'moti'\n\nfunction Shape() {\n  return (\n    <MotiView\n      from={{\n        opacity: 0,\n        scale: 0.5,\n      }}\n      animate={{\n        opacity: 1,\n        scale: 1,\n      }}\n      transition={{\n        type: 'timing',\n      }}\n      style={styles.shape}\n    />\n  )\n}\n\nexport default function HelloWorld() {\n  const [visible, toggle] = useReducer((s) => !s, true)\n\n  return (\n    <Pressable onPress={toggle} style={styles.container}>\n      {visible && <Shape />}\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  shape: {\n    justifyContent: 'center',\n    height: 250,\n    width: 250,\n    borderRadius: 25,\n    marginRight: 10,\n    backgroundColor: 'white',\n  },\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    backgroundColor: '#9c1aff',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Sequence Animations in Moti\nDESCRIPTION: Shows how to create sequence animations by passing arrays to style properties and customizing individual steps.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView\n  animate={{\n    scale: [\n      // you can mix primitive values with objects, too\n      { value: 0.1, delay: 100 },\n      1.1,\n      { value: 1, type: 'timing', delay: 200 },\n    ],\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Moti Animations with Transition Props\nDESCRIPTION: Demonstrates how to customize animations using the transition prop, including timing and spring animations.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView\n  from={{ opacity: 0, scale: 0.5 }}\n  animate={{ opacity: 1, scale: 1 }}\n  transition={{\n    type: 'timing',\n    duration: 350,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useAnimationState in React Native\nDESCRIPTION: Demonstrates how to import and use the useAnimationState hook to create and apply animation states to a MotiView component.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-animation-state.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst animationState = useAnimationState({\n  from: {\n    opacity: 0,\n    scale: 0.9,\n  },\n  to: {\n    opacity: 1,\n    scale: 1.1,\n  },\n  expanded: {\n    scale: 2,\n  },\n})\n\nconst onPress = () => {\n  if (animationState.current === 'to') {\n    animationState.transitionTo('expanded')\n  }\n}\n\nreturn <MotiView state={animationState} />\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Variants with useAnimationState in Moti\nDESCRIPTION: Shows how to create and transition between custom animation variants using useAnimationState.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst animationState = useAnimationState({\n  closed: {\n    height: 0,\n  },\n  open: {\n    height: 300,\n  },\n})\n\nconst onPress = () => {\n  if (animationState.current === 'closed') {\n    animationState.transitionTo('open')\n  } else {\n    animationState.transitionTo('closed')\n  }\n}\n\nreturn <MotiView state={animationState} />\n```\n\n----------------------------------------\n\nTITLE: Animating Children with useMotiPressable Hook\nDESCRIPTION: Demonstrates how to use the useMotiPressable hook to animate child components based on a parent MotiPressable's interaction state without causing re-renders.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMotiPressable } from moti/interactions'\n\nconst Child = () => {\n  const state = useMotiPressable(({ pressed }) => {\n    'worklet'\n\n    return {\n      opacity: pressed ? 0.5 : 1,\n    }\n  }, [])\n  return <MotiView state={state} />\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useDynamicAnimation Usage in React Native with Moti\nDESCRIPTION: Demonstrates the basic usage of useDynamicAnimation hook to create dynamic animations with an initial state and animating to new states based on layout changes.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-dynamic-animation.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst animation = useDynamicAnimation(() => {\n  // optional function that returns your initial style\n  return {\n    height: 100,\n  }\n})\n\nconst onLayout = ({ nativeEvent }) => {\n  animation.animateTo({\n    ...animation.current,\n    height: nativeEvent.layout.height,\n  })\n}\n\n// pass the animation to state of any Moti component\nreturn <MotiView state={animation} />\n```\n\n----------------------------------------\n\nTITLE: Basic Opacity Animation with MotiView in React Native\nDESCRIPTION: This snippet demonstrates how to create a simple fade-in and fade-out animation using MotiView component. It defines the initial state, animated state, and exit animation state for opacity transitions.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/index.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView\n  from={{ opacity: 0 }}\n  animate={{ opacity: 1 }}\n  exit={{ opacity: 0 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Complete MotiPressable Implementation Example\nDESCRIPTION: A full example showing how to use MotiPressable with a URL opening action. The animate prop uses a worklet function to handle opacity changes based on pressed or hovered states.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst onPress = () => Linking.openURL('beatgig.com')\n\n<MotiPressable\n  onPress={onPress}\n  animate={({ hovered, pressed }) => {\n    'worklet'\n\n    return {\n      opacity: hovered || pressed ? 0.5 : 1,\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Type-Safe AnimatedProps with TypeScript\nDESCRIPTION: Demonstrates how to use TypeScript generics with useMotiPressableAnimatedProps to ensure type safety when working with animated props.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ViewProps } from 'react-native'\n\n// in your component:\nconst animatedProps = useMotiPressableAnimatedProps<ViewProps>(\n  'menu',\n  ({ hovered }) => {\n    'worklet'\n\n    return {\n      pointerEvents: hovered ? 'auto' : 'none',\n    }\n  },\n  []\n)\n```\n\n----------------------------------------\n\nTITLE: Animating Dynamic Height with MotiView and useMeasure Hook\nDESCRIPTION: Shows how to animate height changes using MotiView and a custom useMeasure hook.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst [height, setHeight] = useMeasure()\n\n<MotiView\n  animate={{\n    height,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Complete ListItem Implementation with Imports\nDESCRIPTION: Full example of ListItem component with imports and hover effect implementation using useMotiPressables.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressables.md#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMotiPressables } from 'moti/interactions'\n\nconst ListItem = ({ id }) => {\n  const state = useMotiPressables((containers) => {\n    'worklet'\n\n    // access items by their unique IDs\n    const list = containers.list.value\n    const item = containers[`item-${id}`].value\n\n    let opacity = 1\n\n    if (list.hovered && !item.hovered) {\n      opacity = 0.5\n    }\n\n    return {\n      opacity,\n    }\n  }, [])\n  return <MotiView state={state} />\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Animation Implementation Comparison\nDESCRIPTION: Basic opacity animation implementation showing the difference between Moti and Reanimated syntax.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/reanimated.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MotiView } from 'moti'\n\nexport function Moti({ isActive }) {\n  return <MotiView animate={{ opacity: isActive ? 1 : 0 }} />\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport Animated, { useAnimatedStyle, withTiming } from 'react-native-reanimated'\n\nexport function Reanimated({ isActive }) {\n  const style = useAnimatedStyle(() => ({\n    opacity: withTiming(isActive ? 1 : 0),\n  }))\n\n  return <Animated.View style={style} />\n}\n```\n\n----------------------------------------\n\nTITLE: Animating to New State with useDynamicAnimation\nDESCRIPTION: Shows how to trigger animations to a new state using the animateTo method, which is a worklet that can be called from the native thread.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-dynamic-animation.md#2025-04-15_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst animation = useDynamicAnimation(() => {\n  return {\n    height: 100,\n  }\n})\n\nconst onPress = () => {\n  animation.animateTo({ height: 200 })\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing MotiPressable with useCallback\nDESCRIPTION: Example showing how to optimize MotiPressable animations using useCallback to prevent unnecessary re-renders. The animation function defines opacity changes based on pressed and hover states.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst animate = useCallback<MotiPressableInteractionProp>(({ pressed }) => {\n  'worklet'\n\n  return {\n    opacity: hovered || pressed ? 0.5 : 1,\n  }\n}, [])\n\n<MotiPressable\n  animate={animate}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Skeleton Component in React Native\nDESCRIPTION: Basic example of importing and using the Skeleton component from Moti to create a loading component that wraps children.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { Skeleton } from 'moti/skeleton'\n\nconst Loader = ({ children }) => <Skeleton>{children}</Skeleton>\n\nexport default Loader\n```\n\n----------------------------------------\n\nTITLE: Implementing AnimatePresence with Moti in React Native\nDESCRIPTION: This code demonstrates a basic implementation of the AnimatePresence component from Moti to animate a component's mounting and unmounting. It creates a simple shape that fades and scales in when mounted and out when unmounted, controlled by a toggle button.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/examples/animate-presence.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useReducer } from 'react'\nimport { StyleSheet, Pressable } from 'react-native'\n\nimport { MotiView, AnimatePresence } from 'moti'\n\nfunction Shape() {\n  return (\n    <MotiView\n      from={{\n        opacity: 0,\n        scale: 0.9,\n      }}\n      animate={{\n        opacity: 1,\n        scale: 1,\n      }}\n      exit={{\n        opacity: 0,\n        scale: 0.9,\n      }}\n      style={styles.shape}\n    />\n  )\n}\n\nexport default function Presence() {\n  const [visible, toggle] = useReducer((s) => !s, true)\n\n  return (\n    <Pressable onPress={toggle} style={styles.container}>\n      <AnimatePresence>{visible && <Shape />}</AnimatePresence>\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  shape: {\n    justifyContent: 'center',\n    height: 250,\n    width: 250,\n    borderRadius: 25,\n    marginRight: 10,\n    backgroundColor: 'white',\n  },\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    backgroundColor: '#9c1aff',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Transform Array Animation in Moti\nDESCRIPTION: Example of using the traditional transform array approach to animate a scale property from 0 to 1.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/transforms.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView\n  from={{\n    transform: [{ scale: 0 }],\n  }}\n  animate={{\n    transform: [{ scale: 1 }],\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useMotiPressableAnimatedProps in a Menu Component\nDESCRIPTION: Demonstrates how to use the useMotiPressableAnimatedProps hook within a Menu component to handle hover interactions. The hook is used to conditionally set the pointerEvents prop based on the hover state.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-animated-props.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst Menu = () => {\n  return (\n    <MotiPressable>\n      <Trigger />\n      <MenuItems />\n    </MotiPressable>\n  )\n}\n\nconst MenuItems = () => {\n  const animatedProps = useMotiPressableAnimatedProps(({ hovered }) => {\n    'worklet'\n\n    return {\n      pointerEvents: hovered ? 'auto' : 'none',\n    }\n  }, [])\n  return (\n    <MotiView animatedProps={animatedProps}>{/* Menu items here...*/}</MotiView>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PressableScale Component with mergeAnimateProp\nDESCRIPTION: A basic implementation of a PressableScale component that scales down when pressed, while still allowing custom animation props to be passed and merged.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/merge.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst PressableScale = ({ animate, ...props }) => {\n  return (\n    <MotiPressable\n      {...props}\n      animate={(interaction) => {\n        'worklet'\n\n        return mergeAnimateProp(interaction, animate, {\n          scale: interaction.pressed ? 0.96 : 1,\n        })\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Full Example of useAnimationState in React Native Component\nDESCRIPTION: A complete example showing how to use useAnimationState within a React Native component, including styles and state management.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-animation-state.md#2025-04-15_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { useAnimationState, MotiView } from 'moti'\nimport { StyleSheet } from 'react-native'\n\nexport default function PerformantView() {\n  const animationState = useAnimationState({\n    from: {\n      opacity: 0,\n      scale: 0.9,\n    },\n    to: {\n      opacity: 1,\n      scale: 1,\n    },\n  })\n\n  return <MotiView style={styles.shape} state={animationState} />\n}\n\nconst styles = StyleSheet.create({\n  shape: {\n    justifyContent: 'center',\n    height: 250,\n    width: 250,\n    borderRadius: 25,\n    backgroundColor: 'cyan',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Variants with useAnimationState in Moti\nDESCRIPTION: Demonstrates how to define and use static animation variants using the useAnimationState hook.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst animationState = useAnimationState({\n  from: {\n    opacity: 0,\n  },\n  to: {\n    opacity: 1,\n  },\n})\n\n// make sure to pass this to the `state` prop\nreturn <MotiView state={animationState} />\n```\n\n----------------------------------------\n\nTITLE: Complete Item Component with Press Transitions and State\nDESCRIPTION: Full implementation of an Item component using both useMotiPressableTransition and useMotiPressableState to create press-reactive animations.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-transition.md#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst Item = () => {\n  const transition = useMotiPressableTransition(({ pressed }) => {\n    'worklet'\n\n    if (pressed) {\n      return {\n        type: 'timing',\n      }\n    }\n\n    return {\n      type: 'spring',\n      delay: 50,\n    }\n  })\n  \n  const state = useMotiPressableState(({ pressed }) => {\n    return {\n      translateY: pressed ? -10 : 0,\n    }\n  })\n\n  return <MotiView transition={transition} state={state} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton.Group for Multiple Skeleton Components\nDESCRIPTION: Example of using Skeleton.Group to control multiple Skeleton components together for coordinated loading states.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image, Text } from 'react-native'\nimport { Skeleton } from 'moti/skeleton'\n\nexport function ListItem({ loading, item }) {\n  return (\n    <Skeleton.Group show={loading}>\n      <Skeleton>\n        <Image src={{ uri: image.avatar }} />\n      </Skeleton>\n      <Skeleton>\n        <Text>{item.title || ' '}</Text>\n      </Skeleton>\n    </Skeleton.Group>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of MotiPressable Component in React Native\nDESCRIPTION: This snippet demonstrates the basic usage of the MotiPressable component, including animation of opacity based on hover and press states. It also shows how to handle press events.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/pressable.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MotiPressable } from 'moti/interactions'\nimport { useCallback } from 'react'\n\nexport const Pressable = () => {\n  const onPress = () => Linking.openURL('beatgig.com')\n\n  return (\n    <MotiPressable\n      onPress={onPress}\n      animate={useMemo(\n        () => ({ hovered, pressed }) => {\n          'worklet'\n\n          return {\n            opacity: hovered || pressed ? 0.5 : 1,\n          }\n        },\n        []\n      )}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Animation Event Listeners in Moti\nDESCRIPTION: Shows how to use the onDidAnimate prop to listen for animation completion events and access animation details.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView\n  from={{ opacity: 0 }}\n  animate={{ opacity: 1 }}\n  onDidAnimate={(styleProp, didAnimationFinish, maybeValue, { attemptedValue }) => {\n    console.log('[moti]', styleProp, didAnimationFinish) // [moti], opacity, true\n\n    if (styleProp === 'opacity' && didAnimationFinish) {\n      console.log('did animate opacity to: ' + attemptedValue)\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Animations with useAnimationState in Moti\nDESCRIPTION: Demonstrates how to create reusable animations using custom hooks with useAnimationState.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nconst useFadeIn = () => {\n  return useAnimationState({\n    from: {\n      opacity: 0,\n    },\n    to: {\n      opacity: 1,\n    },\n  })\n}\n\nconst FadeInComponent = () => {\n  const fadeInState = useFadeIn()\n\n  return <MotiView state={fadeInState} />\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Expo Snack for Moti Animate Height Example\nDESCRIPTION: HTML code that embeds an Expo Snack example showing how to implement an accordion animation with auto height using Moti. The snack demonstrates the animate-height functionality in a dark-themed preview.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/examples/auto-height.md#2025-04-15_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-snack-id=\"@nandorojo/moti-animate-height\" data-snack-platform=\"web\" data-snack-preview=\"true\" data-snack-theme=\"dark\" style={{\"overflow\":\"hidden\",background:\"#212121\",border:\"1px solid var(--color-border)\",borderRadius:\"4px\",height:\"505px\",width:\"100%\"}}></div>\n<script async src=\"https://snack.expo.dev/embed.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Mount Animation Comparison\nDESCRIPTION: Side-by-side comparison of mount animations implemented in both Moti and Reanimated.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/reanimated.md#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MotiView } from 'moti'\n\nexport const Moti = () => (\n  <MotiView\n    from={{\n      translateY: -10,\n      opacity: 0,\n    }}\n    animate={{\n      translateY: 0,\n      opacity: 1,\n    }}\n  />\n)\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  withSpring,\n  useAnimatedStyle,\n} from 'react-native-reanimated'\n\nexport const Reanimated = () => {\n  const isMounted = useSharedValue(false)\n\n  const style = useAnimatedStyle(() => {\n    return {\n      opacity: withTiming(isMounted.value ? 1 : 0),\n      transform: [\n        {\n          translateY: withSpring(isMounted.value ? 0 : -10),\n        },\n      ],\n    }\n  })\n\n  useEffect(() => {\n    isMounted.value = true\n  }, [])\n\n  return <Animated.View style={style} />\n}\n```\n\n----------------------------------------\n\nTITLE: Animating a Motified Component with Sequence Animation\nDESCRIPTION: Example showing how to use the created motified component with sequence animation, specifically animating the height property from 50 to 100.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/motify.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// height sequence animation\n<MotifiedComponent animate={{ height: [50, 100] }} />\n```\n\n----------------------------------------\n\nTITLE: TypeScript with useInterpolateMotiPressable\nDESCRIPTION: Shows how to use TypeScript generics with useInterpolateMotiPressable to ensure type safety when working with derived values from interaction states.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst swipePosition = useSharedValue(0)\nconst interpolatedValue = useInterpolateMotiPressable<{ done: boolean }>(\n  'list',\n  ({ pressed }) => {\n    'worklet'\n\n    return {\n      done: swipePosition.value > 50 && !pressed,\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Embedding Stackblitz Example for Moti Variants in Next.js\nDESCRIPTION: An iframe embedding a Stackblitz playground that demonstrates how to use Moti variants in a Next.js application. The example can be found at the specified URL with the index.tsx file open by default.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/examples/variants.md#2025-04-15_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://stackblitz.com/edit/nextjs-ephjdq?embed=1&file=pages/index.tsx\" className=\"stackblitz\" />\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of animate Prop for Dynamic Animations in Moti\nDESCRIPTION: This example shows the recommended approach for dynamic animations in Moti. Using the animate prop directly on MotiView allows the opacity to reactively update based on the isLoading state.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-animation-state.md#2025-04-15_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// ✅ do this instead\n<MotiView animate={{ opacity: isLoading ? 1 : 0 }} />\n```\n\n----------------------------------------\n\nTITLE: Multiple Transforms Using Array Syntax\nDESCRIPTION: Example of using the traditional transform array syntax for multiple transforms while maintaining consistent order.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/transforms.md#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView\n  from={{\n    transform: [{ scale: 0 }, { translateX: -10 }],\n  }}\n  animate={{\n    transform: [{ scale: 1 }, { translateX: 0 }],\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Optimizing useInterpolateMotiPressable with dependency arrays\nDESCRIPTION: Demonstrates how to optimize the useInterpolateMotiPressable hook using a dependency array similar to useMemo.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-interpolate.md#2025-04-15_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst swipePosition = useSharedValue(0)\nconst interpolatedValue = useInterpolateMotiPressable(({ pressed }) => {\n  'worklet'\n\n  return {\n    done: swipePosition.value > 50 && !pressed,\n  }\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Gesture Handling with Moti\nDESCRIPTION: Example of implementing gesture-based animations using Moti with react-native-gesture-handler.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/reanimated.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GestureDetector, Gesture } from 'react-native-gesture-handler'\nimport { MotiView, useDynamicAnimation } from 'moti'\n\nexport function WithGestures() {\n  const state = useDynamicAnimation(() => ({\n    opacity: 0,\n  }))\n\n  const gesture = Gesture.Tap()\n    .onStart(() => {\n      state.animateTo({\n        opacity: 1,\n      })\n    })\n    .onEnd(() => {\n      state.animateTo({\n        opacity: 0,\n      })\n    })\n\n  return (\n    <GestureDetector gesture={gesture}>\n      <MotiView state={state} collapsable={false} />\n    </GestureDetector>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sequence Animations with useDynamicAnimation\nDESCRIPTION: Shows how to create sequence animations by passing an array of values to animateTo, which will be executed in sequence with timing options.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-dynamic-animation.md#2025-04-15_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst animation = useDynamicAnimation(() => {\n  return {\n    opacity: 1,\n  }\n})\n\nconst onPress = () => {\n  animation.animateTo({\n    // sequence\n    opacity: [1, 0.5, { value: 0, delay: 1000 }],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Animation Sequences in Moti\nDESCRIPTION: Example of creating animation sequences for transforms by passing an array of values to animate through.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/transforms.md#2025-04-15_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView\n  animate={{\n    scale: [0, 1.1, { value: 1, delay: 200 }], // scale to 0, 1.1, then 1 (with delay 200 ms)\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using AnimatePresence for Mount/Unmount Animations\nDESCRIPTION: Demonstrates how to use AnimatePresence to animate a component before it unmounts, using the exit prop.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst [visible, setVisible] = useState(false)\n\n<AnimatePresence>\n  {visible && (\n    <MotiView\n      from={{ opacity: 1 }}\n      animate={{ opacity: 1 }}\n      exit={{\n        opacity: 0,\n      }}\n    />\n  )}\n</AnimatePresence>\n```\n\n----------------------------------------\n\nTITLE: Proper Usage Pattern for useDynamicAnimation\nDESCRIPTION: Demonstrates the correct way to use useDynamicAnimation by avoiding destructuring, ensuring the hook works as intended.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-dynamic-animation.md#2025-04-15_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// 😡 don't do this\nconst { current, animateTo } = useDynamicAnimation()\n\n// ✅ do this!\nconst animation = useDynamicAnimation()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of PressableScale with Hover State\nDESCRIPTION: A fully typed implementation of PressableScale that handles both pressed and hovered states, using useMemo for better TypeScript support.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/merge.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { ComponentProps } from 'react'\nimport { MotiPressable, mergeAnimateProp } from 'moti/interactions'\n\ntype Props = ComponentProps<typeof MotiPressable>\n\nconst PressableScale = ({ animate, ...props }: Props) => {\n  return (\n    <MotiPressable\n      {...props}\n      animate={useMemo(\n        () => (interaction) => {\n          // useMemo has better TS support than useCallback\n          'worklet'\n\n          const { hovered, pressed } = interaction\n\n          let scale = 1\n\n          if (pressed) {\n            scale = 0.95\n          } else if (hovered) {\n            scale = 0.97\n          }\n\n          return mergeAnimateProp(interaction, animate, {\n            scale,\n          })\n        },\n        [animate]\n      )}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Function-based Updates with animateTo in useDynamicAnimation\nDESCRIPTION: Demonstrates how to use a function with animateTo that receives the current style and returns the next state, similar to setState's functional updates.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-dynamic-animation.md#2025-04-15_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst animation = useDynamicAnimation(() => {\n  return {\n    height: 100,\n    width: 100,\n  }\n})\n\nconst onPress = () => {\n  animation.animateTo((current) => ({ ...current, height: 200 }))\n\n  // or, you could do this! they're the same\n  animation.animateTo({\n    ...animation.current,\n    height: 200,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Customized Transitions with MotiPressable in React Native\nDESCRIPTION: This example shows how to customize transitions in MotiPressable, including delaying animations when releasing the button. It demonstrates the use of both 'animate' and 'transition' props with worklet functions.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/pressable.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MotiPressable } from 'moti/interactions'\nimport { useCallback } from 'react'\n\nexport const Pressable = () => {\n  const onPress = () => Linking.openURL('beatgig.com')\n\n  return (\n    <MotiPressable\n      onPress={onPress}\n      animate={useMemo(\n        () => ({ hovered, pressed }) => {\n          'worklet'\n\n          return {\n            opacity: hovered || pressed ? 0.5 : 1,\n          }\n        },\n        []\n      )}\n      transition={useMemo(\n        () => ({ hovered, pressed }) => {\n          'worklet'\n\n          return {\n            delay: hovered || pressed ? 0 : 100,\n          }\n        },\n        []\n      )}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PressableScale Component Without mergeAnimateProp\nDESCRIPTION: Example of a PressableScale component that doesn't use mergeAnimateProp, which causes the problem of overriding any animate prop passed to it.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/merge.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst PressableScale = (props) => {\n  return (\n    <MotiPressable\n      {...props}\n      animate={(interaction) => {\n        'worklet'\n\n        return {\n          scale: interaction.pressed ? 0.96 : 1,\n        }\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Function-Based State Transitions in useAnimationState\nDESCRIPTION: Shows how to use a function to determine the next animation state based on the current state.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-animation-state.md#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nanimationState.transitionTo((currentState) => {\n  if (currentState === 'from') {\n    return 'active'\n  }\n  return 'to'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Shared Values with Moti\nDESCRIPTION: Demonstrations of how to use Reanimated shared values with Moti components for high-performance animations.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/reanimated.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MotiView } from 'moti'\nimport { useSharedValue, useDerivedValue } from 'react-native-reanimated'\n\nexport function WithSharedValue() {\n  const isValid = useSharedValue(false)\n\n  return (\n    <MotiView\n      animate={useDerivedValue(() => ({\n        opacity: isValid.value ? 1 : 0,\n      }))}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exit Transition for Moti Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the 'exitTransition' prop in a MotiView component. It shows how to set different transition types for regular animations and exit animations, as well as defining animate and exit styles.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/props.md#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MotiView\n  // the animate prop uses the transition\n  transition={{ type: 'spring' }}\n  animate={{ opacity: 1, scale: 1 }}\n  // when exiting, it will use a timing transition\n  exitTransition={{ type: 'timing' }}\n  exit={{ opacity: 0, scale: 0.1 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using PressableScale with Dripsy Styling\nDESCRIPTION: Simple example of using the Dripsy-integrated PressableScale component with custom styling.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/merge.md#2025-04-15_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<PressableScale sx={{ height: 100, bg: 'primary' }} />\n```\n\n----------------------------------------\n\nTITLE: Full Example of Skeleton Component Usage\nDESCRIPTION: Complete example demonstrating the Skeleton component with toggle between light and dark modes.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useReducer } from 'react'\nimport { StyleSheet, Pressable } from 'react-native'\nimport { MotiView } from 'moti'\nimport { Skeleton } from 'moti/skeleton'\n\nconst Spacer = ({ height = 16 }) => <MotiView style={{ height }} />\n\nexport default function HelloWorld() {\n  const [dark, toggle] = useReducer((s) => !s, true)\n\n  const colorMode = dark ? 'dark' : 'light'\n\n  return (\n    <Pressable onPress={toggle} style={styles.container}>\n      <MotiView\n        transition={{\n          type: 'timing',\n        }}\n        style={[styles.container, styles.padded]}\n        animate={{ backgroundColor: dark ? '#000000' : '#ffffff' }}\n      >\n        <Skeleton colorMode={colorMode} radius=\"round\" height={75} width={75} />\n        <Spacer />\n        <Skeleton colorMode={colorMode} width={250} />\n        <Spacer height={8} />\n        <Skeleton colorMode={colorMode} width={'100%'} />\n        <Spacer height={8} />\n        <Skeleton colorMode={colorMode} width={'100%'} />\n      </MotiView>\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  padded: {\n    padding: 16,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Animation State in Moti's useDynamicAnimation\nDESCRIPTION: Shows how to define the initial animation state using a pure function passed to useDynamicAnimation, similar to React's useState hook.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-dynamic-animation.md#2025-04-15_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst animation = useDynamicAnimation(() => {\n  // this is your initial state\n  return {\n    height: 100,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Animating Based on React State with MotiView\nDESCRIPTION: Demonstrates how to animate opacity based on a loading state variable.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView animate={{ opacity: isLoading ? 1 : 0 }} />\n```\n\n----------------------------------------\n\nTITLE: Creating a React Native App with Moti Template\nDESCRIPTION: This command uses npx to create a new React Native application using the Moti starter template. It provides a quick way to set up a project with Moti animations integrated.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/starter.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-react-native-app -t with-moti\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Parent with useInterpolateMotiPressable\nDESCRIPTION: Demonstrates how to target a specific parent MotiPressable by ID when using useInterpolateMotiPressable. This allows for more complex animation hierarchies.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst mySharedValue = useSharedValue(0)\nuseInterpolateMotiPressable('list', ({ pressed }) => {\n  'worklet'\n\n  mySharedValue.value = pressed ? 1 : 0\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing a Motified Component with motify()\nDESCRIPTION: Basic example of importing the motify function and using it to transform a standard React Native component into an animated moti component.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/motify.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { motify } from 'moti'\n\nconst MotifiedComponent = motify(MyComponent)()\n```\n\n----------------------------------------\n\nTITLE: Animated Props with useMotiPressableAnimatedProps\nDESCRIPTION: Shows how to use useMotiPressableAnimatedProps to update a component's props based on a parent's interaction state. This is useful for properties that need to change based on interaction but aren't directly animatable.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst MenuItems = () => {\n  const animatedProps = useMotiPressableAnimatedProps(\n    'menu', // optional, access a unique pressable parent\n    ({ hovered }) => {\n      'worklet'\n\n      return {\n        pointerEvents: hovered ? 'auto' : 'none',\n      }\n    },\n    []\n  )\n  return (\n    <MotiView animatedProps={animatedProps}>{/* Menu items here...*/}</MotiView>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ListItem Component Implementation\nDESCRIPTION: Example of a ListItem component using useMotiPressables to manage opacity based on hover states of list container and individual items.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressables.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst ListItem = ({ id }) => {\n  const state = useMotiPressables((containers) => {\n    'worklet'\n\n    // access items by their unique IDs\n    const list = containers.list.value\n    const item = containers[`item-${id}`].value\n\n    let opacity = 1\n\n    if (list.hovered && !item.hovered) {\n      opacity = 0.5\n    }\n\n    return {\n      opacity,\n    }\n  }, [])\n\n  return <MotiView state={state} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pressable Item Component - TypeScript/React\nDESCRIPTION: Shows how to implement a component that uses the useMotiPressable hook to create press animations.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst Item = () => {\n  const state = useMotiPressable(({ pressed }) => {\n    'worklet'\n\n    return {\n      opacity: pressed ? 0.5 : 1,\n    }\n  })\n\n  return <MotiView state={state} />\n}\n```\n\n----------------------------------------\n\nTITLE: Interpolating Interaction State with useInterpolateMotiPressable\nDESCRIPTION: Shows how to use useInterpolateMotiPressable to access the shared value state of a parent pressable and create interpolated animations based on interaction state.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSharedValue } from 'react-native-reanimated'\nimport { useInterpolateMotiPressable } from moti/interactions'\n\n// in your component\nconst mySharedValue = useSharedValue(0)\nuseInterpolateMotiPressable(({ pressed }) => {\n  'worklet'\n\n  mySharedValue.value = pressed ? 1 : 0\n})\n```\n\n----------------------------------------\n\nTITLE: Optimized Pressable with Dependencies - TypeScript/React\nDESCRIPTION: Shows how to use dependency arrays with useMotiPressable for optimized performance.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable.md#2025-04-15_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = useMotiPressable(\n  'list',\n  ({ pressed, hovered }) => {\n    'worklet'\n\n    return {\n      opacity: pressed && !loading ? 0.5 : 1,\n    }\n  },\n  [loading] // pass an empty array if there are no dependencies\n)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Parent Interactions with useMotiPressables\nDESCRIPTION: Demonstrates how to use useMotiPressables to access and combine interaction states from multiple parent MotiPressable components for complex animations.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMotiPressables } from moti/interactions'\n\nconst Child = ({ id }) => {\n  const state = useMotiPressables((containers) => {\n    'worklet'\n\n    // access items by their unique IDs\n    const list = containers.list.value\n    const item = containers[`item-${id}`].value\n\n    let opacity = 1\n\n    if (list.hovered && !item.hovered) {\n      opacity = 0.5\n    }\n\n    return {\n      opacity,\n    }\n  }, [])\n  return <MotiView state={state} />\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Animations to MotiRect Component\nDESCRIPTION: Shows how to use the animate prop to apply animations to the MotiRect component, including sequence animations and conditional positioning.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/motify-svg.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiRect\n  animate={{\n    // height sequence animation\n    height: [50, 100],\n    x: visible ? 0 : 10,\n  }}\n  transition={{\n    // default all to timing\n    type: 'timing',\n    x: {\n      // override the transition for x\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Animation Transition for Skeleton\nDESCRIPTION: Example of customizing the animation transition properties for the Skeleton component.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Skeleton\n  transition={{\n    translateX: {\n      // defaults to a 3000ms timing function\n      type: 'spring',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Animation State in useDynamicAnimation\nDESCRIPTION: Demonstrates how to access the current animation state using the current property, which can be safely read synchronously unlike useState.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-dynamic-animation.md#2025-04-15_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst animation = useDynamicAnimation(() => {\n  // this is your initial state\n  return {\n    height: 100,\n  }\n})\n\nconst onPress = () => {\n  console.log(animation.current) // { height: 100 }\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Array Animation Sequences in Moti\nDESCRIPTION: Equivalent example of creating animation sequences using the transform array syntax.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/transforms.md#2025-04-15_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView\n  animate={{\n    transform: [{ scale: [0, 1.1, { value: 1, delay: 200 }] }],\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using motifySvg with useDynamicAnimation Hook\nDESCRIPTION: Demonstrates how to use motifySvg in combination with the useDynamicAnimation hook for dynamic animations of SVG components.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/motify-svg.md#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Rect } from 'react-native-svg'\nimport { motifySvg } from 'moti/svg'\nimport { useDynamicAnimation } from 'moti'\n\nconst MotiRect = motifySvg(Rect)()\n\nexport default function App() {\n  const animation = useDynamicAnimation<ComponentProps<typeof Rect>>(() => ({\n    x: 0,\n  }))\n\n  return <MotiRect state={animation} />\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Animation Delay for Skeleton\nDESCRIPTION: Example of setting a custom animation delay for the Skeleton component.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Skeleton delay={250} />\n```\n\n----------------------------------------\n\nTITLE: Creating a fade-in animation component with Moti\nDESCRIPTION: Example of creating a simple fade-in animation component using MotiView with from, animate, and transition properties to control the animation behavior.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/installation.md#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MotiView } from 'moti'\n\nexport const FadeIn = () => (\n  <MotiView\n    from={{ opacity: 0 }}\n    animate={{ opacity: 1 }}\n    transition={{ type: 'timing' }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Using MotiPressable as a Wrapper Component\nDESCRIPTION: Example showing how to wrap a component with MotiPressable to enable press interactions.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-transition.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiPressable>\n  <Item />\n</MotiPressable>\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Style Transitions in Moti\nDESCRIPTION: Shows how to set different transition configurations for individual style properties.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView\n  from={{ opacity: 0, scale: 0.5 }}\n  animate={{ opacity: 1, scale: 1 }}\n  transition={{\n    // default settings for all style values\n    type: 'timing',\n    duration: 350,\n    // set a custom transition for scale\n    scale: {\n      type: 'spring',\n      delay: 100,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Border Radius for Skeleton\nDESCRIPTION: Example of setting a custom border radius value for the Skeleton component.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Skeleton radius={16}>{!!data ? <Data /> : null}</Skeleton>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useMotiPressableTransition Hook with MotiView\nDESCRIPTION: Example showing how to use the useMotiPressableTransition hook to create different transitions based on pressed state, returning an object to be used with MotiView's transition prop.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-transition.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst transition = useMotiPressableTransition(({ pressed, hovered }) => {\n  'worklet'\n\n  if (pressed) {\n    return {\n      type: 'timing',\n    }\n  }\n\n  return {\n    type: 'spring',\n    delay: 50,\n  }\n})\n\nreturn <MotiView transition={transition} />\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated SVG Rect Component with motifySvg\nDESCRIPTION: Demonstrates how to use motifySvg to create an animated version of an SVG Rect component.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/motify-svg.md#2025-04-15_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { motifySvg } from 'moti/svg'\nimport { Svg, Rect } from 'react-native-svg'\n\nconst MotiRect = motifySvg(Rect)()\n```\n\n----------------------------------------\n\nTITLE: Delaying Moti Animations with Delay Prop\nDESCRIPTION: Demonstrates how to delay animations using the delay prop or within the transition configuration.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView\n  // delay in milliseconds\n  delay={200}\n  from={{ translateY: -5 }}\n  animate={{ translateY: 0 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Array with useMotiPressableTransition\nDESCRIPTION: Advanced example showing how to use a dependency array with useMotiPressableTransition to optimize performance by reducing updates.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-transition.md#2025-04-15_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = useMotiPressableTransition(\n  'list',\n  ({ pressed, hovered }) => {\n    'worklet'\n\n    return {\n      opactiy: pressed && !loading ? 0.5 : 1,\n    }\n  },\n  [loading] // pass an empty array if there are no dependencies\n)\n```\n\n----------------------------------------\n\nTITLE: Using PressableScale with Custom Opacity Animation\nDESCRIPTION: Example of using the PressableScale component while passing a custom animation prop to control opacity.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/merge.md#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<PressableScale\n  animate={useMemo(\n    () => (interaction) => {\n      'worklet'\n\n      return {\n        opacity: interaction.pressed ? 0.5 : 1,\n      }\n    },\n    []\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Repeat and Loop Animations in Moti\nDESCRIPTION: Demonstrates how to create repeat and loop animations using the repeat and loop transition properties.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView\n  from={{ opacity: 0 }}\n  animate={{ opacity: 1 }}\n  transition={{\n    loop: true,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Reanimated dependencies in App.tsx\nDESCRIPTION: Required imports for Reanimated and Gesture Handler that should be added at the top of the App.tsx file to properly initialize the animation system.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/installation.md#2025-04-15_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport 'react-native-reanimated'\nimport 'react-native-gesture-handler'\n```\n\n----------------------------------------\n\nTITLE: Updating Animation State with transitionTo in React Native\nDESCRIPTION: Demonstrates how to use the transitionTo function to change animation states dynamically.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-animation-state.md#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst animationState = useAnimationState({\n  from: {\n    opacity: 0,\n    scale: 0.9,\n  },\n  to: {\n    opacity: 1,\n    scale: 1,\n  },\n  active: {\n    scale: 1.1,\n    opacity: 1,\n  },\n})\n\nreturn (\n  <Pressable\n    onPress={() => {\n      animationState.transitionTo('active')\n    }}\n  >\n    <MotiView style={styles.shape} state={animationState} />\n  </Pressable>\n)\n```\n\n----------------------------------------\n\nTITLE: API Usage Examples for useMotiPressableAnimatedProps\nDESCRIPTION: Shows different ways to use the useMotiPressableAnimatedProps hook, including basic usage and usage with a specific MotiPressable component identified by an 'id' prop.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-animated-props.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nuseMotiPressableAnimatedProps(factory, deps?)\n\nuseMotiPressableAnimatedProps(id, factory, deps?)\n```\n\n----------------------------------------\n\nTITLE: Creating Moti Primitive Components with motify()\nDESCRIPTION: Example showing how moti internally uses the motify function to create its primitive components by wrapping React Native components. This demonstrates the pattern for creating custom animated components.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/motify.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { motify } from '../moti'\nimport {\n  View as RView,\n  Text as RText,\n  Image as RImage,\n  ScrollView as RScrollView,\n  SafeAreaView as RSafeAreaView,\n} from 'react-native'\n\nexport const View = motify(RView)()\nexport const Text = motify(RText)()\nexport const Image = motify(RImage)()\nexport const ScrollView = motify(RScrollView)()\nexport const SafeAreaView = motify(RSafeAreaView)()\n```\n\n----------------------------------------\n\nTITLE: Defining Animation States with useAnimationState\nDESCRIPTION: Illustrates how to define different animation states using the useAnimationState hook.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-animation-state.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst animationState = useAnimationState({\n  from: {\n    opacity: 0,\n    scale: 0.9,\n  },\n  to: {\n    opacity: 1,\n    scale: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Parent with useMotiPressable\nDESCRIPTION: Shows how to access a specific parent MotiPressable's interaction state by using a unique ID. This is useful when you need to animate based on a non-immediate parent's interaction state.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMotiPressable } from moti/interactions'\n\nconst Child = () => {\n  const state = useMotiPressable(\n    'list',\n    ({ pressed }) => {\n      'worklet'\n\n      return {\n        opacity: pressed ? 0.5 : 1,\n      }\n    },\n    []\n  )\n  return <MotiView state={state} />\n}\n```\n\n----------------------------------------\n\nTITLE: API Usage Examples - TypeScript/React\nDESCRIPTION: Shows the different valid usage patterns for the useMotiPressable hook.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable.md#2025-04-15_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nuseMotiPressable(factory, deps?)\n\nuseMotiPressable(id, factory, deps?)\n```\n\n----------------------------------------\n\nTITLE: Customizing From and To Variants in useAnimationState\nDESCRIPTION: Demonstrates how to customize the 'from' and 'to' variant names when using useAnimationState.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-animation-state.md#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst animationState = useAnimationState(\n  {\n    initial: {\n      opacity: 0,\n    },\n    next: {\n      opacity: 1,\n    },\n  },\n  {\n    from: 'initial',\n    to: 'next',\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Moti Components in TypeScript\nDESCRIPTION: Demonstrates how to import MotiView and MotiText components from the Moti library.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { MotiView, MotiText } from 'moti'\n```\n\n----------------------------------------\n\nTITLE: Basic usage of useInterpolateMotiPressable hook\nDESCRIPTION: Demonstrates how to use the useInterpolateMotiPressable hook with a shared value to respond to press states.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-interpolate.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSharedValue } from 'react-native-reanimated'\nimport { useInterpolateMotiPressable } from 'moti/interactions'\n\n// in your component\nconst mySharedValue = useSharedValue(0)\nuseInterpolateMotiPressable(({ pressed }) => {\n  'worklet'\n\n  mySharedValue.value = pressed ? 1 : 0\n})\n```\n\n----------------------------------------\n\nTITLE: Animating Opacity with MotiView in React Native\nDESCRIPTION: This snippet demonstrates how to use the MotiView component from Moti to animate the opacity of a view from 0 to 1.\nSOURCE: https://github.com/nandorojo/moti/blob/master/packages/moti/README.md#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MotiView from={{ opacity: 0 }} animate={{ opacity: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Importing Moti Components in TypeScript\nDESCRIPTION: Shows how to import the core Moti components that wrap standard React Native components for animation purposes. Includes MotiView, MotiText, MotiScrollView, MotiSafeAreaView, and MotiImage.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/components.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MotiView, MotiText, MotiScrollView, MotiSafeAreaView, MotiImage } from 'moti'\n```\n\n----------------------------------------\n\nTITLE: Valid API usages for useInterpolateMotiPressable\nDESCRIPTION: Shows the different valid ways to call the useInterpolateMotiPressable hook, with or without an ID parameter.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-interpolate.md#2025-04-15_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nuseInterpolateMotiPressable(factory, deps?)\n```\n\nLANGUAGE: tsx\nCODE:\n```\nuseInterpolateMotiPressable(id, factory, deps?)\n```\n\n----------------------------------------\n\nTITLE: Installing expo-linear-gradient for Expo Users\nDESCRIPTION: Installation command for Expo users to add the required expo-linear-gradient dependency.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexpo install expo-linear-gradient\n```\n\n----------------------------------------\n\nTITLE: Using mergeAnimateProp in Child Components with useMotiPressable\nDESCRIPTION: Example of using mergeAnimateProp in child components with the useMotiPressable hook, enabling composition of pressable interactions.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/merge.md#2025-04-15_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MotiView } from 'moti'\nimport {\n  MotiPressableProp,\n  useMotiPressable,\n  mergeAnimateProp,\n} from 'moti/interactions'\n\ntype Props = {\n  animate?: MotiPressableProp\n}\n\nexport const ListItem = ({ animate }: Props) => {\n  const state = useMotiPressable(\n    (interaction) => {\n      'worklet'\n\n      return mergeAnimateProp(interaction, animate, {\n        // your overrides go here\n        opacity: interaction.pressed ? 1 : 0,\n      })\n    },\n    [animate]\n  )\n\n  return <MotiView state={state} />\n}\n\nexport default function List() {\n  return (\n    <MotiPressable>\n      {items.map((id, index) => (\n        <ListItem\n          key={id}\n          animate={({ hovered }) => {\n            return {\n              translateX: hovered ? index * 2 : 0,\n            }\n          }}\n        />\n      ))}\n    </MotiPressable>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Nested MotiPressable with ID - TypeScript/React\nDESCRIPTION: Example of nested MotiPressable components using unique IDs for specific targeting.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable.md#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiPressable id=\"list\">\n  <MotiPressable>\n    <Item />\n  </MotiPressable>\n</MotiPressable>\n```\n\n----------------------------------------\n\nTITLE: Accessing MotiPressable by ID in useMotiPressableTransition\nDESCRIPTION: Example showing how to access a specific MotiPressable component's state by its ID in the useMotiPressableTransition hook.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-transition.md#2025-04-15_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = useMotiPressableTransition('list', ({ pressed }) => {\n  'worklet'\n\n  return {\n    opactiy: pressed ? 0.5 : 1,\n  }\n})\n\nreturn <MotiView transition={transition} />\n```\n\n----------------------------------------\n\nTITLE: Integrating PressableScale with Dripsy Styling\nDESCRIPTION: Implementation of PressableScale that works with Dripsy styling system, adding a customizable scaleTo prop.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/merge.md#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { ComponentProps } from 'react'\nimport { MotiPressable, mergeAnimateProp } from 'moti/interactions'\nimport { styled } from 'dripsy'\n\nconst DripsyMotiPressable = styled(MotiPressable)()\n\ntype Props = ComponentProps<typeof DripsyMotiPressable> & {\n  scaleTo?: number\n}\n\nconst PressableScale = ({ animate, scaleTo = 0.96, ...props }: Props) => {\n  return (\n    <DripsyMotiPressable\n      {...props}\n      animate={useMemo(\n        () => (interaction) => {\n          'worklet'\n\n          return mergeAnimateProp(interaction, animate, {\n            scale: interaction.pressed ? scaleTo : 1,\n          })\n        },\n        [animate]\n      )}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Nested MotiPressable Components with IDs\nDESCRIPTION: Example showing how to use nested MotiPressable components with a unique ID to identify specific pressables.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-transition.md#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiPressable id=\"list\">\n  <MotiPressable>\n    <Item />\n  </MotiPressable>\n</MotiPressable>\n```\n\n----------------------------------------\n\nTITLE: useMotiPressableTransition API Usage Patterns\nDESCRIPTION: Different valid usage patterns for the useMotiPressableTransition hook, showing both with and without the ID parameter.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-transition.md#2025-04-15_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nuseMotiPressableTransition(factory, deps?)\n```\n\nLANGUAGE: tsx\nCODE:\n```\nuseMotiPressableTransition(id, factory, deps?)\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton with Conditional Rendering\nDESCRIPTION: Example of using the Skeleton component with conditional rendering based on data availability.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Skeleton>{!!data ? <Data /> : null}</Skeleton>\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Skeleton\nDESCRIPTION: Example of creating a circular Skeleton component using the round radius value.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Skeleton height={48} width={48} radius=\"round\">\n  {!!data ? <Data /> : null}\n</Skeleton>\n```\n\n----------------------------------------\n\nTITLE: Multiple Direct Transforms with Consistent Order\nDESCRIPTION: Example showing how to use multiple transforms directly with proper ordering. This approach requires Reanimated 2.3.0+.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/transforms.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// ✅ scale first, then translateX\n<MotiView\n  from={{\n    scale: 0,\n    translateX: -10,\n  }}\n  animate={{\n    scale: 1,\n    translateX: 0,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Controlling Skeleton Visibility with show Prop\nDESCRIPTION: Example of explicitly controlling the visibility of the Skeleton component using the show prop.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Skeleton show={loading}>\n  <Data />\n</Skeleton>\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Arrays with useMotiPressable\nDESCRIPTION: Demonstrates how to use dependency arrays with useMotiPressable hook to optimize performance, similar to useMemo's dependency array pattern. The hook controls opacity based on pressed state.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = useMotiPressable(({ pressed }) => {\n  'worklet'\n\n  return {\n    opacity: pressed ? 0.5 : 1,\n  }\n}, []) // see this array here!\n\nreturn <MotiView state={state} />\n```\n\n----------------------------------------\n\nTITLE: Direct Transform Property Animation in Moti\nDESCRIPTION: Simplified approach for transform animations where properties can be passed directly instead of using a transform array.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/transforms.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView\n  from={{\n    scale: 0,\n  }}\n  animate={{\n    scale: 1,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Hiding Skeleton Explicitly\nDESCRIPTION: Example of explicitly hiding the Skeleton component regardless of children.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Skeleton show={false}>{!!data ? <Data /> : null}</Skeleton>\n```\n\n----------------------------------------\n\nTITLE: Single Transform for Older Reanimated Versions\nDESCRIPTION: Example showing single transform usage that works with older versions of Reanimated (2.2 or older).\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/transforms.md#2025-04-15_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// ✅ if you're only using one transform\n<MotiView\n  from={{\n    scale: 0,\n  }}\n  animate={{\n    scale: 1,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Multiple Transforms Array for Older Reanimated\nDESCRIPTION: Correct approach for using multiple transforms with Reanimated 2.2 or older by using transform arrays with consistent ordering.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/transforms.md#2025-04-15_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// ✅ for multiple transforms, use an array\n<MotiView\n  from={{\n    transform: [\n      {\n        scale: 0,\n      },\n      {\n        translateY: -10,\n      },\n    ],\n  }}\n  animate={{\n    transform: [{ scale: 1 }, { translateY: 0 }],\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: useMotiPressables with Dependencies\nDESCRIPTION: Example showing how to use useMotiPressables with dependency array for optimized updates.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressables.md#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = useMotiPressables(\n  (containers) => {\n    'worklet'\n\n    const list = containers.list.value\n\n    return {\n      opacity: list.pressed && !loading ? 0.5 : 1,\n    }\n  },\n  [loading] // pass an empty array if there are no dependencies\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Color Mode for Skeleton\nDESCRIPTION: Example of setting the color mode (light or dark) for the Skeleton component.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Skeleton colorMode=\"light\" />\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of animatedProps and animate on Web\nDESCRIPTION: Shows the correct way to use animatedProps and animate props together in a web environment by splitting them into separate components to avoid conflicts.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-animated-props.md#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// ✅ good\nconst animateProps = useMotiPressableAnimatedProps(...)\n\n<MotiView animatedProps={animatedProps}>\n  <MotiView animate={...} />\n</MotiView>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Moti Interaction Hooks\nDESCRIPTION: ESLint configuration that adds Moti's interaction hooks to the exhaustive-deps rule. This setup enforces proper dependency array usage with hooks like useMotiPressable, ensuring consistent behavior similar to React's built-in hooks.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/eslint.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    // ...\n    \"react-hooks/exhaustive-deps\": [\n      \"error\",\n      {\n        \"additionalHooks\": \"(useMotiPressableTransition|useMotiPressable|useMotiPressables|useMotiPressableAnimatedProps|useInterpolateMotiPressable)\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Controlled Props to MotiPressable in JavaScript\nDESCRIPTION: Adds 'hoveredValue' and 'pressedValue' props to the MotiPressable component for controlled usage.\nSOURCE: https://github.com/nandorojo/moti/blob/master/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nMotiPressable.propTypes = {\n  hoveredValue: PropTypes.any,\n  pressedValue: PropTypes.any\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exit Before Enter with AnimatePresence\nDESCRIPTION: Shows how to use the exitBeforeEnter prop with AnimatePresence to ensure only one item is visible at a time during transitions.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst Skeleton = () => (\n  <MotiView\n    animate={{ opacity: 1 }}\n    exit={{\n      opacity: 0,\n    }}\n  />\n)\n\nconst WithAnimatedPresence = () => (\n  <AnimatePresence exitBeforeEnter>\n    {loading && <Skeleton key=\"skeleton\" />}\n\n    {!loading && (\n      <MotiView\n        key=\"content\"\n        animate={{ opacity: 1 }}\n        exit={{\n          opacity: 0,\n        }}\n      />\n    )}\n  </AnimatePresence>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Square Skeleton\nDESCRIPTION: Example of creating a square Skeleton component using the square radius value.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Skeleton height={48} width={48} radius=\"square\">\n  {!!data ? <Data /> : null}\n</Skeleton>\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Value Support for Transitions in JavaScript\nDESCRIPTION: Allows the transition and exitTransition props to accept shared/derived values.\nSOURCE: https://github.com/nandorojo/moti/blob/master/CHANGELOG.md#2025-04-15_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst transition = useSharedValue({\n  type: 'timing',\n  duration: 300\n})\n\n<Moti.View transition={transition} />\n```\n\n----------------------------------------\n\nTITLE: Using Pressable with Unique ID - TypeScript/React\nDESCRIPTION: Demonstrates how to use useMotiPressable with a specific ID to target a parent pressable component.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable.md#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = useMotiPressable('list', ({ pressed }) => {\n  'worklet'\n\n  return {\n    opacity: pressed ? 0.5 : 1,\n  }\n})\n\nreturn <MotiView state={state} />\n```\n\n----------------------------------------\n\nTITLE: useMotiPressables Function Signature\nDESCRIPTION: Basic function signature showing the hook's usage pattern with optional dependencies.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressables.md#2025-04-15_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nuseMotiPressables(factory, deps?)\n```\n\n----------------------------------------\n\nTITLE: Accessing a specific parent MotiPressable by ID\nDESCRIPTION: Shows how to target a specific MotiPressable component using its ID when using the useInterpolateMotiPressable hook.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-interpolate.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiPressable id=\"menu\">\n  <Item />\n</MotiPressable>\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst mySharedValue = useSharedValue(0)\nuseInterpolateMotiPressable('menu', ({ pressed }) => {\n  'worklet'\n\n  mySharedValue.value = pressed ? 1 : 0\n})\n```\n\n----------------------------------------\n\nTITLE: Basic MotiPressable Usage - TypeScript/React\nDESCRIPTION: Demonstrates the basic wrapper usage of MotiPressable component.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiPressable>\n  <Item />\n</MotiPressable>\n```\n\n----------------------------------------\n\nTITLE: Fixing Reanimated Web Error in React Native\nDESCRIPTION: This code addresses a Reanimated-related error on web platforms by setting the global _frameTimestamp to null. This is a temporary fix until Reanimated v3.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/web.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Platform } from 'react-native'\nif (Platform.OS === 'web') {\n  global._frameTimestamp = null\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MotiPressable Component\nDESCRIPTION: Shows how to import the MotiPressable component from the moti/interactions package. This is the first step required to use Moti interactions.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/overview.mdx#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MotiPressable } from 'moti/interactions'\n```\n\n----------------------------------------\n\nTITLE: MotiPressableProps Type Definition in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript type for MotiPressableProps, which includes various props such as animate, onPress, onHoverIn, disabled, and more. It also includes comments explaining the usage of certain props.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/pressable.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport type MotiPressableProps = {\n  /*\n   * Worklet that returns the `animated` prop. Or, just a normal `animate` prop, similar to `MotiView`.\n   *\n   * It's recomended that you memoize this prop with `useCallback`.\n   *\n   * ```tsx\n   * <MotiPressable\n   *   animate={useCallback(({ hovered }) => ({\n   *     opacity: hovered ? 0.8 : 1\n   *   }), [])}\n   * />\n   * ```\n   *\n   * @worklet\n   */\n  animate?: MotiPressableProp\n  onPress?: () => void\n  onPressIn?: () => void\n  onPressOut?: () => void\n  onHoverIn?: () => void\n  onHoverOut?: () => void\n  onLongPress?: () => void\n  hitSlop?: Insets\n  /*\n   * (Optional) Unique ID to identify this interaction.\n   *\n   * If set, then other children of this component can access the interaction state\n   */\n  id?: string\n  disabled?: boolean\n  containerStyle?: ViewStyle\n  dangerouslySilenceDuplicateIdsWarning?: boolean\n  /*\n   * (Optional) a custom shared value to track the `pressed` state.\n   * This lets you get access to the pressed state from outside of the component in a controlled fashion.\n   */\n  pressedValue?: Animated.SharedValue<boolean>\n  /*\n   * (Optional) a custom shared value to track the `pressed` state.\n   * This lets you get access to the pressed state from outside of the component in a controlled fashion.\n   */\n  hoveredValue?: Animated.SharedValue<boolean>\n} & Pick<\n  ComponentProps<typeof MotiView>,\n  'children' | 'exit' | 'from' | 'transition' | 'exitTransition' | 'style'\n>\n```\n\n----------------------------------------\n\nTITLE: Importing useAnimationState and MotiView in React Native\nDESCRIPTION: Shows how to import the necessary components from the Moti library to use the useAnimationState hook.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-animation-state.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MotiView, useAnimationState } from 'moti'\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Web Support in Expo\nDESCRIPTION: This snippet shows how to modify the Metro configuration to add 'mjs' to sourceExts, enabling proper web support for Moti in Expo projects.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/web.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.assetExts.push(\n  'mjs'\n);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using Moti Components in React Native\nDESCRIPTION: Demonstrates the basic usage syntax of a Moti component (MotiView) in a React Native application.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/components.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiView />\n```\n\n----------------------------------------\n\nTITLE: Adding RAF polyfill to Next.js _app.js\nDESCRIPTION: Implementation for the Next.js _app.js file that imports the requestAnimationFrame polyfill needed for Reanimated web to work with server-side rendering.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/next-js.md#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport 'raf/polyfill' // add this at the top\n\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Reading values from useInterpolateMotiPressable derived value\nDESCRIPTION: Shows how to access the resulting values from the useInterpolateMotiPressable hook using the .value property.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-interpolate.md#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst swipePosition = useSharedValue(0)\nconst interpolatedValue = useInterpolateMotiPressable<{ done: boolean }>(\n  'menu',\n  ({ pressed }) => {\n    'worklet'\n\n    return {\n      done: swipePosition.value > 50 && !pressed,\n    }\n  }\n)\n\n// then, in some worklet\nconst done = state.value.done\n```\n\n----------------------------------------\n\nTITLE: Importing AnimatePresence from Moti\nDESCRIPTION: Shows how to import the AnimatePresence component for mount/unmount animations.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-overview.md#2025-04-15_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AnimatePresence } from 'moti'\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js to transpile Moti\nDESCRIPTION: Configuration for next.config.js that sets up module transpilation for Moti along with other common Next.js plugins for fonts, images, and Expo integration.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/next-js.md#2025-04-15_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { withExpo } = require('@expo/next-adapter')\nconst withFonts = require('next-fonts')\nconst withImages = require('next-images')\nconst withPlugins = require('next-compose-plugins')\n\nconst withTM = require('next-transpile-modules')(['moti']) \nmodule.exports = withPlugins(\n  [withTM, withFonts, withImages, [withExpo, { projectRoot: __dirname }]],\n  {\n    // ...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: MotiPressable Container Structure\nDESCRIPTION: Example showing the structure of nested MotiPressable components for a list implementation.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressables.md#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<MotiPressable id=\"list\">\n  {items.map(id =>\n    <MotiPressable id={`item-${id}`} key={id}>\n      <ListItem id={id} />\n    </MotiPressable>\n  )}\n<MotiPressable>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Animation Types for Moti in TypeScript\nDESCRIPTION: This code snippet defines types and interfaces for custom animations in the Moti library. It includes types for animation properties and a custom animation definition called 'shimmer'.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/animations-sequence.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MotiTransition } from '@motify/core'\n\nexport interface AnimationConfig {\n  from: {\n    opacity?: number\n    scale?: number\n    translateY?: number\n  }\n  to: {\n    opacity?: number\n    scale?: number\n    translateY?: number\n  }\n  transition?: MotiTransition\n}\n\nexport type Variant = 'shimmer'\n\nexport interface CustomAnimationConfig {\n  shimmer: AnimationConfig\n}\n\ndeclare module '@motify/core' {\n  interface MotiAnimationProp {\n    preset?: Variant\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding StackBlitz Example for Exit Before Enter Animation\nDESCRIPTION: This snippet embeds a StackBlitz IDE instance that demonstrates the exit-before-enter animation pattern implementation using Moti. The example is accessible through an iframe pointing to a Next.js project.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/examples/exit-before-enter.md#2025-04-15_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://stackblitz.com/edit/nextjs-dc1m4i?embed=1&file=pages/index.tsx\" className=\"stackblitz\" />\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript generics with useInterpolateMotiPressable\nDESCRIPTION: Demonstrates how to use TypeScript generics to type the return value of the useInterpolateMotiPressable hook.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-interpolate.md#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst swipePosition = useSharedValue(0)\nconst interpolatedValue = useInterpolateMotiPressable<{ done: boolean }>(\n  'menu',\n  ({ pressed }) => {\n    'worklet'\n\n    return {\n      done: swipePosition.value > 50 && !pressed,\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing useMotiPressable Hook - TypeScript/React\nDESCRIPTION: Shows how to import the useMotiPressable hook from the moti/interactions package.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMotiPressable } from 'moti/interactions'\n```\n\n----------------------------------------\n\nTITLE: Embedding StackBlitz Example of Skeleton Component in Next.js\nDESCRIPTION: An iframe embedding a StackBlitz example showcasing the Skeleton component implementation in a Next.js project. The example is focused on the index.tsx file to demonstrate usage patterns.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/examples/skeleton.md#2025-04-15_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://stackblitz.com/edit/nextjs-g2ae39?embed=1&file=pages/index.tsx\" className=\"stackblitz\" />\n```\n\n----------------------------------------\n\nTITLE: mergeAnimateProp API Signature\nDESCRIPTION: The API signature for the mergeAnimateProp function, which takes the interaction state, an optional animate prop, and optional overrides.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/merge.md#2025-04-15_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nmergeAnimateProp(interaction, animateProp?, overrides?)\n```\n\n----------------------------------------\n\nTITLE: Importing useMotiPressables Hook in TSX\nDESCRIPTION: Basic import statement for the useMotiPressables hook from the moti/interactions package.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressables.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMotiPressables } from 'moti/interactions'\n```\n\n----------------------------------------\n\nTITLE: Importing useMotiPressableAnimatedProps from Moti\nDESCRIPTION: Shows how to import the useMotiPressableAnimatedProps hook from the Moti library's interactions module.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-animated-props.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMotiPressableAnimatedProps } from 'moti/interactions'\n```\n\n----------------------------------------\n\nTITLE: Importing useMotiPressableTransition in React Native\nDESCRIPTION: Basic import statement for the useMotiPressableTransition hook from the Moti interactions module.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-transition.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMotiPressableTransition } from 'moti/interactions'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multiple Transform Order Example\nDESCRIPTION: Example demonstrating how inconsistent transform order between from and animate props will break animations.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/transforms.md#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// 🚨 from & animate don't have the same orders for transforms!\n// this will break\n<MotiView\n  from={{\n    translateX: -10\n    scale: 0,\n  }}\n  animate={{\n    scale: 1,\n    translateX: 0\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing motifySvg from Moti SVG Module\nDESCRIPTION: Shows how to import the motifySvg function from the Moti SVG module.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/motify-svg.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { motifySvg } from 'moti/svg'\n```\n\n----------------------------------------\n\nTITLE: Importing useInterpolateMotiPressable from Moti\nDESCRIPTION: Basic import statement for the useInterpolateMotiPressable hook from the Moti interactions module.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-interpolate.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useInterpolateMotiPressable } from 'moti/interactions'\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Moti Website\nDESCRIPTION: Command to generate static website content into the build directory, which can then be served using any static content hosting service.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/README.md#2025-04-15_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of useAnimationState with Dynamic Values in Moti\nDESCRIPTION: This example demonstrates an incorrect implementation of useAnimationState where dynamic values (based on isLoading state) won't automatically update the animation. The opacity value won't change reactively when isLoading changes.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/hooks/use-animation-state.md#2025-04-15_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// 🚨 bad, do not do this\nconst state = useAnimationState({\n  box: {\n    // 😡 this will not update!\n    opacity: isLoading ? 1 : 0,\n  },\n})\n\nreturn <MotiView state={state} />\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Moti Website\nDESCRIPTION: Command to start the local development server which opens a browser window and enables live reloading for most changes.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/README.md#2025-04-15_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of animatedProps with animate on Web\nDESCRIPTION: Demonstrates an incorrect way of using animatedProps and animate props together on the same component in a web environment, which can cause issues.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/interactions/use-pressable-animated-props.md#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n//  🚨 bad\nconst animateProps = useMotiPressableAnimatedProps(...)\n\n<MotiView animate={...} animatedProps={animatedProps}>\n\n</MotiView>\n```\n\n----------------------------------------\n\nTITLE: Deploying Moti Website to GitHub Pages\nDESCRIPTION: Command to build the website and deploy it to GitHub Pages by pushing to the gh-pages branch. Requires specifying GitHub username and SSH preference.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/README.md#2025-04-15_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nGIT_USER=<Your GitHub username> USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Features Added in Moti v0.0.5\nDESCRIPTION: Commit reference adding mount animation functionality for use-animation-state in Moti package version 0.0.5.\nSOURCE: https://github.com/nandorojo/moti/blob/master/packages/moti/CHANGELOG.md#2025-04-15_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- mount animation for use-animation-state ([566abbe](https://github.com/nandorojo/moti/commit/566abbe83786fb785e650fbd80fbe7c685093957))\n```\n\n----------------------------------------\n\nTITLE: Recording Version Changes in Moti Changelog\nDESCRIPTION: A changelog entry documenting version changes and bug fixes in the Moti animation library, following standardized commit message conventions.\nSOURCE: https://github.com/nandorojo/moti/blob/master/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n### Bug Fixes\n* expo web docs. close [#280](https://github.com/nandorojo/moti/issues/280)\n* hoverable without swc plugin\n* hermes\n\n### Features\n* improve skeleton perf, add react-native-linear-gradient support\n* shared values in animate prop\n* add decay support\n* focus props\n* interactions: export <MotiHover />, improve hover listeners\n```\n\n----------------------------------------\n\nTITLE: Fixing AnimatedGradient Props in JavaScript\nDESCRIPTION: Passes the backgroundSize prop to the AnimatedGradient component.\nSOURCE: https://github.com/nandorojo/moti/blob/master/CHANGELOG.md#2025-04-15_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<AnimatedGradient\n  backgroundSize={backgroundSize}\n  {...otherProps}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing module-resolver for react-native-linear-gradient\nDESCRIPTION: Installation command for the Babel module resolver plugin when using react-native-linear-gradient.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install babel-plugin-module-resolver\n```\n\n----------------------------------------\n\nTITLE: Adding Repeat Option to Sequences in JavaScript\nDESCRIPTION: Allows sequences to be repeated and fixes custom presence animations. Also only applies initialStyle if it exists.\nSOURCE: https://github.com/nandorojo/moti/blob/master/CHANGELOG.md#2025-04-15_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sequence = [\n  { opacity: 0 },\n  { opacity: 1 },\n  { repeat: 3 }\n]\n\nMoti.View.animate(sequence)\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server for the Dripsy example project.\nSOURCE: https://github.com/nandorojo/moti/blob/master/examples/with-next/README.md#2025-04-15_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn next\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Moti Website\nDESCRIPTION: Command to install all required dependencies for the Moti project website using Yarn package manager.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/README.md#2025-04-15_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Cloning Dripsy Repository\nDESCRIPTION: Commands to clone the Dripsy repository and navigate to the project directory.\nSOURCE: https://github.com/nandorojo/moti/blob/master/examples/with-next/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/nandorojo/dripsy\ncd dripsy\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Page - Markdown\nDESCRIPTION: Markdown configuration block for setting documentation page properties, including hiding the title and table of contents while setting a custom sidebar label.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/examples/menu-icon.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nhide_title: true\nhide_table_of_contents: true\nsidebar_label: Animated Menu Icon\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Highlight Component in MDX with JSX\nDESCRIPTION: This code defines a React component called Highlight that applies styling to text. The component accepts children content and a color prop, rendering the children within a styled span element.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs-samples/mdx.md#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Highlight = ({children, color}) => ( <span style={{\n      backgroundColor: color,\n      borderRadius: '2px',\n      color: '#fff',\n      padding: '0.2rem',\n    }}>{children}</span> );\n```\n\n----------------------------------------\n\nTITLE: Creating a new React Native project with Moti using Expo\nDESCRIPTION: Command to create a new React Native application with Moti pre-configured using Expo's starter template.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/installation.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-react-native-app -t with-moti\n```\n\n----------------------------------------\n\nTITLE: Installing Moti with Yarn\nDESCRIPTION: Command to install the Moti package using Yarn package manager.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/installation.md#2025-04-15_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add moti\n```\n\n----------------------------------------\n\nTITLE: Installing Moti with NPM\nDESCRIPTION: Command to install the Moti package using NPM package manager with legacy peer dependencies flag to handle potential version conflicts.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/installation.md#2025-04-15_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i moti --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Installing next-transpile-modules for Moti in Next.js\nDESCRIPTION: Command to install the next-transpile-modules package which is required to properly transpile the Moti animation library in a Next.js project.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/next-js.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add next-transpile-modules\n```\n\n----------------------------------------\n\nTITLE: Installing expo-linear-gradient for Non-Expo Users\nDESCRIPTION: Installation command for non-Expo users to add the expo-linear-gradient dependency.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-linear-gradient\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for react-native-linear-gradient\nDESCRIPTION: Babel configuration to alias the skeleton imports for react-native-linear-gradient usage.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/skeleton.mdx#2025-04-15_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// babel.config.js\nmodule.exports = function (api) {\n  api.cache(true)\n  return {\n    plugins: [\n      [\n        'module-resolver',\n        {\n          root: ['./'],\n          alias: {\n            'moti/skeleton': 'moti/skeleton/react-native-linear-gradient',\n          },\n        },\n      ],\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking and Installing Dependencies\nDESCRIPTION: Commands to install dependencies, create a symlink for Dripsy, and set up the Next.js example project.\nSOURCE: https://github.com/nandorojo/moti/blob/master/examples/with-next/README.md#2025-04-15_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn\nyarn link\ncd next-example\nyarn\nyarn link dripsy\n```\n\n----------------------------------------\n\nTITLE: Features Added in Moti v0.2.0\nDESCRIPTION: Commit references adding Next.js support to the Moti package in version 0.2.0.\nSOURCE: https://github.com/nandorojo/moti/blob/master/packages/moti/CHANGELOG.md#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- next js, unfinished ([6d78cb6](https://github.com/nandorojo/moti/commit/6d78cb6ef8a56736e43f7dcf536f501853d17b09))\n- nextjs support ([da3eae4](https://github.com/nandorojo/moti/commit/da3eae4b1593b409b5807baa5279f4482b998412))\n```\n\n----------------------------------------\n\nTITLE: Bug Fixes for Broken Types in Moti v0.5.5\nDESCRIPTION: Commit references fixing broken types and main library type issues in the Moti package version 0.5.5.\nSOURCE: https://github.com/nandorojo/moti/blob/master/packages/moti/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- broken types ([320f66f](https://github.com/nandorojo/moti/commit/320f66f1c0861e9ab3f47a06289183745e958d59))\n- main lib types ([65c1a32](https://github.com/nandorojo/moti/commit/65c1a3298ca374dcaeca22b7783d99ecc4c62d72))\n```\n\n----------------------------------------\n\nTITLE: Conventional Commits Link in Markdown\nDESCRIPTION: Markdown link to the Conventional Commits documentation for commit guidelines.\nSOURCE: https://github.com/nandorojo/moti/blob/master/packages/moti/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Conventional Commits](https://conventionalcommits.org)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function with Line Highlighting\nDESCRIPTION: Example of a JavaScript function with specific line highlighting capabilities using the {2} syntax\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs-samples/doc1.md#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction highlightMe() {\n  console.log('This line can be highlighted!')\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multiple Transforms for Older Reanimated\nDESCRIPTION: Example showing how multiple direct transforms will not work with Reanimated 2.2 or older.\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs/api/transforms.md#2025-04-15_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// 🚨 if you're only using multiple transforms, use an array\n<MotiView\n  from={{\n    scale: 0,\n    translateY: -10,\n  }}\n  animate={{\n    scale: 1,\n    translateY: 0,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python Syntax Highlighting\nDESCRIPTION: Example showing basic Python code with syntax highlighting in a Markdown code block\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs-samples/doc1.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ns = \"Python syntax highlighting\"\nprint(s)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Syntax Highlighting\nDESCRIPTION: Example showing basic JavaScript code with syntax highlighting in a Markdown code block\nSOURCE: https://github.com/nandorojo/moti/blob/master/docs/docs-samples/doc1.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = 'JavaScript syntax highlighting'\nalert(s)\n```"
  }
]