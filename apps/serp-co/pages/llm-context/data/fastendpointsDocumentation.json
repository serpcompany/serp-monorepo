[
  {
    "owner": "fastendpoints",
    "repo": "documentation",
    "content": "TITLE: Creating a Response DTO for FastEndpoints\nDESCRIPTION: Definition of a response data transfer object (DTO) that will be sent back to clients after processing their requests.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyResponse\n{\n    public string FullName { get; set; }\n    public bool IsOver18 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Bearer Authentication in Program.cs\nDESCRIPTION: Setup code for JWT Bearer authentication in a FastEndpoints application. It adds authentication and authorization services and middleware to the application pipeline.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing FastEndpoints;\nusing FastEndpoints.Security; //add this\n\nvar bld = WebApplication.CreateBuilder();\nbld.Services\n   .AddAuthenticationJwtBearer(s => s.SigningKey = \"The secret used to sign tokens\") //add this\n   .AddAuthorization() //add this\n   .AddFastEndpoints();\n\nvar app = bld.Build();\napp.UseAuthentication() //add this\n   .UseAuthorization() //add this\n   .UseFastEndpoints();\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Result Type Endpoint with ExecuteAsync\nDESCRIPTION: Example of an endpoint that returns only one type of result (NotFound) using the ExecuteAsync method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : EndpointWithoutRequest<NotFound>\n{\n    public override void Configure() { ... }\n\n    public override async Task<NotFound> ExecuteAsync(CancellationToken ct)\n    {\n        await Task.CompletedTask;\n        return TypedResults.NotFound();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Refresh Token Login Endpoint in FastEndpoints\nDESCRIPTION: This code shows how to create a login endpoint that issues initial access and refresh tokens. It uses a custom token service to generate the tokens and configures user privileges to be embedded in the access token.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic class LoginEndpoint : EndpointWithoutRequest<TokenResponse>\n{\n    public override void Configure()\n    {\n        Get(\"/api/login\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(CancellationToken c)\n    {\n        //user credential checking has been omitted for brevity\n\n        Response = await CreateTokenWith<MyTokenService>(\"user-id-001\", u =>\n        {\n            u.Roles.AddRange(new[] { \"Admin\", \"Manager\" });\n            u.Permissions.Add(\"Update_Something\");\n            u.Claims.Add(new(\"UserId\", \"user-id-001\"));\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Response DTO Handler in C#\nDESCRIPTION: Shows how to implement an endpoint that returns a response DTO using ExecuteAsync() method instead of HandleAsync(). This pattern is useful for unit testing as it provides direct access to the response object.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AdminLogin : Endpoint<LoginRequest, LoginResponse>\n{\n    public override void Configure()\n    {\n        Post(\"/admin/login\");\n        AllowAnonymous();\n    }\n\n    public override Task<LoginResponse> ExecuteAsync(LoginRequest req, CancellationToken ct)\n    {\n        return Task.FromResult(\n            new LoginResponse\n            {\n                JWTToken = \"xxx\",\n                ExpiresOn = \"yyy\"\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Login Endpoint with JWT Token Generation\nDESCRIPTION: Example of an endpoint that validates user credentials and generates a JWT token with roles and claims. The JwtBearer.CreateToken method is used to create a token with specified expiration and user information.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UserLoginEndpoint : Endpoint<LoginRequest>\n{\n    public override void Configure()\n    {\n        Post(\"/api/login\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(LoginRequest req, CancellationToken ct)\n    {\n        if (await myAuthService.CredentialsAreValid(req.Username, req.Password, ct))\n        {\n            var jwtToken = JwtBearer.CreateToken(\n                o =>\n                {\n                    o.SigningKey = \"A secret token signing key\";\n                    o.ExpireAt = DateTime.UtcNow.AddDays(1);\n                    o.User.Roles.Add(\"Manager\", \"Auditor\");\n                    o.User.Claims.Add((\"UserName\", req.Username));\n                    o.User[\"UserId\"] = \"001\"; //indexer based claim setting\n                });\n\n            await SendAsync(\n                new\n                {\n                    req.Username,\n                    Token = jwtToken\n                });\n        }\n        else\n            ThrowError(\"The supplied credentials are invalid!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Web Project with FastEndpoints Package\nDESCRIPTION: Terminal commands to create a new ASP.NET Core web project and install the FastEndpoints package.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet new web -n MyWebApp\ncd MyWebApp\ndotnet add package FastEndpoints\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Default Request Binder in FastEndpoints\nDESCRIPTION: Demonstrates how to inherit from the built-in default request binder while adding custom behavior. This approach allows leveraging existing binding functionality while adding enhancements.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyBinder : RequestBinder<Request>\n{\n    public async override ValueTask<Request> BindAsync(BinderContext ctx, CancellationToken ct)\n    {\n        await base.BindAsync(ctx, ct);\n\n        // do your binding here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Idempotent Endpoint in FastEndpoints\nDESCRIPTION: Demonstrates how to make an endpoint idempotent by adding the Idempotency() method in the Configure() method. This simple endpoint returns a timestamp that would normally change with each request, but remains the same for identical requests due to idempotency.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...22]idempotency.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class MyEndpoint : EndpointWithoutRequest\n{\n    public override void Configure()\n    {\n        Get(\"my-endpoint\");\n        AllowAnonymous();\n        Idempotency(); //add this\n    }\n\n    public override async Task HandleAsync(CancellationToken c)\n    {\n        await SendAsync($\"TimeStamp: {DateTime.Now.Ticks}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CancellationToken with SendAsync\nDESCRIPTION: Demonstrates passing a cancellation token to the SendAsync method, though this is optional as the HandleAsync token is used by default.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nawait SendAsync(response, cancellation: ct);\n```\n\n----------------------------------------\n\nTITLE: Adding Rate Limiting to Minimal API Endpoints in C#\nDESCRIPTION: This snippet shows how to add rate limiting to Minimal API endpoints using the RequireRateLimiting extension method. It applies a predefined rate limiting policy named 'limiterPolicy' to the endpoint.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...9]rate-limiting.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    ...\n    Options(x => x.RequireRateLimiting(\"limiterPolicy\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FastEndpoints in Program.cs\nDESCRIPTION: Setup code for configuring FastEndpoints in an ASP.NET Core application's Program.cs file. Adds FastEndpoints services and middleware to the application pipeline.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing FastEndpoints;\n\nvar bld = WebApplication.CreateBuilder();\nbld.Services.AddFastEndpoints();\n\nvar app = bld.Build();\napp.UseFastEndpoints();\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Enabling Versioning with FastEndpoints\nDESCRIPTION: Shows how to enable API versioning by specifying versioning options during startup. The example demonstrates setting a prefix for version numbers.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\napp.UseFastEndpoints(c =>\n{\n    c.Versioning.Prefix = \"v\";\n});\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection in Pre/Post Processors\nDESCRIPTION: Shows how to handle dependencies in pre/post processors, including constructor injection of singleton services and resolving scoped dependencies.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyRequestLogger<TRequest> : IPreProcessor<TRequest>\n{\n    readonly IServiceScopeFactory _scopeFactory;\n\n    public MyRequestLogger(IServiceScopeFactory scopeFactory, ILogger<TRequest> logger)\n    {\n        _scopeFactory = scopeFactory;\n        logger.LogInformation(\"this will only be logged once\");\n    }\n\n    public async Task PreProcessAsync(IPreProcessorContext<TRequest> ctx, CancellationToken ct)\n    {\n        var serviceA = ctx.HttpContext.Resolve<IScopedServiceA>();\n\n        using var scope = _scopeFactory.CreateScope();\n        var serviceB = scope.Resolve<IScopedServiceB>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Caching Middleware in ASP.NET Core with FastEndpoints\nDESCRIPTION: This code demonstrates how to set up response caching middleware in a FastEndpoints application. It adds the necessary services to the dependency injection container and configures the middleware pipeline to enable response caching.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...8]response-caching.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar bld = WebApplication.CreateBuilder();\nbld.Services\n   .AddFastEndpoints()\n   .AddResponseCaching(); //add this\n\nvar app = bld.Build();\napp.UseResponseCaching() //add this before FE\n   .UseFastEndpoints();\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing an Endpoint Class with FastEndpoints\nDESCRIPTION: Implementation of an endpoint class that handles HTTP POST requests, processes the request data, and returns a response to the client.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : Endpoint<MyRequest, MyResponse>\n{\n    public override void Configure()\n    {\n        Post(\"/api/user/create\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(MyRequest req, CancellationToken ct)\n    {\n        await SendAsync(new()\n        {\n            FullName = req.FirstName + \" \" + req.LastName,\n            IsOver18 = req.Age > 18\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Schemes in Swagger for C#\nDESCRIPTION: This code shows how to enable multiple global authentication schemes in Swagger documentation, including API Key and Bearer token authentication.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.SwaggerDocument(o =>\n{\n    o.EnableJWTBearerAuth = false;\n    o.DocumentSettings = s =>\n    {\n        s.DocumentName = \"Initial-Release\";\n        s.Title = \"Web API\";\n        s.Version = \"v1.0\";\n        s.AddAuth(\"ApiKey\", new()\n        {\n            Name = \"api_key\",\n            In = OpenApiSecurityApiKeyLocation.Header,\n            Type = OpenApiSecuritySchemeType.ApiKey,\n        });\n        s.AddAuth(\"Bearer\", new()\n        {\n            Type = OpenApiSecuritySchemeType.Http,\n            Scheme = JwtBearerDefaults.AuthenticationScheme,\n            BearerFormat = \"JWT\",\n        });\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Open Generic Global Processors in FastEndpoints\nDESCRIPTION: Shows how to register open generic pre-processors globally using the endpoint configurator function in the application startup. The example registers a RequestLogger<> type as a global pre-processor.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c =>\n{\n    c.Endpoints.Configurator = ep =>\n    {\n        ep.PreProcessors(Order.Before, typeof(RequestLogger<>));\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Responses in FastEndpoints\nDESCRIPTION: Shows how to override the default error response format by providing a custom response builder function that generates formatted error responses based on validation failures.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c =>\n{\n    c.Errors.ResponseBuilder = (failures, ctx, statusCode) =>\n    {\n        return new ValidationProblemDetails(\n            failures.GroupBy(f => f.PropertyName)\n                    .ToDictionary(\n                        keySelector: e => e.Key,\n                        elementSelector: e => e.Select(m => m.ErrorMessage).ToArray()))\n        {\n            Type = \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\n            Title = \"One or more validation errors occurred.\",\n            Status = statusCode,\n            Instance = ctx.Request.Path,\n            Extensions = { { \"traceId\", ctx.TraceIdentifier } }\n        };\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Antiforgery Tokens in C# with FastEndpoints\nDESCRIPTION: This endpoint generates antiforgery tokens using the IAntiforgery service and sends them to the client as a JSON response. It demonstrates property injection of the IAntiforgery service and configures a GET route for token retrieval.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class TokenEndpoint : EndpointWithoutRequest\n{\n    public IAntiforgery Antiforgery { get; set; } //property injection\n\n    public override void Configure() => Get(\"anti-forgery-token\");\n\n    public override async Task HandleAsync(CancellationToken c)\n    {\n        var tokenSet = Antiforgery.GetAndStoreTokens(HttpContext);\n        await SendAsync(\n            new\n            {\n                formFieldName = tokenSet.FormFieldName,\n                token = tokenSet.RequestToken\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Request DTO for FastEndpoints\nDESCRIPTION: Definition of a request data transfer object (DTO) that will be used to receive data from client requests.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyRequest\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public int Age { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Endpoint Options in FastEndpoints\nDESCRIPTION: Demonstrates how to apply common settings to selected endpoints by configuring a global endpoint configurator that executes for each endpoint during startup.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c =>\n{\n    c.Endpoints.Configurator = ep =>\n    {\n        if (ep.Routes[0].StartsWith(\"/public\") is true)\n        {\n            ep.AllowAnonymous();\n            ep.Options(b => b.RequireHost(\"www.domain.com\"));\n            ep.Description(b => b.Produces<ErrorResponse>(400, \"application/problem+json\"));\n        }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Using AccessControl with Separate Permission Requirements in FastEndpoints\nDESCRIPTION: Shows how to use AccessControl for generating permissions while still requiring explicit permission requirements using the Permissions method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Post(\"/article\");\n    AccessControl(\"Article_Create\");\n    Permissions(Allow.Article_Create) \n    //without this, even users who don't have article creation permission -\n    //would be able to access this endpoint.\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Endpoints with FakeItEasy in C#\nDESCRIPTION: Demonstrates how to perform unit testing on endpoints using FakeItEasy for mocking dependencies and Factory.Create<TEndpoint>() for instantiating endpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task Admin_Login_Success()\n{\n    // Arrange\n    var fakeConfig = A.Fake<IConfiguration>();\n    A.CallTo(() => fakeConfig[\"TokenKey\"]).Returns(\"Fake_Token_Signing_Secret\");\n\n    var ep = Factory.Create<AdminLoginEndpoint>(\n        A.Fake<ILogger<AdminLoginEndpoint>>(), //mock dependencies for injecting to the constructor\n        A.Fake<IEmailService>(),\n        fakeConfig);\n\n    var req = new AdminLoginRequest\n    {\n        UserName = \"admin\",\n        Password = \"pass\"\n    };\n\n    // Act\n    await ep.HandleAsync(req, default);\n    var rsp = ep.Response;\n\n    // Assert\n    Assert.IsNotNull(rsp);\n    Assert.IsFalse(ep.ValidationFailed);\n    Assert.IsTrue(rsp.Permissions.Contains(\"Inventory_Delete_Item\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Sent Events in C# with FastEndpoints\nDESCRIPTION: This endpoint demonstrates how to create a server-sent event stream using FastEndpoints. It configures a GET endpoint that sends an event stream named 'my-event' to clients, producing a new GUID every second until the connection is closed.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...16]server-sent-events.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class EventStream : EndpointWithoutRequest\n{\n    public override void Configure()\n    {\n        Get(\"event-stream\");\n        AllowAnonymous();\n        Options(x => x.RequireCors(p => p.AllowAnyOrigin()));\n    }\n\n    public override async Task HandleAsync(CancellationToken ct)\n    {\n        //simply provide any IAsyncEnumerable<T> as argument\n        await SendEventStreamAsync(\"my-event\", GetDataStream(ct), ct);\n    }\n\n    private async IAsyncEnumerable<object> GetDataStream([EnumeratorCancellation] CancellationToken ct)\n    {\n        while (!ct.IsCancellationRequested)\n        {\n            await Task.Delay(1000);\n            yield return new { guid = Guid.NewGuid() };\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Refresh Token Service in FastEndpoints\nDESCRIPTION: This snippet demonstrates how to create a custom token service for handling JWT refresh tokens. It configures token settings, implements token persistence, request validation, and privilege renewal methods required for the refresh token flow.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyTokenService : RefreshTokenService<TokenRequest, TokenResponse>\n{\n    public MyTokenService(IConfiguration config)\n    {\n        Setup(o =>\n        {\n            o.TokenSigningKey = config[\"TokenSigningKey\"];\n            o.AccessTokenValidity = TimeSpan.FromMinutes(5);\n            o.RefreshTokenValidity = TimeSpan.FromHours(4);\n\n            o.Endpoint(\"/api/refresh-token\", ep =>\n            {\n                ep.Summary(s => s.Summary = \"this is the refresh token endpoint\");\n            });\n        });\n    }\n\n    public override async Task PersistTokenAsync(TokenResponse response)\n    {\n        await Data.StoreToken(response);\n\n        // this method will be called whenever a new access/refresh token pair is being generated.\n        // store the tokens and expiry dates however you wish for the purpose of verifying\n        // future refresh requests.        \n    }\n\n    public override async Task RefreshRequestValidationAsync(TokenRequest req)\n    {\n        if (!await Data.TokenIsValid(req.UserId, req.RefreshToken))\n            AddError(r => r.RefreshToken, \"Refresh token is invalid!\");\n\n        // validate the incoming refresh request by checking the token and expiry against the\n        // previously stored data. if the token is not valid and a new token pair should\n        // not be created, simply add validation errors using the AddError() method.\n        // the failures you add will be sent to the requesting client. if no failures are added,\n        // validation passes and a new token pair will be created and sent to the client.        \n    }\n\n    public override Task SetRenewalPrivilegesAsync(TokenRequest request, UserPrivileges privileges)\n    {\n        privileges.Roles.Add(\"Manager\");\n        privileges.Claims.Add(new(\"ManagerID\", request.UserId));\n        privileges.Permissions.Add(\"Manage_Department\");\n\n        // specify the user privileges to be embedded in the jwt when a refresh request is\n        // received and validation has passed. this only applies to renewal/refresh requests\n        // received to the refresh endpoint and not the initial jwt creation.        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Handler with Scoped Dependencies in C#\nDESCRIPTION: Demonstrates how to inject scoped dependencies into a command handler using constructor injection. Command handlers are instantiated per execution, allowing scoped services to be used directly without creating a new scope.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyCommandHandler : ICommandHandler<MyCommand, string>\n{\n    private readonly IScopedService _scopedService;\n\n    public MyCommandHandler(IScopedService scopedService, ILogger<MyCommandHandler> logger)\n    {\n        _scopedService = scopedService;\n        logger.LogInformation(\"this will logged on each execution\");\n    }\n\n    public async Task<string> ExecuteAsync(MyCommand command, CancellationToken ct)\n    {\n        return await _scopedService.GetSomething();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling FastEndpoints Exception Handler in Program.cs\nDESCRIPTION: Demonstrates how to enable the FastEndpoints exception handler middleware during application startup. It includes adding FastEndpoints services and using the default exception handler.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...17]exception-handler.md#2025-04-21_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar bld = WebApplication.CreateBuilder();\nbld.Services.AddFastEndpoints();\n\nvar app = bld.Build();\napp.UseDefaultExceptionHandler()\n   .UseFastEndpoints();\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Route Configuration\nDESCRIPTION: Demonstrates the shorthand method for configuring endpoint routes using HTTP verb-specific methods\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...20]misc-conveniences.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Get(\"/api/customer/{CustomerID}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swagger Documents as Release Groups\nDESCRIPTION: Demonstrates how to configure Swagger documents that represent different release groups of the API. Each document can be configured with a maximum endpoint version to include only appropriate endpoint versions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nbld.Services\n   .SwaggerDocument(o =>\n   {\n       o.DocumentSettings = s =>\n       {\n           s.DocumentName = \"Initial Release\";\n           s.Title = \"My API\";\n           s.Version = \"v0\";\n       };\n   })\n   .SwaggerDocument(o =>\n   {\n       o.MaxEndpointVersion = 1;\n       o.DocumentSettings = s =>\n       {\n           s.DocumentName = \"Release 1\";\n           s.Title = \"My API\";\n           s.Version = \"v1\";\n       };\n   })\n   .SwaggerDocument(o =>\n   {\n       o.MaxEndpointVersion = 2;\n       o.DocumentSettings = s =>\n       {\n           s.DocumentName = \"Release 2\";\n           s.Title = \"My API\";\n           s.Version = \"v2\";\n       };\n   });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Command Handler with Error Manipulation\nDESCRIPTION: Shows how to use CommandHandler<> abstract type to manipulate validation/error state by adding property-specific errors, throwing general errors, and conditionally validating input data.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FullNameHandler : CommandHandler<GetFullName, string>\n{\n    public override Task<string> ExecuteAsync(GetFullName cmd, CancellationToken ct = default)\n    {\n        if (cmd.FirstName.Length < 5)\n            AddError(c => c.FirstName, \"first name is too short!\");\n\n        if (cmd.FirstName == \"yoda\")\n            ThrowError(\"no jedi allowed here!\");\n\n        ThrowIfAnyErrors();\n\n        return Task.FromResult(cmd.FirstName + \" \" + cmd.LastName);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Form Fields with File Data without Buffering in FastEndpoints\nDESCRIPTION: This example demonstrates how to read form field values together with file data when buffering is turned off. It uses FormMultipartSectionsAsync() to iterate through all multipart sections and extract values based on section type.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...7]file-handling.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait foreach (var sec in FormMultipartSectionsAsync(ct))\n{\n    //reading the value of a form field\n    if (sec.IsFormSection && sec.FormSection.Name == \"formFieldName\")\n    {\n        var formFieldValue = await sec.FormSection.GetValueAsync(ct);\n    }\n\n    //obtaining the stream of a file\n    if (sec.IsFileSection && sec.FileSection.Name == \"fileFieldName\")\n    {\n        var fileStream = sec.FileSection.FileStream;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined Authentication Scheme in FastEndpoints\nDESCRIPTION: This snippet demonstrates how to create a custom combined authentication scheme that uses both Cookie and JWT authentication. It configures the services and sets up a policy scheme to choose between JWT and Cookie based on the request headers.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services\n   .AddAuthenticationCookie(validFor: TimeSpan.FromMinutes(60))\n   .AddAuthenticationJwtBearer(s => s.SigningKey = \"Token signing key\")\n   .AddAuthentication(o =>\n   {\n       o.DefaultScheme = \"Jwt_Or_Cookie\";\n       o.DefaultAuthenticateScheme = \"Jwt_Or_Cookie\";\n   })\n   .AddPolicyScheme(\"Jwt_Or_Cookie\", \"Jwt_Or_Cookie\", o =>\n   {\n       o.ForwardDefaultSelector = ctx =>\n       {\n           if (ctx.Request.Headers.TryGetValue(HeaderNames.Authorization, out var authHeader) &&\n               authHeader.FirstOrDefault()?.StartsWith(\"Bearer \") is true)\n           {\n               return JwtBearerDefaults.AuthenticationScheme;\n           }\n           return CookieAuthenticationDefaults.AuthenticationScheme;\n       };\n   });\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic File Upload and Send in FastEndpoints\nDESCRIPTION: This snippet demonstrates how to configure an endpoint to accept file uploads and relay the image data back to the client. It uses AllowFileUploads() to enable multipart/form-data support and SendStreamAsync() to return the file.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...7]file-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : Endpoint<MyRequest>\n{\n    public override void Configure()\n    {\n        Post(\"/api/uploads/image\");\n        AllowFileUploads();\n    }\n\n    public override async Task HandleAsync(MyRequest req, CancellationToken ct)\n    {\n        if (Files.Count > 0)\n        {\n            var file = Files[0];\n\n            await SendStreamAsync(\n                stream: file.OpenReadStream(),\n                fileName: \"test.png\",\n                fileLengthBytes: file.Length,\n                contentType: \"image/png\");\n\n            return;\n        }\n        await SendNoContentAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Driven Response Headers\nDESCRIPTION: Shows how to use attributes to convert DTO properties into response headers automatically\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...20]misc-conveniences.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class MyResponse\n{\n    public int UserId { get; set; }\n\n    [ToHeader(\"x-session-id\")]\n    public string SessionId { get; set; }\n}\n\nsealed class UserEndpoint : EndpointWithoutRequest<MyResponse>\n{\n    ...\n\n    public override Task HandleAsync(CancellationToken c)\n        => SendAsync(\n            new()\n            {\n                UserId = 12345,\n                SessionId = \"xyzxyzxyzxyzxyzxyzxyz\"\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering JWT Revocation Middleware in FastEndpoints\nDESCRIPTION: Demonstrates how to register a JWT revocation middleware implementation in the application pipeline before any authentication-related middleware.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseJwtRevocation<MyBlacklistChecker>() //must come before auth middleware\n   .UseAuthentication()\n   .UseAuthorization()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bare-Bones Starter Project\nDESCRIPTION: Command to scaffold a new FastEndpoints starter project with traditional integration testing setup using xUnit via the dotnet CLI.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new feproj -n MyAwesomeProject\n```\n\n----------------------------------------\n\nTITLE: Basic Swagger Integration in FastEndpoints\nDESCRIPTION: Minimal setup to add Swagger documentation to a FastEndpoints application, including the necessary service and middleware configuration.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing FastEndpoints;\nusing FastEndpoints.Swagger; //add this\n\nvar bld = WebApplication.CreateBuilder();\nbld.Services\n   .AddFastEndpoints()\n   .SwaggerDocument(); //define a swagger document\n\nvar app = bld.Build();\napp.UseFastEndpoints()\n   .UseSwaggerGen(); //add this\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing FluentValidation Rules\nDESCRIPTION: Validator class implementing validation rules for CreateUserRequest using FluentValidation\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...4]validation.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyValidator : Validator<CreateUserRequest>\n{\n    public MyValidator()\n    {\n        RuleFor(x => x.FullName)\n            .NotEmpty()\n            .WithMessage(\"your name is required!\")\n            .MinimumLength(5)\n            .WithMessage(\"your name is too short!\");\n\n        RuleFor(x => x.Age)\n            .NotEmpty()\n            .WithMessage(\"we need your age!\")\n            .GreaterThan(18)\n            .WithMessage(\"you are not legal yet!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FastEndpoints.AspVersioning Package\nDESCRIPTION: This snippet shows how to install the FastEndpoints.AspVersioning package using the package manager console.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nInstall-Package FastEndpoints.AspVersioning\n```\n\n----------------------------------------\n\nTITLE: Adding Detailed Swagger Documentation with Summary\nDESCRIPTION: Enhancing endpoint documentation with summary, description, example requests and responses, and response descriptions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Post(\"/item/create\");\n    Description(b => b.Produces(403));\n    Summary(s => {\n        s.Summary = \"short summary goes here\";\n        s.Description = \"long description goes here\";\n        s.ExampleRequest = new MyRequest {...};\n        s.ResponseExamples[200] = new MyResponse {...};\n        s.Responses[200] = \"ok response description goes here\";\n        s.Responses[403] = \"forbidden response description goes here\";\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Idempotency Options in FastEndpoints\nDESCRIPTION: Demonstrates the available options for customizing idempotency behavior on an endpoint. Options include header name customization, cache duration, body content participation in cache key generation, and Swagger documentation settings.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...22]idempotency.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nIdempotency(\n    o =>\n    {\n        //idempotency-key header name.\n        o.HeaderName = \"Idempotency-Key\";\n\n        //additional header names to be considered for cache-key generation.\n        o.AdditionalHeaders.Add(\"My-Header\");\n\n        //controls whether body content participates in cache-key generation.\n        o.IgnoreRequestBody = true;\n\n        //the time limit to cache responses for.\n        o.CacheDuration = TimeSpan.FromDays(1);\n\n        //automatically adds the idempotency-key header to the response.\n        o.AddHeaderToResponse = true;\n\n        //text description for the swagger request header parameter.\n        o.SwaggerHeaderDescription = \"This is an idempotent endpoint.\";\n\n        //a function to generate example values for the swagger parameter.\n        o.SwaggerExampleGenerator = () => Guid.NewGuid().ToString(\"N\");\n\n        //used to determine the format of the swagger parameter.\n        o.SwaggerHeaderType = typeof(Guid);\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Generics for Endpoint Definition\nDESCRIPTION: Alternative syntax for defining FastEndpoints using the fluent generics pattern, which provides a more readable approach to specifying request and response types.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// equivalent of Endpoint<TRequest>\npublic class MyEndpoint : Ep.Req<MyRequest>.NoRes { }\n\n// equivalent of Endpoint<TRequest,TResponse>\npublic class MyEndpoint : Ep.Req<MyRequest>.Res<MyResponse> { }\n\n// equivalent of EndpointWithoutRequest\npublic class MyEndpoint : Ep.NoReq.NoRes { }\n\n// equivalent of EndpointWithoutRequest<TResponse>\npublic class MyEndpoint : Ep.NoReq.Res<MyResponse> { }\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Data Models in C#\nDESCRIPTION: Sample classes showing the structure of Request DTO, Response DTO, and Person entity used for demonstrating mapping functionality.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...6]domain-entity-mapping.md#2025-04-21_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\npublic class Request\n{\n    public int Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string BirthDay { get; set; }\n}\n\npublic class Response\n{\n    public int Id { get; set; }\n    public string UserName { get; set; }\n    public string FullName { get; set; }\n    public int Age { get; set; }\n}\n\npublic class Person\n{\n    public int Id { get; set; }\n    public string FullName { get; set; }\n    public DateOnly DateOfBirth { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Services in IOC Container\nDESCRIPTION: Registers the HelloWorldService as a scoped service in the dependency injection container.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddScoped<IHelloWorldService, HelloWorldService>();\n```\n\n----------------------------------------\n\nTITLE: Filtering Endpoint Registration in FastEndpoints\nDESCRIPTION: Demonstrates how to conditionally register endpoints during startup by providing a filtering function that evaluates each discovered endpoint and determines if it should be registered.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c =>\n{\n    c.Endpoints.Filter = ep =>\n    {\n        if (ep.Verbs.Contains(\"GET\") && ep.Routes.Contains(\"/api/mobile/test\"))\n        {\n            return false; // don't register this endpoint\n        }\n        return true;\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Scaffolding an Endpoint with Request DTO (epreq)\nDESCRIPTION: Code snippet for creating an endpoint with only a request DTO using the 'epreq' shortcut in Visual Studio or VSCode with FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds an endpoint with only a request dto\nsealed class Endpoint : Endpoint<Request>\n```\n\n----------------------------------------\n\nTITLE: Implementing Security Pre-Processor with Short-Circuit in C#\nDESCRIPTION: Security pre-processor that validates tenant ID header and can short-circuit request execution.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SecurityProcessor<TRequest> : IPreProcessor<TRequest>\n{\n    public Task PreProcessAsync(IPreProcessorContext<TRequest> ctx, CancellationToken ct)\n    {\n        if (!ctx.HttpContext.Request.Headers.TryGetValue(\"x-tenant-id\", out var tenantID))\n        {\n            ctx.ValidationFailures.Add(\n                new(\"MissingHeaders\", \"The [x-tenant-id] header needs to be set!\"));\n\n            return ctx.HttpContext.Response.SendErrorsAsync(ctx.ValidationFailures);\n        }\n\n        if (tenantID != \"001\")\n            return ctx.HttpContext.Response.SendForbiddenAsync();\n\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Permission Constants for Access Control in C#\nDESCRIPTION: Shows a manual approach for defining permission constants using a static class that can be referenced for endpoint authorization and JWT token creation.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class Allow\n{\n    public const string Article_Create = \"001\";\n    public const string Article_Approve = \"002\";\n    public const string Article_Reject = \"003\";\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Storage Provider with MongoDB in C#\nDESCRIPTION: Implementation of IJobStorageProvider for persisting job data using MongoDB as the backend database.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class JobStorageProvider : IJobStorageProvider<JobRecord>\n{\n    private readonly DbContext db;\n\n    public JobProvider(DbContext db)\n    {\n        this.db = db; //inject the dbContext\n    }\n\n    public Task StoreJobAsync(JobRecord job, CancellationToken ct)\n    {\n        // persist the provided job record to the database\n        return db.SaveAsync(job, ct);\n    }\n\n    public async Task<IEnumerable<JobRecord>> GetNextBatchAsync(PendingSearchParams<JobRecord> p)\n    {\n        // return a batch of pending jobs to be processed next\n        return await db\n            .Find<JobRecord>()\n            .Match(p.Match) //use the provided boolean lambda expression to match entities\n            .Limit(p.Limit) //either use the provided limit or choose your own\n            .ExecuteAsync(p.CancellationToken); //pass the provided cancellation token\n    }\n\n    public Task MarkJobAsCompleteAsync(JobRecord job, CancellationToken ct)\n    {\n        // either replace the supplied job record in the db.\n        // or do a partial update of just the 'IsComplete' property.\n        // or delete the entity now if batch deleting later is not preferred.\n        return db\n            .Update<JobRecord>()\n            .MatchID(job.ID)\n            .Modify(r => r.IsComplete, true)\n            .ExecuteAsync(ct);\n    }\n    \n    public  Task CancelJobAsync(Guid trackingId, CancellationToken ct)\n    {\n        // do a partial update of just the 'IsComplete' property.\n        // or delete the entity now if batch deleting later is not preferred.\n        return db.Update<JobRecord>()\n                 .Match(r => r.TrackingID == trackingId)\n                 .Modify(r => r.IsComplete, true)\n                 .ExecuteAsync(ct);\n    } \n\n    public Task OnHandlerExecutionFailureAsync(JobRecord job, Exception e, CancellationToken c)\n    {\n        // this is called whenever execution of a command's handler fails.\n        // do nothing here if you'd like it to be automatically retried.\n        // or update the 'ExecuteAfter' property to reschedule it to a future time.\n        // or delete (or mark as complete) the entity if retry is unnecessary.\n        return db\n            .Update<JobRecord>()\n            .MatchID(job.ID)\n            .Modify(r => r.ExecuteAfter, DateTime.UtcNow.AddMinutes(1))\n            .ExecuteAsync(c);\n    }\n\n    public Task PurgeStaleJobsAsync(StaleJobSearchParams<JobRecord> p)\n    {\n        // this method is called hourly.\n        // do whatever you like with the stale (completed/expired) jobs.\n        return db.DeleteAsync(p.Match, p.CancellationToken);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Token with Minimal Configuration\nDESCRIPTION: Creating a JWT token with minimal configuration when global options are already set. This example adds an expiration time and a user ID claim to the token.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar token = JwtBearer.CreateToken( \n    o => \n    { \n        o.ExpireAt = DateTime.UtcNow.AddHours(1); \n        o.User.Claims.Add((\"UserId\", \"001\")); \n    });\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection in FastEndpoints\nDESCRIPTION: Demonstrates constructor injection in a FastEndpoints endpoint where IHelloWorldService is injected through the constructor and stored in a private field.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : EndpointWithoutRequest\n{\n    private IHelloWorldService _helloService;\n\n    public MyEndpoint(IHelloWorldService helloScv)\n    {\n        _helloService = helloScv;\n    }\n\n    public override void Configure()\n    {\n        Get(\"/api/hello-world\");\n    }\n\n    public override async Task HandleAsync(CancellationToken ct)\n    {\n        await SendAsync(_helloService.SayHello());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Service Resolution in FastEndpoints\nDESCRIPTION: Demonstrates how to manually resolve services in FastEndpoints using TryResolve and Resolve methods within an endpoint handler.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic override async Task HandleAsync(CancellationToken ct)\n{\n    IHelloWorldService? helloSvc = TryResolve<IHelloWorldService>();\n\n    if (helloSvc is null)\n        ThrowError(\"service not resolved!\");\n\n    var logger = Resolve<ILogger<MyEndpoint>>();\n\n    logger.LogInformation(\"hello service is resolved...\");\n\n    await SendAsync(helloSvc.SayHello());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint with Starting Release Version\nDESCRIPTION: Demonstrates how to specify which release version an endpoint should first appear in using the StartingRelease method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic override void Configure()\n{\n    Version(1).StartingRelease(2);\n}\n```\n\n----------------------------------------\n\nTITLE: Binding User Claims to DTO Properties in C#\nDESCRIPTION: Illustrates how to bind user claim values to request DTO properties using the [FromClaim] attribute.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GetUserRequest\n{\n    [FromClaim]\n    public string UserID { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Endpoint with Auto-Response\nDESCRIPTION: Example of an endpoint that uses the Response property to automatically send a response without explicitly calling a send method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : EndpointWithoutRequest<MyResponse>\n{\n    public override void Configure()\n    {\n        Get(\"/api/person\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(CancellationToken ct)\n    {\n        var person = await dbContext.GetFirstPersonAsync();\n\n        Response.FullName = person.FullName;\n        Response.Age = person.Age;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Serializer Options in FastEndpoints\nDESCRIPTION: Demonstrates how to customize the System.Text.Json serializer options for FastEndpoints. This configuration affects how objects are serialized to JSON in responses.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c =>\n{\n    c.Serializer.Options.PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint Rate Limiting in C#\nDESCRIPTION: This snippet demonstrates how to configure rate limiting for an individual endpoint. It sets a hit limit of 120 requests within a 60-second window, using a custom header 'X-Client-Id' for client identification.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...9]rate-limiting.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Post(\"/order/create\");\n    Throttle(\n        hitLimit: 120,\n        durationSeconds: 60,\n        headerName: \"X-Client-Id\" // this is optional\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: User Sign-in with Cookie Authentication\nDESCRIPTION: Example of how to sign in a user using cookie authentication. The method adds roles, permissions, and claims to the user's identity which are embedded in an encrypted cookie.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nCookieAuth.SignInAsync(u =>\n{\n    u.Roles.Add(\"Admin\");\n    u.Permissions.AddRange(new[] { \"Create_Item\", \"Delete_Item\" });\n    u.Claims.Add(new(\"Address\", \"123 Street\"));\n\n    //indexer based claim setting\n    u[\"Email\"] = \"abc@def.com\";\n    u[\"Department\"] = \"Administration\";\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler for Subscriber in C#\nDESCRIPTION: Creates an event handler by implementing the IEventHandler<TEvent> interface. This handler defines how the subscriber will process received events.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\ninternal class WhenSomethingHappens : IEventHandler<SomethingHappened>\n{\n    private readonly ILogger<WhenSomethingHappens> _logger;\n\n    public WhenSomethingHappens(ILogger<WhenSomethingHappens> logger)\n    {\n        _logger = logger;\n    }\n\n    public Task HandleAsync(SomethingHappened evnt, CancellationToken ct)\n    {\n        _logger.LogInformation(\"{number} - {description}\", evnt.Id, evnt.Description);\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Complete Vertical Slice (epfull)\nDESCRIPTION: Code snippet for creating a complete set of classes for a full vertical slice of functionality using the 'epfull' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nScaffolds the complete set of classes for a full vertical slice\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Authentication Scheme with ASP.NET Identity\nDESCRIPTION: This code shows how to set up authentication with ASP.NET Identity and JWT, making JWT the default scheme. It's useful when customizing Identity models and wanting JWT as the primary authentication method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddIdentity<MyUser,MyRole>(...);\nbld.Services.AddAuthenticationJwtBearer(...);\nbld.Services.AddAuthentication(o => \n    o.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme; );\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection in Validators\nDESCRIPTION: Shows how to handle dependencies in validators, including constructor injection of singletons and resolving scoped services by creating a new scope.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyValidator : Validator<Request>\n{\n    public MyValidator(ISomeSingletonService singletonService)\n    {\n        var singletonSvc = singletonService; //from ctor injection\n        var anotherSingletonService = Resolve<IAnotherSingletonService>(); //manual resolving\n\n        //scoped dependency resolving\n        using var scope = CreateScope();\n        var scopedService = scope.Resolve<ISomeScopedService>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Large File Uploads in FastEndpoints without Buffering\nDESCRIPTION: This example shows how to handle large file uploads efficiently by reading multipart sections directly from the request stream without buffering the entire file in memory or disk. It uses AllowFileUploads(dontAutoBindFormData: true) and FormFileSectionsAsync().\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...7]file-handling.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Upload : EndpointWithoutRequest\n{\n    public override void Configure()\n    {\n        Post(\"/api/file-upload\");\n        AllowFileUploads(dontAutoBindFormData: true); //turns off buffering\n    }\n\n    public override async Task HandleAsync(CancellationToken ct)\n    {\n        await foreach (var section in FormFileSectionsAsync(ct))\n        {\n            if (section is not null)\n            {\n                using (var fs = System.IO.File.Create(section.FileName))\n                {\n                    await section.Section.Body.CopyToAsync(fs, 1024 * 64, ct);\n                }\n            }\n        }\n\n        await SendOkAsync(\"upload complete!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection in Event Handlers\nDESCRIPTION: Shows how to handle dependencies in event handlers, including constructor injection of singleton services and resolving scoped dependencies.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEventHandler : IEventHandler<MyEvent>\n{\n    private readonly IServiceScopeFactory _scopeFactory;\n\n    public MyEventHandler(IServiceScopeFactory scopeFactory, ILogger<MyEventHandler> logger)\n    {\n        _scopeFactory = scopeFactory;\n        logger.LogInformation(\"this will only be logged once\");\n    }\n\n    public async Task HandleAsync(MyEvent eventModel, CancellationToken ct)\n    {\n        using var scope = _scopeFactory.CreateScope();\n        var service = scope.Resolve<IScopedService>();\n        await service.DoSomething();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request DTO Model in C#\nDESCRIPTION: Sample CreateUserRequest DTO class definition with basic user properties\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...4]validation.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CreateUserRequest\n{\n    public string FullName { get; set; }\n    public int Age { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Validation Context Usage\nDESCRIPTION: Examples of using ValidationContext to manage validation state from anywhere in the application\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...4]validation.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n//typed validation context\nvar validationCtx = ValidationContext<Request>.Instance;\nvalidationCtx.AddError(r => r.Id, \"Bad identity!\");\nvalidationCtx.ThrowError(r => r.Id, \"Whatever...\");\n\n//untyped validation context\nvar valCtx = ValidationContext.Instance;\nvalCtx.AddError(\"SomeOtherProp\", \"Blah Blah!\");\nvalCtx.ThrowIfAnyErrors();\n```\n\n----------------------------------------\n\nTITLE: Using Custom Mapper in FastEndpoints Endpoint\nDESCRIPTION: Example of an endpoint class that uses the PersonMapper to handle request-entity-response mapping in a PUT endpoint.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...6]domain-entity-mapping.md#2025-04-21_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class SavePerson : Endpoint<Request, Response, PersonMapper>\n{\n    public override void Configure()\n    {\n        Put(\"/api/person\");\n    }\n\n    public override Task HandleAsync(Request r, CancellationToken c)\n    {\n        Person entity = Map.ToEntity(r);\n        Response = Map.FromEntity(entity);\n        return SendAsync(Response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding an Endpoint without Request or Response DTOs (epnoreq)\nDESCRIPTION: Code snippet for creating an endpoint without any request or response DTOs using the 'epnoreq' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds an endpoint without a request nor response dto\nsealed class Endpoint : EndpointWithoutRequest\n```\n\n----------------------------------------\n\nTITLE: Consuming Server-Sent Events with JavaScript EventSource API\nDESCRIPTION: This HTML document shows how to subscribe to a server-sent event stream in the browser using the EventSource API. It creates a connection to the event stream endpoint and sets up an event listener for the 'my-event' events.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...16]server-sent-events.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t</head>\n\t<body>\n\t\t<script>\n\t\t\tconst sse = new EventSource('http://localhost:8080/event-stream');\n\t\t\tsse.addEventListener('my-event', (e) => console.log(e.data));\n\t\t</script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Executing Generic Commands in C#\nDESCRIPTION: Demonstrates how to execute generic commands with different type parameters after registering the generic command types.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar results = await new MyCommand<SomeType>().ExecuteAsync();\nvar results = await new MyCommand<AnotherType>().ExecuteAsync();\n```\n\n----------------------------------------\n\nTITLE: Using Pre-Resolved Services in FastEndpoints\nDESCRIPTION: Demonstrates how to use pre-resolved services like Logger, Env, and Config that are available to all endpoints without explicit resolution.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic override async Task HandleAsync(CancellationToken ct)\n{\n    Logger.LogInformation(\"this is a log message\");\n    var isProduction = Env.IsProduction();\n    var smtpServer = Config[\"SMTP:HostName\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Authentication Scheme for an Endpoint in FastEndpoints\nDESCRIPTION: This code shows how to configure an endpoint to use a specific authentication scheme (JWT Bearer) in FastEndpoints. It sets up a GET route and specifies the authentication scheme to be used for incoming requests.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Get(\"/account/profile\");\n    AuthSchemes(JwtBearerDefaults.AuthenticationScheme);\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Non-Nullable Properties as Required in Swagger\nDESCRIPTION: Configures Swagger to generate schemas with required properties for non-nullable types when nullable reference types are enabled.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.SwaggerDocument(o => o.DocumentSettings = d => d.MarkNonNullablePropsAsRequired());\n```\n\n----------------------------------------\n\nTITLE: Implementing Strongly Typed Route Parameters\nDESCRIPTION: Shows how to bind route parameters to DTO properties using the @ prefix and lambda expressions\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...20]misc-conveniences.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nGet(\"/customer/{@cid}/invoice/{@inv}\", x => new { x.CustomerId, x.InvoiceId });\n```\n\n----------------------------------------\n\nTITLE: Publishing Events from Remote Publisher\nDESCRIPTION: Example of how to publish an event from a remote publisher to an event broker. The RemotePublishAsync extension method is used for synchronous/in-line messaging operation.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nawait new SomethingHappened\n{\n    Id = 101,\n    Description = \"Hello World!\"\n}\n.RemotePublishAsync();\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler in C#\nDESCRIPTION: Defines a handler class that implements IEventHandler<T> interface to process OrderCreatedEvent. Includes dependency injection for logging.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...12]event-bus.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderCreationHandler : IEventHandler<OrderCreatedEvent>\n{\n    private readonly ILogger _logger;\n\n    public OrderCreationHandler(ILogger<OrderCreationHandler> logger)\n    {\n        _logger = logger;\n    }\n\n    public Task HandleAsync(OrderCreatedEvent eventModel, CancellationToken ct)\n    {\n        _logger.LogInformation($\"order created event received:[{eventModel.OrderID}]\");\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FromBody Attribute for JSON Binding in C#\nDESCRIPTION: Shows how to use the [FromBody] attribute to bind JSON directly to a DTO property.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UpdateAddressRequest\n{\n    [FromBody]\n    public Address Address { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global JWT Creation Options\nDESCRIPTION: Code that demonstrates how to configure JWT creation options globally using dependency injection, allowing you to specify just the relevant settings during token creation.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.Configure<JwtCreationOptions>( o =>  o.SigningKey = \"...\" );\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection in Entity Mappers\nDESCRIPTION: Shows how to handle dependencies in entity mappers, including constructor injection and resolving scoped dependencies.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyMapper : Mapper<Request, Response, Person>\n{\n    public MyMapper(ISomeSingletonService singletonService)\n    {\n        var singletonSvc = singletonService; //from ctor injection\n        var anotherSingletonService = Resolve<IAnotherSingletonService>(); //manual resolving\n\n        //scoped dependency resolving\n        using var scope = CreateScope();\n        var scopedService = scope.Resolve<ISomeScopedService>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Antiforgery Protection for Form Submission Endpoints\nDESCRIPTION: Shows how to enable antiforgery token verification for a specific endpoint that accepts form data submissions using the EnableAntiforgery method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Post(\"form-submission\");\n    AllowFormData();\n    EnableAntiforgery();\n}\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests to Idempotent Endpoints with cURL\nDESCRIPTION: Shows how to make a client request to an idempotent endpoint using cURL. The critical part is including the Idempotency-Key header with a unique value to identify the request. Without this header, the request would be rejected with a 400 Bad Request.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...22]idempotency.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'GET' \\\n  'http://localhost:5000/my-endpoint' \\\n  -H 'accept: text/plain' \\\n  -H 'idempotency-key: 1dc3d9a8527047069f8056175a71fe79'\n```\n\n----------------------------------------\n\nTITLE: Documenting Request DTOs with XML Comments\nDESCRIPTION: Using XML comments to document request DTO properties for Swagger documentation.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// the admin login request summary\n/// </summary>\npublic class Request\n{\n    /// <summary>\n    /// username field description\n    /// </summary>\n    public string UserName { get; set; }\n\n    /// <summary>\n    /// password field description\n    /// </summary>\n    public string Password { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Output Caching in FastEndpoints with CacheOutput Extension\nDESCRIPTION: This code demonstrates how to use the CacheOutput extension method to implement ASP.NET Core's Output caching in a FastEndpoints endpoint. It configures the endpoint to cache responses for 60 seconds using the Options method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...8]response-caching.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    ...\n    Options(x => x.CacheOutput(p => p.Expire(TimeSpan.FromSeconds(60))));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Command and Handler for Job Queues in C#\nDESCRIPTION: Basic implementation of an ICommand and its companion ICommandHandler<TCommand> for defining the data contract and execution logic for background jobs.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class MyCommand : ICommand\n{\n    ...\n}\n\nsealed class MyCommandHandler : ICommandHandler<MyCommand>\n{\n    public Task ExecuteAsync(MyCommand command, CancellationToken ct)\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Handler Server in ASP.NET Core\nDESCRIPTION: Code showing how to set up a handler server in ASP.NET Core, configuring Kestrel to use HTTP/2 and registering command handlers.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar bld = WebApplication.CreateBuilder();\n\n// Accept only HTTP/2 to allow insecure connections for development.\nbld.WebHost.ConfigureKestrel(o => o.ListenLocalhost(6000, o => o.Protocols = HttpProtocols.Http2));\n\nbld.AddHandlerServer();\n\nvar app = bld.Build();\n\napp.MapHandlers(h =>\n{\n    h.Register<CreateOrderCommand, CreateOrderHandler, CreateOrderResult>();\n});\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Enabling Job Queues in Program.cs\nDESCRIPTION: Configuration for enabling job queues in FastEndpoints at application startup with a storage provider.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar bld = WebApplication.CreateBuilder();\nbld.Services\n   .AddFastEndpoints()\n   .AddJobQueues<JobRecord, JobStorageProvider>(); //ignore generic arguments for now\n\nvar app = bld.Build();\napp.UseFastEndpoints()\n   .UseJobQueues();\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Route Configuration Examples with Global Prefix\nDESCRIPTION: Demonstrates how endpoint route configurations are affected by a global route prefix, showing the resulting routes after the prefix is applied.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nGet(\"client/update\"); -> \"/api/client/update\"\nPut(\"inventory/delete\"); -> \"/api/inventory/delete\"\nPost(\"sales/recent-list\"); -> \"/api/sales/recent-list\"\n```\n\n----------------------------------------\n\nTITLE: Scaffolding an Endpoint Mapper (epmap)\nDESCRIPTION: Code snippet for creating a mapper class that maps between request, response, and entity DTOs using the 'epmap' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds an endpoint mapper class for the given request, response and entity dtos\nsealed class Mapper : Mapper<Request, Response, Entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Logger Pre-Processor in C#\nDESCRIPTION: A pre-processor implementation that logs request information before endpoint execution. Uses IPreProcessor<TRequest> interface to log request type and path.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyRequestLogger<TRequest> : IPreProcessor<TRequest>\n{\n    public Task PreProcessAsync(IPreProcessorContext<TRequest> ctx, CancellationToken ct)\n    {\n        var logger = ctx.HttpContext.Resolve<ILogger<TRequest>>();\n\n        logger.LogInformation(\n            $\"request:{ctx.Request.GetType().FullName} path: {ctx.HttpContext.Request.Path}\");\n\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Problem Details Configuration\nDESCRIPTION: Advanced configuration options for ProblemDetails responses including duplicate errors, error codes, and custom title transformations.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(\n   c => c.Errors.UseProblemDetails(\n       x =>\n       {\n           x.AllowDuplicateErrors = true;  //allows duplicate errors for the same error name\n           x.IndicateErrorCode = true;     //serializes the fluentvalidation error code\n           x.IndicateErrorSeverity = true; //serializes the fluentvalidation error severity\n           x.TypeValue = \"https://www.rfc-editor.org/rfc/rfc7231#section-6.5.1\";\n           x.TitleValue = \"One or more validation errors occurred.\";\n           x.TitleTransformer = pd => pd.Status switch\n           {\n               400 => \"Validation Error\",\n               404 => \"Not Found\",\n               _ => \"One or more errors occurred!\"\n           };\n       }));\n```\n\n----------------------------------------\n\nTITLE: Implementing Raw Text Request Binding in FastEndpoints\nDESCRIPTION: Demonstrates how to implement IPlainTextRequest interface to receive raw request content as a string instead of JSON deserialization. This approach is useful for handling non-JSON request payloads.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Request : IPlainTextRequest\n{\n    public string Content { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Global Route Prefix in Individual Endpoints\nDESCRIPTION: Shows how to override or disable the global route prefix for specific endpoints by using the RoutePrefixOverride method in the endpoint's Configure method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Post(\"user/create\");\n    RoutePrefixOverride(\"mobile\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Route Prefix in FastEndpoints\nDESCRIPTION: Configures a global prefix that is automatically prepended to all endpoint routes in the application, avoiding the need to repeat it in each route configuration.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c =>\n{\n    c.Endpoints.RoutePrefix = \"api\";\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting Params and Overriding XML Comments\nDESCRIPTION: Using the Summary method to document route parameters and override XML comments for request properties.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Post(\"admin/login/{ClientID?}\");\n    AllowAnonymous();\n    Summary(s =>\n    {\n        s.Summary = \"summary\";\n        s.Description = \"description\";\n        s.Params[\"ClientID\"] = \"client id description\";\n        s.RequestParam(r => r.UserName, \"overriden username description\");\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating an Endpoint\nDESCRIPTION: Demonstrates how to mark an endpoint as deprecated after a specific version by using the deprecateAt parameter when calling the Version method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nVersion(1, deprecateAt: 4);\n```\n\n----------------------------------------\n\nTITLE: Scaffolding an Endpoint with Response DTO Only (epres)\nDESCRIPTION: Code snippet for creating an endpoint without a request DTO but with a response DTO using the 'epres' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds an endpoint without a request dto but with a response dto\nsealed class Endpoint : EndpointWithoutRequest<Response>\n```\n\n----------------------------------------\n\nTITLE: Registering Pre-Built Security Policies\nDESCRIPTION: Code that registers a custom security policy named 'ManagersOnly' which requires both the 'Manager' role and a 'ManagerID' claim for the user to access the endpoint.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddAuthorization(options =>\n{\n    options.AddPolicy(\"ManagersOnly\", x => x.RequireRole(\"Manager\").RequireClaim(\"ManagerID\"));\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Hub in Round-Robin Mode\nDESCRIPTION: Setting up an event hub in Round-Robin mode which distributes events among subscribers in a round-robin fashion. Each event is delivered to just one subscriber.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapHandlers(h =>\n{\n    h.RegisterEventHub<SomeEvent>(HubMode.RoundRobin);\n});\n```\n\n----------------------------------------\n\nTITLE: Binding HTTP Headers in C#\nDESCRIPTION: Illustrates how to bind HTTP header values to request DTO properties using the FromHeader attribute in FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GetUserRequest\n{\n    [FromHeader]\n    public string TenantID { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Response Assignment in HandleAsync\nDESCRIPTION: Example showing how to assign a new instance to the Response property in a HandleAsync method for automatic response handling.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic override Task HandleAsync(CancellationToken ct)\n{\n    Response = new()\n    {\n        FullName = \"john doe\",\n        Age = 124\n    };\n    return Task.CompletedTask;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Request Binder in C#\nDESCRIPTION: Creates a global request binder by implementing IRequestBinder<TRequest> interface. This example shows how to create an open generic custom binder that can handle JSON deserialization and apply tenant ID from headers to requests implementing IHasTenantId.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyRequestBinder<TRequest> : IRequestBinder<TRequest> where TRequest : notnull, new()\n{\n    public async ValueTask<TRequest> BindAsync(BinderContext ctx, CancellationToken ct)\n    {\n        if (ctx.HttpContext.Request.HasJsonContentType())\n        {\n            var req = await JsonSerializer.DeserializeAsync<TRequest>(\n              ctx.HttpContext.Request.Body, ctx.SerializerOptions, ct);\n            \n            if (req is IHasTenantId r)\n              r.TenantId = ctx.HttpContext.Request.Headers[\"x-tenant-id\"];\n\n            return req!;\n        }\n        return new();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Endpoint-Specific Request Binder in C#\nDESCRIPTION: Demonstrates how to implement a concrete request binder for a specific endpoint. This binder combines route values, headers, and JSON deserialized body to create a custom request object.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyBinder : IRequestBinder<MyRequest>\n{\n    public async ValueTask<MyRequest> BindAsync(BinderContext ctx, CancellationToken ct)\n    {\n        // populate and return a request dto object however you please...\n        return new MyRequest\n        {\n            Id = ctx.HttpContext.Request.RouteValues[\"id\"]?.ToString()!,\n            CustomerID = ctx.HttpContext.Request.Headers[\"CustomerID\"].ToString()!,\n            Product = await JsonSerializer.DeserializeAsync<Product>(\n              ctx.HttpContext.Request.Body, \n              new JsonSerializerOptions(), \n              ct)\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding JSON Arrays in C# Endpoint\nDESCRIPTION: Demonstrates how to bind JSON arrays to a List<T> in a FastEndpoints endpoint.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : Endpoint<List<Address>>\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing JWT Token Revocation Response in FastEndpoints\nDESCRIPTION: Shows how to override the default response for revoked JWT tokens by implementing a custom SendTokenRevokedResponseAsync method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override async Task SendTokenRevokedResponseAsync(HttpContext ctx)\n{\n    await ctx.Response.SendStringAsync(\"This token is revoked!\", 401);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Anonymous Access for Specific HTTP Verbs\nDESCRIPTION: Example of an endpoint that listens to multiple HTTP verbs but only allows anonymous access for POST requests. This is useful when the same endpoint handles both authenticated and unauthenticated operations.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RestrictedEndpoint : Endpoint<RestrictedRequest>\n{\n    public override void Configure()\n    {\n        Verbs(Http.POST, Http.PUT, Http.PATCH);\n        Routes(\"/api/restricted\");\n        AllowAnonymous(Http.POST);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BindFrom Attribute for Form Field Mapping in C#\nDESCRIPTION: Shows how to use the [BindFrom] attribute to map mismatched form field names to DTO properties.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[BindFrom(\"customer_id\")]\npublic string CustomerID { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Authentication in Program.cs\nDESCRIPTION: Setup code for cookie authentication in a FastEndpoints application. It configures cookie-based authentication with a 10-minute validity period and adds necessary middleware.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing FastEndpoints;\nusing FastEndpoints.Security; //add this\n\nvar bld = WebApplication.CreateBuilder();\nbld.Services\n   .AddAuthenticationCookie(validFor: TimeSpan.FromMinutes(10)) //configure cookie auth\n   .AddAuthorization(); //add this\n   .AddFastEndpoints()\n\nvar app = bld.Build();\napp.UseAuthentication() //add this\n   .UseAuthorization() //add this\n   .UseFastEndpoints();\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Defining Event Model in C#\nDESCRIPTION: Creates a data contract class for the event that will be delivered to subscribers/event-handlers.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...12]event-bus.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderCreatedEvent\n{\n    public string OrderID { get; set; }\n    public string CustomerName { get; set; }\n    public decimal OrderTotal { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Endpoints by Tags in FastEndpoints\nDESCRIPTION: Shows how to tag endpoints with custom identifiers and then filter them during registration based on those tags, allowing for more organized endpoint management.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Get(\"client/update\");\n    Tags(\"Deprecated\", \"ToBeDeleted\"); // has no relationship with Swagger tags\n}\n\napp.UseFastEndpoints(c =>\n{\n    c.Endpoints.Filter = ep =>\n    {\n        if (ep.EndpointTags?.Contains(\"Deprecated\") is true)\n        {\n            return false; // don't register this endpoint\n        }\n        return true;\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Unified Property Naming Policy Across Binding Sources\nDESCRIPTION: Configures FastEndpoints to use the same property naming policy across all binding sources including query parameters, form fields, route parameters, and headers.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c => c.Binding.UsePropertyNamingPolicy = true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Versioning Middleware in FastEndpoints\nDESCRIPTION: This snippet shows how to enable and configure the versioning middleware, setting the default API version and version reader.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services\n   .AddFastEndpoints()\n   .AddVersioning(o =>\n   {\n       o.DefaultApiVersion = new(1.0);\n       o.AssumeDefaultVersionWhenUnspecified = true;\n       o.ApiVersionReader = new HeaderApiVersionReader(\"X-Api-Version\");\n   })\n```\n\n----------------------------------------\n\nTITLE: Configuring Antiforgery Token Header in C# with FastEndpoints\nDESCRIPTION: This code snippet shows how to customize the name of the header used for submitting the antiforgery token. It uses the AddAntiforgery method to set the HeaderName option.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddAntiforgery(o => o.HeaderName = \"x-csrf-token\");\n```\n\n----------------------------------------\n\nTITLE: Business Logic Validation in Endpoint\nDESCRIPTION: Implementation of application logic validation with error handling\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...4]validation.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CreateUserEndpoint : Endpoint<CreateUserRequest, CreateUserResponse>\n{\n    public override void Configure() => Post(\"/api/user/create\");\n\n    public override async Task HandleAsync(CreateUserRequest req, CancellationToken ct)\n    {\n        bool userExists = await userRepo.UserAlreadyExists(req.EmailAddress);\n        if (userExists)\n            AddError(r => r.EmailAddress, \"this email is already in use!\");\n\n        var maxAge = await userRepo.GetMaxAllowedAge();\n        if (req.Age >= maxAge)\n            AddError(r => r.Age, \"you are not eligible for insurance!\");\n\n        ThrowIfAnyErrors();\n\n        var userID = await userRepo.CreateNew(req);\n        if (userID is null)\n            ThrowError(\"creating a user did not go so well!\");\n\n        await SendAsync(new()\n        {\n            UserID = userID,\n            FullName = req.FullName\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Execution Options in C#\nDESCRIPTION: Setting execution options for jobs including delayed execution and custom expiry time.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n.QueueJobAsync(\n    executeAfter: DateTime.UtcNow.AddMinutes(30),\n    expireOn: DateTime.UtcNow.AddHours(8));\n```\n\n----------------------------------------\n\nTITLE: Queuing and Retrieving Job Results\nDESCRIPTION: Example of how to queue a command as a job and retrieve its result using the JobTracker.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// queue the command as a job and obtain the tracking id \nvar trackingId = new MyCommand { ... }.QueueJobAsync();\n\n// retrieve the result of the command using the tracking id\nvar result = await JobTracker<MyCommand>.GetJobResultAsync<MyResult>(trackingId);\n```\n\n----------------------------------------\n\nTITLE: Property Injection in FastEndpoints\nDESCRIPTION: Demonstrates property injection in a FastEndpoints endpoint where IHelloWorldService is automatically injected into a public property.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : EndpointWithoutRequest\n{\n    public IHelloWorldService HelloService { get; set; }\n\n    public override void Configure()\n    {\n        Get(\"/api/hello-world\");\n    }\n\n    public override async Task HandleAsync(CancellationToken ct)\n    {\n        await SendAsync(HelloService.SayHello());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pre-Processor with State Sharing\nDESCRIPTION: Example of a pre-processor that inherits from the abstract PreProcessor class with state sharing capabilities. This processor validates age and updates the shared state.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AgeChecker : PreProcessor<MyRequest, MyStateBag>\n{\n    public override Task PreProcessAsync(IPreProcessorContext<MyRequest> ctx, MyStateBag state)\n    {\n        if (ctx.Request.Age >= 18)\n            state.IsValidAge = true;\n\n        state.Status = $\"age checked by pre-processor at {state.DurationMillis} ms.\";\n\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Options for Union Type Returning Handlers\nDESCRIPTION: Shows how to set JSON serialization options when using union type returning endpoint handlers, using the ASP.NET Core options pattern.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.Configure<JsonOptions>(o => \n    o.SerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower)\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Static Data Class (epdat)\nDESCRIPTION: Code snippet for creating a static data class for an endpoint using the 'epdat' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds a static data class for an endpoint\nstatic class Data\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger Serializer Options in C#\nDESCRIPTION: This snippet shows how to configure serializer settings for Swagger using System.Text.Json.JsonSerializerOptions, including property naming policy and ignore conditions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.SwaggerDocument(o =>\n{\n    o.SerializerSettings = s =>\n    {\n        s.PropertyNamingPolicy = null;\n        s.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull;\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Pre-Built Security Policy to an Endpoint\nDESCRIPTION: Example of an endpoint that applies a pre-built security policy named 'ManagersOnly'. This restricts access to the endpoint to users who satisfy the policy requirements.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UpdateUserEndpoint : Endpoint<UpdateUserRequest>\n{\n    public override void Configure()\n    {\n        Put(\"/api/users/update\");\n        Policies(\"ManagersOnly\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Request Examples\nDESCRIPTION: Providing multiple request examples for Swagger documentation by setting ExampleRequest multiple times or using RequestExamples collection.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nSummary(s =>\n{\n    s.ExampleRequest = new MyRequest {...};  \n    s.ExampleRequest = new MyRequest {...};\n    s.RequestExamples.Add(new(new MyRequest { ... });\n    s.RequestExamples.Add(new(new MyRequest { ... }, \"Example Label\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Tokens with Permission Claims in FastEndpoints\nDESCRIPTION: Shows how to create a JWT token with assigned permissions using the JwtBearer.CreateToken method and the static permission constants.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nvar jwtToken = JwtBearer.CreateToken(\n    o =>\n    {\n        o.User.Permissions.Add(Allow.Article_Create);\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating an Endpoint that Issues Commands\nDESCRIPTION: Demonstrates an endpoint that adds validation errors and executes a command which also adds its own validation errors. The errors from both sources will be combined in the response.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GetFullNameEndpoint : EndpointWithoutRequest<string>\n{\n    ...\n\n    public override async Task HandleAsync(CancellationToken c)\n    {\n        AddError(\"an error added by the endpoint!\");\n\n        //command handler will be adding/throwing it's own validation errors\n        Response = await new GetFullName\n        {\n            FirstName = \"yoda\",\n            LastName = \"minch\"\n        }.ExecuteAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Subscriber as gRPC Client in C#\nDESCRIPTION: Maps the remote connection to the server/publisher and subscribes to the broadcast. This setup allows the client to receive and process events from the publisher.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar bld = WebApplication.CreateBuilder();\nvar app = bld.Build();\n\napp.MapRemote(\"http://localhost:6000\", c =>\n{\n    c.Subscribe<SomethingHappened, WhenSomethingHappens>();\n});\napp.Run()\n```\n\n----------------------------------------\n\nTITLE: Excluding Non-FastEndpoints from Swagger in C#\nDESCRIPTION: This snippet shows how to configure Swagger to include only FastEndpoints in the documentation, excluding other types of endpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.SwaggerDocument(o => o.ExcludeNonFastEndpoints = true);\n```\n\n----------------------------------------\n\nTITLE: Customizing Antiforgery Form Field Name in C# with FastEndpoints\nDESCRIPTION: This snippet demonstrates how to customize the name of the form field that the antiforgery middleware checks for the token. It uses the AddAntiforgery method to configure the FormFieldName option.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddAntiforgery(o => o.FormFieldName = \"_csrf_token_\");\n```\n\n----------------------------------------\n\nTITLE: Response DTO for Endpoint with Auto-Response\nDESCRIPTION: Definition of a response DTO used in an endpoint that utilizes the auto-response feature of FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyResponse\n{\n    public string FullName { get; set; }\n    public int Age { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Handling in Endpoint\nDESCRIPTION: Example of handling validation failures manually in the endpoint handler\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...4]validation.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic override async Task HandleAsync(CreateUserRequest req, CancellationToken ct)\n{\n    if (ValidationFailed)\n    {\n        foreach (ValidationFailure failure in ValidationFailures)\n        {\n            var propertyName = failure.PropertyName;\n            var errorMessage = failure.ErrorMessage;\n        }\n    }\n    await SendOkAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sales-Specific Request Logger in C#\nDESCRIPTION: A specialized pre-processor implementation for handling CreateSaleRequest type requests.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SalesRequestLogger : IPreProcessor<CreateSaleRequest>\n{\n    public Task PreProcessAsync(IPreProcessorContext<CreateSaleRequest> ctx, CancellationToken ct)\n    {\n        var logger = ctx.HttpContext.Resolve<ILogger<CreateSaleRequest>>();\n\n        logger.LogInformation($\"sale value:{ctx.Request.SaleValue}\");\n\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Publisher as gRPC Server in C#\nDESCRIPTION: Sets up a gRPC server and registers an event hub for the SomethingHappened event. This configuration allows the server to broadcast events to subscribers.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar bld = WebApplication.CreateBuilder();\nbld.WebHost.ConfigureKestrel(o => o.ListenLocalhost(6000, o => o.Protocols = HttpProtocols.Http2));\nbld.AddHandlerServer();\n\nvar app = bld.Build();\napp.MapHandlers(h =>\n{\n    h.RegisterEventHub<SomethingHappened>();\n});\napp.Run()\n```\n\n----------------------------------------\n\nTITLE: Defining a Command with ICommand Interface in C#\nDESCRIPTION: Creates a command class that implements the ICommand<TResult> interface, which specifies the data contract to be passed to a command handler. This example creates a GetFullName command that returns a string result.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GetFullName : ICommand<string>\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Validation Error Catching in FastEndpoints\nDESCRIPTION: Illustrates how to configure an endpoint to throw validation errors instead of catching them internally. This allows for custom handling of validation exceptions but requires manual management of error responses.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...17]exception-handler.md#2025-04-21_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic override void Configure()\n{\n    Get(\"throw-error\");\n    DontCatchExceptions();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Handler in C#\nDESCRIPTION: Example of a command handler implementation that processes the CreateOrderCommand and returns a CreateOrderResult. The handler needs to implement ICommandHandler<TCommand, TResult>.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class CreateOrderHandler : ICommandHandler<CreateOrderCommand, CreateOrderResult>\n{\n    public Task<CreateOrderResult> ExecuteAsync(CreateOrderCommand cmd, CancellationToken _)\n    {\n        return Task.FromResult(new CreateOrderResult()\n        {\n            Message = $\"Order {cmd.OrderId} created for {cmd.CustomerName}\"\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex DTO Structure for Form Data Binding in C#\nDESCRIPTION: Demonstrates the structure of a complex DTO used for binding nested form data, including primitive types, collections, and file uploads.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class UpdateBookRequest\n{\n    [FromForm]\n    public Book Book { get; set; } // complex type to bind from form data\n}\n\nsealed class Book\n{\n    public string Title { get; set; }                        // one primitive value\n    public List<int> BarCodes { get; set; }                  // multiple primitive values\n    public IFormFile Cover { get; set; }                     // one file\n    public IFormFileCollection AlternateCovers { get; set; } // multiple files\n    public Author Editor { get; set; }                       // one complex value\n    public IEnumerable<Author> Authors { get; set; }         // multiple complex values\n}\n\nsealed class Author\n{\n    public string Name { get; set; }\n    public IFormFile ProfilePicture { get; set; }\n    public ICollection<IFormFile> Agreements { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Idempotency Middleware in Program.cs\nDESCRIPTION: Sets up the required services and middleware for idempotency in a FastEndpoints application. This snippet shows how to add idempotency services and configure the output cache middleware in the application pipeline.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...22]idempotency.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar bld = WebApplication.CreateBuilder();\nbld.Services\n   .AddFastEndpoints()\n   .AddIdempotency(); //add this\n\nvar app = bld.Build();\napp.UseOutputCache() //add this before FE\n   .UseFastEndpoints();\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Enabling Problem Details in FastEndpoints\nDESCRIPTION: Basic configuration to enable RFC compatible error responses in FastEndpoints during application startup.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(x => x.Errors.UseProblemDetails());\n```\n\n----------------------------------------\n\nTITLE: Implementing a Command Handler in C#\nDESCRIPTION: Creates a command handler class that implements ICommandHandler<TCommand, TResult> to process a specific command type. This handler takes a GetFullName command and returns the concatenated full name as a string.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FullNameHandler : ICommandHandler<GetFullName, string>\n{\n    public Task<string> ExecuteAsync(GetFullName command, CancellationToken ct)\n    {\n        var result = command.FirstName + \" \" + command.LastName;\n        return Task.FromResult(result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint with Starting and Deprecation Releases\nDESCRIPTION: Shows how to define both when an endpoint should first appear and when it should be deprecated using chained method calls.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic override void Configure()\n{\n    Version(1)\n      .StartingRelease(2)\n      .DeprecateAt(4);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Value Parsers in C#\nDESCRIPTION: Shows how to register a custom value parser function for a specific type in FastEndpoints at startup.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c =>\n{\n    c.Binding.ValueParserFor<Guid>(MyParsers.GuidParser);\n});\n\npublic static class MyParsers\n{\n    public static ParseResult GuidParser(object? input)\n    {\n        bool success = Guid.TryParse(input?.ToString(), out var result);\n        return new (success, result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Endpoint with a Version\nDESCRIPTION: Shows how to specify a version for an endpoint by calling the Version() method in the Configure method of an endpoint class.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class AdminLoginEndpoint_V2 : Endpoint<LoginRequest, LoginResponse>\n{\n    public override void Configure()\n    {\n        Get(\"admin/login\");\n        Version(2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared State in an Endpoint\nDESCRIPTION: Example of an endpoint that registers processors and accesses the shared state. The endpoint configures pre/post processors and uses the ProcessorState<T>() method to access the shared state bag.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : Endpoint<MyRequest>\n{\n    public override void Configure()\n    {\n        ...\n        PreProcessor<AgeChecker>();\n        PostProcessor<DurationLogger>();\n    }\n\n    public override async Task HandleAsync(MyRequest r, CancellationToken c)\n    {\n        var state = ProcessorState<MyStateBag>();\n        Logger.LogInformation(\"endpoint executed at {@duration} ms.\", state.DurationMillis);\n        await Task.Delay(100);\n        await SendAsync(\n            new\n            {\n                r.Age,\n                state.Status\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Single Files to DTO Properties in FastEndpoints\nDESCRIPTION: This example shows how to define a request DTO that automatically binds uploaded files to IFormFile properties. The property names must match the form field names in the multipart request.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...7]file-handling.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyRequest\n{\n    public int Width { get; set; }\n    public int Height { get; set; }\n    public IFormFile File1 { get; set; }\n    public IFormFile File2 { get; set; }\n    public IFormFile File3 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Mismatched Claim Names in C#\nDESCRIPTION: Shows how to bind a claim with a different name than the DTO property using the FromClaim attribute in FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\n[FromClaim(\"user-id\")]\npublic string UserID { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Endpoint with Route Parameters\nDESCRIPTION: Implementation of an endpoint that handles route parameters, including request and response DTOs.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Endpoint : Endpoint<Request, Response>\n{\n    public override void Configure()\n    {\n        Get(\"users/{id}\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(Request req, CancellationToken ct)\n    {\n        var user = new Response\n        {\n            Id = req.Id,\n            FullName = req.FirstName + \" \" + req.LastName\n        };\n\n        await SendAsync(user);\n    }\n}\n\npublic class Request\n{\n    public int Id { get; set; }\n    public string FirstName { get; set;}\n    public string LastName { get; set;}\n}\n\npublic class Response\n{\n    public int Id { get; set; }\n    public string FullName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint with Attributes in C#\nDESCRIPTION: Example showing how to configure an endpoint using attributes for HTTP method, authorization, and pre-processing. Demonstrates the attribute-based approach instead of using Configure().\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPost(\"/my-endpoint\")]\n[Authorize(Roles = \"Admin,Manager\")]\n[PreProcessor<MyProcessor>]\npublic class MyEndpoint : Endpoint<MyRequest, MyResponse>\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Publisher for Event Broker\nDESCRIPTION: Setup for an external publisher application that connects to a remote event broker. This code registers event types that can be published to the remote broker.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapRemote(\"http://localhost:6000\", c =>\n{\n    c.RegisterEvent<SomethingHappened>();\n});\n```\n\n----------------------------------------\n\nTITLE: Queueing a Command as a Background Job in C#\nDESCRIPTION: Extension method for queueing a command as a background job instead of executing it immediately.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait new MyCommand { ... }.QueueJobAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring API Client Generation on App Startup\nDESCRIPTION: Implements API client generation configuration in the application startup with support for multiple programming languages and output options.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nvar bld = WebApplication.CreateBuilder(args); //must pass in the args\nbld.Services\n   .AddFastEndpoints()\n   .SwaggerDocument(o =>\n   {\n      o.DocumentSettings = s => s.DocumentName = \"v1\"; //must match doc name below\n   }); \n\nvar app = bld.Build();\napp.UseFastEndpoints();\n\nawait app.GenerateApiClientsAndExitAsync(\n    c =>\n    {\n        c.SwaggerDocumentName = \"v1\"; //must match doc name above\n        c.Language = GenerationLanguage.CSharp;\n        c.OutputPath = Path.Combine(app.Environment.WebRootPath, \"ApiClients\", \"CSharp\");\n        c.ClientNamespaceName = \"MyCompanyName\";\n        c.ClientClassName = \"MyCsClient\";\n        c.CreateZipArchive = true; //if you'd like a zip file as well\n    },\n    c =>\n    {\n        c.SwaggerDocumentName = \"v1\";\n        c.Language = GenerationLanguage.TypeScript;\n        c.OutputPath = Path.Combine(app.Environment.WebRootPath, \"ApiClients\", \"Typescript\");\n        c.ClientNamespaceName = \"MyCompanyName\";\n        c.ClientClassName = \"MyTsClient\";\n    });\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Scaffolding an Endpoint Validator (epval)\nDESCRIPTION: Code snippet for creating a validator class for a request DTO using the 'epval' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds an endpoint validator for a given request dto\nsealed class Validator : Validator<Request>\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependencies in Mapper Methods\nDESCRIPTION: Demonstrates how to resolve scoped dependencies in mapper methods like ToEntityAsync without creating a new scope.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Mapper : Mapper<Request, Response, Person>\n{\n    public override Task<Person> ToEntityAsync(Request r)\n    {\n        var db = Resolve<DbContext>();\n        return db.GetPerson(r.Id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypedResults with HandleAsync Method\nDESCRIPTION: Example showing how to send TypedResults when using the HandleAsync method with the SendResultAsync helper method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : Endpoint<MyRequest, Results<Ok<MyResponse>, NotFound>>\n{\n    public override void Configure() { ... }\n\n    public override async Task HandleAsync(MyRequest r, CancellationToken c)\n    {\n        if (true)\n            await SendResultAsync(TypedResults.Ok<MyResponse>(new(){ ... }));\n        else\n            await SendResultAsync(TypedResults.NotFound());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Remote Handlers in Client Application\nDESCRIPTION: Code showing how to map remote handlers in a client application by specifying the server address and registering commands.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar bld = WebApplication.CreateBuilder();\nvar app = bld.Build();\napp.MapRemote(\"http://localhost:6000\", c =>\n{\n    c.Register<CreateOrderCommand, CreateOrderResult>();\n});\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Request Deserialization\nDESCRIPTION: Implementation of custom request body deserialization using Newtonsoft.Json.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c =>\n{\n    c.Serializer.RequestDeserializer = async (req, tDto, jCtx, ct) =>\n    {\n        using var reader = new StreamReader(req.Body);\n        return Newtonsoft.Json.JsonConvert.DeserializeObject(await reader.ReadToEndAsync(), tDto);\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Event Storage for Subscriber in C#\nDESCRIPTION: Adds a custom event subscriber storage provider to the services collection, enabling persistent storage for the subscriber's event queue.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddEventSubscriberStorageProvider<EventRecord, SubscriberStorageProvider>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger Document Settings\nDESCRIPTION: Customizing Swagger document settings like title and version by providing an action to the SwaggerDocument method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.SwaggerDocument(o =>\n{\n    o.DocumentSettings = s =>\n    {\n        s.Title = \"My API\";\n        s.Version = \"v1\";\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Scaffolding an Event Handler (evnt)\nDESCRIPTION: Code snippet for creating an event handler for an event model using the 'evnt' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds an event handler for a given event model\nsealed class EventHandler : IEventHandler<Event>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Concurrency Limits for Job Queues in C#\nDESCRIPTION: Configuration for setting the maximum number of parallel jobs that can execute at the same time.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n.UseJobQueues(o => o.MaxConcurrency = 2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Property Binding Sources in C#\nDESCRIPTION: Demonstrates how to explicitly specify or block binding sources for individual properties in FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\n[DontBind(Source.QueryParam | Source.RouteParam)] \npublic string UserID { get; set; } \n\n[FormField]\npublic string UserID { get; set; }\n\n[QueryParam]\npublic string UserName { get; set; }\n\n[RouteParam]\npublic string InvoiceID { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Registering Custom JSON Converters in C#\nDESCRIPTION: Shows how to register custom JSON converters in the FastEndpoints configuration.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c =>\n{\n    c.Serializer.Options.Converters.Add(new CustomConverter());\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Version Sets for API Versioning in C#\nDESCRIPTION: This code demonstrates how to create version sets for different APIs, specifying the API name and supported versions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nVersionSets.CreateApi(\">>Orders<<\", v => v\n    .HasApiVersion(1.0)\n    .HasApiVersion(2.0));\n\nVersionSets.CreateApi(\">>Inventory<<\", v =>\n{\n    v.HasApiVersion(1.0);\n    v.HasApiVersion(1.1);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Command and Result DTOs in C#\nDESCRIPTION: Example of creating command and result DTO classes that will serve as the contract between the client and server. The command implements ICommand<TResult> interface.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CreateOrderCommand : ICommand<CreateOrderResult>\n{\n    public int OrderId { get; set; }\n    public string CustomerName { get; set; }\n}\n\npublic class CreateOrderResult\n{\n    public string Message { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Remote Commands in C#\nDESCRIPTION: Example of how to execute a remote command using the RemoteExecuteAsync extension method. The command is sent to the registered handler server.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await new CreateOrderCommand\n{\n    OrderId = 1001,\n    CustomerName = \"Holly Simms\"\n}\n.RemoteExecuteAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Pre-Processor in Program.cs\nDESCRIPTION: Configuration code to attach a global pre-processor to all endpoints in the application.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c =>\n{\n    c.Endpoints.Configurator = ep =>\n    {\n        ep.PreProcessor<TenantIDChecker>(Order.Before);\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection with Keyed Services\nDESCRIPTION: Shows how to use constructor injection with keyed services using the FromKeyedServices attribute.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyEndpoint([FromKeyedServices(\"KeyName\")]IHelloWorldService helloScv)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fire-and-Forget Event Publishing\nDESCRIPTION: Shows how to publish events without waiting for subscriber completion using WaitForNone mode.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...12]event-bus.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait PublishAsync(eventModel, Mode.WaitForNone);\n```\n\n----------------------------------------\n\nTITLE: Defining Swagger Documents for Multiple API Versions\nDESCRIPTION: This code demonstrates how to define Swagger documents for different API versions in a FastEndpoints application.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services\n   .SwaggerDocument(o =>\n   {\n       o.DocumentSettings = x =>\n       {\n           x.DocumentName = \"version one\";\n           x.ApiVersion(new(1.0));\n       };\n       o.AutoTagPathSegmentIndex = 0; //need to disable path segment based auto tagging\n   })\n   .SwaggerDocument(o =>\n   {\n       o.DocumentSettings = x =>\n       {\n           x.DocumentName = \"version one point one\";\n           x.ApiVersion(new(1.1));\n       };\n       o.AutoTagPathSegmentIndex = 0;\n   })\n   .SwaggerDocument(o =>\n   {\n       o.DocumentSettings = x =>\n       {\n           x.DocumentName = \"version two\";\n           x.ApiVersion(new(2.0));\n       };\n       o.AutoTagPathSegmentIndex = 0;\n   });\n```\n\n----------------------------------------\n\nTITLE: Installing FastEndpoints Generator Package via NuGet\nDESCRIPTION: Command to install the FastEndpoints.Generator package using the .NET CLI. This package provides the source generation capabilities for automatic service registration.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package FastEndpoints.Generator\n```\n\n----------------------------------------\n\nTITLE: Defining Complex DTO with Nested Types in C#\nDESCRIPTION: Shows a C# DTO class with a nested Address class, matching the structure of the JSON request body.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UpdateAddressRequest\n{\n    public int UserID { get; set; }\n    public Address Address { get; set; }\n\n    public class Address\n    {\n        public string Street { get; set; }\n        public string City { get; set; }\n        public string Country { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning an Endpoint to a Configuration Group\nDESCRIPTION: Demonstrates how to specify which configuration group an endpoint belongs to, allowing the endpoint to inherit the group's settings and route prefix.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Post(\"/login\");\n    AllowAnonymous();\n    Group<Administration>();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DTO for Route Parameter Binding in C#\nDESCRIPTION: Illustrates the structure of a DTO used for binding route parameters, showcasing various primitive types.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyRequest\n{\n    public string MyString { get; set; }\n    public bool MyBool { get; set; }\n    public int MyInt { get; set; }\n    public long MyLong { get; set; }\n    public double MyDouble { get; set; }\n    public decimal MyDecimal { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: RFC7807 Problem Details JSON Structure\nDESCRIPTION: Example of RFC7807 and RFC9457 compatible error response format showing validation errors with type, title, status and detailed error messages.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"https://www.rfc-editor.org/rfc/rfc7231#section-6.5.1\",\n  \"title\": \"One or more validation errors occurred.\",\n  \"status\": 400,\n  \"instance\": \"/api/test/666\",\n  \"traceId\": \"0HMPNHL0JHL76:00000001\",\n  \"errors\": [\n    {\n      \"name\": \"clientIP\",\n      \"reason\": \"IP address is blocked!\"\n    },\n    {\n      \"name\": \"clientID\",\n      \"reason\": \"Invalid client ID!\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Union-Type Returning Handler with ExecuteAsync\nDESCRIPTION: Example of an endpoint that can return different types of responses using the union-type Results<> pattern and ExecuteAsync method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : Endpoint<MyRequest, \n                                   Results<Ok<MyResponse>, \n                                           NotFound, \n                                           ProblemDetails>>\n{\n    public override void Configure() { ... }\n\n    public override async Task<Results<Ok<MyResponse>, NotFound, ProblemDetails>> ExecuteAsync(\n        MyRequest req, CancellationToken ct)\n    {\n        await Task.CompletedTask; //simulate async work\n\n        if (req.Id == 0) //condition for a not found response\n        {\n            return TypedResults.NotFound();\n        }\n\n        if (req.Id == 1) //condition for a problem details response\n        {\n            AddError(r => r.Id, \"value has to be greater than 1\");\n            return new FastEndpoints.ProblemDetails(ValidationFailures);\n        }\n\n        // 200 ok response with a DTO\n        return TypedResults.Ok(new MyResponse\n        {\n            RequestedId = req.Id\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Service Registration Extension Method in C#\nDESCRIPTION: Example of the extension method automatically generated by FastEndpoints.Generator. This method registers all services marked with the RegisterService attribute in an assembly.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class ServiceRegistrationExtensions\n{\n    public static IServiceCollection RegisterServicesFromMyProject(this IServiceCollection sc)\n    {\n        sc.AddScoped<IHelloWorldService, HelloWorldService>();\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Hub Exception Receiver in Dependency Injection\nDESCRIPTION: Code snippet showing how to register a custom hub exception receiver in the dependency injection container.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddEventHubExceptionReceiver<MyHubErrorReceiver>();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Parsing in C#\nDESCRIPTION: Demonstrates how to add a static TryParse method to a custom type for automatic binding in FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Point\n{\n    public double X { get; set; }\n    public double Y { get; set; }\n\n    public static bool TryParse(string? input, out Point? output) //adhere to this signature\n    {\n        output = null;\n\n        if (string.IsNullOrEmpty(input))\n        {\n            return false;\n        }\n\n        var parts = input.Split(',');\n\n        if (!double.TryParse(parts[0], out var x) ||\n            !double.TryParse(parts[1], out var y))\n        {\n            return false;\n        }\n\n        output = new Point\n        {\n            X = x,\n            Y = y\n        };\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Schema Removal in Swagger\nDESCRIPTION: Sets up removal of empty request schemas from Swagger documentation and enables flattening of schema inheritance hierarchy.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.SwaggerDocument(o => o.RemoveEmptyRequestSchema = true);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Global Binding Modifier Function in FastEndpoints\nDESCRIPTION: Shows how to set up a global binding modifier function that runs after the registered binder. This example applies user roles to request DTOs implementing IHasRole interface.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c => c.Binding.Modifier = (req, tReq, ctx, ct) =>\n{\n    if (req is IHasRole r)\n    {\n        r.Role = ctx.HttpContext.User.ClaimValue(ClaimTypes.Role) ?? \"Guest\";\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing Query Parameters for Complex DTO Binding using cURL\nDESCRIPTION: Shows how to construct query parameters using cURL to match the complex DTO structure, including nested objects and collections.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_20\n\nLANGUAGE: html\nCODE:\n```\ncurl --location 'http://localhost:5000/book? \\\nTitle=book_title& \\\nBarCodes=12345& \\\nBarCodes=54321& \\\nEditor.Id=editor_id& \\\nEditor.Name=editor_name& \\\nAuthors[0].Id=author_1_id& \\\nAuthors[0].Name=author_1_name& \\\nAuthors[1].Id=author_2_id& \\\nAuthors[1].Name=author_2_name'\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint Options in C#\nDESCRIPTION: Demonstrates how to customize endpoint registration using the Options() method to set CORS, host requirements, and problem responses\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...20]misc-conveniences.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nOptions(b => b.RequireCors(x => x.AllowAnyOrigin())\n              .RequireHost(\"domain.com\")\n              .ProducesProblem(404));\n```\n\n----------------------------------------\n\nTITLE: MSBuild Task for Client Generation\nDESCRIPTION: XML configuration for setting up an MSBuild task to generate API client files during release builds.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<Target Name=\"ClientGen\" AfterTargets=\"Build\" Condition=\"'$(Configuration)'=='Release'\">\n    <Exec WorkingDirectory=\"$(RunWorkingDirectory)\"\n          Command=\"$(RunCommand) --generateclients true\"/>\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Creating Root-Level Endpoint Configuration Group\nDESCRIPTION: Shows how to create a top-level configuration group that can apply common settings to multiple endpoints, supporting vertical slice architecture by organizing related endpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Administration : Group\n{\n    public Administration()\n    {\n        Configure(\"admin\", ep => //admin is the route prefix for the top level group\n        {\n            ep.Description(x => x\n              .Produces(401)\n              .WithTags(\"administration\"));\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Command Middleware Component\nDESCRIPTION: Implements an open-generic middleware component for the command pipeline that handles logging before and after command execution, demonstrating the Chain of Responsibility pattern.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class CommandLogger<TCommand, TResult>(ILogger<TCommand> logger)\n    : ICommandMiddleware<TCommand, TResult> where TCommand : ICommand<TResult>\n{\n    public async Task<TResult> ExecuteAsync(TCommand command, \n                                            CommandDelegate<TResult> next, \n                                            CancellationToken ct)\n    {\n        logger.LogInformation(\"Executing command: {name}\", command.GetType().Name);\n\n        var result = await next();\n\n        logger.LogInformation(\"Got result: {value}\", result);\n\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Content Types for Request Acceptance\nDESCRIPTION: Configuring an endpoint to accept only specific content types for a request.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nDescription(x => x.Accepts<Request>(\"text/plain\",\"text/csv\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Headers in C#\nDESCRIPTION: Demonstrates how to make a header optional in FastEndpoints by using the FromHeader attribute with IsRequired set to false.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\n[FromHeader(IsRequired = false)]\n```\n\n----------------------------------------\n\nTITLE: Assigning an Endpoint to a Nested Configuration Group\nDESCRIPTION: Demonstrates how to assign an endpoint to a nested configuration group, where the endpoint only needs to specify its immediate parent group.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Get(\"/invoice/{id}\");\n    Group<Sales>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ad Hoc Endpoint Grouping with Filters\nDESCRIPTION: Demonstrates how to create custom Swagger document groups by filtering endpoints based on tags or other criteria.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\nbld.Services.SwaggerDocument(o =>\n{\n    o.EndpointFilter = ep => ep.EndpointTags?.Contains(\"GroupA\") is true;\n    o.DocumentSettings = s =>\n    {\n        s.DocumentName = \"Group A (v1)\";\n        s.Title = \"My App\";\n        s.Version = \"v1.0\";\n    };\n});\n\nbld.Services.SwaggerDocument(o =>\n{\n    o.EndpointFilter = ep => ep.EndpointTags?.Contains(\"GroupB\") is true;\n    o.DocumentSettings = s =>\n    {\n        s.DocumentName = \"Group B (v1)\";\n        s.Title = \"My App\";\n        s.Version = \"v1.0\";\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Values for Swagger in C#\nDESCRIPTION: This code shows how to use the [DefaultValue] attribute to provide default values for properties in Swagger documentation, following the NSwag convention.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Request\n{\n    [DefaultValue(\"Admin\")]\n    public string UserName { get; set; }\n\n    [DefaultValue(\"Qwerty321\")]\n    public string Password { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Events from Publisher in C#\nDESCRIPTION: Demonstrates how to publish events from the server once the setup is complete. This code creates and broadcasts a SomethingHappened event.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nnew SomethingHappened\n{\n    Id = 1,\n    Description = \"I am a test event!\"\n}\n.Broadcast();\n```\n\n----------------------------------------\n\nTITLE: Creating a Serializer Context for Source Generators in C#\nDESCRIPTION: Demonstrates how to create a serializer context for System.Text.Json source generators.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[JsonSerializable(typeof(RequestModel))]\n[JsonSerializable(typeof(ResponseModel))]\npublic partial class UpdateAddressCtx : JsonSerializerContext { }\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint Permission Requirements in FastEndpoints\nDESCRIPTION: Demonstrates how to specify permission requirements for endpoints using the Permissions method with statically defined permission constants.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Post(\"/article\");\n    Permissions(Allow.Article_Create);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Pre-Processor for Tenant ID Check in C#\nDESCRIPTION: Global pre-processor implementation that validates tenant ID header across multiple endpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TenantIDChecker : IGlobalPreProcessor\n{\n    public async Task PreProcessAsync(IPreProcessorContext ctx, CancellationToken ct)\n    {\n        if (ctx.Request is MyRequest r)\n        {\n            var tID = ctx.HttpContext.Request.Headers[\"x-tenant-id\"];\n\n            if (tID.Count > 0)\n            {\n                r.TenantID = tID[0];\n            }\n            else\n            {\n                ctx.ValidationFailures.Add(\n                    new(\"TenantID\", \"Unable to retrieve tenant id from header!\"));\n                \n                if (!ctx.HttpContext.ResponseStarted())\n                    await ctx.HttpContext.Response.SendErrorsAsync(ctx.ValidationFailures);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters to Swagger in C#\nDESCRIPTION: This snippet demonstrates how to use the [QueryParam] attribute to indicate that a property should be bound from a query string parameter in Swagger documentation. It also shows how to use [BindFrom] to specify a different name for the query parameter.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CreateEmployeeRequest\n{\n    [QueryParam]\n    public string Name { get; set; } // bound from query string\n\n    [QueryParam, BindFrom(\"id\")]\n    public string? ID { get; set; } // bound from query string\n\n    public Address Address { get; set; } // bound from body\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Default Metadata and Setting Custom Accepts/Produces\nDESCRIPTION: Overriding the default Accepts and Produces metadata by setting clearDefaults to true and defining custom content types.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Post(\"/item/create\");\n    Description(b => b\n        .Accepts<MyRequest>(\"application/json+custom\")\n        .Produces<MyResponse>(200, \"application/json+custom\")\n        .ProducesProblemFE(400) //shortcut for .Produces<ErrorResponse>(400)\n        .ProducesProblemFE<InternalErrorResponse>(500),\n    clearDefaults: true);\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Mismatched Header Names in C#\nDESCRIPTION: Shows how to bind a header with a different name than the DTO property using the FromHeader attribute in FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n[FromHeader(\"client-id\")]\npublic string ClientID { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger Document with Release Version\nDESCRIPTION: Shows how to define a Swagger document with a specific release version that endpoints can target.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nbld.Services.SwaggerDocument(o =>\n{\n   o.DocumentSettings = d => d.DocumentName = \"Release 2\";\n   o.ReleaseVersion = 2;\n})\n```\n\n----------------------------------------\n\nTITLE: Combining Event Broker and Round-Robin Modes\nDESCRIPTION: Example of configuring an event hub to operate in both Event Broker and Round-Robin modes simultaneously using bitwise OR operator.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\n.RegisterEventHub<SomeEvent>(HubMode.EventBroker | HubMode.RoundRobin);\n```\n\n----------------------------------------\n\nTITLE: Associating Endpoints with Version Sets in FastEndpoints\nDESCRIPTION: This snippet illustrates how to associate endpoints with specific version sets and API versions using the Options configuration in FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GetInvoices_v1 : EndpointWithoutRequest\n{\n    public override void Configure()\n    {\n        Get(\"/orders/invoices\");\n        Options(x => x\n            .WithVersionSet(\">>Orders<<\")\n            .MapToApiVersion(1.0));\n    }\n\n    public override async Task HandleAsync(CancellationToken c)\n    {\n        await SendAsync(\"v1 - orders\");\n    }\n}\n\npublic class GetInvoices_v2 : EndpointWithoutRequest\n{\n    public override void Configure()\n    {\n        Get(\"/order/invoices\");\n        Options(x => x\n            .WithVersionSet(\">>Orders<<\")\n            .MapToApiVersion(2.0));\n    }\n\n    public override async Task HandleAsync(CancellationToken c)\n    {\n        await SendAsync(\"v2 - orders\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Endpoint Configuration SubGroup\nDESCRIPTION: Shows how to create a hierarchical structure of configuration groups by subclassing from a parent group, allowing for more organized endpoint configurations in complex applications.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sales : SubGroup<Administration>\n{\n    public Sales()\n    {\n        Configure(\"sales\", ep =>\n        {\n            ep.Description(x => x\n              .Produces(402)\n              .WithTags(\"sales\"));\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Queued Jobs in C#\nDESCRIPTION: Example of cancelling a queued job using its tracking ID, which can be done anytime and from anywhere in the application.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar trackingId = await new LongRunningCommand().QueueJobAsync();\n\nawait JobTracker<LongRunningCommand>.CancelJobAsync(trackingId);\n```\n\n----------------------------------------\n\nTITLE: Implementing Mapping Logic Within Endpoint\nDESCRIPTION: Alternative approach showing how to implement mapping logic directly in the endpoint by inheriting from EndpointWithMapping.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...6]domain-entity-mapping.md#2025-04-21_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class SavePerson : EndpointWithMapping<Request, Response, Person>\n{\n    public override void Configure() => Put(\"/api/person\");\n\n    public override Task HandleAsync(Request r, CancellationToken c)\n    {\n        Person entity = MapToEntity(r);\n        Response = MapFromEntity(entity);\n        return SendAsync(Response);\n    }\n\n    public override Person MapToEntity(Request r) => new()\n    {\n        Id = r.Id,\n        DateOfBirth = DateOnly.Parse(r.BirthDay),\n        FullName = $\"{r.FirstName} {r.LastName}\"\n    };\n\n    public override Response MapFromEntity(Person e) => new()\n    {\n        Id = e.Id,\n        FullName = e.FullName,\n        UserName = $\"USR{e.Id:0000000000}\",\n        Age = (DateOnly.FromDateTime(DateTime.UtcNow).DayNumber - e.DateOfBirth.DayNumber) / 365,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint with Pre-Processor in C#\nDESCRIPTION: Example of attaching a pre-processor to a specific endpoint using Configure() method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CreateOrderEndpoint : Endpoint<CreateOrderRequest>\n{\n    public override void Configure()\n    {\n        Post(\"/sales/orders/create\");\n        PreProcessor<MyRequestLogger<CreateOrderRequest>>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Form Data Submissions in FastEndpoints C#\nDESCRIPTION: Demonstrates how to enable form data submissions in a FastEndpoints endpoint configuration.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    ...\n    AllowFormData();\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Required Packages in Handler Server Project\nDESCRIPTION: XML configuration showing how to reference both the contracts project and the FastEndpoints remote messaging library in the handler server project.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <ProjectReference Include=\"..\\Contracts\\Contracts.csproj\"/>\n    <PackageReference Include=\"FastEndpoints.Messaging.Remote\" Version=\"5.*\"/>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating Test Class with Ordered Tests\nDESCRIPTION: Example of a test class inheriting from TestBase<TAppFixture> with ordered test methods using Priority attribute.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyTests(MyApp App) : TestBase<MyApp>\n{\n    [Fact, Priority(1)]\n    public async Task Invalid_User_Input()\n    {\n        var (rsp, res) = await App.Client.POSTAsync<Endpoint, Request, ErrorResponse>(new()\n        {\n            FirstName = \"x\",\n            LastName = \"y\"\n        });\n        rsp.StatusCode.ShouldBe(HttpStatusCode.BadRequest);\n        res.Errors.Count.ShouldBe(2);\n        res.Errors.Keys.ShouldBe([\"firstName\", \"lastName\"]);\n    }\n\n    [Fact, Priority(2)]\n    public async Task Valid_User_Input()\n    {\n        var (rsp, res) = await App.Client.POSTAsync<Endpoint, Request, Response>(new()\n        {\n            FirstName = \"Mike\",\n            LastName = \"Kelso\"\n        });\n        rsp.IsSuccessStatusCode.ShouldBeTrue();\n        res.Message.ShouldBe(\"Hello Mike Kelso...\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Injection with Keyed Services\nDESCRIPTION: Shows how to use property injection with keyed services by applying the KeyedService attribute with a key name.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[KeyedService(\"KeyName\")]\npublic IHelloWorldService HelloService { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Resolving Scoped Dependencies in Validator Rules\nDESCRIPTION: Demonstrates how to resolve scoped dependencies inside validator rules using the Resolve method without creating a new scope.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyValidator : Validator<Request>\n{\n    public MyValidator()\n    {\n        RuleFor(x => x.Id).MustAsync(async (id, ct) =>\n        {\n            var idChecker = Resolve<IScopedService>();\n            return await idChecker.IsValidId(id, ct);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Resolution of Keyed Services\nDESCRIPTION: Shows how to manually resolve keyed services by providing the key name to the Resolve method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nResolve<IHelloWorldService>(\"KeyName\");\n```\n\n----------------------------------------\n\nTITLE: Defining HelloWorld Service in C#\nDESCRIPTION: Defines an interface IHelloWorldService and its implementation class HelloWorldService, which returns 'hello world!' when SayHello() is called.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IHelloWorldService\n{\n    string SayHello();\n}\n\npublic class HelloWorldService : IHelloWorldService\n{\n    public string SayHello() => \"hello world!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Permissions to Generated Groups in FastEndpoints\nDESCRIPTION: Shows how to include custom permissions in the generated permission groups by implementing the Groups partial method and using the AddTo* helper methods.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyProject.Auth;\n\npublic static partial class Allow\n{\n    public const string Admin_Do_Anything = \"000\";\n    public const string Article_Delete = \"001\"; \n    \n    static partial void Groups()\n    {\n        AddToAdmin(Admin_Do_Anything);\n        AddToAdmin(Article_Delete);\n    }     \n}\n```\n\n----------------------------------------\n\nTITLE: Creating AppFixture for Test Collections in C#\nDESCRIPTION: Shows how to create an AppFixture for use as a collection fixture. It includes the implementation of AppForCollectionX and the collection definition CollectionX.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AppForCollectionX : AppFixture<Program> {}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CollectionX : TestCollection<AppForCollectionX>;\n```\n\n----------------------------------------\n\nTITLE: Implementing State Fixture for Shared Test Resources in C#\nDESCRIPTION: Demonstrates how to create a StateFixture for sharing common state/resources among test methods in a test class. It shows the implementation of MyState class and its usage in a test class.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class MyState : StateFixture\n{\n    public int Id { get; set; } //some state\n\n    protected override async ValueTask SetupAsync()\n    {\n        Id = 123; //some setup logic\n        await ValueTask.CompletedTask;\n    }\n\n    protected override async ValueTask TearDownAsync()\n    {\n        Id = 0; //some teardown logic\n        await ValueTask.CompletedTask;\n    }\n}\n\npublic class MyTests(MyApp App, MyState State) : TestBase<MyApp, MyState>\n{\n    [Fact]\n    public async Task State_Check()\n        => State.Id.ShouldBe(123);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-configured HttpClients in AppFixture\nDESCRIPTION: Example of setting up pre-configured HttpClient instances in the AppFixture class for reuse across tests.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyApp : AppFixture<Program>\n{\n    public HttpClient Admin { get; private set; }\n    public HttpClient Customer { get; private set; }\n\n    protected override async ValueTask SetupAsync()\n    {\n        var apiKey = await GetApiKey(...);\n        Admin = CreateClient(c => c.DefaultRequestHeaders.Add(\"x-api-key\", apiKey));\n        Customer = CreateClient();\n    }\n\n    protected override ValueTask TearDownAsync()\n    {\n        Admin.Dispose();\n        Customer.Dispose();\n        return ValueTask.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Pre-Processor in FastEndpoints\nDESCRIPTION: Example implementation of a generic pre-processor that implements the IPreProcessor<TRequest> interface. This class can be registered globally to process requests of any type.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class RequestLogger<TRequest> : IPreProcessor<TRequest>\n{\n    public Task PreProcessAsync(IPreProcessorContext<TRequest> ctx, CancellationToken c)\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Route Parameters\nDESCRIPTION: Shows how to unit test an endpoint with route parameters by configuring the HttpContext in the Factory.Create method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task GetSingleUserById()\n{\n    // Arrange\n    var ep = Factory.Create<Endpoint>(ctx => ctx.Request.RouteValues.Add(\"id\", \"1\"));\n\n    var req = new Request \n    {\n      FirstName = \"Jeff\",\n      LastName = \"Bridges\"\n    };\n\n    // Act\n    await ep.HandleAsync(req, default);\n    var rsp = ep.Response;\n\n    // Assert\n    Assert.IsNotNull(rsp);\n    Assert.AreEqual(1, rsp.Id);\n    Assert.AreEqual(\"Jeff Bridges\", rsp.FullName);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Permission Groups with AccessControl in FastEndpoints\nDESCRIPTION: Shows how to associate permissions with named groups using the groupNames parameter of AccessControl, which will generate group collections in the Allow class.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Post(\"/article\");\n    AccessControl(\n        keyName: \"Article_Create\",\n        behavior: Apply.ToThisEndpoint,\n        groupNames: \"Author\",\"Admin\");\n}\n\npublic override void Configure()\n{\n    Post(\"/article/moderate\");\n    AccessControl(\n        keyName: \"Article_Approve\",\n        behavior: Apply.ToThisEndpoint,\n        groupNames: \"Admin\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpClient in Tests\nDESCRIPTION: Example showing how to configure custom HttpClient instances in test methods.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task Access_Protected_Endpoint()\n{\n    var adminClient = App.CreateClient(c =>\n    {\n        c.DefaultRequestHeaders.Authorization = new(\"Bearer\", jwtToken);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Checks in C#\nDESCRIPTION: Demonstrates how to use the HasPermission attribute to check if a user has a specific permission in FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UpdateArticleRequest\n{\n    [HasPermission(\"Article_Update\")]\n    public bool AllowedToUpdate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Endpoint Name Generation in Swagger for C#\nDESCRIPTION: This snippet shows how to override the default endpoint name generation logic in Swagger by providing a custom function that generates unique names based on the endpoint type.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(\n       c => c.Endpoints.NameGenerator =\n                ctx =>\n                {\n                    return ctx.EndpointType.Name.TrimEnd(\"Endpoint\");\n                })\n```\n\n----------------------------------------\n\nTITLE: Setting Execution Time Limits for Job Queues in C#\nDESCRIPTION: Configuration for setting the maximum time a job can execute before being cancelled and retried.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n.UseJobQueues(o => o.ExecutionTimeLimit = TimeSpan.FromSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Creating AppFixture Class in C#\nDESCRIPTION: Example of creating an AppFixture class that inherits from AppFixture<TProgram> with setup, configuration, and teardown methods for test initialization.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyApp : AppFixture<Program>\n{\n    protected override ValueTask SetupAsync()\n    {\n        // place one-time setup code here\n    }\n    \n    protected override void ConfigureApp(IWebHostBuilder a)\n    {\n        // do host builder config here\n    }\n\n    protected override void ConfigureServices(IServiceCollection s)\n    {\n        // do test service registration here\n    }\n\n    protected override ValueTask TearDownAsync()\n    {\n        // do cleanups here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint for Route Parameter Binding in C#\nDESCRIPTION: Shows how to configure an endpoint to use route parameters that match the DTO properties.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : Endpoint<MyRequest>\n{\n    public override void Configure()\n    {\n        Get(\"/api/{MyString}/{MyBool}/{MyInt}/{MyLong}/{MyDouble}/{MyDecimal}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Commands and Handlers in C#\nDESCRIPTION: Shows how to define generic command and handler types for flexibility. The command accepts a generic type parameter and returns an enumerable of that type.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n//command\npublic class MyCommand<T> : ICommand<IEnumerable<T>> { ... }\n\n//handler\npublic class MyCommandHandler<T> : ICommandHandler<MyCommand<T>, IEnumerable<T>> { ... }\n```\n\n----------------------------------------\n\nTITLE: Separating Swagger Documentation with EndpointSummary\nDESCRIPTION: Moving documentation out of the endpoint class by subclassing EndpointSummary to create reusable documentation.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nclass AdminLoginSummary : EndpointSummary\n{\n    public AdminLoginSummary()\n    {\n        Summary = \"short summary goes here\";\n        Description = \"long description goes here\";\n        ExampleRequest = new MyRequest {...};\n        Responses[200] = \"success response description goes here\";\n        Responses[403] = \"forbidden response description goes here\";\n    }\n}\n\npublic override void Configure()\n{\n    Post(\"/admin/login\");\n    AllowAnonymous();\n    Description(b => b.Produces(403));\n    Summary(new AdminLoginSummary());\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Accepts Metadata\nDESCRIPTION: Customizing the default accepts metadata to allow any content type or specific content types for a request DTO.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nDescription(x => x.Accepts<MyRequest>());\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Response Send Methods\nDESCRIPTION: Example of creating custom endpoint extension methods for sending responses\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...20]misc-conveniences.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class EndpointExtensions\n{\n    public static Task SendStatusCode(this IEndpoint ep, int statusCode, CancellationToken ct = default)\n    {\n        ep.HttpContext.MarkResponseStart(); //don't forget to always do this\n        ep.HttpContext.Response.StatusCode = statusCode;\n        return ep.HttpContext.Response.StartAsync(ct);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Command with ExecuteAsync Extension Method\nDESCRIPTION: Demonstrates how to execute a command by creating an instance of the command object and calling the ExecuteAsync() extension method. This example sends a GetFullName command with first and last name values.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar fullName = await new GetFullName()\n{\n    FirstName = \"john\",\n    LastName = \"snow\"\n}\n.ExecuteAsync();\n```\n\n----------------------------------------\n\nTITLE: Service Registration for Unit Testing in C#\nDESCRIPTION: Shows how to register services for unit testing when endpoints or their dependencies rely on dependency injection.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar fakeMailer = A.Fake<IEmailService>();\nA.CallTo(() => fakeMailer.SendEmail())\n .Returns(\"test email sent\");\n\nvar ep = Factory.Create<UserCreateEndpoint>(ctx =>\n{\n    ctx.AddTestServices(s => s.AddSingleton(fakeMailer));\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Generic Command Types with FastEndpoints\nDESCRIPTION: Shows how to register the association between generic command and handler types using open generic types with the RegisterGenericCommand method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\napp.Services.RegisterGenericCommand(typeof(MyCommand<>), typeof(MyCommandHandler<>));\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Values Without DTO in C#\nDESCRIPTION: Demonstrates how to access route parameters in an endpoint without using a request DTO.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GetArticle : EndpointWithoutRequest\n{\n    public override void Configure() => Get(\"/article/{ArticleID}\");\n\n    public override Task HandleAsync(CancellationToken ct)\n    {\n        //http://localhost:5000/article/123\n        int articleID = Route<int>(\"ArticleID\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Storage Record with Results\nDESCRIPTION: Implementation of a job storage record class that supports storing job results by implementing IJobStorageRecord and IJobResultStorage interfaces.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class JobRecord : IJobStorageRecord, IJobResultStorage\n{\n    ...\n    public object? Result { get; set; } // a property for storing the result\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Generated Reflection\nDESCRIPTION: Setup for using source generated reflection to avoid runtime expression compilation.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c => c.Binding.ReflectionCache.AddFromMyApp())\n```\n\n----------------------------------------\n\nTITLE: Completely Separating Documentation with Summary<TEndpoint>\nDESCRIPTION: Using the Summary<TEndpoint> abstract class to completely separate Swagger documentation from endpoint classes.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySummary : Summary<MyEndpoint>\n{\n    public MySummary()\n    {\n        Summary = \"short summary goes here\";\n        Description = \"long description goes here\";\n        ExampleRequest = new MyRequest {...};\n        Response<MyResponse>(200, \"ok response with body\", example: new() {...});\n        Response<ErrorResponse>(400, \"validation failure\");\n        Response(404, \"account not found\");\n    }\n}\n\npublic class MyEndpoint : Endpoint<MyRequest, MyResponse>\n{\n    public override void Configure()\n    {\n        Post(\"/api/my-endpoint\");\n        //no need to specify summary here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Endpoint-Specific Binder in FastEndpoints\nDESCRIPTION: Shows how to register a custom binder for a specific endpoint during the endpoint's configuration phase.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Endpoint : Endpoint<Request, Response>\n{\n    public override void Configure()\n    {\n        Post(\"/my-endpoint\");\n        RequestBinder(new MyBinder());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Tags to Endpoints for Grouping\nDESCRIPTION: Shows how to apply tags to endpoints so they can be filtered into specific Swagger document groups.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...21]api-versioning.md#2025-04-21_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\npublic override void Configure()\n{\n    ...\n    Tags(\"GroupA\");\n    Version(1);\n}\n\npublic override void Configure()\n{\n    ...\n    Tags(\"GroupB\");\n    Version(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Response DTO in Tests\nDESCRIPTION: Demonstrates how to access the response DTO in unit tests when using the ExecuteAsync pattern.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar res = await ep.ExecuteAsync(req, default);\n```\n\n----------------------------------------\n\nTITLE: WebApplicationBuilder Extensions for Generation Mode\nDESCRIPTION: Extension methods for checking the current generation mode of the application builder.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nbld.IsNotGenerationMode(); //returns true if running normally\nbld.IsApiClientGenerationMode(); //returns true if running in client gen mode\nbld.IsSwaggerJsonExportMode(); //returns true if running in swagger export mode\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoints with EmptyRequest and EmptyResponse\nDESCRIPTION: Example of defining an endpoint that uses EmptyRequest and EmptyResponse when no request or response data is needed.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : Endpoint<EmptyRequest,EmptyResponse> { }\n```\n\n----------------------------------------\n\nTITLE: Creating a State Holder Class for Processor Communication\nDESCRIPTION: Implementation of a state holder class that can be shared among pre-processors, post-processors, and endpoints. This class tracks execution time and stores processing status information.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyStateBag\n{\n    private readonly Stopwatch _sw = new();\n\n    public bool IsValidAge { get; set; }\n    public string Status { get; set; }\n    public long DurationMillis => _sw.ElapsedMilliseconds;\n\n    public MyStateBag() => _sw.Start();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscriber Exception Receiver in C#\nDESCRIPTION: Creates a custom subscriber exception receiver by inheriting from SubscriberExceptionReceiver and overriding specific methods to handle different types of errors.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\ninternal sealed class MySubErrorReceiver : SubscriberExceptionReceiver\n{\n    public override async Task OnMarkEventAsCompleteError<TEvent>(IEventStorageRecord record,\n                                                                  int attemptCount,\n                                                                  Exception exception,\n                                                                  CancellationToken ct)\n    {\n        //do whatever you like here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Auto-Generated Permissions with AccessControl in FastEndpoints\nDESCRIPTION: Demonstrates how to use the AccessControl method to specify permission names that will be automatically generated by the source generator.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n// article creation endpoint\npublic override void Configure()\n{\n    Post(\"/article\");\n    AccessControl(\"Article_Create\");\n}\n\n// article moderation endpoint\npublic override void Configure()\n{\n    Post(\"/article/moderate\");\n    AccessControl(\"Article_Approve\");\n    AccessControl(\"Article_Reject\"); //can be called multiple times\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTTP Request Format in YAML\nDESCRIPTION: Shows the structure of an HTTP request including route, URL, and JSON body.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroute: /api/user/{UserID}\nurl: /api/user/54321\njson: { \"UserID\": \"12345\" }\n```\n\n----------------------------------------\n\nTITLE: Setting CallOptions for Remote Command Execution\nDESCRIPTION: Example of how to specify CallOptions when executing a remote command to control things like timeout, headers, or cancellation.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await new MyCommand\n{\n    ...\n}\n.RemoteExecuteAsync(new CallOptions(...));\n```\n\n----------------------------------------\n\nTITLE: Configuring Antiforgery Protection in FastEndpoints Application\nDESCRIPTION: Shows how to configure antiforgery token protection in a FastEndpoints application by registering the necessary services and middleware.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Antiforgery;\n\nvar bld = WebApplication.CreateBuilder();\nbld.Services\n   .AddFastEndpoints()\n   .AddAntiforgery(); //add this\n\nvar app = bld.Build();\napp.UseAntiforgeryFE() //must come before UseFastEndpoints()\n   .UseFastEndpoints();\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Defining Event DTO with IEvent Interface in C#\nDESCRIPTION: Creates an event DTO/model class by marking it with the IEvent interface. This class represents the structure of the event data to be transmitted.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class SomethingHappened : IEvent\n{\n    public int Id { get; set; }\n    public string Description { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Revocation with Custom Middleware in C#\nDESCRIPTION: Shows how to implement JWT token revocation using an abstract middleware class by overriding the JwtTokenIsValidAsync method to check token validity against a database or cache of revoked tokens.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyBlacklistChecker(RequestDelegate next) : JwtRevocationMiddleware(next)\n{\n    protected override Task<bool> JwtTokenIsValidAsync(string jwtToken, CancellationToken ct)\n    { \n        //return true if the supplied token is still valid\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Command Middleware Components\nDESCRIPTION: Shows how to register multiple middleware components in the order they should be executed in the command pipeline, using the AddCommandMiddleware method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddCommandMiddleware(\n    c =>\n    {\n        c.Register(typeof(CommandLogger<,>), \n                   typeof(CommandValidator<,>),\n                   typeof(ResultLogger<,>));        \n    });\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters Without DTO in C#\nDESCRIPTION: Shows how to access query parameters in an endpoint without using a request DTO.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GetArticle : EndpointWithoutRequest\n{\n    public override void Configure() => Get(\"/article\");\n\n    public override Task HandleAsync(CancellationToken ct)\n    {\n        //http://localhost:5000/article?id=123\n        int articleID = Query<int>(\"id\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Progress Tracking Endpoint\nDESCRIPTION: Implementation of an endpoint that polls job progress and retrieves the final result when complete.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class JobProgressEndpoint : EndpointWithoutRequest<string>\n{\n    public override void Configure()\n    {\n        Post(\"job/progress/{trackingId:guid}\");\n        AllowAnonymous();\n    }\n\n    public override async Task HandleAsync(CancellationToken c)\n    {\n        var trackingId = Route<Guid>(\"trackingId\");\n        var jobResult = await JobTracker<MyJob>\n                            .GetJobResultAsync<JobResult<MyEndResult>>(trackingId, c);\n\n        if (jobResult is null)\n        {\n            await SendAsync(\"job execution hasn't begun yet!\");\n            return;\n        }\n\n        switch (jobResult.IsComplete)\n        {\n            case false:\n                await SendAsync($\"[{jobResult.ProgressPercentage}%] |\" +\n                                $\" status: {jobResult.CurrentStatus}\");\n                break;\n            case true:\n                await SendAsync($\"end result: {jobResult.Result.MyMessage}\");\n                break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding an Endpoint with Request and Response DTOs (epreqres)\nDESCRIPTION: Code snippet for creating an endpoint with both request and response DTOs using the 'epreqres' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds an endpoint with request and response dtos\nsealed class Endpoint : Endpoint<Request, Response>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for FastEndpoints Exception Handler in appsettings.json\nDESCRIPTION: Shows how to disable ASP.NET Core Diagnostic logging for unhandled exceptions in the appsettings.json file to avoid duplicate log entries when using FastEndpoints exception handler.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...17]exception-handler.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Warning\",\n      \"Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware\": \"None\"\n      //add this\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Schemes in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to configure multiple authentication schemes (Cookie and JWT Bearer) in the ASP.NET Core middleware pipeline. It sets up the default schemes and configures options for both cookie and JWT bearer authentication.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddAuthentication(options =>\n{\n    options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n    options.DefaultChallengeScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n})\n.AddCookie(options => options.SlidingExpiration = true) // cookie auth\n.AddJwtBearer(options =>                                // jwt bearer auth\n{\n    options.Authority = $\"https://{bld.Configuration[\"Auth0:Domain\"]}/\";\n    options.Audience = bld.Configuration[\"Auth0:Audience\"];\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Complex DTO Structure for Query Parameter Binding in C#\nDESCRIPTION: Demonstrates the structure of a complex DTO used for binding nested query parameters.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class SearchBookRequest\n{\n    [FromQuery]\n    public Book Book { get; set; } // complex type to bind from query data\n}\n\nsealed class Book\n{\n    public string Title { get; set; }                // one primitive value\n    public List<int> BarCodes { get; set; }          // multiple primitive values\n    public Author Editor { get; set; }               // one complex value\n    public IEnumerable<Author> Authors { get; set; } // multiple complex values\n}\n\nsealed class Author\n{\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Command Execution Limits in C#\nDESCRIPTION: Configuration for overriding global execution limits for specific command types.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n.UseJobQueues(o =>\n{\n    //general per queue limits\n    o.MaxConcurrency = 2; \n    o.ExecutionTimeLimit = TimeSpan.FromSeconds(10);\n    \n    //applicable only to MyCommand\n    o.LimitsFor<MyCommand>( \n        maxConcurrency: 8,\n        timeLimit: TimeSpan.FromSeconds(5));\n});\n```\n\n----------------------------------------\n\nTITLE: WebApplication Extensions for Generation Mode\nDESCRIPTION: Extension methods for checking the current generation mode of the web application.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\napp.IsNotGenerationMode(); //returns true if running normally\napp.IsApiClientGenerationMode(); //returns true if running in client gen mode\napp.IsSwaggerJsonExportMode(); //returns true if running in swagger export mode\n```\n\n----------------------------------------\n\nTITLE: Using AccessControl with Automatic Permission Requirements in FastEndpoints\nDESCRIPTION: Demonstrates the simplified approach of using AccessControl with Apply.ToThisEndpoint behavior to automatically apply the generated permission as a requirement.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Post(\"/article\");\n    AccessControl(\n        keyName: \"Article_Create\",\n        behavior: Apply.ToThisEndpoint);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Integrated Testing Project\nDESCRIPTION: Command to scaffold a FastEndpoints starter project with xUnit tests placed alongside the endpoints being tested via the dotnet CLI.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new feintproj -n MyAwesomeProject\n```\n\n----------------------------------------\n\nTITLE: Example JSON Request Body\nDESCRIPTION: Illustrates a JSON request body with nested objects for user and address data.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UserID\": 111,\n  \"Address\": {\n    \"Street\": \"123 road\",\n    \"City\": \"New York\",\n    \"Country\": \"USA\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Endpoints with Additional Metadata\nDESCRIPTION: Configuring additional metadata for an endpoint using the Description method, including custom error responses.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : Endpoint<MyRequest, MyResponse>\n{\n    public override void Configure()\n    {\n        Post(\"/item/create\");\n        Description(b => b\n            .ProducesProblemDetails(400, \"application/json+problem\") //if using RFC errors \n            .ProducesProblemFE<InternalErrorResponse>(500)); //if using FE exception handler\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Response Serialization\nDESCRIPTION: Implementation of custom response serialization using Newtonsoft.Json.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c =>\n{\n    c.Serializer.ResponseSerializer = (rsp, dto, cType, jCtx, ct) =>\n    {\n        rsp.ContentType = cType;\n        return rsp.WriteAsync(Newtonsoft.Json.JsonConvert.SerializeObject(dto), ct);\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Event Storage for Publisher in C#\nDESCRIPTION: Specifies custom implementations for event storage and provider at startup, enabling persistent storage for the publisher's event queue.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapHandlers<EventRecord, HubStorageProvider>(h =>\n{\n    h.RegisterEventHub<SomethingHappened>();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Send Method in Endpoint\nDESCRIPTION: Demonstrates how to use a custom send method extension in an endpoint handler\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...20]misc-conveniences.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic override async Task HandleAsync(Request r, CancellationToken ct)\n{\n    await this.SendStatusCode(219);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Partial Class for the Allow Permission System\nDESCRIPTION: Shows how to extend the auto-generated Allow class with custom permissions by creating a partial class in the same namespace.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyProject.Auth;\n\npublic static partial class Allow\n{\n    public const string Admin_Do_Anything = \"000\";   \n}\n```\n\n----------------------------------------\n\nTITLE: Creating a xUnit Test Project\nDESCRIPTION: Command to scaffold a xUnit integration testing project for FastEndpoints via the dotnet CLI.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new fetest\n```\n\n----------------------------------------\n\nTITLE: MVC Controller Bombardier Test Results\nDESCRIPTION: Performance statistics for MVC Controllers showing requests per second, latency, HTTP response codes, and throughput.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/benchmarks@kit-docs.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nStatistics        Avg      Stdev        Max\n  Reqs/sec    224798.56   17129.93  258658.48\n  Latency        2.25ms     1.01ms   388.00ms\n  HTTP codes:\n    1xx - 0, 2xx - 6800642, 3xx - 0, 4xx - 0, 5xx - 0\n    others - 0\n  Throughput:   113.71MB/s\n```\n\n----------------------------------------\n\nTITLE: JSON Body for FromBody Attribute Binding\nDESCRIPTION: Illustrates the JSON structure required when using [FromBody] attribute on a DTO property.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Street\": \"123 road\",\n  \"City\": \"new york\",\n  \"Country\": \"usa\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Global Request Binder in FastEndpoints\nDESCRIPTION: Shows how to register a custom global request binder with the dependency injection container. The registration must occur before the AddFastEndpoints() call.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddSingleton(typeof(IRequestBinder<>), typeof(MyRequestBinder<>));\nbld.Services.AddFastEndpoints(); //this must come after\n```\n\n----------------------------------------\n\nTITLE: Registering Fake Event Handlers\nDESCRIPTION: Shows how to register and use fake event handlers in unit tests using dependency injection.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task FakeEventHandlerIsExecuted()\n{\n    var fakeHandler = new FakeEventHandler();\n\n    Factory.RegisterTestServices( //register fake handler\n        s =>\n        {\n            s.AddSingleton<IEventHandler<NewItemAddedToStock>>(fakeHandler);\n        });\n\n    //emulating event being published\n    //typically the unit you're testing will be the publisher\n    await new NewItemAddedToStock { Name = \"xyz\" }.PublishAsync();\n\n    fakeHandler.Name.ShouldBe(\"xyz\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Hub in Event Broker Mode\nDESCRIPTION: Setting up an event hub in Event Broker mode which allows both server and external publishers to send events. This configuration is done during application startup when mapping handlers.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapHandlers(h =>\n{\n    h.RegisterEventHub<SomethingHappened>(HubMode.EventBroker);\n});\n```\n\n----------------------------------------\n\nTITLE: FastEndpoints Bombardier Test Results\nDESCRIPTION: Performance statistics for FastEndpoints showing requests per second, latency, HTTP response codes, and throughput.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/benchmarks@kit-docs.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nStatistics        Avg      Stdev        Max\n  Reqs/sec    254103.07   17146.14  289439.60\n  Latency        1.99ms     0.95ms   415.00ms\n  HTTP codes:\n    1xx - 0, 2xx - 7679513, 3xx - 0, 4xx - 0, 5xx - 0\n    others - 0\n  Throughput:   128.41MB/s\n```\n\n----------------------------------------\n\nTITLE: Configuring API Client Download Endpoint\nDESCRIPTION: Sets up an endpoint for downloading generated API client code as a zip file with custom naming and caching configuration.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.SwaggerDocument(o =>\n{\n    o.DocumentSettings = s =>\n    {\n        s.DocumentName = \"v1\"; //must match what's being passed in to the map method below\n    };\n});\n\napp.MapApiClientEndpoint(\"/cs-client\", c =>\n{\n    c.SwaggerDocumentName = \"v1\"; //must match document name set above\n    c.Language = GenerationLanguage.CSharp;\n    c.ClientNamespaceName = \"MyCompanyName\";\n    c.ClientClassName = \"MyCsClient\";\n    ...\n},\no => //endpoint customization settings\n{\n    o.CacheOutput(p => p.Expire(TimeSpan.FromDays(365))); //cache the zip\n    o.ExcludeFromDescription(); //hides this endpoint from swagger docs\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Claims in C#\nDESCRIPTION: Demonstrates how to make a claim optional in FastEndpoints by using the FromClaim attribute with IsRequired set to false.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\n[FromClaim(IsRequired = false)]\n```\n\n----------------------------------------\n\nTITLE: Ordering Tests in Collections with Priority Attributes in C#\nDESCRIPTION: Illustrates how to use Priority attributes to control the execution order of test collections, classes, and methods.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[Priority(1)] //makes this collection execute first\npublic class Collection_A : TestCollection<Sut> {}\n\n[Priority(2)] //makes this collection execute second\npublic class Collection_B : TestCollection<Sut> {}\n\n[Collection<Collection_A>] //associate class with collection A\n[Priority(1)] //makes this class execute first when collection A executes\npublic class A_First_Class(Sut App) : TestBase\n{\n    [Fact, Priority(1)] //makes this method execute first when this class executes\n    public Task First()\n        => Task.CompletedTask;\n\n    [Fact, Priority(2)] //make this method execute second when this class executes\n    public Task Second()\n        => Task.CompletedTask;\n}\n\n[Collection<Collection_A>] //associate class with collection A\n[Priority(2)] //makes this class execute second when collection A executes\npublic class A_Second_Class(Sut App) : TestBase\n{\n    [Fact, Priority(2)]\n    public Task Fourth()\n        => Task.CompletedTask;\n\n    [Fact, Priority(1)]\n    public Task Third()\n        => Task.CompletedTask;\n}\n\n[Collection<Collection_B>]\n[Priority(2)]\npublic class B_Second_Class(Sut App) : TestBase\n{\n    [Fact, Priority(2)]\n    public Task Eighth()\n        => Task.CompletedTask;\n\n    [Fact, Priority(1)]\n    public Task Seventh()\n        => Task.CompletedTask;\n}\n\n[Collection<Collection_B>]\n[Priority(1)]\npublic class B_First_Class(Sut App) : TestBase\n{\n    [Fact, Priority(1)]\n    public Task Fifth()\n        => Task.CompletedTask;\n\n    [Fact, Priority(2)]\n    public Task Sixth()\n        => Task.CompletedTask;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling JWT Auth Scheme in Swagger for C#\nDESCRIPTION: This snippet demonstrates how to disable the automatic JWT Bearer Auth support in Swagger documentation for FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.SwaggerDocument(o => o.EnableJWTBearerAuth = false);\n```\n\n----------------------------------------\n\nTITLE: Implementing Hub Exception Receiver in C#\nDESCRIPTION: Example of implementing an event hub error receiver class that handles exceptions during event processing. This class inherits from EventHubExceptionReceiver and overrides the OnGetNextEventRecordError method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\ninternal sealed class MyHubErrorReceiver : EventHubExceptionReceiver\n{\n    public override Task OnGetNextEventRecordError<TEvent>(string subscriberID,\n                                                       int attemptCount,\n                                                       Exception exception,\n                                                       CancellationToken ct)\n    {\n        //do whatever you like here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Request for FastEndpoints Demo\nDESCRIPTION: Example JSON request body to send to the /api/user/create endpoint for testing.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"FirstName\": \"Marlon\",\n  \"LastName\": \"Brando\",\n  \"Age\": 40\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Subscriber Exception Receiver in C#\nDESCRIPTION: Adds the custom subscriber exception receiver to the dependency injection container at startup, enabling custom error handling for the subscriber.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddSubscriberExceptionReceiver<MySubErrorReceiver>();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Post-Processor with State Sharing\nDESCRIPTION: Example of a post-processor that inherits from the abstract PostProcessor class with state sharing. This processor logs the request duration using the shared state.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DurationLogger : PostProcessor<MyRequest, MyStateBag, object>\n{\n    public override Task PostProcessAsync(IPostProcessorContext<MyRequest, object> ctx, \n                                          MyStateBag state, \n                                          CancellationToken ct)\n    {\n        ctx.HttpContext.Resolve<ILogger<DurationLogger>>()\n           .LogInformation(\"request took {@duration} ms.\", state.DurationMillis);\n\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding an Endpoint Summary (epsum)\nDESCRIPTION: Code snippet for creating a summary class for an endpoint and request DTO using the 'epsum' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds a summary class for a given endpoint and request dto\nsealed class Summary : Summary<Endpoint, Request>\n```\n\n----------------------------------------\n\nTITLE: Implementing Declarative Security Policies in an Endpoint\nDESCRIPTION: Example of an endpoint with declarative security requirements including specific claims, roles, and permissions. This approach allows defining authorization requirements directly in the endpoint without pre-registering policies.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RestrictedEndpoint : Endpoint<RestrictedRequest>\n{\n    public override void Configure()\n    {\n        Post(\"/api/restricted\");\n        Claims(\"AdminID\", \"EmployeeID\");\n        Roles(\"Admin\", \"Manager\");\n        Permissions(\"UpdateUsersPermission\", \"DeleteUsersPermission\");\n        Policy(x => x.RequireAssertion(...));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Error DTO Type\nDESCRIPTION: Configuration for specifying custom error response DTO type for Swagger metadata generation.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c => c.Errors.ProducesMetadataType = typeof(ProblemDetails))\n```\n\n----------------------------------------\n\nTITLE: Constructing Form Data for Complex DTO Binding using cURL\nDESCRIPTION: Shows how to construct form data using cURL to match the complex DTO structure, including nested objects and collections.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\ncurl --location 'http://localhost:5000/api/book' \\\n--form 'Title=\"book title\"' \\\n--form 'BarCodes=\"12345\"' \\\n--form 'BarCodes=\"54321\"' \\\n--form 'Cover=@\"/cover.jpg\"' \\\n--form 'AlternateCovers=@\"/alt-cover-1.jpg\"' \\\n--form 'AlternateCovers=@\"/alt-cover-2.jpg\"' \\\n--form 'Editor.Name=\"main author name\"' \\\n--form 'Editor.ProfilePicture=@\"/main-profile.jpg\"' \\\n--form 'Editor.Agreements=@\"/editor-agreement-1.pdf\"' \\\n--form 'Editor.Agreements=@\"/editor-agreement-2.pdf\"' \\\n--form 'Authors[0].Name=\"author 1 name\"' \\\n--form 'Authors[0].ProfilePicture=@\"/author-1-profile.jpg\"' \\\n--form 'Authors[0].Agreements=@\"/author-1-agreement-1.pdf\"' \\\n--form 'Authors[0].Agreements=@\"/author-1-agreement-2.pdf\"'\n```\n\n----------------------------------------\n\nTITLE: Clearing Specific Produces Metadata\nDESCRIPTION: Selectively clearing produces metadata for specific status codes without removing all defaults.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nDescription(x => x.ClearDefaultProduces(200, 401, 403))\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Pre-processor (preproc)\nDESCRIPTION: Code snippet for creating a pre-processor for a request DTO using the 'preproc' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds a pre-processor for a given request dto\nsealed class Processor : IPreProcessor<Request>\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Storage Provider with Result Handling\nDESCRIPTION: Implementation of a job storage provider that handles storing and retrieving job results through defined async methods.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class JobStorageProvider : IJobStorageProvider<JobRecord>, IJobResultProvider\n{\n    ...\n\n    public Task StoreJobResultAsync<TResult>(Guid trackingId, TResult result, CancellationToken ct)\n    {\n        // 1.) retrieve the job by trackingId.\n        \n        // 2.) set the result on the job like so:        \n        ((IJobResultStorage)job).SetResult(result);\n        \n        // 3.) persist the job entity back to the database.\n    }\n\n    public Task<TResult?> GetJobResultAsync<TResult>(Guid trackingId, CancellationToken ct)\n    {\n        // 1.) retrieve the job by trackingId.\n        \n        // 2.) extract the result from the job like so:\n        var result = ((IJobResultStorage)job).GetResult<TResult>();\n        \n        // 3.) return the result\n    }\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Permission Constants in FastEndpoints\nDESCRIPTION: Shows the auto-generated Allow class with permission constants that are created by the source generator based on AccessControl calls in endpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\npublic static partial class Allow\n{\n    public const string Article_Create = \"7OR\";\n    public const string Article_Approve = \"LVN\";\n    public const string Article_Reject = \"ZTT\";\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Internal Server Error in FastEndpoints\nDESCRIPTION: Shows the structure of a JSON response sent to the client when an internal server error occurs. It includes status, code, reason, and a note for further investigation.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...17]exception-handler.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Status\": \"Internal Server Error!\",\n  \"Code\": 500,\n  \"Reason\": \"'x' is an invalid start of a value. Path: $.ValMin | LineNumber: 4...\",\n  \"Note\": \"See application log for stack trace.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Permissions in C#\nDESCRIPTION: Shows how to make a permission check optional by setting IsRequired to false on the HasPermission attribute in FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n[HasPermission(\"Article_Update\", IsRequired = false)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Handler with Progress Tracking\nDESCRIPTION: Implementation of a command handler that processes a job while tracking and updating progress.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class MyJobHandler(IJobTracker<MyJob> tracker) // inject the job tracker\n    : ICommandHandler<MyJob, JobResult<MyEndResult>>\n{\n    public async Task<JobResult<MyEndResult>> ExecuteAsync(MyJob job, CancellationToken ct)\n    {\n        var jobResult = new JobResult<MyEndResult>(totalSteps: 100); // set total number of steps\n\n        for (var i = 0; i < 100; i++)\n        {\n            // update & store the current progress via tracker\n            jobResult.CurrentStep = i;\n            jobResult.CurrentStatus = $\"completed step: {i}\";\n            await tracker.StoreJobResultAsync(job.TrackingID, jobResult, ct);\n        }\n\n        jobResult.CurrentStatus = \"all done!\";\n        jobResult.Result = new() { MyMessage = $\"thank you {job.MyName}!\" }; // set the end-result\n\n        return jobResult; // return the job-result instance\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Post-processor (postproc)\nDESCRIPTION: Code snippet for creating a post-processor for request and response DTOs using the 'postproc' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds a post-processor for a given request & response dto\nsealed class Processor : IPostProcessor<Request, Response>\n```\n\n----------------------------------------\n\nTITLE: Generating a FastEndpoints Project from OpenAPI Document\nDESCRIPTION: Command to generate a FastEndpoints server project from an OpenAPI document using the OpenAPI Generator CLI tool.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nopenapi-generator-cli generate \\\n  --generator-name aspnet-fastendpoints \\\n  --input-spec d:/my_open_api_file.yaml \\\n  --output d:/my_fastendpoints_project\n```\n\n----------------------------------------\n\nTITLE: Multi-Project Source Generator Setup\nDESCRIPTION: Configuration for source generator type discovery across multiple projects/assemblies.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddFastEndpoints(o =>\n{\n    o.SourceGeneratorDiscoveredTypes.AddRange(MyApp.DiscoveredTypes.All);\n    o.SourceGeneratorDiscoveredTypes.AddRange(SomeAssembly.DiscoveredTypes.All);\n});\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON Format\nDESCRIPTION: Shows the JSON error response format when validation errors are collected from both the endpoint and command handler, including general errors and property-specific errors.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusCode\": 400,\n  \"message\": \"One or more errors occured!\",\n  \"errors\": {\n    \"generalErrors\": [\n      \"an error added by the endpoint!\",\n      \"no jedi allowed here!\"\n    ],\n    \"firstName\": [\n      \"first name is too short!\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Provider in Swagger Configuration\nDESCRIPTION: Accessing the service provider when configuring Swagger documentation to retrieve services like IOptions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.SwaggerDocument(o =>\n{\n // IServiceProvider is available via DocumentOptions.Services property\n var settings = o.Services.GetRequiredService<IOptions<MySettings>>();\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Authentication Scheme in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to explicitly set the default authentication scheme when using multiple schemes. It configures JWT Bearer and Cookie authentication, then sets JWT Bearer as the default scheme.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddAuthenticationJwtBearer(...);\nbld.Services.AddAuthenticationCookie(...);\nbld.Services.AddAuthentication(o => //must be the last auth call\n{\n    o.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;\n    o.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature File Set with dotnet CLI\nDESCRIPTION: Example command for creating a new feature file set using the dotnet CLI with the FastEndpoints template, specifying namespace, HTTP method, route, and output directory.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new feat -n MyProject.Comments.Create -m post -r api/comments -o Features/Comments/Create\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mapper Class in FastEndpoints\nDESCRIPTION: Implementation of a PersonMapper class that inherits from Mapper<TRequest, TResponse, TEntity> to handle mapping between Request, Response, and Person entity types.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...6]domain-entity-mapping.md#2025-04-21_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class PersonMapper : Mapper<Request, Response, Person>\n{\n    public override Person ToEntity(Request r) => new()\n    {\n        Id = r.Id,\n        DateOfBirth = DateOnly.Parse(r.BirthDay),\n        FullName = $\"{r.FirstName} {r.LastName}\"\n    };\n\n    public override Response FromEntity(Person e) => new()\n    {\n        Id = e.Id,\n        FullName = e.FullName,\n        UserName = $\"USR{e.Id:0000000000}\",\n        Age = (DateOnly.FromDateTime(DateTime.UtcNow).DayNumber - e.DateOfBirth.DayNumber) / 365,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Validation Failure Response\nDESCRIPTION: Endpoint configuration to disable automatic validation failure responses\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...4]validation.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CreateUserEndpoint : Endpoint<CreateUserRequest>\n{\n    public override void Configure()\n    {\n        Post(\"/api/user/create\");\n        DontThrowIfValidationFails();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Closed Generic Command Middleware\nDESCRIPTION: Shows how to register a closed generic middleware component using the generic overload of the Register method, specifying the exact command and result types.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddCommandMiddleware(c => c.Register<MyCommand, string, ClosedGenericMiddleware>());\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Request and Response DTOs (epdto)\nDESCRIPTION: Code snippet for creating the request and response DTOs for an endpoint using the 'epdto' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds the request & response dtos for an endpoint\nsealed class Request {}\nsealed class Response {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple HTTP Verbs and Routes\nDESCRIPTION: Shows how to configure an endpoint to handle multiple HTTP verbs and routes in a single endpoint class\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...20]misc-conveniences.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Verbs(Http.POST, Http.PUT, Http.Patch);\n    Routes(\"/api/user/create\", \"/api/user/save\");\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Required Packages in Client Project\nDESCRIPTION: XML configuration showing how to reference both the contracts project and the FastEndpoints remote messaging library in the client project.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <ProjectReference Include=\"..\\Contracts\\Contracts.csproj\"/>\n    <PackageReference Include=\"FastEndpoints.Messaging.Remote\" Version=\"5.*\"/>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Enabling XML Documentation for FastEndpoints\nDESCRIPTION: Adding the necessary project configuration to enable XML documentation generation for Swagger integration.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n    <NoWarn>CS1591</NoWarn>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Response Serialization Parameters\nDESCRIPTION: Input parameters documentation for custom response serialization function.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nHttpResponse: the http response object\nobject: the response dto to be serialized\nstring: the response content-type\nJsonserializerContext?: nullable json serializer context\nCancellationToken: a cancellation token\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Command Handler without Result (cmd)\nDESCRIPTION: Code snippet for creating a command handler for a command model that doesn't return a result using the 'cmd' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds a command handler for a given command model that does not return a result\nsealed class CommandHandler : ICommandHandler<Command>\n```\n\n----------------------------------------\n\nTITLE: Customizing Endpoint Names in Swagger for C#\nDESCRIPTION: This code demonstrates how to specify a custom name (operation ID) for an endpoint in Swagger documentation using the WithName() method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Configure()\n{\n    Get(\"/sales/invoice/{InvoiceID}\");\n    Description(x => x.WithName(\"GetInvoice\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Events in Endpoint Handler\nDESCRIPTION: Demonstrates event publishing within an endpoint handler using PublishAsync method after creating an order.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...12]event-bus.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CreateOrderEndpoint : Endpoint<CreateOrderRequest>\n{\n    public override void Configure()\n    {\n        Post(\"/sales/orders/create\");\n    }\n\n    public override async Task HandleAsync(CreateOrderRequest req, CancellationToken ct)\n    {\n        var orderID = await orderRepo.CreateNewOrder(req);\n\n        await PublishAsync(new OrderCreatedEvent\n        {\n            OrderID = orderID,\n            CustomerName = req.Customer,\n            OrderTotal = req.OrderValue\n        });\n\n        await SendOkAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Advanced Testing Features in C#\nDESCRIPTION: Shows how to enable advanced testing features by adding an assembly-level attribute to the test project.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing FastEndpoints.Testing;\n\n[assembly: EnableAdvancedTesting]\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Claim Type\nDESCRIPTION: Sets a custom claim type for role-based authorization. By default, the system looks for claims with type 'role', but this can be changed to a custom value.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c => c.Security.RoleClaimType = \"...\") //defaults to 'role'\n```\n\n----------------------------------------\n\nTITLE: Defining GetUserRequest DTO in C#\nDESCRIPTION: Demonstrates a simple C# DTO class for user requests with a UserID property.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GetUserRequest\n{\n    public string UserID { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Antiforgery Cookie Name in C# with FastEndpoints\nDESCRIPTION: This snippet demonstrates how to customize the name of the cookie used in the antiforgery verification process. It uses the AddAntiforgery method to configure the Cookie.Name option.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddAntiforgery(o => o.Cookie.Name = \"Antiforgery\")\n```\n\n----------------------------------------\n\nTITLE: Using Permission Groups in JWT Token Creation in FastEndpoints\nDESCRIPTION: Demonstrates how to assign all permissions from a permission group when creating a JWT token for a user, simplifying the permission assignment process.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nvar jwtToken = JwtBearer.CreateToken(\n    priviledges: u =>\n    {\n        u.Permissions.AddRange(Allow.Admin);\n    });\n```\n\n----------------------------------------\n\nTITLE: Request Deserialization Parameters\nDESCRIPTION: Input parameters documentation for custom JSON deserialization function.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nHttpRequest: the http request object\nType: the type of the request dto\nJsonSerializerContext?: nullable json serializer context\nCancellationToken: a cancellation token\n```\n\n----------------------------------------\n\nTITLE: Creating Services with Automatic Registration using Attributes in C#\nDESCRIPTION: Shows how to use the RegisterService attribute to mark classes for automatic registration with dependency injection. This approach eliminates the need for manual service registration at startup.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...5]dependency-injection.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n[RegisterService<IHelloWorldService>(LifeTime.Scoped)]\npublic class HelloWorldService : IHelloWorldService\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FastEndpoints Template Pack\nDESCRIPTION: Shell commands to install the FastEndpoints template pack and scaffold a new project for end-to-end testing.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new install FastEndpoints.TemplatePack\ndotnet new feproj -n E2EWalkthrough\n```\n\n----------------------------------------\n\nTITLE: Adding XML Documentation to Generated Permissions in FastEndpoints\nDESCRIPTION: Shows how to add XML documentation comments to auto-generated permissions by including a comment after the opening bracket of the AccessControl method.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nAccessControl( //Permission for creating new articles in the system.\n    keyName: \"Article_Create\",\n    behavior: Apply.ToThisEndpoint,\n    groupNames: \"Author\",\"Admin\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Permission Claim Type\nDESCRIPTION: Sets a custom claim type for permissions authorization. By default, the system looks for claims with type 'permissions', but this can be changed to a custom value.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c => c.Security.PermissionsClaimType = \"...\") //defaults to 'permissions'\n```\n\n----------------------------------------\n\nTITLE: Publishing Events Outside Endpoints\nDESCRIPTION: Demonstrates event publishing from anywhere by implementing IEvent interface and using extension methods.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...12]event-bus.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderCreatedEvent : IEvent { ... }\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait new OrderCreatedEvent\n{\n    OrderID = \"12345\",\n    CustomerName = \"scarlet johanson\",\n    OrderTotal = 123.45m\n}\n.PublishAsync(Mode.WaitForAll);\n```\n\n----------------------------------------\n\nTITLE: Installing FastEndpoints.Security Package\nDESCRIPTION: Command to install the FastEndpoints.Security package via the .NET CLI, which provides security features for FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package FastEndpoints.Security\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access and Sitemap in robots.txt for FastEndpoints\nDESCRIPTION: This robots.txt file sets permissions for web crawlers and specifies the sitemap location. It allows all user agents to access the entire site and provides the URL for the XML sitemap.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/static/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n\nSitemap: https://fast-endpoints.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Using Global Components in Markdown\nDESCRIPTION: Demonstrates how to use global Svelte components in Markdown files, including passing props and dynamic slot elements.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/kit-docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Use the component as-is. -->\n<Button />\n\n<!-- Or, use a markdown container. -->\n:::button propA=\"valueA\"|propB=10\nDefault slot content here.\n:::\n\n<!-- You can pass in dynamic slot elements! -->\n<!-- If you omit `tag`, it'll default to `<p>`. -->\n:::button (tag=h1&slot=title)=Title\nDefault slot content here.\n:::\n```\n\n----------------------------------------\n\nTITLE: Registering Fake Command Handlers\nDESCRIPTION: Demonstrates how to register and use fake command handlers in unit tests using FakeItEasy framework.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task FakeCommandHandlerIsExecuted()\n{    \n    var fakeHandler = A.Fake<ICommandHandler<GetFullNameCommand, string>>();\n    \n    A.CallTo(() => fakeHandler.ExecuteAsync(\n        A<GetFullNameCommand>.Ignored, \n        A<CancellationToken>.Ignored))\n     .Returns(Task.FromResult(\"Fake Result\"));     \n    \n    fakeHandler.RegisterForTesting(); //register the fake handler\n\n    //emulating command being executed\n    //typically the unit you're testing will be the executor\n    var command = new GetFullNameCommand { FirstName = \"a\", LastName = \"b\" };\n    var result = await command.ExecuteAsync();\n\n    Assert.Equal(\"Fake Result\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from FastEndpoints Endpoint\nDESCRIPTION: Example JSON response received from the endpoint after processing the request.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"FullName\": \"Marlon Brando\",\n  \"IsOver18\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Command Handler with Result (cmdres)\nDESCRIPTION: Code snippet for creating a command handler for a command model that returns a result using the 'cmdres' shortcut in FastEndpoints extensions.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Scaffolds a command handler for a given command model that returns a result\nsealed class CommandHandler : ICommandHandler<Command, Result>\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Options for Remote Connections\nDESCRIPTION: Code showing how to configure gRPC channel options when setting up remote connections in a client application.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapRemote(\"http://localhost:6000\", c =>\n{\n    c.ChannelOptions.MaxRetryAttempts = 5;\n    c.ChannelOptions.HttpHandler = new() { ... };\n    c.ChannelOptions.ServiceConfig = new() { ... };\n});\n```\n\n----------------------------------------\n\nTITLE: Installing FastEndpoints Generator\nDESCRIPTION: Command to install the FastEndpoints.Generator package for source generation support.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package FastEndpoints.Generator\n```\n\n----------------------------------------\n\nTITLE: Defining Trackable Job with Result Type\nDESCRIPTION: Implementation of a trackable job class that includes a tracking ID and custom result type.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...14]job-queues.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class MyJob : ITrackableJob<JobResult<MyEndResult>>\n{\n    public Guid TrackingID { get; set; } // required by the interface\n    public string MyName { get; set; }\n}\n\nsealed class MyEndResult\n{\n    public string MyMessage { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Component Mappings in JavaScript\nDESCRIPTION: Shows how to configure global Svelte component mappings for inline rules, block rules, and custom containers in the kit-docs plugin configuration.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/kit-docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nkitDocsPlugin({\n  markdown: {\n    components: [\n      // Override inline rule.\n      // `Image.svelte` must be a global component.\n      { name: 'Image', type: 'inline', rule: 'image' },\n      // Override block rule.\n      // `Blockquote.svelte` must be a global component.\n      { name: 'Blockquote', type: 'block', rule: 'blockquote' },\n      // Create custom container.\n      // `Button.svelte` must be a global component.\n      { name: 'Button', type: 'custom', container: { marker: '!' } },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Serializer Context in FastEndpoints C#\nDESCRIPTION: Shows how to specify a serializer context for an endpoint in FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UpdateAddress : Endpoint<RequestModel, ResponseModel>\n{\n    public override void Configure()\n    {\n        Post(\"user/address\");\n        SerializerContext(UpdateAddressCtx.Default);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding File Collections to DTO Properties in FastEndpoints\nDESCRIPTION: This snippet demonstrates how to bind collections of form files to the request DTO using various collection types like IEnumerable<IFormFile>, List<IFormFile>, and IFormFileCollection.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...7]file-handling.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyRequest\n{\n    public IEnumerable<IFormFile> Cars { get; set; }\n    public List<IFormFile> Boats { get; set; }    \n    public IFormFileCollection Jets { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Endpoints in Swagger for C#\nDESCRIPTION: This code demonstrates how to filter endpoints in Swagger documentation based on specific criteria, such as endpoint tags.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n//swagger doc\nbld.Services.SwaggerDocument(o =>\n{\n    o.EndpointFilter = ep => ep.EndpointTags?.Contains(\"include me\") is true;\n});\n\n//endpoint\npublic override void Configure()\n{\n    Get(\"test\");\n    Tags(\"include me\");\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Messaging Core Package in Contracts Project\nDESCRIPTION: XML configuration showing how to reference the FastEndpoints core messaging library in the shared contracts project.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...15]remote-procedure-calls.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <PackageReference Include=\"FastEndpoints.Messaging.Core\" Version=\"5.*\"/>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata to Endpoint Configuration\nDESCRIPTION: Shows how to add custom metadata attributes to an endpoint when using the Configure() method approach.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nOptions(b => b.WithMetadata(new MyCustomAttribute()));\n```\n\n----------------------------------------\n\nTITLE: Validation Error Response Format\nDESCRIPTION: Example JSON response format for validation failures\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...4]validation.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"StatusCode\": 400,\n\t\"Message\": \"One or more errors occured!\",\n\t\"Errors\": {\n\t\t\"FullName\": [\"your name is required!\", \"your name is too short!\"],\n\t\t\"Age\": [\"we need your age!\", \"you are not legal yet!\"]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Test Classes with Collections in C#\nDESCRIPTION: Demonstrates how to associate test classes with a test collection using the [Collection<TCollection>] attribute and inheriting from TestBase.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Collection<CollectionX>]\npublic class TestClassA(AppForCollectionX App) : TestBase\n{\n    ...\n}\n\n[Collection<CollectionX>]\npublic class TestClassB(AppForCollectionX App) : TestBase\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Caching in a FastEndpoints Endpoint\nDESCRIPTION: This snippet shows how to implement a FastEndpoints endpoint with response caching. It configures a GET endpoint that caches responses for 60 seconds using the ResponseCache method in the Configure override.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...8]response-caching.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyEndpoint : EndpointWithoutRequest\n{\n    public override void Configure()\n    {\n        Get(\"/api/cached-ticks\");\n        ResponseCache(60); //cache for 60 seconds\n    }\n\n    public override Task HandleAsync(CancellationToken ct)\n    {\n        return SendAsync(new\n        {\n            Message = \"this response is cached\"\n            Ticks = DateTime.UtcNow.Ticks\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FastEndpoints.Swagger Package\nDESCRIPTION: Command to install the FastEndpoints.Swagger NuGet package which provides Swagger integration.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package FastEndpoints.Swagger\n```\n\n----------------------------------------\n\nTITLE: Displaying Operation IDs in Swagger UI\nDESCRIPTION: Enables the display of Operation IDs in the Swagger UI interface.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseSwaggerGen(uiConfig: u => u.ShowOperationIDs());\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Permission Groups in FastEndpoints\nDESCRIPTION: Shows the auto-generated Allow class with permission group properties that provide collections of related permissions based on the groupNames parameter.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...2]security.md#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\npublic static partial class Allow\n{\n    public static IEnumerable<string> Author => _author;\n    private static readonly List<string> _author = new()\n    {\n        Article_Create\n    };\n\n    public static IEnumerable<string> Admin => _admin;\n    private static readonly List<string> _admin = new()\n    {\n        Article_Create,\n        Article_Approve\n    };    \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Closed Generic Command Middleware\nDESCRIPTION: Demonstrates how to create a closed generic middleware component that handles a specific command type and result type, rather than using open generics.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...13]command-bus.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nsealed class ClosedGenericMiddleware : ICommandMiddleware<MyCommand, string>\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FastEndpoints Template Pack\nDESCRIPTION: Command to install the FastEndpoints Template Pack using the dotnet CLI, which provides templates for creating new projects and features.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...23]scaffolding.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new install FastEndpoints.TemplatePack\n```\n\n----------------------------------------\n\nTITLE: Using JsonPropertyName Attribute in C#\nDESCRIPTION: Demonstrates how to use [JsonPropertyName] attribute to map mismatched property names.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...3]model-binding.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[JsonPropertyName(\"address\")]\npublic Address UserAddress { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Kestrel for Large File Uploads in FastEndpoints\nDESCRIPTION: This snippet shows how to increase the maximum request body size in Kestrel to allow for large file uploads. This setting needs to be adjusted based on the maximum allowed file size for your application.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...7]file-handling.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbld.WebHost.ConfigureKestrel(o =>\n{\n    o.Limits.MaxRequestBodySize = 1073741824; //set to max allowed file size of your system\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Client Generation Package\nDESCRIPTION: Command to install the FastEndpoints.ClientGen.Kiota package for API client generation.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...10]swagger-support.md#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package FastEndpoints.ClientGen.Kiota\n```\n\n----------------------------------------\n\nTITLE: Multi-Project Reflection Cache Setup\nDESCRIPTION: Configuration for source generated reflection across multiple projects.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseFastEndpoints(c => c.Binding.ReflectionCache\n                                   .AddFromMyApp()\n                                   .AddFromContracts())\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared State in Interface-Based Processors\nDESCRIPTION: Example of accessing shared state in a processor that implements the IPreProcessor interface rather than inheriting from the abstract class. State access is done via the HttpContext.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...11]pre-post-processors.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyPreProcessor : IPreProcessor<Request>\n{\n    public Task PreProcessAsync(IPreProcessorContext<Request> ctx, CancellationToken ct)\n    {\n        var state = ctx.HttpContext.ProcessorState<MyStateBag>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Generator Discovery\nDESCRIPTION: Configuration for enabling source generator based type discovery in FastEndpoints.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...19]configuration-settings.md#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nbld.Services.AddFastEndpoints(o => o.SourceGeneratorDiscoveredTypes = DiscoveredTypes.All);\n```\n\n----------------------------------------\n\nTITLE: Minimal APIs Bombardier Test Results\nDESCRIPTION: Performance statistics for Minimal APIs showing requests per second, latency, HTTP response codes, and throughput.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/benchmarks@kit-docs.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nStatistics        Avg      Stdev        Max\n  Reqs/sec    257730.00   18733.46  360540.81\n  Latency        1.97ms     0.91ms   390.00ms\n  HTTP codes:\n    1xx - 0, 2xx - 7787939, 3xx - 0, 4xx - 0, 5xx - 0\n    others - 0\n  Throughput:   130.23MB/s\n```\n\n----------------------------------------\n\nTITLE: Suppressing CancellationToken Warning in Project File\nDESCRIPTION: XML configuration to suppress the CA2016 warning about CancellationToken usage in the project file.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...1]get-started.md#2025-04-21_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<NoWarn>CA2016</NoWarn>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default CodeFence Component in Svelte\nDESCRIPTION: Provides a minimal boilerplate for overriding the default CodeFence component in kit-docs.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/kit-docs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  /** @type {string} */\n  export let lang;\n  /** @type {string} */\n  export let ext;\n  /** @type {string} */\n  export let code;\n  /** @type {number} */\n  export let linesCount;\n  /** @type {[number, number][]} */\n  export let highlightLines = [];\n</script>\n\n<div class={`lang-${lang} ext-${ext}`}>\n  {@html code}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown to Svelte Component Transformation\nDESCRIPTION: Illustrates how Markdown syntax is transformed into Svelte components based on the configuration.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/kit-docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![alt text](https://...)\n\n> This is a blockquote.\n\n!!!button\n...\n!!!\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<Image href=\"https://...\" alt=\"alt text\" />\n\n<Blockquote>\n  This is a blockquote.\n</Blockquote>\n\n<Button>\n  ...\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Hardware and Software Configuration for Bombardier Tests\nDESCRIPTION: Test environment specifications including hardware details and test parameters for the performance benchmarks.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/benchmarks@kit-docs.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhardware: AMD Ryzen 9 5950X (16c/32t), 32GB RAM\nsoftware: .NET 9.0 RC2, Windows 11\nparameters: -c 512 -m POST -f \"body.json\" -H \"Content-Type:application/json\" -d 30s\n```\n\n----------------------------------------\n\nTITLE: Disabling WAF Cache in AppFixture\nDESCRIPTION: Example showing how to disable the WebApplicationFactory cache using an attribute on the AppFixture class.\nSOURCE: https://github.com/fastendpoints/documentation/blob/main/src/routes/docs/[...18]integration-unit-testing.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[DisableWafCache]\npublic class MyApp : AppFixture<Program>\n```"
  }
]