[
  {
    "owner": "nylas",
    "repo": "nylas-nodejs",
    "content": "TITLE: Nylas OAuth2 Authentication Flow\nDESCRIPTION: This code snippet illustrates the Nylas OAuth 2.0 authentication flow, including building the authentication URL and exchanging the authorization code for an access token.  It shows how to retrieve calendars using either the authenticated email address or the grant ID. The example requires the Nylas Node.js SDK.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/UPGRADE.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Nylas from \"nylas\";\n\nconst nylas = new Nylas({\n  api_key: \"NYLAS_API_KEY\",\n});\n\n// Build the URL for authentication\nconst authURL = nylas.auth.urlForOAuth2({\n  clientId: \"CLIENT_ID\",\n  redirectUri: \"REDIRECT_URI\",\n  loginHint: \"example@email.com\"\n});\n\n// Write code here to redirect the user to the url and parse the code\n...\n\n// Exchange the code for an access token\n\nconst codeExchangeResponse = nylas.auth.exchangeCodeForToken({\n  redirectUri: \"REDIRECT_URI\",\n  clientId: \"CLIENT_ID\",\n  clientSecret: \"CLIENT_SECRET\",\n  code: \"CODE\"\n});\n\n// Now you can either use the email address that was authenticated or the grant ID in the response as the identifier\n\nconst responseWithEmail: NylasListResponse<Calendar> = await\n  nylas.calendars.list({\n    identifier: \"example@email.com\",\n  });\n\nconst responseWithGrant: NylasListResponse<Calendar> = await\n  nylas.calendars.list({\n    identifier: codeExchangeResponse.grantId,\n    queryParams, // Now you will get a maximum of 10 calendars back\n  });\n```\n\n----------------------------------------\n\nTITLE: Listing Calendars with Nylas SDK\nDESCRIPTION: This code snippet demonstrates how to list calendars for a given account using the Nylas SDK. It uses the `calendars.list` method, passing the `identifier` of the account (GRANT_ID) to retrieve the list of calendars. The result is then logged to the console.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnylas.calendars.list({ identifier: \"GRANT_ID\" }).then(calendars => {\n  console.log(calendars);\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Calendars with Grant ID\nDESCRIPTION: This code shows how to retrieve a list of calendars using the Nylas API with the grant ID. It imports necessary modules and types from the Nylas SDK and uses the `nylas.calendars.list()` method to make the request.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/UPGRADE.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Nylas from \"nylas\";\nimport { NylasListResponse } from \"nylas/lib/types/models/responses\";\nimport { Calendar } from \"nylas/lib/types/models/calendars\";\n\nconst nylas = new Nylas({\n  apiKey: \"NYLAS_API_KEY\",\n});\n\nconst response: NylasListResponse<Calendar> = await\n  nylas.calendars.list({\n    identifier: \"GRANT_ID\", // Required, the grant ID of the account to make the request for\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Calendar Models\nDESCRIPTION: This snippet demonstrates creating and updating calendar models using the new SDK. It showcases the separation of concerns by using `CreateCalendarRequest` for creating a calendar and `UpdateCalendarRequest` for updating it. All fields are optional for updates, whereas required for create.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/UPGRADE.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Import only required if you need the typing\nimport { CreateCalendarRequest, UpdateCalendarRequest } from \"nylas/lib/types/models/calendars\";\n\nconst createCalendarRequest: CreateCalendarRequest = {\n  name: \"My Calendar\", // Calendar name is required\n  description: \"This is my calendar\", // Calendar description is optional\n  location: \"My calendar location\", // Calendar location is optional\n  timezone: \"America/New_York\", // Calendar timezone is optional\n}\n\nconst updateCalendarRequest: UpdateCalendarRequest = {\n  name: \"My Updated Calendar\", // All fields are optional since we are updating\n  hexColor: \"#000000\", // Other fields not present during creation are now available\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Nylas client\nDESCRIPTION: This code snippet shows how to initialize the Nylas client with your Nylas API key.  The `apiKey` parameter is required to authenticate your requests with the Nylas API.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Nylas from \"nylas\";\n\nconst nylas = new Nylas({\n  apiKey: \"NYLAS_API_KEY\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Calendars with Query Parameters\nDESCRIPTION: This snippet demonstrates how to list calendars with query parameters, specifically limiting the number of results.  It shows the usage of `ListCalendersQueryParams` to set the `limit` parameter to 10.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/UPGRADE.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Nylas from \"nylas\";\nimport { NylasListResponse } from \"nylas/lib/types/models/responses\";\nimport { Calendar, ListCalendersQueryParams } from \"nylas/lib/types/models/calendars\";\n\nconst nylas = new Nylas({\n  apiKey: \"NYLAS_API_KEY\",\n});\n\nconst queryParams: ListCalendersQueryParams = {\n  limit: 10\n}\n\nconst response: NylasListResponse<Calendar> = await\n  nylas.calendars.list({\n    identifier: \"GRANT_ID\",\n    queryParams, // Now you will get a maximum of 10 calendars back\n  });\n```\n\n----------------------------------------\n\nTITLE: Paginating Calendar List with Next and For Await\nDESCRIPTION: This code demonstrates two ways to paginate through a list of calendars: using the `next()` function to retrieve the next page, and using a `for await...of` loop to automatically paginate until the end of the list.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/UPGRADE.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Get a list of Calendars\nconst calendars = nylas.calendars.list({\n  identifier: 'Grant_ID',\n});\n\n// Option 1 - Use the next() function to get the next page\nconst nextPage = await calendars.next();\n\n// Option 2 - Use a for await...of loop to auto-paginate until the end\nfor await (const item of calendars) {\n  // do something with each item\n}\n```\n\n----------------------------------------\n\nTITLE: Install Nylas SDK using npm\nDESCRIPTION: This command installs the Nylas Node SDK using npm. It adds the Nylas package to your project's dependencies, allowing you to use the Nylas API within your Node.js application.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nylas\n```\n\n----------------------------------------\n\nTITLE: Initializing Nylas SDK Instance\nDESCRIPTION: This code snippet initializes a new instance of the Nylas SDK by passing in the API key to the constructor. This allows you to create multiple instances of the Nylas SDK, each with their own configuration.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/UPGRADE.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Nylas from \"nylas\";\n\nconst nylas = new Nylas({\n  apiKey: \"NYLAS_API_KEY\", // Required to make API calls\n})\n```\n\n----------------------------------------\n\nTITLE: Copy and Configure .env File\nDESCRIPTION: These commands copy the `.env.example` file to `.env` and then open the `.env` file in a text editor for configuration.  You'll need to update the .env file with your Nylas API Key and meeting link.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/examples/notetakers/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n# Edit .env with your editor\n```\n\n----------------------------------------\n\nTITLE: Copy and Configure Environment File\nDESCRIPTION: This command copies the `.env.example` file to `.env`, allowing users to configure environment variables such as the Nylas API key. Editing the `.env` file is necessary to provide the API key and other required environment variables.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/examples/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n# Edit .env with your editor and add your API key\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration\nDESCRIPTION: This command copies the example environment file to a new file named '.env' allowing users to configure their API keys and other environment-specific settings.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/examples/calendars/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n# Edit .env with your editor\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with npm\nDESCRIPTION: This command navigates to the 'examples' directory and installs the necessary npm packages listed in the package.json file. It is a prerequisite for running any of the examples.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/examples/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with npm\nDESCRIPTION: This command installs the necessary dependencies for the Nylas Notetakers API examples using npm. It should be executed from the 'examples' directory.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/examples/notetakers/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the Nylas Calendar API examples using npm.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/examples/calendars/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Run Notetakers Example with ts-node\nDESCRIPTION: This command executes the notetaker.ts example directly using ts-node, a TypeScript execution and REPL tool for Node.js.  Make sure ts-node is installed globally or locally.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/examples/notetakers/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Or directly with ts-node\nnpx ts-node notetakers/notetaker.ts\n```\n\n----------------------------------------\n\nTITLE: Running Calendar Example with ts-node\nDESCRIPTION: This command runs the TypeScript calendar example script directly using ts-node without pre-compilation.  It requires ts-node to be installed globally or locally.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/examples/calendars/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Or directly with ts-node\nnpx ts-node calendars/event_with_notetaker.ts\n```\n\n----------------------------------------\n\nTITLE: Run Notetaker Example with ts-node\nDESCRIPTION: This command executes the `notetaker.ts` script using `ts-node`, which allows running TypeScript files directly without pre-compilation. This assumes `ts-node` is installed globally or locally in the project.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/examples/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Using ts-node\nnpx ts-node notetakers/notetaker.ts\n```\n\n----------------------------------------\n\nTITLE: Running Calendar Example\nDESCRIPTION: This command runs the calendar example script using npm.  It assumes the script is defined in the package.json file in the 'calendars' script.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/examples/calendars/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# From the examples directory\nnpm run calendars\n```\n\n----------------------------------------\n\nTITLE: Run Notetakers Example with npm\nDESCRIPTION: This command executes the notetakers example using npm, assuming the script is defined in the `package.json` file.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/examples/notetakers/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# From the examples directory\nnpm run notetakers\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm\nDESCRIPTION: This command is used to execute the test suite for the Nylas Node SDK. It's crucial to run tests before submitting a pull request to ensure that changes do not introduce regressions.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/Contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Linter with npm\nDESCRIPTION: This command is used to run the linter on the Nylas Node SDK codebase. Linting helps maintain code style consistency and identify potential code quality issues.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/Contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Build and Run Notetaker Example with Node.js\nDESCRIPTION: These commands first build the TypeScript examples into JavaScript using `npm run build`. Then, it executes the compiled `notetaker.js` script using Node.js. This approach requires a build step before running the example.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/examples/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Or if you compiled the examples\nnpm run build\nnode dist/notetakers/notetaker.js\n```\n\n----------------------------------------\n\nTITLE: Symlinking Package for Local Development\nDESCRIPTION: These commands are used to symlink the Nylas Node SDK package for local development, allowing developers to test changes in a local environment without publishing the package. The first command creates a global link, and the second command links the global package to the current project.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/Contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm link\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm link nylas\n```\n\n----------------------------------------\n\nTITLE: Build Nylas SDK from source\nDESCRIPTION: These commands clone the Nylas Node.js repository, navigate to the project directory, and install the necessary dependencies. This allows developers to build and install the SDK directly from the source code.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nylas/nylas-nodejs.git\ncd nylas-nodejs\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Nylas SDK v7.0 with npm\nDESCRIPTION: This command installs the beta version of the Nylas Node SDK using npm. This is the first step in upgrading to the new SDK and allows you to access the new features and API v3 compatibility.\nSOURCE: https://github.com/nylas/nylas-nodejs/blob/main/UPGRADE.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nylas@beta\n```"
  }
]