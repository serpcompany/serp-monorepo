[
  {
    "owner": "typesense",
    "repo": "typesense",
    "content": "TITLE: Searching Documents in Typesense Collection with Python\nDESCRIPTION: Python code to search the 'companies' collection with typo tolerance. It demonstrates searching with filtering, sorting parameters, and showcases Typesense's ability to handle typographic errors in search queries.\nSOURCE: https://github.com/typesense/typesense/blob/v29/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsearch_parameters = {\n  'q'         : 'stork',\n  'query_by'  : 'company_name',\n  'filter_by' : 'num_employees:>100',\n  'sort_by'   : 'num_employees:desc'\n}\n\nclient.collections['companies'].documents.search(search_parameters)\n```\n\n----------------------------------------\n\nTITLE: Adding a Document to Typesense Collection in Python\nDESCRIPTION: Python code to add a document to the previously created 'companies' collection. The document contains company details including ID, company name, employee count, and country.\nSOURCE: https://github.com/typesense/typesense/blob/v29/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndocument = {\n \"id\": \"124\",\n \"company_name\": \"Stark Industries\",\n \"num_employees\": 5215,\n \"country\": \"USA\"\n}\n\nclient.collections['companies'].documents.create(document)\n```\n\n----------------------------------------\n\nTITLE: Initializing Typesense Client and Creating Collection in Python\nDESCRIPTION: Python code to initialize a Typesense client with connection parameters and create a 'companies' collection with defined schema fields. The collection includes fields for company name, employee count, and country with appropriate data types.\nSOURCE: https://github.com/typesense/typesense/blob/v29/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport typesense\n\nclient = typesense.Client({\n  'api_key': 'Hu52dwsas2AdxdE',\n  'nodes': [{\n    'host': 'localhost',\n    'port': '8108',\n    'protocol': 'http'\n  }],\n  'connection_timeout_seconds': 2\n})\n\ncreate_response = client.collections.create({\n  \"name\": \"companies\",\n  \"fields\": [\n    {\"name\": \"company_name\", \"type\": \"string\" },\n    {\"name\": \"num_employees\", \"type\": \"int32\" },\n    {\"name\": \"country\", \"type\": \"string\", \"facet\": True }\n  ],\n  \"default_sorting_field\": \"num_employees\"\n})\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with Typesense Benchmark CLI\nDESCRIPTION: Command for executing performance benchmarks with options for comparing multiple commits or binaries, configuring batch sizes, test durations, and regression thresholds.\nSOURCE: https://github.com/typesense/typesense/blob/v29/benchmark/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntypesense-benchmark benchmark [options]\n\nOptions:\n  --commit-hashes <hashes...>    Commits to compare\n  --binaries <paths...>         Paths to pre-built binaries to compare\n  --batch-size <num>            Batch size for indexing (default: 100)\n  --duration <time>             Duration for search tests (e.g., \"30s\", \"1m\")\n  --fail <percentage>           Regression threshold percentage (default: 50)\n  --api-key <key>              API key for Typesense\n  -v, --verbose                Enable verbose output\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Typesense Benchmark CLI\nDESCRIPTION: Command for executing tests with various options including container configuration, API keys, and snapshot paths. Supports testing with either specific commits or pre-built binaries.\nSOURCE: https://github.com/typesense/typesense/blob/v29/benchmark/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntypesense-benchmark test [options]\n\nOptions:\n  -n, --container-name <name>     Name for the Docker container\n  -i, --image-name <image>        Name for the Docker image\n  -g, --typesense-git-url <url>   Git URL for the Typesense repo\n  -d, --working-directory <dir>   Working directory for tests\n  -c, --commitHash <hash>         Specific commit to test\n  -b, --binary <path>            Path to pre-built binary\n  --api-key <key>                API key for Typesense (default: \"xyz\")\n  --openAI-key <key>             OpenAI API key\n  --ip <ip>                      IP address for Typesense\n  -s, --snapshot-path <path>     Path for snapshot files\n  -v, --verbose                  Enable verbose output\n  -y, --yes                      Answer yes to all prompts\n```\n\n----------------------------------------\n\nTITLE: Installing Typesense Python Client\nDESCRIPTION: Command to install the Python client for Typesense using pip, which allows interaction with the Typesense API from Python applications.\nSOURCE: https://github.com/typesense/typesense/blob/v29/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install typesense\n```\n\n----------------------------------------\n\nTITLE: Starting Typesense Server with Docker\nDESCRIPTION: Command to start a Typesense server instance using Docker. It maps port 8108, mounts a volume for data persistence, and sets an API key for authentication.\nSOURCE: https://github.com/typesense/typesense/blob/v29/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8108:8108 -v/tmp/data:/data typesense/typesense:28.0 --data-dir /data --api-key=Hu52dwsas2AdxdE\n```\n\n----------------------------------------\n\nTITLE: Installing Typesense with CLI Options\nDESCRIPTION: Command for installing Typesense server with all available options, including container name, image name, git URL, working directory, and commit hash specifications.\nSOURCE: https://github.com/typesense/typesense/blob/v29/benchmark/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntypesense-benchmark install [options]\n\nOptions:\n  -n, --container-name <name>     Name for the Docker container (default: \"bazel-build\")\n  -i, --image-name <image>        Name for the Docker image (default: \"ubuntu-build\")\n  -g, --typesense-git-url <url>   Git URL for the Typesense repo\n  -d, --working-directory <dir>   Working directory for installation\n  -c, --commitHash <hash>         Specific commit to install\n  -y, --yes                       Answer yes to all prompts\n  -v, --verbose                   Enable verbose output\n```\n\n----------------------------------------\n\nTITLE: Building Typesense Server from Source using Bazel\nDESCRIPTION: This command uses Bazel to build the Typesense server from source code. It requires various dependencies to be installed beforehand, including a C++11 compatible compiler, Snappy, zlib, OpenSSL, curl, and ICU.\nSOURCE: https://github.com/typesense/typesense/blob/v29/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nbazel build //:typesense-server\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Typesense Benchmark CLI Repository\nDESCRIPTION: Commands for cloning the repository, installing dependencies, and building the project using pnpm.\nSOURCE: https://github.com/typesense/typesense/blob/v29/benchmark/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone [repository-url]\ncd benchmark\n```\n\n----------------------------------------\n\nTITLE: Building the Typesense Benchmark CLI Project\nDESCRIPTION: Command for compiling the TypeScript source code into executable JavaScript using the build script.\nSOURCE: https://github.com/typesense/typesense/blob/v29/benchmark/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Typesense Benchmark CLI\nDESCRIPTION: Command for installing the project dependencies using pnpm package manager.\nSOURCE: https://github.com/typesense/typesense/blob/v29/benchmark/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Typesense Benchmark Development\nDESCRIPTION: Command for executing the test suite during development to verify functionality.\nSOURCE: https://github.com/typesense/typesense/blob/v29/benchmark/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Target Executable Definitions\nDESCRIPTION: Creates executable targets for the Typesense server, search utility, benchmark tool, and test suite.\nSOURCE: https://github.com/typesense/typesense/blob/v29/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(typesense-server ${SRC_FILES} src/main/typesense_server.cpp)\nadd_executable(search ${SRC_FILES} src/main/main.cpp)\nadd_executable(benchmark ${SRC_FILES} src/main/benchmark.cpp)\nadd_executable(typesense-test ${SRC_FILES} ${TEST_FILES})\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags and Build Settings\nDESCRIPTION: Establishes compiler flags for both regular and debug builds, including C++17 standard, optimization levels, and warning configurations.\nSOURCE: https://github.com/typesense/typesense/blob/v29/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(USE_SANTINIZER OFF)\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++17 -Wall -Wextra -Wno-unused-parameter -Werror=return-type -O2 -g -DNDEBUG\")\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wextra -Wno-unused-parameter -Werror=return-type -std=c++17 -O0 -g\")\nset(DEP_ROOT_DIR ${CMAKE_SOURCE_DIR}/external-${CMAKE_SYSTEM_NAME})\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/cmake/Modules/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring ONNX Runtime Extension Source Files for Typesense Targets in CMake\nDESCRIPTION: This snippet first defines the ONNX Runtime extension source files from the dependency root directory, marks them as generated files, and then adds them to multiple Typesense targets (server, test, benchmark, and search). Finally, it establishes dependencies between these targets and the onnxruntime_ext component.\nSOURCE: https://github.com/typesense/typesense/blob/v29/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# add source files from ${DEP_ROOT_DIR}/${ONNX_EXT_NAME} directory to targets\nset(ONNX_EXT_SRC_FILES ${DEP_ROOT_DIR}/${ONNX_EXT_NAME}/operators/src_dir/ustring.cc ${DEP_ROOT_DIR}/${ONNX_EXT_NAME}/operators/src_dir/string_utils_onnx.cc ${DEP_ROOT_DIR}/${ONNX_EXT_NAME}/operators/src_dir/base64.cc ${DEP_ROOT_DIR}/${ONNX_EXT_NAME}/operators/src_dir/tokenizer/bert_tokenizer.cc ${DEP_ROOT_DIR}/${ONNX_EXT_NAME}/operators/src_dir/tokenizer/basic_tokenizer.cc) \nset_source_files_properties(${ONNX_EXT_SRC_FILES} PROPERTIES GENERATED TRUE)\ntarget_sources(typesense-server PRIVATE ${ONNX_EXT_SRC_FILES})\ntarget_sources(typesense-test PRIVATE ${ONNX_EXT_SRC_FILES})\ntarget_sources(benchmark PRIVATE ${ONNX_EXT_SRC_FILES})\ntarget_sources(search PRIVATE ${ONNX_EXT_SRC_FILES})\n\nadd_dependencies(typesense-server onnxruntime_ext)\nadd_dependencies(typesense-test onnxruntime_ext)\nadd_dependencies(benchmark onnxruntime_ext)\nadd_dependencies(search onnxruntime_ext)\n```\n\n----------------------------------------\n\nTITLE: Target Link Configuration\nDESCRIPTION: Links all required libraries to the executable targets and sets up build dependencies.\nSOURCE: https://github.com/typesense/typesense/blob/v29/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(typesense-server ${CORE_LIBS})\ntarget_link_libraries(search ${CORE_LIBS})\ntarget_link_libraries(benchmark ${CORE_LIBS})\ntarget_link_libraries(typesense-test ${CORE_LIBS} gtest gtest_main)\n\nadd_dependencies(typesense-server onnxruntime)\nadd_dependencies(typesense-test onnxruntime)\nadd_dependencies(benchmark onnxruntime)\nadd_dependencies(search onnxruntime)\n```\n\n----------------------------------------\n\nTITLE: Compiler-Specific Configuration\nDESCRIPTION: Handles compiler-specific settings for GCC and other compilers, including sanitizer options and class memory access warnings.\nSOURCE: https://github.com/typesense/typesense/blob/v29/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-class-memaccess\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wno-class-memaccess\")\nelse()\n    if(USE_SANTINIZER)\n        set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=thread -fsanitize-recover=all -fPIE\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Settings\nDESCRIPTION: Configures platform-specific settings for ARM processors and macOS, including library paths and compiler definitions.\nSOURCE: https://github.com/typesense/typesense/blob/v29/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(${CMAKE_SYSTEM_PROCESSOR} MATCHES \"arm\")\n    set(CMAKE_CPP_FLAGS \"${CMAKE_CPP_FLAGS} -mcpu=native\")\nendif()\n\nif (APPLE)\n    add_definitions(-DGTEST_USE_OWN_TR1_TUPLE)\n    add_definitions(-D__GLIBCXX__)\n\n    set(OPENSSL_ROOT_DIR /usr/local/opt/openssl@1.1)\n    set(ENV{OPENSSL_ROOT_DIR} /usr/local/opt/openssl@1.1)\n\n    set(SNAPPY_ROOT_DIR /usr/local/opt/snappy)\n    set(ZLIB_ROOT /usr/local/opt/zlib)\n    set(CMAKE_PREFIX_PATH /usr/local/opt/curl-openssl /usr/local/opt/icu4c)\n\n    add_compile_definitions(USE_BACKWARD=1)\nelse()\n    add_compile_definitions(BACKWARD_HAS_DW=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: HTML Navigation Links Structure\nDESCRIPTION: HTML structure for the navigation links section containing links to documentation, roadmap and community resources\nSOURCE: https://github.com/typesense/typesense/blob/v29/README.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://typesense.org\">Website</a> | \n  <a href=\"https://typesense.org/docs/\">Documentation</a> | \n  <a href=\"https://typesense.link/roadmap\">Roadmap</a> | \n  <a href=\"https://typesense.link/slack-community\">Slack Community</a> | \n  <a href=\"https://threads.typesense.org/kb\">Community Threads</a> | \n  <a href=\"https://twitter.com/typesense\">Twitter</a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: HTML Logo and Header Structure\nDESCRIPTION: HTML structure for displaying the Typesense logo with dark mode support and project description headers\nSOURCE: https://github.com/typesense/typesense/blob/v29/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://typesense.org\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"assets/typesense_logo_dark.svg\">\n      <img src=\"assets/typesense_logo.svg\" alt=\"Typesense\" width=\"600\" />\n    </picture>\n  </a> \n</p>\n```\n\n----------------------------------------\n\nTITLE: Initializing Base CMake Configuration\nDESCRIPTION: Sets up the basic CMake project configuration including minimum version requirement, project name, and core policies.\nSOURCE: https://github.com/typesense/typesense/blob/v29/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.24.0)\nproject(typesense)\n\ncmake_policy(SET CMP0074 NEW)\ncmake_policy(SET CMP0003 NEW)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Library Configuration\nDESCRIPTION: Configures platform-specific library settings for MacOS and other systems, including system libraries and stacktrace dependencies.\nSOURCE: https://github.com/typesense/typesense/blob/v29/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (APPLE)\n    set(STD_LIB \"\")\n    FIND_PACKAGE(ngHTTP2 REQUIRED)\n    set(CURL_LIBRARIES ${NGHTTP2_LIBRARIES} ${CURL_LIBRARIES})\n    set(SYSTEM_LIBS \"-framework Foundation\" \"-framework SystemConfiguration\" \"-framework CoreText\"\n            \"-framework CoreGraphics\" \"-framework Security\" \"-framework Foundation\"\n            \"-Wl,-U,_MallocExtension_ReleaseFreeMemory\" \"-Wl,-U,_ProfilerStart\" \"-Wl,-U,_ProfilerStop\")\nelse()\n    set(STD_LIB -static-libgcc -static-libstdc++)\n    list(APPEND STACKTRACE_LIBS dw elf)\n    list(APPEND SYSTEM_LIBS rt)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table of Typesense Implementations\nDESCRIPTION: A markdown table listing various organizations using Typesense, including their website URLs and descriptions of how they use the search engine.\nSOURCE: https://github.com/typesense/typesense/blob/v29/SHOWCASE.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                                                     | Description                                                                                                                                                                                                                                                                                                                                                                 |\n|------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| \n| [AEROTRADE](https://ade.aero)                                                            | Digital marketplace for aircraft parts                                                                                                                                                                                                                                                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Library Suffix Configuration for Static Linking\nDESCRIPTION: Sets the library suffixes for finding static libraries (.a) on Unix systems and (.lib/.a) on Windows systems.\nSOURCE: https://github.com/typesense/typesense/blob/v29/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32 OR MSVC)\n    SET(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a)\nELSE()\n    SET(CMAKE_FIND_LIBRARY_SUFFIXES .a)\n    set(ENV{CMAKE_FIND_LIBRARY_SUFFIXES} \".a\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating Object Library for Code Reuse in CMake\nDESCRIPTION: Creates an object library from the source files to avoid compiling the same code multiple times when building both static and shared libraries.\nSOURCE: https://github.com/typesense/typesense/blob/v29/docker/patches/braft_cmakelists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(OBJ_LIB OBJECT ${SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Creating Object Libraries in CMake for BRPC Components\nDESCRIPTION: Defines object libraries for BUTIL and SOURCES, and sets up dependencies.\nSOURCE: https://github.com/typesense/typesense/blob/v29/docker/patches/brpc_cmakelists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(BUTIL_LIB OBJECT ${BUTIL_SOURCES})\nadd_library(SOURCES_LIB OBJECT ${SOURCES})\nadd_dependencies(SOURCES_LIB PROTO_LIB)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags in CMake based on Build Type\nDESCRIPTION: Configures C++ and C compiler flags differently based on whether unit tests are being built or if it's a release build. Adds warning suppressions for deprecated-copy, sign-compare, and implicit-fallthrough issues.\nSOURCE: https://github.com/typesense/typesense/blob/v29/docker/patches/braft_cmakelists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_UNIT_TESTS)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DUNIT_TEST -Wno-deprecated-copy -Wno-sign-compare -Wno-implicit-fallthrough\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -DUNIT_TEST -Wno-deprecated-copy -Wno-sign-compare -Wno-implicit-fallthrough\")\nelseif(NOT DEBUG)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DNDEBUG -Wno-deprecated-copy -Wno-sign-compare -Wno-implicit-fallthrough\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -DNDEBUG -Wno-deprecated-copy -Wno-sign-compare -Wno-implicit-fallthrough\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Release Build in CMake\nDESCRIPTION: Sets compiler flags for C++ and C when not in debug mode, including NDEBUG definition and disabling narrowing warnings.\nSOURCE: https://github.com/typesense/typesense/blob/v29/docker/patches/brpc_cmakelists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEBUG)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DNDEBUG -Wno-narrowing\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -DNDEBUG -Wno-narrowing\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Building with Position Independent Code\nDESCRIPTION: Sets the Position Independent Code property for the object library, then creates static library from object files. The commented lines show how shared library creation would be configured if needed.\nSOURCE: https://github.com/typesense/typesense/blob/v29/docker/patches/braft_cmakelists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(TARGET ${OBJ_LIB} PROPERTY POSITION_INDEPENDENT_CODE 1)\n#add_library(braft-shared SHARED $<TARGET_OBJECTS:OBJ_LIB>)\nadd_library(braft-static STATIC $<TARGET_OBJECTS:OBJ_LIB>)\n#target_link_libraries(braft-shared ${DYNAMIC_LIB})\ntarget_link_libraries(braft-static ${DYNAMIC_LIB})\n```\n\n----------------------------------------\n\nTITLE: Setting Position Independent Code Property in CMake\nDESCRIPTION: Sets the POSITION_INDEPENDENT_CODE property for SOURCES_LIB and BUTIL_LIB targets.\nSOURCE: https://github.com/typesense/typesense/blob/v29/docker/patches/brpc_cmakelists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(TARGET ${SOURCES_LIB} PROPERTY POSITION_INDEPENDENT_CODE 1)\nset_property(TARGET ${BUTIL_LIB} PROPERTY POSITION_INDEPENDENT_CODE 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Output Properties in CMake\nDESCRIPTION: Configures the output properties for the static library, setting its output name to 'braft' and ensuring clean direct output. Similar configuration for shared library is commented out.\nSOURCE: https://github.com/typesense/typesense/blob/v29/docker/patches/braft_cmakelists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nSET_TARGET_PROPERTIES(braft-static PROPERTIES OUTPUT_NAME braft CLEAN_DIRECT_OUTPUT 1)\n#SET_TARGET_PROPERTIES(braft-shared PROPERTIES OUTPUT_NAME braft CLEAN_DIRECT_OUTPUT 1)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library for BRPC in CMake\nDESCRIPTION: Adds a static library target for BRPC, combining object libraries and setting output properties.\nSOURCE: https://github.com/typesense/typesense/blob/v29/docker/patches/brpc_cmakelists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(brpc-static STATIC $<TARGET_OBJECTS:BUTIL_LIB>\n                               $<TARGET_OBJECTS:SOURCES_LIB>\n                               $<TARGET_OBJECTS:PROTO_LIB>)\n\nif(BRPC_WITH_GLOG)\n    target_link_libraries(brpc-static ${GLOG_LIB})\nendif()\n\nSET_TARGET_PROPERTIES(brpc-static PROPERTIES OUTPUT_NAME brpc CLEAN_DIRECT_OUTPUT 1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Installation in CMake\nDESCRIPTION: Sets up installation rules for the static library, specifying where binaries, libraries, and archives should be installed. Configuration for shared library installation is commented out.\nSOURCE: https://github.com/typesense/typesense/blob/v29/docker/patches/braft_cmakelists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS braft-static\n        RUNTIME DESTINATION bin\n        LIBRARY DESTINATION lib${LIBSUFFIX}\n        ARCHIVE DESTINATION lib${LIBSUFFIX}\n        )\n\n#install(TARGETS braft-shared\n#        RUNTIME DESTINATION bin\n#        LIBRARY DESTINATION lib${LIBSUFFIX}\n#        ARCHIVE DESTINATION lib${LIBSUFFIX}\n#        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation of BRPC Static Library in CMake\nDESCRIPTION: Sets up the installation configuration for the BRPC static library, specifying destination directories for different components.\nSOURCE: https://github.com/typesense/typesense/blob/v29/docker/patches/brpc_cmakelists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS brpc-static\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories in CMake\nDESCRIPTION: Sets up include directories for the project, ensuring that both the current binary directory and the source directory are included in the build path.\nSOURCE: https://github.com/typesense/typesense/blob/v29/docker/patches/braft_cmakelists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\ninclude_directories(${CMAKE_SOURCE_DIR}/src)\n```\n\n----------------------------------------\n\nTITLE: Including Directories in CMake for BRPC\nDESCRIPTION: Adds include directories for the current binary directory and the project source directory.\nSOURCE: https://github.com/typesense/typesense/blob/v29/docker/patches/brpc_cmakelists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\ninclude_directories(${PROJECT_SOURCE_DIR}/src)\n```\n\n----------------------------------------\n\nTITLE: GPL License Notice Template for Source Files\nDESCRIPTION: A template for the standard GPL license notice that should be included at the beginning of each source file in a GPL-licensed project. It includes placeholders for program name, copyright year, and author name.\nSOURCE: https://github.com/typesense/typesense/blob/v29/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Terminal Interactive Mode Copyright Notice Template\nDESCRIPTION: A shorter copyright notice template to be displayed when a GPL-licensed program starts in interactive terminal mode. It includes references to hypothetical commands for displaying warranty and conditions details.\nSOURCE: https://github.com/typesense/typesense/blob/v29/LICENSE.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Displaying Linux Network Interface Statistics Output\nDESCRIPTION: Standard Linux network interface statistics showing receive and transmit metrics for network interfaces ens5 and lo. Includes counters for bytes, packets, errors, drops, and other network-related statistics.\nSOURCE: https://github.com/typesense/typesense/blob/v29/test/resources/proc_net_dev.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nInter-|   Receive                                                |  Transmit\n face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed\n  ens5: 324278716  897631    0    0    0     0          0         0 93933882  575535    0    0    0     0       0          0\n    lo: 1308386    5312    0    0    0     0          0         0  1308386    5312    0    0    0     0       0          0\n```\n\n----------------------------------------\n\nTITLE: Coordinate Points List\nDESCRIPTION: Structured data representing x,y coordinate pairs. Each line contains an x-coordinate followed by a y-coordinate separated by a comma. Y-coordinates range from -1000 to -1200.\nSOURCE: https://github.com/typesense/typesense/blob/v29/test/resources/record_values.txt#2025-04-22_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n316,-1200\n1735,-1200\n216,-1130\n1287,-1200\n2356,-1200\n590,-1200\n2079,-1200\n1843,-1130\n2467,-1200\n593,-1000\n326,-1130\n...\n```"
  }
]