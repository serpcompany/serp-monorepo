[
  {
    "owner": "emilkowalski",
    "repo": "sonner",
    "content": "TITLE: Implementing Sonner Toast in React Application\nDESCRIPTION: This React code snippet demonstrates how to use Sonner in a React application. It imports the necessary components, adds the Toaster component to render toasts, and includes a button that triggers a toast notification when clicked.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toaster, toast } from 'sonner';\n\n// ...\n\nfunction App() {\n  return (\n    <div>\n      <Toaster />\n      <button onClick={() => toast('My first toast')}>Give me a toast</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Toast Notification\nDESCRIPTION: Example of how to create a toast notification using the toast function from Sonner. This snippet shows a button component that displays a toast message when clicked.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/getting-started.mdx#2025-04-12_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { toast } from 'sonner';\n\nfunction MyToast() {\n  return <button onClick={() => toast('This is a sonner toast')}>Render my toast</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Toaster Component to React Layout\nDESCRIPTION: Implementation example showing how to add the Toaster component to a React application layout. This component can be placed anywhere in the application, including server components like layout.tsx.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/getting-started.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toaster } from 'sonner';\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n        <Toaster />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Rendering in React\nDESCRIPTION: Simple example of rendering a basic toast notification using Sonner.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { toast } from 'sonner';\n\ntoast('Hello World!');\n```\n\n----------------------------------------\n\nTITLE: Configurable Toast with Options\nDESCRIPTION: Example showing toast creation with additional configuration options like className, description, duration, and custom icon.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { toast } from 'sonner';\n\ntoast('My toast', {\n  className: 'my-classname',\n  description: 'My description',\n  duration: 5000,\n  icon: <MyIcon />,\n});\n```\n\n----------------------------------------\n\nTITLE: Promise Toast Implementation\nDESCRIPTION: Shows how to create a toast that handles promise states with loading, success, and error messages.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\ntoast.promise(myPromise, {\n  loading: 'Loading...',\n  success: (data) => {\n    return `${data.name} toast has been added`;\n  },\n  error: 'Error',\n});\n```\n\n----------------------------------------\n\nTITLE: Success Toast Implementation\nDESCRIPTION: Demonstrates rendering a success toast with a checkmark icon.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ntoast.success('My success toast');\n```\n\n----------------------------------------\n\nTITLE: Error Toast Implementation\nDESCRIPTION: Shows how to display an error toast with an error icon.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ntoast.error('My error toast');\n```\n\n----------------------------------------\n\nTITLE: Loading Toast Implementation\nDESCRIPTION: Example of creating a loading toast with a spinner indicator.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\ntoast.loading('Loading data');\n```\n\n----------------------------------------\n\nTITLE: Customizing Toaster Expansion and Visibility in React\nDESCRIPTION: This snippet demonstrates how to use the Toaster component with expanded toasts and a custom number of visible toasts. It sets the expand prop to true and specifies 9 visible toasts instead of the default 3.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toaster.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// 9 toasts will be visible instead of the default, which is 3.\n<Toaster expand visibleToasts={9} />\n```\n\n----------------------------------------\n\nTITLE: Action Toast with Callback\nDESCRIPTION: Example of creating a toast with an action button that executes a callback function.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ntoast('My action toast', {\n  action: {\n    label: 'Action',\n    onClick: () => console.log('Action!'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Action Toast with JSX Button\nDESCRIPTION: Shows how to create a toast with a custom JSX button component as the action.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\ntoast('My action toast', {\n  action: <Button onClick={() => console.log('Action!')}>Action</Button>,\n});\n```\n\n----------------------------------------\n\nTITLE: Cancel Toast Implementation\nDESCRIPTION: Example of adding a cancel button to a toast with a callback function.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\ntoast('My cancel toast', {\n  cancel: {\n    label: 'Cancel',\n    onClick: () => console.log('Cancel!'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Cancel Toast with JSX\nDESCRIPTION: Demonstrates how to add a custom JSX cancel button to a toast.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\ntoast('My cancel toast', {\n  cancel: <Button onClick={() => console.log('Cancel!')}>Cancel</Button>,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Toast\nDESCRIPTION: Shows how to update an existing toast using its ID.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconst toastId = toast('Sonner');\n\ntoast.success('Toast has been updated', {\n  id: toastId,\n});\n```\n\n----------------------------------------\n\nTITLE: Toast with Callbacks\nDESCRIPTION: Example of creating a toast with dismissal and auto-close callbacks.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\ntoast('Event has been created', {\n  onDismiss: (t) => console.log(`Toast with id ${t.id} has been dismissed`),\n  onAutoClose: (t) => console.log(`Toast with id ${t.id} has been closed automatically`),\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Global Toast Styling in Sonner\nDESCRIPTION: Configures global styling options for all toast notifications using the toastOptions prop on the Toaster component. This example shows how to set a custom background color and add a class name.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/styling.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster\n  toastOptions={{\n    style: {\n      background: 'red',\n    },\n    className: 'class',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Toast Notifications in Sonner\nDESCRIPTION: Applies specific styling to a single toast notification when calling the toast function. This example demonstrates setting a custom background color and class name for an individual toast.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/styling.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ntoast('Hello World', {\n  style: {\n    background: 'red',\n  },\n  className: 'class',\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Sonner Toasts with Tailwind CSS (Global)\nDESCRIPTION: Configures global styling using Tailwind CSS classes by leveraging the unstyled prop and classNames object. This approach allows for customizing different parts of the toast with Tailwind utility classes.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/styling.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster\n  toastOptions={{\n    unstyled: true,\n    classNames: {\n      toast: 'bg-blue-400',\n      title: 'text-red-400',\n      description: 'text-red-400',\n      actionButton: 'bg-zinc-400',\n      cancelButton: 'bg-orange-400',\n      closeButton: 'bg-lime-400',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Sonner Toasts by Type with Tailwind CSS\nDESCRIPTION: Configures different styling for each toast type (error, success, warning, info) using Tailwind CSS classes. This approach allows for consistent styling based on the toast's purpose or severity.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/styling.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster\n  toastOptions={{\n    unstyled: true,\n    classNames: {\n      error: 'bg-red-400',\n      success: 'text-green-400',\n      warning: 'text-yellow-400',\n      info: 'bg-blue-400',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Icons in Sonner\nDESCRIPTION: Changes the default icons used for different toast types by providing custom components through the icons prop. This example shows how to provide custom icon components for success, info, warning, error, and loading states.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/styling.mdx#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster\n  icons={{\n    success: <SuccessIcon />,\n    info: <InfoIcon />,\n    warning: <WarningIcon />,\n    error: <ErrorIcon />,\n    loading: <LoadingIcon />,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Elements in Toast\nDESCRIPTION: Example of rendering custom elements and components within toast content.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\ntoast(\n  () => (\n    <>\n      View{' '}\n      <a href=\"https://google.com\" target=\"_blank\">\n        Animation on the Web\n      </a>\n    </>\n  ),\n  {\n    description: () => <button>This is a button element!</button>,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Toast\nDESCRIPTION: Shows how to create a custom toast while maintaining default styling.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\ntoast(<div>A custom toast with default styling</div>, { duration: 5000 });\n```\n\n----------------------------------------\n\nTITLE: Headless Custom Toast\nDESCRIPTION: Example of creating an unstyled custom toast with maintained functionality.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\ntoast.custom((t) => (\n  <div>\n    This is a custom component <button onClick={() => toast.dismiss(t)}>close</button>\n  </div>\n));\n```\n\n----------------------------------------\n\nTITLE: Dynamic Position Toast\nDESCRIPTION: Demonstrates how to create a toast with dynamic positioning.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\ntoast('Hello World', {\n  position: 'top-center',\n});\n```\n\n----------------------------------------\n\nTITLE: Persistent Toast Implementation\nDESCRIPTION: Shows how to create a toast that stays on screen indefinitely.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_16\n\nLANGUAGE: js\nCODE:\n```\ntoast('This toast will stay on screen forever', {\n  duration: Infinity,\n});\n```\n\n----------------------------------------\n\nTITLE: Programmatic Toast Dismissal\nDESCRIPTION: Demonstrates how to programmatically dismiss specific or all toasts.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nconst toastId = toast('Event has been created');\n\ntoast.dismiss(toastId);\n```\n\n----------------------------------------\n\nTITLE: Dismiss All Toasts\nDESCRIPTION: Shows how to dismiss all active toasts at once.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\ntoast.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Setting Toaster Position in React\nDESCRIPTION: This code example shows how to set the position of the Toaster component. It demonstrates setting the position to 'top-center', but also mentions other available positions like top-left, top-right, bottom-left, bottom-center, and bottom-right.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toaster.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Available positions:\n// top-left, top-center, top-right, bottom-left, bottom-center, bottom-right\n<Toaster position=\"top-center\" />\n```\n\n----------------------------------------\n\nTITLE: Styling All Toasts with toastOptions in React\nDESCRIPTION: This snippet illustrates how to customize the styling for all toasts using the toastOptions prop. It sets a red background color and adds a custom CSS class to all toasts rendered by the Toaster component.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toaster.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster\n  toastOptions={{\n    style: { background: 'red' },\n    className: 'my-toast',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Direction for Toaster in React\nDESCRIPTION: This code shows how to change the directionality of the toast's text using the dir prop. It sets the direction to 'rtl' (right-to-left), but also mentions other options like 'ltr' (left-to-right) and 'auto'.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toaster.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// rtl, ltr, auto\n<Toaster dir=\"rtl\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing ARIA Labels for Toaster in React\nDESCRIPTION: This example demonstrates how to customize the ARIA labels for the Toaster component. It sets a custom label for the notification container in Finnish and a custom close button label, improving accessibility for non-English users.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toaster.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// example in Finnish\n<Toaster containerAriaLabel=\"Ilmoitukset\" toastOptions={{closeButtonAriaLabel: 'Sulje'}} />\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Sonner Toasts with Tailwind CSS\nDESCRIPTION: Applies Tailwind CSS styling to a specific toast notification. This example shows how to use the unstyled prop and classNames object to customize different elements of an individual toast.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/styling.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ntoast('Hello World', {\n  unstyled: true,\n  classNames: {\n    toast: 'bg-blue-400',\n    title: 'text-red-400 text-2xl',\n    description: 'text-red-400',\n    actionButton: 'bg-zinc-400',\n    cancelButton: 'bg-orange-400',\n    closeButton: 'bg-lime-400',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Icon for Individual Toast in Sonner\nDESCRIPTION: Applies a custom icon to a specific toast notification using the icon prop. This approach allows for unique visual indicators on a per-toast basis.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/styling.mdx#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\ntoast('Hello World', {\n  icon: <Icon />,\n});\n```\n\n----------------------------------------\n\nTITLE: Page Load Toast Implementation\nDESCRIPTION: Shows how to render a toast notification on initial page load using setTimeout.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/toast.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nsetTimeout(() => {\n  toast('My toast on a page load');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Sonner Package with npm\nDESCRIPTION: This command installs the Sonner package in your project using npm. It's the first step to integrate Sonner into your React application.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sonner\n```\n\n----------------------------------------\n\nTITLE: Installing Sonner with bun\nDESCRIPTION: Command to install the Sonner toast component library using bun package manager.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/getting-started.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add sonner\n```\n\n----------------------------------------\n\nTITLE: Installing Sonner with npm\nDESCRIPTION: Command to install the Sonner toast component library using npm package manager.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/getting-started.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i sonner\n```\n\n----------------------------------------\n\nTITLE: Installing Sonner with pnpm\nDESCRIPTION: Command to install the Sonner toast component library using pnpm package manager.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/getting-started.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i sonner\n```\n\n----------------------------------------\n\nTITLE: Installing Sonner with yarn\nDESCRIPTION: Command to install the Sonner toast component library using yarn package manager.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/src/pages/getting-started.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add sonner\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using npm, yarn, or pnpm package managers. After running any of these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/test/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers (npm, yarn, or pnpm). The server will run on localhost:3000 by default.\nSOURCE: https://github.com/emilkowalski/sonner/blob/main/website/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```"
  }
]