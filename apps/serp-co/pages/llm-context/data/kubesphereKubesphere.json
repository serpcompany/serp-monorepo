[
  {
    "owner": "kubesphere",
    "repo": "kubesphere",
    "content": "TITLE: Struct-to-Table Mapping with Go-Gorp\nDESCRIPTION: Shows how to define Go struct types and map them to database tables using Go-Gorp. Demonstrates different approaches to column mapping including using struct tags to rename fields, set primary keys, and ignore fields during mapping.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Invoice struct {\n    Id       int64\n    Created  int64\n    Updated  int64\n    Memo     string\n    PersonId int64\n}\n\ntype Person struct {\n    Id      int64\n    Created int64\n    Updated int64\n    FName   string\n    LName   string\n}\n\n// Example of using tags to alias fields to column names\n// The 'db' value is the column name\n//\n// A hyphen will cause gorp to skip this field, similar to the\n// Go json package.\n//\n// This is equivalent to using the ColMap methods:\n//\n//   table := dbmap.AddTableWithName(Product{}, \"product\")\n//   table.ColMap(\"Id\").Rename(\"product_id\")\n//   table.ColMap(\"Price\").Rename(\"unit_price\")\n//   table.ColMap(\"IgnoreMe\").SetTransient(true)\n//\n// You can optionally declare the field to be a primary key and/or autoincrement\n//\ntype Product struct {\n    Id         int64     `db:\"product_id, primarykey, autoincrement\"`\n    Price      int64     `db:\"unit_price\"`\n    IgnoreMe   string    `db:\"-\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic FSNotify Watcher in Go\nDESCRIPTION: This example demonstrates how to create a basic file system watcher using the fsnotify library. It creates a watcher, sets up an event loop in a goroutine to process file system events and errors, adds a directory to watch, and blocks the main thread indefinitely.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fsnotify/fsnotify/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/fsnotify/fsnotify\"\n)\n\nfunc main() {\n    // Create new watcher.\n    watcher, err := fsnotify.NewWatcher()\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer watcher.Close()\n\n    // Start listening for events.\n    go func() {\n        for {\n            select {\n            case event, ok := <-watcher.Events:\n                if !ok {\n                    return\n                }\n                log.Println(\"event:\", event)\n                if event.Has(fsnotify.Write) {\n                    log.Println(\"modified file:\", event.Name)\n                }\n            case err, ok := <-watcher.Errors:\n                if !ok {\n                    return\n                }\n                log.Println(\"error:\", err)\n            }\n        }\n    }()\n\n    // Add a path.\n    err = watcher.Add(\"/tmp\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Block main goroutine forever.\n    <-make(chan struct{})\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Marshaling and Unmarshaling Example in Go\nDESCRIPTION: Demonstrates how to marshal and unmarshal YAML data in Go using both struct and map types. Shows handling of nested structures, custom tags for field renaming, and flow style arrays. Also includes error handling and different output formats.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/yaml.v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n--- t:\n{Easy! {2 [3 4]}}\n\n--- t dump:\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n\n\n--- m:\nmap[a:Easy! b:map[c:2 d:[3 4]]]\n\n--- m dump:\na: Easy!\nb:\n  c: 2\n  d:\n  - 3\n  - 4\n```\n\n----------------------------------------\n\nTITLE: Advanced Redis Operations Examples\nDESCRIPTION: Showcases various advanced Redis operations including SET with expiry and NX flag, SORT, ZRANGEBYSCORE, ZINTERSTORE, and EVAL commands\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-redis/redis/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// SET key value EX 10 NX\nset, err := client.SetNX(\"key\", \"value\", 10*time.Second).Result()\n\n// SORT list LIMIT 0 2 ASC\nvals, err := client.Sort(\"list\", redis.Sort{Offset: 0, Count: 2, Order: \"ASC\"}).Result()\n\n// ZRANGEBYSCORE zset -inf +inf WITHSCORES LIMIT 0 2\nvals, err := client.ZRangeByScoreWithScores(\"zset\", redis.ZRangeBy{\n\tMin: \"-inf\",\n\tMax: \"+inf\",\n\tOffset: 0,\n\tCount: 2,\n}).Result()\n\n// ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3 AGGREGATE SUM\nvals, err := client.ZInterStore(\"out\", redis.ZStore{Weights: []int64{2, 3}}, \"zset1\", \"zset2\").Result()\n\n// EVAL \"return {KEYS[1],ARGV[1]}\" 1 \"key\" \"hello\"\nvals, err := client.Eval(\"return {KEYS[1],ARGV[1]}\", []string{\"key\"}, \"hello\").Result()\n```\n\n----------------------------------------\n\nTITLE: Basic Router Setup with Gorilla Mux in Go\nDESCRIPTION: Demonstrates how to create a new router and register simple routes with handlers. This shows the basic structure for mapping URL paths to handler functions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/\", HomeHandler)\n    r.HandleFunc(\"/products\", ProductsHandler)\n    r.HandleFunc(\"/articles\", ArticlesHandler)\n    http.Handle(\"/\", r)\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Image Manifest with DefaultKeychain (Go)\nDESCRIPTION: This Go snippet demonstrates how to retrieve a container image manifest from a private registry using go-containerregistry's DefaultKeychain, which leverages credentials from the local Docker config or environment. It requires the github.com/google/go-containerregistry modules (\"authn\", \"name\", and \"remote\") as dependencies. The program expects a valid Docker config or Podman auth file, parses an image reference, fetches its manifest, and prints the digest; input is a registry reference string, and output is the digest to stdout.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/google/go-containerregistry/pkg/authn\"\n\t\"github.com/google/go-containerregistry/pkg/name\"\n\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n)\n\nfunc main() {\n\tref, err := name.ParseReference(\"registry.example.com/private/repo\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Fetch the manifest using default credentials.\n\timg, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.DefaultKeychain))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Prints the digest of registry.example.com/private/repo\n\tfmt.Println(img.Digest)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a generic KubeSphere client instance in Go\nDESCRIPTION: This code creates a generic client instance for communicating with the KubeSphere API Server. It configures the client with the server host, username, and password.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/staging/src/kubesphere.io/client-go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nvar client client.Client\nconfig := &rest.Config{\n\tHost:     \"127.0.0.1:9090\",\n\tUsername: \"admin\",\n\tPassword: \"P@88w0rd\",\n}\nclient = generic.NewForConfigOrDie(config, client.Options{Scheme: f.Scheme})\n```\n\n----------------------------------------\n\nTITLE: Basic Go-Gorp Usage Example in Go\nDESCRIPTION: Demonstrates the basic usage of Go-Gorp including initializing a database connection, defining struct-to-table mappings, and performing CRUD operations. The example shows how to insert, update, select, and delete records from a SQLite database.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"database/sql\"\n    \"gopkg.in/gorp.v1\"\n    _ \"github.com/mattn/go-sqlite3\"\n    \"log\"\n    \"time\"\n)\n\nfunc main() {\n    // initialize the DbMap\n    dbmap := initDb()\n    defer dbmap.Db.Close()\n\n    // delete any existing rows\n    err := dbmap.TruncateTables()\n    checkErr(err, \"TruncateTables failed\")\n\n    // create two posts\n    p1 := newPost(\"Go 1.1 released!\", \"Lorem ipsum lorem ipsum\")\n    p2 := newPost(\"Go 1.2 released!\", \"Lorem ipsum lorem ipsum\")\n\n    // insert rows - auto increment PKs will be set properly after the insert\n    err = dbmap.Insert(&p1, &p2)\n    checkErr(err, \"Insert failed\")\n\n    // use convenience SelectInt\n    count, err := dbmap.SelectInt(\"select count(*) from posts\")\n    checkErr(err, \"select count(*) failed\")\n    log.Println(\"Rows after inserting:\", count)\n\n    // update a row\n    p2.Title = \"Go 1.2 is better than ever\"\n    count, err = dbmap.Update(&p2)\n    checkErr(err, \"Update failed\")\n    log.Println(\"Rows updated:\", count)\n\n    // fetch one row - note use of \"post_id\" instead of \"Id\" since column is aliased\n    //\n    // Postgres users should use $1 instead of ? placeholders\n    // See 'Known Issues' below\n    //\n    err = dbmap.SelectOne(&p2, \"select * from posts where post_id=?\", p2.Id)\n    checkErr(err, \"SelectOne failed\")\n    log.Println(\"p2 row:\", p2)\n\n    // fetch all rows\n    var posts []Post\n    _, err = dbmap.Select(&posts, \"select * from posts order by post_id\")\n    checkErr(err, \"Select failed\")\n    log.Println(\"All rows:\")\n    for x, p := range posts {\n        log.Printf(\"    %d: %v\\n\", x, p)\n    }\n\n    // delete row by PK\n    count, err = dbmap.Delete(&p1)\n    checkErr(err, \"Delete failed\")\n    log.Println(\"Rows deleted:\", count)\n\n    // delete row manually via Exec\n    _, err = dbmap.Exec(\"delete from posts where post_id=?\", p2.Id)\n    checkErr(err, \"Exec failed\")\n\n    // confirm count is zero\n    count, err = dbmap.SelectInt(\"select count(*) from posts\")\n    checkErr(err, \"select count(*) failed\")\n    log.Println(\"Row count - should be zero:\", count)\n\n    log.Println(\"Done!\")\n}\n\ntype Post struct {\n    // db tag lets you specify the column name if it differs from the struct field\n    Id      int64  `db:\"post_id\"`\n    Created int64\n    Title   string `db:\",size:50\"`               // Column size set to 50\n    Body    string `db:\"article_body,size:1024\"` // Set both column name and size\n}\n\nfunc newPost(title, body string) Post {\n    return Post{\n        Created: time.Now().UnixNano(),\n        Title:   title,\n        Body:    body,\n    }\n}\n\nfunc initDb() *gorp.DbMap {\n    // connect to db using standard Go database/sql API\n    // use whatever database/sql driver you wish\n    db, err := sql.Open(\"sqlite3\", \"/tmp/post_db.bin\")\n    checkErr(err, \"sql.Open failed\")\n\n    // construct a gorp DbMap\n    dbmap := &gorp.DbMap{Db: db, Dialect: gorp.SqliteDialect{}}\n\n    // add a table, setting the table name to 'posts' and\n    // specifying that the Id property is an auto incrementing PK\n    dbmap.AddTableWithName(Post{}, \"posts\").SetKeys(true, \"Id\")\n\n    // create the table. in a production system you'd generally\n    // use a migration tool, or create the tables via scripts\n    err = dbmap.CreateTablesIfNotExists()\n    checkErr(err, \"Create tables failed\")\n\n    return dbmap\n}\n\nfunc checkErr(err error, msg string) {\n    if err != nil {\n        log.Fatalln(msg, err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with OS Filesystem in Go\nDESCRIPTION: Creates a new Git repository with memory storage and an OS filesystem implementation pointing to a specific directory.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-git/v5/EXTENDING.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n    fs := osfs.New(\"/tmp/foo\")\n    r, err := git.Init(memory.NewStorage(), fs)\n```\n\n----------------------------------------\n\nTITLE: Using Different Logging Levels in Logrus\nDESCRIPTION: Demonstrates the seven logging levels available in Logrus (Trace, Debug, Info, Warning, Error, Fatal, and Panic), showing how to use each level and what it signifies in terms of severity.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlog.Trace(\"Something very low level.\")\nlog.Debug(\"Useful debugging information.\")\nlog.Info(\"Something noteworthy happened!\")\nlog.Warn(\"You should probably take a look at this.\")\nlog.Error(\"Something failed but I'm not quitting.\")\n// Calls os.Exit(1) after logging\nlog.Fatal(\"Bye.\")\n// Calls panic() after logging\nlog.Panic(\"I'm bailing.\")\n```\n\n----------------------------------------\n\nTITLE: Registering Routes on a Subrouter in Gorilla Mux\nDESCRIPTION: Shows how to register routes on a subrouter, which will inherit all matching conditions from the parent router.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ns.HandleFunc(\"/products/\", ProductsHandler)\ns.HandleFunc(\"/products/{key}\", ProductHandler)\ns.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful HTTP Server Shutdown with Gorilla Mux in Go\nDESCRIPTION: Presents a complete `main` function demonstrating graceful shutdown for an `http.Server` configured with a `gorilla/mux` router (r). It starts the server in a goroutine, listens for an interrupt signal (SIGINT), and upon receiving the signal, calls `srv.Shutdown` with a timeout context (`wait`). This allows active connections to finish processing before the server exits. Dependencies include `context`, `flag`, `log`, `net/http`, `os`, `os/signal`, `time`, and `github.com/gorilla/mux`.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_27\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"flag\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"os/signal\"\n    \"time\"\n\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    var wait time.Duration\n    flag.DurationVar(&wait, \"graceful-timeout\", time.Second * 15, \"the duration for which the server gracefully wait for existing connections to finish - e.g. 15s or 1m\")\n    flag.Parse()\n\n    r := mux.NewRouter()\n    // Add your routes as needed\n\n    srv := &http.Server{\n        Addr:         \"0.0.0.0:8080\",\n        // Good practice to set timeouts to avoid Slowloris attacks.\n        WriteTimeout: time.Second * 15,\n        ReadTimeout:  time.Second * 15,\n        IdleTimeout:  time.Second * 60,\n        Handler: r, // Pass our instance of gorilla/mux in.\n    }\n\n    // Run our server in a goroutine so that it doesn't block.\n    go func() {\n        if err := srv.ListenAndServe(); err != nil {\n            log.Println(err)\n        }\n    }()\n\n    c := make(chan os.Signal, 1)\n    // We'll accept graceful shutdowns when quit via SIGINT (Ctrl+C)\n    // SIGKILL, SIGQUIT or SIGTERM (Ctrl+/) will not be caught.\n    signal.Notify(c, os.Interrupt)\n\n    // Block until we receive our signal.\n    <-c\n\n    // Create a deadline to wait for.\n    ctx, cancel := context.WithTimeout(context.Background(), wait)\n    defer cancel()\n    // Doesn't block if no connections, but will otherwise wait\n    // until the timeout deadline.\n    srv.Shutdown(ctx)\n    // Optionally, you could run srv.Shutdown in a goroutine and block on\n    // <-ctx.Done() if your application should wait for other services\n    // to finalize based on context cancellation.\n    log.Println(\"shutting down\")\n    os.Exit(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of a Simple Gorilla Mux Server in Go\nDESCRIPTION: This is a complete, runnable example of a small Gorilla Mux based server. It sets up a router with a single route handler and binds it to port 8000.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_41\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"net/http\"\n    \"log\"\n    \"github.com/gorilla/mux\"\n)\n\nfunc YourHandler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Gorilla!\\n\"))\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    // Routes consist of a path and a handler function.\n    r.HandleFunc(\"/\", YourHandler)\n\n    // Bind to a port and pass our router in\n    log.Fatal(http.ListenAndServe(\":8000\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with URL Variables in Gorilla Mux\nDESCRIPTION: Shows how to define routes with variable segments in URLs, including optional regex patterns for validating path parameters.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/products/{key}\", ProductHandler)\nr.HandleFunc(\"/articles/{category}/\", ArticlesCategoryHandler)\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n```\n\n----------------------------------------\n\nTITLE: Replacing `encoding/json.Marshal` with `json-iterator/go` in Go\nDESCRIPTION: Demonstrates how to substitute the standard Go `encoding/json` library's `Marshal` function with the `json-iterator/go` library for potentially improved performance. It involves importing `json-iterator/go` and using its `ConfigCompatibleWithStandardLibrary` configuration to ensure compatibility before calling `Marshal`.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"encoding/json\"\njson.Marshal(&data)\n```\n\nLANGUAGE: Go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Stateful Authentication Middleware in Gorilla Mux (Go)\nDESCRIPTION: Demonstrates creating an instance of the `authenticationMiddleware`, initializing its internal state (`tokenUsers` map) by calling `amw.Populate()`. Then, it applies the `amw.Middleware` method (which returns an `http.Handler`) to a `mux.Router` instance (`r`) using `r.Use()`. This attaches the authentication logic to the router.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_33\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\n\namw := authenticationMiddleware{tokenUsers: make(map[string]string)}\namw.Populate()\n\nr.Use(amw.Middleware)\n```\n\n----------------------------------------\n\nTITLE: Marshalling Viper Settings to a YAML String in Go\nDESCRIPTION: This Go snippet shows how to serialize all configuration settings currently held by Viper into a YAML formatted string. It retrieves all settings as a `map[string]any` using `viper.AllSettings()`, then uses the `gopkg.in/yaml.v2` library's `Marshal` function to convert the map into YAML bytes, which are then returned as a string. Error handling for the marshaling process is included.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tyaml \"gopkg.in/yaml.v2\"\n\t// ...\n)\n\nfunc yamlStringSettings() string {\n\tc := viper.AllSettings()\n\tbs, err := yaml.Marshal(c)\n\tif err != nil {\n\t\tlog.Fatalf(\"unable to marshal config to YAML: %v\", err)\n\t}\n\treturn string(bs)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Between JSON and YAML with kubernetes-sigs/yaml - Go\nDESCRIPTION: This Go code snippet illustrates two core API methods, JSONToYAML and YAMLToJSON, from the 'sigs.k8s.io/yaml' package to convert data bi-directionally between JSON and YAML encodings. The inputs are either JSON or YAML encoded as byte slices, and the outputs are the corresponding format (YAML or JSON). Error handling, string formatting, and output demonstration are included for completeness. Dependencies include Go and the 'sigs.k8s.io/yaml' library, and inputs should be well-formed JSON or YAML to avoid errors.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/yaml/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\n\\t\\\"sigs.k8s.io/yaml\\\"\\n)\\n\\nfunc main() {\\n\\tj := []byte(`{\"name\": \"John\", \"age\": 30}`)\\n\\ty, err := yaml.JSONToYAML(j)\\n\\tif err != nil {\\n\\t\\tfmt.Printf(\"err: %v\\n\", err)\\n\\t\\treturn\\n\\t}\\n\\tfmt.Println(string(y))\\n\\t/* Output:\\n\\tage: 30\\n\\tname: John\\n\\t*/\\n\\tj2, err := yaml.YAMLToJSON(y)\\n\\tif err != nil {\\n\\t\\tfmt.Printf(\"err: %v\\n\", err)\\n\\t\\treturn\\n\\t}\\n\\tfmt.Println(string(j2))\\n\\t/* Output:\\n\\t{\"age\":30,\"name\":\"John\"}\\n\\t*/\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Log Rotation with Lumberjack in Zap\nDESCRIPTION: Example showing how to integrate the lumberjack log rotation package with Zap logger. Demonstrates setting up a custom core with file rotation capabilities including size and age limits.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/FAQ.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nw := zapcore.AddSync(&lumberjack.Logger{\n  Filename:   \"/var/log/myapp/foo.log\",\n  MaxSize:    500, // megabytes\n  MaxBackups: 3,\n  MaxAge:     28, // days\n})\ncore := zapcore.NewCore(\n  zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n  w,\n  zap.InfoLevel,\n)\nlogger := zap.New(core)\n```\n\n----------------------------------------\n\nTITLE: HTTP Method Restrictions in Gorilla Mux\nDESCRIPTION: Shows how to restrict routes to specific HTTP methods like GET and POST, allowing for RESTful API design.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nr.Methods(\"GET\", \"POST\")\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Matching in Gorilla Mux\nDESCRIPTION: Demonstrates how to match routes based on query string parameters, allowing for filtering and customization of responses.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nr.Queries(\"key\", \"value\")\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling Structs with kubernetes-sigs/yaml - Go\nDESCRIPTION: This Go code demonstrates serializing (marshaling) a Go struct to YAML and deserializing (unmarshaling) YAML back to a struct using the 'sigs.k8s.io/yaml' library. The example shows the use of struct tags compatible with both YAML and JSON, and how to properly handle errors during serialization or deserialization. Key parameters include the target struct and the YAML/JSON encoded data, and inputs/outputs are Go structs and YAML-formatted byte slices. The code requires Go and the 'sigs.k8s.io/yaml' package, and all standard requirements for Go source files apply.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/yaml/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\n\\t\\\"sigs.k8s.io/yaml\\\"\\n)\\n\\ntype Person struct {\\n\\tName string `json:\\\"name\\\"` // Affects YAML field names too.\\n\\tAge  int    `json:\\\"age\\\"`\\n}\\n\\nfunc main() {\\n\\t// Marshal a Person struct to YAML.\\n\\tp := Person{\\\"John\\\", 30}\\n\\ty, err := yaml.Marshal(p)\\n\\tif err != nil {\\n\\t\\tfmt.Printf(\\\"err: %v\\\\n\\\", err)\\n\\t\\treturn\\n\\t}\\n\\tfmt.Println(string(y))\\n\\t/* Output:\\n\\tage: 30\\n\\tname: John\\n\\t*/\\n\\n\\t// Unmarshal the YAML back into a Person struct.\\n\\tvar p2 Person\\n\\terr = yaml.Unmarshal(y, &p2)\\n\\tif err != nil {\\n\\t\\tfmt.Printf(\\\"err: %v\\\\n\\\", err)\\n\\t\\treturn\\n\\t}\\n\\tfmt.Println(p2)\\n\\t/* Output:\\n\\t{John 30}\\n\\t*/\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling Viper Configuration into a Go Struct\nDESCRIPTION: This Go snippet demonstrates how to unmarshal the entire configuration loaded into Viper into a Go struct (`config`). It defines a struct `C` with fields `Port`, `Name`, and `PathMap`, where `PathMap` uses a `mapstructure` tag to map to the configuration key `\"path_map\"`. The `viper.Unmarshal(&C)` function performs the data transfer and type conversion.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_28\n\nLANGUAGE: go\nCODE:\n```\ntype config struct {\n\tPort int\n\tName string\n\tPathMap string `mapstructure:\"path_map\"`\n}\n\nvar C config\n\nerr := viper.Unmarshal(&C)\nif err != nil {\n\tt.Fatalf(\"unable to decode into struct, %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Using SugaredLogger for Convenient Logging in Go\nDESCRIPTION: Demonstrates how to use Zap's SugaredLogger for convenient structured and printf-style logging. SugaredLogger offers a balance between performance and ease of use, being 4-10x faster than other logging packages.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync() // flushes buffer, if any\nsugar := logger.Sugar()\nsugar.Infow(\"failed to fetch URL\",\n  // Structured context as loosely typed key-value pairs.\n  \"url\", url,\n  \"attempt\", 3,\n  \"backoff\", time.Second,\n)\nsugar.Infof(\"Failed to fetch URL: %s\", url)\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML Data Using yaml.v3 in Go\nDESCRIPTION: This Go code snippet demonstrates the usage of the yaml.v3 package to unmarshal YAML data into a structured Go type and a map, then marshal both back into YAML format. Key dependencies are the \\\"gopkg.in/yaml.v3\\\" package, as well as the standard \\\"fmt\\\" and \\\"log\\\" libraries. Inputs include a sample YAML string assigned to the 'data' variable; outputs are printed structs/maps and YAML strings. The struct shows use of YAML field tags for custom key mapping, and the code includes error handling for all marshaling and unmarshaling operations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/yaml.v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Errors Using errors.Wrap\nDESCRIPTION: Demonstrates how to add context to errors using the errors.Wrap function, showing error handling for a file read operation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n_, err := ioutil.ReadAll(r)\nif err != nil {\n        return errors.Wrap(err, \"read failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Typed Configuration Values with Viper in Go\nDESCRIPTION: This snippet shows basic examples of retrieving configuration values using Viper in Go. It demonstrates getting a string value with `viper.GetString` (noting it's case-insensitive) and getting a boolean value with `viper.GetBool` to conditionally execute code. It implicitly relies on Viper having been previously configured (e.g., by reading a file or defaults).\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nviper.GetString(\"logfile\") // case-insensitive Setting & Getting\nif viper.GetBool(\"verbose\") {\n\tfmt.Println(\"verbose enabled\")\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Configuration Keys with Viper in Go\nDESCRIPTION: This Go snippet demonstrates how to access a deeply nested configuration value using Viper. By providing a dot-delimited path (`\"datastore.metric.host\"`) to the `GetString` method, Viper traverses the configuration structure (like the example JSON) to retrieve the specified value.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nGetString(\"datastore.metric.host\") // (returns \"127.0.0.1\")\n```\n\n----------------------------------------\n\nTITLE: Querying gRPC Service Request Inbound Rate with Prometheus - JSONIQ\nDESCRIPTION: Calculates the per-second inbound request rate for each gRPC service for a given Prometheus job (\"foo\"). This query sums the rate of `grpc_server_started_total` over a 1-minute window, grouped by `grpc_service`. Dependencies: Prometheus and gRPC monitoring metrics. Input: Prometheus metrics endpoint. Output: Time series showing per-service request rate. Omits the gRPC method dimension; all methods are aggregated per service.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_3\n\nLANGUAGE: JSONIQ\nCODE:\n```\nsum(rate(grpc_server_started_total{job=\\\"foo\\\"}[1m])) by (grpc_service)\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Schema Validation Example in Go\nDESCRIPTION: Complete example showing how to load and validate a JSON document against a schema. The example demonstrates loading schemas from files, performing validation, and handling validation results including error reporting.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/xeipuuv/gojsonschema\"\n)\n\nfunc main() {\n\n    schemaLoader := gojsonschema.NewReferenceLoader(\"file:///home/me/schema.json\")\n    documentLoader := gojsonschema.NewReferenceLoader(\"file:///home/me/document.json\")\n\n    result, err := gojsonschema.Validate(schemaLoader, documentLoader)\n    if err != nil {\n        panic(err.Error())\n    }\n\n    if result.Valid() {\n        fmt.Printf(\"The document is valid\\n\")\n    } else {\n        fmt.Printf(\"The document is not valid. see errors :\\n\")\n        for _, desc := range result.Errors() {\n            fmt.Printf(\"- %s\\n\", desc)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Remote etcd Configuration Changes with Viper in Go\nDESCRIPTION: This snippet demonstrates how to configure Viper in Go to read configuration from an unencrypted etcd instance and continuously watch for changes. It initializes a new Viper instance, adds etcd as a remote provider, specifies the configuration type (YAML), performs an initial read, and then launches a goroutine to periodically check for updates using `WatchRemoteConfig`. Updated configuration is unmarshaled into the `runtime_conf` struct.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// alternatively, you can create a new viper instance.\nvar runtime_viper = viper.New()\n\nruntime_viper.AddRemoteProvider(\"etcd\", \"http://127.0.0.1:4001\", \"/config/hugo.yml\")\nruntime_viper.SetConfigType(\"yaml\") // because there is no file extension in a stream of bytes, supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\n\n// read from remote config the first time.\nerr := runtime_viper.ReadRemoteConfig()\n\n// unmarshal config\nruntime_viper.Unmarshal(&runtime_conf)\n\n// open a goroutine to watch remote changes forever\ngo func(){\n\tfor {\n\t\ttime.Sleep(time.Second * 5) // delay after each request\n\n\t\t// currently, only tested with etcd support\n\t\terr := runtime_viper.WatchRemoteConfig()\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"unable to read remote config: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\t// unmarshal new config into our runtime config struct. you can also use channel\n\t\t// to implement a signal to notify the system of the changes\n\t\truntime_viper.Unmarshal(&runtime_conf)\n\t}\n}()\n```\n\n----------------------------------------\n\nTITLE: Using httpsnoop to Capture HTTP Metrics in Go\nDESCRIPTION: This example demonstrates how to wrap an existing HTTP handler to capture and log metrics for every request using httpsnoop. The metrics include HTTP method, URL, status code, response duration, and bytes written.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/felixge/httpsnoop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// myH is your app's http handler, perhaps a http.ServeMux or similar.\nvar myH http.Handler\n// wrappedH wraps myH in order to log every request.\nwrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tm := httpsnoop.CaptureMetrics(myH, w, r)\n\tlog.Printf(\n\t\t\"%s %s (code=%d dt=%s written=%d)\",\n\t\tr.Method,\n\t\tr.URL,\n\t\tm.Code,\n\t\tm.Duration,\n\t\tm.Written,\n\t)\n})\nhttp.ListenAndServe(\":8080\", wrappedH)\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository to Disk with go-git\nDESCRIPTION: Demonstrates how to clone a Git repository to a local directory using go-git. This example mimics the standard 'git clone' command and shows error handling and progress reporting.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-git/v5/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Clone the given repository to the given directory\nInfo(\"git clone https://github.com/go-git/go-git\")\n\n_, err := git.PlainClone(\"/tmp/foo\", false, &git.CloneOptions{\n    URL:      \"https://github.com/go-git/go-git\",\n    Progress: os.Stdout,\n})\n\nCheckIfError(err)\n```\n\n----------------------------------------\n\nTITLE: Testing a Health Check Handler with Go's Testing Package\nDESCRIPTION: This snippet shows how to test a HTTP handler using Go's testing package and httptest. It creates a request, records the response, and checks if the status code and response body match the expected values.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_38\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\npackage main\n\nimport (\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n)\n\nfunc TestHealthCheckHandler(t *testing.T) {\n    // Create a request to pass to our handler. We don't have any query parameters for now, so we'll\n    // pass 'nil' as the third parameter.\n    req, err := http.NewRequest(\"GET\", \"/health\", nil)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // We create a ResponseRecorder (which satisfies http.ResponseWriter) to record the response.\n    rr := httptest.NewRecorder()\n    handler := http.HandlerFunc(HealthCheckHandler)\n\n    // Our handlers satisfy http.Handler, so we can call their ServeHTTP method\n    // directly and pass in our Request and ResponseRecorder.\n    handler.ServeHTTP(rr, req)\n\n    // Check the status code is what we expect.\n    if status := rr.Code; status != http.StatusOK {\n        t.Errorf(\"handler returned wrong status code: got %v want %v\",\n            status, http.StatusOK)\n    }\n\n    // Check the response body is what we expect.\n    expected := `{\"alive\": true}`\n    if rr.Body.String() != expected {\n        t.Errorf(\"handler returned unexpected body: got %v want %v\",\n            rr.Body.String(), expected)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side gRPC Prometheus Interceptors in Go\nDESCRIPTION: Configuration for setting up server-side Prometheus monitoring interceptors in a gRPC server. Includes initialization of the server with stream and unary interceptors, service registration, and metrics handler setup.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmyServer := grpc.NewServer(\n    grpc.StreamInterceptor(grpc_prometheus.StreamServerInterceptor),\n    grpc.UnaryInterceptor(grpc_prometheus.UnaryServerInterceptor),\n)\n// Register your gRPC service implementations.\nmyservice.RegisterMyServiceServer(s.server, &myServiceImpl{})\n// After all your registrations, make sure all of the Prometheus metrics are initialized.\ngrpc_prometheus.Register(myServer)\n// Register Prometheus metrics handler.    \nhttp.Handle(\"/metrics\", promhttp.Handler())\n```\n\n----------------------------------------\n\nTITLE: Handling etcd Client Errors\nDESCRIPTION: Comprehensive error handling example for etcd client operations. It demonstrates how to handle different types of errors including context cancellation, deadline exceeded, and etcd-specific errors.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nresp, err := cli.Put(ctx, \"\", \"\")\nif err != nil {\n\tswitch err {\n\tcase context.Canceled:\n\t\tlog.Fatalf(\"ctx is canceled by another routine: %v\", err)\n\tcase context.DeadlineExceeded:\n\t\tlog.Fatalf(\"ctx is attached with a deadline is exceeded: %v\", err)\n\tcase rpctypes.ErrEmptyKey:\n\t\tlog.Fatalf(\"client-side error: %v\", err)\n\tdefault:\n\t\tlog.Fatalf(\"bad cluster endpoints, which are not etcd servers: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameters with GORP in Go\nDESCRIPTION: Demonstrates how to use named bind parameters in SQL queries with GORP, binding parameters by name using a map or struct.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n_, err := dbm.Select(&dest, \"select * from Foo where name = :name and age = :age\", map[string]interface{}{\n  \"name\": \"Rob\",\n  \"age\": 31,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing DbMap and Registering Tables in Go-Gorp\nDESCRIPTION: Demonstrates how to set up a database connection, create a DbMap instance, and register structs with table mappings in Go-Gorp. Shows configuration for MySQL dialect and setting up auto-increment primary keys.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// connect to db using standard Go database/sql API\n// use whatever database/sql driver you wish\ndb, err := sql.Open(\"mymysql\", \"tcp:localhost:3306*mydb/myuser/mypassword\")\n\n// construct a gorp DbMap\ndbmap := &gorp.DbMap{Db: db, Dialect: gorp.MySQLDialect{\"InnoDB\", \"UTF8\"}}\n\n// register the structs you wish to use with gorp\n// you can also use the shorter dbmap.AddTable() if you\n// don't want to override the table name\n//\n// SetKeys(true) means we have a auto increment primary key, which\n// will get automatically bound to your struct post-insert\n//\nt1 := dbmap.AddTableWithName(Invoice{}, \"invoice_test\").SetKeys(true, \"Id\")\nt2 := dbmap.AddTableWithName(Person{}, \"person_test\").SetKeys(true, \"Id\")\nt3 := dbmap.AddTableWithName(Product{}, \"product_test\").SetKeys(true, \"Id\")\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with Squirrel in Go\nDESCRIPTION: Demonstrates how to directly execute a SELECT query with WHERE and LIMIT clauses using Squirrel.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/squirrel/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nstooges := users.Where(sq.Eq{\"username\": []string{\"moe\", \"larry\", \"curly\", \"shemp\"}})\nthree_stooges := stooges.Limit(3)\nrows, err := three_stooges.RunWith(db).Query()\n\n// Behaves like:\nrows, err := db.Query(\"SELECT * FROM users WHERE username IN (?,?,?,?) LIMIT 3\",\n                      \"moe\", \"larry\", \"curly\", \"shemp\")\n```\n\n----------------------------------------\n\nTITLE: Generating Specific URL Parts (Host/Path) with Gorilla Mux in Go\nDESCRIPTION: Shows how to generate only the host part or only the path part of a URL for a named route ('article') using the `URLHost()` and `URLPath()` methods, respectively. These methods require providing the necessary variable values for the specific part being generated.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\n// \"http://news.example.com/\"\nhost, err := r.Get(\"article\").URLHost(\"subdomain\", \"news\")\n\n// \"/articles/technology/42\"\npath, err := r.Get(\"article\").URLPath(\"category\", \"technology\", \"id\", \"42\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespace with Workspace options using KubeSphere client in Go\nDESCRIPTION: This code example shows how to create a Kubernetes Namespace using the KubeSphere client. It demonstrates the use of URLOptions and WorkspaceOptions to interact with KubeSphere-specific API extensions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/staging/src/kubesphere.io/client-go/README.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\nns := &corev1.Namespace{\n\tObjectMeta: metav1.ObjectMeta{\n\t\tName: \"ks-test\",\n\t\tLabels: map[string]string{\n\t\t\tconstants.WorkspaceLabelKey: \"Workspace\",\n\t\t},\n\t},\n}\n\nopts := &client.URLOptions{\n\tGroup:   \"tenant.kubesphere.io\",\n\tVersion: \"v1alpha2\",\n}\n\nerr := f.GenericClient(f.BaseName).Create(context.TODO(), ns, opts, &client.WorkspaceOptions{Name: \"Workspace\"})\n```\n\n----------------------------------------\n\nTITLE: Using Logrus with Fields in Go\nDESCRIPTION: This example shows how to use Logrus with structured logging fields, demonstrating various log levels and reusable contextual loggers.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 122,\n  }).Warn(\"The group's number increased tremendously!\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 100,\n  }).Fatal(\"The ice breaks!\")\n\n  // A common pattern is to re-use fields between logging statements by re-using\n  // the logrus.Entry returned from WithFields()\n  contextLogger := log.WithFields(log.Fields{\n    \"common\": \"this is a common field\",\n    \"other\": \"I also should be logged always\",\n  })\n\n  contextLogger.Info(\"I'll be logged with common and other field\")\n  contextLogger.Info(\"Me too\")\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JMESPath Search in Go\nDESCRIPTION: Demonstrates the basic usage of jmespath.Search to query a nested JSON structure. Shows how to unmarshal JSON data and extract a specific array element using a JMESPath expression.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/jmespath/go-jmespath\"\n\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.Search(\"foo.bar.baz[2]\", data)\nresult = 2\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with GORP in Go\nDESCRIPTION: Demonstrates how to use transactions with GORP to batch multiple operations together.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc InsertInv(dbmap *DbMap, inv *Invoice, per *Person) error {\n    // Start a new transaction\n    trans, err := dbmap.Begin()\n    if err != nil {\n        return err\n    }\n\n    err = trans.Insert(per)\n    checkErr(err, \"Insert failed\")\n\n    inv.PersonId = per.Id\n    err = trans.Insert(inv)\n    checkErr(err, \"Insert failed\")\n\n    // if the commit is successful, a nil error is returned\n    return trans.Commit()\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Keychains for Auth Lookup (Go)\nDESCRIPTION: This Go snippet shows how to create a MultiKeychain by combining several keychain strategies (DefaultKeychain, Google Keychain, ECR and ACR helpers). The resulting MultiKeychain sequentially checks each keychain's credentials for image pulls, choosing the first available set, or Anonymous credentials if none match. It assumes prior imports of go-containerregistry github.com/google/go-containerregistry/pkg/authn and related packages, and is typically used to provide flexible authentication for various container registries.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nkc := authn.NewMultiKeychain(\n    authn.DefaultKeychain,\n    google.Keychain,\n    authn.NewKeychainFromHelper(ecr.ECRHelper{ClientFactory: api.DefaultClientFactory{}}),\n    authn.NewKeychainFromHelper(acr.ACRCredHelper{}),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Logging with glog in Go\nDESCRIPTION: Demonstrates basic logging functionality using glog, including Info and Fatal level logs with formatting.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/klog/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nglog.Info(\"Prepare to repel boarders\")\n\nglog.Fatalf(\"Initialization failed: %s\", err)\n```\n\n----------------------------------------\n\nTITLE: Making etcd API Requests with Timeout Context\nDESCRIPTION: Example demonstrating how to make a Put request to etcd with a timeout context. The context ensures the operation doesn't run indefinitely and includes proper resource cleanup with cancel().\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithTimeout(context.Background(), timeout)\nresp, err := cli.Put(ctx, \"sample_key\", \"sample_value\")\ncancel()\nif err != nil {\n    // handle error!\n}\n// use the response\n```\n\n----------------------------------------\n\nTITLE: Compressing Streams Using Zstandard Encoder in Go\nDESCRIPTION: This snippet demonstrates how to compress data from an io.Reader to an io.Writer using the zstd encoder in Go. It shows the creation of a new writer with zstd.NewWriter and highlights best practices: copying data to the encoder and closing it to release resources and finalize output. Dependencies include the github.com/klauspost/compress/zstd package and the io package. Inputs are io.Reader streams to compress and io.Writer for output; the function returns an error if compression fails or nil on success. Ensure that enc.Close() is always invoked, even on errors, to release resources.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Compress input to output.\nfunc Compress(in io.Reader, out io.Writer) error {\n    enc, err := zstd.NewWriter(out)\n    if err != nil {\n        return err\n    }\n    _, err = io.Copy(enc, in)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level in Logrus\nDESCRIPTION: Shows how to set the minimum logging level that will be displayed. In this example, setting the level to InfoLevel will log anything at Info level or above (warning, error, fatal, panic).\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Will log anything that is info or above (warn, error, fatal, panic). Default.\nlog.SetLevel(log.InfoLevel)\n```\n\n----------------------------------------\n\nTITLE: Updating Records with GORP in Go\nDESCRIPTION: Shows how to update existing database records using GORP. The Update method returns the number of rows modified.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// count is the # of rows updated, which should be 1 in this example\ncount, err := dbmap.Update(inv1)\n```\n\n----------------------------------------\n\nTITLE: Performing Ad Hoc SQL Queries with GORP in Go\nDESCRIPTION: Demonstrates how to execute custom SELECT queries with GORP, binding results to structs or primitive types.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Select a slice - first return value is not needed when a slice pointer is passed to Select()\nvar posts []Post\n_, err := dbmap.Select(&posts, \"select * from post order by id\")\n\n// You can also use primitive types\nvar ids []string\n_, err := dbmap.Select(&ids, \"select id from post\")\n\n// Select a single row.\n// Returns an error if no row found, or if more than one row is found\nvar post Post\nerr := dbmap.SelectOne(&post, \"select * from post where id=?\", id)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Registered Routes using Walk Function in Gorilla Mux (Go)\nDESCRIPTION: Provides a complete example demonstrating how to use the `Walk()` method on a `mux.Router` instance to iterate through all registered routes. It defines several sample routes and then uses `Walk` with an anonymous function to access and print details for each route, including its path template, path regular expression, query templates, query regular expressions, and HTTP methods. Dependencies include `fmt`, `net/http`, `strings`, and `github.com/gorilla/mux`.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\treturn\n}\n\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/\", handler)\n\tr.HandleFunc(\"/products\", handler).Methods(\"POST\")\n\tr.HandleFunc(\"/articles\", handler).Methods(\"GET\")\n\tr.HandleFunc(\"/articles/{id}\", handler).Methods(\"GET\", \"PUT\")\n\tr.HandleFunc(\"/authors\", handler).Queries(\"surname\", \"{surname}\")\n\terr := r.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {\n\t\tpathTemplate, err := route.GetPathTemplate()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"ROUTE:\", pathTemplate)\n\t\t}\n\t\tpathRegexp, err := route.GetPathRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Path regexp:\", pathRegexp)\n\t\t}\n\t\tqueriesTemplates, err := route.GetQueriesTemplates()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries templates:\", strings.Join(queriesTemplates, \",\"))\n\t\t}\n\t\tqueriesRegexps, err := route.GetQueriesRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries regexps:\", strings.Join(queriesRegexps, \",\"))\n\t\t}\n\t\tmethods, err := route.GetMethods()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Methods:\", strings.Join(methods, \",\"))\n\t\t}\n\t\tfmt.Println()\n\t\treturn nil\n\t})\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\thttp.Handle(\"/\", r)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Format String Logging to Structured Logging in Go\nDESCRIPTION: This snippet demonstrates how to convert traditional format string logging to structured logging using logr. It shows examples of transforming klog.V().Infof() calls to logger.Error() and logger.V().Info() calls with key-value pairs.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Before\nklog.V(4).Infof(\"Client is returning errors: code %v, error %v\", responseCode, err)\n\n// After\nlogger.Error(err, \"client returned an error\", \"code\", responseCode)\n\n// Before\nklog.V(4).Infof(\"Got a Retry-After %ds response for attempt %d to %v\", seconds, retries, url)\n\n// After\nlogger.V(4).Info(\"got a retry-after response when requesting url\", \"attempt\", retries, \"after seconds\", seconds, \"url\", url)\n```\n\n----------------------------------------\n\nTITLE: Installing pq Go Postgres Driver Using go get - Go\nDESCRIPTION: This snippet provides the command to install the pq PostgreSQL driver package for Go via the go get tool. The command downloads and installs the package from GitHub, making it available for import in Go projects. No additional dependencies besides Go itself are required; internet access is necessary for package retrieval.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/lib/pq/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo get github.com/lib/pq\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Array Elements by Index with Viper in Go\nDESCRIPTION: This Go snippet illustrates how to access an element within a configuration array using Viper. It uses a dot-delimited path including a numerical index (`\"host.ports.1\"`) with the `GetInt` method to retrieve the integer value at the specified index (1) within the `ports` array.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nGetInt(\"host.ports.1\") // returns 6029\n\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra CLI Generator\nDESCRIPTION: This snippet shows the command to install the Cobra CLI generator tool, which helps bootstrap Cobra-based applications.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/cobra/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/spf13/cobra-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Creating an etcd Client in Go\nDESCRIPTION: Example showing how to create a new etcd client connection using clientv3.New(). This configures the endpoints and connection timeout, with proper error handling and resource cleanup.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncli, err := clientv3.New(clientv3.Config{\n\tEndpoints:   []string{\"localhost:2379\", \"localhost:22379\", \"localhost:32379\"},\n\tDialTimeout: 5 * time.Second,\n})\nif err != nil {\n\t// handle error!\n}\ndefer cli.Close()\n```\n\n----------------------------------------\n\nTITLE: Spawning Goroutines and Waiting for Completion in Go\nDESCRIPTION: Demonstrates how to spawn a set of goroutines and wait for them to finish using both the standard library and the 'conc' package. The 'conc' version simplifies error handling and reduces boilerplate code.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            // crashes on panic!\n            doSomething()\n        }()\n    }\n    wg.Wait()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var wg conc.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Go(doSomething)\n    }\n    wg.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Single Page Applications with Gorilla Mux\nDESCRIPTION: Comprehensive example showing how to serve a single page application (SPA) alongside API endpoints using Gorilla Mux, with fallback to index.html for client-side routing.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/gorilla/mux\"\n)\n\n// spaHandler implements the http.Handler interface, so we can use it\n// to respond to HTTP requests. The path to the static directory and\n// path to the index file within that static directory are used to\n// serve the SPA in the given static directory.\ntype spaHandler struct {\n\tstaticPath string\n\tindexPath  string\n}\n\n// ServeHTTP inspects the URL path to locate a file within the static dir\n// on the SPA handler. If a file is found, it will be served. If not, the\n// file located at the index path on the SPA handler will be served. This\n// is suitable behavior for serving an SPA (single page application).\nfunc (h spaHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\t// Join internally call path.Clean to prevent directory traversal\n\tpath := filepath.Join(h.staticPath, r.URL.Path)\n\n\t// check whether a file exists or is a directory at the given path\n\tfi, err := os.Stat(path)\n\tif os.IsNotExist(err) || fi.IsDir() {\n\t\t// file does not exist or path is a directory, serve index.html\n\t\thttp.ServeFile(w, r, filepath.Join(h.staticPath, h.indexPath))\n\t\treturn\n\t}\n\n\tif err != nil {\n\t\t// if we got an error (that wasn't that the file doesn't exist) stating the\n\t\t// file, return a 500 internal server error and stop\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n\t}\n\n\t// otherwise, use http.FileServer to serve the static file\n\thttp.FileServer(http.Dir(h.staticPath)).ServeHTTP(w, r)\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\n\trouter.HandleFunc(\"/api/health\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// an example API handler\n\t\tjson.NewEncoder(w).Encode(map[string]bool{\"ok\": true})\n\t})\n\n\tspa := spaHandler{staticPath: \"build\", indexPath: \"index.html\"}\n\trouter.PathPrefix(\"/\").Handler(spa)\n\n\tsrv := &http.Server{\n\t\tHandler: router,\n\t\tAddr:    \"127.0.0.1:8000\",\n\t\t// Good practice: enforce timeouts for servers you create!\n\t\tWriteTimeout: 15 * time.Second,\n\t\tReadTimeout:  15 * time.Second,\n\t}\n\n\tlog.Fatal(srv.ListenAndServe())\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration Files with Viper\nDESCRIPTION: Example showing how to configure Viper to find and read a configuration file from multiple paths.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nviper.SetConfigName(\"config\") // name of config file (without extension)\nviper.SetConfigType(\"yaml\") // REQUIRED if the config file does not have the extension in the name\nviper.AddConfigPath(\"/etc/appname/\")   // path to look for the config file in\nviper.AddConfigPath(\"$HOME/.appname\")  // call multiple times to add many search paths\nviper.AddConfigPath(\".\")               // optionally look for config in the working directory\nerr := viper.ReadInConfig() // Find and read the config file\nif err != nil { // Handle errors reading the config file\n\tpanic(fmt.Errorf(\"fatal error config file: %w\", err))\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Records by Primary Key with GORP in Go\nDESCRIPTION: Shows how to fetch a single database record by its primary key using GORP's Get method.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// fetch Invoice with Id=99\nobj, err := dbmap.Get(Invoice{}, 99)\ninv := obj.(*Invoice)\n```\n\n----------------------------------------\n\nTITLE: Combining JSON Merge Patches in Go\nDESCRIPTION: Example showing how to combine multiple JSON merge patches into a single patch document that describes all changes. Demonstrates merging two different patches and verifying they produce equivalent results.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/evanphx/json-patch/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\n\tnameAndHeight := []byte(`{\"height\":null,\"name\":\"Jane\"}`)\n\tageAndEyes := []byte(`{\"age\":4.23,\"eyes\":\"blue\"}`)\n\n\t// Let's combine these merge patch documents...\n\tcombinedPatch, err := jsonpatch.MergeMergePatches(nameAndHeight, ageAndEyes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Apply each patch individual against the original document\n\twithoutCombinedPatch, err := jsonpatch.MergePatch(original, nameAndHeight)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\twithoutCombinedPatch, err = jsonpatch.MergePatch(withoutCombinedPatch, ageAndEyes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Apply the combined patch against the original document\n\n\twithCombinedPatch, err := jsonpatch.MergePatch(original, combinedPatch)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Do both result in the same thing? They should!\n\tif jsonpatch.Equal(withCombinedPatch, withoutCombinedPatch) {\n\t\tfmt.Println(\"Both JSON documents are structurally the same!\")\n\t}\n\n\tfmt.Printf(\"combined merge patch: %s\", combinedPatch)\n}\n```\n\n----------------------------------------\n\nTITLE: CBOR Encoding Presets in Go\nDESCRIPTION: Shows how to use predefined encoding presets for different CBOR serialization standards. These presets can be used as-is or as a starting point for custom settings.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// EncOptions is a struct of encoder settings.\nfunc CoreDetEncOptions() EncOptions              // RFC 8949 Core Deterministic Encoding\nfunc PreferredUnsortedEncOptions() EncOptions    // RFC 8949 Preferred Serialization\nfunc CanonicalEncOptions() EncOptions            // RFC 7049 Canonical CBOR\nfunc CTAP2EncOptions() EncOptions                // FIDO2 CTAP2 Canonical CBOR\n```\n\n----------------------------------------\n\nTITLE: Reusing Schema for Multiple Validations in Go\nDESCRIPTION: Shows how to compile a schema once and reuse it for multiple validations. This is more efficient when validating multiple documents against the same schema.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nschema, err := gojsonschema.NewSchema(schemaLoader)\n...\nresult1, err := schema.Validate(documentLoader1)\n...\nresult2, err := schema.Validate(documentLoader2)\n...\n// etc ...\n```\n\n----------------------------------------\n\nTITLE: Map Validation with GoValidator\nDESCRIPTION: Shows how to validate a map against a template map that contains validation tags, similar to struct validation but for map[string]interface{} types including nested maps.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nvar mapTemplate = map[string]interface{}{\n\t\"name\":\"required,alpha\",\n\t\"family\":\"required,alpha\",\n\t\"email\":\"required,email\",\n\t\"cell-phone\":\"numeric\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"required,alphanum\",\n\t\t\"line2\":\"alphanum\",\n\t\t\"postal-code\":\"numeric\",\n\t},\n}\n\nvar inputMap = map[string]interface{}{\n\t\"name\":\"Bob\",\n\t\"family\":\"Smith\",\n\t\"email\":\"foo@bar.baz\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"\",\n\t\t\"line2\":\"\",\n\t\t\"postal-code\":\"\",\n\t},\n}\n\nresult, err := govalidator.ValidateMap(inputMap, mapTemplate)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Passing a Logr Logger to Application Components in Go\nDESCRIPTION: Example showing how to pass the logger to other components in a Go application after initialization. This demonstrates the separation of concerns where only the main function needs to know about the implementation details.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\napp := createTheAppObject(logger)\napp.Run()\n```\n\n----------------------------------------\n\nTITLE: Generating a ULID in Go\nDESCRIPTION: Demonstrates generating a ULID using the `oklog/ulid` library in Go. It initializes a specific timestamp, creates a monotonic entropy source using `rand.New` seeded with the timestamp, and then generates the ULID using `ulid.MustNew`. The example explicitly mentions that `math/rand.Rand` is not concurrency-safe and suggests alternatives. The expected output for the given timestamp and seed is provided in a comment.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/oklog/ulid/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleULID() {\n\tt := time.Unix(1000000, 0)\n\tentropy := ulid.Monotonic(rand.New(rand.NewSource(t.UnixNano())), 0)\n\tfmt.Println(ulid.MustNew(ulid.Timestamp(t), entropy))\n\t// Output: 0000XSNJG0MQJHBF4QX1EFD6Y3\n}\n\n```\n\n----------------------------------------\n\nTITLE: URL Scheme Matching in Gorilla Mux\nDESCRIPTION: Demonstrates how to match routes based on URL schemes (http, https), which can be used to enforce security requirements.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nr.Schemes(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Redis Client Initialization and Basic Operations\nDESCRIPTION: Example showing how to initialize a Redis client and perform basic ping operation, including client configuration with connection details\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-redis/redis/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleNewClient() {\n\tclient := redis.NewClient(&redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\", // no password set\n\t\tDB:       0,  // use default DB\n\t})\n\n\tpong, err := client.Ping().Result()\n\tfmt.Println(pong, err)\n\t// Output: PONG <nil>\n}\n```\n\n----------------------------------------\n\nTITLE: Building Complex URLs with Host, Path, and Queries in Gorilla Mux (Go)\nDESCRIPTION: Defines a named route ('article') that includes variables in the host (`{subdomain}`), path (`{category}`, `{id}`), and query string (`{filter}`). It then demonstrates generating the full URL (e.g., \"http://news.example.com/articles/technology/42?filter=gorilla\") using `r.Get(\"article\").URL()` by providing all required variable values.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.Host(\"{subdomain}.example.com\").\n  Path(\"/articles/{category}/{id:[0-9]+}\").\n  Queries(\"filter\", \"{filter}\").\n  HandlerFunc(ArticleHandler).\n  Name(\"article\")\n\n// url.String() will be \"http://news.example.com/articles/technology/42?filter=gorilla\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\",\n                                 \"filter\", \"gorilla\")\n```\n\n----------------------------------------\n\nTITLE: Using a Logr Logger in a Go Application Component\nDESCRIPTION: Example of how to use a logr.Logger within a Go application component. This demonstrates storing the logger as a struct field and using it to emit log messages with structured key-value pairs.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype appObject struct {\n    // ... other fields ...\n    logger logr.Logger\n    // ... other fields ...\n}\n\nfunc (app *appObject) Run() {\n    app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n    // ... app code ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single SSH Config Value in Go\nDESCRIPTION: This snippet demonstrates how to retrieve a single configuration value (like 'Port') for a specific host ('myhost') using the `ssh_config.Get` function. The function automatically searches `$HOME/.ssh/config` and falls back to `/etc/ssh/ssh_config` if the primary file doesn't exist or doesn't contain the key. It returns the value as a string.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/kevinburke/ssh_config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nport := ssh_config.Get(\"myhost\", \"Port\")\n```\n\n----------------------------------------\n\nTITLE: Example of Struct Validation with GoValidator\nDESCRIPTION: Demonstrates how to use struct validation with custom field tags and validators, including adding custom validation functions and parameter-based validators.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ntype Post struct {\n\tTitle    string `valid:\"alphanum,required\"`\n\tMessage  string `valid:\"duck,ascii\"`\n\tMessage2 string `valid:\"animal(dog)\"`\n\tAuthorIP string `valid:\"ipv4\"`\n\tDate     string `valid:\"-\"`\n}\npost := &Post{\n\tTitle:   \"My Example Post\",\n\tMessage: \"duck\",\n\tMessage2: \"dog\",\n\tAuthorIP: \"123.234.54.3\",\n}\n\n// Add your own struct validation tags\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n\n// Add your own struct validation tags with parameter\ngovalidator.ParamTagMap[\"animal\"] = govalidator.ParamValidator(func(str string, params ...string) bool {\n    species := params[0]\n    return str == species\n})\ngovalidator.ParamTagRegexMap[\"animal\"] = regexp.MustCompile(\"^animal\\\\((\\\\w+)\\\\)$\")\n\nresult, err := govalidator.ValidateStruct(post)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Defining a Stateful Authentication Middleware Struct in Go (Gorilla Mux)\nDESCRIPTION: Defines a struct `authenticationMiddleware` designed for stateful authentication. It contains a map `tokenUsers` to store session tokens (strings) mapped to usernames (strings). It also includes a `Populate` method to initialize this map with sample token-user pairs.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\n// Define our struct\ntype authenticationMiddleware struct {\n\ttokenUsers map[string]string\n}\n\n// Initialize it somewhere\nfunc (amw *authenticationMiddleware) Populate() {\n\tamw.tokenUsers[\"00000000\"] = \"user0\"\n\tamw.tokenUsers[\"aaaaaaaa\"] = \"userA\"\n\tamw.tokenUsers[\"05f717e5\"] = \"randomUser\"\n\tamw.tokenUsers[\"deadbeef\"] = \"user0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete SQLX Usage Example in Go\nDESCRIPTION: Comprehensive example demonstrating sqlx functionality including database connection, transactions, queries, struct mapping, and batch operations with both structs and maps\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/jmoiron/sqlx/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"database/sql\"\n    \"fmt\"\n    \"log\"\n    \n    _ \"github.com/lib/pq\"\n    \"github.com/jmoiron/sqlx\"\n)\n\nvar schema = `\nCREATE TABLE person (\n    first_name text,\n    last_name text,\n    email text\n);\n\nCREATE TABLE place (\n    country text,\n    city text NULL,\n    telcode integer\n)`\n\ntype Person struct {\n    FirstName string `db:\"first_name\"`\n    LastName  string `db:\"last_name\"`\n    Email     string\n}\n\ntype Place struct {\n    Country string\n    City    sql.NullString\n    TelCode int\n}\n\nfunc main() {\n    // this Pings the database trying to connect\n    // use sqlx.Open() for sql.Open() semantics\n    db, err := sqlx.Connect(\"postgres\", \"user=foo dbname=bar sslmode=disable\")\n    if err != nil {\n        log.Fatalln(err)\n    }\n\n    // exec the schema or fail; multi-statement Exec behavior varies between\n    // database drivers;  pq will exec them all, sqlite3 won't, ymmv\n    db.MustExec(schema)\n    \n    tx := db.MustBegin()\n    tx.MustExec(\"INSERT INTO person (first_name, last_name, email) VALUES ($1, $2, $3)\", \"Jason\", \"Moiron\", \"jmoiron@jmoiron.net\")\n    tx.MustExec(\"INSERT INTO person (first_name, last_name, email) VALUES ($1, $2, $3)\", \"John\", \"Doe\", \"johndoeDNE@gmail.net\")\n    tx.MustExec(\"INSERT INTO place (country, city, telcode) VALUES ($1, $2, $3)\", \"United States\", \"New York\", \"1\")\n    tx.MustExec(\"INSERT INTO place (country, telcode) VALUES ($1, $2)\", \"Hong Kong\", \"852\")\n    tx.MustExec(\"INSERT INTO place (country, telcode) VALUES ($1, $2)\", \"Singapore\", \"65\")\n    // Named queries can use structs, so if you have an existing struct (i.e. person := &Person{}) that you have populated, you can pass it in as &person\n    tx.NamedExec(\"INSERT INTO person (first_name, last_name, email) VALUES (:first_name, :last_name, :email)\", &Person{\"Jane\", \"Citizen\", \"jane.citzen@example.com\"})\n    tx.Commit()\n\n    // Query the database, storing results in a []Person (wrapped in []interface{})\n    people := []Person{}\n    db.Select(&people, \"SELECT * FROM person ORDER BY first_name ASC\")\n    jason, john := people[0], people[1]\n\n    fmt.Printf(\"%#v\\n%#v\", jason, john)\n    // Person{FirstName:\"Jason\", LastName:\"Moiron\", Email:\"jmoiron@jmoiron.net\"}\n    // Person{FirstName:\"John\", LastName:\"Doe\", Email:\"johndoeDNE@gmail.net\"}\n\n    // You can also get a single result, a la QueryRow\n    jason = Person{}\n    err = db.Get(&jason, \"SELECT * FROM person WHERE first_name=$1\", \"Jason\")\n    fmt.Printf(\"%#v\\n\", jason)\n    // Person{FirstName:\"Jason\", LastName:\"Moiron\", Email:\"jmoiron@jmoiron.net\"}\n\n    // if you have null fields and use SELECT *, you must use sql.Null* in your struct\n    places := []Place{}\n    err = db.Select(&places, \"SELECT * FROM place ORDER BY telcode ASC\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    usa, singsing, honkers := places[0], places[1], places[2]\n    \n    fmt.Printf(\"%#v\\n%#v\\n%#v\\n\", usa, singsing, honkers)\n    // Place{Country:\"United States\", City:sql.NullString{String:\"New York\", Valid:true}, TelCode:1}\n    // Place{Country:\"Singapore\", City:sql.NullString{String:\"\", Valid:false}, TelCode:65}\n    // Place{Country:\"Hong Kong\", City:sql.NullString{String:\"\", Valid:false}, TelCode:852}\n\n    // Loop through rows using only one struct\n    place := Place{}\n    rows, err := db.Queryx(\"SELECT * FROM place\")\n    for rows.Next() {\n        err := rows.StructScan(&place)\n        if err != nil {\n            log.Fatalln(err)\n        } \n        fmt.Printf(\"%#v\\n\", place)\n    }\n    // Place{Country:\"United States\", City:sql.NullString{String:\"New York\", Valid:true}, TelCode:1}\n    // Place{Country:\"Hong Kong\", City:sql.NullString{String:\"\", Valid:false}, TelCode:852}\n    // Place{Country:\"Singapore\", City:sql.NullString{String:\"\", Valid:false}, TelCode:65}\n\n    // Named queries, using `:name` as the bindvar.  Automatic bindvar support\n    // which takes into account the dbtype based on the driverName on sqlx.Open/Connect\n    _, err = db.NamedExec(`INSERT INTO person (first_name,last_name,email) VALUES (:first,:last,:email)`, \n        map[string]interface{}{\n            \"first\": \"Bin\",\n            \"last\": \"Smuth\",\n            \"email\": \"bensmith@allblacks.nz\",\n    })\n\n    // Selects Mr. Smith from the database\n    rows, err = db.NamedQuery(`SELECT * FROM person WHERE first_name=:fn`, map[string]interface{}{\"fn\": \"Bin\"})\n\n    // Named queries can also use structs.  Their bind names follow the same rules\n    // as the name -> db mapping, so struct fields are lowercased and the `db` tag\n    // is taken into consideration.\n    rows, err = db.NamedQuery(`SELECT * FROM person WHERE first_name=:first_name`, jason)\n    \n    \n    // batch insert\n    \n    // batch insert with structs\n    personStructs := []Person{\n        {FirstName: \"Ardie\", LastName: \"Savea\", Email: \"asavea@ab.co.nz\"},\n        {FirstName: \"Sonny Bill\", LastName: \"Williams\", Email: \"sbw@ab.co.nz\"},\n        {FirstName: \"Ngani\", LastName: \"Laumape\", Email: \"nlaumape@ab.co.nz\"},\n    }\n\n    _, err = db.NamedExec(`INSERT INTO person (first_name, last_name, email)\n        VALUES (:first_name, :last_name, :email)`, personStructs)\n\n    // batch insert with maps\n    personMaps := []map[string]interface{}{\n        {\"first_name\": \"Ardie\", \"last_name\": \"Savea\", \"email\": \"asavea@ab.co.nz\"},\n        {\"first_name\": \"Sonny Bill\", \"last_name\": \"Williams\", \"email\": \"sbw@ab.co.nz\"},\n        {\"first_name\": \"Ngani\", \"last_name\": \"Laumape\", \"email\": \"nlaumape@ab.co.nz\"},\n    }\n\n    _, err = db.NamedExec(`INSERT INTO person (first_name, last_name, email)\n        VALUES (:first_name, :last_name, :email)`, personMaps)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Error Objects in Go\nDESCRIPTION: Example of defining custom errors using the go-errors/errors package in a 'crashy' package. This demonstrates how to create a named error using Errorf and wrap it using New.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-errors/errors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage crashy\n\nimport \"github.com/go-errors/errors\"\n\nvar Crashed = errors.Errorf(\"oh dear\")\n\nfunc Crash() error {\n    return errors.New(Crashed)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Route with Gorilla Mux in Go\nDESCRIPTION: Demonstrates how to create a new router, define a handler function for a specific path pattern with variables (`category`, `id`), and assign a name ('article') to the route using `Name()` for later URL generation. This setup uses `mux.NewRouter` and `HandleFunc`.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler).\n  Name(\"article\")\n```\n\n----------------------------------------\n\nTITLE: Executing Portable Raw SQL with Named Parameters in Go (Gorp)\nDESCRIPTION: This Go snippet demonstrates a portable workaround for executing raw SQL queries across different databases using `gorp`. Instead of database-specific placeholders like `?` or `$1`, it uses named parameters (e.g., `:id`). The actual values for these parameters are supplied in a `map[string]interface{}` passed to the `SelectOne` method. `gorp` handles the translation of these named parameters into the appropriate syntax for the underlying database dialect, ensuring the query works consistently across MySQL, PostgreSQL, SQLite3, etc.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n```go \nerr := dbmap.SelectOne(&val, \"select * from foo where id = :id\",\nmap[string]interface{} { \"id\": 30})\n```\n```\n\n----------------------------------------\n\nTITLE: In-Memory Git Repository Operations with go-git\nDESCRIPTION: Shows how to clone a Git repository into memory and iterate through commit history. This example demonstrates memory storage, retrieving HEAD references, and accessing commit information.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-git/v5/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Clones the given repository in memory, creating the remote, the local\n// branches and fetching the objects, exactly as:\nInfo(\"git clone https://github.com/go-git/go-billy\")\n\nr, err := git.Clone(memory.NewStorage(), nil, &git.CloneOptions{\n    URL: \"https://github.com/go-git/go-billy\",\n})\n\nCheckIfError(err)\n\n// Gets the HEAD history from HEAD, just like this command:\nInfo(\"git log\")\n\n// ... retrieves the branch pointed by HEAD\nref, err := r.Head()\nCheckIfError(err)\n\n\n// ... retrieves the commit history\ncIter, err := r.Log(&git.LogOptions{From: ref.Hash()})\nCheckIfError(err)\n\n// ... just iterates over the commits, printing it\nerr = cIter.ForEach(func(c *object.Commit) error {\n\tfmt.Println(c)\n\treturn nil\n})\nCheckIfError(err)\n```\n\n----------------------------------------\n\nTITLE: List of Available Struct Field Validators in Go\nDESCRIPTION: A comprehensive list of built-in validators that can be used with struct field validation, mapped to their corresponding validation functions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n\"email\":              IsEmail,\n\"url\":                IsURL,\n\"dialstring\":         IsDialString,\n\"requrl\":             IsRequestURL,\n\"requri\":             IsRequestURI,\n\"alpha\":              IsAlpha,\n\"utfletter\":          IsUTFLetter,\n\"alphanum\":           IsAlphanumeric,\n\"utfletternum\":       IsUTFLetterNumeric,\n\"numeric\":            IsNumeric,\n\"utfnumeric\":         IsUTFNumeric,\n\"utfdigit\":           IsUTFDigit,\n\"hexadecimal\":        IsHexadecimal,\n\"hexcolor\":           IsHexcolor,\n\"rgbcolor\":           IsRGBcolor,\n\"lowercase\":          IsLowerCase,\n\"uppercase\":          IsUpperCase,\n\"int\":                IsInt,\n\"float\":              IsFloat,\n\"null\":               IsNull,\n\"uuid\":               IsUUID,\n\"uuidv3\":             IsUUIDv3,\n\"uuidv4\":             IsUUIDv4,\n\"uuidv5\":             IsUUIDv5,\n\"creditcard\":         IsCreditCard,\n\"isbn10\":             IsISBN10,\n\"isbn13\":             IsISBN13,\n\"json\":               IsJSON,\n\"multibyte\":          IsMultibyte,\n\"ascii\":              IsASCII,\n\"printableascii\":     IsPrintableASCII,\n\"fullwidth\":          IsFullWidth,\n\"halfwidth\":          IsHalfWidth,\n\"variablewidth\":      IsVariableWidth,\n\"base64\":             IsBase64,\n\"datauri\":            IsDataURI,\n\"ip\":                 IsIP,\n\"port\":               IsPort,\n\"ipv4\":               IsIPv4,\n\"ipv6\":               IsIPv6,\n\"dns\":                IsDNSName,\n\"host\":               IsHost,\n\"mac\":                IsMAC,\n\"latitude\":           IsLatitude,\n\"longitude\":          IsLongitude,\n\"ssn\":                IsSSN,\n\"semver\":             IsSemver,\n\"rfc3339\":            IsRFC3339,\n\"rfc3339WithoutZone\": IsRFC3339WithoutZone,\n\"ISO3166Alpha2\":      IsISO3166Alpha2,\n\"ISO3166Alpha3\":      IsISO3166Alpha3,\n\"ulid\":               IsULID,\n```\n\n----------------------------------------\n\nTITLE: Basic Mergo Usage Example in Go\nDESCRIPTION: A complete example demonstrating basic usage of Mergo to merge two structs.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/imdario/mergo/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/imdario/mergo\"\n)\n\ntype Foo struct {\n\tA string\n\tB int64\n}\n\nfunc main() {\n\tsrc := Foo{\n\t\tA: \"one\",\n\t\tB: 2,\n\t}\n\tdest := Foo{\n\t\tA: \"two\",\n\t}\n\tmergo.Merge(&dest, src)\n\tfmt.Println(dest)\n\t// Will print\n\t// {two 2}\n}\n```\n\n----------------------------------------\n\nTITLE: Using slog.Handler as Backend for logr in Go\nDESCRIPTION: This snippet demonstrates how to use a slog.Handler as a backend for logr. It explains the mapping of logr verbosity levels to slog levels, handling of stack unwinding, and recording of logger names.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Example code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Accessing a Remote Image in Go\nDESCRIPTION: This snippet demonstrates how to use the 'remote' package to access an image from a remote registry. It includes parsing a reference, authenticating with a keychain, and retrieving the image.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/v1/remote/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/google/go-containerregistry/pkg/authn\"\n\t\"github.com/google/go-containerregistry/pkg/name\"\n\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n)\n\nfunc main() {\n\tref, err := name.ParseReference(\"gcr.io/google-containers/pause\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\timg, err := remote.Image(ref, remote.WithAuthFromKeychain(authn.DefaultKeychain))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// do stuff with img\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stateful Authentication Middleware Logic in Go (Gorilla Mux)\nDESCRIPTION: Implements the `Middleware` method for the `authenticationMiddleware` struct, making it conform to the `MiddlewareFunc` pattern (implicitly via method signature). This method retrieves a token from the `X-Session-Token` request header, checks if it exists in the `tokenUsers` map. If found, it logs the authenticated user and calls `next.ServeHTTP` to proceed. If not found, it returns a `403 Forbidden` error using `http.Error` and does *not* call `next.ServeHTTP`, effectively stopping the request chain. Requires `log` and `net/http`.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\n// Middleware function, which will be called for each request\nfunc (amw *authenticationMiddleware) Middleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        token := r.Header.Get(\"X-Session-Token\")\n\n        if user, found := amw.tokenUsers[token]; found {\n        \t// We found the token in our map\n        \tlog.Printf(\"Authenticated user %s\\n\", user)\n        \t// Pass down the request to the next middleware (or final handler)\n        \tnext.ServeHTTP(w, r)\n        } else {\n        \t// Write an error and stop the handler chain\n        \thttp.Error(w, \"Forbidden\", http.StatusForbidden)\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Health Check Handler in Go with Gorilla Mux\nDESCRIPTION: This snippet demonstrates a simple health check handler that returns a JSON response. The handler sets appropriate content type headers and returns a status code of 200 OK.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_37\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\npackage main\n\nfunc HealthCheckHandler(w http.ResponseWriter, r *http.Request) {\n    // A very simple health check.\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.WriteHeader(http.StatusOK)\n\n    // In the future we could report back on the status of our DB, or our cache\n    // (e.g. Redis) by performing a simple PING, and include them in the response.\n    io.WriteString(w, `{\"alive\": true}`)\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/health\", HealthCheckHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling with a Custom Key Delimiter in Viper (Go)\nDESCRIPTION: This snippet illustrates how to handle configuration keys that contain dots (`.`) by configuring Viper with a custom key delimiter. It creates a new Viper instance using `viper.NewWithOptions(viper.KeyDelimiter(\"::\"))`, sets a default value with a key containing the custom delimiter (`chart::values`), defines a target struct `C`, and then uses `v.Unmarshal(&C)` to populate the struct.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_29\n\nLANGUAGE: go\nCODE:\n```\nv := viper.NewWithOptions(viper.KeyDelimiter(\"::\"))\n\nv.SetDefault(\"chart::values\", map[string]any{\n\t\"ingress\": map[string]any{\n\t\t\"annotations\": map[string]any{\n\t\t\t\"traefik.frontend.rule.type\":                 \"PathPrefix\",\n\t\t\t\"traefik.ingress.kubernetes.io/ssl-redirect\": \"true\",\n\t\t},\n\t},\n})\n\ntype config struct {\n\tChart struct{\n\t\tValues map[string]any\n\t}\n}\n\nvar C config\n\nv.Unmarshal(&C)\n```\n\n----------------------------------------\n\nTITLE: Streaming Zstandard Decompression in Go\nDESCRIPTION: This Go function demonstrates how to decompress a Zstandard data stream. It takes an `io.Reader` (compressed input) and `io.Writer` (decompressed output), creates a `zstd.NewReader`, copies the decompressed data using `io.Copy`, and ensures the reader's `Close` method is deferred to release resources, particularly goroutines used for default concurrent decoding. Requires the `io` and `github.com/klauspost/compress/zstd` packages.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\nfunc Decompress(in io.Reader, out io.Writer) error {\n    d, err := zstd.NewReader(in)\n    if err != nil {\n        return err\n    }\n    defer d.Close()\n    \n    // Copy content...\n    _, err = io.Copy(out, d)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSON Pointer in Go for Document Manipulation\nDESCRIPTION: Demonstrates how to use the JSON Pointer implementation to manipulate a JSON document. Shows initialization of JSON data, creating pointers, and performing GET, SET, and DELETE operations on the document structure.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonpointer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\njsonText := `{\n\t\t\"name\": \"Bobby B\",\n\t\t\"occupation\": {\n\t\t\t\"title\" : \"King\",\n\t\t\t\"years\" : 15,\n\t\t\t\"heir\" : \"Joffrey B\"\t\t\t\n\t\t}\n\t}`\n\n    var jsonDocument map[string]interface{}\n    json.Unmarshal([]byte(jsonText), &jsonDocument)\n    \n    //create a JSON pointer\n    pointerString := \"/occupation/title\"\n    pointer, _ := NewJsonPointer(pointerString)\n    \n    //SET a new value for the \"title\" in the document     \n    pointer.Set(jsonDocument, \"Supreme Leader of Westeros\")\n    \n    //GET the new \"title\" from the document\n    title, _, _ := pointer.Get(jsonDocument)\n    fmt.Println(title) //outputs \"Supreme Leader of Westeros\"\n    \n    //DELETE the \"heir\" from the document\n    deletePointer := NewJsonPointer(\"/occupation/heir\")\n    deletePointer.Delete(jsonDocument)\n    \n    b, _ := json.Marshal(jsonDocument)\n    fmt.Println(string(b))\n    //outputs `{\"name\":\"Bobby B\",\"occupation\":{\"title\":\"Supreme Leader of Westeros\",\"years\":15}}`\n```\n\n----------------------------------------\n\nTITLE: Remote Configuration with Etcd in Go\nDESCRIPTION: Shows how to configure Viper to read configuration from an etcd remote store.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"etcd\", \"http://127.0.0.1:4001\",\"/config/hugo.json\")\nviper.SetConfigType(\"json\") // because there is no file extension in a stream of bytes, supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Basic Struct Merging in Go\nDESCRIPTION: Demonstrates basic usage of Mergo to merge two structs, where source values are merged into destination for non-zero fields.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/dario.cat/mergo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n)\n\ntype Foo struct {\n\tA string\n\tB int64\n}\n\nfunc main() {\n\tsrc := Foo{\n\t\tA: \"one\",\n\t\tB: 2,\n\t}\n\tdest := Foo{\n\t\tA: \"two\",\n\t}\n\tmergo.Merge(&dest, src)\n\tfmt.Println(dest)\n\t// Will print\n\t// {two 2}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Handling with Gorilla Mux in Go\nDESCRIPTION: This example demonstrates how to use CORSMethodMiddleware along with a custom OPTIONS handler to set required CORS headers. The middleware automatically sets Access-Control-Allow-Methods header based on the methods defined in the route.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_34\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    r := mux.NewRouter()\n\n    // IMPORTANT: you must specify an OPTIONS method matcher for the middleware to set CORS headers\n    r.HandleFunc(\"/foo\", fooHandler).Methods(http.MethodGet, http.MethodPut, http.MethodPatch, http.MethodOptions)\n    r.Use(mux.CORSMethodMiddleware(r))\n    \n    http.ListenAndServe(\":8080\", r)\n}\n\nfunc fooHandler(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n    if r.Method == http.MethodOptions {\n        return\n    }\n\n    w.Write([]byte(\"foo\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Version Against Constraints in Go\nDESCRIPTION: This snippet shows how to validate a semantic version against a constraint and handle the validation errors. It creates a constraint, parses a version, and then validates the version against the constraint, producing a list of error messages explaining why validation failed.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nc, err := semver.NewConstraint(\"<= 1.2.3, >= 1.4\")\nif err != nil {\n    // Handle constraint not being parseable.\n}\n\nv, err := semver.NewVersion(\"1.3\")\nif err != nil {\n    // Handle version not being parseable.\n}\n\n// Validate a version against a constraint.\na, msgs := c.Validate(v)\n// a is false\nfor _, m := range msgs {\n    fmt.Println(m)\n\n    // Loops over the errors which would read\n    // \"1.3 is greater than 1.2.3\"\n    // \"1.3 is less than 1.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Gorilla Mux\nDESCRIPTION: Complete example showing how to serve static files from a directory using Gorilla Mux and http.FileServer with proper timeouts.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var dir string\n\n    flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n    flag.Parse()\n    r := mux.NewRouter()\n\n    // This will serve files under http://localhost:8000/static/<filename>\n    r.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n    srv := &http.Server{\n        Handler:      r,\n        Addr:         \"127.0.0.1:8000\",\n        // Good practice: enforce timeouts for servers you create!\n        WriteTimeout: 15 * time.Second,\n        ReadTimeout:  15 * time.Second,\n    }\n\n    log.Fatal(srv.ListenAndServe())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Locking with GORP in Go\nDESCRIPTION: Demonstrates GORP's optimistic locking feature which raises an error when attempting to update/delete a row whose version column has changed, preventing data conflicts.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// Version is an auto-incremented number, managed by gorp\n// If this property is present on your struct, update\n// operations will be constrained\n//\n// For example, say we defined Person as:\n\ntype Person struct {\n    Id       int64\n    Created  int64\n    Updated  int64\n    FName    string\n    LName    string\n\n    // automatically used as the Version col\n    // use table.SetVersionCol(\"columnName\") to map a different\n    // struct field as the version field\n    Version  int64\n}\n\np1 := &Person{0, 0, 0, \"Bob\", \"Smith\", 0}\nerr = dbmap.Insert(p1)  // Version is now 1\ncheckErr(err, \"Insert failed\")\n\nobj, err := dbmap.Get(Person{}, p1.Id)\np2 := obj.(*Person)\np2.LName = \"Edwards\"\n_,err = dbmap.Update(p2)  // Version is now 2\ncheckErr(err, \"Update failed\")\n\np1.LName = \"Howard\"\n\n// Raises error because p1.Version == 1, which is out of date\ncount, err := dbmap.Update(p1)\n_, ok := err.(gorp.OptimisticLockError)\nif ok {\n    // should reach this statement\n\n    // in a real app you might reload the row and retry, or\n    // you might propegate this to the user, depending on the desired\n    // semantics\n    fmt.Printf(\"Tried to update row with stale data: %v\\n\", err)\n} else {\n    // some other db error occurred - log or return up the stack\n    fmt.Printf(\"Unknown db err: %v\\n\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Docker Containers Using Go Client for Docker Engine API\nDESCRIPTION: This snippet demonstrates how to use the Docker Go client to list all containers on a system. It initializes a client from environment variables, makes an API call to retrieve container information, and then prints the container ID, image name, and status for each container.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/docker/client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/docker/docker/api/types/container\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tapiClient, err := client.NewClientWithOpts(client.FromEnv)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer apiClient.Close()\n\n\tcontainers, err := apiClient.ContainerList(context.Background(), container.ListOptions{All: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, ctr := range containers {\n\t\tfmt.Printf(\"%s %s (status: %s)\\n\", ctr.ID, ctr.Image, ctr.Status)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Logging Configuration in Logrus\nDESCRIPTION: Demonstrates how to configure Logrus differently based on the environment, setting JSON formatter for production and TextFormatter for other environments.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // do something here to set environment depending on an environment variable\n  // or command-line flag\n  if Environment == \"production\" {\n    log.SetFormatter(&log.JSONFormatter{})\n  } else {\n    // The TextFormatter is default, you don't actually have to do this.\n    log.SetFormatter(&log.TextFormatter{})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Global Logger Access using gofmt (L)\nDESCRIPTION: Use the `gofmt` command with the `-r` (rewrite) flag to replace occurrences of the global logger variable `zap.L` with the function call `zap.L()`. This update is required for compatibility with zap v1.0.0-rc.2 and later, where global loggers are accessed via functions for concurrency safety. The `-w` flag writes the changes directly to the source files in the current directory.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngofmt -r \"zap.L -> zap.L()\" -w .\n```\n\n----------------------------------------\n\nTITLE: Initializing procfs and Reading Stats in Go\nDESCRIPTION: Demonstrates how to initialize the procfs filesystem and read basic statistics. Creates a new filesystem instance pointing to /proc and retrieves system stats.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/prometheus/procfs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfs, err := procfs.NewFS(\"/proc\")\nstats, err := fs.Stat()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Logrus in Go\nDESCRIPTION: This snippet demonstrates how to import, initialize, and configure Logrus with custom settings such as JSON formatting, output redirection, and log level setting.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // Log as JSON instead of the default ASCII formatter.\n  log.SetFormatter(&log.JSONFormatter{})\n\n  // Output to stdout instead of the default stderr\n  // Can be any io.Writer, see below for File example\n  log.SetOutput(os.Stdout)\n\n  // Only log the warning severity or above.\n  log.SetLevel(log.WarnLevel)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker Buildx Environment\nDESCRIPTION: These commands set up the Docker Buildx environment for building multi-architecture images. It includes running QEMU user static, creating and using a custom builder, and inspecting the builder setup.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/docs/build-multiarch-images.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\ndocker buildx rm arm64builder\ndocker buildx create --name arm64builder\ndocker buildx use arm64builder\ndocker buildx inspect --bootstrap\n```\n\n----------------------------------------\n\nTITLE: Replacing `encoding/json.Unmarshal` with `json-iterator/go` in Go\nDESCRIPTION: Shows how to replace the standard Go `encoding/json` library's `Unmarshal` function with the `json-iterator/go` library. This is done by importing `json-iterator/go`, utilizing its `ConfigCompatibleWithStandardLibrary` for drop-in compatibility, and then calling the `Unmarshal` method.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"encoding/json\"\njson.Unmarshal(input, &data)\n```\n\nLANGUAGE: Go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Sorting Semantic Versions in Go\nDESCRIPTION: Example demonstrating how to parse multiple version strings into Version objects and sort them using Go's standard sort package. This creates a sorted collection of semantic versions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nraw := []string{\"1.2.3\", \"1.0\", \"1.3\", \"2\", \"0.4.2\",}\nvs := make([]*semver.Version, len(raw))\nfor i, r := range raw {\n    v, err := semver.NewVersion(r)\n    if err != nil {\n        t.Errorf(\"Error parsing version: %s\", err)\n    }\n\n    vs[i] = v\n}\n\nsort.Sort(semver.Collection(vs))\n```\n\n----------------------------------------\n\nTITLE: Binding Variables in CEL\nDESCRIPTION: Examples of using cel.bind to create local variable bindings in expressions. Shows simple and nested binding patterns.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_0\n\nLANGUAGE: cel\nCODE:\n```\ncel.bind(a, 'hello',\n cel.bind(b, 'world', a + b + b + a)) // \"helloworldworldhello\"\n\n// Avoid a list allocation within the exists comprehension.\ncel.bind(valid_values, [a, b, c],\n [d, e, f].exists(elem, elem in valid_values))\n```\n\n----------------------------------------\n\nTITLE: Stdlib vs Conc Panic Handling Comparison\nDESCRIPTION: Comparison between standard library and conc package approaches for handling panics in goroutines. Shows how conc simplifies error handling and provides better stack traces.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype caughtPanicError struct {\n    val   any\n    stack []byte\n}\n\nfunc (e *caughtPanicError) Error() string {\n    return fmt.Sprintf(\n        \"panic: %q\\n%s\",\n        e.val,\n        string(e.stack)\n    )\n}\n\nfunc main() {\n    done := make(chan error)\n    go func() {\n        defer func() {\n            if v := recover(); v != nil {\n                done <- &caughtPanicError{\n                    val: v,\n                    stack: debug.Stack()\n                }\n            } else {\n                done <- nil\n            }\n        }()\n        doSomethingThatMightPanic()\n    }()\n    err := <-done\n    if err != nil {\n        panic(err)\n    }\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var wg conc.WaitGroup\n    wg.Go(doSomethingThatMightPanic)\n    // panics with a nice stacktrace\n    wg.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom SQLite Driver with Extensions in Go\nDESCRIPTION: This Go snippet demonstrates how to register a custom SQLite3 driver to enable specific extensions like 'mod_spatialite'. It uses `sql.Register` to create a new driver name ('sqlite3-custom') associated with a `sqlite.SQLiteDriver` configured with the desired extensions. Subsequently, `sql.Open` is used with the custom driver name to establish a connection to the database file, allowing the use of the enabled extensions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n```go\nimport (\n\t\"database/sql\"\n\n\t// use whatever database/sql driver you wish\n\tsqlite \"github.com/mattn/go-sqlite3\"\n)\n\nfunc customDriver() (*sql.DB, error) {\n\n\t// create custom driver with extensions defined\n\tsql.Register(\"sqlite3-custom\", &sqlite.SQLiteDriver{\n\t\tExtensions: []string{\n\t\t\t\"mod_spatialite\",\n\t\t},\n\t})\n\n\t// now you can then connect using the 'sqlite3-custom' driver instead of 'sqlite3'\n\treturn sql.Open(\"sqlite3-custom\", \"/tmp/post_db.bin\")\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Extracting a Configuration Sub-tree with Viper in Go\nDESCRIPTION: This Go snippet demonstrates how to extract a specific portion of the configuration into a new, isolated Viper instance using `viper.Sub()`. It retrieves the configuration under the key `\"cache.cache1\"` and assigns it to `cache1Config`. The code includes a check for `nil` because `Sub` returns `nil` if the key is not found. This allows passing isolated configurations to modules or functions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\ncache1Config := viper.Sub(\"cache.cache1\")\nif cache1Config == nil { // Sub returns nil if the key cannot be found\n\tpanic(\"cache configuration not found\")\n}\n\ncache1 := NewCache(cache1Config)\n```\n\n----------------------------------------\n\nTITLE: Importing pflag as a Replacement for Go's flag Package\nDESCRIPTION: This snippet shows how to import pflag as a drop-in replacement for Go's native flag package. By importing pflag under the name \"flag\", existing code should continue to function without changes.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Using JsonPath Library in Go\nDESCRIPTION: This Go code snippet illustrates the usage of the JsonPath library for parsing and querying JSON data. It shows how to unmarshal JSON into a Go data structure, perform a simple lookup using JsonPathLookup, and compile complex path expressions for repeated queries via jsonpath.Compile. Required dependencies are github.com/oliveagle/jsonpath and encoding/json. Inputs are a JSON string and JsonPath expressions; outputs are the matched JSON values and potential errors. The example assumes the presence of a variable named 'data' containing the raw JSON text.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/oliveagle/jsonpath/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/oliveagle/jsonpath\"\n    \"encoding/json\"\n)\n\nvar json_data interface{}\njson.Unmarshal([]byte(data), &json_data)\n\nres, err := jsonpath.JsonPathLookup(json_data, \"$.expensive\")\n\n//or reuse lookup pattern\npat, _ := jsonpath.Compile(`$.store.book[?(@.price < $.expensive)].price`)\nres, err := pat.Lookup(json_data)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Multiple Viper Instances in Go\nDESCRIPTION: This Go snippet demonstrates how to create and manage multiple, independent Viper instances within the same application. It uses `viper.New()` to create two separate instances, `x` and `y`. Each instance can then be configured independently, for example, by setting different default values for the same key (`ContentDir`), allowing for separate configuration domains within the application.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\nx := viper.New()\ny := viper.New()\n\nx.SetDefault(\"ContentDir\", \"content\")\ny.SetDefault(\"ContentDir\", \"foobar\")\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Running Zap Tests and Linters\nDESCRIPTION: Commands to run the test suite and linting tools to ensure code quality before submitting changes.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Selecting Single Values with GORP in Go\nDESCRIPTION: Shows GORP's convenience methods for selecting a single string or integer value from the database.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// select single int64 from db (use $1 instead of ? for postgresql)\ni64, err := dbmap.SelectInt(\"select count(*) from foo where blah=?\", blahVal)\n\n// select single string from db:\ns, err := dbmap.SelectStr(\"select name from foo where blah=?\", blahVal)\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Device Statistics in Go\nDESCRIPTION: Shows how to initialize both proc and sys filesystems to access block device information. Creates a new filesystem instance and retrieves disk statistics.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/prometheus/procfs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    fs, err := blockdevice.NewFS(\"/proc\", \"/sys\")\n    stats, err := fs.ProcDiskstats()\n```\n\n----------------------------------------\n\nTITLE: Conditional Query Building with Squirrel in Go\nDESCRIPTION: Shows how to add a WHERE clause conditionally based on a variable's value.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/squirrel/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif len(q) > 0 {\n    users = users.Where(\"name LIKE ?\", fmt.Sprint(\"%\", q, \"%\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Various Types to String in Go using Cast\nDESCRIPTION: This snippet demonstrates the usage of the ToString function from the Cast library to convert different data types to strings. It shows conversions from string, integer, float, byte slice, nil, and interface types.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/cast/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncast.ToString(\"mayonegg\")         // \"mayonegg\"\ncast.ToString(8)                  // \"8\"\ncast.ToString(8.31)               // \"8.31\"\ncast.ToString([]byte(\"one time\")) // \"one time\"\ncast.ToString(nil)                // \"\"\n\nvar foo interface{} = \"one more time\"\ncast.ToString(foo)                // \"one more time\"\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from JSON String in Go\nDESCRIPTION: Shows how to create a loader for a JSON schema directly from a JSON string. This is useful for inline schema definitions without needing external files.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nloader := gojsonschema.NewStringLoader(`{\"type\": \"string\"}`)\n```\n\n----------------------------------------\n\nTITLE: Sending Metrics to Graphite in Go\nDESCRIPTION: Shows how to periodically emit metrics to Graphite using the Graphite client. This requires importing the go-metrics-graphite package and specifying connection details.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/cyberdelia/go-metrics-graphite\"\n\naddr, _ := net.ResolveTCPAddr(\"tcp\", \"127.0.0.1:2003\")\ngo graphite.Graphite(metrics.DefaultRegistry, 10e9, \"metrics\", addr)\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding/Decoding in CEL\nDESCRIPTION: Examples of base64 encoding and decoding operations using base64.encode and base64.decode functions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_1\n\nLANGUAGE: cel\nCODE:\n```\nbase64.decode('aGVsbG8=')  // return b'hello'\nbase64.decode('aGVsbG8')   // error\n\nbase64.encode(b'hello') // return 'aGVsbG8='\n```\n\n----------------------------------------\n\nTITLE: Using Core Logger for High-Performance Logging in Go\nDESCRIPTION: Shows how to use Zap's core Logger for maximum performance and type safety. This implementation is faster than SugaredLogger and allocates less memory, but only supports structured logging.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync()\nlogger.Info(\"failed to fetch URL\",\n  // Structured context as strongly typed Field values.\n  zap.String(\"url\", url),\n  zap.Int(\"attempt\", 3),\n  zap.Duration(\"backoff\", time.Second),\n)\n```\n\n----------------------------------------\n\nTITLE: Processing Stream Elements with Static Goroutine Pool in Go\nDESCRIPTION: Shows how to process each element of a stream using a static pool of goroutines. The 'conc' version uses a pool with a maximum number of goroutines, simplifying the implementation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc process(stream chan int) {\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            for elem := range stream {\n                handle(elem)\n            }\n        }()\n    }\n    wg.Wait()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(stream chan int) {\n    p := pool.New().WithMaxGoroutines(10)\n    for elem := range stream {\n        elem := elem\n        p.Go(func() {\n            handle(elem)\n        })\n    }\n    p.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Afero MemMapFs for Testing in Go\nDESCRIPTION: This snippet demonstrates how to use Afero's MemMapFs for testing, creating a blank slate memory backend for each test.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc TestExist(t *testing.T) {\n\tappFS := afero.NewMemMapFs()\n\t// create test files and directories\n\tappFS.MkdirAll(\"src/a\", 0755)\n\tafero.WriteFile(appFS, \"src/a/b\", []byte(\"file b\"), 0644)\n\tafero.WriteFile(appFS, \"src/c\", []byte(\"file c\"), 0644)\n\tname := \"src/c\"\n\t_, err := appFS.Stat(name)\n\tif os.IsNotExist(err) {\n\t\tt.Errorf(\"file \\\"%s\\\" does not exist.\\n\", name)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Registry with Default Config\nDESCRIPTION: Command to start the registry with the example configuration file, showing the startup logs.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ $GOPATH/bin/registry serve $GOPATH/src/github.com/docker/distribution/cmd/registry/config-example.yml\nINFO[0000] endpoint local-5003 disabled, skipping        app.id=34bbec38-a91a-494a-9a3f-b72f9010081f version=v2.0.0-alpha.1+unknown\nINFO[0000] endpoint local-8083 disabled, skipping        app.id=34bbec38-a91a-494a-9a3f-b72f9010081f version=v2.0.0-alpha.1+unknown\nINFO[0000] listening on :5000                            app.id=34bbec38-a91a-494a-9a3f-b72f9010081f version=v2.0.0-alpha.1+unknown\nINFO[0000] debug server listening localhost:5001\n```\n\n----------------------------------------\n\nTITLE: Building a List of Errors in Go using go-multierror\nDESCRIPTION: Demonstrates how to use the Append function to create a list of errors. This approach works with nil values, multierror.Error types, or any other error type.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Focused Test Example in Golang using Ginkgo\nDESCRIPTION: Demonstrates focused test behavior in Ginkgo where FDescribe and FIt are used to run specific tests while skipping others. In this example, only test B will run while test A is skipped.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\nFDescribe(\"Some describe\", func() {\n    It(\"A\", func() {})\n\n    FIt(\"B\", func() {})\n})\n```\n\n----------------------------------------\n\nTITLE: Building Single-Architecture Docker Images for Local Use\nDESCRIPTION: This snippet shows how to build Docker images for a single architecture (either arm64 or amd64) using Docker Buildx. These commands are useful for local development and testing, as they use the --load flag to make the images available locally.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/docs/build-multiarch-images.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build --platform=\"linux/arm64\" . -t \"ks-apiserver:arm64\" -f build-multiarch/Dockerfile --target=ks-apiserver --load\ndocker buildx build --platform=\"linux/amd64\" . -t \"ks-apiserver:amd64\" -f build-multiarch/Dockerfile --target=ks-apiserver --load\n```\n\n----------------------------------------\n\nTITLE: Thread Safety Implementation in Logger\nDESCRIPTION: Guidelines for when mutex locking can be safely disabled in Logger using SetNoLock(). Key scenarios include having thread-safe hooks or when writing to logger.Out is inherently thread-safe through locks or O_APPEND flag with writes under 4KB.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nlogger.SetNoLock()\n```\n\nLANGUAGE: text\nCODE:\n```\nO_APPEND\n```\n\n----------------------------------------\n\nTITLE: Registering Fatal Handlers with Logrus\nDESCRIPTION: Shows how to register handlers that will be called when any fatal level message is logged, allowing for graceful shutdown before the program exits.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nhandler := func() {\n  // gracefully shutdown something...\n}\nlogrus.RegisterExitHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Logging Middleware with Gorilla Mux in Go\nDESCRIPTION: Implements a basic logging middleware function (`loggingMiddleware`) conforming to the `MiddlewareFunc` type. It returns an `http.HandlerFunc` closure that logs the request URI using `log.Println` and then explicitly calls `next.ServeHTTP(w, r)` to pass the request to the next handler in the chain. Requires `log` and `net/http` packages.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_29\n\nLANGUAGE: go\nCODE:\n```\nfunc loggingMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // Do stuff here\n        log.Println(r.RequestURI)\n        // Call the next handler, which can be another middleware in the chain, or the final handler.\n        next.ServeHTTP(w, r)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Request Headers with Regex using Gorilla Mux in Go\nDESCRIPTION: Illustrates using the `HeadersRegexp()` method on a route definition to match incoming requests based on the value of a specific header (e.g., `Content-Type`) matching a provided regular expression. In this case, it matches Content-Types of `application/json` or `application/text`.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nr.HeadersRegexp(\"Content-Type\", \"application/(text|json)\")\n```\n\n----------------------------------------\n\nTITLE: Processing Ordered Stream Concurrently in Go\nDESCRIPTION: Shows how to process an ordered stream concurrently while maintaining order. The 'conc' version uses the stream package to simplify the implementation and handle ordering automatically.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc mapStream(\n    in chan int,\n    out chan int,\n    f func(int) int,\n) {\n    tasks := make(chan func())\n    taskResults := make(chan chan int)\n\n    // Worker goroutines\n    var workerWg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        workerWg.Add(1)\n        go func() {\n            defer workerWg.Done()\n            for task := range tasks {\n                task()\n            }\n        }()\n    }\n\n    // Ordered reader goroutines\n    var readerWg sync.WaitGroup\n    readerWg.Add(1)\n    go func() {\n        defer readerWg.Done()\n        for result := range taskResults {\n            item := <-result\n            out <- item\n        }\n    }()\n\n    // Feed the workers with tasks\n    for elem := range in {\n        resultCh := make(chan int, 1)\n        taskResults <- resultCh\n        tasks <- func() {\n            resultCh <- f(elem)\n        }\n    }\n\n    // We've exhausted input.\n    // Wait for everything to finish\n    close(tasks)\n    workerWg.Wait()\n    close(taskResults)\n    readerWg.Wait()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc mapStream(\n    in chan int,\n    out chan int,\n    f func(int) int,\n) {\n    s := stream.New().WithMaxGoroutines(10)\n    for elem := range in {\n        elem := elem\n        s.Go(func() stream.Callback {\n            res := f(elem)\n            return func() { out <- res }\n        })\n    }\n    s.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying JSON Patches in Go\nDESCRIPTION: Example showing how to create a JSON patch from operations encoded in JSON format and apply it to a document. This demonstrates replacing and removing fields using the RFC6902 format.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/evanphx/json-patch/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\tpatchJSON := []byte(`[\n\t\t{\"op\": \"replace\", \"path\": \"/name\", \"value\": \"Jane\"},\n\t\t{\"op\": \"remove\", \"path\": \"/height\"}\n\t]`)\n\n\tpatch, err := jsonpatch.DecodePatch(patchJSON)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmodified, err := patch.Apply(original)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"Original document: %s\\n\", original)\n\tfmt.Printf(\"Modified document: %s\\n\", modified)\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration from io.Reader\nDESCRIPTION: Example of reading configuration from a byte buffer containing YAML data.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nviper.SetConfigType(\"yaml\") // or viper.SetConfigType(\"YAML\")\n\n// any approach to require this configuration into your program.\nvar yamlExample = []byte(`\nHacker: true\nname: steve\nhobbies:\n- skateboarding\n- snowboarding\n- go\nclothing:\n  jacket: leather\n  trousers: denim\nage: 35\neyes : brown\nbeard: true\n`)\n\nviper.ReadConfig(bytes.NewBuffer(yamlExample))\n\nviper.Get(\"name\") // this would be \"steve\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Custom Format Checker (Go)\nDESCRIPTION: Illustrates how to create a custom format checker for role validation and add it to gojsonschema. This allows for custom string format validation in JSON schemas.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// Define the format checker\ntype RoleFormatChecker struct {}\n\n// Ensure it meets the gojsonschema.FormatChecker interface\nfunc (f RoleFormatChecker) IsFormat(input interface{}) bool {\n\n    asString, ok := input.(string)\n    if ok == false {\n        return false\n    }\n\n    return strings.HasPrefix(\"ROLE_\", asString)\n}\n\n// Add it to the library\ngojsonschema.FormatCheckers.Add(\"role\", RoleFormatChecker{})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flags with pflag\nDESCRIPTION: This example demonstrates how to create custom flags that satisfy the Value interface and couple them to flag parsing using pflag.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Using Context for Nested Traces in Go\nDESCRIPTION: Shows how to use context.Context to manage nested traces. This approach is safe even when there is no parent trace in the context.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/utils/trace/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc doSomething(ctx context.Context) {\n    opTrace := trace.FromContext(ctx).Nest(\"operation\") // create a trace, possibly nested\n    ctx = trace.ContextWithTrace(ctx, opTrace) // make this trace the parent trace of the context\n    defer opTrace.LogIfLong(50 * time.Millisecond)\n    \n    doSomethingElse(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Slim-Sprig FuncMap in Go Templates\nDESCRIPTION: Demonstrates how to import and initialize Slim-Sprig's FuncMap with Go templates. The FuncMap must be set before loading the templates.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-task/slim-sprig/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"html/template\"\n\n  \"github.com/go-task/slim-sprig\"\n)\n\n// This example illustrates that the FuncMap *must* be set before the\n// templates themselves are loaded.\ntpl := template.Must(\n  template.New(\"base\").Funcs(sprig.FuncMap()).ParseGlob(\"*.html\")\n)\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC Package in Go\nDESCRIPTION: This code demonstrates how to import the core gRPC package into a Go project, allowing access to all the APIs provided by gRPC-Go. No external setup is required besides having Go installed and internet connectivity to fetch the package. This import line is necessary for instantiating and using gRPC servers or clients in Go. Expected output is that required gRPC-Go modules will be fetched on build or run. There are no parameters, but users behind certain firewalls may need additional configuration.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/google.golang.org/grpc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Handling Error Stacktraces in Go\nDESCRIPTION: Example of handling errors from the go-errors/errors package in a main function. Shows how to check if an error matches a specific error using errors.Is and how to print the error stack trace.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-errors/errors/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"crashy\"\n    \"fmt\"\n    \"github.com/go-errors/errors\"\n)\n\nfunc main() {\n    err := crashy.Crash()\n    if err != nil {\n        if errors.Is(err, crashy.Crashed) {\n            fmt.Println(err.(*errors.Error).ErrorStack())\n        } else {\n            panic(err)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Named Routes with Gorilla Mux in Go\nDESCRIPTION: Shows how to retrieve a previously named route ('article') using `r.Get(\"article\")` and then generate its corresponding URL. The `URL()` method is called with key-value pairs matching the route's variables ('category', 'id') to construct the final URL. The result is a `*url.URL` object.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nurl, err := r.Get(\"article\").URL(\"category\", \"technology\", \"id\", \"42\")\n```\n\n----------------------------------------\n\nTITLE: Compression Performance Benchmark Results (Text)\nDESCRIPTION: Tabular data showing compression performance comparison between `zskp` (this library), `zstd` (cgo), and `gzip` (`gzstd`/`gzkp`) across different datasets (Silesia Corpus, GOB stream, enwik9, JSON, VM Image, CSV). Metrics include input/output size, compression time (milliseconds), and speed (MB/s) for various compression levels.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSilesia Corpus:\nhttp://sun.aei.polsl.pl/~sdeor/corpus/silesia.zip\n\nThis package:\nfile    out     level   insize      outsize     millis  mb/s\nsilesia.tar zskp    1   211947520   73821326    634     318.47\nsilesia.tar zskp    2   211947520   67655404    1508    133.96\nsilesia.tar zskp    3   211947520   64746933    3000    67.37\nsilesia.tar zskp    4   211947520   60073508    16926   11.94\n\ncgo zstd:\nsilesia.tar zstd    1   211947520   73605392    543     371.56\nsilesia.tar zstd    3   211947520   66793289    864     233.68\nsilesia.tar zstd    6   211947520   62916450    1913    105.66\nsilesia.tar zstd    9   211947520   60212393    5063    39.92\n\ngzip, stdlib/this package:\nsilesia.tar gzstd   1   211947520   80007735    1498    134.87\nsilesia.tar gzkp    1   211947520   80088272    1009    200.31\n\nGOB stream of binary data. Highly compressible.\nhttps://files.klauspost.com/compress/gob-stream.7z\n\nfile        out     level   insize  outsize     millis  mb/s\ngob-stream  zskp    1   1911399616  233948096   3230    564.34\ngob-stream  zskp    2   1911399616  203997694   4997    364.73\ngob-stream  zskp    3   1911399616  173526523   13435   135.68\ngob-stream  zskp    4   1911399616  162195235   47559   38.33\n\ngob-stream  zstd    1   1911399616  249810424   2637    691.26\ngob-stream  zstd    3   1911399616  208192146   3490    522.31\ngob-stream  zstd    6   1911399616  193632038   6687    272.56\ngob-stream  zstd    9   1911399616  177620386   16175   112.70\n\ngob-stream  gzstd   1   1911399616  357382013   9046    201.49\ngob-stream  gzkp    1   1911399616  359136669   4885    373.08\n\nThe test data for the Large Text Compression Benchmark is the first\n10^9 bytes of the English Wikipedia dump on Mar. 3, 2006.\nhttp://mattmahoney.net/dc/textdata.html\n\nfile    out level   insize      outsize     millis  mb/s\nenwik9  zskp    1   1000000000  343833605   3687    258.64\nenwik9  zskp    2   1000000000  317001237   7672    124.29\nenwik9  zskp    3   1000000000  291915823   15923   59.89\nenwik9  zskp    4   1000000000  261710291   77697   12.27\n\nenwik9  zstd    1   1000000000  358072021   3110    306.65\nenwik9  zstd    3   1000000000  313734672   4784    199.35\nenwik9  zstd    6   1000000000  295138875   10290   92.68\nenwik9  zstd    9   1000000000  278348700   28549   33.40\n\nenwik9  gzstd   1   1000000000  382578136   8608    110.78\nenwik9  gzkp    1   1000000000  382781160   5628    169.45\n\nHighly compressible JSON file.\nhttps://files.klauspost.com/compress/github-june-2days-2019.json.zst\n\nfile                        out level   insize      outsize     millis  mb/s\ngithub-june-2days-2019.json zskp    1   6273951764  697439532   9789    611.17\ngithub-june-2days-2019.json zskp    2   6273951764  610876538   18553   322.49\ngithub-june-2days-2019.json zskp    3   6273951764  517662858   44186   135.41\ngithub-june-2days-2019.json zskp    4   6273951764  464617114   165373  36.18\n\ngithub-june-2days-2019.json zstd    1   6273951764  766284037   8450    708.00\ngithub-june-2days-2019.json zstd    3   6273951764  661889476   10927   547.57\ngithub-june-2days-2019.json zstd    6   6273951764  642756859   22996   260.18\ngithub-june-2days-2019.json zstd    9   6273951764  601974523   52413   114.16\n\ngithub-june-2days-2019.json gzstd   1   6273951764  1164397768  26793   223.32\ngithub-june-2days-2019.json gzkp    1   6273951764  1120631856  17693   338.16\n\nVM Image, Linux mint with a few installed applications:\nhttps://files.klauspost.com/compress/rawstudio-mint14.7z\n\nfile                    out level   insize      outsize     millis  mb/s\nrawstudio-mint14.tar    zskp    1   8558382592  3718400221  18206   448.29\nrawstudio-mint14.tar    zskp    2   8558382592  3326118337  37074   220.15\nrawstudio-mint14.tar    zskp    3   8558382592  3163842361  87306   93.49\nrawstudio-mint14.tar    zskp    4   8558382592  2970480650  783862  10.41\n\nrawstudio-mint14.tar    zstd    1   8558382592  3609250104  17136   476.27\nrawstudio-mint14.tar    zstd    3   8558382592  3341679997  29262   278.92\nrawstudio-mint14.tar    zstd    6   8558382592  3235846406  77904   104.77\nrawstudio-mint14.tar    zstd    9   8558382592  3160778861  140946  57.91\n\nrawstudio-mint14.tar    gzstd   1   8558382592  3926234992  51345   158.96\nrawstudio-mint14.tar    gzkp    1   8558382592  3960117298  36722   222.26\n\nCSV data:\nhttps://files.klauspost.com/compress/nyc-taxi-data-10M.csv.zst\n\nfile                    out level   insize      outsize     millis  mb/s\nnyc-taxi-data-10M.csv   zskp    1   3325605752  641319332   9462    335.17\nnyc-taxi-data-10M.csv   zskp    2   3325605752  588976126   17570   180.50\nnyc-taxi-data-10M.csv   zskp    3   3325605752  529329260   32432   97.79\nnyc-taxi-data-10M.csv   zskp    4   3325605752  474949772   138025  22.98\n\nnyc-taxi-data-10M.csv   zstd    1   3325605752  687399637   8233    385.18\nnyc-taxi-data-10M.csv   zstd    3   3325605752  598514411   10065   315.07\nnyc-taxi-data-10M.csv   zstd    6   3325605752  570522953   20038   158.27\nnyc-taxi-data-10M.csv   zstd    9   3325605752  517554797   64565   49.12\n\nnyc-taxi-data-10M.csv   gzstd   1   3325605752  928654908   21270   149.11\nnyc-taxi-data-10M.csv   gzkp    1   3325605752  922273214   13929   227.68\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Badge\nDESCRIPTION: Markdown link with badge for the OpenTelemetry OTLP Trace gRPC Exporter Go package documentation on pkg.go.dev\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc)\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Loader for Specific Draft in Go\nDESCRIPTION: Shows how to configure the SchemaLoader to use a specific JSON Schema draft version and disable auto-detection. This provides more control over schema interpretation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nsl := gojsonschema.NewSchemaLoader()\nsl.Draft = gojsonschema.Draft7\nsl.AutoDetect = false\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Table with UiTable in Go\nDESCRIPTION: Example of creating a basic table with UiTable. This snippet demonstrates initializing a table, setting maximum column width, adding headers, and populating data rows from a collection of 'hackers'.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gosuri/uitable/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntable := uitable.New()\ntable.MaxColWidth = 50\n\ntable.AddRow(\"NAME\", \"BIRTHDAY\", \"BIO\")\nfor _, hacker := range hackers {\n  table.AddRow(hacker.Name, hacker.Birthday, hacker.Bio)\n}\nfmt.Println(table)\n```\n\n----------------------------------------\n\nTITLE: Thread-safe Metric Registration in Go\nDESCRIPTION: Shows how to use GetOrRegister for thread-safe metric registration. This pattern is safer than using Register directly in concurrent environments.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nt := metrics.GetOrRegisterTimer(\"account.create.latency\", nil)\nt.Time(func() {})\nt.Update(47)\n```\n\n----------------------------------------\n\nTITLE: Using TagSet and TagOptions for CBOR in Go\nDESCRIPTION: Demonstrates how to create a TagSet, register tags, and use them with custom encoding and decoding modes. This example shows handling of COSE_Sign1 tag (18) with a custom struct type.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Use signedCWT struct defined in \"Decoding CWT\" example.\n\n// Create TagSet (safe for concurrency).\ntags := cbor.NewTagSet()\n// Register tag COSE_Sign1 18 with signedCWT type.\ntags.Add(\t\n\tcbor.TagOptions{EncTag: cbor.EncTagRequired, DecTag: cbor.DecTagRequired}, \n\treflect.TypeOf(signedCWT{}), \n\t18)\n\n// Create DecMode with immutable tags.\ndm, _ := cbor.DecOptions{}.DecModeWithTags(tags)\n\n// Unmarshal to signedCWT with tag support.\nvar v signedCWT\nif err := dm.Unmarshal(data, &v); err != nil {\n\treturn err\n}\n\n// Create EncMode with immutable tags.\nem, _ := cbor.EncOptions{}.EncModeWithTags(tags)\n\n// Marshal signedCWT with tag number.\nif data, err := cbor.Marshal(v); err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Server with Gzip Compression in Go\nDESCRIPTION: Complete example showing how to wrap an HTTP handler with gzip compression. The code creates a basic HTTP server that returns \"Hello, World\" with gzip compression for clients that support it.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/NYTimes/gziphandler/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"github.com/NYTimes/gziphandler\"\n)\n\nfunc main() {\n\twithoutGz := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tio.WriteString(w, \"Hello, World\")\n\t})\n\n\twithGz := gziphandler.GzipHandler(withoutGz)\n\n\thttp.Handle(\"/\", withGz)\n\thttp.ListenAndServe(\"0.0.0.0:8000\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron with Custom Parser in Go\nDESCRIPTION: Examples of creating a new Cron instance with custom parsers to support different cron spec formats, including optional seconds field.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Seconds field, required\ncron.New(cron.WithSeconds())\n\n// Seconds field, optional\ncron.New(\n    cron.WithParser(\n        cron.SecondOptional | cron.Minute | cron.Hour | cron.Dom | cron.Month | cron.Dow | cron.Descriptor))\n```\n\n----------------------------------------\n\nTITLE: Host and Domain-Based Route Matching in Gorilla Mux\nDESCRIPTION: Shows how to restrict routes to specific domains or subdomains, including the use of variables in host patterns for dynamic matching.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\n// Only matches if domain is \"www.example.com\".\nr.Host(\"www.example.com\")\n// Matches a dynamic subdomain.\nr.Host(\"{subdomain:[a-z]+}.example.com\")\n```\n\n----------------------------------------\n\nTITLE: Compressing Byte Buffers with Encoder Caching in Go\nDESCRIPTION: This snippet illustrates how to use a cached zstd.Encoder instance to compress byte slices. By creating the encoder once with zstd.NewWriter(nil), repeated use of EncodeAll avoids repeated allocations and improves performance. This pattern is ideal for block-based or small buffer compression. Dependencies are the github.com/klauspost/compress/zstd package. The Compress function takes a byte slice as input and returns a compressed byte slice. When provided with a destination buffer of sufficient capacity, unnecessary allocations are eliminated. Take care to reuse the encoder instance, especially for multiple short encodings.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a writer that caches compressors.\n// For this operation type we supply a nil Reader.\nvar encoder, _ = zstd.NewWriter(nil)\n\n// Compress a buffer. \n// If you have a destination buffer, the allocation in the call can also be eliminated.\nfunc Compress(src []byte) []byte {\n    return encoder.EncodeAll(src, make([]byte, 0, len(src)))\n} \n```\n\n----------------------------------------\n\nTITLE: Using JSON-Patch CLI for Comparing JSON Documents\nDESCRIPTION: Example of using the json-patch command-line tool to apply multiple JSON patch documents to a JSON document from stdin.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/evanphx/json-patch/cmd/json-patch\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat document.json | json-patch -p patch.1.json -p patch.2.json\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OpenAPI Type Definition in Go using OpenAPIDefinition\nDESCRIPTION: Demonstrates how to override OpenAPI definition for a custom Time type by implementing OpenAPIDefinition() function. The implementation specifies the type as a string with date-time format using the k8s.io/kube-openapi/pkg/common package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/kube-openapi/pkg/generators/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport openapi \"k8s.io/kube-openapi/pkg/common\"\n\n// ...\n\ntype Time struct {\n\ttime.Time\n}\n\nfunc (_ Time) OpenAPIDefinition() openapi.OpenAPIDefinition {\n\treturn openapi.OpenAPIDefinition{\n\t\tSchema: spec.Schema{\n\t\t\tSchemaProps: spec.SchemaProps{\n\t\t\t\tType:   []string{\"string\"},\n\t\t\t\tFormat: \"date-time\",\n\t\t\t},\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Variables from Request in Gorilla Mux\nDESCRIPTION: Demonstrates how to extract URL variables from a request using the mux.Vars() function, which returns a map of variable names to their values.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc ArticlesCategoryHandler(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    w.WriteHeader(http.StatusOK)\n    fmt.Fprintf(w, \"Category: %v\\n\", vars[\"category\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Metrics via HTTP Debug Endpoint in Go\nDESCRIPTION: Shows how to expose all metrics through an HTTP endpoint at /debug/metrics using the exp package. This uses the same mechanism as the standard expvar package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/rcrowley/go-metrics/exp\"\n\nexp.Exp(metrics.DefaultRegistry)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Configuration for Nested Key Access\nDESCRIPTION: This JSON snippet provides example configuration data used to demonstrate accessing nested keys in Viper. It defines a structure with nested objects like `host` and `datastore`, which contains further nested objects `metric` and `warehouse`.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"host\": {\n        \"address\": \"localhost\",\n        \"port\": 5799\n    },\n    \"datastore\": {\n        \"metric\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 3099\n        },\n        \"warehouse\": {\n            \"host\": \"198.0.0.1\",\n            \"port\": 2112\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Registries with Shared Credential Helper (JSON)\nDESCRIPTION: This config.json snippet specifies the 'credHelpers' mapping for multiple container registries, assigning the same Docker credential helper name ('gcr') to different registry domains. Docker and compatible tools use the 'docker-credential-gcr' binary to fetch credentials for either gcr.io or eu.gcr.io. Inputs are the registry domain keys and their helper mappings.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"credHelpers\": {\n\t\t\"gcr.io\": \"gcr\",\n\t\t\"eu.gcr.io\": \"gcr\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Logr Logger in a Go Main Function\nDESCRIPTION: Example of how to initialize a logger in a Go application's main function using a specific implementation. This demonstrates the typical pattern of creating a root logger and then passing it to other components.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // ... other setup code ...\n\n    // Create the \"root\" logger.  We have chosen the \"logimpl\" implementation,\n    // which takes some initial parameters and returns a logr.Logger.\n    logger := logimpl.New(param1, param2)\n\n    // ... other setup code ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrapper Interface for Custom Types in Go\nDESCRIPTION: Shows how to implement the Wrapper interface for custom error types to make them compatible with errwrap functions. It includes an example of a custom AppError type and demonstrates its usage with errwrap.ContainsType.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/hashicorp/errwrap/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AppError {\n  Code ErrorCode\n  Err  error\n}\n\nfunc (e *AppError) WrappedErrors() []error {\n  return []error{e.Err}\n}\n\n// Usage example\nerr := &AppError{Err: fmt.Errorf(\"an error\")}\nif errwrap.ContainsType(err, fmt.Errorf(\"\")) {\n\t// This will work!\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TOML Decoding in Go\nDESCRIPTION: Demonstrates how to decode TOML data into a Go struct using the toml.Decode function with a custom Config struct\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/BurntSushi/toml/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\tAge        int\n\tCats       []string\n\tPi         float64\n\tPerfection []int\n\tDOB        time.Time\n}\n\nvar conf Config\n_, err := toml.Decode(tomlData, &conf)\n```\n\n----------------------------------------\n\nTITLE: Filtering and Counting Slice Elements in Go\nDESCRIPTION: Examples of using Filter and Count functions with a conditional iterator to process slice elements. Filter creates a new slice with elements that match the condition, while Count returns the number of matching elements.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nvar fn govalidator.ConditionIterator = func(value interface{}, index int) bool {\n\treturn value.(int)%2 == 0\n}\n_ = govalidator.Filter(data, fn) // result = []interface{}{2, 4, 6, 8, 10}\n_ = govalidator.Count(data, fn) // result = 5\n```\n\n----------------------------------------\n\nTITLE: Performing Validation with Schema and Document Loaders in Go\nDESCRIPTION: Shows the basic validation function that takes both schema and document loaders and returns a validation result object and potential errors.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nresult, err := gojsonschema.Validate(schemaLoader, documentLoader)\n```\n\n----------------------------------------\n\nTITLE: Using Afero MemMapFs Backend in Go\nDESCRIPTION: This snippet demonstrates how to use Afero's MemMapFs backend, which provides a fully atomic memory-backed filesystem.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmm := afero.NewMemMapFs()\nmm.MkdirAll(\"src/a\", 0755)\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration Example in Go\nDESCRIPTION: Demonstrates how to set environment prefix and bind environment variables using Viper. Shows the relationship between environment variable names and configuration keys.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nSetEnvPrefix(\"spf\") // will be uppercased automatically\nBindEnv(\"id\")\n\nos.Setenv(\"SPF_ID\", \"13\") // typically done outside of the app\n\nid := Get(\"id\") // 13\n```\n\n----------------------------------------\n\nTITLE: Initializing go-gitignore from an io.Reader in Go\nDESCRIPTION: In this example, go-gitignore is initialized using an io.Reader instance and a base directory. It's designed for scenarios where the gitignore patterns are sourced dynamically (e.g., from in-memory data or alternative storage). Requires go-gitignore and a valid io.Reader. Inputs: base directory and reader. Output: a GitIgnore object capable of matching paths.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/monochromegane/go-gitignore/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ngitignore, _ := gitignore.NewGitIgnoreFromReader(base, reader)\n```\n\n----------------------------------------\n\nTITLE: Error Cause Type Switch Example\nDESCRIPTION: Shows how to use errors.Cause with a type switch to handle specific error types differently.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nswitch err := errors.Cause(err).(type) {\ncase *MyError:\n        // handle specifically\ndefault:\n        // unknown error\n}\n```\n\n----------------------------------------\n\nTITLE: Building SQL SELECT Query with Squirrel in Go\nDESCRIPTION: Demonstrates how to construct a SELECT query using Squirrel's fluent interface, including JOIN and WHERE clauses.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/squirrel/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport sq \"github.com/Masterminds/squirrel\"\n\nusers := sq.Select(\"*\").From(\"users\").Join(\"emails USING (email_id)\")\n\nactive := users.Where(sq.Eq{\"deleted_at\": nil})\n\nsql, args, err := active.ToSql()\n\nsql == \"SELECT * FROM users JOIN emails USING (email_id) WHERE deleted_at IS NULL\"\n```\n\n----------------------------------------\n\nTITLE: Concurrent Mapping of Slice in Go\nDESCRIPTION: Demonstrates how to concurrently map a slice using both the standard library and the 'conc' package. The 'conc' version simplifies the implementation using the iter.Map function.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc concMap(\n    input []int,\n    f func(int) int,\n) []int {\n    res := make([]int, len(input))\n    var idx atomic.Int64\n\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n\n            for {\n                i := int(idx.Add(1) - 1)\n                if i >= len(input) {\n                    return\n                }\n\n                res[i] = f(input[i])\n            }\n        }()\n    }\n    wg.Wait()\n    return res\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc concMap(\n    input []int,\n    f func(*int) int,\n) []int {\n    return iter.Map(input, f)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Scan with PathActions in Go\nDESCRIPTION: Example showing how to use the Scan method with PathActions to extract specific values while traversing JSON. This example extracts the 'A' field from the Point object in each array element under 'colors'.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/exponent-io/jsonpath/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar j = []byte(`{\"colors\":[\n  {\"Space\": \"YCbCr\", \"Point\": {\"Y\": 255, \"Cb\": 0, \"Cr\": -10, \"A\": 58}},\n  {\"Space\": \"RGB\",   \"Point\": {\"R\": 98, \"G\": 218, \"B\": 255, \"A\": 231}}\n]}`)\n\nvar actions PathActions\n\n// Extract the value at Point.A\nactions.Add(func(d *Decoder) error {\n  var alpha int\n  err := d.Decode(&alpha)\n  fmt.Printf(\"Alpha: %v\\n\", alpha)\n  return err\n}, \"Point\", \"A\")\n\nw := NewDecoder(bytes.NewReader(j))\nw.SeekTo(\"colors\", 0)\n\nvar ok = true\nvar err error\nfor ok {\n  ok, err = w.Scan(&actions)\n  if err != nil && err != io.EOF {\n    panic(err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding nested structs with omitempty for compact CBOR output (Go)\nDESCRIPTION: Example comparing encoding/json and fxamacker/cbor when encoding nested structs with omitempty tags, demonstrating how fxamacker/cbor produces more compact output (1 byte vs 18 bytes).\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Example encoding nested struct (with omitempty tag)\n// - encoding/json:  18 byte JSON\n// - fxamacker/cbor:  1 byte CBOR\npackage main\n\nimport (\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/fxamacker/cbor/v2\"\n)\n\ntype GrandChild struct {\n\tQuux int `json:\",omitempty\"`\n}\n\ntype Child struct {\n\tBaz int        `json:\",omitempty\"`\n\tQux GrandChild `json:\",omitempty\"`\n}\n\ntype Parent struct {\n\tFoo Child `json:\",omitempty\"`\n\tBar int   `json:\",omitempty\"`\n}\n\nfunc cb() {\n\tresults, _ := cbor.Marshal(Parent{})\n\tfmt.Println(\"hex(CBOR): \" + hex.EncodeToString(results))\n\n\ttext, _ := cbor.Diagnose(results) // Diagnostic Notation\n\tfmt.Println(\"DN: \" + text)\n}\n\nfunc js() {\n\tresults, _ := json.Marshal(Parent{})\n\tfmt.Println(\"hex(JSON): \" + hex.EncodeToString(results))\n\n\ttext := string(results) // JSON\n\tfmt.Println(\"JSON: \" + text)\n}\n\nfunc main() {\n\tcb()\n\tfmt.Println(\"-------------\")\n\tjs()\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Files to Memory Implementation\nDESCRIPTION: Function that demonstrates loading files from any billy.Filesystem implementation into memory. It reads all non-directory files from the root path and copies them into a memory filesystem implementation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-billy/v5/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc LoadToMemory(origin billy.Filesystem, path string) (*memory.Memory, error) {\n\tmemory := memory.New()\n\n\tfiles, err := origin.ReadDir(\"/\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor _, file := range files {\n\t\tif file.IsDir() {\n\t\t\tcontinue\n\t\t}\n\n\t\tsrc, err := origin.Open(file.Name())\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tdst, err := memory.Create(file.Name())\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tif _, err = io.Copy(dst, src); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tif err := dst.Close(); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tif err := src.Close(); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn memory, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation for Clock Interface Package\nDESCRIPTION: Markdown documentation explaining the purpose of the clock package, which provides an interface for time-based operations and supports mocking time for testing scenarios.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/utils/clock/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Clock\n\nThis package provides an interface for time-based operations.  It allows\nmocking time for testing.\n```\n\n----------------------------------------\n\nTITLE: Verbosity-Controlled Logging in Go with glog\nDESCRIPTION: Shows how to use verbosity-controlled logging with glog's V() function. The first example conditionally logs based on verbosity level, while the second directly uses the V() chainable method.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/golang/glog/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif glog.V(2) {\n\tglog.Info(\"Starting transaction...\")\n}\nglog.V(2).Infoln(\"Processed\", nItems, \"elements\")\n```\n\n----------------------------------------\n\nTITLE: CBOR Tag Handling in Go\nDESCRIPTION: Shows how to create and use TagSets for handling CBOR tags. Demonstrates creating custom modes with immutable or mutable shared CBOR tags.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nem, err := opts.EncMode()                  // no CBOR tags\nem, err := opts.EncModeWithTags(ts)        // immutable CBOR tags\nem, err := opts.EncModeWithSharedTags(ts)  // mutable shared CBOR tags\n```\n\n----------------------------------------\n\nTITLE: Using Split Driver for OTLP Exporter\nDESCRIPTION: Shows the NewSplitDriver function for the OTLP exporter that enables sending traces and metrics to different endpoints, allowing for more flexible telemetry data routing.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nNewSplitDriver\n```\n\n----------------------------------------\n\nTITLE: Handling Shared Configuration in Go\nDESCRIPTION: Example of handling overlapping configuration between different types using a common config struct and specific option interfaces.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// config holds options for all animals.\ntype config struct {\n\tWeight      float64\n\tColor       string\n\tMaxAltitude float64\n}\n\n// DogOption apply Dog specific options.\ntype DogOption interface {\n\tapplyDog(config) config\n}\n\n// BirdOption apply Bird specific options.\ntype BirdOption interface {\n\tapplyBird(config) config\n}\n\n// Option apply options for all animals.\ntype Option interface {\n\tBirdOption\n\tDogOption\n}\n\ntype weightOption float64\n\nfunc (o weightOption) applyDog(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc (o weightOption) applyBird(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc WithWeight(w float64) Option { return weightOption(w) }\n\ntype furColorOption string\n\nfunc (o furColorOption) applyDog(c config) config {\n\tc.Color = string(o)\n\treturn c\n}\n\nfunc WithFurColor(c string) DogOption { return furColorOption(c) }\n\ntype maxAltitudeOption float64\n\nfunc (o maxAltitudeOption) applyBird(c config) config {\n\tc.MaxAltitude = float64(o)\n\treturn c\n}\n\nfunc WithMaxAltitude(a float64) BirdOption { return maxAltitudeOption(a) }\n\nfunc NewDog(name string, o ...DogOption) Dog    {…}\nfunc NewBird(name string, o ...BirdOption) Bird {…}\n```\n\n----------------------------------------\n\nTITLE: Using Go Globbing Library for Pattern Matching\nDESCRIPTION: Demonstrates various glob pattern matching scenarios using the Go globbing library. Includes examples of simple globs, quoted meta characters, delimiters, super wildcards, single symbol wildcards, character-list matchers, character-range matchers, and pattern-alternatives list.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gobwas/glob/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/gobwas/glob\"\n\nfunc main() {\n    var g glob.Glob\n    \n    // create simple glob\n    g = glob.MustCompile(\"*.github.com\")\n    g.Match(\"api.github.com\") // true\n    \n    // quote meta characters and then create simple glob \n    g = glob.MustCompile(glob.QuoteMeta(\"*.github.com\"))\n    g.Match(\"*.github.com\") // true\n    \n    // create new glob with set of delimiters as [\".\"]\n    g = glob.MustCompile(\"api.*.com\", '.')\n    g.Match(\"api.github.com\") // true\n    g.Match(\"api.gi.hub.com\") // false\n    \n    // create new glob with set of delimiters as [\".\"]\n    // but now with super wildcard\n    g = glob.MustCompile(\"api.**.com\", '.')\n    g.Match(\"api.github.com\") // true\n    g.Match(\"api.gi.hub.com\") // true\n        \n    // create glob with single symbol wildcard\n    g = glob.MustCompile(\"?at\")\n    g.Match(\"cat\") // true\n    g.Match(\"fat\") // true\n    g.Match(\"at\") // false\n    \n    // create glob with single symbol wildcard and delimiters ['f']\n    g = glob.MustCompile(\"?at\", 'f')\n    g.Match(\"cat\") // true\n    g.Match(\"fat\") // false\n    g.Match(\"at\") // false \n    \n    // create glob with character-list matchers \n    g = glob.MustCompile(\"[abc]at\")\n    g.Match(\"cat\") // true\n    g.Match(\"bat\") // true\n    g.Match(\"fat\") // false\n    g.Match(\"at\") // false\n    \n    // create glob with character-list matchers \n    g = glob.MustCompile(\"[!abc]at\")\n    g.Match(\"cat\") // false\n    g.Match(\"bat\") // false\n    g.Match(\"fat\") // true\n    g.Match(\"at\") // false \n    \n    // create glob with character-range matchers \n    g = glob.MustCompile(\"[a-c]at\")\n    g.Match(\"cat\") // true\n    g.Match(\"bat\") // true\n    g.Match(\"fat\") // false\n    g.Match(\"at\") // false\n    \n    // create glob with character-range matchers \n    g = glob.MustCompile(\"[!a-c]at\")\n    g.Match(\"cat\") // false\n    g.Match(\"bat\") // false\n    g.Match(\"fat\") // true\n    g.Match(\"at\") // false \n    \n    // create glob with pattern-alternatives list \n    g = glob.MustCompile(\"{cat,bat,[fr]at}\")\n    g.Match(\"cat\") // true\n    g.Match(\"bat\") // true\n    g.Match(\"fat\") // true\n    g.Match(\"rat\") // true\n    g.Match(\"at\") // false \n    g.Match(\"zat\") // false \n}\n```\n\n----------------------------------------\n\nTITLE: Custom Format Checker Implementation\nDESCRIPTION: Shows how to implement and register a custom format checker for role validation\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// Define the format checker\ntype RoleFormatChecker struct {}\n\n// Ensure it meets the gojsonschema.FormatChecker interface\nfunc (f RoleFormatChecker) IsFormat(input interface{}) bool {\n\n    asString, ok := input.(string)\n    if ok == false {\n        return false\n    }\n\n    return strings.HasPrefix(\"ROLE_\", asString)\n}\n\n// Add it to the library\ngojsonschema.FormatCheckers.Add(\"role\", RoleFormatChecker{})\n```\n\n----------------------------------------\n\nTITLE: Checking for Exact Error Values in Go using go-multierror\nDESCRIPTION: Demonstrates how to use the standard errors.Is function to check for the presence of a specific error value within a multierror.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n```\n\n----------------------------------------\n\nTITLE: Querying gRPC Unary Request Error Rate with Prometheus - JSONIQ\nDESCRIPTION: Determines the per-service error rate for unary (1:1) RPCs in a specific Prometheus job. This query finds the rate of non-OK unary gRPC responses over a 1-minute window using `grpc_server_handled_total`, filtered by `grpc_code!=\\\"OK\\\"`. Input: Prometheus job metrics. Output: Error rate time series by `grpc_service`. Useful for targeting unary failures for alerting.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_4\n\nLANGUAGE: JSONIQ\nCODE:\n```\nsum(rate(grpc_server_handled_total{job=\\\"foo\\\",grpc_type=\\\"unary\\\",grpc_code!=\\\"OK\\\"}[1m])) by (grpc_service)\n```\n\n----------------------------------------\n\nTITLE: Parsing Semantic Versions in Go\nDESCRIPTION: Example showing how to parse a semantic version string into a Version object. The function returns both the parsed version and an error if parsing fails.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nv, err := semver.NewVersion(\"1.2.3-beta.1+build345\")\n```\n\n----------------------------------------\n\nTITLE: Merging with Override in Mergo for Go\nDESCRIPTION: Shows how to merge structs while overwriting values using Mergo's WithOverride transformer.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/imdario/mergo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Merge(&dst, src, mergo.WithOverride); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flags with Shorthand using pflag\nDESCRIPTION: This example demonstrates how to define flags with one-letter shorthands using pflag's 'P' suffix functions. It shows defining an integer flag, a boolean flag, and a custom flag with shorthands.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nvar flagvar bool\nfunc init() {\n\tflag.BoolVarP(&flagvar, \"boolname\", \"b\", true, \"help message\")\n}\nflag.VarP(&flagVal, \"varname\", \"v\", \"help message\")\n```\n\n----------------------------------------\n\nTITLE: Using Levenshtein Distance Calculation in Go\nDESCRIPTION: This example demonstrates how to use the levenshtein package to calculate the edit distance between two strings. It imports the package, defines two sample strings, computes their Levenshtein distance, and outputs the result.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/agnivade/levenshtein/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/agnivade/levenshtein\"\n)\n\nfunc main() {\n\ts1 := \"kitten\"\n\ts2 := \"sitting\"\n\tdistance := levenshtein.ComputeDistance(s1, s2)\n\tfmt.Printf(\"The distance between %s and %s is %d.\\n\", s1, s2, distance)\n\t// Output:\n\t// The distance between kitten and sitting is 3.\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to Human-Readable Format in Go\nDESCRIPTION: Examples demonstrating how to use the bytefmt package to convert byte values into human-readable strings with appropriate size units. Shows conversion of both floating point and integer values.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/code.cloudfoundry.org/bytefmt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nbytefmt.ByteSize(100.5*bytefmt.MEGABYTE) // returns \"100.5M\"\nbytefmt.ByteSize(uint64(1024)) // returns \"1K\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a SpdyStream Server in Go\nDESCRIPTION: This Go code snippet shows how to set up a SpdyStream server that listens for connections on port 8080 and mirrors incoming data streams back to the client. It uses the 'github.com/moby/spdystream' package to manage the spdystream connections. The 'net' package is utilized to handle network connections.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/moby/spdystream/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/moby/spdystream\"\n\t\"net\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp\", \"localhost:8080\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tspdyConn, err := spdystream.NewConnection(conn, true)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tgo spdyConn.Serve(spdystream.MirrorStreamHandler)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying JSON Merge Patches in Go\nDESCRIPTION: Example demonstrating how to create a JSON merge patch from original and target documents, then applying that patch to a different document. The patch describes changes needed to convert from one document to another.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/evanphx/json-patch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\t// Let's create a merge patch from these two documents...\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\ttarget := []byte(`{\"name\": \"Jane\", \"age\": 24}`)\n\n\tpatch, err := jsonpatch.CreateMergePatch(original, target)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Now lets apply the patch against a different JSON document...\n\n\talternative := []byte(`{\"name\": \"Tina\", \"age\": 28, \"height\": 3.75}`)\n\tmodifiedAlternative, err := jsonpatch.MergePatch(alternative, patch)\n\n\tfmt.Printf(\"patch document:   %s\\n\", patch)\n\tfmt.Printf(\"updated alternative doc: %s\\n\", modifiedAlternative)\n}\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling into Embedded Structs with Viper/Mapstructure in Go\nDESCRIPTION: This Go snippet demonstrates unmarshaling configuration data into nested Go structs where one struct is embedded within another. It uses the `mapstructure:\",squash\"` tag on the embedded struct field (`moduleConfig`) within the outer struct (`config`). This tells Viper/Mapstructure to merge the fields of the embedded struct directly into the parent level during unmarshaling.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_30\n\nLANGUAGE: go\nCODE:\n```\n/*\nExample config:\n\nmodule:\n    enabled: true\n    token: 89h3f98hbwf987h3f98wenf89ehf\n*/\ntype config struct {\n\tModule struct {\n\t\tEnabled bool\n\n\t\tmoduleConfig `mapstructure:\",squash\"`\n\t}\n}\n\n// moduleConfig could be in a module specific package\ntype moduleConfig struct {\n\tToken string\n}\n\nvar C config\n\nerr := viper.Unmarshal(&C)\nif err != nil {\n\tt.Fatalf(\"unable to decode into struct, %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Validators with Parameters in GoValidator\nDESCRIPTION: List of validators that accept parameters to customize their behavior, such as range checking, length validation, and pattern matching.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n\"range(min|max)\": Range,\n\"length(min|max)\": ByteLength,\n\"runelength(min|max)\": RuneLength,\n\"stringlength(min|max)\": StringLength,\n\"matches(pattern)\": StringMatches,\n\"in(string1|string2|...|stringN)\": IsIn,\n\"rsapub(keylength)\" : IsRsaPub,\n\"minstringlength(int): MinStringLength,\n\"maxstringlength(int): MaxStringLength,\n```\n\n----------------------------------------\n\nTITLE: String Replace Function Example\nDESCRIPTION: Function that replaces occurrences of a search string with a replacement string, with an optional limit parameter.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n'hello hello'.replace('he', 'we')     // returns 'wello wello'\n'hello hello'.replace('he', 'we', -1) // returns 'wello wello'\n'hello hello'.replace('he', 'we', 1)  // returns 'wello hello'\n'hello hello'.replace('he', 'we', 0)  // returns 'hello hello'\n```\n\n----------------------------------------\n\nTITLE: Converting Objects to Strings with ToString in Go\nDESCRIPTION: Example of using the ToString function to convert a struct into a string representation. This utility function provides a convenient way to generate string output from complex types.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tFirstName string\n\tLastName string\n}\n\nstr := govalidator.ToString(&User{\"John\", \"Juan\"})\nprintln(str)\n```\n\n----------------------------------------\n\nTITLE: Docker Config File with Basic Auth (JSON)\nDESCRIPTION: This JSON snippet represents a Docker config.json containing base64-encoded HTTP Basic Auth credentials for a single registry. The 'auths' map associates a registry hostname with an 'auth' field comprised of the base64-encoded 'username:password' string. It's typically located at ~/.docker/config.json and consumed by Docker and compatible tooling; input is injected via docker login or by editing/config templating, output is consumed by registry auth libraries.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"auths\": {\n\t\t\"registry.example.com\": {\n\t\t\t\"auth\": \"QXp1cmVEaWFtb25kOmh1bnRlcjI=\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Lumberjack Logger with Standard Log Package in Go\nDESCRIPTION: Example of how to use Lumberjack with the standard library's log package by passing it to the SetOutput function. This configures log file rotation with specified parameters.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/natefinch/lumberjack.v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlog.SetOutput(&lumberjack.Logger{\n    Filename:   \"/var/log/myapp/foo.log\",\n    MaxSize:    500, // megabytes\n    MaxBackups: 3,\n    MaxAge:     28, //days\n    Compress:   true, // disabled by default\n})\n```\n\n----------------------------------------\n\nTITLE: Compiling Schema by Reference in Go\nDESCRIPTION: Shows how to compile a schema by referencing its URI after it has been added to the SchemaLoader. This is an alternative to passing the loader directly.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nerr = sl.AddSchemas(loader3)\nschema, err := sl.Compile(gojsonschema.NewReferenceLoader(\"http://some_host.com/main.json\"))\n```\n\n----------------------------------------\n\nTITLE: Updating Go Dependencies for golang-jwt/v4\nDESCRIPTION: These shell commands update a Go project's dependencies to use version 4 of the golang-jwt library. `go get` fetches the specified package version (`github.com/golang-jwt/jwt/v4`), and `go mod tidy` removes unused dependencies and adds any required by the source code, ensuring the go.mod file is consistent.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/golang-jwt/jwt/v4/MIGRATION_GUIDE.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/golang-jwt/jwt/v4\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Context Support for slog in Go\nDESCRIPTION: This section describes how to add context support for slog, including storing and retrieving slog.Logger pointers in a context.Context. It mentions the functions NewContextWithSlogLogger and FromContextAsSlogLogger for this purpose.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Example code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Installing Google UUID Package in Go\nDESCRIPTION: Command to install the Google UUID package using Go's package manager. This will add the package to your Go project's dependencies.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/uuid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering Basic Metrics in Go\nDESCRIPTION: Demonstrates how to create and register various metric types including Counter, Gauge, Histogram, Meter, and Timer. Shows basic operations like incrementing counters, updating gauges, and timing functions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nc := metrics.NewCounter()\nmetrics.Register(\"foo\", c)\nc.Inc(47)\n\ng := metrics.NewGauge()\nmetrics.Register(\"bar\", g)\ng.Update(47)\n\nr := NewRegistry()\ng := metrics.NewRegisteredFunctionalGauge(\"cache-evictions\", r, func() int64 { return cache.getEvictionsCount() })\n\ns := metrics.NewExpDecaySample(1028, 0.015) // or metrics.NewUniformSample(1028)\nh := metrics.NewHistogram(s)\nmetrics.Register(\"baz\", h)\nh.Update(47)\n\nm := metrics.NewMeter()\nmetrics.Register(\"quux\", m)\nm.Mark(47)\n\nt := metrics.NewTimer()\nmetrics.Register(\"bang\", t)\nt.Time(func() {})\nt.Update(47)\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL with GORP in Go\nDESCRIPTION: Shows how to execute raw SQL UPDATE and DELETE statements with GORP, useful for batch operations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nres, err := dbmap.Exec(\"delete from invoice_test where PersonId=?\", 10)\n```\n\n----------------------------------------\n\nTITLE: Loading Local Schemas with SchemaLoader in Go\nDESCRIPTION: Example of loading local schemas using SchemaLoader and adding them by URL reference.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n\tsl := gojsonschema.NewSchemaLoader()\n\tloader1 := gojsonschema.NewStringLoader(`{ \"type\" : \"string\" }`)\n\terr := sl.AddSchema(\"http://some_host.com/string.json\", loader1)\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Merge Patch in Go\nDESCRIPTION: Example of creating a merge patch from two JSON documents and applying it to a third document using the jsonpatch library.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\t// Let's create a merge patch from these two documents...\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\ttarget := []byte(`{\"name\": \"Jane\", \"age\": 24}`)\n\n\tpatch, err := jsonpatch.CreateMergePatch(original, target)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Now lets apply the patch against a different JSON document...\n\n\talternative := []byte(`{\"name\": \"Tina\", \"age\": 28, \"height\": 3.75}`)\n\tmodifiedAlternative, err := jsonpatch.MergePatch(alternative, patch)\n\n\tfmt.Printf(\"patch document:   %s\\n\", patch)\n\tfmt.Printf(\"updated alternative doc: %s\\n\", modifiedAlternative)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding External Schema with Explicit URL in Go\nDESCRIPTION: Shows how to add an external schema with a specific URL to a SchemaLoader. This enables referencing external schemas without needing to download them.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n\tsl := gojsonschema.NewSchemaLoader()\n\tloader1 := gojsonschema.NewStringLoader(`{ \"type\" : \"string\" }`)\n\terr := sl.AddSchema(\"http://some_host.com/string.json\", loader1)\n```\n\n----------------------------------------\n\nTITLE: Custom TOML Unmarshaling with TextUnmarshaler\nDESCRIPTION: Advanced example showing how to implement custom unmarshaling for email addresses using the TextUnmarshaler interface\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/BurntSushi/toml/README.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\ncontacts = [\n    \"Donald Duck <donald@duckburg.com>\",\n    \"Scrooge McDuck <scrooge@duckburg.com>\",\n]\n```\n\nLANGUAGE: go\nCODE:\n```\ntype address struct {\n\t*mail.Address\n}\n\nfunc (a *address) UnmarshalText(text []byte) error {\n\tvar err error\n\ta.Address, err = mail.ParseAddress(string(text))\n\treturn err\n}\n\nfunc decode() {\n\tblob := `\n\t\tcontacts = [\n\t\t\t\"Donald Duck <donald@duckburg.com>\",\n\t\t\t\"Scrooge McDuck <scrooge@duckburg.com>\",\n\t\t]\n\t`\n\n\tvar contacts struct {\n\t\tContacts []address\n\t}\n\n\t_, err := toml.Decode(blob, &contacts)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor _, c := range contacts.Contacts {\n\t\tfmt.Printf(\"%#v\\n\", c.Address)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Afero BasePathFs in Go\nDESCRIPTION: This snippet shows how to use Afero's BasePathFs, which restricts all operations to a given path within a filesystem.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nbp := afero.NewBasePathFs(afero.NewOsFs(), \"/base/path\")\n```\n\n----------------------------------------\n\nTITLE: XXHash Digest Methods Implementation in Go\nDESCRIPTION: Implementation of hash.Hash64 interface methods for the Digest type, allowing streaming hash computation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Logging with ANSI Colors using Logrus and go-colorable in Go\nDESCRIPTION: This Go snippet shows how to set up the Logrus logger to output colored logs on Windows systems by using the go-colorable package. It configures Logrus to force color output in the terminal and directs its output to a colorable writer, which can handle ANSI escape sequences in Windows terminals.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/mattn/go-colorable/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogrus.SetFormatter(&logrus.TextFormatter{ForceColors: true})\nlogrus.SetOutput(colorable.NewColorableStdout())\n\nlogrus.Info(\"succeeded\")\nlogrus.Warn(\"not correct\")\nlogrus.Error(\"something error\")\nlogrus.Fatal(\"panic\")\n```\n\n----------------------------------------\n\nTITLE: Custom Enum-based Fuzzing\nDESCRIPTION: Advanced example showing how to implement custom fuzzing logic for enum-based structures with conditional field population.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/gofuzz/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype MyEnum string\nconst (\n        A MyEnum = \"A\"\n        B MyEnum = \"B\"\n)\ntype MyInfo struct {\n        Type MyEnum\n        AInfo *string\n        BInfo *string\n}\n\nf := fuzz.New().NilChance(0).Funcs(\n        func(e *MyInfo, c fuzz.Continue) {\n                switch c.Intn(2) {\n                case 0:\n                        e.Type = A\n                        c.Fuzz(&e.AInfo)\n                case 1:\n                        e.Type = B\n                        c.Fuzz(&e.BInfo)\n                }\n        },\n)\n\nvar myObject MyInfo\nf.Fuzz(&myObject) // Type will correspond to whether A or B info is set.\n```\n\n----------------------------------------\n\nTITLE: Custom Matcher Function in Gorilla Mux\nDESCRIPTION: Shows how to use a custom function to determine if a route matches a request, providing ultimate flexibility for complex matching scenarios.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nr.MatcherFunc(func(r *http.Request, rm *RouteMatch) bool {\n    return r.ProtoMajor == 0\n})\n```\n\n----------------------------------------\n\nTITLE: Building URLs for Routes Defined with Subrouters in Gorilla Mux (Go)\nDESCRIPTION: Illustrates defining a route using a subrouter created with `Host().Subrouter()` and `Path()`. It then shows how to generate the complete URL for this named route ('article') using `r.Get(\"article\").URL()`, providing values for variables defined in both the main router (host - '{subdomain}') and the subrouter (path - '{category}', '{id}').\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\ns := r.Host(\"{subdomain}.example.com\").Subrouter()\ns.Path(\"/articles/{category}/{id:[0-9]+}\").\n  HandlerFunc(ArticleHandler).\n  Name(\"article\")\n\n// \"http://news.example.com/articles/technology/42\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\")\n```\n\n----------------------------------------\n\nTITLE: Default Mode CBOR Operations in Go\nDESCRIPTION: Demonstrates basic CBOR encoding and decoding operations using the default mode of the fxamacker/cbor library. Includes marshaling, unmarshaling, and creating decoders.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// API matches encoding/json for Marshal, Unmarshal, Encode, Decode, etc.\nb, err = cbor.Marshal(v)        // encode v to []byte b\nerr = cbor.Unmarshal(b, &v)     // decode []byte b to v\ndecoder = cbor.NewDecoder(r)    // create decoder with io.Reader r\nerr = decoder.Decode(&v)        // decode a CBOR data item to v\n\n// v2.7.0 added MarshalToBuffer() and UserBufferEncMode interface.\nerr = cbor.MarshalToBuffer(v, b) // encode v to b instead of using built-in buf pool.\n\n// v2.5.0 added new functions that return remaining bytes.\n\n// UnmarshalFirst decodes first CBOR data item and returns remaining bytes.\nrest, err = cbor.UnmarshalFirst(b, &v)   // decode []byte b to v\n\n// DiagnoseFirst translates first CBOR data item to text and returns remaining bytes.\ntext, rest, err = cbor.DiagnoseFirst(b)  // decode []byte b to Diagnostic Notation text\n\n// NOTE: Unmarshal returns ExtraneousDataError if there are remaining bytes,\n// but new funcs UnmarshalFirst and DiagnoseFirst do not.\n```\n\n----------------------------------------\n\nTITLE: Implementing CopyOnWriteFs in Go\nDESCRIPTION: Creates a copy-on-write filesystem with a read-only base and writable overlay, where modifications only affect the overlay layer.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nbase := afero.NewOsFs()\nroBase := afero.NewReadOnlyFs(base)\nufs := afero.NewCopyOnWriteFs(roBase, afero.NewMemMapFs())\n\nfh, _ = ufs.Create(\"/home/test/file2.txt\")\nfh.WriteString(\"This is a test\")\nfh.Close()\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Configuration Files in Viper\nDESCRIPTION: Example of handling the specific case where a configuration file is not found.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err := viper.ReadInConfig(); err != nil {\n\tif _, ok := err.(viper.ConfigFileNotFoundError); ok {\n\t\t// Config file not found; ignore error if desired\n\t} else {\n\t\t// Config file was found but another error was produced\n\t}\n}\n\n// Config file found and successfully parsed\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of gojsonschema for JSON Validation in Go\nDESCRIPTION: Example demonstrating how to validate a JSON document against a schema using gojsonschema. It shows loading schema and document files, performing validation, and checking the validation results.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/xeipuuv/gojsonschema\"\n)\n\nfunc main() {\n\n    schemaLoader := gojsonschema.NewReferenceLoader(\"file:///home/me/schema.json\")\n    documentLoader := gojsonschema.NewReferenceLoader(\"file:///home/me/document.json\")\n\n    result, err := gojsonschema.Validate(schemaLoader, documentLoader)\n    if err != nil {\n        panic(err.Error())\n    }\n\n    if result.Valid() {\n        fmt.Printf(\"The document is valid\\n\")\n    } else {\n        fmt.Printf(\"The document is not valid. see errors :\\n\")\n        for _, desc := range result.Errors() {\n            fmt.Printf(\"- %s\\n\", desc)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Table Indentation in Go TOML Marshal\nDESCRIPTION: Demonstrates the differences in table indentation between v1 and v2, showing how to achieve v1-style indentation in v2 using the Encoder.SetIndentTables method.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ndata := map[string]interface{}{\n\t\"table\": map[string]string{\n\t\t\"key\": \"value\",\n\t},\n}\n\nb, _ := tomlv1.Marshal(data)\nfmt.Println(\"v1:\\n\" + string(b))\n\nb, _ = tomlv2.Marshal(data)\nfmt.Println(\"v2:\\n\" + string(b))\n\nbuf := bytes.Buffer{}\nenc := tomlv2.NewEncoder(&buf)\nenc.SetIndentTables(true)\nenc.Encode(data)\nfmt.Println(\"v2 Encoder:\\n\" + string(buf.Bytes()))\n```\n\n----------------------------------------\n\nTITLE: Encrypted Remote Configuration in Go\nDESCRIPTION: Demonstrates setting up encrypted remote configuration using GPG keyring for security.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nviper.AddSecureRemoteProvider(\"etcd\",\"http://127.0.0.1:4001\",\"/config/hugo.json\",\"/etc/secrets/mykeyring.gpg\")\nviper.SetConfigType(\"json\") // because there is no file extension in a stream of bytes,  supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Standard Flag Integration with PFlag in Go\nDESCRIPTION: Shows how to integrate standard library flags with pflag and Viper using AddGoFlagSet.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"github.com/spf13/pflag\"\n)\n\nfunc main() {\n\n\t// using standard library \"flag\" package\n\tflag.Int(\"flagname\", 1234, \"help message for flagname\")\n\n\tpflag.CommandLine.AddGoFlagSet(flag.CommandLine)\n\tpflag.Parse()\n\tviper.BindPFlags(pflag.CommandLine)\n\n\ti := viper.GetInt(\"flagname\") // retrieve value from viper\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SpdyStream Client in Go\nDESCRIPTION: This Go code snippet demonstrates how to create a SpdyStream client that connects to a server on localhost at port 8080 without authentication. The client establishes a connection, creates a stream to send and receive data, and closes the stream afterward. It requires the 'github.com/moby/spdystream' package for handling the spdystream connection and 'net/http' for handling HTTP headers.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/moby/spdystream/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/moby/spdystream\"\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"localhost:8080\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tspdyConn, err := spdystream.NewConnection(conn, false)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tgo spdyConn.Serve(spdystream.NoOpStreamHandler)\n\tstream, err := spdyConn.CreateStream(http.Header{}, nil, false)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tstream.Wait()\n\n\tfmt.Fprint(stream, \"Writing to stream\")\n\n\tbuf := make([]byte, 25)\n\tstream.Read(buf)\n\tfmt.Println(string(buf))\n\n\tstream.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to a Router using Use() in Gorilla Mux (Go)\nDESCRIPTION: Shows how to register a middleware function (e.g., `loggingMiddleware`) with a `mux.Router` instance (`r`) using the `Use()` method. The registered middleware will be executed for requests that match routes defined on this router or its subrouters, before the final route handler is called.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_30\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\nr.Use(loggingMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Calculating String Display Width using runewidth in Go\nDESCRIPTION: This Go code snippet demonstrates the usage of the `StringWidth` function from the `go-runewidth` library. It calculates the display width of the string \"つのだ☆HIRO\", which contains Japanese characters (each typically 2 cells wide) and standard ASCII characters (1 cell wide), confirming that the total calculated width is 12.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/mattn/go-runewidth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrunewidth.StringWidth(\"つのだ☆HIRO\") == 12\n```\n\n----------------------------------------\n\nTITLE: Verifying KubeSphere Deployment Status with kubectl\nDESCRIPTION: Command to check the status of all KubeSphere pods in the release namespace to verify successful deployment.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Global Sugared Logger Access using gofmt (S)\nDESCRIPTION: Use the `gofmt` command with the `-r` (rewrite) flag to replace occurrences of the global sugared logger variable `zap.S` with the function call `zap.S()`. This update is necessary for compatibility with zap v1.0.0-rc.2 and later, addressing the change where global loggers became functions for concurrency safety. The `-w` flag modifies the source files in place.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngofmt -r \"zap.S -> zap.S()\" -w .\n```\n\n----------------------------------------\n\nTITLE: Enabling Meta-schema Validation in Go\nDESCRIPTION: Example of enabling meta-schema validation to validate schemas against their respective meta-schemas.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nsl := gojsonschema.NewSchemaLoader()\nsl.Validate = true\nerr := sl.AddSchemas(gojsonschema.NewStringLoader(`{\n     \"$id\" : \"http://some_host.com/invalid.json\",\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"multipleOf\" : true\n}`))\n```\n\n----------------------------------------\n\nTITLE: Calculating gRPC Unary Request Error Percentage with Prometheus - JSONIQ\nDESCRIPTION: Computes the percentage of unary gRPC requests that fail for a given job, by service. This expression divides the error rate (from non-OK statuses) by the total started unary request rate, then multiplies by 100. Inputs: Prometheus metrics for started and handled requests. Output: Failure percentage time series by `grpc_service`. Can be directly used in alerting rules (e.g. error percentage > 1%).\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_5\n\nLANGUAGE: JSONIQ\nCODE:\n```\nsum(rate(grpc_server_handled_total{job=\\\"foo\\\",grpc_type=\\\"unary\\\",grpc_code!=\\\"OK\\\"}[1m])) by (grpc_service)\n / \nsum(rate(grpc_server_started_total{job=\\\"foo\\\",grpc_type=\\\"unary\\\"}[1m])) by (grpc_service)\n * 100.0\n```\n\n----------------------------------------\n\nTITLE: Detecting Terminal and Cygwin Terminals in go-isatty (Go)\nDESCRIPTION: This Go snippet demonstrates how to use the go-isatty library to determine if os.Stdout refers to a native terminal, a Cygwin/MSYS2 terminal, or neither. The code imports go-isatty and checks the terminal status using IsTerminal and IsCygwinTerminal methods. Required dependency: github.com/mattn/go-isatty. Inputs: os.Stdout file descriptor. Outputs: Prints terminal type to stdout. Works on Unix and Windows, with MSYS2/Cygwin detection support.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/mattn/go-isatty/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/mattn/go-isatty\"\n\t\"os\"\n)\n\nfunc main() {\n\tif isatty.IsTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Terminal\")\n\t} else if isatty.IsCygwinTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Cygwin/MSYS2 Terminal\")\n\t} else {\n\t\tfmt.Println(\"Is Not Terminal\")\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validators to TagMap in Go\nDESCRIPTION: Shows how to add a custom validator function to the TagMap for struct validation. The example adds a 'duck' validator that checks if a string equals 'duck'.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Permissive Host Key Checking in Go\nDESCRIPTION: Example showing how to implement OpenSSH-like StrictHostKeyChecking behavior, allowing unknown hosts while still protecting against host key changes.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/skeema/knownhosts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nsshHost := \"yourserver.com:22\"\nkhPath := \"/home/myuser/.ssh/known_hosts\"\nkh, err := knownhosts.NewDB(khPath)\nif err != nil {\n\tlog.Fatal(\"Failed to read known_hosts: \", err)\n}\n\n// Create a custom permissive hostkey callback which still errors on hosts\n// with changed keys, but allows unknown hosts and adds them to known_hosts\ncb := ssh.HostKeyCallback(func(hostname string, remote net.Addr, key ssh.PublicKey) error {\n\tinnerCallback := kh.HostKeyCallback()\n\terr := innerCallback(hostname, remote, key)\n\tif knownhosts.IsHostKeyChanged(err) {\n\t\treturn fmt.Errorf(\"REMOTE HOST IDENTIFICATION HAS CHANGED for host %s! This may indicate a MitM attack.\", hostname)\n\t} else if knownhosts.IsHostUnknown(err) {\n\t\tf, ferr := os.OpenFile(khPath, os.O_APPEND|os.O_WRONLY, 0600)\n\t\tif ferr == nil {\n\t\t\tdefer f.Close()\n\t\t\tferr = knownhosts.WriteKnownHost(f, hostname, remote, key)\n\t\t}\n\t\tif ferr == nil {\n\t\t\tlog.Printf(\"Added host %s to known_hosts\\n\", hostname)\n\t\t} else {\n\t\t\tlog.Printf(\"Failed to add host %s to known_hosts: %v\\n\", hostname, ferr)\n\t\t}\n\t\treturn nil // permit previously-unknown hosts (warning: may be insecure)\n\t}\n\treturn err\n})\n\nconfig := &ssh.ClientConfig{\n\tUser:              \"myuser\",\n\tAuth:              []ssh.AuthMethod{ /* ... */ },\n\tHostKeyCallback:   cb,\n\tHostKeyAlgorithms: kh.HostKeyAlgorithms(sshHost),\n}\n```\n\n----------------------------------------\n\nTITLE: Using Statement Cache and Builder with Squirrel in Go\nDESCRIPTION: Demonstrates how to use Squirrel's StatementCache and StatementBuilder for more efficient query execution.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/squirrel/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// StmtCache caches Prepared Stmts for you\ndbCache := sq.NewStmtCache(db)\n\n// StatementBuilder keeps your syntax neat\nmydb := sq.StatementBuilder.RunWith(dbCache)\nselect_users := mydb.Select(\"*\").From(\"users\")\n```\n\n----------------------------------------\n\nTITLE: Emulating Amazon ECR Credential Helper in Keychain (Go)\nDESCRIPTION: This Go code illustrates integrating Amazon ECR's docker-credential-ecr-login Go implementation with go-containerregistry via NewKeychainFromHelper, enabling credential retrieval for ECR registries without needing the helper executable in the system PATH. Dependencies include github.com/awslabs/amazon-ecr-credential-helper (ecr-login and api packages), and github.com/google/go-containerregistry/pkg/authn and /pkg/v1/remote. Instantiate ECRHelper with a default client factory and use it in a remote.Get call, authenticating via the custom keychain.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\tecr \"github.com/awslabs/amazon-ecr-credential-helper/ecr-login\"\n\t\"github.com/awslabs/amazon-ecr-credential-helper/ecr-login/api\"\n\n\t\"github.com/google/go-containerregistry/pkg/authn\"\n\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n)\n\nfunc main() {\n\t// ...\n\tecrHelper := ecr.ECRHelper{ClientFactory: api.DefaultClientFactory{}}\n\timg, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.NewKeychainFromHelper(ecrHelper)))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Colors into Existing Code in Go\nDESCRIPTION: Examples of using Set/Unset methods to add colors to existing code, with proper cleanup using defer.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Use handy standard colors\ncolor.Set(color.FgYellow)\n\nfmt.Println(\"Existing text will now be in yellow\")\nfmt.Printf(\"This one %s\\n\", \"too\")\n\ncolor.Unset() // Don't forget to unset\n\n// You can mix up parameters\ncolor.Set(color.FgMagenta, color.Bold)\ndefer color.Unset() // Use it in your function\n\nfmt.Println(\"All text will now be bold magenta.\")\n```\n\n----------------------------------------\n\nTITLE: Creating Subrouters with Host Restrictions in Gorilla Mux\nDESCRIPTION: Demonstrates how to create a subrouter that only matches requests for a specific host, optimizing request matching and providing organizational structure.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\ns := r.Host(\"www.example.com\").Subrouter()\n```\n\n----------------------------------------\n\nTITLE: Replacing gRPC-Go Dependency with Go Modules\nDESCRIPTION: This snippet outlines using Go modules to replace the default gRPC-Go package with a GitHub mirror, useful when the original host is inaccessible (commonly in China). It includes command-line commands to edit go.mod, tidy dependencies, vendor modules, and build using the vendor directory. Prerequisites include Go 1.11+ (for module support), and the working directory must have an initialized Go module. Input is provided as shell commands; output is an updated go.mod, a vendor directory, and a compiled binary if the build is successful.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/google.golang.org/grpc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Error Types in Go with go-multierror\nDESCRIPTION: Shows how to use the standard errors.As function to extract a specific error type from a multierror value.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\n\n// We want to know if \"err\" has a \"RichErrorType\" in it and extract it.\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gorp Library Tests using Shell Environment Variables\nDESCRIPTION: This shell script snippet shows how to configure and run the tests for the `gorp` library. It requires setting two environment variables: `GORP_TEST_DSN` specifies the Data Source Name for connecting to the test database, and `GORP_TEST_DIALECT` indicates the database type ('mysql', 'postgres', 'sqlite', etc.). After setting these variables (example shown for MySQL), the `go test` command is used to execute the test suite. An additional command shows how to run benchmarks.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n```sh\n# MySQL example:\nexport GORP_TEST_DSN=gomysql_test/gomysql_test/abc123\nexport GORP_TEST_DIALECT=mysql\n\n# run the tests\ngo test\n\n# run the tests and benchmarks\ngo test -bench=\"Bench\" -benchtime 10\n```\n```\n\n----------------------------------------\n\nTITLE: Individual Flag Binding in Go\nDESCRIPTION: Shows how to bind individual command flags to Viper configuration using the BindPFlag method with Cobra integration.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nserverCmd.Flags().Int(\"port\", 1138, \"Port to run Application server on\")\nviper.BindPFlag(\"port\", serverCmd.Flags().Lookup(\"port\"))\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a JSON Patch in Go\nDESCRIPTION: Example of creating a JSON patch from two operations and applying it to a JSON document using the jsonpatch library.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\tpatchJSON := []byte(`[\n\t\t{\"op\": \"replace\", \"path\": \"/name\", \"value\": \"Jane\"},\n\t\t{\"op\": \"remove\", \"path\": \"/height\"}\n\t]`)\n\n\tpatch, err := jsonpatch.DecodePatch(patchJSON)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmodified, err := patch.Apply(original)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"Original document: %s\\n\", original)\n\tfmt.Printf(\"Modified document: %s\\n\", modified)\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Traces in Go\nDESCRIPTION: Illustrates how to create nested traces for more complex operations. The nested trace has its own logging threshold and can include additional fields.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/utils/trace/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc doSomething() {\n    rootTrace := trace.New(\"rootOperation\")\n    defer rootTrace.LogIfLong(100 * time.Millisecond)\n    \n    func() {\n        nestedTrace := rootTrace.Nest(\"nested\", Field{Key: \"nestedFieldKey1\", Value: \"nestedFieldValue1\"})\n        defer nestedTrace.LogIfLong(50 * time.Millisecond)\n        // do nested operation\n    }()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Heredoc in a Go Program Example\nDESCRIPTION: A complete example showing how to use the heredoc library in a Go program. It demonstrates how the library preserves indentation in multiline strings while removing leading whitespace based on the first line's indentation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/MakeNowJust/heredoc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/MakeNowJust/heredoc\"\n)\n\nfunc main() {\n\tfmt.Println(heredoc.Doc(`\n\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit,\n\t\tsed do eiusmod tempor incididunt ut labore et dolore magna\n\t\taliqua. Ut enim ad minim veniam, ...\n\t`))\n\t// Output:\n\t// Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n\t// sed do eiusmod tempor incididunt ut labore et dolore magna\n\t// aliqua. Ut enim ad minim veniam, ...\n\t//\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Logrus Instance in Go\nDESCRIPTION: This snippet illustrates how to create a custom instance of the Logrus logger, allowing for multiple logger configurations in a single application.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  \"github.com/sirupsen/logrus\"\n)\n\n// Create a new instance of the logger. You can have any number of instances.\nvar log = logrus.New()\n\nfunc main() {\n  // The API for setting attributes is a little different than the package level\n  // exported logger. See Godoc.\n  log.Out = os.Stdout\n\n  // You could set this to any `io.Writer` such as a file\n  // file, err := os.OpenFile(\"logrus.log\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)\n  // if err == nil {\n  //  log.Out = file\n  // } else {\n  //  log.Info(\"Failed to log to file, using default stderr\")\n  // }\n\n  log.WithFields(logrus.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing klog Flags in Go\nDESCRIPTION: Demonstrates how to initialize klog global flags explicitly, as klog no longer uses the init() method for flag registration.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/klog/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nklog.InitFlags(nil)\n```\n\n----------------------------------------\n\nTITLE: Collision Detection with SHA1CD in Go\nDESCRIPTION: This snippet shows how to use the CollisionResistantSum function to both hash data and detect collision attempts. It returns both the hash value and a boolean indicating if a collision was detected.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pjbgf/sha1cd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/pjbgf/sha1cd\"\n\nfunc test(){\n\tdata := []byte(\"data to be sha1 hashed\")\n\th, col  := sha1cd.CollisionResistantSum(data)\n\tif col {\n\t\tfmt.Println(\"collision found!\")\n\t}\n\tfmt.Printf(\"hash: %q\", hex.EncodeToString(h))\n}\n```\n\n----------------------------------------\n\nTITLE: Loading the Sprig FuncMap in Go Templates\nDESCRIPTION: This snippet demonstrates how to import and use the Sprig library in a Go program. It shows the proper way to set up the FuncMap before loading templates.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/sprig/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n  \"github.com/Masterminds/sprig/v3\"\n  \"html/template\"\n)\n\n// This example illustrates that the FuncMap *must* be set before the\n// templates themselves are loaded.\ntpl := template.Must(\n  template.New(\"base\").Funcs(sprig.FuncMap()).ParseGlob(\"*.html\")\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced JMESPath Queries in Go\nDESCRIPTION: Shows more complex JMESPath query examples including nested object access, array projections, and filtering with conditions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo.bar\", data)\nresult = { \"baz\": [ 0, 1, 2, 3, 4 ] }\n\nvar jsondata  = []byte(`{\"foo\": [{\"first\": \"a\", \"last\": \"b\"},\n                           {\"first\": \"c\", \"last\": \"d\"}]}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search({\"foo[*].first\", data)\nresult [ 'a', 'c' ]\n\nvar jsondata = []byte(`{\"foo\": [{\"age\": 20}, {\"age\": 25},\n                           {\"age\": 30}, {\"age\": 35},\n                           {\"age\": 40}]}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo[?age > `30`]\")\nresult = [ { age: 35 }, { age: 40 } ]\n```\n\n----------------------------------------\n\nTITLE: Converting Various Types to Integer in Go using Cast\nDESCRIPTION: This snippet shows how to use the ToInt function from the Cast library to convert different data types to integers. It includes conversions from integer, float, string, boolean, interface, and nil types.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/cast/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncast.ToInt(8)                  // 8\ncast.ToInt(8.31)               // 8\ncast.ToInt(\"8\")                // 8\ncast.ToInt(true)               // 1\ncast.ToInt(false)              // 0\n\nvar eight interface{} = 8\ncast.ToInt(eight)              // 8\ncast.ToInt(nil)                // 0\n```\n\n----------------------------------------\n\nTITLE: Example YAML Configuration for Sub-tree Extraction\nDESCRIPTION: This YAML snippet provides example configuration data structured hierarchically under a `cache` key, with distinct configurations for `cache1` and `cache2`. This structure is used to demonstrate extracting a configuration sub-tree using Viper's `Sub` method.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n  cache1:\n    max-items: 100\n    item-size: 64\n  cache2:\n    max-items: 200\n    item-size: 80\n```\n\n----------------------------------------\n\nTITLE: Implementing Hooks for Logrus Logging in Go\nDESCRIPTION: This example shows how to add hooks to a Logrus logger to send logs to multiple destinations. It demonstrates adding an Airbrake hook for error reporting and a Syslog hook for system logging.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n  \"gopkg.in/gemnasium/logrus-airbrake-hook.v2\" // the package is named \"airbrake\"\n  logrus_syslog \"github.com/sirupsen/logrus/hooks/syslog\"\n  \"log/syslog\"\n)\n\nfunc init() {\n\n  // Use the Airbrake hook to report errors that have Error severity or above to\n  // an exception tracker. You can create custom hooks, see the Hooks section.\n  log.AddHook(airbrake.NewHook(123, \"xyz\", \"production\"))\n\n  hook, err := logrus_syslog.NewSyslogHook(\"udp\", \"localhost:514\", syslog.LOG_INFO, \"\")\n  if err != nil {\n    log.Error(\"Unable to connect to local syslog daemon\")\n  } else {\n    log.AddHook(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Version Constraints in Go\nDESCRIPTION: Example showing how to create a constraint object and check if a version satisfies the constraint. This demonstrates the constraint checking functionality of the semver package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nc, err := semver.NewConstraint(\">= 1.2.3\")\nif err != nil {\n    // Handle constraint not being parsable.\n}\n\nv, err := semver.NewVersion(\"1.3\")\nif err != nil {\n    // Handle version not being parsable.\n}\n// Check if the version meets the constraints. The variable a will be true.\na := c.Check(v)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Kubernetes Deployment using KubeSphere client in Go\nDESCRIPTION: This snippet demonstrates how to use the KubeSphere client to retrieve a Kubernetes Deployment object from the API server. It shows that the client can directly interact with Kubernetes native objects.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/staging/src/kubesphere.io/client-go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\ndeploy := &appsv1.Deployment{}\nclient.Get(context.TODO(), client.ObjectKey{Namespace: \"kubesphere-system\", Name: \"ks-apiserver\"}, deploy)\n```\n\n----------------------------------------\n\nTITLE: Using Email Format in JSON Schema (JSON)\nDESCRIPTION: Demonstrates how to use the built-in 'email' format in a JSON Schema definition for string validation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"string\", \"format\": \"email\"}\n```\n\n----------------------------------------\n\nTITLE: Uploading stdin contents as a container layer using stream package in Go\nDESCRIPTION: Example code that demonstrates how to create a streaming layer from stdin and upload it to a local registry. This showcases the basic usage of the stream package for creating and uploading non-buffered layer contents.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/v1/stream/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/google/go-containerregistry/pkg/name\"\n\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n\t\"github.com/google/go-containerregistry/pkg/v1/stream\"\n)\n\n// upload the contents of stdin as a layer to a local registry\nfunc main() {\n\trepo, err := name.NewRepository(\"localhost:5000/stream\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tlayer := stream.NewLayer(os.Stdin)\n\n\tif err := remote.WriteLayer(repo, layer); err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interruptible Node with Timeout in Ginkgo (Go)\nDESCRIPTION: Demonstrates how to use the new interruptible node feature with timeouts in Ginkgo. The spec uses a context to handle interruptions and timeouts, and includes Gomega assertions that respect the context deadline.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nIt(\"is interruptible\", func(ctx SpecContext) { // or context.Context instead of SpecContext, both are valid.\n    // do things until `ctx.Done()` is closed, for example:\n    req, err := http.NewRequestWithContext(ctx, \"POST\", \"/build-widgets\", nil)\n    Expect(err).NotTo(HaveOccured())\n    _, err := http.DefaultClient.Do(req)\n    Expect(err).NotTo(HaveOccured())\n\n    Eventually(client.WidgetCount).WithContext(ctx).Should(Equal(17))\n}, NodeTimeout(time.Second*20), GracePeriod(5*time.Second))\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Nested Structs Example\nDESCRIPTION: Shows how to fill nested structs with fuzzed data using GenerateStruct\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype PersonI struct {\n    Name       string\n    Age        int\n    BestFriend PersonII\n}\ntype PersonII struct {\n    Name string\n    Age  int\n}\np := PersonI{}\nerr := f.GenerateStruct(&p)\n```\n\n----------------------------------------\n\nTITLE: Marking a Flag as Hidden in pflag\nDESCRIPTION: This example shows how to mark a flag as hidden in pflag. Hidden flags still function normally but do not appear in usage or help text.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkHidden(\"secretFlag\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Step Trace in Go\nDESCRIPTION: Shows how to split a trace into multiple steps, allowing for more detailed tracking of an operation's progress. Each step can include additional fields.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/utils/trace/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc doSomething() {\n    opTrace := trace.New(\"operation\")\n    defer opTrace.LogIfLong(100 * time.Millisecond)\n    // do step 1\n    opTrace.Step(\"step1\", Field{Key: \"stepFieldKey1\", Value: \"stepFieldValue1\"})\n    // do step 2\n    opTrace.Step(\"step2\")\n}\n```\n\n----------------------------------------\n\nTITLE: Common Fuzzing API Examples\nDESCRIPTION: Various utility methods for generating different types of fuzzed data\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncreatedString, err := f.GetString() // Gets a string\ncreatedInt, err := f.GetInt() // Gets an integer\ncreatedByte, err := f.GetByte() // Gets a byte\ncreatedBytes, err := f.GetBytes() // Gets a byte slice\ncreatedBool, err := f.GetBool() // Gets a boolean\nerr := f.FuzzMap(target_map) // Fills a map\ncreatedTarBytes, err := f.TarBytes() // Gets bytes of a valid tar archive\nerr := f.CreateFiles(inThisDir) // Fills inThisDir with files\ncreatedString, err := f.GetStringFrom(\"anyCharInThisString\", ofThisLength) // Gets a string that consists of chars from \"anyCharInThisString\" and has the exact length \"ofThisLength\"\n```\n\n----------------------------------------\n\nTITLE: Struct Validation Examples in Go\nDESCRIPTION: Examples of struct definitions with different validation tag configurations, showing required and optional field validations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// this struct definition will fail govalidator.ValidateStruct() (and the field values do not matter):\ntype exampleStruct struct {\n  Name  string ``\n  Email string `valid:\"email\"`\n}\n\n// this, however, will only fail when Email is empty or an invalid email address:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email\"`\n}\n\n// lastly, this will only fail when Email is an invalid email address but not when it's empty:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email,optional\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Using WhiteList Function in GoValidator\nDESCRIPTION: Demonstrates how to use the WhiteList function to remove all characters from a string except those specified in a given range.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// Remove all characters from string ignoring characters between \"a\" and \"z\"\nprintln(govalidator.WhiteList(\"a3a43a5a4a3a2a23a4a5a4a3a4\", \"a-z\") == \"aaaaaaaaaaaa\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Dropping Tables with GORP in Go\nDESCRIPTION: Demonstrates how to automatically create or drop database tables using GORP. Includes methods for creating tables with or without existence checks.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// create all registered tables\ndbmap.CreateTables()\n\n// same as above, but uses \"if not exists\" clause to skip tables that are\n// already defined\ndbmap.CreateTablesIfNotExists()\n\n// drop\ndbmap.DropTables()\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL-specific Features in Squirrel for Go\nDESCRIPTION: Shows how to use Squirrel's PlaceholderFormat for PostgreSQL and how to retrieve an inserted ID.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/squirrel/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npsql := sq.StatementBuilder.PlaceholderFormat(sq.Dollar)\n\n// You use question marks for placeholders...\nsql, _, _ := psql.Select(\"*\").From(\"elephants\").Where(\"name IN (?,?)\", \"Dumbo\", \"Verna\").ToSql()\n\n/// ...squirrel replaces them using PlaceholderFormat.\nsql == \"SELECT * FROM elephants WHERE name IN ($1,$2)\"\n\n\n/// You can retrieve id ...\nquery := sq.Insert(\"nodes\").\n    Columns(\"uuid\", \"type\", \"data\").\n    Values(node.Uuid, node.Type, node.Data).\n    Suffix(\"RETURNING \\\"id\\\"\").\n    RunWith(m.db).\n    PlaceholderFormat(sq.Dollar)\n\nquery.QueryRow().Scan(&node.id)\n```\n\n----------------------------------------\n\nTITLE: Accessing Flag Values after Parsing\nDESCRIPTION: This example demonstrates how to access the values of parsed flags using pflag. It shows how to use both pointers for directly defined flags and values for variable-bound flags.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n```\n\n----------------------------------------\n\nTITLE: Type Checking with IsType in Go\nDESCRIPTION: Examples of using the IsType function to verify variable types including primitive types and pointer types. This function checks if a variable matches the specified type identifier.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsType(\"Bob\", \"string\"))\nprintln(govalidator.IsType(1, \"int\"))\ni := 1\nprintln(govalidator.IsType(&i, \"*int\"))\n```\n\n----------------------------------------\n\nTITLE: Querying 99th Percentile Unary Request Latency with Prometheus - JSONIQ\nDESCRIPTION: Estimates the 99%-tile latencies for unary RPCs per gRPC service, over a rolling 5-minute window using Prometheus histograms. The `histogram_quantile` function takes pre-aggregated per-bucket sample counts for the specific job. Inputs: Prometheus histogram bucket metrics with job, type, and latency boundary. Output: 99th percentile latency by service. Useful for SLA and latency monitoring.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_7\n\nLANGUAGE: JSONIQ\nCODE:\n```\nhistogram_quantile(0.99, \n  sum(rate(grpc_server_handling_seconds_bucket{job=\\\"foo\\\",grpc_type=\\\"unary\\\"}[5m])) by (grpc_service,le)\n)\n```\n\n----------------------------------------\n\nTITLE: Decoding and Querying an SSH Config String in Go\nDESCRIPTION: This snippet illustrates how to parse an SSH configuration provided as a string. It uses `strings.NewReader` to create an `io.Reader` from the config string and then `ssh_config.Decode` to parse it into a `cfg` object. Finally, it demonstrates querying the parsed configuration using `cfg.Get` to retrieve the 'Port' for 'example.test'.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/kevinburke/ssh_config/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar config = `\nHost *.test\n  Compression yes\n`\n\ncfg, err := ssh_config.Decode(strings.NewReader(config))\nfmt.Println(cfg.Get(\"example.test\", \"Port\"))\n```\n\n----------------------------------------\n\nTITLE: Writing Configuration Files with Viper\nDESCRIPTION: Examples of writing configuration to files using different methods including safe write options.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nviper.WriteConfig() // writes current config to predefined path set by 'viper.AddConfigPath()' and 'viper.SetConfigName'\nviper.SafeWriteConfig()\nviper.WriteConfigAs(\"/path/to/my/.config\")\nviper.SafeWriteConfigAs(\"/path/to/my/.config\") // will error since it has already been written\nviper.SafeWriteConfigAs(\"/path/to/my/.other_config\")\n```\n\n----------------------------------------\n\nTITLE: Pre-compiled JMESPath Queries in Go\nDESCRIPTION: Demonstrates how to pre-compile JMESPath expressions for improved performance when running multiple searches with the same query pattern.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": \"bar\"}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nprecompiled, err := Compile(\"foo\")\nif err != nil{\n    // ... handle the error\n}\nresult, err := precompiled.Search(data)\nresult = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Instrumenting HTTP Handler with Metrics in Go\nDESCRIPTION: Shows how to wrap an HTTP handler with metrics instrumentation using the metrics namespace and default HTTP metrics.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/go-metrics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nnamespace := metrics.NewNamespace(\"docker_distribution\", \"http\", metrics.Labels{\"handler\": \"your_http_handler_name\"})\nhttpMetrics := namespace.NewDefaultHttpMetrics()\nmetrics.Register(namespace)\ninstrumentedHandler = metrics.InstrumentHandler(httpMetrics, unInstrumentedHandler)\n```\n\n----------------------------------------\n\nTITLE: Standard Middleware Function Type Definition in Go (for Gorilla Mux)\nDESCRIPTION: Defines the standard Go type `MiddlewareFunc` used for creating middleware compatible with `gorilla/mux`. It's a function type that accepts an `http.Handler` (the next handler in the chain) and returns an `http.Handler` (the middleware wrapper).\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_28\n\nLANGUAGE: go\nCODE:\n```\ntype MiddlewareFunc func(http.Handler) http.Handler\n```\n\n----------------------------------------\n\nTITLE: Accessing Error List in Go using go-multierror\nDESCRIPTION: Demonstrates how to use type switches to access the list of errors when a multierror might be returned.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: String Trim Function Example\nDESCRIPTION: Function that removes leading and trailing whitespace from a string using Unicode whitespace definition.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n'  \\ttrim\\n    '.trim() // returns 'trim'\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker to Use Custom Credential Helpers in JSON\nDESCRIPTION: This JSON snippet shows how to modify the Docker configuration file (typically `~/.docker/config.json`) to use custom credential helpers. It maps specific container registries (`gcr.io`, `eu.gcr.io`) to the custom helper executables (e.g., `tee`, `hardcoded`). The helper names (`tee`, `hardcoded`) correspond to the executable files named `docker-credential-tee` and `docker-credential-hardcoded` placed in the system's PATH.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"credHelpers\": {\n\t\t\"gcr.io\": \"tee\",\n\t\t\"eu.gcr.io\": \"hardcoded\"\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Key Methods for the xxhash Digest Type in Go\nDESCRIPTION: Details the key methods available on the `Digest` type, which implements the `hash.Hash64` interface, allowing for incremental hashing. `Write` accepts byte slices, `WriteString` accepts strings to update the hash state, and `Sum64` returns the final computed 64-bit hash value.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n```\n\n----------------------------------------\n\nTITLE: Table-Driven Testing for Routes with Variables in Go\nDESCRIPTION: This example demonstrates table-driven testing for routes with variables. It tests multiple possible route variables and verifies the handler responds correctly to each case.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_40\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\nfunc TestMetricsHandler(t *testing.T) {\n    tt := []struct{\n        routeVariable string\n        shouldPass bool\n    }{\n        {\"goroutines\", true},\n        {\"heap\", true},\n        {\"counters\", true},\n        {\"queries\", true},\n        {\"adhadaeqm3k\", false},\n    }\n\n    for _, tc := range tt {\n        path := fmt.Sprintf(\"/metrics/%s\", tc.routeVariable)\n        req, err := http.NewRequest(\"GET\", path, nil)\n        if err != nil {\n            t.Fatal(err)\n        }\n\n        rr := httptest.NewRecorder()\n\t\n\t// To add the vars to the context, \n\t// we need to create a router through which we can pass the request.\n\trouter := mux.NewRouter()\n        router.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n        router.ServeHTTP(rr, req)\n\n        // In this case, our MetricsHandler returns a non-200 response\n        // for a route variable it doesn't know about.\n        if rr.Code == http.StatusOK && !tc.shouldPass {\n            t.Errorf(\"handler should have failed on routeVariable %s: got %v want %v\",\n                tc.routeVariable, rr.Code, http.StatusOK)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Simple Struct Example\nDESCRIPTION: Demonstrates how to fill a simple struct with fuzzed data using GenerateStruct\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Person struct {\n    Name string\n    Age  int\n}\np := Person{}\n// Fill p with values based on the data provided by the fuzzing engine:\nerr := f.GenerateStruct(&p)\n```\n\n----------------------------------------\n\nTITLE: Error Causer Interface Definition\nDESCRIPTION: Defines the causer interface that allows errors to be unwrapped to find their original cause.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype causer interface {\n        Cause() error\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LDAP v3 Package in Go\nDESCRIPTION: Code snippet showing how to import the LDAP v3 package in a Go application.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-ldap/ldap/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"gopkg.in/ldap.v3\"\n```\n\n----------------------------------------\n\nTITLE: Performing SQL Joins with GORP in Go\nDESCRIPTION: Shows how to execute SQL JOIN queries with GORP, mapping the results to custom struct types.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Define a type for your join\n// It *must* contain all the columns in your SELECT statement\n//\n// The names here should match the aliased column names you specify\n// in your SQL - no additional binding work required.  simple.\n//\ntype InvoicePersonView struct {\n    InvoiceId   int64\n    PersonId    int64\n    Memo        string\n    FName       string\n}\n\n// Create some rows\np1 := &Person{0, 0, 0, \"bob\", \"smith\"}\nerr = dbmap.Insert(p1)\ncheckErr(err, \"Insert failed\")\n\n// notice how we can wire up p1.Id to the invoice easily\ninv1 := &Invoice{0, 0, 0, \"xmas order\", p1.Id}\nerr = dbmap.Insert(inv1)\ncheckErr(err, \"Insert failed\")\n\n// Run your query\nquery := \"select i.Id InvoiceId, p.Id PersonId, i.Memo, p.FName \" +\n\t\"from invoice_test i, person_test p \" +\n\t\"where i.PersonId = p.Id\"\n\n// pass a slice to Select()\nvar list []InvoicePersonView\n_, err := dbmap.Select(&list, query)\n\n// this should test true\nexpected := InvoicePersonView{inv1.Id, p1.Id, inv1.Memo, p1.FName}\nif reflect.DeepEqual(list[0], expected) {\n    fmt.Println(\"Woot! My join worked!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Validation in GoValidator\nDESCRIPTION: Shows how to create custom validators for user-defined types, including context-aware validation that can check against other fields in the struct.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\ntype CustomByteArray [6]byte // custom types are supported and can be validated\n\ntype StructWithCustomByteArray struct {\n  ID              CustomByteArray `valid:\"customByteArrayValidator,customMinLengthValidator\"` // multiple custom validators are possible as well and will be evaluated in sequence\n  Email           string          `valid:\"email\"`\n  CustomMinLength int             `valid:\"-\"`\n}\n\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // you can type switch on the context interface being validated\n  case StructWithCustomByteArray:\n    // you can check and validate against some other field in the context,\n    // return early or not validate against the context at all – your choice\n  case SomeOtherType:\n    // ...\n  default:\n    // expecting some other type? Throw/panic here or continue\n  }\n\n  switch v := i.(type) { // type switch on the struct field being validated\n  case CustomByteArray:\n    for _, e := range v { // this validator checks that the byte array is not empty, i.e. not all zeroes\n      if e != 0 {\n        return true\n      }\n    }\n  }\n  return false\n})\ngovalidator.CustomTypeTagMap.Set(\"customMinLengthValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // this validates a field against the value in another field, i.e. dependent validation\n  case StructWithCustomByteArray:\n    return len(v.ID) >= v.CustomMinLength\n  }\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SchemaLoader for Specific JSON Schema Draft in Go\nDESCRIPTION: Example of configuring the SchemaLoader to use a specific draft version and disabling autodetection.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nsl := gojsonschema.NewSchemaLoader()\nsl.Draft = gojsonschema.Draft7\nsl.AutoDetect = false\n```\n\n----------------------------------------\n\nTITLE: Buffer-Based Zstandard Decompression with Decoder Caching in Go\nDESCRIPTION: This Go example shows how to decompress in-memory Zstandard buffers using a potentially cached decoder. It initializes a reusable `zstd.NewReader` with `nil` input and sets decoder concurrency to 0 (`zstd.WithDecoderConcurrency(0)`), which defaults to using `GOMAXPROCS` decoders. The `Decompress` function utilizes this cached decoder's `DecodeAll` method to decompress a source byte slice `src`, automatically allocating the destination buffer by passing `nil`. Requires the `github.com/klauspost/compress/zstd` package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a reader that caches decompressors.\n// For this operation type we supply a nil Reader.\nvar decoder, _ = zstd.NewReader(nil, zstd.WithDecoderConcurrency(0))\n\n// Decompress a buffer. We don't supply a destination buffer,\n// so it will be allocated by the decoder.\nfunc Decompress(src []byte) ([]byte, error) {\n    return decoder.DecodeAll(src, nil)\n} \n```\n\n----------------------------------------\n\nTITLE: Custom User ID Validator Implementation\nDESCRIPTION: Implementation of a custom validator for checking user IDs against a database\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// Define the format checker\ntype ValidUserIdFormatChecker struct {}\n\n// Ensure it meets the gojsonschema.FormatChecker interface\nfunc (f ValidUserIdFormatChecker) IsFormat(input interface{}) bool {\n\n    asFloat64, ok := input.(float64) // Numbers are always float64 here\n    if ok == false {\n        return false\n    }\n\n    // XXX\n    // do the magic on the database looking for the int(asFloat64)\n\n    return true\n}\n\n// Add it to the library\ngojsonschema.FormatCheckers.Add(\"ValidUserId\", ValidUserIdFormatChecker{})\n```\n\n----------------------------------------\n\nTITLE: Detecting and Expanding Home Directory in Go without cgo\nDESCRIPTION: Demonstrates usage of the go-homedir library's primary functions: Dir(), which retrieves the current user's home directory, and Expand(), which expands tilde ('~') paths to the full home directory. No external dependencies beyond go-homedir itself are required. Inputs can be empty (for Dir()) or a string path starting with '~' (for Expand()). Outputs are the absolute path of the user's home directory or the expanded file path. The methods are cross-platform and do not require cgo, making them suitable for all Go build environments.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/mitchellh/go-homedir/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhomedir.Dir()\n```\n\nLANGUAGE: go\nCODE:\n```\nhomedir.Expand()\n```\n\n----------------------------------------\n\nTITLE: Basic Diskv Usage Example in Go\nDESCRIPTION: A complete Go program demonstrating the basic usage of Diskv including initialization, writing data, reading data, and erasing keys. It uses a simple transform function that stores all files in the base directory.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/peterbourgon/diskv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/peterbourgon/diskv\"\n)\n\nfunc main() {\n\t// Simplest transform function: put all the data files into the base dir.\n\tflatTransform := func(s string) []string { return []string{} }\n\n\t// Initialize a new diskv store, rooted at \"my-data-dir\", with a 1MB cache.\n\td := diskv.New(diskv.Options{\n\t\tBasePath:     \"my-data-dir\",\n\t\tTransform:    flatTransform,\n\t\tCacheSizeMax: 1024 * 1024,\n\t})\n\n\t// Write three bytes to the key \"alpha\".\n\tkey := \"alpha\"\n\td.Write(key, []byte{'1', '2', '3'})\n\n\t// Read the value back out of the store.\n\tvalue, _ := d.Read(key)\n\tfmt.Printf(\"%v\\n\", value)\n\n\t// Erase the key+value from the store (and the disk).\n\td.Erase(key)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validator Example in Go\nDESCRIPTION: Demonstrates the new thread-safe way to add custom validators using Set method instead of direct assignment.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// before\ngovalidator.CustomTypeTagMap[\"customByteArrayValidator\"] = func(i interface{}, o interface{}) bool {\n  // ...\n}\n\n// after\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, o interface{}) bool {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: String Split Function Example\nDESCRIPTION: Function that splits a string into a list of substrings based on a separator, with an optional limit parameter.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n'hello hello hello'.split(' ')     // returns ['hello', 'hello', 'hello']\n'hello hello hello'.split(' ', 0)  // returns []\n'hello hello hello'.split(' ', 1)  // returns ['hello hello hello']\n'hello hello hello'.split(' ', 2)  // returns ['hello', 'hello hello']\n'hello hello hello'.split(' ', -1) // returns ['hello', 'hello', 'hello']\n```\n\n----------------------------------------\n\nTITLE: Using Configuration Aliases in Viper\nDESCRIPTION: Example of creating and using aliases to reference configuration values by multiple keys.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nviper.RegisterAlias(\"loud\", \"Verbose\")\n\nviper.Set(\"verbose\", true) // same result as next line\nviper.Set(\"loud\", true)   // same result as prior line\n\nviper.GetBool(\"loud\") // true\nviper.GetBool(\"verbose\") // true\n```\n\n----------------------------------------\n\nTITLE: Emulating Azure ACR Credential Helper in Keychain (Go)\nDESCRIPTION: This Go code demonstrates integrating Azure ACR's docker-credential-acr-env Go implementation with go-containerregistry's authentication system using NewKeychainFromHelper. It requires the github.com/chrismellard/docker-credential-acr-env/pkg/credhelper and the google/go-containerregistry modules. After creating an ACRCredentialsHelper instance, the snippet shows passing it to remote.Get for container image fetching with Azure credentials emulated in-process.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"github.com/chrismellard/docker-credential-acr-env/pkg/credhelper\"\n\n\t\"github.com/google/go-containerregistry/pkg/authn\"\n\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n)\n\nfunc main() {\n\t// ...\n\tacrHelper := credhelper.NewACRCredentialsHelper()\n\timg, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.NewKeychainFromHelper(acrHelper)))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Goroutines with concurrent.Executor in Go\nDESCRIPTION: This snippet demonstrates usage of concurrent.Executor which wraps goroutines for explicit ownership and cancellation. It enables goroutines to be stopped gracefully using Stop, StopAndWait, or StopAndWaitForever methods. Requires the 'concurrent' package and assumes familiarity with context management in Go.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/modern-go/concurrent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nexecutor := concurrent.NewUnboundedExecutor()\nexecutor.Go(func(ctx context.Context) {\n    everyMillisecond := time.NewTicker(time.Millisecond)\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"goroutine exited\")\n            return\n        case <-everyMillisecond.C:\n            // do something\n        }\n    }\n})\ntime.Sleep(time.Second)\nexecutor.StopAndWaitForever()\nfmt.Println(\"executor stopped\")\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Flag's Shorthand in pflag\nDESCRIPTION: This snippet demonstrates how to deprecate only the shorthand of a flag while keeping the flag itself. It shows how to mark a shorthand as deprecated and provide a usage message.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkShorthandDeprecated(\"noshorthandflag\", \"please use --noshorthandflag only\")\n```\n\n----------------------------------------\n\nTITLE: Header Value Matching in Gorilla Mux\nDESCRIPTION: Shows how to match routes based on HTTP header values, useful for API versioning or handling specialized requests like AJAX.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nr.Headers(\"X-Requested-With\", \"XMLHttpRequest\")\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Route Matchers in Gorilla Mux\nDESCRIPTION: Demonstrates how to combine multiple matchers in a single route definition, creating highly specific routing rules.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nr.HandleFunc(\"/products\", ProductsHandler).\n  Host(\"www.example.com\").\n  Methods(\"GET\").\n  Schemes(\"http\")\n```\n\n----------------------------------------\n\nTITLE: Using Label.MatchesLabelFilter for conditional test setup in Go\nDESCRIPTION: Shows how to use Label().MatchesLabelFilter() to conditionally execute code based on test label filters, allowing for different setup paths depending on active labels.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nBeforeSuite(func() {\n\tif Label(\"slow\").MatchesLabelFilter(GinkgoLabelFilter()) {\n\t\t// do slow setup\n\t}\n\n\tif Label(\"fast\").MatchesLabelFilter(GinkgoLabelFilter()) {\n\t\t// do fast setup\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Flag in pflag\nDESCRIPTION: This example shows how to deprecate a flag using pflag. It demonstrates marking a flag as deprecated and providing a usage message to inform users about the alternative.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkDeprecated(\"badflag\", \"please use --good-flag instead\")\n```\n\n----------------------------------------\n\nTITLE: Basic SHA1CD Usage in Go\nDESCRIPTION: This snippet demonstrates how to use sha1cd as a drop-in replacement for the standard crypto/sha1 package. It hashes data and outputs the hexadecimal representation of the hash.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pjbgf/sha1cd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/pjbgf/sha1cd\"\n\nfunc test(){\n\tdata := []byte(\"data to be sha1 hashed\")\n\th := sha1cd.Sum(data)\n\tfmt.Printf(\"hash: %q\\n\", hex.EncodeToString(h))\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Random Function in GoUtils (Go)\nDESCRIPTION: This example shows how to use the Random function from GoUtils, which can return an error. It demonstrates proper error handling when using functions that may return errors due to illegal arguments.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/goutils/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/Masterminds/goutils\"\n)\n\nfunc main() {\n\n    // EXAMPLE 2: A goutils function which returns an error\n    rand1, err1 := goutils.Random (-1, 0, 0, true, true)  \n\n    if err1 != nil {\n\t\t\tfmt.Println(err1) // Prints out error message because -1 was entered as the first parameter in goutils.Random(...)\n\t\t} else {\n\t\t\tfmt.Println(rand1)\n\t\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Gettext Configuration Example in Go\nDESCRIPTION: Comprehensive example demonstrating various gettext features including locale binding, context-based translation, and resource loading.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/chai2010/gettext-go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/chai2010/gettext-go\"\n)\n\nfunc main() {\n\tgettext.SetLanguage(\"zh_CN\")\n\tgettext.BindLocale(gettext.New(\"hello\", \"locale\"))\n\n\t// gettext.BindLocale(\"hello\", \"locale\")              // from locale dir\n\t// gettext.BindLocale(\"hello\", \"locale.zip\")          // from locale zip file\n\t// gettext.BindLocale(\"hello\", \"locale.zip\", zipData) // from embedded zip data\n\n\t// translate source text\n\tfmt.Println(gettext.Gettext(\"Hello, world!\"))\n\t// Output: 你好, 世界!\n\n\t// if no msgctxt in PO file (only msgid and msgstr),\n\t// specify context as \"\" by\n\tfmt.Println(gettext.PGettext(\"\", \"Hello, world!\"))\n\t// Output: 你好, 世界!\n\n\t// translate resource\n\tfmt.Println(string(gettext.Getdata(\"poems.txt\")))\n\t// Output: ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with In-Memory Filesystem in Go\nDESCRIPTION: Creates a new Git repository with both memory storage and an in-memory filesystem implementation using memfs.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-git/v5/EXTENDING.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\tfs := memfs.New()\n\tr, err := git.Init(memory.NewStorage(), fs)\n```\n\n----------------------------------------\n\nTITLE: Building SQL INSERT Query with Squirrel in Go\nDESCRIPTION: Shows how to create an INSERT query with multiple VALUES clauses using Squirrel.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/squirrel/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsql, args, err := sq.\n    Insert(\"users\").Columns(\"name\", \"age\").\n    Values(\"moe\", 13).Values(\"larry\", sq.Expr(\"? + 5\", 12)).\n    ToSql()\n\nsql == \"INSERT INTO users (name,age) VALUES (?,?),(?,? + 5)\"\n```\n\n----------------------------------------\n\nTITLE: Looping Over Validation Errors in GoValidator\nDESCRIPTION: Shows how to access individual error messages when multiple validation errors occur, by extracting the errors from the returned error interface.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n  if err != nil {\n    errs := err.(govalidator.Errors).Errors()\n    for _, e := range errs {\n      fmt.Println(e.Error())\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of errwrap Package in Go\nDESCRIPTION: Demonstrates how to use the errwrap package to wrap errors, check for specific errors, and extract wrapped errors. It includes a sample function that wraps an error and a main function showing various errwrap operations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/hashicorp/errwrap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// A function that always returns an error, but wraps it, like a real\n// function might.\nfunc tryOpen() error {\n\t_, err := os.Open(\"/i/dont/exist\")\n\tif err != nil {\n\t\treturn errwrap.Wrapf(\"Doesn't exist: {{err}}\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\terr := tryOpen()\n\n\t// We can use the Contains helpers to check if an error contains\n\t// another error. It is safe to do this with a nil error, or with\n\t// an error that doesn't even use the errwrap package.\n\tif errwrap.Contains(err, \"does not exist\") {\n\t\t// Do something\n\t}\n\tif errwrap.ContainsType(err, new(os.PathError)) {\n\t\t// Do something\n\t}\n\n\t// Or we can use the associated `Get` functions to just extract\n\t// a specific error. This would return nil if that specific error doesn't\n\t// exist.\n\tperr := errwrap.GetType(err, new(os.PathError))\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Afero Filesystem Backend in Go\nDESCRIPTION: This snippet demonstrates how to declare a package variable and set it to a pointer to a filesystem using Afero. It shows examples for both memory-mapped and OS-based filesystems.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar AppFs = afero.NewMemMapFs()\n\nor\n\nvar AppFs = afero.NewOsFs()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Trace in Go\nDESCRIPTION: Demonstrates how to create a basic trace for an operation, including a custom field. The trace will log if the operation takes longer than 100 milliseconds.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/utils/trace/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc doSomething() {\n    opTrace := trace.New(\"operation\", Field{Key: \"fieldKey1\", Value: \"fieldValue1\"})\n    defer opTrace.LogIfLong(100 * time.Millisecond)\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Additional Custom Validation Implementation\nDESCRIPTION: Example of implementing additional custom validation logic after schema validation\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\ntype AnswerInvalidError struct {\n    gojsonschema.ResultErrorFields\n}\n\nfunc newAnswerInvalidError(context *gojsonschema.JsonContext, value interface{}, details gojsonschema.ErrorDetails) *AnswerInvalidError {\n    err := AnswerInvalidError{}\n    err.SetContext(context)\n    err.SetType(\"custom_invalid_error\")\n    err.SetDescriptionFormat(\"Answer to the Ultimate Question of Life, the Universe, and Everything is {{.answer}}\")\n    err.SetValue(value)\n    err.SetDetails(details)\n\n    return &err\n}\n\nfunc main() {\n    schema, err := gojsonschema.NewSchema(schemaLoader)\n    result, err := gojsonschema.Validate(schemaLoader, documentLoader)\n\n    if true { // some validation\n        jsonContext := gojsonschema.NewJsonContext(\"question\", nil)\n        errDetail := gojsonschema.ErrorDetails{\n            \"answer\": 42,\n        }\n        result.AddError(\n            newAnswerInvalidError(\n                gojsonschema.NewJsonContext(\"answer\", jsonContext),\n                52,\n                errDetail,\n            ),\n            errDetail,\n        )\n    }\n\n    return result, err\n}\n```\n\n----------------------------------------\n\nTITLE: Afero Utility Function Usage in Go\nDESCRIPTION: This snippet demonstrates how to use Afero's utility functions directly with a specified filesystem.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfs := new(afero.MemMapFs)\nf, err := afero.TempFile(fs,\"\", \"ioutil-test\")\n```\n\n----------------------------------------\n\nTITLE: Custom Flag Interface Implementation in Go\nDESCRIPTION: Example of implementing custom flag interfaces (FlagValue) for Viper integration.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype myFlag struct {}\nfunc (f myFlag) HasChanged() bool { return false }\nfunc (f myFlag) Name() string { return \"my-flag-name\" }\nfunc (f myFlag) ValueString() string { return \"my-flag-value\" }\nfunc (f myFlag) ValueType() string { return \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Basic glog Usage in Go\nDESCRIPTION: Demonstrates basic logging with glog, including simple informational logging and fatal error reporting with formatting.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/golang/glog/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nglog.Info(\"Prepare to repel boarders\")\n\nglog.Fatalf(\"Initialization failed: %s\", err)\n```\n\n----------------------------------------\n\nTITLE: Custom Time Transformer Implementation\nDESCRIPTION: Shows how to implement a custom transformer for handling time.Time type merging with special logic.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/dario.cat/mergo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n    \"reflect\"\n    \"time\"\n)\n\ntype timeTransformer struct {\n}\n\nfunc (t timeTransformer) Transformer(typ reflect.Type) func(dst, src reflect.Value) error {\n\tif typ == reflect.TypeOf(time.Time{}) {\n\t\treturn func(dst, src reflect.Value) error {\n\t\t\tif dst.CanSet() {\n\t\t\t\tisZero := dst.MethodByName(\"IsZero\")\n\t\t\t\tresult := isZero.Call([]reflect.Value{})\n\t\t\t\tif result[0].Bool() {\n\t\t\t\t\tdst.Set(src)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\ntype Snapshot struct {\n\tTime time.Time\n\t// ...\n}\n\nfunc main() {\n\tsrc := Snapshot{time.Now()}\n\tdest := Snapshot{}\n\tmergo.Merge(&dest, src, mergo.WithTransformers(timeTransformer{}))\n\tfmt.Println(dest)\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Content Stream with Digest Verifier in Go\nDESCRIPTION: Demonstrates using a Verifier type to verify content from an io.Reader stream against a digest.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/opencontainers/go-digest/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nrd := getContent()\nverifier := id.Verifier()\nio.Copy(verifier, rd)\n\nif !verifier.Verified() {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using DPanic Level Example in Go\nDESCRIPTION: Example showing incorrect usage pattern that should be replaced with DPanic level logging. Demonstrates an anti-pattern where errors trigger panics in development.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/FAQ.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n  panic(fmt.Sprintf(\"shouldn't ever get here: %v\", err))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks with GORP in Go\nDESCRIPTION: Shows how to implement lifecycle hooks in GORP to modify data before or after database operations, such as automatically updating timestamps or cascading deletes.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// implement the PreInsert and PreUpdate hooks\nfunc (i *Invoice) PreInsert(s gorp.SqlExecutor) error {\n    i.Created = time.Now().UnixNano()\n    i.Updated = i.Created\n    return nil\n}\n\nfunc (i *Invoice) PreUpdate(s gorp.SqlExecutor) error {\n    i.Updated = time.Now().UnixNano()\n    return nil\n}\n\n// You can use the SqlExecutor to cascade additional SQL\n// Take care to avoid cycles. gorp won't prevent them.\n//\n// Here's an example of a cascading delete\n//\nfunc (p *Person) PreDelete(s gorp.SqlExecutor) error {\n    query := \"delete from invoice_test where PersonId=?\"\n    \n    _, err := s.Exec(query, p.Id)\n    \n    if err != nil {\n        return err\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Fuzz Consumer\nDESCRIPTION: Creates a new Consumer instance from byte data to be used for fuzzing\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tfuzz \"github.com/AdaLogics/go-fuzz-headers\"\n)\ndata := []byte{'R', 'a', 'n', 'd', 'o', 'm'}\nf := fuzz.NewConsumer(data)\n\n```\n\n----------------------------------------\n\nTITLE: Encoding Nested Go Struct to CBOR\nDESCRIPTION: Example of encoding a 3-level nested Go struct to 1 byte CBOR using struct tags. Demonstrates the efficiency of CBOR encoding compared to JSON for certain data structures.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n// Example encoding nested struct (with omitempty tag)\n// - encoding/json:  18 byte JSON\n// - fxamacker/cbor:  1 byte CBOR\npackage main\n\nimport (\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/fxamacker/cbor/v2\"\n)\n\ntype GrandChild struct {\n\tQuux int `json:\",omitempty\"`\n}\n\ntype Child struct {\n\tBaz int        `json:\",omitempty\"`\n\tQux GrandChild `json:\",omitempty\"`\n}\n\ntype Parent struct {\n\tFoo Child `json:\",omitempty\"`\n\tBar int   `json:\",omitempty\"`\n}\n\nfunc cb() {\n\tresults, _ := cbor.Marshal(Parent{})\n\tfmt.Println(\"hex(CBOR): \" + hex.EncodeToString(results))\n\n\ttext, _ := cbor.Diagnose(results) // Diagnostic Notation\n\tfmt.Println(\"DN: \" + text)\n}\n\nfunc js() {\n\tresults, _ := json.Marshal(Parent{})\n\tfmt.Println(\"hex(JSON): \" + hex.EncodeToString(results))\n\n\ttext := string(results) // JSON\n\tfmt.Println(\"JSON: \" + text)\n}\n\nfunc main() {\n\tcb()\n\tfmt.Println(\"-------------\")\n\tjs()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting No Option Default Values for Flags\nDESCRIPTION: This snippet demonstrates how to set a NoOptDefVal for a flag, which changes the flag's behavior when set on the command line without an option. It shows setting a NoOptDefVal for an integer flag.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nflag.Lookup(\"flagname\").NoOptDefVal = \"4321\"\n```\n\n----------------------------------------\n\nTITLE: TOML Struct Tags Example\nDESCRIPTION: Shows how to use struct tags to map TOML keys to differently named struct fields\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/BurntSushi/toml/README.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nsome_key_NAME = \"wat\"\n```\n\nLANGUAGE: go\nCODE:\n```\ntype TOML struct {\n    ObscureKey string `toml:\"some_key_NAME\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing concurrent.Map in Go\nDESCRIPTION: The concurrent.Map is used as a backport of sync.Map for Go versions below 1.9, ensuring code portability. It allows for storing and retrieving key-value pairs concurrently. Requires the 'concurrent' package and uses methods like Store and Load for operation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/modern-go/concurrent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nm := concurrent.NewMap()\nm.Store(\"hello\", \"world\")\nelem, found := m.Load(\"hello\")\n// elem will be \"world\"\n// found will be true\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from Go Struct in Go\nDESCRIPTION: Shows how to create a loader for JSON data from a Go struct. This example demonstrates loading complex nested data with multiple objects that will be serialized as JSON.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Root struct {\n\tUsers []User `json:\"users\"`\n}\n\ntype User struct {\n\tName string `json:\"name\"`\n}\n\n...\n\ndata := Root{}\ndata.Users = append(data.Users, User{\"John\"})\ndata.Users = append(data.Users, User{\"Sophia\"})\ndata.Users = append(data.Users, User{\"Bill\"})\n\nloader := gojsonschema.NewGoLoader(data)\n```\n\n----------------------------------------\n\nTITLE: Basic Go Hashids Usage Example\nDESCRIPTION: Demonstrates how to create a new hashid instance with custom salt and minimum length, then encode and decode a slice of integers. Shows initialization, encoding, and decoding operations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/speps/go-hashids/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\nimport \"github.com/speps/go-hashids\"\n\nfunc main() {\n\thd := hashids.NewData()\n\thd.Salt = \"this is my salt\"\n\thd.MinLength = 30\n\th, _ := hashids.NewWithData(hd)\n\te, _ := h.Encode([]int{45, 434, 1313, 99})\n\tfmt.Println(e)\n\td, _ := h.DecodeWithError(e)\n\tfmt.Println(d)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Validation Results in Go\nDESCRIPTION: Shows how to check if validation was successful and how to process validation errors. The example demonstrates accessing the error details for reporting purposes.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n    if result.Valid() {\n    \tfmt.Printf(\"The document is valid\\n\")\n    } else {\n        fmt.Printf(\"The document is not valid. see errors :\\n\")\n        for _, err := range result.Errors() {\n        \t// Err implements the ResultError interface\n            fmt.Printf(\"- %s\\n\", err)\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Marshaling a Go struct to TOML\nDESCRIPTION: Shows how to marshal a Go struct into a TOML document using go-toml v2.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncfg := MyConfig{\n      Version: 2,\n      Name:    \"go-toml\",\n      Tags:    []string{\"go\", \"toml\"},\n}\n\nb, err := toml.Marshal(cfg)\nif err != nil {\n      panic(err)\n}\nfmt.Println(string(b))\n\n// Output:\n// Version = 2\n// Name = 'go-toml'\n// Tags = ['go', 'toml']\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron with Panic Recovery in Go\nDESCRIPTION: Example of creating a new Cron instance with panic recovery and logging configuration using functional options.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncron.New(cron.WithChain(\n    cron.Recover(logger),  // or use cron.DefaultLogger\n))\n```\n\n----------------------------------------\n\nTITLE: Manipulating and Printing SSH Config File Content in Go\nDESCRIPTION: This code demonstrates reading an SSH config file (e.g., `~/.ssh/config`), decoding it using `ssh_config.Decode`, and then iterating through its structure. It loops through each host (`cfg.Hosts`) and then through each node (directive, comment, or empty line) within that host (`host.Nodes`). It prints the host patterns and the string representation of each node. Finally, it shows how to print the entire parsed (and potentially manipulated) configuration back out using `cfg.String()`, which preserves comments and formatting.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/kevinburke/ssh_config/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nf, _ := os.Open(filepath.Join(os.Getenv(\"HOME\"), \".ssh\", \"config\"))\ncfg, _ := ssh_config.Decode(f)\nfor _, host := range cfg.Hosts {\n    fmt.Println(\"patterns:\", host.Patterns)\n    for _, node := range host.Nodes {\n        // Manipulate the nodes as you see fit, or use a type switch to\n        // distinguish between Empty, KV, and Include nodes.\n        fmt.Println(node.String())\n    }\n}\n\n// Print the config to stdout:\nfmt.Println(cfg.String())\n```\n\n----------------------------------------\n\nTITLE: Running Tests for fsnotify Project\nDESCRIPTION: Instructions for running the test suite for the fsnotify project. The basic command runs all tests, and the -short flag can be used to speed up stress tests.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Implementing ReadOnlyFs in Go\nDESCRIPTION: Demonstrates creating a read-only filesystem wrapper around an existing filesystem. Attempting to create files will result in a permission error.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfs := afero.NewReadOnlyFs(afero.NewOsFs())\n_, err := fs.Create(\"/file.txt\")\n// err = syscall.EPERM\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Print Functions in Go\nDESCRIPTION: Examples of creating custom print functions for convenience using PrintfFunc and PrintlnFunc methods.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Create a custom print function for convenience\nred := color.New(color.FgRed).PrintfFunc()\nred(\"Warning\")\nred(\"Error: %s\", err)\n\n// Mix up multiple attributes\nnotice := color.New(color.Bold, color.FgGreen).PrintlnFunc()\nnotice(\"Don't forget this...\")\n```\n\n----------------------------------------\n\nTITLE: Chaining HTTP Request Building with Builder in Go\nDESCRIPTION: Demonstrates fluent method chaining for building and executing HTTP requests using a hypothetical ReqBuilder, inspired by the lann/builder library. Each chained method configures a different aspect of the request, such as setting the URL and headers, and finally issues the request with Get(). Assumes ReqBuilder supports a fluent API and that all required fields are properly set before Get is called.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/lann/builder/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nresp := ReqBuilder.\n    Url(\"http://golang.org\").\n    Header(\"User-Agent\", \"Builder\").\n    Get()\n```\n\n----------------------------------------\n\nTITLE: Adding Database Indexes with GORP in Go\nDESCRIPTION: Shows how to add indexes on columns beyond the primary key to improve query performance, with support for different index types and uniqueness constraints.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ntype Account struct {\n\tId      int64\n\tAcctId  string // e.g. this might be a long uuid for portability\n}\n\n// indexType (the 2nd param to AddIndex call) is \"Btree\" or \"Hash\" for MySQL.\n// demonstrate adding a second index on AcctId, and constrain that field to have unique values.\ndbm.AddTable(iptab.Account{}).SetKeys(true, \"Id\").AddIndex(\"AcctIdIndex\", \"Btree\", []string{\"AcctId\"}).SetUnique(true)\n\nerr = dbm.CreateTablesIfNotExists()\ncheckErr(err, \"CreateTablesIfNotExists failed\")\n\nerr = dbm.CreateIndex()\ncheckErr(err, \"CreateIndex failed\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sonyflake Settings\nDESCRIPTION: Struct definition for Sonyflake settings. It includes StartTime, MachineID function, and CheckMachineID function for customization.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sony/sonyflake/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Settings struct {\n\tStartTime      time.Time\n\tMachineID      func() (uint16, error)\n\tCheckMachineID func(uint16) bool\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Flag with pflag\nDESCRIPTION: This example demonstrates how to define an integer flag using pflag. It creates a flag named \"flagname\" with a default value of 1234 and a help message.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from HTTP Reference in Go\nDESCRIPTION: Shows how to create a loader for a JSON schema from a web/HTTP reference. This is useful when schemas are hosted on remote servers.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nloader := gojsonschema.NewReferenceLoader(\"http://www.some_host.com/schema.json\")\n```\n\n----------------------------------------\n\nTITLE: Processing Slice Elements with Static Goroutine Pool in Go\nDESCRIPTION: Illustrates how to process each element of a slice using a static pool of goroutines. The 'conc' version significantly simplifies the implementation using the iter.ForEach function.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc process(values []int) {\n    feeder := make(chan int, 8)\n\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            for elem := range feeder {\n                handle(elem)\n            }\n        }()\n    }\n\n    for _, value := range values {\n        feeder <- value\n    }\n    close(feeder)\n    wg.Wait()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(values []int) {\n    iter.ForEach(values, handle)\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Proc Filesystem in Go\nDESCRIPTION: Example of reading and parsing files from the proc filesystem using proper handling techniques\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n    data, err := util.ReadFileNoStat(\"/proc/cpuinfo\")\n    if err != nil {\n        return err\n    }\n    reader := bytes.NewReader(data)\n    scanner := bufio.NewScanner(reader)\n```\n\n----------------------------------------\n\nTITLE: Using Standard Colors in Go\nDESCRIPTION: Examples of using the package's helper functions for standard colors to print colored text.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Print with default helper functions\ncolor.Cyan(\"Prints text in cyan.\")\n\n// A newline will be appended automatically\ncolor.Blue(\"Prints %s in blue.\", \"text\")\n\n// These are using the default foreground colors\ncolor.Red(\"We have red\")\ncolor.Magenta(\"And many others ..\")\n```\n\n----------------------------------------\n\nTITLE: Merging Structs with Mergo in Go\nDESCRIPTION: Demonstrates how to merge two structs using Mergo's Merge function.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/imdario/mergo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Merge(&dst, src); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Afero OsFs Backend in Go\nDESCRIPTION: This snippet shows how to use Afero's OsFs backend, which is a wrapper around native OS calls.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nappfs := afero.NewOsFs()\nappfs.MkdirAll(\"src/a\", 0755)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Locale in Go\nDESCRIPTION: Shows how to set a custom locale for error messages in gojsonschema\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ngojsonschema.Locale = YourCustomLocale{}\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Locking with locker in Go\nDESCRIPTION: This Go code snippet demonstrates the use of the 'locker' package to implement named locks. It includes a structure with a lock instance, where each lock operation is performed with a reference name. This allows finer control over locks specific to named resources, reducing contention on global locks. It requires the 'locker' package from the 'moby' GitHub repository. Key functions include 'Get' and 'Create', which lock and unlock by name to manage access and modification of data entries.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/moby/locker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage important\n\nimport (\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/moby/locker\"\n)\n\ntype important struct {\n\tlocks *locker.Locker\n\tdata  map[string]interface{}\n\tmu    sync.Mutex\n}\n\nfunc (i *important) Get(name string) interface{} {\n\ti.locks.Lock(name)\n\tdefer i.locks.Unlock(name)\n\treturn i.data[name]\n}\n\nfunc (i *important) Create(name string, data interface{}) {\n\ti.locks.Lock(name)\n\tdefer i.locks.Unlock(name)\n\n\ti.createImportant(data)\n\n\ti.mu.Lock()\n\ti.data[name] = data\n\ti.mu.Unlock()\n}\n\nfunc (i *important) createImportant(data interface{}) {\n\ttime.Sleep(10 * time.Second)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Code Coverage in Go\nDESCRIPTION: Commands to generate and analyze test coverage in go-toml. This helps ensure that code changes maintain or improve test coverage percentages.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test -covermode=atomic -coverprofile=coverage.out\ngo tool cover -func=coverage.out\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Timeout in OpenTelemetry Exporters\nDESCRIPTION: Demonstrates the correct way to configure batch timeout for OpenTelemetry exporters, using a time.Duration value rather than an integer. This ensures proper time unit specification.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nWithBatchTimeout(5 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: Checking Terminal Status and Getting Size in Go\nDESCRIPTION: This Go code demonstrates how to use the 'term' package to check if standard input (stdin) is a terminal using `term.IsTerminal` and, if so, retrieve its window size (height and width) using `term.GetWinsize`. It requires the standard 'log' and 'os' packages, along with 'github.com/moby/term'. The file descriptor for stdin is obtained via `os.Stdin.Fd()`, and any error during window size retrieval is logged.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/moby/term/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/moby/term\"\n)\n\nfunc main() {\n\tfd := os.Stdin.Fd()\n\tif term.IsTerminal(fd) {\n\t\tws, err := term.GetWinsize(fd)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"term.GetWinsize: %s\", err)\n\t\t}\n\t\tlog.Printf(\"%d:%d\\n\", ws.Height, ws.Width)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Retry Option for OTLP/gRPC Exporter in Go\nDESCRIPTION: Adds a new option 'otlpgrpc.WithRetry' to configure the retry policy for transient errors in the OTLP/gRPC exporter. The snippet defines the gRPC status codes considered as transient errors.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\notlpgrpc.WithRetry()\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages in GoValidator\nDESCRIPTION: Demonstrates how to specify custom error messages for validation errors using the tilde (~) separator in validation tags.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\ntype Ticket struct {\n  Id        int64     `json:\"id\"`\n  FirstName string    `json:\"firstname\" valid:\"required~First name is blank\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Negotiate Function for Content-Type Selection in Go\nDESCRIPTION: This function signature defines `Negotiate`, which takes an HTTP `Accept` header string and a slice of available content type strings (`alternatives`). It returns the most appropriate content type string based on the negotiation rules defined in RFC 2616.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc Negotiate(header string, alternatives []string) (content_type string)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron with Verbose Logging in Go\nDESCRIPTION: Example of creating a new Cron instance with verbose logging using a custom logger that wraps the standard log.Logger.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ncron.New(\n    cron.WithLogger(cron.VerbosePrintfLogger(logger)))\n```\n\n----------------------------------------\n\nTITLE: Using IsType with Struct Tags for Validation in Go\nDESCRIPTION: Example showing how to use the 'type' tag with ValidateStruct to ensure struct fields match specified types. This is particularly useful for validating map fields and interfaces.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype User\tstruct {\n  Name string      `valid:\"type(string)\"`\n  Age  int         `valid:\"type(int)\"`\n  Meta interface{} `valid:\"type(string)\"`\n}\nresult, err := govalidator.ValidateStruct(User{\"Bob\", 20, \"meta\"})\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Basic XXHash API Functions in Go\nDESCRIPTION: Core API functions of the xxhash package including Sum64 for byte slices and strings, and the Digest struct declaration.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling and Marshaling YAML in Go\nDESCRIPTION: This example demonstrates how to unmarshal YAML data into Go structs and maps, and then marshal them back into YAML format. It shows struct tag usage for custom field naming and flow style arrays.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/yaml/goyaml.v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Core xxhash Go API Functions\nDESCRIPTION: Defines the primary functions provided by the `xxhash` Go package for calculating 64-bit hashes. It includes `Sum64` for byte slices, `Sum64String` for strings, and the `Digest` type along with its constructor `New`. This outlines the basic interface for direct hashing and creating a hash state.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Metrics Namespace in Go\nDESCRIPTION: Demonstrates how to create a new metrics namespace for the Docker engine daemon with version and commit labels.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/go-metrics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nns := metrics.NewNamespace(\"engine\", \"daemon\", metrics.Labels{\n        \"version\": dockerversion.Version,\n        \"commit\":  dockerversion.GitCommit,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing HttpFs in Go\nDESCRIPTION: Creates an HTTP-compatible filesystem wrapper that can serve files over HTTP using the standard http.FileServer.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nhttpFs := afero.NewHttpFs(<ExistingFS>)\nfileserver := http.FileServer(httpFs.Dir(<PATH>))\nhttp.Handle(\"/\", fileserver)\n```\n\n----------------------------------------\n\nTITLE: Using RGB Colors in Go\nDESCRIPTION: Examples of using RGB color codes for terminals that support 24-bit colors, for both foreground and background.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncolor.RGB(255, 128, 0).Println(\"foreground orange\")\ncolor.RGB(230, 42, 42).Println(\"foreground red\")\n\ncolor.BgRGB(255, 128, 0).Println(\"background orange\")\ncolor.BgRGB(230, 42, 42).Println(\"background red\")\n```\n\n----------------------------------------\n\nTITLE: Using Translations in Go Code\nDESCRIPTION: This snippet demonstrates how to use translations in Go code, including getting translated strings, plural strings, and errors.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/kubectl/pkg/util/i18n/translations/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport pkg/i18n\n...\n// Get a translated string\ntranslated := i18n.T(\"Your message in english here\")\n\n// Get a translated plural string\ntranslated := i18n.T(\"You had % items\", items)\n\n// Translated error\nreturn i18n.Error(\"Something bad happened\")\n\n// Translated plural error\nreturn i18n.Error(\"%d bad things happened\")\n```\n\n----------------------------------------\n\nTITLE: Defining Labeled Timer Metrics in Go\nDESCRIPTION: Shows how to create a labeled timer metric for measuring container action durations with action-specific labels.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/go-metrics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncontainerActions = ns.NewLabeledTimer(\"container_actions\", \"The number of milliseconds it takes to process each container action\", \"action\")\n```\n\n----------------------------------------\n\nTITLE: Installing JSON-Patch Library in Go\nDESCRIPTION: Instructions for installing the latest version and stable versions of the jsonpatch library using Go's package manager.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/evanphx/json-patch/v5\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u gopkg.in/evanphx/json-patch.v5\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u gopkg.in/evanphx/json-patch.v4\n```\n\n----------------------------------------\n\nTITLE: Simple Transform Function in Go\nDESCRIPTION: A basic transform function for Diskv that places all keys in the base directory. This demonstrates the simplest possible implementation of a TransformFunc.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/peterbourgon/diskv/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc SimpleTransform (key string) []string {\n    return []string{}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Logrus Output with the Test Hook\nDESCRIPTION: Demonstrates how to use Logrus's built-in testing facilities to assert the presence of log messages in tests, using the test hook and a null logger.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nimport(\n  \"github.com/sirupsen/logrus\"\n  \"github.com/sirupsen/logrus/hooks/test\"\n  \"github.com/stretchr/testify/assert\"\n  \"testing\"\n)\n\nfunc TestSomething(t*testing.T){\n  logger, hook := test.NewNullLogger()\n  logger.Error(\"Helloerror\")\n\n  assert.Equal(t, 1, len(hook.Entries))\n  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)\n  assert.Equal(t, \"Helloerror\", hook.LastEntry().Message)\n\n  hook.Reset()\n  assert.Nil(t, hook.LastEntry())\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Configuration Files for Changes\nDESCRIPTION: Example of setting up a watcher to monitor configuration file changes and handle updates.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nviper.OnConfigChange(func(e fsnotify.Event) {\n\tfmt.Println(\"Config file changed:\", e.Name)\n})\nviper.WatchConfig()\n```\n\n----------------------------------------\n\nTITLE: MkdirAll API Signatures for Secure Directory Creation\nDESCRIPTION: Declarations for the MkdirAll and MkdirAllHandle functions that provide safer directory creation operations. These functions protect against race conditions that could affect standard os.MkdirAll operations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc MkdirAll(root, unsafePath string, mode int) error\nfunc MkdirAllHandle(root *os.File, unsafePath string, mode int) (*os.File, error)\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Processing with Blackfriday in Go\nDESCRIPTION: Demonstrates the simplest way to process Markdown input using Blackfriday. This snippet processes the input with a set of popular extensions enabled.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input)\n```\n\n----------------------------------------\n\nTITLE: Enabling gRPC-Go Verbose Logging with Environment Variables\nDESCRIPTION: This snippet provides shell commands to set environment variables for increasing the verbosity and severity level of logs produced by gRPC-Go. By exporting GRPC_GO_LOG_VERBOSITY_LEVEL and GRPC_GO_LOG_SEVERITY_LEVEL, developers can enable more detailed diagnostic output for debugging. This setup assumes a POSIX shell, and affects any Go binary using gRPC-Go in the current session. There are no parameters, but suitable only for development and debugging, not production deployments.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/google.golang.org/grpc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport GRPC_GO_LOG_VERBOSITY_LEVEL=99\nexport GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Sending Metrics to InfluxDB in Go\nDESCRIPTION: Demonstrates how to periodically emit metrics to InfluxDB using the InfluxDB client. Note that this functionality has been moved to an external package due to API changes.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/vrischmann/go-metrics-influxdb\"\n\ngo influxdb.InfluxDB(metrics.DefaultRegistry,\n  10e9, \n  \"127.0.0.1:8086\", \n  \"database-name\", \n  \"username\", \n  \"password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for mapstructure Decoding\nDESCRIPTION: This JSON object demonstrates a scenario where the structure might vary based on a field (like \"type\"). It serves as an example input that could be initially decoded into a `map[string]interface{}` in Go and then further processed into a specific Go struct using the `mapstructure` library.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating URLs with IsURL in Go\nDESCRIPTION: Example of validating a URL string using the GoValidator IsURL function, which checks for proper URL formatting including protocol, user credentials, domain, and path.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsURL(`http://user@pass:domain.com/path/page`))\n```\n\n----------------------------------------\n\nTITLE: Supporting Go flags with pflag\nDESCRIPTION: This example shows how to support flags defined using Go's flag package when using pflag. It demonstrates adding Go flags to the pflag CommandLine flagset.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tgoflag \"flag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n\tflag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n\tflag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: Using GinkgoHelper to simplify test helper functions in Go\nDESCRIPTION: Demonstrates how to use GinkgoHelper() to mark helper functions, eliminating the need to manually track offsets when using assertion libraries like Expect().\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc helper(model Model) {\n    GinkgoHelper()\n    Expect(model).To(BeValid())\n    Expect(model.SerialNumber).To(MatchRegexp(/[a-f0-9]*/))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Each Iterator Function for Slices in Go\nDESCRIPTION: Example of using the Each function to iterate over a slice and apply an operation to each element. The Iterator function is called for every item in the slice with the item value and index.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.Iterator = func(value interface{}, index int) {\n\tprintln(value.(int))\n}\ngovalidator.Each(data, fn)\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Go Get Timeout Error for gRPC-Go\nDESCRIPTION: This snippet captures a terminal output example showing an error produced by the go get command when the domain golang.org is not accessible. The snippet aids in identifying and explaining the nature of network or firewall-related fetch failures, assisting troubleshooting. There are no dependencies, but developers should have go installed and internet access. Input is a terminal command; output is an error message as shown.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/google.golang.org/grpc/README.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ go get -u google.golang.org/grpc\npackage google.golang.org/grpc: unrecognized import path \"google.golang.org/grpc\" (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\n```\n\n----------------------------------------\n\nTITLE: Using Custom io.Writer with Color in Go\nDESCRIPTION: Examples of using the package with custom output writers instead of the default stdout.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Use your own io.Writer output\ncolor.New(color.FgBlue).Fprintln(myWriter, \"blue color!\")\n\nblue := color.New(color.FgBlue)\nblue.Fprint(writer, \"This will print text in blue.\")\n```\n\n----------------------------------------\n\nTITLE: Structured Logging in Reconciler\nDESCRIPTION: Example of structured logging within a Reconciler function, demonstrating how to attach values to the logger.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/controller-runtime/TMP-LOGGING.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *Reconciler) Reconcile(req reconcile.Request) (reconcile.Response, error) {\n    logger := logger.WithValues(\"pod\", req.NamespacedName)\n    // do some stuff\n    logger.Info(\"starting reconciliation\")\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CBOR Encoding Modes in Go\nDESCRIPTION: Illustrates how to create and use custom encoding modes with specific settings. Custom modes have immutable settings once created and are safe for concurrent use.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// Create encoding mode.\nopts := cbor.CoreDetEncOptions()   // use preset options as a starting point\nopts.Time = cbor.TimeUnix          // change any settings if needed\nem, err := opts.EncMode()          // create an immutable encoding mode\n\n// Reuse the encoding mode. It is safe for concurrent use.\n\n// API matches encoding/json.\nb, err := em.Marshal(v)            // encode v to []byte b\nencoder := em.NewEncoder(w)        // create encoder with io.Writer w\nerr := encoder.Encode(v)           // encode v to io.Writer w\n```\n\n----------------------------------------\n\nTITLE: Updating Test Fixtures in Bash\nDESCRIPTION: Shell commands for managing test fixtures in the procfs library. Removes existing fixtures and recreates them using make commands.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/prometheus/procfs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf testdata/fixtures\nmake test\n```\n\n----------------------------------------\n\nTITLE: Struct Fuzzing with Nil Pointer Control\nDESCRIPTION: Example of fuzzing a struct with pointer fields and customized nil probability.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/gofuzz/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nf := fuzz.New().NilChance(.5)\nvar fancyStruct struct {\n  A, B, C, D *string\n}\nf.Fuzz(&fancyStruct) // About half the pointers should be set.\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Config Struct in Go\nDESCRIPTION: Defines a basic configuration struct pattern with unexported fields. Used to contain configuration options for a specific component or package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// config contains configuration options for a thing.\ntype config struct {\n\t// options ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side gRPC Prometheus Interceptors in Go\nDESCRIPTION: Setup for client-side Prometheus monitoring interceptors in a gRPC client. Shows how to initialize a client connection with unary and stream interceptors for metrics collection.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclientConn, err = grpc.Dial(\n    address,\n    grpc.WithUnaryInterceptor(grpc_prometheus.UnaryClientInterceptor),\n    grpc.WithStreamInterceptor(grpc_prometheus.StreamClientInterceptor)\n)\nclient = pb_testproto.NewTestServiceClient(clientConn)\nresp, err := client.PingEmpty(s.ctx, &myservice.Request{Msg: \"hello\"})\n```\n\n----------------------------------------\n\nTITLE: Reusing Schema for Multiple Validations in Go\nDESCRIPTION: Example of loading a schema once and using it for multiple document validations, which is more efficient for repeated validations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nschema, err := gojsonschema.NewSchema(schemaLoader)\n...\nresult1, err := schema.Validate(documentLoader1)\n...\nresult2, err := schema.Validate(documentLoader2)\n...\n// etc ...\n```\n\n----------------------------------------\n\nTITLE: Installing gojsonschema via Go Module\nDESCRIPTION: Command to install the gojsonschema library using the Go module system. This is the primary way to add the library as a dependency to your Go project.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/xeipuuv/gojsonschema\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Flag Name Normalization\nDESCRIPTION: This example shows how to set a custom flag name normalization function. It demonstrates normalizing flag names by replacing certain separators with dots.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tfrom := []string{\"-\", \"_\"}\n\tto := \".\"\n\tfor _, sep := range from {\n\t\tname = strings.Replace(name, sep, to, -1)\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Importing Cobra in Go Application\nDESCRIPTION: This snippet demonstrates how to import the Cobra library in a Go application.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/cobra/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/cobra\"\n```\n\n----------------------------------------\n\nTITLE: Compiling Schema Using ReferenceLoader in Go\nDESCRIPTION: Example of compiling a schema using a ReferenceLoader that references a previously loaded schema.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nerr = sl.AddSchemas(loader3)\nschema, err := sl.Compile(gojsonschema.NewReferenceLoader(\"http://some_host.com/main.json\"))\n```\n\n----------------------------------------\n\nTITLE: Inserting Colors into Non-Colored Strings in Go\nDESCRIPTION: Examples of using SprintFunc to create functions that return colored strings which can be inserted into regular output.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Create SprintXxx functions to mix strings with other non-colorized strings:\nyellow := color.New(color.FgYellow).SprintFunc()\nred := color.New(color.FgRed).SprintFunc()\nfmt.Printf(\"This is a %s and this is %s.\\n\", yellow(\"warning\"), red(\"error\"))\n\ninfo := color.New(color.FgWhite, color.BgGreen).SprintFunc()\nfmt.Printf(\"This %s rocks!\\n\", info(\"package\"))\n\n// Use helper functions\nfmt.Println(\"This\", color.RedString(\"warning\"), \"should be not neglected.\")\nfmt.Printf(\"%v %v\\n\", color.GreenString(\"Info:\"), \"an important message.\")\n\n// Windows supported too! Just don't forget to change the output to color.Output\nfmt.Fprintf(color.Output, \"Windows support: %s\", color.GreenString(\"PASS\"))\n```\n\n----------------------------------------\n\nTITLE: Basic Go Error Handling Pattern\nDESCRIPTION: Shows the traditional error handling idiom in Go, demonstrating the basic nil check pattern.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Transformer for time.Time in Mergo\nDESCRIPTION: Demonstrates how to create and use a custom transformer for merging time.Time values with Mergo.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/imdario/mergo/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/imdario/mergo\"\n        \"reflect\"\n        \"time\"\n)\n\ntype timeTransformer struct {\n}\n\nfunc (t timeTransformer) Transformer(typ reflect.Type) func(dst, src reflect.Value) error {\n\tif typ == reflect.TypeOf(time.Time{}) {\n\t\treturn func(dst, src reflect.Value) error {\n\t\t\tif dst.CanSet() {\n\t\t\t\tisZero := dst.MethodByName(\"IsZero\")\n\t\t\t\tresult := isZero.Call([]reflect.Value{})\n\t\t\t\tif result[0].Bool() {\n\t\t\t\t\tdst.Set(src)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\ntype Snapshot struct {\n\tTime time.Time\n\t// ...\n}\n\nfunc main() {\n\tsrc := Snapshot{time.Now()}\n\tdest := Snapshot{}\n\tmergo.Merge(&dest, src, mergo.WithTransformers(timeTransformer{}))\n\tfmt.Println(dest)\n\t// Will print\n\t// { 2018-01-12 01:15:00 +0000 UTC m=+0.000000001 }\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Metrics to Prevent Memory Leaks in Go\nDESCRIPTION: Demonstrates how to unregister short-lived meters and timers to prevent memory leaks. This is important for metrics that are created temporarily.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Will call Stop() on the Meter to allow for garbage collection\nmetrics.Unregister(\"quux\")\n// Or similarly for a Timer that embeds a Meter\nmetrics.Unregister(\"bang\")\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from JSON String in Go\nDESCRIPTION: Example of loading a JSON schema directly from a string using gojsonschema's StringLoader.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nloader := gojsonschema.NewStringLoader(`{\"type\": \"string\"}`)\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with GORP in Go\nDESCRIPTION: Demonstrates how to insert records into a database using GORP. Shows how primary keys are automatically populated after insertion when SetKeys is configured.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Must declare as pointers so optional callback hooks\n// can operate on your data, not copies\ninv1 := &Invoice{0, 100, 200, \"first order\", 0}\ninv2 := &Invoice{0, 100, 200, \"second order\", 0}\n\n// Insert your rows\nerr := dbmap.Insert(inv1, inv2)\n\n// Because we called SetKeys(true) on Invoice, the Id field\n// will be populated after the Insert() automatically\nfmt.Printf(\"inv1.Id=%d  inv2.Id=%d\\n\", inv1.Id, inv2.Id)\n```\n\n----------------------------------------\n\nTITLE: Parsing TraceState from Header String in Go\nDESCRIPTION: Adds a new function 'ParseTraceState' to the trace package for decoding a TraceState from a tracestate header string value.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nParseTraceState()\n```\n\n----------------------------------------\n\nTITLE: Map Fuzzing with Controlled Elements\nDESCRIPTION: Shows how to fuzz a map with specific constraints on nil chances and number of elements.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/gofuzz/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nf := fuzz.New().NilChance(0).NumElements(1, 1)\nvar myMap map[ComplexKeyType]string\nf.Fuzz(&myMap) // myMap will have exactly one element.\n```\n\n----------------------------------------\n\nTITLE: Creating Resource with Schema URL in Go\nDESCRIPTION: Changes the 'NewWithAttributes' function in the resource package to require a schema URL. The old functionality is available as 'NewSchemaless'.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nresource.NewWithAttributes(schemaURL, ...)\n```\n\n----------------------------------------\n\nTITLE: Verifying Content Digest in Go\nDESCRIPTION: Shows how to verify if content matches an existing digest by comparing digest values.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/opencontainers/go-digest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif id != digest.FromBytes([]byte(\"my content\")) {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Registry Version\nDESCRIPTION: Command to verify the registry installation by checking its version.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ $GOPATH/bin/registry --version\n$GOPATH/bin/registry github.com/docker/distribution v2.0.0-alpha.1+unknown\n```\n\n----------------------------------------\n\nTITLE: Compiling and Using Schema with References in Go\nDESCRIPTION: Example of compiling a main schema that references other schemas and validating a document against it.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n\tloader3 := gojsonschema.NewStringLoader(`{\n\t\t\"$id\" : \"http://some_host.com/main.json\",\n\t\t\"allOf\" : [\n\t\t\t{ \"$ref\" : \"http://some_host.com/string.json\" },\n\t\t\t{ \"$ref\" : \"http://some_host.com/maxlength.json\" }\n\t\t]\n\t}`)\n\n\tschema, err := sl.Compile(loader3)\n\n\tdocumentLoader := gojsonschema.NewStringLoader(`\"hello world\"`)\n\n\tresult, err := schema.Validate(documentLoader)\n```\n\n----------------------------------------\n\nTITLE: Context Handling Changes Example in Go\nDESCRIPTION: Example showing the differences in context handling between v0.1.0 and v1.0.0 of the gettext-go library.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/chai2010/gettext-go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tgettext.Gettext(\"hello\")          \n\t// v0.1.0 => gettext.PGettext(\"main.main\", \"hello\")\n\t// v1.0.0 => gettext.PGettext(\"\", \"hello\")\n\n\tgettext.DGettext(\"domain\", \"hello\")\n\t// v0.1.0 => gettext.DPGettext(\"domain\", \"main.main\", \"hello\")\n\t// v1.0.0 => gettext.DPGettext(\"domain\", \"\", \"hello\")\n\n\tgettext.NGettext(\"domain\", \"hello\", \"hello2\", n)\n\t// v0.1.0 => gettext.PNGettext(\"domain\", \"main.main\", \"hello\", \"hello2\", n)\n\t// v1.0.0 => gettext.PNGettext(\"domain\", \"\", \"hello\", \"hello2\", n)\n\n\tgettext.DNGettext(\"domain\", \"hello\", \"hello2\", n)\n\t// v0.1.0 => gettext.DPNGettext(\"domain\", \"main.main\", \"hello\", \"hello2\", n)\n\t// v1.0.0 => gettext.DPNGettext(\"domain\", \"\", \"hello\", \"hello2\", n)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Labeled Timer Metrics in Go\nDESCRIPTION: Demonstrates how to use a labeled timer metric to record the duration of a specific container action.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/go-metrics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncontainerActions.WithValues(\"create\").UpdateSince(start)\n```\n\n----------------------------------------\n\nTITLE: Custom FlagValueSet Implementation in Go\nDESCRIPTION: Example of implementing the FlagValueSet interface for group flag binding in Viper.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype myFlagSet struct {\n\tflags []myFlag\n}\n\nfunc (f myFlagSet) VisitAll(fn func(FlagValue)) {\n\tfor _, flag := range flags {\n\t\tfn(flag)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Gotenv Usage Example\nDESCRIPTION: Complete example showing how to load and use environment variables in a Go application\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/subosito/gotenv\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc init() {\n\tgotenv.Load()\n}\n\nfunc main() {\n\tlog.Println(os.Getenv(\"APP_ID\"))     // \"1234567\"\n\tlog.Println(os.Getenv(\"APP_SECRET\")) // \"abcdef\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fprint Functions in Go\nDESCRIPTION: Examples of creating custom fprint functions that work with specific writers using FprintfFunc and FprintlnFunc methods.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nblue := color.New(color.FgBlue).FprintfFunc()\nblue(myWriter, \"important notice: %s\", stars)\n\n// Mix up with multiple attributes\nsuccess := color.New(color.Bold, color.FgGreen).FprintlnFunc()\nsuccess(myWriter, \"Don't forget this...\")\n```\n\n----------------------------------------\n\nTITLE: Path Prefix Subrouters in Gorilla Mux\nDESCRIPTION: Demonstrates how path prefixes in subrouters affect the final route paths, with inner routes being relative to the subrouter's path prefix.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\ns := r.PathPrefix(\"/products\").Subrouter()\n// \"/products/\"\ns.HandleFunc(\"/\", ProductsHandler)\n// \"/products/{key}/\"\ns.HandleFunc(\"/{key}/\", ProductHandler)\n// \"/products/{key}/details\"\ns.HandleFunc(\"/{key}/details\", ProductDetailsHandler)\n```\n\n----------------------------------------\n\nTITLE: Pointer Override Merging in Go\nDESCRIPTION: Example showing how to merge structs with pointer fields using WithOverride and WithoutDereference options.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/dario.cat/mergo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n)\n\ntype Foo struct {\n\tA *string\n\tB int64\n}\n\nfunc main() {\n\tfirst := \"first\"\n\tsecond := \"second\"\n\tsrc := Foo{\n\t\tA: &first,\n\t\tB: 2,\n\t}\n\n\tdest := Foo{\n\t\tA: &second,\n\t\tB: 1,\n\t}\n\n\tmergo.Merge(&dest, src, mergo.WithOverride, mergo.WithoutDereference)\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON Documents for Structural Equality in Go\nDESCRIPTION: Example demonstrating how to compare JSON documents for structural equality using jsonpatch.Equal(), which ignores whitespace differences and key-value ordering.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/evanphx/json-patch/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\tsimilar := []byte(`\n\t\t{\n\t\t\t\"age\": 24,\n\t\t\t\"height\": 3.21,\n\t\t\t\"name\": \"John\"\n\t\t}\n\t`)\n\tdifferent := []byte(`{\"name\": \"Jane\", \"age\": 20, \"height\": 3.37}`)\n\n\tif jsonpatch.Equal(original, similar) {\n\t\tfmt.Println(`\"original\" is structurally equal to \"similar\"`)\n\t}\n\n\tif !jsonpatch.Equal(original, different) {\n\t\tfmt.Println(`\"original\" is _not_ structurally equal to \"different\"`)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing copystructure via go get - Shell\nDESCRIPTION: Installs the copystructure library for Go projects using the standard go get command. This is a prerequisite for using any of the package's deep copy functions. The command fetches and installs github.com/mitchellh/copystructure in the local Go workspace.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/mitchellh/copystructure/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mitchellh/copystructure\n```\n\n----------------------------------------\n\nTITLE: Redirecting klog Output in Go\nDESCRIPTION: Shows how to redirect all klog output to a custom io.Writer using the SetOutput() method.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/klog/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nklog.SetOutput()\n```\n\n----------------------------------------\n\nTITLE: Importing Go JOSE v4 Package\nDESCRIPTION: Shows how to import the main go-jose v4 package for use in Go applications. This is the import statement for the current stable version of the library.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-jose/go-jose/v4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/go-jose/go-jose/v4\"\n```\n\n----------------------------------------\n\nTITLE: Generating All Schema Files and Metadata with Make\nDESCRIPTION: Executes the `all` target in the Makefile. This fetches the OpenAPI schema for the Kubernetes version specified by `API_VERSION` (using Kind version `KIND_VERSION`), generates the corresponding `swagger.go` for the Kubernetes API, and updates the `kubernetesapi/openapiinfo.go` file.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Line Flags with pflag\nDESCRIPTION: This snippet shows how to parse the command line into defined flags using pflag's Parse() function.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nflag.Parse()\n```\n\n----------------------------------------\n\nTITLE: Mapping Struct to Map with Mergo in Go\nDESCRIPTION: Illustrates how to map a struct to a map[string]interface{} using Mergo's Map function.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/imdario/mergo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Map(&dst, srcMap); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Registry Docker Credential Helpers (JSON)\nDESCRIPTION: This JSON example shows the 'credHelpers' key in Docker's config.json, mapping specific registries to their respective credential helpers. Each mapping causes Docker to invoke the appropriate docker-credential-* helper executable per registry. The input is a registry-to-helper mapping; the output informs Docker which binary to use for which host.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"credHelpers\": {\n\t\t\"gcr.io\": \"gcr\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Multierror Only If Errors Exist in Go\nDESCRIPTION: Shows how to use the ErrorOrNil function to return an error implementation only if there are actual errors to return, otherwise returning nil.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n```\n\n----------------------------------------\n\nTITLE: XXHash Usage Example in Go\nDESCRIPTION: Example demonstrating how to use the xxhash package to compute a hash from a reader interface. Shows basic initialization and usage pattern.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/OneOfOne/xxhash/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nh := xxhash.New64()\n// r, err := os.Open(\"......\")\n// defer f.Close()\nr := strings.NewReader(F)\nio.Copy(h, r)\nfmt.Println(\"xxhash.Backend:\", xxhash.Backend)\nfmt.Println(\"File checksum:\", h.Sum64())\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with GORP in Go\nDESCRIPTION: Demonstrates how to delete database records using GORP, leveraging primary keys defined on structs.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ncount, err := dbmap.Delete(inv1)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Client with Known Hosts in Go\nDESCRIPTION: Example of creating an SSH client configuration with known hosts support using the knownhosts package. Demonstrates how to set up host key callback and algorithms.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/skeema/knownhosts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nimport (\n\t\"golang.org/x/crypto/ssh\"\n\t\"github.com/skeema/knownhosts\"\n)\n\nfunc sshConfigForHost(hostWithPort string) (*ssh.ClientConfig, error) {\n\tkh, err := knownhosts.NewDB(\"/home/myuser/.ssh/known_hosts\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tconfig := &ssh.ClientConfig{\n\t\tUser:              \"myuser\",\n\t\tAuth:              []ssh.AuthMethod{ /* ... */ },\n\t\tHostKeyCallback:   kh.HostKeyCallback(),\n\t\tHostKeyAlgorithms: kh.HostKeyAlgorithms(hostWithPort),\n\t}\n\treturn config, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Template Functions Definition\nDESCRIPTION: Demonstrates how to define custom template functions for error message formatting\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ngojsonschema.ErrorTemplateFuncs = map[string]interface{}{\n\t\"allcaps\": func(s string) string {\n\t\treturn strings.ToUpper(s)\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Data Structure Tree Rendering\nDESCRIPTION: Example showing how to create and render a complex tree structure with multiple branches and nodes.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xlab/treeprint/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // to add a custom root name use `treeprint.NewWithRoot()` instead\n    tree := treeprint.New()\n\n    // create a new branch in the root\n    one := tree.AddBranch(\"one\")\n\n    // add some nodes\n    one.AddNode(\"subnode1\").AddNode(\"subnode2\")\n\n    // create a new sub-branch\n    one.AddBranch(\"two\").\n        AddNode(\"subnode1\").AddNode(\"subnode2\"). // add some nodes\n        AddBranch(\"three\"). // add a new sub-branch\n        AddNode(\"subnode1\").AddNode(\"subnode2\") // add some nodes too\n\n    // add one more node that should surround the inner branch\n    one.AddNode(\"subnode3\")\n\n    // add a new node to the root\n    tree.AddNode(\"outernode\")\n\n    fmt.Println(tree.String())\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Fuzzing in Go\nDESCRIPTION: Demonstrates how to use gofuzz to populate a single integer variable with random values.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/gofuzz/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nf := fuzz.New()\nvar myInt int\nf.Fuzz(&myInt) // myInt gets a random value.\n```\n\n----------------------------------------\n\nTITLE: Using Transport Package to List Tags from Docker Registry in Go\nDESCRIPTION: This example demonstrates how to use the transport package to authenticate with a container registry and list tags for a repository. It handles authentication through the default keychain, creates an authorized HTTP client, and processes the response with error handling.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/v1/remote/transport/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/google/go-containerregistry/pkg/authn\"\n\t\"github.com/google/go-containerregistry/pkg/name\"\n\t\"github.com/google/go-containerregistry/pkg/v1/remote/transport\"\n)\n\nfunc main() {\n\trepo, err := name.NewRepository(\"gcr.io/google-containers/pause\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Fetch credentials based on your docker config file, which is $HOME/.docker/config.json or $DOCKER_CONFIG.\n\tauth, err := authn.DefaultKeychain.Resolve(repo.Registry)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Construct an http.Client that is authorized to pull from gcr.io/google-containers/pause.\n\tscopes := []string{repo.Scope(transport.PullScope)}\n\tt, err := transport.New(repo.Registry, auth, http.DefaultTransport, scopes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tclient := &http.Client{Transport: t}\n\n\t// Make the actual request.\n\tresp, err := client.Get(\"https://gcr.io/v2/google-containers/pause/tags/list\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Assert that we get a 200, otherwise attempt to parse body as a structured error.\n\tif err := transport.CheckError(resp, http.StatusOK); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Write the response to stdout.\n\tif _, err := io.Copy(os.Stdout, resp.Body); err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Float16 Package in Go\nDESCRIPTION: Demonstrates how to install the float16 package and use its basic conversion functions. It shows converting float32 to float16, float16 to float32, and using PrecisionFromfloat32 for efficient conversion checks.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/x448/float16/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Convert float32 to float16\npi := float32(math.Pi)\npi16 := float16.Fromfloat32(pi)\n\n// Convert float16 to float32\npi32 := pi16.Float32()\n\n// PrecisionFromfloat32() is faster than the overhead of calling a function.\n// This example only converts if there's no data loss and input is not a subnormal.\nif float16.PrecisionFromfloat32(pi) == float16.PrecisionExact {\n    pi16 := float16.Fromfloat32(pi)\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Merge Patches in Go\nDESCRIPTION: Example of combining two JSON merge patch documents into a single merge patch using the jsonpatch.MergeMergePatches function.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\n\tnameAndHeight := []byte(`{\"height\":null,\"name\":\"Jane\"}`)\n\tageAndEyes := []byte(`{\"age\":4.23,\"eyes\":\"blue\"}`)\n\n\t// Let's combine these merge patch documents...\n\tcombinedPatch, err := jsonpatch.MergeMergePatches(nameAndHeight, ageAndEyes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Apply each patch individual against the original document\n\twithoutCombinedPatch, err := jsonpatch.MergePatch(original, nameAndHeight)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\twithoutCombinedPatch, err = jsonpatch.MergePatch(withoutCombinedPatch, ageAndEyes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Apply the combined patch against the original document\n\n\twithCombinedPatch, err := jsonpatch.MergePatch(original, combinedPatch)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Do both result in the same thing? They should!\n\tif jsonpatch.Equal(withCombinedPatch, withoutCombinedPatch) {\n\t\tfmt.Println(\"Both JSON documents are structurally the same!\")\n\t}\n\n\tfmt.Printf(\"combined merge patch: %s\", combinedPatch)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Default CA Behavior for OTLP gRPC Exporters in Go SDK\nDESCRIPTION: Changes the default behavior of OTLP gRPC exporters to use the host's root CA set if none are provided and insecure mode is not specified.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nThe `go.opentelemetry.io/otel/exporter/otel/*` gRPC exporters now default to using the host's root CA set if none are provided by the user and `WithInsecure` is not specified.\n```\n\n----------------------------------------\n\nTITLE: Creating New Config with Options in Go\nDESCRIPTION: Function to create a new configuration instance with default values and applying provided options. Includes validation capabilities.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// newConfig returns an appropriately configured config.\nfunc newConfig(options ...Option) config {\n\t// Set default values for config.\n\tconfig := config{/* […] */}\n\tfor _, option := range options {\n\t\tconfig = option.apply(config)\n\t}\n\t// Perform any validation here.\n\treturn config\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Crypto Functions in Go\nDESCRIPTION: Adds new cryptographic functions that use secure random number generation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ncryptographic functions that use secure random (see fe1de12)\n```\n\n----------------------------------------\n\nTITLE: Installing Gorilla Mux with Go Modules\nDESCRIPTION: Command to install the gorilla/mux package using Go's package management system.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/gorilla/mux\n```\n\n----------------------------------------\n\nTITLE: Installing Custom HTTPS Transport Protocol in Go-Git\nDESCRIPTION: Replaces the built-in HTTPS transport implementation with a custom one that skips TLS verification, useful for testing or accessing servers with self-signed certificates.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-git/v5/EXTENDING.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\tcustomClient := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t},\n\t}\n\n\tclient.InstallProtocol(\"https\", githttp.NewClient(customClient))\n```\n\n----------------------------------------\n\nTITLE: Overriding Standard Library Logger with Logrus\nDESCRIPTION: Shows how to replace the standard library's logger with Logrus, allowing all standard log output to use Logrus's formatting and hooks.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nlogger := logrus.New()\nlogger.Formatter = &logrus.JSONFormatter{}\n\n// Use logrus for standard log output\n// Note that `log` here references stdlib's log\n// Not logrus imported under the name `log`.\nlog.SetOutput(logger.Writer())\n```\n\n----------------------------------------\n\nTITLE: Invoking Docker Credential Helper for Alternate Registry (bash)\nDESCRIPTION: This bash command performs the same credential retrieval as above, but targets a different registry (eu.gcr.io). The mechanism and output are the same: registry sent via STDIN, JSON credentials via STDOUT. Used when mapping multiple domains to the same credential helper.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"eu.gcr.io\" | docker-credential-gcr get\n{\"Username\":\"_token\",\"Secret\":\"<long access token>\"}\n```\n\n----------------------------------------\n\nTITLE: Using an Extracted Viper Sub-tree in a Go Function\nDESCRIPTION: This Go snippet shows a function `NewCache` that accepts a `*Viper` instance, intended to be a sub-tree extracted using `viper.Sub()`. Inside the function, configuration keys like `\"max-items\"` and `\"item-size\"` can be accessed directly on the passed Viper instance `v` without needing the parent key prefix (e.g., `\"cache.cache1\"`).\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nfunc NewCache(v *Viper) *Cache {\n\treturn &Cache{\n\t\tMaxItems: v.GetInt(\"max-items\"),\n\t\tItemSize: v.GetInt(\"item-size\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Afero Filesystem in Go\nDESCRIPTION: This snippet shows how to use Afero's filesystem abstraction to open a file, replacing the standard OS package call.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nAppFs.Open(\"/tmp/foo\")\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using go-gitignore in Go\nDESCRIPTION: This snippet demonstrates how to import the go-gitignore library, create a new GitIgnore object from a gitignore file, and use it to match against file paths. It requires the go-gitignore package to be installed. Parameters include the path to the gitignore file, the path to the file to check, and a boolean indicating if the path is a directory. The Match function returns whether the path should be ignored based on the loaded gitignore patterns. Input: file path and directory flag. Output: match status.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/monochromegane/go-gitignore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngitignore, _ := gitignore.NewGitIgnore(\"/path/to/gitignore\")\n\npath := \"/path/to/file\"\nisDir := false\ngitignore.Match(path, isDir)\n```\n\n----------------------------------------\n\nTITLE: Math Operations in CEL\nDESCRIPTION: Examples of using math.greatest and math.least functions to find maximum and minimum values in numeric collections.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_2\n\nLANGUAGE: cel\nCODE:\n```\nmath.greatest(1)      // 1\nmath.greatest(1u, 2u) // 2u\nmath.greatest(-42.0, -21.5, -100.0)   // -21.5\nmath.greatest([-42.0, -21.5, -100.0]) // -21.5\n\nmath.least(1)      // 1\nmath.least(1u, 2u) // 1u\nmath.least(-42.0, -21.5, -100.0)   // -100.0\nmath.least([-42.0, -21.5, -100.0]) // -100.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with Memory Storage in Go\nDESCRIPTION: Creates a new Git repository using the memory storage implementation, which stores all Git data in memory.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-git/v5/EXTENDING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\tr, err := git.Init(memory.NewStorage(), nil)\n```\n\n----------------------------------------\n\nTITLE: Parse and StrictParse Usage\nDESCRIPTION: Example showing how to use Parse and StrictParse functions with io.Reader\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npairs := gotenv.Parse(strings.NewReader(\"FOO=test\\nBAR=$FOO\"))\n// gotenv.Env{\"FOO\": \"test\", \"BAR\": \"test\"}\n\npairs, err := gotenv.StrictParse(strings.NewReader(`FOO=\"bar\"`))\n// gotenv.Env{\"FOO\": \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Using AsError with Error Wrapping in Go\nDESCRIPTION: Example showing how to access the underlying *Error type after v1.3.0 breaking changes. Demonstrates the use of AsError method together with Wrap to maintain access to ErrorStack functionality.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-errors/errors/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// before\nerrors.New(err).ErrorStack()\n// after\nerrors.AsError(errors.Wrap(err)).ErrorStack()\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel Options in YAML\nDESCRIPTION: Example of setting Sentinel configuration options in the values.yaml file, showing how to set the down-after-milliseconds parameter.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n    down-after-milliseconds: 30000\n```\n\n----------------------------------------\n\nTITLE: Disabling/Enabling Colors Programmatically in Go\nDESCRIPTION: Examples of disabling colors globally with a command-line flag and enabling/disabling colors for individual color objects.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar flagNoColor = flag.Bool(\"no-color\", false, \"Disable color output\")\n\nif *flagNoColor {\n\tcolor.NoColor = true // disables colorized output\n}\n```\n\n----------------------------------------\n\nTITLE: Installing conc Package\nDESCRIPTION: Command to install the conc package using go get\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/sourcegraph/conc\n```\n\n----------------------------------------\n\nTITLE: Reading Sys Filesystem in Go\nDESCRIPTION: Example of reading single values from the sys filesystem using the appropriate utility function\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n    data, err := util.SysReadFile(\"/sys/class/power_supply/BAT0/capacity\")\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History Documentation\nDESCRIPTION: Comprehensive changelog entries documenting version changes, security updates, and feature modifications for a JWT library. Includes security vulnerability fixes, API changes, and implementation improvements.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-jose/go-jose/v4/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v4.0.4\n\n## Fixed\n\n - Reverted \"Allow unmarshalling JSONWebKeySets with unsupported key types\" as a\n   breaking change. See #136 / #137.\n\n# v4.0.3\n\n## Changed\n\n - Allow unmarshalling JSONWebKeySets with unsupported key types (#130)\n - Document that OpaqueKeyEncrypter can't be implemented (for now) (#129)\n - Dependency updates\n\n# v4.0.2\n\n## Changed\n\n - Improved documentation of Verify() to note that JSONWebKeySet is a supported\n   argument type (#104)\n - Defined exported error values for missing x5c header and unsupported elliptic\n   curves error cases (#117)\n\n# v4.0.1\n\n## Fixed\n\n - An attacker could send a JWE containing compressed data that used large\n   amounts of memory and CPU when decompressed by `Decrypt` or `DecryptMulti`.\n   Those functions now return an error if the decompressed data would exceed\n   250kB or 10x the compressed size (whichever is larger). Thanks to\n   Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj)\n   for reporting.\n\n# v4.0.0\n\nThis release makes some breaking changes in order to more thoroughly\naddress the vulnerabilities discussed in [Three New Attacks Against JSON Web\nTokens][1], \"Sign/encrypt confusion\", \"Billion hash attack\", and \"Polyglot\ntoken\".\n\n## Changed\n\n - Limit JWT encryption types (exclude password or public key types) (#78)\n - Enforce minimum length for HMAC keys (#85)\n - jwt: match any audience in a list, rather than requiring all audiences (#81)\n - jwt: accept only Compact Serialization (#75)\n - jws: Add expected algorithms for signatures (#74)\n - Require specifying expected algorithms for ParseEncrypted,\n   ParseSigned, ParseDetached, jwt.ParseEncrypted, jwt.ParseSigned,\n   jwt.ParseSignedAndEncrypted (#69, #74)\n   - Usually there is a small, known set of appropriate algorithms for a program\n     to use and it's a mistake to allow unexpected algorithms. For instance the\n     \"billion hash attack\" relies in part on programs accepting the PBES2\n     encryption algorithm and doing the necessary work even if they weren't\n     specifically configured to allow PBES2.\n - Revert \"Strip padding off base64 strings\" (#82)\n  - The specs require base64url encoding without padding.\n - Minimum supported Go version is now 1.21\n\n## Added\n\n - ParseSignedCompact, ParseSignedJSON, ParseEncryptedCompact, ParseEncryptedJSON.\n   - These allow parsing a specific serialization, as opposed to ParseSigned and\n     ParseEncrypted, which try to automatically detect which serialization was\n     provided. It's common to require a specific serialization for a specific\n     protocol - for instance JWT requires Compact serialization.\n\n[1]: https://i.blackhat.com/BH-US-23/Presentations/US-23-Tervoort-Three-New-Attacks-Against-JSON-Web-Tokens.pdf\n\n# v3.0.2\n\n## Fixed\n\n - DecryptMulti: handle decompression error (#19)\n\n## Changed\n\n - jwe/CompactSerialize: improve performance (#67)\n - Increase the default number of PBKDF2 iterations to 600k (#48)\n - Return the proper algorithm for ECDSA keys (#45)\n\n## Added\n\n - Add Thumbprint support for opaque signers (#38)\n\n# v3.0.1\n\n## Fixed\n\n - Security issue: an attacker specifying a large \"p2c\" value can cause\n   JSONWebEncryption.Decrypt and JSONWebEncryption.DecryptMulti to consume large\n   amounts of CPU, causing a DoS. Thanks to Matt Schwager (@mschwager) for the\n   disclosure and to Tom Tervoort for originally publishing the category of attack.\n   https://i.blackhat.com/BH-US-23/Presentations/US-23-Tervoort-Three-New-Attacks-Against-JSON-Web-Tokens.pdf\n```\n\n----------------------------------------\n\nTITLE: Route Priority and Order in Gorilla Mux\nDESCRIPTION: Shows how the order of route registration affects matching priority, with the first matching route being selected when multiple routes could match.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/specific\", specificHandler)\nr.PathPrefix(\"/\").Handler(catchAllHandler)\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Feature Branch\nDESCRIPTION: Workflow commands for creating a feature branch, making changes, and pushing to your fork for pull request submission.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stateless Gzip Compression with Buffer in Go\nDESCRIPTION: Example showing how to set up stateless gzip compression with a buffered writer to control memory usage. Uses a 4KB buffer to minimize memory footprint when the writer is idle.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/klauspost/compress/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\t// replace 'ioutil.Discard' with your output.\n\tgzw, err := gzip.NewWriterLevel(ioutil.Discard, gzip.StatelessCompression)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer gzw.Close()\n\n\tw := bufio.NewWriterSize(gzw, 4096)\n\tdefer w.Flush()\n\t\n\t// Write to 'w'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies for KubeSphere\nDESCRIPTION: This code snippet specifies the Go module dependencies for the KubeSphere project, including the Kubernetes API server, CLI runtime, and client-go packages. It lists required Go version 1.22.0 and specifies exact versions for dependencies.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/modules.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n# k8s.io/cli-runtime v0.31.1\n## explicit; go 1.22.0\nk8s.io/cli-runtime/pkg/genericclioptions\nk8s.io/cli-runtime/pkg/genericiooptions\nk8s.io/cli-runtime/pkg/printers\nk8s.io/cli-runtime/pkg/resource\n# k8s.io/client-go v0.31.2 => k8s.io/client-go v0.31.2\n```\n\n----------------------------------------\n\nTITLE: Setting Required Fields Configuration in Go\nDESCRIPTION: Demonstrates how to configure GoValidator to require validation tags for all fields by default using an init function.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\nfunc init() {\n  govalidator.SetFieldsRequiredByDefault(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Histogram Metrics for gRPC\nDESCRIPTION: Code to enable histogram metrics for measuring RPC latency distributions. This is disabled by default to avoid high cardinality metrics.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngrpc_prometheus.EnableHandlingTimeHistogram()\n```\n\n----------------------------------------\n\nTITLE: SQL Logging with GORP in Go\nDESCRIPTION: Shows how to enable SQL statement logging in GORP. Demonstrates using Go's built-in logger or implementing a custom GorpLogger interface.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Will log all SQL statements + args as they are run\n// The first arg is a string prefix to prepend to all log messages\ndbmap.TraceOn(\"[gorp]\", log.New(os.Stdout, \"myapp:\", log.Lmicroseconds))\n\n// Turn off tracing\ndbmap.TraceOff()\n```\n\n----------------------------------------\n\nTITLE: Implementing CacheOnReadFs in Go\nDESCRIPTION: Creates a caching filesystem that copies files from the base layer to the overlay on first read, with configurable cache duration.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nbase := afero.NewOsFs()\nlayer := afero.NewMemMapFs()\nufs := afero.NewCacheOnReadFs(base, layer, 100 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: FileSystem Interface Implementation in Go\nDESCRIPTION: Example showing the FileSystem interface definition and usage for handling locale files in the gettext-go library.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/chai2010/gettext-go/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype FileSystem interface {\n\tLocaleList() []string\n\tLoadMessagesFile(domain, lang, ext string) ([]byte, error)\n\tLoadResourceFile(domain, lang, name string) ([]byte, error)\n\tString() string\n}\n\nfunc NewFS(name string, x interface{}) FileSystem\nfunc OS(root string) FileSystem\nfunc ZipFS(r *zip.Reader, name string) FileSystem\nfunc NilFS(name string) FileSystem\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Overrides in Viper\nDESCRIPTION: Examples of setting explicit configuration values that override other sources.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nviper.Set(\"Verbose\", true)\nviper.Set(\"LogFile\", LogFile)\nviper.Set(\"host.port\", 5899)   // set subset\n```\n\n----------------------------------------\n\nTITLE: Environment Override Example\nDESCRIPTION: Demonstration of the difference between Apply and OverApply methods\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nos.Setenv(\"HELLO\", \"world\")\n\n// NOTE: using Apply existing value will be reserved\ngotenv.Apply(strings.NewReader(\"HELLO=universe\"))\nfmt.Println(os.Getenv(\"HELLO\"))\n// Output: \"world\"\n\n// NOTE: using OverApply existing value will be overridden\ngotenv.OverApply(strings.NewReader(\"HELLO=universe\"))\nfmt.Println(os.Getenv(\"HELLO\"))\n// Output: \"universe\"\n```\n\n----------------------------------------\n\nTITLE: Basic Gettext Usage Example in Go\nDESCRIPTION: Simple example showing how to initialize gettext with a specific language and translate a string using the Gettext function.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/chai2010/gettext-go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/chai2010/gettext-go\"\n)\n\nfunc main() {\n\tgettext := gettext.New(\"hello\", \"./examples/locale\").SetLanguage(\"zh_CN\")\n\tfmt.Println(gettext.Gettext(\"Hello, world!\"))\n\n\t// Output: 你好, 世界!\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from Custom Go Struct in Go\nDESCRIPTION: Example of loading a JSON schema from a custom Go struct using gojsonschema's GoLoader.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Root struct {\n\tUsers []User `json:\"users\"`\n}\n\ntype User struct {\n\tName string `json:\"name\"`\n}\n\n...\n\ndata := Root{}\ndata.Users = append(data.Users, User{\"John\"})\ndata.Users = append(data.Users, User{\"Sophia\"})\ndata.Users = append(data.Users, User{\"Bill\"})\n\nloader := gojsonschema.NewGoLoader(data)\n```\n\n----------------------------------------\n\nTITLE: Toggling Colors for Individual Color Objects in Go\nDESCRIPTION: Examples of enabling and disabling colors for specific color objects without affecting others.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nc := color.New(color.FgCyan)\nc.Println(\"Prints cyan text\")\n\nc.DisableColor()\nc.Println(\"This is printed without any color\")\n\nc.EnableColor()\nc.Println(\"This prints again cyan...\")\n```\n\n----------------------------------------\n\nTITLE: Installing go-isatty with go get (Bash)\nDESCRIPTION: This Bash snippet provides the go get command to install the go-isatty package from GitHub. Dependency: Go SDK must be installed and properly configured. Input: none. Output: Installs go-isatty in the GOPATH, making it available for import in Go projects. Requires internet access and correct GOPATH settings.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/mattn/go-isatty/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mattn/go-isatty\n```\n\n----------------------------------------\n\nTITLE: Running Repository Presubmit Checks with Make\nDESCRIPTION: Executes the `prow-presubmit-check` Make target to run all repository tests. Output (both stdout and stderr) is redirected to `/tmp/k.txt`, and the exit code is printed to the console. This is used to verify changes, including schema updates.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake prow-presubmit-check >& /tmp/k.txt; echo $?\n```\n\n----------------------------------------\n\nTITLE: Handling Nil Values in String Functions in Go\nDESCRIPTION: Adds handling for untyped nil values passed as parameters to string functions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nHandle untyped nil values as paramters to string functions 2b2ec8f (Morten Torkildsen)\n```\n\n----------------------------------------\n\nTITLE: Importing Redis Package in Go\nDESCRIPTION: Import statement to include the redis package in Go code\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-redis/redis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/go-redis/redis\"\n```\n\n----------------------------------------\n\nTITLE: Docker Config File with Plain Username/Password (JSON)\nDESCRIPTION: This JSON snippet reflects a Docker config.json format where registry credentials are stored directly with separate 'username' and 'password' fields instead of the base64 'auth' field. It's an alternative representation useful for manual configuration or templating, requiring Docker-compatible tooling to process. The input is explicit username/password values; output is the file consumed by the registry authentication subsystem.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"auths\": {\n\t\t\"registry.example.com\": {\n\t\t\t\"username\": \"AzureDiamond\",\n\t\t\t\"password\": \"hunter2\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Object Structure in HCL and JSON\nDESCRIPTION: Demonstrates nested object structure in HCL and its equivalent JSON representation for variable definition.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/hashicorp/hcl/README.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"ami\" {\n    description = \"the AMI to use\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variable\": {\n      \"ami\": {\n          \"description\": \"the AMI to use\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Flag to Variable using pflag\nDESCRIPTION: This snippet shows how to bind a flag to a variable using pflag's Var() functions. It creates an integer flag named \"flagname\" and binds it to the flagvar variable.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar flagvar int\nfunc init() {\n    flag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using StopTrying with Error Wrapping\nDESCRIPTION: Example showing how to use StopTrying() with error wrapping and attaching additional information\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/gomega/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nStopTrying().Wrap(err)\nStopTrying().Attach(description, object)\n```\n\n----------------------------------------\n\nTITLE: Implementing RegexpFs in Go\nDESCRIPTION: Creates a filtered filesystem view where only files matching the specified regexp pattern are accessible. Files not matching the pattern appear non-existent.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfs := afero.NewRegexpFs(afero.NewMemMapFs(), regexp.MustCompile(`\\.txt$`))\n_, err := fs.Create(\"/file.html\")\n// err = syscall.ENOENT\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Function Examples in Go\nDESCRIPTION: Shows the old and new signatures for custom validator functions with added context parameter.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// old signature\nfunc(i interface{}) bool\n\n// new signature\nfunc(i interface{}, o interface{}) bool\n```\n\n----------------------------------------\n\nTITLE: Sending Metrics to Librato in Go\nDESCRIPTION: Shows how to periodically upload metrics to Librato using the Librato client. This requires configuration including account details, API token, and formatting preferences.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/mihasya/go-metrics-librato\"\n\ngo librato.Librato(metrics.DefaultRegistry,\n    10e9,                  // interval\n    \"example@example.com\", // account owner email address\n    \"token\",               // Librato API token\n    \"hostname\",            // source\n    []float64{0.95},       // percentiles to send\n    time.Millisecond,      // time unit\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Env Files\nDESCRIPTION: Example showing how to load multiple environment files in order\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngotenv.Load(\".env.production\", \"credentials\")\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Blackfriday Output with Bluemonday in Go\nDESCRIPTION: Demonstrates how to use Blackfriday in combination with Bluemonday to process and sanitize user-supplied Markdown content. This helps protect against malicious content.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/microcosm-cc/bluemonday\"\n    \"github.com/russross/blackfriday/v2\"\n)\n\n// ...\nunsafe := blackfriday.Run(input)\nhtml := bluemonday.UGCPolicy().SanitizeBytes(unsafe)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Hash Function in Go-Git\nDESCRIPTION: Registers a custom implementation of the SHA1 hash function to be used by go-git. This allows replacing the default hash function with a custom one.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-git/v5/EXTENDING.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n    func init() {\n        hash.RegisterHash(crypto.SHA1, sha1.New)\n    }\n```\n\n----------------------------------------\n\nTITLE: Advanced Trace Operations in Go\nDESCRIPTION: Demonstrates additional trace operations such as getting the total time of a trace and unconditionally logging a trace.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/utils/trace/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nopTrace.TotalTime() // Duration since the Trace was created\nopTrace.Log() // unconditionally log the trace\n```\n\n----------------------------------------\n\nTITLE: Installing Slog Shim Package using Go Get\nDESCRIPTION: Command to install the slog-shim package using Go's package manager\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sagikazarmark/slog-shim/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/sagikazarmark/slog-shim\n```\n\n----------------------------------------\n\nTITLE: Running Local Go Documentation Server\nDESCRIPTION: Commands to install and run a local package documentation server for previewing Go documentation changes.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Clock Package Overview\nDESCRIPTION: Markdown documentation explaining the purpose and implementation details of the Clock package. The package provides time operation interfaces and testing capabilities through time mocking.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/klog/v2/internal/clock/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Clock\n\nThis package provides an interface for time-based operations.  It allows\nmocking time for testing.\n\nThis is a copy of k8s.io/utils/clock. We have to copy it to avoid a circular\ndependency (k8s.io/klog -> k8s.io/utils -> k8s.io/klog).\n```\n\n----------------------------------------\n\nTITLE: Implementing Flag Aliasing with Normalization\nDESCRIPTION: This snippet demonstrates how to alias two flags using a custom normalization function. It shows how to make an old flag name equivalent to a new flag name.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc aliasNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tswitch name {\n\tcase \"old-flag-name\":\n\t\tname = \"new-flag-name\"\n\t\tbreak\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(aliasNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Loading Schemas with $id Using AddSchemas in Go\nDESCRIPTION: Example of loading schemas that already have an $id defined using the AddSchemas method.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n\tloader2 := gojsonschema.NewStringLoader(`{\n\t\t\t\"$id\" : \"http://some_host.com/maxlength.json\",\n\t\t\t\"maxLength\" : 5\n\t\t}`)\n\terr = sl.AddSchemas(loader2)\n```\n\n----------------------------------------\n\nTITLE: PFlag Set Binding in Go\nDESCRIPTION: Demonstrates binding an entire set of pflags to Viper configuration and retrieving values.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npflag.Int(\"flagname\", 1234, \"help message for flagname\")\n\npflag.Parse()\nviper.BindPFlags(pflag.CommandLine)\n\ni := viper.GetInt(\"flagname\") // retrieve values from viper instead of pflag\n```\n\n----------------------------------------\n\nTITLE: Renaming RetrySettings Type in Go OpenTelemetry SDK\nDESCRIPTION: Renames the RetrySettings type to RetryConfig in the OTLP metric gRPC exporter package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nThe `\"go.opentelemetry.io/otel/exporter/otel/otlpmetric/otlpmetricgrpc\".RetrySettings` type is renamed to `RetryConfig`.\n```\n\n----------------------------------------\n\nTITLE: Enabling Meta-schema Validation in Go\nDESCRIPTION: Shows how to enable meta-schema validation which validates schemas against their meta-schema. This helps catch errors in schema definitions earlier in the process.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nsl := gojsonschema.NewSchemaLoader()\nsl.Validate = true\nerr := sl.AddSchemas(gojsonschema.NewStringLoader(`{\n     $id\" : \"http://some_host.com/invalid.json\",\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"multipleOf\" : true\n}`))\n```\n\n----------------------------------------\n\nTITLE: Using Custom Role Format in JSON Schema (JSON)\nDESCRIPTION: Shows how to use the custom 'role' format in a JSON Schema after defining and adding the custom format checker.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"string\", \"format\": \"role\"}\n```\n\n----------------------------------------\n\nTITLE: Using Logrus as an io.Writer\nDESCRIPTION: Demonstrates how to use Logrus as an io.Writer, which allows it to be used with the standard library's HTTP server for error logging. Each line is logged at the info level.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nw := logger.Writer()\ndefer w.Close()\n\nsrv := http.Server{\n    // create a stdlib log.Logger that writes to\n    // logrus.Logger.\n    ErrorLog: log.New(w, \"\", 0),\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sprig Functions in Go Templates\nDESCRIPTION: This snippet demonstrates the syntax for calling Sprig functions inside Go templates. It shows how to chain multiple functions using pipe notation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/sprig/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ \"hello!\" | upper | repeat 5 }}\n```\n\n----------------------------------------\n\nTITLE: Using Slog in Client Code\nDESCRIPTION: Example demonstrating how clients can use either log/slog or golang.org/x/exp/slog with a library implementing slog-shim\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sagikazarmark/slog-shim/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"log/slog\"\n\n// OR\n\nimport \"golang.org/x/exp/slog\"\n\nmylib.New(slog.Default())\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sonyflake Instance\nDESCRIPTION: Function signature for creating a new Sonyflake instance. It takes a Settings struct as a parameter and returns a Sonyflake pointer and an error.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sony/sonyflake/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc New(st Settings) (*Sonyflake, error)\n```\n\n----------------------------------------\n\nTITLE: JSON Format Validation Schema\nDESCRIPTION: Example of using format validation in JSON schema\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"string\", \"format\": \"email\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Formatting in Go with go-multierror\nDESCRIPTION: Shows how to customize the format of the Error() string function by specifying a custom ErrorFormat.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Patch CLI Installation and Usage in Bash\nDESCRIPTION: Instructions for installing and using the json-patch command-line tool to apply multiple JSON patches to a document. Shows how to pipe JSON content and apply patches in sequence.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/evanphx/json-patch/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ go install github.com/evanphx/json-patch/cmd/json-patch\n$ cat document.json | json-patch -p patch.1.json -p patch.2.json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flag Values from FlagSet\nDESCRIPTION: This snippet shows how to use helper functions to get the value stored in a Flag when working with a FlagSet. It demonstrates retrieving an integer value from a flag named 'flagname'.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ni, err := flagset.GetInt(\"flagname\")\n```\n\n----------------------------------------\n\nTITLE: Debug Level Logging\nDESCRIPTION: Demonstrates how to use verbose debug logging with V(1) level.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/controller-runtime/TMP-LOGGING.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlogger.V(1).Info(\"this is particularly verbose!\", \"state of the world\", allKubernetesObjectsEverywhere)\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmarks - Shell\nDESCRIPTION: Shows how to invoke Go's benchmarking framework using the 'go test -bench .' command. This command runs all benchmarks defined in the test suite. It assumes required test files and proper database accessibility via configuration.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/lib/pq/TESTS.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test -bench .\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies\nDESCRIPTION: Command to install required Golang linting tool for the build process.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/golang/lint/golint\n```\n\n----------------------------------------\n\nTITLE: Go-Fuzz Integration Example\nDESCRIPTION: Demonstrates how to integrate gofuzz with go-fuzz for fuzz testing functions with integer arguments.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/gofuzz/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// +build gofuzz\npackage mypackage\n\nimport fuzz \"github.com/google/gofuzz\"\n\nfunc Fuzz(data []byte) int {\n        var i int\n        fuzz.NewFromGoFuzz(data).Fuzz(&i)\n        MyFunc(i)\n        return 0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CompressedImageCore Interface in Go\nDESCRIPTION: Interface definition for implementing compressed container images, used by remote.remoteImage. Specifies methods for accessing raw config files, media types, manifests and compressed layers.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/v1/partial/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype CompressedImageCore interface {\n\tRawConfigFile() ([]byte, error)\n\tMediaType() (types.MediaType, error)\n\tRawManifest() ([]byte, error)\n\tLayerByDigest(v1.Hash) (CompressedLayer, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Object Definition with Repeated Blocks in HCL\nDESCRIPTION: Shows how to define multiple service blocks in HCL, which creates an array of objects with key-value pairs.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/hashicorp/hcl/README.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n    key = \"value\"\n}\n\nservice {\n    key = \"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Template Functions for Error Messages (Go)\nDESCRIPTION: Shows how to define custom template functions for use in error message formatting. This example adds an 'allcaps' function to convert strings to uppercase.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ngojsonschema.ErrorTemplateFuncs = map[string]interface{}{\n\t\"allcaps\": func(s string) string {\n\t\treturn strings.ToUpper(s)\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JSON-Patch Library with Go\nDESCRIPTION: Commands for installing different versions of the JSON-patch library using Go modules. Includes both latest and stable version installation options.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/evanphx/json-patch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/evanphx/json-patch/v5\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Platform Docker Images with Buildx\nDESCRIPTION: This snippet demonstrates how to build Docker images for multiple platforms (linux/amd64 and linux/arm64) using Docker Buildx. It builds images for ks-apiserver and ks-controller-manager, pushing them to a specified repository.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/docs/build-multiarch-images.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build --platform=\"linux/amd64,linux/arm64\" . -t $REPO/ks-apiserver:$TAG -f build-multiarch/Dockerfile --target=ks-apiserver --push\ndocker buildx build --platform=\"linux/amd64,linux/arm64\" . -t $REPO/ks-controller-manager:$TAG -f build-multiarch/Dockerfile --target=ks-controller-manager --push\n```\n\n----------------------------------------\n\nTITLE: Obtaining TracerProvider from Span in Go\nDESCRIPTION: Adds a 'TracerProvider()' method to the Span interface in the trace package. This method can be used to obtain a TracerProvider from a given span that uses the same trace processing pipeline.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nspan.TracerProvider()\n```\n\n----------------------------------------\n\nTITLE: Checking Glob Pattern Intersection in Go\nDESCRIPTION: Example usage of the gintersect package showing pattern matching between two glob expressions. The function returns true if there exists a non-empty string that matches both patterns.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/yashtewari/glob-intersection/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngintersect.NonEmpty(\"a.a.\", \".b.b\")\n```\n\nLANGUAGE: go\nCODE:\n```\ngintersect.NonEmpty(\"[a-z]+\", \"[0-9]*\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Flag Sorting in pflag\nDESCRIPTION: This snippet demonstrates how to disable sorting of flags for help and usage messages in pflag. It shows defining several flags and then disabling the sorting feature.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nflags.BoolP(\"verbose\", \"v\", false, \"verbose output\")\nflags.String(\"coolflag\", \"yeaah\", \"it's really cool flag\")\nflags.Int(\"usefulflag\", 777, \"sometimes it's very useful\")\nflags.SortFlags = false\nflags.PrintDefaults()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Configuration Values in Viper\nDESCRIPTION: Examples of setting default configuration values for content directory, layout directory, and taxonomies.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nviper.SetDefault(\"ContentDir\", \"content\")\nviper.SetDefault(\"LayoutDir\", \"layouts\")\nviper.SetDefault(\"Taxonomies\", map[string]string{\"tag\": \"tags\", \"category\": \"categories\"})\n```\n\n----------------------------------------\n\nTITLE: Importing go-restful-openapi with go-restful v3\nDESCRIPTION: Example of how to import the v2 version of go-restful-openapi package with v3 of the go-restful package. This demonstrates the proper module versioning for compatibility.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/emicklei/go-restful-openapi/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    restfulspec \"github.com/emicklei/go-restful-openapi/v2\"\n    restful \"github.com/emicklei/go-restful/v3\"\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Patch Format Example\nDESCRIPTION: Sample of the RFC6902 JSON patch format showing replace and remove operations. This demonstrates the structure of JSON patch documents used in the examples.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/evanphx/json-patch/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\"op\": \"replace\", \"path\": \"/name\", \"value\": \"Jane\"},\n    {\"op\": \"remove\", \"path\": \"/height\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Registry Data Directory\nDESCRIPTION: Command to create the required data directory for the registry.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /var/lib/registry\n```\n\n----------------------------------------\n\nTITLE: JSON Patch Document Example with Add and Replace Operations\nDESCRIPTION: Example of a JSON patch document containing add and replace operations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\"op\": \"add\", \"path\": \"/address\", \"value\": \"123 Main St\"},\n    {\"op\": \"replace\", \"path\": \"/age\", \"value\": \"21\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Kubernetes Schema Protobuf without Code Generation\nDESCRIPTION: Fetches the Kubernetes OpenAPI schema and saves it as `kubernetesapi/swagger.pb` without generating the corresponding Go code (`swagger.go`). It requires removing the existing `swagger.pb` file first, then running the specific Make target `make kubernetesapi/swagger.pb`.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrm kubernetesapi/swagger.pb\nmake kubernetesapi/swagger.pb\n```\n\n----------------------------------------\n\nTITLE: Generating Release Notes with GitHub CLI\nDESCRIPTION: Command for maintainers to generate release notes using GitHub CLI. This creates a changelog based on pull requests merged between releases.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngh api -X POST \\\n  -F tag_name='v2.0.0-beta.5' \\\n  -F target_commitish='v2' \\\n  -F previous_tag_name='v2.0.0-beta.4' \\\n  --jq '.body' \\\n  repos/pelletier/go-toml/releases/generate-notes\n```\n\n----------------------------------------\n\nTITLE: Setting Values on Interfaces using reflect2\nDESCRIPTION: This snippet demonstrates how to use reflect2 to set values on an interface with type checking. It requires importing the reflect2 library. Users should always operate on pointers of the type to achieve this functionality.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/modern-go/reflect2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.Set(&i, &j)\n// i will be 10\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Bug Fixes in Changelog - Markdown\nDESCRIPTION: This Markdown bullet-style code snippet documents a specific bug fix or improvement, suitable for inclusion in a changelog. The format helps track changes and improve traceability for users. Inputs should be terse yet descriptive bug fix summaries.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- update supported platforms for race conditions [63c8c30]\n```\n\n----------------------------------------\n\nTITLE: Using reflect2.TypeByName to Retrieve Type Information\nDESCRIPTION: This snippet demonstrates how to use the reflect2.TypeByName function to retrieve type information dynamically. It requires importing the reflect2 library. Note that if the type has not been used, it may be eliminated by the compiler and not available at runtime.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/modern-go/reflect2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// given package is github.com/your/awesome-package\ntype MyStruct struct {\n\t// ...\n}\n\n// will return the type\nreflect2.TypeByName(\"awesome-package.MyStruct\")\n// however, if the type has not been used\n// it will be eliminated by compiler, so we can not get it in runtime\n\n```\n\n----------------------------------------\n\nTITLE: Example JSONC Configuration Showing Key Path Overlap\nDESCRIPTION: This JSONC snippet demonstrates a configuration scenario where a top-level key (`\"datastore.metric.host\"`) explicitly uses dot notation, potentially conflicting with the path to a nested key. This is used to illustrate Viper's key precedence.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_23\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"datastore.metric.host\": \"0.0.0.0\",\n    \"host\": {\n        \"address\": \"localhost\",\n        \"port\": 5799\n    },\n    \"datastore\": {\n        \"metric\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 3099\n        },\n        \"warehouse\": {\n            \"host\": \"198.0.0.1\",\n            \"port\": 2112\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Log Rotation in Response to SIGHUP in Go\nDESCRIPTION: Example of how to implement log rotation in response to a SIGHUP signal using Lumberjack. This sets up a signal handler to call the Rotate method when SIGHUP is received.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/natefinch/lumberjack.v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nl := &lumberjack.Logger{}\nlog.SetOutput(l)\nc := make(chan os.Signal, 1)\nsignal.Notify(c, syscall.SIGHUP)\n\ngo func() {\n    for {\n        <-c\n        l.Rotate()\n    }\n}()\n```\n\n----------------------------------------\n\nTITLE: Minimal Markdown Processing with Blackfriday in Go\nDESCRIPTION: Shows how to process Markdown input using Blackfriday with only the basic feature set, corresponding to the bare Markdown specification.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input, blackfriday.WithNoExtensions())\n```\n\n----------------------------------------\n\nTITLE: Updating OTLP gRPC Client Connection Handling in Go SDK\nDESCRIPTION: Updates the OTLP gRPC trace and metric clients to use the underlying gRPC ClientConn for connection management and error handling.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nThe `\"go.opentelemetry.io/otel/exporter/otel/otlptrace/otlptracegrpc\".Client` now uses the underlying gRPC `ClientConn` to handle name resolution, TCP connection establishment (with retries and backoff) and TLS handshakes, and handling errors on established connections by re-resolving the name and reconnecting.\n```\n\nLANGUAGE: go\nCODE:\n```\nThe `\"go.opentelemetry.io/otel/exporter/otel/otlpmetric/otlpmetricgrpc\".Client` now uses the underlying gRPC `ClientConn` to handle name resolution, TCP connection establishment (with retries and backoff) and TLS handshakes, and handling errors on established connections by re-resolving the name and reconnecting.\n```\n\n----------------------------------------\n\nTITLE: Using go-wordwrap WrapString in Go\nDESCRIPTION: This Go snippet demonstrates basic usage of the `wordwrap.WrapString` function from the `go-wordwrap` package. It takes the string \"foo bar baz\" and wraps it to a maximum line width of 3 characters, then prints the resulting multi-line string using `fmt.Println`. Requires the `go-wordwrap` package (`github.com/mitchellh/go-wordwrap`) to be installed and imported.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/mitchellh/go-wordwrap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nwrapped := wordwrap.WrapString(\"foo bar baz\", 3)\nfmt.Println(wrapped)\n```\n\n----------------------------------------\n\nTITLE: Adding Schema with $id Property in Go\nDESCRIPTION: Shows how to add a schema that already has an $id property using the AddSchemas function. This uses the schema's $id as the identifier.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n\tloader2 := gojsonschema.NewStringLoader(`{\n\t\t\t\"$id\" : \"http://some_host.com/maxlength.json\",\n\t\t\t\"maxLength\" : 5\n\t\t}`)\n\terr = sl.AddSchemas(loader2)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple SSH Config Values in Go\nDESCRIPTION: This snippet shows how to retrieve all occurrences of a specific directive (like 'IdentityFile') for a given host ('myhost') using `ssh_config.GetAll`. This is necessary for directives that can appear multiple times for the same host pattern. It returns a slice of strings containing all matching values.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/kevinburke/ssh_config/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfiles := ssh_config.GetAll(\"myhost\", \"IdentityFile\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Response Stream Size with Prometheus - JSONIQ\nDESCRIPTION: Calculates the average number of messages sent per server_stream RPC for each gRPC service over a 10-minute window. Divides the message send rate by the server_stream start rate to determine the average stream size. Inputs: Prometheus metrics for message and request rates. Output: Average stream size per `grpc_service`. Useful for monitoring changes in client query behavior.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_6\n\nLANGUAGE: JSONIQ\nCODE:\n```\nsum(rate(grpc_server_msg_sent_total{job=\\\"foo\\\",grpc_type=\\\"server_stream\\\"}[10m])) by (grpc_service)\n /\nsum(rate(grpc_server_started_total{job=\\\"foo\\\",grpc_type=\\\"server_stream\\\"}[10m])) by (grpc_service)\n```\n\n----------------------------------------\n\nTITLE: Implementing Library Book Checkout Tests Using Ginkgo and Gomega in Go\nDESCRIPTION: This code demonstrates how to use Ginkgo and Gomega to write expressive BDD-style tests for a library book checkout system. It shows various testing scenarios including successful checkouts, handling already checked-out books, and book holds, while utilizing Ginkgo's nested test structure with Describe, Context, When, and BeforeEach blocks.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/ginkgo/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    . \"github.com/onsi/ginkgo/v2\"\n    . \"github.com/onsi/gomega\"\n    ...\n)\n\nvar _ = Describe(\"Checking books out of the library\", Label(\"library\"), func() {\n    var library *libraries.Library\n    var book *books.Book\n    var valjean *users.User\n    BeforeEach(func() {\n        library = libraries.NewClient()\n        book = &books.Book{\n            Title: \"Les Miserables\",\n            Author: \"Victor Hugo\",\n        }\n        valjean = users.NewUser(\"Jean Valjean\")\n    })\n\n    When(\"the library has the book in question\", func() {\n        BeforeEach(func(ctx SpecContext) {\n            Expect(library.Store(ctx, book)).To(Succeed())\n        })\n\n        Context(\"and the book is available\", func() {\n            It(\"lends it to the reader\", func(ctx SpecContext) {\n                Expect(valjean.Checkout(ctx, library, \"Les Miserables\")).To(Succeed())\n                Expect(valjean.Books()).To(ContainElement(book))\n                Expect(library.UserWithBook(ctx, book)).To(Equal(valjean))\n            }, SpecTimeout(time.Second * 5))\n        })\n\n        Context(\"but the book has already been checked out\", func() {\n            var javert *users.User\n            BeforeEach(func(ctx SpecContext) {\n                javert = users.NewUser(\"Javert\")\n                Expect(javert.Checkout(ctx, library, \"Les Miserables\")).To(Succeed())\n            })\n\n            It(\"tells the user\", func(ctx SpecContext) {\n                err := valjean.Checkout(ctx, library, \"Les Miserables\")\n                Expect(err).To(MatchError(\"Les Miserables is currently checked out\"))\n            }, SpecTimeout(time.Second * 5))\n\n            It(\"lets the user place a hold and get notified later\", func(ctx SpecContext) {\n                Expect(valjean.Hold(ctx, library, \"Les Miserables\")).To(Succeed())\n                Expect(valjean.Holds(ctx)).To(ContainElement(book))\n\n                By(\"when Javert returns the book\")\n                Expect(javert.Return(ctx, library, book)).To(Succeed())\n\n                By(\"it eventually informs Valjean\")\n                notification := \"Les Miserables is ready for pick up\"\n                Eventually(ctx, valjean.Notifications).Should(ContainElement(notification))\n\n                Expect(valjean.Checkout(ctx, library, \"Les Miserables\")).To(Succeed())\n                Expect(valjean.Books(ctx)).To(ContainElement(book))\n                Expect(valjean.Holds(ctx)).To(BeEmpty())\n            }, SpecTimeout(time.Second * 10))\n        })  \n    })\n\n    When(\"the library does not have the book in question\", func() {\n        It(\"tells the reader the book is unavailable\", func(ctx SpecContext) {\n            err := valjean.Checkout(ctx, library, \"Les Miserables\")\n            Expect(err).To(MatchError(\"Les Miserables is not in the library catalog\"))\n        }, SpecTimeout(time.Second * 5))\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Gettexter Interface Definition in Go\nDESCRIPTION: Complete interface definition for the Gettexter type that provides core gettext functionality in the library.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/chai2010/gettext-go/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Gettexter interface {\n\tFileSystem() FileSystem\n\n\tGetDomain() string\n\tSetDomain(domain string) Gettexter\n\n\tGetLanguage() string\n\tSetLanguage(lang string) Gettexter\n\n\tGettext(msgid string) string\n\tPGettext(msgctxt, msgid string) string\n\n\tNGettext(msgid, msgidPlural string, n int) string\n\tPNGettext(msgctxt, msgid, msgidPlural string, n int) string\n\n\tDGettext(domain, msgid string) string\n\tDPGettext(domain, msgctxt, msgid string) string\n\tDNGettext(domain, msgid, msgidPlural string, n int) string\n\tDPNGettext(domain, msgctxt, msgid, msgidPlural string, n int) string\n\n\tGetdata(name string) []byte\n\tDGetdata(domain, name string) []byte\n}\n\nfunc New(domain, path string, data ...interface{}) Gettexter\n```\n\n----------------------------------------\n\nTITLE: Full Build Process Output\nDESCRIPTION: Example output of running the full build process using make, showing various build stages and tests.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ make\n+ clean\n+ fmt\n+ vet\n+ lint\n+ build\ngithub.com/docker/docker/vendor/src/code.google.com/p/go/src/pkg/archive/tar\ngithub.com/sirupsen/logrus\ngithub.com/docker/libtrust\n...\ngithub.com/yvasiyarov/gorelic\ngithub.com/docker/distribution/registry/handlers\ngithub.com/docker/distribution/cmd/registry\n+ test\n...\nok    github.com/docker/distribution/digest 7.875s\nok    github.com/docker/distribution/manifest 0.028s\nok    github.com/docker/distribution/notifications  17.322s\n?     github.com/docker/distribution/registry [no test files]\nok    github.com/docker/distribution/registry/api/v2  0.101s\n?     github.com/docker/distribution/registry/auth  [no test files]\nok    github.com/docker/distribution/registry/auth/silly  0.011s\n...\n+ /Users/sday/go/src/github.com/docker/distribution/bin/registry\n+ /Users/sday/go/src/github.com/docker/distribution/bin/registry-api-descriptor-template\n+ binaries\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch for Zap Development\nDESCRIPTION: Git commands to create and set up a new feature branch for development, ensuring it's based on the latest upstream master.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/go.uber.org/zap\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\ngit checkout -b cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Installing Go Globbing Library\nDESCRIPTION: Command to install the Go globbing library using go get.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gobwas/glob/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/gobwas/glob\n```\n\n----------------------------------------\n\nTITLE: Regenerating Kubernetes API swagger.go with Make\nDESCRIPTION: Specifically regenerates the `kubernetesapi/swagger.go` file. It first removes the existing file using `rm` and then runs the `make kubernetesapi/swagger.go` target to generate a fresh version based on the current schema.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrm kubernetesapi/swagger.go\nmake kubernetesapi/swagger.go\n```\n\n----------------------------------------\n\nTITLE: HAProxy Service and Resource Configuration\nDESCRIPTION: Service-specific configuration for HAProxy including service type, annotations, resources, and load balancer settings.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nhaproxy.service.type: ClusterIP\nhaproxy.service.annotations: {}\nhaproxy.service.labels: {}\nhaproxy.service.loadBalancerIP: null\nhaproxy.service.externalIPs: {}\nhaproxy.stickyBalancing: false\nhaproxy.resources: {}\nhaproxy.emptyDir: {}\nhaproxy.labels: {}\nhaproxy.serviceAccountName: default\n```\n\n----------------------------------------\n\nTITLE: Creating Content Digest in Go\nDESCRIPTION: Demonstrates how to create a content identifier using digest.FromBytes() method with a byte slice input.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/opencontainers/go-digest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nid := digest.FromBytes([]byte(\"my content\"))\n```\n\n----------------------------------------\n\nTITLE: Installing go-colorable Package via Go Get\nDESCRIPTION: This shell command installs the go-colorable package from GitHub using the go get tool. It facilitates handling ANSI color codes on Windows when working with CLI tools that output colored text.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/mattn/go-colorable/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mattn/go-colorable\n```\n\n----------------------------------------\n\nTITLE: Using Apply with io.Reader\nDESCRIPTION: Example demonstrating how to apply environment variables from an io.Reader\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngotenv.Apply(strings.NewReader(\"APP_ID=1234567\"))\n\nlog.Println(os.Getenv(\"APP_ID\"))\n// Output: \"1234567\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Remote for Contributing\nDESCRIPTION: Commands to add your personal fork as a remote repository for submitting contributions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluemonday HTML Sanitizer\nDESCRIPTION: Code example showing how to configure the Bluemonday HTML sanitizer to preserve code block classes while maintaining security.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\np := bluemonday.UGCPolicy()\np.AllowAttrs(\"class\").Matching(regexp.MustCompile(\"^language-[a-zA-Z0-9]+$\")).OnElements(\"code\")\nhtml := p.SanitizeBytes(unsafe)\n```\n\n----------------------------------------\n\nTITLE: Adding Span Status Helper Function in Go OpenTelemetry SDK\nDESCRIPTION: Adds a new function SpanStatusFromHTTPStatusCodeAndSpanKind to all semconv packages to determine span status code based on HTTP status and span kind.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nAdd `SpanStatusFromHTTPStatusCodeAndSpanKind` to all `semconv` packages to return a span status code similar to `SpanStatusFromHTTPStatusCode`, but exclude `4XX` HTTP errors as span errors if the span is of server kind.\n```\n\n----------------------------------------\n\nTITLE: Conditional Logging with glog in Go\nDESCRIPTION: Illustrates conditional logging using glog's V-style logging, controlled by command-line flags for verbosity levels.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/klog/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif glog.V(2) {\n    glog.Info(\"Starting transaction...\")\n}\n\nglog.V(2).Infoln(\"Processed\", nItems, \"elements\")\n```\n\n----------------------------------------\n\nTITLE: Type-Checking Validators in GoValidator\nDESCRIPTION: Validators that can check against specific types for any input type, not just strings.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n\"type(type)\": IsType,\n```\n\n----------------------------------------\n\nTITLE: Setting Values using Unsafe Pointers with reflect2\nDESCRIPTION: This snippet shows how to use unsafe pointers with reflect2 to set values without type checking, leveraging the reflect2 library. As with setting interface values, operations should be performed on pointers of the type.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/modern-go/reflect2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.UnsafeSet(unsafe.Pointer(&i), unsafe.Pointer(&j))\n// i will be 10\n\n```\n\n----------------------------------------\n\nTITLE: Automatically Fixing Linter Violations in Viper\nDESCRIPTION: Command to automatically fix certain linter violations in the Viper codebase using Make.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\nmake fmt\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Client using Go Get\nDESCRIPTION: Command to install the go-redis library using go get package manager\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-redis/redis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/go-redis/redis\n```\n\n----------------------------------------\n\nTITLE: Redis Exporter Prometheus Annotations\nDESCRIPTION: Prometheus scraping configuration annotations for Redis exporter metrics collection.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus.io/path: /metrics\nprometheus.io/port: \"9121\"\nprometheus.io/scrape: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Fork\nDESCRIPTION: Command to push the new feature branch to your forked repository on GitHub.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Installing the Color Package with Go\nDESCRIPTION: Command to install the color package using Go's package manager.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/fatih/color\n```\n\n----------------------------------------\n\nTITLE: Base64 Decoding Docker Auth Field (bash)\nDESCRIPTION: This bash command decodes a Base64-encoded credential string found in a Docker config.json 'auth' field, producing the plaintext 'username:password' pair. It expects an encoded string as input and outputs the decoded credentials to stdout. This is useful for manually inspecting credentials or populating config files non-interactively; a shell and base64 utility are required.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"QXp1cmVEaWFtb25kOmh1bnRlcjI=\" | base64 -d\nAzureDiamond:hunter2\n```\n\n----------------------------------------\n\nTITLE: Defining Lumberjack Logger Struct in Go\nDESCRIPTION: Definition of the Logger struct in the Lumberjack package. It includes fields for configuring log file rotation, such as filename, max size, max age, and compression options.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/natefinch/lumberjack.v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Logger struct {\n    // Filename is the file to write logs to.  Backup log files will be retained\n    // in the same directory.  It uses <processname>-lumberjack.log in\n    // os.TempDir() if empty.\n    Filename string `json:\"filename\" yaml:\"filename\"`\n\n    // MaxSize is the maximum size in megabytes of the log file before it gets\n    // rotated. It defaults to 100 megabytes.\n    MaxSize int `json:\"maxsize\" yaml:\"maxsize\"`\n\n    // MaxAge is the maximum number of days to retain old log files based on the\n    // timestamp encoded in their filename.  Note that a day is defined as 24\n    // hours and may not exactly correspond to calendar days due to daylight\n    // savings, leap seconds, etc. The default is not to remove old log files\n    // based on age.\n    MaxAge int `json:\"maxage\" yaml:\"maxage\"`\n\n    // MaxBackups is the maximum number of old log files to retain.  The default\n    // is to retain all old log files (though MaxAge may still cause them to get\n    // deleted.)\n    MaxBackups int `json:\"maxbackups\" yaml:\"maxbackups\"`\n\n    // LocalTime determines if the time used for formatting the timestamps in\n    // backup files is the computer's local time.  The default is to use UTC\n    // time.\n    LocalTime bool `json:\"localtime\" yaml:\"localtime\"`\n\n    // Compress determines if the rotated log files should be compressed\n    // using gzip. The default is not to perform compression.\n    Compress bool `json:\"compress\" yaml:\"compress\"`\n    // contains filtered or unexported fields\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Immutable Builder Chains Using Persistent Data Structures in Go\nDESCRIPTION: Shows how to use the builder pattern to create immutable variations of a word object by method chaining via AddLetters. Each variable, build, builder, and building, represents a new immutable state extended from the previous, leveraging persistent data structures (such as those from github.com/mndrix/ps) to facilitate efficient reuse and extension without mutation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/lann/builder/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nbuild := WordBuilder.AddLetters(\"Build\")\nbuilder := build.AddLetters(\"er\")\nbuilding := build.AddLetters(\"ing\")\n```\n\n----------------------------------------\n\nTITLE: Final Release Candidate Versions\nDESCRIPTION: Shows the release candidate versions (RC1) for all modules including metrics\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.1.0-RC1`\n* `otel/trace`: `v1.1.0-RC1`\n* `otel/metric`: `v1.1.0-RC1`\n* `otel/baggage`: `v1.1.0-RC1`\n* `otel/sdk/trace`: `v1.1.0-RC1`\n* `otel/sdk/metric`: `v1.1.0-RC1`\n```\n\n----------------------------------------\n\nTITLE: Using StartedByExplorer Function in Go\nDESCRIPTION: The primary interface of the mousetrap library, a function that returns a boolean indicating if the process was started by Windows Explorer (i.e., double-clicked).\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/inconshreveable/mousetrap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc StartedByExplorer() (bool)\n```\n\n----------------------------------------\n\nTITLE: Named Logger Configuration\nDESCRIPTION: Shows how to create and configure named loggers with chained names and values.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/controller-runtime/TMP-LOGGING.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nlogger := log.Log.WithName(\"controller\").WithName(\"replicaset\")\n// in reconcile...\nlogger = logger.WithValues(\"replicaset\", req.NamespacedName)\n// later on in reconcile...\nlogger.Info(\"doing things with pods\", \"pod\", newPod)\n```\n\n----------------------------------------\n\nTITLE: Checking Validation Results in Go\nDESCRIPTION: Example of checking validation results to determine if a document is valid and displaying any validation errors.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n    if result.Valid() {\n    \tfmt.Printf(\"The document is valid\\n\")\n    } else {\n        fmt.Printf(\"The document is not valid. see errors :\\n\")\n        for _, err := range result.Errors() {\n        \t// Err implements the ResultError interface\n            fmt.Printf(\"- %s\\n\", err)\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic TOML Configuration Example\nDESCRIPTION: Simple TOML configuration file showing basic data types including integers, arrays, floats, and timestamps\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/BurntSushi/toml/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nAge = 25\nCats = [ \"Cauchy\", \"Plato\" ]\nPi = 3.14\nPerfection = [ 6, 28, 496, 8128 ]\nDOB = 1987-07-05T05:45:00Z\n```\n\n----------------------------------------\n\nTITLE: Modifying Resource Default Evaluation in Go OpenTelemetry SDK\nDESCRIPTION: Changes the evaluation of resource.Default to occur on first call rather than import, allowing for runtime updates to environment variables.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nChange `resource.Default` to be evaluated the first time it is called, rather than on import. This allows the caller the option to update `OTEL_RESOURCE_ATTRIBUTES` first, such as with `os.Setenv`.\n```\n\n----------------------------------------\n\nTITLE: GoValidator Function List in Go\nDESCRIPTION: A comprehensive list of all functions available in the GoValidator library, including validation functions, string manipulation utilities, and collection operations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc Abs(value float64) float64\nfunc BlackList(str, chars string) string\nfunc ByteLength(str string, params ...string) bool\nfunc CamelCaseToUnderscore(str string) string\nfunc Contains(str, substring string) bool\nfunc Count(array []interface{}, iterator ConditionIterator) int\nfunc Each(array []interface{}, iterator Iterator)\nfunc ErrorByField(e error, field string) string\nfunc ErrorsByField(e error) map[string]string\nfunc Filter(array []interface{}, iterator ConditionIterator) []interface{}\nfunc Find(array []interface{}, iterator ConditionIterator) interface{}\nfunc GetLine(s string, index int) (string, error)\nfunc GetLines(s string) []string\nfunc HasLowerCase(str string) bool\nfunc HasUpperCase(str string) bool\nfunc HasWhitespace(str string) bool\nfunc HasWhitespaceOnly(str string) bool\nfunc InRange(value interface{}, left interface{}, right interface{}) bool\nfunc InRangeFloat32(value, left, right float32) bool\nfunc InRangeFloat64(value, left, right float64) bool\nfunc InRangeInt(value, left, right interface{}) bool\nfunc IsASCII(str string) bool\nfunc IsAlpha(str string) bool\nfunc IsAlphanumeric(str string) bool\nfunc IsBase64(str string) bool\nfunc IsByteLength(str string, min, max int) bool\nfunc IsCIDR(str string) bool\nfunc IsCRC32(str string) bool\nfunc IsCRC32b(str string) bool\nfunc IsCreditCard(str string) bool\nfunc IsDNSName(str string) bool\nfunc IsDataURI(str string) bool\nfunc IsDialString(str string) bool\nfunc IsDivisibleBy(str, num string) bool\nfunc IsEmail(str string) bool\nfunc IsExistingEmail(email string) bool\nfunc IsFilePath(str string) (bool, int)\nfunc IsFloat(str string) bool\nfunc IsFullWidth(str string) bool\nfunc IsHalfWidth(str string) bool\nfunc IsHash(str string, algorithm string) bool\nfunc IsHexadecimal(str string) bool\nfunc IsHexcolor(str string) bool\nfunc IsHost(str string) bool\nfunc IsIP(str string) bool\nfunc IsIPv4(str string) bool\nfunc IsIPv6(str string) bool\nfunc IsISBN(str string, version int) bool\nfunc IsISBN10(str string) bool\nfunc IsISBN13(str string) bool\nfunc IsISO3166Alpha2(str string) bool\nfunc IsISO3166Alpha3(str string) bool\nfunc IsISO4217(str string) bool\nfunc IsISO693Alpha2(str string) bool\nfunc IsISO693Alpha3b(str string) bool\nfunc IsIn(str string, params ...string) bool\nfunc IsInRaw(str string, params ...string) bool\nfunc IsInt(str string) bool\nfunc IsJSON(str string) bool\nfunc IsLatitude(str string) bool\nfunc IsLongitude(str string) bool\nfunc IsLowerCase(str string) bool\nfunc IsMAC(str string) bool\nfunc IsMD4(str string) bool\nfunc IsMD5(str string) bool\nfunc IsMagnetURI(str string) bool\nfunc IsMongoID(str string) bool\nfunc IsMultibyte(str string) bool\nfunc IsNatural(value float64) bool\nfunc IsNegative(value float64) bool\nfunc IsNonNegative(value float64) bool\nfunc IsNonPositive(value float64) bool\nfunc IsNotNull(str string) bool\nfunc IsNull(str string) bool\nfunc IsNumeric(str string) bool\nfunc IsPort(str string) bool\nfunc IsPositive(value float64) bool\nfunc IsPrintableASCII(str string) bool\nfunc IsRFC3339(str string) bool\nfunc IsRFC3339WithoutZone(str string) bool\nfunc IsRGBcolor(str string) bool\nfunc IsRegex(str string) bool\nfunc IsRequestURI(rawurl string) bool\nfunc IsRequestURL(rawurl string) bool\nfunc IsRipeMD128(str string) bool\nfunc IsRipeMD160(str string) bool\nfunc IsRsaPub(str string, params ...string) bool\nfunc IsRsaPublicKey(str string, keylen int) bool\nfunc IsSHA1(str string) bool\nfunc IsSHA256(str string) bool\nfunc IsSHA384(str string) bool\nfunc IsSHA512(str string) bool\nfunc IsSSN(str string) bool\nfunc IsSemver(str string) bool\nfunc IsTiger128(str string) bool\nfunc IsTiger160(str string) bool\nfunc IsTiger192(str string) bool\nfunc IsTime(str string, format string) bool\nfunc IsType(v interface{}, params ...string) bool\nfunc IsURL(str string) bool\nfunc IsUTFDigit(str string) bool\nfunc IsUTFLetter(str string) bool\nfunc IsUTFLetterNumeric(str string) bool\nfunc IsUTFNumeric(str string) bool\nfunc IsUUID(str string) bool\nfunc IsUUIDv3(str string) bool\nfunc IsUUIDv4(str string) bool\nfunc IsUUIDv5(str string) bool\nfunc IsULID(str string) bool\nfunc IsUnixTime(str string) bool\nfunc IsUpperCase(str string) bool\nfunc IsVariableWidth(str string) bool\nfunc IsWhole(value float64) bool\nfunc LeftTrim(str, chars string) string\nfunc Map(array []interface{}, iterator ResultIterator) []interface{}\nfunc Matches(str, pattern string) bool\nfunc MaxStringLength(str string, params ...string) bool\nfunc MinStringLength(str string, params ...string) bool\nfunc NormalizeEmail(str string) (string, error)\nfunc PadBoth(str string, padStr string, padLen int) string\nfunc PadLeft(str string, padStr string, padLen int) string\nfunc PadRight(str string, padStr string, padLen int) string\nfunc PrependPathToErrors(err error, path string) error\nfunc Range(str string, params ...string) bool\nfunc RemoveTags(s string) string\nfunc ReplacePattern(str, pattern, replace string) string\nfunc Reverse(s string) string\nfunc RightTrim(str, chars string) string\nfunc RuneLength(str string, params ...string) bool\nfunc SafeFileName(str string) string\nfunc SetFieldsRequiredByDefault(value bool)\nfunc SetNilPtrAllowedByRequired(value bool)\nfunc Sign(value float64) float64\nfunc StringLength(str string, params ...string) bool\nfunc StringMatches(s string, params ...string) bool\nfunc StripLow(str string, keepNewLines bool) string\nfunc ToBoolean(str string) (bool, error)\nfunc ToFloat(str string) (float64, error)\nfunc ToInt(value interface{}) (res int64, err error)\nfunc ToJSON(obj interface{}) (string, error)\nfunc ToString(obj interface{}) string\nfunc Trim(str, chars string) string\nfunc Truncate(str string, length int, ending string) string\nfunc TruncatingErrorf(str string, args ...interface{}) error\nfunc UnderscoreToCamelCase(s string) string\nfunc ValidateMap(inputMap map[string]interface{}, validationMap map[string]interface{}) (bool, error)\nfunc ValidateStruct(s interface{}) (bool, error)\nfunc WhiteList(str, chars string) string\ntype ConditionIterator\ntype CustomTypeValidator\ntype Error\nfunc (e Error) Error() string\ntype Errors\nfunc (es Errors) Error() string\nfunc (es Errors) Errors() []error\ntype ISO3166Entry\ntype ISO693Entry\ntype InterfaceParamValidator\ntype Iterator\ntype ParamValidator\ntype ResultIterator\ntype UnsupportedTypeError\nfunc (e *UnsupportedTypeError) Error() string\ntype Validator\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Definition\nDESCRIPTION: SQL schema creation for person and place tables with text and integer fields\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/jmoiron/sqlx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE person (\n    first_name text,\n    last_name text,\n    email text\n);\n\nCREATE TABLE place (\n    country text,\n    city text NULL,\n    telcode integer\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Formatters for Logrus\nDESCRIPTION: Shows how to create a custom formatter by implementing the Formatter interface with a Format method. This example creates a custom JSON formatter that marshals the entry data.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype MyJSONFormatter struct {\n}\n\nlog.SetFormatter(new(MyJSONFormatter))\n\nfunc (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {\n  // Note this doesn't include Time, Level and Message which are available on\n  // the Entry. Consult `godoc` on information about those fields or read the\n  // source of the official loggers.\n  serialized, err := json.Marshal(entry.Data)\n    if err != nil {\n      return nil, fmt.Errorf(\"Failed to marshal fields to JSON, %w\", err)\n    }\n  return append(serialized, '\\n'), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Viper Development Dependencies\nDESCRIPTION: Command to install required dependencies for developing Viper after installing Go.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\nmake deps\n```\n\n----------------------------------------\n\nTITLE: Installing go-git with Go Modules\nDESCRIPTION: Shows how to import go-git in a Go project with different module configurations. The example demonstrates both the import path for projects with Go modules enabled and disabled.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-git/v5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/go-git/go-git/v5\" // with go modules enabled (GO111MODULE=on or outside GOPATH)\nimport \"github.com/go-git/go-git\" // with go modules disabled\n```\n\n----------------------------------------\n\nTITLE: Baseline Memory Usage Program in Go\nDESCRIPTION: This Go program is used to establish a baseline for memory usage. It simply sleeps for 600 seconds.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/memory.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"time\"\n\nfunc main() {\n\ttime.Sleep(600e9)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting OpenTelemetry Go Using Go Modules\nDESCRIPTION: Command to fetch the OpenTelemetry Go module using Go's package management system.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Importing Hash Implementations in Go\nDESCRIPTION: Shows required hash implementation imports for using the digest package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/opencontainers/go-digest/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    _ \"crypto/sha256\"\n    _ \"crypto/sha512\"\n)\n```\n\n----------------------------------------\n\nTITLE: String Quote Function Example\nDESCRIPTION: Function that safely prints strings by escaping necessary characters and handling invalid UTF-8 characters.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nstrings.quote('single-quote with \"double quote\"') // returns '\"single-quote with \\\"double quote\\\"\"'\nstrings.quote(\"two escape sequences \\a\\n\") // returns '\"two escape sequences \\\\a\\\\n\"'\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling and Marshaling YAML in Go\nDESCRIPTION: This snippet demonstrates how to use the yaml.v3 package to unmarshal YAML data into Go structs and maps, and then marshal them back into YAML format. It showcases struct tags for custom mapping and handling of nested structures.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/yaml/goyaml.v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Wrapped Two-Column Table with UiTable in Go\nDESCRIPTION: Example of creating a two-column table with text wrapping enabled. This snippet shows how to create a more detailed view with label-value pairs and blank rows as separators between entries.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gosuri/uitable/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntable = uitable.New()\ntable.MaxColWidth = 80\ntable.Wrap = true // wrap columns\n\nfor _, hacker := range hackers {\n  table.AddRow(\"Name:\", hacker.Name)\n  table.AddRow(\"Birthday:\", hacker.Birthday)\n  table.AddRow(\"Bio:\", hacker.Bio)\n  table.AddRow(\"\") // blank\n}\nfmt.Println(table)\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Expressions in EBNF\nDESCRIPTION: Grammar rules for expressions in Starlark, including test, lambda, if-expressions, and primary expressions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.starlark.net/syntax/grammar.txt#2025-04-22_snippet_2\n\nLANGUAGE: EBNF\nCODE:\n```\nTest = LambdaExpr\n     | IfExpr\n     | PrimaryExpr\n     | UnaryExpr\n     | BinaryExpr\n     .\n\nLambdaExpr = 'lambda' [Parameters] ':' Test .\n\nIfExpr = Test 'if' Test 'else' Test .\n\nPrimaryExpr = Operand\n            | PrimaryExpr DotSuffix\n            | PrimaryExpr CallSuffix\n            | PrimaryExpr SliceSuffix\n            .\n\nOperand = identifier\n        | int | float | string\n        | ListExpr | ListComp\n        | DictExpr | DictComp\n        | '(' [Expression [',']] ')'\n        | ('-' | '+') PrimaryExpr\n        .\n```\n\n----------------------------------------\n\nTITLE: HAProxy Load Balancer Configuration\nDESCRIPTION: Core configuration settings for HAProxy including replica count, ports, image settings, and TLS configuration.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nhaproxy.enabled: false\nhaproxy.replicas: 3\nhaproxy.servicePort: 6379\nhaproxy.containerPort: 6379\nhaproxy.image.repository: haproxy\nhaproxy.image.tag: 2.4.2\nhaproxy.image.pullPolicy: IfNotPresent\nhaproxy.imagePullSecrets: []\nhaproxy.tls.enabled: false\nhaproxy.tls.secretName: \"\"\nhaproxy.tls.certMountPath: false\n```\n\n----------------------------------------\n\nTITLE: Generating Serial Number in Go\nDESCRIPTION: Adds functionality to generate a serial number.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nGenerate serial number a3bdffd (Cody Coons)\n```\n\n----------------------------------------\n\nTITLE: Installing Redis HA using Helm\nDESCRIPTION: Command to add the DandyDeveloper chart repository and install the Redis HA chart. This deploys a highly available Redis configuration on your Kubernetes cluster.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add dandydev https://dandydeveloper.github.io/charts\nhelm install dandydev/redis-ha\n```\n\n----------------------------------------\n\nTITLE: Metric Exporter Configuration (Go)\nDESCRIPTION: Example showing metric exporter package imports from the release notes. Used for exporting metric data.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n\"go.opentelemetry.io/otel/exporters/otlpmetric/otlpmetricgrpc\"\n\"go.opentelemetry.io/otel/exporters/otlpmetric/otlpmetrichttp\"\n```\n\n----------------------------------------\n\nTITLE: Importing KubeSphere client-go packages in Go\nDESCRIPTION: This snippet demonstrates how to import the necessary packages from the KubeSphere client-go library to interact with the KubeSphere API Server.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/staging/src/kubesphere.io/client-go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nimport (\n\t\"kubesphere.io/client-go/rest\"\n\t\"kubesphere.io/client-go/client\"\n\t\"kubesphere.io/client-go/client/generic\"\n)\n```\n\n----------------------------------------\n\nTITLE: Redis Network Policy Port Configuration\nDESCRIPTION: Example of network policy ingress rule port configuration for Redis and Sentinel ports\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n[{port: redis.port, protocol: TCP}, {port: sentinel.port, protocol: TCP}]\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from Go Map in Go\nDESCRIPTION: Shows how to create a loader for a JSON schema from a Go map. This allows using native Go data structures to define schemas programmatically.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nm := map[string]interface{}{\"type\": \"string\"}\nloader := gojsonschema.NewGoLoader(m)\n```\n\n----------------------------------------\n\nTITLE: Importing go-toml v2 in Go\nDESCRIPTION: Shows how to import the go-toml v2 library in a Go program.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/pelletier/go-toml/v2\"\n```\n\n----------------------------------------\n\nTITLE: Set Operations in CEL\nDESCRIPTION: Examples of set operations including contains, equivalent, and intersects functions for list comparison.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_4\n\nLANGUAGE: cel\nCODE:\n```\nsets.contains([], []) // true\nsets.contains([1, 2, 3, 4], [2, 3]) // true\n\nsets.equivalent([], []) // true\nsets.equivalent([1], [1, 1]) // true\n\nsets.intersects([1], []) // false\nsets.intersects([1], [1, 2]) // true\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History Documentation\nDESCRIPTION: Detailed changelog entries for jwt-go library versions from 1.0.0 to 4.0.0, documenting key changes, breaking changes, new features, improvements and security fixes.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/golang-jwt/jwt/v4/VERSION_HISTORY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## `jwt-go` Version History\n\n#### 4.0.0\n\n* Introduces support for Go modules. The `v4` version will be backwards compatible with `v3.x.y`.\n\n#### 3.2.2\n\n* Starting from this release, we are adopting the policy to support the most 2 recent versions of Go currently available. By the time of this release, this is Go 1.15 and 1.16 ([#28](https://github.com/golang-jwt/jwt/pull/28)).\n* Fixed a potential issue that could occur when the verification of `exp`, `iat` or `nbf` was not required and contained invalid contents, i.e. non-numeric/date. Thanks for @thaJeztah for making us aware of that and @giorgos-f3 for originally reporting it to the formtech fork ([#40](https://github.com/golang-jwt/jwt/pull/40)).\n* Added support for EdDSA / ED25519 ([#36](https://github.com/golang-jwt/jwt/pull/36)).\n* Optimized allocations ([#33](https://github.com/golang-jwt/jwt/pull/33)).\n```\n\n----------------------------------------\n\nTITLE: Testing CORS Request with Curl in Bash\nDESCRIPTION: This curl command demonstrates how to make a request to test the CORS implementation. The verbose flag shows the HTTP headers in the response.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8080/foo -v\n```\n\n----------------------------------------\n\nTITLE: Creating GRPC Driver for OTLP Exporter\nDESCRIPTION: Illustrates the NewGRPCDriver function that returns a ProtocolDriver maintaining a single gRPC connection to the collector. This is part of the OTLP exporter configuration.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nNewGRPCDriver\n```\n\n----------------------------------------\n\nTITLE: List Operations in CEL\nDESCRIPTION: Example of list slicing operation to create sub-lists using start and end indices.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_3\n\nLANGUAGE: cel\nCODE:\n```\n[1,2,3,4].slice(1, 3) // return [2, 3]\n[1,2,3,4].slice(2, 4) // return [3 ,4]\n```\n\n----------------------------------------\n\nTITLE: CORS Request Response Example in Bash\nDESCRIPTION: This shows the expected output from a curl request to the CORS-enabled endpoint, including the Access-Control-Allow-Methods and Access-Control-Allow-Origin headers.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n*   Trying ::1...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 8080 (#0)\n> GET /foo HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.59.0\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Access-Control-Allow-Methods: GET,PUT,PATCH,OPTIONS\n< Access-Control-Allow-Origin: *\n< Date: Fri, 28 Jun 2019 20:13:30 GMT\n< Content-Length: 3\n< Content-Type: text/plain; charset=utf-8\n< \n* Connection #0 to host localhost left intact\nfoo\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Environment Configuration - Shell\nDESCRIPTION: Runs Go tests while setting multiple environment variables for PostgreSQL connection configuration. Variables set include 'PGHOST', 'PGPORT', 'PGUSER', 'PGSSLMODE', and 'PGDATABASE', targeting a Postgres instance running locally. This approach is useful for customizing connection details and disabling SSL for local tests.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/lib/pq/TESTS.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nPGHOST=localhost PGPORT=5432 PGUSER=postgres PGSSLMODE=disable PGDATABASE=postgres go test\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Version 1.26.0\nDESCRIPTION: Changelog entry for version 1.26.0 detailing performance improvements and new WithLazy method addition\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.26.0 (14 Sep 2023)\nEnhancements:\n* [#1319][]: Add `WithLazy` method to `Logger` which lazily evaluates the structured\ncontext.\n* [#1350][]: String encoding is much (~50%) faster now.\n```\n\n----------------------------------------\n\nTITLE: Generating Individual Schema Components with Make\nDESCRIPTION: Provides commands to execute individual Make targets for generating specific schema components separately: `kustomizationapi/swagger.go` for Kustomization API, `kubernetesapi/swagger.go` for Kubernetes API, and `kubernetesapi/openapiinfo.go` for updating schema metadata. This allows for more granular control compared to `make all`.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake kustomizationapi/swagger.go\nmake kubernetesapi/swagger.go\nmake kubernetesapi/openapiinfo.go\n```\n\n----------------------------------------\n\nTITLE: Sending Metrics to StatHat in Go\nDESCRIPTION: Demonstrates how to periodically emit metrics to StatHat. This requires the stathat package and an email address for authentication.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/rcrowley/go-metrics/stathat\"\n\ngo stathat.Stathat(metrics.DefaultRegistry, 10e9, \"example@example.com\")\n```\n\n----------------------------------------\n\nTITLE: Logging Metrics to Standard Error in Go\nDESCRIPTION: Shows how to periodically log metrics in human-readable form to standard error using the Log function with a specified time interval.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo metrics.Log(metrics.DefaultRegistry, 5 * time.Second, log.New(os.Stderr, \"metrics: \", log.Lmicroseconds))\n```\n\n----------------------------------------\n\nTITLE: Initializing Package Path in Go\nDESCRIPTION: Example package path references showing paths for OpenTelemetry components and exporters.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.op/otel/exporters/prometheus\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from HTTP Reference in Go\nDESCRIPTION: Example of loading a JSON schema from a web/HTTP reference using gojsonschema's ReferenceLoader.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nloader := gojsonschema.NewReferenceLoader(\"http://www.some_host.com/schema.json\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Docker Credential Helper (JSON)\nDESCRIPTION: This JSON snippet sets the 'credsStore' field in Docker's config.json to designate a global credential helper (for example, osxkeychain on macOS). All authentication requests are routed to the specified helper binary. Input is the credential store name, output is a config consumed by Docker or compatible clients, and this should match a credential helper installed on system PATH.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"credsStore\": \"osxkeychain\"\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Metrics to Syslog in Go\nDESCRIPTION: Demonstrates how to periodically log metrics to syslog using the Syslog function, which sends metrics in a parseable format to the system's syslog daemon.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nw, _ := syslog.Dial(\"unixgram\", \"/dev/log\", syslog.LOG_INFO, \"metrics\")\ngo metrics.Syslog(metrics.DefaultRegistry, 60e9, w)\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Must Helper\nDESCRIPTION: Example showing error handling and the use of Must helper function\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nerr := gotenv.Load(\".env-is-not-exist\")\nfmt.Println(\"error\", err)\n// error: open .env-is-not-exist: no such file or directory\n\ngotenv.Must(gotenv.Load, \".env-is-not-exist\")\n// it will throw a panic\n// panic: open .env-is-not-exist: no such file or directory\n```\n\n----------------------------------------\n\nTITLE: Invoking Docker Credential Helper via STDIN (bash)\nDESCRIPTION: This bash command shows how to query a Docker credential helper binary (e.g., docker-credential-gcr) by piping the registry domain into its 'get' command. The output is JSON containing the username and secret (access token). This is useful for debugging credential helper resolution or integrating registry creds in scripts. Require the credential helper binary in PATH.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"gcr.io\" | docker-credential-gcr get\n{\"Username\":\"_token\",\"Secret\":\"<long access token>\"}\n```\n\n----------------------------------------\n\nTITLE: Markdown Contribution Guidelines\nDESCRIPTION: Complete markdown documentation outlining the contribution process including creating issues, making PRs, and becoming a maintainer. Emphasizes patience and proper workflow.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributions are very welcome!\\n\\n## First: Create an Issue\\n\\nEven if your fix is simple, we'd like to have an issue to relate to\\nthe PR.  Discussion about the architecture and value can go on the\\nissue, leaving PR comments exclusively for coding style.\\n\\n## Second: Make Your PR\\n\\n- Fork the `master` branch\\n- Make your change\\n- Make a PR against the `master` branch\\n\\nYou don't need to wait for comments on the issue before making your\\nPR.  If you do wait for comments, you'll have a better chance of\\ngetting your PR accepted the first time around, but it's not\\nnecessary.\\n\\n## Third: Be Patient\\n\\n- If your change breaks backward compatibility, this becomes\\n  especially true.\\n\\nWe all have lives and jobs, and many of us are no longer on projects\\nthat make use of `gorp`.  We will get back to you, but it might take a\\nwhile.\\n\\n## Fourth: Consider Becoming a Maintainer\\n\\nWe really do need help.  We will likely ask you for help after a good\\nPR, but if we don't, please create an issue requesting maintainership.\\nConsidering how few of us are currently active, we are unlikely to\\nrefuse good help.\n```\n\n----------------------------------------\n\nTITLE: Installing go-wordwrap Package in Go\nDESCRIPTION: Demonstrates how to install the go-wordwrap package using the go get command.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gosuri/uitable/util/wordwrap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/mitchellh/go-wordwrap\n```\n\n----------------------------------------\n\nTITLE: Configuring Propagators API\nDESCRIPTION: Configuration options and interfaces for the propagator API to manage injectors and extractors.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_28\n\nLANGUAGE: go\nCODE:\n```\ntype Propagators interface {\n    HTTPPropagator() HTTPPropagator\n}\n\nfunc WithInjectors(injectors ...HTTPInjector) Option\nfunc WithExtractors(extractors ...HTTPExtractor) Option\n```\n\n----------------------------------------\n\nTITLE: String Manipulation in CEL\nDESCRIPTION: Examples of string operations including charAt, indexOf, join, and lastIndexOf functions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_5\n\nLANGUAGE: cel\nCODE:\n```\n'hello'.charAt(4)  // return 'o'\n\n'hello mellow'.indexOf('ello')     // returns 1\n'hello mellow'.indexOf('ello', 2)  // returns 7\n\n['hello', 'mellow'].join() // returns 'hellomellow'\n['hello', 'mellow'].join(' ') // returns 'hello mellow'\n\n'hello mellow'.lastIndexOf('ello')     // returns 7\n'hello mellow'.lastIndexOf('ello', 6)  // returns 1\n```\n\n----------------------------------------\n\nTITLE: Updating Git Tags with Bash Script\nDESCRIPTION: The shell script is used to convert lightweight tags to signed tags in a Git repository, preserving commit date, name, and email address. It requires the bash shell and Git to be installed. Users must specify the tag name as a parameter when running the script.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/magiconair/properties/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\ntag=$1\necho \"Updating $tag\"\ndate=$(git show ${tag}^0 --format=%aD | head -1)\nemail=$(git show ${tag}^0 --format=%aE | head -1)\nname=$(git show ${tag}^0 --format=%aN | head -1)\nGIT_COMMITTER_DATE=\"$date\" GIT_COMMITTER_NAME=\"$name\" GIT_COMMITTER_EMAIL=\"$email\" git tag -s -f ${tag} ${tag}^0 -m ${tag}\n\n```\n\n----------------------------------------\n\nTITLE: Using SnakeCase Function in Go\nDESCRIPTION: This snippet demonstrates how to use the SnakeCase function from the go-strcase package to convert a camel case string to snake case.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/stoewer/go-strcase/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/stoewer/go-strcase\"\n\nvar snake = strcase.SnakeCase(\"CamelCase\")\n```\n\n----------------------------------------\n\nTITLE: Running Viper Linters with Make\nDESCRIPTION: Command to run linters for the Viper codebase, with the option to run them in parallel using the -j flag.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nmake lint # pass -j option to run them in parallel\n```\n\n----------------------------------------\n\nTITLE: Redis Exporter ServiceMonitor Configuration\nDESCRIPTION: Configuration parameters for Redis exporter service monitoring through Prometheus, including scrape intervals, telemetry paths, and monitoring labels.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nexporter.serviceMonitor.interval: nil\nexporter.serviceMonitor.telemetryPath: /metrics\nexporter.serviceMonitor.labels: {}\nexporter.serviceMonitor.timeout: nil\nexporter.serviceMonitor.endpointAdditionalProperties: {}\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Race Detection\nDESCRIPTION: Command to run tests for go-toml using Go's test tool with race detection enabled to catch concurrent memory access issues.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -race ./...\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from Go Map in Go\nDESCRIPTION: Example of loading a JSON schema from a Go map using gojsonschema's GoLoader.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nm := map[string]interface{}{\"type\": \"string\"}\nloader := gojsonschema.NewGoLoader(m)\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Go Package Names and Fixes\nDESCRIPTION: List of Go package paths that had fixes applied, including baggage parsing, metric aggregation, and bridge functionality improvements.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/baggage\ngo.opentelemetry.io/otel/sdk/metric\ngo.opentelemetry.io/otel/bridge/opentracing\ngo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\n```\n\n----------------------------------------\n\nTITLE: Importing Squirrel in Go\nDESCRIPTION: Shows how to import the Squirrel library in a Go file.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/squirrel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Masterminds/squirrel\"\n```\n\n----------------------------------------\n\nTITLE: Struct Field Order in Go TOML Marshal\nDESCRIPTION: Shows how v1 and v2 differ in handling struct field order during marshaling. V1 orders fields alphabetically while v2 preserves the order as defined in the struct.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype S struct {\n\tB string\n\tA string\n}\n\ndata := S{\n\tB: \"B\",\n\tA: \"A\",\n}\n\nb, _ := tomlv1.Marshal(data)\nfmt.Println(\"v1:\\n\" + string(b))\n\nb, _ = tomlv2.Marshal(data)\nfmt.Println(\"v2:\\n\" + string(b))\n\n// Output:\n// v1:\n// A = \"A\"\n// B = \"B\"\n\n// v2:\n// B = 'B'\n// A = 'A'\n```\n\n----------------------------------------\n\nTITLE: Using Event.Has() and Op.Has() to Check Event Types in Go\nDESCRIPTION: Example showing how to use the Event.Has() and Op.Has() methods to check event types in a more readable way compared to the previous bitwise operations approach.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fsnotify/fsnotify/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif event.Op&Write == Write && !(event.Op&Remove == Remove) {\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nif event.Has(Write) && !event.Has(Remove) {\n}\n```\n\n----------------------------------------\n\nTITLE: String Reverse Function Example\nDESCRIPTION: Function that reverses the order of characters in a string by converting to rune arrays.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n'gums'.reverse() // returns 'smug'\n'John Smith'.reverse() // returns 'htimS nhoJ'\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Comparison - Standard vs Structured\nDESCRIPTION: Demonstrates the difference between standard Go logging and structured logging approaches in controller-runtime.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/controller-runtime/TMP-LOGGING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlog.Printf(\"starting reconciliation for pod %s/%s\", podNamespace, podName)\n```\n\n----------------------------------------\n\nTITLE: Pushing Klog Release Tag to Remote Repository\nDESCRIPTION: This command pushes the newly created tag to the remote Git repository. The $VERSION should be replaced with the actual version number of the release.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/klog/v2/RELEASE.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit push $VERSION\n```\n\n----------------------------------------\n\nTITLE: First Stable Release Versions\nDESCRIPTION: Shows the first stable release versions at v1.0.0\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.0`\n* `otel/trace`: `v1.0.0`\n* `otel/baggage`: `v1.0.0`\n* `otel/sdk/trace`: `v1.0.0`\n```\n\n----------------------------------------\n\nTITLE: String Substring Function Example\nDESCRIPTION: Function that extracts a portion of a string using start and optional end indices.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n'tacocat'.substring(4)    // returns 'cat'\n'tacocat'.substring(0, 4) // returns 'taco'\n'tacocat'.substring(-1)   // error\n'tacocat'.substring(2, 1) // error\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Replication Timeout in YAML\nDESCRIPTION: Example of adding Redis configuration options in the values.yaml file, specifically setting the replication timeout to 60 seconds.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n    repl-timeout: \"60\"\n```\n\n----------------------------------------\n\nTITLE: Migrating from Slog Shim to Native Slog\nDESCRIPTION: Example showing how to migrate from slog-shim to native log/slog when upgrading to Go 1.21\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sagikazarmark/slog-shim/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage mylib\n\n- import slog \"github.com/sagikazarmark/slog-shim\"\n+ import \"log/slog\"\n\nfunc New(logger *slog.Logger) MyLib {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unix Coverage Script\nDESCRIPTION: Command to run the project's custom coverage script, which checks if new code changes lower the overall test coverage.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./ci.sh coverage -d v2\n```\n\n----------------------------------------\n\nTITLE: Installing etcd/clientv3 Go Client\nDESCRIPTION: Command to install the etcd client library using go get. Note that due to etcd 3.5.0 not being released at time of writing, a pre-release version needs to be specified.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get go.etcd.io/etcd/client/v3\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo get go.etcd.io/etcd/client/v3@v3.5.0-pre\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Markdown Tables\nDESCRIPTION: Example showing the syntax for creating simple tables in markdown using the Blackfriday parser.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nName    | Age\n--------|------\nBob     | 27\nAlice   | 23\n```\n\n----------------------------------------\n\nTITLE: Implementing a Struct Builder with lann/builder in Go\nDESCRIPTION: Defines a custom struct (Muppet) and a corresponding builder, leveraging lann/builder's immutable builder helpers to implement fluent methods for field setting (Name, AddFriend) and object construction (Build). This snippet illustrates registering the builder, chaining field mutations, and producing fully-initialized Muppet instances. Requires the lann/builder package and assumes the custom types are declared as shown.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/lann/builder/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/lann/builder\"\n\ntype Muppet struct {\n    Name string\n    Friends []string\n}\n\ntype muppetBuilder builder.Builder\n\nfunc (b muppetBuilder) Name(name string) muppetBuilder {\n    return builder.Set(b, \"Name\", name).(muppetBuilder)\n}\n\nfunc (b muppetBuilder) AddFriend(friend string) muppetBuilder {\n    return builder.Append(b, \"Friends\", friend).(muppetBuilder)\n}\n\nfunc (b muppetBuilder) Build() Muppet {\n    return builder.GetStruct(b).(Muppet)\n}\n\nvar MuppetBuilder = builder.Register(muppetBuilder{}, Muppet{}).(muppetBuilder)\n```\n\n----------------------------------------\n\nTITLE: Using TryAgainAfter with Duration\nDESCRIPTION: Example showing how to use TryAgainAfter to dynamically adjust polling duration in Eventually and Consistently\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/gomega/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nTryAgainAfter(duration)\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Options in Go\nDESCRIPTION: Pattern for implementing configuration options for custom declared types.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype myTypeOption struct {\n\tMyType MyType\n}\n\nfunc (o myTypeOption) apply(c config) config {\n\tc.MyType = o.MyType\n    return c\n}\n\n// WithMyType sets T to have include MyType.\nfunc WithMyType(t MyType) Option {\n\treturn myTypeOption{t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the `json-iterator/go` library using Go Get\nDESCRIPTION: Provides the shell command to download and install the `json-iterator/go` package using the standard Go package management tool (`go get`). This command fetches the library from its GitHub repository.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/json-iterator/go\n```\n\n----------------------------------------\n\nTITLE: Demonstrating encoding/gob's security vulnerability with malicious input (Go)\nDESCRIPTION: Example showing how encoding/gob can crash with a fatal out-of-memory error when decoding malicious input, highlighting the security benefits of fxamacker/cbor's configurable limits.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Example of encoding/gob having \"fatal error: runtime: out of memory\"\n// while decoding 181 bytes.\npackage main\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"encoding/hex\"\n\t\"fmt\"\n)\n\n// Example data is from https://github.com/golang/go/issues/24446\n// (shortened to 181 bytes).\nconst data = \"4dffb503010102303001ff30000109010130010800010130010800010130\" +\n\t\"01ffb80001014a01ffb60001014b01ff860001013001ff860001013001ff\" +\n\t\"860001013001ff860001013001ffb80000001eff850401010e3030303030\" +\n\t\"30303030303030303001ff3000010c0104000016ffb70201010830303030\" +\n\t\"3030303001ff3000010c000030ffb6040405fcff00303030303030303030\" +\n\t\"303030303030303030303030303030303030303030303030303030303030\" +\n\t\"30\"\n\ntype X struct {\n\tJ *X\n\tK map[string]int\n}\n\nfunc main() {\n\traw, _ := hex.DecodeString(data)\n\tdecoder := gob.NewDecoder(bytes.NewReader(raw))\n\n\tvar x X\n\tdecoder.Decode(&x) // fatal error: runtime: out of memory\n\tfmt.Println(\"Decoding finished.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Embedding with Go-Gorp\nDESCRIPTION: Shows how Go-Gorp supports embedded structs when mapping to database tables. The example demonstrates defining a struct with an embedded type and inserting it into the database.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Names struct {\n    FirstName string\n    LastName  string\n}\n\ntype WithEmbeddedStruct struct {\n    Id int64\n    Names\n}\n\nes := &WithEmbeddedStruct{-1, Names{FirstName: \"Alice\", LastName: \"Smith\"}}\nerr := dbmap.Insert(es)\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Billy Module\nDESCRIPTION: Instructions for importing the Go-Billy package using Go modules, showing both module-enabled and module-disabled import paths.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-billy/v5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/go-git/go-billy/v5\" // with go modules enabled (GO111MODULE=on or outside GOPATH)\nimport \"github.com/go-git/go-billy\" // with go modules disabled\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OpenAPI Type Definition in Go using Schema Methods\nDESCRIPTION: Shows an alternative approach to define OpenAPI schema for a custom type by implementing OpenAPISchemaType() and OpenAPISchemaFormat() methods. This approach avoids the need to import the openapi package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/kube-openapi/pkg/generators/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (_ Time) OpenAPISchemaType() []string { return []string{\"string\"} }\nfunc (_ Time) OpenAPISchemaFormat() string { return \"date-time\" }\n```\n\n----------------------------------------\n\nTITLE: Apache License Boilerplate Notice\nDESCRIPTION: Standard copyright notice and license statement to be included in software projects using the Apache License 2.0. The text shown is an example with placeholder copyright information.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/LICENSE-APACHE-2.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright 2015 xeipuuv\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Document\nDESCRIPTION: Example of a JSON document to be patched.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"John\",\n    \"age\": 24,\n    \"height\": 3.21\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Badge for OTLP Trace Exporter Package in Go\nDESCRIPTION: Markdown code that displays a badge linking to the Go package documentation for the OpenTelemetry OTLP Trace Exporter.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/exporters/otlp/otlptrace/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlptrace)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlptrace)\n```\n\n----------------------------------------\n\nTITLE: String UpperAscii Function Example\nDESCRIPTION: Function that converts all ASCII characters to uppercase, without affecting non-ASCII characters.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/cel-go/ext/README.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n'TacoCat'.upperAscii()      // returns 'TACOCAT'\n'TacoCÆt Xii'.upperAscii()  // returns 'TACOCÆT XII'\n```\n\n----------------------------------------\n\nTITLE: Package Import Example\nDESCRIPTION: Example showing imports for OpenTelemetry semantic conventions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/semconv/v1.21.0\n```\n\n----------------------------------------\n\nTITLE: Float16 Type and API Definition in Go\nDESCRIPTION: Defines the Float16 type and its API, including exported functions and methods. It covers conversion functions, bit manipulation, and various utility methods for working with float16 values.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/x448/float16/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage float16 // import \"github.com/x448/float16\"\n\n// Exported types and consts\ntype Float16 uint16\nconst ErrInvalidNaNValue = float16Error(\"float16: invalid NaN value, expected IEEE 754 NaN\")\n\n// Exported functions\nFromfloat32(f32 float32) Float16\nFromNaN32ps(nan float32) (Float16, error)\nFrombits(b16 uint16) Float16\nNaN() Float16\nInf(sign int) Float16\nPrecisionFromfloat32(f32 float32) Precision\n\n// Exported methods\n(f Float16) Float32() float32\n(f Float16) Bits() uint16\n(f Float16) IsNaN() bool\n(f Float16) IsQuietNaN() bool\n(f Float16) IsInf(sign int) bool\n(f Float16) IsFinite() bool\n(f Float16) IsNormal() bool\n(f Float16) Signbit() bool\n(f Float16) String() string\n```\n\n----------------------------------------\n\nTITLE: Installing Viper in Go Projects\nDESCRIPTION: Command to install Viper using Go modules.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/spf13/viper\n```\n\n----------------------------------------\n\nTITLE: Installing oklog/ulid Package using Go\nDESCRIPTION: This shell command uses the Go toolchain to download and install the `oklog/ulid` package from GitHub. It requires the Go environment to be set up.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/oklog/ulid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/oklog/ulid\n```\n\n----------------------------------------\n\nTITLE: Writing Fenced Code Blocks in Go\nDESCRIPTION: Example of a fenced code block containing Go code with syntax highlighting support.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc getTrue() bool {\n    return true\n}\n```\n\n----------------------------------------\n\nTITLE: Metric Memory Usage Program in Go\nDESCRIPTION: This Go program is used to measure memory usage with metrics. It creates a new metrics registry and sleeps for 600 seconds.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/memory.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"metrics\"\n\t\"time\"\n)\n\nfunc main() {\n\tfmt.Sprintf(\"foo\")\n\tmetrics.NewRegistry()\n\ttime.Sleep(600e9)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redis HA Helm Chart with Values File using Bash\nDESCRIPTION: Example command for installing the Redis HA chart using a values.yaml file for configuration.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f values.yaml dandydev/redis-ha\n```\n\n----------------------------------------\n\nTITLE: Passing Context to Eventually/Consistently\nDESCRIPTION: Example showing how to pass context as first argument to Eventually and Consistently functions\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/gomega/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nEventually(ctx, ...)\nConsistently(ctx, ...)\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Options in Go\nDESCRIPTION: Function-based approach to implementing configuration options using closures.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype optionFunc func(config) config\n\nfunc (fn optionFunc) apply(c config) config {\n\treturn fn(c)\n}\n\n// WithMyType sets t as MyType.\nfunc WithMyType(t MyType) Option {\n\treturn optionFunc(func(c config) config {\n\t\tc.MyType = t\n        return c\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Schema with References in Go\nDESCRIPTION: Shows how to compile a main schema that references other schemas that have been added to the SchemaLoader. This demonstrates the schema composition pattern.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n\tloader3 := gojsonschema.NewStringLoader(`{\n\t\t\"$id\" : \"http://some_host.com/main.json\",\n\t\t\"allOf\" : [\n\t\t\t{ \"$ref\" : \"http://some_host.com/string.json\" },\n\t\t\t{ \"$ref\" : \"http://some_host.com/maxlength.json\" }\n\t\t]\n\t}`)\n\n\tschema, err := sl.Compile(loader3)\n\n\tdocumentLoader := gojsonschema.NewStringLoader(`\"hello world\"`)\n\n\tresult, err := schema.Validate(documentLoader)\n```\n\n----------------------------------------\n\nTITLE: Importing the Heredoc Library in Go\nDESCRIPTION: Demonstrates how to import the heredoc library in a Go file. This import statement makes the heredoc package available for use in the code.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/MakeNowJust/heredoc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// usual\nimport \"github.com/MakeNowJust/heredoc\"\n```\n\n----------------------------------------\n\nTITLE: Querying Memory Usage with Shell Command\nDESCRIPTION: This shell command is used to gather static memory usage information for the metrics-bench process.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/rcrowley/go-metrics/memory.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngrep ^Vm \"/proc/$(ps fax | grep [m]etrics-bench | awk '{print $1}')/status\"\n```\n\n----------------------------------------\n\nTITLE: Generating OpenTelemetry Semantic Conventions in Go\nDESCRIPTION: A shell command sequence for generating the semconv package from the OpenTelemetry Semantic Conventions repository. It requires setting the desired convention version tag and path to the semantic conventions repository.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\"v1.21.0\" # Change to the release version you are generating.\nexport OTEL_SEMCONV_REPO=\"/absolute/path/to/opentelemetry/semantic-conventions\"\ndocker pull otel/semconvgen:latest\nmake semconv-generate # Uses the exported TAG and OTEL_SEMCONV_REPO.\n```\n\n----------------------------------------\n\nTITLE: Installation Dependencies Note\nDESCRIPTION: Specifies the external dependency required for YAML functionality in the library.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-openapi/swag/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* YAML utilities depend on gopkg.in/yaml.v2\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Master Pod\nDESCRIPTION: Command to establish an interactive shell connection to the Redis master pod in the specified namespace. This provides direct access to the Redis container for administration or troubleshooting.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/templates/NOTES.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it {{ template \"redis-ha.fullname\" . }}-server-0 -n {{ .Release.Namespace }} -c redis -- sh\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests Against PostgreSQL - Shell\nDESCRIPTION: Demonstrates how to execute Go tests that require a running PostgreSQL instance using the 'go test' command. The 'PGHOST' environment variable is set to specify the PostgreSQL host location. This command expects the PostgreSQL server to be accessible and the test database ready. No explicit Go code is shown; only the shell invocation for tests is provided.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/lib/pq/TESTS.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPGHOST=/run/postgresql go test\n```\n\n----------------------------------------\n\nTITLE: Installing Sonyflake using Go Get\nDESCRIPTION: Command to install Sonyflake using Go's package management system.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sony/sonyflake/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo get github.com/sony/sonyflake\n```\n\n----------------------------------------\n\nTITLE: Installing mapstructure Go Library using Go Get\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the `mapstructure` library from its GitHub repository. It requires a properly configured Go development environment.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: Version-Specific Redis Configuration Options in YAML\nDESCRIPTION: Example showing how to configure minimum replicas settings differently depending on Redis version (Redis 5.x vs. Redis 4.x/3.x).\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# In redis 5.x，see https://raw.githubusercontent.com/antirez/redis/5.0/redis.conf\nmin-replicas-to-write: 1\nmin-replicas-max-lag: 5\n\n# In redis 4.x and redis 3.x，see https://raw.githubusercontent.com/antirez/redis/4.0/redis.conf and https://raw.githubusercontent.com/antirez/redis/3.0/redis.conf\nmin-slaves-to-write 1\nmin-slaves-max-lag 5\n```\n\n----------------------------------------\n\nTITLE: Building a Struct via Chained Methods with the MuppetBuilder in Go\nDESCRIPTION: Demonstrates the usage of the custom MuppetBuilder to fluently set fields and construct a Muppet struct. By chaining Name and AddFriend, and calling Build, this pattern yields a fully-initialized struct. This example requires the builder logic as previously defined and assumes proper initialization.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/lann/builder/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nMuppetBuilder.\n    Name(\"Beaker\").\n    AddFriend(\"Dr. Honeydew\").\n    Build()\n\n=> Muppet{Name:\"Beaker\", Friends:[]string{\"Dr. Honeydew\"}}\n```\n\n----------------------------------------\n\nTITLE: Importing GoValidator Package in Go\nDESCRIPTION: Shows two ways to import the GoValidator package - using the full package name or with an alias.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  valid \"github.com/asaskevich/govalidator\"\n)\n```\n\n----------------------------------------\n\nTITLE: Redis Container Security Context\nDESCRIPTION: Container-level security context configuration specifying runtime security parameters and capabilities.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncontainerSecurityContext:\n  runAsNonRoot: true\n  allowPrivilegeEscalation: false\n  seccompProfile:\n    type: RuntimeDefault\n  capabilities:\n    drop:\n      - \"ALL\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Formatter in Gomega\nDESCRIPTION: Example showing how to register a custom formatter for specific types using format.RegisterCustomFormatter()\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/gomega/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nformat.RegisterCustomFormatter()\n```\n\n----------------------------------------\n\nTITLE: Project Structure for OpenAPI v2 Protocol Buffer Implementation\nDESCRIPTION: Overview of core files in the project describing the Protocol Buffer model implementation for OpenAPI v2. The structure includes OpenAPIv2.proto for Protocol Buffer definitions, OpenAPIv2.go for JSON/YAML parsing, and OpenAPIv2.pb.go for generated Go bindings.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/gnostic-models/openapiv2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# OpenAPI v2 Protocol Buffer Models\n\nThis directory contains a Protocol Buffer-language model and related code for\nsupporting OpenAPI v2.\n\nGnostic applications and plugins can use OpenAPIv2.proto to generate Protocol\nBuffer support code for their preferred languages.\n\nOpenAPIv2.go is used by Gnostic to read JSON and YAML OpenAPI descriptions into\nthe Protocol Buffer-based datastructures generated from OpenAPIv2.proto.\n\nOpenAPIv2.proto and OpenAPIv2.go are generated by the Gnostic compiler\ngenerator, and OpenAPIv2.pb.go is generated by protoc, the Protocol Buffer\ncompiler, and protoc-gen-go, the Protocol Buffer Go code generation plugin.\n```\n\n----------------------------------------\n\nTITLE: Generating a New Unique ID with Sonyflake\nDESCRIPTION: Method signature for generating a new unique ID using Sonyflake. It returns a uint64 ID and an error.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sony/sonyflake/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (sf *Sonyflake) NextID() (uint64, error)\n```\n\n----------------------------------------\n\nTITLE: Using WrapString Function in Go\nDESCRIPTION: Shows how to use the WrapString function from the wordwrap package to wrap a string with a specified width. This example wraps the string 'foo bar baz' with a width of 3 characters.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gosuri/uitable/util/wordwrap/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nwrapped := wordwrap.WrapString(\"foo bar baz\", 3)\nfmt.Println(wrapped)\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Verification Scripts\nDESCRIPTION: Command to run all tests and verification scripts before submitting a pull request to the project.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-ldap/ldap/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Code Path Reference\nDESCRIPTION: Import path reference for key-value package containing value types.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/api/kv/value\n```\n\n----------------------------------------\n\nTITLE: Export Package Path\nDESCRIPTION: Path reference for metric test package in OpenTelemetry SDK.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/export/metric/metrictest\n```\n\n----------------------------------------\n\nTITLE: Example Generated URL Path String\nDESCRIPTION: Shows the expected path string (`/articles/technology/42`) that results from calling the `URL()` method on the named route defined in the previous examples with the specified parameters.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n\"/articles/technology/42\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the OpenTelemetry Go Repository in Shell\nDESCRIPTION: Command to clone the OpenTelemetry Go repository from GitHub to your local machine for development.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go.git\n```\n\n----------------------------------------\n\nTITLE: Defining Core Starlark Grammar Structure in EBNF\nDESCRIPTION: Formal definition of the top-level Starlark grammar elements including file structure, statements, and function definitions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.starlark.net/syntax/grammar.txt#2025-04-22_snippet_0\n\nLANGUAGE: EBNF\nCODE:\n```\nFile = {Statement | newline} eof .\n\nStatement = DefStmt | IfStmt | ForStmt | WhileStmt | SimpleStmt .\n\nDefStmt = 'def' identifier '(' [Parameters [',']] ')' ':' Suite .\n\nParameters = Parameter {',' Parameter}.\n\nParameter = identifier | identifier '=' Test | '*' | '*' identifier | '**' identifier .\n\nIfStmt = 'if' Test ':' Suite {'elif' Test ':' Suite} ['else' ':' Suite] .\n\nForStmt = 'for' LoopVariables 'in' Expression ':' Suite .\n\nWhileStmt = 'while' Test ':' Suite .\n\nSuite = [newline indent {Statement} outdent] | SimpleStmt .\n```\n\n----------------------------------------\n\nTITLE: Installing Flect Go Package\nDESCRIPTION: Command to install the Flect library using Go's package manager. This snippet shows how to add Flect to a Go project.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gobuffalo/flect/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ go get github.com/gobuffalo/flect\n```\n\n----------------------------------------\n\nTITLE: Installing OAuth2 Package for Go\nDESCRIPTION: This snippet shows how to install the OAuth2 package for Go using the go get command. It fetches the package from the golang.org/x/oauth2 repository.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/golang.org/x/oauth2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get golang.org/x/oauth2\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Policies for Redis HA in YAML\nDESCRIPTION: Example of configuring network policies to control ingress traffic to Redis, including namespace and pod selectors with templating support.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nnetworkPolicy: true\n  ingressRules:\n    - selectors:\n      - namespaceSelector:\n          matchLabels:\n            name: my-redis-client-namespace\n        podSelector:\n          matchLabels:\n            # template example\n            app: |-\n              {{- .App.Name }}\n      ## ports block is optional (defaults to below), define the block to override the defaults\n      # ports:\n      #   - port: 6379\n      #     protocol: TCP\n      #   - port: 26379\n      #     protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmarks\nDESCRIPTION: Command to run performance benchmarks for go-toml, executing each benchmark 10 times to get reliable metrics for performance analysis.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./... -bench=. -count=10\n```\n\n----------------------------------------\n\nTITLE: Using Redis CLI with Authentication\nDESCRIPTION: Command to connect to Redis using the Redis CLI with password authentication. The password needs to be retrieved from the Kubernetes secret as shown in the first step.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/templates/NOTES.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli -a <REDIS-PASS-FROM-SECRET>\n```\n\n----------------------------------------\n\nTITLE: Installing Go Hashids CLI Tool\nDESCRIPTION: Command to install the hashid CLI tool\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/speps/go-hashids/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/speps/go-hashids/cmd/hashid\n```\n\n----------------------------------------\n\nTITLE: Metadata Tree Example\nDESCRIPTION: Example demonstrating how to create a tree with metadata attached to nodes and branches.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xlab/treeprint/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main {\n    // to add a custom root name use `treeprint.NewWithRoot()` instead\n    tree := treeprint.New()\n\n    tree.AddNode(\"Dockerfile\")\n    tree.AddNode(\"Makefile\")\n    tree.AddNode(\"aws.sh\")\n    tree.AddMetaBranch(\" 204\", \"bin\").\n        AddNode(\"dbmaker\").AddNode(\"someserver\").AddNode(\"testtool\")\n    tree.AddMetaBranch(\" 374\", \"deploy\").\n        AddNode(\"Makefile\").AddNode(\"bootstrap.sh\")\n    tree.AddMetaNode(\"122K\", \"testtool.a\")\n\n    fmt.Println(tree.String())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Accept Struct for HTTP Accept Header Clauses in Go\nDESCRIPTION: This struct definition, `Accept`, represents a single clause found within an HTTP `Accept` header. It includes fields for the media type (`Type`), subtype (`SubType`), quality factor (`Q` as float32), and any associated parameters (`Params` as a map of string to string).\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Accept struct {\n    Type, SubType string\n    Q             float32\n    Params        map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Installation Error Example\nDESCRIPTION: Example error message when trying to install Viper using GOPATH mode instead of Go Modules. The error occurs when Go cannot find the HCL package dependency in the traditional GOPATH locations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/TROUBLESHOOTING.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncannot find package \"github.com/hashicorp/hcl/tree/hcl1\" in any of:\n/usr/local/Cellar/go/1.15.7_1/libexec/src/github.com/hashicorp/hcl/tree/hcl1 (from $GOROOT)\n/Users/user/go/src/github.com/hashicorp/hcl/tree/hcl1 (from $GOPATH)\n```\n\n----------------------------------------\n\nTITLE: Installing Go INI Package\nDESCRIPTION: Command to install the INI package using Go package manager. Requires Go version 1.13 or higher.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/ini.v1/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get gopkg.in/ini.v1\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Expression Suffixes and Arguments in EBNF\nDESCRIPTION: Grammar rules for expression suffixes and function arguments in Starlark, including dot notation, function calls, and slice operations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.starlark.net/syntax/grammar.txt#2025-04-22_snippet_3\n\nLANGUAGE: EBNF\nCODE:\n```\nDotSuffix   = '.' identifier .\nCallSuffix  = '(' [Arguments [',']] ')' .\nSliceSuffix = '[' [Expression] [':' Test [':' Test]] ']' .\n\nArguments = Argument {',' Argument} .\nArgument  = Test | identifier '=' Test | '*' Test | '**' Test .\n```\n\n----------------------------------------\n\nTITLE: Package Badge Markdown Link\nDESCRIPTION: Markdown code that displays a pkg.go.dev badge and links to the package documentation for the OpenTelemetry semantic conventions v1.26.0.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/semconv/v1.26.0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.26.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.26.0)\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Contributing to Cobra\nDESCRIPTION: Sequence of git commands to fork, clone, and submit changes to the Cobra project. These commands guide contributors through the process of creating a feature branch, making changes, and submitting a pull request.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/your_username/cobra && cd cobra\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-new-feature\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake test\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m 'Add some feature'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: First Release Candidate Versions\nDESCRIPTION: Shows the first release candidate versions (RC1) for stable modules\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.0-RC1`\n* `otel/trace`: `v1.0.0-RC1`\n* `otel/baggage`: `v1.0.0-RC1`\n* `otel/sdk/trace`: `v1.0.0-RC1`\n```\n\n----------------------------------------\n\nTITLE: Setting up Zap Development Environment\nDESCRIPTION: Commands to set up the local development environment for Zap by cloning the repository and configuring git remotes. Creates necessary directory structure in GOPATH and establishes connection with upstream repository.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/go.uber.org\ncd $GOPATH/src/go.uber.org\ngit clone git@github.com:your_github_username/zap.git\ncd zap\ngit remote add upstream https://github.com/uber-go/zap.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Installing xstrings Package with Go Get\nDESCRIPTION: Command to install the xstrings package using Go's package management tool.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/huandu/xstrings/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/huandu/xstrings\n```\n\n----------------------------------------\n\nTITLE: JSON Patch Document Example\nDESCRIPTION: Example of a JSON patch document containing replace and remove operations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\"op\": \"replace\", \"path\": \"/name\", \"value\": \"Jane\"},\n    {\"op\": \"remove\", \"path\": \"/height\"}\n]\n```\n\n----------------------------------------\n\nTITLE: VSCode Linting Configuration for Go\nDESCRIPTION: JSON configuration settings for enabling golangci-lint integration in VSCode. These settings enable automatic linting on file save at the package level.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Microsoft/go-winio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"go.lintTool\": \"golangci-lint\",\n    \"go.lintOnSave\": \"package\"\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling TOML into a Go struct\nDESCRIPTION: Demonstrates how to unmarshal a TOML document into a Go struct using go-toml v2.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ndoc := `\nversion = 2\nname = \"go-toml\"\ntags = [\"go\", \"toml\"]\n`\n\nvar cfg MyConfig\nerr := toml.Unmarshal([]byte(doc), &cfg)\nif err != nil {\n      panic(err)\n}\nfmt.Println(\"version:\", cfg.Version)\nfmt.Println(\"name:\", cfg.Name)\nfmt.Println(\"tags:\", cfg.Tags)\n\n// Output:\n// version: 2\n// name: go-toml\n// tags: [go toml]\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite with Just\nDESCRIPTION: Command to execute the test suite using the Just command runner tool.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sagikazarmark/locafero/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njust test\n```\n\n----------------------------------------\n\nTITLE: Empty TLS Configuration\nDESCRIPTION: Empty string configuration for TLS parameters\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Definition\nDESCRIPTION: Example .env file content showing environment variable definitions\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nAPP_ID=1234567\nAPP_SECRET=abcdef\n```\n\n----------------------------------------\n\nTITLE: Declaring Package and Importing Dependencies in Go\nDESCRIPTION: This snippet declares the package name as `goautoneg` and imports the necessary external library `bitbucket.org/ww/goautoneg` which provides the core functionality for HTTP content negotiation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage goautoneg\nimport \"bitbucket.org/ww/goautoneg\"\n```\n\n----------------------------------------\n\nTITLE: Defining the ParseAccept Function for Accept Header Parsing in Go\nDESCRIPTION: This function signature defines `ParseAccept`, which takes an HTTP `Accept` header string. It parses the header and returns a sorted slice of `Accept` structs, representing the parsed clauses with their types, subtypes, quality values (q), and parameters.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc ParseAccept(header string) (accept []Accept)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for oklog/ulid Package using Go\nDESCRIPTION: This shell command executes all tests within the `oklog/ulid` package and its subdirectories using the Go testing tools. It requires the Go environment and the package source code.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/oklog/ulid/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Running Unix Benchmark Script\nDESCRIPTION: Command to run the project's custom benchmark script, which helps verify that code changes don't negatively impact performance.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./ci.sh benchmark -d v2\n```\n\n----------------------------------------\n\nTITLE: Unix System Call Function Signatures in Go\nDESCRIPTION: Core system call function prototypes that must be implemented in assembly for each GOOS/GOARCH pair. These functions handle system call dispatch with different argument counts and scheduling behavior.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/golang.org/x/sys/unix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for go-jose Contribution\nDESCRIPTION: Command to run tests before submitting code contributions to ensure all tests pass.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-jose/go-jose/v4/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Document to Patch\nDESCRIPTION: Example JSON document that serves as the starting point for applying patches in the CLI demonstration.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/evanphx/json-patch/README.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"John\",\n    \"age\": 24,\n    \"height\": 3.21\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra Library in Go\nDESCRIPTION: This snippet shows how to install the latest version of the Cobra library using the go get command.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/cobra/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/spf13/cobra@latest\n```\n\n----------------------------------------\n\nTITLE: Second JSON Patch Example\nDESCRIPTION: Another example of JSON patch format illustrating add and replace operations. This patch would be applied after the first one in the CLI example.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/evanphx/json-patch/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\"op\": \"add\", \"path\": \"/address\", \"value\": \"123 Main St\"},\n    {\"op\": \"replace\", \"path\": \"/age\", \"value\": \"21\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Coverage Command\nDESCRIPTION: Command to run tests and check code coverage percentage locally using Go's built-in testing tools.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/skeema/knownhosts/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -cover\n```\n\n----------------------------------------\n\nTITLE: Implementing Slog Shim in Library Code\nDESCRIPTION: Example showing how to import and use slog-shim in a library's public API\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sagikazarmark/slog-shim/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage mylib\n\nimport slog \"github.com/sagikazarmark/slog-shim\"\n\nfunc New(logger *slog.Logger) MyLib {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-Push Git Hook\nDESCRIPTION: Command to set up a pre-push Git hook that runs tests and verification scripts automatically before pushing changes.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-ldap/ldap/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nln -s ../../.githooks/pre-push .git/hooks/pre-push\n```\n\n----------------------------------------\n\nTITLE: Updating Go Module Files\nDESCRIPTION: Commands for tidying up go.mod and vendoring dependencies\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# The GO111MODULE variable can be omitted when the code isn't located in GOPATH.\nGO111MODULE=on go mod tidy\n\nGO111MODULE=on go mod vendor\n```\n\n----------------------------------------\n\nTITLE: Running Viper Test Suite with Make\nDESCRIPTION: Command to run the test suite for the Viper configuration library using Make.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data Structure for JsonPath Queries - JavaScript\nDESCRIPTION: This JavaScript snippet presents a representative JSON object with nested structures for testing JsonPath queries as referenced in the documentation. The data contains store information, an array of books, and an expensive price threshold. This structure is necessary for replicating sample queries and understanding JsonPath operator behavior. It can be used as a test fixture or example input for Go, JavaScript, or other environments supporting JsonPath.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/oliveagle/jsonpath/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"store\": {\n        \"book\": [\n            {\n                \"category\": \"reference\",\n                \"author\": \"Nigel Rees\",\n                \"title\": \"Sayings of the Century\",\n                \"price\": 8.95\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"Evelyn Waugh\",\n                \"title\": \"Sword of Honour\",\n                \"price\": 12.99\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"Herman Melville\",\n                \"title\": \"Moby Dick\",\n                \"isbn\": \"0-553-21311-3\",\n                \"price\": 8.99\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"J. R. R. Tolkien\",\n                \"title\": \"The Lord of the Rings\",\n                \"isbn\": \"0-395-19395-8\",\n                \"price\": 22.99\n            }\n        ],\n        \"bicycle\": {\n            \"color\": \"red\",\n            \"price\": 19.95\n        }\n    },\n    \"expensive\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Installing XXHash Package Using Go Get\nDESCRIPTION: Command to install the xxhash package using Go's package manager.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/OneOfOne/xxhash/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/OneOfOne/xxhash\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Chronological documentation of version changes, including bug fixes, feature additions, and improvements to the go-restful-openapi package. Notable changes include support for array data formats, property naming, swagger schemes, and various type handling improvements.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/emicklei/go-restful-openapi/v2/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# changes to the go-restful-openapi package\n\n# v2+ versions are using the Go module of go-restful v3+\n\n\n## v2.9.1\n\n    - fix set array data format (#96)\n\n## v2.9.0\n\n    - Add property x-go-name support (#90)\n    - Add support to set swagger Schemes field (#91)\n\n## v2.8.0\n\n[2022-01-04]\n\n- refine and fix GoLowerCamelCasedNameHandler bug (#88)\n- Add missing fields of response header object (#89)\n- support generate field name with config (#86)\n\nThanks again to slow-zhang and Sergey Vilgelm\n\n## v2.7.0\n\n[2021-12-08]\n\n- fix some typos (#85)\n- use PossibleValues in favor of AllowedValues (#84)\n- PostBuildSwaggerSchema handler for each model (#83)\n- Use int64 format for time.Duration type (#82)\n\nSpecial thanks to contributions of Sergey Vilgelm <sergey@vilgelm.com>\n\n## [2021-09-20] v2.6.0\n\n- feat(parameter): adds additional openapi mappings (#74, robbie@robnrob.com)\n\n## [2021-09-20] v2.5.0\n\n- add support for format tag (#72, askingcat)\n\n## [2021-09-18] v2.4.0\n\n- add support for vendor extensions (#)\n\n## [2020-02-10] v2.3.0\n    - Support for custom attribute \"x-nullable\" (#70)\n\n## v1.4.0 + v2.2.0\n    - Allow maps as top level types and support maps to slices (#63)\n\n## v1.3.0 + v2.1.0\n    - add json.Number handling (PR #61)\n    - add type alias support for primitives (PR #61)\n\n## v1.2.0\n\n    - handle map[string][]byte (#59)\n\n## v1.1.0 (v0.14.1)\n\n    - Add Host field to Config which is copied into Swagger object\n    - Enable CORS by default as per the documentation (#58)\n    - add go module\n    - update dependencies\n\n## v0.13.0\n\n    - Do not use 200 as default response, instead use the one explicitly defined.\n    - support time.Duration\n    - Fix Parameter 'AllowableValues' to populate swagger definition\n\n## v0.12.0\n\n    - add support for time.Duration\n    - Populate the swagger definition with the parameter's 'AllowableValues' as an enum (#53)\n    - Fix for #19 MapModelTypeNameFunc has incomplete behavior\n    - Merge paths with existing paths from other webServices (#48)\n    - prevent array param.Type be overwritten in the else case below (#47)\n\n## v0.11.0\n\n    - Register pointer to array/slice of primitives as such rather than as reference to the primitive type definition. (#46)\n    - Add support for map types using \"additional properties\" (#44) \n\n## <= v0.10.0\n\nSee `git log`.\n```\n\n----------------------------------------\n\nTITLE: Creating a Logging Docker Credential Helper Wrapper in Bash\nDESCRIPTION: This Bash script wraps the `docker-credential-gcr` helper. It executes `docker-credential-gcr` with the provided arguments (`$@`), pipes its standard output (`stdout`) to `tee`, which duplicates the output, sending one copy to standard error (`stderr`) via `cat 1>&2` and the other copy back to the original standard output. This allows snooping on the credentials returned by `docker-credential-gcr` during Docker operations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\ndocker-credential-gcr $@ | tee >(cat 1>&2)\n\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry SDK Instrumentation in Markdown\nDESCRIPTION: This snippet shows how to display a badge that links to the Go package documentation for the OpenTelemetry SDK Instrumentation module.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/sdk/instrumentation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# SDK Instrumentation\n\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/instrumentation)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/instrumentation)\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text\nDESCRIPTION: The full text of the Developer Certificate of Origin version 1.1 that contributors must agree to when submitting code to the project. This certification ensures contributors have the right to submit their code under the project's open source license.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/go-units/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Installing Diskv Using Go Get\nDESCRIPTION: Command to install the Diskv library using Go's package manager. Requires Go to be installed on the system.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/peterbourgon/diskv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/peterbourgon/diskv\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge Linking to Go Package Documentation\nDESCRIPTION: Markdown code that displays a PkgGoDev badge linking to the documentation for the OpenTelemetry trace embedded module in Go.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/trace/embedded/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/embedded)\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Badge\nDESCRIPTION: Markdown code that displays a package documentation badge linking to the Go package documentation for OpenTelemetry SDK trace module.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/sdk/trace/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/trace)\n```\n\n----------------------------------------\n\nTITLE: Installing Redis HA Helm Chart with Custom Parameters using Bash\nDESCRIPTION: Example command for installing the Redis HA chart with custom image and tag parameters using the Helm CLI.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ helm repo add dandydev https://dandydeveloper.github.io/charts\n$ helm install \\\n  --set image=redis \\\n  --set tag=5.0.5-alpine \\\n    dandydev/redis-ha\n```\n\n----------------------------------------\n\nTITLE: Issue Filing Guidelines in Markdown\nDESCRIPTION: A numbered list of questions that must be answered when filing an issue, including Go version, system details, and problem description.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/NYTimes/gziphandler/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. What version of Go are you using (`go version`)?\n2. What operating system and processor architecture are you using?\n3. What did you do?\n4. What did you expect to see?\n5. What did you see instead?\n```\n\n----------------------------------------\n\nTITLE: Using Slim-Sprig Template Functions\nDESCRIPTION: Shows how to use Slim-Sprig's template functions within Go templates, demonstrating function chaining with pipes and lowercase convention.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-task/slim-sprig/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ \"hello!\" | upper | repeat 5 }}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nHELLO!HELLO!HELLO!HELLO!HELLO!\n```\n\n----------------------------------------\n\nTITLE: Linting Gomega Code with Go Vet (Shell)\nDESCRIPTION: This shell command runs the Go vet tool, a static analysis tool for Go programs, across all packages within the current directory and its subdirectories (`./...`). Contributors are required to run this command and ensure there are no warnings in the output before submitting a pull request.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/gomega/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo vet ./...\n```\n\n----------------------------------------\n\nTITLE: Installing LDAP v3 Go Library\nDESCRIPTION: Command to install the latest version of the LDAP v3 library using Go's package manager.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-ldap/ldap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get gopkg.in/ldap.v3\n```\n\n----------------------------------------\n\nTITLE: Starting a PostgreSQL Docker Container - Shell\nDESCRIPTION: Provides the command to launch a PostgreSQL server in a Docker container for test purposes. The container exposes port 5432 for database connections. Docker must be installed and the PostgreSQL image available locally or accessible via download.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/lib/pq/TESTS.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --expose 5432:5432 postgres\n```\n\n----------------------------------------\n\nTITLE: Installing Locafero Package Using Go Get\nDESCRIPTION: Command to install the locafero package using Go's package manager.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/sagikazarmark/locafero/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/sagikazarmark/locafero\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Locale in gojsonschema (Go)\nDESCRIPTION: Demonstrates how to set a custom locale for error messages in gojsonschema. This allows for customization of error strings returned by the library.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ngojsonschema.Locale = YourCustomLocale{}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hard-coded Docker Credential Helper in Bash\nDESCRIPTION: This Bash script acts as a fake Docker credential helper. When executed, it outputs a JSON object containing a predefined username ('<token>') and secret ('hunter2'). This is useful for debugging scenarios where you need to simulate a specific credential being returned.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\necho '{\"Username\":\"<token>\",\"Secret\":\"hunter2\"}'\n\n```\n\n----------------------------------------\n\nTITLE: Code of Conduct Markdown Document\nDESCRIPTION: A markdown formatted document containing the complete Contributor Covenant Code of Conduct version 1.4, adapted for the KubeSphere project. It includes sections on pledges, standards, responsibilities, scope, enforcement, and attribution.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-openapi/swag/CODE_OF_CONDUCT.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at ivan+abuse@flanders.co.nz. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n```\n\n----------------------------------------\n\nTITLE: Installing JsonPath Go Package Using go get - Bash\nDESCRIPTION: This bash snippet demonstrates how to install the jsonpath Go package from GitHub using the go get command. It is a prerequisite for using the library in Go programs and fetches the latest version compatible with Go 1.5 or above. The command should be executed in a terminal environment with Go installed.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/oliveagle/jsonpath/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/oliveagle/jsonpath\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module Replacements for KubeSphere\nDESCRIPTION: This code block defines module replacements for the KubeSphere project, specifying exact versions or commit hashes for various Go dependencies. It ensures version consistency and compatibility across the project.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/modules.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n# github.com/Microsoft/go-winio => github.com/Microsoft/go-winio v0.6.2\n# github.com/asaskevich/govalidator => github.com/asaskevich/govalidator v0.0.0-20230301143203-a9d515a09cc2\n# github.com/aws/aws-sdk-go => github.com/aws/aws-sdk-go v1.55.5\n# github.com/containerd/containerd => github.com/containerd/containerd v1.7.27\n# github.com/davecgh/go-spew => github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc\n# github.com/docker/cli => github.com/docker/cli v27.1.0+incompatible\n# github.com/docker/distribution => github.com/docker/distribution v2.8.3+incompatible\n# github.com/docker/docker => github.com/docker/docker v27.3.1+incompatible\n# github.com/docker/docker-credential-helpers => github.com/docker/docker-credential-helpers v0.7.0\n# github.com/docker/go-connections => github.com/docker/go-connections v0.5.0\n# github.com/docker/go-units => github.com/docker/go-units v0.5.0\n# github.com/emicklei/go-restful-openapi/v2 => github.com/emicklei/go-restful-openapi/v2 v2.9.2-0.20230928201233-d828a4fc267c\n# github.com/emicklei/go-restful/v3 => github.com/emicklei/go-restful/v3 v3.11.0\n# github.com/evanphx/json-patch/v5 => github.com/evanphx/json-patch/v5 v5.9.0\n# github.com/fsnotify/fsnotify => github.com/fsnotify/fsnotify v1.7.0\n# github.com/go-git/go-git/v5 => github.com/go-git/go-git/v5 v5.13.0\n# github.com/go-jose/go-jose/v4 => github.com/go-jose/go-jose/v4 v4.0.5\n# github.com/go-ldap/ldap => github.com/go-ldap/ldap v3.0.3+incompatible\n# github.com/go-logr/logr => github.com/go-logr/logr v1.4.2\n# github.com/go-openapi/analysis => github.com/go-openapi/analysis v0.21.4\n# github.com/go-openapi/errors => github.com/go-openapi/errors v0.20.2\n# github.com/go-openapi/jsonpointer => github.com/go-openapi/jsonpointer v0.19.6\n# github.com/go-openapi/jsonreference => github.com/go-openapi/jsonreference v0.20.2\n# github.com/go-openapi/loads => github.com/go-openapi/loads v0.21.2\n# github.com/go-openapi/spec => github.com/go-openapi/spec v0.20.9\n# github.com/go-openapi/strfmt => github.com/go-openapi/strfmt v0.21.3\n# github.com/go-openapi/swag => github.com/go-openapi/swag v0.22.4\n# github.com/go-openapi/validate => github.com/go-openapi/validate v0.22.0\n# github.com/go-redis/redis => github.com/go-redis/redis v6.15.2+incompatible\n# github.com/gogo/protobuf => github.com/gogo/protobuf v1.3.2\n# github.com/golang-jwt/jwt/v4 => github.com/golang-jwt/jwt/v4 v4.5.2\n# github.com/golang/example => github.com/golang/example v0.0.0-20170904185048-46695d81d1fa\n# github.com/golang/glog => github.com/golang/glog v1.2.4\n# github.com/golang/protobuf => github.com/golang/protobuf v1.5.4\n# github.com/google/go-cmp => github.com/google/go-cmp v0.6.0\n# github.com/google/go-containerregistry => github.com/google/go-containerregistry v0.14.0\n# github.com/google/gofuzz => github.com/google/gofuzz v1.2.0\n# github.com/google/gops => github.com/google/gops v0.3.23\n# github.com/google/uuid => github.com/google/uuid v1.6.0\n# github.com/gorilla/websocket => github.com/gorilla/websocket v1.5.1\n# github.com/inconshreveable/mousetrap => github.com/inconshreveable/mousetrap v1.1.0\n# github.com/jbenet/go-context => github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99\n# github.com/josharian/intern => github.com/josharian/intern v1.0.0\n# github.com/json-iterator/go => github.com/json-iterator/go v1.1.12\n# github.com/mailru/easyjson => github.com/mailru/easyjson v0.7.7\n# github.com/mitchellh/go-homedir => github.com/mitchellh/go-homedir v1.1.0\n# github.com/mitchellh/mapstructure => github.com/mitchellh/mapstructure v1.5.0\n# github.com/moby/term => github.com/moby/term v0.5.0\n# github.com/modern-go/concurrent => github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd\n# github.com/modern-go/reflect2 => github.com/modern-go/reflect2 v1.0.2\n# github.com/oklog/ulid => github.com/oklog/ulid v1.3.1\n# github.com/oliveagle/jsonpath => github.com/oliveagle/jsonpath v0.0.0-20180606110733-2e52cf6e6852\n# github.com/onsi/ginkgo/v2 => github.com/onsi/ginkgo/v2 v2.20.1\n# github.com/onsi/gomega => github.com/onsi/gomega v1.34.2\n# github.com/open-policy-agent/opa => github.com/open-policy-agent/opa v0.70.0\n# github.com/opencontainers/go-digest => github.com/opencontainers/go-digest v1.0.0\n# github.com/opencontainers/image-spec => github.com/opencontainers/image-spec v1.1.0\n# github.com/pkg/errors => github.com/pkg/errors v0.9.1\n# github.com/pmezard/go-difflib => github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2\n# github.com/sirupsen/logrus => github.com/sirupsen/logrus v1.9.3\n# github.com/sony/sonyflake => github.com/sony/sonyflake v1.2.0\n# github.com/speps/go-hashids => github.com/speps/go-hashids v2.0.0+incompatible\n# github.com/spf13/cobra => github.com/spf13/cobra v1.8.1\n# github.com/spf13/pflag => github.com/spf13/pflag v1.0.5\n# github.com/spf13/viper => github.com/spf13/viper v1.18.2\n# github.com/stretchr/testify => github.com/stretchr/testify v1.10.0\n# go.mongodb.org/mongo-driver => go.mongodb.org/mongo-driver v1.17.1\n# go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc => go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.53.0\n# go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp => go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.53.0\n# go.opentelemetry.io/otel => go.opentelemetry.io/otel v1.28.0\n# go.opentelemetry.io/otel/exporters/otlp/otlptrace => go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.28.0\n# go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc => go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.28.0\n# go.opentelemetry.io/otel/metric => go.opentelemetry.io/otel/metric v1.28.0\n# go.opentelemetry.io/otel/sdk => go.opentelemetry.io/otel/sdk v1.28.0\n# go.opentelemetry.io/otel/trace => go.opentelemetry.io/otel/trace v1.28.0\n# golang.org/x/crypto => golang.org/x/crypto v0.32.0\n# golang.org/x/net => golang.org/x/net v0.37.0\n# golang.org/x/oauth2 => golang.org/x/oauth2 v0.21.0\n# golang.org/x/sync => golang.org/x/sync v0.1.0\n# golang.org/x/sys => golang.org/x/sys v0.26.0\n# golang.org/x/text => golang.org/x/text v0.19.0\n# golang.org/x/tools => golang.org/x/tools v0.26.0\n# google.golang.org/grpc => google.golang.org/grpc v1.67.1\n# google.golang.org/protobuf => google.golang.org/protobuf v1.35.2\n# gopkg.in/asn1-ber.v1 => gopkg.in/asn1-ber.v1 v1.0.0-20181015200546-f715ec2f112d\n# gopkg.in/cas.v2 => gopkg.in/cas.v2 v2.2.0\n# gopkg.in/warnings.v0 => gopkg.in/warnings.v0 v0.1.2\n# gopkg.in/yaml.v2 => gopkg.in/yaml.v2 v2.4.0\n# gopkg.in/yaml.v3 => gopkg.in/yaml.v3 v3.0.1\n# helm.sh/helm/v3 => helm.sh/helm/v3 v3.16.2\n# k8s.io/api => k8s.io/api v0.31.2\n# k8s.io/apiextensions-apiserver => k8s.io/apiextensions-apiserver v0.31.2\n# k8s.io/apimachinery => k8s.io/apimachinery v0.31.2\n# k8s.io/apiserver => k8s.io/apiserver v0.31.2\n# k8s.io/client-go => k8s.io/client-go v0.31.2\n# k8s.io/component-base => k8s.io/component-base v0.31.2\n# k8s.io/klog/v2 => k8s.io/klog/v2 v2.130.1\n# k8s.io/kms => k8s.io/kms v0.31.2\n# k8s.io/kube-openapi => k8s.io/kube-openapi v0.0.0-20240228011516-70dd3763d340\n# k8s.io/utils => k8s.io/utils v0.0.0-20240711033017-18e509b52bc8\n# kubesphere.io/api => ./staging/src/kubesphere.io/api\n# kubesphere.io/client-go => ./staging/src/kubesphere.io/client-go\n# kubesphere.io/utils => ./staging/src/kubesphere.io/utils\n# oras.land/oras-go => oras.land/oras-go v1.2.6\n# sigs.k8s.io/controller-runtime => sigs.k8s.io/controller-runtime v0.19.1\n# sigs.k8s.io/controller-tools => sigs.k8s.io/controller-tools v0.16.5\n# sigs.k8s.io/yaml => sigs.k8s.io/yaml v1.4.0\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Format\nDESCRIPTION: The required format for signing off on git commits using your real name and email address. This can be automated using git configs and the -s flag.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/go-metrics/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Installing Mergo in Go\nDESCRIPTION: Shows how to install Mergo using go get and import it in Go code.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/imdario/mergo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/imdario/mergo\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/imdario/mergo\"\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing FakeExec Struct in Markdown\nDESCRIPTION: This code snippet is a markdown link referencing the FakeExec struct in the testing/fake_exec.go file. It's used to highlight a key component of the package for testing purposes.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/utils/exec/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[FakeExec](testing/fake_exec.go)\n```\n\n----------------------------------------\n\nTITLE: Removing All Built-in Schemas with Make\nDESCRIPTION: Executes the `nuke` target in the Makefile to remove all currently built-in schema files, including both Kustomization and Kubernetes schemas. This is typically used as a first step before generating new schemas.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake nuke\n```\n\n----------------------------------------\n\nTITLE: Initial Module Versions\nDESCRIPTION: Lists the initial unstable versions of OpenTelemetry modules at v0.14.0\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v0.14.0`\n* `otel/trace`: `v0.14.0`\n* `otel/metric`: `v0.14.0`\n* `otel/baggage`: `v0.14.0`\n* `otel/sdk/trace`: `v0.14.0`\n* `otel/sdk/metric`: `v0.14.0`\n```\n\n----------------------------------------\n\nTITLE: Running Gomega Tests with Ginkgo (Shell)\nDESCRIPTION: This shell command executes all Ginkgo tests within the project. The `-r` flag ensures tests are run recursively through subdirectories, and the `-p` flag runs them in parallel. Contributors should run this command locally to verify their changes pass all tests before submission.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/gomega/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nginkgo -r -p\n```\n\n----------------------------------------\n\nTITLE: Multiline String Declaration in HCL\nDESCRIPTION: Demonstrates how to create multi-line strings in HCL using heredoc syntax with FOO as the delimiter.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/hashicorp/hcl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n<<FOO\nhello\nworld\nFOO\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Options in Go\nDESCRIPTION: Implementation of boolean configuration options with both default true and false patterns.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype defaultFalseOption bool\n\nfunc (o defaultFalseOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithOption sets a T to have an option included.\nfunc WithOption() Option {\n\treturn defaultFalseOption(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cron v3 Library in Go\nDESCRIPTION: Commands to download and import the specific tagged release of Cron v3 library in a Go project. Requires Go 1.11 or later due to usage of Go Modules.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/robfig/cron/v3@v3.0.0\n```\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/robfig/cron/v3\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation Error (Go)\nDESCRIPTION: Illustrates how to create and add a custom validation error to the gojsonschema result. This allows for additional business logic validation beyond JSON Schema capabilities.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\ntype AnswerInvalidError struct {\n    gojsonschema.ResultErrorFields\n}\n\nfunc newAnswerInvalidError(context *gojsonschema.JsonContext, value interface{}, details gojsonschema.ErrorDetails) *AnswerInvalidError {\n    err := AnswerInvalidError{}\n    err.SetContext(context)\n    err.SetType(\"custom_invalid_error\")\n    err.SetDescriptionFormat(\"Answer to the Ultimate Question of Life, the Universe, and Everything is {{.answer}}\")\n    err.SetValue(value)\n    err.SetDetails(details)\n\n    return &err\n}\n\nfunc main() {\n    // ...\n    schema, err := gojsonschema.NewSchema(schemaLoader)\n    result, err := gojsonschema.Validate(schemaLoader, documentLoader)\n\n    if true { // some validation\n        jsonContext := gojsonschema.NewJsonContext(\"question\", nil)\n        errDetail := gojsonschema.ErrorDetails{\n            \"answer\": 42,\n        }\n        result.AddError(\n            newAnswerInvalidError(\n                gojsonschema.NewJsonContext(\"answer\", jsonContext),\n                52,\n                errDetail,\n            ),\n            errDetail,\n        )\n    }\n\n    return result, err\n}\n```\n\n----------------------------------------\n\nTITLE: Installing 'ps' Go Package via go get\nDESCRIPTION: This shell command utilizes the `go get` tool, part of the Go programming language toolchain, to download and install the 'ps' package from its specified GitHub repository (github.com/lann/ps). Executing this command makes the 'ps' library available for import and use within Go projects. Prerequisites include having the Go toolchain installed and configured on the system.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/lann/ps/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/lann/ps\n```\n\n----------------------------------------\n\nTITLE: Contributor Pledge Excerpt in Markdown\nDESCRIPTION: Markdown formatted excerpt from the code of conduct highlighting the project's commitment to fostering an open and welcoming community.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/klog/v2/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n_As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities._\n```\n\n----------------------------------------\n\nTITLE: Managing Dependencies with Go Modules\nDESCRIPTION: Commands for adding and updating dependencies using Go modules\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Pick the latest tagged release.\ngo get example.com/some/module/pkg\n\n# Pick a specific version.\ngo get example.com/some/module/pkg@vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Simple Statements in EBNF\nDESCRIPTION: Grammar rules for simple statements in Starlark, including return, break, continue, pass, assignment, and expression statements.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.starlark.net/syntax/grammar.txt#2025-04-22_snippet_1\n\nLANGUAGE: EBNF\nCODE:\n```\nSimpleStmt = SmallStmt {';' SmallStmt} [';'] '\\n' .\n# NOTE: '\\n' optional at EOF\n\nSmallStmt = ReturnStmt\n          | BreakStmt | ContinueStmt | PassStmt\n          | AssignStmt\n          | ExprStmt\n          | LoadStmt\n          .\n\nReturnStmt   = 'return' [Expression] .\nBreakStmt    = 'break' .\nContinueStmt = 'continue' .\nPassStmt     = 'pass' .\nAssignStmt   = Expression ('=' | '+=' | '-=' | '*=' | '/=' | '//=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=') Expression .\nExprStmt     = Expression .\n\nLoadStmt = 'load' '(' string {',' [identifier '='] string} [','] ')' .\n```\n\n----------------------------------------\n\nTITLE: Importing CAS Library in Golang\nDESCRIPTION: This snippet shows how to import the CAS library in a Go project. The library is used for securing HTTP frontends by providing a client implementation compatible with CAS. The package is unmaintained, and users are encouraged to fork the project.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/cas.v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \\\"gopkg.in/cas.v2\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kernel Settings with SysCtl Init Container in YAML\nDESCRIPTION: Example configuration for a privileged init container that modifies host kernel settings required for optimal Redis performance.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nsysctlImage:\n  enabled: true\n  mountHostSys: true\n  command:\n    - /bin/sh\n    - -xc\n    - |-\n      sysctl -w net.core.somaxconn=10000\n      echo never > /host-sys/kernel/mm/transparent_hugepage/enabled\n```\n\n----------------------------------------\n\nTITLE: Running Local Tests for KubeSphere\nDESCRIPTION: Command to execute local tests before submitting contributions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/controller-runtime/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Slack Release Announcement Message Format\nDESCRIPTION: Template for announcing new controller-runtime releases in Slack channels. Includes version number, key changes, and release page link.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/controller-runtime/RELEASE.md#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n:announce: Controller-Runtime v0.12.0 has been released!\nThis release includes a Kubernetes dependency bump to v1.24.\nFor more info, see the release page: https://github.com/kubernetes-sigs/controller-runtime/releases.\n :tada:  Thanks to all our contributors!\n```\n\n----------------------------------------\n\nTITLE: Mixing and Reusing Colors in Go\nDESCRIPTION: Examples of creating new color objects, adding attributes like Bold or Underline, and mixing foreground and background colors.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Create a new color object\nc := color.New(color.FgCyan).Add(color.Underline)\nc.Println(\"Prints cyan text with an underline.\")\n\n// Or just add them to New()\nd := color.New(color.FgCyan, color.Bold)\nd.Printf(\"This prints bold cyan %s\\n\", \"too!.\")\n\n// Mix up foreground and background colors, create new mixes!\nred := color.New(color.FgRed)\n\nboldRed := red.Add(color.Bold)\nboldRed.Println(\"This will print text in bold red.\")\n\nwhiteBackground := red.Add(color.BgWhite)\nwhiteBackground.Println(\"Red text with white background.\")\n\n// Mix with RGB color codes\ncolor.RGB(255, 128, 0).AddBgRGB(0, 0, 0).Println(\"orange with black background\")\n\ncolor.BgRGB(255, 128, 0).AddRGB(255, 255, 255).Println(\"orange background with white foreground\")\n```\n\n----------------------------------------\n\nTITLE: Installing Go Hashids Package\nDESCRIPTION: Command to install the main go-hashids package using go get\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/speps/go-hashids/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/speps/go-hashids\n```\n\n----------------------------------------\n\nTITLE: Installing Treeprint Package\nDESCRIPTION: Command to install the treeprint package using Go get.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xlab/treeprint/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/xlab/treeprint\n```\n\n----------------------------------------\n\nTITLE: Array Bounds Handling in Go TOML Unmarshal\nDESCRIPTION: Demonstrates the difference in array bounds handling between TOML v1 and v2. V1 returns an error for out-of-bounds arrays while v2 silently ignores extra elements to match encoding/json behavior.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype doc struct {\n  A [2]string\n}\nd := doc{}\nerr := toml.Unmarshal([]byte(`A = [\"one\", \"two\", \"many\"]`), &d)\nfmt.Println(err)\n\n// (1, 1): unmarshal: TOML array length (3) exceeds destination array length (2)\n```\n\n----------------------------------------\n\nTITLE: Installing the Heredoc Go Library via Go Get\nDESCRIPTION: Shows how to install the heredoc Go library using the go get command. This command fetches the package from GitHub and installs it in the Go environment.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/MakeNowJust/heredoc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ go get github.com/MakeNowJust/heredoc\n```\n\n----------------------------------------\n\nTITLE: Using Afero Type for Utility Functions in Go\nDESCRIPTION: This snippet shows how to use the Afero type to bind utility functions as methods to a given filesystem.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfs := afero.NewMemMapFs()\nafs := &afero.Afero{Fs: fs}\nf, err := afs.TempFile(\"\", \"ioutil-test\")\n```\n\n----------------------------------------\n\nTITLE: Installing Godropbox using Go Get Command\nDESCRIPTION: Command to install the godropbox package using Go's package management. This installs common libraries for writing Go services on Linux servers.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/edittree/bitvector/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/dropbox/godropbox\n```\n\n----------------------------------------\n\nTITLE: Markdown Header with GoDoc Badge\nDESCRIPTION: Displays the package name as a header and includes a GoDoc badge linking to the package documentation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/name/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `name`\n\n[![GoDoc](https://godoc.org/github.com/google/go-containerregistry/pkg/name?status.svg)](https://godoc.org/github.com/google/go-containerregistry/pkg/name)\n```\n\n----------------------------------------\n\nTITLE: Simple SecureJoin Implementation Using chroot and readlink\nDESCRIPTION: An example implementation of SecureJoin using chroot and readlink commands. This requires root privileges and is less transparent than the library's internal implementation, included for illustrative purposes only.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage securejoin\n\nimport (\n\t\"os/exec\"\n\t\"path/filepath\"\n)\n\nfunc SecureJoin(root, unsafePath string) (string, error) {\n\tunsafePath = string(filepath.Separator) + unsafePath\n\tcmd := exec.Command(\"chroot\", root,\n\t\t\"readlink\", \"--canonicalize-missing\", \"--no-newline\", unsafePath)\n\toutput, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\texpanded := string(output)\n\treturn filepath.Join(root, expanded), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Operators and Expressions in EBNF\nDESCRIPTION: Grammar rules for unary and binary expressions in Starlark, including operator precedence and expression lists.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.starlark.net/syntax/grammar.txt#2025-04-22_snippet_5\n\nLANGUAGE: EBNF\nCODE:\n```\nUnaryExpr = 'not' Test .\n\nBinaryExpr = Test {Binop Test} .\n\nBinop = 'or'\n      | 'and'\n      | '==' | '!=' | '<' | '>' | '<=' | '>=' | 'in' | 'not' 'in'\n      | '|'\n      | '^'\n      | '&'\n      | '-' | '+'\n      | '*' | '%' | '/' | '//'\n      .\n\nExpression = Test {',' Test} .\n# NOTE: trailing comma permitted only when within [...] or (...).\n\nLoopVariables = PrimaryExpr {',' PrimaryExpr} .\n```\n\n----------------------------------------\n\nTITLE: Installing INI Package with Go\nDESCRIPTION: Command to install the INI package using Go package manager. Requires Go version 1.13 or higher.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-ini/ini/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get gopkg.in/ini.v1\n```\n\n----------------------------------------\n\nTITLE: Benchmark Commands for XXHash Performance Testing\nDESCRIPTION: Shell commands for running performance benchmarks comparing pure Go and assembly implementations using benchstat.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Installing go-gitignore via go get in Shell\nDESCRIPTION: This shell command snippet provides the go get installation command needed to add go-gitignore as a dependency in a Go project. It requires a working Go development environment. Input: shell command statement. Output: downloads and installs github.com/monochromegane/go-gitignore for the user.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/monochromegane/go-gitignore/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ go get github.com/monochromegane/go-gitignore\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Resource Semantic Conventions in OpenTelemetry Go SDK\nDESCRIPTION: Sets the OTEL_GO_X_RESOURCE environment variable to 'true' to enable experimental resource semantic conventions in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_RESOURCE=true\n```\n\n----------------------------------------\n\nTITLE: Running Golangci-lint Command\nDESCRIPTION: Shell command for running golangci-lint on all packages in the repository. Includes optional flags for showing all lint errors.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Microsoft/go-winio/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# use . or specify a path to only lint a package\n# to show all lint errors, use flags \"--max-issues-per-linter=0 --max-same-issues=0\"\n> golangci-lint run ./...\n```\n\n----------------------------------------\n\nTITLE: Importing Gotenv Package in Go\nDESCRIPTION: Basic import statement to use gotenv package in Go applications\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/subosito/gotenv\"\n```\n\n----------------------------------------\n\nTITLE: OpenInRoot API Signatures for Secure File Opening\nDESCRIPTION: Declarations for the OpenInRoot, OpenatInRoot, and Reopen functions that provide safer file opening operations. These functions help protect against various race attacks through direct file descriptor usage.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenInRoot(root, unsafePath string) (*os.File, error)\nfunc OpenatInRoot(root *os.File, unsafePath string) (*os.File, error)\nfunc Reopen(handle *os.File, flags int) (*os.File, error)\n```\n\n----------------------------------------\n\nTITLE: Documenting CLI Behavior in Release Notes - Markdown\nDESCRIPTION: This Markdown snippet offers a detailed changelog explanation regarding the conjunction of CLI and programmatic filters, to clarify breaking changes in Ginkgo for users. It leverages typical Markdown formatting to increase readability for release note consumers. There are no dependencies or execution requirements.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\nIn prior versions of Ginkgo specs the CLI filter flags (e.g. `--focus`, `--label-filter`) would _override_ any programmatic focus.  This behavior has proved surprising and confusing in at least the following ways:\n\n- users cannot combine programmatic filters and CLI filters to more efficiently select subsets of tests\n- CLI filters can override programmatic focus on CI systems resulting in an exit code of 0 despite the presence of (incorrectly!) committed focused specs.\n\nGoing forward Ginkgo will AND all programmatic and CLI filters.  Moreover, the presence of any programmatic focused tests will always result in a non-zero exit code.\n\nThis change is technically a change in Ginkgo's external contract and may require some users to make changes to successfully adopt. Specifically: it's possible some users were intentionally using CLI filters to override programmatic focus.  If this is you please open an issue so we can explore solutions to the underlying problem you are trying to solve.\n```\n\n----------------------------------------\n\nTITLE: Example JSONC Configuration for Array Index Access\nDESCRIPTION: This JSONC (JSON with Comments) snippet shows example configuration data containing an array (`ports`). This structure is used to demonstrate accessing specific array elements by index using Viper.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_21\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"host\": {\n        \"address\": \"localhost\",\n        \"ports\": [\n            5799,\n            6029\n        ]\n    },\n    \"datastore\": {\n        \"metric\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 3099\n        },\n        \"warehouse\": {\n            \"host\": \"198.0.0.1\",\n            \"port\": 2112\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running xxhash Go Package Benchmarks using Bash\nDESCRIPTION: Provides the Bash commands used to generate the benchmark results comparing the pure Go (using `purego` build tag) and assembly implementations of `Sum64`. It utilizes `go test` with specific flags (`-benchtime`, `-count`, `-bench`) piped to `benchstat` for analysis. Requires Go toolchain and `benchstat` to be installed.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge Link for Go Package Documentation\nDESCRIPTION: A markdown link with badge image that points to the Go package documentation for OpenTelemetry semantic conventions v1.17.0\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/semconv/v1.17.0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.17.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.17.0)\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting Scripts - Bash\nDESCRIPTION: These Bash commands help contributors validate their changes before submitting a pull request by checking for vet errors and running various test suites (including in race mode) for the repository. These scripts and commands depend on a Unix-like shell environment and require Go to be installed and properly configured. Key parameters include options for specifying CPU cores and timeout duration: the -cpu flag defines how many CPU cores to run the tests on, and -timeout specifies the maximum time allowed per test. These commands output test results directly to the terminal, fail on errors, and are essential for ensuring code quality and stability before merging.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/vet.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo test -cpu 1,4 -timeout 7m ./...\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Refactoring No-op Logger Creation using gofmt\nDESCRIPTION: Use the `gofmt` command with the `-r` (rewrite) flag to replace instances of `zap.New(nil)` with the preferred `zap.NewNop()` function call. While `zap.New(nil)` still works, `zap.NewNop()` is the recommended way to obtain a no-operation logger instance as of zap v1.0.0-rc.2. The `-w` flag applies the changes directly to the source files.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngofmt -r 'zap.New(nil) -> zap.NewNop()' -w .\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Structured changelog documenting version changes, new features, and bug fixes for the UUID library\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/uuid/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## [1.6.0](https://github.com/google/uuid/compare/v1.5.0...v1.6.0) (2024-01-16)\n\n\n### Features\n\n* add Max UUID constant ([#149](https://github.com/google/uuid/issues/149)) ([c58770e](https://github.com/google/uuid/commit/c58770eb495f55fe2ced6284f93c5158a62e53e3))\n\n\n### Bug Fixes\n\n* fix typo in version 7 uuid documentation ([#153](https://github.com/google/uuid/issues/153)) ([016b199](https://github.com/google/uuid/commit/016b199544692f745ffc8867b914129ecb47ef06))\n* Monotonicity in UUIDv7 ([#150](https://github.com/google/uuid/issues/150)) ([a2b2b32](https://github.com/google/uuid/commit/a2b2b32373ff0b1a312b7fdf6d38a977099698a6))\n\n## [1.5.0](https://github.com/google/uuid/compare/v1.4.0...v1.5.0) (2023-12-12)\n\n\n### Features\n\n* Validate UUID without creating new UUID ([#141](https://github.com/google/uuid/issues/141)) ([9ee7366](https://github.com/google/uuid/commit/9ee7366e66c9ad96bab89139418a713dc584ae29))\n\n## [1.4.0](https://github.com/google/uuid/compare/v1.3.1...v1.4.0) (2023-10-26)\n\n\n### Features\n\n* UUIDs slice type with Strings() convenience method ([#133](https://github.com/google/uuid/issues/133)) ([cd5fbbd](https://github.com/google/uuid/commit/cd5fbbdd02f3e3467ac18940e07e062be1f864b4))\n\n### Fixes\n\n* Clarify that Parse's job is to parse but not necessarily validate strings. (Documents current behavior)\n\n## [1.3.1](https://github.com/google/uuid/compare/v1.3.0...v1.3.1) (2023-08-18)\n\n\n### Bug Fixes\n\n* Use .EqualFold() to parse urn prefixed UUIDs ([#118](https://github.com/google/uuid/issues/118)) ([574e687](https://github.com/google/uuid/commit/574e6874943741fb99d41764c705173ada5293f0))\n\n## Changelog\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry v1.2.0\nDESCRIPTION: Changelog entry documenting additions and changes in version 1.2.0 of go-grpc-prometheus, including new features for metric registration and removal of deprecated gRPC functions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.2.0](https://github.com/grpc-ecosystem/go-grpc-prometheus/releases/tag/v1.2.0) - 2018-06-04\n\n### Added\n\n* Provide metrics object as `prometheus.Collector`, for conventional metric registration.\n* Support non-default/global Prometheus registry.\n* Allow configuring counters with `prometheus.CounterOpts`.\n\n### Changed\n\n* Remove usage of deprecated `grpc.Code()`.\n* Remove usage of deprecated `grpc.Errorf` and replace with `status.Errorf`.\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Trace Noop Package Badge\nDESCRIPTION: Markdown code displaying the pkg.go.dev documentation badge for the OpenTelemetry trace noop package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/trace/noop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/noop)\n```\n\n----------------------------------------\n\nTITLE: SysCtl Image Command Configuration\nDESCRIPTION: Empty array configuration for sysctl image commands\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Using SeekTo Method to Navigate JSON in Go\nDESCRIPTION: Example demonstrating how to use the SeekTo method to navigate to a specific path in a JSON structure. This example seeks to the G field within the Point object of the second array element and decodes its value.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/exponent-io/jsonpath/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/exponent-io/jsonpath\"\n\nvar j = []byte(`[\n  {\"Space\": \"YCbCr\", \"Point\": {\"Y\": 255, \"Cb\": 0, \"Cr\": -10}},\n  {\"Space\": \"RGB\",   \"Point\": {\"R\": 98, \"G\": 218, \"B\": 255}}\n]`)\n\nw := json.NewDecoder(bytes.NewReader(j))\nvar v interface{}\n\nw.SeekTo(1, \"Point\", \"G\")\nw.Decode(&v) // v is 218\n```\n\n----------------------------------------\n\nTITLE: Installing gojsonschema Library for Go\nDESCRIPTION: Command to install the gojsonschema library using Go's package management.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/xeipuuv/gojsonschema\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin for Project Contributions\nDESCRIPTION: This is the Developer Certificate of Origin (DCO) text that contributors must certify to when submitting code. It outlines the legal requirements and responsibilities for open source contributions to the project.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/distribution/reference/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from Local File in Go\nDESCRIPTION: Shows how to create a loader for a JSON schema from a local file using a file reference. Note that the URI scheme with file:// prefix and full path are required.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nloader := gojsonschema.NewReferenceLoader(\"file:///home/me/schema.json\")\n```\n\n----------------------------------------\n\nTITLE: Adding Retry Option for OTLP HTTP Metric Exporter in Go\nDESCRIPTION: Adds a new WithRetry Option and RetryConfig type to the OTLP HTTP metric exporter package to specify retry behavior consistently.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nAdd the `WithRetry` `Option` and the `RetryConfig` type to the `go.opentelemetry.io/otel/exporter/otel/otlpmetric/otlpmetrichttp` package to specify retry behavior consistently.\n```\n\n----------------------------------------\n\nTITLE: Redis Security Context Configuration\nDESCRIPTION: Default security context configuration for Redis StatefulSet defining user permissions and security parameters.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityContext:\n  runAsUser: 1000\n  fsGroup: 1000\n  runAsNonRoot: true\n```\n\n----------------------------------------\n\nTITLE: Formal Go-Git Commit Message Structure\nDESCRIPTION: Defines the formal structure for commit messages in the go-git project, specifying the syntax for package, subpackage, description of changes, and optional issue reference.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-git/v5/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<package>: <subpackage>, <what changed>. [Fixes #<issue-number>]\n```\n\n----------------------------------------\n\nTITLE: Example Platform Specifier for Linux AMD64\nDESCRIPTION: Shows a common example of a platform specifier for the Linux operating system with AMD64 architecture.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/containerd/platforms/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nlinux/amd64\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Collection Expressions in EBNF\nDESCRIPTION: Grammar rules for list and dictionary expressions in Starlark, including list/dict literals and comprehensions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.starlark.net/syntax/grammar.txt#2025-04-22_snippet_4\n\nLANGUAGE: EBNF\nCODE:\n```\nListExpr = '[' [Expression [',']] ']' .\nListComp = '[' Test {CompClause} ']'.\n\nDictExpr = '{' [Entries [',']] '}' .\nDictComp = '{' Entry {CompClause} '}' .\nEntries  = Entry {',' Entry} .\nEntry    = Test ':' Test .\n\nCompClause = 'for' LoopVariables 'in' Test | 'if' Test .\n```\n\n----------------------------------------\n\nTITLE: Formatting Klog Release Announcement Email Subject\nDESCRIPTION: This is the format for the subject line of the announcement email sent to the Kubernetes development mailing list. The $VERSION should be replaced with the actual version number of the release.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/klog/v2/RELEASE.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[ANNOUNCE] kubernetes-template-project $VERSION is released\n```\n\n----------------------------------------\n\nTITLE: Running Linters and Tests for Go Package\nDESCRIPTION: This snippet shows the commands to run static code analysis, linters, and tests for the go-strcase package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/stoewer/go-strcase/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngolangci-lint run --config .golangci.yml ./...\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Disabling Experimental Resource Semantic Conventions in OpenTelemetry Go SDK\nDESCRIPTION: Unsets the OTEL_GO_X_RESOURCE environment variable to disable experimental resource semantic conventions in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_RESOURCE\n```\n\n----------------------------------------\n\nTITLE: Specifying Codespell Package Version Requirement\nDESCRIPTION: Specifies the exact version requirement for the codespell package using pinned version syntax. Requires codespell version 2.3.0 exactly.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncodespell==2.3.0\n```\n\n----------------------------------------\n\nTITLE: Importing Exponential Backoff Library in Go\nDESCRIPTION: Instructions for importing the exponential backoff library in Go projects. The import path includes a version number at the end.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/cenkalti/backoff/v4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/cenkalti/backoff/v4\"\n```\n\n----------------------------------------\n\nTITLE: Updating Changelog Bash Script\nDESCRIPTION: This Bash script updates CHANGELOG.md by retrieving the last tagged version, collecting the list of changes since the last release, and formatting this update into the changelog. It requires a properly initialized Git repository with tags already in place. Expected to execute within a Unix-based shell environment, capable of using commands like git, echo, and cat.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/ginkgo/v2/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLAST_VERSION=$(git tag --sort=version:refname | tail -n1)\\nCHANGES=$(git log --pretty=format:'- %s [%h]' HEAD...$LAST_VERSION)\\necho -e \\\"## NEXT\\n\\n$CHANGES\\n\\n### Features\\n\\n### Fixes\\n\\n### Maintenance\\n\\n$(cat CHANGELOG.md)\\\" > CHANGELOG.md\n```\n\n----------------------------------------\n\nTITLE: Displaying FOSSA License Status Badge in Markdown\nDESCRIPTION: This Markdown snippet displays a status badge from FOSSA. The badge visually represents the project's license compliance status based on FOSSA's scan results and links to the detailed report on the FOSSA website.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/imdario/mergo/README.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fimdario%2Fmergo.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fimdario%2Fmergo?ref=badge_large)\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Package Version References\nDESCRIPTION: Version numbers and release dates for the OpenTelemetry packages being updated.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[1.21.0/0.44.0] 2023-11-16\n[1.20.0/0.43.0] 2023-11-10\n[1.19.0/0.42.0/0.0.7] 2023-09-28\n```\n\n----------------------------------------\n\nTITLE: Verifying Custom Credential Helper Usage with Crane and Docker\nDESCRIPTION: This Bash snippet demonstrates invoking `crane` and `docker pull` commands for a registry (`gcr.io`) configured to use the `docker-credential-tee` helper. The output shows the JSON credential object being printed to standard error (due to the `tee` command in the helper script), confirming that the custom helper is being executed and revealing the credentials it provides (with the secret redacted in the example output).\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ crane manifest gcr.io/google-containers/pause > /dev/null\n{\"ServerURL\":\"\",\"Username\":\"_dcgcr_1_5_0_token\",\"Secret\":\"<redacted>\"}\n\n$ docker pull gcr.io/google-containers/pause\nUsing default tag: latest\n{\"ServerURL\":\"\",\"Username\":\"_dcgcr_1_5_0_token\",\"Secret\":\"<redacted>\"}\nlatest: Pulling from google-containers/pause\na3ed95caeb02: Pull complete\n4964c72cd024: Pull complete\nDigest: sha256:a78c2d6208eff9b672de43f880093100050983047b7b0afe0217d3656e1b0d5f\nStatus: Downloaded newer image for gcr.io/google-containers/pause:latest\ngcr.io/google-containers/pause:latest\n\n```\n\n----------------------------------------\n\nTITLE: Defining Option Interface in Go\nDESCRIPTION: Interface definition for configuration options with an unexported apply method to ensure interface sealing.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype Option interface {\n\tapply(config) config\n}\n```\n\n----------------------------------------\n\nTITLE: Module Path Update\nDESCRIPTION: Updated module path for the OpenTelemetry SDK package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk\n```\n\n----------------------------------------\n\nTITLE: Recommended Code Quality Tools for go-jose\nDESCRIPTION: Recommended tools for ensuring code quality in go-jose contributions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-jose/go-jose/v4/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngolint\nerrcheck\n```\n\n----------------------------------------\n\nTITLE: Removing Unreachable Code in Go\nDESCRIPTION: Removes an unreachable piece of code to improve code quality.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nMinor improvement in code quality - Removed an unreachable piece of code at defaults.go#L26:6 - Resolve formatting issues. 5834241 (Abhishek Kashyap)\n```\n\n----------------------------------------\n\nTITLE: Git configuration for signing commits\nDESCRIPTION: Commands to configure Git with your name and email, and to sign commits, which is required for contributing to the Docker Registry project.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/distribution/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit config user.name \"Real Name\" && git config user.email mail@example.com\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -s -m \"My commit\"\n```\n\n----------------------------------------\n\nTITLE: Documenting JSON Type Conversions in Table - Markdown\nDESCRIPTION: This Markdown snippet provides a table summarizing conversion rules between JSON types and target types such as bool, int, uint, float, and string within the Kubesphere project. The table enumerates specific behaviors for converting numbers, strings, booleans, objects, and arrays, using concrete examples to clarify handling of edge cases (e.g., empty strings, negative values, arrays, objects). No external dependencies are required, and inputs/outputs conform to the rules described per table cell, serving as technical documentation for internal developers.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/json-iterator/go/fuzzy_mode_convert_table.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| json type \\ dest type | bool | int | uint | float |string|\\n| --- | --- | --- | --- |--|--|\\n| number | positive => true <br/> negative => true <br/> zero => false| 23.2 => 23 <br/> -32.1 => -32| 12.1 => 12 <br/> -12.1 => 0|as normal|same as origin|\\n| string | empty string => false <br/> string \\\"0\\\" => false <br/> other strings => true | \\\"123.32\\\" => 123 <br/> \\\"-123.4\\\" => -123 <br/> \\\"123.23xxxw\\\" => 123 <br/>  \\\"abcde12\\\" => 0 <br/> \\\"-32.1\\\" => -32| 13.2 => 13 <br/> -1.1 => 0 |12.1 => 12.1 <br/> -12.3 => -12.3<br/> 12.4xxa => 12.4 <br/> +1.1e2 =>110 |same as origin|\\n| bool | true => true <br/> false => false| true => 1 <br/> false => 0 | true => 1 <br/> false => 0 |true => 1 <br/>false => 0|true => \\\"true\\\" <br/> false => \\\"false\\\"|\\n| object | true | 0 | 0 |0|originnal json|\\n| array | empty array => false <br/> nonempty array => true| [] => 0 <br/> [1,2] => 1 | [] => 0 <br/> [1,2] => 1 |[] => 0<br/>[1,2] => 1|original json|\n```\n\n----------------------------------------\n\nTITLE: Using Initials Function in GoUtils (Go)\nDESCRIPTION: This snippet demonstrates how to use the Initials function from GoUtils, which returns the initials of a given name without throwing any errors.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Masterminds/goutils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\t\"github.com/Masterminds/goutils\"\n)\n\nfunc main() {\n\n\t// EXAMPLE 1: A goutils function which returns no errors\n    fmt.Println (goutils.Initials(\"John Doe Foo\")) // Prints out \"JDF\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Fixes and Features in Changelog - Markdown\nDESCRIPTION: This Markdown code snippet captures a single fix or feature entry within the changelog, following a bullet-list style. No programming dependencies are required; knowledge of Markdown syntax is sufficient. Each bullet describes the intent and commit reference for the change. Inputs are plain text entries, output is human-readable documentation, and there are no constraints besides correct Markdown formatting.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- make BeSpecEvent duration matcher more forgiving [d6f9640]\n```\n\n----------------------------------------\n\nTITLE: Version Links in Markdown\nDESCRIPTION: Markdown links comparing different versions of the project on GitHub\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/cyphar/filepath-securejoin/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Unreleased]: https://github.com/cyphar/filepath-securejoin/compare/v0.3.1...HEAD\n[0.3.1]: https://github.com/cyphar/filepath-securejoin/compare/v0.3.0...v0.3.1\n[0.3.0]: https://github.com/cyphar/filepath-securejoin/compare/v0.2.5...v0.3.0\n[0.2.5]: https://github.com/cyphar/filepath-securejoin/compare/v0.2.4...v0.2.5\n[0.2.4]: https://github.com/cyphar/filepath-securejoin/compare/v0.2.3...v0.2.4\n[0.2.3]: https://github.com/cyphar/filepath-securejoin/compare/v0.2.2...v0.2.3\n[0.2.2]: https://github.com/cyphar/filepath-securejoin/compare/v0.2.1...v0.2.2\n[0.2.1]: https://github.com/cyphar/filepath-securejoin/compare/v0.2.0...v0.2.1\n[0.2.0]: https://github.com/cyphar/filepath-securejoin/compare/v0.1.0...v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Redis Password from Kubernetes Secret\nDESCRIPTION: Command to extract the Redis password from a Kubernetes secret and decode it from base64 encoding. This is needed for authenticated connections to the Redis server.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(kubectl get secret {{ template \"redis-ha.fullname\" . }} -o \"jsonpath={.data['auth']}\" | base64 --decode)\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage of Slow Unary gRPC Queries (>250ms) with Prometheus - JSONIQ\nDESCRIPTION: Computes the fraction (as a percentage) of unary RPCs per gRPC service that are slower than 250ms (\\\"le=0.25\\\"). This query subtracts the percentage of fast responses (\\u2264 250ms) from 100. Inputs: Prometheus histogram bucket and count metrics, aggregated over 5 minutes. Output: Slow query percentage by service. Can be used for alerting on SLA violations.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-22_snippet_8\n\nLANGUAGE: JSONIQ\nCODE:\n```\n100.0 - (\nsum(rate(grpc_server_handling_seconds_bucket{job=\\\"foo\\\",grpc_type=\\\"unary\\\",le=\\\"0.25\\\"}[5m])) by (grpc_service)\n / \nsum(rate(grpc_server_handling_seconds_count{job=\\\"foo\\\",grpc_type=\\\"unary\\\"}[5m])) by (grpc_service)\n) * 100.0\n```\n\n----------------------------------------\n\nTITLE: Using Redis CLI with Host Specification\nDESCRIPTION: Command to connect to Redis using the Redis CLI with explicit host specification. This is used for non-authenticated connections, targeting the Redis service by its full DNS name within the cluster.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/templates/NOTES.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli -h {{ template \"redis-ha.fullname\" . }}.{{ .Release.Namespace }}.svc.cluster.local\n```\n\n----------------------------------------\n\nTITLE: Configuring IDGenerator for TracerProvider\nDESCRIPTION: Shows how to use the WithIDGenerator TracerProviderOption to configure a custom IDGenerator for the TracerProvider, allowing for customized span ID generation logic.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nWithIDGenerator\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Format\nDESCRIPTION: Example of the sign-off line that should be added to every git commit message to certify compliance with the Developer Certificate of Origin.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/go-units/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Modifying Panic Message for List Slice in Go\nDESCRIPTION: Updates the panic message for the list.slice function.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nModify panic message for list.slice ae38335 (gongdo)\n```\n\n----------------------------------------\n\nTITLE: XXHash Benchmark Results\nDESCRIPTION: Benchmark comparisons between different hash implementations including xxhash variants, CRC64, and FNV64 on a Core i7 system.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/OneOfOne/xxhash/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n➤ go test -bench '64' -count 5 -tags cespare | benchstat /dev/stdin\nname                          time/op\n\n# https://github.com/cespare/xxhash\nXXSum64Cespare/Func-8          160ns ± 2%\nXXSum64Cespare/Struct-8        173ns ± 1%\nXXSum64ShortCespare/Func-8    6.78ns ± 1%\nXXSum64ShortCespare/Struct-8  19.6ns ± 2%\n\n# this package (default mode, using unsafe)\nXXSum64/Func-8                 170ns ± 1%\nXXSum64/Struct-8               182ns ± 1%\nXXSum64Short/Func-8           13.5ns ± 3%\nXXSum64Short/Struct-8         20.4ns ± 0%\n\n# this package (appengine, *not* using unsafe)\nXXSum64/Func-8                 241ns ± 5%\nXXSum64/Struct-8               243ns ± 6%\nXXSum64Short/Func-8           15.2ns ± 2%\nXXSum64Short/Struct-8         23.7ns ± 5%\n\nCRC64ISO-8                    1.23µs ± 1%\nCRC64ISOString-8              2.71µs ± 4%\nCRC64ISOShort-8               22.2ns ± 3%\n\nFnv64-8                       2.34µs ± 1%\nFnv64Short-8                  74.7ns ± 8%\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Policy to Restrict Pod Communication by Namespace in KubeSphere\nDESCRIPTION: This YAML defines a NetworkPolicy that denies all ingress traffic to pods in the current namespace except for pods in specific namespaces labeled with 'project.kubesphere.io/workspace: demo-workspace'. It demonstrates how to implement namespace-based network isolation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/hack/boilerplate.go.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-namespace-workspace\n  namespace: james-demo\nspec:\n  podSelector: {}\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          project.kubesphere.io/workspace: demo-workspace\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Format\nDESCRIPTION: The format for signing off on git commits to certify compliance with the Developer Certificate of Origin. This demonstrates that contributors acknowledge their right to submit the code under the project's license.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Documentation Badge in Markdown\nDESCRIPTION: A Markdown snippet that displays a badge linking to the Go package documentation for the OpenTelemetry baggage package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/baggage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/baggage)](https://pkg.go.dev/go.opentelemetry.io/otel/baggage)\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Resource Quota in KubeSphere\nDESCRIPTION: This shell script patches the default resource quota configuration at the cluster level in KubeSphere. It updates the default quota for the 'count/routes.extensions' resource type using the kubectl patch command.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/hack/custom-boilerplate.go.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch clusterresourcequota default -p \\\n'{\"spec\":{\"quota\":{\"hard\":{\"count/routes.extensions\":\"100\"}}}}'\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Text\nDESCRIPTION: The Apache 2.0 license text for the Skeema Knownhosts package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/skeema/knownhosts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Redis HA from Kubernetes\nDESCRIPTION: Command to remove the Redis HA deployment from your Kubernetes cluster. This will delete all Kubernetes components associated with the chart.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete <chart-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Propagator Interfaces\nDESCRIPTION: Interfaces for HTTP propagation including extractors and injectors to handle context propagation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: go\nCODE:\n```\ntype HTTPExtractor interface {\n    Extract(supplier HTTPSupplier) context.Context\n}\n\ntype HTTPInjector interface {\n    Inject(context.Context, HTTPSupplier)\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Added Feature Flag in Build System - Markdown\nDESCRIPTION: This Markdown bullet documents the addition of a 'buildvcs' flag, indicating a new build feature. The snippet acts as a changelog item for project maintainers, requiring only Markdown knowledge to be read or edited. Key parameters include the flag's name, and the output presents this as a bullet under features.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- Add buildvcs flag [be5ab95]\n```\n\n----------------------------------------\n\nTITLE: Final Stable Release Versions\nDESCRIPTION: Lists the final stable release versions at v1.1.0 for all modules\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.1.0`\n* `otel/trace`: `v1.1.0`\n* `otel/metric`: `v1.1.0`\n* `otel/baggage`: `v1.1.0`\n* `otel/sdk/trace`: `v1.1.0`\n* `otel/sdk/metric`: `v1.1.0`\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Policy to Allow Specific Ingress Traffic in KubeSphere\nDESCRIPTION: This YAML defines a NetworkPolicy that allows ingress traffic from pods in namespaces that match the label 'project.kubesphere.io/namespace: james'. It specifies the policy applies to all pods in the current namespace and demonstrates label-based network access control.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/hack/boilerplate.go.txt#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-namespace\n  namespace: james-demo\nspec:\n  podSelector: {}\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          project.kubesphere.io/namespace: james\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Properties in Go\nDESCRIPTION: The Go code snippet demonstrates how to use the magiconair/properties library to load properties from various sources such as files, maps, strings, URLs, and flags. It includes examples of property retrieval and decoding into Go structs. Dependencies include the 'flag' package and the magiconair/properties library. Users need to handle errors during decoding.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/magiconair/properties/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"flag\"\n\t\"github.com/magiconair/properties\"\n)\n\nfunc main() {\n\t// init from a file\n\tp := properties.MustLoadFile(\"${HOME}/config.properties\", properties.UTF8)\n\n\t// or multiple files\n\tp = properties.MustLoadFiles([]string{\n\t\t\t\"${HOME}/config.properties\",\n\t\t\t\"${HOME}/config-${USER}.properties\",\n\t\t}, properties.UTF8, true)\n\n\t// or from a map\n\tp = properties.LoadMap(map[string]string{\"key\": \"value\", \"abc\": \"def\"})\n\n\t// or from a string\n\tp = properties.MustLoadString(\"key=value\\nabc=def\")\n\n\t// or from a URL\n\tp = properties.MustLoadURL(\"http://host/path\")\n\n\t// or from multiple URLs\n\tp = properties.MustLoadURL([]string{\n\t\t\t\"http://host/config\",\n\t\t\t\"http://host/config-${USER}\",\n\t\t}, true)\n\n\t// or from flags\n\tp.MustFlag(flag.CommandLine)\n\n\t// get values through getters\n\thost := p.MustGetString(\"host\")\n\tport := p.GetInt(\"port\", 8080)\n\n\t// or through Decode\n\ttype Config struct {\n\t\tHost    string        `properties:\"host\"`\n\t\tPort    int           `properties:\"port,default=9000\"`\n\t\tAccept  []string      `properties:\"accept,default=image/png;image;gif\"`\n\t\tTimeout time.Duration `properties:\"timeout,default=5s\"`\n\t}\n\tvar cfg Config\n\tif err := p.Decode(&cfg); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Gzip Handler Package using Go Get\nDESCRIPTION: Command to install the gziphandler package using Go's package manager. This needs to be run before the package can be imported in Go code.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/NYTimes/gziphandler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/NYTimes/gziphandler\n```\n\n----------------------------------------\n\nTITLE: Version Support Status Table in Markdown\nDESCRIPTION: Markdown table showing which versions of KubeSphere are currently supported for security updates. Latest 2.x versions are supported while all 1.x and 0.x versions are not supported.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/pelletier/go-toml/v2/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version    | Supported          |\n| ---------- | ------------------ |\n| Latest 2.x | :white_check_mark: |\n| All 1.x    | :x:                |\n| All 0.x    | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported KubeSphere Versions in Markdown Table\nDESCRIPTION: This markdown table shows which versions of KubeSphere are currently supported for security updates. Version 0.3.x is supported, while versions below 0.3 are not.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/imdario/mergo/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 0.3.x   | :white_check_mark: |\n| < 0.3   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: User ID Format Validation Schema\nDESCRIPTION: JSON schema for validating user IDs\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"integer\", \"format\": \"ValidUserId\"}\n```\n\n----------------------------------------\n\nTITLE: Second Release Candidate Versions\nDESCRIPTION: Lists the second release candidate versions (RC2) after addressing compatibility issues\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.0-RC2`\n* `otel/trace`: `v1.0.0-RC2`\n* `otel/baggage`: `v1.0.0-RC2`\n* `otel/sdk/trace`: `v1.0.0-RC2`\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTPSupplier Interface\nDESCRIPTION: Interface definition for retrieving and storing values associated with an HTTP carrier. Part of the propagation API.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\ntype HTTPSupplier interface {\n    Get(key string) string\n    Set(key string, value string)\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, new features, and improvements in the Redis client library. Includes sections for unreleased changes and versions 6.14, 6.13, and 6.12.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-redis/redis/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unreleased\n\n- Cluster and Ring pipelines process commands for each node in its own goroutine.\n\n## 6.14\n\n- Added Options.MinIdleConns.\n- Added Options.MaxConnAge.\n- PoolStats.FreeConns is renamed to PoolStats.IdleConns.\n- Add Client.Do to simplify creating custom commands.\n- Add Cmd.String, Cmd.Int, Cmd.Int64, Cmd.Uint64, Cmd.Float64, and Cmd.Bool helpers.\n- Lower memory usage.\n\n## v6.13\n\n- Ring got new options called `HashReplicas` and `Hash`. It is recommended to set `HashReplicas = 1000` for better keys distribution between shards.\n- Cluster client was optimized to use much less memory when reloading cluster state.\n- PubSub.ReceiveMessage is re-worked to not use ReceiveTimeout so it does not lose data when timeout occurres. In most cases it is recommended to use PubSub.Channel instead.\n- Dialer.KeepAlive is set to 5 minutes by default.\n\n## v6.12\n\n- ClusterClient got new option called `ClusterSlots` which allows to build cluster of normal Redis Servers that don't have cluster mode enabled. See https://godoc.org/github.com/go-redis/redis#example-NewClusterClient--ManualSetup\n```\n\n----------------------------------------\n\nTITLE: Package Badge Markdown for OpenTelemetry Attribute Package\nDESCRIPTION: Markdown code that displays a badge linking to the Go package documentation for the OpenTelemetry attribute package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/attribute/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/attribute)](https://pkg.go.dev/go.opentelemetry.io/otel/attribute)\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog Updates with Git Commands in Bash\nDESCRIPTION: This script automates the process of updating the CHANGELOG.md file by retrieving the latest version tag and generating a formatted list of commits since that version, then organizing them into appropriate categories.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/gomega/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLAST_VERSION=$(git tag --sort=version:refname | tail -n1)\nCHANGES=$(git log --pretty=format:'- %s [%h]' HEAD...$LAST_VERSION)\necho -e \"## NEXT\\n\\n$CHANGES\\n\\n### Features\\n\\n### Fixes\\n\\n### Maintenance\\n\\n$(cat CHANGELOG.md)\" > CHANGELOG.md\n```\n\n----------------------------------------\n\nTITLE: Importing Afero in Go\nDESCRIPTION: This snippet shows how to import the Afero library in a Go application.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/afero\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Maintenance Changelog Entries - Markdown\nDESCRIPTION: This snippet demonstrates the use of Markdown to record maintenance changes, such as updates to tooling or dependencies. Each entry includes a descriptive message and a commit hash reference. There are no external dependencies; this is purely for documentation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- Add update-deps to makefile [d303d14]\n```\n\n----------------------------------------\n\nTITLE: Markdown Code of Conduct Document\nDESCRIPTION: The complete Code of Conduct document written in Markdown format, adapted from the Contributor Covenant version 1.4. It includes sections on pledges, standards, responsibilities, scope, enforcement, and attribution.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-openapi/analysis/CODE_OF_CONDUCT.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at ivan+abuse@flanders.co.nz. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing a Release in Bash\nDESCRIPTION: This sequence of Git commands helps tag, commit, push, and create a release in GitHub for a new Ginkgo version. It requires the GitHub CLI (gh) to create releases and an already authenticated GitHub user. This script assumes you have permissions to commit to the repository and execute commands in a Unix-based shell environment.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/ginkgo/v2/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \\\"vM.m.p\\\"\\ngit push\\ngh release create \\\"vM.m.p\\\"\\ngit fetch --tags origin master\n```\n\n----------------------------------------\n\nTITLE: Executing Non-Portable Raw SQL with '?' Placeholders in Go (Gorp)\nDESCRIPTION: This Go code illustrates a potential portability problem when using raw SQL queries with `gorp`. The `SelectOne` method is called with a query using the `?` placeholder for variable binding. While this syntax works correctly for MySQL and SQLite3, it is incompatible with PostgreSQL, which expects placeholders like `$1`, `$2`, etc. This highlights that `gorp` does not automatically translate placeholder syntax in raw SQL strings, potentially leading to errors when switching database backends.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-gorp/gorp/v3/README.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n```go \n// works on MySQL and Sqlite3, but not with Postgresql err :=\ndbmap.SelectOne(&val, \"select * from foo where id = ?\", 30)\n```\n```\n\n----------------------------------------\n\nTITLE: Output of WrapString Function in Go\nDESCRIPTION: Displays the expected output of the WrapString function when wrapping the string 'foo bar baz' with a width of 3 characters.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gosuri/uitable/util/wordwrap/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nfoo\nbar\nbaz\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Version 1.25.0\nDESCRIPTION: Changelog entry for version 1.25.0 documenting new experimental packages and API additions\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.25.0 (1 Aug 2023)\n\nThis release contains several improvements including performance, API additions,\nand two new experimental packages whose APIs are unstable and may change in the\nfuture.\n\nEnhancements:\n* [#1246][]: Add `zap/exp/zapslog` package for integration with slog.\n* [#1273][]: Add `Name` to `Logger` which returns the Logger's name if one is set.\n* [#1281][]: Add `zap/exp/expfield` package which contains helper methods\n`Str` and `Strs` for constructing String-like zap.Fields.\n* [#1310][]: Reduce stack size on `Any`.\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Link to CNCF Code of Conduct\nDESCRIPTION: Markdown content specifying that Prometheus follows the CNCF Code of Conduct, with a link to the main document\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/prometheus/procfs/CODE_OF_CONDUCT.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Prometheus Community Code of Conduct\n\nPrometheus follows the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/main/code-of-conduct.md).\n```\n\n----------------------------------------\n\nTITLE: Running Tests for JSON-Patch Contributors\nDESCRIPTION: Command for contributors to run tests with coverage reporting for the JSON-patch library.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/evanphx/json-patch/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo test -cover ./...\n```\n\n----------------------------------------\n\nTITLE: Verifying Built Binary\nDESCRIPTION: Command to verify the successfully built registry binary version.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ ./bin/registry --version\n./bin/registry github.com/docker/distribution v2.0.0-alpha.2-80-g16d8b2c.m\n```\n\n----------------------------------------\n\nTITLE: Markdown Security Policy Reference\nDESCRIPTION: A markdown formatted security policy that provides a link to the gRPC CVE Process document for detailed security information and vulnerability reporting procedures.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/google.golang.org/grpc/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Security Policy\n\nFor information on gRPC Security Policy and reporting potential security issues, please see [gRPC CVE Process](https://github.com/grpc/proposal/blob/master/P4-grpc-cve-process.md).\n```\n\n----------------------------------------\n\nTITLE: Handling Package Import Example (Go)\nDESCRIPTION: Example of using OpenTelemetry package imports from the release notes discussion. These imports are used for exporting telemetry data.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n\"go.opentelemetry.io/otel/exporters/otlptrace/otlptracegrpc\"\n\"go.opentelemetry.io/otel/exporters/otlptrace/otlptracehttp\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route Variable Names with Gorilla Mux in Go\nDESCRIPTION: Demonstrates using the `GetVarNames()` method on a named route (`r.Get(\"article\")`) to retrieve a slice of strings containing the names of all variables defined in the route's host ('domain'), path ('group', 'item_id'), and queries ('some_data1', 'some_data2'). This helps identify the required parameters for URL generation methods like `URL()`.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.Host(\"{domain}\").\n    Path(\"/{group}/{item_id}\").\n    Queries(\"some_data1\", \"{some_data1}\").\n    Queries(\"some_data2\", \"{some_data2}\").\n    Name(\"article\")\n\n// Will print [domain group item_id some_data1 some_data2] <nil>\nfmt.Println(r.Get(\"article\").GetVarNames())\n```\n\n----------------------------------------\n\nTITLE: Go Generate Command\nDESCRIPTION: Shell command for running go generate on all packages in the repository to update auto-generated code.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Microsoft/go-winio/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> go generate ./...\n```\n\n----------------------------------------\n\nTITLE: Package Import Path Update\nDESCRIPTION: Example showing updated import path for Go OpenTelemetry SDK sampler interface.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/sdk/trace/sampling.go\n```\n\n----------------------------------------\n\nTITLE: Git Commit Signature Line Format\nDESCRIPTION: The required format for signing git commits when contributing to the project. It shows the standard 'Signed-off-by' line that must be added to every commit message.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/distribution/reference/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    Signed-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Filing Issues Checklist for Go Project\nDESCRIPTION: A numbered list of questions to answer when filing an issue for the Go project. This checklist helps provide necessary context for bug reports.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/golang.org/x/term/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.  What version of Go are you using (`go version`)?\n2.  What operating system and processor architecture are you using?\n3.  What did you do?\n4.  What did you expect to see?\n5.  What did you see instead?\n```\n\n----------------------------------------\n\nTITLE: Running pq Test Suite with go test - Go\nDESCRIPTION: This snippet demonstrates how to execute the pq driver's automated test suite using the standard go test tool. It is intended to verify package correctness and requires Go and the pq package source. By running this command in the package directory, all available unit and integration tests will be executed, with results displayed in the console.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/lib/pq/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text\nDESCRIPTION: The full text of the Developer Certificate of Origin v1.1 that contributors must agree to. This document outlines the terms under which contributions are made to the project.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/go-metrics/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Microsoft Security Policy Documentation in Markdown\nDESCRIPTION: A markdown document containing Microsoft's standard security policy template that provides guidelines for reporting security vulnerabilities, contact information, and preferred communication methods.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/Microsoft/go-winio/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text for Contribution Sign-off\nDESCRIPTION: The full text of the Developer Certificate of Origin (DCO) version 1.1 that contributors must certify to when making contributions to the project. This certification ensures contributors have the right to submit their code under the project's open source license.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Specifying Base Directory with go-gitignore in Go\nDESCRIPTION: This snippet shows how to initialize go-gitignore with a specified base directory, which is especially useful for custom or global gitignore configurations. It requires go-gitignore to be installed. Provide the gitignore file path and the desired base directory to NewGitIgnore. This affects how relative patterns are matched against provided paths. Main input: gitignore file path and base directory. No output is shown.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/monochromegane/go-gitignore/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngitignore, _ := gitignore.NewGitIgnore(\"/home/you/.gitignore\", \".\")\n```\n\n----------------------------------------\n\nTITLE: String Format Type Listing (Markdown)\nDESCRIPTION: Lists all the supported string format types across JSON-schema draft 4, Swagger 2.0, and go-openapi custom extensions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-openapi/strfmt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [x] JSON-schema draft 4 formats\n  - date-time\n  - email\n  - hostname\n  - ipv4\n  - ipv6\n  - uri\n- [x] swagger 2.0 format extensions\n  - binary\n  - byte (e.g. base64 encoded string)\n  - date (e.g. \"1970-01-01\")\n  - password\n- [x] go-openapi custom format extensions\n  - bsonobjectid (BSON objectID)\n  - creditcard\n  - duration (e.g. \"3 weeks\", \"1ms\")\n  - hexcolor (e.g. \"#FFFFFF\")\n  - isbn, isbn10, isbn13\n  - mac (e.g \"01:02:03:04:05:06\")\n  - rgbcolor (e.g. \"rgb(100,100,100)\")\n  - ssn\n  - uuid, uuid3, uuid4, uuid5\n  - cidr (e.g. \"192.0.2.1/24\", \"2001:db8:a0b:12f0::1/32\")\n  - ulid (e.g. \"00000PP9HGSBSSDZ1JTEXBJ0PW\")\n```\n\n----------------------------------------\n\nTITLE: Basic Tree Command Output Example\nDESCRIPTION: Example output of the Unix tree command showing directory structure.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xlab/treeprint/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n $ tree\n.\n├── LICENSE\n├── README.md\n├── treeprint.go\n└── treeprint_test.go\n\n0 directories, 4 files\n```\n\n----------------------------------------\n\nTITLE: Transforming Slices with Map Function in Go\nDESCRIPTION: Example of using the Map function to transform each element in a slice. The ResultIterator function is applied to each item, returning a new slice with transformed values.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/asaskevich/govalidator/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.ResultIterator = func(value interface{}, index int) interface{} {\n\treturn value.(int) * 3\n}\n_ = govalidator.Map(data, fn) // result = []interface{}{1, 6, 9, 12, 15}\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Quota Script in KubeSphere\nDESCRIPTION: This shell script creates a resource quota with specified limits for various resources including CPU, memory, and storage. It applies the quota to a specified namespace by creating a YAML configuration through kubectl.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/hack/custom-boilerplate.go.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF | kubectl create -f -\napiVersion: quota.kubesphere.io/v1alpha2\nkind: ResourceQuota\nmetadata:\n  name: quota\n  namespace: default\nspec:\n  quota:\n    hard:\n      limits.cpu: \"2\"\n      limits.memory: 2Gi\n      pods: \"500\"\n      requests.storage: 10Gi\n      count/deployments.apps: \"10\"\n  resources:\n    - resourceName: limits.cpu\n      hard: \"2\"\n    - resourceName: limits.memory\n      hard: 2Gi\n    - resourceName: pods\n      hard: \"500\"\n    - resourceName: requests.storage\n      hard: 10Gi\n    - resourceName: count/deployments.apps\n      hard: \"10\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Benchmark Comparison for Encoding\nDESCRIPTION: This shell benchmark comparison illustrates the performance improvements between `fxamacker/cbor` v2.4.0 and a development version under the commit f9e6291. The code measures time (`sec/op`), bytes allocated (`B/op`), and allocation counts (`allocs/op`) for different encoding operations like converting Go types to CBOR representation. The benchmark script utilizes `benchstat` for generating comparative statistics, particularly highlighting the reduced overhead and improved efficiency in encoding after the optimization. Removal of almost all allocations (`allocs/op`) and improvement in operation time (`sec/op`) are notable enhancements.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-22_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ benchstat bench-v2.4.0.log bench-f9e6291.log \ngoos: linux\ngoarch: amd64\npkg: github.com/fxamacker/cbor/v2\ncpu: 12th Gen Intel(R) Core(TM) i7-12700H\n                                                     │ bench-v2.4.0.log │  bench-f9e6291.log                  │\n                                                     │      sec/op      │   sec/op     vs base                │\nNewEncoderEncode/Go_bool_to_CBOR_bool-20                   236.70n ± 2%   58.04n ± 1%  -75.48% (p=0.000 n=10)\nNewEncoderEncode/Go_uint64_to_CBOR_positive_int-20         238.00n ± 2%   63.93n ± 1%  -73.14% (p=0.000 n=10)\nNewEncoderEncode/Go_int64_to_CBOR_negative_int-20          238.65n ± 2%   64.88n ± 1%  -72.81% (p=0.000 n=10)\nNewEncoderEncode/Go_float64_to_CBOR_float-20               242.00n ± 2%   63.00n ± 1%  -73.97% (p=0.000 n=10)\nNewEncoderEncode/Go_[]uint8_to_CBOR_bytes-20               245.60n ± 1%   68.55n ± 1%  -72.09% (p=0.000 n=10)\nNewEncoderEncode/Go_string_to_CBOR_text-20                 243.20n ± 3%   68.39n ± 1%  -71.88% (p=0.000 n=10)\nNewEncoderEncode/Go_[]int_to_CBOR_array-20                 563.0n ± 2%    378.3n ± 0%  -32.81% (p=0.000 n=10)\nNewEncoderEncode/Go_map[string]string_to_CBOR_map-20       2.043µ ± 2%    1.906µ ± 2%   -6.75% (p=0.000 n=10)\ngeomean                                                    349.7n         122.7n       -64.92%\n\n                                                     │ bench-v2.4.0.log │    bench-f9e6291.log                │\n                                                     │       B/op       │    B/op     vs base                 │\nNewEncoderEncode/Go_bool_to_CBOR_bool-20                     128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_uint64_to_CBOR_positive_int-20           128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_int64_to_CBOR_negative_int-20            128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_float64_to_CBOR_float-20                 128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_[]uint8_to_CBOR_bytes-20                 128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_string_to_CBOR_text-20                   128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_[]int_to_CBOR_array-20                   128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_map[string]string_to_CBOR_map-20         544.0 ± 0%   416.0 ± 0%   -23.53% (p=0.000 n=10)\ngeomean                                                      153.4                    ?                       ¹ ²\n¹ summaries must be >0 to compute geomean\n² ratios must be >0 to compute geomean\n\n                                                     │ bench-v2.4.0.log │    bench-f9e6291.log                │\n                                                     │    allocs/op     │ allocs/op   vs base                 │\nNewEncoderEncode/Go_bool_to_CBOR_bool-20                     2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_uint64_to_CBOR_positive_int-20           2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_int64_to_CBOR_negative_int-20            2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_float64_to_CBOR_float-20                 2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_[]uint8_to_CBOR_bytes-20                 2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_string_to_CBOR_text-20                   2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_[]int_to_CBOR_array-20                   2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_map[string]string_to_CBOR_map-20         28.00 ± 0%   26.00 ± 0%    -7.14% (p=0.000 n=10)\ngeomean                                                      2.782                    ?                       ¹ ²\n¹ summaries must be >0 to compute geomean\n² ratios must be >0 to compute geomean\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Overlapping Configuration Keys with Viper in Go\nDESCRIPTION: This Go snippet shows Viper's behavior when a key name directly matches a dot-delimited path used for accessing nested values. `GetString(\"datastore.metric.host\")` returns the value of the top-level key `\"datastore.metric.host\"` (\"0.0.0.0\") instead of the nested one (\"127.0.0.1\") because the exact key match takes precedence.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nGetString(\"datastore.metric.host\") // returns \"0.0.0.0\"\n\n```\n\n----------------------------------------\n\nTITLE: Platform Specifier Format in Container Platforms\nDESCRIPTION: Demonstrates the format for platform specifiers used in the platforms package. A specifier can be provided as either the OS, architecture, or both in the format '<os>|<arch>|<os>/<arch>[/<variant>]'.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/containerd/platforms/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<os>|<arch>|<os>/<arch>[/<variant>]\n```\n\n----------------------------------------\n\nTITLE: Installing multierr Go Package\nDESCRIPTION: Command to install the multierr package using go get. This installs the latest version of the package from go.uber.org/multierr.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.uber.org/multierr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u go.uber.org/multierr@latest\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Badge for OpenTelemetry Propagation\nDESCRIPTION: Markdown code showing the PkgGoDev documentation badge for the OpenTelemetry propagation package.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/propagation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/propagation)](https://pkg.go.dev/go.opentelemetry.io/otel/propagation)\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON Documents in Go\nDESCRIPTION: Example of using the jsonpatch.Equal function to compare JSON documents for structural equality, ignoring whitespace and key-value ordering.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\tsimilar := []byte(`\n\t\t{\n\t\t\t\"age\": 24,\n\t\t\t\"height\": 3.21,\n\t\t\t\"name\": \"John\"\n\t\t}\n\t`)\n\tdifferent := []byte(`{\"name\": \"Jane\", \"age\": 20, \"height\": 3.37}`)\n\n\tif jsonpatch.Equal(original, similar) {\n\t\tfmt.Println(`\"original\" is structurally equal to \"similar\"`)\n\t}\n\n\tif !jsonpatch.Equal(original, different) {\n\t\tfmt.Println(`\"original\" is _not_ structurally equal to \"different\"`)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Kubernetes Client-Go Packages in Go\nDESCRIPTION: This snippet demonstrates the structure of importing Kubernetes client-go packages. It includes various API versions and resources, covering areas like admissionregistration, apps, autoscaling, and more. The packages are organized by functionality and API version.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/modules.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"k8s.io/client-go/applyconfigurations/admissionregistration/v1\"\n    \"k8s.io/client-go/applyconfigurations/apps/v1\"\n    \"k8s.io/client-go/informers/autoscaling/v2\"\n    \"k8s.io/client-go/kubernetes/typed/batch/v1\"\n    // ... other imports\n)\n```\n\n----------------------------------------\n\nTITLE: Example Go-Git Commit Message Format\nDESCRIPTION: Demonstrates the proper format for commit messages in the go-git project, showing how to reference the affected package, subpackage, the changes made, and any related GitHub issues.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-git/v5/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nplumbing: packp, Skip argument validations for unknown capabilities. Fixes #623\n```\n\n----------------------------------------\n\nTITLE: Tree Node Iteration Example\nDESCRIPTION: Example showing how to iterate over all nodes in a tree structure using the VisitAll function.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/xlab/treeprint/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntree := New()\n\none := tree.AddBranch(\"one\")\none.AddNode(\"one-subnode1\").AddNode(\"one-subnode2\")\none.AddBranch(\"two\").AddNode(\"two-subnode1\").AddNode(\"two-subnode2\").\n    AddBranch(\"three\").AddNode(\"three-subnode1\").AddNode(\"three-subnode2\")\ntree.AddNode(\"outernode\")\n\n// if you need to iterate over the whole tree\n// call `VisitAll` from your top root node.\ntree.VisitAll(func(item *node) {\n    if len(item.Nodes) > 0 {\n        // branch nodes\n        fmt.Println(item.Value) // will output one, two, three\n    } else {\n        // leaf nodes\n        fmt.Println(item.Value) // will output one-*, two-*, three-* and outernode\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Redis Key-Value Operations Example\nDESCRIPTION: Demonstrates basic key-value operations including setting and getting values, with error handling for existing and non-existing keys\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-redis/redis/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleClient() {\n\terr := client.Set(\"key\", \"value\", 0).Err()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tval, err := client.Get(\"key\").Result()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"key\", val)\n\n\tval2, err := client.Get(\"key2\").Result()\n\tif err == redis.Nil {\n\t\tfmt.Println(\"key2 does not exist\")\n\t} else if err != nil {\n\t\tpanic(err)\n\t} else {\n\t\tfmt.Println(\"key2\", val2)\n\t}\n\t// Output: key value\n\t// key2 does not exist\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Code for go-jose Contribution\nDESCRIPTION: Command to format code according to Go standards before submission.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-jose/go-jose/v4/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo fmt\n```\n\n----------------------------------------\n\nTITLE: Executing Git Commands for Release Creation\nDESCRIPTION: This code snippet shows the commands needed to finalize and publish a Gomega release, including committing version changes, pushing to the repository, creating a GitHub release, and updating local tags.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/onsi/gomega/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"vM.m.p\"\ngit push\ngh release create \"vM.m.p\"\ngit fetch --tags origin master\n```\n\n----------------------------------------\n\nTITLE: Installing go-bindata for Generating Bindata in Go\nDESCRIPTION: This command installs the go-bindata tool, which is used to convert translation files into generated Go code.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/kubectl/pkg/util/i18n/translations/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo get github.com/go-bindata/go-bindata/...\n```\n\n----------------------------------------\n\nTITLE: Defining UncompressedImageCore Interface in Go\nDESCRIPTION: Interface definition for implementing uncompressed container images, used by tarball.uncompressedImage. Specifies methods for accessing raw config files, media types, and uncompressed layers.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/google/go-containerregistry/pkg/v1/partial/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype UncompressedImageCore interface {\n\tRawConfigFile() ([]byte, error)\n\tMediaType() (types.MediaType, error)\n\tLayerByDiffID(v1.Hash) (UncompressedLayer, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing go-xgettext for Extracting Strings in Go\nDESCRIPTION: This command installs the go-xgettext tool, which is used to extract strings from Go files for translation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/kubectl/pkg/util/i18n/translations/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo get github.com/gosexy/gettext/go-xgettext\n```\n\n----------------------------------------\n\nTITLE: Setting Up Routes with Variables in Gorilla Mux\nDESCRIPTION: This snippet shows how to define routes with variables in Gorilla Mux. It sets up a route that captures a 'type' variable for a metrics endpoint.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_39\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\nfunc main() {\n    r := mux.NewRouter()\n    // A route with a route variable:\n    r.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Registry via Go Get\nDESCRIPTION: Command to install the registry binary using Go's package manager.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/docker/distribution/cmd/registry\n```\n\n----------------------------------------\n\nTITLE: API Structure Reference Path in YAML\nDESCRIPTION: Example reference path showing key locations for API definitions, including swagger definition file and shared types used by both client and server.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/docker/docker/api/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- api/swagger.yaml\n- api/types/\n- cli/\n- client/\n- daemon/\n```\n\n----------------------------------------\n\nTITLE: User-Specified Buffer for CBOR Encoding in Go\nDESCRIPTION: Demonstrates how to use a user-specified buffer for CBOR encoding instead of the built-in buffer pool. This feature was introduced in v2.7.0.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nem, err := myEncOptions.UserBufferEncMode() // create UserBufferEncMode mode\n\nvar buf bytes.Buffer\nerr = em.MarshalToBuffer(v, &buf) // encode v to provided buf\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with Filesystem Storage in Go\nDESCRIPTION: Creates a new Git repository with the filesystem storage implementation, which stores Git data in the OS filesystem at the specified path.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-git/go-git/v5/EXTENDING.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    r, err := git.Init(filesystem.NewStorage(osfs.New(\"/tmp/foo\")), nil)\n```\n\n----------------------------------------\n\nTITLE: Code Contribution Steps in Markdown\nDESCRIPTION: A comprehensive list of steps required before submitting code changes, including testing requirements and code review guidelines.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/NYTimes/gziphandler/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Check the open issues and pull requests for existing discussions.\n2. Open an issue to discuss a new feature.\n3. Write tests.\n4. Make sure code follows the ['Go Code Review Comments'].\n5. Make sure your changes pass `go test`.\n6. Make sure the entire test suite passes locally and on Travis CI.\n7. Open a Pull Request.\n8. [Squash your commits] after receiving feedback and add a [great commit message].\n```\n\n----------------------------------------\n\nTITLE: Removing Built-in Format Checker (Go)\nDESCRIPTION: Demonstrates how to remove a built-in format checker from gojsonschema, allowing for potential override or disabling of default formats.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\ngojsonschema.FormatCheckers.Remove(\"hostname\")\n```\n\n----------------------------------------\n\nTITLE: Path Prefix Matching in Gorilla Mux\nDESCRIPTION: Demonstrates how to match routes based on path prefixes, which is useful for grouping routes under a common path structure.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nr.PathPrefix(\"/products/\")\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from Local File in Go\nDESCRIPTION: Example of loading a JSON schema from a local file using gojsonschema's ReferenceLoader with the file URI scheme.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nloader := gojsonschema.NewReferenceLoader(\"file:///home/me/schema.json\")\n```\n\n----------------------------------------\n\nTITLE: Tagging Klog Release Version in Git\nDESCRIPTION: This command creates a signed Git tag for the new klog release version. The user must replace $VERSION with the actual version number being released.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/k8s.io/klog/v2/RELEASE.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s $VERSION\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Prometheus\nDESCRIPTION: Command to compile and test changes before committing\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake test         # Make sure all the tests pass before you commit and push :)\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Validation with gojsonschema in Go\nDESCRIPTION: Example of performing validation using gojsonschema with schema and document loaders.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/open-policy-agent/opa/internal/gojsonschema/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nresult, err := gojsonschema.Validate(schemaLoader, documentLoader)\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with Info Level\nDESCRIPTION: Shows how to use structured logging with key-value pairs in controller-runtime.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/sigs.k8s.io/controller-runtime/TMP-LOGGING.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogger.Info(\"starting reconciliation\", \"pod\", req.NamespacedName)\n```\n\n----------------------------------------\n\nTITLE: Empty Pod Disruption Budget Configuration\nDESCRIPTION: Empty object configuration for Pod Disruption Budget rules\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/config/ks-core/charts/redis-ha/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Importing from Staged Repositories in Go\nDESCRIPTION: Example of how to import a package from a staged repository in KubeSphere code. The import statement resolves to the corresponding path in the staging directory rather than an external repository.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/staging/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// pkg/example/some_code.go\npackage example\n\nimport (\n  \"kubesphere.io/client-go/\" // resolves to staging/src/kubesphere.io/client-go/dynamic\n)\n```\n\n----------------------------------------\n\nTITLE: Controlling Unexported Fields Access\nDESCRIPTION: Methods to enable or disable fuzzing of unexported struct fields\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nf.AllowUnexportedFields()\n```\n\nLANGUAGE: go\nCODE:\n```\nf.DisallowUnexportedFields()\n```\n\n----------------------------------------\n\nTITLE: Updating Package Import in Go\nDESCRIPTION: Replaces outdated goutils imports with updated versions.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nReplace outdated goutils imports 01893d2 (Matthew Lorimor)\n```\n\n----------------------------------------\n\nTITLE: Adding Slice Function in Go\nDESCRIPTION: Implements a new slice function.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nAdd slice func df28ca7 (gongdo)\n```\n\n----------------------------------------\n\nTITLE: Package Badge Integration for OpenTelemetry Semconv\nDESCRIPTION: Markdown snippet showing the PkgGoDev badge integration with a link to the OpenTelemetry semantic conventions package documentation.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/semconv/v1.12.0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.12.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.12.0)\n```\n\n----------------------------------------\n\nTITLE: Function Reference in Go\nDESCRIPTION: Package reference for OpenTelemetry configuration functions and types.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\"go.opentelemetry.io/otel/sdk/metric\".ExponentialHistogram\n```\n\n----------------------------------------\n\nTITLE: Mixed Stable and Unstable Update Versions\nDESCRIPTION: Lists version updates including both stable (v1.0.1) and unstable (v0.15.0) modules\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.1`\n* `otel/trace`: `v1.0.1`\n* `otel/metric`: `v0.15.0`\n* `otel/baggage`: `v1.0.1`\n* `otel/sdk/trace`: `v1.0.1`\n* `otel/sdk/metric`: `v0.15.0`\n```\n\n----------------------------------------\n\nTITLE: Defining Default Resource in Go OpenTelemetry\nDESCRIPTION: Shows the addition of a resource.Default() method for use with meter and tracer providers. This allows developers to configure default resource settings for telemetry components.\nSOURCE: https://github.com/kubesphere/kubesphere/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nresource.Default()\n```"
  }
]