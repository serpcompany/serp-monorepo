[
  {
    "owner": "apache",
    "repo": "tomcat",
    "content": "TITLE: Building Tomcat Using Ant\nDESCRIPTION: Command-line instructions for navigating to the Tomcat source directory and running Ant to execute the default 'deploy' target that builds a complete Tomcat installation.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ${tomcat.source}\nant\n```\n\n----------------------------------------\n\nTITLE: Complete Jakarta EE 6.1 Web Application Deployment Descriptor\nDESCRIPTION: A complete web.xml deployment descriptor for a Jakarta EE 6.1 web application showing namespace declarations, display name, description, context parameters, servlet definitions, servlet mappings, and session configuration.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/web.xml.txt#2025-04-23_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n  Licensed to the Apache Software Foundation (ASF) under one or more\n  contributor license agreements.  See the NOTICE file distributed with\n  this work for additional information regarding copyright ownership.\n  The ASF licenses this file to You under the Apache License, Version 2.0\n  (the \"License\"); you may not use this file except in compliance with\n  the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n<web-app xmlns=\"https://jakarta.ee/xml/ns/jakartaee\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"https://jakarta.ee/xml/ns/jakartaee\n                      https://jakarta.ee/xml/ns/jakartaee/web-app_6_1.xsd\"\n  version=\"6.1\">\n\n\n    <!-- General description of your web application -->\n\n    <display-name>My Web Application</display-name>\n    <description>\n      This is version X.X of an application to perform\n      a wild and wonderful task, based on servlets and\n      JSP pages.  It was written by Dave Developer\n      (dave@mycompany.com), who should be contacted for\n      more information.\n    </description>\n\n\n    <!-- Context initialization parameters that define shared\n         String constants used within your application, which\n         can be customized by the system administrator who is\n         installing your application.  The values actually\n         assigned to these parameters can be retrieved in a\n         servlet or JSP page by calling:\n\n             String value =\n               getServletContext().getInitParameter(\"name\");\n\n         where \"name\" matches the <param-name> element of\n         one of these initialization parameters.\n\n         You can define any number of context initialization\n         parameters, including zero.\n    -->\n\n    <context-param>\n      <param-name>webadmin</param-name>\n      <param-value>myaddress@mycompany.com</param-value>\n      <description>\n        The EMAIL address of the administrator to whom questions\n        and comments about this application should be addressed.\n      </description>\n    </context-param>\n\n\n    <!-- Servlet definitions for the servlets that make up\n         your web application, including initialization\n         parameters.  With Tomcat, you can also send requests\n         to servlets not listed here with a request like this:\n\n           http://localhost:8080/{context-path}/servlet/{classname}\n\n         but this usage is not guaranteed to be portable.  It also\n         makes relative references to images and other resources\n         required by your servlet more complicated, so defining\n         all of your servlets (and defining a mapping to them with\n         a servlet-mapping element) is recommended.\n\n         Servlet initialization parameters can be retrieved in a\n         servlet or JSP page by calling:\n\n             String value =\n               getServletConfig().getInitParameter(\"name\");\n\n         where \"name\" matches the <param-name> element of\n         one of these initialization parameters.\n\n         You can define any number of servlets, including zero.\n    -->\n\n    <servlet>\n      <servlet-name>controller</servlet-name>\n      <description>\n        This servlet plays the \"controller\" role in the MVC architecture\n        used in this application.  It is generally mapped to the \".do\"\n        filename extension with a servlet-mapping element, and all form\n        submits in the app will be submitted to a request URI like\n        \"saveCustomer.do\", which will therefore be mapped to this servlet.\n\n        The initialization parameter names for this servlet are the\n        \"servlet path\" that will be received by this servlet (after the\n        filename extension is removed).  The corresponding value is the\n        name of the action class that will be used to process this request.\n      </description>\n      <servlet-class>com.mycompany.mypackage.ControllerServlet</servlet-class>\n      <init-param>\n        <param-name>listOrders</param-name>\n        <param-value>com.mycompany.myactions.ListOrdersAction</param-value>\n      </init-param>\n      <init-param>\n        <param-name>saveCustomer</param-name>\n        <param-value>com.mycompany.myactions.SaveCustomerAction</param-value>\n      </init-param>\n      <!-- Load this servlet at server startup time -->\n      <load-on-startup>5</load-on-startup>\n    </servlet>\n\n    <servlet>\n      <servlet-name>graph</servlet-name>\n      <description>\n        This servlet produces GIF images that are dynamically generated\n        graphs, based on the input parameters included on the request.\n        It is generally mapped to a specific request URI like \"/graph\".\n      </description>\n    </servlet>\n\n\n    <!-- Define mappings that are used by the servlet container to\n         translate a particular request URI (context-relative) to a\n         particular servlet.  The examples below correspond to the\n         servlet descriptions above.  Thus, a request URI like:\n\n           http://localhost:8080/{contextpath}/graph\n\n         will be mapped to the \"graph\" servlet, while a request like:\n\n           http://localhost:8080/{contextpath}/saveCustomer.do\n\n         will be mapped to the \"controller\" servlet.\n\n         You may define any number of servlet mappings, including zero.\n         It is also legal to define more than one mapping for the same\n         servlet, if you wish to.\n    -->\n\n    <servlet-mapping>\n      <servlet-name>controller</servlet-name>\n      <url-pattern>*.do</url-pattern>\n    </servlet-mapping>\n\n    <servlet-mapping>\n      <servlet-name>graph</servlet-name>\n      <url-pattern>/graph</url-pattern>\n    </servlet-mapping>\n\n\n    <!-- Define the default session timeout for your application,\n         in minutes.  From a servlet or JSP page, you can modify\n         the timeout for a particular session dynamically by using\n         HttpSession.getMaxInactiveInterval(). -->\n\n    <session-config>\n      <session-timeout>30</session-timeout>    <!-- 30 minutes -->\n    </session-config>\n\n\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Modified Code\nDESCRIPTION: Quick rebuild command for updating only the modified code after updating the source code using git.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ${tomcat.source}\nant\n```\n\n----------------------------------------\n\nTITLE: Configuring Servlet Mappings in web.xml\nDESCRIPTION: Demonstrates how to map servlets to URL patterns using servlet-mapping elements. The controller servlet is mapped to all URLs with .do extension, while the graph servlet is mapped to the specific /graph URL path.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/web.xml.txt#2025-04-23_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<servlet-mapping>\n  <servlet-name>controller</servlet-name>\n  <url-pattern>*.do</url-pattern>\n</servlet-mapping>\n\n<servlet-mapping>\n  <servlet-name>graph</servlet-name>\n  <url-pattern>/graph</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Setting up IDE Configuration with Ant\nDESCRIPTION: Commands to generate IDE-specific configuration files for Eclipse, IntelliJ IDEA, and NetBeans using Ant build targets.\nSOURCE: https://github.com/apache/tomcat/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nant ide-eclipse\n```\n\nLANGUAGE: bash\nCODE:\n```\nant ide-intellij\n```\n\nLANGUAGE: bash\nCODE:\n```\nant ide-netbeans\n```\n\n----------------------------------------\n\nTITLE: Building Tomcat Docker Image\nDESCRIPTION: Docker command to build a Tomcat container image. Creates an image tagged as 'apache/tomcat-stuffed:1.0' using the provided Dockerfile.\nSOURCE: https://github.com/apache/tomcat/blob/main/modules/stuffed/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t apache/tomcat-stuffed:1.0 -f ./Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Setting Session Timeout in web.xml\nDESCRIPTION: Configures the default session timeout period for the web application. This example sets a 30-minute timeout that can be dynamically modified for specific sessions using HttpSession.getMaxInactiveInterval() from servlets or JSP pages.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/web.xml.txt#2025-04-23_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<session-config>\n  <session-timeout>30</session-timeout>    <!-- 30 minutes -->\n</session-config>\n```\n\n----------------------------------------\n\nTITLE: Building Tomcat with Maven\nDESCRIPTION: Command to build the Tomcat distribution using Maven. First cleans any previous build artifacts, then packages the application into a JAR file.\nSOURCE: https://github.com/apache/tomcat/blob/main/modules/stuffed/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean; mvn package\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Servlet in web.xml with MVC Architecture\nDESCRIPTION: Shows how to define a controller servlet with initialization parameters for an MVC architecture. The servlet maps to .do extensions and uses different action classes based on the request path. It's configured to load at server startup with a priority of 5.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/web.xml.txt#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<servlet>\n  <servlet-name>controller</servlet-name>\n  <description>\n    This servlet plays the \"controller\" role in the MVC architecture\n    used in this application.  It is generally mapped to the \".do\"\n    filename extension with a servlet-mapping element, and all form\n    submits in the app will be submitted to a request URI like\n    \"saveCustomer.do\", which will therefore be mapped to this servlet.\n\n    The initialization parameter names for this servlet are the\n    \"servlet path\" that will be received by this servlet (after the\n    filename extension is removed).  The corresponding value is the\n    name of the action class that will be used to process this request.\n  </description>\n  <servlet-class>com.mycompany.mypackage.ControllerServlet</servlet-class>\n  <init-param>\n    <param-name>listOrders</param-name>\n    <param-value>com.mycompany.myactions.ListOrdersAction</param-value>\n  </init-param>\n  <init-param>\n    <param-name>saveCustomer</param-name>\n    <param-value>com.mycompany.myactions.SaveCustomerAction</param-value>\n  </init-param>\n  <!-- Load this servlet at server startup time -->\n  <load-on-startup>5</load-on-startup>\n</servlet>\n```\n\n----------------------------------------\n\nTITLE: Building Documentation Separately\nDESCRIPTION: Command for building just the documentation web application, which is useful when you need to quickly build documentation without building the entire Tomcat project.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ${tomcat.source}\nant build-docs\n```\n\n----------------------------------------\n\nTITLE: Building Extra Components\nDESCRIPTION: Command for building additional components such as commons-logging and webservices that are not included in the default build but are part of a release build.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ${tomcat.source}\nant extras\n```\n\n----------------------------------------\n\nTITLE: Defining Web Application Context Parameters in web.xml\nDESCRIPTION: Demonstrates how to define context initialization parameters in a web.xml file that can be accessed by servlets and JSP pages using getServletContext().getInitParameter(). This example sets an admin email address as a context parameter.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/web.xml.txt#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<context-param>\n  <param-name>webadmin</param-name>\n  <param-value>myaddress@mycompany.com</param-value>\n  <description>\n    The EMAIL address of the administrator to whom questions\n    and comments about this application should be addressed.\n  </description>\n</context-param>\n```\n\n----------------------------------------\n\nTITLE: Building Embedded Packages\nDESCRIPTION: Command for building the embedded packages of Tomcat, which are normally built during a release build but can be built separately.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd ${tomcat.source}\nant embed\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Tomcat in Windows Batch\nDESCRIPTION: This snippet demonstrates how to set the JRE_HOME environment variable in a Windows batch file (setenv.bat) for Tomcat configuration. It sets the Java Runtime Environment home directory.\nSOURCE: https://github.com/apache/tomcat/blob/main/RUNNING.txt#2025-04-23_snippet_0\n\nLANGUAGE: Batch\nCODE:\n```\nset \"JRE_HOME=%ProgramFiles%\\Java\\jre@MIN_JAVA_VERSION@\"\nexit /b 0\n```\n\n----------------------------------------\n\nTITLE: Building API Documentation (Javadoc)\nDESCRIPTION: Command for building only the API documentation (Javadoc) for Tomcat, which includes documentation for the Servlet, JSP, and EL APIs.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ${tomcat.source}\nant javadoc\n```\n\n----------------------------------------\n\nTITLE: Running Tomcat with Multiple Webapps\nDESCRIPTION: Command line example for running Tomcat with three separate webapps at different context paths. Demonstrates how to specify multiple application paths and their corresponding WAR files.\nSOURCE: https://github.com/apache/tomcat/blob/main/modules/stuffed/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njava -Dcatalina.base=. -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file=conf/logging.properties -jar target/tomcat-stuffed-1.0.jar --war myrootwebapp --path /path1 --war mywebapp1 --path /path2 --war mywebapp2\n```\n\n----------------------------------------\n\nTITLE: Publishing Tomcat Snapshot to Maven Repository\nDESCRIPTION: Command to deploy a snapshot version of Tomcat to the Apache snapshot repository. This populates the snapshot repository with the latest development build.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/maven/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nant -f mvn-pub.xml deploy-snapshot\n```\n\n----------------------------------------\n\nTITLE: Running Tomcat with Single Root Webapp\nDESCRIPTION: Command line example for running Tomcat with a single root webapp. Configures JULI logging and specifies catalina.base property before launching the Tomcat JAR.\nSOURCE: https://github.com/apache/tomcat/blob/main/modules/stuffed/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njava -Dcatalina.base=. -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file=conf/logging.properties -jar target/tomcat-stuffed-1.0.jar --war myrootwebapp\n```\n\n----------------------------------------\n\nTITLE: Publishing Tomcat Release to Maven Repository\nDESCRIPTION: Command to deploy a release version of Tomcat to the Apache staging repository. This creates a staging area that must be manually reviewed before final release.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/maven/README.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nant -f mvn-pub.xml deploy-release\n```\n\n----------------------------------------\n\nTITLE: Compiling Java Sources in Ant\nDESCRIPTION: Compiles Java source files and copies application resources to the build directory. Creates necessary directories and uses javac task with configurable debug and deprecation settings.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"compile\" depends=\"prepare\" description=\"Compile Java sources\">\n    <!-- Compile Java classes as necessary -->\n    <mkdir    dir=\"${build.home}/WEB-INF/classes\"/>\n    <javac srcdir=\"${src.home}\"\n          destdir=\"${build.home}/WEB-INF/classes\"\n            debug=\"${compile.debug}\"\n      deprecation=\"${compile.deprecation}\">\n        <classpath refid=\"compile.classpath\"/>\n    </javac>\n\n    <!-- Copy application resources -->\n    <copy  todir=\"${build.home}/WEB-INF/classes\">\n      <fileset dir=\"${src.home}\" excludes=\"**/*.java\"/>\n    </copy>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Installing Tomcat Artifacts to Local Maven Repository\nDESCRIPTION: Command to install Tomcat artifacts to the local Maven repository for development or testing purposes.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/maven/README.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nant -f mvn-pub.xml generic-install\n```\n\n----------------------------------------\n\nTITLE: Removing Web Application from Tomcat via Ant\nDESCRIPTION: Removes the web application from Tomcat using the manager application. Opposite of the install target.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"remove\" description=\"Remove application on servlet container\">\n    <undeploy url=\"${manager.url}\"\n         username=\"${manager.username}\"\n         password=\"${manager.password}\"\n             path=\"${app.path}\"/>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Reloading Web Application in Tomcat via Ant\nDESCRIPTION: Reloads the web application in Tomcat using the manager application. Updates classes and libraries without reloading web.xml configuration.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"reload\" depends=\"compile\" description=\"Reload application on servlet container\">\n    <reload url=\"${manager.url}\"\n       username=\"${manager.username}\"\n       password=\"${manager.password}\"\n           path=\"${app.path}\"/>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Creating Distribution Package in Ant\nDESCRIPTION: Creates a binary distribution by copying documentation and creating a WAR file. Depends on compile and javadoc targets to ensure all necessary components are built.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"dist\" depends=\"compile,javadoc\" description=\"Create binary distribution\">\n    <!-- Copy documentation subdirectories -->\n    <mkdir   dir=\"${dist.home}/docs\"/>\n    <copy    todir=\"${dist.home}/docs\">\n      <fileset dir=\"${docs.home}\"/>\n    </copy>\n\n    <!-- Create application JAR file -->\n    <jar jarfile=\"${dist.home}/${app.name}-${app.version}.war\"\n         basedir=\"${build.home}\"/>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Installing Web Application in Tomcat via Ant\nDESCRIPTION: Deploys the web application to Tomcat using the manager application. Requires manager credentials and URL to be configured.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"install\" depends=\"compile\" description=\"Install application to servlet container\">\n    <deploy url=\"${manager.url}\"\n       username=\"${manager.username}\"\n       password=\"${manager.password}\"\n           path=\"${app.path}\"\n       localWar=\"file://${build.home}\"/>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Initializing Ant Project for Web Application in XML\nDESCRIPTION: Defines the main Ant project structure with name, default target, and base directory. This sets up the foundation for the entire build process.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<project name=\"My Project\" default=\"compile\" basedir=\".\">\n```\n\n----------------------------------------\n\nTITLE: Listing Deployed Applications in Tomcat via Ant\nDESCRIPTION: Lists all currently installed web applications in Tomcat using the manager application. Requires manager credentials and URL.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"list\" description=\"List installed applications on servlet container\">\n    <list    url=\"${manager.url}\"\n        username=\"${manager.username}\"\n        password=\"${manager.password}\"/>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Setting Base Path Property in build.properties\nDESCRIPTION: Configuration for the base.path property in build.properties file that specifies where Tomcat dependencies should be downloaded. This is a recommended minimum configuration to start with.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# ----- Default Base Path for Dependent Packages -----\n# Replace this path with the directory path where dependencies binaries\n# should be downloaded\nbase.path=/home/me/some-place-to-download-to\n```\n\n----------------------------------------\n\nTITLE: Preparing Build Environment in Ant\nDESCRIPTION: Creates necessary build directories and copies static web content and dependencies. Includes customization points for application-specific requirements.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"prepare\">\n    <!-- Create build directories as needed -->\n    <mkdir  dir=\"${build.home}\"/>\n    <mkdir  dir=\"${build.home}/WEB-INF\"/>\n    <mkdir  dir=\"${build.home}/WEB-INF/classes\"/>\n\n    <!-- Copy static content of this web application -->\n    <copy todir=\"${build.home}\">\n      <fileset dir=\"${web.home}\"/>\n    </copy>\n\n    <!-- Copy external dependencies as required -->\n    <mkdir  dir=\"${build.home}/WEB-INF/lib\"/>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Generating Javadoc Documentation in Ant\nDESCRIPTION: Creates Javadoc API documentation for all Java classes in the application. Output is generated in the dist/docs/api directory.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"javadoc\" depends=\"compile\" description=\"Create Javadoc API documentation\">\n    <mkdir          dir=\"${dist.home}/docs/api\"/>\n    <javadoc sourcepath=\"${src.home}\"\n                destdir=\"${dist.home}/docs/api\"\n           packagenames=\"*\">\n      <classpath refid=\"compile.classpath\"/>\n    </javadoc>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Implementing Clean Target in Ant XML\nDESCRIPTION: Defines a 'clean' target that removes previous build and distribution directories, ensuring a clean slate for new builds.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n  <target name=\"clean\"\n   description=\"Delete old build and dist directories\">\n    <delete dir=\"${build.home}\"/>\n    <delete dir=\"${dist.home}\"/>\n  </target>\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Role Permissions for Clustering\nDESCRIPTION: Command for configuring the necessary Kubernetes/OpenShift permissions to enable pod visibility for Tomcat clustering. Adds the 'view' role to the default service account in the current project.\nSOURCE: https://github.com/apache/tomcat/blob/main/modules/stuffed/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\noc policy add-role-to-user view system:serviceaccount:$(oc project -q):default -n $(oc project -q)\n```\n\n----------------------------------------\n\nTITLE: Generating Git Patch Files for Tomcat Component Updates\nDESCRIPTION: Command for generating patch files to manually apply updates from Git repositories to Tomcat components. This approach avoids potential conflicts with web application JARs and eliminates dependencies on large JARs when only small portions are needed.\nSOURCE: https://github.com/apache/tomcat/blob/main/MERGE.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit diff <last SHA1>:<sub-tree> HEAD:<sub-tree> > temp.patch\n```\n\n----------------------------------------\n\nTITLE: Defining All Target in Ant XML\nDESCRIPTION: Creates an 'all' target that depends on 'clean' and 'compile' targets, providing a shortcut for a complete rebuild of the project.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n  <target name=\"all\" depends=\"clean,compile\"\n   description=\"Clean build and dist directories, then compile\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating OpenSSL API for Tomcat using jextract\nDESCRIPTION: This command uses jextract to generate a trimmed-down OpenSSL API for Tomcat. It requires the JEXTRACT_HOME environment variable to be set and uses a configuration file 'openssl-tomcat.conf'.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/openssl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$JEXTRACT_HOME/bin/jextract @openssl-tomcat.conf openssl.h\n```\n\n----------------------------------------\n\nTITLE: Running Checkstyle Validation Command\nDESCRIPTION: Shell command to run Checkstyle validation separately from the build process.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncd ${tomcat.source}\nant -Dexecute.validate=true validate\n```\n\n----------------------------------------\n\nTITLE: Generating Full OpenSSL API for Tomcat Development\nDESCRIPTION: This command generates the full OpenSSL API for development purposes. It specifies the output package, links against libssl, includes necessary headers, and sets the output directory.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/openssl/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$JEXTRACT_HOME/bin/jextract --source -t org.apache.tomcat.util.openssl -lssl -I /usr/lib/gcc/x86_64-redhat-linux/14/include openssl.h --output src/main/java\n```\n\n----------------------------------------\n\nTITLE: Running SpotBugs Analysis Command\nDESCRIPTION: Shell command to run SpotBugs analysis separately from the build process.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncd ${tomcat.source}\nant -Dexecute.spotbugs=true spotbugs\n```\n\n----------------------------------------\n\nTITLE: Setting Compilation Control Options in Ant XML\nDESCRIPTION: Defines compilation options for debug and deprecation warnings when using the Javac task.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n  <property name=\"compile.debug\"       value=\"true\"/>\n  <property name=\"compile.deprecation\" value=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Service Provider Registration for WebappServiceLoader in Properties Format\nDESCRIPTION: This configuration lists service providers for the WebappServiceLoader to load. It demonstrates how multiple entries and comments are handled, with duplicate entries ('provider1') being loaded only once.\nSOURCE: https://github.com/apache/tomcat/blob/main/test/org/apache/catalina/startup/service-config.txt#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nprovider1 # This comment should be ignored\nprovider1 # provider 1 should only be returned once\n```\n\n----------------------------------------\n\nTITLE: Setting Property Definitions in Ant XML\nDESCRIPTION: Defines various properties used throughout the build script, including file locations, application name, version, and deployment settings.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n  <property file=\"build.properties\"/>\n  <property file=\"${user.home}/build.properties\"/>\n\n  <property name=\"app.name\"      value=\"myapp\"/>\n  <property name=\"app.path\"      value=\"/${app.name}\"/>\n  <property name=\"app.version\"   value=\"0.1-dev\"/>\n  <property name=\"build.home\"    value=\"${basedir}/build\"/>\n  <property name=\"catalina.home\" value=\"../../../..\"/> <!-- UPDATE THIS! -->\n  <property name=\"dist.home\"     value=\"${basedir}/dist\"/>\n  <property name=\"docs.home\"     value=\"${basedir}/docs\"/>\n  <property name=\"manager.url\"   value=\"http://localhost:8080/manager/text\"/>\n  <property name=\"src.home\"      value=\"${basedir}/src\"/>\n  <property name=\"web.home\"      value=\"${basedir}/web\"/>\n```\n\n----------------------------------------\n\nTITLE: Cloning Tomcat Repository with Git\nDESCRIPTION: Command to clone a forked Tomcat repository for contributing via GitHub Pull Requests.\nSOURCE: https://github.com/apache/tomcat/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: git\nCODE:\n```\n$ git clone https://github.com/$USERNAME/tomcat.git\n```\n\n----------------------------------------\n\nTITLE: Defining Compilation Classpath in Ant XML\nDESCRIPTION: Sets up the classpath for compilation, including Tomcat libraries and any additional dependencies required by the application.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n  <path id=\"compile.classpath\">\n    <fileset dir=\"${catalina.home}/bin\">\n      <include name=\"*.jar\"/>\n    </fileset>\n    <pathelement location=\"${catalina.home}/lib\"/>\n    <fileset dir=\"${catalina.home}/lib\">\n      <include name=\"*.jar\"/>\n    </fileset>\n  </path>\n```\n\n----------------------------------------\n\nTITLE: Installing NetBeans Project Configuration for Tomcat\nDESCRIPTION: Ant command to create and configure the NetBeans project structure for Tomcat development. Creates a new nbproject directory with default configurations.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/ide-support/netbeans/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nant ide-netbeans\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Ant Tasks for Tomcat in XML\nDESCRIPTION: Sets up custom Ant tasks for interacting with Tomcat's manager application, allowing for deployment and management of web applications.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/build.xml.txt#2025-04-23_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n  <taskdef resource=\"org/apache/catalina/ant/catalina.tasks\"\n           classpathref=\"compile.classpath\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cobertura Code Coverage Properties\nDESCRIPTION: Properties to enable Cobertura code coverage testing in Tomcat build. Requires single-threaded test execution.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\ntest.cobertura=true\ntest.threads=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings in build.properties\nDESCRIPTION: Properties configuration for users accessing the internet through a proxy. These settings should be added to the build.properties file to allow Ant to download dependencies through the proxy.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nproxy.use=true\nproxy.host=proxy.domain\nproxy.port=8080\nproxy.user=username\nproxy.password=password\n```\n\n----------------------------------------\n\nTITLE: Listing JKS Keystore Files with Aliases and Common Names for Apache Tomcat\nDESCRIPTION: A listing of keystore files used by Apache Tomcat for SSL/TLS connections. Each entry includes the keystore filename, password (in parentheses), alias, and certificate common name (CN). These keystores are used for securing Tomcat connections and for client authentication.\nSOURCE: https://github.com/apache/tomcat/blob/main/test/org/apache/tomcat/util/net/keystore-info.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nca.jks (changeit)\n  ca        CN=Apache Tomcat Test CA\n\nlocalhost-rsa.jks (changeit)\n  tomcat    CN=localhost\n\nlocalhost-rsa-copy1.jks (changeit)\n  tomcat    CN=localhost (tomcatpass)\n\nuser1.jks (changeit)\n  user1     CN=user1\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Stack Preference\nDESCRIPTION: Property to set IPv4 as default for multicast tests compatibility.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_11\n\nLANGUAGE: properties\nCODE:\n```\njava.net.preferIPv4Stack=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Checkstyle Validation\nDESCRIPTION: Property to enable Checkstyle source code convention validation during build.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\nexecute.validate=true\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Tomcat in Unix Shell\nDESCRIPTION: This snippet shows how to set environment variables in a Unix shell script (setenv.sh) for Tomcat configuration. It sets the Java Runtime Environment home directory and the process ID file location.\nSOURCE: https://github.com/apache/tomcat/blob/main/RUNNING.txt#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nJRE_HOME=/usr/java/latest\nCATALINA_PID=\"/run/tomcat.pid\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Debug Arguments for External Tomcat\nDESCRIPTION: JVM arguments to enable remote debugging for an external Tomcat instance, allowing connection from NetBeans debugger on port 8000.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/ide-support/netbeans/README.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\n```\n\n----------------------------------------\n\nTITLE: Restoring Default NetBeans Configuration Files\nDESCRIPTION: Ant command to restore the default NetBeans configuration files without affecting custom local files or private directory contents.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/ide-support/netbeans/README.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nant ide-netbeans-replace\n```\n\n----------------------------------------\n\nTITLE: Eclipse Compiler Settings - Error/Warning Configuration\nDESCRIPTION: Comprehensive list of Eclipse compiler settings for code style, programming problems, naming conflicts, API usage, and other code quality checks. These settings are specified for Eclipse 4.15 and later versions.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/ide-support/eclipse/java-compiler-errors-warnings.txt#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nCode style:\nNon-static access to static member = Warning\nIndirect access to static member = Ignore\nUnqualified access to instance field = Ignore\nAccess to non-accessible member = Ignore\nParameter assignment = Ignore\nNon-externalized strings = Ignore\nUndocumented empty block = Ignore\nResource not managed via try-with-resource = Ignore\nMethod with constructor name = Warning\nMethod can be static = Ignore\nMethod can potentially be static = Ignore\n```\n\n----------------------------------------\n\nTITLE: Eclipse Javadoc Configuration Settings\nDESCRIPTION: Javadoc processing settings for Eclipse, including validation rules, visibility settings, and tag handling requirements for Apache Tomcat development.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/ide-support/eclipse/java-compiler-errors-warnings.txt#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nProcess Javadoc comments = Enabled\nMalformed Javadoc comments = Warning\nOnly consider members visible as = Public\nValidate tag arguments = True\nReport deprecated references = True\nMissing tag descriptions = Validate all standard tags\nMissing Javadoc tags = Warning\nMissing Javadoc comments = Ignore\n```\n\n----------------------------------------\n\nTITLE: Eclipse Import Organization Configuration\nDESCRIPTION: Import statement organization rules enforced by checkstyle. Defines the order of package imports for consistent code formatting across the project.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/ide-support/eclipse/java-compiler-errors-warnings.txt#2025-04-23_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nImport Order:\njava\njavax\nasync\njsp2\n[static] org.junit\norg.junit\n[static] org\norg\ncom\nutil\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Servlet in web.xml\nDESCRIPTION: Shows the definition of a graph servlet that produces dynamically generated GIF images based on input parameters. This definition includes a description but does not specify a servlet-class, which would need to be added in a real implementation.\nSOURCE: https://github.com/apache/tomcat/blob/main/webapps/docs/appdev/web.xml.txt#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<servlet>\n  <servlet-name>graph</servlet-name>\n  <description>\n    This servlet produces GIF images that are dynamically generated\n    graphs, based on the input parameters included on the request.\n    It is generally mapped to a specific request URI like \"/graph\".\n  </description>\n</servlet>\n```\n\n----------------------------------------\n\nTITLE: Configuring Manager Web Application Context in XML for Apache Tomcat\nDESCRIPTION: XML configuration for deploying the Tomcat manager web application. This context.xml file defines security constraints, including IP address restrictions and session attribute filtering, while referencing the manager application from CATALINA_HOME.\nSOURCE: https://github.com/apache/tomcat/blob/main/RUNNING.txt#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Context docBase=\"${catalina.home}/webapps/manager\"\n  antiResourceLocking=\"false\" privileged=\"true\" >\n  <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"\n       allow=\"127\\.0\\.0\\.1\" />\n  <Manager sessionAttributeValueClassNameFilter=\"java\\.lang\\.(?:Boolean|Integer|Long|Number|String)|org\\.apache\\.catalina\\.filters\\.CsrfPreventionFilter\\$LruCache(?:\\$1)?|java\\.util\\.(?:Linked)?HashMap\"/>\n</Context>\n```\n\n----------------------------------------\n\nTITLE: Simple HTTP OK Response Text\nDESCRIPTION: A basic HTTP response containing only the text 'OK'. This might be used for health checks, simple confirmations, or as a minimal response to certain HTTP requests in a Tomcat application.\nSOURCE: https://github.com/apache/tomcat/blob/main/test/webapp/bug53257/foo bar/foobar.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOK\n```\n\n----------------------------------------\n\nTITLE: Configuring File Exclusions for Apache RAT in Apache Tomcat\nDESCRIPTION: This snippet lists various file patterns and specific files to be excluded from Apache RAT analysis. It covers generated files, test files, binary files, and third-party licensed content that should not be checked for Apache License headers.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/rat/rat-excludes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\noutput/build/logs/*\noutput/test-tmp/**\n\noutput/build/webapps/docs/**/*.html\noutput/dist/webapps/docs/**/*.html\noutput/deployer/deployer-howto.html\n\n**/*.sha512\n\n**/MANIFEST.MF\n**/*.manifest\n\noutput/dist/webapps/docs/*/copy.svg\noutput/dist/webapps/docs/*/element-list\noutput/dist/webapps/docs/*/jquery/**\noutput/dist/webapps/docs/*/legal/**\noutput/dist/webapps/docs/*/member-search-index.js\noutput/dist/webapps/docs/*/module-search-index.js\noutput/dist/webapps/docs/*/package-search-index.js\noutput/dist/webapps/docs/*/resource-files/**\noutput/dist/webapps/docs/*/script.js\noutput/dist/webapps/docs/*/script-dir/**\noutput/dist/webapps/docs/*/script-files/**\noutput/dist/webapps/docs/*/search.js\noutput/dist/webapps/docs/*/search-page.js\noutput/dist/webapps/docs/*/tag-search-index.js\noutput/dist/webapps/docs/*/type-search-index.js\n\noutput/dist/src/test/org/apache/tomcat/util/net/jsse/key-password\noutput/dist/src/test/org/apache/tomcat/util/net/key-password\noutput/dist/src/test/org/apache/tomcat/util/net/keystore-password\noutput/dist/src/test/webapp/404.html\noutput/dist/src/test/webapp/index.html.br\noutput/dist/src/test/webapp/bug49nnn/bug49464-cp1252.txt\noutput/dist/src/test/webapp/bug49nnn/bug49464-ibm850.txt\noutput/dist/src/test/webapp/bug49nnn/bug49464-iso-8859-1.txt\noutput/dist/src/test/webapp/bug49nnn/bug49464-utf-8-bom.txt\noutput/dist/src/test/webapp/bug49nnn/bug49464-utf-8.txt\noutput/dist/src/test/webapp/bug53257/*.txt\noutput/dist/src/test/webapp/bug53257/foo bar/foobar.txt\noutput/dist/src/test/webapp/bug66609/a&a.txt\noutput/dist/src/test/webapp/bug66609/b'b.txt\noutput/dist/src/test/webapp/jsp/ok.html\noutput/dist/src/test/webapp-fragments/WEB-INF/classes/*.txt\noutput/dist/src/test/webresources/dir1/d1/d1-f1.txt\noutput/dist/src/test/webresources/dir1/d2/d2-f1.txt\noutput/dist/src/test/webresources/dir1/*.txt\ntest/org/apache/tomcat/util/net/jsse/key-password\ntest/org/apache/tomcat/util/net/key-password\ntest/org/apache/tomcat/util/net/keystore-password\ntest/webapp/404.html\ntest/webapp/index.html.br\ntest/webapp/bug49nnn/bug49464-cp1252.txt\ntest/webapp/bug49nnn/bug49464-ibm850.txt\ntest/webapp/bug49nnn/bug49464-iso-8859-1.txt\ntest/webapp/bug49nnn/bug49464-utf-8-bom.txt\ntest/webapp/bug49nnn/bug49464-utf-8.txt\ntest/webapp/bug53257/*.txt\ntest/webapp/bug53257/foo bar/foobar.txt\ntest/webapp/bug66609/a&a.txt\ntest/webapp/bug66609/b'b.txt\ntest/webapp/jsp/ok.html\ntest/webapp-fragments/WEB-INF/classes/*.txt\ntest/webresources/dir1/d1/d1-f1.txt\ntest/webresources/dir1/d2/d2-f1.txt\ntest/webresources/dir1/*.txt\n\n\n**/*.json\n\nbuild.properties\nres/maven/mvn.properties\n\noutput/dist/src/res/install-win/tomcat-users_2.xml\noutput/dist/tomcat-users_2.xml\nres/install-win/tomcat-users_2.xml\n\njava/jakarta/servlet/resources/javaee_5.xsd\njava/jakarta/servlet/resources/javaee_6.xsd\njava/jakarta/servlet/resources/javaee_7.xsd\njava/jakarta/servlet/resources/javaee_8.xsd\njava/jakarta/servlet/resources/jakartaee_9.xsd\njava/jakarta/servlet/resources/jakartaee_10.xsd\njava/jakarta/servlet/resources/jakartaee_11.xsd\njava/jakarta/servlet/resources/javaee_web_services_1_2.xsd\njava/jakarta/servlet/resources/javaee_web_services_1_3.xsd\njava/jakarta/servlet/resources/javaee_web_services_1_4.xsd\njava/jakarta/servlet/resources/jakartaee_web_services_2_0.xsd\njava/jakarta/servlet/resources/javaee_web_services_client_1_2.xsd\njava/jakarta/servlet/resources/javaee_web_services_client_1_3.xsd\njava/jakarta/servlet/resources/javaee_web_services_client_1_4.xsd\njava/jakarta/servlet/resources/jakartaee_web_services_client_2_0.xsd\njava/jakarta/servlet/resources/jsp_2_2.xsd\njava/jakarta/servlet/resources/jsp_2_3.xsd\njava/jakarta/servlet/resources/jsp_3_0.xsd\njava/jakarta/servlet/resources/jsp_3_1.xsd\njava/jakarta/servlet/resources/jsp_4_0.xsd\njava/jakarta/servlet/resources/web-app_3_0.xsd\njava/jakarta/servlet/resources/web-app_3_1.xsd\njava/jakarta/servlet/resources/web-app_4_0.xsd\njava/jakarta/servlet/resources/web-app_5_0.xsd\njava/jakarta/servlet/resources/web-app_6_0.xsd\njava/jakarta/servlet/resources/web-app_6_1.xsd\njava/jakarta/servlet/resources/web-common_3_0.xsd\njava/jakarta/servlet/resources/web-common_3_1.xsd\njava/jakarta/servlet/resources/web-common_4_0.xsd\njava/jakarta/servlet/resources/web-common_5_0.xsd\njava/jakarta/servlet/resources/web-common_6_0.xsd\njava/jakarta/servlet/resources/web-common_6_1.xsd\njava/jakarta/servlet/resources/web-fragment_3_0.xsd\njava/jakarta/servlet/resources/web-fragment_3_1.xsd\njava/jakarta/servlet/resources/web-fragment_4_0.xsd\njava/jakarta/servlet/resources/web-fragment_5_0.xsd\njava/jakarta/servlet/resources/web-fragment_6_0.xsd\njava/jakarta/servlet/resources/web-fragment_6_1.xsd\njava/jakarta/servlet/resources/web-jsptaglibrary_3_0.xsd\njava/jakarta/servlet/resources/web-jsptaglibrary_3_1.xsd\njava/jakarta/servlet/resources/web-jsptaglibrary_4_0.xsd\noutput/classes/jakarta/servlet/resources/javaee_5.xsd\noutput/classes/jakarta/servlet/resources/javaee_6.xsd\noutput/classes/jakarta/servlet/resources/javaee_7.xsd\noutput/classes/jakarta/servlet/resources/javaee_8.xsd\noutput/classes/jakarta/servlet/resources/jakartaee_9.xsd\noutput/classes/jakarta/servlet/resources/jakartaee_10.xsd\noutput/classes/jakarta/servlet/resources/jakartaee_11.xsd\noutput/classes/jakarta/servlet/resources/javaee_web_services_1_2.xsd\noutput/classes/jakarta/servlet/resources/javaee_web_services_1_3.xsd\noutput/classes/jakarta/servlet/resources/javaee_web_services_1_4.xsd\noutput/classes/jakarta/servlet/resources/jakartaee_web_services_2_0.xsd\noutput/classes/jakarta/servlet/resources/javaee_web_services_client_1_2.xsd\noutput/classes/jakarta/servlet/resources/javaee_web_services_client_1_3.xsd\noutput/classes/jakarta/servlet/resources/javaee_web_services_client_1_4.xsd\noutput/classes/jakarta/servlet/resources/jakartaee_web_services_client_1_4.xsd\noutput/classes/jakarta/servlet/resources/jakartaee_web_services_client_2_0.xsd\noutput/classes/jakarta/servlet/resources/jsp_2_2.xsd\noutput/classes/jakarta/servlet/resources/jsp_2_3.xsd\noutput/classes/jakarta/servlet/resources/jsp_3_0.xsd\noutput/classes/jakarta/servlet/resources/jsp_3_1.xsd\noutput/classes/jakarta/servlet/resources/jsp_4_0.xsd\noutput/classes/jakarta/servlet/resources/web-app_3_0.xsd\noutput/classes/jakarta/servlet/resources/web-app_3_1.xsd\noutput/classes/jakarta/servlet/resources/web-app_4_0.xsd\noutput/classes/jakarta/servlet/resources/web-app_5_0.xsd\noutput/classes/jakarta/servlet/resources/web-app_6_0.xsd\noutput/classes/jakarta/servlet/resources/web-app_6_1.xsd\noutput/classes/jakarta/servlet/resources/web-common_3_0.xsd\noutput/classes/jakarta/servlet/resources/web-common_3_1.xsd\noutput/classes/jakarta/servlet/resources/web-common_4_0.xsd\noutput/classes/jakarta/servlet/resources/web-common_5_0.xsd\noutput/classes/jakarta/servlet/resources/web-common_6_0.xsd\noutput/classes/jakarta/servlet/resources/web-common_6_1.xsd\noutput/classes/jakarta/servlet/resources/web-fragment_3_0.xsd\noutput/classes/jakarta/servlet/resources/web-fragment_3_1.xsd\noutput/classes/jakarta/servlet/resources/web-fragment_4_0.xsd\noutput/classes/jakarta/servlet/resources/web-fragment_5_0.xsd\noutput/classes/jakarta/servlet/resources/web-fragment_6_0.xsd\noutput/classes/jakarta/servlet/resources/web-fragment_6_1.xsd\noutput/classes/jakarta/servlet/resources/web-jsptaglibrary_3_0.xsd\noutput/classes/jakarta/servlet/resources/web-jsptaglibrary_3_1.xsd\noutput/classes/jakarta/servlet/resources/web-jsptaglibrary_4_0.xsd\noutput/dist/src/java/jakarta/servlet/resources/javaee_5.xsd\noutput/dist/src/java/jakarta/servlet/resources/javaee_6.xsd\noutput/dist/src/java/jakarta/servlet/resources/javaee_7.xsd\noutput/dist/src/java/jakarta/servlet/resources/javaee_8.xsd\noutput/dist/src/java/jakarta/servlet/resources/jakartaee_9.xsd\noutput/dist/src/java/jakarta/servlet/resources/jakartaee_10.xsd\noutput/dist/src/java/jakarta/servlet/resources/jakartaee_11.xsd\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific File Types using Glob Patterns\nDESCRIPTION: These glob patterns specify that all files with `.bmp`, `.dia`, `.vpd`, and `.md` extensions, regardless of their location within the directory structure (`**`), should be ignored. This is commonly used in `.gitignore` files or similar exclusion configurations to prevent binary image/diagram files and markdown documentation from being tracked.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/rat/rat-excludes.txt#2025-04-23_snippet_1\n\nLANGUAGE: gitignore\nCODE:\n```\n**/*.bmp\n**/*.dia\n**/*.vpd\n\n**/*.md\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Checkstyle Output Directory Contents\nDESCRIPTION: This pattern ignores all files (`*`) located directly within the `output/res/checkstyle/` directory. It does not apply recursively to subdirectories. This is likely used to exclude generated or temporary files produced by the Checkstyle tool during the build process.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/rat/rat-excludes.txt#2025-04-23_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\noutput/res/checkstyle/*\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Tomcat Version Directory Recursively\nDESCRIPTION: This pattern ignores the entire directory named `tomcat-12.0.x/` and all its contents recursively (`/**`). This is useful for excluding specific version branches, experimental directories, or build outputs related to a particular Tomcat version from version control or packaging.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/rat/rat-excludes.txt#2025-04-23_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\ntomcat-12.0.x/**\n```\n\n----------------------------------------\n\nTITLE: Configuring Performance Test Exclusion Property\nDESCRIPTION: Property to exclude performance tests from the test suite, useful for CI systems or virtual environments.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\ntest.excludePerformance=true\n```\n\n----------------------------------------\n\nTITLE: Matching Apache License Header Pattern in Tomcat Files\nDESCRIPTION: A series of regular expressions that match the standard Apache License 2.0 header with optional 'rem' prefix for batch files. These patterns identify the various components of the license header.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/checkstyle/header-al2.txt#2025-04-23_snippet_4\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*Licensed to the Apache Software Foundation \\(ASF\\) under one or more$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*contributor license agreements\\.  See the NOTICE file distributed with$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*this work for additional information regarding copyright ownership\\.$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*The ASF licenses this file to You under the Apache License, Version 2\\.0$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*\\(the \"License\"\\); you may not use this file except in compliance with$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*the License\\.  You may obtain a copy of the License at$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*http://www.apache.org/licenses/LICENSE-2\\.0$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*Unless required by applicable law or agreed to in writing, software$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*distributed under the License is distributed on an \"AS IS\" BASIS,$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied\\.$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*See the License for the specific language governing permissions and$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*limitations under the License\\.$\n```\n\nLANGUAGE: regex\nCODE:\n```\n^(rem)?\\W*$\n```\n\n----------------------------------------\n\nTITLE: Matching Empty or Whitespace-only Lines in Tomcat Files\nDESCRIPTION: Regular expression to match lines that contain only whitespace characters.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/checkstyle/header-al2.txt#2025-04-23_snippet_3\n\nLANGUAGE: regex\nCODE:\n```\n^\\W*$\n```\n\n----------------------------------------\n\nTITLE: Enabling Large Heap Tests Property\nDESCRIPTION: Property to enable tests requiring large heap sizes (8GB+).\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\ntest.includeLargeHeap=true\n```\n\n----------------------------------------\n\nTITLE: Matching Windows Batch File Header in Tomcat Scripts\nDESCRIPTION: Regular expression to match the '@echo off' command found at the beginning of Windows batch files.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/checkstyle/header-al2.txt#2025-04-23_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n^@echo off$\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Header Template\nDESCRIPTION: Standard Apache License 2.0 header used in Apache Tomcat project files. Defines terms of use and distribution of the software under Apache License 2.0.\nSOURCE: https://github.com/apache/tomcat/blob/main/test/webresources/dir3/.ignore-me.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# -----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# -----------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Enabling SpotBugs Analysis\nDESCRIPTION: Property to enable SpotBugs static code analysis during build.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_14\n\nLANGUAGE: properties\nCODE:\n```\nexecute.spotbugs=true\n```\n\n----------------------------------------\n\nTITLE: Simple URL Rewriting Map in Apache Tomcat\nDESCRIPTION: A basic URL rewriting map that defines key-value pairs for URL transformation. The file maps 'a' to 'aa' and 'aa' to 'aaaa' and 'b' to 'bb', which would be used by Tomcat's URL rewriting engine to transform URLs according to these rules.\nSOURCE: https://github.com/apache/tomcat/blob/main/test/conf/TesterRewriteMapB.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\na aa\n\naa aaaa\nb bb\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Header Text\nDESCRIPTION: Standard license header text required for all Apache Software Foundation (ASF) files. Specifies the Apache License 2.0 terms and provides the link to the full license text.\nSOURCE: https://github.com/apache/tomcat/blob/main/test/webapp-role-mapping/unmapped.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n================================================================================\n  Licensed to the Apache Software Foundation (ASF) under one or more\n  contributor license agreements.  See the NOTICE file distributed with\n  this work for additional information regarding copyright ownership.\n  The ASF licenses this file to You under the Apache License, Version 2.0\n  (the \"License\"); you may not use this file except in compliance with\n  the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n================================================================================\n\nunmapped\n```\n\n----------------------------------------\n\nTITLE: Running Line Ending Validation Command\nDESCRIPTION: Shell command to verify Unix-style line endings in source files.\nSOURCE: https://github.com/apache/tomcat/blob/main/BUILDING.txt#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncd ${tomcat.source}\nant validate-eoln\n```\n\n----------------------------------------\n\nTITLE: Defining Test Content for WebappServiceLoader in Apache Tomcat\nDESCRIPTION: This snippet defines a single line of test content for the WebappServiceLoader. It is preceded by comments explaining the file's purpose and license information.\nSOURCE: https://github.com/apache/tomcat/blob/main/test/org/apache/catalina/connector/test_content.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntest content\n```\n\n----------------------------------------\n\nTITLE: Defining Key-Value Mappings in Apache Tomcat Rewriting Map\nDESCRIPTION: This configuration sets up mappings for keys 'a', 'b', and 'aa' to their respective replacement values. Each mapping defines how the key should be transformed when encountered during URL rewriting operations.\nSOURCE: https://github.com/apache/tomcat/blob/main/test/conf/TesterRewriteMapC.txt#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\na aa|aa|aa|aa\n\nb bb|aa|bb|aa\naa aaaa|aaaa\n```\n\n----------------------------------------\n\nTITLE: Displaying Apache License 2.0 Header for Apache Tomcat\nDESCRIPTION: This snippet shows the standard Apache License 2.0 header used in Apache Tomcat project files. It informs users about the licensing terms, copyright ownership, and provides a link to the full license text.\nSOURCE: https://github.com/apache/tomcat/blob/main/test/webapp-role-mapping/user.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n================================================================================\n  Licensed to the Apache Software Foundation (ASF) under one or more\n  contributor license agreements.  See the NOTICE file distributed with\n  this work for additional information regarding copyright ownership.\n  The ASF licenses this file to You under the Apache License, Version 2.0\n  (the \"License\"); you may not use this file except in compliance with\n  the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n================================================================================\n```\n\n----------------------------------------\n\nTITLE: Matching XML Declaration in Tomcat Files\nDESCRIPTION: Regular expression to match the XML declaration line at the beginning of XML files.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/checkstyle/header-al2.txt#2025-04-23_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n^<\\?xml.*>$\n```\n\n----------------------------------------\n\nTITLE: Matching Shebang Line in Tomcat Shell Scripts\nDESCRIPTION: Regular expression to match the shebang line (#!) found at the beginning of Unix/Linux shell scripts.\nSOURCE: https://github.com/apache/tomcat/blob/main/res/checkstyle/header-al2.txt#2025-04-23_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n^#!\n```\n\n----------------------------------------\n\nTITLE: Defining Apache License 2.0 Header for Tomcat Project Files\nDESCRIPTION: This code snippet represents the standard Apache License 2.0 header used in Apache Tomcat project files. It specifies the licensing terms, copyright information, and conditions for use, modification, and distribution of the software.\nSOURCE: https://github.com/apache/tomcat/blob/main/test/webapp/bug5nnnn/bug57601.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#  Licensed to the Apache Software Foundation (ASF) under one or more\n#  contributor license agreements.  See the NOTICE file distributed with\n#  this work for additional information regarding copyright ownership.\n#  The ASF licenses this file to You under the Apache License, Version 2.0\n#  (the \"License\"); you may not use this file except in compliance with\n#  the License.  You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n\nInner\n```"
  }
]