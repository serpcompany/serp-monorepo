[
  {
    "owner": "spring-projects",
    "repo": "spring-ai",
    "content": "TITLE: Defining Basic XML Structure for Spring Bean Configuration\nDESCRIPTION: This snippet shows the basic structure of XML-based configuration metadata for Spring beans. It includes the root <beans> element and demonstrates how to define individual beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"...\" class=\"...\">  \n        <!-- collaborators and configuration for this bean go here -->\n    </bean>\n\n    <bean id=\"...\" class=\"...\">\n        <!-- collaborators and configuration for this bean go here -->\n    </bean>\n\n    <!-- more bean definitions go here -->\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Spring Java Configuration Annotations\nDESCRIPTION: Core annotations used for Java-based Spring configuration including @Configuration, @Bean, @Import, and @DependsOn\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@Bean\n@Import\n@DependsOn\n```\n\n----------------------------------------\n\nTITLE: Adding WebFlux Transport Dependencies in Maven\nDESCRIPTION: The XML configuration for adding the required dependencies for WebFlux transport, including the MCP Spring WebFlux SDK and Spring Boot WebFlux starter.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-docs/src/main/asciidoc/mcp.md#2025-04-20_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.modelcontextprotocol.sdk</groupId>\n    <artifactId>mcp-spring-webflux</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-webflux</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Initializing Spring Boot Application in Java\nDESCRIPTION: Basic Spring Boot application setup with main class. Contains the minimum required configuration to bootstrap a Spring Boot application using SpringApplication.run().\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/document-readers/markdown-reader/src/test/resources/code.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Spring ApplicationContext in Java\nDESCRIPTION: This snippet demonstrates how to instantiate a Spring ApplicationContext using ClassPathXmlApplicationContext in Java. It loads configuration from multiple XML files.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nApplicationContext context = new ClassPathXmlApplicationContext(\"services.xml\", \"daos.xml\");\n```\n\n----------------------------------------\n\nTITLE: Adding WebMvc Transport Dependencies in Maven\nDESCRIPTION: The XML configuration for adding the required dependencies for WebMvc transport, including the MCP Spring WebMvc SDK and Spring Boot Web starter.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-docs/src/main/asciidoc/mcp.md#2025-04-20_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.modelcontextprotocol.sdk</groupId>\n    <artifactId>mcp-spring-webmvc</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Spring Configuration Bean XML Structure\nDESCRIPTION: Basic XML structure for defining Spring beans using the beans root element and bean definitions\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<beans/>\n    <bean/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring WebFlux Transport in YAML\nDESCRIPTION: YAML configuration for using WebFlux transport with Spring WebFlux's Server-Sent Events for reactive communication, including the optional endpoint setting.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-docs/src/main/asciidoc/mcp.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  ai:\n    mcp:\n      server:\n        transport: WEBFLUX\n        sse-message-endpoint: /mcp/message  # Optional, defaults to /mcp/message\n```\n\n----------------------------------------\n\nTITLE: Creating Session-Scoped Component using Java Annotations\nDESCRIPTION: Java implementation of a session-scoped component using the @SessionScope and @Component annotations. This creates a new instance of the component for the lifetime of an HTTP Session.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_101\n\nLANGUAGE: java\nCODE:\n```\n@SessionScope\n@Component\npublic class UserPreferences {\n      // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Beans from ApplicationContext in Java\nDESCRIPTION: Example showing how to create an ApplicationContext from XML configuration files, retrieve a configured bean instance, and use it in a Java application.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// create and configure beans\nApplicationContext context = new ClassPathXmlApplicationContext(\"services.xml\", \"daos.xml\");\n\n// retrieve configured instance\nPetStoreService service = context.getBean(\"petStore\", PetStoreService.class);\n\n// use configured instance\nList<String> userList = service.getUsernameList();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Beans from ApplicationContext in Kotlin\nDESCRIPTION: Kotlin version of retrieving beans from ApplicationContext, demonstrating the idiomatic Kotlin approach with inline type parameters.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.springframework.beans.factory.getBean\n\n// create and configure beans\nval context = ClassPathXmlApplicationContext(\"services.xml\", \"daos.xml\")\n\n// retrieve configured instance\nval service = context.getBean<PetStoreService>(\"petStore\")\n\n// use configured instance\nvar userList = service.getUsernameList()\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor-based Dependency Injection in Java\nDESCRIPTION: Example of a class that uses constructor-based dependency injection in Java. The SimpleMovieLister class depends on MovieFinder, which is injected through the constructor by the Spring container.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_27\n\nLANGUAGE: java\nCODE:\n```\npublic class SimpleMovieLister {\n\n      // the SimpleMovieLister has a dependency on a MovieFinder\n      private final MovieFinder movieFinder;\n\n      // a constructor so that the Spring container can inject a MovieFinder\n      public SimpleMovieLister(MovieFinder movieFinder) {\n           this.movieFinder = movieFinder;\n      }\n\n      // business logic that actually uses the injected MovieFinder is omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Mode in YAML\nDESCRIPTION: YAML configuration for setting up the MCP server in asynchronous mode, designed for reactive applications requiring non-blocking operations.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-docs/src/main/asciidoc/mcp.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  ai:\n    mcp:\n      server:\n        type: ASYNC\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool Callback in Java\nDESCRIPTION: Java code example showing how to implement the ToolCallback interface to expose Spring AI tools through the MCP server, which will be automatically discovered and registered.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-docs/src/main/asciidoc/mcp.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class MyAiTool implements ToolCallback {\n    // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Spring ApplicationContext in Java\nDESCRIPTION: Demonstrates how to instantiate a Spring ApplicationContext using ClassPathXmlApplicationContext to load configuration from XML files.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nApplicationContext context = new ClassPathXmlApplicationContext(\"services.xml\", \"daos.xml\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor-based Dependency Injection in Kotlin\nDESCRIPTION: Example of a class that uses constructor-based dependency injection in Kotlin. The constructor parameter automatically becomes a private property, simplifying the injection pattern.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\n// a constructor so that the Spring container can inject a MovieFinder\nclass SimpleMovieLister(private val movieFinder: MovieFinder) {\n      // business logic that actually uses the injected MovieFinder is omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor-based Dependency Injection in Kotlin\nDESCRIPTION: Example of a class that uses constructor injection in Kotlin. The SimpleMovieLister class dependency on MovieFinder is concisely expressed using Kotlin's primary constructor syntax.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\n// a constructor so that the Spring container can inject a MovieFinder\nclass SimpleMovieLister(private val movieFinder: MovieFinder) {\n      // business logic that actually uses the injected MovieFinder is omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor-based Dependency Injection in Java\nDESCRIPTION: A Java class constructor that demonstrates constructor-based dependency injection in Spring. It accepts two parameters: an integer 'years' and a String 'ultimateAnswer', which are then assigned to instance variables.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_37\n\nLANGUAGE: Java\nCODE:\n```\npublic ExampleBean(int years, String ultimateAnswer) {\n     this.years = years;\n     this.ultimateAnswer = ultimateAnswer;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ApplicationContextAware for Method Injection in Kotlin\nDESCRIPTION: Kotlin implementation of the ApplicationContextAware interface showing how to manage bean dependencies with different lifecycles. The CommandManager class demonstrates prototype bean creation through application context.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_80\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CommandManager : ApplicationContextAware {\n\n    private lateinit var applicationContext: ApplicationContext\n\n    fun process(commandState: Map<*, *>): Any {\n         val command = createCommand()\n         command.state = commandState\n         return command.execute()\n    }\n\n    protected fun createCommand() =\n               applicationContext.getBean(\"command\", Command::class.java)\n\n    override fun setApplicationContext(applicationContext: ApplicationContext) {\n         this.applicationContext = applicationContext\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Spring ApplicationContext in Kotlin\nDESCRIPTION: Shows how to create a Spring ApplicationContext using ClassPathXmlApplicationContext in Kotlin, loading configuration from XML files.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nval context = ClassPathXmlApplicationContext(\"services.xml\", \"daos.xml\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Constructor-Based Dependency Injection in Spring XML\nDESCRIPTION: XML configuration for constructor-based dependency injection defining an ExampleBean with constructor arguments. The configuration demonstrates both nested ref elements and attribute-based referencing for constructor parameters.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_45\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n      <!-- constructor injection using the nested ref element -->\n      <constructor-arg>\n           <ref bean=\"anotherExampleBean\"/>\n      </constructor-arg>\n\n      <!-- constructor injection using the neater ref attribute -->\n      <constructor-arg ref=\"yetAnotherBean\"/>\n\n      <constructor-arg type=\"int\" value=\"1\"/>\n</bean>\n\n<bean id=\"anotherExampleBean\" class=\"examples.AnotherBean\"/>\n<bean id=\"yetAnotherBean\" class=\"examples.YetAnotherBean\"/>\n```\n\n----------------------------------------\n\nTITLE: Using @Lookup Annotation with Bean Name in Java\nDESCRIPTION: Java class demonstrating how to use the @Lookup annotation with a specific bean name to implement method injection in an annotation-based component model.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_84\n\nLANGUAGE: Java\nCODE:\n```\npublic abstract class CommandManager {\n\n      public Object process(Object commandState) {\n           Command command = createCommand();\n           command.setState(commandState);\n           return command.execute();\n      }\n\n      @Lookup(\"myCommand\")\n      protected abstract Command createCommand();\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Lookup Annotation with Return Type Resolution in Java\nDESCRIPTION: Java class showing how to use the @Lookup annotation without a bean name, relying on the declared return type for bean resolution.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_86\n\nLANGUAGE: Java\nCODE:\n```\npublic abstract class CommandManager {\n\n      public Object process(Object commandState) {\n           Command command = createCommand();\n           command.setState(commandState);\n           return command.execute();\n      }\n\n      @Lookup\n      protected abstract Command createCommand();\n}\n```\n\n----------------------------------------\n\nTITLE: ApplicationContext Usage in Kotlin\nDESCRIPTION: Shows how to create and use ApplicationContext in Kotlin for bean configuration and instance retrieval.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.springframework.beans.factory.getBean\n\n// create and configure beans\nval context = ClassPathXmlApplicationContext(\"services.xml\", \"daos.xml\")\n\n// retrieve configured instance\nval service = context.getBean<PetStoreService>(\"petStore\")\n\n// use configured instance\nvar userList = service.getUsernameList()\n```\n\n----------------------------------------\n\nTITLE: Implementing Setter-Based Dependency Injection in Java\nDESCRIPTION: Java implementation of ExampleBean class that uses setter methods to receive dependencies. The class defines private fields for the dependencies and corresponding setter methods that match the properties specified in the XML configuration.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_43\n\nLANGUAGE: Java\nCODE:\n```\npublic class ExampleBean {\n\n      private AnotherBean beanOne;\n\n      private YetAnotherBean beanTwo;\n\n      private int i;\n\n      public void setBeanOne(AnotherBean beanOne) {\n           this.beanOne = beanOne;\n      }\n\n      public void setBeanTwo(YetAnotherBean beanTwo) {\n           this.beanTwo = beanTwo;\n      }\n\n      public void setIntegerProperty(int i) {\n           this.i = i;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Beans with Groovy Bean Definition DSL\nDESCRIPTION: Example of using Spring's Groovy Bean Definition DSL to define beans in a .groovy file. This configuration style is equivalent to XML definitions and supports Spring's namespaces.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nbeans {\n    dataSource(BasicDataSource) {\n         driverClassName = \"org.hsqldb.jdbcDriver\"\n         url = \"jdbc:hsqldb:mem:grailsDB\"\n         username = \"sa\"\n         password = \"\"\n         settings = [mynew:\"setting\"]\n    }\n    sessionFactory(SessionFactory) {\n         dataSource = dataSource\n    }\n    myService(MyService) {\n         nestedBean = { AnotherBean bean ->\n               dataSource = dataSource\n         }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor-Based Dependency Injection in Java\nDESCRIPTION: Java implementation of ExampleBean class with constructor-based dependency injection. The class defines a constructor that accepts all dependencies as parameters, which will be supplied by Spring.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_46\n\nLANGUAGE: Java\nCODE:\n```\npublic class ExampleBean {\n\n      private AnotherBean beanOne;\n\n      private YetAnotherBean beanTwo;\n\n      private int i;\n\n      public ExampleBean(\n           AnotherBean anotherBean, YetAnotherBean yetAnotherBean, int i) {\n           this.beanOne = anotherBean;\n           this.beanTwo = yetAnotherBean;\n           this.i = i;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Application-Scoped Component using Java Annotations\nDESCRIPTION: Java implementation of an application-scoped component using the @ApplicationScope and @Component annotations. This creates a singleton instance per ServletContext available as a ServletContext attribute.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_104\n\nLANGUAGE: java\nCODE:\n```\n@ApplicationScope\n@Component\npublic class AppPreferences {\n      // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor-based Dependency Injection in Java\nDESCRIPTION: Java class demonstrating constructor-based dependency injection pattern with two parameters.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_38\n\nLANGUAGE: Java\nCODE:\n```\npublic ExampleBean(int years, String ultimateAnswer) {\n    this.years = years;\n    this.ultimateAnswer = ultimateAnswer;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Setter-based Dependency Injection in Kotlin\nDESCRIPTION: A Kotlin class demonstrating setter-based dependency injection using Kotlin's lateinit property. The Spring container injects a MovieFinder instance into the lateinit property.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_40\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass SimpleMovieLister {\n\n      // a late-initialized property so that the Spring container can inject a MovieFinder\n      lateinit var movieFinder: MovieFinder\n\n      // business logic that actually uses the injected MovieFinder is omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Request-Scoped Component using Java Annotations\nDESCRIPTION: Java implementation of a request-scoped component using the @RequestScope and @Component annotations. This creates a new instance of the component for each HTTP request.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_98\n\nLANGUAGE: java\nCODE:\n```\n@RequestScope\n@Component\npublic class LoginAction {\n      // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Spring AI BOM Version in Maven\nDESCRIPTION: Replace the Spring AI BOM version from 1.0.0-M5 to 1.0.0-SNAPSHOT in Maven pom.xml files. This change ensures the project uses the latest development snapshot of Spring AI.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-snapshot.txt#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<version>1.0.0-M5</version>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<version>1.0.0-SNAPSHOT</version>\n```\n\n----------------------------------------\n\nTITLE: Instantiating Spring ApplicationContext in Kotlin\nDESCRIPTION: This snippet shows how to instantiate a Spring ApplicationContext using ClassPathXmlApplicationContext in Kotlin. It loads configuration from multiple XML files.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nval context = ClassPathXmlApplicationContext(\"services.xml\", \"daos.xml\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Scoped Proxy for Session Bean in Spring XML\nDESCRIPTION: This XML configuration demonstrates how to create a proxy for a session-scoped bean and inject it into a singleton-scoped bean. It uses the <aop:scoped-proxy/> element to instruct the container to create a proxy for the userPreferences bean.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_106\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop\n        https://www.springframework.org/schema/aop/spring-aop.xsd\">\n\n    <!-- an HTTP Session-scoped bean exposed as a proxy -->\n    <bean id=\"userPreferences\" class=\"com.something.UserPreferences\" scope=\"session\">\n        <!-- instructs the container to proxy the surrounding bean -->\n        <aop:scoped-proxy/>\n    </bean>\n\n    <!-- a singleton-scoped bean injected with a proxy to the above bean -->\n    <bean id=\"userService\" class=\"com.something.SimpleUserService\">\n        <!-- a reference to the proxied userPreferences bean -->\n        <property name=\"userPreferences\" ref=\"userPreferences\"/>\n    </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor-based Dependency Injection in Java\nDESCRIPTION: Example of a class that can only be dependency-injected with constructor injection in Java. The SimpleMovieLister class depends on a MovieFinder which is injected through its constructor.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleMovieLister {\n\n      // the SimpleMovieLister has a dependency on a MovieFinder\n      private final MovieFinder movieFinder;\n\n      // a constructor so that the Spring container can inject a MovieFinder\n      public SimpleMovieLister(MovieFinder movieFinder) {\n           this.movieFinder = movieFinder;\n      }\n\n      // business logic that actually uses the injected MovieFinder is omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Factory Methods Implementation in Kotlin\nDESCRIPTION: Kotlin implementation of multiple factory methods for different service instances\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_26\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass DefaultServiceLocator {\n      companion object {\n           private val clientService = ClientServiceImpl()\n           private val accountService = AccountServiceImpl()\n      }\n\n      fun createClientServiceInstance(): ClientService {\n           return clientService\n      }\n\n      fun createAccountServiceInstance(): AccountService {\n           return accountService\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Setter-based Dependency Injection in Java\nDESCRIPTION: Java class demonstrating setter-based dependency injection for MovieFinder dependency.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_40\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleMovieLister {\n\n    // the SimpleMovieLister has a dependency on the MovieFinder\n    private MovieFinder movieFinder;\n\n    // a setter method so that the Spring container can inject a MovieFinder\n    public void setMovieFinder(MovieFinder movieFinder) {\n        this.movieFinder = movieFinder;\n    }\n\n    // business logic that actually uses the injected MovieFinder is omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Spring AI BOM Version in Gradle\nDESCRIPTION: Update the Spring AI BOM version from 1.0.0-M5 to 1.0.0-SNAPSHOT in Gradle build files. This change ensures the project uses the latest development snapshot of Spring AI.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-snapshot.txt#2025-04-20_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation platform(\"org.springframework.ai:spring-ai-bom:1.0.0-M5\")\n```\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation platform(\"org.springframework.ai:spring-ai-bom:1.0.0-SNAPSHOT\")\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Docker Container\nDESCRIPTION: Docker command to start a Qdrant container with port mappings and volume mounting for persistent storage\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/vector-stores/spring-ai-qdrant-store/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 -p 6334:6334 \\\n    -v $(pwd)/qdrant_storage:/qdrant/storage:z \\\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Correct Bean Configuration with Scoped Proxy in Spring XML\nDESCRIPTION: This XML configuration demonstrates the correct way to inject a session-scoped bean into a collaborating object using <aop:scoped-proxy/>. This ensures that the scoped bean is properly managed and retrieved for each invocation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_108\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"userPreferences\" class=\"com.something.UserPreferences\" scope=\"session\">\n    <aop:scoped-proxy/>\n</bean>\n\n<bean id=\"userManager\" class=\"com.something.UserManager\">\n    <property name=\"userPreferences\" ref=\"userPreferences\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Implementing Setter-based Dependency Injection in Java\nDESCRIPTION: A Java class that demonstrates setter-based dependency injection in Spring. It defines a MovieFinder dependency and a setter method that the Spring container uses to inject the dependency.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_39\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleMovieLister {\n\n      // the SimpleMovieLister has a dependency on the MovieFinder\n      private MovieFinder movieFinder;\n\n      // a setter method so that the Spring container can inject a MovieFinder\n      public void setMovieFinder(MovieFinder movieFinder) {\n           this.movieFinder = movieFinder;\n      }\n\n      // business logic that actually uses the injected MovieFinder is omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Java Implementation of a Factory Bean with Multiple Factory Methods\nDESCRIPTION: Java class showing implementation of a service locator with multiple factory methods. Each method returns a different type of service instance that can be used by Spring.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\npublic class DefaultServiceLocator {\n\n      private static ClientService clientService = new ClientServiceImpl();\n\n      private static AccountService accountService = new AccountServiceImpl();\n\n      public ClientService createClientServiceInstance() {\n           return clientService;\n      }\n\n      public AccountService createAccountServiceInstance() {\n           return accountService;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Implementation of an Instance Factory Bean in Spring\nDESCRIPTION: Kotlin equivalent of an instance factory bean for Spring. Contains a companion object holding service instances and instance methods that return these pre-configured services.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass DefaultServiceLocator {\n      companion object {\n           private val clientService = ClientServiceImpl()\n      }\n      fun createClientServiceInstance(): ClientService {\n           return clientService\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Snapshots Repository in Maven\nDESCRIPTION: Repository configuration for accessing Spring Snapshot releases in Maven projects. This repository is required for fetching Spring AI development snapshots.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-snapshot.txt#2025-04-20_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<repository>\n  <id>spring-snapshots</id>\n  <name>Spring Snapshots</name>\n  <url>https://repo.spring.io/snapshot</url>\n  <releases>\n    <enabled>false</enabled>\n  </releases>\n</repository>\n```\n\n----------------------------------------\n\nTITLE: Implementing ApplicationContextAware for Method Injection in Java\nDESCRIPTION: Example showing how to implement ApplicationContextAware interface in Java to manage bean dependencies when lifecycle requirements differ between singletons and prototypes. The CommandManager class demonstrates getting new Command instances from the application context.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_79\n\nLANGUAGE: java\nCODE:\n```\npublic class CommandManager implements ApplicationContextAware {\n\n    private ApplicationContext applicationContext;\n\n    public Object process(Map commandState) {\n         Command command = createCommand();\n         command.setState(commandState);\n         return command.execute();\n    }\n\n    protected Command createCommand() {\n         return this.applicationContext.getBean(\"command\", Command.class);\n    }\n\n    public void setApplicationContext(\n               ApplicationContext applicationContext) throws BeansException {\n         this.applicationContext = applicationContext;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MCP Server Dependency in Maven\nDESCRIPTION: The XML configuration snippet for adding the Spring AI MCP server starter dependency to a Maven project.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-docs/src/main/asciidoc/mcp.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework.ai</groupId>\n    <artifactId>spring-ai-starter-mcp-server</artifactId>\n    <version>${spring-ai.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setter-based Dependency Injection in Kotlin\nDESCRIPTION: Kotlin class showing setter-based dependency injection using lateinit property.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass SimpleMovieLister {\n\n    // a late-initialized property so that the Spring container can inject a MovieFinder\n    lateinit var movieFinder: MovieFinder\n\n    // business logic that actually uses the injected MovieFinder is omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Implementation of a Factory Bean with Multiple Factory Methods\nDESCRIPTION: Kotlin equivalent of a service locator with multiple factory methods. Uses companion object to hold service instances and provides instance methods to return different service types.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_25\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass DefaultServiceLocator {\n      companion object {\n           private val clientService = ClientServiceImpl()\n           private val accountService = AccountServiceImpl()\n      }\n\n      fun createClientServiceInstance(): ClientService {\n           return clientService\n      }\n\n      fun createAccountServiceInstance(): AccountService {\n           return accountService\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Beans using Groovy DSL\nDESCRIPTION: Example of bean configuration using Spring's Groovy Bean Definition DSL. Shows how to configure data source, session factory, and custom service beans with nested definitions.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\nbeans {\n    dataSource(BasicDataSource) {\n         driverClassName = \"org.hsqldb.jdbcDriver\"\n         url = \"jdbc:hsqldb:mem:grailsDB\"\n         username = \"sa\"\n         password = \"\"\n         settings = [mynew:\"setting\"]\n    }\n    sessionFactory(SessionFactory) {\n         dataSource = dataSource\n    }\n    myService(MyService) {\n         nestedBean = { AnotherBean bean ->\n               dataSource = dataSource\n         }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Central Portal Snapshots Repository in Maven\nDESCRIPTION: Repository configuration for accessing Central Portal Snapshot releases in Maven projects. This repository provides access to development snapshot versions from the Central Portal.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-snapshot.txt#2025-04-20_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<repository>\n  <id>central-portal-snapshots</id>\n  <name>Central Portal Snapshots</name>\n  <url>https://central.sonatype.com/repository/maven-snapshots/</url>\n  <releases>\n    <enabled>false</enabled>\n  </releases>\n  <snapshots>\n    <enabled>true</enabled>\n  </snapshots>\n</repository>\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Manager with ApplicationContextAware in Java\nDESCRIPTION: Java implementation of a CommandManager class that uses ApplicationContextAware to handle prototype bean injection. The class manages Command instances through Spring container awareness, demonstrating method injection patterns.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_78\n\nLANGUAGE: java\nCODE:\n```\n//  a  class   that   uses   a  stateful    Command-style       class   to  perform    some   processing\npackage    fiona.apple;\n\n//  Spring-API      imports\nimport    org.springframework.beans.BeansException;\nimport    org.springframework.context.ApplicationContext;\nimport    org.springframework.context.ApplicationContextAware;\n\npublic    class   CommandManager       implements     ApplicationContextAware          {\n\n      private    ApplicationContext        applicationContext;\n\n      public   Object    process(Map      commandState)      {\n           //  grab   a  new   instance    of  the   appropriate     Command\n           Command    command    =  createCommand();\n           //  set   the  state    on  the  (hopefully     brand    new)   Command    instance\n           command.setState(commandState);\n           return    command.execute();\n      }\n\n      protected     Command    createCommand()       {\n           //  notice    the   Spring   API   dependency!\n           return    this.applicationContext.getBean(\"command\",                 Command.class);\n      }\n\n      public   void   setApplicationContext(\n                 ApplicationContext        applicationContext)        throws    BeansException       {\n           this.applicationContext          =  applicationContext;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Factory Methods Implementation in Java\nDESCRIPTION: Java class implementing multiple factory methods for different service instances\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_25\n\nLANGUAGE: Java\nCODE:\n```\npublic class DefaultServiceLocator {\n\n      private static ClientService clientService = new ClientServiceImpl();\n\n      private static AccountService accountService = new AccountServiceImpl();\n\n      public ClientService createClientServiceInstance() {\n           return clientService;\n      }\n\n      public AccountService createAccountServiceInstance() {\n           return accountService;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Factory Method Implementation in Java\nDESCRIPTION: Java class implementation demonstrating static factory method pattern for Spring bean creation\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\npublic class ClientService {\n      private static ClientService clientService = new ClientService();\n      private ClientService() {}\n\n      public static ClientService createInstance() {\n           return clientService;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Factory Method Dependency Injection in Java\nDESCRIPTION: Java implementation of ExampleBean with a static factory method for bean creation. The class has a private constructor and a static factory method that accepts dependencies and returns an instance of ExampleBean.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_49\n\nLANGUAGE: Java\nCODE:\n```\npublic class ExampleBean {\n\n      // a private constructor\n      private ExampleBean(...) {\n           ...\n      }\n\n      // a static factory method; the arguments to this method can be\n      // considered the dependencies of the bean that is returned,\n      // regardless of how those arguments are actually used.\n      public static ExampleBean createInstance(\n           AnotherBean anotherBean, YetAnotherBean yetAnotherBean, int i) {\n\n           ExampleBean eb = new ExampleBean(...);\n           // some other operations...\n           return eb;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Setter-Based Dependency Injection in Kotlin\nDESCRIPTION: Kotlin implementation of ExampleBean class that uses lateinit properties for dependencies. The class defines properties that will be set by Spring's dependency injection mechanism.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_44\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass ExampleBean {\n      lateinit var beanOne: AnotherBean\n      lateinit var beanTwo: YetAnotherBean\n      var i: Int = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicDataSource Bean in Spring XML\nDESCRIPTION: Example of a basic Spring bean configuration for a database connection using the Apache Commons DBCP BasicDataSource. It shows how to set driver class, URL, username and password properties using the standard property element syntax.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_51\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"myDataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n      <!-- results in a setDriverClassName(String) call -->\n      <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n      <property name=\"url\" value=\"jdbc:mysql://localhost:3306/mydb\"/>\n      <property name=\"username\" value=\"root\"/>\n      <property name=\"password\" value=\"misterkaoli\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Java Implementation of an Instance Factory Bean in Spring\nDESCRIPTION: Java class implementing an instance factory pattern for Spring beans. Contains instance methods that return pre-configured service instances which Spring can use to create managed beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\npublic class DefaultServiceLocator {\n\n      private static ClientService clientService = new ClientServiceImpl();\n\n      public ClientService createClientServiceInstance() {\n           return clientService;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Factory Method Dependency Injection in Kotlin\nDESCRIPTION: Kotlin implementation of ExampleBean with a static factory method for bean creation. The class uses a companion object with a JvmStatic-annotated factory method that creates and returns instances of ExampleBean.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_50\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass ExampleBean private constructor() {\n      companion object {\n           // a static factory method; the arguments to this method can be\n           // considered the dependencies of the bean that is returned,\n           // regardless of how those arguments are actually used.\n           @JvmStatic\n           fun createInstance(anotherBean: AnotherBean, yetAnotherBean: YetAnotherBean, i: Int): ExampleBean {\n               val eb = ExampleBean(...)\n               // some other operations...\n               return eb\n           }\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Lookup Annotation with Bean Name in Kotlin\nDESCRIPTION: Kotlin class demonstrating how to use the @Lookup annotation with a specific bean name to implement method injection in an annotation-based component model.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_85\n\nLANGUAGE: Kotlin\nCODE:\n```\nabstract class CommandManager {\n\n      fun process(commandState: Any): Any {\n           val command = createCommand()\n           command.state = commandState\n           return command.execute()\n      }\n\n      @Lookup(\"myCommand\")\n      protected abstract fun createCommand(): Command\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bean Dependencies with Constructor Arguments in XML\nDESCRIPTION: XML configuration showing how to wire dependencies between beans using constructor arguments. This example wires 'beanTwo' and 'beanThree' into 'beanOne' through constructor injection.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_30\n\nLANGUAGE: XML\nCODE:\n```\n<beans>\n      <bean id=\"beanOne\" class=\"x.y.ThingOne\">\n           <constructor-arg ref=\"beanTwo\"/>\n           <constructor-arg ref=\"beanThree\"/>\n      </bean>\n\n      <bean id=\"beanTwo\" class=\"x.y.ThingTwo\"/>\n\n      <bean id=\"beanThree\" class=\"x.y.ThingThree\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Kotlin Implementation of a Static Factory Method Pattern for Spring Beans\nDESCRIPTION: Kotlin equivalent of the static factory method pattern for Spring beans. Uses a companion object with a private constructor and a static factory method annotated with @JvmStatic.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass ClientService private constructor() {\n      companion object {\n           private val clientService = ClientService()\n           @JvmStatic\n           fun createInstance() = clientService\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Bean with @ConstructorProperties Annotation\nDESCRIPTION: Example Java class using the @ConstructorProperties JDK annotation to explicitly name constructor parameters. This enables name-based argument matching even without debug information.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_37\n\nLANGUAGE: java\nCODE:\n```\npackage examples;\n\npublic class ExampleBean {\n\n      // Fields omitted\n\n      @ConstructorProperties({\"years\", \"ultimateAnswer\"})\n```\n\n----------------------------------------\n\nTITLE: Instance Factory Method Bean Configuration\nDESCRIPTION: XML configuration showing how to create beans using instance factory methods\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_21\n\nLANGUAGE: XML\nCODE:\n```\n<!-- the factory bean, which contains a method called createInstance() -->\n<bean id=\"serviceLocator\" class=\"examples.DefaultServiceLocator\">\n      <!-- inject any dependencies required by this locator bean -->\n</bean>\n\n<!-- the bean to be created via the factory bean -->\n<bean id=\"clientService\"\n      factory-bean=\"serviceLocator\"\n      factory-method=\"createClientServiceInstance\"/>\n```\n\n----------------------------------------\n\nTITLE: CommandManager with @Lookup Annotation in Java\nDESCRIPTION: Java implementation showing how to use the @Lookup annotation for method injection in Spring.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_83\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class CommandManager {\n\n    public Object process(Object commandState) {\n        Command command = createCommand();\n        command.setState(commandState);\n        return command.execute();\n    }\n\n    @Lookup(\"myCommand\")\n    protected abstract Command createCommand();\n}\n```\n\n----------------------------------------\n\nTITLE: Building Spring AI with Integration Tests\nDESCRIPTION: Command to build the Spring AI project including both unit and integration tests. API keys for model providers should be set as environment variables.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw clean verify -Pintegration-tests\n```\n\n----------------------------------------\n\nTITLE: Configuring Factory Method Dependency Injection in Spring XML\nDESCRIPTION: XML configuration for factory method-based bean instantiation. This configuration specifies a static factory method to be used for creating the bean instance, with dependencies passed as arguments to the factory method.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_48\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\" factory-method=\"createInstance\">\n      <constructor-arg ref=\"anotherExampleBean\"/>\n      <constructor-arg ref=\"yetAnotherBean\"/>\n      <constructor-arg value=\"1\"/>\n</bean>\n\n<bean id=\"anotherExampleBean\" class=\"examples.AnotherBean\"/>\n<bean id=\"yetAnotherBean\" class=\"examples.YetAnotherBean\"/>\n```\n\n----------------------------------------\n\nTITLE: Java Class with @ConstructorProperties Annotation\nDESCRIPTION: The beginning of a Java class demonstrating the use of @ConstructorProperties annotation to explicitly name constructor arguments for Spring's dependency injection.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\npackage examples;\n\npublic class ExampleBean {\n\n      // Fields omitted\n\n      @ConstructorProperties({\"years\", \"ultimateAnswer\"})\n```\n\n----------------------------------------\n\nTITLE: Instance Factory Implementation in Java\nDESCRIPTION: Java class showing implementation of instance factory methods for creating Spring beans\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\npublic class DefaultServiceLocator {\n\n      private static ClientService clientService = new ClientServiceImpl();\n\n      public ClientService createClientServiceInstance() {\n           return clientService;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Lookup Annotation with Return Type Resolution in Kotlin\nDESCRIPTION: Kotlin class showing how to use the @Lookup annotation without a bean name, relying on the declared return type for bean resolution.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_87\n\nLANGUAGE: Kotlin\nCODE:\n```\nabstract class CommandManager {\n\n      fun process(commandState: Any): Any {\n           val command = createCommand()\n           command.state = commandState\n           return command.execute()\n      }\n\n      @Lookup\n      protected abstract fun createCommand(): Command\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Integration Test with Retry Attempts\nDESCRIPTION: Command to run a specific integration test (PgVectorStoreIT in this case) with up to two retry attempts when tests fail. Useful for tests that might time out or have reliability issues.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -pl vector-stores/spring-ai-pgvector-store -Pintegration-tests -Dfailsafe.rerunFailingTestsCount=2 -Dit.test=PgVectorStoreIT verify\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Layer Objects in Spring XML\nDESCRIPTION: Example of configuring service layer objects in a Spring XML configuration file. Demonstrates bean definition with property references.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- services -->\n\n    <bean id=\"petStore\" class=\"org.springframework.samples.jpetstore.services.PetStoreServiceImpl\">\n        <property name=\"accountDao\" ref=\"accountDao\"/>\n        <property name=\"itemDao\" ref=\"itemDao\"/>\n        <!-- additional collaborators and configuration for this bean go here -->\n    </bean>\n\n    <!-- more bean definitions for services go here -->\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bean Dependencies Using depends-on in Spring XML\nDESCRIPTION: Demonstrates how to express direct dependencies between beans using the depends-on attribute in Spring XML configuration. This ensures beans are initialized in the correct order, with 'manager' being initialized before 'beanOne'.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_75\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"beanOne\" class=\"ExampleBean\" depends-on=\"manager\"/>\n<bean id=\"manager\" class=\"ManagerBean\" />\n```\n\n----------------------------------------\n\nTITLE: Creating DataSource Aliases for Multiple Subsystems\nDESCRIPTION: Example of creating multiple aliases for a single DataSource bean to be used by different subsystems while maintaining unique namespaces.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_16\n\nLANGUAGE: XML\nCODE:\n```\n<alias name=\"myApp-dataSource\" alias=\"subsystemA-dataSource\"/>\n<alias name=\"myApp-dataSource\" alias=\"subsystemB-dataSource\"/>\n```\n\n----------------------------------------\n\nTITLE: Java Bean Class with Constructor Injection\nDESCRIPTION: Java implementation of ExampleBean class using constructor injection.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_45\n\nLANGUAGE: Java\nCODE:\n```\npublic class ExampleBean {\n    private AnotherBean beanOne;\n    private YetAnotherBean beanTwo;\n    private int i;\n\n    public ExampleBean(AnotherBean anotherBean, YetAnotherBean yetAnotherBean, int i) {\n         this.beanOne = anotherBean;\n         this.beanTwo = yetAnotherBean;\n         this.i = i;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Beans with Static Factory Methods in Spring XML Configuration\nDESCRIPTION: Configuration example showing how to define a bean that will be created using a static factory method rather than direct instantiation. The factory-method attribute specifies which static method to call.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_17\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"clientService\"\n      class=\"examples.ClientService\"\n      factory-method=\"createInstance\"/>\n```\n\n----------------------------------------\n\nTITLE: Quick Build and Install for Testing\nDESCRIPTION: Command to quickly build and install the Spring AI project skipping tests and javadoc generation. Useful before running specific integration tests.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw clean install -DskipTests -Dmaven.javadoc.skip=true\n```\n\n----------------------------------------\n\nTITLE: Static Factory Method Bean Configuration\nDESCRIPTION: Shows XML configuration for creating a bean using a static factory method\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_18\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"clientService\"\n      class=\"examples.ClientService\"\n      factory-method=\"createInstance\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Synchronous Mode in YAML\nDESCRIPTION: YAML configuration for setting up the MCP server in synchronous mode, which is the default option suitable for sequential access to tools and resources.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-docs/src/main/asciidoc/mcp.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  ai:\n    mcp:\n      server:\n        type: SYNC\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Dependencies with depends-on in Spring XML\nDESCRIPTION: Shows how to express dependencies on multiple beans using the depends-on attribute with a comma-separated list. This ensures 'manager' and 'accountDao' are initialized before 'beanOne'.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_76\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"beanOne\" class=\"ExampleBean\" depends-on=\"manager,accountDao\">\n      <property name=\"manager\" ref=\"manager\" />\n</bean>\n\n\n<bean id=\"manager\" class=\"ManagerBean\" />\n<bean id=\"accountDao\" class=\"x.y.jdbc.JdbcAccountDao\" />\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Constructor-based Dependency Injection\nDESCRIPTION: XML bean definitions showing constructor-based dependency injection using constructor-arg elements.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_44\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n    <constructor-arg>\n         <ref bean=\"anotherExampleBean\"/>\n    </constructor-arg>\n    <constructor-arg ref=\"yetAnotherBean\"/>\n    <constructor-arg type=\"int\" value=\"1\"/>\n</bean>\n<bean id=\"anotherExampleBean\" class=\"examples.AnotherBean\"/>\n<bean id=\"yetAnotherBean\" class=\"examples.YetAnotherBean\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Layer Objects in Spring XML\nDESCRIPTION: This XML configuration defines service layer objects, including a PetStoreServiceImpl bean with dependencies on data access objects.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- services -->\n\n    <bean id=\"petStore\" class=\"org.springframework.samples.jpetstore.services.PetStoreServiceImpl\">\n        <property name=\"accountDao\" ref=\"accountDao\"/>\n        <property name=\"itemDao\" ref=\"itemDao\"/>\n        <!-- additional collaborators and configuration for this bean go here -->\n    </bean>\n\n    <!-- more bean definitions for services go here -->\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Cloning with Git LFS Skip\nDESCRIPTION: Command to clone the Spring AI repository while ignoring large files tracked by Git LFS. This won't affect the Spring AI behavior.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/README.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nGIT_LFS_SKIP_SMUDGE=1 git clone git@github.com:spring-projects/spring-ai.git\n```\n\n----------------------------------------\n\nTITLE: Java Implementation of a Static Factory Method Pattern for Spring Beans\nDESCRIPTION: Java class showing the implementation of a static factory method pattern for Spring beans. The class contains a private constructor and a static method that returns a singleton instance.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\npublic class ClientService {\n      private static ClientService clientService = new ClientService();\n      private ClientService() {}\n\n      public static ClientService createInstance() {\n           return clientService;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Spring Beans in XML\nDESCRIPTION: Basic structure of XML-based configuration metadata for defining Spring beans. Shows how to define beans with id and class attributes.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"...\" class=\"...\">      ①   ②\n        <!-- collaborators and configuration for this bean go here -->\n    </bean>\n\n    <bean id=\"...\" class=\"...\">\n        <!-- collaborators and configuration for this bean go here -->\n    </bean>\n\n    <!-- more bean definitions go here -->\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Lookup Methods in Spring XML\nDESCRIPTION: XML configuration that demonstrates how to use the lookup-method element to configure a stateful bean deployed as a prototype and inject it into a CommandManager.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_83\n\nLANGUAGE: XML\nCODE:\n```\n<!-- a stateful bean deployed as a prototype (non-singleton) -->\n<bean id=\"myCommand\" class=\"fiona.apple.AsyncCommand\" scope=\"prototype\">\n      <!-- inject dependencies here as required -->\n</bean>\n\n<!-- commandProcessor uses statefulCommandHelper -->\n<bean id=\"commandManager\" class=\"fiona.apple.CommandManager\">\n      <lookup-method name=\"createCommand\" bean=\"myCommand\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Constructor Argument Resolution Example in Java\nDESCRIPTION: Example Java class with multiple constructor arguments to demonstrate Spring's constructor argument resolution. This class has dependencies on ThingTwo and ThingThree objects.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_29\n\nLANGUAGE: java\nCODE:\n```\npackage x.y;\n\npublic class ThingOne {\n\n      public ThingOne(ThingTwo thingTwo, ThingThree thingThree) {\n           // ...\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Session-Scoped Component using Kotlin Annotations\nDESCRIPTION: Kotlin implementation of a session-scoped component using the @SessionScope and @Component annotations. This creates a new instance of the component for the lifetime of an HTTP Session.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_102\n\nLANGUAGE: kotlin\nCODE:\n```\n@SessionScope\n@Component\nclass UserPreferences {\n      // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding API Key Security to Qdrant Container\nDESCRIPTION: Docker environment variable configuration to add API key authentication to the Qdrant container for enhanced security\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/vector-stores/spring-ai-qdrant-store/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-e QDRANT__SERVICE__API_KEY=<your_generated_api_key_here>\n```\n\n----------------------------------------\n\nTITLE: Implementing a CommandManager with Abstract Method for Lookup in Kotlin\nDESCRIPTION: A Kotlin class that uses method injection through an abstract createCommand() method that Spring will implement at runtime. The class processes commands without direct Spring dependencies.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_82\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage fiona.apple\n\n// no more Spring imports!\n\nabstract class CommandManager {\n\n      fun process(commandState: Any): Any {\n           // grab a new instance of the appropriate Command interface\n           val command = createCommand()\n           // set the state on the (hopefully brand new) Command instance\n           command.state = commandState\n           return command.execute()\n      }\n\n      // okay... but where is the implementation of this method?\n      protected abstract fun createCommand(): Command\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Argument Resolution Example in Kotlin\nDESCRIPTION: Example Kotlin class with multiple constructor arguments to demonstrate Spring's constructor argument resolution. This class has dependencies on ThingTwo and ThingThree objects.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\npackage x.y\n\nclass ThingOne(thingTwo: ThingTwo, thingThree: ThingThree)\n```\n\n----------------------------------------\n\nTITLE: Complete Scoped Bean Configuration\nDESCRIPTION: Demonstrates the correct and complete configuration for injecting session-scoped beans into collaborating objects using scoped proxy.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_99\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"userPreferences\" class=\"com.something.UserPreferences\" scope=\"session\">\n      <aop:scoped-proxy/>\n</bean>\n\n<bean id=\"userManager\" class=\"com.something.UserManager\">\n      <property name=\"userPreferences\" ref=\"userPreferences\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Java Bean with Primitive and String Constructor Arguments\nDESCRIPTION: Example Java class with a constructor that takes an integer and a string parameter. This demonstrates how Spring needs to handle arguments of different simple types.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_31\n\nLANGUAGE: Java\nCODE:\n```\npackage examples;\n\npublic class ExampleBean {\n\n      // Number of years to calculate the Ultimate Answer\n      private final int years;\n\n      // The Answer to Life, the Universe, and Everything\n      private final String ultimateAnswer;\n\n      public ExampleBean(int years, String ultimateAnswer) {\n           this.years = years;\n           this.ultimateAnswer = ultimateAnswer;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Session-Scoped Component in Java and Kotlin\nDESCRIPTION: Annotation-based configuration for session-scoped components in Java and Kotlin.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_94\n\nLANGUAGE: java\nCODE:\n```\n@SessionScope\n@Component\npublic class UserPreferences {\n    // ...\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@SessionScope\n@Component\nclass UserPreferences {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Properties in Spring Bean\nDESCRIPTION: Example of configuring a java.util.Properties instance within a Spring PropertySourcesPlaceholderConfigurer. This shows how to define property values in a nested value element that will be converted to Properties using the JavaBeans PropertyEditor mechanism.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_53\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"mappings\"\n      class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n\n      <!-- typed as a java.util.Properties -->\n      <property name=\"properties\">\n           <value>\n                 jdbc.driver.className=com.mysql.jdbc.Driver\n                 jdbc.url=jdbc:mysql://localhost:3306/mydb\n           </value>\n      </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Using p-namespace for Bean References in Spring XML\nDESCRIPTION: Demonstrates using the p-namespace for both simple property values and bean references. Shows how to use the '-ref' suffix to create references to other beans, making the configuration more compact.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_71\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:p=\"http://www.springframework.org/schema/p\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n           https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n\n      <bean name=\"john-classic\" class=\"com.example.Person\">\n           <property name=\"name\" value=\"John Doe\"/>\n           <property name=\"spouse\" ref=\"jane\"/>\n      </bean>\n\n\n      <bean name=\"john-modern\"\n           class=\"com.example.Person\"\n           p:name=\"John Doe\"\n           p:spouse-ref=\"jane\"/>\n\n\n      <bean name=\"jane\" class=\"com.example.Person\">\n           <property name=\"name\" value=\"Jane Doe\"/>\n      </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Manager with ApplicationContextAware in Kotlin\nDESCRIPTION: Kotlin implementation of a CommandManager class that uses ApplicationContextAware to handle prototype bean injection. Provides the same functionality as the Java version but with Kotlin-specific syntax and features.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_79\n\nLANGUAGE: kotlin\nCODE:\n```\n//  a  class   that   uses   a  stateful    Command-style       class   to  perform    some   processing\npackage    fiona.apple\n\n//  Spring-API      imports\nimport    org.springframework.context.ApplicationContext\nimport    org.springframework.context.ApplicationContextAware\n\nclass    CommandManager      :  ApplicationContextAware          {\n\n      private    lateinit    var   applicationContext:        ApplicationContext\n\n      fun  process(commandState:          Map<*,   *>):   Any   {\n           //  grab   a  new   instance    of  the   appropriate     Command\n           val   command    =  createCommand()\n           //  set   the  state    on  the  (hopefully     brand    new)   Command    instance\n           command.state       = commandState\n           return    command.execute()\n      }\n\n      //  notice    the  Spring    API  dependency!\n      protected     fun  createCommand()       =\n                 applicationContext.getBean(\"command\",               Command::class.java)\n\n      override    fun   setApplicationContext(applicationContext:                ApplicationContext)         {\n           this.applicationContext          =  applicationContext\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Configuration with Type-based Constructor Argument Matching\nDESCRIPTION: Spring XML configuration showing how to disambiguate constructor arguments using the 'type' attribute to explicitly specify the argument type.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n      <constructor-arg type=\"int\" value=\"7500000\"/>\n      <constructor-arg type=\"java.lang.String\" value=\"42\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Using c-namespace for Constructor Arguments in Spring XML\nDESCRIPTION: Shows how to use the c-namespace for configuring constructor arguments in Spring beans. Compares traditional constructor-arg elements with the more concise c-namespace attributes approach.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_72\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:c=\"http://www.springframework.org/schema/c\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n           https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n\n      <bean id=\"beanTwo\" class=\"x.y.ThingTwo\"/>\n      <bean id=\"beanThree\" class=\"x.y.ThingThree\"/>\n\n\n      <!-- traditional declaration with optional argument names -->\n      <bean id=\"beanOne\" class=\"x.y.ThingOne\">\n           <constructor-arg name=\"thingTwo\" ref=\"beanTwo\"/>\n           <constructor-arg name=\"thingThree\" ref=\"beanThree\"/>\n           <constructor-arg name=\"email\" value=\"something@somewhere.com\"/>\n      </bean>\n\n\n      <!-- c-namespace declaration with argument names -->\n      <bean id=\"beanOne\" class=\"x.y.ThingOne\" c:thingTwo-ref=\"beanTwo\"\n           c:thingThree-ref=\"beanThree\" c:email=\"something@somewhere.com\"/>\n\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Basic Bean Definition in Spring XML Configuration\nDESCRIPTION: Demonstrates basic bean configuration using XML metadata for Spring IoC container\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_17\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\"/>\n\n<bean name=\"anotherExample\" class=\"examples.ExampleBeanTwo\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Bean Aliases in XML Configuration\nDESCRIPTION: Creates an alias for an existing bean, allowing it to be referenced by multiple names. Useful in large systems where configuration is split across subsystems.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_15\n\nLANGUAGE: XML\nCODE:\n```\n<alias name=\"fromName\" alias=\"toName\"/>\n```\n\n----------------------------------------\n\nTITLE: Using p-namespace for Concise Spring Bean Configuration\nDESCRIPTION: This example demonstrates the use of p-namespace for more succinct XML configuration of a BasicDataSource bean. It shows how to set properties directly as attributes using the p: prefix.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_51\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:p=\"http://www.springframework.org/schema/p\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"myDataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n         destroy-method=\"close\"\n         p:driverClassName=\"com.mysql.jdbc.Driver\"\n         p:url=\"jdbc:mysql://localhost:3306/mydb\"\n         p:username=\"root\"\n         p:password=\"misterkaoli\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Implementing a CommandManager with Abstract Method for Lookup in Java\nDESCRIPTION: A Java class that uses method injection through an abstract createCommand() method that Spring will implement at runtime. The class processes commands without direct Spring dependencies.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_81\n\nLANGUAGE: Java\nCODE:\n```\npackage fiona.apple;\n\n// no more Spring imports!\n\npublic abstract class CommandManager {\n\n      public Object process(Object commandState) {\n           // grab a new instance of the appropriate Command interface\n           Command command = createCommand();\n           // set the state on the (hopefully brand new) Command instance\n           command.setState(commandState);\n           return command.execute();\n      }\n\n      // okay... but where is the implementation of this method?\n      protected abstract Command createCommand();\n}\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Factory Method Injection\nDESCRIPTION: XML bean definition using factory-method to create bean instance.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_47\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\" factory-method=\"createInstance\">\n    <constructor-arg ref=\"anotherExampleBean\"/>\n    <constructor-arg ref=\"yetAnotherBean\"/>\n    <constructor-arg value=\"1\"/>\n</bean>\n<bean id=\"anotherExampleBean\" class=\"examples.AnotherBean\"/>\n<bean id=\"yetAnotherBean\" class=\"examples.YetAnotherBean\"/>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Multiple Factory Methods in Spring\nDESCRIPTION: Example showing how to configure multiple beans created from different factory methods in the same factory bean. Each bean uses the same factory-bean but different factory-method attributes.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_23\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"serviceLocator\" class=\"examples.DefaultServiceLocator\">\n      <!-- inject any dependencies required by this locator bean -->\n</bean>\n\n<bean id=\"clientService\"\n      factory-bean=\"serviceLocator\"\n      factory-method=\"createClientServiceInstance\"/>\n\n<bean id=\"accountService\"\n      factory-bean=\"serviceLocator\"\n      factory-method=\"createAccountServiceInstance\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Beans with XML-based Configuration in Spring\nDESCRIPTION: Example of how to define beans in Spring using XML configuration. This demonstrates specifying beans with ID and class attributes for basic instantiation through constructors.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_16\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\"/>\n\n<bean name=\"anotherExample\" class=\"examples.ExampleBeanTwo\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating DataSource Aliases in Spring XML\nDESCRIPTION: Demonstrates creating multiple aliases for a DataSource bean to maintain unique naming across different subsystems while referring to the same object.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_15\n\nLANGUAGE: XML\nCODE:\n```\n<alias name=\"myApp-dataSource\" alias=\"subsystemA-dataSource\"/>\n<alias name=\"myApp-dataSource\" alias=\"subsystemB-dataSource\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bean Properties Using p-namespace in Spring XML\nDESCRIPTION: XML configuration demonstrating p-namespace usage for concise bean property configuration. The example shows standard XML format and p-namespace format for the same property.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_69\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:p=\"http://www.springframework.org/schema/p\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n           https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n\n      <bean name=\"classic\" class=\"com.example.ExampleBean\">\n           <property name=\"email\" value=\"someone@somewhere.com\"/>\n      </bean>\n\n\n      <bean name=\"p-namespace\" class=\"com.example.ExampleBean\"\n           p:email=\"someone@somewhere.com\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Using p-namespace for Concise Spring Bean Configuration\nDESCRIPTION: Example of using the p-namespace in Spring XML configuration to define bean properties more concisely. This approach uses attributes with the 'p:' prefix instead of nested property elements.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_52\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:p=\"http://www.springframework.org/schema/p\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n      https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n      <bean id=\"myDataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n           destroy-method=\"close\"\n           p:driverClassName=\"com.mysql.jdbc.Driver\"\n           p:url=\"jdbc:mysql://localhost:3306/mydb\"\n           p:username=\"root\"\n           p:password=\"misterkaoli\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Strongly-typed Collection Bean Configuration\nDESCRIPTION: XML configuration for injecting values into a strongly-typed Map collection.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_63\n\nLANGUAGE: XML\nCODE:\n```\n<beans>\n    <bean id=\"something\" class=\"x.y.SomeClass\">\n         <property name=\"accounts\">\n               <map>\n                    <entry key=\"one\" value=\"9.99\"/>\n                    <entry key=\"two\" value=\"2.75\"/>\n                    <entry key=\"six\" value=\"3.99\"/>\n               </map>\n         </property>\n    </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Static Factory Method Implementation in Kotlin\nDESCRIPTION: Kotlin class implementation showing static factory method pattern for Spring bean creation\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass ClientService private constructor() {\n      companion object {\n           private val clientService = ClientService()\n           @JvmStatic\n           fun createInstance() = clientService\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ref Element for Bean References in Spring XML\nDESCRIPTION: Simple example of using the ref element with the bean attribute to reference another bean in the same container or parent container. This is the most common way to establish bean dependencies in Spring XML configuration.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_56\n\nLANGUAGE: XML\nCODE:\n```\n<ref bean=\"someBean\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Inner Beans in Spring XML\nDESCRIPTION: This snippet demonstrates how to define an inner bean within a property or constructor-arg element. It shows defining a Person bean inline as a property of an outer bean.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_56\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"outer\" class=\"...\">\n    <!-- instead of using a reference to a target bean, simply define the target bean inline -->\n    <property name=\"target\">\n         <bean class=\"com.example.Person\"> <!-- this is the inner bean -->\n               <property name=\"name\" value=\"Fiona Apple\"/>\n               <property name=\"age\" value=\"25\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring RequestContextListener in web.xml for Spring Web Scopes\nDESCRIPTION: XML configuration to register the RequestContextListener in a web application's web.xml file. This listener binds HTTP request objects to the servicing thread, enabling request and session-scoped beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_95\n\nLANGUAGE: xml\nCODE:\n```\n<web-app>\n      ...\n      <listener>\n           <listener-class>\n                 org.springframework.web.context.request.RequestContextListener\n           </listener-class>\n      </listener>\n      ...\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bean References Using p-namespace in Spring XML\nDESCRIPTION: XML configuration demonstrating p-namespace usage for bean references using the -ref suffix. The example shows both standard XML format and p-namespace format for the same bean references.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_70\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:p=\"http://www.springframework.org/schema/p\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n           https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n\n      <bean name=\"john-classic\" class=\"com.example.Person\">\n           <property name=\"name\" value=\"John Doe\"/>\n           <property name=\"spouse\" ref=\"jane\"/>\n      </bean>\n\n\n      <bean name=\"john-modern\"\n           class=\"com.example.Person\"\n           p:name=\"John Doe\"\n           p:spouse-ref=\"jane\"/>\n\n\n      <bean name=\"jane\" class=\"com.example.Person\">\n           <property name=\"name\" value=\"Jane Doe\"/>\n      </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Using idref Element for Bean References in Spring XML\nDESCRIPTION: Example of using the idref element to reference another bean's ID as a string value (not as a bean reference). This approach allows container validation at deployment time to ensure the referenced bean exists.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_54\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"theTargetBean\" class=\"...\"/>\n\n<bean id=\"theClientBean\" class=\"...\">\n      <property name=\"targetName\">\n           <idref bean=\"theTargetBean\"/>\n      </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Initialization Methods in Spring XML\nDESCRIPTION: Specifies how to use the default-init-method attribute on the top-level <beans/> element to configure a default initialization callback method for all beans in the container.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_113\n\nLANGUAGE: xml\nCODE:\n```\n<beans default-init-method=\"init\">\n    <!-- bean definitions here -->\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Collection Properties in Spring XML\nDESCRIPTION: Example of configuring different collection types (Properties, List, Map, Set) as bean properties in Spring XML configuration. Demonstrates how to set Java Collections using <props>, <list>, <map>, and <set> elements.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_57\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"moreComplexObject\" class=\"example.ComplexObject\">\n      <!-- results in a setAdminEmails(java.util.Properties) call -->\n      <property name=\"adminEmails\">\n           <props>\n                 <prop key=\"administrator\">administrator@example.org</prop>\n                 <prop key=\"support\">support@example.org</prop>\n                 <prop key=\"development\">development@example.org</prop>\n           </props>\n      </property>\n      <!-- results in a setSomeList(java.util.List) call -->\n      <property name=\"someList\">\n           <list>\n                 <value>a list element followed by a reference</value>\n                 <ref bean=\"myDataSource\" />\n           </list>\n      </property>\n      <!-- results in a setSomeMap(java.util.Map) call -->\n      <property name=\"someMap\">\n           <map>\n                 <entry key=\"an entry\" value=\"just some string\"/>\n                 <entry key=\"a ref\" value-ref=\"myDataSource\"/>\n           </map>\n      </property>\n      <!-- results in a setSomeSet(java.util.Set) call -->\n      <property name=\"someSet\">\n           <set>\n                 <value>just some string</value>\n                 <ref bean=\"myDataSource\" />\n           </set>\n      </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Collection Merging in Spring Bean Definitions\nDESCRIPTION: Demonstrates how to merge collections between parent and child beans using the merge attribute. Child collections can inherit and override values from parent collections while maintaining existing values.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_58\n\nLANGUAGE: XML\nCODE:\n```\n<beans>\n      <bean id=\"parent\" abstract=\"true\" class=\"example.ComplexObject\">\n           <property name=\"adminEmails\">\n                 <props>\n                      <prop key=\"administrator\">administrator@example.com</prop>\n                      <prop key=\"support\">support@example.com</prop>\n                 </props>\n           </property>\n      </bean>\n      <bean id=\"child\" parent=\"parent\">\n           <property name=\"adminEmails\">\n                 <!-- the merge is specified on the child collection definition -->\n                 <props merge=\"true\">\n                      <prop key=\"sales\">sales@example.com</prop>\n                      <prop key=\"support\">support@example.co.uk</prop>\n                 </props>\n           </property>\n      </bean>\n<beans>\n```\n\n----------------------------------------\n\nTITLE: Request-Scoped Component in Java and Kotlin\nDESCRIPTION: Annotation-based configuration for request-scoped components in Java and Kotlin.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_92\n\nLANGUAGE: java\nCODE:\n```\n@RequestScope\n@Component\npublic class LoginAction {\n    // ...\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequestScope\n@Component\nclass LoginAction {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using idref Element for Bean References in Spring XML\nDESCRIPTION: This example demonstrates the use of the idref element to pass the id of another bean as a string value. It shows how to reference a target bean in a property setting.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_53\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"theTargetBean\" class=\"...\"/>\n\n<bean id=\"theClientBean\" class=\"...\">\n    <property name=\"targetName\">\n         <idref bean=\"theTargetBean\"/>\n    </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Bean References in Spring XML\nDESCRIPTION: This example demonstrates how to reference beans in a parent container using the 'parent' attribute of the ref element. It shows creating a proxy for a bean defined in the parent context.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_55\n\nLANGUAGE: XML\nCODE:\n```\n<!-- in the parent context -->\n<bean id=\"accountService\" class=\"com.something.SimpleAccountService\">\n    <!-- insert dependencies as required here -->\n</bean>\n\n<!-- in the child (descendant) context -->\n<bean id=\"accountService\" <!-- bean name is the same as the parent bean -->\n    class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n    <property name=\"target\">\n         <ref parent=\"accountService\"/> <!-- notice how we refer to the parent bean -->\n    </property>\n    <!-- insert other configuration and dependencies as required here -->\n</bean>\n```\n\n----------------------------------------\n\nTITLE: XML Bean Configuration for Constructor Argument Resolution\nDESCRIPTION: Spring XML configuration showing how to wire beans with constructor arguments. It defines three beans and shows how to reference other beans as constructor arguments.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<beans>\n      <bean id=\"beanOne\" class=\"x.y.ThingOne\">\n           <constructor-arg ref=\"beanTwo\"/>\n           <constructor-arg ref=\"beanThree\"/>\n      </bean>\n\n      <bean id=\"beanTwo\" class=\"x.y.ThingTwo\"/>\n\n      <bean id=\"beanThree\" class=\"x.y.ThingThree\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Spring Collection Merging Configuration\nDESCRIPTION: Shows how to merge collection properties between parent and child beans using the merge attribute.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_60\n\nLANGUAGE: XML\nCODE:\n```\n<beans>\n    <bean id=\"parent\" abstract=\"true\" class=\"example.ComplexObject\">\n         <property name=\"adminEmails\">\n               <props>\n                    <prop key=\"administrator\">administrator@example.com</prop>\n                    <prop key=\"support\">support@example.com</prop>\n               </props>\n         </property>\n    </bean>\n    <bean id=\"child\" parent=\"parent\">\n         <property name=\"adminEmails\">\n               <props merge=\"true\">\n                    <prop key=\"sales\">sales@example.com</prop>\n                    <prop key=\"support\">support@example.co.uk</prop>\n               </props>\n         </property>\n    </bean>\n<beans>\n```\n\n----------------------------------------\n\nTITLE: Defining Prototype Bean in Spring XML\nDESCRIPTION: This XML snippet demonstrates how to define a bean with prototype scope in Spring. Prototype scope creates a new instance for each request of the bean.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_94\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"accountService\" class=\"com.something.DefaultAccountService\" scope=\"prototype\"/>\n```\n\n----------------------------------------\n\nTITLE: Using ref Element for Bean References in Spring XML\nDESCRIPTION: This snippet shows how to use the ref element to create a reference to another bean in the container. It demonstrates referencing a bean using the 'bean' attribute.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_54\n\nLANGUAGE: XML\nCODE:\n```\n<ref bean=\"someBean\"/>\n```\n\n----------------------------------------\n\nTITLE: Merged Collection Results Example\nDESCRIPTION: Shows the resulting properties after merging parent and child collections. The child collection inherits values from the parent and can override specific values.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_59\n\nLANGUAGE: properties\nCODE:\n```\nadministrator=administrator@example.com\nsales=sales@example.com\nsupport=support@example.co.uk\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Access Objects in Spring XML\nDESCRIPTION: This XML configuration defines data access objects (DAOs) for a Spring application, including JpaAccountDao and JpaItemDao beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"accountDao\" class=\"org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao\">\n        <!-- additional collaborators and configuration for this bean go here -->\n    </bean>\n\n    <bean id=\"itemDao\" class=\"org.springframework.samples.jpetstore.dao.jpa.JpaItemDao\">\n        <!-- additional collaborators and configuration for this bean go here -->\n    </bean>\n\n    <!-- more bean definitions for data access objects go here -->\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Constructor Arguments Using c-namespace in Spring XML\nDESCRIPTION: XML configuration demonstrating c-namespace usage for concise constructor argument configuration. The example shows both traditional format and c-namespace format for the same constructor arguments.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_71\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:c=\"http://www.springframework.org/schema/c\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n           https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n\n      <bean id=\"beanTwo\" class=\"x.y.ThingTwo\"/>\n      <bean id=\"beanThree\" class=\"x.y.ThingThree\"/>\n\n\n      <!-- traditional declaration with optional argument names -->\n      <bean id=\"beanOne\" class=\"x.y.ThingOne\">\n           <constructor-arg name=\"thingTwo\" ref=\"beanTwo\"/>\n           <constructor-arg name=\"thingThree\" ref=\"beanThree\"/>\n           <constructor-arg name=\"email\" value=\"something@somewhere.com\"/>\n      </bean>\n\n\n      <!-- c-namespace declaration with argument names -->\n      <bean id=\"beanOne\" class=\"x.y.ThingOne\" c:thingTwo-ref=\"beanTwo\"\n           c:thingThree-ref=\"beanThree\" c:email=\"something@somewhere.com\"/>\n\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Instance Factory Method Bean Creation in Spring\nDESCRIPTION: Example of XML configuration for instantiating beans using an instance factory method. Uses factory-bean to reference another bean that contains the factory method, and factory-method to specify which method to call.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_20\n\nLANGUAGE: XML\nCODE:\n```\n<!-- the factory bean, which contains a method called createInstance() -->\n<bean id=\"serviceLocator\" class=\"examples.DefaultServiceLocator\">\n      <!-- inject any dependencies required by this locator bean -->\n</bean>\n\n<!-- the bean to be created via the factory bean -->\n<bean id=\"clientService\"\n      factory-bean=\"serviceLocator\"\n      factory-method=\"createClientServiceInstance\"/>\n```\n\n----------------------------------------\n\nTITLE: Declaring Application-Scoped Bean in XML Configuration\nDESCRIPTION: XML configuration for defining a bean with application scope. This creates a single instance of the bean for the entire web application, scoped at ServletContext level and stored as a ServletContext attribute.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_103\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"appPreferences\" class=\"com.something.AppPreferences\" scope=\"application\"/>\n```\n\n----------------------------------------\n\nTITLE: Strongly-typed Collection Class in Java\nDESCRIPTION: Java class example showing strongly-typed collection usage with Spring's type conversion support.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_61\n\nLANGUAGE: Java\nCODE:\n```\npublic class SomeClass {\n    private Map<String, Float> accounts;\n\n    public void setAccounts(Map<String, Float> accounts) {\n         this.accounts = accounts;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Null Value in Spring XML Bean Configuration\nDESCRIPTION: Demonstrates how to set a bean property to null using the <null/> element in XML configuration. This allows explicitly setting properties to null rather than empty strings.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_67\n\nLANGUAGE: XML\nCODE:\n```\n<bean class=\"ExampleBean\">\n      <property name=\"email\">\n           <null/>\n      </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Lifecycle Methods for Individual Beans\nDESCRIPTION: Demonstrates how to override default lifecycle method names for individual beans using init-method and destroy-method attributes on the <bean/> element.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_115\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"exampleBean\" class=\"example.ExampleBean\" init-method=\"customInit\" destroy-method=\"customDestroy\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Setter-Based Dependency Injection in Spring XML\nDESCRIPTION: XML configuration for setter-based dependency injection that defines an ExampleBean with dependencies on other beans and a primitive integer value. The configuration shows both nested ref elements and attribute-based referencing.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_42\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n      <!-- setter injection using the nested ref element -->\n      <property name=\"beanOne\">\n           <ref bean=\"anotherExampleBean\"/>\n      </property>\n\n      <!-- setter injection using the neater ref attribute -->\n      <property name=\"beanTwo\" ref=\"yetAnotherBean\"/>\n      <property name=\"integerProperty\" value=\"1\"/>\n</bean>\n\n<bean id=\"anotherExampleBean\" class=\"examples.AnotherBean\"/>\n<bean id=\"yetAnotherBean\" class=\"examples.YetAnotherBean\"/>\n```\n\n----------------------------------------\n\nTITLE: Instance Factory Implementation in Kotlin\nDESCRIPTION: Kotlin implementation of instance factory methods for creating Spring beans\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass DefaultServiceLocator {\n      companion object {\n           private val clientService = ClientServiceImpl()\n      }\n      fun createClientServiceInstance(): ClientService {\n           return clientService\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Expressing Multiple Bean Dependencies with depends-on in Spring XML\nDESCRIPTION: Shows how to configure a bean to depend on multiple other beans using a comma-separated list in the depends-on attribute. This example includes both depends-on and direct property reference.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_75\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"beanOne\" class=\"ExampleBean\" depends-on=\"manager,accountDao\">\n      <property name=\"manager\" ref=\"manager\" />\n</bean>\n\n\n<bean id=\"manager\" class=\"ManagerBean\" />\n<bean id=\"accountDao\" class=\"x.y.jdbc.JdbcAccountDao\" />\n```\n\n----------------------------------------\n\nTITLE: Strongly-typed Collection Class in Kotlin\nDESCRIPTION: Kotlin class example demonstrating strongly-typed collection usage with Spring.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_62\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass SomeClass {\n    lateinit var accounts: Map<String, Float>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bean Dependencies Using depends-on in Spring XML\nDESCRIPTION: Demonstrates how to express dependencies between beans using the depends-on attribute in Spring XML configuration. This ensures one bean is initialized before another, even when there's no direct property reference between them.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_74\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"beanOne\" class=\"ExampleBean\" depends-on=\"manager\"/>\n<bean id=\"manager\" class=\"ManagerBean\" />\n```\n\n----------------------------------------\n\nTITLE: Spring Bean Configuration with Lookup Method\nDESCRIPTION: XML configuration showing how to configure a prototype-scoped bean with lookup-method injection in Spring.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_82\n\nLANGUAGE: xml\nCODE:\n```\n<!-- a stateful bean deployed as a prototype (non-singleton) -->\n<bean id=\"myCommand\" class=\"fiona.apple.AsyncCommand\" scope=\"prototype\">\n    <!-- inject dependencies here as required -->\n</bean>\n\n<!-- commandProcessor uses statefulCommandHelper -->\n<bean id=\"commandManager\" class=\"fiona.apple.CommandManager\">\n    <lookup-method name=\"createCommand\" bean=\"myCommand\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Setter-based Dependency Injection\nDESCRIPTION: XML bean definitions showing setter-based dependency injection with nested ref elements and ref attributes.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_41\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n    <property name=\"beanOne\">\n         <ref bean=\"anotherExampleBean\"/>\n    </property>\n    <property name=\"beanTwo\" ref=\"yetAnotherBean\"/>\n    <property name=\"integerProperty\" value=\"1\"/>\n</bean>\n<bean id=\"anotherExampleBean\" class=\"examples.AnotherBean\"/>\n<bean id=\"yetAnotherBean\" class=\"examples.YetAnotherBean\"/>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration with Index-based Constructor Argument Matching\nDESCRIPTION: Spring XML configuration showing how to disambiguate constructor arguments using the 'index' attribute to explicitly specify the position of each argument (zero-based).\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n      <constructor-arg index=\"0\" value=\"7500000\"/>\n      <constructor-arg index=\"1\" value=\"42\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Composing XML-based Configuration with Import Elements\nDESCRIPTION: This XML configuration demonstrates how to compose bean definitions from multiple XML files using the <import> element. It imports external configurations and defines additional beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<beans>\n    <import resource=\"services.xml\"/>\n    <import resource=\"resources/messageSource.xml\"/>\n    <import resource=\"/resources/themeSource.xml\"/>\n\n    <bean id=\"bean1\" class=\"...\"/>\n    <bean id=\"bean2\" class=\"...\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Setting Null Values in Java\nDESCRIPTION: Java equivalent code for setting a null value to a bean property. This corresponds to the XML configuration using the <null/> element.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_67\n\nLANGUAGE: Java\nCODE:\n```\nexampleBean.setEmail(null);\n```\n\n----------------------------------------\n\nTITLE: Method Replacement Implementation in Java\nDESCRIPTION: Implementation of MethodReplacer interface to provide new method definition for method replacement in Spring.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_85\n\nLANGUAGE: java\nCODE:\n```\n/**\n * meant to be used to override the existing computeValue(String)\n * implementation in MyValueCalculator\n */\npublic class ReplacementComputeValue implements MethodReplacer {\n\n    public Object reimplement(Object o, Method m, Object[] args) throws Throwable {\n        // get the input value, work with it, and return a computed result\n        String input = (String) args[0];\n        ...\n        return ...;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Method Replacement in Spring XML\nDESCRIPTION: This XML snippet demonstrates how to configure method replacement for a bean in Spring. It defines a bean with a replaced method and specifies the replacement implementation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_92\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"myValueCalculator\" class=\"x.y.z.MyValueCalculator\">\n    <!-- arbitrary method replacement -->\n    <replaced-method name=\"computeValue\" replacer=\"replacementComputeValue\">\n         <arg-type>String</arg-type>\n    </replaced-method>\n</bean>\n\n<bean id=\"replacementComputeValue\" class=\"a.b.c.ReplacementComputeValue\"/>\n```\n\n----------------------------------------\n\nTITLE: Java Bean Class with Setter Injection\nDESCRIPTION: Java implementation of ExampleBean class showing setter methods for dependency injection.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\npublic class ExampleBean {\n    private AnotherBean beanOne;\n    private YetAnotherBean beanTwo;\n    private int i;\n\n    public void setBeanOne(AnotherBean beanOne) {\n         this.beanOne = beanOne;\n    }\n\n    public void setBeanTwo(YetAnotherBean beanTwo) {\n         this.beanTwo = beanTwo;\n    }\n\n    public void setIntegerProperty(int i) {\n         this.i = i;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Class with Multiple Constructor Arguments in Kotlin\nDESCRIPTION: A simple Kotlin class (ThingOne) showing a constructor with multiple dependencies. This demonstrates Kotlin's concise syntax for constructor parameters.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage x.y\n\nclass ThingOne(thingTwo: ThingTwo, thingThree: ThingThree)\n```\n\n----------------------------------------\n\nTITLE: Composing Spring XML Configuration Files\nDESCRIPTION: Demonstrates how to compose XML-based configuration metadata by importing multiple XML files using the <import> element.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<beans>\n    <import resource=\"services.xml\"/>\n    <import resource=\"resources/messageSource.xml\"/>\n    <import resource=\"/resources/themeSource.xml\"/>\n\n    <bean id=\"bean1\" class=\"...\"/>\n    <bean id=\"bean2\" class=\"...\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Setting Null Value in Java\nDESCRIPTION: Shows the Java code equivalent to setting a null value on a bean property. This corresponds to the XML configuration that uses the <null/> element.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_68\n\nLANGUAGE: Java\nCODE:\n```\nexampleBean.setEmail(null);\n```\n\n----------------------------------------\n\nTITLE: Defining Singleton Bean in Spring XML\nDESCRIPTION: This XML snippet shows how to define a bean with singleton scope in Spring. Singleton scope is the default, so the scope attribute is optional.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_93\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"accountService\" class=\"com.something.DefaultAccountService\"/>\n\n<!-- the following is equivalent, though redundant (singleton scope is the default) -->\n<bean id=\"accountService\" class=\"com.something.DefaultAccountService\" scope=\"singleton\"/>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration with Name-based Constructor Argument Matching\nDESCRIPTION: Spring XML configuration showing how to disambiguate constructor arguments using the 'name' attribute to explicitly specify the parameter name. Requires debug information or @ConstructorProperties annotation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n      <constructor-arg name=\"years\" value=\"7500000\"/>\n      <constructor-arg name=\"ultimateAnswer\" value=\"42\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor-Based Dependency Injection in Kotlin\nDESCRIPTION: Kotlin implementation of ExampleBean class with constructor-based dependency injection using primary constructor. The class receives all dependencies through its constructor parameters, which are automatically assigned to properties.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_47\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass ExampleBean(\n           private val beanOne: AnotherBean,\n           private val beanTwo: YetAnotherBean,\n           private val i: Int)\n```\n\n----------------------------------------\n\nTITLE: Kotlin Bean with Simple Type Constructor Arguments\nDESCRIPTION: Example Kotlin class with primitive and String constructor arguments to demonstrate how Spring handles simple type constructor arguments that require disambiguation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\npackage examples\n\nclass ExampleBean(\n      private val years: Int,   // Number of years to calculate the Ultimate Answer\n      private val ultimateAnswer: String // The Answer to Life, the Universe, and Everything\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JDK Interface-based Proxy in Spring XML\nDESCRIPTION: This XML configuration shows how to set up a JDK interface-based proxy for a scoped bean instead of the default CGLIB-based class proxy. It uses the proxy-target-class attribute set to false.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_109\n\nLANGUAGE: XML\nCODE:\n```\n<!-- DefaultUserPreferences implements the UserPreferences interface -->\n<bean id=\"userPreferences\" class=\"com.stuff.DefaultUserPreferences\" scope=\"session\">\n    <aop:scoped-proxy proxy-target-class=\"false\"/>\n</bean>\n\n<bean id=\"userManager\" class=\"com.stuff.UserManager\">\n```\n\n----------------------------------------\n\nTITLE: Setting Empty String Values in Spring Bean XML Configuration\nDESCRIPTION: XML configuration for setting an empty string value to a bean property using the value attribute. Spring treats empty arguments as empty Strings.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_63\n\nLANGUAGE: XML\nCODE:\n```\n<bean class=\"ExampleBean\">\n      <property name=\"email\" value=\"\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring RequestContextListener in web.xml\nDESCRIPTION: XML configuration for setting up RequestContextListener in a web application's web.xml file to handle request-scoped beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_89\n\nLANGUAGE: xml\nCODE:\n```\n<web-app>\n    ...\n    <listener>\n         <listener-class>\n               org.springframework.web.context.request.RequestContextListener\n         </listener-class>\n    </listener>\n    ...\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration with Constructor Argument Index\nDESCRIPTION: XML configuration demonstrating how to specify the index of constructor arguments. This is useful when a constructor has multiple arguments of the same type to resolve ambiguity.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_34\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n      <constructor-arg index=\"0\" value=\"7500000\"/>\n      <constructor-arg index=\"1\" value=\"42\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Defining Prototype Bean in Spring XML Configuration\nDESCRIPTION: XML configuration for defining a bean with prototype scope in Spring. Prototype scope results in creation of a new bean instance for each request.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_88\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"accountService\" class=\"com.something.DefaultAccountService\" scope=\"prototype\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor-based Dependency Injection in Kotlin\nDESCRIPTION: A Kotlin class that demonstrates constructor-based dependency injection using the @ConstructorProperties annotation to specify property names. The class accepts an Int 'years' and a String 'ultimateAnswer'.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_38\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage examples\n\nclass ExampleBean\n@ConstructorProperties(\"years\", \"ultimateAnswer\")\nconstructor(val years: Int, val ultimateAnswer: String)\n```\n\n----------------------------------------\n\nTITLE: InitializingBean Implementation Example\nDESCRIPTION: Demonstrates implementing Spring's InitializingBean interface for bean initialization.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_118\n\nLANGUAGE: Java\nCODE:\n```\npublic class AnotherExampleBean implements InitializingBean {\n    @Override\n    public void afterPropertiesSet() {\n        // do some initialization work\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Empty String Value in Spring XML Bean Configuration\nDESCRIPTION: Demonstrates how to set a bean property to an empty string value using XML configuration. This approach uses the value attribute with empty content in the property element.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_64\n\nLANGUAGE: XML\nCODE:\n```\n<bean class=\"ExampleBean\">\n      <property name=\"email\" value=\"\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring RequestContextFilter in web.xml for Spring Web Scopes\nDESCRIPTION: XML configuration to set up Spring's RequestContextFilter in a web application. This filter provides an alternative to RequestContextListener for binding HTTP request objects to their servicing threads.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_96\n\nLANGUAGE: xml\nCODE:\n```\n<web-app>\n      ...\n      <filter>\n           <filter-name>requestContextFilter</filter-name>\n           <filter-class>org.springframework.web.filter.RequestContextFilter</filter-class>\n      </filter>\n      <filter-mapping>\n           <filter-name>requestContextFilter</filter-name>\n           <url-pattern>/*</url-pattern>\n      </filter-mapping>\n      ...\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration with Constructor Argument Type Matching\nDESCRIPTION: XML configuration showing how to explicitly specify the type of constructor arguments. This approach is used when Spring cannot determine the argument types automatically.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_33\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n      <constructor-arg type=\"int\" value=\"7500000\"/>\n      <constructor-arg type=\"java.lang.String\" value=\"42\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Session-Scoped Bean Definition in XML\nDESCRIPTION: XML configuration for defining a session-scoped bean that persists for the lifetime of an HTTP Session.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_93\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"userPreferences\" class=\"com.something.UserPreferences\" scope=\"session\"/>\n```\n\n----------------------------------------\n\nTITLE: Constructor-based Dependency Injection in Kotlin\nDESCRIPTION: Kotlin class showing constructor-based dependency injection using @ConstructorProperties annotation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_39\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage examples\n\nclass ExampleBean\n@ConstructorProperties(\"years\", \"ultimateAnswer\")\nconstructor(val years: Int, val ultimateAnswer: String)\n```\n\n----------------------------------------\n\nTITLE: DisposableBean Implementation Example\nDESCRIPTION: Shows implementation of Spring's DisposableBean interface for cleanup operations.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_121\n\nLANGUAGE: Java\nCODE:\n```\npublic class AnotherExampleBean implements DisposableBean {\n    @Override\n    public void destroy() {\n        // do some destruction work (like releasing pooled connections)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Application Context with XML Reader\nDESCRIPTION: Demonstrates using GenericApplicationContext with XmlBeanDefinitionReader for XML-based configuration in both Java and Kotlin.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nGenericApplicationContext context = new GenericApplicationContext();\nnew XmlBeanDefinitionReader(context).loadBeanDefinitions(\"services.xml\", \"daos.xml\");\ncontext.refresh();\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = GenericApplicationContext()\nXmlBeanDefinitionReader(context).loadBeanDefinitions(\"services.xml\", \"daos.xml\")\ncontext.refresh()\n```\n\n----------------------------------------\n\nTITLE: Getting Conversation ID - Java & Kotlin\nDESCRIPTION: Method signature for obtaining the conversation identifier for the scope.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_113\n\nLANGUAGE: java\nCODE:\n```\nString getConversationId()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun getConversationId(): String\n```\n\n----------------------------------------\n\nTITLE: Spring Collection Properties Bean Configuration\nDESCRIPTION: Demonstrates configuration of various collection types (Properties, List, Map, Set) in Spring beans using XML configuration.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_59\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"moreComplexObject\" class=\"example.ComplexObject\">\n    <property name=\"adminEmails\">\n         <props>\n               <prop key=\"administrator\">administrator@example.org</prop>\n               <prop key=\"support\">support@example.org</prop>\n               <prop key=\"development\">development@example.org</prop>\n         </props>\n    </property>\n    <property name=\"someList\">\n         <list>\n               <value>a list element followed by a reference</value>\n               <ref bean=\"myDataSource\" />\n         </list>\n    </property>\n    <property name=\"someMap\">\n         <map>\n               <entry key=\"an entry\" value=\"just some string\"/>\n               <entry key=\"a ref\" value-ref=\"myDataSource\"/>\n         </map>\n    </property>\n    <property name=\"someSet\">\n         <set>\n               <value>just some string</value>\n               <ref bean=\"myDataSource\" />\n         </set>\n    </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Creating Request-Scoped Component using Kotlin Annotations\nDESCRIPTION: Kotlin implementation of a request-scoped component using the @RequestScope and @Component annotations. This creates a new instance of the component for each HTTP request.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_99\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequestScope\n@Component\nclass LoginAction {\n      // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Traditional XML and p-namespace Bean Definitions\nDESCRIPTION: Compares the traditional XML bean definition approach with the p-namespace shortcut. The example shows both methods of defining beans with the same properties, demonstrating how p-namespace can make configurations more concise.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_70\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:p=\"http://www.springframework.org/schema/p\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n           https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n\n      <bean name=\"classic\" class=\"com.example.ExampleBean\">\n           <property name=\"email\" value=\"someone@somewhere.com\"/>\n      </bean>\n\n\n      <bean name=\"p-namespace\" class=\"com.example.ExampleBean\"\n           p:email=\"someone@somewhere.com\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Constructor Arguments by Index Using c-namespace in Spring XML\nDESCRIPTION: XML configuration demonstrating c-namespace usage with index notation for constructor arguments. This is useful when constructor argument names are not available in bytecode.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_72\n\nLANGUAGE: XML\nCODE:\n```\n<!-- c-namespace index declaration -->\n<bean id=\"beanOne\" class=\"x.y.ThingOne\" c:_0-ref=\"beanTwo\" c:_1-ref=\"beanThree\"\n      c:_2=\"something@somewhere.com\"/>\n```\n\n----------------------------------------\n\nTITLE: Using GenericApplicationContext with XmlBeanDefinitionReader in Kotlin\nDESCRIPTION: Kotlin version of creating a GenericApplicationContext with XML bean definitions, demonstrating more concise syntax.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = GenericApplicationContext()\nXmlBeanDefinitionReader(context).loadBeanDefinitions(\"services.xml\", \"daos.xml\")\ncontext.refresh()\n```\n\n----------------------------------------\n\nTITLE: Simple Bean Initialization Implementation in Java\nDESCRIPTION: Shows a basic Java class with an initialization method that can be called by Spring container.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_117\n\nLANGUAGE: Java\nCODE:\n```\npublic class ExampleBean {\n    public void init() {\n        // do some initialization work\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Bean Initialization Method in XML Configuration\nDESCRIPTION: Demonstrates configuring a bean with an initialization method using XML configuration with init-method attribute.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_116\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleInitBean\" class=\"examples.ExampleBean\" init-method=\"init\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy-Initialized Beans in Spring XML\nDESCRIPTION: Demonstrates how to mark a bean as lazy-initialized using the lazy-init attribute, which prevents the bean from being instantiated until it's first requested. Contrasts with the default eager initialization behavior.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_76\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"lazy\" class=\"com.something.ExpensiveToCreateBean\" lazy-init=\"true\"/>\n<bean name=\"not.lazy\" class=\"com.something.AnotherBean\"/>\n```\n\n----------------------------------------\n\nTITLE: Using c-namespace with Index Notation for Constructor Arguments\nDESCRIPTION: Demonstrates using the c-namespace with index notation for constructor arguments, which is useful when argument names are not available. Shows how to reference arguments by position using the '_N' prefix.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_73\n\nLANGUAGE: XML\nCODE:\n```\n<!-- c-namespace index declaration -->\n<bean id=\"beanOne\" class=\"x.y.ThingOne\" c:_0-ref=\"beanTwo\" c:_1-ref=\"beanThree\"\n      c:_2=\"something@somewhere.com\"/>\n```\n\n----------------------------------------\n\nTITLE: Updating Spring AI BOM Version in Maven POM\nDESCRIPTION: Updates the Spring AI BOM version to 1.0.0-M7 in a Maven pom.xml file. This snippet shows the XML element that needs to be modified.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-m7.txt#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<version>1.0.0-M7</version>\n```\n\n----------------------------------------\n\nTITLE: Using GenericApplicationContext with GroovyBeanDefinitionReader in Java\nDESCRIPTION: Example showing how to use GroovyBeanDefinitionReader with GenericApplicationContext to load bean definitions from Groovy files in Java.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nGenericApplicationContext context = new GenericApplicationContext();\nnew GroovyBeanDefinitionReader(context).loadBeanDefinitions(\"services.groovy\", \"daos.groovy\");\ncontext.refresh();\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Specific Module\nDESCRIPTION: Command to run integration tests for a specific module after a quick build and install. This example targets the spring-boot-testcontainers module.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw verify -Pintegration-tests -pl spring-ai-spring-boot-testcontainers\n```\n\n----------------------------------------\n\nTITLE: Method Replacer Implementation in Java\nDESCRIPTION: A Java class that implements the MethodReplacer interface to provide a replacement implementation for the computeValue method. This class will be used by Spring to override the original method implementation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_90\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * meant to be used to override the existing computeValue(String)\n * implementation in MyValueCalculator\n */\npublic class ReplacementComputeValue implements MethodReplacer {\n\n      public Object reimplement(Object o, Method m, Object[] args) throws Throwable {\n           // get the input value, work with it, and return a computed result\n           String input = (String) args[0];\n           ...\n           return ...;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RequestContextFilter in web.xml\nDESCRIPTION: XML configuration for setting up RequestContextFilter in a web application's web.xml file as an alternative to RequestContextListener.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_90\n\nLANGUAGE: xml\nCODE:\n```\n<web-app>\n    ...\n    <filter>\n         <filter-name>requestContextFilter</filter-name>\n         <filter-class>org.springframework.web.filter.RequestContextFilter</filter-class>\n    </filter>\n    <filter-mapping>\n         <filter-name>requestContextFilter</filter-name>\n         <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    ...\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Using Compound Property Names in Spring Bean XML Configuration\nDESCRIPTION: XML configuration demonstrating the use of compound (nested) property names when setting bean properties. This technique requires that all path components except the final property are not null.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_73\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"something\" class=\"things.ThingOne\">\n      <property name=\"fred.bob.sammy\" value=\"123\" />\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Updating Spring AI BOM Version in Gradle\nDESCRIPTION: Updates the Spring AI BOM version to 1.0.0-M7 in a Gradle build file. This snippet shows the implementation platform declaration that needs to be modified.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-m7.txt#2025-04-20_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation platform(\"org.springframework.ai:spring-ai-bom:1.0.0-M7\")\n```\n\n----------------------------------------\n\nTITLE: Using GenericApplicationContext with GroovyBeanDefinitionReader in Kotlin\nDESCRIPTION: Kotlin version of using GroovyBeanDefinitionReader with GenericApplicationContext to load bean definitions from Groovy files.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = GenericApplicationContext()\nGroovyBeanDefinitionReader(context).loadBeanDefinitions(\"services.groovy\", \"daos.groovy\")\ncontext.refresh()\n```\n\n----------------------------------------\n\nTITLE: Configuring Repositories in Gradle\nDESCRIPTION: Complete repository configuration for a Gradle project including Maven Central, Spring Milestone, Spring Snapshot, and Central Portal Snapshot repositories. This ensures access to all required dependencies for Spring AI.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-snapshot.txt#2025-04-20_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n    mavenCentral()\n    maven {\n        url = uri(\"https://repo.spring.io/milestone\")\n        mavenContent {\n            releasesOnly()\n        }\n    }\n    maven {\n        url = uri(\"https://repo.spring.io/snapshot\")\n        mavenContent {\n            snapshotsOnly()\n        }\n    }\n    maven {\n        url = uri(\"https://central.sonatype.com/repository/maven-snapshots/\")\n        mavenContent {\n            snapshotsOnly()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Application-Scoped Component using Kotlin Annotations\nDESCRIPTION: Kotlin implementation of an application-scoped component using the @ApplicationScope and @Component annotations. This creates a singleton instance per ServletContext available as a ServletContext attribute.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_105\n\nLANGUAGE: kotlin\nCODE:\n```\n@ApplicationScope\n@Component\nclass AppPreferences {\n      // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inner Beans in Spring XML Configuration\nDESCRIPTION: Example of defining an inner bean within a property element instead of referencing an external bean. Inner beans are only visible to the containing bean and cannot be referenced from elsewhere.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_58\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"outer\" class=\"...\">\n      <!-- instead of using a reference to a target bean, simply define the target bean inline -->\n      <property name=\"target\">\n           <bean class=\"com.example.Person\"> <!-- this is the inner bean -->\n                 <property name=\"name\" value=\"Fiona Apple\"/>\n                 <property name=\"age\" value=\"25\"/>\n```\n\n----------------------------------------\n\nTITLE: Strongly-typed Collections in Kotlin with Spring\nDESCRIPTION: Kotlin class example showing how to use strongly-typed collections with generics for dependency injection with Spring. Demonstrates a Map<String, Float> property.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_61\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass SomeClass {\n      lateinit var accounts: Map<String, Float>\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Spring AI Artifact ID in Maven POM\nDESCRIPTION: Updates the artifact ID for a Spring AI starter in a Maven pom.xml file. This example shows the change from the old OpenAI starter to the new model starter format.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-m7.txt#2025-04-20_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- BEFORE -->\n<dependency>\n    <groupId>org.springframework.ai</groupId>\n    <artifactId>spring-ai-openai-spring-boot-starter</artifactId>\n</dependency>\n\n<!-- AFTER -->\n<dependency>\n    <groupId>org.springframework.ai</groupId>\n    <artifactId>spring-ai-starter-model-openai</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Class with Multiple Constructor Arguments in Java\nDESCRIPTION: A simple Java class (ThingOne) showing a constructor that takes multiple dependencies. This illustrates how Spring matches constructor arguments when there's no ambiguity in the argument types.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\npackage x.y;\n\npublic class ThingOne {\n\n      public ThingOne(ThingTwo thingTwo, ThingThree thingThree) {\n           // ...\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Spring AI JSoup Document Reader Module\nDESCRIPTION: This command builds the JSoup document reader module for Spring AI. It uses Maven wrapper to clean and install the module, focusing specifically on the jsoup-reader subdirectory within document-readers.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/document-readers/jsoup-reader/ README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./mvnw -pl document-readers/jsoup-reader clean install\n```\n\n----------------------------------------\n\nTITLE: Declaring Session-Scoped Bean in XML Configuration\nDESCRIPTION: XML configuration for defining a bean with session scope. This creates a new instance of the bean for the lifetime of a single HTTP Session and discards it when the session ends.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_100\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"userPreferences\" class=\"com.something.UserPreferences\" scope=\"session\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Compound Property Names in Spring XML\nDESCRIPTION: Shows how to use compound or nested property names in bean definitions. This technique allows setting deeply nested properties in a single property element, as long as all intermediate objects in the path exist.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_74\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"something\" class=\"things.ThingOne\">\n      <property name=\"fred.bob.sammy\" value=\"123\" />\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Kotlin Bean Class with Static Factory Method\nDESCRIPTION: Kotlin implementation of ExampleBean class using companion object for static factory method.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_49\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass ExampleBean private constructor() {\n    companion object {\n        @JvmStatic\n        fun createInstance(anotherBean: AnotherBean, yetAnotherBean: YetAnotherBean, i: Int): ExampleBean {\n            val eb = ExampleBean(...)\n            //some other operations...\n            return eb\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Milestone Repository in Maven\nDESCRIPTION: Repository configuration for accessing Spring Milestone releases in Maven projects. This repository is required for fetching Spring AI releases labeled as milestones.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-snapshot.txt#2025-04-20_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<repository>\n  <id>spring-milestones</id>\n  <name>Spring Milestones</name>\n  <url>https://repo.spring.io/milestone</url>\n  <snapshots>\n    <enabled>false</enabled>\n  </snapshots>\n</repository>\n```\n\n----------------------------------------\n\nTITLE: MyValueCalculator Implementation in Java\nDESCRIPTION: Example class showing a method that will be replaced using Spring's method replacement functionality.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_84\n\nLANGUAGE: java\nCODE:\n```\npublic class MyValueCalculator {\n\n    public String computeValue(String input) {\n        // some real code...\n    }\n\n    // some other methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Request-Scoped Bean in XML Configuration\nDESCRIPTION: XML configuration for defining a bean with request scope. This creates a new instance of the bean for each HTTP request and discards it when the request completes processing.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_97\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"loginAction\" class=\"com.something.LoginAction\" scope=\"request\"/>\n```\n\n----------------------------------------\n\nTITLE: Strongly-typed Collections in Java with Spring\nDESCRIPTION: Java class example demonstrating how to use strongly-typed collections with generics that can be dependency-injected by Spring. Shows a Map<String, Float> that will benefit from Spring's type conversion.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_60\n\nLANGUAGE: Java\nCODE:\n```\npublic class SomeClass {\n\n      private Map<String, Float> accounts;\n\n      public void setAccounts(Map<String, Float> accounts) {\n           this.accounts = accounts;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Spring Bean Configuration with Scoped Proxy\nDESCRIPTION: Demonstrates basic Spring XML configuration for creating a session-scoped bean with an AOP proxy and injecting it into a singleton-scoped service bean.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_97\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:aop=\"http://www.springframework.org/schema/aop\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n           https://www.springframework.org/schema/beans/spring-beans.xsd\n           http://www.springframework.org/schema/aop\n           https://www.springframework.org/schema/aop/spring-aop.xsd\">\n\n      <bean id=\"userPreferences\" class=\"com.something.UserPreferences\" scope=\"session\">\n           <aop:scoped-proxy/>\n      </bean>\n\n      <bean id=\"userService\" class=\"com.something.SimpleUserService\">\n           <property name=\"userPreferences\" ref=\"userPreferences\"/>\n      </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Using GenericApplicationContext with XmlBeanDefinitionReader in Java\nDESCRIPTION: Example of creating a flexible GenericApplicationContext with XML bean definitions in Java, demonstrating how to load bean definitions from XML files.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nGenericApplicationContext context = new GenericApplicationContext();\nnew XmlBeanDefinitionReader(context).loadBeanDefinitions(\"services.xml\", \"daos.xml\");\ncontext.refresh();\n```\n\n----------------------------------------\n\nTITLE: Defining Method Replacement in Spring XML Configuration\nDESCRIPTION: XML configuration for deploying a class with method override using Spring's <replaced-method> element. It demonstrates how to replace a method in a bean with an implementation from another bean.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_86\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"myValueCalculator\" class=\"x.y.z.MyValueCalculator\">\n    <!--   arbitrary    method    replacement      -->\n    <replaced-method name=\"computeValue\" replacer=\"replacementComputeValue\">\n         <arg-type>String</arg-type>\n    </replaced-method>\n</bean>\n\n<bean id=\"replacementComputeValue\" class=\"a.b.c.ReplacementComputeValue\"/>\n```\n\n----------------------------------------\n\nTITLE: Value Calculator Class for Method Replacement in Kotlin\nDESCRIPTION: A Kotlin class with a method that will be targeted for method replacement. The computeValue method will be replaced with a custom implementation at runtime.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_89\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyValueCalculator {\n\n      fun computeValue(input: String): String {\n           // some real code...\n      }\n\n      // some other methods...\n}\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Strongly-typed Collections\nDESCRIPTION: Bean definition that injects string values into a strongly-typed Map<String, Float>. Spring's type conversion converts the string values to Float types automatically during injection.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_62\n\nLANGUAGE: XML\nCODE:\n```\n<beans>\n      <bean id=\"something\" class=\"x.y.SomeClass\">\n           <property name=\"accounts\">\n                 <map>\n                      <entry key=\"one\" value=\"9.99\"/>\n                      <entry key=\"two\" value=\"2.75\"/>\n                      <entry key=\"six\" value=\"3.99\"/>\n                 </map>\n           </property>\n      </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Defining Request-Scoped Bean in XML\nDESCRIPTION: XML configuration for defining a request-scoped bean that creates a new instance for each HTTP request.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_91\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"loginAction\" class=\"com.something.LoginAction\" scope=\"request\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating ApplicationContext with Groovy Configuration in Java\nDESCRIPTION: Example showing how to create an ApplicationContext with Groovy configuration files in Java, using the GenericGroovyApplicationContext.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nApplicationContext context = new GenericGroovyApplicationContext(\"services.groovy\", \"daos.groovy\");\n```\n\n----------------------------------------\n\nTITLE: Custom Destruction Method Implementation\nDESCRIPTION: Demonstrates a Java class with a custom cleanup method for bean destruction.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_120\n\nLANGUAGE: Java\nCODE:\n```\npublic class ExampleBean {\n    public void cleanup() {\n        // do some destruction work (like releasing pooled connections)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Value Calculator Class for Method Replacement in Java\nDESCRIPTION: A Java class with a method that will be targeted for method replacement. The computeValue method will be replaced with a custom implementation at runtime.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_88\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyValueCalculator {\n\n      public String computeValue(String input) {\n           // some real code...\n      }\n\n      // some other methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Null Values in Spring Bean XML Configuration\nDESCRIPTION: XML configuration for setting a null value to a bean property using the <null/> element. This demonstrates handling null values in Spring bean configurations.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_66\n\nLANGUAGE: XML\nCODE:\n```\n<bean class=\"ExampleBean\">\n      <property name=\"email\">\n           <null/>\n      </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Application-Scoped Component in Java and Kotlin\nDESCRIPTION: Annotation-based configuration for application-scoped components in Java and Kotlin.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_96\n\nLANGUAGE: java\nCODE:\n```\n@ApplicationScope\n@Component\npublic class AppPreferences {\n    // ...\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@ApplicationScope\n@Component\nclass AppPreferences {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Application Context with Groovy Reader\nDESCRIPTION: Shows how to use GenericApplicationContext with GroovyBeanDefinitionReader for Groovy-based configuration in both Java and Kotlin.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nGenericApplicationContext context = new GenericApplicationContext();\nnew GroovyBeanDefinitionReader(context).loadBeanDefinitions(\"services.groovy\", \"daos.groovy\");\ncontext.refresh();\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = GenericApplicationContext()\nGroovyBeanDefinitionReader(context).loadBeanDefinitions(\"services.groovy\", \"daos.groovy\")\ncontext.refresh()\n```\n\n----------------------------------------\n\nTITLE: Bean Destruction Method Configuration\nDESCRIPTION: XML configuration for bean destruction method using destroy-method attribute.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_108\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleInitBean\" class=\"examples.ExampleBean\" destroy-method=\"cleanup\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Singleton Bean in Spring XML Configuration\nDESCRIPTION: XML configuration for defining a bean with singleton scope in Spring. Singleton is the default scope, so the scope attribute is optional.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_87\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"accountService\" class=\"com.something.DefaultAccountService\"/>\n\n<!--   the   following    is   equivalent,     though    redundant    (singleton      scope   is  the  default) -->\n<bean id=\"accountService\" class=\"com.something.DefaultAccountService\" scope=\"singleton\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Null Values in Kotlin\nDESCRIPTION: Kotlin equivalent code for setting a null value to a bean property. This corresponds to the XML configuration using the <null/> element.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_68\n\nLANGUAGE: Kotlin\nCODE:\n```\nexampleBean.email = null\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Initialization of Beans in Spring XML\nDESCRIPTION: Demonstrates how to set a bean to be lazy-initialized using the lazy-init attribute. The 'lazy' bean will only be instantiated when first requested, while the 'not.lazy' bean is created at startup.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_77\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"lazy\" class=\"com.something.ExpensiveToCreateBean\" lazy-init=\"true\"/>\n<bean name=\"not.lazy\" class=\"com.something.AnotherBean\"/>\n```\n\n----------------------------------------\n\nTITLE: Java Bean with Simple Type Constructor Arguments\nDESCRIPTION: Example Java class with primitive and String constructor arguments to demonstrate how Spring handles simple type constructor arguments that require disambiguation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_32\n\nLANGUAGE: java\nCODE:\n```\npackage examples;\n\npublic class ExampleBean {\n\n      // Number of years to calculate the Ultimate Answer\n      private final int years;\n\n      // The Answer to Life, the Universe, and Everything\n      private final String ultimateAnswer;\n\n      public ExampleBean(int years, String ultimateAnswer) {\n           this.years = years;\n           this.ultimateAnswer = ultimateAnswer;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Blog Service Implementation with Initialization\nDESCRIPTION: Shows a complete example of a service class with initialization validation logic.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_123\n\nLANGUAGE: Java\nCODE:\n```\npublic class DefaultBlogService implements BlogService {\n    private BlogDao blogDao;\n\n    public void setBlogDao(BlogDao blogDao) {\n        this.blogDao = blogDao;\n    }\n\n    // this is (unsurprisingly) the initialization callback method\n    public void init() {\n        if (this.blogDao == null) {\n            throw new IllegalStateException(\"The [blogDao] property must be set.\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Bean Class with Property Injection\nDESCRIPTION: Kotlin implementation of ExampleBean class using lateinit properties.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_43\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass ExampleBean {\n    lateinit var beanOne: AnotherBean\n    lateinit var beanTwo: YetAnotherBean\n    var i: Int = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Bean with Primitive and String Constructor Arguments\nDESCRIPTION: Example Kotlin class with a constructor that takes an integer and a string parameter. This illustrates Kotlin's concise property definition in the primary constructor.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_32\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage examples\n\nclass ExampleBean(\n      private val years: Int,   // Number of years to calculate the Ultimate Answer\n      private val ultimateAnswer: String    // The Answer to Life, the Universe, and Everything\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Lazy Initialization at Container Level in Spring XML\nDESCRIPTION: Shows how to configure default lazy initialization for all beans in a Spring container using the default-lazy-init attribute on the beans element. This prevents pre-instantiation of all beans unless overridden.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_77\n\nLANGUAGE: xml\nCODE:\n```\n<beans default-lazy-init=\"true\">\n      <!--   no  beans   will   be  pre-instantiated...         -->\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Java Bean Class with Static Factory Method\nDESCRIPTION: Java implementation of ExampleBean class using static factory method pattern.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_48\n\nLANGUAGE: Java\nCODE:\n```\npublic class ExampleBean {\n    private ExampleBean(...) {\n         ...\n    }\n\n    public static ExampleBean createInstance(\n         AnotherBean anotherBean, YetAnotherBean yetAnotherBean, int i) {\n         ExampleBean eb = new ExampleBean(...);\n         //some other operations...\n         return eb;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Application-Scoped Bean Definition in XML\nDESCRIPTION: XML configuration for defining an application-scoped bean that persists for the entire web application lifecycle.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_95\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"appPreferences\" class=\"com.something.AppPreferences\" scope=\"application\"/>\n```\n\n----------------------------------------\n\nTITLE: Default Initialization Method Configuration\nDESCRIPTION: Demonstrates configuring default initialization methods for multiple beans using XML configuration.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_122\n\nLANGUAGE: XML\nCODE:\n```\n<beans default-init-method=\"init\">\n    <bean id=\"blogService\" class=\"com.something.DefaultBlogService\">\n        <property name=\"blogDao\" ref=\"blogDao\" />\n    </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract CommandManager in Java\nDESCRIPTION: Abstract CommandManager class that demonstrates method injection pattern with a createCommand() method to be implemented by Spring container.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_80\n\nLANGUAGE: java\nCODE:\n```\npackage fiona.apple;\n\n// no more Spring imports!\n\npublic abstract class CommandManager {\n\n    public Object process(Object commandState) {\n        // grab a new instance of the appropriate Command interface\n        Command command = createCommand();\n        // set the state on the (hopefully brand new) Command instance\n        command.setState(commandState);\n        return command.execute();\n    }\n\n    // okay... but where is the implementation of this method?\n    protected abstract Command createCommand();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Lazy Initialization at Container Level in Spring XML\nDESCRIPTION: Shows how to set lazy initialization as the default behavior for all beans in a container using the default-lazy-init attribute on the beans element. This prevents all beans from being pre-instantiated.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_78\n\nLANGUAGE: XML\nCODE:\n```\n<beans default-lazy-init=\"true\">\n      <!-- no beans will be pre-instantiated... -->\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scope Interface Methods in Java\nDESCRIPTION: Core methods required for implementing a custom scope interface in Java, including get and remove operations.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_101\n\nLANGUAGE: java\nCODE:\n```\nObject get(String name, ObjectFactory<?> objectFactory)\n```\n\nLANGUAGE: java\nCODE:\n```\nObject remove(String name)\n```\n\n----------------------------------------\n\nTITLE: Comprehensive MCP Server Configuration Example in YAML\nDESCRIPTION: A complete YAML configuration example for the MCP server with WebMvc transport and custom settings for name, version, notification options, and endpoint path.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-docs/src/main/asciidoc/mcp.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  ai:\n    mcp:\n      server:\n        enabled: true\n        name: \"My AI Tools Server\"\n        version: \"1.0.0\"\n        type: SYNC\n        transport: WEBMVC\n        sse-message-endpoint: /ai/mcp/events\n        resource-change-notification: true\n        tool-change-notification: true\n        prompt-change-notification: false\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Lifecycle Methods for Individual Beans\nDESCRIPTION: Using init-method and destroy-method attributes on individual <bean> elements to override the default lifecycle method names for specific beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_126\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"exampleBean\" class=\"example.ExampleBean\" init-method=\"customInit\" destroy-method=\"customDestroy\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract CommandManager in Kotlin\nDESCRIPTION: Kotlin version of the CommandManager class showing the same method injection pattern as the Java implementation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_81\n\nLANGUAGE: kotlin\nCODE:\n```\npackage fiona.apple\n\n// no more Spring imports!\n\nabstract class CommandManager {\n\n    fun process(commandState: Any): Any {\n        // grab a new instance of the appropriate Command interface\n        val command = createCommand()\n        // set the state on the (hopefully brand new) Command instance\n        command.state = commandState\n        return command.execute()\n    }\n\n    // okay... but where is the implementation of this method?\n    protected abstract fun createCommand(): Command\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Scope XML Configuration\nDESCRIPTION: XML configuration example for declaring custom scopes and scoped beans using CustomScopeConfigurer.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_104\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n         https://www.springframework.org/schema/beans/spring-beans.xsd\n         http://www.springframework.org/schema/aop\n         https://www.springframework.org/schema/aop/spring-aop.xsd\">\n\n    <bean class=\"org.springframework.beans.factory.config.CustomScopeConfigurer\">\n         <property name=\"scopes\">\n               <map>\n                    <entry key=\"thread\">\n                          <bean class=\"org.springframework.context.support.SimpleThreadScope\"/>\n                    </entry>\n               </map>\n         </property>\n    </bean>\n\n    <bean id=\"thing2\" class=\"x.y.Thing2\" scope=\"thread\">\n         <property name=\"name\" value=\"Rick\"/>\n         <aop:scoped-proxy/>\n    </bean>\n\n    <bean id=\"thing1\" class=\"x.y.Thing1\">\n         <property name=\"thing2\" ref=\"thing2\"/>\n    </bean>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scope Get Method - Java & Kotlin\nDESCRIPTION: Method signature for retrieving objects from a custom scope implementation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_110\n\nLANGUAGE: java\nCODE:\n```\nObject get(String name, ObjectFactory<?> objectFactory)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun get(name: String, objectFactory: ObjectFactory<*>): Any\n```\n\n----------------------------------------\n\nTITLE: Configuring STDIO Transport in YAML\nDESCRIPTION: YAML configuration for using Standard Input/Output transport, which is the default option suitable for command-line tools and local development.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-docs/src/main/asciidoc/mcp.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  ai:\n    mcp:\n      server:\n        transport: STDIO\n```\n\n----------------------------------------\n\nTITLE: Registering Destruction Callback - Java & Kotlin\nDESCRIPTION: Method signature for registering destruction callbacks in custom scope implementation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_112\n\nLANGUAGE: java\nCODE:\n```\nvoid registerDestructionCallback(String name, Runnable destructionCallback)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun registerDestructionCallback(name: String, destructionCallback: Runnable)\n```\n\n----------------------------------------\n\nTITLE: Method Replacer Implementation in Kotlin\nDESCRIPTION: A Kotlin class that implements the MethodReplacer interface to provide a replacement implementation for the computeValue method. This class will be used by Spring to override the original method implementation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_91\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * meant to be used to override the existing computeValue(String)\n * implementation in MyValueCalculator\n */\nclass ReplacementComputeValue : MethodReplacer {\n\n      override fun reimplement(obj: Any, method: Method, args: Array<out Any>): Any {\n           // get the input value, work with it, and return a computed result\n           val input = args[0] as String;\n\n```\n\n----------------------------------------\n\nTITLE: Using Parent Attribute for Bean References Across Context Hierarchies\nDESCRIPTION: Example showing how to reference beans across Spring context hierarchies using the parent attribute in the ref element. This is particularly useful for creating proxies with the same name as parent beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_57\n\nLANGUAGE: XML\nCODE:\n```\n<!-- in the parent context -->\n<bean id=\"accountService\" class=\"com.something.SimpleAccountService\">\n      <!-- insert dependencies as required here -->\n</bean>\n\n<!-- in the child (descendant) context -->\n<bean id=\"accountService\" <!-- bean name is the same as the parent bean -->\n      class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n      <property name=\"target\">\n           <ref parent=\"accountService\"/> <!-- notice how we refer to the parent bean -->\n      </property>\n      <!-- insert other configuration and dependencies as required here -->\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scope Remove Method - Java & Kotlin\nDESCRIPTION: Method signature for removing objects from a custom scope implementation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_111\n\nLANGUAGE: java\nCODE:\n```\nObject remove(String name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun remove(name: String): Any\n```\n\n----------------------------------------\n\nTITLE: Configuring WebMvc Transport in YAML\nDESCRIPTION: YAML configuration for using WebMvc transport with Spring MVC's Server-Sent Events (SSE) for communication, including the optional endpoint setting.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-docs/src/main/asciidoc/mcp.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  ai:\n    mcp:\n      server:\n        transport: WEBMVC\n        sse-message-endpoint: /mcp/message  # Optional, defaults to /mcp/message\n```\n\n----------------------------------------\n\nTITLE: Implementing Scope Interface Methods in Kotlin\nDESCRIPTION: Core methods required for implementing a custom scope interface in Kotlin, including get and remove operations.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_102\n\nLANGUAGE: kotlin\nCODE:\n```\nfun get(name: String, objectFactory: ObjectFactory<*>): Any\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun remove(name: String): Any\n```\n\n----------------------------------------\n\nTITLE: Custom Scope XML Configuration\nDESCRIPTION: XML configuration example for registering and using custom scopes with Spring beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_115\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop\n        https://www.springframework.org/schema/aop/spring-aop.xsd\">\n\n    <bean class=\"org.springframework.beans.factory.config.CustomScopeConfigurer\">\n        <property name=\"scopes\">\n            <map>\n                <entry key=\"thread\">\n                    <bean class=\"org.springframework.context.support.SimpleThreadScope\"/>\n                </entry>\n            </map>\n        </property>\n    </bean>\n\n    <bean id=\"thing2\" class=\"x.y.Thing2\" scope=\"thread\">\n        <property name=\"name\" value=\"Rick\"/>\n        <aop:scoped-proxy/>\n    </bean>\n\n    <bean id=\"thing1\" class=\"x.y.Thing1\">\n        <property name=\"thing2\" ref=\"thing2\"/>\n    </bean>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Alternative to idref Using Direct String Value\nDESCRIPTION: Example showing the equivalent configuration to idref but using a direct string value. This approach is less preferable as it doesn't allow for container validation of the referenced bean's existence.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_55\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"theTargetBean\" class=\"...\" />\n\n<bean id=\"client\" class=\"...\">\n      <property name=\"targetName\" value=\"theTargetBean\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scope - Java & Kotlin\nDESCRIPTION: Example of registering a custom scope implementation with Spring container.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_114\n\nLANGUAGE: java\nCODE:\n```\nScope threadScope = new SimpleThreadScope();\nbeanFactory.registerScope(\"thread\", threadScope);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval threadScope = SimpleThreadScope()\nbeanFactory.registerScope(\"thread\", threadScope)\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Milestones Repository to Maven POM\nDESCRIPTION: Adds the Spring Milestones repository to a Maven pom.xml file. This repository is required for accessing milestone releases of Spring AI.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-m7.txt#2025-04-20_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<repository>\n  <id>spring-milestones</id>\n  <name>Spring Milestones</name>\n  <url>https://repo.spring.io/milestone</url>\n  <snapshots>\n    <enabled>false</enabled>\n  </snapshots>\n</repository>\n```\n\n----------------------------------------\n\nTITLE: Java Bean Initialization Implementation\nDESCRIPTION: Simple Java class implementing custom initialization method without Spring coupling.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_106\n\nLANGUAGE: Java\nCODE:\n```\npublic class ExampleBean {\n    public void init() {\n         // do some initialization work\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scope in Java and Kotlin\nDESCRIPTION: Examples of registering a custom thread scope implementation in both Java and Kotlin.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_103\n\nLANGUAGE: java\nCODE:\n```\nScope threadScope = new SimpleThreadScope();\nbeanFactory.registerScope(\"thread\", threadScope);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval threadScope = SimpleThreadScope()\nbeanFactory.registerScope(\"thread\", threadScope)\n```\n\n----------------------------------------\n\nTITLE: InitializingBean Interface Implementation\nDESCRIPTION: Example of implementing Spring's InitializingBean interface for initialization callbacks.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_107\n\nLANGUAGE: Java\nCODE:\n```\npublic class AnotherExampleBean implements InitializingBean {\n    @Override\n    public void afterPropertiesSet() {\n         // do some initialization work\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Bean Initialization Method in XML\nDESCRIPTION: Example of configuring a bean initialization method using XML configuration with init-method attribute.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_105\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleInitBean\" class=\"examples.ExampleBean\" init-method=\"init\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Repositories to Gradle Build\nDESCRIPTION: Adds the required repositories, including Spring Milestones, to a Gradle build file. This configuration is necessary for accessing Spring AI dependencies.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-m7.txt#2025-04-20_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n    mavenCentral()\n    maven {\n        url = uri(\"https://repo.spring.io/milestone\")\n        mavenContent {\n            releasesOnly()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Bean Cleanup Implementation\nDESCRIPTION: Implementation of cleanup method for bean destruction.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_109\n\nLANGUAGE: Java\nCODE:\n```\npublic class ExampleBean {\n    public void cleanup() {\n         // do some destruction work (like releasing pooled connections)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JDK Interface-Based Proxy Configuration\nDESCRIPTION: Shows how to configure Spring to use JDK interface-based proxies instead of CGLIB proxies for scoped beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_100\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"userPreferences\" class=\"com.stuff.DefaultUserPreferences\" scope=\"session\">\n      <aop:scoped-proxy proxy-target-class=\"false\"/>\n</bean>\n\n<bean id=\"userManager\" class=\"com.stuff.UserManager\">\n```\n\n----------------------------------------\n\nTITLE: Setting Empty String Value in Java\nDESCRIPTION: Shows the Java code equivalent to setting an empty string value on a bean property. This corresponds to the XML configuration that sets a property to an empty string.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_65\n\nLANGUAGE: Java\nCODE:\n```\nexampleBean.setEmail(\"\");\n```\n\n----------------------------------------\n\nTITLE: Default Init Method XML Configuration\nDESCRIPTION: XML configuration showing default initialization method configuration for multiple beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_112\n\nLANGUAGE: XML\nCODE:\n```\n<beans default-init-method=\"init\">\n    <bean id=\"blogService\" class=\"com.something.DefaultBlogService\">\n         <property name=\"blogDao\" ref=\"blogDao\" />\n    </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Updating Spring AI Artifact IDs in Gradle\nDESCRIPTION: Updates the artifact IDs for Spring AI starters in a Gradle build file. This example shows the changes for both a model starter and a vector store starter.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-m7.txt#2025-04-20_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\n// BEFORE\nimplementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'\nimplementation 'org.springframework.ai:spring-ai-redis-store-spring-boot-starter'\n\n// AFTER\nimplementation 'org.springframework.ai:spring-ai-starter-model-openai'\nimplementation 'org.springframework.ai:spring-ai-starter-vector-store-redis'\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicDataSource Bean in Spring XML\nDESCRIPTION: This snippet shows how to configure a BasicDataSource bean with properties for database connection. It demonstrates setting string values for driver class, URL, username, and password.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_50\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"myDataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n    <!-- results in a setDriverClassName(String) call -->\n    <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n    <property name=\"url\" value=\"jdbc:mysql://localhost:3306/mydb\"/>\n    <property name=\"username\" value=\"root\"/>\n    <property name=\"password\" value=\"misterkaoli\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: ApplicationContext Usage in Java\nDESCRIPTION: Demonstrates how to create and use ApplicationContext in Java to configure beans and retrieve instances.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// create and configure beans\nApplicationContext context = new ClassPathXmlApplicationContext(\"services.xml\", \"daos.xml\");\n\n// retrieve configured instance\nPetStoreService service = context.getBean(\"petStore\", PetStoreService.class);\n\n// use configured instance\nList<String> userList = service.getUsernameList();\n```\n\n----------------------------------------\n\nTITLE: Setting Null Value in Kotlin\nDESCRIPTION: Shows the Kotlin code equivalent to setting a null value on a bean property. This corresponds to the XML configuration that uses the <null/> element.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_69\n\nLANGUAGE: Kotlin\nCODE:\n```\nexampleBean.email = null\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Initialization Methods in Spring XML\nDESCRIPTION: Setting the default-init-method attribute on the top-level <beans> element causes Spring to automatically call methods named 'init' on bean classes for initialization.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_124\n\nLANGUAGE: xml\nCODE:\n```\n<beans default-init-method=\"init\">\n    <!-- bean definitions -->\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Updating Model Starter Artifact ID in Maven\nDESCRIPTION: Example of updating the OpenAI Spring Boot starter artifact ID in Maven to follow the new naming convention. The pattern changes from spring-ai-{model}-spring-boot-starter to spring-ai-starter-model-{model}.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-snapshot.txt#2025-04-20_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- BEFORE -->\n<dependency>\n    <groupId>org.springframework.ai</groupId>\n    <artifactId>spring-ai-openai-spring-boot-starter</artifactId>\n</dependency>\n\n<!-- AFTER -->\n<dependency>\n    <groupId>org.springframework.ai</groupId>\n    <artifactId>spring-ai-starter-model-openai</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Properties Instance in Spring XML\nDESCRIPTION: This snippet shows how to configure a java.util.Properties instance within a Spring bean definition. It demonstrates setting key-value pairs for JDBC properties using the <value> element.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_52\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"mappings\"\n    class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n\n    <!-- typed as a java.util.Properties -->\n    <property name=\"properties\">\n         <value>\n               jdbc.driver.className=com.mysql.jdbc.Driver\n               jdbc.url=jdbc:mysql://localhost:3306/mydb\n         </value>\n    </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Creating ApplicationContext with Groovy Configuration in Kotlin\nDESCRIPTION: Kotlin version of creating an ApplicationContext with Groovy configuration files, using the GenericGroovyApplicationContext.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = GenericGroovyApplicationContext(\"services.groovy\", \"daos.groovy\")\n```\n\n----------------------------------------\n\nTITLE: Running Spring Java Format Maven Command\nDESCRIPTION: Maven wrapper command to apply Spring Java code formatting rules to the project.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/document-readers/markdown-reader/src/test/resources/code.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./mvnw spring-javaformat:apply\n```\n\n----------------------------------------\n\nTITLE: Setting Empty String Values in Java\nDESCRIPTION: Java equivalent code for setting an empty string value to a bean property. This corresponds to the XML configuration using an empty value attribute.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_64\n\nLANGUAGE: Java\nCODE:\n```\nexampleBean.setEmail(\"\");\n```\n\n----------------------------------------\n\nTITLE: Building Spring AI Project with Unit Tests\nDESCRIPTION: Command to build the Spring AI project including unit tests but without integration tests.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw clean package\n```\n\n----------------------------------------\n\nTITLE: Multiple Factory Methods Configuration\nDESCRIPTION: XML configuration demonstrating multiple factory methods in a single factory bean\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_24\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"serviceLocator\" class=\"examples.DefaultServiceLocator\">\n      <!-- inject any dependencies required by this locator bean -->\n</bean>\n\n<bean id=\"clientService\"\n      factory-bean=\"serviceLocator\"\n      factory-method=\"createClientServiceInstance\"/>\n\n<bean id=\"accountService\"\n      factory-bean=\"serviceLocator\"\n      factory-method=\"createAccountServiceInstance\"/>\n```\n\n----------------------------------------\n\nTITLE: Groovy Configuration Bootstrap in Java and Kotlin\nDESCRIPTION: Examples of bootstrapping Spring configuration using Groovy configuration files in both Java and Kotlin.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nApplicationContext context = new GenericGroovyApplicationContext(\"services.groovy\", \"daos.groovy\");\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = GenericGroovyApplicationContext(\"services.groovy\", \"daos.groovy\")\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Antora\nDESCRIPTION: Command to build the Spring AI project documentation using Antora. The generated documentation will be available in the spring-ai-docs/target/antora/site directory.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -pl spring-ai-docs antora\n```\n\n----------------------------------------\n\nTITLE: Applying Spring Java Format\nDESCRIPTION: Command to reformat code according to Spring Java Format guidelines using the spring-javaformat plugin.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw spring-javaformat:apply\n```\n\n----------------------------------------\n\nTITLE: Updating License Headers\nDESCRIPTION: Command to update the year on license headers in source files using the license-maven-plugin.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/README.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw license:update-file-header -Plicense\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Access Objects in Spring XML\nDESCRIPTION: Example of configuring data access objects (DAOs) in a Spring XML configuration file. Shows bean definitions for JPA-based DAOs.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"accountDao\" class=\"org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao\">\n        <!-- additional collaborators and configuration for this bean go here -->\n    </bean>\n\n    <bean id=\"itemDao\" class=\"org.springframework.samples.jpetstore.dao.jpa.JpaItemDao\">\n        <!-- additional collaborators and configuration for this bean go here -->\n    </bean>\n\n    <!-- more bean definitions for data access objects go here -->\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Incomplete Bean Configuration Example\nDESCRIPTION: Shows an incomplete bean configuration that demonstrates why scoped proxy is needed for session-scoped beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_98\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"userPreferences\" class=\"com.something.UserPreferences\" scope=\"session\"/>\n\n<bean id=\"userManager\" class=\"com.something.UserManager\">\n      <property name=\"userPreferences\" ref=\"userPreferences\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Building with Checkstyles Enabled\nDESCRIPTION: Command to build the Spring AI project with checkstyles enabled. By default, checkstyles are disabled in the project.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/README.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw clean package -DskipTests -Ddisable.checks=false\n```\n\n----------------------------------------\n\nTITLE: Defining Bean Alias in Spring XML Configuration\nDESCRIPTION: Shows how to create an alias for an existing bean using XML configuration. This allows referencing the same bean with different names.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_14\n\nLANGUAGE: XML\nCODE:\n```\n<alias name=\"fromName\" alias=\"toName\"/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Bean Configuration Without Scoped Proxy in Spring XML\nDESCRIPTION: This XML snippet shows an incomplete configuration where a session-scoped bean is directly injected into a singleton bean without using a proxy. This setup would not work correctly for scoped beans.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_107\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"userPreferences\" class=\"com.something.UserPreferences\" scope=\"session\"/>\n\n<bean id=\"userManager\" class=\"com.something.UserManager\">\n    <property name=\"userPreferences\" ref=\"userPreferences\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Spring AI Chat Memory Docs\nDESCRIPTION: Markdown formatted link pointing to the chat memory section of Spring AI's official documentation\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/memory/spring-ai-model-chat-memory-jdbc/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Chat Memory Documentation](https://docs.spring.io/spring-ai/reference/api/chatclient.html#_chat_memory)\n```\n\n----------------------------------------\n\nTITLE: Setting Empty String Values in Kotlin\nDESCRIPTION: Kotlin equivalent code for setting an empty string value to a bean property. This corresponds to the XML configuration using an empty value attribute.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_65\n\nLANGUAGE: Kotlin\nCODE:\n```\nexampleBean.email = \"\"\n```\n\n----------------------------------------\n\nTITLE: DisposableBean Interface Implementation\nDESCRIPTION: Example of implementing Spring's DisposableBean interface for destruction callbacks.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_110\n\nLANGUAGE: Java\nCODE:\n```\npublic class AnotherExampleBean implements DisposableBean {\n    @Override\n    public void destroy() {\n         // do some destruction work (like releasing pooled connections)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Empty String Value in Kotlin\nDESCRIPTION: Shows the Kotlin code equivalent to setting an empty string value on a bean property. This corresponds to the XML configuration that sets a property to an empty string.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_66\n\nLANGUAGE: Kotlin\nCODE:\n```\nexampleBean.email = \"\"\n```\n\n----------------------------------------\n\nTITLE: Default Blog Service Implementation\nDESCRIPTION: Example of a service class with initialization method and property validation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_111\n\nLANGUAGE: Java\nCODE:\n```\npublic class DefaultBlogService implements BlogService {\n    private BlogDao blogDao;\n\n    public void setBlogDao(BlogDao blogDao) {\n         this.blogDao = blogDao;\n    }\n\n    // this is (unsurprisingly) the initialization callback method\n    public void init() {\n         if (this.blogDao == null) {\n               throw new IllegalStateException(\"The [blogDao] property must be set.\");\n         }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Spring AI Artifact IDs in Gradle\nDESCRIPTION: Examples of updating Spring AI artifact IDs in Gradle to follow the new naming convention for model and vector store starters. This ensures compatibility with the latest Spring AI release.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/src/prompts/update-to-snapshot.txt#2025-04-20_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\n// BEFORE\nimplementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'\nimplementation 'org.springframework.ai:spring-ai-redis-store-spring-boot-starter'\n\n// AFTER\nimplementation 'org.springframework.ai:spring-ai-starter-model-openai'\nimplementation 'org.springframework.ai:spring-ai-starter-vector-store-redis'\n```\n\n----------------------------------------\n\nTITLE: Bean Destruction Method Configuration\nDESCRIPTION: Shows XML configuration for a bean with a custom destruction method.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_119\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleInitBean\" class=\"examples.ExampleBean\" destroy-method=\"cleanup\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating Javadoc Documentation\nDESCRIPTION: Command to generate Javadoc documentation for the Spring AI project using the maven-javadoc-plugin.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/README.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw javadoc:javadoc -Pjavadoc\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Destruction Methods in Spring XML\nDESCRIPTION: Setting the default-destroy-method attribute on the top-level <beans> element configures Spring to call methods with the specified name for bean cleanup.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/spring-ai-commons/src/test/resources/text_source.txt#2025-04-20_snippet_125\n\nLANGUAGE: xml\nCODE:\n```\n<beans default-destroy-method=\"destroy\">\n    <!-- bean definitions -->\n</beans>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration with Constructor Argument Names\nDESCRIPTION: XML configuration showing how to use parameter names for constructor arguments. This approach requires the code to be compiled with debug information or to use the @ConstructorProperties annotation.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_35\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n      <constructor-arg name=\"years\" value=\"7500000\"/>\n      <constructor-arg name=\"ultimateAnswer\" value=\"42\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Copyright Notice Template\nDESCRIPTION: Standard boilerplate notice template for applying Apache License 2.0 to software projects. Includes placeholder fields for copyright year and owner name.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/LICENSE.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Destruction Methods in Spring XML\nDESCRIPTION: Shows how to use the default-destroy-method attribute on the top-level <beans/> element to configure a default destruction callback method for all beans in the container.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_114\n\nLANGUAGE: xml\nCODE:\n```\n<beans default-destroy-method=\"destroy\">\n    <!-- bean definitions here -->\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Kotlin Bean Class with Constructor Injection\nDESCRIPTION: Kotlin implementation of ExampleBean class using primary constructor injection.\nSOURCE: https://github.com/spring-projects/spring-ai/blob/main/models/spring-ai-openai/src/test/resources/text_source.txt#2025-04-20_snippet_46\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass ExampleBean(\n    private val beanOne: AnotherBean,\n    private val beanTwo: YetAnotherBean,\n    private val i: Int)\n```"
  }
]