[
  {
    "owner": "tokio-rs",
    "repo": "console",
    "content": "TITLE: Initializing Console Subscriber in Rust Applications\nDESCRIPTION: The simplest way to instrument a Tokio application for use with tokio-console. This one-liner initializes the console-subscriber at the start of your main function to collect and expose diagnostic data.\nSOURCE: https://github.com/tokio-rs/console/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nconsole_subscriber::init();\n```\n\n----------------------------------------\n\nTITLE: Basic Console Subscriber Initialization\nDESCRIPTION: This simple example shows how to initialize the console subscriber with default settings, which sets up the tracing subscriber and starts the telemetry server.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/README.md#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nconsole_subscriber::init();\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Subscriber with Builder Pattern\nDESCRIPTION: This example demonstrates how to use the builder interface to configure the console subscriber programmatically, including setting data retention period and server address.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/README.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse std::time::Duration;\n\nconsole_subscriber::ConsoleLayer::builder()\n    // set how long the console will retain data from completed tasks\n    .retention(Duration::from_secs(60))\n    // set the address the server is bound to\n    .server_addr(([127, 0, 0, 1], 5555))\n    // ... other configurations ...\n    .init();\n```\n\n----------------------------------------\n\nTITLE: Integrating Console Subscriber with Other Tracing Layers\nDESCRIPTION: This example shows how to combine the console subscriber layer with other tracing layers, such as the formatting layer, using the tracing_subscriber::registry.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/README.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse tracing_subscriber::prelude::*;\n\n// spawn the console server in the background,\n// returning a `Layer`:\nlet console_layer = console_subscriber::spawn();\n\n// build a `Subscriber` by combining layers with a\n// `tracing_subscriber::Registry`:\ntracing_subscriber::registry()\n    // add the console layer to the subscriber\n    .with(console_layer)\n    // add other layers...\n    .with(tracing_subscriber::fmt::layer())\n // .with(...)\n    .init();\n```\n\n----------------------------------------\n\nTITLE: Configuring Tokio Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to enable Tokio's optional tracing dependency in your project's Cargo.toml file, which is required for the console subscriber to work.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/README.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n# ...\ntokio = { version = \"1.15\", features = [\"full\", \"tracing\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing Tokio Console CLI\nDESCRIPTION: Command to install the Tokio Console CLI tool using cargo with locked dependencies\nSOURCE: https://github.com/tokio-rs/console/blob/main/tokio-console/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --locked tokio-console\n```\n\n----------------------------------------\n\nTITLE: Installing Tokio Console from crates.io\nDESCRIPTION: Command to install the Tokio console tool from crates.io using Cargo package manager with the --locked flag to ensure dependency consistency.\nSOURCE: https://github.com/tokio-rs/console/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --locked tokio-console\n```\n\n----------------------------------------\n\nTITLE: Enabling Tokio Unstable Features via Command Line\nDESCRIPTION: This command demonstrates how to enable the tokio_unstable cfg flag via the RUSTFLAGS environment variable at build time, which is required for the experimental tracing APIs.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ RUSTFLAGS=\"--cfg tokio_unstable\" cargo build\n```\n\n----------------------------------------\n\nTITLE: Configuring Tokio Unstable Features via Cargo Config\nDESCRIPTION: This snippet shows how to enable the tokio_unstable cfg flag in the .cargo/config.toml file, which is an alternative to setting RUSTFLAGS on each build.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/README.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[build]\nrustflags = [\"--cfg\", \"tokio_unstable\"]\n```\n\n----------------------------------------\n\nTITLE: Running Tokio Console locally\nDESCRIPTION: Simple command to run the installed Tokio console tool which will connect to an instrumented application on the default address (localhost:6669).\nSOURCE: https://github.com/tokio-rs/console/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntokio-console\n```\n\n----------------------------------------\n\nTITLE: Connecting to Local Application\nDESCRIPTION: Command to connect Tokio Console to a locally running application on the default port 6669\nSOURCE: https://github.com/tokio-rs/console/blob/main/tokio-console/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntokio-console\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Application\nDESCRIPTION: Command to connect Tokio Console to a remote application using IP address and custom port\nSOURCE: https://github.com/tokio-rs/console/blob/main/tokio-console/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntokio-console http://192.168.0.42:9090\n```\n\n----------------------------------------\n\nTITLE: Connecting using DNS Name\nDESCRIPTION: Command to connect Tokio Console to an application using DNS hostname\nSOURCE: https://github.com/tokio-rs/console/blob/main/tokio-console/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntokio-console http://my.instrumented.application.local:6669\n```\n\n----------------------------------------\n\nTITLE: Running Tokio Console with a custom target address\nDESCRIPTION: Command to run Tokio console with a custom target address, specifying a different host and port for connecting to an instrumented application.\nSOURCE: https://github.com/tokio-rs/console/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -- http://my.great.console.app.local:5555\n```\n\n----------------------------------------\n\nTITLE: Running Tokio Console from a local repository checkout\nDESCRIPTION: Alternative method to run the Tokio console directly from a local repository checkout using cargo run.\nSOURCE: https://github.com/tokio-rs/console/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cargo run\n```\n\n----------------------------------------\n\nTITLE: Running the Tokio Console Example Application\nDESCRIPTION: Commands for testing UI changes by running the example application alongside the console CLI. This allows contributors to verify their changes interactively.\nSOURCE: https://github.com/tokio-rs/console/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n:; cargo run --example app & # run the example application\n:; cargo run                 # launch the console\n```\n\n----------------------------------------\n\nTITLE: Documentation Test Example for Type-Level API\nDESCRIPTION: An example of a proper documentation test for a type-level API (tokio_timer::Timeout) that shows how to structure tests for API documentation. It demonstrates using the API through extension traits.\nSOURCE: https://github.com/tokio-rs/console/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// // import the `timeout` function, usually this is done\n/// // with `use tokio::prelude::*`\n/// use tokio::prelude::FutureExt;\n/// use futures::Stream;\n/// use futures::sync::mpsc;\n/// use std::time::Duration;\n///\n/// # fn main() {\n/// let (tx, rx) = mpsc::unbounded();\n/// # tx.unbounded_send(()).unwrap();\n/// # drop(tx);\n///\n/// let process = rx.for_each(|item| {\n///     // do something with `item`\n/// # drop(item);\n/// # Ok(())\n/// });\n///\n/// # tokio::runtime::current_thread::block_on_all(\n/// // Wrap the future with a `Timeout` set to expire in 10 milliseconds.\n/// process.timeout(Duration::from_millis(10))\n/// # ).unwrap();\n/// # }\n```\n\n----------------------------------------\n\nTITLE: Documentation Test Example for Function-Level API\nDESCRIPTION: An example of a proper documentation test for a function-level API (Timeout::new) that directly demonstrates function usage. It shows how to structure tests differently based on what's being documented.\nSOURCE: https://github.com/tokio-rs/console/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// use tokio::timer::Timeout;\n/// use futures::Future;\n/// use futures::sync::oneshot;\n/// use std::time::Duration;\n///\n/// # fn main() {\n/// let (tx, rx) = oneshot::channel();\n/// # tx.send(()).unwrap();\n///\n/// # tokio::runtime::current_thread::block_on_all(\n/// // Wrap the future with a `Timeout` set to expire in 10 milliseconds.\n/// Timeout::new(rx, Duration::from_millis(10))\n/// # ).unwrap();\n/// # }\n```\n\n----------------------------------------\n\nTITLE: Displaying Tokio Console help information\nDESCRIPTION: Command to show the help output for Tokio console, which displays all available command-line flags and arguments. The output shows comprehensive configuration options.\nSOURCE: https://github.com/tokio-rs/console/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ tokio-console --help\nThe Tokio console: a debugger for async Rust.\n\nUsage: tokio-console[EXE] [OPTIONS] [TARGET_ADDR] [COMMAND]\n\nCommands:\n  gen-config      Generate a `console.toml` config file with the default\n                  configuration values, overridden by any provided\n                  command-line arguments\n  gen-completion  Generate shell completions\n  help            Print this message or the help of the given\n                  subcommand(s)\n\nArguments:\n  [TARGET_ADDR]\n          The address of a console-enabled process to connect to.\n          \n          This may be an IP address and port, or a DNS name.\n          \n          On Unix platforms, this may also be a URI with the `file`\n          scheme that specifies the path to a Unix domain socket, as in\n          `file://localhost/path/to/socket`.\n          \n          When the `vsock` feature is enabled, this may also be a URI\n          with the `vsock` scheme that specifies a vsock connection, as\n          in `vsock://2:6669` to connect to CID 2 port 6669.\n          \n          [default: http://127.0.0.1:6669]\n\nOptions:\n      --log <LOG_FILTER>\n          Log level filter for the console's internal diagnostics.\n          \n          Logs are written to a new file at the path given by the\n          `--log-dir` argument (or its default value), or to the system\n          journal if `systemd-journald` support is enabled.\n          \n          If this is set to 'off' or is not set, no logs will be\n          written.\n          \n          [default: off]\n          \n          [env: RUST_LOG=]\n\n  -W, --warn <WARNINGS>...\n          Enable lint warnings.\n          \n          This is a comma-separated list of warnings to enable.\n          \n          Each warning is specified by its name, which is one of:\n          \n          * `self-wakes` -- Warns when a task wakes itself more than a\n          certain percentage of its total wakeups. Default percentage is\n          50%.\n          \n          * `lost-waker` -- Warns when a task is dropped without being\n          woken.\n          \n          * `never-yielded` -- Warns when a task has never yielded.\n          \n          * `auto-boxed-future` -- Warnings when the future driving a\n          task was automatically boxed by the runtime because it was\n          large.\n          \n          * `large-future` -- Warnings when the future driving a task\n          occupies a large amount of stack space.\n          \n          [default: self-wakes lost-waker never-yielded\n          auto-boxed-future large-future]\n          [possible values: self-wakes, lost-waker, never-yielded,\n          auto-boxed-future, large-future]\n\n  -A, --allow <ALLOW_WARNINGS>...\n          Allow lint warnings.\n          \n          This is a comma-separated list of warnings to allow.\n          \n          Each warning is specified by its name, which is one of:\n          \n          * `self-wakes` -- Warns when a task wakes itself more than a\n          certain percentage of its total wakeups. Default percentage is\n          50%.\n          \n          * `lost-waker` -- Warns when a task is dropped without being\n          woken.\n          \n          * `never-yielded` -- Warns when a task has never yielded.\n          \n          * `auto-boxed-future` -- Warnings when the future driving a\n          task was automatically boxed by the runtime because it was\n          large.\n          \n          * `large-future` -- Warnings when the future driving a task\n          occupies a large amount of stack space.\n          \n          If this is set to `all`, all warnings are allowed.\n          \n          [possible values: all, self-wakes, lost-waker, never-yielded,\n          large-future, auto-boxed-future]\n\n      --log-dir <LOG_DIRECTORY>\n          Path to a directory to write the console's internal logs to.\n          \n          [default: /tmp/tokio-console/logs]\n\n      --lang <LANG>\n          Overrides the terminal's default language\n          \n          [env: LANG=en_US.UTF-8]\n\n      --ascii-only <ASCII_ONLY>\n          Explicitly use only ASCII characters\n          \n          [possible values: true, false]\n\n      --no-colors\n          Disable ANSI colors entirely\n\n      --colorterm <truecolor>\n          Overrides the value of the `COLORTERM` environment variable.\n          \n          If this is set to `24bit` or `truecolor`, 24-bit RGB color\n          support will be enabled.\n          \n          [env: COLORTERM=truecolor]\n          [possible values: 24bit, truecolor]\n\n      --palette <PALETTE>\n          Explicitly set which color palette to use\n          \n          [possible values: 8, 16, 256, all, off]\n\n      --no-duration-colors <COLOR_DURATIONS>\n          Disable color-coding for duration units\n          \n          [possible values: true, false]\n\n      --no-terminated-colors <COLOR_TERMINATED>\n          Disable color-coding for terminated tasks\n          \n          [possible values: true, false]\n\n      --retain-for <RETAIN_FOR>\n          How long to continue displaying completed tasks and dropped\n          resources after they have been closed.\n          \n          This accepts either a duration, parsed as a combination of\n          time spans (such as `5days 2min 2s`), or `none` to disable\n          removing completed tasks and dropped resources.\n          \n          Each time span is an integer number followed by a suffix.\n          Supported suffixes are:\n          \n          * `nsec`, `ns` -- nanoseconds\n          \n          * `usec`, `us` -- microseconds\n          \n          * `msec`, `ms` -- milliseconds\n          \n          * `seconds`, `second`, `sec`, `s`\n          \n          * `minutes`, `minute`, `min`, `m`\n          \n          * `hours`, `hour`, `hr`, `h`\n          \n          * `days`, `day`, `d`\n          \n          * `weeks`, `week`, `w`\n          \n          * `months`, `month`, `M` -- defined as 30.44 days\n          \n          * `years`, `year`, `y` -- defined as 365.25 days\n          \n          [default: 6s]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n```\n\n----------------------------------------\n\nTITLE: Windows UTF-8 Console Launch\nDESCRIPTION: Command to launch Tokio Console on Windows with UTF-8 language support\nSOURCE: https://github.com/tokio-rs/console/blob/main/tokio-console/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntokio-console --lang en_US.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Tokio Console on Windows with UTF-8 support\nDESCRIPTION: Command to run Tokio console on Windows with explicit UTF-8 language support needed for the terminal UI to display properly with special characters and graphs.\nSOURCE: https://github.com/tokio-rs/console/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntokio-console --lang en_US.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Tokio Console examples during development\nDESCRIPTION: Command for running examples from the console-subscriber directory during development, where $name should be replaced with the example name (like 'app' or 'dump').\nSOURCE: https://github.com/tokio-rs/console/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --example $name\n```\n\n----------------------------------------\n\nTITLE: Installing npm Dependencies for gRPC-web Application\nDESCRIPTION: Command to install all necessary npm dependencies for the gRPC-web example application from the app directory.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/examples/grpc_web/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting the gRPC-web Server with Cargo\nDESCRIPTION: Command to run the gRPC-web server example with the necessary feature flag enabled using Cargo.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/examples/grpc_web/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --example grpc_web --features grpc-web\n```\n\n----------------------------------------\n\nTITLE: Starting the Web Application for gRPC-web Example\nDESCRIPTION: Command to start the web application development server for the gRPC-web example.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/examples/grpc_web/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Code with Buf Tool\nDESCRIPTION: Command to generate the necessary gRPC code using the buf tool for the web application.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/examples/grpc_web/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run gen\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for gRPC-web Example (Shell)\nDESCRIPTION: Command to install necessary dependencies for the gRPC-web example application using npm.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/examples/grpc_web/app/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting gRPC-web Server (Shell)\nDESCRIPTION: Command to start the gRPC-web server using Rust's cargo run command with specific features enabled.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/examples/grpc_web/app/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --example grpc_web --features grpc-web\n```\n\n----------------------------------------\n\nTITLE: Starting Web Application for gRPC-web Example (Shell)\nDESCRIPTION: Command to start the web application for the gRPC-web example using npm run dev.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/examples/grpc_web/app/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Code with buf (Shell)\nDESCRIPTION: Command to generate gRPC code using the buf tool via an npm script.\nSOURCE: https://github.com/tokio-rs/console/blob/main/console-subscriber/examples/grpc_web/app/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run gen\n```\n\n----------------------------------------\n\nTITLE: Commit Message Format Template\nDESCRIPTION: Template showing the required format for git commit messages with header (type, scope, subject), body and footer. Messages must not exceed 72 characters per line and follow specific formatting rules for changelog generation.\nSOURCE: https://github.com/tokio-rs/console/blob/main/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```"
  }
]