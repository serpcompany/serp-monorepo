[
  {
    "owner": "varnishcache",
    "repo": "varnish-cache",
    "content": "TITLE: Configuring WebSocket Support in Varnish Cache VCL\nDESCRIPTION: VCL configuration to enable WebSocket support by detecting WebSocket upgrade requests and piping them through Varnish. The code checks for WebSocket upgrade headers and forwards necessary connection headers to the backend.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-example-websockets.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    if (req.http.upgrade ~ \"(?i)websocket\") {\n        return (pipe);\n    }\n}\n```\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_pipe {\n    if (req.http.upgrade) {\n        set bereq.http.upgrade = req.http.upgrade;\n        set bereq.http.connection = req.http.connection;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying TTL and Removing Set-Cookie Headers in Varnish Backend Response\nDESCRIPTION: This VCL snippet overrides the TTL for image files and removes Set-Cookie headers to prevent the creation of hit-for-miss objects. It's implemented in the vcl_backend_response subroutine.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-example-manipulating-responses.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n   if (bereq.url ~ \"\\.(png|gif|jpg)$\") {\n     unset beresp.http.set-cookie;\n     set beresp.ttl = 1h;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an Access Control List (ACL) in VCL\nDESCRIPTION: Demonstrates defining an ACL named 'localnetwork' with IP addresses and hostnames, then using it to match against the client's IP address. The example includes a positive match, a network match, and a negative match.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_6\n\nLANGUAGE: vcl\nCODE:\n```\nacl localnetwork {\n    \"localhost\";    # myself\n    \"192.0.2.0\"/24; # and everyone on the local network\n    ! \"192.0.2.23\"; # except for the dial-in router\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Checks for Backends in Varnish VCL\nDESCRIPTION: This snippet shows how to implement health checks for backend servers in VCL. It defines backends with probe configurations and sets up a round-robin director with these backends.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-backends.rst#2025-04-17_snippet_6\n\nLANGUAGE: VCL\nCODE:\n```\nbackend server1 {\n    .host = \"server1.example.com\";\n    .probe = {\n        .url = \"/\";\n        .timeout = 1s;\n        .interval = 5s;\n        .window = 5;\n        .threshold = 3;\n    }\n}\n\nbackend server2 {\n    .host = \"server2.example.com\";\n    .probe = {\n        .url = \"/\";\n        .timeout = 1s;\n        .interval = 5s;\n        .window = 5;\n        .threshold = 3;\n    }\n}\n\nimport directors;\n\nsub vcl_init {\n    new vdir = directors.round_robin();\n    vdir.add_backend(server1);\n    vdir.add_backend(server2);\n}\n```\n\n----------------------------------------\n\nTITLE: Layering Directors in Varnish VCL\nDESCRIPTION: This snippet demonstrates how to layer directors in VCL. It creates two round-robin directors and combines them into a fallback director, allowing for more complex load balancing strategies.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-backends.rst#2025-04-17_snippet_7\n\nLANGUAGE: VCL\nCODE:\n```\nimport directors;\n\nsub vcl_init {\n    new dc1 = directors.round_robin();\n    dc1.add_backend(server1A);\n    dc1.add_backend(server1B);\n\n    new dc2 = directors.round_robin();\n    dc2.add_backend(server2A);\n    dc2.add_backend(server2B);\n\n    new dcprio = directors.fallback();\n    dcprio.add_backend(dc1);\n    dcprio.add_backend(dc2);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Cookies for Specific URLs in VCL\nDESCRIPTION: This VCL snippet demonstrates how to remove the cookie header for all requests to the '/images' directory. It uses a regular expression to match the URL and then unsets the cookie header if there's a match.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-example-manipulating-headers.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n  if (req.url ~ \"^/images\") {\n    unset req.http.cookie;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Backend Connections in VCL\nDESCRIPTION: Shows how to explicitly resolve a backend connection in VCL using the .resolve() method. This is useful when the resolution outcome is needed within VCL, such as in server sharding scenarios.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-backends.rst#2025-04-17_snippet_8\n\nLANGUAGE: vcl\nCODE:\n```\nset req.backend_hint = dcprio.backend().resolve();\n```\n\n----------------------------------------\n\nTITLE: Basic Backend Server Configuration in VCL\nDESCRIPTION: Basic example of configuring a backend server pointing to varnish-cache.org in Varnish Configuration Language (VCL). Defines a default backend with host and port settings.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/tutorial/backend_servers.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nvcl 4.0;\n\nbackend default {\n    .host = \"www.varnish-cache.org\";\n    .port = \"80\";\n}\n```\n\n----------------------------------------\n\nTITLE: Default VCL Hash Implementation\nDESCRIPTION: Default hashing configuration in Varnish that uses URL and Host header (or server IP) to generate cache keys.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-hashing.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_hash {\n    hash_data(req.url);\n    if (req.http.host) {\n        hash_data(req.http.host);\n    } else {\n        hash_data(server.ip);\n    }\n    return (lookup);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Backends in Varnish VCL\nDESCRIPTION: This snippet shows how to define multiple backends and route requests based on URL patterns in VCL. It sets up two backends and uses a conditional statement in vcl_recv to choose the appropriate backend.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-backends.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\nbackend default {\n    .host = \"127.0.0.1\";\n    .port = \"8080\";\n}\n\nbackend java {\n    .host = \"127.0.0.1\";\n    .port = \"8000\";\n}\n\nsub vcl_recv {\n    if (req.url ~ \"^/java/\") {\n        set req.backend_hint = java;\n    } else {\n        set req.backend_hint = default;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Cookie Header in VCL\nDESCRIPTION: A simple VCL snippet demonstrating how to remove the cookie header from incoming requests to enable caching. This example shows the basic structure of a VCL subroutine and how to manipulate HTTP headers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/intro.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    # Remove the cookie header to enable caching\n    unset req.http.cookie;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Hosts in Varnish VCL\nDESCRIPTION: This snippet demonstrates how to set up virtual hosts in Varnish using VCL. It shows two methods: one using regex matching and another using exact string comparison for the host header.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-backends.rst#2025-04-17_snippet_3\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_recv {\n    if (req.http.host ~ \"foo.com\") {\n        set req.backend_hint = foo;\n    } elsif (req.http.host ~ \"bar.com\") {\n        set req.backend_hint = bar;\n    }\n}\n\nsub vcl_recv {\n    if (req.http.host == \"foo.com\" || req.http.host == \"www.foo.com\") {\n        set req.backend_hint = foo;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Hit-for-Pass in VCL Backend Response\nDESCRIPTION: This VCL snippet shows how to set an object to hit-for-pass state for a specific duration when the TTL is 0 and the response headers allow for validation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_14\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n  # Set hit-for-pass for two minutes if TTL is 0 and response headers\n  # allow for validation.\n  if (beresp.ttl <= 0s && (beresp.http.ETag || beresp.http.Last-Modified)) {\n    return(pass(120s));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining vcl_recv Subroutine in VCL\nDESCRIPTION: The vcl_recv subroutine is called at the beginning of a request. It decides whether to serve the request, modify it, or how to process it further. It can return various keywords to control request flow.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_step.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nvcl_recv {\n  # Decision logic goes here\n  return (hash); # Example return value\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Varnish Cache to Ignore Vary Header for Bots\nDESCRIPTION: This VCL snippet demonstrates how to configure Varnish Cache to ignore the Vary header for bot requests during A/B testing. It uses device detection to identify bots, sets req.hash_ignore_vary for bots, parses cookies for the A/B test value, and removes the Vary header from the response.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/vcl-design-patterns/req-hash_ignore_vary.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nimport cookie;\n\ninclude \"devicedetect.vcl\";\n\nsub vcl_recv {\n    call devicedetect;\n    if (req.http.X-UA-Device ~ \"bot\") {\n        set req.hash_ignore_vary = true;\n    }\n}\n\nsub vcl_req_cookie {\n    cookie.parse(req.http.Cookie);\n    set req.http.X-AB-Test = cookie.get(\"ab-test\");\n    return;\n}\n\nsub vcl_deliver {\n    unset resp.http.Vary;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Directors for Load Balancing in Varnish VCL\nDESCRIPTION: This snippet demonstrates how to set up a round-robin director for load balancing in VCL. It defines multiple backends, creates a director, and assigns backends to it.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-backends.rst#2025-04-17_snippet_5\n\nLANGUAGE: VCL\nCODE:\n```\nimport directors;\n\nbackend server1 {\n    .host = \"192.168.0.10\";\n}\nbackend server2 {\n    .host = \"192.168.0.11\";\n}\n\nsub vcl_init {\n    new bar = directors.round_robin();\n    bar.add_backend(server1);\n    bar.add_backend(server2);\n}\n\nsub vcl_recv {\n    # send all traffic to the bar director:\n    set req.backend_hint = bar.backend();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using ACLs for Purge Access Control in Varnish Cache VCL\nDESCRIPTION: This snippet demonstrates how to define an ACL named 'local' and use it to control access to purge operations in Varnish Cache. The ACL includes localhost, a local network range, and excludes a specific IP. The VCL then checks client IP against this ACL for PURGE requests.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-example-acls.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\n# Who is allowed to purge....\nacl local {\n    \"localhost\";\n    \"192.168.1.0\"/24; /* and everyone on the local network */\n    ! \"192.168.1.23\"; /* except for the dialin router */\n}\n\nsub vcl_recv {\n  if (req.method == \"PURGE\") {\n    if (client.ip ~ local) {\n       return(purge);\n    } else {\n       return(synth(403, \"Access denied.\"));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Access Control List (ACL) in VCL\nDESCRIPTION: Demonstrates how to create and initialize a named access control list (ACL) in VCL, including IP addresses and network ranges.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-syntax.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\nacl local {\n  \"localhost\";         // myself\n  \"192.0.2.0\"/24;      // and everyone on the local network\n  ! \"192.0.2.23\";      // except for the dialin router\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Backend Server in Varnish VCL\nDESCRIPTION: This snippet shows how to define a basic backend server in Varnish Configuration Language (VCL). It specifies the host and port for the backend server.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-backends.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nbackend default {\n    .host = \"127.0.0.1\";\n    .port = \"8080\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Backend in VCL\nDESCRIPTION: Demonstrates the basic structure for defining a named backend object in VCL. The backend declaration includes key-value pairs for various attributes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nbackend name {\n    .attribute1 = value;\n    .attribute2 = value;\n    [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESI Processing in VCL\nDESCRIPTION: VCL configuration that enables ESI processing for specific URLs and sets different TTL values for the main page and included fragments.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/esi.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n\tif (bereq.url == \"/test.html\") {\n       set beresp.do_esi = true; // Do ESI processing\n       set beresp.ttl = 24 h;    // Sets the TTL on the HTML above\n\t} elseif (bereq.url == \"/cgi-bin/date.cgi\") {\n       set beresp.ttl = 1m;      // Sets a one minute TTL on\n\t       \t       \t\t     // the included object\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic VMOD Usage Example in VCL\nDESCRIPTION: Demonstrates how to import and use a standard VMOD function within VCL code. This example shows calling the std.toupper function to convert a URL to uppercase and set it as a response header.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nimport std;\n\nsub vcl_deliver {\n\tset resp.http.foo = std.toupper(req.url);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Interface TCP Socket Binding in Varnish\nDESCRIPTION: Examples of binding the Command Line Interface to different network addresses and ports for Varnish access control. Shows various options for localhost and network-accessible configurations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_security.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-T 127.0.0.1:631\n-T localhost:9999\n-T 192.168.1.1:34\n-T '[fe80::1]:8082'\n```\n\n----------------------------------------\n\nTITLE: Installing Varnish Cache using apt-get on Debian/Ubuntu\nDESCRIPTION: Simple command to install Varnish Cache directly from the default Debian/Ubuntu repositories using apt-get package manager.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_debian.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install varnish\n```\n\n----------------------------------------\n\nTITLE: Configuring Varnish Endpoints with -a Argument\nDESCRIPTION: Examples of different endpoint configurations using the -a argument to define HTTP service points. Shows various formats including IPv4, IPv6, Unix domain sockets, and abstract sockets.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/command-line.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-a http=:80\n-a localhost:80,HTTP\n-a 192.168.1.100:8080\n-a '[fe80::1]:80'\n-a '0.0.0.0:8080,[::]:8081'\n-a uds=/my/path,PROXY,mode=666\n-a @abstract_socket\n```\n\n----------------------------------------\n\nTITLE: Basic URL-based Backend Selection in VCL\nDESCRIPTION: A simple VCL configuration that demonstrates how to route traffic to different backend servers based on URL patterns. This example routes requests with URLs starting with '/wiki' to a wiki_server backend, while all other requests go to a wordpress_server backend.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/tutorial/introduction.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n   if (req.url ~ \"^/wiki\") {\n       set req.backend_hint = wiki_server;\n   } else {\n       set req.backend_hint = wordpress_server;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Example VMOD Interface Definition File (vmod.vcc)\nDESCRIPTION: Shows the structure of a vmod.vcc file which defines the interface between a VMOD and the VCL compiler/runtime. This example from the std VMOD defines three functions with their signatures and metadata about the module.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcc\nCODE:\n```\n$ABI strict\n$Version my.version\n$Module std 3 \"Varnish Standard Module\"\n$Event event_function\n$Function STRING toupper(STRANDS s)\n$Function STRING tolower(STRANDS s)\n$Function VOID set_ip_tos(INT)\n```\n\n----------------------------------------\n\nTITLE: VCL Cookie Filtering Subroutine\nDESCRIPTION: Example subroutine showing early return pattern without action for non-built-in subroutines when filtering cookies.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_12\n\nLANGUAGE: vcl\nCODE:\n```\nsub filter_cookies {\n    if (!req.http.cookie) {\n        return;\n    }\n    # complex cookie filtering\n}\n```\n\n----------------------------------------\n\nTITLE: Building Varnish from Source\nDESCRIPTION: Standard commands for generating build files, configuring and compiling Varnish Cache from source code.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ncd varnish-cache\nsh autogen.sh\nsh configure\nmake\n```\n\n----------------------------------------\n\nTITLE: Implementing vcl_backend_response Subroutine in VCL\nDESCRIPTION: The vcl_backend_response subroutine is called after successfully retrieving response headers from the backend. It allows manipulation of the backend response.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_step.rst#2025-04-17_snippet_3\n\nLANGUAGE: VCL\nCODE:\n```\nvcl_backend_response {\n  # Process backend response\n  return (deliver);\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing 304 Responses on Hit-for-Miss in VCL\nDESCRIPTION: This VCL snippet demonstrates how to prevent Varnish from sending 304 responses to the client on hit-for-miss by removing If-None-Match and If-Modified-Since headers in vcl_miss.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_13\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_miss {\n  # To prevent 304 client responses on hit-for-miss.\n  unset req.http.If-None-Match;\n  unset req.http.If-Modified-Since;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VCL Include Functionality in Varnish Cache\nDESCRIPTION: A new 'include' facility has been added to VCL, allowing VCL code to incorporate code fragments from multiple files. This feature enhances modularity and code organization in Varnish configurations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_48\n\nLANGUAGE: VCL\nCODE:\n```\ninclude \"fragment.vcl\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating VCL Variable Usage\nDESCRIPTION: Shows examples of how VCL variables are structured and accessed in different scopes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-var.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nreq.url\nberesp.http.date\nclient.ip\n```\n\n----------------------------------------\n\nTITLE: Including External VCL Files\nDESCRIPTION: Demonstrates how to include another VCL file in the current configuration. The included file can be specified as an absolute path, a relative path, or searched in vcl_path directories.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\ninclude \"foo.vcl\";\n```\n\n----------------------------------------\n\nTITLE: Setting Host Header for Backend Requests in VCL\nDESCRIPTION: Demonstrates how to add a host header to probes and regular backend requests if they don't have one.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_6\n\nLANGUAGE: vcl\nCODE:\n```\n.host_header = \"example.com\";\n```\n\n----------------------------------------\n\nTITLE: Setting Custom TTL in Varnish VCL\nDESCRIPTION: VCL code to override the TTL (Time To Live) for specific URL patterns in backend responses. Sets a 5-day TTL for legacy CMS content.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_5\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n    if (bereq.url ~ \"^/legacy_broken_cms/\") {\n        set beresp.ttl = 5d;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grace Period Configuration with Backend Health Check\nDESCRIPTION: VCL configuration that implements different grace periods based on backend health status\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-grace.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n    set beresp.grace = 24h;\n    // no keep - the grace should be enough for 304 candidates\n}\n\nsub vcl_recv {\n    if (std.healthy(req.backend_hint)) {\n        // change the behavior for healthy backends: Cap grace to 10s\n        set req.grace = 10s;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Request Cookie Headers in VCL\nDESCRIPTION: VCL code snippet that demonstrates how to ignore cookies for non-admin pages by unsetting the Cookie header when the URL doesn't start with /admin/.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nif (!(req.url ~ \"^/admin/\")) {\n    unset req.http.Cookie;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP PURGE in VCL\nDESCRIPTION: VCL configuration to enable HTTP PURGE functionality with ACL restrictions. Allows purging cached objects from localhost and specific IP range.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/purging.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nacl purge {\n  \"localhost\";\n  \"192.168.55.0\"/24;\n}\n\nsub vcl_recv {\n      # allow PURGE from localhost and 192.168.55...\n\n  if (req.method == \"PURGE\") {\n      if (!client.ip ~ purge) {\n          return(synth(405,\"Not allowed.\"));\n      }\n      return (purge);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing obj Object in VCL\nDESCRIPTION: The obj object represents the cached object in Varnish. It is read-only and contains information about the object as it is stored in the cache.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-variables.rst#2025-04-17_snippet_4\n\nLANGUAGE: vcl\nCODE:\n```\n// obj object is read-only and represents cached content\n```\n\n----------------------------------------\n\nTITLE: Domain-Based VCL Routing Logic\nDESCRIPTION: Top-level VCL configuration that routes requests to different VCL files based on the Host header. Includes backend definition, request processing, and synthetic response handling.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-separate.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\nimport std;\n\n# We have to have a backend, even if we do not use it\nbackend default { .host = \"127.0.0.1\"; }\n\nsub vcl_recv {\n\t# Normalize host header\n\tset req.http.host = std.tolower(req.http.host);\n\n\tif (req.http.host ~ \"\\.?varnish\\.org$\") {\n\t    return (vcl(l_vo));\n\t}\n\tif (req.http.host ~ \"\\.?varnish-cache\\.org$\") {\n\t    return (vcl(l_vc));\n\t}\n\treturn (synth(302, \"http://varnish-cache.org\"));\n}\n\nsub vcl_synth {\n\tif (resp.status == 301 || resp.status == 302) {\n\t    set resp.http.location = resp.reason;\n\t    set resp.reason = \"Moved\";\n\t    return (deliver);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Pragma Header Handling in VCL\nDESCRIPTION: VCL code that handles the HTTP 1.0 Pragma: nocache header by setting the response as uncacheable for a specified duration.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_4\n\nLANGUAGE: vcl\nCODE:\n```\nif (beresp.http.Pragma ~ \"nocache\") {\n    set beresp.uncacheable = true;\n    set beresp.ttl = 120s; # how long not to cache this url.\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating VCL Concatenation in Varnish Cache\nDESCRIPTION: This snippet shows how loaded VCL code is combined with built-in VCL code for the vcl_recv subroutine. The loaded code is executed first, followed by the built-in code.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-built-in-code.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_recv {\n    # loaded code for vcl_recv\n}\n```\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_recv {\n    # loaded code for vcl_recv\n    # built-in code for vcl_recv\n}\n```\n\n----------------------------------------\n\nTITLE: Setting pipe_task_deadline Parameter in VCL\nDESCRIPTION: Demonstrates how to set the new pipe_task_deadline parameter in VCL, which specifies the maximum duration of a pipe transaction. The default value is 'never' to align with the former lack of such timeout.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.5.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\n# both equivalent for now\nparam.set pipe_task_deadline never\nparam.reset pipe_task_deadline\n```\n\n----------------------------------------\n\nTITLE: Selective Cookie Preservation in VCL\nDESCRIPTION: Complex VCL code that preserves only specific named cookies (COOKIE1 and COOKIE2) while removing all others from the request headers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    if (req.http.Cookie) {\n        set req.http.Cookie = \";\" + req.http.Cookie;\n        set req.http.Cookie = regsuball(req.http.Cookie, \"; +\", \";\");\n        set req.http.Cookie = regsuball(req.http.Cookie, \";(COOKIE1|COOKIE2)=\", \"; \\1=\");\n        set req.http.Cookie = regsuball(req.http.Cookie, \";[^ ][^;]*\", \"\");\n        set req.http.Cookie = regsuball(req.http.Cookie, \"^[; ]+|[; ]+$\", \"\");\n\n        if (req.http.Cookie == \"\") {\n            unset req.http.Cookie;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compressing Content in VCL Backend Response\nDESCRIPTION: This VCL snippet demonstrates how to enable compression for text content in the backend response. It sets beresp.do_gzip to true for content types that match 'text'.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/compression.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n    if (beresp.http.content-type ~ \"text\") {\n        set beresp.do_gzip = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Grace and Keep Periods in VCL\nDESCRIPTION: VCL configuration to set grace period of 2 minutes and keep period of 8 minutes for cached objects\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-grace.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n    set beresp.grace = 2m;\n    set beresp.keep = 8m;\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Client IP Against an ACL in VCL\nDESCRIPTION: Shows how to test if a client's IP address matches a previously defined ACL named 'localnetwork'. If it matches, the request is piped directly to the backend.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_7\n\nLANGUAGE: vcl\nCODE:\n```\nif (client.ip ~ localnetwork) {\n    return (pipe);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a VMOD in VCL\nDESCRIPTION: Demonstrates how to import the standard VMOD (std) and use its logging function in the vcl_recv subroutine. VMODs extend VCL functionality with additional features.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_4\n\nLANGUAGE: vcl\nCODE:\n```\nimport std;\nsub vcl_recv {\n    std.log(\"foo\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling PROXY Protocol Header in VCL\nDESCRIPTION: Shows how to configure a backend to send a PROXY protocol header with client and server IP information.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_11\n\nLANGUAGE: vcl\nCODE:\n```\n.proxy_header = 2;\n```\n\n----------------------------------------\n\nTITLE: Cache Validation Configuration in VCL\nDESCRIPTION: VCL code to configure cache validation behavior by retaining objects with validation headers for 4 hours after expiration.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_8\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n    # Keep the response in cache for 4 hours if the response has\n    # validating headers.\n    if (beresp.http.ETag || beresp.http.Last-Modified) {\n      set beresp.keep = 4h;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Session Cookie Extraction in VCL\nDESCRIPTION: VCL code that extracts and preserves only the PHP session cookie while removing all other cookies from the request.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_3\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    # save the original cookie header so we can mangle it\n    set req.http.X-Varnish-PHP_SID = req.http.Cookie;\n    # using a capturing sub pattern, extract the continuous string of\n    # alphanumerics that immediately follows \"PHPSESSID=\"\n    set req.http.X-Varnish-PHP_SID =\n       regsuball(req.http.X-Varnish-PHP_SID, \";? ?PHPSESSID=([a-zA-Z0-9]+)( |;| ;).*\",\"\\1\");\n    set req.http.Cookie = req.X-Varnish-PHP_SID;\n    unset req.X-Varnish-PHP_SID;\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Cookie Filtering in VCL\nDESCRIPTION: VCL snippet that removes all cookies starting with underscore using regular expressions, commonly used for removing Google Analytics and other tracking cookies.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\n# Remove has_js and Google Analytics __* cookies.\nset req.http.Cookie = regsuball(req.http.Cookie, \"(^|;\\s*)(_[_a-z]+|has_js)=[^;]*\", \"\");\n# Remove a \";\" prefix, if present.\nset req.http.Cookie = regsub(req.http.Cookie, \"^;\\s*\", \"\");\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple VCL Function Definitions in Varnish Cache\nDESCRIPTION: Multiple definitions of the same VCL function are now concatenated in the order they appear in the source. This simplifies fallback mechanisms to built-in defaults and improves modularization of VCL code.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_49\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_recv {\n    # First definition\n}\n\nsub vcl_recv {\n    # Second definition\n    # Both will be concatenated\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Backend Wait Timeout in VCL\nDESCRIPTION: Demonstrates how to configure the timeout for transactions waiting for a backend connection to become available.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_10\n\nLANGUAGE: vcl\nCODE:\n```\n.wait_timeout = 1s;\n```\n\n----------------------------------------\n\nTITLE: Starting Varnish in Debug Mode\nDESCRIPTION: Example command for starting Varnish Cache in debug mode with specific configuration parameters to diagnose startup issues.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/troubleshooting.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvarnishd -n foo -f /usr/local/etc/varnish/default.vcl -s malloc,1G -T 127.0.0.1:2000  -a 0.0.0.0:8080 -d\n```\n\n----------------------------------------\n\nTITLE: Defining VCL Grammar in BNF\nDESCRIPTION: This snippet defines the grammar for the Varnish Configuration Language (VCL) using Backus-Naur Form (BNF). It specifies the structure for programs, functions, statements, conditions, and expressions in VCL.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/firstdesign.rst#2025-04-17_snippet_2\n\nLANGUAGE: BNF\nCODE:\n```\nprogram:    part\n            | program part\n\npart:       \"sub\" function_name compound\n            | \"backend\" backend_name compound\n\ncompound:   \"{\" statements \"}\"\n\nstatements: /* empty */\n            | statement\n            | statements statement\n\nstatement:  conditional\n            | functioncall\n            | \"set\" field value\n            | field \"=\" value\n            | \"no_cache\"\n            | \"finish\"\n            | \"no_new_cache\"\n            | call function_name\n            | fetch\n            | error status_code\n            | error status_code string(message)\n            | switch_config config_id\n            | rewrite field string(match) string(replace)\n\nconditional: \"if\" condition compound elif_parts else_part\n\nelif_parts: /* empty */\n            | elif_part\n            | elif_parts elif_part\n\nelif_part:  \"elseif\" condition compound\n            | \"elsif\" condition compound\n            | \"else if\" condition compound\n\nelse_part:  /* empty */\n            | \"else\" compound\n\nfunctioncall: \"call\" function_name\n\nfield:      object\n            field \".\" variable\n\ncondition:  '(' cond_or ')'\n\ncond_or:    cond_and\n            | cond_or '||' cond_and\n\ncond_and:   cond_part\n            | cond_and '&&' cond_part\n\ncond_part:  '!' cond_part2\n            | cond_part2\n\ncond_part2: condition\n            | field(int) '<' number\n            | field(int) '<=' number\n            | field(int) '>' number\n            | field(int) '>=' number\n            | field(int) '=' number\n            | field(int) '!=' number\n            | field(IP)  ~ ip_list\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Host in VCL\nDESCRIPTION: Demonstrates various ways to specify the host attribute for a networked backend, including IPv4/IPv6 addresses and domain names with optional port numbers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\n.host = \"127.0.0.1\";\n\n.host = \"[::1]:8080\";\n\n.host = \"example.com:8081\";\n\n.host = \"example.com:http\";\n```\n\n----------------------------------------\n\nTITLE: Device Type as Query Parameter\nDESCRIPTION: VCL implementation for adding device type as a GET query parameter to backend requests.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/devicedetection.rst#2025-04-17_snippet_3\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    # call some detection engine that set req.http.X-UA-Device\n}\n\nsub append_ua {\n    if ((req.http.X-UA-Device) && (req.method == \"GET\")) {\n        if (req.url ~ \"\\?\") {\n            set req.http.X-get-devicetype = \"&devicetype=\" + req.http.X-UA-Device;\n        } else {\n            set req.http.X-get-devicetype = \"?devicetype=\" + req.http.X-UA-Device;\n        }\n        set req.url = req.url + req.http.X-get-devicetype;\n        unset req.http.X-get-devicetype;\n    }\n}\n\nsub vcl_miss { call append_ua; }\nsub vcl_pass { call append_ua; }\n\nsub vcl_backend_response {\n    if (bereq.http.X-UA-Device) {\n        if (!beresp.http.Vary) {\n            set beresp.http.Vary = \"X-UA-Device\";\n        } elseif (beresp.http.Vary !~ \"X-UA-Device\") {\n            set beresp.http.Vary = beresp.http.Vary + \", X-UA-Device\";\n        }\n        if (beresp.status == 301 || beresp.status == 302 || beresp.status == 303) {\n            set beresp.http.location = regsub(beresp.http.location, \"[?&]devicetype=.*$\", \"\");\n        }\n    }\n    set beresp.http.X-UA-Device = bereq.http.X-UA-Device;\n}\n\nsub vcl_deliver {\n    if ((req.http.X-UA-Device) && (resp.http.Vary)) {\n        set resp.http.Vary = regsub(resp.http.Vary, \"X-UA-Device\", \"User-Agent\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP BAN in VCL\nDESCRIPTION: VCL configuration to handle HTTP BAN requests with ACL checks and ban expression validation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/purging.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nimport std;\n\nsub vcl_recv {\n  if (req.method == \"BAN\") {\n      # Same ACL check as above:\n      if (!client.ip ~ purge) {\n          return(synth(403, \"Not allowed.\"));\n      }\n      if (std.ban(\"req.http.host == \" + req.http.host +\n          \" && req.url == \" + req.url)) {\n          return(synth(200, \"Ban added\"));\n      } else {\n          # return ban error in 400 response\n          return(synth(400, std.ban_error()));\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accept-Language Header Normalization in VCL\nDESCRIPTION: VCL code to normalize Accept-Language headers to specific language codes (en, de, fr) to improve cache hit rates when using Vary headers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_7\n\nLANGUAGE: vcl\nCODE:\n```\nif (req.http.Accept-Language) {\n    if (req.http.Accept-Language ~ \"en\") {\n        set req.http.Accept-Language = \"en\";\n    } elsif (req.http.Accept-Language ~ \"de\") {\n        set req.http.Accept-Language = \"de\";\n    } elsif (req.http.Accept-Language ~ \"fr\") {\n        set req.http.Accept-Language = \"fr\";\n    } else {\n        # unknown language. Remove the accept-language header and\n        # use the backend default.\n        unset req.http.Accept-Language\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VSL Query Syntax Examples\nDESCRIPTION: Collection of example VSL query expressions demonstrating various matching operations and conditions for filtering Varnish log transactions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vsl-query.rst#2025-04-17_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nReqURL eq \"/foo\"\n\nReqHeader:cookie\n\nnot ReqHeader:cookie\n\nTimestamp:Process[2] > 0.8\n\nReqHeader:user-agent ~ \"iPod\" and Timestamp:Resp[2] > 1.\n\nBerespStatus >= 500\n```\n\n----------------------------------------\n\nTITLE: Hostname Normalization in Varnish VCL\nDESCRIPTION: VCL code to normalize multiple hostnames to a single canonical hostname, preventing duplicate caching of the same content under different domains.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_6\n\nLANGUAGE: vcl\nCODE:\n```\nif (req.http.host ~ \"(?i)^(www.)?varnish-?software.com\") {\n    set req.http.host = \"varnish-software.com\";\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Time in VCL\nDESCRIPTION: Shows how to access the current time in Varnish Cache using the 'now' variable. It returns the time in seconds since the UNIX epoch and remains stable during a VCL subroutine execution. When converted to a string, it provides a formatted timestamp.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_var.rst#2025-04-17_snippet_6\n\nLANGUAGE: vcl\nCODE:\n```\nset resp.http.X-Current-Time = now;\n```\n\n----------------------------------------\n\nTITLE: Optimizing ESI Processing with GZIP in VCL\nDESCRIPTION: VCL configuration for optimizing ESI processing with GZIP compression by removing accept-encoding for ESI objects and enabling GZIP compression during backend response.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/gzip.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_miss {\n\tif (object needs ESI processing) {\n\t\tunset req.http.accept-encoding;\n\t}\n}\n\nsub vcl_backend_response {\n\tif (object needs ESI processing) {\n\t\tset beresp.do_esi = true;\n\t\tset beresp.do_gzip = true;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Template with ESI Include Directive\nDESCRIPTION: An HTML file that demonstrates the use of the esi:include directive to embed dynamic content (the date) from the CGI script.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/esi.rst#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<HTML>\n<BODY>\nThe time is: <esi:include src=\"/cgi-bin/date.cgi\"/>\nat this very moment.\n</BODY>\n</HTML>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fetch Policy in VCL\nDESCRIPTION: VCL subroutine for handling fetch requests, including backend selection, error handling, and cache TTL adjustments\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/firstdesign.rst#2025-04-17_snippet_8\n\nLANGUAGE: vcl\nCODE:\n```\nsub fetch_policy {\n\n    if (req.url.host ~ \"/vg.no$/\") {\n        set req.backend = vg\n        call vg_backend\n    } else {\n        error 404\n    }\n\n    if (backend.response_time > 2.0s) {\n        if (req.url.path ~ \"/landbrugspriser/\") {\n            error 504\n        }\n    }\n    fetch\n    if (backend.down) {\n        if (obj.exist) {\n            set obj.ttl += 10m\n            finish\n        }\n        switch_config ohhshit\n    }\n    if (obj.result == 404) {\n        error 300 \"http://www.vg.no\"\n    }\n    if (obj.result != 200) {\n        finish\n    }\n    if (obj.size > 256k) {\n        no-cache\n    } else if (obj.size > 32k && obj.ttl < 2m) {\n        obj.tll = 5m\n    }\n    if (backend.response_time > 2.0s) {\n        set ttl *= 2.0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Malloc Storage Backend in Varnish\nDESCRIPTION: Syntax for configuring the malloc storage backend in Varnish. The size parameter specifies the maximum net amount of memory Varnish will allocate, with optional suffixes for different units.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/storage-backends.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmalloc[,size]\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend via Proxy in VCL\nDESCRIPTION: Shows how to define a backend that connects through another proxy backend using the PROXY2 protocol.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_13\n\nLANGUAGE: vcl\nCODE:\n```\nbackend proxy {\n  .path = \"/path/to/proxy2_endpoint\";\n}\nbackend destination {\n  .host = \"1.2.3.4\";\n  .via = proxy;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing vcl_hash Subroutine in VCL\nDESCRIPTION: The vcl_hash subroutine is called after vcl_recv to create a hash value for the request. This hash is used as a key to look up the object in Varnish cache.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_step.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nvcl_hash {\n  # Hash calculation logic\n  return (lookup);\n}\n```\n\n----------------------------------------\n\nTITLE: Mobile Client Redirection\nDESCRIPTION: VCL code for redirecting mobile and tablet clients to a mobile-specific domain.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/devicedetection.rst#2025-04-17_snippet_4\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    # call some detection engine\n\n    if (req.http.X-UA-Device ~ \"^mobile\" || req.http.X-UA-device ~ \"^tablet\") {\n        return(synth(750, \"Moved Temporarily\"));\n    }\n}\n\nsub vcl_synth {\n    if (obj.status == 750) {\n        set obj.http.Location = \"http://m.example.com\" + req.url;\n        set obj.status = 302;\n        return(deliver);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying beresp Object in VCL\nDESCRIPTION: The beresp object contains headers of the response from the backend. It can be modified in vcl_backend_response to alter the response before caching.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-variables.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\nvcl_backend_response {\n    // Modify beresp object here\n}\n```\n\n----------------------------------------\n\nTITLE: Custom VCL Hash with GeoIP\nDESCRIPTION: Implementation of vcl_hash that includes country code while maintaining default URL and host-based hashing.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-hashing.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_hash {\n    hash_data(req.http.X-Country-Code);\n}\n```\n\n----------------------------------------\n\nTITLE: Backend Header Communication Example\nDESCRIPTION: Implementation of device detection with backend communication using X-UA-Device header and Vary header handling.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/devicedetection.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    # call some detection engine that set req.http.X-UA-Device\n}\n\nsub vcl_backend_response {\n    if (bereq.http.X-UA-Device) {\n        if (!beresp.http.Vary) { # no Vary at all\n            set beresp.http.Vary = \"X-UA-Device\";\n        } elseif (beresp.http.Vary !~ \"X-UA-Device\") { # add to existing Vary\n            set beresp.http.Vary = beresp.http.Vary + \", X-UA-Device\";\n        }\n    }\n    set beresp.http.X-UA-Device = bereq.http.X-UA-Device;\n}\n\nsub vcl_deliver {\n    if ((req.http.X-UA-Device) && (resp.http.Vary)) {\n        set resp.http.Vary = regsub(resp.http.Vary, \"X-UA-Device\", \"User-Agent\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ban Lurker Friendly Banning in VCL\nDESCRIPTION: VCL configuration template for implementing ban lurker friendly bans using object properties instead of request properties.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/purging.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\nimport std;\n\nsub vcl_backend_response {\n  set beresp.http.url = bereq.url;\n}\n\nsub vcl_deliver {\n  unset resp.http.url; # Optional\n}\n\nsub vcl_recv {\n  if (req.method == \"BAN\") {\n      # Same ACL check as above:\n      if (!client.ip ~ purge) {\n          return(synth(403, \"Not allowed.\"));\n      }\n      # Assumes req.url is a regex. This might be a bit too simple\n      if (std.ban(\"obj.http.url ~ \" + req.url)) {\n          return(synth(200, \"Ban added\"));\n      } else {\n          # return ban error in 400 response\n          return(synth(400, std.ban_error()));\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging to Syslog Using Inline C in Varnish Cache\nDESCRIPTION: This snippet demonstrates how to use inline C code within Varnish Cache to log messages to syslog. It includes the necessary include statement and a sample logging call within a VCL subroutine.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-inline-c.rst#2025-04-17_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n# The include statements must be outside the subroutines.\nC{\n        #include <syslog.h>\n}C\n\nsub vcl_something {\n        C{\n                syslog(LOG_INFO, \"Something happened at VCL line XX.\");\n        }C\n}\n```\n\n----------------------------------------\n\nTITLE: VCL for Handling 206 Partial Responses with ESI\nDESCRIPTION: VCL snippet that demonstrates how to handle partial responses (HTTP 206) when using ESI by converting them to 200 responses when a specific condition is met.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/esi.rst#2025-04-17_snippet_4\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n    if (beresp.status == 206 && beresp.http.secret == \"swordfish\") {\n        set beresp.do_esi = True;\n        set beresp.status = 200;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ESI and Compression Options for Backend Responses\nDESCRIPTION: Configuration for Edge Side Includes (ESI) processing and compression options for backend responses. Controls whether responses should be processed for ESI directives or compressed/decompressed during caching.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_var.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nberesp.do_esi = true;\nberesp.do_gzip = true;\nberesp.do_gunzip = false;\nberesp.do_stream = true;\n```\n\n----------------------------------------\n\nTITLE: Setting Backend Authority in VCL\nDESCRIPTION: Demonstrates how to specify the HTTP authority to use when connecting to a backend, particularly useful for .via connections.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_14\n\nLANGUAGE: vcl\nCODE:\n```\n.authority = \"\";\n```\n\n----------------------------------------\n\nTITLE: Importing VMOD with an alias in VCL\nDESCRIPTION: Demonstrates how to import a VMOD under a different name, which can be useful for VMODs with long names or to use a more expressive name in VCL code.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.3.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nimport directors as dir;\n\nsub vcl_init {\n    new rr = dir.round_robin();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining vcl_backend_fetch Subroutine in VCL\nDESCRIPTION: The vcl_backend_fetch subroutine is called before sending the backend request. It allows modification of the request before it reaches the backend.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_step.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\nvcl_backend_fetch {\n  # Modify backend request here\n  return (fetch);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing req Object in VCL\nDESCRIPTION: The req object represents the client request and is primarily used in vcl_recv. It contains request headers and can be manipulated to affect how Varnish handles the request.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-variables.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nvcl_recv {\n    // Manipulate req object here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom VCL Subroutine\nDESCRIPTION: Example of creating a custom subroutine to handle client IP-based pipe decisions. Shows subroutine definition and conditional logic.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_10\n\nLANGUAGE: vcl\nCODE:\n```\nsub pipe_if_local {\n    if (client.ip ~ localnetwork) {\n        return (pipe);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample VCL Request Policy Program\nDESCRIPTION: This VCL snippet demonstrates a sample request policy program. It includes conditions for client IP, URL matching, user agent detection, and backend response time handling. The program sets caching policies and TTL factors based on these conditions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/firstdesign.rst#2025-04-17_snippet_3\n\nLANGUAGE: VCL\nCODE:\n```\nsub request_policy {\n\n    if (client.ip in 10.0.0.0/8) {\n        no-cache\n        finish\n    }\n\n    if (req.url.host ~ \"cnn.no$\") {\n        rewrite s/cnn.no$/vg.no/\n    }\n\n    if (req.url.path ~ \"cgi-bin\") {\n        no-cache\n    }\n\n    if (req.useragent ~ \"spider\") {\n        no-new-cache\n    }\n\n    if (backend.response_time > 0.8s) {\n        set req.ttlfactor = 1.5\n    } elseif (backend.response_time > 1.5s) {\n        set req.ttlfactor = 2.0\n    } elseif (backend.response_time > 2.5s) {\n        set req.ttlfactor = 5.0\n    }\n\n    /*\n     * the program contains no references to\n     * maxage, s-maxage and expires, so the\n     * default handling (RFC2616) applies\n     */\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Listener Information to Backend in VCL\nDESCRIPTION: Example of how to pass listener information from client-side to backend-side VCL using custom headers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.0.rst#2025-04-17_snippet_4\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_miss {\n\tset req.http.X-Listener = local.socket;\n}\n\nsub vcl_backend_fetch {\n\tif (bereq.http.X-Listener == \"a0\") {\n\t\t# ...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting VCL Request Filters in Varnish 7.7\nDESCRIPTION: New VCL variables req.filters and bereq.filters allow passing request bodies through a list of VFPs and backend request bodies through VDPs respectively. This enables processing or transforming request bodies as they pass through Varnish.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.7.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nreq.filters = \"gzip\";\nbereq.filters = \"gunzip, gzip\";\n```\n\n----------------------------------------\n\nTITLE: VCL Operator Precedence Rules\nDESCRIPTION: Comprehensive list of VCL operator precedence rules from highest to lowest precedence, including atomic operations, arithmetic operations, comparisons, and boolean operations. The rules are specifically designed for HTTP-centric operations with specialized types like TIME and DURATION.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/vcl_expr.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nAtomic\n\t'true', 'false', constants\n\n\tfunction calls\n\n\tvariables\n\n\t'(' expression ')'\n\nMultiply/Divide\n\tINT * INT\n\n\tINT / INT\n\n\tDURATION * REAL\n\nAdd/Subtract\n\tSTRING + STRING\n\n\tINT +/- INT\n\n\tTIME +/- DURATION\n\n\tTIME - TIME\n\n\tDURATION +/- DURATION\n\nComparisons\n\t'==', '!=', '<', '>', '~' and '!~'\n\n\tstring existence check (-> BOOL)\n\nBoolean not\n\t'!'\n\nBoolean and\n\t'&&'\n\nBoolean or\n\t'||'\n```\n\n----------------------------------------\n\nTITLE: Configuring Abstract Socket Backend in VCL\nDESCRIPTION: Demonstrates how to configure a backend using an abstract socket in VCL. This new feature allows connecting to abstract sockets on Linux systems.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.3.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nbackend miro {\n  .path = \"@miro\";\n}\n```\n\n----------------------------------------\n\nTITLE: Object and Method Declarations in vmod.vcc\nDESCRIPTION: Shows how to declare objects and methods in vmod.vcc. This enables object-oriented patterns in VMOD development where instances can be created and methods called on them.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_9\n\nLANGUAGE: vcc\nCODE:\n```\n$Object class(...)\n$Method .method(...)\n```\n\n----------------------------------------\n\nTITLE: Using varnishadm with Example Commands\nDESCRIPTION: Examples demonstrating different ways to use the varnishadm utility to connect to a Varnish instance and execute commands. These examples show direct command execution, piping commands through stdin, and executing commands over SSH.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishadm.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvarnishadm -T localhost:999 -S /var/db/secret vcl.use foo\necho vcl.use foo | varnishadm -T localhost:999 -S /var/db/secret\necho vcl.use foo | ssh vhost varnishadm -T localhost:999 -S /var/db/secret\n```\n\n----------------------------------------\n\nTITLE: Filtering Backend Requests with varnishtop in Varnish Cache\nDESCRIPTION: Command to display the most frequently requested URLs from Varnish to backend servers, using the BereqURL filter parameter with varnishtop.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/operation-statistics.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvarnishtop -i BereqURL\n```\n\n----------------------------------------\n\nTITLE: Custom Format for varnishncsa\nDESCRIPTION: Shows how to use the new custom format %{Varnish:default_format}x in varnishncsa to enhance the default output format without having to repeat it.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.5.rst#2025-04-17_snippet_5\n\nLANGUAGE: VCL\nCODE:\n```\nvarnishncsa -F \"%{Varnish:default_format}x %{Varnish:handling}x\"\n```\n\n----------------------------------------\n\nTITLE: Defining Named Shared Probe in VCL\nDESCRIPTION: Shows how to create a named probe that can be shared between multiple backends. The probe is defined separately and referenced in backend configurations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-probe.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nprobe light {\n    [...]\n}\n\nbackend foo {\n    .probe = light;\n}\n\nbackend bar {\n    .probe = light;\n}\n```\n\n----------------------------------------\n\nTITLE: Using bereq Object in VCL\nDESCRIPTION: The bereq object represents the backend request. It is constructed based on the req object before being sent to the backend server.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-variables.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\n// bereq object is used when sending requests to the backend\n```\n\n----------------------------------------\n\nTITLE: Overriding Cookie Handling in Varnish Cache VCL\nDESCRIPTION: This snippet demonstrates how to bypass the default cookie handling behavior in vcl_recv without affecting other default behaviors. It uses the vcl_req_cookie assistant subroutine.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-built-in-code.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_req_cookie {\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Varnishd Basic Command Syntax\nDESCRIPTION: Basic command-line syntax for starting the Varnish daemon with various configuration options like listener address, backend host, config files, and operational parameters.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishd.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvarnishd [-a [name=][listen_address[,PROTO|,option=value,...]]\n    [-b [host[:port]|path]]\n    [-C]\n    [-d]\n    [-F]\n    [-f config]\n    [-h type[,options]]\n    [-I clifile]\n    [-i identity]\n    [-j jail[,jailoptions]]\n    [-l vsl]\n    [-M address:port]\n    [-n workdir]\n    [-P file]\n    [-p param=value]\n    [-r param[,param...]]\n    [-S secret-file]\n    [-s [name=]kind[,options]]\n    [-T address[:port]]\n    [-t TTL]\n    [-V]\n    [-W waiter]\n```\n\n----------------------------------------\n\nTITLE: Fail Action Example - VCL\nDESCRIPTION: Example of the fail action usage which handles fatal errors by transitioning to vcl_synth with connection close and state rollback.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-step.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nreturn(fail)\n```\n\n----------------------------------------\n\nTITLE: Setting Backend Preamble in VCL\nDESCRIPTION: Demonstrates how to send a BLOB on all newly opened connections to the backend.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_12\n\nLANGUAGE: vcl\nCODE:\n```\n.preamble = :SGVsbG8gV29ybGRcbgo=:;\n```\n\n----------------------------------------\n\nTITLE: Basic User-Agent Detection in VCL\nDESCRIPTION: Simple example of detecting iPhone devices using User-Agent string and setting a custom header.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/devicedetection.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    if (req.http.User-Agent ~ \"(?i)iphone\" {\n        set req.http.X-UA-Device = \"mobile-iphone\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Backend Connections in VCL\nDESCRIPTION: Demonstrates how to limit the number of simultaneous connections Varnish can open to a backend.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_8\n\nLANGUAGE: vcl\nCODE:\n```\n.max_connections = 1000;\n```\n\n----------------------------------------\n\nTITLE: Enabling VCL Trace Logging\nDESCRIPTION: Command to enable VCL trace logging which generates log records with line and character number for each executed VCL statement. This helps with debugging issues in VCL configuration.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/bugs.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvarnishadm param.set vsl_mask +VCL_trace\n```\n\n----------------------------------------\n\nTITLE: Creating and Using VMOD Objects in VCL\nDESCRIPTION: Demonstrates creating an instance of a VMOD object in vcl_init and calling its methods in VCL code. Objects have a lifetime matching the VCL and are initialized during vcl_init.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_10\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_init {\n\tnew foo = vmod.class(...);\n}\n\nsub somewhere {\n\tfoo.method(...);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Prefetch Policy in VCL\nDESCRIPTION: VCL subroutine for handling prefetch requests based on object usage and TTL\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/firstdesign.rst#2025-04-17_snippet_9\n\nLANGUAGE: vcl\nCODE:\n```\nsub prefetch_policy {\n\n    if (obj.usage < 10 && obj.ttl < 5m) {\n        fetch\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Transparent Hugepage on Linux for Varnish Cache\nDESCRIPTION: Command to disable Transparent Hugepage (THP) support at runtime on Linux systems to prevent instabilities with Varnish Cache.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/platformnotes.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho never > /sys/kernel/mm/transparent_hugepage/enabled\n```\n\n----------------------------------------\n\nTITLE: Activating a VCL Program\nDESCRIPTION: This command activates a previously loaded VCL program. It shows how to use the vcl.use command to make a specific VCL configuration active.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_cli.rst#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nvarnish> vcl.use some_name\n```\n\n----------------------------------------\n\nTITLE: Using Purge Functionality in VCL\nDESCRIPTION: Example of using the new purge functionality in VCL to remove an object and all its variants from the cache.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_39\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_recv {\n    if (req.request == \"PURGE\") {\n        return(purge);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Ban Expression with Duration Comparisons in VCL\nDESCRIPTION: This snippet demonstrates how to create a ban expression using the new duration comparison operators and object properties in Varnish 6.2. It bans objects with TTL over 5 hours and keep time over 3 hours.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.2.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nobj.ttl > 5h && obj.keep > 3h\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Connection for Backend in Varnish VCL\nDESCRIPTION: This snippet shows how to configure a backend to connect through a proxy using the PROXY2 protocol in VCL. It's useful for scenarios like TLS-encrypted connections through a TLS onloader.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-backends.rst#2025-04-17_snippet_4\n\nLANGUAGE: VCL\nCODE:\n```\nbackend sslon {\n  .path = \"/path/to/sslon\";\n}\n\nbackend destination {\n  .host = \"my.https.service\";\n  .port = \"443\";\n  .via = sslon;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Return Action Syntax in VCL\nDESCRIPTION: New syntax implementation for making VCL function return behavior more explicit. The return(action) syntax was added while maintaining backward compatibility with the old syntax.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_43\n\nLANGUAGE: vcl\nCODE:\n```\nreturn(action)\n```\n\n----------------------------------------\n\nTITLE: Specifying Full HTTP Request for Probe in VCL\nDESCRIPTION: Shows how to configure a full HTTP/1.1 request to be sent as a health probe. This allows for custom headers and request structure.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-probe.rst#2025-04-17_snippet_4\n\nLANGUAGE: VCL\nCODE:\n```\n.request = \"GET / HTTP/1.1\"\n    \"Host: example.com\"\n    \"X-Magic: We're fine with this.\"\n    \"Connection: close\";\n```\n\n----------------------------------------\n\nTITLE: GeoIP-based Content Hashing Setup\nDESCRIPTION: Example of custom hashing implementation using GeoIP information to serve country-specific content.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-hashing.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nset req.http.X-Country-Code = geoip.lookup(client.ip);\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Timeout Attributes in VCL\nDESCRIPTION: Shows how to set various timeout attributes for backend connections and requests.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_7\n\nLANGUAGE: vcl\nCODE:\n```\n.connect_timeout = 1.4s;\n.first_byte_timeout = 20s;\n.between_bytes_timeout = 10s;\n```\n\n----------------------------------------\n\nTITLE: VCL Host-Based Routing Logic\nDESCRIPTION: Example VCL code showing how to route requests to different VCL configurations based on the host header using VCL labels.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-5.1.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    if (req.http.host ~ \"asite.example.com$\") {\n        return(vcl(siteA));\n    }\n    if (req.http.host ~ \"bsite.example.com$\") {\n        return(vcl(siteB));\n    }\n    if (req.http.host ~ \"csite.example.com$\") {\n        return(vcl(siteC));\n    }\n    // Main site processing ...\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Varnish Configuration in VCL\nDESCRIPTION: A modified VCL configuration pointing to the Varnish Cache official website as the backend server.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/tutorial/starting_varnish.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nvcl 4.0;\n\nbackend default {\n    .host = \"www.varnish-cache.org\";\n    .port = \"80\";\n}\n```\n\n----------------------------------------\n\nTITLE: Default VCL Hash Function in Varnish\nDESCRIPTION: The default VCL implementation that defines how Varnish generates hash keys for object lookup based on URL and host information.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/varnish_does_not_hash.rst#2025-04-17_snippet_2\n\nLANGUAGE: varnish\nCODE:\n```\nsub vcl_hash {\n    hash_data(req.url);\n    if (req.http.host) {\n\thash_data(req.http.host);\n    } else {\n\thash_data(server.ip);\n    }\n    return (hash);\n}\n```\n\n----------------------------------------\n\nTITLE: ESI Include Example in HTML\nDESCRIPTION: A simple example of Edge Side Includes (ESI) markup in HTML. This demonstrates how Varnish can compose pages by including content from different sources with potentially different caching policies.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/tutorial/introduction.rst#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<H1>Todays Top News</H1>\n<ESI:include src=\"/topnews\"/>\n```\n\n----------------------------------------\n\nTITLE: Loading a VCL Program\nDESCRIPTION: This command loads a new VCL program from a file. It demonstrates how to use the vcl.load command in the Varnish CLI.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_cli.rst#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nvarnish> vcl.load some_name some_filename\n```\n\n----------------------------------------\n\nTITLE: Setting VCL Variable Examples\nDESCRIPTION: Examples of VCL operations showing how to unset request variables and use filter lists for request bodies.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nunset req.grace\nunset req.ttl\nreq.filters\nbereq.filters\n```\n\n----------------------------------------\n\nTITLE: Creating an ACL with Feature Flags in VCL\nDESCRIPTION: Shows how to create an ACL with feature flags. This example creates an ACL named 'foo' with the -pedantic flag (allowing masks to cover non-zero host-bits) and the +log flag (emitting VSL records for matches).\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_8\n\nLANGUAGE: vcl\nCODE:\n```\nacl foo -pedantic +log {\n    \"firewall.example.com\" / 24;\n}\n```\n\n----------------------------------------\n\nTITLE: Using VMOD Procedure in VCL\nDESCRIPTION: Example of using a VMOD procedure (function returning VOID) as a primary action in VCL code. This demonstrates setting IP TOS field to 32 using the std.set_ip_tos procedure.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_3\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n\tstd.set_ip_tos(32);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 5xx Errors in Backend Response\nDESCRIPTION: VCL configuration to prevent cache insertion when backend returns 5xx errors during background fetch\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-grace.rst#2025-04-17_snippet_3\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n    if (beresp.status >= 500 && bereq.is_bgfetch) {\n        return (abandon);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Probe Parameters in VCL\nDESCRIPTION: Shows how to configure advanced probe parameters including interval, window, threshold, and initial values. These control the backend health shift register behavior.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-probe.rst#2025-04-17_snippet_9\n\nLANGUAGE: VCL\nCODE:\n```\n.interval = 1s;\n.window = 60;\n.threshold = 45;\n.initial = 43;\n```\n\n----------------------------------------\n\nTITLE: VCL Forward Declaration Example\nDESCRIPTION: Demonstrates the new support for forward declaration of backend definitions in VCL.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.0.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_recv {\n    set req.backend_hint = b;\n}\n\nbackend b {\n    .host = \"example.org\";\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting Request Body in VCL\nDESCRIPTION: Demonstrates the new recommended way to dismiss a request body in VCL, replacing the previous method of unsetting the Content-Length header.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.4.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nunset (be)req.body\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Health Probe in VCL\nDESCRIPTION: Example of declaring probes outside of a director in VCL. This new feature allows more flexible configuration of backend health checks.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_35\n\nLANGUAGE: VCL\nCODE:\n```\nprobe health_check {\n    .url = \"/health\";\n    .interval = 5s;\n    .timeout = 1s;\n    .window = 5;\n    .threshold = 3;\n}\n\nbackend server1 {\n    .host = \"backend1.example.com\";\n    .probe = health_check;\n}\n```\n\n----------------------------------------\n\nTITLE: VCL BLOB Representation Example\nDESCRIPTION: Demonstrates the new RFC 8941 syntax for representing BLOBs in VCL using base64 encoding.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.0.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\n:aGVsbG93b3JsZA==:\n```\n\n----------------------------------------\n\nTITLE: Inline VCL Definition with Here Document in Varnish CLI\nDESCRIPTION: Shows how to define an inline VCL using a here document within varnishadm, properly escaped for shell execution.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnish-cli.rst#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvarnishadm vcl.inline test '<< EOF\nvcl 4.0;\n\nbackend be {\n        .host = \"localhost\";\n}\nEOF'\n```\n\n----------------------------------------\n\nTITLE: Banning Cache Content\nDESCRIPTION: This command demonstrates how to ban (invalidate) cache content using a regular expression. It matches URLs ending with .png that contain 'logo'.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_cli.rst#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nvarnish> ban req.url ~ \"logo.*[.]png\"\n```\n\n----------------------------------------\n\nTITLE: Preventing 304 Responses After Pass in VCL\nDESCRIPTION: This VCL snippet demonstrates how to prevent Varnish from sending 304 responses to the client after a pass by removing If-None-Match and If-Modified-Since headers in vcl_pass.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_11\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_pass {\n  # To prevent 304 client responses after a pass.\n  unset req.http.If-None-Match;\n  unset req.http.If-Modified-Since;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Session Timeouts in VCL\nDESCRIPTION: Illustrates how to set various session timeouts in Varnish Cache, including idle send timeout, total send timeout, idle timeout, and linger timeout. These can be read and written in the client context.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_var.rst#2025-04-17_snippet_7\n\nLANGUAGE: vcl\nCODE:\n```\nset sess.timeout_idle = 5s;\n```\n\n----------------------------------------\n\nTITLE: Defining Default Probe for All Backends in VCL\nDESCRIPTION: Illustrates how to define a default probe that applies to all backends without a specific probe configured. This probe is named 'default'.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-probe.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\nprobe default {\n    [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Regular Expression Matching in VCL\nDESCRIPTION: Shows how to perform case-insensitive hostname matching using Perl-compatible regular expressions (PCRE) with the (?i) flag. This example negates the match to identify hosts that don't match the pattern.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\n# If host is NOT example dot com..\nif (req.http.host !~ \"(?i)example\\.com$\") {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Storage Selection in VCL\nDESCRIPTION: Example of choosing a specific storage backend for an object in VCL, demonstrating the new storage selection feature.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_38\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_fetch {\n    if (req.url ~ \"^/large/\") {\n        set beresp.storage = storage.big_files;\n    } else {\n        set beresp.storage = storage.small_files;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TTL and Grace Based on Backend Health in VCL\nDESCRIPTION: This VCL snippet demonstrates how to set shorter TTL and grace periods when the backend is healthy, allowing for fresher responses. For unhealthy backends, it permits the use of older cached responses to reduce load on the troubled backend.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.1.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_recv {\n\t# ...\n\tif (std.healthy(req.backend_hint)) {\n\t\t# Get responses no older than 70s for healthy backends\n\t\tset req.ttl = 60s;\n\t\tset req.grace = 10s;\n\t}\n\n\t# If the backend is unhealthy, then permit cached responses\n\t# that are older than 70s.\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Custom VCL Subroutine\nDESCRIPTION: Demonstrates how to call a custom subroutine from within a built-in VCL subroutine using the call keyword.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_11\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    call pipe_if_local;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend-Specific Probe in VCL\nDESCRIPTION: Demonstrates how to configure a health probe specific to a backend in VCL. The probe is defined within the backend configuration block.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-probe.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nbackend foo {\n    [...]\n    .probe = {\n        [...]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Storage Backend in Varnish\nDESCRIPTION: Syntax for configuring the file storage backend in Varnish. This backend stores objects in virtual memory backed by an unlinked file on disk. Parameters include path, size, granularity, and advice for kernel optimization.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/storage-backends.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfile,path[,size[,granularity[,advice]]]\n```\n\n----------------------------------------\n\nTITLE: Creating Backend Endpoints\nDESCRIPTION: A new struct vrt_endpoint has been added to describe UDS or TCP endpoints for backends. This structure must be passed when creating backends with VRT_new_backend() or VRT_new_backend_clustered().\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.6.rst#2025-04-17_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nstruct vrt_endpoint endpoint = {\n    /* endpoint configuration */\n};\nstruct vrt_backend backend = {\n    .endpoint = &endpoint,\n    /* other backend configuration */\n};\nVRT_new_backend(ctx, &backend);\n```\n\n----------------------------------------\n\nTITLE: Including Multiple VCL Files with Glob Pattern\nDESCRIPTION: Shows how to include multiple VCL files that match a glob pattern. This can only be used with absolute paths or relative paths starting with './'.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_3\n\nLANGUAGE: vcl\nCODE:\n```\ninclude +glob \"/etc/varnish/example.org/*.vcl\";\n```\n\n----------------------------------------\n\nTITLE: Extended Status Code Handling in Varnish VCL\nDESCRIPTION: Shows how to use extended status codes (more than 3 digits) in Varnish to differentiate between specific error cases. The example demonstrates setting a custom 12404 status in vcl_recv and handling it alongside standard 404 errors in vcl_synth.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/vcl-design-patterns/resp-status.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n   if ([...]) {\n       return(synth(12404));\n   }\n}\n\nsub vcl_synth {\n    if (resp.status == 12404) {\n        [...]       // this specific 404\n    } else if (resp.status % 1000 == 404) {\n        [...]       // all other 404's\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Body in VCL Synthetic Response\nDESCRIPTION: Example of response body property usage in vcl_synth for generating synthetic responses.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_var.rst#2025-04-17_snippet_3\n\nLANGUAGE: VCL\nCODE:\n```\nresp.body // Type: BODY\n// Writable from: vcl_synth\n// To produce a synthetic response body, for instance for errors.\n```\n\n----------------------------------------\n\nTITLE: Using an ACL in a Conditional Statement in VCL\nDESCRIPTION: Shows how to use a previously defined ACL in a conditional statement to match client IP addresses.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-syntax.rst#2025-04-17_snippet_3\n\nLANGUAGE: VCL\nCODE:\n```\nif (client.ip ~ local) {\n  return (pipe);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hash Data Function in VCL\nDESCRIPTION: Example of using the new hash_data() function in VCL to replace the deprecated req.hash += syntax for cache key manipulation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_36\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_hash {\n    hash_data(req.url);\n    if (req.http.host) {\n        hash_data(req.http.host);\n    } else {\n        hash_data(server.ip);\n    }\n    return (lookup);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Domain Socket Backend in VCL\nDESCRIPTION: Demonstrates how to specify a Unix domain socket path for a local backend using the .path attribute.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_4\n\nLANGUAGE: vcl\nCODE:\n```\n.path = \"/var/run/http.sock\";\n```\n\n----------------------------------------\n\nTITLE: Using local.socket and local.endpoint in VCL\nDESCRIPTION: Examples of accessing the local.socket and local.endpoint variables in VCL to identify the listener for the current request.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.0.rst#2025-04-17_snippet_3\n\nLANGUAGE: VCL\nCODE:\n```\nlocal.socket == \"foo\"\nlocal.endpoint == \"12.34.56.78:4711\"\n\nlocal.socket == \"bar\"\nlocal.endpoint == \"/path/to/listen.sock\"\n\nlocal.socket == \"a0\"\nlocal.endpoint == \":80\"\n\nlocal.socket == \"a1\"\nlocal.endpoint == \"87.65.43.21\"\n```\n\n----------------------------------------\n\nTITLE: VCL Hash String Variable Usage\nDESCRIPTION: Access to the hash string generation through req.hash variable in VCL, allowing customization of cache key generation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_46\n\nLANGUAGE: vcl\nCODE:\n```\nreq.hash\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Status in VCL\nDESCRIPTION: Demonstrates how to access and modify the HTTP response status code in Varnish Cache. The status code can be read and written in vcl_deliver and vcl_synth contexts. It explains how conditional requests may change a 200 status to 304 based on caching validation rules.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_var.rst#2025-04-17_snippet_5\n\nLANGUAGE: vcl\nCODE:\n```\nresp.status = 200;\n```\n\n----------------------------------------\n\nTITLE: VMOD Unix Access Control Implementation in VCL\nDESCRIPTION: Example showing how to use the unix VMOD to implement access control based on the connecting process's user credentials when connecting over a Unix domain socket.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.0.rst#2025-04-17_snippet_8\n\nLANGUAGE: vcl\nCODE:\n```\nimport unix;\n\nsub vcl_recv {\n\t# Return \"403 Forbidden\" if the connected peer is\n\t# not running as the user \"trusteduser\".\n\tif (unix.user() != \"trusteduser\") {\n\t\treturn( synth(403) );\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Domain Socket Listener in Varnish\nDESCRIPTION: Example of using the -a command-line argument to configure a Unix domain socket listener in Varnish, with options for setting permissions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.0.rst#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nvarnishd -a /path/to/listen.sock,PROXY,user=vcache,group=varnish,mode=660\n```\n\n----------------------------------------\n\nTITLE: Modifying X-Forwarded-For Header for UDS Listeners\nDESCRIPTION: This VCL snippet demonstrates how to replace the 0.0.0.0 IP address added to X-Forwarded-For for UDS listeners with the server.identity value in vcl_backend_fetch.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.0.rst#2025-04-17_snippet_7\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_fetch {\n\t# Assuming that server.identity has been set to an IP\n\t# address with the -i command-line argument.\n\tset bereq.http.X-Forwarded-For\n\t    = regsub(bereq.http-X-Forwarded-For, \"0.0.0.0$\", server.identity);\n\t# ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pass Configuration for Uncacheable Content in VCL\nDESCRIPTION: VCL code to identify and mark specific URL patterns as uncacheable, preventing request coalescing for personal content.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_10\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    if (req.url ~ \"^/this/is/personal/\") {\n      return(pass);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Synth Action Example - VCL\nDESCRIPTION: Example of the synth action usage in VCL which transitions to vcl_synth with preset response status and reason.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-step.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nreturn(synth(503, \"VCL Failed\"))\n```\n\n----------------------------------------\n\nTITLE: Using bereq.task_deadline Variable in VCL\nDESCRIPTION: Shows the usage of the new bereq.task_deadline variable available in vcl_pipe to override the pipe_task_deadline parameter.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.5.rst#2025-04-17_snippet_3\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_pipe {\n    set bereq.task_deadline = 30s;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ESI Processing in VCL\nDESCRIPTION: Simple VCL snippet showing how to enable ESI processing in the backend response subroutine.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/gzip.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n\tset beresp.do_esi = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Country-Code Only Hash Implementation\nDESCRIPTION: Example of vcl_hash that only uses country code for hashing, ignoring URL and host information.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-hashing.rst#2025-04-17_snippet_3\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_hash {\n    hash_data(req.http.X-Country-Code);\n    return(lookup);\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Conditional Backend Fetches in VCL\nDESCRIPTION: VCL code to prevent conditional backend fetches by removing If-None-Match and If-Modified-Since headers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_9\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_fetch {\n    # To prevent conditional backend fetches.\n    unset bereq.http.If-None-Match;\n    unset bereq.http.If-Modified-Since;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Probe Timeout in VCL\nDESCRIPTION: Illustrates how to set the timeout for a health probe. This determines how long Varnish waits for a probe response before considering it failed.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-probe.rst#2025-04-17_snippet_7\n\nLANGUAGE: VCL\nCODE:\n```\n.timeout = 10s;\n```\n\n----------------------------------------\n\nTITLE: Purge Expression Syntax in VCL\nDESCRIPTION: Extended purge functionality allowing for complex matching expressions using HTTP host and URL patterns. Enables targeted purging of cached objects based on regular expressions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_44\n\nLANGUAGE: vcl\nCODE:\n```\npurge req.http.host ~ \"web1.com\" && req.url ~ \"\\\\.png\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Hash Values in VCL\nDESCRIPTION: Demonstrates how to access and encode hash values computed by Varnish for cache lookup in client and backend contexts using the new req.hash and bereq.hash variables along with vmod_blob.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-5.2.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nimport blob;\n\nsub vcl_backend_fetch {\n    # Send the transaction hash to the backend as a hex string\n    set bereq.http.Hash = blob.encode(HEX, blob=bereq.hash);\n}\n\nsub vcl_deliver {\n    # Send the hash in a response header as a base64 string\n    set resp.http.Hash = blob.encode(BASE64, blob=req.hash);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Subroutine in VCL\nDESCRIPTION: Shows how to define a custom subroutine in VCL, which can be used to group code for legibility or reusability.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-syntax.rst#2025-04-17_snippet_5\n\nLANGUAGE: VCL\nCODE:\n```\nsub pipe_if_local {\n  if (client.ip ~ local) {\n    return (pipe);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VCL Return Statement - Hit-for-Pass Implementation\nDESCRIPTION: VCL syntax for implementing hit-for-pass caching behavior with duration parameter\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_27\n\nLANGUAGE: VCL\nCODE:\n```\nreturn(pass(DURATION))\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Command Syntax Examples in Varnish\nDESCRIPTION: Demonstrates basic syntax for Varnish CLI commands, showing how tokenization and quoting work.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnish-cli.rst#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelp banner\n\n\"help\" banner\n```\n\n----------------------------------------\n\nTITLE: Default Varnish Configuration in VCL\nDESCRIPTION: The default Varnish Configuration Language (VCL) setup pointing to a local backend server on port 8080.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/tutorial/starting_varnish.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nvcl 4.0;\n\nbackend default {\n    .host = \"127.0.0.1\";\n    .port = \"8080\";\n}\n```\n\n----------------------------------------\n\nTITLE: Director Configuration with Round Robin Backend Selection\nDESCRIPTION: Example of configuring round-robin backend selection using the vmod_directors in VCL 4.0.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-4.0.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_init {\n    new cluster1 = directors.round_robin();\n    cluster1.add_backend(b1, 1.0);\n    cluster1.add_backend(b2, 1.0);\n}\n\nsub vcl_recv {\n    set req.backend_hint = cluster1.backend();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend with Via Attribute in VCL\nDESCRIPTION: Shows how to set up a backend with a 'via' attribute referencing another backend. This allows for PROXY protocol connections through an intermediate backend.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.3.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nbackend detour {\n    .host = \"...\";\n}\n\nbackend destination {\n    .host = \"...\";\n    .via = detour;\n}\n```\n\n----------------------------------------\n\nTITLE: Uncacheable Content Configuration\nDESCRIPTION: Setting up hit-for-pass objects using beresp.uncacheable in backend response handling.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-4.0.rst#2025-04-17_snippet_4\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n    if (beresp.http.X-No-Cache) {\n        set beresp.uncacheable = true;\n        set beresp.ttl = 120s;\n        return (deliver);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VMOD Proxy TLS Attribute Extraction in VCL\nDESCRIPTION: Demonstrates how to use the proxy VMOD to extract TLV attributes from a PROXYv2 connection, specifically showing how to get the authority (SNI) attribute from a TLS connection.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.0.rst#2025-04-17_snippet_9\n\nLANGUAGE: vcl\nCODE:\n```\nimport proxy;\n\n# Get the authority attribute -- corresponds to the SNI of a TLS\n# connection.\nset req.http.Authority = proxy.authority();\n```\n\n----------------------------------------\n\nTITLE: Accessing Storage Information in VCL\nDESCRIPTION: Demonstrates how to access storage-related information in Varnish Cache, such as free space and used space. These are only available for the malloc stevedore and can be read in both client and backend contexts.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_var.rst#2025-04-17_snippet_8\n\nLANGUAGE: vcl\nCODE:\n```\nset req.http.X-Free-Space = storage.malloc.free_space;\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Servers in VCL\nDESCRIPTION: VCL configuration for defining multiple backend servers with IP addresses, timeouts and bandwidth settings\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/firstdesign.rst#2025-04-17_snippet_7\n\nLANGUAGE: vcl\nCODE:\n```\nsub backends {\n    set backend.vg.ip = {...}\n    set backend.ads.ip = {...}\n    set backend.chat.ip = {...}\n    set backend.chat.timeout = 10s\n    set backend.chat.bandwidth = 2000 MB/s\n    set backend.other.ip = {...}\n}\n\nsub vg_backend {\n    set backend.ip = {10.0.0.1-5}\n    set backend.timeout = 4s \n    set backend.bandwidth = 2000Mb/s\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Hit-for-Miss in VCL Backend Response\nDESCRIPTION: This VCL snippet shows how to set an object to hit-for-miss state based on a custom condition in vcl_backend_response.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/increasing-your-hitrate.rst#2025-04-17_snippet_12\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n  if (beresp.http.X-This-Is == \"personal\") {\n    set beresp.uncacheable = true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Custom HTTP Status Codes in VCL\nDESCRIPTION: Demonstrates how to use extended status codes (VWXYZ format) in VCL for more granular control over synthetic responses.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-var.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_recv {\n    if ([...]) {\n        return synth(12404);\n    }\n}\n\nsub vcl_synth {\n    if (resp.status == 12404) {\n        [...] \t// this specific 404\n    } else if (resp.status % 1000 == 404) {\n        [...] \t// all other 404's\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VCL Syntax - Bereq Background Fetch Check\nDESCRIPTION: New VCL variable to check if current request is a background fetch\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_26\n\nLANGUAGE: VCL\nCODE:\n```\nbereq.is_bgfetch\n```\n\n----------------------------------------\n\nTITLE: Setting Expected HTTP Response Code for Probe in VCL\nDESCRIPTION: Demonstrates how to set the expected HTTP status code for a successful health probe. The default is 200.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-probe.rst#2025-04-17_snippet_5\n\nLANGUAGE: VCL\nCODE:\n```\n.expected_response = 418;\n```\n\n----------------------------------------\n\nTITLE: Instantiating VCL Object with Directors\nDESCRIPTION: Example showing how to instantiate a VCL object using the new keyword to create a round-robin director and add a backend node. Only available in vcl_init context.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_9\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_init {\n    new b = directors.round_robin();\n    b.add_backend(node1);\n}\n```\n\n----------------------------------------\n\nTITLE: Synthetic Response Generation\nDESCRIPTION: Example of creating synthetic responses with custom headers in VCL 4.0.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-4.0.rst#2025-04-17_snippet_3\n\nLANGUAGE: vcl\nCODE:\n```\nif (resp.status == 799) {\n    set resp.status = 200;\n    set resp.http.Content-Type = \"text/plain; charset=utf-8\";\n    synthetic(\"You are \" + client.ip);\n    return (deliver);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling resp Object in VCL\nDESCRIPTION: The resp object represents the HTTP response just before it's delivered to the client. It's typically modified in vcl_deliver to make final adjustments to the response.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-variables.rst#2025-04-17_snippet_3\n\nLANGUAGE: vcl\nCODE:\n```\nvcl_deliver {\n    // Modify resp object here\n}\n```\n\n----------------------------------------\n\nTITLE: Function and Method Scope Restriction\nDESCRIPTION: Shows how to restrict where a VMOD function or method can be called from using the $Restrict directive. This allows limiting function usage to specific VCL subroutines.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_12\n\nLANGUAGE: vcc\nCODE:\n```\n$Restrict scope1 [scope2 ...]\n```\n\n----------------------------------------\n\nTITLE: Conditional URL and Header Manipulation in VCL\nDESCRIPTION: Demonstrates how to use conditionals to modify a request URL and unset a cookie header if a specific URL pattern is matched. This pattern is commonly used for URL correction and cookie cleaning.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nif (req.url == \"/mistyped_url.html\") {\n    set req.url = \"/correct_url.html\";\n    unset req.http.cookie;\n}\n```\n\n----------------------------------------\n\nTITLE: Abandon Action Example - VCL\nDESCRIPTION: Example of the abandon action usage which abandons backend requests and handles error conditions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-step.rst#2025-04-17_snippet_5\n\nLANGUAGE: VCL\nCODE:\n```\nreturn(abandon)\n```\n\n----------------------------------------\n\nTITLE: Setting Backend Connection Queue Parameters in C\nDESCRIPTION: New global parameters and backend properties for controlling backend connection queuing behavior.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.6.rst#2025-04-17_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nbackend_wait_timeout\nbackend_wait_limit\nwait_timeout\nwait_limit\n```\n\n----------------------------------------\n\nTITLE: Controlling ESI Processing in VCL\nDESCRIPTION: Example of using the new beresp.do_esi boolean to control ESI processing, replacing the deprecated esi function.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_37\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_fetch {\n    if (beresp.http.X-Do-ESI) {\n        set beresp.do_esi = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VCL Body Removal Configuration\nDESCRIPTION: Example showing how request body handling can be modified in VCL code by using 'unset bereq.body'. This is used to control when request bodies are sent to backends.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-5.0.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nunset bereq.body\n```\n\n----------------------------------------\n\nTITLE: Validating HTTP Headers with VRT_ValidHdr()\nDESCRIPTION: VRT_ValidHdr() has been added for VMODs to conduct header validation checks, similar to the new header validation feature in Varnish 6.6.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.6.rst#2025-04-17_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nconst char *error = VRT_ValidHdr(hdr);\nif (error != NULL) {\n    // Handle invalid header\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Wait Limit in VCL\nDESCRIPTION: Shows how to set the maximum number of transactions that can queue waiting for a backend connection to become available.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_9\n\nLANGUAGE: vcl\nCODE:\n```\n.wait_limit = 1000;\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Request Timeout Parameters in VCL\nDESCRIPTION: Example showing the structure of backend request timeout configuration variables in VCL. These parameters control connection, first byte, and between bytes timeouts when making requests to backend servers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_var.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nbereq.connect_timeout = 5s;\nbereq.first_byte_timeout = 10s;\nbereq.between_bytes_timeout = 5s;\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Close Expectation for Probe in VCL\nDESCRIPTION: Shows how to set whether the probe expects the backend to close the connection. This affects how probe tasks handle response inspection.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-probe.rst#2025-04-17_snippet_6\n\nLANGUAGE: VCL\nCODE:\n```\n.expect_close = false;\n```\n\n----------------------------------------\n\nTITLE: Default VCL Hit Subroutine\nDESCRIPTION: Default implementation of vcl_hit subroutine that handles cache hits\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-grace.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_hit {\n    return (deliver);\n}\n```\n\n----------------------------------------\n\nTITLE: Banning All Cache Content\nDESCRIPTION: This command shows how to ban all cached content by matching all objects based on their HTTP date header.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_cli.rst#2025-04-17_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nvarnish> ban obj.http.date ~ .*\n```\n\n----------------------------------------\n\nTITLE: Authentication Session Example\nDESCRIPTION: Demonstrates a complete CLI authentication session including challenge-response mechanism and server welcome message.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/cli_protocol.rst#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncritter phk> telnet localhost 1234\\nTrying ::1...\\nTrying 127.0.0.1...\\nConnected to localhost.\\nEscape character is '^]'.\\n107 59\\nixslvvxrgkjptxmcgnnsdxsvdmvfympg\\n\\nAuthentication required.\\n\\nauth 455ce847f0073c7ab3b1465f74507b75d3dc064c1e7de3b71e00de9092fdc89a\\n200 279\\n-----------------------------\\nVarnish Cache CLI 1.0\\n-----------------------------\\nFreeBSD,13.0-CURRENT,amd64,-jnone,-sdefault,-sdefault,-hcritbit\\nvarnish-trunk revision 89a558e56390d425c52732a6c94087eec9083115\\n\\nType 'help' for command list.\\nType 'quit' to close CLI session.\\nType 'start' to launch worker process.\n```\n\n----------------------------------------\n\nTITLE: Preventing Via header generation in VCL\nDESCRIPTION: Shows how to prevent Varnish from generating and forwarding the Via header to the backend in vcl_recv and vcl_backend_fetch subroutines.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.2.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    unset req.http.via;\n}\n\nsub vcl_backend_fetch {\n    unset bereq.http.via;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading VCL Files\nDESCRIPTION: Commands to load separate VCL files for different domains into Varnish Cache.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-separate.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nvcl.load vo_1 /somewhere/vo.vcl\nvcl.load vc_1 /somewhere/vc.vcl\n```\n\n----------------------------------------\n\nTITLE: Capturing Varnish Crash Information\nDESCRIPTION: Command to run Varnish in debug mode while capturing crash output to a file. This helps collect detailed crash information when reproducing an issue.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/bugs.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvarnishd -d <your other arguments> |& tee /tmp/_catch_bug\n```\n\n----------------------------------------\n\nTITLE: Configuring Umem Storage Backend in Varnish\nDESCRIPTION: Syntax for configuring the umem storage backend in Varnish. This backend is an alternative to malloc where libumem is available, with similar configuration aspects.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/storage-backends.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\numem[,size]\n```\n\n----------------------------------------\n\nTITLE: Using vtc.vsl_replay() for Log Replay in VCL\nDESCRIPTION: It is now possible to replay arbitrary log lines with vtc.vsl_replay(), which can help testing log processing utilities.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.1.rst#2025-04-17_snippet_7\n\nLANGUAGE: VCL\nCODE:\n```\nvtc.vsl_replay(\"ReqStart\", \"1234\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Policy in VCL\nDESCRIPTION: VCL subroutine defining caching and request handling policies based on client IP, URLs, user agents and backend response times\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/firstdesign.rst#2025-04-17_snippet_6\n\nLANGUAGE: vcl\nCODE:\n```\nsub request_policy {\n\n    if (client.ip in 10.0.0.0/8) {\n        no-cache\n        finish\n    }\n\n    if (req.url.host ~ \"cnn.no$\") {\n        rewrite s/cnn.no$/vg.no/\n    }\n\n    if (req.url.path ~ \"cgi-bin\") {\n        no-cache\n    }\n\n    if (req.useragent ~ \"spider\") {\n        no-new-cache\n    }\n\n    if (backend.response_time > 0.8s) {\n        set req.ttlfactor = 1.5\n    } elseif (backend.response_time > 1.5s) {\n        set req.ttlfactor = 2.0\n    } elseif (backend.response_time > 2.5s) {\n        set req.ttlfactor = 5.0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Varnish Instance with VCL Backend\nDESCRIPTION: Example showing how to initialize a Varnish instance with a custom name that affects Via headers\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.2.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nvarnish v1 -vcl+backend { ... }\n```\n\n----------------------------------------\n\nTITLE: Using Named Arguments in VCL\nDESCRIPTION: Demonstrates calling a VMOD function with named arguments from VCL code. The arguments can be provided in any order when using named parameters.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_5\n\nLANGUAGE: vcl\nCODE:\n```\nif (debug.match_acl(ip=client.ip, acl=local)) { # ...\n```\n\n----------------------------------------\n\nTITLE: Querying 304 Responses without If-Modified-Since Header in Varnish\nDESCRIPTION: This query checks for responses with a 304 status code that don't have an If-Modified-Since header in the request. It's useful for identifying potentially unnecessary 304 responses.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vsl-query.rst#2025-04-17_snippet_4\n\nLANGUAGE: varnish\nCODE:\n```\nRespStatus == 304 and not ReqHeader:if-modified-since\n```\n\n----------------------------------------\n\nTITLE: Detailed Varnish Log Entry Example\nDESCRIPTION: This code block demonstrates a more detailed set of log entries for a single client request, showing various aspects of the transaction including session opening, request details, and headers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/operation-logging.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n11 SessOpen       c 127.0.0.1 58912 :8080 0.0.0.0 8080 1273698726.933590 14\n11 ReqStart       c 127.0.0.1 58912\n11 ReqMethod      c GET\n11 ReqURL         c /\n11 ReqProtocol    c HTTP/1.1\n11 ReqHeader      c Host: localhost:8080\n11 ReqHeader      c Connection: keep-alive\n```\n\n----------------------------------------\n\nTITLE: Backend Resolution in VCL\nDESCRIPTION: Example showing how to eagerly resolve a backend using the new .resolve() method on BACKEND type.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.5.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\n# eager backend selection\nset bereq.backend = bereq.backend.resolve();\n```\n\n----------------------------------------\n\nTITLE: Collecting Non-Transactional Logs in Varnish\nDESCRIPTION: Examples of collecting non-transactional logs in Varnish before and after version 5.1, demonstrating the use of raw grouping and filtering by vxid.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-5.1.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# before 5.1\nvarnishlog -g raw | awk '$1 == 0'\n\n# from now on\nvarnishlog -g raw -q 'vxid == 0'\n```\n\n----------------------------------------\n\nTITLE: Various Ways to Call a Function with Default Arguments\nDESCRIPTION: Shows different valid ways to call a VMOD function that has default argument values. Demonstrates mixing positional and named arguments and omitting arguments that have defaults.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_7\n\nLANGUAGE: vcl\nCODE:\n```\ndebug.argtest(\"1\", 2.1, \"3a\")\ndebug.argtest(\"1\", two=2.2, three=\"3b\")\ndebug.argtest(\"1\", three=\"3c\", two=2.3)\ndebug.argtest(\"1\", 2.4, three=\"3d\")\ndebug.argtest(\"1\", 2.5)\ndebug.argtest(\"1\", four=6);\n```\n\n----------------------------------------\n\nTITLE: VCL Comment Syntax Examples\nDESCRIPTION: Shows the three different ways to add comments in VCL: single-line comments with // or #, and multi-line comments with /* */. Comments are ignored during compilation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl.rst#2025-04-17_snippet_5\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    // Single line of out-commented VCL.\n    # Another way of commenting out a single line.\n    /*\n        Multi-line block of commented-out VCL.\n    */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Varnish Cache\nDESCRIPTION: Commands for installing the compiled Varnish Cache and updating the shared libraries cache.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nsudo make install\nsudo ldconfig\n```\n\n----------------------------------------\n\nTITLE: Using varnishtop to Monitor URL Requests in Varnish Cache\nDESCRIPTION: Examples of using varnishtop to analyze request patterns, showing how to filter for client-requested URLs, backend-requested URLs, and client request headers using various filter options.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/operation-statistics.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvarnishtop -i ReqURL\n```\n\n----------------------------------------\n\nTITLE: Director Methods Structure Definition in C\nDESCRIPTION: Definition of the 'vdi_methods' structure that defines the interface for a director in Varnish Cache. This structure contains function pointers for various operations a director can implement.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/directors.rst#2025-04-17_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstruct vdi_methods {\n    unsigned                        magic;\n#define VDI_METHODS_MAGIC           0x4ec0c4bb\n    const char                      *type;\n    vdi_http1pipe_f                 *http1pipe;\n    vdi_healthy_f                   *healthy;\n    vdi_resolve_f                   *resolve;\n    vdi_gethdrs_f                   *gethdrs;\n    vdi_getip_f                     *getip;\n    vdi_finish_f                    *finish;\n    vdi_event_f                     *event;\n    vdi_release_f                   *release;\n    vdi_destroy_f                   *destroy;\n    vdi_panic_f                     *panic;\n    vdi_list_f                      *list;\n};\n```\n\n----------------------------------------\n\nTITLE: VCL Language BNF Grammar Definition\nDESCRIPTION: Backus-Naur Form (BNF) grammar definition for the Varnish Configuration Language (VCL). This defines the basic syntax structure including program composition, functions, statements, and control flow constructs that would form the foundation of VCL.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/firstdesign.rst#2025-04-17_snippet_1\n\nLANGUAGE: bnf\nCODE:\n```\nprogram:\tfunction\n\t\t| program function\n\nfunction:\t\"sub\" function_name compound_statement\n\ncompound_statement:\t\"{\" statements \"}\"\n\nstatements:\t/* empty */\n\t\t| statement\n\t\t| statements statement\n\n\nstatement:\tif_statement\n\t\t| call_statement\n\t\t| \"finish\"\n\t\t| assignment_statement\n\t\t| action_statement\n\nif_statement:\t\"if\" condition compound_statement elif_parts else_part\n```\n\n----------------------------------------\n\nTITLE: VCL Header Name Quoting\nDESCRIPTION: Shows how to reference HTTP headers with non-standard names in VCL using quoted syntax.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.0.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nreq.http.\"dotted.name\"\n```\n\n----------------------------------------\n\nTITLE: VCL Log Command Addition\nDESCRIPTION: New VCL log command implementation that emits a VCL_log entry into the shared memory log for debugging and monitoring purposes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_40\n\nLANGUAGE: VCL\nCODE:\n```\nlog \"message\"\n```\n\n----------------------------------------\n\nTITLE: VSL Log Record Example\nDESCRIPTION: An example of Varnish Shared Log (VSL) records showing detailed information about a HTTP request. This includes timestamps, request headers, VCL processing events, and client information, demonstrating Varnish's comprehensive logging capabilities.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/tutorial/introduction.rst#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n*   << Request  >> 318737\n-   Begin          req 318736 rxreq\n-   Timestamp      Start: 1612787907.221931 0.000000 0.000000\n-   Timestamp      Req: 1612787907.221931 0.000000 0.000000\n-   VCL_use        boot\n-   ReqStart       192.0.2.24 39698 a1\n-   ReqMethod      GET\n-   ReqURL         /vmods/\n-   ReqProtocol    HTTP/1.1\n-   ReqHeader      Host: varnish-cache.org\n-   ReqHeader      Accept: text/html, application/rss+xml, […]\n-   ReqHeader      Accept-Encoding: gzip,deflate\n-   ReqHeader      Connection: close\n-   ReqHeader      User-Agent: Mozilla/5.0 […]\n-   ReqHeader      X-Forwarded-For: 192.0.2.24\n-   VCL_call       RECV\n-   VCL_acl        NO_MATCH bad_guys\n-   VCL_return     hash\n[…]\n```\n\n----------------------------------------\n\nTITLE: Performing Matches in Assignments in VCL\nDESCRIPTION: This snippet demonstrates how to perform matches in assignments in Varnish 5.0 VCL, resulting in a boolean value. It shows setting an HTTP header based on a regex match.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-5.0.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nset req.http.foo = req.http.bar ~ \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Response Filter Configuration\nDESCRIPTION: Example of response filters configuration showing how to set VDP filters for response body processing.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_var.rst#2025-04-17_snippet_4\n\nLANGUAGE: VCL\nCODE:\n```\nresp.filters // Type: STRING\n// Readable from: vcl_deliver, vcl_synth\n// Writable from: vcl_deliver, vcl_synth\n// List of VDP filters the resp.body will be pushed through.\n```\n\n----------------------------------------\n\nTITLE: Optional Arguments in VMOD Function Definition\nDESCRIPTION: Shows how to declare a VMOD function with optional arguments in vmod.vcc using square brackets. Optional arguments change how the C implementation receives parameters.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_8\n\nLANGUAGE: vcc\nCODE:\n```\n$Function VOID opt(PRIV_TASK priv, INT four = 4, [STRING opt])\n```\n\n----------------------------------------\n\nTITLE: Configuring GZIP for HTML Content in VCL\nDESCRIPTION: Example VCL configuration that enables GZIP compression specifically for HTML files based on URL pattern matching.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/gzip.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n\tif (bereq.url ~ \"html$\") {\n\t\tset beresp.do_gzip = true;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking VRT_call() Validity\nDESCRIPTION: VRT_check_call() can be used to check if a VRT_call() would succeed, avoiding potential VCL failures. It returns NULL if the call would succeed or an error string if not.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.6.rst#2025-04-17_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nconst char *error = VRT_check_call(ctx, sub);\nif (error == NULL) {\n    VRT_call(ctx, sub);\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Log Format Example for Varnishncsa in RST\nDESCRIPTION: Demonstrates how to use varnishncsa to output logs in JSON format. It includes fields for response size, timestamp, and user agent, using the -j flag to ensure valid JSON output for all inputs.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishncsa.rst#2025-04-17_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\n  varnishncsa -j -F '{\"size\": %b, \"time\": \"%t\", \"ua\": \"%{User-Agent}i\"}'\n```\n\n----------------------------------------\n\nTITLE: Example VarnishTest Script with ESI Processing\nDESCRIPTION: A sample test script demonstrating server simulation, Varnish configuration with ESI processing, and client request testing. Includes gzip handling and response validation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishtest.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nvarnishtest \"#1029\"\n\nserver s1 {\n        rxreq\n        expect req.url == \"/bar\"\n        txresp -gzipbody {[bar]}\n\n        rxreq\n        expect req.url == \"/foo\"\n        txresp -body {<h1>FOO<esi:include src=\"/bar\"/>BARF</h1>}\n\n} -start\n\nvarnish v1 -vcl+backend {\n        sub vcl_backend_response {\n                set beresp.do_esi = true;\n                if (bereq.url == \"/foo\") {\n                        set beresp.ttl = 0s;\n                } else {\n                        set beresp.ttl = 10m;\n                }\n        }\n} -start\n\nclient c1 {\n        txreq -url \"/bar\" -hdr \"Accept-Encoding: gzip\"\n        rxresp\n        gunzip\n        expect resp.bodylen == 5\n\n        txreq -url \"/foo\" -hdr \"Accept-Encoding: gzip\"\n        rxresp\n        expect resp.bodylen == 21\n} -run\n```\n\n----------------------------------------\n\nTITLE: Acquiring and Releasing VCL References in VMOD\nDESCRIPTION: Demonstrates how to acquire and release VCL references in a VMOD to prevent a VCL from going cold too soon when running asynchronous background jobs.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_21\n\nLANGUAGE: C\nCODE:\n```\npriv_vcl->vclref = VRT_VCL_Prevent_Discard(ctx, \"vmod-debug\");\n...\nVRT_VCL_Allow_Discard(&ctx, &priv_vcl->vclref);\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Close Header in VCL\nDESCRIPTION: Example demonstrating how to properly set a Connection: close header for problematic backends while preserving existing connection header values.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.5.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_backend_response {\n    if (beresp.backend == faulty_backend) {\n        if (beresp.http.Connection) {\n            set beresp.http.Connection += \", close\";\n        } else {\n            set beresp.http.Connection = \"close\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom Subroutine in VCL\nDESCRIPTION: Demonstrates how to call a previously defined custom subroutine in VCL using the 'call' keyword.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-syntax.rst#2025-04-17_snippet_6\n\nLANGUAGE: VCL\nCODE:\n```\ncall pipe_if_local;\n```\n\n----------------------------------------\n\nTITLE: VCL Ban Implementation Example\nDESCRIPTION: Demonstrates the new std.ban() implementation pattern with error handling, replacing the deprecated ban() builtin.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.6.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nif (std.ban(...)) {\n  return(synth(200, \"Ban added\"));\n} else {\n  return(synth(400, std.ban_error()));\n}\n```\n\n----------------------------------------\n\nTITLE: Workspace Reservation Function Updates\nDESCRIPTION: New workspace reservation functions replacing the deprecated WS_Reserve(). WS_ReserveAll() reserves all remaining workspace, while WS_ReserveSize() reserves a fixed amount.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nWS_ReserveAll()    // Reserves all remaining workspace\nWS_ReserveSize()   // Reserves fixed amount\nWS_Release()       // Must follow WS_ReserveAll()\n```\n\n----------------------------------------\n\nTITLE: Declaring Verbose ACL in VCL\nDESCRIPTION: VCL snippet showing how to declare an ACL with logging enabled and pedantic mode disabled, mimicking the behavior of ACLs in previous Varnish versions. This overrides the new default settings in Varnish 7.0.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.0.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nacl <name> +log -pedantic { ... }\n```\n\n----------------------------------------\n\nTITLE: Viewing Raw Varnish Logs Using varnishlog\nDESCRIPTION: This command displays the raw logs from Varnish, showing all entries written to the Varnish Shared Log (VSL).\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/operation-logging.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvarnishlog -g raw\n```\n\n----------------------------------------\n\nTITLE: Demonstrating error transition in VCL backend subroutines\nDESCRIPTION: Shows three equivalent ways to use the new 'error' transition in vcl_backend_fetch and vcl_backend_response subroutines. This allows purposely moving to the vcl_backend_error subroutine.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.3.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nreturn (error);\nreturn (error(503));\nreturn (error(503, \"Service Unavailable\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Infinite Timeout in Varnish Parameters\nDESCRIPTION: This snippet shows how to set an infinite timeout for a Varnish parameter using the 'never' value. This is applicable to parameters with the 'timeout' flag.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.5.rst#2025-04-17_snippet_1\n\nLANGUAGE: varnish\nCODE:\n```\nvarnishadm param.set pipe_timeout never\n```\n\n----------------------------------------\n\nTITLE: Using -need-bytes argument with process command in VTC\nDESCRIPTION: Shows the usage of the -need-bytes argument with the process command in VTC scripts. This new feature allows for more precise control over process execution based on byte output.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.1.rst#2025-04-17_snippet_3\n\nLANGUAGE: vtc\nCODE:\n```\n-need-bytes\n```\n\n----------------------------------------\n\nTITLE: User-Agent Normalization\nDESCRIPTION: VCL code for normalizing User-Agent strings before sending to backend, including Vary header management.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/devicedetection.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_recv {\n    # call some detection engine that set req.http.X-UA-Device\n}\n\nsub vcl_miss { if (req.http.X-UA-Device) { set req.http.User-Agent = req.http.X-UA-Device; } }\nsub vcl_pass { if (req.http.X-UA-Device) { set req.http.User-Agent = req.http.X-UA-Device; } }\n\nsub vcl_backend_response {\n    if (bereq.http.X-UA-Device) {\n        if (!beresp.http.Vary) {\n            set beresp.http.Vary = \"X-UA-Device\";\n        } elseif (beresp.http.Vary !~ \"X-UA-Device\") {\n            set beresp.http.Vary = beresp.http.Vary + \", X-UA-Device\";\n        }\n    }\n    set beresp.http.X-UA-Device = bereq.http.X-UA-Device;\n}\n\nsub vcl_deliver {\n    if ((req.http.X-UA-Device) && (resp.http.Vary)) {\n        set resp.http.Vary = regsub(resp.http.Vary, \"X-UA-Device\", \"User-Agent\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Private Task Pointer for VMOD Object Instance\nDESCRIPTION: Shows how to create a private task pointer for a VMOD object instance using VRT_priv_task(). This is used to associate storage with object instances.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nVCL_VOID\nmyvmod_obj_method(VRT_CTX, struct myvmod_obj *o)\n{\n    struct vmod_priv *p;\n\n    p = VRT_priv_task(ctx, o);\n\n    // ... see above\n```\n\n----------------------------------------\n\nTITLE: Backend PROXY Protocol Configuration\nDESCRIPTION: Demonstrates how to configure PROXY protocol for backend requests using the .proxy_header attribute in backend definitions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-5.0.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\n.proxy_header\n```\n\n----------------------------------------\n\nTITLE: Authentication String Construction\nDESCRIPTION: Demonstrates the construction and hex dump of the authentication string used for generating the SHA256 hash.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/cli_protocol.rst#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncritter phk> hexdump -C tmpfile\\n00000000  69 78 73 6c 76 76 78 72  67 6b 6a 70 74 78 6d 63  |ixslvvxrgkjptxmc|\\n00000010  67 6e 6e 73 64 78 73 76  64 6d 76 66 79 6d 70 67  |gnnsdxsvdmvfympg|\\n00000020  0a 66 6f 6f 0a 69 78 73  6c 76 76 78 72 67 6b 6a  |.foo.ixslvvxrgkj|\\n00000030  70 74 78 6d 63 67 6e 6e  73 64 78 73 76 64 6d 76  |ptxmcgnnsdxsvdmv|\\n00000040  66 79 6d 70 67 0a                                 |fympg.|\\n00000046\n```\n\n----------------------------------------\n\nTITLE: Configuring Probe URL Attribute in VCL\nDESCRIPTION: Demonstrates setting the URL attribute for a health probe. This specifies the path to query on the backend server.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-probe.rst#2025-04-17_snippet_3\n\nLANGUAGE: VCL\nCODE:\n```\n.url = \"/health-probe\";\n```\n\n----------------------------------------\n\nTITLE: Using +fold Flag for ACLs in VCL\nDESCRIPTION: Demonstrates the usage of the new +fold flag for ACLs, which merges adjacent subnets together and optimizes out subnets for which there exist another all-encompassing subnet.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.5.rst#2025-04-17_snippet_4\n\nLANGUAGE: VCL\nCODE:\n```\nacl example +fold {\n    \"192.168.0.0\"/24;\n    \"192.168.1.0\"/24;\n}\n```\n\n----------------------------------------\n\nTITLE: Using format_date() Function in VCL\nDESCRIPTION: The cookie.format_rfc1123() function was renamed to cookie.format_date(), with the former retained as a deprecated alias for compatibility.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.1.rst#2025-04-17_snippet_3\n\nLANGUAGE: VCL\nCODE:\n```\nset resp.http.Set-Cookie = cookie.format_date(now, 3600);\n```\n\n----------------------------------------\n\nTITLE: VCL Storage Type Declaration\nDESCRIPTION: New STEVEDORE data type usage in VCL for storage selection\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_29\n\nLANGUAGE: VCL\nCODE:\n```\nstorage.SNAME\nreq.storage\nberesp.storage\n```\n\n----------------------------------------\n\nTITLE: New Backend Declaration Syntax in VCL\nDESCRIPTION: Introduces a new 'none' backend syntax for cases where a backend is needed syntactically but not functionally, useful for VCLs that only pass requests to other VCLs or rely on dynamic backends.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.4.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nbackend dummy none;\n\nsub vcl_recv {\n    set req.backend_hint = dummy;\n}\n```\n\n----------------------------------------\n\nTITLE: Object Declaration with Constructor and Methods\nDESCRIPTION: Shows how to declare a VMOD object with methods in vmod.vcc, including a method with the same name as the constructor. Method naming is up to the VMOD author.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_11\n\nLANGUAGE: vcc\nCODE:\n```\n$Object foo(...)\n$Method .bar(...)\n$Method .foo(...)\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Debian/Ubuntu\nDESCRIPTION: Command to install all required packages for building Varnish Cache from source on Debian or Ubuntu systems.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install \\\n\tmake \\\n\tautomake \\\n\tautotools-dev \\\n\tlibedit-dev \\\n\tlibjemalloc-dev \\\n\tlibncurses-dev \\\n\tlibpcre2-dev \\\n\tlibtool \\\n\tpkg-config \\\n\tpython3-docutils \\\n\tpython3-sphinx \\\n\tcpio\n```\n\n----------------------------------------\n\nTITLE: Varnish Filter Processing Configuration\nDESCRIPTION: Default configuration for beresp.filters showing how various filters (gzip, gunzip, esi, esi_gzip, testgunzip) are added based on response processing requirements.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_var.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\n* gunzip gets added for gzipped content if beresp.do_gunzip or beresp.do_esi are true\n* esi_gzip gets added if beresp.do_esi is true together with beresp.do_gzip or content is already compressed\n* esi gets added if beresp.do_esi is true\n* gzip gets added for uncompressed content if beresp.do_gzip is true\n* testgunzip gets added for compressed content if beresp.do_gunzip is false\n```\n\n----------------------------------------\n\nTITLE: Defining VMOD Private Pointer Methods in C\nDESCRIPTION: Structure definition for VMOD private pointer methods, including a finalization callback function.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_16\n\nLANGUAGE: C\nCODE:\n```\ntypedef void vmod_priv_fini_f(VRT_CTX, void *);\n\nstruct vmod_priv_methods {\n\tunsigned\t\t\tmagic;\n\tconst char\t\t\t*type;\n\tvmod_priv_fini_f\t\t*fini;\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Backend Objects in VCL\nDESCRIPTION: Example of comparing backend objects in VCL using equality operators, which is a new feature in Varnish 5.1.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-5.1.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nif (bereq.backend == foo.backend()) {\n    # do something specific to the foo backends\n}\n```\n\n----------------------------------------\n\nTITLE: Using regsub() Function in VCL\nDESCRIPTION: Shows how to use the regsub() function in VCL for string substitution without needing to escape backslashes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-syntax.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nregsub(\"barf\", \"(b)(a)(r)(f)\", \"\\4\\3\\2p\") -> \"frap\"\n```\n\n----------------------------------------\n\nTITLE: Header and Response Body Concatenation in VCL\nDESCRIPTION: Demonstrates the new += operator for concatenating values to headers and response bodies in VCL.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.4.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\nset resp.http.header += \"string\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Push in VCL for SPDY Protocol\nDESCRIPTION: A hypothetical VCL code snippet demonstrating how server push functionality might be implemented in future versions of Varnish Cache. It shows lookup and conditional pushing of CSS and image files for SPDY requests.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/spdy.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nif (req.proto == \"SPDY\" && req.url ~ \"index.html\") {\n\treq.obj1 = lookup(backend1, \"/main.css\")\n\tif (req.obj1.status == 200) {\n\t\tsess.push(req.obj1, bla, bla, bla);\n\t}\n\treq.obj2 = lookup(backend1, \"/cat.gif\")\n\tif (req.obj1.status == 200) {\n\t\tsess.push(req.obj2, bla, bla, bla);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: VCL Purge URL Function Implementation\nDESCRIPTION: The purge_url VCL function was added to provide the same functionality as the url.purge management command for purging cached content.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_45\n\nLANGUAGE: vcl\nCODE:\n```\npurge_url\n```\n\n----------------------------------------\n\nTITLE: Starting the Worker Process\nDESCRIPTION: This command shows how to start the Varnish worker process using the CLI.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_cli.rst#2025-04-17_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nvarnish> start\n```\n\n----------------------------------------\n\nTITLE: Allocating Private Task State in Varnish VMOD\nDESCRIPTION: Demonstrates allocating private task state in a Varnish VMOD using the top request's workspace. Checks for null pointers and properly allocates memory.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nif (priv->priv == NULL) {\n\tstruct ws *ws;\n\n\tCHECK_OBJ_NOTNULL(ctx->req, REQ_MAGIC);\n\tCHECK_OBJ_NOTNULL(ctx->req->top, REQTOP_MAGIC);\n\tCHECK_OBJ_NOTNULL(ctx->req->top->topreq, REQ_MAGIC);\n\tws = ctx->req->top->topreq->ws;\n\n\tpriv->priv = WS_Alloc(ws, sizeof(struct myfoo));\n\t// ... same as above for PRIV_TASK\n```\n\n----------------------------------------\n\nTITLE: Negative Numerical Expressions in VCL\nDESCRIPTION: Shows how to use negative numbers and negation in VCL numerical expressions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.4.rst#2025-04-17_snippet_3\n\nLANGUAGE: VCL\nCODE:\n```\nset resp.http.ok = -std.integer(\"-200\");\n```\n\n----------------------------------------\n\nTITLE: Cloning Varnish Cache Git Repository\nDESCRIPTION: Command to clone the Varnish Cache source code repository from GitHub for development purposes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/varnishcache/varnish-cache\n```\n\n----------------------------------------\n\nTITLE: Varnishd Documentation Options\nDESCRIPTION: Alternative command syntax for displaying documentation about various Varnish components and parameters\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishd.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvarnishd [-x parameter|vsl|cli|builtin|optstring]\n```\n\n----------------------------------------\n\nTITLE: Adding Flags to VCL Constructs\nDESCRIPTION: New VCL flag syntax for adding flags to constructs like ACLs. Flags can be added with + and removed with -.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_9\n\nLANGUAGE: VCL\nCODE:\n```\nfoo <name> +bar -baz { ... }\n```\n\n----------------------------------------\n\nTITLE: IP Address Comparison in VCL\nDESCRIPTION: Demonstration of comparing IP addresses for equality in VCL, where addresses are equal if they designate equal socket addresses (excluding port numbers).\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-5.1.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nif (client.ip == remote.ip) {\n  call do_if_equal;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Security Context for Memory Locking in YAML\nDESCRIPTION: Demonstrates how to add the CAP_IPC_LOCK capability to a container's security context in Kubernetes to allow memory locking.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vsm.rst#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityContext:\n  capabilities:\n    add:\n      - IPC_LOCK\n```\n\n----------------------------------------\n\nTITLE: Setting Backend Port in VCL\nDESCRIPTION: Shows how to specify the TCP port number or service name separately using the .port attribute.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_3\n\nLANGUAGE: vcl\nCODE:\n```\n.port = \"8081\";\n\n.port = \"http\";\n```\n\n----------------------------------------\n\nTITLE: Updating VDP Filter API in C\nDESCRIPTION: Changes to the Varnish Delivery Processor (VDP) filter API, including new arguments and struct modifications.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.6.rst#2025-04-17_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nVDP_Init(struct busyobj *, intmax_t *)\nstruct vdp_ctx {\n    struct objcore *oc;\n    struct http *hp;\n    intmax_t *clen;\n}\n```\n\n----------------------------------------\n\nTITLE: Updated VRT Function Declarations and API Changes\nDESCRIPTION: Documents changes to core VRT (Varnish Runtime) functions including deprecation of STRING_LIST in favor of STRANDS and modifications to header manipulation functions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nVRT_UnsetHdr()\nVRT_STRANDS_string()\nVRT_ValidHdr()\n```\n\n----------------------------------------\n\nTITLE: VCL-based Mitigation for VSV00003 using Inline C\nDESCRIPTION: A VCL workaround developed by Nils Goroll to mitigate the VSV00003 vulnerability. It uses inline C capabilities to modify normally inaccessible parts of Varnish.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/VSV00003.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\n# No actual code provided in the text, but mentioned as a VCL workaround using inline C\n```\n\n----------------------------------------\n\nTITLE: ESI Remove and HTML Comment Example\nDESCRIPTION: Example showing how to use esi:remove and HTML comments with ESI to provide different content based on whether ESI processing is available or not.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/esi.rst#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<esi:remove>\n  <a href=\"http://www.example.com/LICENSE\">The license</a>\n</esi:remove>\n<!--esi\n<p>The full text of the license:</p>\n<esi:include src=\"http://example.com/LICENSE\" />\n-->\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Domain Socket Backend via Command Line\nDESCRIPTION: Example of using the -b command-line argument to specify a Unix domain socket backend in Varnish.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.0.rst#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ varnishd -b /path/to/backend.sock\n```\n\n----------------------------------------\n\nTITLE: Handling ACL Definition Error in VCL\nDESCRIPTION: This snippet shows the error message displayed when an ACL is used before being defined in Varnish 5.0 VCL. It emphasizes the new requirement to define all VCL objects before use.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-5.0.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nName <acl> is a reserved name\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Servers with -b Argument\nDESCRIPTION: Examples of backend server configuration using the -b argument to specify the HTTP server Varnish will cache for.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/command-line.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-b localhost:81\n-b thatotherserver.example.com:80\n-b 192.168.1.2:80\n```\n\n----------------------------------------\n\nTITLE: Modifying Object API in C\nDESCRIPTION: The ObjWaitExtend() function now has an additional statep argument to optionally return the busy object state.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.6.rst#2025-04-17_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nObjWaitExtend(statep)\n```\n\n----------------------------------------\n\nTITLE: Using New Private Pointer Interface in VMODs\nDESCRIPTION: The interface for private pointers in VMODs has been changed, replacing the free pointer with a pointer to struct vmod_priv_methods and adding a VRT_CTX argument to the fini callback.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.6.rst#2025-04-17_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nstruct vmod_priv_methods methods = {\n    .fini = my_fini_func\n};\nstruct vmod_priv priv = {\n    .priv = my_data,\n    .methods = &methods\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Probe Interval in VCL\nDESCRIPTION: Demonstrates setting the interval between health probes. This determines how frequently Varnish checks the backend's health.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-probe.rst#2025-04-17_snippet_8\n\nLANGUAGE: VCL\nCODE:\n```\n.interval = 1m;\n```\n\n----------------------------------------\n\nTITLE: Configuring PROXY Protocol Support in Varnish\nDESCRIPTION: Example showing how to configure Varnish startup parameters to enable PROXY protocol support on specific listening sockets.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-4.1.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ varnishd -f /etc/varnish/default.vcl -a :6081 -a 127.0.0.1:6086,PROXY\n```\n\n----------------------------------------\n\nTITLE: Director Structure Definition in C\nDESCRIPTION: Definition of the 'director' structure that represents a backend or director instance in Varnish Cache. This structure contains instance-specific data and is used for all types of directors.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/directors.rst#2025-04-17_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nstruct director {\n    unsigned                        magic;\n#define DIRECTOR_MAGIC              0x3336351d\n    void                            *priv;\n    char                            *vcl_name;\n    struct vcldir                   *vdir;\n    struct lock                     *mtx;\n};\n```\n\n----------------------------------------\n\nTITLE: Using VCL_SUB in VMODs\nDESCRIPTION: The VCL_SUB data type is now supported for VMODs to save references to subroutines to be called later using VRT_call(). This allows for safer subroutine calls from different contexts.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.6.rst#2025-04-17_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nVCL_SUB sub = /* subroutine reference */;\nVRT_call(ctx, sub);\n```\n\n----------------------------------------\n\nTITLE: VCL Version Declaration\nDESCRIPTION: VCL version declaration showing support for both vcl 4.0 and vcl 4.1 versions, with vcl 4.1 adding support for Unix Domain Sockets and handling different variable availability between versions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.0.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nvcl 4.0;\n# or\nvcl 4.1;\n```\n\n----------------------------------------\n\nTITLE: Distinguishing UDS Listeners in VCL\nDESCRIPTION: This snippet demonstrates how to use string operations on local.endpoint to determine properties of the UDS path address, allowing different handling for admin and superadmin requests based on the socket path.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.0.rst#2025-04-17_snippet_5\n\nLANGUAGE: vcl\nCODE:\n```\n# admin requests allowed only on the listener whose path ends in\n# \"admin.sock\"\nif (req.url ~ \"^/admin\") {\n\tif (local.endpoint !~ \"admin.sock$\") {\n\t\t# wrong listener, respond with \"403 Forbidden\"\n\t\treturn( synth(403) );\n\t}\n\telse {\n\t\t# process the admin request ...\n\t}\n}\n\n# superadmin requests only allowed on the \"superadmin.sock\" listener\nif (req.url ~ \"^/superadmin\") {\n\tif (local.endpoint !~ \"superadmin.sock$\") {\n\t\treturn( synth(403) );\n\t}\n\telse {\n\t\t# superadmin request ...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive varnishadm Session\nDESCRIPTION: This snippet shows the output of an interactive varnishadm session. It displays the Varnish Cache CLI version, system information, and available commands.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_cli.rst#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncritter phk> ./varnishadm\n200\n-----------------------------\nVarnish Cache CLI 1.0\n-----------------------------\nFreeBSD,13.0-CURRENT,amd64,-jnone,-sdefault,-sdefault,-hcritbit\nvarnish-trunk revision 2bd5d2adfc407216ebaa653fae882d3c8d47f5e1\n\nType 'help' for command list.\nType 'quit' to close CLI session.\nType 'start' to launch worker process.\n\nvarnish>\n```\n\n----------------------------------------\n\nTITLE: Varnish Cache Website Deployment Process\nDESCRIPTION: This shell command sequence illustrates how updates are deployed to the Varnish Cache website. It shows the process of switching to a backup VCL configuration, pulling new changes from git, rebuilding the tools jail, and loading a new VCL configuration without any service interruption.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/dev-guide/homepage_dogfood.rst#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvarnishadm vcl.use backup\n# The 'backup' VCL does a \"pass\" of all traffic to my server\ncd Admin\ngit pull\ncd Tools\nsh build_j_tools.sh |& tee _.bj\nvarnishadm vcl.load foobar varnish-live.vcl\nvarnishadm vcl.use foobar\n```\n\n----------------------------------------\n\nTITLE: Analyzing Accept-Encoding Headers with varnishtop in Varnish Cache\nDESCRIPTION: Command to monitor and rank the most common Accept-Encoding headers sent by clients, using the ReqHeader filter with varnishtop.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/operation-statistics.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvarnishtop -I ReqHeader:Accept-Encoding\n```\n\n----------------------------------------\n\nTITLE: Specifying Port Range for Varnishd Listen Endpoint\nDESCRIPTION: The -a argument to varnishd now supports specifying a numerical port range for listen endpoints.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.6.rst#2025-04-17_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n-a :80-89\n```\n\n----------------------------------------\n\nTITLE: Generated C Function Prototypes from vmod.vcc\nDESCRIPTION: Shows the C function prototypes generated by vmodtool.py from the vmod.vcc file. These are the actual function signatures that must be implemented in the VMOD C code.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nVCL_STRING vmod_toupper(VRT_CTX, VCL_STRANDS);\nVCL_STRING vmod_tolower(VRT_CTX, VCL_STRANDS);\nVCL_VOID vmod_set_ip_tos(VRT_CTX, VCL_INT);\n\nvmod_event_f event_function;\n```\n\n----------------------------------------\n\nTITLE: Deprecated Alias for Object Methods\nDESCRIPTION: Shows the syntax for creating aliases for object methods using the $Alias directive. This maintains backward compatibility when method names change.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_14\n\nLANGUAGE: vcc\nCODE:\n```\n$Alias .deprecated_method object.original_method\n\n[description]\n```\n\n----------------------------------------\n\nTITLE: Using strftime() Function in VCL\nDESCRIPTION: New std.strftime() function for UTC formatting in VCL.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.1.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\nset resp.http.Date = std.strftime(now, \"%a, %d %b %Y %H:%M:%S GMT\");\n```\n\n----------------------------------------\n\nTITLE: VSB Function Replacements in C\nDESCRIPTION: Deprecated VSB_new() and VSB_delete() functions are replaced with VSB_init()/VSB_fini() for static buffers and VSB_new_auto()/VSB_destroy() for dynamic buffers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.0.rst#2025-04-17_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// Old (deprecated)\nVSB_new()\nVSB_delete()\n\n// New replacements\nVSB_init()      // For static buffers\nVSB_fini()      // For static buffers\nVSB_new_auto()  // For dynamic buffers\nVSB_destroy()   // For dynamic buffers\n```\n\n----------------------------------------\n\nTITLE: VCL IP Address Validation Example\nDESCRIPTION: Example VCL code showing potentially risky IP address validation from HTTP headers. Demonstrates how user input could be validated against an ACL using std.ip() function.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/ip_address.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nif (std.ip(req.http.trustme) ~ important_acl) {\n     ...\n}\n```\n\n----------------------------------------\n\nTITLE: VCL Client Identity Configuration\nDESCRIPTION: Implementation of client.identity variable in the client director for backend request routing based on client identification.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_41\n\nLANGUAGE: VCL\nCODE:\n```\nclient.identity\n```\n\n----------------------------------------\n\nTITLE: Defining a macro with arguments in VTC\nDESCRIPTION: Syntax example showing how to define macros with arguments in Varnish Test Cases. Demonstrates the standard format with name and optional comma or space-separated arguments.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vtc.rst#2025-04-17_snippet_1\n\nLANGUAGE: vtc\nCODE:\n```\n${<name>[,<args>...]}\n```\n\n----------------------------------------\n\nTITLE: Server Installation and Configuration Script for Varnish Cache Website\nDESCRIPTION: This shell script sequence demonstrates the complete procedure for setting up a Varnish Cache server from scratch, including system preparation, git repository cloning, host configuration, and jail creation. It represents a fully automated deployment process that can recreate the production environment in 15-30 minutes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/dev-guide/homepage_dogfood.rst#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install FreeBSD (if not already done by hosting)\n# Configure networking (if not already done by hosting)\n# Set the clock\nservice ntpdate forcestart\n# Get git\nenv ASSUME_ALWAYS_YES=yes pkg install git\n# Clone the private git repo\ngit clone ssh://example.com/root/Admin\n# Edit the machines IP numbers in /etc/pf.conf\n# Configure the host\nsh build_host.sh |& tee _.bh\n# Build the jails\nforeach i (Tools Hitch Varnish)\n\t(cd $i ; sh build* |& tee _.bj)\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying an Empty Default Backend in VCL\nDESCRIPTION: Shows how to define an empty, always failing (503) backend when only using dynamic backends created by VMODs.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nbackend default none;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Varnish Name Environment Variable in C\nDESCRIPTION: The VARNISH_DEFAULT_N environment variable now provides the default 'varnish name' / 'workdir' for varnishd and related utilities.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.6.rst#2025-04-17_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nVARNISH_DEFAULT_N\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Files in Varnish VMOD\nDESCRIPTION: Illustrates how to create and use temporary files in a Varnish VMOD using the worker_tmpdir directory. The example creates a temporary file, hides it, uses it, and then closes it.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nstatic void\ntmpfile_example(void) {\n    int fd;\n    char name[] = \"worker_tmpdir/myvmod.XXXXXX\";\n\n    fd = mkstemp(name);\n    if (fd < 0) {\n\t// handle error\n\treturn;\n    }\n\n    // hide file\n    AZ(unlink(name));\n\n    // use fd\n\n    AZ(close(fd));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Pointer Memory Management in C\nDESCRIPTION: Example of allocating and freeing memory for private pointers in a VMOD, using malloc and a custom free function.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nstatic void\nmyfree(VRT_CTX, void *p)\n{\n\tCHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);\n\tfree (p);\n}\n\nstatic const struct vmod_priv_methods mymethods[1] = {{\n\t.magic = VMOD_PRIV_METHODS_MAGIC,\n\t.type = \"mystate\",\n\t.fini = myfree\n}};\n\n// ....\n\nif (priv->priv == NULL) {\n\tpriv->priv = calloc(1, sizeof(struct myfoo));\n\tAN(priv->priv);\n\tpriv->methods = mymethods;\n\tmystate = priv->priv;\n\tmystate->foo = 21;\n\t...\n} else {\n\tmystate = priv->priv;\n}\nif (foo > 25) {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Parameter Value\nDESCRIPTION: This command shows how to change the value of a Varnish parameter using the param.set command.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_cli.rst#2025-04-17_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nvarnish> param.set prefer_ipv6 true\n200\n```\n\n----------------------------------------\n\nTITLE: VMOD Function with Default Argument Values\nDESCRIPTION: Shows how to declare a VMOD function with default values for arguments in vmod.vcc. This allows VCL code to omit some arguments when calling the function.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_6\n\nLANGUAGE: vcc\nCODE:\n```\n$Function STRING argtest(STRING one, REAL two=2, STRING three=\"3\",\n\t\t\t STRING comma=\",\", INT four=4)\n```\n\n----------------------------------------\n\nTITLE: Setting vsl_mask Parameter in VCL\nDESCRIPTION: Demonstrates how to set the vsl_mask parameter, which is now displayed as bits cleared relative to an 'all' value. This change allows for consistent representation of bits parameters.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.5.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\n$ varnishadm param.set -j vsl_mask all,-Debug | jq -r '.[3].value'\nall,-Debug\n```\n\n----------------------------------------\n\nTITLE: VCL Backend Error Return States\nDESCRIPTION: Available return keywords for vcl_backend_error subroutine including fail, abandon, deliver, and retry. Each keyword has specific behavior regarding object caching and backend request handling.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_step.rst#2025-04-17_snippet_4\n\nLANGUAGE: vcl\nCODE:\n```\nfail\\ndeliver\\nabandon\\nretry\n```\n\n----------------------------------------\n\nTITLE: Using VCL Fail Return with VMOD String in Varnish 7.7\nDESCRIPTION: The return (fail(...)) statement in VCL can now accept strings returned from a VMOD, allowing for more dynamic error handling.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.7.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\nreturn (fail(std.fileread(\"/path/to/error/message.txt\")));\n```\n\n----------------------------------------\n\nTITLE: Running varnishadm for CLI Help\nDESCRIPTION: This command runs varnishadm to display help information for the Varnish CLI. It demonstrates the basic usage of varnishadm without any specific command.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_cli.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvarnishadm help\n```\n\n----------------------------------------\n\nTITLE: Example of Low vs High Entropy Keys\nDESCRIPTION: Demonstration of low entropy keys (URLs with minimal differences) versus high entropy keys (URLs with significant differences).\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/varnish_does_not_hash.rst#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLow entropy (1 bit):\n\t/foo/bar/barf/some/cms/content/article?article=2\n\t/foo/bar/barf/some/cms/content/article?article=3\n\nHigh entropy (65 bits):\n\t/i?ee30d0770eb460634e9d5dcfb562a2c5.html\n\t/i?bca3633d52607f38a107cb5297fd66e5.html\n```\n\n----------------------------------------\n\nTITLE: Local Backend Server Configuration in VCL\nDESCRIPTION: Example of configuring a local backend server in Varnish using localhost (127.0.0.1) as the origin server. Sets up the backend to connect to port 8080 on the local machine.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/tutorial/backend_servers.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nvcl 4.0;\n\nbackend default {\n  .host = \"127.0.0.1\";\n  .port = \"8080\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using VRT_handled() for Request Handling\nDESCRIPTION: VRT_handled() has been added to replace direct access to the handling member of VRT_CTX for checking request handling status.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.6.rst#2025-04-17_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nenum handling h = VRT_handled(ctx);\n```\n\n----------------------------------------\n\nTITLE: Extended CHERI Pointer Capabilities Example in C\nDESCRIPTION: Shows detailed CHERI pointer capabilities including bounds setting and permission inspection using printf formatting.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri4.rst#2025-04-17_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <cheriintrin.h>\n#include <stdio.h>\n#include <string.h>\n\nint\nmain()\n{\n    char buf[20];\n    char *ptr1 = cheri_perms_and(buf, CHERI_PERM_LOAD);\n    char *ptr2 = buf;\n    char *ptr3;\n    char *ptr4;\n\n    strcpy(buf, \"Hello World\\n\");\n    //ptr1[5] = '_';    // Will core dump\n    ptr2[5] = '_';    // Works fine.\n    puts(buf);\n    printf(\"buf:\\t%#p\\n\", buf);\n    printf(\"ptr1:\\t%#p\\n\", ptr1);\n    printf(\"ptr2:\\t%#p\\n\", ptr2);\n    ptr3 = ptr2 + 1;\n    printf(\"ptr3:\\t%#p\\n\", ptr3);\n    ptr4 = cheri_bounds_set(ptr3, 4);\n    printf(\"ptr4:\\t%#p\\n\", ptr4);\n    return (0);\n}\n```\n\n----------------------------------------\n\nTITLE: Allocating PRIV_TASK Memory from Workspace in C\nDESCRIPTION: Example of allocating memory for PRIV_TASK private pointers from the workspace in a VMOD.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nif (priv->priv == NULL) {\n\tpriv->priv = WS_Alloc(ctx->ws, sizeof(struct myfoo));\n\tif (priv->priv == NULL) {\n\t\tVRT_fail(ctx, \"WS_Alloc failed\");\n\t\treturn (...);\n\t}\n\tpriv->methods = mymethods;\n\tmystate = priv->priv;\n\tmystate->foo = 21;\n\t...\n```\n\n----------------------------------------\n\nTITLE: VRE API Changes in C\nDESCRIPTION: Complete overhaul of the VRE API for PCRE2 migration, including new matching functions, error handling, and export capabilities.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.0.rst#2025-04-17_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n// New VRE API functions\nVRE_match()    // Simple matching\nVRE_capture()  // Captures matched groups in txt array\nVRE_sub()      // Substitute matches with replacement in VSB\nVRE_error()    // Prints error message in VSB\nVRE_export()   // Packs a usable vre_t for persistence\n\n// Constants\n#define VRE_ERROR_NOMATCH\n#define VRE_CASELESS\n#define VRE_ERROR_LEN\n```\n\n----------------------------------------\n\nTITLE: Defining VCL Enum Type in C\nDESCRIPTION: Example of defining an ENUM type in VCL and its corresponding C representation. ENUMs are passed as constant strings in C.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_15\n\nLANGUAGE: VCL\nCODE:\n```\nENUM { one, two, three } number=\"one\"\n```\n\n----------------------------------------\n\nTITLE: Setting and Capturing feature Parameter in VCL\nDESCRIPTION: Shows how to atomically update and capture feature flags using the param.set command with the -j option. This example demonstrates the new behavior for bits parameters, which are now displayed as absolute values relative to none of the bits being set.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.5.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\n# atomically update and capture feature flags\n$ varnishadm param.set -j feature +http2 | jq -r '.[3].value'\nnone,+http2,+validate_headers\n```\n\n----------------------------------------\n\nTITLE: VCL ABI Declaration\nDESCRIPTION: Example of the new VMOD ABI declaration syntax that specifies whether a module complies with VRT or requires strict version matching. Can be either '$ABI vrt' for VRT compliance or '$ABI strict' for exact version matching.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-5.2.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\n$ABI vrt\n```\n\nLANGUAGE: vcl\nCODE:\n```\n$ABI strict\n```\n\n----------------------------------------\n\nTITLE: Initializing VCL Version Declaration for Varnish 4.1\nDESCRIPTION: Version declaration statement required at the beginning of VCL configuration files in Varnish 4.1. The syntax remains compatible with Varnish 4.0.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-4.1.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nvcl 4.0;\n```\n\n----------------------------------------\n\nTITLE: Defining a haproxy instance in VTC test script\nDESCRIPTION: Shows how to use the 'haproxy' directive in a VTC test script to define, configure, start and stop a haproxy instance. This allows testing of haproxy alongside Varnish.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.1.rst#2025-04-17_snippet_1\n\nLANGUAGE: vtc\nCODE:\n```\nhaproxy\n```\n\n----------------------------------------\n\nTITLE: Unsetting VCL Grace and TTL Variables in Varnish 7.7\nDESCRIPTION: VCL now supports unsetting req.grace and req.ttl to reset these variables to their default 'no effect' values.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.7.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nunset req.grace;\nunset req.ttl;\n```\n\n----------------------------------------\n\nTITLE: VCL Initialization Return States\nDESCRIPTION: Return states available in vcl_init subroutine that control VCL loading process. Used during VMOD initialization.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_step.rst#2025-04-17_snippet_5\n\nLANGUAGE: vcl\nCODE:\n```\nok\\nfail\n```\n\n----------------------------------------\n\nTITLE: Director Release Callback Implementation\nDESCRIPTION: New callback function signature for director implementations that handle backend references. Required for proper memory management during VCL discard operations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.3.rst#2025-04-17_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid vdi_release_f(VCL_BACKEND)\n```\n\n----------------------------------------\n\nTITLE: CHERI-Enabled Memory Allocation in C\nDESCRIPTION: Workspace allocation function using CHERI capabilities to restrict pointer bounds to allocated space.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri5.rst#2025-04-17_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid *\nWS_Alloc(struct ws *ws, unsigned bytes)\n{\n    char *r;\n \n    […]\n    r = ws->f;\n    ws->f += bytes;\n    return(cheri_bounds_set(r, bytes));\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP/2 Stream Handling in Varnishtest\nDESCRIPTION: Demonstrates using the automatic 'next' identifier for HTTP/2 streams when the stream number is not important and handling is done in a single block.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.5.rst#2025-04-17_snippet_6\n\nLANGUAGE: varnishtest\nCODE:\n```\nserver s1 {\n       stream next {\n               rxreq\n               txresp\n       } -run\n} -start\n```\n\n----------------------------------------\n\nTITLE: Modified C Function Signatures for suckaddr Operations\nDESCRIPTION: List of C functions that now return or accept const pointers for memory management and socket operations. Includes new VSA_free() function for deallocating heap memory.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.3.rst#2025-04-17_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nVSA_Clone()\nVSA_getsockname()\nVSA_getpeername()\nVSA_Malloc()\nVSA_Build*()\nVSS_ResolveOne()\nVSS_ResolveFirst()\n```\n\n----------------------------------------\n\nTITLE: Backend Assignment in Varnish 7.1\nDESCRIPTION: Shows the change in backend assignment syntax using VRT_Assign_Backend function instead of direct assignment for reference counting support.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.1.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n-lvalue = expr;\n+VRT_Assign_Backend(&lvalue, expr);\n```\n\n----------------------------------------\n\nTITLE: Using vtc.barrier_sync() in vcl_init\nDESCRIPTION: The vtc.barrier_sync() VMOD function can now be used in vcl_init.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.1.rst#2025-04-17_snippet_4\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_init {\n    vtc.barrier_sync(\"name\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Secret File for Varnish CLI Authentication\nDESCRIPTION: Command to generate a random secret file for Varnish CLI authentication using /dev/random. This file is used for Pre Shared Key (PSK) authentication to secure CLI access.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_security.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/random of=/etc/varnish_secret count=1\n```\n\n----------------------------------------\n\nTITLE: Assigning BLOB to BODY in VCL\nDESCRIPTION: It is now possible to assign a BLOB value to a BODY variable in VCL, in addition to STRING as before.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.1.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nBODY variable = BLOB value;\n```\n\n----------------------------------------\n\nTITLE: Using -keepalive argument with -repeat directive in VTC\nDESCRIPTION: Demonstrates the usage of the -keepalive argument with the -repeat directive in client and server scripts. This keeps the same connection open for all test iterations, improving speed and reducing ephemeral port usage.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.1.rst#2025-04-17_snippet_2\n\nLANGUAGE: vtc\nCODE:\n```\n-keepalive\n```\n\n----------------------------------------\n\nTITLE: NCSA-style Log Format Example\nDESCRIPTION: An example of the NCSA-style log format generated by the varnishncsa utility. This shows how Varnish can produce standardized access logs that are compatible with common log analysis tools.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/tutorial/introduction.rst#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n192.0.2.24 - - [08/Feb/2021:12:42:35 +0000] \"GET http://vmods/ HTTP/1.1\" 200 0 […]\n```\n\n----------------------------------------\n\nTITLE: Declaring a 'None' Backend in Varnish VCL\nDESCRIPTION: This snippet demonstrates how to declare a 'none' backend in VCL. 'None' backends are special and can be used for comparison or to represent no available backend.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-backends.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nbackend default none;\n```\n\n----------------------------------------\n\nTITLE: VNUM Function Updates in C\nDESCRIPTION: Replacement of VNUMpfx() with new SF_Parse functions for number parsing, including new token parsers and structured field number bounds definitions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.0.rst#2025-04-17_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n// New parsing functions\nSF_Parse_Number()   // Parses both decimal and integer numbers\nSF_Parse_Decimal()  // Specialized for decimal parsing\nSF_Parse_Integer()  // Specialized for integer parsing\nVNUM_uint()        // New token parser\nVNUM_hex()         // New token parser\n\n// Structured Fields number bounds\n#define VRT_INTEGER_MIN\n#define VRT_INTEGER_MAX\n#define VRT_DECIMAL_MIN\n#define VRT_DECIMAL_MAX\n```\n\n----------------------------------------\n\nTITLE: VCL ACL Flag Syntax\nDESCRIPTION: Shows the new bit flag syntax for ACL definitions in VCL.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.0.rst#2025-04-17_snippet_3\n\nLANGUAGE: VCL\nCODE:\n```\nacl <name> +log -pedantic { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating VCL Labels\nDESCRIPTION: Commands to create labels that point to loaded VCL configurations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-separate.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nvcl.label l_vo vo_1\nvcl.label l_vc vc_1\n```\n\n----------------------------------------\n\nTITLE: VCL Server IP Address Access\nDESCRIPTION: Variable to access the listening socket's IP address where the client connection was received.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_47\n\nLANGUAGE: vcl\nCODE:\n```\nserver.ip\n```\n\n----------------------------------------\n\nTITLE: Using VSA_getsockname() and VSA_getpeername()\nDESCRIPTION: VSA_getsockname() and VSA_getpeername() functions have been added to get address information of file descriptors.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.6.rst#2025-04-17_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nstruct suckaddr *addr = VSA_getsockname(fd, wsp);\nstruct suckaddr *peer = VSA_getpeername(fd, wsp);\n```\n\n----------------------------------------\n\nTITLE: Basic VCL Backend Configuration\nDESCRIPTION: Minimal VCL configuration example showing how to define a default backend server, equivalent to using the -b argument.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/command-line.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\nbackend default {\n\t.host = \"localhost:81\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic String in VCL\nDESCRIPTION: Demonstrates how to define a basic string in VCL, which is enclosed in double quotes and cannot contain newlines.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-syntax.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\n\"barf\"\n```\n\n----------------------------------------\n\nTITLE: Ban Expression Examples in Varnish\nDESCRIPTION: Provides examples of ban expressions used to filter cached content in Varnish, demonstrating various operators and conditions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnish-cli.rst#2025-04-17_snippet_4\n\nLANGUAGE: vcl\nCODE:\n```\nban req.url == \"/news\"\n\nban req.http.host ~ \"^(?i)(www\\.)?example\\.com$\" && obj.http.set-cookie ~ \"USERID=1663\"\n```\n\n----------------------------------------\n\nTITLE: Multi-line Query with Line Continuation\nDESCRIPTION: Example demonstrating how to break long VSL queries across multiple lines using backslash continuation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vsl-query.rst#2025-04-17_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nBerespStatus \\\n>= \\\n500\n```\n\n----------------------------------------\n\nTITLE: Displaying Varnish Version Information in Terminal\nDESCRIPTION: Example showing how to check the version of Varnish Cache using the varnishd command with the -V flag. The output displays version information and copyright notices.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ /opt/varnish/sbin/varnishd -V\nvarnishd (varnish-7.7.0 revision 1234567)\nCopyright (c) 2006 Verdens Gang AS\nCopyright (c) 2006-2025 Varnish Software\n```\n\n----------------------------------------\n\nTITLE: Varnish Startup Configuration Script\nDESCRIPTION: This snippet demonstrates a sample startup sequence for Varnish. It loads configurations, switches between them, and executes a preload script before resuming operations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/firstdesign.rst#2025-04-17_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nload config /foo/bar startup_conf\nswitch config startup_conf\n!mypreloadscript\nload config /foo/real real_conf\nswitch config real_conf\nresume\n```\n\n----------------------------------------\n\nTITLE: Comparing varnishstat JSON Output Before and After Upgrade\nDESCRIPTION: Shows the change in JSON structure for varnishstat output before and after the upgrade to Varnish 6.5.0. The new version includes a 'version' field and groups counters under a 'counters' object.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.5.rst#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"YYYY-mm-ddTHH:MM:SS\",\n  \"MGT.uptime\": {\n    ...\n  },\n  ...\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 1,\n  \"timestamp\": \"YYYY-mm-ddTHH:MM:SS\",\n  \"counters\": {\n    \"MGT.uptime\": {\n      ...\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VCL Hash Access\nDESCRIPTION: New VCL variables for accessing request hash values. These variables contain the raw binary hash computed by Varnish for cache lookup purposes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-5.2.rst#2025-04-17_snippet_1\n\nLANGUAGE: vcl\nCODE:\n```\nreq.hash\nbereq.hash\n```\n\n----------------------------------------\n\nTITLE: VCL Finalization Return States\nDESCRIPTION: Return states available in vcl_fini subroutine that executes during VCL cleanup and discard operations. Used for VMOD cleanup.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl_step.rst#2025-04-17_snippet_6\n\nLANGUAGE: vcl\nCODE:\n```\nok\n```\n\n----------------------------------------\n\nTITLE: Updating VCL Configurations\nDESCRIPTION: Commands demonstrating how to update individual VCL files and labels.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-separate.rst#2025-04-17_snippet_4\n\nLANGUAGE: vcl\nCODE:\n```\nvcl.load vo_2 /somewhere/vo.vcl\nvcl.label l_vo vo_2\n\nvcl.load top_2 /somewhere/top.vcl\nvcl.use top_2\n```\n\n----------------------------------------\n\nTITLE: Package API Version Defines\nDESCRIPTION: Version defines that specify the Package API/ABI level compatibility for VMODs.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/apispaces.rst#2025-04-17_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define PACKAGE_MAJOR_VERSION       1U\n#define PACKAGE MINOR_VERSION       3U\n```\n\n----------------------------------------\n\nTITLE: Parameter Value Checking in VCL\nDESCRIPTION: Example of parameter value checking and error reporting in Varnish CLI, showing constraints between thread_pool_reserve and thread_pool_min parameters.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.4.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nvarnish> param.show thread_pool_reserve\n200\nthread_pool_reserve\n        Value is: 0 [threads] (default)\n        Maximum is: 95\n\n        [...]\n\nvarnish> param.show thread_pool_min\n200\nthread_pool_min\n        Value is: 100 [threads] (default)\n        Maximum is: 5000\n\n        [...]\n\nvarnish> param.set thread_pool_reserve 100\n106\nMust be no more than 95 (95% of thread_pool_min)\n\n(attempting to set param 'thread_pool_reserve' to '100')\n```\n\n----------------------------------------\n\nTITLE: Removing Spurious Content-Range Headers in VCL\nDESCRIPTION: VCL snippet to remove unexpected Content-Range headers from backend responses that don't correspond to an actual range request. This can be used to avoid consistency check failures when backends add spurious Content-Range headers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.0.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_backend_response {\n    if (!bereq.http.range) {\n        unset beresp.http.content-range;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying VSL for Specific Domain in Varnish\nDESCRIPTION: Example of using varnishtop to filter transactions based on a specific domain using the -q option for querying log records.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-5.1.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvarnishtop -i ReqURL -q 'ReqHeader:Host eq www.example.com'\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Alpine Linux\nDESCRIPTION: Command to install all required dependencies for building Varnish Cache on Alpine Linux.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\napk add -q \\\n    autoconf \\\n    automake \\\n    build-base \\\n    ca-certificates \\\n    cpio \\\n    gzip \\\n    libedit-dev \\\n    libtool \\\n    libunwind-dev \\\n    linux-headers \\\n    pcre2-dev \\\n    py-docutils \\\n    py3-sphinx \\\n    tar \\\n    sudo\n```\n\n----------------------------------------\n\nTITLE: Initial Configuration Notes for Varnish Cache System\nDESCRIPTION: Original design notes from a 2006 meeting detailing the philosophy, deployment scenarios, and technical requirements for the Varnish caching system. The snippet outlines basic configuration parameters and deployment considerations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/firstdesign.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNotes on Varnish\n----------------\n\nCollected 2006-02-02 to 2006-02-..\n\nPoul-Henning Kamp\n\n\nPhilosophy\n----------\n\nIt is not enough to deliver a technically superior piece of software,\nif it is not possible for people to deploy it usefully in a sensible\nway and timely fashion.\n\n\nDeployment scenarios\n--------------------\n\nThere are two fundamental usage scenarios for Varnish: when the\nfirst machine is brought up to offload a struggling backend and\nwhen a subsequent machine is brought online to help handle the load.\n```\n\n----------------------------------------\n\nTITLE: Implementing miss functionality in VCL hit\nDESCRIPTION: Example of how to implement miss functionality in vcl_hit using restart and setting req.hash_always_miss in vcl_recv.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.2.rst#2025-04-17_snippet_0\n\nLANGUAGE: VCL\nCODE:\n```\nreturn (restart);\n```\n\nLANGUAGE: VCL\nCODE:\n```\nset req.hash_always_miss = true;\n```\n\n----------------------------------------\n\nTITLE: Including VTC Files in Varnishtest\nDESCRIPTION: Shows how to include external VTC (Varnish Test Case) fragments into the current test file. Multiple files can be included with no protection against recursive includes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.5.rst#2025-04-17_snippet_7\n\nLANGUAGE: varnishtest\nCODE:\n```\ninclude common-server.vtc common-varnish.vtc\n```\n\n----------------------------------------\n\nTITLE: Managing VCL State in Varnish\nDESCRIPTION: Example demonstrating how to change VCL state using vcl.state command and viewing the results.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-4.1.rst#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nvarnish> vcl.state 62f5275f-a937-4df9-9fbb-c12336bdfdb8 cold\n200\n\nvarnish> vcl.list\n200\navailable  auto/warm       0 boot\navailable  auto/cold       0 62f5275f-a937-4df9-9fbb-c12336bdfdb8\n```\n\n----------------------------------------\n\nTITLE: Maintaining Previous Request Body Behavior in VCL Backend Fetch\nDESCRIPTION: This snippet shows how to maintain the previous behavior of not sending request bodies for GET requests in Varnish 5.0 VCL. It should be added before any return statement in the vcl_backend_fetch subroutine.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-5.0.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\nif (bereq.method == \"GET\") {\n    unset bereq.body;\n}\n```\n\n----------------------------------------\n\nTITLE: VCL Include with Glob Flag\nDESCRIPTION: Demonstrates the new glob flag support for include statements in VCL.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.0.rst#2025-04-17_snippet_4\n\nLANGUAGE: VCL\nCODE:\n```\ninclude +glob \"example.org/*.vcl\";\n```\n\n----------------------------------------\n\nTITLE: Setting VCC features in Varnish 7.2\nDESCRIPTION: Demonstrates how to set VCC features using the new vcc_feature bits parameter, replacing the deprecated individual boolean parameters.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.2.rst#2025-04-17_snippet_0\n\nLANGUAGE: varnish\nCODE:\n```\nparam.set vcc_err_unref off\nparam.set vcc_feature -err_unref\n```\n\n----------------------------------------\n\nTITLE: Caching Stale Responses in Varnish Cache VCL\nDESCRIPTION: This snippet shows how to modify the handling of negative TTL in vcl_backend_response to cache stale responses. It uses the vcl_beresp_stale assistant subroutine to allow caching when the combined TTL and grace period is positive.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-built-in-code.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_beresp_stale {\n    if (beresp.ttl + beresp.grace > 0s) {\n        return;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hash Director Configuration\nDESCRIPTION: Implementation of hash-based backend selection, replacing the previous client director functionality.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-4.0.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\nsub vcl_init {\n    new h = directors.hash();\n    h.add_backend(b1, 1);\n    h.add_backend(b2, 1);\n}\n\nsub vcl_recv {\n    set req.backend_hint = h.backend(client.identity);\n}\n```\n\n----------------------------------------\n\nTITLE: SHA256 Hash Generation\nDESCRIPTION: Shows two equivalent methods of generating the SHA256 hash for authentication using different tools.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/cli_protocol.rst#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncritter phk> sha256 tmpfile\\nSHA256 (tmpfile) = 455ce847f0073c7ab3b1465f74507b75d3dc064c1e7de3b71e00de9092fdc89a\\ncritter phk> openssl dgst -sha256 < tmpfile\\n455ce847f0073c7ab3b1465f74507b75d3dc064c1e7de3b71e00de9092fdc89a\n```\n\n----------------------------------------\n\nTITLE: Varnish Object Header Structure with SHA256 Digest\nDESCRIPTION: C structure showing how compressed keys are stored in the Varnish object header using a fixed-length digest array.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/varnish_does_not_hash.rst#2025-04-17_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstruct objhead {\n\t[...]\n\tunsigned char           digest[DIGEST_LEN];\n};\n```\n\n----------------------------------------\n\nTITLE: VCL Version Declaration\nDESCRIPTION: Required version statement for VCL 4.0 configuration files.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-4.0.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nvcl 4.0;\n```\n\n----------------------------------------\n\nTITLE: Configuring Abstract Socket Backend in VCL\nDESCRIPTION: Shows how to specify an abstract socket name for a local backend using the .path attribute.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-backend.rst#2025-04-17_snippet_5\n\nLANGUAGE: vcl\nCODE:\n```\n.path = \"@mybackend\";\n```\n\n----------------------------------------\n\nTITLE: Listing VCL Configurations in Varnish\nDESCRIPTION: Example showing output of vcl.list command displaying VCL configurations and their states (warm/cold).\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-4.1.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nvarnish> vcl.list\n200\navailable  auto/warm       0 boot\navailable  auto/warm       0 62f5275f-a937-4df9-9fbb-c12336bdfdb8\n```\n\n----------------------------------------\n\nTITLE: Using --optstring for Simplified Varnish Program Wrapper Scripts\nDESCRIPTION: This code snippet demonstrates how to use the --optstring argument with Varnish programs to create simplified wrapper scripts. It shows how to obtain the getopt() specification and use it in a while loop to handle options.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/shell_tricks.rst#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\noptstring=$(varnishfoo --optstring)\n\nwhile getopts \"$optstring\" opt\ndo\n    case $opt in\n    n)\n        # handle $OPTARG\n        ;;\n    # handle other options\n    *)\n        # ignore unneeded options\n        ;;\n    esac\ndone\n\nvarnishfoo \"$@\"\n\n# do something with the options\n```\n\n----------------------------------------\n\nTITLE: VCL Subroutine Call\nDESCRIPTION: Example of calling a VMOD subroutine that returns VCL_SUB data type\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_18\n\nLANGUAGE: VCL\nCODE:\n```\ncall vmod.returning_sub();\n```\n\n----------------------------------------\n\nTITLE: VCL Variable Scope Definition\nDESCRIPTION: Defines the allowed scope for hit/miss status variables in VCL.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\nreq.is_hitmiss // Allowed in: vcl_miss, vcl_deliver, vcl_pass, vcl_synth\nreq.is_hitpass // Allowed in: vcl_pass, vcl_deliver, vcl_synth\n```\n\n----------------------------------------\n\nTITLE: Demonstrating VSB Initialization for Dynamic Allocations in Varnish Cache\nDESCRIPTION: Code example showing the recommended approach for dynamic VSB (Varnish String Buffer) allocations in Varnish 6.5.0. This pattern uses VSB_new_auto() for initialization and VSB_destroy() for cleanup.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nVSB_new_auto() + VSB_destroy()\n```\n\n----------------------------------------\n\nTITLE: Logging Non-Transactional Errors in Varnish\nDESCRIPTION: This query is used to log non-transactional errors in Varnish. It assumes raw grouping mode and checks for transactions with a VXID of 0 that have an error.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vsl-query.rst#2025-04-17_snippet_6\n\nLANGUAGE: varnish\nCODE:\n```\nvxid == 0 and Error\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools on macOS\nDESCRIPTION: Command to install the Xcode command line tools on macOS, required for building software from source.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Multi-line Query Example with Comments\nDESCRIPTION: Example showing how to structure multiple VSL queries with comments and how they are combined with OR operations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vsl-query.rst#2025-04-17_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n# catch varnish errors\n*Error\n\n# catch backend errors\nBerespStatus >= 500\n```\n\n----------------------------------------\n\nTITLE: Setting VCL Header Validation Parameter\nDESCRIPTION: Configuration parameter to disable header validation in VCL when needed as a last resort to avoid VCL failures resulting in 503 responses. Headers are validated against RFC7230 character requirements by default.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.6.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nvalidate_headers = false\n```\n\n----------------------------------------\n\nTITLE: VCL Module Declaration\nDESCRIPTION: Syntax for declaring VCL modules, showing the mandatory description requirement in the $Module line of a vcc file.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-5.0.rst#2025-04-17_snippet_2\n\nLANGUAGE: vcl\nCODE:\n```\n$Module\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Environment for CHERI\nDESCRIPTION: Shell environment configuration to handle package paths and build tools for CHERI-enabled system. Sets up libtoolize and PCRE2 paths to work with both regular and CHERI packages.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri1.rst#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport LIBTOOLIZE=/usr/local64/bin/libtoolize\nexport PCRE2_LIBS=`/usr/local/bin/pcre2-config --libs8`\nexport PCRE2_CFLAGS=`/usr/local/bin/pcre2-config --cflags`\n${SRCDIR}/configure \\\n    [the usual options]\n```\n\n----------------------------------------\n\nTITLE: Using vtc.vsl() for Log Generation in VCL\nDESCRIPTION: It is now possible to generate arbitrary log lines with vtc.vsl(), which can help testing log processing utilities.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.1.rst#2025-04-17_snippet_6\n\nLANGUAGE: VCL\nCODE:\n```\nvtc.vsl(\"RespStatus\", \"200\");\n```\n\n----------------------------------------\n\nTITLE: Detecting Backend Failures or Long ESI Subrequest Processing in Varnish\nDESCRIPTION: This query identifies transactions with backend failures (status 500 or higher) or long processing times for ESI subrequests. It assumes request grouping mode and checks if processing time exceeds 1 second for 2 or more timestamps.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vsl-query.rst#2025-04-17_snippet_5\n\nLANGUAGE: varnish\nCODE:\n```\nBerespStatus >= 500 or {2+}Timestamp:Process[2] > 1.\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Reference Link\nDESCRIPTION: Change log reference link definition in RestructuredText format\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.4.rst#2025-04-17_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _change log: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst\n```\n\n----------------------------------------\n\nTITLE: VCL Default TTL Setting\nDESCRIPTION: Example VCL configuration replacing the deprecated err_ttl parameter with default.vcl settings.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_34\n\nLANGUAGE: VCL\nCODE:\n```\nsub vcl_init { # TTL settings go here }\n```\n\n----------------------------------------\n\nTITLE: Varnishd Help Option\nDESCRIPTION: Simple command syntax to display usage information\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishd.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvarnishd [-?]\n```\n\n----------------------------------------\n\nTITLE: Deprecated Alias for Functions and Methods\nDESCRIPTION: Shows how to create aliases for functions or methods that are being renamed using the $Alias directive. This maintains backward compatibility while transitioning to new function names.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_13\n\nLANGUAGE: vcc\nCODE:\n```\n$Alias deprecated_function original_function\n\n[description]\n```\n\n----------------------------------------\n\nTITLE: Varnishlog Filtering Command\nDESCRIPTION: Command to filter Varnish logs for specific HTTP response status codes using varnishlog utility.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/troubleshooting.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvarnishlog -q 'RespStatus == 503' -g request\n```\n\n----------------------------------------\n\nTITLE: Filtering Varnish Transactions by ID (Varnish 5.1+)\nDESCRIPTION: Examples of using varnishlog to filter transactions by ID for client-side, backend-side, and session requests in Varnish 5.1 and later using the new vxid query option.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-5.1.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# client side\nvarnishlog -d -g session -q 'vxid == 1234'\n\n# backend side\nvarnishlog -d -g session -q 'vxid == 1234'\n\n# session\nvarnishlog -d -g session -q 'vxid == 1234'\n```\n\n----------------------------------------\n\nTITLE: Querying BackendClose Log Records in Varnish\nDESCRIPTION: This snippet demonstrates the change in querying BackendClose log records in Varnish 7.5. The reason field now uses tags instead of descriptions, making queries more reliable.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.5.rst#2025-04-17_snippet_0\n\nLANGUAGE: varnish\nCODE:\n```\n# before\nvarnishlog -q 'BackendClose ~ \"Receive timeout\"'\n\n# after\nvarnishlog -q 'BackendClose[4] eq RX_TIMEOUT'\n```\n\n----------------------------------------\n\nTITLE: VCL Ban Example\nDESCRIPTION: Example showing VCL ban syntax change between versions for comparing request URLs. The new syntax requires explicit string concatenation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_33\n\nLANGUAGE: VCL\nCODE:\n```\nban(\"req.url == \" + req.url)\n```\n\n----------------------------------------\n\nTITLE: Updating Printf Format for CHERI Compatibility\nDESCRIPTION: Modified printf statement to handle wider integer types in CHERI environment using intmax_t cast.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri1.rst#2025-04-17_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nVSB_printf(vsb, \"priv2 = %jd,\\n\", (intmax_t)vfe->priv2);\n```\n\n----------------------------------------\n\nTITLE: Installing Core Build Dependencies on Red Hat/CentOS\nDESCRIPTION: Command to install essential build dependencies for Varnish Cache compilation on Red Hat/CentOS systems.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nyum install -y \\\n\tmake \\\n\tautoconf \\\n\tautomake \\\n\tlibedit-devel \\\n\tlibtool \\\n\tncurses-devel \\\n\tpcre2-devel \\\n\tpkgconfig \\\n\tpython3-docutils \\\n\tcpio\n```\n\n----------------------------------------\n\nTITLE: Transaction Hierarchy Example in VSL Query\nDESCRIPTION: Example showing the hierarchical structure of transactions in request grouping mode, demonstrating different levels of client requests, backend requests, and ESI subrequests.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vsl-query.rst#2025-04-17_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nLvl 1: Client request (cache miss)\n  Lvl 2: Backend request\n  Lvl 2: ESI subrequest (cache miss)\n    Lvl 3: Backend request\n    Lvl 3: Backend request (VCL restart)\n    Lvl 3: ESI subrequest (cache miss)\n      Lvl 4: Backend request\n  Lvl 2: ESI subrequest (cache hit)\n```\n\n----------------------------------------\n\nTITLE: Installing Git on SmartOS Zone\nDESCRIPTION: Command to install git on SmartOS Zone for repository access.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\npkgin in git\n```\n\n----------------------------------------\n\nTITLE: Defining ACL for UDS Listeners\nDESCRIPTION: This snippet shows how to define an ACL that matches local.ip and remote.ip when the listener is UDS by including the 0.0.0.0 IP address.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.0.rst#2025-04-17_snippet_6\n\nLANGUAGE: vcl\nCODE:\n```\n# matches local.ip and remote.ip when the listener is UDS\nacl uds {\n\t\"0.0.0.0\";\n}\n```\n\n----------------------------------------\n\nTITLE: VRT API Version Defines\nDESCRIPTION: Version defines that specify the VRT API/ABI level compatibility for VMODs.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/apispaces.rst#2025-04-17_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define VRT_MAJOR_VERSION       6U\n#define VRT_MINOR_VERSION       2U\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CLI Response Format\nDESCRIPTION: Shows the standard 13-byte response format used by the Varnish CLI protocol, containing status code and body byte count.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/cli_protocol.rst#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n200␣19␣␣␣␣␣␣␤\\nPONG␣1613397488␣1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Varnish Exit Codes\nDESCRIPTION: Specifies the standard exit codes used by Varnish and its bundled tools. Includes basic codes for success (0), system errors (1), and configuration errors (2), plus special master process exit codes using bitwise OR operations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishd.rst#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n0 OK\n1 Some error which could be system-dependent and/or transient\n2 Serious configuration / parameter error\n```\n\n----------------------------------------\n\nTITLE: Setting Panic Buffer Size in Varnish\nDESCRIPTION: The size of the buffer to hold panic messages is now tunable through the new panic_buffer parameter.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.6.rst#2025-04-17_snippet_4\n\nLANGUAGE: C\nCODE:\n```\npanic_buffer\n```\n\n----------------------------------------\n\nTITLE: Body Bytes Access Code Snippet in C\nDESCRIPTION: Code snippet showing the replacement for the removed req->req_bodybytes attribute using ObjGetU64 function, demonstrating how to access request body size after API changes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_25\n\nLANGUAGE: c\nCODE:\n```\nAZ(ObjGetU64(req->wrk, req->body_oc, OA_LEN, &u));\n```\n\n----------------------------------------\n\nTITLE: Listing Test Cases Fixed by Red-Black Tree Adaptation in C\nDESCRIPTION: This code snippet lists the test cases that now pass after updating the Red-Black tree implementation to be compatible with CHERI capabilities. The update involved adding __no_subobject_bounds directives to pointers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri2.rst#2025-04-17_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nRed-Black Trees\n=====================\nTEST tests/b00068.vtc\nTEST tests/c00005.vtc\nTEST tests/e00003.vtc\nTEST tests/e00008.vtc\nTEST tests/e00019.vtc\nTEST tests/l00002.vtc\nTEST tests/l00003.vtc\nTEST tests/l00005.vtc\nTEST tests/m00053.vtc\nTEST tests/r01312.vtc\nTEST tests/r01441.vtc\nTEST tests/r02451.vtc\nTEST tests/s00012.vtc\nTEST tests/u00004.vtc\nTEST tests/u00010.vtc\nTEST tests/v00009.vtc\nTEST tests/v00011.vtc\nTEST tests/v00017.vtc\nTEST tests/v00041.vtc\nTEST tests/v00043.vtc\n```\n\n----------------------------------------\n\nTITLE: Running Varnish Test Suite\nDESCRIPTION: Command to run the Varnish Cache test suite to verify the build is working correctly.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nmake check\n```\n\n----------------------------------------\n\nTITLE: Logging Timestamp Record for Processing Length in Varnishncsa\nDESCRIPTION: Demonstrates how to use varnishncsa to log the entire Timestamp record associated with the processing length of a request.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishncsa.rst#2025-04-17_snippet_3\n\nLANGUAGE: RST\nCODE:\n```\n  varnishncsa -F \"%{VSL:Timestamp:Process}x\"\n```\n\n----------------------------------------\n\nTITLE: Including Varnish Standard Module Documentation in RST\nDESCRIPTION: Directive to include the generated standard Varnish module documentation file with copyright notice and BSD-2-Clause license declaration.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod_std.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nCopyright (c) 2011-2019 Varnish Software AS\nSPDX-License-Identifier: BSD-2-Clause\nSee LICENSE file for full text of license\n\n.. include::\t../include/vmod_std.generated.rst\n```\n\n----------------------------------------\n\nTITLE: VCL Return Statement\nDESCRIPTION: Example of using the return fail statement with VMOD string values in VCL.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nreturn (fail(...))\n```\n\n----------------------------------------\n\nTITLE: Shell Command Usage in varnishtest\nDESCRIPTION: Example showing deprecated err_shell command and its replacement using shell with -err and -expect flags\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-5.1.rst#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nerr_shell command is deprecated, use shell -err -expect instead\n```\n\n----------------------------------------\n\nTITLE: Enabling CRB Repository on Red Hat/CentOS 9\nDESCRIPTION: Commands to enable the CRB repository and install required dependencies for Varnish compilation on Red Hat/CentOS 9.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install -y 'dnf-command(config-manager)'\nsudo dnf config-manager --set-enabled crb\nsudo dnf install -y \\\n        diffutils \\\n        python3-sphinx\n```\n\n----------------------------------------\n\nTITLE: Demonstrating VSB Initialization for Static Buffers in Varnish Cache\nDESCRIPTION: Code example showing the recommended approach for VSB (Varnish String Buffer) initialization with pre-existing buffers in Varnish 6.5.0. This pattern uses VSB_init() with VSB_fini() for cleanup.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nVSB_init() + VSB_fini()\n```\n\n----------------------------------------\n\nTITLE: New VCL Command Pattern\nDESCRIPTION: Example of the new VCL pattern for checking expectations using varnish commands\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_16\n\nLANGUAGE: VCL\nCODE:\n```\nvarnish vNAME -expect PATTERN OP PATTERN\n```\n\n----------------------------------------\n\nTITLE: Sample Varnish Log Output\nDESCRIPTION: This snippet shows example log entries from Varnish, including CLI pings and client request details. Each line represents a different aspect of the logged transaction.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/operation-logging.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n0 CLI            - Rd ping\n0 CLI            - Wr 200 19 PONG 1273698726 1.0\n```\n\n----------------------------------------\n\nTITLE: Installing Varnish Cache from FreeBSD ports\nDESCRIPTION: Commands to install Varnish Cache directly from the FreeBSD ports tree, which allows installing newer versions than what's available in pre-built packages.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_freebsd.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/ports/www/varnish6\nmake all install clean\n```\n\n----------------------------------------\n\nTITLE: Configuring VCL Labels with CLI Commands\nDESCRIPTION: Example CLI commands for loading and labeling multiple VCL configurations during Varnish startup using the new -I cli_file option.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-5.1.rst#2025-04-17_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nvcl.load panic /etc/varnish_panic.vcl\nvcl.load siteA0 /etc/varnish_siteA.vcl\nvcl.load siteB0 /etc/varnish_siteB.vcl\nvcl.load siteC0 /etc/varnish_siteC.vcl\nvcl.label siteA siteA0\nvcl.label siteB siteB0\nvcl.label siteC siteC0\nvcl.load main /etc/varnish_main.vcl\nvcl.use main\n```\n\n----------------------------------------\n\nTITLE: GDB Debugging Session for Varnish\nDESCRIPTION: Example of using GDB to analyze a Varnish core dump, showing how to navigate to the working directory and start a debugging session.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/troubleshooting.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/local/var/varnish/`uname -n`/\ngdb /usr/local/sbin/varnishd core\n```\n\n----------------------------------------\n\nTITLE: Using vtc.workspace_reserve() in VCL\nDESCRIPTION: The vtc.workspace_reserve() VMOD function will now zero memory.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.1.rst#2025-04-17_snippet_5\n\nLANGUAGE: VCL\nCODE:\n```\nvtc.workspace_reserve(client, 1024);\n```\n\n----------------------------------------\n\nTITLE: Complex Linked List Macro Implementation in C\nDESCRIPTION: A complex macro used in Varnish to insert an element before another element in a linked list. The author presents this as an example of complexity that could be simplified with better language features.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/thetoolsweworkwith.rst#2025-04-17_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define VTAILQ_INSERT_BEFORE(listelm, elm, field) do {              \\\n    (elm)->field.vtqe_prev = (listelm)->field.vtqe_prev;            \\\n    VTAILQ_NEXT((elm), field) = (listelm);                          \\\n    *(listelm)->field.vtqe_prev = (elm);                            \\\n    (listelm)->field.vtqe_prev = &VTAILQ_NEXT((elm), field);        \\\n} while (0)\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Debian/Ubuntu for Repository Access\nDESCRIPTION: Command to install git for pulling Varnish Cache from its repository on Debian or Ubuntu systems.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install git\n```\n\n----------------------------------------\n\nTITLE: Enhanced Workspace Structure and Initialization in C\nDESCRIPTION: Extended workspace implementation with safety features including magic numbers, identity field, and buffer overflow detection.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri5.rst#2025-04-17_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define WS_ID_SIZE 4\n\nstruct ws {\n    unsigned        magic;\n#define WS_MAGIC    0x35fac554\n    char            id[WS_ID_SIZE]; /* identity */\n    char            *s;             /* (S)tart of buffer */\n    char            *f;             /* (F)ree/front pointer */\n    char            *r;             /* (R)eserved length */\n    char            *e;             /* (E)nd of buffer */\n};\n\nvoid\nWS_Init(struct ws *ws, const char *id, void *space, unsigned len)\n{\n    unsigned l;\n\n    DSLb(DBG_WORKSPACE,\n        \"WS_Init(%s, %p, %p, %u)\", id, ws, space, len);\n    assert(space != NULL);\n    assert(PAOK(space));\n    INIT_OBJ(ws, WS_MAGIC);\n    ws->s = space;\n    l = PRNDDN(len - 1);\n    ws->e = ws->s + l;\n    memset(ws->e, WS_REDZONE_END, len - l);\n    ws->f = ws->s;\n    assert(id[0] & 0x20);           // cheesy islower()\n    bstrcpy(ws->id, id);\n    WS_Assert(ws);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expression Literal Concatenation in VCL\nDESCRIPTION: Where a regular expression literal is expected, it is now possible to have a concatenation of constant strings. This can be useful for breaking long expressions into multiple lines or including environment-specific parts.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.1.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nre = \"^(\" + include_part + \")$\";\n```\n\n----------------------------------------\n\nTITLE: Here Document Usage in Varnish CLI\nDESCRIPTION: Shows how to use here documents in Varnish CLI for multi-line input, highlighting the requirement for space separation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnish-cli.rst#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvcl.inline test << EOF\nvcl 4.0;\n\nbackend be {\n        .host = \"localhost\";\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Installing Optional SVG Build Dependencies on Debian/Ubuntu\nDESCRIPTION: Command to install graphviz package needed for rebuilding SVG files on Debian or Ubuntu systems.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install graphviz\n```\n\n----------------------------------------\n\nTITLE: Running varnishadm via SSH\nDESCRIPTION: This command demonstrates how to run varnishadm remotely using SSH. It connects to a remote host and executes the varnishadm help command.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_cli.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nssh $hostname varnishadm help\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Only Socket Addresses with VSA_Build in C\nDESCRIPTION: A function that builds a suckaddr structure and returns it as read-only to prevent modification by callers. This demonstrates the pattern of encapsulating socket address complexity while ensuring safety.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri6.rst#2025-04-17_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct suckaddr *\nVSA_Build(void *d, const void *s, unsigned sal)\n{\n    struct suckaddr *sua;\n \n    [… lots of ugly stuff …]\n\n    return (RO(sua));\n}\n```\n\n----------------------------------------\n\nTITLE: Using New Varnishtest Macros\nDESCRIPTION: Examples of new macros available in varnishtest for version and branch information.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_7\n\nLANGUAGE: VCL\nCODE:\n```\n${pkg_version}\n${pkg_branch}\n${topsrc}\n```\n\n----------------------------------------\n\nTITLE: Adding Port Range Resolution Function in C\nDESCRIPTION: A new function VSS_resolver_range() has been added to libvarnish to implement resolution of port ranges.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.6.rst#2025-04-17_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nVSS_resolver_range()\n```\n\n----------------------------------------\n\nTITLE: VCL Discard Command Reference\nDESCRIPTION: Reference to the vcl.discard command used for unloading old VCL configurations, mentioned in context of new warning system for excessive VCL configurations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.1.rst#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nvcl.discard\n```\n\n----------------------------------------\n\nTITLE: Logging VXID of Parent Transaction in Varnishncsa\nDESCRIPTION: Shows how to use varnishncsa to log the second field of the Begin record, which corresponds to the VXID of the parent transaction.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishncsa.rst#2025-04-17_snippet_2\n\nLANGUAGE: RST\nCODE:\n```\n  varnishncsa -F \"%{VSL:Begin[2]}x\"\n```\n\n----------------------------------------\n\nTITLE: CHERI-Enhanced VSB Data Access in C\nDESCRIPTION: String buffer data access function utilizing CHERI capabilities to restrict returned pointer bounds to actual string length.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri5.rst#2025-04-17_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nchar *\nVSB_data(const struct vsb *s)\n{\n\n    assert_VSB_integrity(s);\n    assert_VSB_state(s, VSB_FINISHED);\n\n    return (cheri_bounds_set(s->s_buf, s->s_len + 1));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on macOS with Homebrew\nDESCRIPTION: Command to install dependencies required for building Varnish Cache on macOS using the Homebrew package manager.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nbrew install \\\n\tautoconf \\\n\tautomake \\\n\tpkg-config \\\n\tlibtool \\\n\tdocutils \\\n\tsphinx-doc\n```\n\n----------------------------------------\n\nTITLE: Using Shutdown Command in Varnishtest\nDESCRIPTION: Varnishtest now supports the shutdown command corresponding to the shutdown(2) standard C library call.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.6.rst#2025-04-17_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nshutdown\n```\n\n----------------------------------------\n\nTITLE: Installing VMOD Build Dependencies on Debian/Ubuntu\nDESCRIPTION: Command to install autoconf-archive package recommended for building custom VMODs on Debian or Ubuntu.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install autoconf-archive\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters with Spaces in Varnish CLI\nDESCRIPTION: Demonstrates how to set parameters that contain spaces using proper quoting in varnishadm.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnish-cli.rst#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvarnishadm param.set cc_command '\"my alternate cc command\"'\n```\n\n----------------------------------------\n\nTITLE: Example VCL ACL Comparison Function\nDESCRIPTION: Sample code showing a problematic case where Coccinelle fails to parse struct declarations correctly.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/tools/coccinelle/README.rst#2025-04-17_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic int\nvcl_acl_cmp(const struct acl_e *ae1, const struct acl_e *ae2)\n{\n  // ...\n  m = vmin_t(unsigned, ae1->mask, ae2->mask);\n```\n\n----------------------------------------\n\nTITLE: Format Change in vcl.list Command Output\nDESCRIPTION: Demonstrates the change in output format of the vcl.list command from a 5-column format to a 6-column format with dynamic width and modified label information display.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nstatus\tstate/temperature\tbusy\tname\t[labelinfo]\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nstatus\tstate\ttemperature\tbusy\tname\t[<-|->]\t[info]\n```\n\n----------------------------------------\n\nTITLE: CHERI-Enabled Workspace Initialization in C\nDESCRIPTION: Modified workspace initialization leveraging CHERI capabilities for memory safety, eliminating need for manual buffer overflow detection.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri5.rst#2025-04-17_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid\nWS_Init(struct ws *ws, const char *id, void *space, unsigned len)\n{\n    unsigned l;\n\n    DSLb(DBG_WORKSPACE,\n        \"WS_Init(%s, %p, %p, %u)\", id, ws, space, len);\n    assert(space != NULL);\n    INIT_OBJ(ws, WS_MAGIC);\n    assert(PAOK(space));\n    ws->s = cheri_bounds_set(space, len);\n    ws->e = ws->s + len\n    ws->f = ws->s;\n    assert(id[0] & 0x20);           // cheesy islower()\n    bstrcpy(ws->id, id);\n    WS_Assert(ws);\n}\n```\n\n----------------------------------------\n\nTITLE: VSA_free Implementation with Type Casting for const Compatibility\nDESCRIPTION: Implementation of the VSA_free function showing how to work around the const mismatch with free() by using uintptr_t casting. This allows const pointers to be passed to free() while maintaining type safety elsewhere.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri6.rst#2025-04-17_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid\nVSA_free(const struct suckaddr **vsap)\n{       \n    const struct suckaddr *vsa;\n     \n    AN(vsap);\n    vsa = *vsap;\n    *vsap = NULL;\n    free((char *)(uintptr_t)vsa);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Free_Foo Function in Client Code\nDESCRIPTION: Example of how to call the Free_Foo function from client code, demonstrating the pattern of passing a pointer-to-pointer to allow the function to NULL out the caller's reference.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri6.rst#2025-04-17_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nconst struct foo *foo_ptr;\n[…]\nFree_Foo(&foo_ptr);\n```\n\n----------------------------------------\n\nTITLE: Implementing Timed Lock Acquisition in C\nDESCRIPTION: A code example demonstrating how programmers typically implement timed lock acquisition in threaded code, showing the problem with wall-clock based timeouts.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/thetoolsweworkwith.rst#2025-04-17_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint\nget_lock_timed(lock, timeout)\n{\n\twhile (timeout > 0) {\n\t\tt0 = time();\n\t\ti = get_lock_before(lock, t + timeout));\n\t\tif (i == WASLOCKED)\n\t\t\treturn (i);\n\t\tt1 = time();\n\t\ttimeout -= (t1 - t0);\n\t}\n\treturn (TIMEDOUT);\n}\n```\n\n----------------------------------------\n\nTITLE: SHA256 Digest Examples for Similar URLs\nDESCRIPTION: Demonstration of how SHA256 produces very different digests even for URLs that differ by only a single character.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/varnish_does_not_hash.rst#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n/foo/bar/barf/some/cms/content/article?article=2\n-> 14f0553caa5c796650ec82256e3f111ae2f20020a4b9029f135a01610932054e\n/foo/bar/barf/some/cms/content/article?article=3\n-> 4d45b9544077921575c3c5a2a14c779bff6c4830d1fbafe4bd7e03e5dd93ca05\n```\n\n----------------------------------------\n\nTITLE: Listing the Final Failing Test for SigSegv Handler under CHERI\nDESCRIPTION: Identifies the final failing test case that exercises the signal handling for stack overflow detection, which is redundant under CHERI as CHERI provides this capability natively.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri3.rst#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSigSegv handler test\n=====================\nTEST tests/c00057.vtc\n```\n\n----------------------------------------\n\nTITLE: Disabling Varnish DNF Module on CentOS 8\nDESCRIPTION: This command disables the Varnish DNF module on CentOS 8 systems, which is necessary before installing Varnish packages. This step is required because the DNF module can inhibit Varnish package installation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_redhat.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndnf module disable varnish\n```\n\n----------------------------------------\n\nTITLE: VCL Fail Return Statement\nDESCRIPTION: VCL statement to terminate request processing and return failure\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_28\n\nLANGUAGE: VCL\nCODE:\n```\nreturn(fail)\n```\n\n----------------------------------------\n\nTITLE: New VSL Record Types\nDESCRIPTION: New VSL (Varnish Shared Log) record types added for tracking delivery and filter accounting details.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nVdpAcct\nReqAcct\nPipeAcct\nBereqAcct\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Jail in Varnishd\nDESCRIPTION: A new 'linux' jail has been added and is now the default on Linux systems. It can be configured using the -j argument to varnishd.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.6.rst#2025-04-17_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n-j linux\n```\n\n----------------------------------------\n\nTITLE: VRT Function Renaming in C\nDESCRIPTION: Documentation of VRT function renaming for better clarity. VRT_ref_vcl() and VRT_rel_vcl() have been renamed to VRT_VCL_Prevent_Discard() and VRT_VCL_Allow_Discard() respectively.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.3.rst#2025-04-17_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nVRT_ref_vcl()              // Old name\nVRT_rel_vcl()              // Old name\nVRT_VCL_Prevent_Discard()  // New name\nVRT_VCL_Allow_Discard()    // New name\n```\n\n----------------------------------------\n\nTITLE: Displaying HTTP/2 SETTINGS_MAX_CONCURRENT_STREAMS Specification\nDESCRIPTION: RFC7540 specification excerpt showing the SETTINGS_MAX_CONCURRENT_STREAMS parameter (0x3) that defines stream limits. The specification indicates there is no initial limit, creating a DoS vulnerability.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/h2againagainagain.rst#2025-04-17_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nSETTINGS_MAX_CONCURRENT_STREAMS (0x3):  Indicates the maximum number\n   of concurrent streams that the sender will allow.  This limit is\n   directional: it applies to the number of streams that the sender\n   permits the receiver to create.  Initially, there is no limit to\n   this value.  It is recommended that this value be no smaller than\n   100, so as to not unnecessarily limit parallelism.\n```\n\n----------------------------------------\n\nTITLE: Encapsulation Pattern for Creating Opaque Data Structures in C\nDESCRIPTION: A common design pattern that encapsulates implementation details by having a public interface structure embedded within a private implementation structure. This demonstrates how const interfaces can be created while maintaining private mutable state.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri6.rst#2025-04-17_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct real_foo {\n    struct foo foo;\n    [some metadata about foo]\n};\n\nconst struct foo *\nMake_Foo([arguments])\n{\n    struct real_foo *rf;\n\n    rf = calloc(1, sizeof *rf);\n    if (rf == NULL)\n        return (rf);\n    [fill in rf]\n    return (&rf->foo);\n}\n\nvoid\nFree_Foo(const struct foo **ptr)\n{\n    const struct foo *fp;\n    struct real_foo *rfp;\n\n    assert(ptr != NULL);\n    fp = *ptr;\n    assert(fp != NULL);\n    *ptr = NULL;\n\n    rfp = (struct real_foo*)((uintptr_t)fp);\n    [clean stuff up]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Persistent Storage for CHERI Build\nDESCRIPTION: Configure command to disable persistent storage functionality which is incompatible with CHERI's pointer capabilities.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri1.rst#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n${SRCDIR}/configure \\\n    --without-persistent-storage \\\n    [the usual options]\n```\n\n----------------------------------------\n\nTITLE: Adding vmod_vcs_version.txt to Makefile.am for VMOD developers\nDESCRIPTION: Instructions for VMOD developers using git and automake to include vmod_vcs_version.txt in distribution while ignoring it for source control management.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.7.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nvmod_vcs_version.txt\n```\n\n----------------------------------------\n\nTITLE: Listing Test Cases Affected by Poll Waiter Removal in C\nDESCRIPTION: This code snippet lists the test cases affected by the removal of the -Wpoll argument, which was necessary due to CHERI's restrictions on reading pointers from file descriptors.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri2.rst#2025-04-17_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n-Wpoll\n=====================\nTEST tests/b00009.vtc\nTEST tests/b00048.vtc\nTEST tests/b00054.vtc\nTEST tests/b00059.vtc\nTEST tests/c00080.vtc\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies on FreeBSD\nDESCRIPTION: Command to install optional packages needed to run all test cases for Varnish Cache on FreeBSD.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npkg install haproxy nghttp2 vttest\n```\n\n----------------------------------------\n\nTITLE: Disabling PSK Authentication in Varnish\nDESCRIPTION: Command line argument to disable Pre Shared Key (PSK) authentication for Varnish CLI access. This removes authentication requirements but is not recommended for production use.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_security.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvarnishd [...] -S none [...]\n```\n\n----------------------------------------\n\nTITLE: VMOD Alias Declaration Syntax\nDESCRIPTION: Demonstrates how to declare deprecated aliases for VMOD functions and object methods in the VMOD descriptor.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-7.1.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n$Alias deprecated_function original_function\n\nor\n\n$Alias .deprecated_method object.original_method\n```\n\n----------------------------------------\n\nTITLE: Displaying VSM Chunk Identifier Example in Plaintext\nDESCRIPTION: Shows an example of how VSM chunk identifiers are structured, using the SMA.Transient.c_bytes statistic as an example.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vsm.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSMA.Transient.c_bytes\n```\n\n----------------------------------------\n\nTITLE: Installing Varnish Cache via FreeBSD package\nDESCRIPTION: Command to install Varnish Cache version 6 using FreeBSD's package management system (pkg).\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_freebsd.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npkg install varnish6\n```\n\n----------------------------------------\n\nTITLE: Configuring Varnish Build on Solaris with Solaris Studio Compiler\nDESCRIPTION: Configure command with custom flags for compiling Varnish Cache using the Solaris Studio compiler.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n./configure \\\n        --prefix=/opt/local \\\n        --mandir=/opt/local/man \\\n        CPPFLAGS=\"-I/opt/local/include\" \\\n        CFLAGS=\"-m64\" \\\n        LDFLAGS=\"-L/opt/local/lib -R/opt/local/lib\"\n```\n\n----------------------------------------\n\nTITLE: C Standard Library free() Prototype Signature\nDESCRIPTION: The standard C free() function prototype showing its incompatibility with const pointers, which creates design challenges when trying to make objects read-only.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri6.rst#2025-04-17_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid free(void *ptr);\n```\n\n----------------------------------------\n\nTITLE: C Language Platform Compatibility Check Example\nDESCRIPTION: Example of a legal ISO-C compliant pointer size comparison that demonstrates platform compatibility considerations\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/platforms.rst#2025-04-17_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsizeof(void*) != sizeof(void * const)\n```\n\n----------------------------------------\n\nTITLE: Filtering Varnish Transactions by ID (Pre-5.1)\nDESCRIPTION: Examples of using varnishlog to filter transactions by ID for client-side and backend-side requests before Varnish 5.1.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-5.1.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# client side\nvarnishlog -d -g session -q 'RespHeader:X-Varnish[1] == 1234'\n\n# backend side\nvarnishlog -d -g session -q 'BereqHeader:X-Varnish == 1234'\n```\n\n----------------------------------------\n\nTITLE: Listing Failing Test Cases Due to Workspace Sizes in C\nDESCRIPTION: This code snippet lists the test cases that fail due to workspace size issues when adapting Varnish Cache to CHERI capabilities. These failures are related to memory allocation and object sizing.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri2.rst#2025-04-17_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nWorkspace sizes\n=====================\nTEST tests/c00108.vtc\nTEST tests/r01038.vtc\nTEST tests/r01120.vtc\nTEST tests/r02219.vtc\nTEST tests/o00005.vtc\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on FreeBSD via Package Manager\nDESCRIPTION: Command to install all required dependencies for building Varnish Cache on FreeBSD using the pkg package manager.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npkg install git automake pkgconf py39-sphinx py39-docutils pcre2 libtool\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecated Persistent Storage Backend in Varnish\nDESCRIPTION: Syntax for configuring the deprecated persistent storage backend in Varnish. This experimental feature stores objects in a file to survive shutdowns. Parameters include path and size.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/storage-backends.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndeprecated_persistent,path,size {experimental}\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated Persistent Storage in Varnish Command Line\nDESCRIPTION: Command line argument syntax for using the deprecated persistent storage engine when starting Varnish. The storage engine must be explicitly referenced as 'deprecated_persistent'.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/persistent.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-sdeprecated_persistent,<options>\n```\n\n----------------------------------------\n\nTITLE: HTTP URL Format with IPv6 and Port\nDESCRIPTION: Shows the RFC3986 standard format for HTTP URLs using IPv6 addresses with port numbers, requiring square brackets around the IPv6 address.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/ipv6suckage.rst#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttp://[1080::8:800:200C:417A]:8080/\n```\n\n----------------------------------------\n\nTITLE: Installing Varnish from OpenBSD Ports\nDESCRIPTION: Commands to install Varnish Cache from the OpenBSD ports collection. This method involves navigating to the ports directory and running the make install command.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_openbsd.rst#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd /usr/ports/www/varnish\nmake install\n```\n\n----------------------------------------\n\nTITLE: Displaying JSON Output Format in reStructuredText\nDESCRIPTION: Illustrates the structure of the JSON output format for varnishstat, including the timestamp and field information such as description, flag, format, and value.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishstat.rst#2025-04-17_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n  {\n    \"timestamp\": \"YYYY-MM-DDTHH:mm:SS\",\n    \"FIELD NAME\": {\n      \"description\": \"FIELD DESCRIPTION\",\n      \"flag\": \"FIELD SEMANTICS\", \"format\": \"FIELD DISPLAY FORMAT\",\n      \"value\": FIELD VALUE\n    },\n    \"FIELD NAME\": {\n      \"description\": \"FIELD DESCRIPTION\",\n      \"flag\": \"FIELD SEMANTICS\", \"format\": \"FIELD DISPLAY FORMAT\",\n      \"value\": FIELD VALUE\n    },\n    [..]\n  }\n```\n\n----------------------------------------\n\nTITLE: Displaying Varnish Codebase Line Count Statistics\nDESCRIPTION: A code snippet showing the line count statistics of the Varnish codebase, broken down by file type. This includes the main source code files (.c, .h), Python scripts, VCC and VCL files.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/thatslow.rst#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n75619 lines in .c files\n18489 lines in .h files\n 2625 lines in .py files\n  670 lines in .vcc files\n  501 lines in .vcl files\n```\n\n----------------------------------------\n\nTITLE: Using Dashes in VCL Symbol Names\nDESCRIPTION: Shows the new capability to use dashes in VCL symbol names for subroutines, objects, and storage backends, following the pattern [a-z][a-z0-9_-]*.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-5.2.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nsub my-sub {\n    new my-obj = my_vmod.my_constuctor(storage.my-store);\n}\n\nsub vcl_init {\n    call my-sub;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Workspace Initialization in C\nDESCRIPTION: Simple initialization of workspace pointers without safety checks.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri5.rst#2025-04-17_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nws->s = space;\nws->e = ws->s + len;\nws->f = ws->s;\nws->r = NULL;\n```\n\n----------------------------------------\n\nTITLE: Declaring Statistics Counters in Multi-CPU Environment\nDESCRIPTION: Example showing how statistics counters are declared in a multi-CPU environment, demonstrating potential cache line issues when multiple CPUs try to access adjacent memory locations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/notes.rst#2025-04-17_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nunsigned    n_foo;\nunsigned    n_bar;\n```\n\n----------------------------------------\n\nTITLE: VSL Log Utility Command Options\nDESCRIPTION: New command line option usage for VSL log utilities to handle ESI requests. The -E option now includes both client and ESI requests, replacing the previous -c option functionality.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.6.rst#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-E # Use this instead of -c for including both client and ESI requests\n```\n\n----------------------------------------\n\nTITLE: Varnish-Style VSA_free Implementation with TRUST_ME Macro\nDESCRIPTION: Alternative implementation of VSA_free using Varnish-specific macros for validation and trust boundaries. This shows idiomatic Varnish code for handling safe deallocation of const objects.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri6.rst#2025-04-17_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nvoid\nVSA_free(const struct suckaddr **vsap)\n{\n    const struct suckaddr *vsa;\n\n    TAKE_OBJ_NOTNULL(vsa, vsap, SUCKADDR_MAGIC);\n    free(TRUST_ME(vsa));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Graphviz on Red Hat/CentOS\nDESCRIPTION: Command to install graphviz for rebuilding SVG files on Red Hat/CentOS systems.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nyum install graphviz\n```\n\n----------------------------------------\n\nTITLE: Backend Health Status CLI Syntax Examples in Varnish\nDESCRIPTION: Examples of proposed command-line syntax for checking backend health status in Varnish Cache. The examples show different patterns for selecting backends by name, IP address, and port with varying levels of specificity.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/backends.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbackend.health b1(127.0.0.1:8080,[::1]:8080)\n\nb1\t\t\t\t# The one and only backend b1 or error\n\nb1()\t\t\t\t# All backends named b1\n\nb1(127.0.0.1)\t\t\t# All b1s on IPv4 lookback\n\nb1(:8080)\t\t\t# All b1s on port 8080, (IPv4 or IPv6)\n\nb1(192.168.60.1,192.168.60.2)\t# All b1s on one of those addresses.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating VCL Import Syntax\nDESCRIPTION: Shows the syntax for importing a VMOD (Varnish Module) with a long name using an alias\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/patent.rst#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nimport vmod_with_impractically_long_name as v;\n```\n\n----------------------------------------\n\nTITLE: HTTP Via Header Format Example\nDESCRIPTION: Example showing the expected Via header format using the instance name\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.2.rst#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nVia: 1.1 v1 (Varnish/7.2)\n```\n\n----------------------------------------\n\nTITLE: Updated Varnish Daemon Options for Legacy Debian/Ubuntu\nDESCRIPTION: Modified configuration for /etc/default/varnish with port changed to 80 while keeping other settings the same.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/tutorial/putting_varnish_on_port_80.rst#2025-04-17_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nDAEMON_OPTS=\"-a :80 \\\n               -T localhost:6082 \\\n               -f /etc/varnish/default.vcl \\\n               -S /etc/varnish/secret \\\n               -s default,256m\"\n```\n\n----------------------------------------\n\nTITLE: Enabling PowerTools Repository on Red Hat/CentOS 8\nDESCRIPTION: Commands to enable the PowerTools repository and install required dependencies for Varnish compilation on Red Hat/CentOS 8.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install -y 'dnf-command(config-manager)'\nsudo dnf config-manager --set-enabled powertools\nsudo dnf install -y \\\n        diffutils \\\n        jemalloc-devel \\\n        libunwind-devel \\\n        python3-sphinx\n```\n\n----------------------------------------\n\nTITLE: Implementing Workspace Structure in C\nDESCRIPTION: Basic workspace structure definition containing pointers for buffer management including start, free/front, reserved and end pointers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri5.rst#2025-04-17_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct ws {\n    […]\n    char    *s;     /* (S)tart of buffer */\n    char    *f;     /* (F)ree/front pointer */\n    char    *r;     /* (R)eserved length */\n    char    *e;     /* (E)nd of buffer */\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Reserved Keywords in C with Header File Inclusion\nDESCRIPTION: An example showing how the C1X standard defines a header file to provide an alias for the _Noreturn keyword. The author presents this as an example of unnecessary complexity in the C standard.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/thetoolsweworkwith.rst#2025-04-17_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <nostdreturn.h>\nvoid noreturn foo(int bar);\n```\n\nLANGUAGE: C\nCODE:\n```\n#define noreturn _Noreturn\n```\n\n----------------------------------------\n\nTITLE: Including Varnish Director Module RST Documentation\nDESCRIPTION: RST include directive to import generated documentation for Varnish director module functionality.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod_directors.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include::    ../include/vmod_directors.generated.rst\n```\n\n----------------------------------------\n\nTITLE: Listing Failing Tests with MAP_SHARED Pointers in CHERI Architecture\nDESCRIPTION: A list of Varnish test cases that fail under CHERI because they use the file stevedore with MAP_SHARED, which CHERI prohibits for security reasons as it would allow pointer resurrection across processes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri3.rst#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMAP_SHARED pointers\n=====================\nTEST tests/b00005.vtc\nTEST tests/r02429.vtc\nTEST tests/s00003.vtc\n```\n\n----------------------------------------\n\nTITLE: Installing Graphviz on Alpine Linux\nDESCRIPTION: Command to install graphviz on Alpine Linux for rebuilding SVG files.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\napk add -q graphviz\n```\n\n----------------------------------------\n\nTITLE: Email Header for HTTP/2.0 Expression of Interest\nDESCRIPTION: The email header for Varnish's response to the call for expression of interest in HTTP/2.0. It includes sender, subject, recipient, message ID, and date information.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/http20.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFrom:    Poul-Henning Kamp <phk@phk.freebsd.dk>\nSubject: HTTP/2 Expression of luke-warm interest: Varnish\nTo:      HTTP Working Group <ietf-http-wg@w3.org>\nMessage-Id: <41677.1342136900@critter.freebsd.dk>\nDate:    Thu, 12 Jul 2012 23:48:20 GMT\n```\n\n----------------------------------------\n\nTITLE: Creating SystemD Override for Varnish on Modern Debian/Ubuntu\nDESCRIPTION: SystemD configuration override file that changes the Varnish listening port to 80. This file should be created at /etc/systemd/system/varnish.service.d/customexec.conf.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/tutorial/putting_varnish_on_port_80.rst#2025-04-17_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nExecStart=\nExecStart=/usr/sbin/varnishd -a :80 -T localhost:6082 -f /etc/varnish/default.vcl -S /etc/varnish/secret -s default,256m\n```\n\n----------------------------------------\n\nTITLE: Basic CHERI Pointer Restrictions Demo in C\nDESCRIPTION: Demonstrates basic CHERI pointer permission restrictions by creating read-only and read-write pointers to the same buffer.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri4.rst#2025-04-17_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <cheriintrin.h>\n#include <stdio.h>\n#include <string.h>\n\nint\nmain()\n{\n    char buf[20];\n    char *ptr1 = cheri_perms_and(buf, CHERI_PERM_LOAD);\n    char *ptr2 = buf;\n\n    strcpy(buf, \"Hello World\\n\");\n    ptr1[5] = '_';    // Will core dump\n    ptr2[5] = '_';    // Works fine.\n    puts(buf);\n    return (0);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Table of Contents for Varnish Documentation\nDESCRIPTION: This code snippet defines the table of contents structure for various sections of the Varnish Reference Manual using reStructuredText syntax. It includes sections for VCL language, bundled VMODs, CLI interface, logging and monitoring, counters and statistics, and developer resources.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n\t:maxdepth: 1\n\n\tVCL - The Varnish Configuration Language <vcl>\n\tVCL Variables <vcl-var>\n\tVCL Steps <vcl-step>\n\tVCL backend configuration <vcl-backend>\n\tVCL backend health probe <vcl-probe>\n\tstates.rst\n```\n\n----------------------------------------\n\nTITLE: Debugging Varnish Lock Order with VSL Witness Records\nDESCRIPTION: The author mentions adding debug code to emit VSL (Varnish Shared Log) 'Witness' records that track lock acquisition, along with a Python script to process these records into a visualization of lock order.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/brinch-hansens-arrows.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Mentioned but not shown: a Python script that processes VSL \"Witness\" records\n# into a plot visualization showing lock acquisition order to verify all locks\n# follow Brinch-Hansen's arrow principle (all arrows point to the right).\n```\n\n----------------------------------------\n\nTITLE: Varnish Documentation Index in RST Format\nDESCRIPTION: ReStructuredText format index file organizing Varnish version documentation with toctree directives for changes and upgrade guides for each version.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   changes-7.7\n   upgrading-7.7\n```\n\n----------------------------------------\n\nTITLE: CHERI Read-Only Macros Definition in C\nDESCRIPTION: Defines macros for implementing read-only pointer restrictions in Varnish using CHERI capabilities.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri4.rst#2025-04-17_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define RO(x) cheri_perms_and((x), CHERI_PERM_LOAD)\n#define ROP(x) cheri_perms_and((x), CHERI_PERM_LOAD|CHERI_PERM_LOAD_CAP)\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecated Persistent Storage in Varnish During Compilation\nDESCRIPTION: Command for configuring Varnish with persistent storage support during compilation. This is required before using the deprecated persistent storage engine.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/persistent.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconfigure --with-persistent-storage\n```\n\n----------------------------------------\n\nTITLE: Configuring Varnish Build on Solaris with Standard Installation Path\nDESCRIPTION: Configure command with recommended paths for installing Varnish Cache on Solaris-based systems.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n./configure \\\n        --prefix=/opt/local \\\n        --mandir=/opt/local/man\n```\n\n----------------------------------------\n\nTITLE: CHERI Pointer Width Error Example\nDESCRIPTION: Code snippet showing an error where intptr_t usage conflicts with CHERI's 16-byte pointer width, requiring modification to use uint64_t instead.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri1.rst#2025-04-17_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nvd->serial = VSM_PRIV_LOW(vd->serial + 1);\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Alpine Linux\nDESCRIPTION: Command to install git on Alpine Linux for repository access.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\napk add -q git\n```\n\n----------------------------------------\n\nTITLE: Listing Failing Test Cases Due to Cache Sizes in C\nDESCRIPTION: This code snippet lists the test cases that fail due to cache size issues when adapting Varnish Cache to CHERI capabilities. These failures are related to cache space limitations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri2.rst#2025-04-17_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nCache sizes\n=====================\nTEST tests/r03502.vtc\nTEST tests/r01140.vtc\nTEST tests/r02831.vtc\nTEST tests/v00064.vtc\n```\n\n----------------------------------------\n\nTITLE: Installing older Varnish Cache version via FreeBSD package\nDESCRIPTION: Command to install the older Varnish Cache version 4 using FreeBSD's package management system (pkg).\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_freebsd.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npkg install varnish4\n```\n\n----------------------------------------\n\nTITLE: Example Semantic Patch for Type Replacement\nDESCRIPTION: Demonstrates a Coccinelle semantic patch that replaces vmin_t type-specific function with generic vmin function.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/tools/coccinelle/README.rst#2025-04-17_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n@@\ntype T;\nT e1, e2;\n@@\n\n- vmin_t(T, e1, e2)\n+ vmin(e1, e2)\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx Dependencies on Red Hat/CentOS 7\nDESCRIPTION: Command to install Python Sphinx and other dependencies on Red Hat/CentOS 7 for Varnish documentation building.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install -y \\\n        jemalloc-devel \\\n        libunwind-devel \\\n        python-sphinx\n```\n\n----------------------------------------\n\nTITLE: Displaying Varnish Documentation Line Count\nDESCRIPTION: A code snippet showing the line count of Varnish documentation in reStructuredText format (.rst files), totaling over 20,000 lines.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/thatslow.rst#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n22169 lines in .rst files\n```\n\n----------------------------------------\n\nTITLE: Sample VCL Fetch Policy Program\nDESCRIPTION: This VCL snippet shows a sample fetch policy program. It defines backend configurations, sets up a specific backend for VG.no, and implements error handling, caching policies, and TTL adjustments based on various conditions like response time and object size.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/firstdesign.rst#2025-04-17_snippet_4\n\nLANGUAGE: VCL\nCODE:\n```\nsub backends {\n    set backend.vg.ip = {...}\n    set backend.ads.ip = {...}\n    set backend.chat.ip = {...}\n    set backend.chat.timeout = 10s\n    set backend.chat.bandwidth = 2000 MB/s\n    set backend.other.ip = {...}\n}\n\nsub vg_backend {\n    set backend.ip = {10.0.0.1-5}\n    set backend.timeout = 4s\n    set backend.bandwidth = 2000Mb/s\n}\n\nsub fetch_policy {\n\n    if (req.url.host ~ \"/vg.no$/\") {\n        set req.backend = vg\n        call vg_backend\n    } else {\n        /* XXX: specify 404 page url ? */\n        error 404\n    }\n\n    if (backend.response_time > 2.0s) {\n        if (req.url.path ~ \"/landbrugspriser/\") {\n            error 504\n        }\n    }\n    fetch\n    if (backend.down) {\n        if (obj.exist) {\n            set obj.ttl += 10m\n            finish\n        }\n        switch_config ohhshit\n    }\n    if (obj.result == 404) {\n        error 300 \"http://www.vg.no\"\n    }\n    if (obj.result != 200) {\n        finish\n    }\n    if (obj.size > 256k) {\n        no-cache\n    } else if (obj.size > 32k && obj.ttl < 2m) {\n        obj.tll = 5m\n    }\n    if (backend.response_time > 2.0s) {\n        set ttl *= 2.0\n    }\n}\n\nsub prefetch_policy {\n\n    if (obj.usage < 10 && obj.ttl < 5m) {\n        fetch\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Graphviz on SmartOS Zone\nDESCRIPTION: Command to install graphviz on SmartOS Zone for rebuilding SVG files.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\npkgin in graphviz\n```\n\n----------------------------------------\n\nTITLE: RST Code Block Example\nDESCRIPTION: Demonstration of proper RST code block formatting using the double colon syntax.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/README.WRITING_RST.rst#2025-04-17_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n    Examples and\n\n    other code\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on SmartOS Zone\nDESCRIPTION: Command to install necessary build dependencies for Varnish Cache on a SmartOS Zone using pkgin.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\npkgin in autoconf automake editline libtool ncurses \\\n\t pcre2 python37 py37-sphinx py37-docutils gmake gcc8 pkg-config\n```\n\n----------------------------------------\n\nTITLE: Using the string macro for text repetition in VTC\nDESCRIPTION: Example of the string macro syntax used to repeat a string a specified number of times in Varnish Test Cases. This is part of the built-in macro system that enables dynamic text generation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vtc.rst#2025-04-17_snippet_0\n\nLANGUAGE: vtc\nCODE:\n```\n${string,repeat,<uint>,<str>}\n```\n\n----------------------------------------\n\nTITLE: Displaying Makefile Help in Bash\nDESCRIPTION: Shows how to use the 'make help' command to view available build targets for the website. This is executed in the R1 directory of the repository.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/dev-guide/homepage_contrib.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd R1\n$ make help\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameter Information\nDESCRIPTION: This snippet demonstrates how to view information about a specific Varnish parameter using the param.show command.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_cli.rst#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nvarnish> param.show prefer_ipv6\n200\nprefer_ipv6         off [bool]\n                    Default is off\n                    Prefer IPv6 address when connecting to backends\n                    which have both IPv4 and IPv6 addresses.\n```\n\n----------------------------------------\n\nTITLE: New VNUM Functions\nDESCRIPTION: New functions added for token parsing functionality.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nVNUM_uint()\nVNUM_hex()\n```\n\n----------------------------------------\n\nTITLE: SSL Handshake Comment from OpenSSL\nDESCRIPTION: Example of concerning code commentary from OpenSSL's s3-srvr.c file, demonstrating unclear implementation details in SSL handshake handling.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/ssl.rst#2025-04-17_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Throw away what we have done so far in the current handshake,\n * which will now be aborted. (A full SSL_clear would be too much.)\n * I hope that tmp.dh is the only thing that may need to be cleared\n * when a handshake is not completed ... */\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Table of Contents Structure\nDESCRIPTION: ReStructuredText markup defining a table of contents tree for documentation articles, with maxdepth set to 1 and listing various .rst files.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\t:maxdepth: 1\n\n\th2againagainagain.rst\n\tcheri7.rst\n\tcheri6.rst\n\tcheri5.rst\n\tcheri4.rst\n\tcheri3.rst\n\tcheri2.rst\n\tcheri1.rst\n\troutine.rst\n\t503aroundtheworld.rst\n\tlegacy.rst\n\tip_address.rst\n\tvdd19q3.rst\n\tquic.rst\n\tVSV00003.rst\n\tpatent.rst\n\tlucky.rst\n\tapispaces.rst\n\tVSV00001.rst\n\tsomethinghappened.rst\n\ttrialerror.rst\n\tfarfaraway.rst\n\tthatslow.rst\n\tfirstdesign.rst\n\t10goingon50.rst\n\tbrinch-hansens-arrows.rst\n\tssl_again.rst\n\tpersistent.rst\n\tdough.rst\n\twanton_destruction.rst\n\tspdy.rst\n\thttp20.rst\n\tvarnish_does_not_hash.rst\n\tthetoolsweworkwith.rst\n\tthree-zero.rst\n\tssl.rst\n\tgzip.rst\n\tvcl_expr.rst\n\tipv6suckage.rst\n\tbackends.rst\n\tplatforms.rst\n\tbarriers.rst\n\tthoughts.rst\n\tautocrap.rst\n\tsphinx.rst\n\tnotes.rst\n```\n\n----------------------------------------\n\nTITLE: Setting PATH for Sphinx Tools on macOS\nDESCRIPTION: Command to add Sphinx tools and docutils to PATH environment variable on macOS for the configure script to find them.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nPATH=\"/opt/homebrew/opt/sphinx-doc/bin:/opt/homebrew/opt/docutils/bin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Varnish Daemon Options for Legacy Debian/Ubuntu\nDESCRIPTION: Configuration snippet for /etc/default/varnish that changes the listening port from 6081 to 80 while maintaining other default settings.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/tutorial/putting_varnish_on_port_80.rst#2025-04-17_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nDAEMON_OPTS=\"-a :6081 \\\n               -T localhost:6082 \\\n               -f /etc/varnish/default.vcl \\\n               -S /etc/varnish/secret \\\n               -s default,256m\"\n```\n\n----------------------------------------\n\nTITLE: VSL Query Syntax Example\nDESCRIPTION: Example of using vxid as a lefthand side token for VSL queries in varnishlog\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-5.1.rst#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nvxid as a lefthand side token for VSL queries\n```\n\n----------------------------------------\n\nTITLE: Coccinelle Patch Parse Command\nDESCRIPTION: Command to parse and expand Coccinelle patch files to view implicit rules that will be applied.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/tools/coccinelle/README.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspatch --macro-file tools/coccinelle/vdef.h \\\n       -I include/ -I bin/varnishd/ --parse-cocci \\\n       --sp-file $COCCI\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for VCL Design Patterns in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for VCL design patterns using reStructuredText directives. It includes links to two specific pattern documents: response status and request hash ignore vary.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/vcl-design-patterns/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n\t:maxdepth: 1\n\n\tresp-status.rst\n\treq-hash_ignore_vary.rst\n```\n\n----------------------------------------\n\nTITLE: Named Arguments VMOD Function Declaration\nDESCRIPTION: Example of declaring a VMOD function with named parameters in vmod.vcc. This allows VCL code to call the function with named arguments in any order rather than positional arguments.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod.rst#2025-04-17_snippet_4\n\nLANGUAGE: vcc\nCODE:\n```\n$Function BOOL match_acl(ACL acl, IP ip)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Deprecated VSB Methods in Varnish Cache\nDESCRIPTION: Code example showing the now deprecated methods for VSB (Varnish String Buffer) initialization and cleanup in Varnish 6.5.0. These methods are being phased out in favor of the new initialization patterns.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nVSB_new() + VSB_delete()\n```\n\n----------------------------------------\n\nTITLE: Recommended Hash Function Replacement in Web Applications\nDESCRIPTION: Example of how to modify code to use cryptographic hash functions instead of vulnerable fast hash functions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/varnish_does_not_hash.rst#2025-04-17_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nChange:\n\tfoo=somedict[$somekey]\nTo:\n\tfoo=somedict[md5($somekey)]\n```\n\n----------------------------------------\n\nTITLE: Historical Non-Competition Pledge Email\nDESCRIPTION: A signed email from 2010 where PHK outlines his position on commercial exploitation of Varnish Cache and his commitment to the open source community\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/patent.rst#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSubject: For the record: Varnish and Money\nFrom: Poul-Henning Kamp <phk@phk.freebsd.dk>\nTo: varnish-announce@varnish-cache.org\nDate: Fri Nov 19 14:03:22 CET 2010\n\nJust so everybody know where I stand on this...\n\nPoul-Henning\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n\nIntroduction\n- ------------\n\nAs the main developer of the Varnish Software and the de-facto leader\nof the Varnish Open Source Project, it is my desire to see Varnish\nused and adopted as widely as possible.\n\nTo the same ends, the founders of the Varnish Project chose the BSD\nlicense to facilitate commercial exploitation of Varnish in all\nforms, while protecting the independence of the Open Source Project.\n\nThe BSD license is non-discriminatory, and makes no attempt to\nseparate the good guys from the bad guys, and neither should it.\n\nThe Varnish Project, as a community, is a different story.\n\nWhile the BSD license can guarantee that Varnish, as software, will\nalways be available, a thriving Open Source Community takes a fair\nbit more effort to hold together.\n\nNothing can rip apart an Open Source project faster than competing\ncommercial interests playing dirty, and since Varnish has started\nto cause serious amounts of money to shift around, it is time to\ntake this issue a bit more seriously.\n\n\nNon-competition pledge:\n- -----------------------\n\nMy interest in Varnish is developing capable quality software, and\nmaking a living at the same time.\n\nIn addition to Varnish, I have some long time good customers for\nwhom I do various weird things with computers and software, and\nsince they have stuck with me and paid my bills, I will stick with\nthem and send them more bills.\n\nThe Varnish Moral License (VML) was drawn up to provide a money-stream\nthat can fund my Varnish-habit, and it was designed as an \"arms-length\"\nconstruction to prevent it from taking control of the projects\ndirection.\n\nTherefore acquiring a VML does not mean that you get to tell me\nwhat to do, or in which order I should do it.  There is no \"tit for\ntat\" involved.  The only thing you get out of the VML, is that the\nnext version of Varnish will be better than the one we have now.\n\nTherefore:\n\n As long as I can keep my family fed, happy and warm this\n way, I will not enter any other commercial activity related\n to Varnish, and am more than happy to leave that field open\n to everybody and anybody, who wants to try their hand.\n\n\nFairness pledge:\n- ----------------\n\nAs the de-facto leader of the Varnish community, I believe that\nthe success or failure of open source rises and falls with the\ncommunity which backs it up.\n\nIn general, there is a tacit assumption, that you take something\nfrom the pot and you try put something back in the pot, each to his\nown means and abilities.\n\nAnd the pot has plenty that needs filling:  From answers to newbies\nquestions, bug-reports, patches, documentation, advocacy, VML funding,\nhosting VUG meetings, writing articles for magazines, HOW-TO's for\nblogs and so on, so this is no onerous demand for anybody.\n\nBut the BSD license allows you to not participate in or contribute\nto the community, and there are special times and circumstances\nwhere that is the right thing, or even the only thing you can do,\nand I recognize that.\n\nTherefore:\n\n I will treat everybody, who do not contribute negatively to\n the Varnish community, equally and fairly, and try to foster\n cooperation and justly resolve conflicts to the best of my\n abilities.\n\n\nPolicy on Gifts:\n- ----------------\n\nPeople sometimes prefer to show their appreciation of Varnish by\nsending me gifts.\n\nI really love that\n\nBut please understand, that any and gifts or other appreciations I\nmay receive, from cartoons on my Amazon Wishlist, up to and including\npre-owned tropical tax-shelter islands, with conveniently unlocked\nbank vaults filled with gold bars (one can always dream...), will\nall be received and interpreted the same way:  As tokens of\nappreciation for deeds already done, and encouragement to me to\nkeep doing what is right and best for Varnish in the future.\n\n\nPoul-Henning Kamp\n\nSigned with my PGP-key, November 19th, 2010, Slagelse, Denmark.\n```\n\n----------------------------------------\n\nTITLE: Setting RST Reference Targets for HTML Documentation\nDESCRIPTION: Example of setting document-specific reference targets for cross-document linking in HTML documentation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/README.WRITING_RST.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _ref-varnishd-opt_T:\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Red Hat/CentOS\nDESCRIPTION: Command to install git for repository access on Red Hat/CentOS systems.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_source.rst#2025-04-17_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nyum install git\n```\n\n----------------------------------------\n\nTITLE: Secret File Hex Dump\nDESCRIPTION: Shows the hexadecimal contents of the authentication secret file used in the example.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/cli_protocol.rst#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncritter phk> hexdump secret\\n00000000  66 6f 6f 0a                                       |foo.|\\n00000004\n```\n\n----------------------------------------\n\nTITLE: Initial Git Commit History for Varnish Cache\nDESCRIPTION: Shows the earliest surviving Git commit from the original Subversion repository, marking the official birth of the Varnish Cache project from February 2006.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/10goingon50.rst#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncommit 523166ad2dd3a65e3987f13bc54f571f98453976\nAuthor: Dag Erling Smørgrav <des@des.no>\nDate:   Wed Feb 22 14:31:39 2006 +0000\n\n    Additional subdivisions.\n```\n\n----------------------------------------\n\nTITLE: Including Generated VMOD Unix Documentation in RST\nDESCRIPTION: ReStructuredText include directive to import the generated VMOD Unix documentation file. Also contains copyright and license information for Varnish Cache.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vmod_unix.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nCopyright (c) 2019 Varnish Software AS\nSPDX-License-Identifier: BSD-2-Clause\nSee LICENSE file for full text of license\n\n\n.. include::\t../include/vmod_unix.generated.rst\n```\n\n----------------------------------------\n\nTITLE: Defining RST References for Manpages\nDESCRIPTION: Example of setting link targets for manpages with proper RST formatting using the manpage naming scheme.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/README.WRITING_RST.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _varnishd(1):\n```\n\n----------------------------------------\n\nTITLE: Default Log Format for Varnishncsa in RST\nDESCRIPTION: Specifies the default log format used by varnishncsa if no custom format is provided. It includes fields for client IP, timestamp, request details, status code, response size, referer, and user agent.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishncsa.rst#2025-04-17_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n  %h %l %u %t \"%r\" %s %b \"%{Referer}i\" \"%{User-agent}i\"\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link for Alabaster Theme in Bash\nDESCRIPTION: Demonstrates how to create a symbolic link for the Alabaster theme, linking the installed package to the directory where Sphinx expects to find themes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/dev-guide/homepage_contrib.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /usr/share/sphinx/themes\n$ ln -s /usr/local/lib/python2.7/dist-packages/alabaster\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation Structure\nDESCRIPTION: Top-level documentation structure defining the installation guide sections and external links for Varnish Cache installation\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _install-doc:\\n\\nInstalling Varnish\\n==================\\n\\n.. toctree::\\n\\t:maxdepth: 2\\n\\n\\tinstall_debian\\n\\tinstall_freebsd\\n\\tinstall_openbsd\\n\\tinstall_redhat\\n\\nCompiling Varnish from source\\n=============================\\n\\n.. toctree::\\n\\t:maxdepth: 2\\n\\n\\tinstall_source\n```\n\n----------------------------------------\n\nTITLE: IPv4 Socket Address Format String\nDESCRIPTION: Format string pattern for IPv4 addresses when combining host and port information.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/ipv6suckage.rst#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"%s:%s\", host, port\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Varnish Tutorial\nDESCRIPTION: This snippet defines the table of contents for the Varnish Tutorial using reStructuredText syntax. It includes links to various subsections of the tutorial.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/tutorial/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree:: :maxdepth: 1\n\n   introduction\n   starting_varnish\n   putting_varnish_on_port_80\n   backend_servers\n   peculiarities.rst\n   now_what\n```\n\n----------------------------------------\n\nTITLE: Installing Varnish from Package on OpenBSD\nDESCRIPTION: Command to install Varnish Cache using OpenBSD's package manager. This is the simplest method for installing Varnish on OpenBSD systems.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/install_openbsd.rst#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npkg_add varnish\n```\n\n----------------------------------------\n\nTITLE: Parse Error Check Script\nDESCRIPTION: Bash script to check for Coccinelle parse errors across the entire codebase.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/tools/coccinelle/README.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfor file in $(find . -name \\*.c) ; do\n  if spatch --macro-file tools/coccinelle/vdef.h \\\n     -I include/ -I bin/varnishd/  --parse-c $file 2>&1 |\n     grep -C 5 -E '^BAD' ; then\n       echo ; echo $file\n  fi\ndone\n```\n\n----------------------------------------\n\nTITLE: Creating Date Output with Shell Script for ESI Example\nDESCRIPTION: A simple CGI shell script that outputs the current date. This script is used as an included fragment in the ESI example.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/esi.rst#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\necho 'Content-type: text/html'\necho ''\ndate \"+%Y-%m-%d %H:%M\"\n```\n\n----------------------------------------\n\nTITLE: RST Toctree Structure for Varnish Installation Documentation\nDESCRIPTION: Restructured Text (RST) toctree directive that defines the structure of the Varnish installation documentation. It includes links to separate pages for prerequisites, installation steps, help resources, bug reporting, and platform-specific notes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/installation/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\t:maxdepth: 2\n\n\tprerequisites.rst\n\tinstall.rst\n\thelp.rst\n\tbugs.rst\n\tplatformnotes.rst\n```\n\n----------------------------------------\n\nTITLE: Using VCL_REGEX in VMODs\nDESCRIPTION: The VCL_REGEX data type is now supported for VMODs, allowing them to use regular expression literals checked and compiled by the VCL compiler infrastructure. VRT_re_init() and VRT_re_fini() functions have been removed.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.6.rst#2025-04-17_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nVCL_REGEX regex = /* regular expression literal */;\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Sphinx in Bash\nDESCRIPTION: Shows the process of building HTML documentation using Sphinx. This command is run in the R1 directory of the repository and demonstrates a successful build process.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/dev-guide/homepage_contrib.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd $REPO/R1\n$ make html\n```\n\n----------------------------------------\n\nTITLE: Displaying Varnish Test Case Line Count\nDESCRIPTION: A code snippet showing the line count of Varnish test cases (.vtc files), which amounts to over 20,000 lines.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/thatslow.rst#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n21777 lines in .vtc files\n```\n\n----------------------------------------\n\nTITLE: Example Python Documentation URL in reStructuredText\nDESCRIPTION: A reference link to a Python documentation page used to demonstrate the 'show source' feature of Sphinx documentation. This illustrates how readable the source is while producing well-formatted output.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/sphinx.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nhttps://docs.python.org/py3k/reference/expressions.html\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Section Headers\nDESCRIPTION: Defines section headers for version change documentation using RestructuredText syntax\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_32\n\nLANGUAGE: restructuredtext\nCODE:\n```\n==============================================\nChanges from 4.0.0 beta1 to 4.0.0 (2014-04-10)\n==============================================\n```\n\n----------------------------------------\n\nTITLE: Displaying varnishhist Output for Bandwidth Impact\nDESCRIPTION: A text-based histogram output from the varnishhist tool that visualizes HTTP request processing times, demonstrating Varnish Cache's effectiveness in improving bandwidth-constrained scenarios.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/farfaraway.rst#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\t\t\t|\n\t\t\t|\n\t\t\t||\n\t\t\t||\n\t\t\t||\n\t\t\t||\n\t\t\t||\n\t\t\t||\n\t\t\t||\n\t\t\t||\n\t\t\t||\n\t\t\t||\n\t\t\t||                            ##\n\t\t       |||                            ##\n\t\t       |||                         #  ## #\n\t\t      |||||                        #  #####\n\t+-------+-------+-------+-------+-------+-------+-------+-------+-------\n\t|1e-6   |1e-5   |1e-4   |1e-3   |1e-2   |1e-1   |1e0    |1e1    |1e2\n```\n\n----------------------------------------\n\nTITLE: Updating VSL Queries for BackendReuse to BackendClose\nDESCRIPTION: Demonstrates how to update VSL queries that previously used BackendReuse to now use BackendClose in Varnish 6.5.0.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.5.rst#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nvarnishlog -q 'BackendReuse[2] ~ www'\n```\n\nLANGUAGE: text\nCODE:\n```\nvarnishlog -q 'BackendClose[2] ~ www and BackendClose[3] eq recycle'\n```\n\n----------------------------------------\n\nTITLE: Proposed simple alternative to autoconf tools using uname\nDESCRIPTION: A suggested 5-line shell script using 'uname -s' to replace the complex autoconf system. The author implies this would be sufficient given the reduced diversity of modern UNIX systems.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/autocrap.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuname -s\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Structure in reStructuredText for Varnish Documentation\nDESCRIPTION: A toctree directive that defines the structure and organization of the Varnish Users Guide documentation, listing the main chapter files to be included with a maximum depth of 2 levels.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   intro\n   running\n   vcl\n   report\n   performance\n   esi\n   troubleshooting\n```\n\n----------------------------------------\n\nTITLE: Displaying XML Output Format in reStructuredText\nDESCRIPTION: Shows the structure of the XML output format for varnishstat, including the timestamp, field name, value, flag, format, and description.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishstat.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n  <varnishstat timestamp=\"YYYY-MM-DDTHH:mm:SS\">\n    <stat>\n      <name>FIELD NAME</name>\n      <value>FIELD VALUE</value>\n      <flag>FIELD SEMANTICS</flag>\n      <format>FIELD DISPLAY FORMAT</format>\n      <description>FIELD DESCRIPTION</description>\n    </stat>\n    [..]\n  </varnishstat>\n```\n\n----------------------------------------\n\nTITLE: Pipe Action Example - VCL\nDESCRIPTION: Example of the pipe action usage which switches to pipe mode for direct client-backend communication.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-step.rst#2025-04-17_snippet_3\n\nLANGUAGE: VCL\nCODE:\n```\nreturn(pipe)\n```\n\n----------------------------------------\n\nTITLE: Disabling Unwind Library for CHERI Build\nDESCRIPTION: Configure command to disable libunwind dependency as it's not available in CHERI version.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/cheri1.rst#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n${SRCDIR}/configure \\\n    --without-unwind \\\n    [the usual options]\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Domain Socket in VTC Script\nDESCRIPTION: Demonstrates how to set up a server, Varnish instance, and client using Unix Domain Sockets in a VTC script. This snippet shows the common idiom for tests involving UDSen.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.0.rst#2025-04-17_snippet_10\n\nLANGUAGE: vtc\nCODE:\n```\nserver s1 -listen \"${tmpdir}/s1.sock\" { ... } -start\n\nvarnish v1 -arg \"-a ${tmpdir}/v1.sock\" -vcl+backend { ... } -start\n\nclient c1 -connect \"${tmpdir}/v1.sock\" { ... } -run\n```\n\n----------------------------------------\n\nTITLE: VDP/VFP Filter Function Signatures\nDESCRIPTION: Updated function signatures for Varnish Delivery Processor (VDP) and Varnish Fetch Processor (VFP) filters.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nvdp_init_f\nvdp_fini_f\nvdp_bytes_f\nVDP_bytes()\nstruct vdp_entry\nstruct vdp_ctx\n```\n\n----------------------------------------\n\nTITLE: Sphinx and reStructuredText Reference Links in reStructuredText\nDESCRIPTION: External reference links defined at the end of the document that point to the Sphinx documentation tool and reStructuredText specification websites.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/sphinx.rst#2025-04-17_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _Sphinx: http://sphinx.pocoo.org/\n.. _reStructuredText: http://docutils.sourceforge.net/rst.html\n```\n\n----------------------------------------\n\nTITLE: Pass Action Example - VCL\nDESCRIPTION: Example of the pass action usage which switches to pass mode, bypassing cache operations.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-step.rst#2025-04-17_snippet_2\n\nLANGUAGE: VCL\nCODE:\n```\nreturn(pass)\n```\n\n----------------------------------------\n\nTITLE: Basic Coccinelle Patch Execution Command\nDESCRIPTION: Standard command for executing Coccinelle semantic patches on Varnish Cache codebase with required macro definitions and include paths.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/tools/coccinelle/README.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspatch --macro-file tools/coccinelle/vdef.h \\\n       -I include/ -I bin/varnishd/ --dir . --in-place \\\n       --sp-file $COCCI\n```\n\n----------------------------------------\n\nTITLE: Defining RST Role for Manpage Compatibility\nDESCRIPTION: Definition of a ref role to ensure compatibility with both Sphinx and rst2man documentation builds.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/README.WRITING_RST.rst#2025-04-17_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: ref(emphasis)\n```\n\n----------------------------------------\n\nTITLE: Setting Required Host Header\nDESCRIPTION: Implementation detail noting that req.http.Host has been made mandatory, with requests lacking this header being handled through DoS avoidance path.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-6.1.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nreq.http.Host\n```\n\n----------------------------------------\n\nTITLE: Activating Top-Level VCL\nDESCRIPTION: Commands to load and activate the top-level VCL configuration.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-separate.rst#2025-04-17_snippet_3\n\nLANGUAGE: vcl\nCODE:\n```\nvcl.load top_1 /somewhere/top.vcl\nvcl.use top_1\n```\n\n----------------------------------------\n\nTITLE: IPv6 Socket Address Format String\nDESCRIPTION: Format string pattern for IPv6 addresses when combining host and port information, including the required square brackets.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/ipv6suckage.rst#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"[%s]:%s\", host, port\n```\n\n----------------------------------------\n\nTITLE: Including Varnishhist Options in RST Documentation\nDESCRIPTION: This snippet includes the options available for the varnishhist utility from an external RST file. It helps maintain up-to-date and consistent documentation across the project.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishhist.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../include/varnishhist_options.rst\n```\n\n----------------------------------------\n\nTITLE: Referencing Issue Links\nDESCRIPTION: A series of restructured text link definitions mapping short reference IDs to full GitHub issue URLs for the Varnish Cache repository.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_30\n\nLANGUAGE: plain\nCODE:\n```\n.. _2115: https://github.com/varnishcache/varnish-cache/issues/2115\n.. _2110: https://github.com/varnishcache/varnish-cache/issues/2110\n.. _2104: https://github.com/varnishcache/varnish-cache/issues/2104\n```\n\n----------------------------------------\n\nTITLE: Including Varnishhist Synopsis in RST Documentation\nDESCRIPTION: This snippet includes the synopsis for the varnishhist utility from an external RST file. It's used to maintain consistency across documentation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/varnishhist.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../include/varnishhist_synopsis.rst\nvarnishhist |synopsis|\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation Header\nDESCRIPTION: Section header for Varnish 7.4 changes documentation using RestructuredText format\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.4.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _whatsnew_changes_7.4:\n\n%%%%%%%%%%%%%%%%%%%%%%\nChanges in Varnish 7.4\n%%%%%%%%%%%%%%%%%%%%%%\n```\n\n----------------------------------------\n\nTITLE: Shell Script Testing Tool Implementation\nDESCRIPTION: A portable shell script (vtest.sh) that runs tests on computers where Varnish needs to be tested. It requires basic compilation tools and sends reports via SSH to the project server. The script is 173 lines long and designed to be simple and portable.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/trialerror.rst#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntools/vtest.sh\n```\n\n----------------------------------------\n\nTITLE: Deprecating WS_Reserve Function in C\nDESCRIPTION: Documentation of the deprecation of WS_Reserve() function in favor of new WS_ReserveAll() and WS_ReserveSize() functions. The change aims to eliminate ambiguous situations in workspace reservation. Planned for removal in the 2020-09-15 release.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.3.rst#2025-04-17_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nWS_Reserve()      // Deprecated\nWS_ReserveAll()    // New function\nWS_ReserveSize()   // New function\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Varnish Cache\nDESCRIPTION: ReStructuredText format documentation defining the table of contents and structure for Varnish Cache running documentation. Includes license information and section organization.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/running.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _users_running:\\n\\nStarting and running Varnish\\n============================\\n\\nThis section covers starting, running, and stopping Varnish,\\ncommand line flags and options, and communicating with the running\\nVarnish processes, configuring storage and sockets and, and about\\nsecuring and protecting Varnish against attacks.\\n\\n.. toctree:::\\n   :maxdepth: 2\\n\\n   run_security\\n   command-line\\n   run_cli\\n   storage-backends\\n   params\\n   sizing-your-cache\n```\n\n----------------------------------------\n\nTITLE: Displaying Varnish Miscellaneous File Line Count\nDESCRIPTION: A code snippet showing the line count of miscellaneous files in the Varnish codebase, including build configuration files (.am, .ac) and lint configuration (.lnt).\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/thatslow.rst#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n 1393 lines in .am files\n  712 lines in .ac files\n  613 lines in .lnt files\n```\n\n----------------------------------------\n\nTITLE: Quoting Saint-Exupéry on Perfection\nDESCRIPTION: A philosophical quote from Antoine de Saint-Exupéry that the author uses to explain his approach to code quality, emphasizing removal rather than addition.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/thatslow.rst#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nPerfection is attained, not when there is nothing more\nto add, but when there is nothing more to remove.\n```\n\n----------------------------------------\n\nTITLE: Creating VCL_STRANDS from Strings in C\nDESCRIPTION: New macros TOSTRAND and TOSTRANDS have been added to create struct strands * (intended to be used as VCL_STANDS) from strings. These macros create compound literals with block scope.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nTOSTRAND(s)\nTOSTRANDS(x, ...)\n```\n\n----------------------------------------\n\nTITLE: Calculating VXID Rollover Time\nDESCRIPTION: Calculation showing the time it takes for VXIDs to roll over at a rate of one million cache-missing single request sessions per second.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n(1e15-1) / (3 * 1e6  * 86400 * 365) = 10.57\n```\n\n----------------------------------------\n\nTITLE: Defining an ACL with Logging Enabled in VCL\nDESCRIPTION: Demonstrates how to create an ACL with logging enabled using the +log flag, which emits a VCL_acl record in the VSL log.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/vcl-syntax.rst#2025-04-17_snippet_4\n\nLANGUAGE: VCL\nCODE:\n```\nacl local +log {\n  \"localhost\";         // myself\n  \"192.0.2.0\"/24;      // and everyone on the local network\n  ! \"192.0.2.23\";      // except for the dialin router\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Abstract Unix Domain Socket in Varnish\nDESCRIPTION: Examples showing how to configure Varnish to use abstract Unix domain sockets for both accept sockets and backend paths using the @ notation.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvarnishd -a @kandinsky\n```\n\nLANGUAGE: VCL\nCODE:\n```\nbackend miro {\n  .path = \"@miro\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RestructuredText Reference Links\nDESCRIPTION: Sets up reference links to Varnish Cache ticket numbers for documentation formatting purposes\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_31\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _1139: https://www.varnish-cache.org/trac/ticket/1139\n.. _1478: https://www.varnish-cache.org/trac/ticket/1478\n.. _1504: https://www.varnish-cache.org/trac/ticket/1504\n```\n\n----------------------------------------\n\nTITLE: Python Report Processing Implementation\nDESCRIPTION: A 750-line Python program that processes test reports from the tester script and generates HTML output with relevant test information. The reporter component is responsible for ingesting and presenting test results in a readable format.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/trialerror.rst#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nReporter - 750 lines of python code\n```\n\n----------------------------------------\n\nTITLE: Setting Next XID in Varnish CLI\nDESCRIPTION: Example of using the debug.xid CLI command to set the next XID to be used, demonstrating the new 64-bit VXID range.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_4\n\nLANGUAGE: VCL\nCODE:\n```\ndebug.xid 20000000000\n```\n\n----------------------------------------\n\nTITLE: HTTP URL Format with IPv4 and Port\nDESCRIPTION: Demonstrates the standard format for HTTP URLs using IPv4 addresses with port numbers.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/phk/ipv6suckage.rst#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://192.168.0.1:8080/...\n```\n\n----------------------------------------\n\nTITLE: VCL Host Port Specification\nDESCRIPTION: Support for specifying ports as part of the .host field in VCL backend definitions.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_42\n\nLANGUAGE: VCL\nCODE:\n```\n.host = \"example.com:8080\"\n```\n\n----------------------------------------\n\nTITLE: Quoting Header Names in VCL\nDESCRIPTION: VCL header names can now be quoted to allow for names containing dots or other special characters.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_11\n\nLANGUAGE: VCL\nCODE:\n```\nreq.http.\"valid.name\"\n```\n\n----------------------------------------\n\nTITLE: Using Glob Patterns in VCL Include Statements\nDESCRIPTION: New glob flag for VCL include statements to allow including multiple files using glob patterns.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_10\n\nLANGUAGE: VCL\nCODE:\n```\ninclude glob \"pattern*\"\n```\n\n----------------------------------------\n\nTITLE: Restart Action Example - VCL\nDESCRIPTION: Example of the restart action usage which restarts the transaction while preserving most req attributes.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/reference/vcl-step.rst#2025-04-17_snippet_4\n\nLANGUAGE: VCL\nCODE:\n```\nreturn(restart)\n```\n\n----------------------------------------\n\nTITLE: Defining a Backend with Unix Domain Socket in VCL\nDESCRIPTION: Example of declaring a backend in VCL that uses a Unix domain socket for connection.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/upgrading-6.0.rst#2025-04-17_snippet_1\n\nLANGUAGE: VCL\nCODE:\n```\nbackend my_uds_backend {\n\t.path = \"/path/to/backend.sock\";\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Duration Parameter in Varnish\nDESCRIPTION: Example of setting a duration parameter with a unit in Varnish, introduced in version 7.2.0.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_6\n\nLANGUAGE: VCL\nCODE:\n```\nparam.set default_grace 1h\n```\n\n----------------------------------------\n\nTITLE: VCL Logexpect Alternative Syntax\nDESCRIPTION: New logexpect syntax for alternatives using expect and fail patterns\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_17\n\nLANGUAGE: VCL\nCODE:\n```\nexpect ? ...\nfail add ...\nfail clear\n```\n\n----------------------------------------\n\nTITLE: Stopping the Worker Process\nDESCRIPTION: This command demonstrates how to stop the Varnish worker process using the CLI.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/users-guide/run_cli.rst#2025-04-17_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nvarnish> stop\n```\n\n----------------------------------------\n\nTITLE: VMOD Reference Format Update\nDESCRIPTION: New format for VMOD documentation references, changing from old style to new style that better matches VCL syntax.\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/changes.rst#2025-04-17_snippet_23\n\nLANGUAGE: RST\nCODE:\n```\n// Old format:\n:ref:`vmod_name.function`\n:ref:`vmod_name.obj`\n:ref:`vmod_name.obj.method`\n\n// New format:\n:ref:`name.function()`\n:ref:`name.obj()`\n:ref:`xobj.method()`\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Manual Page Reference\nDESCRIPTION: Cross-reference to VCL step manual page using RestructuredText syntax\nSOURCE: https://github.com/varnishcache/varnish-cache/blob/master/doc/sphinx/whats-new/changes-7.4.rst#2025-04-17_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:ref:`vcl-step(7)`\n```"
  }
]