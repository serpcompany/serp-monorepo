[
  {
    "owner": "apache",
    "repo": "poi",
    "content": "TITLE: Main Method for Adding Videos to PowerPoint Presentations with Apache POI\nDESCRIPTION: The main method demonstrates how to add multiple video elements to a PowerPoint slide. It retrieves a video file from a URL, creates a PowerPoint presentation, adds the video file as a package part, and then creates slide elements with video previews and playback controls.\nSOURCE: https://github.com/apache/poi/blob/trunk/poi-examples/src/main/java/org/apache/poi/examples/xslf/AddVideoToPptx.java.txt#2025-04-13_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic static void main(String[] args) throws Exception {\n    URL video = new URL(\"http://archive.org/download/test-mpeg/test-mpeg.mpg\");\n    // URL video = new URL(\"file:test-mpeg.mpg\");\n\n    XMLSlideShow pptx = new XMLSlideShow();\n\n    // add video file\n    String videoFileName = video.getPath().substring(video.getPath().lastIndexOf('/')+1);\n    PackagePartName partName = PackagingURIHelper.createPartName(\"/ppt/media/\"+videoFileName);\n    PackagePart part = pptx.getPackage().createPart(partName, \"video/mpeg\");\n    OutputStream partOs = part.getOutputStream();\n    InputStream fis = video.openStream();\n    byte buf[] = new byte[1024];\n    for (int readBytes; (readBytes = fis.read(buf)) != -1; partOs.write(buf, 0, readBytes));\n    fis.close();\n    partOs.close();\n\n    XSLFSlide slide1 = pptx.createSlide();\n    XSLFPictureShape pv1 = addPreview(pptx, slide1, part, 5, 50, 50);\n    addVideo(pptx, slide1, part, pv1, 5);\n    addTimingInfo(slide1, pv1);\n    XSLFPictureShape pv2 = addPreview(pptx, slide1, part, 9, 50, 250);\n    addVideo(pptx, slide1, part, pv2, 9);\n    addTimingInfo(slide1, pv2);\n\n    FileOutputStream fos = new FileOutputStream(\"pptx-with-video.pptx\");\n    pptx.write(fos);\n    fos.close();\n    \n    pptx.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Video Elements to PowerPoint Slides with Apache POI\nDESCRIPTION: This method configures a picture shape to serve as a video element in a PowerPoint slide. It adds the necessary XML elements and relationships to link the picture to the video file, including defining the video start time via the trim property.\nSOURCE: https://github.com/apache/poi/blob/trunk/poi-examples/src/main/java/org/apache/poi/examples/xslf/AddVideoToPptx.java.txt#2025-04-13_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nstatic void addVideo(XMLSlideShow pptx, XSLFSlide slide1, PackagePart videoPart, XSLFPictureShape pic1, double seconds) throws IOException {\n\n    // add video shape\n    PackagePartName partName = videoPart.getPartName();\n    PackageRelationship prsEmbed1 = slide1.getPackagePart().addRelationship(partName, TargetMode.INTERNAL, \"http://schemas.microsoft.com/office/2007/relationships/media\");\n    PackageRelationship prsExec1 = slide1.getPackagePart().addRelationship(partName, TargetMode.INTERNAL, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/video\");\n    CTPicture xpic1 = (CTPicture)pic1.getXmlObject();\n    CTHyperlink link1 = xpic1.getNvPicPr().getCNvPr().addNewHlinkClick();\n    link1.setId(\"\");\n    link1.setAction(\"ppaction://media\");\n\n    // add video relation\n    CTApplicationNonVisualDrawingProps nvPr = xpic1.getNvPicPr().getNvPr();\n    nvPr.addNewVideoFile().setLink(prsExec1.getId());\n    CTExtension ext = nvPr.addNewExtLst().addNewExt();\n    // see http://msdn.microsoft.com/en-us/library/dd950140(v=office.12).aspx\n    ext.setUri(\"{DAA4B4D4-6D71-4841-9C94-3DE7FCFB9230}\");\n    String p14Ns = \"http://schemas.microsoft.com/office/powerpoint/2010/main\";\n\n    try (XmlCursor cur = ext.newCursor()) {\n        cur.toEndToken();\n        cur.beginElement(new QName(p14Ns, \"media\", \"p14\"));\n        cur.insertNamespace(\"p14\", p14Ns);\n        cur.insertAttributeWithValue(new QName(STRelationshipId.type.getName().getNamespaceURI(), \"embed\"), prsEmbed1.getId());\n        cur.beginElement(new QName(p14Ns, \"trim\", \"p14\"));\n        cur.insertAttributeWithValue(\"st\", df_time.format(seconds*1000.0));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Video Preview Thumbnails in PowerPoint Slides\nDESCRIPTION: This method captures a video frame at a specified timestamp to use as a preview thumbnail for the video. It uses Xuggler to read the video stream, extract a frame at the given time position, and then adds it to the slide as a picture shape.\nSOURCE: https://github.com/apache/poi/blob/trunk/poi-examples/src/main/java/org/apache/poi/examples/xslf/AddVideoToPptx.java.txt#2025-04-13_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nstatic XSLFPictureShape addPreview(XMLSlideShow pptx, XSLFSlide slide1, PackagePart videoPart, double seconds, int x, int y) throws IOException {\n    // get preview after 5 sec.\n    IContainer ic = IContainer.make();\n    InputOutputStreamHandler iosh = new InputOutputStreamHandler(videoPart.getInputStream());\n    if (ic.open(iosh, IContainer.Type.READ, null) < 0) return null;\n\n    IMediaReader mediaReader = ToolFactory.makeReader(ic);\n\n    // stipulate that we want BufferedImages created in BGR 24bit color space\n    mediaReader.setBufferedImageTypeToGenerate(BufferedImage.TYPE_3BYTE_BGR);\n\n    ImageSnapListener isl = new ImageSnapListener(seconds);\n    mediaReader.addListener(isl);\n\n    // read out the contents of the media file and\n    // dispatch events to the attached listener\n    while (!isl.hasFired && mediaReader.readPacket() == null) ;\n\n    mediaReader.close();\n    ic.close();\n\n    // add snapshot\n    BufferedImage image1 = isl.image;\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    ImageIO.write(image1, \"jpeg\", bos);\n    XSLFPictureData snap = pptx.addPicture(bos.toByteArray(), PictureType.JPEG);\n    XSLFPictureShape pic1 = slide1.createPicture(snap);\n    pic1.setAnchor(new Rectangle(x, y, image1.getWidth(), image1.getHeight()));\n    return pic1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Timing Information in PowerPoint Slides\nDESCRIPTION: This method adds timing information to control video playback behavior in a PowerPoint slide. It configures properties like volume, display status, and timing conditions by manipulating the underlying XML structure of the slide.\nSOURCE: https://github.com/apache/poi/blob/trunk/poi-examples/src/main/java/org/apache/poi/examples/xslf/AddVideoToPptx.java.txt#2025-04-13_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nstatic void addTimingInfo(XSLFSlide slide1, XSLFPictureShape pic1) {\n    // add slide timing information, so video can be controlled\n    CTSlide xslide = slide1.getXmlObject();\n    CTTimeNodeList ctnl;\n    if (!xslide.isSetTiming()) {\n        CTTLCommonTimeNodeData ctn = xslide.addNewTiming().addNewTnLst().addNewPar().addNewCTn();\n        ctn.setDur(STTLTimeIndefinite.INDEFINITE);\n        ctn.setRestart(STTLTimeNodeRestartType.NEVER);\n        ctn.setNodeType(STTLTimeNodeType.TM_ROOT);\n        ctnl = ctn.addNewChildTnLst();\n    } else {\n        ctnl = xslide.getTiming().getTnLst().getParArray(0).getCTn().getChildTnLst();\n    }\n\n    CTTLCommonMediaNodeData cmedia = ctnl.addNewVideo().addNewCMediaNode();\n    cmedia.setVol(80000);\n    CTTLCommonTimeNodeData ctn = cmedia.addNewCTn();\n    ctn.setFill(STTLTimeNodeFillType.HOLD);\n    ctn.setDisplay(false);\n    ctn.addNewStCondLst().addNewCond().setDelay(STTLTimeIndefinite.INDEFINITE);\n    cmedia.addNewTgtEl().addNewSpTgt().setSpid(\"\"+pic1.getShapeId());\n}\n```\n\n----------------------------------------\n\nTITLE: Building Apache POI JAR Files with Gradle\nDESCRIPTION: Commands to build the JAR files for poi, poi-ooxml, poi-ooxml-lite, poi-ooxml-full, and poi-examples using Gradle. This demonstrates how to compile the project's components.\nSOURCE: https://github.com/apache/poi/blob/trunk/README.rst#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew jar\n```\n\nLANGUAGE: shell\nCODE:\n```\ngradlew jar\n```\n\n----------------------------------------\n\nTITLE: Implementing ImageSnapListener for Video Frame Capture in Java\nDESCRIPTION: This code snippet defines an ImageSnapListener class that captures video frames at specified intervals. It handles video stream selection, tracks timestamps, and captures frames based on a configurable time interval.\nSOURCE: https://github.com/apache/poi/blob/trunk/poi-examples/src/main/java/org/apache/poi/examples/xslf/AddVideoToPptx.java.txt#2025-04-13_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n// The video stream index, used to ensure we display frames from one and\n// only one video stream from the media container.\nint mVideoStreamIndex = -1;\n\n// Time of last frame write\nlong mLastPtsWrite = Global.NO_PTS;\n\npublic ImageSnapListener(double seconds) {\n    SECONDS_BETWEEN_FRAMES = seconds;\n    MICRO_SECONDS_BETWEEN_FRAMES =\n            (long)(Global.DEFAULT_PTS_PER_SECOND * SECONDS_BETWEEN_FRAMES);\n}\n\n\n@Override\npublic void onVideoPicture(IVideoPictureEvent event) {\n\n    if (event.getStreamIndex() != mVideoStreamIndex) {\n        // if the selected video stream id is not yet set, go ahead an\n        // select this lucky video stream\n        if (mVideoStreamIndex != -1) return;\n        mVideoStreamIndex = event.getStreamIndex();\n    }\n\n    long evtTS = event.getTimeStamp();\n\n    // if uninitialized, back date mLastPtsWrite to get the very first frame\n    if (mLastPtsWrite == Global.NO_PTS)\n        mLastPtsWrite = Math.max(0, evtTS - MICRO_SECONDS_BETWEEN_FRAMES);\n\n    // if its time to write the next frame\n    if (evtTS - mLastPtsWrite >= MICRO_SECONDS_BETWEEN_FRAMES) {\n        if (!hasFired) {\n            image = event.getImage();\n            hasFired = true;\n        }\n        // update last write time\n        mLastPtsWrite += MICRO_SECONDS_BETWEEN_FRAMES;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ImageSnapListener for Video Frame Capture with Xuggler\nDESCRIPTION: A MediaListenerAdapter implementation that captures a specific frame from a video. The class definition shows the structure needed to detect and capture video frames at specified timestamps using the Xuggler library.\nSOURCE: https://github.com/apache/poi/blob/trunk/poi-examples/src/main/java/org/apache/poi/examples/xslf/AddVideoToPptx.java.txt#2025-04-13_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nstatic class ImageSnapListener extends MediaListenerAdapter {\n    final double SECONDS_BETWEEN_FRAMES;\n    final long MICRO_SECONDS_BETWEEN_FRAMES;\n    boolean hasFired = false;\n    BufferedImage image = null;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Forbidden APIs Configuration for Apache POI\nDESCRIPTION: Configuration file that specifies API signatures that should not be used in Apache POI development. It includes restrictions on locale-dependent operations, networking calls, thread management, and deprecated APIs. The file uses annotations to provide default messages and specific alternatives for forbidden APIs.\nSOURCE: https://github.com/apache/poi/blob/trunk/src/resources/devtools/forbidden-signatures.txt#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n@ignoreMissingClasses\n@defaultMessage POI forbidden APIs\n\n# Locale related interfaces which we want to avoid to not have code which depends on the locale of the current machine\njava.util.Locale#getDefault() @ Do not use methods that depend on the current Locale, either use Locale.ROOT or let the user define the locale, see class LocaleUtil for details\njava.util.Locale#setDefault(java.util.Locale) @ Do not use methods that depend on the current Locale, either use Locale.ROOT or let the user define the locale, see class LocaleUtil for details\njava.util.TimeZone#getDefault() @ Do not use methods that depend on the current Locale, either use Locale.ROOT or let the user define the locale, see class LocaleUtil for details\njava.util.Date#toString() @ Do not use methods that depend on the current Locale, either use Locale.ROOT or let the user define the locale, see class LocaleUtil for details\n```\n\n----------------------------------------\n\nTITLE: Defining Blood Pressure Integrity Check Rules\nDESCRIPTION: Sets validation ranges for blood pressure measurements with error and warning thresholds for male and female patients.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/48936-strings.txt#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[IntegrityCheck-ERROR[MALE[50.0 < x < 199.0], FEMALE[50.0 < x < 199.0]], IntegrityCheck-WARNING[MALE[61.0 < x < 126.0], FEMALE[47.0 < x < 119.0]]]\n```\n\n----------------------------------------\n\nTITLE: Defining Spreadsheet Metadata Properties in Apache POI\nDESCRIPTION: Configuration properties that define the document metadata for an Apache POI test spreadsheet. Includes author, title, subject, keywords, and comments metadata that will be applied to the generated spreadsheet file.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/SampleSS.txt#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAuthor = Nick Burch\nTitle = Sample Spreadsheet\nSubject = Spreadsheet for testing\nKeywords = Testing Sample Formulas\nComments = This is a sample spreadsheet, for use when testing things\n```\n\n----------------------------------------\n\nTITLE: Defining Systolic Blood Pressure Validation Rules\nDESCRIPTION: Sets error and warning validation ranges for systolic blood pressure readings for both male and female patients.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/48936-strings.txt#2025-04-13_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n[IntegrityCheck-ERROR[MALE[30 < x < 300 || ], FEMALE[30 < x < 300 || ]], IntegrityCheck-WARNING[MALE[77 < x < 192 || ], FEMALE[77 < x < 192 || ]]]\n```\n\n----------------------------------------\n\nTITLE: Defining Diastolic Blood Pressure Validation Rules\nDESCRIPTION: Sets error and warning validation ranges for diastolic blood pressure readings, including a constraint that the diastolic reading must be less than the systolic reading.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/48936-strings.txt#2025-04-13_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n[IntegrityCheck-ERROR[MALE[30 < x < 200 || ], FEMALE[30 < x < 200 || ]], IntegrityCheck-WARNING[MALE[51 < x < 96 || ], FEMALE[51 < x < 96 || ]], IntegrityCheck-ERROR[x < RES_FIRST_SYSTOLIC_BP]]\n```\n\n----------------------------------------\n\nTITLE: Defining Pulse Rate Validation Rules\nDESCRIPTION: Sets error and warning validation ranges for pulse rate measurements for both male and female patients.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/48936-strings.txt#2025-04-13_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n[IntegrityCheck-ERROR[MALE[30 < x < 200 || ], FEMALE[30 < x < 200 || ]], IntegrityCheck-WARNING[MALE[40 < x < 100 || ], FEMALE[40 < x < 100 || ]]]\n```\n\n----------------------------------------\n\nTITLE: Defining Diastolic Blood Pressure Second Reading Validation Rules\nDESCRIPTION: Sets error and warning validation ranges for the second diastolic blood pressure reading, including a constraint that the diastolic reading must be less than the systolic reading.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/48936-strings.txt#2025-04-13_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n[IntegrityCheck-ERROR[MALE[30 < x < 200 || ], FEMALE[30 < x < 200 || ]], IntegrityCheck-WARNING[MALE[51 < x < 96 || ], FEMALE[51 < x < 96 || ]], IntegrityCheck-ERROR[x < RES_SEC_SYSTOLIC_BP]]\n```\n\n----------------------------------------\n\nTITLE: Defining Upper Arm Circumference Validation Rules\nDESCRIPTION: Sets error validation ranges for upper arm circumference measurements for both male and female patients.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/48936-strings.txt#2025-04-13_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[IntegrityCheck-ERROR[MALE[17.0 < x < 50.0], FEMALE[17.0 < x < 50.0]]]\n```\n\n----------------------------------------\n\nTITLE: Sheet 2 Content Layout with Formula for Apache POI Sample Spreadsheet\nDESCRIPTION: The content layout for the second sheet of the sample spreadsheet. Includes formatted text (bold blue on yellow background) and demonstrates a SUM formula implementation.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/SampleSS.txt#2025-04-13_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n(Sheet Number 2)\nStart of 2nd sheet\t\t\t\nSheet 2 row 2\t\t\t\n\t\t\t\nI'm in bold blue, on a yellow background\t\t\t\n\t\t\t\ncb=1\t\tcb=10\t\tcb=2\t\tcb=sum\n1\t\t10\t\t2\t\t=SUM(A7:C7)\n```\n\n----------------------------------------\n\nTITLE: Computing Average Systolic Blood Pressure Formula\nDESCRIPTION: Formula for calculating the average systolic blood pressure from three separate readings.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/48936-strings.txt#2025-04-13_snippet_3\n\nLANGUAGE: formula\nCODE:\n```\nComputing[($1 + $2 + $3)/3,[Instrument[BloodPressure, RES_FIRST_SYSTOLIC_BP], Instrument[BloodPressure, RES_SEC_SYSTOLIC_BP], Instrument[BloodPressure, RES_THIRD_SYSTOLIC_BP]]]\n```\n\n----------------------------------------\n\nTITLE: Computing Average Diastolic Blood Pressure Formula\nDESCRIPTION: Formula for calculating the average diastolic blood pressure from three separate readings.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/48936-strings.txt#2025-04-13_snippet_1\n\nLANGUAGE: formula\nCODE:\n```\nComputing[($1 + $2 + $3)/3,[Instrument[BloodPressure, RES_FIRST_DIASTOLIC_BP], Instrument[BloodPressure, RES_SEC_DIASTOLIC_BP], Instrument[BloodPressure, RES_THIRD_DIASTOLIC_BP]]]\n```\n\n----------------------------------------\n\nTITLE: Computing Average Pulse Rate Formula\nDESCRIPTION: Formula for calculating the average pulse rate from three separate readings.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/48936-strings.txt#2025-04-13_snippet_2\n\nLANGUAGE: formula\nCODE:\n```\nComputing[($1 + $2 + $3)/3,[Instrument[BloodPressure, RES_FIRST_PULSE_RATE], Instrument[BloodPressure, RES_SEC_PULSE_RATE], Instrument[BloodPressure, RES_THIRD_PULSE_RATE]]]\n```\n\n----------------------------------------\n\nTITLE: Sheet 1 Content Layout for Apache POI Sample Spreadsheet\nDESCRIPTION: The content layout for the first sheet of the sample spreadsheet. Defines cell placement and includes a cell with special formatting (red).\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/SampleSS.txt#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n(First Sheet)\nTest spreadsheet\t\n2nd row\t\t\t\t\t2nd row 2nd column\n\t\nThis one is red\t\n```\n\n----------------------------------------\n\nTITLE: System Method Restrictions for Apache POI\nDESCRIPTION: Configuration entries that mark specific Java system and exception handling methods as forbidden in production code. Includes restrictions on garbage collection calls and printStackTrace() methods, recommending Log4J 2.x for exception handling instead.\nSOURCE: https://github.com/apache/poi/blob/trunk/src/resources/devtools/forbidden-signatures-prod.txt#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njava.lang.System#gc() @ Please do not try to stop the world\njava.lang.Throwable#printStackTrace() @ Please use Log4J 2.x for exceptions\njava.lang.Throwable#printStackTrace(java.io.PrintStream) @ Please use Log4J 2.x for exceptions\njava.lang.Throwable#printStackTrace(java.io.PrintWriter) @ Please use Log4J 2.x for exceptions\n```\n\n----------------------------------------\n\nTITLE: Commented System Exit Restrictions\nDESCRIPTION: Commented-out configuration entries that would restrict usage of system exit and halt methods. These are currently disabled to allow applications to return error codes on invalid command line parameters.\nSOURCE: https://github.com/apache/poi/blob/trunk/src/resources/devtools/forbidden-signatures-prod.txt#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n#@defaultMessage Please do not terminate the application\n#java.lang.System#exit(int)\n#java.lang.Runtime#exit(int)\n#java.lang.Runtime#halt(int)\n```\n\n----------------------------------------\n\nTITLE: CSV Data of Top 10 Languages by Native Speakers\nDESCRIPTION: Tabular data showing language statistics with three columns: countries (count), speakers (millions), and language name in native script. Includes major world languages like Chinese, English, Spanish, Arabic etc.\nSOURCE: https://github.com/apache/poi/blob/trunk/poi-examples/src/main/java/org/apache/poi/examples/xwpf/usermodel/bar-chart-data.txt#2025-04-13_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\ncountries,speakers,language\n58,315,العربية\n4,243,বাংলা\n38,1299,中文\n118,378,English\n4,260,हिन्दी\n2,128,日本語\n15,223,português\n6,119,ਪੰਜਾਬੀ\n18,154,Русский язык\n31,442,español\n```\n\n----------------------------------------\n\nTITLE: Ratio and Fraction Data Table\nDESCRIPTION: Table containing ratio calculations showing decimal and fractional representations. Each row contains multiple fraction columns with corresponding decimal values.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/54686_fraction_formats.txt#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n152\t201\t0.756218905\t 3/4\t 31/41\t 152/201\t1    \t 3/4\t 6/8\t 12/16\t 8/10\t 76/100\t 152/201\n155\t201\t0.771144279\t 7/9\t 64/83\t 155/201\t1    \t 3/4\t 6/8\t 12/16\t 8/10\t 77/100\t 155/201\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Apache POI License Header and CETAB Function Metadata Comments\nDESCRIPTION: This snippet contains the Apache License 2.0 header and comments explaining that the file was generated by ExcelCetabFunctionExtractor. It also documents the column structure for the function metadata that follows, with fields including index, name, parameter counts, return class, parameter classes, volatility, and footnote status.\nSOURCE: https://github.com/apache/poi/blob/trunk/poi/src/main/resources/org/apache/poi/ss/formula/function/functionMetadataCetab.txt#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n# \n#     http://www.apache.org/licenses/LICENSE-2.0\n# \n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Created by (org.apache.poi.ss.formula.function.ExcelCetabFunctionExtractor)\n# from source file 'org/apache/poi/ss/formula/function/functionMetadataCetab-PDF.txt'\n#\n#Columns: (index, name, minParams, maxParams, returnClass, paramClasses, isVolatile, hasFootnote )\n```\n\n----------------------------------------\n\nTITLE: Defining Excel Function Number Mappings in Plaintext\nDESCRIPTION: This snippet provides a tabular list of Excel function numbers and their corresponding function names. Each line represents a function, with columns for function number, name, and additional attributes (all set to 0 in this case).\nSOURCE: https://github.com/apache/poi/blob/trunk/poi/src/main/resources/org/apache/poi/ss/formula/function/functionMetadataCetab.txt#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0\tBEEP\t0\t0\t\t\t\t\n1\tOPEN\t0\t0\t\t\t\t\n2\tOPEN.LINKS\t0\t0\t\t\t\t\n3\tCLOSE.ALL\t0\t0\t\t\t\t\n4\tSAVE\t0\t0\t\t\t\t\n5\tSAVE.AS\t0\t0\t\t\t\t\n6\tFILE.DELETE\t0\t0\t\t\t\t\n7\tPAGE.SETUP\t0\t0\t\t\t\t\n8\tPRINT\t0\t0\t\t\t\t\n9\tPRINTER.SETUP\t0\t0\t\t\t\t\n10\tQUIT\t0\t0\t\t\t\t\n...\n```\n\n----------------------------------------\n\nTITLE: Analyzing Binary Format of SST Record in Apache POI\nDESCRIPTION: This snippet shows the binary structure of an SST (Shared String Table) record in the Excel file format. It includes a 20-character Unicode string with its length prefix (0x14), option flag (0x01 indicating 16-bit Unicode), followed by the actual character data for the string \"At a dinner party or\".\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/notenoughstrings.txt#2025-04-13_snippet_0\n\nLANGUAGE: binary\nCODE:\n```\n[sst-record]\n14 00                                               # String length 0x14=20\n01                                                  # Option flag, 16bit\n# String: At a dinner party or\n41 00 74 00 20 00 61 00 20 00\n64 00 69 00 6E 00 6E 00 65 00\n72 00 20 00 70 00 61 00 72 00\n74 00 79 00 20 00 6F 00 72 00\n```\n\n----------------------------------------\n\nTITLE: Parsing Rich Text with Extended Information in Excel Format\nDESCRIPTION: This snippet demonstrates the structure of rich text with extended information in Excel file format. It includes the string length, option flags, formatting runs, far east data size, string content, continuation record, formatting run details, and extended data.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/extendedtextstrings.txt#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1D 00                                               # String length 0x1b=29\n0D                                                  # Option flag, rich text + 16bit + extended\n02 00                                               # Formatting runs\n03 00 00 00                                         # Far east data size\n# String: At a dinner party or\n41 00 74 00 20 00 61 00 20 00\n64 00 69 00 6E 00 6E 00 65 00\n72 00 20 00 70 00 61 00 72 00\n74 00 79 00 20 00 6F 00 72 00\n\n# Continuation record\n00                                                  # option flag\n\n# string:at at at\n41 74 20\n41 74 20\n41 74 20\n\n00 00                                               # Formatting run 1, first formatted char at 0\n00 00                                               # Formatting run 1, Index to font record\n02 00                                               # Formatting run 2, first formatted char at 2\n00 00                                               # Formatting run 2, Index to font record\n\nFF FF FF                                            # extended data\n```\n\n----------------------------------------\n\nTITLE: Parsing Normal Text with Extended Information in Excel Format\nDESCRIPTION: This snippet illustrates the structure of normal text with extended information in Excel file format. It includes the string length, option flags, far east data size, string content, continuation record, and extended data.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/extendedtextstrings.txt#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1D 00                                               # String length 0x1b=29\n05                                                  # Option flag, 16bit + extended\n03 00 00 00                                         # Far east data size\n# String: At a dinner party or\n41 00 74 00 20 00 61 00 20 00\n64 00 69 00 6E 00 6E 00 65 00\n72 00 20 00 70 00 61 00 72 00\n74 00 79 00 20 00 6F 00 72 00\n\n# Continuation record\n00                                                  # option flag\n\n# string:at at at\n41 74 20\n41 74 20\n41 74 20\n\nFF FF FF                                            # extended data\n```\n\n----------------------------------------\n\nTITLE: Analyzing Excel String Data Structure with Formatting\nDESCRIPTION: This hexdump shows the binary representation of an Excel string with rich text formatting. It includes the string length (29 bytes), option flags indicating rich text with 16-bit encoding, and formatting run information.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/richtextdata.txt#2025-04-13_snippet_0\n\nLANGUAGE: hexdump\nCODE:\n```\n1D 00                                               # String length 0x1b=29\n09                                                  # Option flag, rich text + 16bit\n02 00                                               # Formatting runs\n# String: At a dinner party or\n41 00 74 00 20 00 61 00 20 00\n64 00 69 00 6E 00 6E 00 65 00\n72 00 20 00 70 00 61 00 72 00\n74 00 79 00 20 00 6F 00 72 00\n```\n\n----------------------------------------\n\nTITLE: Analyzing Excel String Continuation Record Format\nDESCRIPTION: This snippet shows a continuation record for Excel string data. It includes the option flag (0), the actual string content 'at at at' in ASCII format, and formatting run information specifying character positions and font record indices.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/richtextdata.txt#2025-04-13_snippet_1\n\nLANGUAGE: hexdump\nCODE:\n```\n# Continuation record\n00                                                  # option flag\n\n# string:at at at\n41 74 20\n41 74 20\n41 74 20\n\n00 00                                               # Formatting run 1, first formatted char at 0\n00 00                                               # Formatting run 1, Index to font record\n02 00                                               # Formatting run 2, first formatted char at 2\n00 00                                               # Formatting run 2, Index to font record\n```\n\n----------------------------------------\n\nTITLE: Displaying 16-bit Unicode String Binary Format in POI\nDESCRIPTION: An example of a string header record using 16-bit Unicode encoding (UTF-16). The record shows the binary representation of the string 'At a dinner party or' with a length of 20 characters and the option flag set to 0x01 indicating 16-bit encoding.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/stringacross2continuations.txt#2025-04-13_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n14 00                                               # String length 0x14=20\n01                                                  # Option flag, 16bit\n# String: At a dinner party or\n41 00 74 00 20 00 61 00 20 00\n64 00 69 00 6E 00 6E 00 65 00\n72 00 20 00 70 00 61 00 72 00\n74 00 79 00 20 00 6F 00 72 00\n```\n\n----------------------------------------\n\nTITLE: Encoding 16-bit String with Option Flag in Binary Format\nDESCRIPTION: Example of a string record with 16-bit encoding (option flag 01). The record contains the string \"At a dinner party or\" with a length of 20 characters, where each character takes two bytes due to 16-bit encoding.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/evencontinuation.txt#2025-04-13_snippet_0\n\nLANGUAGE: binary\nCODE:\n```\n14 00                                               # String length 0x14=20\n01                                                  # Option flag, 16bit\n# String: At a dinner party or\n41 00 74 00 20 00 61 00 20 00\n64 00 69 00 6E 00 6E 00 65 00\n72 00 20 00 70 00 61 00 72 00\n74 00 79 00 20 00 6F 00 72 00\n```\n\n----------------------------------------\n\nTITLE: Displaying 8-bit ASCII String Continuation Record in POI\nDESCRIPTION: A continuation record for a string using 8-bit ASCII encoding. The record shows the binary representation of the string 'At a dinner party' with a length of 17 characters and the option flag set to 0x00 indicating 8-bit encoding.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/stringacross2continuations.txt#2025-04-13_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n# Continuation record\n22 00                                               # String length 0x11=17\n00                                                  # Option flag, 8bit\n# String: At a dinner party\n41 74 20 61 20\n64 69 6E 6E 65\n72 20 70 61 72\n74 79\n```\n\n----------------------------------------\n\nTITLE: Encoding 8-bit String with Option Flag in Binary Format\nDESCRIPTION: Example of a continuation record with 8-bit encoding (option flag 00). The record contains the string \"At a dinner party\" with a length of 17 characters, where each character takes one byte due to 8-bit encoding.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/evencontinuation.txt#2025-04-13_snippet_1\n\nLANGUAGE: binary\nCODE:\n```\n# Continuation record (new string on the boundry)\n11 00                                               # String length 0x11=17\n00                                                  # Option flag, 8bit\n# String: At a dinner party\n41 74 20 61 20\n64 69 6E 6E 65\n72 20 70 61 72\n74 79\n```\n\n----------------------------------------\n\nTITLE: Displaying Simple String Continuation Record in POI\nDESCRIPTION: Another continuation record for a string with only an option flag and no explicit length field. The record shows the binary representation of the string 'At a dinner party' with the option flag set to 0x00.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/stringacross2continuations.txt#2025-04-13_snippet_2\n\nLANGUAGE: hex\nCODE:\n```\n# Continuation record\n00                                                  # option flag\n# String: At a dinner party\n41 74 20 61 20\n64 69 6E 6E 65\n72 20 70 61 72\n74 79\n```\n\n----------------------------------------\n\nTITLE: Example of Non-Continuation Record Format in Apache POI\nDESCRIPTION: This snippet demonstrates a non-continuation record, which is any record that is not of type 0x003C. This is important for understanding how record boundaries work in the Excel file format parsing.\nSOURCE: https://github.com/apache/poi/blob/trunk/test-data/spreadsheet/notenoughstrings.txt#2025-04-13_snippet_1\n\nLANGUAGE: binary\nCODE:\n```\n[non-continuation-record]\n00 11 22 33\n```"
  }
]