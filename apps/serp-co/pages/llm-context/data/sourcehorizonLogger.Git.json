[
  {
    "owner": "sourcehorizon",
    "repo": "logger.git",
    "content": "TITLE: Initializing and Using Logger in Dart\nDESCRIPTION: Creates a Logger instance and demonstrates basic logging. Shows how to log messages at different levels.\nSOURCE: https://github.com/sourcehorizon/logger.git/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar logger = Logger();\n\nlogger.d(\"Logger is working!\");\n```\n\nLANGUAGE: dart\nCODE:\n```\nlogger.t(\"Trace log\");\n\nlogger.d(\"Debug log\");\n\nlogger.i(\"Info log\");\n\nlogger.w(\"Warning log\");\n\nlogger.e(\"Error log\", error: 'Test Error');\n\nlogger.f(\"What a fatal log\", error: error, stackTrace: stackTrace);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Options in Dart\nDESCRIPTION: Shows how to create a Logger instance with custom options for filtering, printing, and output. Includes an example of configuring the PrettyPrinter with various formatting options.\nSOURCE: https://github.com/sourcehorizon/logger.git/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar logger = Logger(\n  filter: null, // Use the default LogFilter (-> only log in debug mode)\n  printer: PrettyPrinter(), // Use the PrettyPrinter to format and print log\n  output: null, // Use the default LogOutput (-> send everything to console)\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar logger = Logger(\n  printer: PrettyPrinter(\n      methodCount: 2, // Number of method calls to be displayed\n      errorMethodCount: 8, // Number of method calls if stacktrace is provided\n      lineLength: 120, // Width of the output\n      colors: true, // Colorful log messages\n      printEmojis: true, // Print an emoji for each log message\n      // Should each log print contain a timestamp\n      dateTimeFormat: DateTimeFormat.onlyTimeAndSinceStart,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in Dart Logger\nDESCRIPTION: Demonstrates how to set the log level to control which messages are displayed. In this example, it hides trace, debug, and info logs.\nSOURCE: https://github.com/sourcehorizon/logger.git/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nLogger.level = Level.warning;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom LogOutput in Dart\nDESCRIPTION: Demonstrates how to create a custom LogOutput by extending the LogOutput class. This example shows the default ConsoleOutput implementation that prints each log line to the console.\nSOURCE: https://github.com/sourcehorizon/logger.git/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass ConsoleOutput extends LogOutput {\n  @override\n  void output(OutputEvent event) {\n    for (var line in event.lines) {\n      print(line);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom LogPrinter in Dart\nDESCRIPTION: Shows how to implement a custom LogPrinter by extending the LogPrinter class. This basic example simply returns the log message as a single-item list.\nSOURCE: https://github.com/sourcehorizon/logger.git/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPrinter extends LogPrinter {\n  @override\n  List<String> log(LogEvent event) {\n    return [event.message];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Colored Logs with PrefixPrinter in Dart\nDESCRIPTION: Shows how to set up colored logs using the PrefixPrinter decorator, which can be useful when working with JetBrains IDEs and the Grep Console Plugin.\nSOURCE: https://github.com/sourcehorizon/logger.git/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar logger = Logger(\n    printer: PrefixPrinter(PrettyPrinter(colors: false))\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom LogFilter in Dart\nDESCRIPTION: Demonstrates how to create a custom LogFilter by extending the LogFilter class. This example shows a filter that allows all logs, which is not recommended for production use.\nSOURCE: https://github.com/sourcehorizon/logger.git/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyFilter extends LogFilter {\n  @override\n  bool shouldLog(LogEvent event) {\n    return true;\n  }\n}\n```"
  }
]