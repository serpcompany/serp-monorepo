[
  {
    "owner": "twistedfall",
    "repo": "opencv-rust",
    "content": "TITLE: Adding OpenCV dependency using Cargo TOML\nDESCRIPTION: This snippet demonstrates how to add the OpenCV dependency to your Rust project using Cargo.toml. It specifies the version of the OpenCV crate to be used.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nopencv = \"0.94.4\"\n```\n\n----------------------------------------\n\nTITLE: Importing OpenCV Prelude in Rust\nDESCRIPTION: This snippet shows how to import the OpenCV prelude in your Rust code. The prelude provides access to commonly used OpenCV functions and types.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse opencv::prelude::*;\n```\n\n----------------------------------------\n\nTITLE: Specifying Cargo features for OpenCV\nDESCRIPTION: This snippet demonstrates how to selectively enable OpenCV modules using Cargo features. Disabling default features and explicitly specifying required features can reduce build times and binary size.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/README.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nopencv = { version = ..., default-features = false, features = [\"calib3d\", \"features2d\", \"flann\"]}\n```\n\n----------------------------------------\n\nTITLE: Using opencv_type function in Rust\nDESCRIPTION: This snippet showcases how to use the `opencv_type()` function on Rust types to get the equivalent OpenCV type. This is similar to using the `CV_MAKETYPE` macro in C++ OpenCV code.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/README.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet t = u16::opencv_type(); // equivalent to CV_MAKETYPE(CV_16U, 1)\nlet t = Vec2f::opencv_type(); // equivalent to CV_MAKETYPE(CV_32F, 2)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCV and dependencies on Arch Linux\nDESCRIPTION: This shell command installs OpenCV, clang, and Qt6 on Arch Linux using the pacman package manager.  It's necessary to have these dependencies to build and use the opencv-rust crate.  Optionally, extra OpenCV modules can be installed with a separate command.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/INSTALL.md#_snippet_0\n\nLANGUAGE: shell script\nCODE:\n```\npacman -S clang qt6-base opencv\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCV development packages on Ubuntu\nDESCRIPTION: This shell command installs the OpenCV development packages, clang, and libclang-dev on Ubuntu using the apt package manager. These packages are required for building the opencv-rust crate and accessing OpenCV headers and libraries.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/INSTALL.md#_snippet_2\n\nLANGUAGE: shell script\nCODE:\n```\napt install libopencv-dev clang libclang-dev\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCV and LLVM on Windows with Vcpkg\nDESCRIPTION: This shell command installs OpenCV 4 with contrib and nonfree modules, along with LLVM, using the vcpkg package manager on Windows. LLVM is required for building. The `VCPKGRS_DYNAMIC` environment variable is suggested to be set to \"1\" for dynamic linking, unless static linking is specifically desired.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/INSTALL.md#_snippet_5\n\nLANGUAGE: shell script\nCODE:\n```\nvcpkg install llvm opencv4[contrib,nonfree]\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCV on macOS with Homebrew\nDESCRIPTION: This shell command installs OpenCV on macOS using the Homebrew package manager.  It assumes that a working C++ compiler and libclang are already present or will be installed separately (e.g., through Xcode command line tools or LLVM from Homebrew).\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/INSTALL.md#_snippet_6\n\nLANGUAGE: shell script\nCODE:\n```\nbrew install opencv\n```\n\n----------------------------------------\n\nTITLE: Installing additional OpenCV modules on Arch Linux\nDESCRIPTION: This shell command installs optional dependencies like vtk, glew, fmt, and openmpi, allowing for more OpenCV modules to be supported when building the opencv-rust crate. It uses the pacman package manager on Arch Linux.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/INSTALL.md#_snippet_1\n\nLANGUAGE: shell script\nCODE:\n```\npacman -S vtk glew fmt openmpi\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCV development packages on Opensuse\nDESCRIPTION: This shell command installs the OpenCV development packages, clang-devel, and gcc-c++ on Opensuse using the zypper package manager. These packages are required for compiling the opencv-rust crate and using OpenCV.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/INSTALL.md#_snippet_3\n\nLANGUAGE: shell script\nCODE:\n```\nzypper install opencv-devel clang-devel gcc-c++\n```\n\n----------------------------------------\n\nTITLE: Installing LLVM on macOS with Homebrew\nDESCRIPTION: This shell command installs LLVM on macOS using the Homebrew package manager. This is often needed when the system LLVM is not working or not configured properly for using the opencv-rust crate.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/INSTALL.md#_snippet_7\n\nLANGUAGE: shell script\nCODE:\n```\nbrew install llvm\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for OpenCV on macOS\nDESCRIPTION: These shell commands set environment variables necessary for OpenCV to work correctly on macOS. DYLD_FALLBACK_LIBRARY_PATH points to the Xcode toolchain libraries, LDFLAGS adds a linker flag, and LD_LIBRARY_PATH specifies the location of the OpenCV libraries.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/INSTALL.md#_snippet_8\n\nLANGUAGE: shell script\nCODE:\n```\nexport DYLD_FALLBACK_LIBRARY_PATH=\"$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/lib/\"\nexport LDFLAGS=-L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib\nexport LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib  \n```\n\n----------------------------------------\n\nTITLE: Setting OPENCV_LINK_LIBS for VCPKG on Windows\nDESCRIPTION: This snippet demonstrates how to set the OPENCV_LINK_LIBS environment variable to include missing linked libraries when using VCPKG on Windows. This is necessary to resolve linking errors in multiple files.  The variable is prepended by a '+'.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/TROUBLESHOOTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nOPENCV_LINK_LIBS=\"+user32,gdi32,comdlg32\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCV and LLVM on Windows with Chocolatey\nDESCRIPTION: This shell command installs OpenCV and LLVM on Windows using the Chocolatey package manager. LLVM is required for building the opencv-rust crate. After installation, environment variables need to be configured.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/INSTALL.md#_snippet_4\n\nLANGUAGE: shell script\nCODE:\n```\nchoco install llvm opencv\n```\n\n----------------------------------------\n\nTITLE: Setting DYLD_FALLBACK_LIBRARY_PATH for macOS\nDESCRIPTION: This snippet shows how to set the DYLD_FALLBACK_LIBRARY_PATH environment variable on macOS to help the OS find the libclang.dylib dynamic library.  This is useful to fix `dyld: Library not loaded: @rpath/libclang.dylib` errors during the build process.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/TROUBLESHOOTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport DYLD_FALLBACK_LIBRARY_PATH=\"$(xcode-select --print-path)/usr/lib/\"\n```\n\n----------------------------------------\n\nTITLE: Setting DYLD_FALLBACK_LIBRARY_PATH for Xcode on macOS\nDESCRIPTION: This snippet shows how to set the DYLD_FALLBACK_LIBRARY_PATH environment variable on macOS to help the OS find the libclang.dylib dynamic library when using Xcode.  This is useful to fix `dyld: Library not loaded: @rpath/libclang.dylib` errors during the build process.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/TROUBLESHOOTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport DYLD_FALLBACK_LIBRARY_PATH=\"$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/lib/\"\n```\n\n----------------------------------------\n\nTITLE: Checking Clang Toolchain Configuration\nDESCRIPTION: This snippet allows inspecting clang toolchain configuration to diagnose issues related to missing or invalid C++ standard library installations, which can cause `'limits' file not found` errors.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/TROUBLESHOOTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nclang -E -x c++ - -v\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Build with Backtrace\nDESCRIPTION: This snippet shows how to run `cargo build` with verbose output and a full backtrace, which can be helpful for debugging build issues and reporting problems.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/TROUBLESHOOTING.md#_snippet_4\n\nLANGUAGE: shell script\nCODE:\n```\nRUST_BACKTRACE=full cargo build -vv\n```\n\n----------------------------------------\n\nTITLE: Building Docker image for Raspberry Pi cross-compilation\nDESCRIPTION: This shell command builds a Docker image named `rpi-xcompile` using the Dockerfile located at `tools/docker/rpi-xcompile.Dockerfile`. The image is designed for cross-compiling to Raspberry Pi from an x86-64 Linux host.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/INSTALL.md#_snippet_9\n\nLANGUAGE: shell script\nCODE:\n```\ndocker build -t rpi-xcompile -f tools/docker/rpi-xcompile.Dockerfile tools\n```\n\n----------------------------------------\n\nTITLE: CMake Project Configuration\nDESCRIPTION: This CMake configuration sets up the build environment for an OpenCV project. It specifies the minimum CMake version, declares the project name, finds the OpenCV package, includes directories, and links the executable with OpenCV libraries.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/cmake/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6)\n\nproject(OpenCVProbe)\n\nfind_package(${OCVRS_PACKAGE_NAME} REQUIRED)\n\nmessage(\"OCVRS_INCLUDE_DIRS:${OpenCV_INCLUDE_DIRS}\")\nmessage(\"OCVRS_VERSION:${OpenCV_VERSION}\")\n\ninclude_directories(${OpenCV_INCLUDE_DIRS})\nadd_executable(ocvrs_probe ocvrs_probe.cpp)\ntarget_link_libraries(ocvrs_probe ${OpenCV_LIBS})\n```\n\n----------------------------------------\n\nTITLE: Setting OpenCV Include Paths - Rust\nDESCRIPTION: This snippet shows how to set the OpenCV include paths using the `OPENCV_INCLUDE_PATHS` environment variable. This is a replacement for the removed `OPENCV_CLANG_STDLIB_PATH` environment variable.\nSOURCE: https://github.com/twistedfall/opencv-rust/blob/master/CHANGES.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nOPENCV_INCLUDE_PATHS=\"<path_to_clang_stdlib_path>,+\"\n```"
  }
]