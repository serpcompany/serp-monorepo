[
  {
    "owner": "vlang",
    "repo": "ui",
    "content": "TITLE: Displaying and Updating a ListBox in V UI - V Language\nDESCRIPTION: Demonstrates creation of a ui.listbox for item selection, with dynamic population via add_item and reset methods. Requires the ui module. Listbox is defined with id, and items are managed programmatically, allowing refresh as data changes. The selected_item method fetches the current (id, text) tuple, defaulting to ('', '') if none is selected. Inputs: dynamic data set, callbacks for on_change; Outputs: interactive list display and selection. Supports multi-selection, reordering, external file drops with options enabled.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_12\n\nLANGUAGE: v\nCODE:\n```\nui.listbox(\n    id: 'lb_people'\n    // Items added dynamically via app.update_listbox()\n),\n\n// Update items later:\napp.lb_people.reset()\nfor p in app.people {\n    app.lb_people.add_item(p.id, person_name(p.name, p.surname))\n}\n\n// Get selection:\nid, _ := app.lb_people.selected_item()\n\n```\n\n----------------------------------------\n\nTITLE: Presenting Data in a Simple Grid with V UI - V Language\nDESCRIPTION: Illustrates how to use a ui.grid widget to display tabular data. Grid is initialized with explicit column headers and a 2D array for the body, and sized based on available window area. Ideal for read-only or non-interactive datasets. Requires header and body arrays as input; produces a rendered grid within the UI, with no built-in support for editing or sorting. Dependent on ui module.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_15\n\nLANGUAGE: v\nCODE:\n```\nh := ['One', 'Two', 'Three']\nb := [['body one', 'body two', 'body three'], ['V', 'UI is', 'Beautiful']]\napp.grid = ui.grid(header: h, body: b, width: win_width - 10, height: win_height)\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Progress with V UI ProgressBar in V\nDESCRIPTION: Demonstrates creating a `ui.progressbar` widget. It sets the width, maximum value (10), and initial value (2). The progress bar object is assigned to `app.pbar`, allowing its `val` property to be updated later to reflect progress changes (e.g., `app.pbar.val++`).\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_8\n\nLANGUAGE: v\nCODE:\n```\napp.pbar = ui.progressbar(\n    width: 170,\n    max:   10,\n    val:   2 // Initial value, can be updated later: app.pbar.val++\n)\n```\n\n----------------------------------------\n\nTITLE: Box Layout Definition in V\nDESCRIPTION: This code snippet demonstrates the usage of `ui.box_layout` in V to define the layout of UI elements within a container. It shows how to specify the position and size of child widgets using pixels, percentages, and relative positioning to other child widgets.  The bounding box syntax is crucial for defining the layout.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_19\n\nLANGUAGE: V\nCODE:\n```\nui.box_layout(\n    id:       'bl',\n    children: {\n        // Top-left corner, 30x30 pixels\n        'id1: (0,0) ++ (30,30)': ui.rectangle(...),\n        // From (30,30) to 30.5 pixels from the right/bottom edges\n        'id2: (30,30) -> (-30.5,-30.5)': ui.rectangle(...),\n        // From center (50%, 50%) to bottom-right corner (100%, 100%)\n        'id3: (50%,50%) ->  (100%,100%)': ui.rectangle(...),\n        // Bottom-right corner, 30x30 pixels (size defined from bottom-right)\n        'id4: (-30.5, -30.5) ++ (30,30)': ui.rectangle(...),\n        // Position relative to id4, size 20x20\n        'id5: (@id4.x + 5, @id4.y+5) ++ (20,20)': ui.rectangle(...)\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Menus and MenuBar in V UI - V Language\nDESCRIPTION: Demonstrates hierarchical menu creation with ui.menuitem, ui.menu, and ui.menubar. Menu structure is defined as a nested array: top-level menu items (e.g., 'File') reference submenus, which contain actionable items with callbacks. Requires ui library. Menubar is instantiated by connecting an array of menu_items, making the full menu visible in the layout. Inputs: text labels, callback actions/submenu refs; Outputs: interactive context or application menus. May be embedded in layouts or via context hooks; action functions handle menu commands.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_14\n\nLANGUAGE: v\nCODE:\n```\n// Structure definition\nmenu_items := [\n    ui.menuitem(\n        text:    'File',\n        submenu: ui.menu(\n            items: [\n                ui.menuitem(text: 'Open', action: menu_click),\n                ui.menuitem(text: 'Save', action: menu_click),\n                ui.menuitem(text: 'Exit', action: menu_click),\n            ]\n        )\n    ),\n    // ... other top-level menus\n]\n// Usage in layout\nui.menubar(\n    id:    'menubar',\n    items: menu_items\n)\n\n```\n\n----------------------------------------\n\nTITLE: Animating Property Transitions with ui.transition in V UI - V Language\nDESCRIPTION: Shows how to use ui.transition widgets to animate integer property changes (e.g., widget x/y offset), specifying duration and easing function. Transition is set up with set_value (binding the animated value) and target_value assignments (destination). Included in children to ensure proper redraw/animation. Actual animation is handled inside the draw() method of Transition. Inputs: pointers to integer variables, event-based triggers like button clicks; Outputs: animated property changes in the UI. Relies on ui.easing functions and transition duration configuration.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_16\n\nLANGUAGE: v\nCODE:\n```\n// Initialization\napp.x_transition = ui.transition(duration: 750, easing: ui.easing(.ease_in_out_cubic))\napp.y_transition = ui.transition(duration: 750, easing: ui.easing(.ease_in_out_quart))\napp.picture = ui.picture(...)\n\n// In window layout:\nchildren: [\n    // ... other widgets\n    app.picture,\n    app.x_transition, // Add transition widgets to the window\n    app.y_transition,\n]\n\n// To start animation:\nfn (mut app App) btn_toggle_click(button &ui.Button) {\n    // Set the target variable ONCE\n    if app.x_transition.animated_value == 0 {\n        app.x_transition.set_value(&app.picture.offset_x)\n        app.y_transition.set_value(&app.picture.offset_y)\n    }\n    // Set the destination value\n    app.x_transition.target_value = new_x_position\n    app.y_transition.target_value = new_y_position\n    // The draw() method of the transition handles the animation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic V UI Window in V\nDESCRIPTION: Demonstrates the fundamental structure of a V UI application. It imports the `ui` module, creates a main `ui.window` with specified dimensions, title, and a simple `ui.column` layout containing a `ui.label`, and then starts the application's event loop using `ui.run()`.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport ui\n\nfn main() {\n    // Create the main window\n    window := ui.window(\n        width: 800,\n        height: 600,\n        title: 'My App',\n        layout: ui.column( // Add your root layout here\n            children: [\n                ui.label(text: 'Hello, V UI!')\n            ]\n        )\n    )\n    // Start the event loop\n    ui.run(window)\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Custom Graphics with CanvasPlus in V UI - V Language\nDESCRIPTION: Illustrates creation of a custom drawing surface using ui.canvas_plus. Requires import of V UI and gx (graphics) modules. The canvas is sized to 400x275 pixels, renders with the specified bg_color and bg_radius, and delegates actual drawing to app.draw. The draw function receives a DrawDevice and CanvasLayout, enabling fine-grained vector drawing via canvas methods like draw_device_rect_empty and draw_device_text. Inputs: dimension parameters, callbacks; Outputs: rendered graphics surface. Prerequisites: registration of custom draw callback with required method signature.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_11\n\nLANGUAGE: v\nCODE:\n```\nui.canvas_plus(\n    width:     400,\n    height:    275,\n    on_draw:   app.draw, // Custom drawing function in the App struct\n    bg_color:  gx.Color{255, 220, 220, 150},\n    bg_radius: 10\n)\n\n// Inside the app.draw function:\nfn (app &State) draw(mut d ui.DrawDevice, c &ui.CanvasLayout) {\n    // Use methods like c.draw_device_rect_empty, c.draw_device_line, c.draw_device_text\n    // Example:\n    c.draw_device_rect_empty(d, marginx, y, table_width, cell_height, gx.gray)\n    c.draw_device_text(d, marginx + 5, y + 5, user.first_name)\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Arranging Widgets with Row and Column Layouts in V UI - V Language\nDESCRIPTION: Provides examples for organizing multiple widgets linearly using ui.row and ui.column. Requires V UI's stacking primitives. Row arranges children horizontally with custom spacing and compact sizing, while column places children vertically with optional scrolling. The widths/heights parameters adjust sizing policies for children. Inputs: list of child widgets, sizing modes, optional scrolling; Outputs: adaptive layouts handling both fixed and flexible arrangements. Commonly embeds other widgets—e.g., buttons, textboxes—inside children arrays.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_18\n\nLANGUAGE: v\nCODE:\n```\n// Row with compact buttons and spacing\nui.row(\n    id:       'btn_row',\n    widths:   ui.compact, // Children take their own width\n    heights:  20.0,       // Fixed height for the row\n    spacing:  80,         // 80px spacing between buttons\n    children: [ /* ... buttons ... */ ]\n)\n\n// Column with mixed height children\nui.column(\n    spacing:    10,\n    widths:     ui.compact, // Column takes width of widest child\n    heights:    ui.compact, // Children take their own height\n    scrollview: true,      // Enable vertical scrolling if needed\n    children:   [ /* ... textboxes, checkboxes, etc. ... */ ]\n)\n\n```\n\n----------------------------------------\n\nTITLE: Canvas Layout Definition in V\nDESCRIPTION: This snippet illustrates the use of `ui.canvas_layout` in V, which allows direct positioning of widgets using `ui.at(x, y, widget)`.  It also showcases the `on_draw` callback for custom drawing.  Dependencies include the `ui` module and any custom drawing functions.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_20\n\nLANGUAGE: V\nCODE:\n```\nui.canvas_layout(\n    id:              'demo_cl',\n    on_draw:         draw, // Custom background drawing\n    scrollview:      true,\n    children:        [\n        ui.at(10, 10, ui.button(id:'b_thm', ...)), // Place button at (10, 10)\n        ui.at(120, 10, ui.dropdown(...)),         // Place dropdown at (120, 10)\n        // ... other widgets placed with ui.at()\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Drawing a Rounded Rectangle with Text using V UI in V\nDESCRIPTION: Illustrates how to use `ui.rectangle` to draw a shape. This example creates a rectangle with specified height and width, sets a fill color using `gx.rgb()`, applies rounded corners with a radius of 10, and displays the text 'Red' inside it.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_9\n\nLANGUAGE: v\nCODE:\n```\nui.rectangle(\n    height: 64,\n    width:  64,\n    color:  gx.rgb(255, 100, 100),\n    radius: 10,\n    text:   'Red'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiline V UI TextBox in V\nDESCRIPTION: Illustrates the creation of a multiline `ui.textbox`. It sets the `mode` to `.multiline`, specifies an ID, z-index, height, line height factor, text size, font name, and background color using `gx.hex()`. This type of textbox is suitable for larger text input or display areas.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_3\n\nLANGUAGE: v\nCODE:\n```\n// Multiline textbox\nui.textbox(\n    mode:               .multiline,\n    id:                 'edit',\n    z_index:            20,\n    height:             200,\n    line_height_factor: 1.0,\n    text_size:          24,\n    text_font_name:     'fixed',\n    bg_color:           gx.hex(0xfcf4e4ff)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple V UI TextBox with Data Binding in V\nDESCRIPTION: Demonstrates creating a single-line `ui.textbox` with a maximum length, width, and placeholder text. It utilizes two-way data binding by passing pointers to `app.first_name` (for text content) and `app.is_error` (for error state). The `is_focused` parameter gives it initial focus. Assumes `app` holds application state.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_2\n\nLANGUAGE: v\nCODE:\n```\n// Simple textbox with placeholder and data binding\nui.textbox(\n    max_len:     20,\n    width:       200,\n    placeholder: 'First name',\n    text:        &app.first_name, // Bind to app.first_name string\n    is_error:    &app.is_error,  // Bind error state\n    is_focused: true\n),\n```\n\n----------------------------------------\n\nTITLE: Running V UI Examples\nDESCRIPTION: This bash snippet describes how to execute the example programs provided with the V UI library. The user navigates into the `examples` directory.  Then uses `v run` command followed by the specific example file names like `users.v`, `rgb_color.v`, or other available `.v` files to execute the UI demos.\nSOURCE: https://github.com/vlang/ui/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd examples\nv run users.v\nv run rgb_color.v\nv run ...\n```\n\n----------------------------------------\n\nTITLE: Installing and Using V UI Library\nDESCRIPTION: These bash commands outline the process of installing and using the V UI library.  `v up` updates the V toolchain.  `v install ui` installs the UI library. This setup prepares the development environment.\nSOURCE: https://github.com/vlang/ui/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nv up\nv install ui\n```\n\n----------------------------------------\n\nTITLE: Creating a UI Window in V\nDESCRIPTION: This V code snippet demonstrates the creation of a simple UI application. It defines an `App` struct to hold application state, initializes a window, and adds UI elements, including textboxes for first and last names, organized within a row and column layout. The `ui.run()` function starts the UI event loop.\nSOURCE: https://github.com/vlang/ui/blob/master/README.md#_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport ui\n\nstruct App {\nmut:\n    window     &ui.Window = unsafe { nil }\n    first_name string\n    last_name  string\n}\n\nfn main() {\n    mut app := &App{}\n    app.window = ui.window(\n        width: 600\n        height: 400\n        title: 'V UI Demo'\n        children: [\n            ui.row(\n                margin: ui.Margin{10, 10, 10, 10}\n                children: [\n                    ui.column(\n                        width: 200\n                        spacing: 13\n                        children: [\n                            ui.textbox(\n                                max_len: 20\n                                width: 200\n                                placeholder: 'First name'\n                                text: &app.first_name\n                            ),\n                            ui.textbox(\n                                max_len: 50\n                                width: 200\n                                placeholder: 'Last name'\n                                text: &app.last_name\n                            ),\n                        ]\n                    ),\n                ]\n            ),\n        ]\n    )\n    ui.run(app.window)\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Standalone UI Application in V\nDESCRIPTION: This code snippet shows how to run a UI application developed as a module as a standalone application. It imports the `ui` and `ui.apps.editor` modules. It creates an instance of the `editor` application using the `app()` function and then runs the application using the `run()` method.\nSOURCE: https://github.com/vlang/ui/blob/master/apps/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport ui\nimport ui.apps.editor\n\nfn main() {\n\tmut app := editor.app()\n\tapp.run()\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Toggle Switcher with Callback in V UI - V Language\nDESCRIPTION: Demonstrates creation of a toggle switch (boolean on/off) via ui.switcher, setting initial open state and assigning an on_click callback to react to changes. The switcher is stored in a field (app.switcher) for further control. Inputs: open state, click callback; Outputs: interactive switch in the UI triggering application logic on toggle. Requires ui library; callback receives reference to Switch widget when invoked.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_17\n\nLANGUAGE: v\nCODE:\n```\napp.switcher = ui.switcher(open: true, on_click: app.on_switch_click)\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Static Text with V UI Label in V\nDESCRIPTION: Shows how to create a simple `ui.label` widget to display static text. It assigns an ID ('counter'), sets the display text ('2/10'), and specifies a custom font ('fixed_bold_italic').\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_4\n\nLANGUAGE: v\nCODE:\n```\nui.label(id: 'counter', text: '2/10', text_font_name: 'fixed_bold_italic')\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal V UI Slider in V\nDESCRIPTION: Shows the creation of a `ui.slider` widget. This example configures a horizontal slider with a specific width, height, orientation, maximum value (100), initial value (0), and assigns a callback function (`app.on_hor_value_changed`) to handle value changes. Assumes `app` holds application state and the callback function.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_7\n\nLANGUAGE: v\nCODE:\n```\napp.hor_slider = ui.slider(\n    width:            200,\n    height:           20,\n    orientation:      .horizontal,\n    max:              100,\n    val:              0,\n    on_value_changed: app.on_hor_value_changed\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image with V UI Picture Widget in V\nDESCRIPTION: Shows how to display an image using the `ui.picture` widget. It assigns an ID ('logo'), sets the display width and height (the image will be scaled), and specifies the image source path using a variable `logo`. Assumes the `logo` variable holds a valid path string.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_10\n\nLANGUAGE: v\nCODE:\n```\nui.picture(\n    id:     'logo',\n    width:  50,\n    height: 50,\n    path:   logo // Variable holding the image path\n)\n```\n\n----------------------------------------\n\nTITLE: Creating V UI CheckBoxes in V\nDESCRIPTION: Demonstrates creating `ui.checkbox` widgets. The first checkbox is initialized as checked (`checked: true`) and has associated text. The second checkbox is created with default settings (unchecked) and its label text.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_5\n\nLANGUAGE: v\nCODE:\n```\nui.checkbox(\n    checked: true,\n    text:    'Online registration'\n),\nui.checkbox(text: 'Subscribe to the newsletter')\n```\n\n----------------------------------------\n\nTITLE: Creating a V UI Button with Tooltip and Click Handler in V\nDESCRIPTION: Shows how to create a `ui.button` widget. It sets the button's width, text, tooltip (including multiline text using '\\n'), assigns a click handler (`app.btn_add_click`), and specifies a corner radius of 0.0 for sharp corners. Assumes `app` holds the application state and contains the `btn_add_click` method.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nui.button(\n    width:    60,\n    text:     'Add user',\n    tooltip:  'Required fields:\\n  * First name\\n  * Last name\\n  * Age',\n    on_click: app.btn_add_click, // `app` holds the application state\n    radius:   .0\n),\n```\n\n----------------------------------------\n\nTITLE: Implementing V UI Radio Buttons for Single Selection in V\nDESCRIPTION: Illustrates how to create a group of `ui.radio` buttons for selecting a single option. It sets the width, provides a list of string values for the options, and adds a title. The created `ui.Radio` object is assigned to `app.country`. The selected value can later be retrieved using the `selected_value()` method.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_6\n\nLANGUAGE: v\nCODE:\n```\napp.country = ui.radio(\n    width:  200,\n    values: ['United States', 'Canada', 'United Kingdom', 'Australia'],\n    title:  'Country'\n)\n// Get selected value later:\nselected := app.country.selected_value()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running UI Applications with Window Manager in V\nDESCRIPTION: This code snippet demonstrates how to initialize and run multiple UI applications using a window manager. It imports the `ui`, `ui.apps.users`, and `ui.apps.editor` modules. It creates instances of the `users` and `editor` applications, adds them to the window manager with specified dimensions and positions, and then runs the window manager to display the applications.\nSOURCE: https://github.com/vlang/ui/blob/master/apps/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport ui\nimport ui.apps.users\nimport ui.apps.editor\n\nfn main() {\n\tmut wm := ui.wm()\n\tmut app := users.new()\n\twm.add('appusers: (20,20) ++ (600,400)', mut app)\n\tmut app2 := editor.new()\n\twm.add('editor: (400,10) ++ (600,400)', mut app2)\n\twm.run()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Dropdown Menu with Selection Callbacks in V UI - V Language\nDESCRIPTION: Shows how to configure a dropdown menu using ui.dropdown, specifying display items and providing an on_selection_changed callback. Integrates a list of menu choices via items: array of DropdownItem structs. The selected_index determines which item is pre-selected. The callback receives a reference on change to handle updates elsewhere in the app. Inputs: item definitions, optional default text; Outputs: single-option selectable dropdown displayed. Requires V UI library; supports overriding with text arrays or specialized struct arrays.\nSOURCE: https://github.com/vlang/ui/blob/master/docs.md#_snippet_13\n\nLANGUAGE: v\nCODE:\n```\nui.dropdown(\n    id:                   'dd_flight',\n    z_index:              10,\n    selected_index:       0,\n    on_selection_changed: app.dd_change,\n    items:                [\n        ui.DropdownItem{ text: 'one-way flight' },\n        ui.DropdownItem{ text: 'return flight' },\n    ]\n),\n\n```\n\n----------------------------------------\n\nTITLE: Running V Language UI Demo in Live Mode - Bash\nDESCRIPTION: Executes the vui_demo.v V program with the live flag enabled, allowing for immediate recompilation and re-execution upon file changes. Requires V language compiler installed and accessible from the command line. The command expects the vui_demo.v source file in the current directory and runs it interactively.\nSOURCE: https://github.com/vlang/ui/blob/master/bin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nv -live run vui_demo.v\n```"
  }
]