[
  {
    "owner": "humanizr",
    "repo": "humanizer",
    "content": "TITLE: Humanizing TimeSpan with Extension Methods in C#\nDESCRIPTION: This snippet presents the TimeSpan extension method Humanize which converts a timespan into a human-readable representation. The method includes optional parameters for precision, culture, maxUnit, minUnit, collectionSeparator, and a flag to output as words. The ToAge method calculates age from timespan.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\npublic static class TimeSpanHumanizeExtensions\n{\n    public static string Humanize(this System.TimeSpan timeSpan, int precision = 1, System.Globalization.CultureInfo? culture = null, Humanizer.TimeUnit maxUnit = 5, Humanizer.TimeUnit minUnit = 0, string? collectionSeparator = \", \", bool toWords = false) { }\n    public static string Humanize(this System.TimeSpan timeSpan, int precision, bool countEmptyUnits, System.Globalization.CultureInfo? culture = null, Humanizer.TimeUnit maxUnit = 5, Humanizer.TimeUnit minUnit = 0, string? collectionSeparator = \", \", bool toWords = false) { }\n    public static string ToAge(this System.TimeSpan timeSpan, System.Globalization.CultureInfo? culture = null, Humanizer.TimeUnit maxUnit = 7, bool toWords = false) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Numbers to TimeSpan in C#\nDESCRIPTION: These extension methods allow numerical values (byte, double, int, long, sbyte, short, uint, ulong, ushort) to be easily converted to TimeSpan objects representing durations in days, hours, milliseconds, minutes, and seconds. Each method returns a System.TimeSpan object.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class NumberToTimeSpanExtensions\n    {\n        public static System.TimeSpan Days(this byte days) { }\n        public static System.TimeSpan Days(this double days) { }\n        public static System.TimeSpan Days(this int days) { }\n        public static System.TimeSpan Days(this long days) { }\n        public static System.TimeSpan Days(this sbyte days) { }\n        public static System.TimeSpan Days(this short days) { }\n        public static System.TimeSpan Days(this uint days) { }\n        public static System.TimeSpan Days(this ulong days) { }\n        public static System.TimeSpan Days(this ushort days) { }\n        public static System.TimeSpan Hours(this byte hours) { }\n        public static System.TimeSpan Hours(this double hours) { }\n        public static System.TimeSpan Hours(this int hours) { }\n        public static System.TimeSpan Hours(this long hours) { }\n        public static System.TimeSpan Hours(this sbyte hours) { }\n        public static System.TimeSpan Hours(this short hours) { }\n        public static System.TimeSpan Hours(this uint hours) { }\n        public static System.TimeSpan Hours(this ulong hours) { }\n        public static System.TimeSpan Hours(this ushort hours) { }\n        public static System.TimeSpan Milliseconds(this byte ms) { }\n        public static System.TimeSpan Milliseconds(this double ms) { }\n        public static System.TimeSpan Milliseconds(this int ms) { }\n        public static System.TimeSpan Milliseconds(this long ms) { }\n        public static System.TimeSpan Milliseconds(this sbyte ms) { }\n        public static System.TimeSpan Milliseconds(this short ms) { }\n        public static System.TimeSpan Milliseconds(this uint ms) { }\n        public static System.TimeSpan Milliseconds(this ulong ms) { }\n        public static System.TimeSpan Milliseconds(this ushort ms) { }\n        public static System.TimeSpan Minutes(this byte minutes) { }\n        public static System.TimeSpan Minutes(this double minutes) { }\n        public static System.TimeSpan Minutes(this int minutes) { }\n        public static System.TimeSpan Minutes(this long minutes) { }\n        public static System.TimeSpan Minutes(this sbyte minutes) { }\n        public static System.TimeSpan Minutes(this short minutes) { }\n        public static System.TimeSpan Minutes(this uint minutes) { }\n        public static System.TimeSpan Minutes(this ulong minutes) { }\n        public static System.TimeSpan Minutes(this ushort minutes) { }\n        public static System.TimeSpan Seconds(this byte seconds) { }\n        public static System.TimeSpan Seconds(this double seconds) { }\n        public static System.TimeSpan Seconds(this int seconds) { }\n        public static System.TimeSpan Seconds(this long seconds) { }\n        public static System.TimeSpan Seconds(this sbyte seconds) { }\n        public static System.TimeSpan Seconds(this short seconds) { }\n        public static System.TimeSpan Seconds(this uint seconds) { }\n        public static System.TimeSpan Seconds(this ulong seconds) { }\n        public static System.TimeSpan Seconds(this ushort seconds) { }\n        public static System.TimeSpan Weeks(this byte input) { }\n        public static System.TimeSpan Weeks(this double input) { }\n        public static System.TimeSpan Weeks(this int input) { }\n        public static System.TimeSpan Weeks(this long input) { }\n        public static System.TimeSpan Weeks(this sbyte input) { }\n        public static System.TimeSpan Weeks(this short input) { }\n        public static System.TimeSpan Weeks(this uint input) { }\n        public static System.TimeSpan Weeks(this ulong input) { }\n        public static System.TimeSpan Weeks(this ushort input) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Ordinalize Extension Method for Integers and Strings - C#\nDESCRIPTION: Defines extension methods for `int` and `string` to convert numbers into their ordinal representation (e.g., 1 -> 1st, 2 -> 2nd). These methods can also accept parameters for grammatical gender, word form, and culture-specific formatting.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Ordinalize(this int number) { }\n        public static string Ordinalize(this string numberString) { }\n        public static string Ordinalize(this int number, Humanizer.GrammaticalGender gender) { }\n        public static string Ordinalize(this int number, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this int number, System.Globalization.CultureInfo culture) { }\n        public static string Ordinalize(this string numberString, Humanizer.GrammaticalGender gender) { }\n        public static string Ordinalize(this string numberString, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this string numberString, System.Globalization.CultureInfo culture) { }\n        public static string Ordinalize(this int number, Humanizer.GrammaticalGender gender, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this int number, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo culture) { }\n        public static string Ordinalize(this int number, System.Globalization.CultureInfo culture, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this string numberString, Humanizer.GrammaticalGender gender, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this string numberString, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo culture) { }\n        public static string Ordinalize(this string numberString, System.Globalization.CultureInfo culture, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this int number, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo culture, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this string numberString, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo culture, Humanizer.WordForm wordForm) { }\n```\n\n----------------------------------------\n\nTITLE: Humanizing DateTime in C#\nDESCRIPTION: This extension method humanizes a DateTime value. It takes optional parameters for UTC date specification, a date to compare against, and culture.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Humanize(this System.DateTime input, bool? utcDate = default, System.DateTime? dateToCompareAgainst = default, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: Assembly Metadata Definition C#\nDESCRIPTION: This code snippet defines assembly-level metadata attributes, including IsTrimmable, NeutralResourcesLanguage, and TargetFramework, specifying project properties and dependencies. The `IsTrimmable` attribute indicates that the assembly is trimmable during publishing, and `TargetFramework` specifies .NET 8.0 as the target framework.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: System.Reflection.AssemblyMetadata(\"IsTrimmable\", \"True\")]\n[assembly: System.Resources.NeutralResourcesLanguage(\"en\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETCoreApp,Version=v8.0\", FrameworkDisplayName=\".NET 8.0\")]\n```\n\n----------------------------------------\n\nTITLE: Converting Numbers to Words in C#\nDESCRIPTION: These extension methods allow integers and longs to be converted to their word representation (e.g., 1 -> \"one\"). It allows specifying the culture, grammatical gender, and word form, as well as adding \"and\". Relies on the Humanizer library.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class NumberToWordsExtension\n    {\n        public static string ToOrdinalWords(this int number, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToOrdinalWords(this int number, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToOrdinalWords(this int number, Humanizer.WordForm wordForm, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToOrdinalWords(this int number, Humanizer.GrammaticalGender gender, Humanizer.WordForm wordForm, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToTuple(this int number, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToWords(this int number, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToWords(this int number, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToWords(this int number, Humanizer.WordForm wordForm, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToWords(this int number, bool addAnd, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToWords(this long number, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToWords(this long number, System.Globalization.CultureInfo? culture = null, bool addAnd = true) { }\n        public static string ToWords(this int number, Humanizer.WordForm wordForm, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToWords(this int number, bool addAnd, Humanizer.WordForm wordForm, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToWords(this long number, Humanizer.WordForm wordForm, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo? culture = null) { }\n        public static string ToWords(this long number, Humanizer.WordForm wordForm, System.Globalization.CultureInfo? culture = null, bool addAnd = false) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: ByteRate Class Definition C#\nDESCRIPTION: This code snippet defines the `ByteRate` class, which represents a rate of data transfer (bytes per unit of time). It includes properties for the `Size` (ByteSize) and `Interval` (TimeSpan) and methods for humanizing the rate into a readable string, optionally specifying the time unit and culture.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Humanizer\n{\n    public class ByteRate\n    {\n        public ByteRate(Humanizer.ByteSize size, System.TimeSpan interval) { }\n        public System.TimeSpan Interval { get; }\n        public Humanizer.ByteSize Size { get; }\n        public string Humanize(Humanizer.TimeUnit timeUnit = 1) { }\n        public string Humanize(string? format, Humanizer.TimeUnit timeUnit = 1, System.Globalization.CultureInfo? culture = null) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Humanizing Strings with Extension Methods in C#\nDESCRIPTION: This snippet shows the string extension method Humanize which can take an input string and a letter casing type as parameters. These methods convert a string into a more human-readable format. The LetterCasing enum controls the capitalization of the output.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\npublic static class StringHumanizeExtensions\n{\n    public static string Humanize(this string input) { }\n    public static string Humanize(this string input, Humanizer.LetterCasing casing) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Humanizing IEnumerable with string formatter and separator in C#\nDESCRIPTION: This extension method combines a string-based display formatter with a custom separator. It transforms the elements into strings with the formatter before joining them with the given separator. The exact implementation is not provided, but this shows the declaration.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Humanize<T>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, string> displayFormatter, string separator) { }\n```\n\n----------------------------------------\n\nTITLE: Defining ByteSize Extensions C#\nDESCRIPTION: Defines extension methods for numeric types to create ByteSize instances and to humanize ByteSize values. These extensions provide a fluent API for converting numeric types to ByteSize and formatting ByteSize objects into human-readable strings, potentially with specified formats or IFormatProvider instances.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Humanizer\n{\n    public static class ByteSizeExtensions\n    {\n        public static Humanizer.ByteSize Bits(this byte input) { }\n        public static Humanizer.ByteSize Bits(this int input) { }\n        public static Humanizer.ByteSize Bits(this long input) { }\n        public static Humanizer.ByteSize Bits(this sbyte input) { }\n        public static Humanizer.ByteSize Bits(this short input) { }\n        public static Humanizer.ByteSize Bits(this uint input) { }\n        public static Humanizer.ByteSize Bits(this ushort input) { }\n        public static Humanizer.ByteSize Bytes(this byte input) { }\n        public static Humanizer.ByteSize Bytes(this double input) { }\n        public static Humanizer.ByteSize Bytes(this int input) { }\n        public static Humanizer.ByteSize Bytes(this long input) { }\n        public static Humanizer.ByteSize Bytes(this sbyte input) { }\n        public static Humanizer.ByteSize Bytes(this short input) { }\n        public static Humanizer.ByteSize Bytes(this uint input) { }\n        public static Humanizer.ByteSize Bytes(this ushort input) { }\n        public static Humanizer.ByteSize Gigabytes(this byte input) { }\n        public static Humanizer.ByteSize Gigabytes(this double input) { }\n        public static Humanizer.ByteSize Gigabytes(this int input) { }\n        public static Humanizer.ByteSize Gigabytes(this long input) { }\n        public static Humanizer.ByteSize Gigabytes(this sbyte input) { }\n        public static Humanizer.ByteSize Gigabytes(this short input) { }\n        public static Humanizer.ByteSize Gigabytes(this uint input) { }\n        public static Humanizer.ByteSize Gigabytes(this ushort input) { }\n        public static string Humanize(this Humanizer.ByteSize input, System.IFormatProvider formatProvider) { }\n        public static string Humanize(this Humanizer.ByteSize input, string? format = null) { }\n        public static string Humanize(this Humanizer.ByteSize input, string? format, System.IFormatProvider? formatProvider) { }\n        public static Humanizer.ByteSize Kilobytes(this byte input) { }\n        public static Humanizer.ByteSize Kilobytes(this double input) { }\n        public static Humanizer.ByteSize Kilobytes(this int input) { }\n        public static Humanizer.ByteSize Kilobytes(this long input) { }\n        public static Humanizer.ByteSize Kilobytes(this sbyte input) { }\n        public static Humanizer.ByteSize Kilobytes(this short input) { }\n        public static Humanizer.ByteSize Kilobytes(this uint input) { }\n        public static Humanizer.ByteSize Kilobytes(this ushort input) { }\n        public static Humanizer.ByteSize Megabytes(this byte input) { }\n        public static Humanizer.ByteSize Megabytes(this double input) { }\n        public static Humanizer.ByteSize Megabytes(this int input) { }\n        public static Humanizer.ByteSize Megabytes(this long input) { }\n        public static Humanizer.ByteSize Megabytes(this sbyte input) { }\n        public static Humanizer.ByteSize Megabytes(this short input) { }\n        public static Humanizer.ByteSize Megabytes(this uint input) { }\n        public static Humanizer.ByteSize Megabytes(this ushort input) { }\n        public static Humanizer.ByteRate Per(this Humanizer.ByteSize size, System.TimeSpan interval) { }\n        public static Humanizer.ByteSize Terabytes(this byte input) { }\n        public static Humanizer.ByteSize Terabytes(this double input) { }\n        public static Humanizer.ByteSize Terabytes(this int input) { }\n        public static Humanizer.ByteSize Terabytes(this long input) { }\n        public static Humanizer.ByteSize Terabytes(this sbyte input) { }\n        public static Humanizer.ByteSize Terabytes(this short input) { }\n        public static Humanizer.ByteSize Terabytes(this uint input) { }\n        public static Humanizer.ByteSize Terabytes(this ushort input) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Humanizing IEnumerable Collections in C#\nDESCRIPTION: These extension methods allow you to humanize IEnumerable collections with optional formatters and separators. The `Humanize` method offers flexibility in customizing the output based on the type of elements in the collection and desired formatting.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Humanize<T>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, string> displayFormatter) { }\npublic static string Humanize<T>(this System.Collections.Generic.IEnumerable<T> collection, string separator) { }\npublic static string Humanize<T>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, object> displayFormatter, string separator) { }\npublic static string Humanize<T>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, string> displayFormatter, string separator) { }\n```\n\n----------------------------------------\n\nTITLE: String Inflection Extensions in C#\nDESCRIPTION: Defines extension methods for string inflection, including Camelize, Dasherize, Hyphenate, Kebaberize, Pascalize, Pluralize, Singularize, Titleize, and Underscore. These methods are used to transform strings into different naming conventions, making it easier to work with various coding styles and data formats. The Pluralize method handles null input with a NotNullIfNotNull attribute.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\npublic static class InflectorExtensions\n{\n    public static string Camelize(this string input) { }\n    public static string Dasherize(this string underscoredWord) { }\n    public static string Hyphenate(this string underscoredWord) { }\n    public static string Kebaberize(this string input) { }\n    public static string Pascalize(this string input) { }\n    [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"word\")]\n    public static string? Pluralize(this string? word, bool inputIsKnownToBeSingular = true) { }\n    public static string Singularize(this string word, bool inputIsKnownToBePlural = true, bool skipSimpleWords = false) { }\n    public static string Titleize(this string input) { }\n    public static string Underscore(this string input) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Number to Number Extension Methods in C#\nDESCRIPTION: These extensions convert a number into billions, millions, hundreds, thousands, tens, hundreds. It supports different numeric types.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class NumberToNumberExtensions\n{\n    public static double Billions(this double input) { }\n    public static int Billions(this int input) { }\n    public static long Billions(this long input) { }\n    public static uint Billions(this uint input) { }\n    public static ulong Billions(this ulong input) { }\n    public static double Hundreds(this double input) { }\n    public static int Hundreds(this int input) { }\n    public static long Hundreds(this long input) { }\n    public static uint Hundreds(this uint input) { }\n    public static ulong Hundreds(this ulong input) { }\n    public static double Millions(this double input) { }\n    public static int Millions(this int input) { }\n    public static long Millions(this long input) { }\n    public static uint Millions(this uint input) { }\n    public static ulong Millions(this ulong input) { }\n    public static double Tens(this double input) { }\n    public static int Tens(this int input) { }\n    public static long Tens(this long input) { }\n    public static uint Tens(this uint input) { }\n    public static ulong Tens(this ulong input) { }\n    public static double Thousands(this double input) { }\n    public static int Thousands(this int input) { }\n    public static long Thousands(this long input) { }\n    public static uint Thousands(this uint input) { }\n    public static ulong Thousands(this ulong input) { }\n}\n```\n\n----------------------------------------\n\nTITLE: DateTime Part Extraction in C#\nDESCRIPTION: These extension methods extract specific parts from a DateTime object, such as Hour, Minute, Month, Second, Week, and Year. They operate on a given DateTime object and return a new DateTime object, although the implementation details are hidden.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\npublic static System.DateTime HourFrom(System.DateTime date) { }\npublic static System.DateTime MinuteFrom(System.DateTime date) { }\npublic static System.DateTime MonthFrom(System.DateTime date) { }\npublic static System.DateTime SecondFrom(System.DateTime date) { }\npublic static System.DateTime WeekFrom(System.DateTime date) { }\npublic static System.DateTime YearFrom(System.DateTime date) { }\n```\n\n----------------------------------------\n\nTITLE: TimeSpan Humanize Extension Methods - C#\nDESCRIPTION: Defines extension methods for `TimeSpan` to convert it into a human-readable string representing the duration. These methods allow specifying precision, culture, maximum and minimum units, collection separators, and whether to use words instead of numbers.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Humanize(this System.TimeSpan timeSpan, int precision = 1, System.Globalization.CultureInfo? culture = null, Humanizer.TimeUnit maxUnit = 5, Humanizer.TimeUnit minUnit = 0, string? collectionSeparator = \", \", bool toWords = false) { }\n        public static string Humanize(this System.TimeSpan timeSpan, int precision, bool countEmptyUnits, System.Globalization.CultureInfo? culture = null, Humanizer.TimeUnit maxUnit = 5, Humanizer.TimeUnit minUnit = 0, string? collectionSeparator = \", \", bool toWords = false) { }\n        public static string ToAge(this System.TimeSpan timeSpan, System.Globalization.CultureInfo? culture = null, Humanizer.TimeUnit maxUnit = 7, bool toWords = false) { }\n```\n\n----------------------------------------\n\nTITLE: Enum Humanize extension methods in C#\nDESCRIPTION: These extension methods provide functionality to convert an Enum value to a human-readable string. The methods allow specifying a letter casing strategy.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\npublic static class EnumHumanizeExtensions\n    {\n        public static string Humanize<T>(this T input)\n            where T :  struct, System.Enum { }\n        public static string Humanize<T>(this T input, Humanizer.LetterCasing casing)\n            where T :  struct, System.Enum { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining ByteSize Struct C#\nDESCRIPTION: Defines the ByteSize struct in the Humanizer namespace, representing a size in bytes. It includes constants for various byte units (bits, bytes, kilobytes, etc.), properties for accessing the size in different units, and methods for arithmetic operations, comparisons, parsing, and formatting.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Humanizer\n{\n    public struct ByteSize : System.IComparable, System.IComparable<Humanizer.ByteSize>, System.IEquatable<Humanizer.ByteSize>, System.IFormattable\n    {\n        public const string Bit = \"bit\";\n        public const string BitSymbol = \"b\";\n        public const long BitsInByte = 8;\n        public const string Byte = \"byte\";\n        public const string ByteSymbol = \"B\";\n        public const long BytesInGigabyte = 1073741824;\n        public const long BytesInKilobyte = 1024;\n        public const long BytesInMegabyte = 1048576;\n        public const long BytesInTerabyte = 1099511627776;\n        public const string Gigabyte = \"gigabyte\";\n        public const string GigabyteSymbol = \"GB\";\n        public const string Kilobyte = \"kilobyte\";\n        public const string KilobyteSymbol = \"KB\";\n        public const string Megabyte = \"megabyte\";\n        public const string MegabyteSymbol = \"MB\";\n        public const string Terabyte = \"terabyte\";\n        public const string TerabyteSymbol = \"TB\";\n        public static readonly Humanizer.ByteSize MaxValue;\n        public static readonly Humanizer.ByteSize MinValue;\n        public ByteSize(double byteSize) { }\n        public long Bits { get; }\n        public double Bytes { get; }\n        public double Gigabytes { get; }\n        public double Kilobytes { get; }\n        public string LargestWholeNumberFullWord { get; }\n        public string LargestWholeNumberSymbol { get; }\n        public double LargestWholeNumberValue { get; }\n        public double Megabytes { get; }\n        public double Terabytes { get; }\n        public Humanizer.ByteSize Add(Humanizer.ByteSize bs) { }\n        public Humanizer.ByteSize AddBits(long value) { }\n        public Humanizer.ByteSize AddBytes(double value) { }\n        public Humanizer.ByteSize AddGigabytes(double value) { }\n        public Humanizer.ByteSize AddKilobytes(double value) { }\n        public Humanizer.ByteSize AddMegabytes(double value) { }\n        public Humanizer.ByteSize AddTerabytes(double value) { }\n        public int CompareTo(Humanizer.ByteSize other) { }\n        public int CompareTo(object? obj) { }\n        public bool Equals(Humanizer.ByteSize value) { }\n        public override bool Equals(object? value) { }\n        public override int GetHashCode() { }\n        public string GetLargestWholeNumberFullWord(System.IFormatProvider? provider = null) { }\n        public string GetLargestWholeNumberSymbol(System.IFormatProvider? provider = null) { }\n        public Humanizer.ByteSize Subtract(Humanizer.ByteSize bs) { }\n        public string ToFullWords(string? format = null, System.IFormatProvider? provider = null) { }\n        public override string ToString() { }\n        public string ToString(System.IFormatProvider? provider) { }\n        public string ToString(string? format) { }\n        public string ToString(string? format, System.IFormatProvider? provider) { }\n        public static Humanizer.ByteSize FromBits(long value) { }\n        public static Humanizer.ByteSize FromBytes(double value) { }\n        public static Humanizer.ByteSize FromGigabytes(double value) { }\n        public static Humanizer.ByteSize FromKilobytes(double value) { }\n        public static Humanizer.ByteSize FromMegabytes(double value) { }\n        public static Humanizer.ByteSize FromTerabytes(double value) { }\n        public static Humanizer.ByteSize Parse(string s) { }\n        public static Humanizer.ByteSize Parse(string s, System.IFormatProvider? formatProvider) { }\n        public static bool TryParse(System.ReadOnlySpan<char> s, out Humanizer.ByteSize result) { }\n        public static bool TryParse(string? s, out Humanizer.ByteSize result) { }\n        public static bool TryParse(System.ReadOnlySpan<char> s, System.IFormatProvider? formatProvider, out Humanizer.ByteSize result) { }\n        public static bool TryParse(string? s, System.IFormatProvider? formatProvider, out Humanizer.ByteSize result) { }\n        public static bool operator !=(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static Humanizer.ByteSize operator +(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static Humanizer.ByteSize operator ++(Humanizer.ByteSize b) { }\n        public static Humanizer.ByteSize operator -(Humanizer.ByteSize b) { }\n        public static Humanizer.ByteSize operator -(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static Humanizer.ByteSize operator --(Humanizer.ByteSize b) { }\n        public static bool operator <(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static bool operator <=(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static bool operator ==(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static bool operator >(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static bool operator >=(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Words in C#\nDESCRIPTION: This extension method converts an integer to its word representation. It takes an integer as input and returns a string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToWords(this int number, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Ordinal Words in C#\nDESCRIPTION: This extension method converts an integer to its ordinal word representation, allowing customization for word form and culture. It takes an integer as input and returns a string representing the ordinal word.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToOrdinalWords(this int number, Humanizer.WordForm wordForm, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: DateTime Addition Extension Methods in C#\nDESCRIPTION: These extension methods provide properties to get specific durations (Days, Hours, Minutes, etc.) and methods to add those durations to a given DateTime object. The properties provide a convenient way to access predefined time spans, while the methods allow adding these spans to an existing DateTime object.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\npublic static System.DateTime Days { get; }\npublic static System.DateTime Hours { get; }\npublic static System.DateTime Minutes { get; }\npublic static System.DateTime Months { get; }\npublic static System.DateTime Seconds { get; }\npublic static System.DateTime Weeks { get; }\npublic static System.DateTime Years { get; }\npublic static System.DateTime DaysFrom(System.DateTime date) { }\npublic static System.DateTime HoursFrom(System.DateTime date) { }\npublic static System.DateTime MinutesFrom(System.DateTime date) { }\npublic static System.DateTime MonthsFrom(System.DateTime date) { }\npublic static System.DateTime SecondsFrom(System.DateTime date) { }\npublic static System.DateTime WeeksFrom(System.DateTime date) { }\npublic static System.DateTime YearsFrom(System.DateTime date) { }\n```\n\n----------------------------------------\n\nTITLE: String Dehumanize Extension\nDESCRIPTION: The Dehumanize extension method converts a human-readable string into a machine-readable string, such as converting \"5 kilometers\" to \"5Kilometers\".\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Dehumanize(this string input) { }\n```\n\n----------------------------------------\n\nTITLE: Humanizing Date and Time in C#\nDESCRIPTION: These extension methods enable the humanization of DateOnly, DateTime, and DateTimeOffset objects, allowing for comparison against a specified date or time.  The `Humanize` methods can also accept a culture parameter for localization.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DateHumanizeExtensions\n{\n    public static string Humanize(this System.DateOnly input, System.DateOnly? dateToCompareAgainst = default, System.Globalization.CultureInfo? culture = null) { }\n    public static string Humanize(this System.DateOnly? input, System.DateOnly? dateToCompareAgainst = default, System.Globalization.CultureInfo? culture = null) { }\n    public static string Humanize(this System.DateTimeOffset input, System.DateTimeOffset? dateToCompareAgainst = default, System.Globalization.CultureInfo? culture = null) { }\n    public static string Humanize(this System.DateTimeOffset? input, System.DateTimeOffset? dateToCompareAgainst = default, System.Globalization.CultureInfo? culture = null) { }\n    public static string Humanize(this System.DateTime input, bool? utcDate = default, System.DateTime? dateToCompareAgainst = default, System.Globalization.CultureInfo? culture = null) { }\n    public static string Humanize(this System.DateTime? input, bool? utcDate = default, System.DateTime? dateToCompareAgainst = default, System.Globalization.CultureInfo? culture = null) { }\n    public static string Humanize(this System.TimeOnly input, System.TimeOnly? timeToCompareAgainst = default, bool useUtc = true, System.Globalization.CultureInfo? culture = null) { }\n    public static string Humanize(this System.TimeOnly? input, System.TimeOnly? timeToCompareAgainst = default, bool useUtc = true, System.Globalization.CultureInfo? culture = null) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Humanizing Enum Values in C#\nDESCRIPTION: These extension methods enhance enums, allowing you to retrieve a human-readable string representation of the enum's value. The `Humanize` method can accept a casing parameter.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic static class EnumHumanizeExtensions\n{\n    public static string Humanize<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields)]  T>(this T input)\n        where T :  struct, System.Enum { }\n    public static string Humanize<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields)]  T>(this T input, Humanizer.LetterCasing casing)\n        where T :  struct, System.Enum { }\n}\n```\n\n----------------------------------------\n\nTITLE: Humanizing DateTimeOffset in C#\nDESCRIPTION: This extension method humanizes a DateTimeOffset value, providing a human-readable representation of the time difference. It takes optional parameters for comparison date and culture.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Humanize(this System.DateTimeOffset input, System.DateTimeOffset? dateToCompareAgainst = default, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: DateTime Extension: At Method\nDESCRIPTION: Extends the DateTime object to set specific time values. Allows you to set the hour, minute, second, and millisecond of a DateTime object, creating a new DateTime object with the updated values. Default values are used if minutes, seconds, or milliseconds are not specified.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\npublic static System.DateTime At(this System.DateTime date, int hour, int min = 0, int second = 0, int millisecond = 0) { }\n```\n\n----------------------------------------\n\nTITLE: Collection Humanize Extension Methods C#\nDESCRIPTION: These extension methods humanize a collection of items into a string representation. It provides options to customize the formatting using a display formatter function.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Humanizer\n{\n    public static class CollectionHumanizeExtensions\n    {\n        public static string Humanize<T>(this System.Collections.Generic.IEnumerable<T> collection) { }\n        public static string Humanize<T>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, object> displayFormatter) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Dates to Ordinal Words in C#\nDESCRIPTION: These extension methods convert DateOnly and DateTime objects to ordinal words (e.g., \"1st\", \"2nd\"). The `ToOrdinalWords` method can accept a grammatical case parameter.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DateToOrdinalWordsExtensions\n{\n    public static string ToOrdinalWords(this System.DateOnly input) { }\n    public static string ToOrdinalWords(this System.DateTime input) { }\n    public static string ToOrdinalWords(this System.DateOnly input, Humanizer.GrammaticalCase grammaticalCase) { }\n    public static string ToOrdinalWords(this System.DateTime input, Humanizer.GrammaticalCase grammaticalCase) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Long to Words with 'And' in C#\nDESCRIPTION: This extension method converts a long integer to its word representation, allowing the addition of 'and'. It takes a long integer as input and returns a string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToWords(this long number, System.Globalization.CultureInfo? culture = null, bool addAnd = true) { }\n```\n\n----------------------------------------\n\nTITLE: Ordinalize Integer Extension\nDESCRIPTION: This extension method takes an integer and returns its ordinal representation as a string (e.g., 1 becomes \"1st\", 2 becomes \"2nd\"). It includes overloads for handling grammatical gender, word form, and culture-specific ordinalization.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Ordinalize(this int number) { }\n        public static string Ordinalize(this string numberString) { }\n        public static string Ordinalize(this int number, Humanizer.GrammaticalGender gender) { }\n        public static string Ordinalize(this int number, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this int number, System.Globalization.CultureInfo culture) { }\n        public static string Ordinalize(this string numberString, Humanizer.GrammaticalGender gender) { }\n        public static string Ordinalize(this string numberString, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this string numberString, System.Globalization.CultureInfo culture) { }\n        public static string Ordinalize(this int number, Humanizer.GrammaticalGender gender, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this int number, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo culture) { }\n        public static string Ordinalize(this int number, System.Globalization.CultureInfo culture, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this string numberString, Humanizer.GrammaticalGender gender, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this string numberString, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo culture) { }\n        public static string Ordinalize(this string numberString, System.Globalization.CultureInfo culture, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this int number, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo culture, Humanizer.WordForm wordForm) { }\n        public static string Ordinalize(this string numberString, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo culture, Humanizer.WordForm wordForm) { }\n```\n\n----------------------------------------\n\nTITLE: Defining INumberToWordsConverter Interface in C#\nDESCRIPTION: This interface defines the contract for converting numbers to words.  It includes a Convert method that takes an integer, its string representation, gender, and word form as input. The implementation would provide the logic for performing the number to word conversion based on these parameters.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\npublic interface INumberToWordsConverter\n{\n    string Convert(int number, string numberString, Humanizer.GrammaticalGender gender, Humanizer.WordForm wordForm);\n}\n```\n\n----------------------------------------\n\nTITLE: TimeOnly to Clock Notation Extension Method - C#\nDESCRIPTION: Defines an extension method for `TimeOnly` to format it as clock notation (e.g., 3:30 PM). It also supports rounding to the nearest five minutes using the `ClockNotationRounding` enum.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToClockNotation(this System.TimeOnly input, Humanizer.ClockNotationRounding roundToNearestFive = 0) { }\n```\n\n----------------------------------------\n\nTITLE: Localization Registry Class in C#\nDESCRIPTION: This class manages a registry of localizers, allowing retrieval of localizer instances based on culture. It supports registration of localizers using either a factory function or a direct instance. The ResolveForCulture and ResolveForUiCulture methods retrieve the appropriate localizer instance for a given culture, using a default localizer if no specific localizer is found.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\npublic class LocaliserRegistry<TLocaliser>\n    where TLocaliser :  class\n{\n    public LocaliserRegistry(System.Func<System.Globalization.CultureInfo, TLocaliser> defaultLocaliser) { }\n    public LocaliserRegistry(TLocaliser defaultLocaliser) { }\n    public void Register(string localeCode, System.Func<System.Globalization.CultureInfo, TLocaliser> localiser) { }\n    public void Register(string localeCode, TLocaliser localiser) { }\n    public TLocaliser ResolveForCulture(System.Globalization.CultureInfo? culture) { }\n    public TLocaliser ResolveForUiCulture() { }\n}\n```\n\n----------------------------------------\n\nTITLE: MetricNumeral Extensions in C#\nDESCRIPTION: These extensions provide methods for converting to and from metric numerals.  The ToMetric methods format a double or int as a metric numeral with optional formatting and decimal precision. FromMetric parses a string representing a metric number to its double value.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MetricNumeralExtensions\n{\n    public static double FromMetric(this string input) { }\n    public static string ToMetric(this double input, Humanizer.MetricNumeralFormats? formats = default, int? decimals = default) { }\n    public static string ToMetric(this int input, Humanizer.MetricNumeralFormats? formats = default, int? decimals = default) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Number to TimeSpan Extensions in C#\nDESCRIPTION: Defines extension methods for converting numbers to TimeSpan values. These methods create TimeSpan instances representing a specified duration in days, hours, milliseconds, minutes, seconds, or weeks. The methods are defined for various numeric types (byte, double, int, long, sbyte, short, uint, ulong, ushort).\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\npublic static class NumberToTimeSpanExtensions\n{\n    public static System.TimeSpan Days(this byte days) { }\n    public static System.TimeSpan Days(this double days) { }\n    public static System.TimeSpan Days(this int days) { }\n    public static System.TimeSpan Days(this long days) { }\n    public static System.TimeSpan Days(this sbyte days) { }\n    public static System.TimeSpan Days(this short days) { }\n    public static System.TimeSpan Days(this uint days) { }\n    public static System.TimeSpan Days(this ulong days) { }\n    public static System.TimeSpan Days(this ushort days) { }\n    public static System.TimeSpan Hours(this byte hours) { }\n    public static System.TimeSpan Hours(this double hours) { }\n    public static System.TimeSpan Hours(this int hours) { }\n    public static System.TimeSpan Hours(this long hours) { }\n    public static System.TimeSpan Hours(this sbyte hours) { }\n    public static System.TimeSpan Hours(this short hours) { }\n    public static System.TimeSpan Hours(this uint hours) { }\n    public static System.TimeSpan Hours(this ulong hours) { }\n    public static System.TimeSpan Hours(this ushort hours) { }\n    public static System.TimeSpan Milliseconds(this byte ms) { }\n    public static System.TimeSpan Milliseconds(this double ms) { }\n    public static System.TimeSpan Milliseconds(this int ms) { }\n    public static System.TimeSpan Milliseconds(this long ms) { }\n    public static System.TimeSpan Milliseconds(this sbyte ms) { }\n    public static System.TimeSpan Milliseconds(this short ms) { }\n    public static System.TimeSpan Milliseconds(this uint ms) { }\n    public static System.TimeSpan Milliseconds(this ulong ms) { }\n    public static System.TimeSpan Milliseconds(this ushort ms) { }\n    public static System.TimeSpan Minutes(this byte minutes) { }\n    public static System.TimeSpan Minutes(this double minutes) { }\n    public static System.TimeSpan Minutes(this int minutes) { }\n    public static System.TimeSpan Minutes(this long minutes) { }\n    public static System.TimeSpan Minutes(this sbyte minutes) { }\n    public static System.TimeSpan Minutes(this short minutes) { }\n    public static System.TimeSpan Minutes(this uint minutes) { }\n    public static System.TimeSpan Minutes(this ulong minutes) { }\n    public static System.TimeSpan Minutes(this ushort minutes) { }\n    public static System.TimeSpan Seconds(this byte seconds) { }\n    public static System.TimeSpan Seconds(this double seconds) { }\n    public static System.TimeSpan Seconds(this int seconds) { }\n    public static System.TimeSpan Seconds(this long seconds) { }\n    public static System.TimeSpan Seconds(this sbyte seconds) { }\n    public static System.TimeSpan Seconds(this short seconds) { }\n    public static System.TimeSpan Seconds(this uint seconds) { }\n    public static System.TimeSpan Seconds(this ulong seconds) { }\n    public static System.TimeSpan Seconds(this ushort seconds) { }\n    public static System.TimeSpan Weeks(this byte input) { }\n    public static System.TimeSpan Weeks(this double input) { }\n    public static System.TimeSpan Weeks(this int input) { }\n    public static System.TimeSpan Weeks(this long input) { }\n    public static System.TimeSpan Weeks(this sbyte input) { }\n    public static System.TimeSpan Weeks(this short input) { }\n    public static System.TimeSpan Weeks(this uint input) { }\n    public static System.TimeSpan Weeks(this ulong input) { }\n    public static System.TimeSpan Weeks(this ushort input) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Vocabulary Management in C#\nDESCRIPTION: This code snippet shows methods to manage a vocabulary for singularizing and pluralizing words. It contains methods to add irregular words, plural/singular rules, uncountable words, and methods to pluralize/singularize words based on the configured vocabulary.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\npublic void AddIrregular(string singular, string plural, bool matchEnding = true) { }\npublic void AddPlural(string rule, string replacement) { }\npublic void AddSingular(string rule, string replacement) { }\npublic void AddUncountable(string word) { }\n[return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"word\")]\npublic string? Pluralize(string? word, bool inputIsKnownToBeSingular = true) { }\n[return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"word\")]\npublic string? Singularize(string? word, bool inputIsKnownToBePlural = true, bool skipSimpleWords = false) { }\n```\n\n----------------------------------------\n\nTITLE: Defining IOrdinalizer interface in C#\nDESCRIPTION: This interface defines methods for converting numbers to ordinal strings.  It defines methods to convert an integer to ordinal strings with options for grammatical gender and word form.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IOrdinalizer\n{\n    string Convert(int number, string numberString);\n    string Convert(int number, string numberString, Humanizer.GrammaticalGender gender);\n    string Convert(int number, string numberString, Humanizer.WordForm wordForm);\n    string Convert(int number, string numberString, Humanizer.GrammaticalGender gender, Humanizer.WordForm wordForm);\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Strings with To Extension Methods in C#\nDESCRIPTION: This snippet contains the To extension methods that allow transforming strings to different casing formats such as lowercase, sentence case, title case, and uppercase. It uses IStringTransformer and ICulturedStringTransformer interfaces for transformation.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\npublic static class To\n{\n    public static Humanizer.ICulturedStringTransformer LowerCase { get; }\n    public static Humanizer.ICulturedStringTransformer SentenceCase { get; }\n    public static Humanizer.ICulturedStringTransformer TitleCase { get; }\n    public static Humanizer.ICulturedStringTransformer UpperCase { get; }\n    public static string Transform(this string input, params Humanizer.IStringTransformer[] transformers) { }\n    public static string Transform(this string input, System.Globalization.CultureInfo culture, params Humanizer.ICulturedStringTransformer[] transformers) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configurator class in C#\nDESCRIPTION: The Configurator class provides access to localization registries for various humanization components.  These registries allow customization of how collections, dates, numbers, and ordinals are formatted based on culture. It also sets the strategies for date and datetimeoffset.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic static class Configurator\n    {\n        public static Humanizer.LocaliserRegistry<Humanizer.ICollectionFormatter> CollectionFormatters { get; }\n        public static Humanizer.LocaliserRegistry<Humanizer.IDateToOrdinalWordConverter> DateToOrdinalWordsConverters { get; }\n        public static Humanizer.LocaliserRegistry<Humanizer.IFormatter> Formatters { get; }\n        public static Humanizer.LocaliserRegistry<Humanizer.INumberToWordsConverter> NumberToWordsConverters { get; }\n        public static Humanizer.LocaliserRegistry<Humanizer.IOrdinalizer> Ordinalizers { get; }\n        public static Humanizer.IDateTimeHumanizeStrategy DateTimeHumanizeStrategy { get; set; }\n        public static Humanizer.IDateTimeOffsetHumanizeStrategy DateTimeOffsetHumanizeStrategy { get; set; }\n        public static void UseEnumDescriptionPropertyLocator(System.Func<System.Reflection.PropertyInfo, bool> func) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Casing Extensions C#\nDESCRIPTION: Defines extension methods for strings to apply different casing styles. This extension method takes a string and a LetterCasing enum value to convert the string to the specified casing.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Humanizer\n{\n    public static class CasingExtensions\n    {\n        public static string ApplyCase(this string input, Humanizer.LetterCasing casing) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IFormatter interface in C#\nDESCRIPTION: This interface defines methods for formatting various data types in a human-readable format. It includes methods for data units, dates, time spans, and time units.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IFormatter\n{\n    string DataUnitHumanize(Humanizer.DataUnit dataUnit, double count, bool toSymbol = true);\n    string DateHumanize(Humanizer.TimeUnit timeUnit, Humanizer.Tense timeUnitTense, int unit);\n    string DateHumanize_Never();\n    string DateHumanize_Now();\n    string TimeSpanHumanize(Humanizer.TimeUnit timeUnit, int unit, bool toWords = false);\n    string TimeSpanHumanize_Age();\n    string TimeSpanHumanize_Zero();\n    string TimeUnitHumanize(Humanizer.TimeUnit timeUnit);\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Dehumanize extension methods in C#\nDESCRIPTION: These extension methods allow conversion from a string representation back to an Enum value.  It supports generics and nullable enums.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\npublic static class EnumDehumanizeExtensions\n    {\n        public static System.Enum DehumanizeTo(this string input, System.Type targetEnum, Humanizer.OnNoMatch onNoMatch = 0) { }\n        public static TTargetEnum DehumanizeTo<TTargetEnum>(this string input)\n            where TTargetEnum :  struct, System.Enum { }\n        public static TTargetEnum? DehumanizeTo<TTargetEnum>(this string input, Humanizer.OnNoMatch onNoMatch = 0)\n            where TTargetEnum :  struct, System.Enum { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining ITruncator Interface in C#\nDESCRIPTION: This interface defines the contract for truncating strings. It includes a Truncate method that takes a string, length, truncation string, and truncateFrom enum as input.  The method returns the truncated string, and can return null if the input value is null.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ITruncator\n{\n    [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"value\")]\n    string? Truncate(string? value, int length, string? truncationString, Humanizer.TruncateFrom truncateFrom = 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Words with 'And' and Word Form in C#\nDESCRIPTION: This extension method converts an integer to its word representation, allowing the addition of 'and' and customization for word form. It takes an integer as input and returns a string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToWords(this int number, bool addAnd, Humanizer.WordForm wordForm, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: Converting Headings in C#\nDESCRIPTION: These extension methods convert between numeric heading values and their string or character representations. Methods are available for conversion to abbreviated headings, full headings, and heading arrows.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic static class HeadingExtensions\n{\n    public static double FromAbbreviatedHeading(this string heading) { }\n    public static double FromAbbreviatedHeading(this string heading, System.Globalization.CultureInfo? culture = null) { }\n    public static double FromHeadingArrow(this char heading) { }\n    public static double FromHeadingArrow(this string heading) { }\n    public static string ToHeading(this double heading, Humanizer.HeadingStyle style = 0, System.Globalization.CultureInfo? culture = null) { }\n    public static char ToHeadingArrow(this double heading) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Humanizing IEnumerable collections in C#\nDESCRIPTION: These extension methods allow humanizing an IEnumerable collection by applying an object formatter and specifying a separator. It takes an IEnumerable<T> collection, a function to format each object, and a separator string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nstring Humanize<T>(System.Collections.Generic.IEnumerable<T> collection, System.Func<T, object?> objectFormatter, string separator);\nstring Humanize<T>(System.Collections.Generic.IEnumerable<T> collection, System.Func<T, string?> objectFormatter, string separator);\n```\n\n----------------------------------------\n\nTITLE: Defining IDateTimeHumanizeStrategy interface in C#\nDESCRIPTION: This interface defines a strategy for humanizing DateTime values.  It contains a Humanize method that takes a DateTime input, a comparison base DateTime, and an optional CultureInfo, returning a humanized string representation.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IDateTimeHumanizeStrategy\n{\n    string Humanize(System.DateTime input, System.DateTime comparisonBase, System.Globalization.CultureInfo? culture);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting TimeUnit to Symbol in C#\nDESCRIPTION: This snippet shows the TimeUnit extension method ToSymbol which transforms a TimeUnit enum value into its symbolic representation. An optional CultureInfo parameter allows for culture-specific symbols.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\npublic static class TimeUnitToSymbolExtensions\n{\n    public static string ToSymbol(this Humanizer.TimeUnit unit, System.Globalization.CultureInfo? culture = null) { }\n}\n```\n\n----------------------------------------\n\nTITLE: IDateTimeHumanizeStrategy interface in C#\nDESCRIPTION: This interface provides strategy for datetime humanizing\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IDateTimeHumanizeStrategy\n    {\n        string Humanize(System.DateTime input, System.DateTime comparisonBase, System.Globalization.CultureInfo? culture);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Humanizer Localisation in C#\nDESCRIPTION: This provides a way to configure the localiser registries for various formatters used by Humanizer. The configurator exposes registries for number-to-words converters, ordinalizers, and other formatters, as well as strategies for date and time humanization.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic static class Configurator\n{\n    public static Humanizer.LocaliserRegistry<Humanizer.ICollectionFormatter> CollectionFormatters { get; }\n    public static Humanizer.LocaliserRegistry<Humanizer.IDateOnlyToOrdinalWordConverter> DateOnlyToOrdinalWordsConverters { get; }\n    public static Humanizer.LocaliserRegistry<Humanizer.IDateToOrdinalWordConverter> DateToOrdinalWordsConverters { get; }\n    public static Humanizer.LocaliserRegistry<Humanizer.IFormatter> Formatters { get; }\n    public static Humanizer.LocaliserRegistry<Humanizer.INumberToWordsConverter> NumberToWordsConverters { get; }\n    public static Humanizer.LocaliserRegistry<Humanizer.IOrdinalizer> Ordinalizers { get; }\n    public static Humanizer.LocaliserRegistry<Humanizer.ITimeOnlyToClockNotationConverter> TimeOnlyToClockNotationConverters { get; }\n    public static Humanizer.IDateOnlyHumanizeStrategy DateOnlyHumanizeStrategy { get; set; }\n    public static Humanizer.IDateTimeHumanizeStrategy DateTimeHumanizeStrategy { get; set; }\n    public static Humanizer.IDateTimeOffsetHumanizeStrategy DateTimeOffsetHumanizeStrategy { get; set }\n    public static Humanizer.ITimeOnlyHumanizeStrategy TimeOnlyHumanizeStrategy { get; set; }\n    public static void UseEnumDescriptionPropertyLocator(System.Func<System.Reflection.PropertyInfo, bool> func) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IDateToOrdinalWordConverter interface in C#\nDESCRIPTION: This interface converts DateTime values to ordinal words. It defines two Convert methods: one takes a DateTime and returns the ordinal word representation, and another takes a DateTime and a GrammaticalCase, returning the ordinal word with the specified grammatical case.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IDateToOrdinalWordConverter\n{\n    string Convert(System.DateTime date);\n    string Convert(System.DateTime date, Humanizer.GrammaticalCase grammaticalCase);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Ordinal Words with Gender in C#\nDESCRIPTION: This extension method converts an integer to its ordinal word representation, allowing customization for grammatical gender, word form, and culture. It takes an integer as input and returns a string representing the ordinal word.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToOrdinalWords(this int number, Humanizer.GrammaticalGender gender, Humanizer.WordForm wordForm, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: Default DateTime humanize strategy in C#\nDESCRIPTION: This class implements the IDateTimeHumanizeStrategy interface.  It provides a default implementation for humanizing DateTime values based on a comparison base and culture. It contains constructor and Humanize methods.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic class DefaultDateTimeHumanizeStrategy : Humanizer.IDateTimeHumanizeStrategy\n    {\n        public DefaultDateTimeHumanizeStrategy() { }\n        public string Humanize(System.DateTime input, System.DateTime comparisonBase, System.Globalization.CultureInfo? culture) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Converting Long to Words with Word Form and Gender in C#\nDESCRIPTION: This extension method converts a long integer to its word representation, allowing customization for word form and grammatical gender. It takes a long integer as input and returns a string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToWords(this long number, Humanizer.WordForm wordForm, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: Heading Extensions in C#\nDESCRIPTION: This class provides extension methods to convert between heading representations. It allows conversion from abbreviated heading, heading arrow to double, and double to Heading/HeadingArrow\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\npublic static class HeadingExtensions\n    {\n        public static double FromAbbreviatedHeading(this string heading) { }\n        public static double FromAbbreviatedHeading(this string heading, System.Globalization.CultureInfo? culture = null) { }\n        public static double FromHeadingArrow(this char heading) { }\n        public static double FromHeadingArrow(this string heading) { }\n        public static string ToHeading(this double heading, Humanizer.HeadingStyle style = 0, System.Globalization.CultureInfo? culture = null) { }\n        public static char ToHeadingArrow(this double heading) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Converting DateTime to ordinal words in C#\nDESCRIPTION: This extension method converts a DateTime value to its ordinal word representation (e.g., \"1st\", \"2nd\", \"3rd\").\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToOrdinalWords(this System.DateTime input) { }\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Words with Gender in C#\nDESCRIPTION: This extension method converts an integer to its word representation, allowing customization for grammatical gender. It takes an integer as input and returns a string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToWords(this int number, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: Converting Long to Words with Gender in C#\nDESCRIPTION: This extension method converts a long integer to its word representation, allowing customization for grammatical gender. It takes a long integer as input and returns a string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToWords(this long number, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: Tupleize Integer Extension in C#\nDESCRIPTION: This method extends the int type to convert it into a tuple string representation (e.g., 1 becomes \"1st\", 2 becomes \"2nd\").\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Tupleize(this int input) { }\n```\n\n----------------------------------------\n\nTITLE: Defining ICulturedStringTransformer interface in C#\nDESCRIPTION: This interface extends IStringTransformer to provide culture-specific string transformations. It defines a method Transform that takes a string input and a CultureInfo object, returning the transformed string based on the specified culture.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICulturedStringTransformer : Humanizer.IStringTransformer\n{\n    string Transform(string input, System.Globalization.CultureInfo culture);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Tuple in C#\nDESCRIPTION: This extension method converts an integer to its tuple representation. It takes an integer as input and returns a string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToTuple(this int number, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: Defining INumberToWordsConverter interface in C#\nDESCRIPTION: This interface defines methods for converting numbers to words. It provides methods to convert a long number to words with options for grammatical gender, word form and adding 'and'. Also, it defines methods to convert an integer to ordinal words, or to tuple words.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\npublic interface INumberToWordsConverter\n{\n    string Convert(long number);\n    string Convert(long number, Humanizer.WordForm wordForm);\n    string Convert(long number, bool addAnd);\n    string Convert(long number, Humanizer.GrammaticalGender gender, bool addAnd = true);\n    string Convert(long number, bool addAnd, Humanizer.WordForm wordForm);\n    string Convert(long number, Humanizer.WordForm wordForm, Humanizer.GrammaticalGender gender, bool addAnd = true);\n    string ConvertToOrdinal(int number);\n    string ConvertToOrdinal(int number, Humanizer.GrammaticalGender gender);\n    string ConvertToOrdinal(int number, Humanizer.WordForm wordForm);\n    string ConvertToOrdinal(int number, Humanizer.GrammaticalGender gender, Humanizer.WordForm wordForm);\n    string ConvertToTuple(int number);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Words with Word Form in C#\nDESCRIPTION: This extension method converts an integer to its word representation, allowing customization for word form. It takes an integer as input and returns a string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToWords(this int number, Humanizer.WordForm wordForm, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: Enum declaration for DataUnit in C#\nDESCRIPTION: This enum defines different units of data, such as bits, bytes, kilobytes, megabytes, gigabytes, and terabytes.  It's used for representing and converting data sizes in a human-readable format.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic enum DataUnit\n    {\n        Bit = 0,\n        Byte = 1,\n        Kilobyte = 2,\n        Megabyte = 3,\n        Gigabyte = 4,\n        Terabyte = 5,\n    }\n```\n\n----------------------------------------\n\nTITLE: GrammaticalGender enum declaration in C#\nDESCRIPTION: This enum defines the grammatical genders: masculine, feminine, and neuter.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\npublic enum GrammaticalGender\n    {\n        Masculine = 0,\n        Feminine = 1,\n        Neuter = 2,\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining IStringTransformer Interface in C#\nDESCRIPTION: This interface defines the contract for transforming strings.  It includes a Transform method that takes a string as input.  An implementation would define the transformation logic to be applied to the input string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IStringTransformer\n{\n    string Transform(string input);\n}\n```\n\n----------------------------------------\n\nTITLE: Metric Numeral Formats Enum in C#\nDESCRIPTION: Defines a flags enum named MetricNumeralFormats that specifies different formatting options for metric numerals.  These options include using long scale words, short scale words, names, and whether to include a space between the number and the metric unit.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\n[System.Flags]\npublic enum MetricNumeralFormats\n{\n    UseLongScaleWord = 1,\n    UseName = 2,\n    UseShortScaleWord = 4,\n    WithSpace = 8,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IDateOnlyToOrdinalWordConverter interface in C#\nDESCRIPTION: This interface converts DateOnly values to ordinal words. It defines two Convert methods: one takes a DateOnly and returns the ordinal word representation, and another takes a DateOnly and a GrammaticalCase, returning the ordinal word with the specified grammatical case.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IDateOnlyToOrdinalWordConverter\n{\n    string Convert(System.DateOnly date);\n    string Convert(System.DateOnly date, Humanizer.GrammaticalCase grammaticalCase);\n}\n```\n\n----------------------------------------\n\nTITLE: DateOnly Properties for Month Days in C#\nDESCRIPTION: This code snippet shows the definition of static DateOnly properties for accessing specific days of the month within a given month class (e.g., June, March, May). It also shows a method to access days of the month using an integer.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\npublic class June\n        {\n            public June() { }\n            public static System.DateOnly The10th { get; }\n            public static System.DateOnly The11th { get; }\n            public static System.DateOnly The12th { get; }\n            public static System.DateOnly The13th { get; }\n            public static System.DateOnly The14th { get; }\n            public static System.DateOnly The15th { get; }\n            public static System.DateOnly The16th { get; }\n            public static System.DateOnly The17th { get; }\n            public static System.DateOnly The18th { get; }\n            public static System.DateOnly The19th { get; }\n            public static System.DateOnly The1st { get; }\n            public static System.DateOnly The20th { get; }\n            public static System.DateOnly The21st { get; }\n            public static System.DateOnly The22nd { get; }\n            public static System.DateOnly The23rd { get; }\n            public static System.DateOnly The24th { get; }\n            public static System.DateOnly The25th { get; }\n            public static System.DateOnly The26th { get; }\n            public static System.DateOnly The27th { get; }\n            public static System.DateOnly The28th { get; }\n            public static System.DateOnly The29th { get; }\n            public static System.DateOnly The2nd { get; }\n            public static System.DateOnly The30th { get; }\n            public static System.DateOnly The3rd { get; }\n            public static System.DateOnly The4th { get; }\n            public static System.DateOnly The5th { get; }\n            public static System.DateOnly The6th { get; }\n            public static System.DateOnly The7th { get; }\n            public static System.DateOnly The8th { get; }\n            public static System.DateOnly The9th { get; }\n            public static System.DateOnly The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: INumberToWordsConverter Interface in C#\nDESCRIPTION: This interface contains methods for converting number to words.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\npublic interface INumberToWordsConverter\n    {\n        string Convert(long number);\n        string Convert(long number, Humanizer.WordForm wordForm);\n        string Convert(long number, bool addAnd);\n        string Convert(long number, Humanizer.GrammaticalGender gender, bool addAnd = true);\n        string Convert(long number, bool addAnd, Humanizer.WordForm wordForm);\n        string Convert(long number, Humanizer.WordForm wordForm, Humanizer.GrammaticalGender gender, bool addAnd = true);\n        string ConvertToOrdinal(int number);\n        string ConvertToOrdinal(int number, Humanizer.GrammaticalGender gender);\n        string ConvertToOrdinal(int number, Humanizer.WordForm wordForm);\n        string ConvertToOrdinal(int number, Humanizer.GrammaticalGender gender, Humanizer.WordForm wordForm);\n        string ConvertToTuple(int number);\n    }\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Class in C#\nDESCRIPTION: Defines a custom exception class named NoMatchFoundException, which inherits from System.Exception. It includes default constructors, as well as constructors for specifying a message and inner exception. This exception can be used to indicate that a search or lookup operation failed to find a matching result.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\npublic class NoMatchFoundException : System.Exception\n{\n    public NoMatchFoundException() { }\n    public NoMatchFoundException(string message) { }\n    public NoMatchFoundException(string message, System.Exception inner) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ITruncator interface in C#\nDESCRIPTION: This interface defines a method for truncating strings. The Truncate method takes a string, length, truncation string, and TruncateFrom enum as input and returns the truncated string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ITruncator\n{\n    [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"value\")]\n    string? Truncate(string? value, int length, string? truncationString, Humanizer.TruncateFrom truncateFrom = 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Clock Notation Rounding Enum C#\nDESCRIPTION: This enum defines options for rounding time values to nearest five minutes. It provides a way to control how time is displayed in clock notation.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Humanizer\n{\n    public enum ClockNotationRounding\n    {\n        None = 0,\n        NearestFiveMinutes = 1,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DateOnly Duration Extension Methods in C#\nDESCRIPTION: These extension methods provide properties to get specific durations (Days, Months, Weeks, Years) and methods to add those durations to a given DateOnly object. There are overloaded methods to handle both DateOnly and DateTime inputs, returning DateOnly results.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\npublic static System.DateOnly Days { get; }\npublic static System.DateOnly Months { get; }\npublic static System.DateOnly Weeks { get; }\npublic static System.DateOnly Years { get; }\npublic static System.DateOnly DaysFrom(System.DateOnly date) { }\npublic static System.DateOnly DaysFrom(System.DateTime date) { }\npublic static System.DateOnly MonthsFrom(System.DateOnly date) { }\npublic static System.DateOnly MonthsFrom(System.DateTime date) { }\npublic static System.DateOnly WeeksFrom(System.DateOnly date) { }\npublic static System.DateOnly WeeksFrom(System.DateTime date) { }\npublic static System.DateOnly YearsFrom(System.DateOnly date) { }\npublic static System.DateOnly YearsFrom(System.DateTime date) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Static DateTime Properties in C#\nDESCRIPTION: Defines static DateTime properties within a nested class structure. These properties are intended to represent specific date/time values or time periods, potentially used for relative time calculations or comparisons. This pattern could be part of a larger system for creating time-related constants.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\npublic static class Three\n{\n    public static System.DateTime Days { get; }\n    public static System.DateTime Hours { get; }\n    public static System.DateTime Minutes { get; }\n    public static System.DateTime Months { get; }\n    public static System.DateTime Seconds { get; }\n    public static System.DateTime Weeks { get; }\n    public static System.DateTime Years { get; }\n    public static System.DateTime DaysFrom(System.DateTime date) { }\n    public static System.DateTime HoursFrom(System.DateTime date) { }\n    public static System.DateTime MinutesFrom(System.DateTime date) { }\n    public static System.DateTime MonthsFrom(System.DateTime date) { }\n    public static System.DateTime SecondsFrom(System.DateTime date) { }\n    public static System.DateTime WeeksFrom(System.DateTime date) { }\n    public static System.DateTime YearsFrom(System.DateTime date) { }\n}\npublic static class Two\n{\n    public static System.DateTime Days { get; }\n    public static System.DateTime Hours { get; }\n    public static System.DateTime Minutes { get; }\n    public static System.DateTime Months { get; }\n    public static System.DateTime Seconds { get; }\n    public static System.DateTime Weeks { get; }\n    public static System.DateTime Years { get; }\n    public static System.DateTime DaysFrom(System.DateTime date) { }\n    public static System.DateTime HoursFrom(System.DateTime date) { }\n    public static System.DateTime MinutesFrom(System.DateTime date) { }\n    public static System.DateTime MonthsFrom(System.DateTime date) { }\n    public static System.DateTime SecondsFrom(System.DateTime date) { }\n    public static System.DateTime WeeksFrom(System.DateTime date) { }\n    public static System.DateTime YearsFrom(System.DateTime date) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Vocabulary with Vocabulary Class in C#\nDESCRIPTION: This snippet describes the Vocabulary class. It allows customizing the pluralization and singularization rules. It allows to add irregular words, pluralization rules, singularization rules, and uncountable words. The Pluralize and Singularize methods perform the conversion.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\npublic class Vocabulary\n{\n    public void AddIrregular(string singular, string plural, bool matchEnding = true) { }\n    public void AddPlural(string rule, string replacement) { }\n    public void AddSingular(string rule, string replacement) { }\n    public void AddUncountable(string word) { }\n    [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"word\")]\n    public string? Pluralize(string? word, bool inputIsKnownToBeSingular = true) { }\n    [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"word\")]\n    public string? Singularize(string? word, bool inputIsKnownToBePlural = true, bool skipSimpleWords = false) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining In class for date/time constants in C#\nDESCRIPTION: This class provides constants and methods for working with specific dates and times. It includes properties for months and methods for retrieving dates relative to a year or a given date.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\npublic class In\n{\n    public In() { }\n    public static System.DateTime April { get; }\n    public static System.DateTime August { get; }\n    public static System.DateTime December { get; }\n    public static System.DateTime February { get; }\n    public static System.DateTime January { get; }\n    public static System.DateTime July { get; }\n    public static System.DateTime June { get; }\n    public static System.DateTime March { get; }\n    public static System.DateTime May { get; }\n    public static System.DateTime November { get; }\n    public static System.DateTime October { get; }\n    public static System.DateTime September { get; }\n    public static System.DateTime AprilOf(int year) { }\n    public static System.DateTime AugustOf(int year) { }\n    public static System.DateTime DecemberOf(int year) { }\n    public static System.DateTime FebruaryOf(int year) { }\n    public static System.DateTime JanuaryOf(int year) { }\n    public static System.DateTime JulyOf(int year) { }\n    public static System.DateTime JuneOf(int year) { }\n    public static System.DateTime MarchOf(int year) { }\n    public static System.DateTime MayOf(int year) { }\n    public static System.DateTime NovemberOf(int year) { }\n    public static System.DateTime OctoberOf(int year) { }\n    public static System.DateTime SeptemberOf(int year) { }\n    public static System.DateTime TheYear(int year) { }\n    public static class Eight\n    {\n        public static System.DateTime Days { get; }\n        public static System.DateTime Hours { get; }\n        public static System.DateTime Minutes { get; }\n        public static System.DateTime Months { get; }\n        public static System.DateTime Seconds { get; }\n        public static System.DateTime Weeks { get; }\n        public static System.DateTime Years { get; }\n        public static System.DateTime DaysFrom(System.DateTime date) { }\n        public static System.DateTime HoursFrom(System.DateTime date) { }\n        public static System.DateTime MinutesFrom(System.DateTime date) { }\n        public static System.DateTime MonthsFrom(System.DateTime date) { }\n        public static System.DateTime SecondsFrom(System.DateTime date) { }\n        public static System.DateTime WeeksFrom(System.DateTime date) { }\n        public static System.DateTime YearsFrom(System.DateTime date) { }\n    }\n    public static class Five\n    {\n        public static System.DateTime Days { get; }\n        public static System.DateTime Hours { get; }\n        public static System.DateTime Minutes { get; }\n        public static System.DateTime Months { get; }\n        public static System.DateTime Seconds { get; }\n        public static System.DateTime Weeks { get; }\n        public static System.DateTime Years { get; }\n        public static System.DateTime DaysFrom(System.DateTime date) { }\n        public static System.DateTime HoursFrom(System.DateTime date) { }\n        public static System.DateTime MinutesFrom(System.DateTime date) { }\n        public static System.DateTime MonthsFrom(System.DateTime date) { }\n        public static System.DateTime SecondsFrom(System.DateTime date) { }\n        public static System.DateTime WeeksFrom(System.DateTime date) { }\n        public static System.DateTime YearsFrom(System.DateTime date) { }\n    }\n    public static class Four\n    {\n        public static System.DateTime Days { get; }\n        public static System.DateTime Hours { get; }\n        public static System.DateTime Minutes { get; }\n        public static System.DateTime Months { get; }\n        public static System.DateTime Seconds { get; }\n        public static System.DateTime Weeks { get; }\n        public static System.DateTime Years { get; }\n        public static System.DateTime DaysFrom(System.DateTime date) { }\n        public static System.DateTime HoursFrom(System.DateTime date) { }\n        public static System.DateTime MinutesFrom(System.DateTime date) { }\n        public static System.DateTime MonthsFrom(System.DateTime date) { }\n        public static System.DateTime SecondsFrom(System.DateTime date) { }\n        public static System.DateTime WeeksFrom(System.DateTime date) { }\n        public static System.DateTime YearsFrom(System.DateTime date) { }\n    }\n    public static class Nine\n    {\n        public static System.DateTime Days { get; }\n        public static System.DateTime Hours { get; }\n        public static System.DateTime Minutes { get; }\n        public static System.DateTime Months { get; }\n        public static System.DateTime Seconds { get; }\n        public static System.DateTime Weeks { get; }\n        public static System.DateTime Years { get; }\n        public static System.DateTime DaysFrom(System.DateTime date) { }\n        public static System.DateTime HoursFrom(System.DateTime date) { }\n        public static System.DateTime MinutesFrom(System.DateTime date) { }\n        public static System.DateTime MonthsFrom(System.DateTime date) { }\n        public static System.DateTime SecondsFrom(System.DateTime date) { }\n        public static System.DateTime WeeksFrom(System.DateTime date) { }\n        public static System.DateTime YearsFrom(System.DateTime date) { }\n    }\n    public static class One\n    {\n        public static System.DateTime Day { get; }\n        public static System.DateTime Hour { get; }\n        public static System.DateTime Minute { get; }\n        public static System.DateTime Month { get; }\n        public static System.DateTime Second { get; }\n        public static System.DateTime Week { get; }\n        public static System.DateTime Year { get; }\n        public static System.DateTime DayFrom(System.DateTime date) { }\n```\n\n----------------------------------------\n\nTITLE: Defining ByteRate Class C#\nDESCRIPTION: Declares the ByteRate class in the Humanizer namespace, which represents a rate of bytes over a specific time interval.  It includes properties for the ByteSize and Interval and methods for humanizing the rate into a readable string, with optional format and culture parameters.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Humanizer\n{\n    public class ByteRate\n    {\n        public ByteRate(Humanizer.ByteSize size, System.TimeSpan interval) { }\n        public System.TimeSpan Interval { get; }\n        public Humanizer.ByteSize Size { get; }\n        public string Humanize(Humanizer.TimeUnit timeUnit = 1) { }\n        public string Humanize(string? format, Humanizer.TimeUnit timeUnit = 1, System.Globalization.CultureInfo? culture = null) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining January Date Constants in C#\nDESCRIPTION: This snippet defines a `January` class containing static `DateTime` properties for each day of the month. Each property provides direct access to a specific date within January. The `January()` constructor is also present, though it appears to be empty.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\npublic class January\n        {\n            public January() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The31st { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: Time Unit to Symbol Extension Method - C#\nDESCRIPTION: Defines an extension method for the `TimeUnit` enum to convert it into its corresponding symbol (e.g., TimeUnit.Second -> \"s\").  The method also accepts a culture parameter for culture-specific symbols.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToSymbol(this Humanizer.TimeUnit unit, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Dates in April in C#\nDESCRIPTION: This class provides static properties to access specific dates in April. Each property represents a specific day of the month.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\npublic class April\n        {\n            public April() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: Humanizing IEnumerable with display formatter in C#\nDESCRIPTION: This extension method allows you to humanize an IEnumerable collection using a custom display formatter. It transforms each element of the collection into a human-readable string using the provided function. The exact implementation is not provided, but this shows the declaration.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Humanize<T>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, string> displayFormatter) { }\n```\n\n----------------------------------------\n\nTITLE: Defining July Date Constants in C#\nDESCRIPTION: This snippet defines a `July` class containing static `DateTime` properties for each day of the month. Each property provides direct access to a specific date within July. The `July()` constructor is also present, though it appears to be empty.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\npublic class July\n        {\n            public July() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The31st { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: Defining IDateOnlyHumanizeStrategy interface in C#\nDESCRIPTION: This interface defines a strategy for humanizing DateOnly values. It contains a Humanize method that takes a DateOnly input, a comparison base DateOnly, and an optional CultureInfo, returning a humanized string representation.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IDateOnlyHumanizeStrategy\n{\n    string Humanize(System.DateOnly input, System.DateOnly comparisonBase, System.Globalization.CultureInfo? culture);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining March Date Constants in C#\nDESCRIPTION: This snippet defines a `March` class containing static `DateTime` properties for each day of the month. Each property provides direct access to a specific date within March. The `March()` constructor is also present, though it appears to be empty.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\npublic class March\n        {\n            public March() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n```\n\n----------------------------------------\n\nTITLE: IDateToOrdinalWordConverter Interface in C#\nDESCRIPTION: This interface defines the method to convert a date to its ordinal word representation. It can receive a GrammaticalCase.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IDateToOrdinalWordConverter\n    {\n        string Convert(System.DateTime date);\n        string Convert(System.DateTime date, Humanizer.GrammaticalCase grammaticalCase);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining June Date Constants in C#\nDESCRIPTION: This snippet defines a `June` class containing static `DateTime` properties for each day of the month. Each property provides direct access to a specific date within June. The `June()` constructor is also present, though it appears to be empty.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\npublic class June\n        {\n            public June() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: Humanizing nullable DateTimeOffset in C#\nDESCRIPTION: This extension method is similar to the previous one, but it operates on a nullable DateTimeOffset. It humanizes the DateTimeOffset value if it's not null, otherwise likely returns a default value or handles the null case. It takes optional parameters for comparison date and culture.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Humanize(this System.DateTimeOffset? input, System.DateTimeOffset? dateToCompareAgainst = default, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: Date Accessors for May in C#\nDESCRIPTION: Defines a static class `May` that provides read-only `DateTime` properties for each day of the month, named `The1st`, `The2nd`, ..., `The31st`. It also contains an un-implemented method `The(int dayNumber)` for retrieving a date by day number.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\npublic class May\n        {\n            public May() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The31st { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: Default DateTimeOffset humanize strategy in C#\nDESCRIPTION: This class implements the IDateTimeOffsetHumanizeStrategy interface. It provides a default implementation for humanizing DateTimeOffset values based on a comparison base and culture. It contains constructor and Humanize methods.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\npublic class DefaultDateTimeOffsetHumanizeStrategy : Humanizer.IDateTimeOffsetHumanizeStrategy\n    {\n        public DefaultDateTimeOffsetHumanizeStrategy() { }\n        public string Humanize(System.DateTimeOffset input, System.DateTimeOffset comparisonBase, System.Globalization.CultureInfo? culture) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: IOrdinalizer interface in C#\nDESCRIPTION: This interface defines methods to convert a number to ordinal string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IOrdinalizer\n    {\n        string Convert(int number, string numberString);\n        string Convert(int number, string numberString, Humanizer.GrammaticalGender gender);\n        string Convert(int number, string numberString, Humanizer.WordForm wordForm);\n    }\n```\n\n----------------------------------------\n\nTITLE: Humanizing IEnumerable with separator in C#\nDESCRIPTION: This extension method provides a way to humanize an IEnumerable collection using a specified separator string. It concatenates the string representation of each element in the collection, separating them with the given separator.  The exact implementation is not provided, but this shows the declaration.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Humanize<T>(this System.Collections.Generic.IEnumerable<T> collection, string separator) { }\n```\n\n----------------------------------------\n\nTITLE: DateOnly Properties for Month Days in C#\nDESCRIPTION: This code defines a class for a specific month (e.g., August, December, February, January, July), containing static properties of type `System.DateOnly` representing each day of the month. It also includes a method `The(int dayNumber)` which seems intended to return the DateOnly for the corresponding day number.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\npublic class August\n{\n    public August() { }\n    public static System.DateOnly The10th { get; }\n    public static System.DateOnly The11th { get; }\n    public static System.DateOnly The12th { get; }\n    public static System.DateOnly The13th { get; }\n    public static System.DateOnly The14th { get; }\n    public static System.DateOnly The15th { get; }\n    public static System.DateOnly The16th { get; }\n    public static System.DateOnly The17th { get; }\n    public static System.DateOnly The18th { get; }\n    public static System.DateOnly The19th { get; }\n    public static System.DateOnly The1st { get; }\n    public static System.DateOnly The20th { get; }\n    public static System.DateOnly The21st { get; }\n    public static System.DateOnly The22nd { get; }\n    public static System.DateOnly The23rd { get; }\n    public static System.DateOnly The24th { get; }\n    public static System.DateOnly The25th { get; }\n    public static System.DateOnly The26th { get; }\n    public static System.DateOnly The27th { get; }\n    public static System.DateOnly The28th { get; }\n    public static System.DateOnly The29th { get; }\n    public static System.DateOnly The2nd { get; }\n    public static System.DateOnly The30th { get; }\n    public static System.DateOnly The31st { get; }\n    public static System.DateOnly The3rd { get; }\n    public static System.DateOnly The4th { get; }\n    public static System.DateOnly The5th { get; }\n    public static System.DateOnly The6th { get; }\n    public static System.DateOnly The7th { get; }\n    public static System.DateOnly The8th { get; }\n    public static System.DateOnly The9th { get; }\n    public static System.DateOnly The(int dayNumber) { }\n}\n```\n\n----------------------------------------\n\nTITLE: DateOnly Extension Methods for September and other months - C#\nDESCRIPTION: Defines a class `September` with static properties to represent DateOnly objects for each day of the month. This pattern repeats for other months, providing an easy way to access specific days of the month as DateOnly objects.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\npublic class September\n        {\n            public September() { }\n            public static System.DateOnly The10th { get; }\n            public static System.DateOnly The11th { get; }\n            public static System.DateOnly The12th { get; }\n            public static System.DateOnly The13th { get; }\n            public static System.DateOnly The14th { get; }\n            public static System.DateOnly The15th { get; }\n            public static System.DateOnly The16th { get; }\n            public static System.DateOnly The17th { get; }\n            public static System.DateOnly The18th { get; }\n            public static System.DateOnly The19th { get; }\n            public static System.DateOnly The1st { get; }\n            public static System.DateOnly The20th { get; }\n            public static System.DateOnly The21st { get; }\n            public static System.DateOnly The22nd { get; }\n            public static System.DateOnly The23rd { get; }\n            public static System.DateOnly The24th { get; }\n            public static System.DateOnly The25th { get; }\n            public static System.DateOnly The26th { get; }\n            public static System.DateOnly The27th { get; }\n            public static System.DateOnly The28th { get; }\n            public static System.DateOnly The29th { get; }\n            public static System.DateOnly The2nd { get; }\n            public static System.DateOnly The30th { get; }\n            public static System.DateOnly The3rd { get; }\n            public static System.DateOnly The4th { get; }\n            public static System.DateOnly The5th { get; }\n            public static System.DateOnly The6th { get; }\n            public static System.DateOnly The7th { get; }\n            public static System.DateOnly The8th { get; }\n            public static System.DateOnly The9th { get; }\n            public static System.DateOnly The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: Date Accessors for November in C#\nDESCRIPTION: Defines a static class `November` that provides read-only `DateTime` properties for each day of the month, named `The1st`, `The2nd`, ..., `The30th`. It also contains an un-implemented method `The(int dayNumber)` for retrieving a date by day number.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\npublic class November\n        {\n            public November() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n        }\n```\n\n----------------------------------------\n\nTITLE: Defining February Date Constants in C#\nDESCRIPTION: This snippet defines a `February` class containing static `DateTime` properties for each day of the month. Each property provides direct access to a specific date within February. The `February()` constructor is also present, though it appears to be empty.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\npublic class February\n        {\n            public February() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Properties for a Month in C#\nDESCRIPTION: This code snippet defines a class representing a month (e.g., May, November, October, September) and provides static DateTime properties to access specific days of that month. Each property returns a System.DateTime object. A method taking an integer parameter to get the date for a specific day is also included.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\npublic class May\n{\n    public May() { }\n    public static System.DateTime The10th { get; }\n    public static System.DateTime The11th { get; }\n    public static System.DateTime The12th { get; }\n    public static System.DateTime The13th { get; }\n    public static System.DateTime The14th { get; }\n    public static System.DateTime The15th { get; }\n    public static System.DateTime The16th { get; }\n    public static System.DateTime The17th { get; }\n    public static System.DateTime The18th { get; }\n    public static System.DateTime The19th { get; }\n    public static System.DateTime The1st { get; }\n    public static System.DateTime The20th { get; }\n    public static System.DateTime The21st { get; }\n    public static System.DateTime The22nd { get; }\n    public static System.DateTime The23rd { get; }\n    public static System.DateTime The24th { get; }\n    public static System.DateTime The25th { get; }\n    public static System.DateTime The26th { get; }\n    public static System.DateTime The27th { get; }\n    public static System.DateTime The28th { get; }\n    public static System.DateTime The29th { get; }\n    public static System.DateTime The2nd { get; }\n    public static System.DateTime The30th { get; }\n    public static System.DateTime The31st { get; }\n    public static System.DateTime The3rd { get; }\n    public static System.DateTime The4th { get; }\n    public static System.DateTime The5th { get; }\n    public static System.DateTime The6th { get; }\n    public static System.DateTime The7th { get; }\n    public static System.DateTime The8th { get; }\n    public static System.DateTime The9th { get; }\n    public static System.DateTime The(int dayNumber) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ITimeOnlyHumanizeStrategy interface in C#\nDESCRIPTION: This interface defines a strategy for humanizing TimeOnly values. It contains a Humanize method that takes a TimeOnly input, a comparison base TimeOnly, and an optional CultureInfo, returning a humanized string representation.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ITimeOnlyHumanizeStrategy\n{\n    string Humanize(System.TimeOnly input, System.TimeOnly comparisonBase, System.Globalization.CultureInfo? culture);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IDateTimeOffsetHumanizeStrategy interface in C#\nDESCRIPTION: This interface defines a strategy for humanizing DateTimeOffset values. It contains a Humanize method that takes a DateTimeOffset input, a comparison base DateTimeOffset, and an optional CultureInfo, returning a humanized string representation.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IDateTimeOffsetHumanizeStrategy\n{\n    string Humanize(System.DateTimeOffset input, System.DateTimeOffset comparisonBase, System.Globalization.CultureInfo? culture);\n}\n```\n\n----------------------------------------\n\nTITLE: Humanizing nullable DateTime in C#\nDESCRIPTION: This extension method humanizes a nullable DateTime value. It takes optional parameters for UTC date specification, a date to compare against, and culture.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Humanize(this System.DateTime? input, bool? utcDate = default, System.DateTime? dateToCompareAgainst = default, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: HeadingStyle Enum declaration in C#\nDESCRIPTION: This enum describes the heading style : Abbreviated or Full\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\npublic enum HeadingStyle\n    {\n        Abbreviated = 0,\n        Full = 1,\n    }\n```\n\n----------------------------------------\n\nTITLE: DateTime Extension Methods for Time Manipulation - C#\nDESCRIPTION: Defines extension methods for `DateTime` to easily manipulate the time component. This includes methods like `At` to set specific hours, minutes, seconds, and milliseconds, as well as `AtMidnight` and `AtNoon` for convenience.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\npublic static System.DateTime At(this System.DateTime date, int hour, int min = 0, int second = 0, int millisecond = 0) { }\n        public static System.DateTime AtMidnight(this System.DateTime date) { }\n        public static System.DateTime AtNoon(this System.DateTime date) { }\n        public static System.DateTime In(this System.DateTime date, int year) { }\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Words with 'And' in C#\nDESCRIPTION: This extension method converts an integer to its word representation, allowing the addition of 'and'. It takes an integer as input and returns a string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToWords(this int number, bool addAnd, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: IFormatter Interface in C#\nDESCRIPTION: This interface defines method for data unit, date and timespan humanizing\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IFormatter\n    {\n        string DataUnitHumanize(Humanizer.DataUnit dataUnit, double count, bool toSymbol = true);\n        string DateHumanize(Humanizer.TimeUnit timeUnit, Humanizer.Tense timeUnitTense, int unit);\n        string DateHumanize_Never();\n        string DateHumanize_Now();\n        string TimeSpanHumanize(Humanizer.TimeUnit timeUnit, int unit, bool toWords = false);\n        string TimeSpanHumanize_Age();\n        string TimeSpanHumanize_Zero();\n        string TimeUnitHumanize(Humanizer.TimeUnit timeUnit);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Enum for Letter Casing in C#\nDESCRIPTION: Defines an enum named LetterCasing with values for Title, AllCaps, LowerCase, and Sentence. This enum can be used as a parameter or return type for methods that modify the casing of strings, providing a standardized way to specify the desired casing format.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\npublic enum LetterCasing\n{\n    Title = 0,\n    AllCaps = 1,\n    LowerCase = 2,\n    Sentence = 3,\n}\n```\n\n----------------------------------------\n\nTITLE: Quantity Formatting for Strings in C#\nDESCRIPTION: This snippet demonstrates extension methods for formatting a string as a quantity using a numeric value. It allows specifying the quantity to be displayed (as double or long), along with optional formatting strings and format providers for culture-specific formatting.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToQuantity(this string input, double quantity) { }\npublic static string ToQuantity(this string input, long quantity, Humanizer.ShowQuantityAs showQuantityAs = 1) { }\npublic static string ToQuantity(this string input, double quantity, string? format = null, System.IFormatProvider? formatProvider = null) { }\npublic static string ToQuantity(this string input, long quantity, string? format, System.IFormatProvider? formatProvider = null) { }\n```\n\n----------------------------------------\n\nTITLE: Default Formatter class in C#\nDESCRIPTION: This class implements the IFormatter interface. It contains logic for humanizing data units, dates and timespans. It uses a culture for formatting.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\npublic class DefaultFormatter : Humanizer.IFormatter\n    {\n        public DefaultFormatter(System.Globalization.CultureInfo culture) { }\n        public DefaultFormatter(string localeCode) { }\n        protected System.Globalization.CultureInfo Culture { get; }\n        public virtual string DataUnitHumanize(Humanizer.DataUnit dataUnit, double count, bool toSymbol = true) { }\n        public virtual string DateHumanize(Humanizer.TimeUnit timeUnit, Humanizer.Tense timeUnitTense, int unit) { }\n        public virtual string DateHumanize_Never() { }\n        public virtual string DateHumanize_Now() { }\n        protected virtual string Format(string resourceKey) { }\n        protected virtual string Format(Humanizer.TimeUnit unit, string resourceKey, int number, bool toWords = false) { }\n        protected virtual string GetResourceKey(string resourceKey) { }\n        protected virtual string GetResourceKey(string resourceKey, int number) { }\n        protected virtual string NumberToWords(Humanizer.TimeUnit unit, int number, System.Globalization.CultureInfo culture) { }\n        public virtual string TimeSpanHumanize(Humanizer.TimeUnit timeUnit, int unit, bool toWords = false) { }\n        public virtual string TimeSpanHumanize_Age() { }\n        public virtual string TimeSpanHumanize_Zero() { }\n        public virtual string TimeUnitHumanize(Humanizer.TimeUnit timeUnit) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Roman Numeral Conversion Extension Methods - C#\nDESCRIPTION: Defines extension methods for `string` and `int` to convert between Roman numerals and integers.  `FromRoman` parses a Roman numeral string into an integer, while `ToRoman` converts an integer into its Roman numeral representation.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\npublic static int FromRoman(System.ReadOnlySpan<char> input) { }\n        public static int FromRoman(this string input) { }\n        public static string ToRoman(this int input) { }\n```\n\n----------------------------------------\n\nTITLE: ByteSize Struct Definition C#\nDESCRIPTION: This code snippet defines the `ByteSize` struct, representing a size in bytes, with support for various units (bits, kilobytes, megabytes, gigabytes, terabytes). It implements interfaces for comparison, equality, and formatting. It includes constants for unit names and conversions, constructors, properties for accessing values in different units, methods for arithmetic operations, parsing, and formatting.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Humanizer\n{\n    public struct ByteSize : System.IComparable, System.IComparable<Humanizer.ByteSize>, System.IEquatable<Humanizer.ByteSize>, System.IFormattable\n    {\n        public const string Bit = \"bit\";\n        public const string BitSymbol = \"b\";\n        public const long BitsInByte = 8;\n        public const string Byte = \"byte\";\n        public const string ByteSymbol = \"B\";\n        public const long BytesInGigabyte = 1073741824;\n        public const long BytesInKilobyte = 1024;\n        public const long BytesInMegabyte = 1048576;\n        public const long BytesInTerabyte = 1099511627776;\n        public const string Gigabyte = \"gigabyte\";\n        public const string GigabyteSymbol = \"GB\";\n        public const string Kilobyte = \"kilobyte\";\n        public const string KilobyteSymbol = \"KB\";\n        public const string Megabyte = \"megabyte\";\n        public const string MegabyteSymbol = \"MB\";\n        public const string Terabyte = \"terabyte\";\n        public const string TerabyteSymbol = \"TB\";\n        public static readonly Humanizer.ByteSize MaxValue;\n        public static readonly Humanizer.ByteSize MinValue;\n        public ByteSize(double byteSize) { }\n        public long Bits { get; }\n        public double Bytes { get; }\n        public double Gigabytes { get; }\n        public double Kilobytes { get; }\n        public string LargestWholeNumberFullWord { get; }\n        public string LargestWholeNumberSymbol { get; }\n        public double LargestWholeNumberValue { get; }\n        public double Megabytes { get; }\n        public double Terabytes { get; }\n        public Humanizer.ByteSize Add(Humanizer.ByteSize bs) { }\n        public Humanizer.ByteSize AddBits(long value) { }\n        public Humanizer.ByteSize AddBytes(double value) { }\n        public Humanizer.ByteSize AddGigabytes(double value) { }\n        public Humanizer.ByteSize AddKilobytes(double value) { }\n        public Humanizer.ByteSize AddMegabytes(double value) { }\n        public Humanizer.ByteSize AddTerabytes(double value) { }\n        public int CompareTo(Humanizer.ByteSize other) { }\n        public int CompareTo(object? obj) { }\n        public bool Equals(Humanizer.ByteSize value) { }\n        public override bool Equals(object? value) { }\n        public override int GetHashCode() { }\n        public string GetLargestWholeNumberFullWord(System.IFormatProvider? provider = null) { }\n        public string GetLargestWholeNumberSymbol(System.IFormatProvider? provider = null) { }\n        public Humanizer.ByteSize Subtract(Humanizer.ByteSize bs) { }\n        public string ToFullWords(string? format = null, System.IFormatProvider? provider = null) { }\n        public override string ToString() { }\n        public string ToString(System.IFormatProvider? provider) { }\n        public string ToString(string? format) { }\n        public string ToString(string? format, System.IFormatProvider? provider) { }\n        public static Humanizer.ByteSize FromBits(long value) { }\n        public static Humanizer.ByteSize FromBytes(double value) { }\n        public static Humanizer.ByteSize FromGigabytes(double value) { }\n        public static Humanizer.ByteSize FromKilobytes(double value) { }\n        public static Humanizer.ByteSize FromMegabytes(double value) { }\n        public static Humanizer.ByteSize FromTerabytes(double value) { }\n        public static Humanizer.ByteSize Parse(string s) { }\n        public static Humanizer.ByteSize Parse(string s, System.IFormatProvider? formatProvider) { }\n        public static bool TryParse(System.ReadOnlySpan<char> s, out Humanizer.ByteSize result) { }\n        public static bool TryParse(string? s, out Humanizer.ByteSize result) { }\n        public static bool TryParse(System.ReadOnlySpan<char> s, System.IFormatProvider? formatProvider, out Humanizer.ByteSize result) { }\n        public static bool TryParse(string? s, System.IFormatProvider? formatProvider, out Humanizer.ByteSize result) { }\n        public static bool operator !=(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static Humanizer.ByteSize operator +(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static Humanizer.ByteSize operator ++(Humanizer.ByteSize b) { }\n        public static Humanizer.ByteSize operator -(Humanizer.ByteSize b) { }\n        public static Humanizer.ByteSize operator -(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static Humanizer.ByteSize operator --(Humanizer.ByteSize b) { }\n        public static bool operator <(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static bool operator <=(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static bool operator ==(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static bool operator >(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n        public static bool operator >=(Humanizer.ByteSize b1, Humanizer.ByteSize b2) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IStringTransformer interface in C#\nDESCRIPTION: This interface defines a method for transforming a string. The Transform method takes a string input and returns the transformed string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IStringTransformer\n{\n    string Transform(string input);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Dates in February in C#\nDESCRIPTION: This class provides static properties to access specific dates in February. Each property represents a specific day of the month.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\npublic class February\n        {\n            public February() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: Truncating Strings with Truncate Extension Methods in C#\nDESCRIPTION: This snippet shows the Truncate extension methods for strings. They allow truncating a string to a specified length using different truncators (e.g., FixedLength, FixedNumberOfWords) and truncation strings. The TruncateFrom enum defines the direction of truncation.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\npublic static class TruncateExtensions\n{\n    [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"input\")]\n    public static string? Truncate(this string? input, int length) { }\n    [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"input\")]\n    public static string? Truncate(this string? input, int length, Humanizer.ITruncator truncator, Humanizer.TruncateFrom from = 1) { }\n    [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"input\")]\n    public static string? Truncate(this string? input, int length, string? truncationString, Humanizer.TruncateFrom from = 1) { }\n    [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"input\")]\n    public static string? Truncate(this string? input, int length, string? truncationString, Humanizer.ITruncator truncator, Humanizer.TruncateFrom from = 1) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Dates in December in C#\nDESCRIPTION: This class provides static properties to access specific dates in December. Each property represents a specific day of the month.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\npublic class December\n        {\n            public December() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The31st { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: DateTime Extension Properties for Month Dates\nDESCRIPTION: Defines static properties for accessing specific dates within months like September, October and beyond.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\npublic class October\n        {\n            public October() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The31st { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: DateOnly Properties and Methods in C#\nDESCRIPTION: These properties and methods define static DateOnly objects representing specific months (April, August, etc.) and allow for creating DateOnly objects for those months within a given year. The methods ending in Of() take an integer year as input and return a corresponding DateOnly object.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\npublic static System.DateOnly April { get; }\npublic static System.DateOnly August { get; }\npublic static System.DateOnly December { get; }\npublic static System.DateOnly February { get; }\npublic static System.DateOnly January { get; }\npublic static System.DateOnly July { get; }\npublic static System.DateOnly June { get; }\npublic static System.DateOnly March { get; }\npublic static System.DateOnly May { get; }\npublic static System.DateOnly November { get; }\npublic static System.DateOnly October { get; }\npublic static System.DateOnly September { get; }\npublic static System.DateOnly AprilOf(int year) { }\npublic static System.DateOnly AugustOf(int year) { }\npublic static System.DateOnly DecemberOf(int year) { }\npublic static System.DateOnly FebruaryOf(int year) { }\npublic static System.DateOnly JanuaryOf(int year) { }\npublic static System.DateOnly JulyOf(int year) { }\npublic static System.DateOnly JuneOf(int year) { }\npublic static System.DateOnly MarchOf(int year) { }\npublic static System.DateOnly MayOf(int year) { }\npublic static System.DateOnly NovemberOf(int year) { }\npublic static System.DateOnly OctoberOf(int year) { }\npublic static System.DateOnly September { get; }\npublic static System.DateOnly SeptemberOf(int year) { }\npublic static System.DateOnly TheYear(int year) { }\n```\n\n----------------------------------------\n\nTITLE: String Truncation Extension Methods in C#\nDESCRIPTION: These extension methods provide functionality for truncating strings to a specified length. It allows custom truncation behavior using ITruncator and specifying the truncation origin (from Left or Right), also allows specifying a custom truncation string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\n[return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"input\")]\npublic static string? Truncate(this string? input, int length) { }\n[return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"input\")]\npublic static string? Truncate(this string? input, int length, Humanizer.ITruncator truncator, Humanizer.TruncateFrom from = 1) { }\n[return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"input\")]\npublic static string? Truncate(this string? input, int length, string? truncationString, Humanizer.TruncateFrom from = 1) { }\n[return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"input\")]\npublic static string? Truncate(this string? input, int length, string? truncationString, Humanizer.ITruncator truncator, Humanizer.TruncateFrom from = 1) { }\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Dates in August in C#\nDESCRIPTION: This class provides static properties to access specific dates in August. Each property represents a specific day of the month.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\npublic class August\n        {\n            public August() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The31st { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: Number to Ordinal Words Extension in C#\nDESCRIPTION: Defines an extension method for converting a number to its ordinal word representation (e.g., 1 to \"first\", 2 to \"second\"). The method accepts optional parameters for specifying the culture and grammatical gender, allowing for localized and gender-specific ordinal word generation.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\npublic static class NumberToWordsExtension\n{\n    public static string ToOrdinalWords(this int number, System.Globalization.CultureInfo? culture = null) { }\n    public static string ToOrdinalWords(this int number, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo? culture = null) { }\n}\n```\n\n----------------------------------------\n\nTITLE: String Humanize/Dehumanize Extension Methods - C#\nDESCRIPTION: Defines extension methods for `string` to convert to more human-readable formats. `Humanize` transforms a string into a more readable format (e.g., PascalCase to Pascal Case). `Dehumanize` reverts the process.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Dehumanize(this string input) { }\n    }\n    public static class StringHumanizeExtensions\n    {\n        public static string Humanize(this string input) { }\n        public static string Humanize(this string input, Humanizer.LetterCasing casing) { }\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Dates in January in C#\nDESCRIPTION: This class provides static properties to access specific dates in January. Each property represents a specific day of the month.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\npublic class January\n        {\n            public January() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n        \n```\n\n----------------------------------------\n\nTITLE: ICollectionFormatter Interface in C#\nDESCRIPTION: This interface defines the methods to format a Collection.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICollectionFormatter\n    {\n        string Humanize<T>(System.Collections.Generic.IEnumerable<T> collection);\n        string Humanize<T>(System.Collections.Generic.IEnumerable<T> collection, System.Func<T, object?> objectFormatter);\n        string Humanize<T>(System.Collections.Generic.IEnumerable<T> collection, System.Func<T, string?> objectFormatter);\n        string Humanize<T>(System.Collections.Generic.IEnumerable<T> collection, string separator);\n        string Humanize<T>(System.Collections.Generic.IEnumerable<T> collection, System.Func<T, object?> objectFormatter, string separator);\n        string Humanize<T>(System.Collections.Generic.IEnumerable<T> collection, System.Func<T, string?> objectFormatter, string separator);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining the 'In' Class for DateTime Extensions in C#\nDESCRIPTION: This class provides static properties and methods to create DateTime instances for specific months and to calculate DateTime values relative to a specified date.  It utilizes nested classes like 'One', 'Five', 'Eight', etc., to represent durations (days, hours, minutes, etc.) that can be added to a date.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\npublic class In\n{\n    public In() { }\n    public static System.DateTime April { get; }\n    public static System.DateTime August { get; }\n    public static System.DateTime December { get; }\n    public static System.DateTime February { get; }\n    public static System.DateTime January { get; }\n    public static System.DateTime July { get; }\n    public static System.DateTime June { get; }\n    public static System.DateTime March { get; }\n    public static System.DateTime May { get; }\n    public static System.DateTime November { get; }\n    public static System.DateTime October { get; }\n    public static System.DateTime September { get; }\n    public static System.DateTime AprilOf(int year) { }\n    public static System.DateTime AugustOf(int year) { }\n    public static System.DateTime DecemberOf(int year) { }\n    public static System.DateTime FebruaryOf(int year) { }\n    public static System.DateTime JanuaryOf(int year) { }\n    public static System.DateTime JulyOf(int year) { }\n    public static System.DateTime JuneOf(int year) { }\n    public static System.DateTime MarchOf(int year) { }\n    public static System.DateTime MayOf(int year) { }\n    public static System.DateTime NovemberOf(int year) { }\n    public static System.DateTime OctoberOf(int year) { }\n    public static System.DateTime SeptemberOf(int year) { }\n    public static System.DateTime TheYear(int year) { }\n    public static class Eight\n    {\n        public static System.DateTime Days { get; }\n        public static System.DateTime Hours { get; }\n        public static System.DateTime Minutes { get; }\n        public static System.DateTime Months { get; }\n        public static System.DateTime Seconds { get; }\n        public static System.DateTime Weeks { get; }\n        public static System.DateTime Years { get; }\n        public static System.DateTime DaysFrom(System.DateTime date) { }\n        public static System.DateTime HoursFrom(System.DateTime date) { }\n        public static System.DateTime MinutesFrom(System.DateTime date) { }\n        public static System.DateTime MonthsFrom(System.DateTime date) { }\n        public static System.DateTime SecondsFrom(System.DateTime date) { }\n        public static System.DateTime WeeksFrom(System.DateTime date) { }\n        public static System.DateTime YearsFrom(System.DateTime date) { }\n    }\n    public static class Five\n    {\n        public static System.DateTime Days { get; }\n        public static System.DateTime Hours { get; }\n        public static System.DateTime Minutes { get; }\n        public static System.DateTime Months { get; }\n        public static System.DateTime Seconds { get; }\n        public static System.DateTime Weeks { get; }\n        public static System.DateTime Years { get; }\n        public static System.DateTime DaysFrom(System.DateTime date) { }\n        public static System.DateTime HoursFrom(System.DateTime date) { }\n        public static System.DateTime MinutesFrom(System.DateTime date) { }\n        public static System.DateTime MonthsFrom(System.DateTime date) { }\n        public static System.DateTime SecondsFrom(System.DateTime date) { }\n        public static System.DateTime WeeksFrom(System.DateTime date) { }\n        public static System.DateTime YearsFrom(System.DateTime date) { }\n    }\n    public static class Four\n    {\n        public static System.DateTime Days { get; }\n        public static System.DateTime Hours { get; }\n        public static System.DateTime Minutes { get; }\n        public static System.DateTime Months { get; }\n        public static System.DateTime Seconds { get; }\n        public static System.DateTime Weeks { get; }\n        public static System.DateTime Years { get; }\n        public static System.DateTime DaysFrom(System.DateTime date) { }\n        public static System.DateTime HoursFrom(System.DateTime date) { }\n        public static System.DateTime MinutesFrom(System.DateTime date) { }\n        public static System.DateTime MonthsFrom(System.DateTime date) { }\n        public static System.DateTime SecondsFrom(System.DateTime date) { }\n        public static System.DateTime WeeksFrom(System.DateTime date) { }\n        public static System.DateTime YearsFrom(System.DateTime date) { }\n    }\n    public static class Nine\n    {\n        public static System.DateTime Days { get; }\n        public static System.DateTime Hours { get; }\n        public static System.DateTime Minutes { get; }\n        public static System.DateTime Months { get; }\n        public static System.DateTime Seconds { get; }\n        public static System.DateTime Weeks { get; }\n        public static System.DateTime Years { get; }\n        public static System.DateTime DaysFrom(System.DateTime date) { }\n        public static System.DateTime HoursFrom(System.DateTime date) { }\n        public static System.DateTime MinutesFrom(System.DateTime date) { }\n        public static System.DateTime MonthsFrom(System.DateTime date) { }\n        public static System.DateTime SecondsFrom(System.DateTime date) { }\n        public static System.DateTime WeeksFrom(System.DateTime date) { }\n        public static System.DateTime YearsFrom(System.DateTime date) { }\n    }\n    public static class One\n    {\n        public static System.DateTime Day { get; }\n        public static System.DateTime Hour { get; }\n        public static System.DateTime Minute { get; }\n        public static System.DateTime Month { get; }\n        public static System.DateTime Second { get; }\n        public static System.DateTime Week { get; }\n        public static System.DateTime Year { get; }\n        public static System.DateTime DayFrom(System.DateTime date) { }\n        public static System.DateTime HourFrom(System.DateTime date) { }\n        public static System.DateTime MinuteFrom(System.DateTime date) { }\n        public static System.DateTime MonthFrom(System.DateTime date) { }\n        public static System.DateTime SecondFrom(System.DateTime date) { }\n        public static System.DateTime WeekFrom(System.DateTime date) { }\n        public static System.DateTime YearFrom(System.DateTime date) { }\n    }\n    public static class Seven\n    {\n        public static System.DateTime Days { get; }\n        public static System.DateTime Hours { get; }\n        public static System.DateTime Minutes { get; }\n        public static System.DateTime Months { get; }\n        public static System.DateTime Seconds { get; }\n        public static System.DateTime Weeks { get; }\n        public static System.DateTime Years { get; }\n        public static System.DateTime DaysFrom(System.DateTime date) { }\n        public static System.DateTime HoursFrom(System.DateTime date) { }\n        public static System.DateTime MinutesFrom(System.DateTime date) { }\n        public static System.DateTime MonthsFrom(System.DateTime date) { }\n        public static System.DateTime SecondsFrom(System.DateTime date) { }\n        public static System.DateTime WeeksFrom(System.DateTime date) { }\n        public static System.DateTime YearsFrom(System.DateTime date) { }\n    }\n    public static class Six\n    {\n        public static System.DateTime Days { get; }\n        public static System.DateTime Hours { get; }\n        public static System.DateTime Minutes { get; }\n        public static System.DateTime Months { get; }\n        public static System.DateTime Seconds { get; }\n        public static System.DateTime Weeks { get; }\n        public static System.DateTime Years { get; }\n        public static System.DateTime DaysFrom(System.DateTime date) { }\n        public static System.DateTime HoursFrom(System.DateTime date) { }\n        public static System.DateTime MinutesFrom(System.DateTime date) { }\n        public static System.DateTime MonthsFrom(System.DateTime date) { }\n        public static System.DateTime SecondsFrom(System.DateTime date) { }\n        public static System.DateTime WeeksFrom(System.DateTime date) { }\n        public static System.DateTime YearsFrom(System.DateTime date) { }\n    }\n    public static class Ten\n    {\n        public static System.DateTime Days { get; }\n        public static System.DateTime Hours { get; }\n        public static System.DateTime Minutes { get; }\n        public static System.DateTime Months { get; }\n        public static System.DateTime Seconds { get; }\n        public static System.DateTime Weeks { get; }\n        public static System.DateTime Years { get; }\n        public static System.DateTime DaysFrom(System.DateTime date) { }\n        public static System.DateTime HoursFrom(System.DateTime date) { }\n        public static System.DateTime MinutesFrom(System.DateTime date) { }\n        public static System.DateTime MonthsFrom(System.DateTime date) { }\n        public static System.DateTime SecondsFrom(System.DateTime date) { }\n        public static System.DateTime WeeksFrom(System.DateTime date) { }\n        public static System.DateTime YearsFrom(System.DateTime date) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting DateTime to ordinal words with grammatical case in C#\nDESCRIPTION: This extension method converts a DateTime value to its ordinal word representation, allowing for specification of grammatical case.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToOrdinalWords(this System.DateTime input, Humanizer.GrammaticalCase grammaticalCase) { }\n```\n\n----------------------------------------\n\nTITLE: Converting to Quantities with ToQuantity Extension Methods in C#\nDESCRIPTION: This snippet features the ToQuantity extension methods which format a string as a quantity with a given number. Overloads allow specifying the quantity as double or long, with optional formatting and culture-specific formatting.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ToQuantityExtensions\n{\n    public static string ToQuantity(this string input, double quantity) { }\n    public static string ToQuantity(this string input, long quantity, Humanizer.ShowQuantityAs showQuantityAs = 1) { }\n    public static string ToQuantity(this string input, double quantity, string? format = null, System.IFormatProvider? formatProvider = null) { }\n    public static string ToQuantity(this string input, long quantity, string? format, System.IFormatProvider? formatProvider = null) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Tupleize Integers with Tupleize Extension Method in C#\nDESCRIPTION: This snippet includes the Tupleize extension method for integers, likely used to convert an integer to an ordinal word representation (e.g., 1 to \"1st\", 2 to \"2nd\").\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\npublic static class TupleizeExtensions\n{\n    public static string Tupleize(this int input) { }\n}\n```\n\n----------------------------------------\n\nTITLE: DateOnly Extension: DaysFrom, MonthsFrom, WeeksFrom, YearsFrom in C#\nDESCRIPTION: These methods provide fluent syntax for calculating dates relative to a given DateOnly or DateTime object.  They calculate a new DateOnly value offset by a specified amount of time. The methods are defined within static nested classes.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\npublic static System.DateOnly DaysFrom(System.DateOnly date) { }\npublic static System.DateOnly DaysFrom(System.DateTime date) { }\npublic static System.DateOnly MonthsFrom(System.DateOnly date) { }\npublic static System.DateOnly MonthsFrom(System.DateTime date) { }\npublic static System.DateOnly WeeksFrom(System.DateOnly date) { }\npublic static System.DateOnly WeeksFrom(System.DateTime date) { }\npublic static System.DateOnly YearsFrom(System.DateOnly date) { }\npublic static System.DateOnly YearsFrom(System.DateTime date) { }\n```\n\n----------------------------------------\n\nTITLE: Defining ClockNotationRounding Enum C#\nDESCRIPTION: Defines an enum for specifying different rounding options when representing time in clock notation. This enum includes options for no rounding and rounding to the nearest five minutes.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Humanizer\n{\n    public enum ClockNotationRounding\n    {\n        None = 0,\n        NearestFiveMinutes = 1,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: LocaliserRegistry Class in C#\nDESCRIPTION: This class manages localizers for different cultures, allowing registration and resolution of localizers based on culture codes. It utilizes a generic type parameter TLocaliser which must be a class. It takes a default localizer delegate as input.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\npublic class LocaliserRegistry<TLocaliser>\n    where TLocaliser :  class\n{\n    public LocaliserRegistry(System.Func<System.Globalization.CultureInfo, TLocaliser> defaultLocaliser) { }\n    public LocaliserRegistry(TLocaliser defaultLocaliser) { }\n    public void Register(string localeCode, System.Func<System.Globalization.CultureInfo, TLocaliser> localiser) { }\n    public void Register(string localeCode, TLocaliser localiser) { }\n    public TLocaliser ResolveForCulture(System.Globalization.CultureInfo? culture) { }\n    public TLocaliser ResolveForUiCulture() { }\n}\n```\n\n----------------------------------------\n\nTITLE: English Article helper class in C#\nDESCRIPTION: This class provides helper functions for handling articles in English. It has methods to append or prepend articles to string arrays. \nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\npublic static class EnglishArticle\n    {\n        public static string[] AppendArticlePrefix(string[] items) { }\n        public static string[] PrependArticleSuffix(string[] appended) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Inflector Extension Methods in C#\nDESCRIPTION: These extension methods provide string manipulation functionality, including Camelize, Dasherize, Hyphenate, Kebaberize, Pascalize, Pluralize, Singularize, Titleize, and Underscore. They are used to convert strings between different casing and naming conventions.  Pluralize uses Nullable reference type annotations to return null if the input is null.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\npublic static string Camelize(this string input) { }\npublic static string Dasherize(this string underscoredWord) { }\npublic static string Hyphenate(this string underscoredWord) { }\npublic static string Kebaberize(this string input) { }\npublic static string Pascalize(this string input) { }\n[return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull(\"word\")]\npublic static string? Pluralize(this string? word, bool inputIsKnownToBeSingular = true) { }\npublic static string Singularize(this string word, bool inputIsKnownToBePlural = true, bool skipSimpleWords = false) { }\npublic static string Titleize(this string input) { }\npublic static string Underscore(this string input) { }\n```\n\n----------------------------------------\n\nTITLE: ByteSize Extension Methods C#\nDESCRIPTION: These extension methods for numeric types (byte, int, long, sbyte, short, uint, ushort, double) create ByteSize instances from those values, interpreted as bits, bytes, kilobytes, megabytes, or gigabytes. The `Humanize` extension methods convert a ByteSize to a human-readable string, allowing customization with a format string and IFormatProvider.  Also included is the 'Per' extension to create a ByteRate.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Humanizer\n{\n    public static class ByteSizeExtensions\n    {\n        public static Humanizer.ByteSize Bits(this byte input) { }\n        public static Humanizer.ByteSize Bits(this int input) { }\n        public static Humanizer.ByteSize Bits(this long input) { }\n        public static Humanizer.ByteSize Bits(this sbyte input) { }\n        public static Humanizer.ByteSize Bits(this short input) { }\n        public static Humanizer.ByteSize Bits(this uint input) { }\n        public static Humanizer.ByteSize Bits(this ushort input) { }\n        public static Humanizer.ByteSize Bytes(this byte input) { }\n        public static Humanizer.ByteSize Bytes(this double input) { }\n        public static Humanizer.ByteSize Bytes(this int input) { }\n        public static Humanizer.ByteSize Bytes(this long input) { }\n        public static Humanizer.ByteSize Bytes(this sbyte input) { }\n        public static Humanizer.ByteSize Bytes(this short input) { }\n        public static Humanizer.ByteSize Bytes(this uint input) { }\n        public static Humanizer.ByteSize Bytes(this ushort input) { }\n        public static Humanizer.ByteSize Gigabytes(this byte input) { }\n        public static Humanizer.ByteSize Gigabytes(this double input) { }\n        public static Humanizer.ByteSize Gigabytes(this int input) { }\n        public static Humanizer.ByteSize Gigabytes(this long input) { }\n        public static Humanizer.ByteSize Gigabytes(this sbyte input) { }\n        public static Humanizer.ByteSize Gigabytes(this short input) { }\n        public static Humanizer.ByteSize Gigabytes(this uint input) { }\n        public static Humanizer.ByteSize Gigabytes(this ushort input) { }\n        public static string Humanize(this Humanizer.ByteSize input, System.IFormatProvider formatProvider) { }\n        public static string Humanize(this Humanizer.ByteSize input, string? format = null) { }\n        public static string Humanize(this Humanizer.ByteSize input, string? format, System.IFormatProvider? formatProvider) { }\n        public static Humanizer.ByteSize Kilobytes(this byte input) { }\n        public static Humanizer.ByteSize Kilobytes(this double input) { }\n        public static Humanizer.ByteSize Kilobytes(this int input) { }\n        public static Humanizer.ByteSize Kilobytes(this long input) { }\n        public static Humanizer.ByteSize Kilobytes(this sbyte input) { }\n        public static Humanizer.ByteSize Kilobytes(this short input) { }\n        public static Humanizer.ByteSize Kilobytes(this uint input) { }\n        public static Humanizer.ByteSize Kilobytes(this ushort input) { }\n        public static Humanizer.ByteSize Megabytes(this byte input) { }\n        public static Humanizer.ByteSize Megabytes(this double input) { }\n        public static Humanizer.ByteSize Megabytes(this int input) { }\n        public static Humanizer.ByteSize Megabytes(this long input) { }\n        public static Humanizer.ByteSize Megabytes(this sbyte input) { }\n        public static Humanizer.ByteSize Megabytes(this short input) { }\n        public static Humanizer.ByteSize Megabytes(this uint input) { }\n        public static Humanizer.ByteSize Megabytes(this ushort input) { }\n        public static Humanizer.ByteRate Per(this Humanizer.ByteSize size, System.TimeSpan interval) { }\n        public static Humanizer.ByteSize Terabytes(this byte input) { }\n        public static Humanizer.ByteSize Terabytes(this double input) { }\n        public static Humanizer.ByteSize Terabytes(this int input) { }\n        public static Humanizer.ByteSize Terabytes(this long input) { }\n        public static Humanizer.ByteSize Terabytes(this sbyte input) { }\n        public static Humanizer.ByteSize Terabytes(this short input) { }\n        public static Humanizer.ByteSize Terabytes(this uint input) { }\n        public static Humanizer.ByteSize Terabytes(this ushort input) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Number to Number Extensions in C#\nDESCRIPTION: Defines extension methods for converting numbers to different magnitudes (Billions, Hundreds, Millions, Tens, Thousands). These methods operate on various numeric types (double, int, long, uint, ulong) and return the corresponding value representing the specified magnitude.  For instance, input.Billions() would return the number of billions in the input number.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\npublic static class NumberToNumberExtensions\n{\n    public static double Billions(this double input) { }\n    public static int Billions(this int input) { }\n    public static long Billions(this long input) { }\n    public static uint Billions(this uint input) { }\n    public static ulong Billions(this ulong input) { }\n    public static double Hundreds(this double input) { }\n    public static int Hundreds(this int input) { }\n    public static long Hundreds(this long input) { }\n    public static uint Hundreds(this uint input) { }\n    public static ulong Hundreds(this ulong input) { }\n    public static double Millions(this double input) { }\n    public static int Millions(this int input) { }\n    public static long Millions(this long input) { }\n    public static uint Millions(this uint input) { }\n    public static ulong Millions(this ulong input) { }\n    public static double Tens(this double input) { }\n    public static int Tens(this int input) { }\n    public static long Tens(this long input) { }\n    public static uint Tens(this uint input) { }\n    public static ulong Tens(this ulong input) { }\n    public static double Thousands(this double input) { }\n    public static int Thousands(this int input) { }\n    public static long Thousands(this long input) { }\n    public static uint Thousands(this uint input) { }\n    public static ulong Thousands(this ulong input) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Dates with the On Class in C#\nDESCRIPTION: This code defines nested classes within the 'On' class to represent specific dates in April, August and December.  It offers static properties like The1st, The2nd, etc., for retrieving specific dates. It includes a method The(int dayNumber) to get a date from a day number.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\npublic class On\n    {\n        public On() { }\n        public class April\n        {\n            public April() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n        public class August\n        {\n            public August() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The31st { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n        public class December\n        {\n            public December() { }\n            public static System.DateTime The10th { get; }\n\n```\n\n----------------------------------------\n\nTITLE: Casing Extension Methods C#\nDESCRIPTION: This extension method applies a specified letter casing to a string using the Humanizer.LetterCasing enum. It allows modifying the case of the input string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Humanizer\n{\n    public static class CasingExtensions\n    {\n        public static string ApplyCase(this string input, Humanizer.LetterCasing casing) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GrammaticalCase enum declaration in C#\nDESCRIPTION: This enum defines the grammatical cases, such as nominative, genitive, dative, accusative, instrumental, and prepositional.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\npublic enum GrammaticalCase\n    {\n        Nominative = 0,\n        Genitive = 1,\n        Dative = 2,\n        Accusative = 3,\n        Instrumental = 4,\n        Prepositional = 5,\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining DateOnly Properties for April in C#\nDESCRIPTION: This code snippet defines a class representing the month April, and provides static DateOnly properties to access specific days of that month. Each property returns a System.DateOnly object, representing a date without a time component.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\npublic class April\n{\n    public April() { }\n    public static System.DateOnly The10th { get; }\n    public static System.DateOnly The11th { get; }\n    public static System.DateOnly The12th { get; }\n    public static System.DateOnly The13th { get; }\n    public static System.DateOnly The14th { get; }\n    public static System.DateOnly The15th { get; }\n    public static System.DateOnly The16th { get; }\n    public static System.DateOnly The17th { get; }\n    public static System.DateOnly The18th { get; }\n    public static System.DateOnly The19th { get; }\n```\n\n----------------------------------------\n\nTITLE: Humanizing IEnumerable with object formatter and separator in C#\nDESCRIPTION: This extension method humanizes an IEnumerable collection with both a custom object formatter and a separator string.  It uses the formatter to convert each object to a string and then joins them using the separator. The exact implementation is not provided, but this shows the declaration.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Humanize<T>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, object> displayFormatter, string separator) { }\n```\n\n----------------------------------------\n\nTITLE: String Transformation with Transformers in C#\nDESCRIPTION: This code snippet showcases extension methods for transforming strings using an array of IStringTransformer or ICulturedStringTransformer. It allows applying a series of transformations to a string, optionally considering a specific culture for culturally sensitive transformations.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\npublic static string Transform(this string input, params Humanizer.IStringTransformer[] transformers) { }\npublic static string Transform(this string input, System.Globalization.CultureInfo culture, params Humanizer.ICulturedStringTransformer[] transformers) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Humanize Extensions C#\nDESCRIPTION: Defines extension methods for collections to humanize them into readable strings. These extension methods take a collection and optionally a display formatter function to convert the elements to strings, and then concatenate them into a human-readable list.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Humanizer\n{\n    public static class CollectionHumanizeExtensions\n    {\n        public static string Humanize<T>(this System.Collections.Generic.IEnumerable<T> collection) { }\n        public static string Humanize<T>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, object> displayFormatter) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ITimeOnlyToClockNotationConverter interface in C#\nDESCRIPTION: This interface defines a method for converting TimeOnly values to clock notation.  The Convert method takes a TimeOnly input and a ClockNotationRounding option, returning the time in clock notation.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ITimeOnlyToClockNotationConverter\n{\n    string Convert(System.TimeOnly time, Humanizer.ClockNotationRounding roundToNearestFive);\n}\n```\n\n----------------------------------------\n\nTITLE: Date Accessors for March in C#\nDESCRIPTION: Defines a static class `March` that provides read-only `DateTime` properties for each day of the month, named `The1st`, `The2nd`, ..., `The31st`. It also contains an un-implemented method `The(int dayNumber)` for retrieving a date by day number.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\npublic class March\n        {\n            public March() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The31st { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: Dehumanizing Enum Values in C#\nDESCRIPTION: These extension methods facilitate converting a string input back into an enum value. They include safety checks and configurations on how to handle mismatches using the `OnNoMatch` parameter.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic static class EnumDehumanizeExtensions\n{\n    [System.Diagnostics.CodeAnalysis.RequiresDynamicCode(\"The native code for the target enumeration might not be available at runtime.\")]\n    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode(\"The native code for the target enumeration might not be available at runtime.\")]\n    public static System.Enum DehumanizeTo(this string input, System.Type targetEnum, Humanizer.OnNoMatch onNoMatch = 0) { }\n    public static TTargetEnum DehumanizeTo<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields)]  TTargetEnum>(this string input)\n        where TTargetEnum :  struct, System.Enum { }\n    public static TTargetEnum? DehumanizeTo<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields)]  TTargetEnum>(this string input, Humanizer.OnNoMatch onNoMatch = 0)\n        where TTargetEnum :  struct, System.Enum { }\n}\n```\n\n----------------------------------------\n\nTITLE: Precision Date/Time Humanize Strategy Classes - C#\nDESCRIPTION: Defines classes that implement `IDateOnlyHumanizeStrategy`, `IDateTimeHumanizeStrategy`, `IDateTimeOffsetHumanizeStrategy`, and `ITimeOnlyHumanizeStrategy` with a specified precision. These strategies are used to humanize dates and times based on a given precision value.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.DotNet8_0.verified.txt#_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\npublic class PrecisionDateOnlyHumanizeStrategy : Humanizer.IDateOnlyHumanizeStrategy\n    {\n        public PrecisionDateOnlyHumanizeStrategy(double precision = 0.75) { }\n        public string Humanize(System.DateOnly input, System.DateOnly comparisonBase, System.Globalization.CultureInfo? culture) { }\n    }\n    public class PrecisionDateTimeHumanizeStrategy : Humanizer.IDateTimeHumanizeStrategy\n    {\n        public PrecisionDateTimeHumanizeStrategy(double precision = 0.75) { }\n        public string Humanize(System.DateTime input, System.DateTime comparisonBase, System.Globalization.CultureInfo? culture) { }\n    }\n    public class PrecisionDateTimeOffsetHumanizeStrategy : Humanizer.IDateTimeOffsetHumanizeStrategy\n    {\n        public PrecisionDateTimeOffsetHumanizeStrategy(double precision = 0.75) { }\n        public string Humanize(System.DateTimeOffset input, System.DateTimeOffset comparisonBase, System.Globalization.CultureInfo? culture) { }\n    }\n    public class PrecisionTimeOnlyHumanizeStrategy : Humanizer.ITimeOnlyHumanizeStrategy\n    {\n        public PrecisionTimeOnlyHumanizeStrategy(double precision = 0.75) { }\n        public string Humanize(System.TimeOnly input, System.TimeOnly comparisonBase, System.Globalization.CultureInfo? culture) { }\n```\n\n----------------------------------------\n\nTITLE: Date Accessors for June in C#\nDESCRIPTION: Defines a static class `June` that provides read-only `DateTime` properties for each day of the month, named `The1st`, `The2nd`, ..., `The30th`. It also contains an un-implemented method `The(int dayNumber)` for retrieving a date by day number.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\npublic class June\n        {\n            public June() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: ICulturedStringTransformer interface in C#\nDESCRIPTION: This interface describes an object able to transform a string given a CultureInfo\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICulturedStringTransformer : Humanizer.IStringTransformer\n    {\n        string Transform(string input, System.Globalization.CultureInfo culture);\n    }\n```\n\n----------------------------------------\n\nTITLE: IDateTimeOffsetHumanizeStrategy Interface in C#\nDESCRIPTION: This Interface provides strategy for datetimeoffset humanizing\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IDateTimeOffsetHumanizeStrategy\n    {\n        string Humanize(System.DateTimeOffset input, System.DateTimeOffset comparisonBase, System.Globalization.CultureInfo? culture);\n    }\n```\n\n----------------------------------------\n\nTITLE: Metric Numeral Extensions in C#\nDESCRIPTION: Defines extension methods for converting between numbers and metric numerals. The FromMetric method parses a string representation of a metric numeral into a double. The ToMetric methods format a double or int value as a metric numeral, with options for specifying the format and number of decimal places.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MetricNumeralExtensions\n{\n    public static double FromMetric(this string input) { }\n    public static string ToMetric(this double input, Humanizer.MetricNumeralFormats? formats = default, int? decimals = default) { }\n    public static string ToMetric(this int input, Humanizer.MetricNumeralFormats? formats = default, int? decimals = default) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Words with Word Form and Gender in C#\nDESCRIPTION: This extension method converts an integer to its word representation, allowing customization for word form and grammatical gender. It takes an integer as input and returns a string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToWords(this int number, Humanizer.WordForm wordForm, Humanizer.GrammaticalGender gender, System.Globalization.CultureInfo? culture = null) { }\n```\n\n----------------------------------------\n\nTITLE: Date Accessors for July in C#\nDESCRIPTION: Defines a static class `July` that provides read-only `DateTime` properties for each day of the month, named `The1st`, `The2nd`, ..., `The31st`. It also contains an un-implemented method `The(int dayNumber)` for retrieving a date by day number.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\npublic class July\n        {\n            public July() { }\n            public static System.DateTime The10th { get; }\n            public static System.DateTime The11th { get; }\n            public static System.DateTime The12th { get; }\n            public static System.DateTime The13th { get; }\n            public static System.DateTime The14th { get; }\n            public static System.DateTime The15th { get; }\n            public static System.DateTime The16th { get; }\n            public static System.DateTime The17th { get; }\n            public static System.DateTime The18th { get; }\n            public static System.DateTime The19th { get; }\n            public static System.DateTime The1st { get; }\n            public static System.DateTime The20th { get; }\n            public static System.DateTime The21st { get; }\n            public static System.DateTime The22nd { get; }\n            public static System.DateTime The23rd { get; }\n            public static System.DateTime The24th { get; }\n            public static System.DateTime The25th { get; }\n            public static System.DateTime The26th { get; }\n            public static System.DateTime The27th { get; }\n            public static System.DateTime The28th { get; }\n            public static System.DateTime The29th { get; }\n            public static System.DateTime The2nd { get; }\n            public static System.DateTime The30th { get; }\n            public static System.DateTime The31st { get; }\n            public static System.DateTime The3rd { get; }\n            public static System.DateTime The4th { get; }\n            public static System.DateTime The5th { get; }\n            public static System.DateTime The6th { get; }\n            public static System.DateTime The7th { get; }\n            public static System.DateTime The8th { get; }\n            public static System.DateTime The9th { get; }\n            public static System.DateTime The(int dayNumber) { }\n        }\n```\n\n----------------------------------------\n\nTITLE: Converting Long to Words with Word Form and 'And' in C#\nDESCRIPTION: This extension method converts a long integer to its word representation, allowing customization for word form and addition of 'and'. It takes a long integer as input and returns a string.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ToWords(this long number, Humanizer.WordForm wordForm, System.Globalization.CultureInfo? culture = null, bool addAnd = false) { }\n```\n\n----------------------------------------\n\nTITLE: Assembly Attributes Declaration C#\nDESCRIPTION: Defines assembly-level attributes including the neutral resources language and target framework. This configuration is essential for specifying the application's localization and compatibility settings.\nSOURCE: https://github.com/humanizr/humanizer/blob/main/src/Humanizer.Tests/ApiApprover/PublicApiApprovalTest.Approve_Public_Api.Net4_8.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[assembly: System.Resources.NeutralResourcesLanguage(\"en\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETFramework,Version=v4.8\", FrameworkDisplayName=\".NET Framework 4.8\")]\n```"
  }
]