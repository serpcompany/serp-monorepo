[
  {
    "owner": "jazzband",
    "repo": "django-rest-knox",
    "content": "TITLE: Setting Knox as Default Authentication Class\nDESCRIPTION: Configuration to make Knox's TokenAuthentication the default authentication class for Django REST Framework. This enables token authentication for all API views unless specified otherwise.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': ('knox.auth.TokenAuthentication',),\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Knox Authentication Settings in Django\nDESCRIPTION: Default configuration values for Django Rest Knox authentication system, showing how to set up token handling, security, serialization and expiry behavior. This demonstrates all available settings in the REST_KNOX namespace with their default values.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/settings.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#...snip...\n# These are the default values if none are set\nfrom datetime import timedelta\nfrom rest_framework.settings import api_settings\n\nKNOX_TOKEN_MODEL = 'knox.AuthToken'\n\nREST_KNOX = {\n  'SECURE_HASH_ALGORITHM': 'hashlib.sha512',\n  'AUTH_TOKEN_CHARACTER_LENGTH': 64,\n  'TOKEN_TTL': timedelta(hours=10),\n  'USER_SERIALIZER': 'knox.serializers.UserSerializer',\n  'TOKEN_LIMIT_PER_USER': None,\n  'AUTO_REFRESH': False,\n  'AUTO_REFRESH_MAX_TTL': None,\n  'MIN_REFRESH_INTERVAL': 60,\n  'AUTH_HEADER_PREFIX': 'Token',\n  'EXPIRY_DATETIME_FORMAT': api_settings.DATETIME_FORMAT,\n  'TOKEN_MODEL': 'knox.AuthToken',\n}\n#...snip...\n```\n\n----------------------------------------\n\nTITLE: Implementing TokenAuthentication in a Django REST Framework APIView\nDESCRIPTION: Example of how to implement Knox TokenAuthentication in a Django REST Framework APIView. The view requires authentication and returns a simple response with a JSON object.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/auth.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nfrom knox.auth import TokenAuthentication\n\nclass ExampleView(APIView):\n    authentication_classes = (TokenAuthentication,)\n    permission_classes = (IsAuthenticated,)\n\n    def get(self, request, format=None):\n        content = {\n            'foo': 'bar'\n        }\n        return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Knox\nDESCRIPTION: Updates the Django INSTALLED_APPS setting to include rest_framework and knox, which are required for the authentication system to work properly. It recommends removing rest_framework.authtoken if it was previously used.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n  ...\n  'rest_framework',\n  'knox',\n  ...\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Login Response Data in Knox LoginView\nDESCRIPTION: This code snippet shows how to override the get_post_response_data method in LoginView to customize the response payload after successful authentication. It returns a JSON object containing token, expiry, and optional user data.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/views.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    def get_post_response_data(self, request, token, instance):\n        UserSerializer = self.get_user_serializer_class()\n\n        data = {\n            'expiry': self.format_expiry_datetime(instance.expiry),\n            'token': token\n        }\n        if UserSerializer is not None:\n            data[\"user\"] = UserSerializer(\n                request.user,\n                context=self.get_context()\n            ).data\n        return data\n```\n\n----------------------------------------\n\nTITLE: Configuring URLs for Knox Authentication Views\nDESCRIPTION: Example of configuring Django URL patterns for custom Knox authentication views. Includes paths for login, logout, and logout-all endpoints.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/auth.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom knox import views as knox_views\nfrom yourapp.api.views import LoginView\n\nurlpatterns = [\n     path(r'login/', LoginView.as_view(), name='knox_login'),\n     path(r'logout/', knox_views.LogoutView.as_view(), name='knox_logout'),\n     path(r'logoutall/', knox_views.LogoutAllView.as_view(), name='knox_logoutall'),\n]\n```\n\n----------------------------------------\n\nTITLE: Including Knox URLs in Django URL Configuration\nDESCRIPTION: This snippet shows how to include Knox's default authentication URLs in a Django project's urlpatterns. It uses the path function to route all Knox-related URLs under the 'api/auth/' prefix.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/urls.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n  #...snip...\n  path(r'api/auth/', include('knox.urls'))\n  #...snip...\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Knox LoginView with AllowAny Permission\nDESCRIPTION: Example of a custom Knox LoginView using AuthTokenSerializer and the AllowAny permission class. This implementation allows token authentication to be used as the default throughout the application.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/auth.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth import login\n\nfrom rest_framework import permissions\nfrom rest_framework.authtoken.serializers import AuthTokenSerializer\nfrom knox.views import LoginView as KnoxLoginView\n\nclass LoginView(KnoxLoginView):\n    permission_classes = (permissions.AllowAny,)\n\n    def post(self, request, format=None):\n        serializer = AuthTokenSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = serializer.validated_data['user']\n        login(request, user)\n        return super(LoginView, self).post(request, format=None)\n```\n\n----------------------------------------\n\nTITLE: Customizing Knox LoginView with BasicAuthentication\nDESCRIPTION: Example of customizing Knox's LoginView to use BasicAuthentication. This allows users to authenticate using Basic Authentication instead of requiring a token to generate a new token.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/auth.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom knox.views import LoginView as KnoxLoginView\nfrom rest_framework.authentication import BasicAuthentication\n\nclass LoginView(KnoxLoginView):\n    authentication_classes = [BasicAuthentication]\n```\n\n----------------------------------------\n\nTITLE: Accessing Knox Constants for Token Configuration\nDESCRIPTION: Example showing how to access the constants defined in Knox that control internal token behavior. These constants should not be modified as they are used in model definitions and changing them may cause errors.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/settings.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom knox.settings import CONSTANTS\n\nprint(CONSTANTS.DIGEST_LENGTH) #=> 128\n```\n\n----------------------------------------\n\nTITLE: Knox Authentication Header Format\nDESCRIPTION: Example of the authorization header format required when using Knox TokenAuthentication. The header must start with 'Token' followed by a space and the token value.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/auth.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAuthorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b9836F45E23A345\n```\n\n----------------------------------------\n\nTITLE: Customizing Logout Response in Knox LogoutView\nDESCRIPTION: This code snippet demonstrates how to override the get_post_response method in LogoutView to modify the default HTTP 204 response. The example changes the status code to 200 and includes a customized response body with a goodbye message.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/views.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    def get_post_response(self, request):\n        return Response({\"bye-bye\": request.user.username}, status=200)\n```\n\n----------------------------------------\n\nTITLE: Referencing Knox Views by Name in Django\nDESCRIPTION: This snippet demonstrates how to reverse-lookup Knox's authentication view URLs by their names. It includes examples for login, logout, and logout-all views.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/urls.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreverse('knox_login')\nreverse('knox_logout')\nreverse('knox_logoutall')\n```\n\n----------------------------------------\n\nTITLE: Running Knox Migrations\nDESCRIPTION: Command to apply the database migrations for Knox models, which is required to set up the necessary database tables for token storage and management.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Installing Django Rest Knox with pip\nDESCRIPTION: Command to install the django-rest-knox package using pip, which is the recommended installation method.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/docs/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-rest-knox\n```\n\n----------------------------------------\n\nTITLE: Running MkDocs with Custom Port Configuration in Bash\nDESCRIPTION: Bash command for configuring the port that MkDocs will serve documentation on. This environment variable setting allows developers to customize the port number when using the mkdocs.sh script.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMKDOCS_DEV_PORT=\"8080\"\n```\n\n----------------------------------------\n\nTITLE: Running MkDocs Commands with Docker Script in Bash\nDESCRIPTION: Examples of how to run various MkDocs commands using the provided mkdocs.sh script, which runs MkDocs in a Docker container. Shows commands for building documentation and getting help.\nSOURCE: https://github.com/jazzband/django-rest-knox/blob/develop/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./mkdocs build\n./mkdocs --help\n```"
  }
]