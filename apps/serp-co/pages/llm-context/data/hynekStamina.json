[
  {
    "owner": "hynek",
    "repo": "stamina",
    "content": "TITLE: Implementing Basic Function Retries with stamina.retry() Decorator in Python\nDESCRIPTION: Demonstrates how to use the stamina.retry() decorator to retry a function up to 3 times when it raises an httpx.HTTPError exception. The function attempts to make an HTTP request and will retry on network or HTTP errors.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/tutorial.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\n\nimport stamina\n\n\n@stamina.retry(on=httpx.HTTPError, attempts=3)\ndef do_it(code: int) -> httpx.Response:\n    resp = httpx.get(f\"https://httpbin.org/status/{code}\")\n    resp.raise_for_status()\n\n    return resp\n\n# reveal_type(do_it)\n# note: Revealed type is \"def (code: builtins.int) -> httpx._models.Response\"\n```\n\n----------------------------------------\n\nTITLE: Basic Stamina Retry Decorator Example in Python\nDESCRIPTION: Demonstrates the basic usage of Stamina's retry decorator to handle HTTP errors. The function is configured to retry on HTTP exceptions with automatic backoff and jitter for up to 3 attempts.\nSOURCE: https://github.com/hynek/stamina/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\n\nimport stamina\n\n\n@stamina.retry(on=httpx.HTTPError, attempts=3)\ndef do_it(code: int) -> httpx.Response:\n    resp = httpx.get(f\"https://httpbin.org/status/{code}\")\n    resp.raise_for_status()\n\n    return resp\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Retries with stamina in Python\nDESCRIPTION: Demonstrates how to use stamina's retry mechanisms with async functions in both asyncio and Trio. Shows decorator usage with timeout settings and context manager usage for async code blocks.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/tutorial.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport datetime as dt\n\n\n@stamina.retry(\n    on=httpx.HTTPError, attempts=3, timeout=dt.timedelta(seconds=10)\n)\nasync def do_it_async(code: int) -> httpx.Response:\n    async with httpx.AsyncClient() as client:\n        resp = await client.get(f\"https://httpbin.org/status/{code}\")\n    resp.raise_for_status()\n\n    return resp\n\n# reveal_type(do_it_async)\n# note: Revealed type is \"def (code: builtins.int) -> typing.Coroutine[Any, Any, httpx._models.Response]\"\n\nasync def with_block(code: int) -> httpx.Response:\n    async for attempt in stamina.retry_context(on=httpx.HTTPError, attempts=3):\n        with attempt:\n            async with httpx.AsyncClient() as client:\n                resp = await client.get(f\"https://httpbin.org/status/{code}\")\n            resp.raise_for_status()\n\n    return resp\n```\n\n----------------------------------------\n\nTITLE: Using a Predicate Function for Selective Retries in Python\nDESCRIPTION: Shows how to use a predicate function with stamina.retry() to selectively retry HTTP requests only when 5xx server errors occur, while avoiding retries for client errors like 404 or 403.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/tutorial.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef retry_only_on_real_errors(exc: Exception) -> bool:\n    # If the error is an HTTP status error, only retry on 5xx errors.\n    if isinstance(exc, httpx.HTTPStatusError):\n        return exc.response.status_code >= 500\n\n    # Otherwise retry on all httpx errors.\n    return isinstance(exc, httpx.HTTPError)\n\n@stamina.retry(on=retry_only_on_real_errors, attempts=3)\ndef do_it(code: int) -> httpx.Response:\n    resp = httpx.get(f\"https://httpbin.org/status/{code}\")\n    resp.raise_for_status()\n\n    return resp\n```\n\n----------------------------------------\n\nTITLE: Using RetryingCaller for HTTP Request Retries in Python\nDESCRIPTION: Demonstrates how to use the RetryingCaller class to retry a function that makes HTTP requests when it encounters errors. Shows both direct usage and the bound method approach.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/api.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef do_something_with_url(url, some_kw):\n    resp = httpx.get(url).raise_for_status()\n    ...\n\nrc = stamina.RetryingCaller(attempts=5)\n\nrc(httpx.HTTPError, do_something_with_url, f\"https://httpbin.org/status/404\", some_kw=42)\n\n# Equivalent:\nbound_rc = rc.on(httpx.HTTPError)\n\nbound_rc(do_something_with_url, f\"https://httpbin.org/status/404\", some_kw=42)\n```\n\n----------------------------------------\n\nTITLE: Retrying Code Blocks with Context Managers in Python\nDESCRIPTION: Demonstrates how to retry specific code blocks using stamina.retry_context(), which yields context managers for handling exceptions and retries within a specific section of code.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/tutorial.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor attempt in stamina.retry_context(on=httpx.HTTPError):\n    with attempt:\n        resp = httpx.get(f\"https://httpbin.org/status/404\")\n        resp.raise_for_status()\n```\n\n----------------------------------------\n\nTITLE: Retrying Individual Function Calls with RetryingCaller in Python\nDESCRIPTION: Shows how to use stamina.RetryingCaller to retry individual function or method calls without decorating the entire function. Demonstrates both direct usage and usage with pre-bound exception types.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/tutorial.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef do_something_with_url(url, some_kw):\n    resp = httpx.get(url)\n    resp.raise_for_status()\n    ...\n\nrc = stamina.RetryingCaller(attempts=5)\n\nrc(httpx.HTTPError, do_something_with_url, f\"https://httpbin.org/status/404\", some_kw=42)\n\n# You can also create a caller with a pre-bound exception type:\nbound_rc = rc.on(httpx.HTTPError)\n\nbound_rc(do_something_with_url, f\"https://httpbin.org/status/404\", some_kw=42)\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponential Backoff Formula with Jitter in Stamina\nDESCRIPTION: Mathematical formula defining how Stamina calculates retry delays. It uses exponential backoff starting at 0.1 seconds, with a multiplier of 2.0, capped at 5.0 seconds, plus a random jitter between 0 and 1.0 seconds.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/motivation.md#2025-04-18_snippet_0\n\nLANGUAGE: math\nCODE:\n```\nmin(5.0, 0.1 * 2.0^{attempt - 1} + random(0, 1.0))\n```\n\n----------------------------------------\n\nTITLE: The Equivalent Code of RetryingCaller in Python\nDESCRIPTION: Illustrates the equivalent code that RetryingCaller executes behind the scenes when making a function call with retry behavior.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/tutorial.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndo_something_with_url(f\"https://httpbin.org/status/404\", some_kw=42)\n```\n\n----------------------------------------\n\nTITLE: Controlling Retry Behavior with set_testing\nDESCRIPTION: Demonstrates how to use stamina.set_testing to control retry behavior in tests by turning off backoff and capping the number of retry attempts. This example shows how to limit retries to 1 or 2 attempts regardless of the configured value.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/testing.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport stamina\n\nstamina.set_testing(True)  # no backoff, 1 attempt\nstamina.set_testing(True, attempts=2)  # no backoff, 2 attempts\n\nfor attempt in stamina.retry_context(on=ValueError, attempts=1_000):\n    with attempt:\n        print(\"trying\", attempt.num)\n        raise ValueError(\"nope\")\n\nstamina.set_testing(False)  # back to business as usual\n```\n\n----------------------------------------\n\nTITLE: Disabling Retries with set_active in Pytest\nDESCRIPTION: Shows how to create a pytest fixture that globally disables retries by setting stamina.set_active to False. This approach is recommended when using the decorator-based API.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/testing.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nimport stamina\n\n@pytest.fixture(autouse=True, scope=\"session\")\ndef deactivate_retries():\n    stamina.set_active(False)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom RetryHook for Logging Retries\nDESCRIPTION: Example of creating a simple retry hook that prints information when a retry has been scheduled. Shows how to use the instrumentation system to add custom logging.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/api.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef print_hook(details: stamina.instrumentation.RetryDetails) -> None:\n    print(\"a retry has been scheduled!\", details)\n\nstamina.set_on_retry_hooks([print_hook])\n```\n\n----------------------------------------\n\nTITLE: Using RetryHookFactory for Lazy Loading of Dependencies\nDESCRIPTION: Demonstrates how to use RetryHookFactory to delay importing expensive modules until they're actually needed for retry instrumentation. Useful for optimizing startup time.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/api.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom stamina.instrumentation import RetryHookFactory, RetryDetails\n\ndef init_with_expensive_import():\n    import something_expensive\n\n    def do_something(details: RetryDetails) -> None:\n        something_expensive.do_something(details)\n\n    return do_something\n\n\nstamina.set_on_retry_hooks([RetryHookFactory(init_with_expensive_import)])\n```\n\n----------------------------------------\n\nTITLE: Disabling Stamina Instrumentation in Python\nDESCRIPTION: Shows how to disable all instrumentation hooks in the Stamina retry library by setting the on-retry hooks to an empty list.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/instrumentation.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstamina.instrumentation.set_on_retry_hooks([])\n```\n\n----------------------------------------\n\nTITLE: Equivalent Function Call in RetryingCaller Example\nDESCRIPTION: Shows the actual function call that gets executed and retried by both the RetryingCaller and BoundRetryingCaller in the previous example.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/api.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndo_something_with_url(f\"https://httpbin.org/status/404\", some_kw=42)\n```\n\n----------------------------------------\n\nTITLE: Including README Content in Documentation\nDESCRIPTION: Sphinx directive to include a portion of the README.md file in the documentation, specifically the content between the markdown separator and a specific HTML comment.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/index.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{include} ../README.md\n:start-after: \"---\"\n:end-before: \"<!-- end docs index -->\"\n```\n```\n\n----------------------------------------\n\nTITLE: Main Documentation Table of Contents\nDESCRIPTION: Sphinx toctree directive that defines the hidden main navigation structure for the documentation, listing the primary content pages.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/index.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden: true\n\nmotivation\ntutorial\ntesting\ninstrumentation\napi\n```\n```\n\n----------------------------------------\n\nTITLE: Meta Documentation Table of Contents\nDESCRIPTION: Sphinx toctree directive that defines the hidden meta-information navigation structure, including links to credits, PyPI, GitHub, and other project resources.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/index.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n:caption: Meta\n\ncredits\nPyPI <https://pypi.org/project/stamina/>\nGitHub <https://github.com/hynek/stamina/>\nChangelog <https://github.com/hynek/stamina/blob/main/CHANGELOG.md>\nContributing <https://github.com/hynek/stamina/blob/main/.github/CONTRIBUTING.md>\nSecurity Policy <https://github.com/hynek/stamina/blob/main/.github/SECURITY.md>\nFunding <https://hynek.me/say-thanks/>\n```\n```\n\n----------------------------------------\n\nTITLE: Including Credits Section from README in restructuredtext\nDESCRIPTION: A Sphinx directive that includes the Credits section from the README.md file. The directive specifies to start including content after the '## Credits' heading.\nSOURCE: https://github.com/hynek/stamina/blob/main/docs/credits.md#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{include} ../README.md\n:start-after: \"## Credits\"\n```\n```\n\n----------------------------------------\n\nTITLE: Calendar Version Structure Definition\nDESCRIPTION: Describes the versioning system used in the project - year as first number, incremental release number as second, and emergency branch number as third.\nSOURCE: https://github.com/hynek/stamina/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe **first number** of the version is the year.\nThe **second number** is incremented with each release, starting at 1 for each year.\nThe **third number** is for emergencies when we need to start branches for older releases.\n```\n\n----------------------------------------\n\nTITLE: Version Link Format\nDESCRIPTION: Shows the format used for version comparison links in the changelog\nSOURCE: https://github.com/hynek/stamina/blob/main/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Unreleased](https://github.com/hynek/stamina/compare/25.1.0...HEAD)\n```\n\n----------------------------------------\n\nTITLE: Git Format Placeholders for Version Metadata\nDESCRIPTION: Git format placeholders that get replaced with commit hash, ISO timestamp, and tag description during Git operations. Used to track version metadata in the repository.\nSOURCE: https://github.com/hynek/stamina/blob/main/.git_archival.txt#2025-04-18_snippet_0\n\nLANGUAGE: git\nCODE:\n```\nnode: $Format:%H$\nnode-date: $Format:%cI$\ndescribe-name: $Format:%(describe:tags=true,match=*[0-9]*)$\n```"
  }
]