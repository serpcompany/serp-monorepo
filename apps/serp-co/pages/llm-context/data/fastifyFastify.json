[
  {
    "owner": "fastify",
    "repo": "fastify",
    "content": "TITLE: Implementing First Route Handler\nDESCRIPTION: Defines a basic route handler that returns a hello world response. Shows both ESM and CommonJS export patterns.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Encapsulates the routes\n * @param {FastifyInstance} fastify  Encapsulated Fastify Instance\n * @param {Object} options plugin options, refer to https://fastify.dev/docs/latest/Reference/Plugins/#plugin-options\n */\nasync function routes (fastify, options) {\n  fastify.get('/', async (request, reply) => {\n    return { hello: 'world' }\n  })\n}\n\n//ESM\nexport default routes;\n\n// CommonJs\nmodule.exports = routes\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Route Validation with JSON Schemas in Fastify (JavaScript)\nDESCRIPTION: This code defines JSON Schemas for request body, query string, parameters, and headers, and attaches them to a Fastify POST route. It leverages Ajv for validating complex types, enums, arrays, and nullable fields. Each schema block is separately defined for reusability. The handler expects each request segment to conform to its respective schema. The schema option demonstrates how to centrally manage every validation aspect of the HTTP request.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst bodyJsonSchema = {\n  type: 'object',\n  required: ['requiredKey'],\n  properties: {\n    someKey: { type: 'string' },\n    someOtherKey: { type: 'number' },\n    requiredKey: {\n      type: 'array',\n      maxItems: 3,\n      items: { type: 'integer' }\n    },\n    nullableKey: { type: ['number', 'null'] }, // or { type: 'number', nullable: true }\n    multipleTypesKey: { type: ['boolean', 'number'] },\n    multipleRestrictedTypesKey: {\n      oneOf: [\n        { type: 'string', maxLength: 5 },\n        { type: 'number', minimum: 10 }\n      ]\n    },\n    enumKey: {\n      type: 'string',\n      enum: ['John', 'Foo']\n    },\n    notTypeKey: {\n      not: { type: 'array' }\n    }\n  }\n}\n\nconst queryStringJsonSchema = {\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    excitement: { type: 'integer' }\n  }\n}\n\nconst paramsJsonSchema = {\n  type: 'object',\n  properties: {\n    par1: { type: 'string' },\n    par2: { type: 'number' }\n  }\n}\n\nconst headersJsonSchema = {\n  type: 'object',\n  properties: {\n    'x-foo': { type: 'string' }\n  },\n  required: ['x-foo']\n}\n\nconst schema = {\n  body: bodyJsonSchema,\n  querystring: queryStringJsonSchema,\n  params: paramsJsonSchema,\n  headers: headersJsonSchema\n}\n\nfastify.post('/the/url', { schema }, handler)\n```\n\n----------------------------------------\n\nTITLE: Initializing Fastify Server with TypeScript - TypeScript\nDESCRIPTION: This code initializes a basic Fastify HTTP server using TypeScript, featuring a single \"/ping\" GET endpoint. The snippet demonstrates importing Fastify, setting up a server, defining a route, and starting the server on port 8080. It requires the 'fastify' npm package and TypeScript type definitions and expects the code to be compiled with tsc before running with Node.js. Input: HTTP GET request to /ping; Output: returns string \"pong\\n\". Constraints: TypeScript target should be set to 'es2017' or greater.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from 'fastify'\n\nconst server = fastify()\n\nserver.get('/ping', async (request, reply) => {\n  return 'pong\\n'\n})\n\nserver.listen({ port: 8080 }, (err, address) => {\n  if (err) {\n    console.error(err)\n    process.exit(1)\n  }\n  console.log(`Server listening at ${address}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fastify Server\nDESCRIPTION: Demonstrates how to create a simple Fastify server with a single route. Includes both ESM and CommonJS import styles, route declaration, and server startup.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Require the framework and instantiate it\n\n// ESM\nimport Fastify from 'fastify'\n\nconst fastify = Fastify({\n  logger: true\n})\n// CommonJs\nconst fastify = require('fastify')({\n  logger: true\n})\n\n// Declare a route\nfastify.get('/', function (request, reply) {\n  reply.send({ hello: 'world' })\n})\n\n// Run the server!\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  // Server is now listening on ${address}\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure NGINX Reverse Proxy for Fastify - nginx\nDESCRIPTION: This NGINX server block listens on port 443 with SSL enabled and is designed to proxy all requests to a backend Fastify application. The configuration enforces TLS 1.3, HTTP/2, OCSP stapling, and various security headers, while forwarding key request headers and using proxy_pass to connect to an upstream group (fastify_app). Dependencies: NGINX installed, SSL certificates in PEM format, and a configured Fastify upstream group or server. Key parameters include ssl_certificate, ssl_protocols, proxy_pass, and location block directives. Input is incoming HTTPS traffic; output is proxied requests to the Fastify app. Limitations: May require adaptation for custom upstream or networking, real certificate paths, and the trustProxy setting in Fastify must be compatible with NGINX proxy headers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Recommendations.md#2025-04-22_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  # This listen directive asks NGINX to accept requests\n  # coming to any address, port 443, with SSL.\n  listen 443 ssl default_server;\n  listen [::]:443 ssl default_server;\n\n  # With a server_name directive you can also ask NGINX to\n  # use this server block only with matching server name(s)\n  # listen 443 ssl;\n  # listen [::]:443 ssl;\n  # server_name example.tld;\n\n  # Enable HTTP/2 support\n  http2 on;\n\n  # Your SSL/TLS certificate (chain) and secret key in the PEM format\n  ssl_certificate /path/to/fullchain.pem;\n  ssl_certificate_key /path/to/private.pem;\n\n  # A generic best practice baseline for based\n  # on https://ssl-config.mozilla.org/\n  ssl_session_timeout 1d;\n  ssl_session_cache shared:FastifyApp:10m;\n  ssl_session_tickets off;\n\n  # This tells NGINX to only accept TLS 1.3, which should be fine\n  # with most modern browsers including IE 11 with certain updates.\n  # If you want to support older browsers you might need to add\n  # additional fallback protocols.\n  ssl_protocols TLSv1.3;\n  ssl_prefer_server_ciphers off;\n\n  # This adds a header that tells browsers to only ever use HTTPS\n  # with this server.\n  add_header Strict-Transport-Security \"max-age=63072000\" always;\n\n  # The following directives are only necessary if you want to\n  # enable OCSP Stapling.\n  ssl_stapling on;\n  ssl_stapling_verify on;\n  ssl_trusted_certificate /path/to/chain.pem;\n\n  # Custom nameserver to resolve upstream server names\n  # resolver 127.0.0.1;\n\n  # This section matches all paths and proxies it to the backend server\n  # group specified above. Note the additional headers that forward\n  # information about the original request. You might want to set\n  # trustProxy to the address of your NGINX server so the X-Forwarded\n  # fields are used by fastify.\n  location / {\n    # more info: https://nginx.org/en/docs/http/ngx_http_proxy_module.html\n    proxy_http_version 1.1;\n    proxy_cache_bypass $http_upgrade;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n\n    # This is the directive that proxies requests to the specified server.\n    # If you are using an upstream group, then you do not need to specify a port.\n    # If you are directly proxying to a server e.g.\n    # proxy_pass http://127.0.0.1:3000 then specify a port.\n    proxy_pass http://fastify_app;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Async Fastify Server\nDESCRIPTION: Demonstrates how to create a Fastify server using async/await syntax. Includes both ESM and CommonJS import styles, an async route handler, and asynchronous server startup.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM\nimport Fastify from 'fastify'\n\nconst fastify = Fastify({\n  logger: true\n})\n// CommonJs\nconst fastify = require('fastify')({\n  logger: true\n})\n\nfastify.get('/', async (request, reply) => {\n  return { hello: 'world' }\n})\n\n/**\n * Run the server!\n */\nconst start = async () => {\n  try {\n    await fastify.listen({ port: 3000 })\n  } catch (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n}\nstart()\n```\n\n----------------------------------------\n\nTITLE: Defining Parametric Routes with Regular Expressions in Fastify (JavaScript)\nDESCRIPTION: Shows how to define a GET route where a URL parameter (`:file`) must match a specific regular expression (`^\\\\d+`). Slashes within the regex must be escaped. The captured parameter value is accessed via `request.params`. Note that regex routes can be computationally expensive.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// parametric with regexp\nfastify.get('/example/:file(^\\\\d+).png', function (request, reply) {\n  // curl ${app-url}/example/12345.png\n  // file === '12345'\n  const { file } = request.params;\n  // your code here\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastify to Listen on All IPv4 Interfaces\nDESCRIPTION: Example of how to modify the Fastify server to listen on all available IPv4 interfaces instead of just localhost. This is useful for deploying in containerized environments.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.listen({ port: 3000, host: '0.0.0.0' }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  fastify.log.info(`server listening on ${address}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Parse Request Payloads with Fastify in JavaScript\nDESCRIPTION: This JavaScript example shows how Fastify parses 'application/json' and 'text/plain' payloads natively, providing the parsed body through `request.body`. The code snippet sets up a POST route that returns the parsed request body back to the client.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @type {import('fastify').RouteShorthandOptions}\n */\nconst opts = {}\nfastify.post('/', opts, async (request, reply) => {\n  return request.body\n})\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await in Route Handlers (Return Value) in Fastify (JavaScript)\nDESCRIPTION: Illustrates defining an `async` route handler in Fastify. It shows how asynchronous operations (e.g., `getData`, `processData`) can be awaited. Returning the final result directly automatically sends the response payload, eliminating the need to explicitly call `reply.send()`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/', options, async function (request, reply) {\n  const data = await getData()\n  const processed = await processData(data)\n  return processed\n})\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Fastify Testing Example\nDESCRIPTION: Shows a complete testing setup with multiple assertions testing status code, headers, and response payload using Node's test runner.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Testing.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test } = require('node:test')\nconst buildFastify = require('./app')\n\ntest('GET `/` route', t => {\n  t.plan(4)\n\n  const fastify = buildFastify()\n\n  t.after(() => fastify.close())\n\n  fastify.inject({\n    method: 'GET',\n    url: '/'\n  }, (err, response) => {\n    t.assert.ifError(err)\n    t.assert.strictEqual(response.statusCode, 200)\n    t.assert.strictEqual(response.headers['content-type'], 'application/json; charset=utf-8')\n    t.assert.deepStrictEqual(response.json(), { hello: 'world' })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Responding Early from Fastify Hooks (onRequest/preHandler)\nDESCRIPTION: Demonstrates how to send a response from `onRequest` (callback style) and `preHandler` (async style) hooks before the route handler is executed. It highlights that `reply.send()` stops the hook chain. For async hooks, `return reply` is mandatory after calling `reply.send()` asynchronously to prevent the request from continuing.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onRequest', (request, reply, done) => {\n  reply.send('Early response')\n})\n\n// Works with async functions too\nfastify.addHook('preHandler', async (request, reply) => {\n  setTimeout(() => {\n    reply.send({ hello: 'from prehandler' })\n  })\n  return reply // mandatory, so the request is not executed further\n// Commenting the line above will allow the hooks to continue and fail with FST_ERR_REP_ALREADY_SENT\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Fastify Plugin Structure\nDESCRIPTION: The standard structure for a Fastify plugin function with the required parameters: fastify instance, options object, and done callback which must be called when the plugin is ready.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (fastify, options, done) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Validation\nDESCRIPTION: Demonstrates how to validate incoming requests using JSON Schema in Fastify routes.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import('fastify').RouteShorthandOptions}\n * @const\n */\nconst opts = {\n  schema: {\n    body: {\n      type: 'object',\n      properties: {\n        someKey: { type: 'string' },\n        someOtherKey: { type: 'number' }\n      }\n    }\n  }\n}\n\nfastify.post('/', opts, async (request, reply) => {\n  return { hello: 'world' }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Properties in Fastify Route Handler\nDESCRIPTION: Demonstrates how to access various request properties within a Fastify route handler including body, query parameters, headers, and route options.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Request.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.post('/:params', options, function (request, reply) {\n  console.log(request.body)\n  console.log(request.query)\n  console.log(request.params)\n  console.log(request.headers)\n  console.log(request.raw)\n  console.log(request.server)\n  console.log(request.id)\n  console.log(request.ip)\n  console.log(request.ips)\n  console.log(request.host)\n  console.log(request.hostname)\n  console.log(request.port)\n  console.log(request.protocol)\n  console.log(request.url)\n  console.log(request.routeOptions.method)\n  console.log(request.routeOptions.bodyLimit)\n  console.log(request.routeOptions.method)\n  console.log(request.routeOptions.url)\n  console.log(request.routeOptions.attachValidation)\n  console.log(request.routeOptions.logLevel)\n  console.log(request.routeOptions.version)\n  console.log(request.routeOptions.exposeHeadRoute)\n  console.log(request.routeOptions.prefixTrailingSlash)\n  console.log(request.routeOptions.logLevel)\n  request.log.info('some info')\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Fastify Server for Docker Containers\nDESCRIPTION: Shows how to start a Fastify server listening on all interfaces (0.0.0.0), which is recommended for Docker container deployments.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.listen({ port: 3000, host: '0.0.0.0' }, (err, address) => {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing API Versioning with Route Prefixing in Fastify (JavaScript)\nDESCRIPTION: Shows the main server file (`server.js`) demonstrating how to register separate route modules (`./routes/v1/users`, `./routes/v2/users`) under different URL prefixes (`/v1`, `/v2`) using the `prefix` option in `fastify.register()`. This is a common pattern for API versioning without modifying individual route paths within the modules.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n// server.js\nconst fastify = require('fastify')()\n\nfastify.register(require('./routes/v1/users'), { prefix: '/v1' })\nfastify.register(require('./routes/v2/users'), { prefix: '/v2' })\n\nfastify.listen({ port: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Content-Type Specific Body Validation in Fastify (JavaScript)\nDESCRIPTION: This snippet illustrates how to validate request bodies in Fastify using different JSON schemas based on the Content-Type header. It specifies separate schema validations for 'application/json' (object) and 'text/plain' (string), while other content types bypass validation. The flexibility allows creating endpoints that can handle varied payload formats while ensuring each is validated appropriately.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify.post('/the/url', {\n  schema: {\n    body: {\n      content: {\n        'application/json': {\n          schema: { type: 'object' }\n        },\n        'text/plain': {\n          schema: { type: 'string' }\n        }\n        // Other content types will not be validated\n      }\n    }\n  }\n}, handler)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Error Handler in Fastify\nDESCRIPTION: Shows how to configure a custom error handler in Fastify that will be called whenever an error occurs. The example demonstrates logging the error and sending a custom 409 response.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.setErrorHandler(function (error, request, reply) {\n  // Log error\n  this.log.error(error)\n  // Send error response\n  reply.status(409).send({ ok: false })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding and Referencing Shared JSON Schemas in Fastify (JavaScript)\nDESCRIPTION: This snippet shows how to add a reusable JSON Schema to a Fastify instance using the addSchema API and reference it in route schema validation. Dependencies include Fastify and JSON Schema Draft 7. The example demonstrates referencing specific schema properties with $ref and setting up route validation for POST requests, expecting an array of objects conforming to the shared definition. Required properties, object structure, and validation scope are highlighted.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify.addSchema({\n  $id: 'http://example.com/',\n  type: 'object',\n  properties: {\n    hello: { type: 'string' }\n  }\n})\n\nfastify.post('/', {\n  handler () {},\n  schema: {\n    body: {\n      type: 'array',\n      items: { $ref: 'http://example.com#/properties/hello' }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting Fastify to PostgreSQL Database\nDESCRIPTION: Shows how to use the @fastify/postgres plugin to connect a Fastify application to a PostgreSQL database and execute parametrized queries. The example includes a route that retrieves user data by ID.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Database.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')()\n\nfastify.register(require('@fastify/postgres'), {\n  connectionString: 'postgres://postgres@localhost/postgres'\n})\n\nfastify.get('/user/:id', function (req, reply) {\n  fastify.pg.query(\n    'SELECT id, username, hash, salt FROM users WHERE id=$1', [req.params.id],\n    function onResult (err, result) {\n      reply.send(err || result)\n    }\n  )\n})\n\nfastify.listen({ port: 3000 }, err => {\n  if (err) throw err\n  console.log(`server listening on ${fastify.server.address().port}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Multiple Parameters in a Single Segment in Fastify (JavaScript)\nDESCRIPTION: Illustrates defining a GET route with multiple parameters (`:lat`, `:lng`) within the same URL path segment, separated by a specific character (a hyphen `-` in this case). Parameters are accessed individually from the `request.params` object.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/example/near/:lat-:lng/radius/:r', function (request, reply) {\n  // curl ${app-url}/example/near/15°N-30°E/radius/20\n  // lat === \"15°N\"\n  // lng === \"30°E\"\n  // r ===\"20\"\n  const { lat, lng, r } = request.params;\n  // your code here\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting Fastify to MongoDB\nDESCRIPTION: Demonstrates how to use the @fastify/mongodb plugin to connect a Fastify application to a MongoDB database. The example includes a route that retrieves a user document by ID and shows how to work with MongoDB ObjectId.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Database.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')()\n\nfastify.register(require('@fastify/mongodb'), {\n  // force to close the mongodb connection when app stopped\n  // the default value is false\n  forceClose: true,\n\n  url: 'mongodb://mongo/mydb'\n})\n\nfastify.get('/user/:id', async function (req, reply) {\n  // Or this.mongo.client.db('mydb').collection('users')\n  const users = this.mongo.db.collection('users')\n\n  // if the id is an ObjectId format, you need to create a new ObjectId\n  const id = this.mongo.ObjectId(req.params.id)\n  try {\n    const user = await users.findOne({ id })\n    return user\n  } catch (err) {\n    return err\n  }\n})\n\nfastify.listen({ port: 3000 }, err => {\n  if (err) throw err\n})\n```\n\n----------------------------------------\n\nTITLE: Decorating Reply and Using Declaration Merging in Fastify TypeScript\nDESCRIPTION: This example demonstrates how to decorate the Fastify reply object with a custom property and use declaration merging to add the property to the reply interface. It includes server setup, route definition, and the necessary type declaration.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from 'fastify'\n\nconst server = fastify()\n\nserver.decorateReply('someProp', 'world')\n\nserver.get('/', async (request, reply) => {\n  const { someProp } = reply // need to use declaration merging to add this prop to the reply interface\n  return someProp\n})\n\n// this declaration must be in scope of the typescript interpreter to work\ndeclare module 'fastify' {\n  interface FastifyReply { // you must reference the interface and not the type\n    someProp: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Piping with Content Type Parsers in Fastify\nDESCRIPTION: Demonstrates how to implement stream piping by creating a pass-through content type parser. This allows direct access to the raw request stream for handling file uploads or other streaming operations.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/ContentTypeParser.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.addContentTypeParser('*', function (request, payload, done) {\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Constraints for Fastify Routes\nDESCRIPTION: Shows how to use version constraints to create multiple handlers for the same HTTP route path, matched according to the request's Accept-Version header. This follows semver specifications for route matching.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.route({\n  method: 'GET',\n  url: '/',\n  constraints: { version: '1.2.0' },\n  handler: function (request, reply) {\n    reply.send({ hello: 'world' })\n  }\n})\n\nfastify.inject({\n  method: 'GET',\n  url: '/',\n  headers: {\n    'Accept-Version': '1.x' // it could also be '1.2.0' or '1.2.x'\n  }\n}, (err, res) => {\n  // { hello: 'world' }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Catch-All Content Type Parser in Fastify\nDESCRIPTION: Shows how to create a catch-all parser using the '*' content type that will handle all requests without a matching content type parser. This is useful for custom handling of unknown content types or for stream piping operations.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/ContentTypeParser.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.addContentTypeParser('*', function (request, payload, done) {\n  let data = ''\n  payload.on('data', chunk => { data += chunk })\n  payload.on('end', () => {\n    done(null, data)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoDB Route Handlers\nDESCRIPTION: Defines route handlers for CRUD operations with MongoDB, including schema validation for POST requests.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * A plugin that provide encapsulated routes\n * @param {FastifyInstance} fastify encapsulated fastify instance\n * @param {Object} options plugin options, refer to https://fastify.dev/docs/latest/Reference/Plugins/#plugin-options\n */\nasync function routes (fastify, options) {\n  const collection = fastify.mongo.db.collection('test_collection')\n\n  fastify.get('/', async (request, reply) => {\n    return { hello: 'world' }\n  })\n\n  fastify.get('/animals', async (request, reply) => {\n    const result = await collection.find().toArray()\n    if (result.length === 0) {\n      throw new Error('No documents found')\n    }\n    return result\n  })\n\n  fastify.get('/animals/:animal', async (request, reply) => {\n    const result = await collection.findOne({ animal: request.params.animal })\n    if (!result) {\n      throw new Error('Invalid value')\n    }\n    return result\n  })\n\n  const animalBodyJsonSchema = {\n    type: 'object',\n    required: ['animal'],\n    properties: {\n      animal: { type: 'string' },\n    },\n  }\n\n  const schema = {\n    body: animalBodyJsonSchema,\n  }\n\n  fastify.post('/animals', { schema }, async (request, reply) => {\n    const result = await collection.insertOne({ animal: request.body.animal })\n    return result\n  })\n}\n\nmodule.exports = routes\n```\n\n----------------------------------------\n\nTITLE: Basic Fastify Server Setup\nDESCRIPTION: Example showing how to create a basic Fastify server with a single route using both ESM and CommonJS syntax.\nSOURCE: https://github.com/fastify/fastify/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM\nimport Fastify from 'fastify'\n\nconst fastify = Fastify({\n  logger: true\n})\n// CommonJs\nconst fastify = require('fastify')({\n  logger: true\n})\n\n// Declare a route\nfastify.get('/', (request, reply) => {\n  reply.send({ hello: 'world' })\n})\n\n// Run the server!\nfastify.listen({ port: 3000 }, (err, address) => {\n  if (err) throw err\n  // Server is now listening on ${address}\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Creation\nDESCRIPTION: Shows how to create a basic Fastify plugin with route handling and nested plugin registration.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Plugins.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (fastify, opts, done) {\n  fastify.decorate('utility', function () {})\n\n  fastify.get('/', handler)\n\n  done()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Fastify with trustProxy Enabled (JavaScript)\nDESCRIPTION: Demonstrates how to initialize a Fastify instance with the `trustProxy` option set to `true`. This configuration tells Fastify to trust `X-Forwarded-*` headers, assuming it's running behind a proxy.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst fastify = Fastify({ trustProxy: true })\n```\n\n----------------------------------------\n\nTITLE: Using Ajv Plugins with Fastify Validation (JavaScript)\nDESCRIPTION: This example demonstrates integration of Ajv plugins (such as ajv-merge-patch) in Fastify's built-in validator, including two POST routes leveraging $patch and $merge schema augmentations. It shows defining a Fastify instance with ajv plugins via configuration, and illustrates how schemas can be dynamically constructed using Ajv's patching and merging syntax (enabled by plugins). Schemas and plugins must be compatible with Fastify's bundled Ajv version.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fastify = require('fastify')({\n  ajv: {\n    plugins: [\n      require('ajv-merge-patch')\n    ]\n  }\n})\n\nfastify.post('/', {\n  handler (req, reply) { reply.send({ ok: 1 }) },\n  schema: {\n    body: {\n      $patch: {\n        source: {\n          type: 'object',\n          properties: {\n            q: {\n              type: 'string'\n            }\n          }\n        },\n        with: [\n          {\n            op: 'add',\n            path: '/properties/q',\n            value: { type: 'number' }\n          }\n        ]\n      }\n    }\n  }\n})\n\nfastify.post('/foo', {\n  handler (req, reply) { reply.send({ ok: 1 }) },\n  schema: {\n    body: {\n      $merge: {\n        source: {\n          type: 'object',\n          properties: {\n            q: {\n              type: 'string'\n            }\n          }\n        },\n        with: {\n          required: ['q']\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering an onResponse Hook in Fastify (Async/Await)\nDESCRIPTION: Shows how to register an 'onResponse' hook using `fastify.addHook` with an `async` function. This hook runs after the response is sent, suitable for asynchronous post-response tasks like logging response times or resource cleanup.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onResponse', async (request, reply) => {\n  // Some code\n  await asyncMethod()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a delayed request acceptance pattern with Fastify plugins\nDESCRIPTION: This improved implementation uses Fastify plugins to better organize the code and centralize the request-delay logic. The main server registers a setup plugin and conditionally blocks routes under the /v1 prefix until readiness conditions are met.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Delay-Accepting-Requests.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Fastify = require('fastify')\n\nconst customerRoutes = require('./customer-routes')\nconst { setup, delay } = require('./delay-incoming-requests')\n\nconst server = new Fastify({ logger: true })\n\nserver.register(setup)\n\n// Non-blocked URL\nserver.get('/ping', function (request, reply) {\n  reply.send({ error: false, ready: request.server.magicKey !== null })\n})\n\n// Webhook to handle the provider's response - also non-blocked\nserver.post('/webhook', function (request, reply) {\n  // It's good practice to validate webhook requests really come from\n  // whoever you expect. This is skipped in this sample for the sake\n  // of simplicity\n\n  const { magicKey } = request.body\n  request.server.magicKey = magicKey\n  request.log.info('Ready for customer requests!')\n\n  reply.send({ error: false })\n})\n\n// Blocked URLs\n// Mind we're building a new plugin by calling the `delay` factory with our\n// customerRoutes plugin\nserver.register(delay(customerRoutes), { prefix: '/v1' })\n\nserver.listen({ port: '1234' })\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Fastify Plugin with Declaration Merging (TypeScript)\nDESCRIPTION: Implements a Fastify plugin in TypeScript using both callback and promise-based styles. Uses declaration merging to augment Fastify's request and reply interfaces with custom properties, and exports the plugin using fastify-plugin for full type compatibility. Suitable for both local and npm-distributed plugins; ensures type support via declarations.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FastifyPluginCallback, FastifyPluginAsync } from 'fastify'\nimport fp from 'fastify-plugin'\n\n// using declaration merging, add your plugin props to the appropriate fastify interfaces\n// if prop type is defined here, the value will be typechecked when you call decorate{,Request,Reply}\ndeclare module 'fastify' {\n  interface FastifyRequest {\n    myPluginProp: string\n  }\n  interface FastifyReply {\n    myPluginProp: number\n  }\n}\n\n// define options\nexport interface MyPluginOptions {\n  myPluginOption: string\n}\n\n// define plugin using callbacks\nconst myPluginCallback: FastifyPluginCallback<MyPluginOptions> = (fastify, options, done) => {\n  fastify.decorateRequest('myPluginProp', 'super_secret_value')\n  fastify.decorateReply('myPluginProp', options.myPluginOption)\n\n  done()\n}\n\n// define plugin using promises\nconst myPluginAsync: FastifyPluginAsync<MyPluginOptions> = async (fastify, options) => {\n  fastify.decorateRequest('myPluginProp', 'super_secret_value')\n  fastify.decorateReply('myPluginProp', options.myPluginOption)\n}\n\n// export plugin using fastify-plugin\nexport default fp(myPluginCallback, '3.x')\n// or\n// export default fp(myPluginAsync, '3.x')\n```\n\n----------------------------------------\n\nTITLE: JSON Line Streaming Parser Example in Fastify\nDESCRIPTION: A complete example showing how to implement a streaming parser for JSON Line objects. Uses split2 and pump to process the incoming stream and handle each JSON object individually as it arrives.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/ContentTypeParser.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst split2 = require('split2')\nconst pump = require('pump')\n\nfastify.addContentTypeParser('*', (request, payload, done) => {\n  done(null, pump(payload, split2(JSON.parse)))\n})\n\nfastify.route({\n  method: 'POST',\n  url: '/api/log/jsons',\n  handler: (req, res) => {\n    req.body.on('data', d => console.log(d)) // log every incoming object\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Redis with Fastify\nDESCRIPTION: Demonstrates how to use the @fastify/redis plugin to connect a Fastify application to a Redis database. The example includes routes for getting and setting key-value pairs, and shows multiple configuration options including connection closing behavior.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Database.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst fastify = require('fastify')()\n\nfastify.register(require('@fastify/redis'), { host: '127.0.0.1' })\n// or\nfastify.register(require('@fastify/redis'), { url: 'redis://127.0.0.1', /* other redis options */ })\n\nfastify.get('/foo', function (req, reply) {\n  const { redis } = fastify\n  redis.get(req.query.key, (err, val) => {\n    reply.send(err || val)\n  })\n})\n\nfastify.post('/foo', function (req, reply) {\n  const { redis } = fastify\n  redis.set(req.body.key, req.body.value, (err) => {\n    reply.send(err || { status: 'ok' })\n  })\n})\n\nfastify.listen({ port: 3000 }, err => {\n  if (err) throw err\n  console.log(`server listening on ${fastify.server.address().port}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom MySQL Plugin for Fastify\nDESCRIPTION: Demonstrates how to build a basic MySQL plugin for Fastify from scratch using mysql2/promise. The plugin handles connection creation, decoration of the Fastify instance, and proper cleanup on server close.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Database.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst fp = require('fastify-plugin')\nconst mysql = require('mysql2/promise')\n\nfunction fastifyMysql(fastify, options, done) {\n  const connection = mysql.createConnection(options)\n\n  if (!fastify.mysql) {\n    fastify.decorate('mysql', connection)\n  }\n\n  fastify.addHook('onClose', (fastify, done) => connection.end().then(done).catch(done))\n\n  done()\n}\n\nexport default fp(fastifyMysql, { name: 'fastify-mysql-example' })\n```\n\n----------------------------------------\n\nTITLE: Using TypeBox Type Provider with Fastify\nDESCRIPTION: Example of setting up and using the TypeBox Type Provider with Fastify to create type-safe route handlers. It demonstrates type inference using TypeBox's schema definition utilities.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Type-Providers.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from 'fastify'\nimport { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'\nimport { Type } from '@sinclair/typebox'\n\nconst server = fastify().withTypeProvider<TypeBoxTypeProvider>()\n\nserver.get('/route', {\n  schema: {\n    querystring: Type.Object({\n      foo: Type.Number(),\n      bar: Type.String()\n    })\n  }\n}, (request, reply) => {\n\n  // type Query = { foo: number, bar: string }\n  const { foo, bar } = request.query // type safe!\n})\n```\n\n----------------------------------------\n\nTITLE: Using Fastify onRegister Hook for Encapsulation Management\nDESCRIPTION: Demonstrates the `onRegister` application hook, which fires *before* a new plugin is registered, signaling the creation of a new encapsulation context. This example shows how to use it to manage encapsulated properties (like `instance.data`) by creating copies for the new context. The hook receives the new plugin instance and its options. It's not triggered for plugins wrapped with `fastify-plugin`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_34\n\nLANGUAGE: js\nCODE:\n```\nfastify.decorate('data', [])\n\nfastify.register(async (instance, opts) => {\n  instance.data.push('hello')\n  console.log(instance.data) // ['hello']\n\n  instance.register(async (instance, opts) => {\n    instance.data.push('world')\n    console.log(instance.data) // ['hello', 'world']\n  }, { prefix: '/hola' })\n}, { prefix: '/ciao' })\n\nfastify.register(async (instance, opts) => {\n  console.log(instance.data) // []\n}, { prefix: '/hello' })\n\nfastify.addHook('onRegister', (instance, opts) => {\n  // Create a new array from the old one\n  // but without keeping the reference\n  // allowing the user to have encapsulated\n  // instances of the `data` property\n  instance.data = instance.data.slice()\n\n  // the options of the new registered instance\n  console.log(opts.prefix)\n})\n```\n\n----------------------------------------\n\nTITLE: Registering a Fastify GET Route Using Shorthand Method in JavaScript\nDESCRIPTION: This example uses the Fastify shorthand for registering a GET route along with an options object containing a response schema and an arrow function handler. The snippet highlights quick route declaration while supporting schema-based validation. A Fastify instance and compatible schema validation library (like Ajv) are required; the handler returns a static response.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst opts = {\n  schema: {\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          hello: { type: 'string' }\n        }\n      }\n    }\n  }\n}\nfastify.get('/', opts, (request, reply) => {\n  reply.send({ hello: 'world' })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Async-Await with Fastify Routes\nDESCRIPTION: This snippet demonstrates how to handle asynchronous route requests in Fastify using both promise-based and async-await paradigms. It uses the Node.js util.promisify function to create a delay function, which simulates asynchronous operations. The first route uses then to return a response after the delay, while the second route uses await for the same purpose.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { promisify } = require('node:util')\\nconst delay = promisify(setTimeout)\\n\\nfastify.get('/promises', options, function (request, reply) {\\n return delay(200).then(() => { return { hello: 'world' }})\\n})\\n\\nfastify.get('/async-await', options, async function (request, reply) {\\n  await delay(200)\\n  return { hello: 'world' }\\n})\n```\n\n----------------------------------------\n\nTITLE: Async-Await Fastify Server Example\nDESCRIPTION: Example demonstrating how to use async-await syntax with Fastify routes for better handling of asynchronous operations.\nSOURCE: https://github.com/fastify/fastify/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM\nimport Fastify from 'fastify'\n\nconst fastify = Fastify({\n  logger: true\n})\n// CommonJs\nconst fastify = require('fastify')({\n  logger: true\n})\n\nfastify.get('/', async (request, reply) => {\n  reply.type('application/json').code(200)\n  return { hello: 'world' }\n})\n\nfastify.listen({ port: 3000 }, (err, address) => {\n  if (err) throw err\n  // Server is now listening on ${address}\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Optional Parameters in Fastify (JavaScript)\nDESCRIPTION: Shows how to make the last parameter (`:id`) in a route optional by adding a question mark (`?`) at the end of its name. The route will match paths both with (`/example/posts/1`) and without (`/example/posts`) the optional parameter. The parameter will be `undefined` in `request.params` if not provided in the URL.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/example/posts/:id?', function (request, reply) {\n  const { id } = request.params;\n  // your code here\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Fastify Route Handler in Options Object in JavaScript\nDESCRIPTION: This snippet shows how to define a Fastify route by passing an options object with both schema validation and a handler function, omitting the separate handler parameter. The schema restricts the 200 response and the handler sends a static response. It is suitable when handler logic should be encapsulated within the route options.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst opts = {\n  schema: {\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          hello: { type: 'string' }\n        }\n      }\n    }\n  },\n  handler: function (request, reply) {\n    reply.send({ hello: 'world' })\n  }\n}\nfastify.get('/', opts)\n```\n\n----------------------------------------\n\nTITLE: Declaring Fastify Routes with Options Object in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the full Fastify route declaration method by passing an options object to define a GET route. It specifies schema validation for the querystring and the response using JSON Schema, and attaches a handler function for processing requests. Dependencies include a Fastify instance, and the schema keys correspond to expected query parameters and response structure.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify.route({\n  method: 'GET',\n  url: '/',\n  schema: {\n    querystring: {\n      type: 'object',\n      properties: {\n        name: { type: 'string' },\n        excitement: { type: 'integer' }\n      }\n    },\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          hello: { type: 'string' }\n        }\n      }\n    }\n  },\n  handler: function (request, reply) {\n    reply.send({ hello: 'world' })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Fastify Server with Promise API\nDESCRIPTION: Demonstrates how to start a Fastify server using the Promise-based API with error handling, specifying port 3000.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.listen({ port: 3000 })\n  .then((address) => console.log(`server listening on ${address}`))\n  .catch(err => {\n    console.log('Error starting server:', err)\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Route-Level Hooks in Fastify\nDESCRIPTION: Demonstrates how to add custom lifecycle hooks at the route level in Fastify, including onRequest, onResponse, preParsing, preValidation, preHandler, preSerialization, onSend, onTimeout, and onError.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify.route({\n  method: 'GET',\n  url: '/',\n  schema: { ... },\n  onRequest: function (request, reply, done) {\n    // This hook will always be executed after the shared `onRequest` hooks\n    done()\n  },\n  onResponse: function (request, reply, done) {\n    // this hook will always be executed after the shared `onResponse` hooks\n    done()\n  },\n  preParsing: function (request, reply, done) {\n    // This hook will always be executed after the shared `preParsing` hooks\n    done()\n  },\n  preValidation: function (request, reply, done) {\n    // This hook will always be executed after the shared `preValidation` hooks\n    done()\n  },\n  preHandler: function (request, reply, done) {\n    // This hook will always be executed after the shared `preHandler` hooks\n    done()\n  },\n  preSerialization: (request, reply, payload, done) => {\n    // This hook will always be executed after the shared `preSerialization` hooks\n    done(null, payload)\n  },\n  onSend: (request, reply, payload, done) => {\n    // This hook will always be executed after the shared `onSend` hooks\n    done(null, payload)\n  },\n  onTimeout: (request, reply, done) => {\n    // This hook will always be executed after the shared `onTimeout` hooks\n    done()\n  },\n  onError: (request, reply, error, done) => {\n    // This hook will always be executed after the shared `onError` hooks\n    done()\n  },\n  handler: function (request, reply) {\n    reply.send({ hello: 'world' })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering a preParsing Hook in Fastify (Async/Await)\nDESCRIPTION: Illustrates registering a 'preParsing' hook using `fastify.addHook` with an `async` function. This hook enables transformation of the request payload stream before parsing. It receives request, reply, and the payload stream. Returning a new stream replaces the original payload. Ensure the returned stream includes a `receivedEncodedLength` property. `request.body` is unavailable.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('preParsing', async (request, reply, payload) => {\n  // Some code\n  await asyncMethod()\n  return newPayload\n})\n```\n\n----------------------------------------\n\nTITLE: Using Fastify Route Generics for Strictly Typed API Endpoints - TypeScript\nDESCRIPTION: Demonstrates a Fastify GET route using TypeScript generics that specify typings for querystring, headers, and return shapes for replies. The handler utilizes request.query and request.headers with strict types, and reply payloads respect the response typings for different HTTP status codes. Dependencies: 'fastify', corresponding interfaces (IQuerystring, IHeaders, IReply). Inputs: HTTP GET with matching query and headers; Outputs: Typed response objects based on status code. Constraint: Type mismatches in payloads result in TypeScript errors.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nserver.get<{\n  Querystring: IQuerystring,\n  Headers: IHeaders,\n  Reply: IReply\n}>('/auth', async (request, reply) => {\n  const { username, password } = request.query\n  const customerHeader = request.headers['h-Custom']\n  // do something with request data\n\n  // chaining .statusCode/.code calls with .send allows type narrowing. For example:\n  // this works\n  reply.code(200).send({ success: true });\n  // but this gives a type error\n  reply.code(200).send('uh-oh');\n  // it even works for wildcards\n  reply.code(404).send({ error: 'Not found' });\n  return `logged in!`\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Fastify Server with External Route\nDESCRIPTION: Sets up a basic Fastify server that registers an external route module. Includes error handling and server startup logic.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM\nimport Fastify from 'fastify'\nimport firstRoute from './our-first-route.js'\n/**\n * @type {import('fastify').FastifyInstance} Instance of Fastify\n */\nconst fastify = Fastify({\n  logger: true\n})\n\nfastify.register(firstRoute)\n\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  // Server is now listening on ${address}\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTTP Methods in Fastify\nDESCRIPTION: Demonstrates how to add non-standard HTTP methods to a Fastify server instance. The example shows adding 'MKCOL' with request body support and 'COPY' without body support.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a new HTTP method called 'MKCOL' that supports a request body\nfastify.addHttpMethod('MKCOL', { hasBody: true,  })\n\n// Add a new HTTP method called 'COPY' that does not support a request body\nfastify.addHttpMethod('COPY')\n```\n\n----------------------------------------\n\nTITLE: Implementing Universal Content Type Processing in Fastify\nDESCRIPTION: Shows how to create a parser that processes all requests regardless of content type by first removing existing parsers. This allows for consistent handling across all content types without worrying about built-in parsers intervening.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/ContentTypeParser.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Without this call, the request body with the content type application/json would be processed by the built-in JSON parser\nfastify.removeAllContentTypeParsers()\n\nfastify.addContentTypeParser('*', function (request, payload, done) {\n  const data = ''\n  payload.on('data', chunk => { data += chunk })\n  payload.on('end', () => {\n    done(null, data)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using 'ready' Hook with Promises in Fastify\nDESCRIPTION: Shows how to use the 'ready' hook with Promises to execute code after all plugins have been loaded, with error handling.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.ready().then(() => {\n  console.log('successfully booted!')\n}, (err) => {\n  console.log('an error happened', err)\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting Fastify to MySQL Database\nDESCRIPTION: Demonstrates how to use the @fastify/mysql plugin to connect a Fastify application to a MySQL database and execute queries. The example includes a route that retrieves user data based on an ID parameter.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Database.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')()\n\nfastify.register(require('@fastify/mysql'), {\n  connectionString: 'mysql://root@localhost/mysql'\n})\n\nfastify.get('/user/:id', function(req, reply) {\n  fastify.mysql.query(\n    'SELECT id, username, hash, salt FROM users WHERE id=?', [req.params.id],\n    function onResult (err, result) {\n      reply.send(err || result)\n    }\n  )\n})\n\nfastify.listen({ port: 3000 }, err => {\n  if (err) throw err\n  console.log(`server listening on ${fastify.server.address().port}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Parametric and Wildcard Routes in Fastify (JavaScript)\nDESCRIPTION: Demonstrates how to define GET routes with URL parameters (e.g., `:userId`, `:secretToken`) using colons and wildcard paths (`*`) using an asterisk in Fastify. It shows how to access the captured parameter values from the `request.params` object within the route handler function.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// parametric\nfastify.get('/example/:userId', function (request, reply) {\n  // curl ${app-url}/example/12345\n  // userId === '12345'\n  const { userId } = request.params;\n  // your code here\n})\nfastify.get('/example/:userId/:secretToken', function (request, reply) {\n  // curl ${app-url}/example/12345/abc.zHi\n  // userId === '12345'\n  // secretToken === 'abc.zHi'\n  const { userId, secretToken } = request.params;\n  // your code here\n})\n\n// wildcard\nfastify.get('/example/*', function (request, reply) {})\n```\n\n----------------------------------------\n\nTITLE: Registering a preHandler Hook in Fastify (Async/Await)\nDESCRIPTION: Demonstrates registering a 'preHandler' hook using `fastify.addHook` with an `async` function. This hook runs immediately before the route's main handler, suitable for asynchronous tasks like database lookups or permission checks.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('preHandler', async (request, reply) => {\n  // Some code\n  await asyncMethod()\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Fastify Errors with setErrorHandler in Node.js\nDESCRIPTION: Illustrates setting up a Fastify server, defining a route that intentionally triggers an `FST_ERR_BAD_STATUS_CODE` by using an invalid string in `reply.code()`. It then shows how to use `fastify.setErrorHandler` to define a custom error handler that specifically catches this error type using `instanceof Fastify.errorCodes.FST_ERR_BAD_STATUS_CODE`, logs the error, sends a custom 500 response, and passes other errors to the default handler. The server is started on port 3000.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Errors.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst Fastify = require('fastify')\n\n// Instantiate the framework\nconst fastify = Fastify({\n  logger: true\n})\n\n// Declare a route\nfastify.get('/', function (request, reply) {\n  reply.code('bad status code').send({ hello: 'world' })\n})\n\nfastify.setErrorHandler(function (error, request, reply) {\n  if (error instanceof Fastify.errorCodes.FST_ERR_BAD_STATUS_CODE) {\n    // Log error\n    this.log.error(error)\n    // Send error response\n    reply.status(500).send({ ok: false })\n  } else {\n    // Fastify will use parent error handler to handle this\n    reply.send(error)\n  }\n})\n\n// Run the server!\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  // Server is now listening on ${address}\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Not Found Handler in Fastify with Hooks\nDESCRIPTION: Demonstrates how to set a custom 404 handler in Fastify with preValidation and preHandler hooks. Shows both global configuration and prefix-specific handlers using registration with options.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.setNotFoundHandler({\n  preValidation: (req, reply, done) => {\n    // your code\n    done()\n  },\n  preHandler: (req, reply, done) => {\n    // your code\n    done()\n  }\n}, function (request, reply) {\n    // Default not found handler with preValidation and preHandler hooks\n})\n\nfastify.register(function (instance, options, done) {\n  instance.setNotFoundHandler(function (request, reply) {\n    // Handle not found request without preValidation and preHandler hooks\n    // to URLs that begin with '/v1'\n  })\n  done()\n}, { prefix: '/v1' })\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Route in a Fastify Plugin\nDESCRIPTION: Example of a basic Fastify plugin that registers a GET route and responds with a JSON object. The plugin properly calls done() when setup is complete.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (fastify, options, done) {\n  fastify.get('/plugin', (request, reply) => {\n    reply.send({ hello: 'world' })\n  })\n\n  done()\n}\n```\n\n----------------------------------------\n\nTITLE: Using RegExp Host Constraints for Wildcard Subdomains\nDESCRIPTION: Shows how to use RegExp-based host constraints to match wildcard subdomains or other host patterns. This allows for flexible host-based routing in Fastify applications.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.route({\n  method: 'GET',\n  url: '/',\n  constraints: { host: /.*\\.fastify\\.dev/ }, // will match any subdomain of fastify.dev\n  handler: function (request, reply) {\n    reply.send('hello world from ' + request.headers.host)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Example Versioned Route Module (v1) for Prefixing in Fastify (JavaScript)\nDESCRIPTION: Provides an example route module (`routes/v1/users.js`) defining a `/user` GET endpoint (with `handler_v1`). This module is designed to be registered within a Fastify application using `fastify.register()` and a `prefix` option (e.g., `/v1`) to create the final route `/v1/user`. The `done()` callback signals the completion of the plugin registration.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n// routes/v1/users.js\nmodule.exports = function (fastify, opts, done) {\n  fastify.get('/user', handler_v1)\n  done()\n}\n```\n\n----------------------------------------\n\nTITLE: Response Schema Definition in Fastify\nDESCRIPTION: Example of defining response schemas for different status codes and content types.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  response: {\n    200: {\n      type: 'object',\n      properties: {\n        value: { type: 'string' },\n        otherValue: { type: 'boolean' }\n      }\n    }\n  }\n}\n\nfastify.post('/the/url', { schema }, handler)\n```\n\n----------------------------------------\n\nTITLE: Server Instance Decoration - JavaScript\nDESCRIPTION: Examples of decorating the Fastify server instance with both methods and values.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.decorate('utility', function () {\n  // Something very useful\n})\n\nfastify.decorate('conf', {\n  db: 'some.db',\n  port: 3000\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Fastify AWS Lambda Application\nDESCRIPTION: Basic Fastify application setup that can run both locally and as an AWS Lambda function. Includes conditional logic to either listen on a port locally or export for Lambda use.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify');\n\nfunction init() {\n  const app = fastify();\n  app.get('/', (request, reply) => reply.send({ hello: 'world' }));\n  return app;\n}\n\nif (require.main === module) {\n  // called directly i.e. \"node app\"\n  init().listen({ port: 3000 }, (err) => {\n    if (err) console.error(err);\n    console.log('server listening on 3000');\n  });\n} else {\n  // required as a module => executed on aws lambda\n  module.exports = init;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Reply Usage in Fastify Route Handler\nDESCRIPTION: Demonstrates basic usage of the Reply object in a Fastify route handler, showing how to set status code, headers and send JSON response.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.get('/', options, function (request, reply) {\n  // Your code\n  reply\n    .code(200)\n    .header('Content-Type', 'application/json; charset=utf-8')\n    .send({ hello: 'world' })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard HTTP Server with Fastify in TypeScript\nDESCRIPTION: A minimal example of creating a standard HTTP server using Fastify in TypeScript. The type system defaults to HTTP without needing to specify the Server generic type.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from 'fastify'\n\nconst server = fastify()\n```\n\n----------------------------------------\n\nTITLE: Using Generated Schemas and Interfaces in Fastify (TypeScript)\nDESCRIPTION: Demonstrates importing both JSON schemas and generated TypeScript interfaces, and applying them to Fastify route schemas and handlers. Validates incoming requests using externally defined schemas, ensuring type safety and runtime validation. Assumes required dependencies (fastify, generated type files, JSON schema files) are present. Shows both callback and async route-handler styles.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from 'fastify'\n\n// import json schemas as normal\nimport QuerystringSchema from './schemas/querystring.json'\nimport HeadersSchema from './schemas/headers.json'\n\n// import the generated interfaces\nimport { QuerystringSchema as QuerystringSchemaInterface } from './types/querystring'\nimport { HeadersSchema as HeadersSchemaInterface } from './types/headers'\n\nconst server = fastify()\n\nserver.get<{\n  Querystring: QuerystringSchemaInterface,\n  Headers: HeadersSchemaInterface\n}>('/auth', {\n  schema: {\n    querystring: QuerystringSchema,\n    headers: HeadersSchema\n  },\n  preValidation: (request, reply, done) => {\n    const { username, password } = request.query\n    done(username !== 'admin' ? new Error('Must be admin') : undefined)\n  }\n  //  or if using async\n  //  preValidation: async (request, reply) => {\n  //    const { username, password } = request.query\n  //    if (username !== \"admin\") throw new Error(\"Must be admin\");\n  //  }\n}, async (request, reply) => {\n  const customerHeader = request.headers['h-Custom']\n  // do something with request data\n  return `logged in!`\n})\n\nserver.route<{\n  Querystring: QuerystringSchemaInterface,\n  Headers: HeadersSchemaInterface\n}>({\n  method: 'GET',\n  url: '/auth2',\n  schema: {\n    querystring: QuerystringSchema,\n    headers: HeadersSchema\n  },\n  preHandler: (request, reply, done) => {\n    const { username, password } = request.query\n    const customerHeader = request.headers['h-Custom']\n    done()\n  },\n  handler: (request, reply) => {\n    const { username, password } = request.query\n    const customerHeader = request.headers['h-Custom']\n    reply.status(200).send({username});\n  }\n})\n\nserver.listen({ port: 8080 }, (err, address) => {\n  if (err) {\n    console.error(err)\n    process.exit(0)\n  }\n  console.log(`Server listening at ${address}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Basic JSON Schema Validation with fluent-json-schema in Fastify\nDESCRIPTION: This example demonstrates how to create and configure various JSON schemas for request validation in Fastify using fluent-json-schema. It covers body, querystring, params, and headers validation with different data types, requirements, and constraints.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Fluent-Schema.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst S = require('fluent-json-schema')\n\n// You can have an object like this, or query a DB to get the values\nconst MY_KEYS = {\n  KEY1: 'ONE',\n  KEY2: 'TWO'\n}\n\nconst bodyJsonSchema = S.object()\n  .prop('someKey', S.string())\n  .prop('someOtherKey', S.number())\n  .prop('requiredKey', S.array().maxItems(3).items(S.integer()).required())\n  .prop('nullableKey', S.mixed([S.TYPES.NUMBER, S.TYPES.NULL]))\n  .prop('multipleTypesKey', S.mixed([S.TYPES.BOOLEAN, S.TYPES.NUMBER]))\n  .prop('multipleRestrictedTypesKey', S.oneOf([S.string().maxLength(5), S.number().minimum(10)]))\n  .prop('enumKey', S.enum(Object.values(MY_KEYS)))\n  .prop('notTypeKey', S.not(S.array()))\n\nconst queryStringJsonSchema = S.object()\n  .prop('name', S.string())\n  .prop('excitement', S.integer())\n\nconst paramsJsonSchema = S.object()\n  .prop('par1', S.string())\n  .prop('par2', S.integer())\n\nconst headersJsonSchema = S.object()\n  .prop('x-foo', S.string().required())\n\n// Note that there is no need to call `.valueOf()`!\nconst schema = {\n  body: bodyJsonSchema,\n  querystring: queryStringJsonSchema, // (or) query: queryStringJsonSchema\n  params: paramsJsonSchema,\n  headers: headersJsonSchema\n}\n\nfastify.post('/the/url', { schema }, handler)\n```\n\n----------------------------------------\n\nTITLE: Customizing Ajv Compilers for Per-Parameter Validation in Fastify (JavaScript)\nDESCRIPTION: This snippet configures custom Ajv schema compilers for body, params, querystring, and headers, with tailored options per request segment (e.g., disabling type coercion for body only). The setValidatorCompiler method provides Fastify instances with selectable, context-specific validation. Dependencies: Fastify and Ajv v8. It showcases advanced validation strategies, letting developers fine-tune schema enforcement behaviors for each HTTP part separately.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst schemaCompilers = {\n  body: new Ajv({\n    removeAdditional: false,\n    coerceTypes: false,\n    allErrors: true\n  }),\n  params: new Ajv({\n    removeAdditional: false,\n    coerceTypes: true,\n    allErrors: true\n  }),\n  querystring: new Ajv({\n    removeAdditional: false,\n    coerceTypes: true,\n    allErrors: true\n  }),\n  headers: new Ajv({\n    removeAdditional: false,\n    coerceTypes: true,\n    allErrors: true\n  })\n}\n\nserver.setValidatorCompiler(req => {\n    if (!req.httpPart) {\n      throw new Error('Missing httpPart')\n    }\n    const compiler = schemaCompilers[req.httpPart]\n    if (!compiler) {\n      throw new Error(`Missing compiler for ${req.httpPart}`)\n    }\n    return compiler.compile(req.schema)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a URL Rewriting Function in Fastify (JavaScript)\nDESCRIPTION: Shows how to implement a synchronous `rewriteUrl` callback function for Fastify. This function takes the raw Node.js HTTP request object (`req`) as input and must return the modified URL string. It allows altering the request URL before routing occurs, useful behind proxies. The `this` context within the function refers to the root Fastify instance.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n// @param {object} req The raw Node.js HTTP request, not the `FastifyRequest` object.\n// @this Fastify The root Fastify instance (not an encapsulated instance).\n// @returns {string} The path that the request should be mapped to.\nfunction rewriteUrl (req) {\n  if (req.url === '/hi') {\n    this.log.debug({ originalUrl: req.url, url: '/hello' }, 'rewrite url');\n    return '/hello'\n  } else {\n    return req.url;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Functions Fastify Setup\nDESCRIPTION: Configuration for running Fastify on Google Cloud Functions with custom content type parser and endpoint definitions.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require(\"fastify\")({\n  logger: true // you can also define the level passing an object configuration to logger: {level: 'debug'}\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.addContentTypeParser('application/json', {}, (req, body, done) => {\n  done(null, body.body);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.get('/', async (request, reply) => {\n  reply.send({message: 'Hello World!'})\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.route({\n  method: 'POST',\n  url: '/hello',\n  schema: {\n    body: {\n      type: 'object',\n      properties: {\n        name: { type: 'string'}\n      },\n      required: ['name']\n    },\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          message: {type: 'string'}\n        }\n      }\n    },\n  },\n  handler: async (request, reply) => {\n    const { name } = request.body;\n    reply.code(200).send({\n      message: `Hello ${name}!`\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoDB Database Connector\nDESCRIPTION: Creates a MongoDB connection plugin using fastify-plugin to expose decorators to parent scope.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM\nimport fastifyPlugin from 'fastify-plugin'\nimport fastifyMongo from '@fastify/mongodb'\n\n/**\n * @param {FastifyInstance} fastify\n * @param {Object} options\n */\nasync function dbConnector (fastify, options) {\n  fastify.register(fastifyMongo, {\n    url: 'mongodb://localhost:27017/test_database'\n  })\n}\n\nexport default fastifyPlugin(dbConnector)\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Content Type Parsers in Fastify\nDESCRIPTION: Demonstrates how to add custom content type parsers for specific MIME types using both callback and async function patterns. It shows parsing for 'application/jsoff', multiple content types, and RegExp matching.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/ContentTypeParser.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.addContentTypeParser('application/jsoff', function (request, payload, done) {\n  jsoffParser(payload, function (err, body) {\n    done(err, body)\n  })\n})\n\n// Handle multiple content types with the same function\nfastify.addContentTypeParser(['text/xml', 'application/xml'], function (request, payload, done) {\n  xmlParser(payload, function (err, body) {\n    done(err, body)\n  })\n})\n\n// Async is also supported in Node versions >= 8.0.0\nfastify.addContentTypeParser('application/jsoff', async function (request, payload) {\n  const res = await jsoffParserAsync(payload)\n\n  return res\n})\n\n// Handle all content types that matches RegExp\nfastify.addContentTypeParser(/^image\\/([\\w-]+);?/, function (request, payload, done) {\n  imageParser(payload, function (err, body) {\n    done(err, body)\n  })\n})\n\n// Can use default JSON/Text parser for different content Types\nfastify.addContentTypeParser('text/json', { parseAs: 'string' }, fastify.getDefaultJsonParser('ignore', 'ignore'))\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Fastify Application\nDESCRIPTION: Sets up a basic Fastify application with a single GET route returning a hello world response. The build function allows for customizable options when creating the Fastify instance.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Testing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst fastify = require('fastify')\n\nfunction build(opts={}) {\n  const app = fastify(opts)\n  app.get('/', async function (request, reply) {\n    return { hello: 'world' }\n  })\n\n  return app\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Root-Level Shared Schemas in Fastify (JavaScript)\nDESCRIPTION: This example demonstrates how to add a shared root-level schema to Fastify and reference it in both the body and headers schema of a route. The $ref syntax points to the root of the schema, enabling reuse across request components. Dependencies are Fastify and JSON Schema Draft 7. Both request body and headers are expected to conform to the structure defined in commonSchema.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify.addSchema({\n  $id: 'commonSchema',\n  type: 'object',\n  properties: {\n    hello: { type: 'string' }\n  }\n})\n\nfastify.post('/', {\n  handler () {},\n  schema: {\n    body: { $ref: 'commonSchema#' },\n    headers: { $ref: 'commonSchema#' }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Fastify Route Encapsulation\nDESCRIPTION: Demonstrates Fastify's encapsulation system with three routes: an authenticated route, a public route, and a nested route. Shows how decorators and plugins are scoped within different contexts.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Encapsulation.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst fastify = require('fastify')()\n\nfastify.decorateRequest('answer', 42)\n\nfastify.register(async function authenticatedContext (childServer) {\n  childServer.register(require('@fastify/bearer-auth'), { keys: ['abc123'] })\n\n  childServer.route({\n    path: '/one',\n    method: 'GET',\n    handler (request, response) {\n      response.send({\n        answer: request.answer,\n        // request.foo will be undefined as it is only defined in publicContext\n        foo: request.foo,\n        // request.bar will be undefined as it is only defined in grandchildContext\n        bar: request.bar\n      })\n    }\n  })\n})\n\nfastify.register(async function publicContext (childServer) {\n  childServer.decorateRequest('foo', 'foo')\n\n  childServer.route({\n    path: '/two',\n    method: 'GET',\n    handler (request, response) {\n      response.send({\n        answer: request.answer,\n        foo: request.foo,\n        // request.bar will be undefined as it is only defined in grandchildContext\n        bar: request.bar\n      })\n    }\n  })\n\n  childServer.register(async function grandchildContext (grandchildServer) {\n    grandchildServer.decorateRequest('bar', 'bar')\n\n    grandchildServer.route({\n      path: '/three',\n      method: 'GET',\n      handler (request, response) {\n        response.send({\n          answer: request.answer,\n          foo: request.foo,\n          bar: request.bar\n        })\n      }\n    })\n  })\n})\n\nfastify.listen({ port: 8000 })\n```\n\n----------------------------------------\n\nTITLE: Using addContentTypeParser with fastify.register\nDESCRIPTION: Demonstrates the correct pattern for registering content type parsers within a plugin scope. Shows how to avoid asynchronous registration issues that could lead to incorrect parser selection.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/ContentTypeParser.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')();\n\n\nfastify.register((fastify, opts) => {\n  fastify.addContentTypeParser('application/json', function (request, payload, done) {\n    jsonParser(payload, function (err, body) {\n      done(err, body)\n    })\n  })\n\n  fastify.get('/hello', async (req, res) => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Fastify Plugin with Options\nDESCRIPTION: Example of how to register a plugin in Fastify. The register method creates a new Fastify context with encapsulation, meaning changes to the Fastify instance are isolated to that context.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.register(\n  require('./my-plugin'),\n  { options }\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating LevelDB with Fastify\nDESCRIPTION: Demonstrates how to use the @fastify/leveldb plugin to connect a Fastify application to a LevelDB database. The example includes routes for getting and putting key-value pairs using async/await syntax.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Database.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')()\n\nfastify.register(\n  require('@fastify/leveldb'),\n  { name: 'db' }\n)\n\nfastify.get('/foo', async function (req, reply) {\n  const val = await this.level.db.get(req.query.key)\n  return val\n})\n\nfastify.post('/foo', async function (req, reply) {\n  await this.level.db.put(req.body.key, req.body.value)\n  return { status: 'ok' }\n})\n\nfastify.listen({ port: 3000 }, err => {\n  if (err) throw err\n  console.log(`server listening on ${fastify.server.address().port}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Content-Type Specific Response Schema\nDESCRIPTION: Implementation of response schemas for different content types and status codes.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  response: {\n    200: {\n      description: 'Response schema that support different content types',\n      content: {\n        'application/json': {\n          schema: {\n            name: { type: 'string' },\n            image: { type: 'string' },\n            address: { type: 'string' }\n          }\n        },\n        'application/vnd.v1+json': {\n          schema: {\n            type: 'array',\n            items: { $ref: 'test' }\n          }\n        }\n      }\n    }\n  }\n}\n\nfastify.post('/url', { schema }, handler)\n```\n\n----------------------------------------\n\nTITLE: Status Code Usage with Reply Object\nDESCRIPTION: Shows how to check and modify HTTP status codes using the statusCode property.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (reply.statusCode >= 299) {\n  reply.statusCode = 500\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fastify's Decorate API for Adding Utilities\nDESCRIPTION: Example of using the decorate API to add a utility function to the Fastify instance, making it accessible via fastify.util throughout the application within its scope.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.decorate('util', (a, b) => a + b)\n```\n\n----------------------------------------\n\nTITLE: Creating Plaintext HTTP2 Server with Fastify\nDESCRIPTION: This snippet shows how to set up a Fastify server with HTTP2 support in plaintext mode, which is suitable for microservices but not supported by browsers. It includes a basic route configuration.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/HTTP2.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst fastify = require('fastify')({\n  http2: true\n})\n\nfastify.get('/', function (request, reply) {\n  reply.code(200).send({ hello: 'world' })\n})\n\nfastify.listen({ port: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Registering an onRequest Hook in Fastify (Async/Await)\nDESCRIPTION: Demonstrates registering an 'onRequest' hook using `fastify.addHook` with an `async` function. This hook executes early in the request lifecycle. Asynchronous operations can be awaited directly, and returning from the function signals completion. `request.body` is unavailable at this stage.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onRequest', async (request, reply) => {\n  // Some code\n  await asyncMethod()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP2 Servers with Fastify in TypeScript\nDESCRIPTION: Examples of creating both secure and insecure HTTP2 servers with Fastify. The http2 property must be set to true, and the https property is used for secure servers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst insecureServer = fastify({ http2: true })\nconst secureServer = fastify({\n  http2: true,\n  https: {} // use the `key.pem` and `cert.pem` files from the https section\n})\n```\n\n----------------------------------------\n\nTITLE: Serialize JSON Responses with Fastify in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to define a route in Fastify with a response schema that optimizes JSON serialization. The schema defines the structure of the expected response, allowing Fastify to serialize only the specified data. This enhances performance and prevents accidental data leak.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @type {import('fastify').RouteShorthandOptions}\n * @const\n */\nconst opts = {\n  schema: {\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          hello: { type: 'string' }\n        }\n      }\n    }\n  }\n}\n\nfastify.get('/', opts, async (request, reply) => {\n  return { hello: 'world' }\n})\n```\n\n----------------------------------------\n\nTITLE: Applying a Global Prefix to Routes within a Plugin in Fastify (JavaScript)\nDESCRIPTION: Demonstrates how to apply a common prefix (e.g., `/v1`) to multiple routes (`/users`, `/login`) defined within a single plugin function. The plugin function is passed to `fastify.register()` along with the `prefix` option. This encapsulates related routes under a shared base path.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst fastify = require('fastify')()\n\nconst route = {\n    method: 'POST',\n    url: '/login',\n    handler: () => {},\n    schema: {},\n}\n\nfastify.register(function (app, _, done) {\n  app.get('/users', () => {})\n  app.route(route)\n\n  done()\n}, { prefix: '/v1' }) // global route prefix\n\nawait fastify.listen({ port: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure HTTP2 Server with Fastify\nDESCRIPTION: This snippet demonstrates how to create a Fastify server with HTTP2 support over HTTPS. It includes reading SSL certificate files and setting up a basic route.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/HTTP2.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst fs = require('node:fs')\nconst path = require('node:path')\nconst fastify = require('fastify')({\n  http2: true,\n  https: {\n    key: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.key')),\n    cert: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.cert'))\n  }\n})\n\nfastify.get('/', function (request, reply) {\n  reply.code(200).send({ hello: 'world' })\n})\n\nfastify.listen({ port: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Using $ref to a Shared Schema $id as External Schema\nDESCRIPTION: Demonstrates how to reference a schema component from a shared schema using $ref to a $id. This allows reusing schema components across multiple schemas.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.addSchema({\n  $id: 'http://foo/common.json',\n  type: 'object',\n  definitions: {\n    foo: {\n      $id: '#address',\n      type: 'object',\n      properties: {\n        city: { type: 'string' }\n      }\n    }\n  }\n})\n\nconst refToSharedSchemaId = {\n  type: 'object',\n  properties: {\n    home: { $ref: 'http://foo/common.json#address' },\n    work: { $ref: 'http://foo/common.json#address' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Redaction in Fastify (JavaScript)\nDESCRIPTION: This code shows how to configure log redaction in Fastify to obscure sensitive information, such as the Authorization header, while logging other request details.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Logging.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = Fastify({\n  logger: {\n    stream: stream,\n    redact: ['req.headers.authorization'],\n    level: 'info',\n    serializers: {\n      req (request) {\n        return {\n          method: request.method,\n          url: request.url,\n          headers: request.headers,\n          host: request.host,\n          remoteAddress: request.ip,\n          remotePort: request.socket.remotePort\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Route Configuration Objects in Fastify\nDESCRIPTION: Demonstrates how to pass configuration objects to route handlers in Fastify. This example shows registering routes with different configuration values and accessing them inside the handler.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\nconst fastify = require('fastify')()\n\nfunction handler (req, reply) {\n  reply.send(reply.routeOptions.config.output)\n}\n\nfastify.get('/en', { config: { output: 'hello world!' } }, handler)\nfastify.get('/it', { config: { output: 'ciao mondo!' } }, handler)\n\nfastify.listen({ port: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Working with Prefixes in Nested Plugins\nDESCRIPTION: Shows how prefixes work in Fastify when using nested plugin registrations, demonstrating that the prefix property reflects the combined path prefix.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.register(function (instance, opts, done) {\n  instance.get('/foo', function (request, reply) {\n    // Will log \"prefix: /v1\"\n    request.log.info('prefix: %s', instance.prefix)\n    reply.send({ prefix: instance.prefix })\n  })\n\n  instance.register(function (instance, opts, done) {\n    instance.get('/bar', function (request, reply) {\n      // Will log \"prefix: /v1/v2\"\n      request.log.info('prefix: %s', instance.prefix)\n      reply.send({ prefix: instance.prefix })\n    })\n\n    done()\n  }, { prefix: '/v2' })\n\n  done()\n}, { prefix: '/v1' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastify Server for Google Cloud Run (JavaScript)\nDESCRIPTION: Defines functions `build` and `start` to create and run a Fastify server configured for Google Cloud Run. It sets `trustProxy: true`, detects the Cloud Run environment via `process.env.K_SERVICE`, listens on the port specified by `process.env.PORT` (defaulting to 3000), and binds to the required `0.0.0.0` host address when running in Cloud Run. Includes basic error handling and process exit on startup failure.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nfunction build() {\n  const fastify = Fastify({ trustProxy: true })\n  return fastify\n}\n\nasync function start() {\n  // Google Cloud Run will set this environment variable for you, so\n  // you can also use it to detect if you are running in Cloud Run\n  const IS_GOOGLE_CLOUD_RUN = process.env.K_SERVICE !== undefined\n\n  // You must listen on the port Cloud Run provides\n  const port = process.env.PORT || 3000\n\n  // You must listen on all IPV4 addresses in Cloud Run\n  const host = IS_GOOGLE_CLOUD_RUN ? \"0.0.0.0\" : undefined\n\n  try {\n    const server = build()\n    const address = await server.listen({ port, host })\n    console.log(`Listening on ${address}`)\n  } catch (err) {\n    console.error(err)\n    process.exit(1)\n  }\n}\n\nmodule.exports = build\n\nif (require.main === module) {\n  start()\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a preValidation Hook in Fastify (Async/Await)\nDESCRIPTION: Shows how to register a 'preValidation' hook using `fastify.addHook` with an `async` function. This hook runs after parsing and before validation, enabling changes to `request.body`. Asynchronous operations can be awaited before modification.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('preValidation', async (request, reply) => {\n  const importantKey = await generateRandomString()\n  request.body = { ...request.body, importantKey }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Ajv Validation Options in Fastify\nDESCRIPTION: Default configuration options for Ajv validator in Fastify, including type coercion, default values, and security settings.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  coerceTypes: 'array', // change data type of data to match type keyword\n  useDefaults: true, // replace missing properties and items with the values from corresponding default keyword\n  removeAdditional: true, // remove additional properties if additionalProperties is set to false\n  uriResolver: require('fast-uri'),\n  addUsedSchema: false,\n  // Explicitly set allErrors to `false`.\n  // When set to `true`, a DoS attack is possible.\n  allErrors: false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers\nDESCRIPTION: Shows various ways to set and manage response headers including multiple Set-Cookie headers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreply.header('set-cookie', 'foo');\nreply.header('set-cookie', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Using Reply.raw for Direct HTTP Response Handling in Fastify (JavaScript)\nDESCRIPTION: Demonstrates using the `reply.raw` property to directly access and manipulate the underlying Node.js `http.ServerResponse` object. This bypasses Fastify's built-in response handling, including header setting (like `setCookie`) and serialization. Use this with caution as it skips Fastify's logic.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\napp.get('/cookie-2', (req, reply) => {\n  reply.setCookie('session', 'value', { secure: false }) // this will not be used\n\n  // in this case we are using only the nodejs http server response object\n  reply.raw.writeHead(200, { 'Content-Type': 'text/plain' })\n  reply.raw.write('ok')\n  reply.raw.end()\n})\n```\n\n----------------------------------------\n\nTITLE: Registering an onError Hook in Fastify (Async/Await)\nDESCRIPTION: Shows how to register an 'onError' hook using `fastify.addHook` with an `async` function. Executed after the primary error handler, this hook is useful for custom error logging or metrics. It should not modify the error or attempt to send a response.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onError', async (request, reply, error) => {\n  // Useful for custom error logging\n  // You should not use this hook to update the error\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Request ID Generation in Fastify\nDESCRIPTION: Shows how to customize request ID generation for different route prefixes. The example demonstrates setting different ID formats for webhooks and observability endpoints.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')({\n  genReqId: (req) => {\n    return 'base'\n  }\n})\n\nfastify.register((instance, opts, done) => {\n  instance.setGenReqId((req) => {\n    // custom request ID for `/webhooks`\n    return 'webhooks-id'\n  })\n  done()\n}, { prefix: '/webhooks' })\n\nfastify.register((instance, opts, done) => {\n  instance.setGenReqId((req) => {\n    // custom request ID for `/observability`\n    return 'observability-id'\n  })\n  done()\n}, { prefix: '/observability' })\n```\n\n----------------------------------------\n\nTITLE: Handling Rejected Promises in Fastify\nDESCRIPTION: This snippet shows how to handle HTTP responses for rejected promises in Fastify by throwing errors. An error object with statusCode and message properties is thrown to customize the HTTP response code and message for the client. In this example, a 418 status code is used.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify.get('/teapot', async function (request, reply) {\\n  const err = new Error()\\n  err.statusCode = 418\\n  err.message = 'short and stout'\\n  throw err\\n})\\n\\nfastify.get('/botnet', async function (request, reply) {\\n  throw { statusCode: 418, message: 'short and stout' }\\n  // will return to the client the same json\\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Fastify onReady Application Hook\nDESCRIPTION: Provides examples of using the `onReady` application hook with both callback and async/await styles. This hook executes code serially before the server starts listening, useful for tasks like loading initial data or configurations. It cannot modify routes.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_27\n\nLANGUAGE: js\nCODE:\n```\n// callback style\nfastify.addHook('onReady', function (done) {\n  // Some code\n  const err = null;\n  done(err)\n})\n\n// or async/await style\nfastify.addHook('onReady', async function () {\n  // Some async code\n  await loadCacheFromDatabase()\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Constraint Strategy in Fastify (JavaScript)\nDESCRIPTION: Provides an example of defining a custom constraint strategy for routing in Fastify, specifically overriding the default 'version' strategy. This involves creating an object with `storage` and `deriveVersion` methods and passing it within the `constraints` option during Fastify initialization. The example derives the version from the 'accept' header.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst customVersionStrategy = {\n  storage: function () {\n    const versions = {}\n    return {\n      get: (version) => { return versions[version] || null },\n      set: (version, store) => { versions[version] = store }\n    }\n  },\n  deriveVersion: (req, ctx) => {\n    return req.headers['accept']\n  }\n}\n\nconst fastify = require('fastify')({\n  constraints: {\n    version: customVersionStrategy\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Decorator Dependencies Example - JavaScript\nDESCRIPTION: Comprehensive example showing how to use decorator dependencies with plugin registration.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function greetDecorator (fastify, opts) {\n  fastify.decorate('greet', () => {\n    return 'greet message'\n  })\n}\n\nasync function hiDecorator (fastify, opts) {\n  fastify.decorate('hi', () => {\n    return 'hi message'\n  })\n}\n\nasync function utilityDecorator (fastify, opts) {\n  fastify.decorate('utility', () => {\n    return `${fastify.greet()} | ${fastify.hi()}`\n  })\n}\n\nfastify.register(fastifyPlugin(greetDecorator, { name: 'greet' }))\nfastify.register(fastifyPlugin(hiDecorator, { name: 'hi' }))\nfastify.register(fastifyPlugin(utilityDecorator, { dependencies: ['greet', 'hi'] }))\n\nfastify.get('/', function (req, reply) {\n  reply.send({ hello: fastify.utility() })\n})\n\nfastify.listen({ port: 3000 }, (err, address) => {\n  if (err) throw err\n})\n```\n\n----------------------------------------\n\nTITLE: Registering an onRequest Hook in Fastify (Callback)\nDESCRIPTION: Demonstrates registering an 'onRequest' hook using `fastify.addHook`. This hook executes early in the request lifecycle for every incoming request. It uses the `done` callback to signal completion and pass control to the next handler. Note that `request.body` is unavailable at this stage.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onRequest', (request, reply, done) => {\n  // Some code\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Registering a preHandler Hook in Fastify (Callback)\nDESCRIPTION: Demonstrates registering a 'preHandler' hook using `fastify.addHook` with a callback. This hook executes just before the route handler, often used for authentication, authorization, or loading prerequisite data onto the request object. `done()` continues to the route handler.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('preHandler', (request, reply, done) => {\n  // some code\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Registering an onSend Hook in Fastify (Async/Await - Modify Payload)\nDESCRIPTION: Demonstrates registering an 'onSend' hook using `fastify.addHook` with an `async` function to modify the response payload before sending. Returning the new payload (string, Buffer, stream, ReadableStream, Response, or null) replaces the original.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onSend', async (request, reply, payload) => {\n  const newPayload = payload.replace('some-text', 'some-new-text')\n  return newPayload\n})\n```\n\n----------------------------------------\n\nTITLE: Sending ReadableStream with Reply.send() in Fastify (JavaScript)\nDESCRIPTION: Demonstrates sending a WHATWG `ReadableStream` using `reply.send()`. This example converts a Node.js stream to a `ReadableStream` using `ReadableStream.from()`. Requires `node:fs` and `node:stream/web`. The content is treated like a Node.js stream, sent unmodified, and bypasses response validation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst fs = require('node:fs')\nconst { ReadableStream } = require('node:stream/web')\n\nfastify.get('/streams', function (request, reply) {\n  const stream = fs.createReadStream('some-file')\n  reply.header('Content-Type', 'application/octet-stream')\n  reply.send(ReadableStream.from(stream))\n})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Type Providers in Scoped Plugins\nDESCRIPTION: Example showing how to use different type providers in different plugin scopes. This demonstrates using both TypeBox and JsonSchemaToTs providers in the same application through encapsulated usage.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Type-Providers.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Fastify from 'fastify'\nimport { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'\nimport { JsonSchemaToTsProvider } from '@fastify/type-provider-json-schema-to-ts'\nimport { Type } from '@sinclair/typebox'\n\nconst fastify = Fastify()\n\nfunction pluginWithTypebox(fastify: FastifyInstance, _opts, done): void {\n  fastify.withTypeProvider<TypeBoxTypeProvider>()\n    .get('/', {\n      schema: {\n        body: Type.Object({\n          x: Type.String(),\n          y: Type.Number(),\n          z: Type.Boolean()\n        })\n      }\n    }, (req) => {\n        const { x, y, z } = req.body // type safe\n    });\n  done()\n}\n\nfunction pluginWithJsonSchema(fastify: FastifyInstance, _opts, done): void {\n  fastify.withTypeProvider<JsonSchemaToTsProvider>()\n    .get('/', {\n      schema: {\n        body: {\n          type: 'object',\n          properties: {\n            x: { type: 'string' },\n            y: { type: 'number' },\n            z: { type: 'boolean' }\n          },\n        }\n      }\n    }, (req) => {\n      const { x, y, z } = req.body // type safe\n    });\n  done()\n}\n\nfastify.register(pluginWithJsonSchema)\nfastify.register(pluginWithTypebox)\n```\n\n----------------------------------------\n\nTITLE: Registering a preSerialization Hook in Fastify (Callback)\nDESCRIPTION: Illustrates registering a 'preSerialization' hook using `fastify.addHook` with a callback. This hook allows modification or replacement of the response payload *before* it is serialized. It receives the request, reply, the original payload, and a `done` callback. Pass the modified payload to `done(err, newPayload)`. Note: This hook doesn't run for string, Buffer, stream, or null payloads.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('preSerialization', (request, reply, payload, done) => {\n  const err = null\n  const newPayload = { wrapped: payload }\n  done(err, newPayload)\n})\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Handler Configuration\nDESCRIPTION: Lambda handler setup using @fastify/aws-lambda to proxy requests to Fastify application.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst awsLambdaFastify = require('@fastify/aws-lambda')\nconst init = require('./app');\n\nconst proxy = awsLambdaFastify(init())\n// or\n// const proxy = awsLambdaFastify(init(), { binaryMimeTypes: ['application/octet-stream'] })\n\nexports.handler = proxy;\n```\n\n----------------------------------------\n\nTITLE: Request Encapsulation Pattern - JavaScript\nDESCRIPTION: Example of proper request decoration with encapsulation using hooks.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fp = require('fastify-plugin')\n\nasync function myPlugin (app) {\n  app.decorateRequest('foo')\n  app.addHook('onRequest', async (req, reply) => {\n    req.foo = { bar: 42 }\n  })\n}\n\nmodule.exports = fp(myPlugin)\n```\n\n----------------------------------------\n\nTITLE: Using JsonSchemaToTs Type Provider with Fastify\nDESCRIPTION: Example of setting up and using the json-schema-to-ts Type Provider with Fastify to create type-safe route handlers. The type information is inferred from inline JSON Schema in the route definition.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Type-Providers.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from 'fastify'\nimport { JsonSchemaToTsProvider } from '@fastify/type-provider-json-schema-to-ts'\n\nconst server = fastify().withTypeProvider<JsonSchemaToTsProvider>()\n\nserver.get('/route', {\n  schema: {\n    querystring: {\n      type: 'object',\n      properties: {\n        foo: { type: 'number' },\n        bar: { type: 'string' },\n      },\n      required: ['foo', 'bar']\n    }\n  }\n}, (request, reply) => {\n\n  // type Query = { foo: number, bar: string }\n  const { foo, bar } = request.query // type safe!\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying Route Options Dynamically with onRoute Hook\nDESCRIPTION: Shows a practical use case for the `onRoute` hook: dynamically adding a `preSerialization` hook to every registered route. This allows plugins to augment route behavior across the application or within their encapsulated context.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onRoute', (routeOptions) => {\n  function onPreSerialization(request, reply, payload, done) {\n    // Your code\n    done(null, payload)\n  }\n  // preSerialization can be an array or undefined\n  routeOptions.preSerialization = [...(routeOptions.preSerialization || []), onPreSerialization]\n})\n```\n\n----------------------------------------\n\nTITLE: Using getDecorator as a Type-Safe Alternative to Module Augmentation (TypeScript)\nDESCRIPTION: Provides an example of using `getDecorator<T>` to retrieve decorators with specific types without relying on global module augmentation. This allows for different implementations or types of the same decorator name (`usersRepository`) in different server instances or encapsulated plugins (`serverOne`, `serverTwo`), enhancing type safety and avoiding conflicts. It also shows decorating and retrieving request (`session`) and reply (`sendSuccess`) decorators.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nserverOne.register(async function (fastify) {\n  const usersRepository = fastify.getDecorator<PostgreUsersRepository>(\n    'usersRepository'\n  )\n\n  fastify.decorateRequest('session', null)\n  fastify.addHook('onRequest', async (req, reply) => {\n    // Yes, the request object has a setDecorator method. \n    // More information will be provided soon.\n    req.setDecorator('session', { user: 'Jean' })\n  })\n\n  fastify.get('/me', (request, reply) => {\n    const session = request.getDecorator<ISession>('session')\n    reply.send(session)\n  })\n})\n\nserverTwo.register(async function (fastify) {\n  const usersRepository = fastify.getDecorator<SqlLiteUsersRepository>(\n    'usersRepository'\n  )\n\n  fastify.decorateReply('sendSuccess', function (data) {\n    return this.send({ success: true })\n  })\n\n  fastify.get('/success', async (request, reply) => {\n    const sendSuccess = reply.getDecorator<SendSuccessFn>('sendSuccess')\n    await sendSuccess()\n  })\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Using Custom Logger Instance in Fastify (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use a custom logger instance in Fastify by passing it as loggerInstance when creating the Fastify instance.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Logging.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst log = require('pino')({ level: 'info' })\nconst fastify = require('fastify')({ loggerInstance: log })\n\nlog.info('does not have request information')\n\nfastify.get('/', function (request, reply) {\n  request.log.info('includes request information, but is the same logger instance as `log`')\n  reply.send({ hello: 'world' })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Response Trailers in Fastify\nDESCRIPTION: Examples of setting response trailers using sync and async functions. Shows how to set server timing and content MD5 trailers after the main response data is sent.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nreply.trailer('server-timing', function() {\n  return 'db;dur=53, app;dur=47.2'\n})\n\nconst { createHash } = require('node:crypto')\n// trailer function also receive two argument\n// @param {object} reply fastify reply\n// @param {string|Buffer|null} payload payload that already sent, note that it will be null when stream is sent\n// @param {function} done callback to set trailer value\nreply.trailer('content-md5', function(reply, payload, done) {\n  const hash = createHash('md5')\n  hash.update(payload)\n  done(null, hash.disgest('hex'))\n})\n\n// when you prefer async-await\nreply.trailer('content-md5', async function(reply, payload) {\n  const hash = createHash('md5')\n  hash.update(payload)\n  return hash.disgest('hex')\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting Fastify App for Firebase Functions onRequest Handler (JavaScript)\nDESCRIPTION: Exports the configured Fastify application instance (`fastifyApp`) wrapped in Firebase's `onRequest` function. This is the required final step to integrate the Fastify server with the Firebase Functions HTTP trigger, allowing Firebase to route incoming requests to the Fastify application.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexports.app = onRequest(fastifyApp)\n```\n\n----------------------------------------\n\nTITLE: Ensuring Runtime Safety when Setting Request Decorators with setDecorator (TypeScript)\nDESCRIPTION: Demonstrates using `req.setDecorator` to safely update the value of a request decorator within a hook. This method guarantees that the decorator ('user') exists, throwing an `FST_ERR_DEC_UNDECLARED` error if it doesn't (e.g., due to a typo like 'user-with-typo'), thus preventing runtime errors.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nfastify.decorateRequest('user', '')\nfastify.addHook('preHandler', async (req, reply) => {\n  // Throws FST_ERR_DEC_UNDECLARED if the decorator does not exist\n  req.setDecorator('user-with-typo', 'Bob Dylan')\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Shutting Down a Fastify Server with Callback\nDESCRIPTION: Demonstrates how to gracefully shut down a Fastify server using the close method with a callback, which triggers the onClose hooks.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.close().then(() => {\n  console.log('successfully closed!')\n}, (err) => {\n  console.log('an error happened', err)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Constraint Strategy in Fastify Router\nDESCRIPTION: Demonstrates how to add a custom constraint strategy for routing based on the Accept header. Includes implementation of storage, constraint derivation, and matching behavior.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst customResponseTypeStrategy = {\n  // strategy name for referencing in the route handler `constraints` options\n  name: 'accept',\n  // storage factory for storing routes in the find-my-way route tree\n  storage: function () {\n    let handlers = {}\n    return {\n      get: (type) => { return handlers[type] || null },\n      set: (type, store) => { handlers[type] = store }\n    }\n  },\n  // function to get the value of the constraint from each incoming request\n  deriveConstraint: (req, ctx) => {\n    return req.headers['accept']\n  },\n  // optional flag marking if handlers without constraints can match requests that have a value for this constraint\n  mustMatchWhenDerived: true\n}\n\nconst router = Fastify();\nrouter.addConstraintStrategy(customResponseTypeStrategy);\n```\n\n----------------------------------------\n\nTITLE: Using Request Decorators for Enhanced Header Handling\nDESCRIPTION: Example of using decorateRequest to add both properties and methods to the request object, providing a cleaner and more efficient API for handling request headers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.decorateRequest('setHeader', function (header) {\n  this.isHappy = this.headers[header]\n})\n\nfastify.decorateRequest('isHappy', false) // This will be added to the Request object prototype, yay speed!\n\nfastify.addHook('preHandler', (request, reply, done) => {\n  request.setHeader('happy')\n  done()\n})\n\nfastify.get('/happiness', (request, reply) => {\n  reply.send({ happy: request.isHappy })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Logging in Fastify (JavaScript)\nDESCRIPTION: This code sets up environment-specific logging configurations for development, production, and test environments in Fastify. It uses pino-pretty for development and adjusts settings accordingly.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Logging.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst envToLogger = {\n  development: {\n    transport: {\n      target: 'pino-pretty',\n      options: {\n        translateTime: 'HH:MM:ss Z',\n        ignore: 'pid,hostname',\n      },\n    },\n  },\n  production: true,\n  test: false,\n}\nconst fastify = require('fastify')({\n  logger: envToLogger[environment] ?? true // defaults to true if no entry matches in the map\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Knex Database Plugin for Fastify\nDESCRIPTION: Shows how to create a custom plugin for integrating Knex.js with Fastify. The plugin decorates Fastify with a knex instance and handles proper connection closing when the server shuts down.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Database.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst fp = require('fastify-plugin')\nconst knex = require('knex')\n\nfunction knexPlugin(fastify, options, done) {\n  if(!fastify.knex) {\n    const knex = knex(options)\n    fastify.decorate('knex', knex)\n\n    fastify.addHook('onClose', (fastify, done) => {\n      if (fastify.knex === knex) {\n        fastify.knex.destroy(done)\n      }\n    })\n  }\n\n  done()\n}\n\nexport default fp(knexPlugin, { name: 'fastify-knex-example' })\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Definitions for a Fastify Plugin\nDESCRIPTION: TypeScript definition file that declares the plugin's types, including option interface, exported functions, and declaration merging to extend Fastify's type system with the plugin's functionality.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FastifyPluginCallback } from 'fastify'\n\ninterface PluginOptions {\n  //...\n}\n\n// Optionally, you can add any additional exports.\n// Here we are exporting the decorator we added.\nexport interface myPluginFunc {\n  (input: string): string\n}\n\n// Most importantly, use declaration merging to add the custom property to the Fastify type system\ndeclare module 'fastify' {\n  interface FastifyInstance {\n    myPluginFunc: myPluginFunc\n  }\n}\n\n// fastify-plugin automatically adds named export, so be sure to add also this type\n// the variable name is derived from `options.name` property if `module.exports.myPlugin` is missing\nexport const myPlugin: FastifyPluginCallback<PluginOptions>\n\n// fastify-plugin automatically adds `.default` property to the exported plugin. See the note below\nexport default myPlugin\n```\n\n----------------------------------------\n\nTITLE: Using Default Parser with Case-Insensitive Keys/Values in Fastify (JavaScript)\nDESCRIPTION: Shows how to customize the behavior of Fastify's default querystring parser (`fast-querystring`) to achieve case-insensitive key and value handling. It sets the `querystringParser` option to a function that converts the input string to lowercase before parsing it with the default parser.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst querystring = require('fast-querystring')\nconst fastify = require('fastify')({\n  querystringParser: str => querystring.parse(str.toLowerCase())\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Options in Fastify onRoute Hook\nDESCRIPTION: Demonstrates the `onRoute` application hook, which is triggered synchronously whenever a new route is registered. The hook function receives a `routeOptions` object containing details about the registered route (method, URL, schema, etc.). This hook is encapsulated.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_31\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onRoute', (routeOptions) => {\n  //Some code\n  routeOptions.method\n  routeOptions.schema\n  routeOptions.url // the complete URL of the route, it will include the prefix if any\n  routeOptions.path // `url` alias\n  routeOptions.routePath // the URL of the route without the prefix\n  routeOptions.bodyLimit\n  routeOptions.logLevel\n  routeOptions.logSerializers\n  routeOptions.prefix\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Route-Specific Abort Detection in Fastify\nDESCRIPTION: Shows how to implement client abort detection directly within a specific route handler rather than using a global hook.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Detecting-When-Clients-Abort.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/', async (request, reply) => {\n  request.raw.on('close', () => {\n    if (request.raw.aborted) {\n      app.log.info('request closed')\n    }\n  })\n  await sleep(3000)\n  reply.code(200).send({ ok: true })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Injection Test\nDESCRIPTION: Demonstrates how to use Fastify's inject method for basic HTTP request testing. Shows console output of status code and response body.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Testing.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst build = require('./app')\n\nconst test = async () => {\n  const app = build()\n\n  const response = await app.inject({\n    method: 'GET',\n    url: '/'\n  })\n\n  console.log('status code: ', response.statusCode)\n  console.log('body: ', response.body)\n}\ntest()\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Error Handler with setErrorHandler in Fastify (JavaScript)\nDESCRIPTION: Illustrates how to define a custom error handling function using `fastify.setErrorHandler`. This function receives the error, request, and reply objects, allowing for custom logging, status code setting, and response formatting. The user is responsible for logging within the custom handler. Calling `reply.send(error)` inside will delegate back to the default handler.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nfastify.setErrorHandler(function (error, request, reply) {\n  request.log.warn(error)\n  const statusCode = error.statusCode >= 400 ? error.statusCode : 500\n  reply\n    .code(statusCode)\n    .type('text/plain')\n    .send(statusCode >= 500 ? 'Internal server error' : error.message)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fastify Plugin in JavaScript\nDESCRIPTION: JavaScript implementation of a basic Fastify plugin that decorates the Fastify instance with a custom function. Uses fastify-plugin to handle version compatibility and naming.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// fastify-plugin is highly recommended for any plugin you write\nconst fp = require('fastify-plugin')\n\nfunction myPlugin (instance, options, done) {\n\n  // decorate the fastify instance with a custom function called myPluginFunc\n  instance.decorate('myPluginFunc', (input) => {\n    return input.toUpperCase()\n  })\n\n  done()\n}\n\nmodule.exports = fp(myPlugin, {\n  fastify: '5.x',\n  name: 'my-plugin' // this is used by fastify-plugin to derive the property name\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Schema as a Const Object for Type Inference (TypeScript)\nDESCRIPTION: Creates a JSON Schema as a TypeScript constant object describing a todo item with required and optional fields. The 'as const' assertion allows for accurate type inference using json-schema-to-ts. All properties and schema rules are preserved for runtime and compile-time validation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst todo = {\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    description: { type: 'string' },\n    done: { type: 'boolean' },\n  },\n  required: ['name'],\n} as const; // don't forget to use const !\n```\n\n----------------------------------------\n\nTITLE: Adding Vary Header for Version-Controlled Routes\nDESCRIPTION: Shows how to set a Vary header in responses with the value used for versioning to prevent cache poisoning attacks. This example uses the vary npm package to properly append to existing Vary headers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst append = require('vary').append\nfastify.addHook('onSend', (req, reply, payload, done) => {\n  if (req.headers['accept-version']) { // or the custom header being used\n    let value = reply.getHeader('Vary') || ''\n    const header = Array.isArray(value) ? value.join(', ') : String(value)\n    if ((value = append(header, 'Accept-Version'))) { // or the custom header being used\n      reply.header('Vary', value)\n    }\n  }\n done()\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shared Schemas in Request Hierarchies (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add multiple shared schemas at different encapsulation levels in Fastify and retrieve them using getSchemas(). It also shows that sub-instances inherit schemas from parent scopes. The code sets up endpoints at different nesting levels, each returning the schemas visible in their context. Dependencies include Fastify; each added schema is uniquely identified by its $id.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify.addSchema({ $id: 'one', my: 'hello' })\n// will return only `one` schema\nfastify.get('/', (request, reply) => { reply.send(fastify.getSchemas()) })\n\nfastify.register((instance, opts, done) => {\n  instance.addSchema({ $id: 'two', my: 'ciao' })\n  // will return `one` and `two` schemas\n  instance.get('/sub', (request, reply) => { reply.send(instance.getSchemas()) })\n\n  instance.register((subinstance, opts, done) => {\n    subinstance.addSchema({ $id: 'three', my: 'hola' })\n    // will return `one`, `two` and `three`\n    subinstance.get('/deep', (request, reply) => { reply.send(subinstance.getSchemas()) })\n    done()\n  })\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Initial Testing of a Fastify Plugin Route with `node:test` and `fastify.inject()` in JavaScript\nDESCRIPTION: This snippet shows an initial test setup for the Fastify plugin using `node:test`. It imports Fastify, the test runner, and the plugin. A test case `Test the Plugin Route` is defined, which creates a Fastify instance, registers the plugin, and sets up a simple GET route `/` that uses the `helloRequest` decorator added by the plugin. `fastify.inject()` is used to simulate a GET request to this route, and the resulting status code and body are logged to the console. This serves as a basic verification step before adding formal assertions.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Testing.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst Fastify = require(\"fastify\");\nconst { test } = require(\"node:test\");\nconst myPlugin = require(\"../plugin/myFirstPlugin\");\n\ntest(\"Test the Plugin Route\", async t => {\n    // Create a mock fastify application to test the plugin\n    const fastify = Fastify()\n\n    fastify.register(myPlugin)\n\n    // Add an endpoint of your choice\n    fastify.get(\"/\", async (request, reply) => {\n        return ({ message: request.helloRequest })\n    })\n\n    // Use fastify.inject to fake a HTTP Request\n    const fastifyResponse = await fastify.inject({\n        method: \"GET\",\n        url: \"/\"\n    })\n\n  console.log('status code: ', fastifyResponse.statusCode)\n  console.log('body: ', fastifyResponse.body)\n})\n```\n\n----------------------------------------\n\nTITLE: Using @fastify/middie for Enhanced Middleware Performance\nDESCRIPTION: Shows how to use @fastify/middie plugin for implementing Express-style middleware with better performance characteristics.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait fastify.register(require('@fastify/middie'))\nfastify.use(require('cors')())\n```\n\n----------------------------------------\n\nTITLE: Logging Request Body in Fastify Prehandler Hook (JavaScript)\nDESCRIPTION: This code shows how to log the request body in Fastify using a preHandler hook, as the body cannot be serialized inside a req method.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Logging.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napp.addHook('preHandler', function (req, reply, done) {\n  if (req.body) {\n    req.log.info({ body: req.body }, 'parsed body')\n  }\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Ajv Validator Implementation in Fastify\nDESCRIPTION: Example of creating and configuring a custom Ajv validator instance with custom options.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')()\nconst Ajv = require('ajv')\nconst ajv = new Ajv({\n  removeAdditional: 'all',\n  useDefaults: true,\n  coerceTypes: 'array',\n  // any other options\n  // ...\n})\nfastify.setValidatorCompiler(({ schema, method, url, httpPart }) => {\n  return ajv.compile(schema)\n})\n```\n\n----------------------------------------\n\nTITLE: Checking for Request Abort During Business Logic Execution\nDESCRIPTION: Demonstrates how to check if a request has been aborted at specific points in your business logic to perform alternative actions.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Detecting-When-Clients-Abort.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/', async (request, reply) => {\n  await sleep(3000)\n  if (request.raw.aborted) {\n    // do something here\n  }\n  await sleep(3000)\n  reply.code(200).send({ ok: true })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding and Managing HTTP Methods in Fastify v5\nDESCRIPTION: Provides steps to add custom HTTP methods to Fastify v5 using `addHttpMethod`. It shows adding a new HTTP method, including one that accepts a body, and retrieving supported methods. This feature enhances HTTP methods' extensibility and accommodates specific server needs.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fastify = Fastify()\n\n// add a new http method on top of the default ones:\nfastify.addHttpMethod('REBIND')\n\n// add a new HTTP method that accepts a body:\nfastify.addHttpMethod('REBIND', { hasBody: true })\n\n// reads the HTTP methods list:\nfastify.supportedMethods // returns a string array\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Property-Specific Error Messages with ajv-errors\nDESCRIPTION: Shows how to configure Fastify with ajv-errors plugin to provide custom error messages for specific properties and validation constraints. Includes schema configuration with inline error messages.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = Fastify({\n  ajv: {\n    customOptions: {\n      jsonPointers: true,\n      // ⚠ Warning: Enabling this option may lead to this security issue https://www.cvedetails.com/cve/CVE-2020-8192/\n      allErrors: true\n    },\n    plugins: [\n      require('ajv-errors')\n    ]\n  }\n})\n\nconst schema = {\n  body: {\n    type: 'object',\n    properties: {\n      name: {\n        type: 'string',\n        errorMessage: {\n          type: 'Bad name'\n        }\n      },\n      age: {\n        type: 'number',\n        errorMessage: {\n          type: 'Bad age', // specify custom message for\n          min: 'Too young' // all constraints except required\n        }\n      }\n    },\n    required: ['name', 'age'],\n    errorMessage: {\n      required: {\n        name: 'Why no name!', // specify error message for when the\n        age: 'Why no age!' // property is missing from input\n      }\n    }\n  }\n}\n\nfastify.post('/', { schema, }, (request, reply) => {\n  reply.send({\n    hello: 'world'\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastify Server with ALPN for HTTP2 and HTTP1 Support\nDESCRIPTION: This code sets up a Fastify server that supports both HTTP2 and HTTP1 using ALPN negotiation. It includes SSL configuration and a route that can be accessed through both protocols.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/HTTP2.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst fs = require('node:fs')\nconst path = require('node:path')\nconst fastify = require('fastify')({\n  http2: true,\n  https: {\n    allowHTTP1: true, // fallback support for HTTP1\n    key: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.key')),\n    cert: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.cert'))\n  }\n})\n\n// this route can be accessed through both protocols\nfastify.get('/', function (request, reply) {\n  reply.code(200).send({ hello: 'world' })\n})\n\nfastify.listen({ port: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await with Explicit reply.send() in Fastify (JavaScript)\nDESCRIPTION: Shows an alternative pattern for `async` route handlers where `reply.send()` is called explicitly to send the response. To ensure proper promise handling and prevent potential race conditions, the handler must `return reply.send(processed)` or `return reply` after calling `reply.send()`. If both a return value and `reply.send()` are used, the return value takes precedence.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/', options, async function (request, reply) {\n  const data = await getData()\n  const processed = await processData(data)\n  return reply.send(processed)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Levels per Plugin in Fastify (JavaScript)\nDESCRIPTION: Shows how to configure different logging levels (`warn`, `debug`) for specific sets of routes by providing the `logLevel` option during plugin registration with `fastify.register()`. This allows finer control over log verbosity for different parts of the application, overriding the server's default log level for routes within that plugin.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n// server.js\nconst fastify = require('fastify')({ logger: true })\n\nfastify.register(require('./routes/user'), { logLevel: 'warn' })\nfastify.register(require('./routes/events'), { logLevel: 'debug' })\n\nfastify.listen({ port: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Firebase Functions Fastify Integration\nDESCRIPTION: Setup code for using Fastify with Firebase Functions, including request handler and instance creation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { onRequest } = require(\"firebase-functions/v2/https\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require(\"fastify\")({\n  logger: true,\n})\n\nconst fastifyApp = async (request, reply) => {\n  await registerRoutes(fastify)\n  await fastify.ready()\n  fastify.server.emit(\"request\", request, reply)\n}\n```\n\n----------------------------------------\n\nTITLE: Content Type Parser Management in Fastify\nDESCRIPTION: Shows various methods for managing content type parsers including adding, checking, and removing parsers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.addContentTypeParser('text/json', { asString: true }, fastify.getDefaultJsonParser('ignore', 'ignore'))\n\nfastify.hasContentTypeParser('text/json')\nfastify.hasContentTypeParser(/^.+\\/json$/)\n\nfastify.removeContentTypeParser('application/json')\nfastify.removeContentTypeParser(['application/json', 'text/plain'])\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Log Serializers in Fastify\nDESCRIPTION: Shows how to define custom log serializers in Fastify to optimize resource usage when logging large objects. The example demonstrates attaching different serializers in different route contexts.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')({ logger: true })\n\nfastify.register(require('./routes/user'), {\n  logSerializers: {\n    user: (value) => `My serializer one - ${value.name}`\n  }\n})\nfastify.register(require('./routes/events'), {\n  logSerializers: {\n    user: (value) => `My serializer two - ${value.name} ${value.surname}`\n  }\n})\n\nfastify.listen({ port: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Removing Content Type Parsers in Fastify\nDESCRIPTION: Demonstrates how to remove specific content type parsers using removeContentTypeParser API. Shows how to remove both built-in and custom parsers, supporting both string and RegExp patterns.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/ContentTypeParser.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.addContentTypeParser('text/xml', function (request, payload, done) {\n  xmlParser(payload, function (err, body) {\n    done(err, body)\n  })\n})\n\n// Removes the both built-in content type parsers so that only the content type parser for text/html is available\nfastify.removeContentTypeParser(['application/json', 'text/plain'])\n```\n\n----------------------------------------\n\nTITLE: Registering a preValidation Hook in Fastify (Callback)\nDESCRIPTION: Shows how to register a 'preValidation' hook using `fastify.addHook` with a callback. This hook executes after body parsing but before validation, allowing modification of the `request.body` before schema validation occurs. The `done` callback proceeds to the next step.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('preValidation', (request, reply, done) => {\n  request.body = { ...request.body, importantKey: 'randomString' }\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Registering a preSerialization Hook in Fastify (Async/Await)\nDESCRIPTION: Illustrates registering a 'preSerialization' hook using `fastify.addHook` with an `async` function. This hook enables changing the response payload before serialization. It receives request, reply, and the original payload. Returning a new payload object replaces the original. Note: This hook isn't triggered for string, Buffer, stream, or null payloads.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('preSerialization', async (request, reply, payload) => {\n  return { wrapped: payload }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Response JSON Schema in Fastify (JavaScript)\nDESCRIPTION: Demonstrates how to customize the JSON output for specific error status codes by defining a response schema. Additional properties can be added to the `Error` object itself, which will be included in the response if they match the schema definition for that status code.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/', {\n  schema: {\n    response: {\n      501: {\n        type: 'object',\n        properties: {\n          statusCode: { type: 'number' },\n          code: { type: 'string' },\n          error: { type: 'string' },\n          message: { type: 'string' },\n          time: { type: 'string' }\n        }\n      }\n    }\n  }\n}, function (request, reply) {\n  const error = new Error('This endpoint has not been implemented')\n  error.time = 'it will be implemented in two weeks'\n  reply.code(501).send(error)\n})\n```\n\n----------------------------------------\n\nTITLE: Registering a preParsing Hook in Fastify (Callback)\nDESCRIPTION: Illustrates registering a 'preParsing' hook using `fastify.addHook` with a callback. This hook allows modification of the request payload stream *before* it's parsed. It receives the request, reply, the payload stream, and a `done` callback. A new stream must be passed to `done(null, newPayload)` to replace the original payload. `request.body` is unavailable here.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('preParsing', (request, reply, payload, done) => {\n  // Some code\n  done(null, newPayload)\n})\n```\n\n----------------------------------------\n\nTITLE: Registering an onSend Hook in Fastify (Callback - Clear Payload)\nDESCRIPTION: Illustrates using the 'onSend' hook with a callback to clear the response payload, effectively sending an empty body. This is achieved by passing `null` as the `newPayload` to the `done` callback. Often used with status codes like 304 (Not Modified). Passing `null` avoids setting a `Content-Length` header.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onSend', (request, reply, payload, done) => {\n  reply.code(304)\n  const newPayload = null\n  done(null, newPayload)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Custom Constraints in Fastify\nDESCRIPTION: Demonstrates creating asynchronous custom constraints by fetching criteria from another source like a database. Includes defining the constraint strategy, storage, and derivation function.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nfunction databaseOperation(field, done) {\n  done(null, field)\n}\n\nconst secret = {\n  // strategy name for referencing in the route handler `constraints` options\n  name: 'secret',\n  // storage factory for storing routes in the find-my-way route tree\n  storage: function () {\n    let handlers = {}\n    return {\n      get: (type) => { return handlers[type] || null },\n      set: (type, store) => { handlers[type] = store }\n    }\n  },\n  // function to get the value of the constraint from each incoming request\n  deriveConstraint: (req, ctx, done) => {\n    databaseOperation(req.headers['secret'], done)\n  },\n  // optional flag marking if handlers without constraints can match requests that have a value for this constraint\n  mustMatchWhenDerived: true\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Strings with Reply.send() in Fastify (JavaScript)\nDESCRIPTION: Demonstrates sending a plain string response using `reply.send()`. If no `Content-Type` header is set, Fastify defaults to `text/plain; charset=utf-8`. If a `Content-Type` is set, the string is sent unmodified unless it's `application/json; charset=utf-8`, in which case it's serialized as JSON.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/json', options, function (request, reply) {\n  reply.send('plain string')\n})\n```\n\n----------------------------------------\n\nTITLE: Inheriting Log Serializers in Fastify\nDESCRIPTION: Demonstrates how log serializers can be inherited by context in Fastify. This example shows defining serializers at the Fastify instance level and then overriding them in child contexts.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = Fastify({\n  logger: {\n    level: 'info',\n    serializers: {\n      user (req) {\n        return {\n          method: req.method,\n          url: req.url,\n          headers: req.headers,\n          host: req.host,\n          remoteAddress: req.ip,\n          remotePort: req.socket.remotePort\n        }\n      }\n    }\n  }\n})\n\nfastify.register(context1, {\n  logSerializers: {\n    user: value => `My serializer father - ${value}`\n  }\n})\n\nasync function context1 (fastify, opts) {\n  fastify.get('/', (req, reply) => {\n    req.log.info({ user: 'call father serializer', key: 'another key' })\n    // shows: { user: 'My serializer father - call father  serializer', key: 'another key' }\n    reply.send({})\n  })\n}\n\nfastify.listen({ port: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Plugin Registration with Namespaced Options\nDESCRIPTION: Demonstrates how to register a plugin with namespaced options to avoid option name collisions.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.register(require('fastify-foo'), {\n  prefix: '/foo',\n  foo: {\n    fooOption1: 'value',\n    fooOption2: 'value'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Fastify Decorators within a Plugin Test using `node:test` in JavaScript\nDESCRIPTION: This snippet further enhances the plugin test to specifically verify the decorators added by the plugin (`.decorate()` and `.decorateRequest()`). The assertion plan is increased to `t.plan(5)`. Inside the route handler, assertions are added: `t.assert.ifError(request.helloRequest)` checks if the decorator exists (should not error), `t.assert.ok(request.helloRequest, \"Hello World\")` checks its value, and `t.assert.ok(fastify.helloInstance, \"Hello Fastify Instance\")` checks the instance decorator. The original assertions for the status code and response body are retained.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Testing.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst Fastify = require(\"fastify\");\nconst { test }= require(\"node:test\");\nconst myPlugin = require(\"../plugin/myFirstPlugin\");\n\ntest(\"Test the Plugin Route\", async t => {\n    t.plan(5)\n    const fastify = Fastify()\n\n    fastify.register(myPlugin)\n\n    fastify.get(\"/\", async (request, reply) => {\n        // Testing the fastify decorators\n        t.assert.ifError(request.helloRequest)\n        t.assert.ok(request.helloRequest, \"Hello World\")\n        t.assert.ok(fastify.helloInstance, \"Hello Fastify Instance\")\n        return ({ message: request.helloRequest })\n    })\n\n    const fastifyResponse = await fastify.inject({\n        method: \"GET\",\n        url: \"/\"\n    })\n    t.assert.strictEqual(fastifyResponse.statusCode, 200)\n    t.assert.deepStrictEqual(JSON.parse(fastifyResponse.body), { message: \"Hello World\" })\n})\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom Properties in Fastify Requests\nDESCRIPTION: Shows how to use a hook to inject custom properties into incoming requests, allowing for easy access to processed data in controllers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify.addHook('preParsing', async (request) => {\n  request.authenticatedUser = {\n    id: 42,\n    name: 'Jane Doe',\n    role: 'admin'\n  }\n})\n\nfastify.get('/me/is-admin', async function (req, reply) {\n  return { isAdmin: req.authenticatedUser?.role === 'admin' || false }\n})\n```\n\n----------------------------------------\n\nTITLE: Returning Reply in Async Hooks Without Await\nDESCRIPTION: Illustrates the necessity of `return reply` in async `preHandler` hooks when `reply.send()` or similar asynchronous reply methods (like `reply.sendFile`) are called without `await`. This signals Fastify to wait for the response sent outside the main promise chain.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('preHandler', async (request, reply) => {\n  setImmediate(() => { reply.send('hello') })\n\n  // This is needed to signal the handler to wait for a response\n  // to be sent outside of the promise chain\n  return reply\n})\n\nfastify.addHook('preHandler', async (request, reply) => {\n  // the @fastify/static plugin will send a file asynchronously,\n  // so we should return reply\n  reply.sendFile('myfile')\n  return reply\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Route-level Hooks Using Fastify Generics - TypeScript\nDESCRIPTION: Shows how to extend Fastify generic route typing to hooks, specifically adding a preValidation hook that is typesafe thanks to generic definitions. The snippet enforces a rule in preValidation—rejecting requests unless the username equals 'admin', resulting in an error response. Dependencies: 'fastify', pre-defined interfaces. Input: GET request with 'username' query param; Output: HTTP 200 or HTTP 500 JSON error. Limitation: Only 'admin' is accepted, others cause server error.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nserver.get<{\n  Querystring: IQuerystring,\n  Headers: IHeaders,\n  Reply: IReply\n}>('/auth', {\n  preValidation: (request, reply, done) => {\n    const { username, password } = request.query\n    done(username !== 'admin' ? new Error('Must be admin') : undefined) // only validate `admin` account\n  }\n}, async (request, reply) => {\n  const customerHeader = request.headers['h-Custom']\n  // do something with request data\n  return `logged in!`\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts for Building and Running Fastify - JSON\nDESCRIPTION: This code block shows the \"scripts\" section to be added to package.json for building and running a Fastify TypeScript project. The 'build' script uses tsc to compile the project as per tsconfig.json, and the 'start' script runs the compiled server using Node.js. Requires 'typescript' and compiling entry file to index.js. Input: npm script commands; Output: triggers build or server start. Limitation: Assumes the main compiled file is index.js.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"tsc -p tsconfig.json\",\n    \"start\": \"node index.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using RequestGenericInterface to Type Request Properties in Fastify\nDESCRIPTION: Example of using the RequestGenericInterface to type dynamic request properties (body, params, query, headers) in Fastify. This interface allows developers to specify types for only the properties they want.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify, { RequestGenericInterface } from 'fastify'\n\nconst server = fastify()\n\ninterface requestGeneric extends RequestGenericInterface {\n  Querystring: {\n    name: string\n  }\n}\n\nserver.get<requestGeneric>('/', async (request, reply) => {\n  const { name } = request.query // the name prop now exists on the query prop\n  return name.toUpperCase()\n})\n```\n\n----------------------------------------\n\nTITLE: Testing a Fastify Plugin Route with Assertions using `node:test` in JavaScript\nDESCRIPTION: This snippet refines the previous test by incorporating assertions using `node:test`. It sets `t.plan(2)` to expect two assertions. After injecting the request using `fastify.inject()`, it uses `t.assert.strictEqual` to verify the status code is 200 and `t.assert.deepStrictEqual` to compare the parsed JSON response body with the expected object `{ message: \"Hello World\" }`. This provides a more robust test than simply logging the output.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Testing.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst Fastify = require(\"fastify\");\nconst { test } = require(\"node:test\");\nconst myPlugin = require(\"../plugin/myFirstPlugin\");\n\ntest(\"Test the Plugin Route\", async t => {\n    // Specifies the number of test\n    t.plan(2)\n\n    const fastify = Fastify()\n\n    fastify.register(myPlugin)\n\n    fastify.get(\"/\", async (request, reply) => {\n        return ({ message: request.helloRequest })\n    })\n\n    const fastifyResponse = await fastify.inject({\n        method: \"GET\",\n        url: \"/\"\n    })\n\n    t.assert.strictEqual(fastifyResponse.statusCode, 200)\n    t.assert.deepStrictEqual(JSON.parse(fastifyResponse.body), { message: \"Hello World\" })\n})\n```\n\n----------------------------------------\n\nTITLE: Safely Adding Routes within Fastify onRoute Hook\nDESCRIPTION: Provides a recommended pattern to avoid infinite loops when adding new routes from within an `onRoute` hook. It uses a Symbol (`kRouteAlreadyProcessed`) attached to the `routeOptions.custom` property to mark routes that have already been processed by the hook, preventing recursive registration.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nconst kRouteAlreadyProcessed = Symbol('route-already-processed')\n\nfastify.addHook('onRoute', function (routeOptions) {\n  const { url, method } = routeOptions\n\n  const isAlreadyProcessed = (routeOptions.custom && routeOptions.custom[kRouteAlreadyProcessed]) || false\n\n  if (!isAlreadyProcessed) {\n    this.route({\n      url,\n      method,\n      custom: {\n        [kRouteAlreadyProcessed]: true\n      },\n      handler: () => {}\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Error Response for Validation Errors\nDESCRIPTION: Demonstrates how to use setErrorHandler to create a custom response when validation errors occur. This allows for standardized error responses across the application.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.setErrorHandler(function (error, request, reply) {\n  if (error.validation) {\n     reply.status(422).send(new Error('validation failed'))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Content Type Parser Order and Precedence in Fastify\nDESCRIPTION: Illustrates the importance of parser registration order when dealing with overlapping content types. Shows how Fastify prioritizes content type matching using a last-in, first-out approach.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/ContentTypeParser.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Here only the second content type parser is called because its value also matches the first one\nfastify.addContentTypeParser('application/vnd.custom+xml', (request, body, done) => {} )\nfastify.addContentTypeParser('application/vnd.custom', (request, body, done) => {} )\n\n// Here the desired behavior is achieved because fastify first tries to match the\n// `application/vnd.custom+xml` content type parser\nfastify.addContentTypeParser('application/vnd.custom', (request, body, done) => {} )\nfastify.addContentTypeParser('application/vnd.custom+xml', (request, body, done) => {} )\n```\n\n----------------------------------------\n\nTITLE: Getting Server Addresses in Fastify\nDESCRIPTION: Demonstrates how to retrieve the addresses that the Fastify server is listening on using the addresses() method.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nawait fastify.listen({ port: 8080 })\nconst addresses = fastify.addresses()\n// [\n//   { port: 8080, family: 'IPv6', address: '::1' },\n//   { port: 8080, family: 'IPv4', address: '127.0.0.1' }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Fastify onListen Application Hook\nDESCRIPTION: Demonstrates using the `onListen` application hook with callback and async/await styles. This hook triggers sequentially when the server begins listening. Errors in hooks are logged but ignored. It does not run when using `fastify.inject()` or `fastify.ready()`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_28\n\nLANGUAGE: js\nCODE:\n```\n// callback style\nfastify.addHook('onListen', function (done) {\n  // Some code\n  const err = null;\n  done(err)\n})\n\n// or async/await style\nfastify.addHook('onListen', async function () {\n  // Some async code\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Ajv Options and Plugins in Fastify (JavaScript)\nDESCRIPTION: Demonstrates how to customize the internal Ajv v8 instance used by Fastify for schema validation. The `ajv` option allows setting `customOptions` (like `removeAdditional`) and adding Ajv `plugins` (like `ajv-merge-patch` and `ajv-keywords`) during Fastify initialization.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst fastify = require('fastify')({\n  ajv: {\n    customOptions: {\n      removeAdditional: 'all' // Refer to [ajv options](https://ajv.js.org/options.html#removeadditional)\n    },\n    plugins: [\n      require('ajv-merge-patch'),\n      [require('ajv-keywords'), 'instanceof']\n      // Usage: [plugin, pluginOptions] - Plugin with options\n      // Usage: plugin - Plugin without options\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Properties with trustProxy Enabled (JavaScript)\nDESCRIPTION: Shows how to access request properties like `ip`, `ips`, `host`, and `protocol` within a Fastify route handler. These properties are populated based on `X-Forwarded-*` headers when `trustProxy` is appropriately configured.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/', (request, reply) => {\n  console.log(request.ip)\n  console.log(request.ips)\n  console.log(request.host)\n  console.log(request.protocol)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in Fastify\nDESCRIPTION: Examples of different ways to perform HTTP redirects with optional status codes.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nreply.redirect('/home')\n\nreply.redirect('/home', 303)\n\nreply.code(303).redirect('/home')\n\nreply.code(303).redirect('/home', 302)\n```\n\n----------------------------------------\n\nTITLE: Plugin with Fastify-Plugin\nDESCRIPTION: Shows how to create a plugin using fastify-plugin to preserve scope and specify version compatibility.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Plugins.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst fp = require('fastify-plugin')\n\nmodule.exports = fp(function (fastify, opts, done) {\n  fastify.decorate('utility', function () {})\n  done()\n}, '0.x')\n```\n\n----------------------------------------\n\nTITLE: Encapsulation with Parent-Child Plugin Relationships\nDESCRIPTION: Example showing that encapsulation applies to ancestors and siblings but not to children. Child plugins can access decorators from parent plugins.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.register((instance, opts, done) => {\n  instance.decorate('util', (a, b) => a + b)\n  console.log(instance.util('that is ', 'awesome'))\n\n  fastify.register((instance, opts, done) => {\n    console.log(instance.util('that is ', 'awesome')) // This will not throw an error\n    done()\n  })\n\n  done()\n})\n\nfastify.register((instance, opts, done) => {\n  console.log(instance.util('that is ', 'awesome')) // This will throw an error\n\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Web API Response Object with Reply.send() in Fastify (JavaScript)\nDESCRIPTION: Illustrates sending a standard Web API `Response` object using `reply.send()`. This allows managing the payload (e.g., a `ReadableStream`), status code, and headers together. The payload within the `Response` object is considered pre-serialized and sent unmodified. Note that status and headers set on the `Response` object won't directly reflect on `reply.statusCode` or `reply.getHeaders()`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst fs = require('node:fs')\nconst { ReadableStream } = require('node:stream/web')\n\nfastify.get('/streams', function (request, reply) {\n  const stream = fs.createReadStream('some-file')\n  const readableStream = ReadableStream.from(stream)\n  const response = new Response(readableStream, {\n    status: 200,\n    headers: { 'content-type': 'application/octet-stream' }\n  })\n  reply.send(response)\n})\n```\n\n----------------------------------------\n\nTITLE: Using 'after' Hook with Promises in Fastify\nDESCRIPTION: Shows how to use the 'after' hook with Promises and async/await syntax to execute code after the current plugin and all its nested plugins have loaded.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.register(async (instance, opts) => {\n  console.log('Current plugin')\n})\n\nawait fastify.after()\nconsole.log('After current plugin')\n\nfastify.register(async (instance, opts) => {\n  console.log('Next plugin')\n})\n\nawait fastify.ready()\n\nconsole.log('Everything has been loaded')\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Framework Error Handler in Fastify (JavaScript)\nDESCRIPTION: Illustrates how to override Fastify's default handlers for specific framework errors using the `frameworkErrors` option. The example provides a custom function that checks the error type (e.g., `FST_ERR_BAD_URL`, `FST_ERR_ASYNC_CONSTRAINT`) and sends a specific response, falling back to a default error response otherwise.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst fastify = require('fastify')({\n  frameworkErrors: function (error, req, res) {\n    if (error instanceof FST_ERR_BAD_URL) {\n      res.code(400)\n      return res.send(\"Provided url is not valid\")\n    } else if(error instanceof FST_ERR_ASYNC_CONSTRAINT) {\n      res.code(400)\n      return res.send(\"Provided header is not valid\")\n    } else {\n      res.send(err)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Decorating Fastify Request Object with Custom Properties\nDESCRIPTION: An example showing how to add custom properties to the FastifyRequest object using decorateRequest and declaration merging. Also demonstrates how to type a request with custom body type.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from 'fastify'\n\nconst server = fastify()\n\nserver.decorateRequest('someProp', 'hello!')\n\nserver.get('/', async (request, reply) => {\n  const { someProp } = request // need to use declaration merging to add this prop to the request interface\n  return someProp\n})\n\n// this declaration must be in scope of the typescript interpreter to work\ndeclare module 'fastify' {\n  interface FastifyRequest { // you must reference the interface and not the type\n    someProp: string\n  }\n}\n\n// Or you can type your request using\ntype CustomRequest = FastifyRequest<{\n  Body: { test: boolean };\n}>\n\nserver.get('/typedRequest', async (request: CustomRequest, reply: FastifyReply) => {\n  return request.body.test\n})\n```\n\n----------------------------------------\n\nTITLE: String and Buffer Parser with parseAs Option in Fastify\nDESCRIPTION: Demonstrates using the parseAs option to handle request body parsing. This approach lets Fastify handle the stream management while you focus on the parsing logic, with automatic size limit enforcement.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/ContentTypeParser.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.addContentTypeParser('application/json', { parseAs: 'string' }, function (req, body, done) {\n  try {\n    const json = JSON.parse(body)\n    done(null, json)\n  } catch (err) {\n    err.statusCode = 400\n    done(err, undefined)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering an onSend Hook in Fastify (Callback - Modify Payload)\nDESCRIPTION: Demonstrates registering an 'onSend' hook using `fastify.addHook` with a callback to modify the response payload just before it's sent to the client. The modified payload (string, Buffer, stream, ReadableStream, Response, or null) must be passed to `done(err, newPayload)`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onSend', (request, reply, payload, done) => {\n  const err = null;\n  const newPayload = payload.replace('some-text', 'some-new-text')\n  done(err, newPayload)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Async Callbacks with await reply in Fastify (JavaScript)\nDESCRIPTION: Demonstrates using `await reply` within an `async` handler in Fastify. This pattern is necessary when `reply.send()` might be called asynchronously outside the main promise chain (e.g., within a `setImmediate` callback), ensuring the handler waits for the reply to be potentially sent before completing.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/', options, async function (request, reply) {\n  setImmediate(() => {\n    reply.send({ hello: 'world' })\n  })\n  await reply\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Fastify preClose Application Hook\nDESCRIPTION: Illustrates the usage of the `preClose` application hook (callback and async styles). This hook triggers when `fastify.close()` is called but *before* pending requests complete. It's intended for specific scenarios like releasing server state that might block shutdown, and `onClose` is generally preferred.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_30\n\nLANGUAGE: js\nCODE:\n```\n// callback style\nfastify.addHook('preClose', (done) => {\n  // Some code\n  done()\n})\n\n// or async/await style\nfastify.addHook('preClose', async () => {\n  // Some async code\n  await removeSomeServerState()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up an HTTPS Server with Fastify in TypeScript - Part 2\nDESCRIPTION: Configuration and implementation of an HTTPS server with Fastify, including setting up routes, configuring SSL certificates, and starting the server.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = fastify({\n  https: {\n    key: fs.readFileSync(path.join(__dirname, 'key.pem')),\n    cert: fs.readFileSync(path.join(__dirname, 'cert.pem'))\n  }\n})\n\nserver.get('/', async function (request, reply) {\n  return { hello: 'world' }\n})\n\nserver.listen({ port: 8080 }, (err, address) => {\n  if (err) {\n    console.error(err)\n    process.exit(0)\n  }\n  console.log(`Server listening at ${address}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Listen Text in Fastify\nDESCRIPTION: Shows how to customize the startup log message when the server starts listening using the listenTextResolver option.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nserver.listen({\n  port: 9080,\n  listenTextResolver: (address) => { return `Prometheus metrics server is listening at ${address}` }\n})\n```\n\n----------------------------------------\n\nTITLE: Sending TypedArrays with Reply.send() in Fastify (JavaScript)\nDESCRIPTION: Shows how to send a JavaScript TypedArray (e.g., `Uint16Array`) using `reply.send()`. Fastify handles TypedArrays similarly to Buffers, setting the `Content-Type` to `application/octet-stream` if not specified. The data is sent unmodified.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nconst fs = require('node:fs')\n\nfastify.get('/streams', function (request, reply) {\n  const typedArray = new Uint16Array(10)\n  reply.send(typedArray)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Async Callbacks with return reply in Fastify (JavaScript)\nDESCRIPTION: Provides an alternative to `await reply` for scenarios where `reply.send()` is called asynchronously outside the main promise chain (e.g., inside `setImmediate`). Returning `reply` from the `async` handler achieves the same goal of informing Fastify that the reply will be handled later, preventing premature response sending.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/', options, async function (request, reply) {\n  setImmediate(() => {\n    reply.send({ hello: 'world' })\n  })\n  return reply\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Streams with Async/Await using Reply.send() in Fastify (JavaScript)\nDESCRIPTION: Shows how to send a Node.js readable stream within an `async` route handler using `reply.send()`. It's necessary to `return` the result of `reply.send(stream)` to ensure Fastify correctly handles the asynchronous operation and stream piping. Requires the `node:fs` module.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nconst fs = require('node:fs')\n\nfastify.get('/streams', async function (request, reply) {\n  const stream = fs.createReadStream('some-file', 'utf8')\n  reply.header('Content-Type', 'application/octet-stream')\n  return reply.send(stream)\n})\n```\n\n----------------------------------------\n\nTITLE: Using getValidationFunction in Fastify\nDESCRIPTION: Examples of using getValidationFunction to validate input data against a schema or specific HTTP part. Shows both direct schema validation and body validation approaches.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Request.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst validate = request\n                  .getValidationFunction({\n                    type: 'object',\n                    properties: {\n                      foo: {\n                        type: 'string'\n                      }\n                    }\n                  })\nconsole.log(validate({ foo: 'bar' })) // true\nconsole.log(validate.errors) // null\n\n// or\n\nconst validate = request\n                  .getValidationFunction('body')\nconsole.log(validate({ foo: 0.5 })) // false\nconsole.log(validate.errors) // validation errors\n```\n\n----------------------------------------\n\nTITLE: Defining onCloseHookHandler in TypeScript for Fastify Server Shutdown\nDESCRIPTION: Type definition for a hook that triggers when fastify.close() is invoked to stop the server. This hook is particularly useful for plugins that need to perform cleanup operations such as closing database connections during server shutdown.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\nfastify.onCloseHookHandler< [RawServer][RawServerGeneric], [RawRequest][RawRequestGeneric], [RawReply][RawReplyGeneric], [Logger][LoggerGeneric]>(instance: [FastifyInstance][FastifyInstance], done: (err?: [FastifyError][FastifyError]) => void): Promise\\<unknown\\> | void\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeBox-Validated Fastify Route - TypeScript\nDESCRIPTION: This code creates a Fastify POST route using TypeBox for request/response schema validation and strict TypeScript typing. It ensures both request.body and the reply match the User schema/type. The route handler extracts and returns the typed fields. Dependencies: 'fastify', '@sinclair/typebox', User schema and UserType. Input: POST JSON body matching UserType; Output: 200 OK with echoed user data. Limitation: Only valid objects passing JSON schema validation are accepted.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport Fastify from 'fastify'\n// ...\n\nconst fastify = Fastify()\n\nfastify.post<{ Body: UserType, Reply: UserType }>(\n  '/',\n  {\n    schema: {\n      body: User,\n      response: {\n        200: User\n      },\n    },\n  },\n  (request, reply) => {\n    // The `name` and `mail` types are automatically inferred\n    const { name, mail } = request.body;\n    reply.status(200).send({ name, mail });\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Halting Request Lifecycle with Reply.hijack() in Fastify (JavaScript)\nDESCRIPTION: Illustrates the use of `reply.hijack()` to stop the standard Fastify request lifecycle before `reply.send()` is automatically called. This allows for manual response handling using `reply.raw`. If the handler is async or returns a promise, the promise resolution will be ignored after hijacking. `onResponse` hooks will still run if `reply.raw` is used.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\napp.get('/', (req, reply) => {\n  reply.hijack()\n  reply.raw.end('hello world')\n\n  return Promise.resolve('this will be skipped')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Reply Serializer in Fastify\nDESCRIPTION: Demonstrates how to set a custom reply serializer for all routes using setReplySerializer(). This function will be used as the default serializer for successful responses with status codes in the 2xx range.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.setReplySerializer(function (payload, statusCode){\n  // serialize the payload with a sync function\n  return `my serialized ${statusCode} content: ${payload}`\n})\n```\n\n----------------------------------------\n\nTITLE: Distributing Fastify Plugins with fastify-plugin - JavaScript\nDESCRIPTION: The code demonstrates usage of the fastify-plugin module to distribute a Fastify plugin that manages database connectivity, ensuring asynchronous capabilities during bootstrapping.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fp = require('fastify-plugin')\nconst dbClient = require('db-client')\n\nfunction dbPlugin (fastify, opts, done) {\n  dbClient.connect(opts.url, (err, conn) => {\n    fastify.decorate('db', conn)\n    done()\n  })\n}\n\nmodule.exports = fp(dbPlugin)\n```\n\n----------------------------------------\n\nTITLE: Configuring HAProxy for Fastify\nDESCRIPTION: This snippet demonstrates setting up HAProxy to manage Fastify applications with TLS termination, domain-specific routing, and static resource handling. It requires HAProxy to be installed and accessible server IPs for backend services.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Recommendations.md#2025-04-22_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\n# The global section defines base HAProxy (engine) instance configuration.\nglobal\n  log /dev/log syslog\n  maxconn 4096\n  chroot /var/lib/haproxy\n  user haproxy\n  group haproxy\n\n  # Set some baseline TLS options.\n  tune.ssl.default-dh-param 2048\n  ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11\n  ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS\n  ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11\n  ssl-default-server-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS\n\n# Each defaults section defines options that will apply to each subsequent\n# subsection until another defaults section is encountered.\ndefaults\n  log   global\n  mode  http\n  option        httplog\n  option        dontlognull\n  retries       3\n  option redispatch\n  # The following option makes haproxy close connections to backend servers\n  # instead of keeping them open. This can alleviate unexpected connection\n  # reset errors in the Node process.\n  option http-server-close\n  maxconn       2000\n  timeout connect 5000\n  timeout client 50000\n  timeout server 50000\n\n  # Enable content compression for specific content types.\n  compression algo gzip\n  compression type text/html text/plain text/css application/javascript\n\n# A \"frontend\" section defines a public listener, i.e. an \"http server\"\n# as far as clients are concerned.\nfrontend proxy\n  # The IP address here would be the _public_ IP address of the server.\n  # Here, we use a private address as an example.\n  bind 10.0.0.10:80\n  # This redirect rule will redirect all traffic that is not TLS traffic\n  # to the same incoming request URL on the HTTPS port.\n  redirect scheme https code 308 if !{ ssl_fc }\n  # Technically this use_backend directive is useless since we are simply\n  # redirecting all traffic to this frontend to the HTTPS frontend. It is\n  # merely included here for completeness sake.\n  use_backend default-server\n\n# This frontend defines our primary, TLS only, listener. It is here where\n# we will define the TLS certificates to expose and how to direct incoming\n# requests.\nfrontend proxy-ssl\n  # The `/etc/haproxy/certs` directory in this example contains a set of\n  # certificate PEM files that are named for the domains the certificates are\n  # issued for. When HAProxy starts, it will read this directory, load all of\n  # the certificates it finds here, and use SNI matching to apply the correct\n  # certificate to the connection.\n  bind 10.0.0.10:443 ssl crt /etc/haproxy/certs\n\n  # Here we define rule pairs to handle static resources. Any incoming request\n  # that has a path starting with `/static`, e.g.\n  # `https://one.example.com/static/foo.jpeg`, will be redirected to the\n  # static resources server.\n  acl is_static path -i -m beg /static\n  use_backend static-backend if is_static\n\n  # Here we define rule pairs to direct requests to appropriate Node.js\n  # servers based on the requested domain. The `acl` line is used to match\n  # the incoming hostname and define a boolean indicating if it is a match.\n  # The `use_backend` line is used to direct the traffic if the boolean is\n  # true.\n  acl example1 hdr_sub(Host) one.example.com\n  use_backend example1-backend if example1\n\n  acl example2 hdr_sub(Host) two.example.com\n  use_backend example2-backend if example2\n\n  # Finally, we have a fallback redirect if none of the requested hosts\n  # match the above rules.\n  default_backend default-server\n\n# A \"backend\" is used to tell HAProxy where to request information for the\n# proxied request. These sections are where we will define where our Node.js\n# apps live and any other servers for things like static assets.\nbackend default-server\n  # In this example we are defaulting unmatched domain requests to a single\n  # backend server for all requests. Notice that the backend server does not\n  # have to be serving TLS requests. This is called \"TLS termination\": the TLS\n  # connection is \"terminated\" at the reverse proxy.\n  # It is possible to also proxy to backend servers that are themselves serving\n  # requests over TLS, but that is outside the scope of this example.\n  server server1 10.10.10.2:80\n\n# This backend configuration will serve requests for `https://one.example.com`\n# by proxying requests to three backend servers in a round-robin manner.\nbackend example1-backend\n  server example1-1 10.10.11.2:80\n  server example1-2 10.10.11.2:80\n  server example2-2 10.10.11.3:80\n\n# This one serves requests for `https://two.example.com`\nbackend example2-backend\n  server example2-1 10.10.12.2:80\n  server example2-2 10.10.12.2:80\n  server example2-3 10.10.12.3:80\n\n# This backend handles the static resources requests.\nbackend static-backend\n  server static-server1 10.10.9.2:80\n\n```\n\n----------------------------------------\n\nTITLE: Registering an onResponse Hook in Fastify (Callback)\nDESCRIPTION: Shows how to register an 'onResponse' hook using `fastify.addHook` with a callback. This hook executes *after* the response has been sent to the client. It's useful for cleanup, logging, or sending metrics, but cannot modify the response.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onResponse', (request, reply, done) => {\n  // Some code\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Risks of Directly Accessing Potentially Missing Decorators (TypeScript)\nDESCRIPTION: Illustrates the potential ambiguity when directly accessing a request decorator (`request.user`) that might not be declared. If `request.user` is missing, the variable `user` becomes `undefined`, making it hard to distinguish between an unauthenticated user and a missing decorator.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst user = request.user;\nif (user && user.isAdmin) {\n  // Execute admin tasks.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Triggering Logs Outside Route Handlers in Fastify (JavaScript)\nDESCRIPTION: This code demonstrates how to trigger new logs outside of route handlers using the Pino instance from the Fastify instance.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Logging.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.log.info('Something important happened!');\n```\n\n----------------------------------------\n\nTITLE: Validating Input in Fastify JavaScript\nDESCRIPTION: The validateInput function in Fastify checks inputs according to a provided schema or HTTP part such as 'query' or 'body'. If both are specified, the HTTP part takes priority. It returns a Boolean indicating validation success. Dependencies include a valid JSON schema and optional HTTP status strings. Inputs include a data object and either a schema or an HTTP part name. The function requires Fastify to have been set up with appropriate routes and validation mechanisms.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Request.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequest\n  .validateInput({ foo: 'bar'}, {\n    type: 'object',\n    properties: {\n      foo: {\n        type: 'string'\n      }\n    }\n  }) // true\n\n// or\n\nrequest\n  .validateInput({ foo: 'bar'}, {\n    type: 'object',\n    properties: {\n      foo: {\n        type: 'string'\n      }\n    }\n  }, 'body') // true\n\n// or\n\nrequest\n  .validateInput({ hello: 'world'}, 'query') // false\n```\n\n----------------------------------------\n\nTITLE: Using Hooks for Request Handling in Fastify - JavaScript\nDESCRIPTION: This code uses a Fastify preHandler hook to run a utility function for every incoming request, improving code modularity and readability by eliminating duplicated logic across routes.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify.decorate('util', (request, key, value) => { request[key] = value })\n\nfastify.addHook('preHandler', (request, reply, done) => {\n  fastify.util(request, 'timestamp', new Date())\n  done()\n})\n\nfastify.get('/plugin1', (request, reply) => {\n  reply.send(request)\n})\n\nfastify.get('/plugin2', (request, reply) => {\n  reply.send(request)\n})\n```\n\n----------------------------------------\n\nTITLE: Sending a Stream Response from a Fastify Hook\nDESCRIPTION: Shows how to respond with a file stream from an `onRequest` hook using Node.js `fs.createReadStream`. It's recommended to avoid `async` functions for hooks sending streams unless necessary, following specific patterns if `async` is used.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onRequest', (request, reply, done) => {\n  const stream = fs.createReadStream('some-file', 'utf8')\n  reply.send(stream)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Host Constraints in Fastify Routes\nDESCRIPTION: Demonstrates using host constraints to limit routes to specific values of the request Host header. This example shows both exact string matching and RegExp-based host matching.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.route({\n  method: 'GET',\n  url: '/',\n  constraints: { host: 'auth.fastify.dev' },\n  handler: function (request, reply) {\n    reply.send('hello world from auth.fastify.dev')\n  }\n})\n\nfastify.inject({\n  method: 'GET',\n  url: '/',\n  headers: {\n    'Host': 'example.com'\n  }\n}, (err, res) => {\n  // 404 because the host doesn't match the constraint\n})\n\nfastify.inject({\n  method: 'GET',\n  url: '/',\n  headers: {\n    'Host': 'auth.fastify.dev'\n  }\n}, (err, res) => {\n  // => 'hello world from auth.fastify.dev'\n})\n```\n\n----------------------------------------\n\nTITLE: Coercing Query String Arrays with Default Ajv Options in Fastify (JavaScript & Shell)\nDESCRIPTION: This pair demonstrates defining an array-typed query string parameter in Fastify using JSON Schema and shows how Ajv coalesces query parameter values into arrays. The Fastify GET endpoint echoes back the parsed query, and the corresponding curl command illustrates invocation and the resulting response. Dependencies are Fastify and Ajv. It highlights the use of a default empty array and type coercion in Fastify request parsing.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst opts = {\n  schema: {\n    querystring: {\n      type: 'object',\n      properties: {\n        ids: {\n          type: 'array',\n          default: []\n        },\n      },\n    }\n  }\n}\n\nfastify.get('/', opts, (request, reply) => {\n  reply.send({ params: request.query }) // echo the querystring\n})\n\nfastify.listen({ port: 3000 }, (err) => {\n  if (err) throw err\n})\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -X GET \"http://localhost:3000/?ids=1\n\n{\"params\":{\"ids\":[\"1\"]}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Fastify\nDESCRIPTION: This Nginx configuration handles load balancing and SSL termination for Fastify applications. Dependencies include having Nginx installed and reachable backend Fastify servers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Recommendations.md#2025-04-22_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\n# This upstream block groups 3 servers into one named backend fastify_app\n# with 2 primary servers distributed via round-robin\n# and one backup which is used when the first 2 are not reachable\n# This also assumes your fastify servers are listening on port 80.\n# more info: https://nginx.org/en/docs/http/ngx_http_upstream_module.html\nupstream fastify_app {\n  server 10.10.11.1:80;\n  server 10.10.11.2:80;\n  server 10.10.11.3:80 backup;\n}\n\n# This server block asks NGINX to respond with a redirect when\n# an incoming request from port 80 (typically plain HTTP), to\n# the same request URL but with HTTPS as protocol.\n# This block is optional, and usually used if you are handling\n# SSL termination in NGINX, like in the example here.\nserver {\n  # default server is a special parameter to ask NGINX\n  # to set this server block to the default for this address/port\n  # which in this case is any address and port 80\n  listen 80 default_server;\n  listen [::]:80 default_server;\n\n  # With a server_name directive you can also ask NGINX to\n  # use this server block only with matching server name(s)\n  # listen 80;\n  # listen [::]:80;\n  # server_name example.tld;\n\n  # This matches all paths from the request and responds with\n  # the redirect mentioned above.\n  location / {\n    return 301 https://$host$request_uri;\n  }\n}\n\n# This server block asks NGINX to respond to requests from\n# port 443 with SSL enabled and accept HTTP/2 connections.\n# This is where the request is then proxied to the fastify_app\n\n```\n\n----------------------------------------\n\nTITLE: Using 'qs' as a Custom Querystring Parser in Fastify (JavaScript)\nDESCRIPTION: Illustrates configuring Fastify to use the 'qs' library for parsing query strings instead of the default parser. This requires the 'qs' package and involves setting the `querystringParser` option during Fastify initialization to a function that calls `qs.parse`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst qs = require('qs')\nconst fastify = require('fastify')({\n  querystringParser: str => qs.parse(str)\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Fastify Server with Specific Address\nDESCRIPTION: Shows how to start a Fastify server listening on a specific port and IP address with callback-based error handling.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.listen({ port: 3000, host: '127.0.0.1' }, (err, address) => {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Early Hints Implementation\nDESCRIPTION: Demonstrates how to send early hints to improve client-side performance by preloading resources.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nreply.writeEarlyHints({\n  Link: '</styles.css>; rel=preload; as=style'\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Routes and Custom JSON Parser in Fastify for Firebase Functions (JavaScript)\nDESCRIPTION: Defines an async function `registerRoutes` for a Fastify instance deployed on Firebase Functions. It adds a custom `contentTypeParser` for `application/json` to access the raw request body (`payload.rawBody`) and attach it to the `req` object, which is useful for signature validation in webhooks. It uses the pre-parsed JSON (`payload.body`) from Firebase for the route handler and includes placeholder POST and GET routes.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nasync function registerRoutes (fastify) {\n  fastify.addContentTypeParser(\"application/json\", {}, (req, payload, done) => {\n    // useful to include the request's raw body on the `req` object that will\n    // later be available in your other routes so you can calculate the HMAC\n    // if needed\n    req.rawBody = payload.rawBody\n\n    // payload.body is already the parsed JSON so we just fire the done callback\n    // with it\n    done(null, payload.body)\n  })\n\n  // define your endpoints here...\n  fastify.post(\"/some-route-here\", async (request, reply) => {})\n\n  fastify.get('/', async (request, reply) => {\n    reply.send({message: 'Hello World!'})\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Runtime Safety with request.getDecorator (TypeScript)\nDESCRIPTION: Shows how using `request.getDecorator('user')` provides runtime safety. If the 'user' decorator is not declared on the request object, Fastify throws an explicit `FST_ERR_DEC_UNDECLARED` error immediately, preventing unexpected behavior.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// If the decorator is missing, an explicit `FST_ERR_DEC_UNDECLARED` \n// error is thrown immediately.\nconst user = request.getDecorator('user');\nif (user && user.isAdmin) {\n  // Execute admin tasks.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Semicolon Delimiter for Query Strings in Fastify (JavaScript)\nDESCRIPTION: Demonstrates how to enable the use of semicolons (`;`) as delimiters between the URL path and query string in Fastify. By setting the `useSemicolonDelimiter` option to `true` during initialization, requests like `/dev;foo=bar` will correctly parse `foo=bar` into `request.query`. The example includes a route handler showing the resulting `request.query`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst fastify = require('fastify')({\n  useSemicolonDelimiter: true\n})\n\nfastify.get('/dev', async (request, reply) => {\n  // An example request such as `/dev;foo=bar`\n  // Will produce the following query params result `{ foo = 'bar' }`\n  return request.query\n})\n```\n\n----------------------------------------\n\nTITLE: Checking for Registered Plugins in Fastify\nDESCRIPTION: Demonstrates how to use the hasPlugin method to check if a specific plugin has been registered by its metadata name.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')()\nfastify.register(require('@fastify/cookie'), {\n  secret: 'my-secret',\n  parseOptions: {}\n})\n\nfastify.ready(() => {\n  fastify.hasPlugin('@fastify/cookie') // true\n})\n```\n\n----------------------------------------\n\nTITLE: Checking if a Route Exists in Fastify\nDESCRIPTION: Demonstrates how to use the hasRoute method to check if a specific route is already registered, with optional version constraints.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst routeExists = fastify.hasRoute({\n  url: '/',\n  method: 'GET',\n  constraints: { version: '1.0.0' } // optional\n})\n\nif (routeExists === false) {\n  // add route\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreDuplicateSlashes in Fastify JavaScript\nDESCRIPTION: Illustrates initializing Fastify with `ignoreDuplicateSlashes` set to `true`. This setting instructs Fastify to normalize paths containing multiple consecutive slashes (e.g., `///foo//bar//`) into a path with single slashes (`/foo/bar/`) before matching routes. Requires the `fastify` module.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst fastify = require('fastify')({\n  ignoreDuplicateSlashes: true\n})\n\n// registers \"/foo/bar/\"\nfastify.get('///foo//bar//', function (req, reply) {\n  reply.send('foo')\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Async/Await Plugin Registration\nDESCRIPTION: Demonstrates using async/await syntax for plugin registration and server operations.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait fastify.register(require('my-plugin'))\n\nawait fastify.after()\n\nawait fastify.ready()\n\nawait fastify.listen({ port: 3000 })\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing Content Type Parsers in Fastify\nDESCRIPTION: Shows how to use the hasContentTypeParser API to check if a specific content type parser is already registered before adding a new one. This helps prevent duplicate parser registrations.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/ContentTypeParser.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (!fastify.hasContentTypeParser('application/jsoff')){\n  fastify.addContentTypeParser('application/jsoff', function (request, payload, done) {\n    jsoffParser(payload, function (err, body) {\n      done(err, body)\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an onError Hook in Fastify (Callback)\nDESCRIPTION: Shows how to register an 'onError' hook using `fastify.addHook` with a callback. This hook executes after an error occurs and the error handler has run, primarily for logging or adding specific headers during errors. It cannot be used to modify the error or send a response. Passing an error to `done` is not supported.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onError', (request, reply, error, done) => {\n  // Some code\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Testing with Undici HTTP Client\nDESCRIPTION: Demonstrates testing a running Fastify server using the Undici HTTP client, including proper cleanup of server and client connections.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Testing.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test } = require('node:test')\nconst { Client } = require('undici')\nconst buildFastify = require('./app')\n\ntest('should work with undici', async t => {\n  t.plan(2)\n\n  const fastify = buildFastify()\n\n  await fastify.listen()\n\n   const client = new Client(\n    'http://localhost:' + fastify.server.address().port, {\n      keepAliveTimeout: 10,\n      keepAliveMaxTimeout: 10\n    }\n  )\n\n  t.after(() => {\n    fastify.close()\n    client.close()\n  })\n\n  const response = await client.request({ method: 'GET', path: '/' })\n\n  t.assert.strictEqual(await response.body.text(), '{\"hello\":\"world\"}')\n  t.assert.strictEqual(response.statusCode, 200)\n})\n```\n\n----------------------------------------\n\nTITLE: Default Client Error Handler Structure in Fastify (JavaScript)\nDESCRIPTION: Shows the structure and logic of the default `clientErrorHandler` function in Fastify. This function handles 'error' events on client sockets, typically sending a 400 Bad Request response, while ignoring 'ECONNRESET' errors. It checks if the socket is writable before attempting to send the HTTP response.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nfunction defaultClientErrorHandler (err, socket) {\n  if (err.code === 'ECONNRESET') {\n    return\n  }\n\n  const body = JSON.stringify({\n    error: http.STATUS_CODES['400'],\n    message: 'Client Error',\n    statusCode: 400\n  })\n  this.log.trace({ err }, 'client error')\n\n  if (socket.writable) {\n    socket.end([\n      'HTTP/1.1 400 Bad Request',\n      `Content-Length: ${body.length}`,\n      `Content-Type: application/json\\r\\n\\r\\n${body}`\n    ].join('\\r\\n'))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fastify onClose Application Hook\nDESCRIPTION: Shows how to use the `onClose` application hook (callback and async styles) to perform cleanup tasks when `fastify.close()` is called, after all requests have completed. The hook receives the Fastify instance and a `done` callback (for synchronous style). Useful for closing database connections.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_29\n\nLANGUAGE: js\nCODE:\n```\n// callback style\nfastify.addHook('onClose', (instance, done) => {\n  // Some code\n  done()\n})\n\n// or async/await style\nfastify.addHook('onClose', async (instance) => {\n  // Some async code\n  await closeDatabaseConnections()\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify with npm\nDESCRIPTION: Command to install Fastify using npm package manager.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i fastify\n```\n\n----------------------------------------\n\nTITLE: Sending Buffers with Async/Await using Reply.send() in Fastify (JavaScript)\nDESCRIPTION: Illustrates sending a Node.js Buffer within an `async` route handler using `reply.send()` inside a callback. Requires the `node:fs` module. It's necessary to `return reply` after initiating the asynchronous file read and calling `reply.send` within its callback to signal Fastify that the reply is being handled asynchronously.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nconst fs = require('node:fs')\n\nfastify.get('/streams', async function (request, reply) {\n  fs.readFile('some-file', (err, fileBuffer) => {\n    reply.send(err || fileBuffer)\n  })\n  return reply\n})\n```\n\n----------------------------------------\n\nTITLE: Path-Restricted Middleware Implementation\nDESCRIPTION: Demonstrates how to configure middleware to run only on specific paths, including single paths, wildcard paths, and multiple paths. Uses serve-static as an example middleware.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Middleware.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('node:path')\nconst serveStatic = require('serve-static')\n\n// Single path\nfastify.use('/css', serveStatic(path.join(__dirname, '/assets')))\n\n// Wildcard path\nfastify.use('/css/(.*)', serveStatic(path.join(__dirname, '/assets')))\n\n// Multiple paths\nfastify.use(['/css', '/js'], serveStatic(path.join(__dirname, '/assets')))\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreTrailingSlash in Fastify JavaScript\nDESCRIPTION: Demonstrates initializing Fastify with `ignoreTrailingSlash` set to `true`. This configuration makes Fastify register both `/foo/` and `/foo` (and similarly `/bar` and `/bar/`) to the same route handler, effectively ignoring the trailing slash in incoming requests. Requires the `fastify` module.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst fastify = require('fastify')({\n  ignoreTrailingSlash: true\n})\n\n// registers both \"/foo\" and \"/foo/\"\nfastify.get('/foo/', function (req, reply) {\n  reply.send('foo')\n})\n\n// registers both \"/bar\" and \"/bar/\"\nfastify.get('/bar', function (req, reply) {\n  reply.send('bar')\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Registration in Fastify\nDESCRIPTION: Shows the basic syntax for registering a plugin in Fastify using the register API.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.register(plugin, [options])\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Child Logger Factory in Fastify\nDESCRIPTION: Demonstrates how to set a custom child logger factory function that adds additional context to request logs. The example adds trace context from request headers to logger bindings.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')({\n  childLoggerFactory: function (logger, bindings, opts, rawReq) {\n    // Calculate additional bindings from the request if needed\n    bindings.traceContext = rawReq.headers['x-cloud-trace-context']\n    return logger.child(bindings, opts)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Yup Validation Integration in Fastify\nDESCRIPTION: Implementation of Yup validation library with options matching Ajv's baseline configuration.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst yup = require('yup')\nconst yupOptions = {\n  strict: false,\n  abortEarly: false, // return all errors\n  stripUnknown: true, // remove additional properties\n  recursive: true\n}\n\nfastify.post('/the/url', {\n  schema: {\n    body: yup.object({\n      age: yup.number().integer().required(),\n      sub: yup.object().shape({\n        name: yup.string().required()\n      }).required()\n    })\n  },\n  validatorCompiler: ({ schema, method, url, httpPart }) => {\n    return function (data) {\n      try {\n        const result = schema.validateSync(data, yupOptions)\n        return { value: result }\n      } catch (e) {\n        return { error: e }\n      }\n    }\n  }\n}, handler)\n```\n\n----------------------------------------\n\nTITLE: Cross-Plugin Dependencies in Fastify - JavaScript\nDESCRIPTION: This snippet explains how to pass dependencies between plugins using functions, demonstrating implementation with a database plugin and another plugin relying on the connection it creates.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fastify = require('fastify')()\nconst fp = require('fastify-plugin')\nconst dbClient = require('db-client')\n\nfunction dbPlugin (fastify, opts, done) {\n  dbClient.connect(opts.url, (err, conn) => {\n    fastify.decorate('db', conn)\n    done()\n  })\n}\n\nfastify.register(fp(dbPlugin), { url: 'https://example.com' })\nfastify.register(require('your-plugin'), parent => {\n  return { connection: parent.db, otherOption: 'foo-bar' }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Error Formatter in Fastify\nDESCRIPTION: Shows how to customize schema validation error formatting using either the Fastify constructor option or the setSchemaErrorFormatter method. The formatter receives validation errors and the data variable being validated.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = Fastify({\n  schemaErrorFormatter: (errors, dataVar) => {\n    // ... my formatting logic\n    return new Error(myErrorMessage)\n  }\n})\n\n// or\nfastify.setSchemaErrorFormatter(function (errors, dataVar) {\n  this.log.error({ err: errors }, 'Validation failed')\n  // ... my formatting logic\n  return new Error(myErrorMessage)\n})\n```\n\n----------------------------------------\n\nTITLE: Fastify Request Lifecycle Hooks\nDESCRIPTION: Collection of hook handler interfaces for the complete request lifecycle, from onRequest through onResponse.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nfastify.onRequestHookHandler<RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig>\nfastify.preParsingHookHandler<RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig>\nfastify.preValidationHookHandler<RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig>\nfastify.preHandlerHookHandler<RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig>\nfastify.preSerializationHookHandler<PreSerializationPayload, RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig>\nfastify.onSendHookHandler<OnSendPayload, RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig>\nfastify.onResponseHookHandler<RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig>\nfastify.onErrorHookHandler<RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig>\n```\n\n----------------------------------------\n\nTITLE: Removing All Content Type Parsers in Fastify\nDESCRIPTION: Shows how to use removeAllContentTypeParsers API to clear all existing parsers before adding new ones. This is useful when implementing a custom parser system that should replace the built-in parsers completely.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/ContentTypeParser.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.removeAllContentTypeParsers()\n\nfastify.addContentTypeParser('text/xml', function (request, payload, done) {\n  xmlParser(payload, function (err, body) {\n    done(err, body)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Not Found Handler with setNotFoundHandler in Fastify (JavaScript)\nDESCRIPTION: Shows how to define a custom handler for 404 Not Found errors using `fastify.setNotFoundHandler`. This allows customizing the response (status code, content type, body) when the router doesn't find a matching route for the incoming request.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nfastify.setNotFoundHandler(function (request, reply) {\n  reply\n    .code(404)\n    .type('text/plain')\n    .send('a custom not found')\n})\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Objects with Reply.send() in Fastify (JavaScript)\nDESCRIPTION: Shows how to send a JavaScript object as a JSON response using `reply.send()`. Fastify automatically serializes the object using `fast-json-stringify` if an output schema is defined, or `JSON.stringify()` otherwise. The `Content-Type` header is typically set to `application/json`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/json', options, function (request, reply) {\n  reply.send({ hello: 'world' })\n})\n```\n\n----------------------------------------\n\nTITLE: Encapsulation with Hooks for Selected Routes in Fastify - JavaScript\nDESCRIPTION: This snippet shows how to use encapsulation in Fastify to apply a utility function to a subset of routes, optimizing route-specific logic handling with a preHandler hook.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify.register((instance, opts, done) => {\n  instance.decorate('util', (request, key, value) => { request[key] = value })\n\n  instance.addHook('preHandler', (request, reply, done) => {\n    instance.util(request, 'timestamp', new Date())\n    done()\n  })\n\n  instance.get('/plugin1', (request, reply) => {\n    reply.send(request)\n  })\n\n  done()\n})\n\nfastify.get('/plugin2', (request, reply) => {\n  reply.send(request)\n})\n```\n\n----------------------------------------\n\nTITLE: Reusing Schemas with $ref-way in Fastify\nDESCRIPTION: This example shows how to reuse schemas in Fastify using the $ref-way approach. It demonstrates creating addressSchema, adding it to common schemas, and then referencing it in the body schema using S.ref().\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Fluent-Schema.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst addressSchema = S.object()\n  .id('#address')\n  .prop('line1').required()\n  .prop('line2')\n  .prop('country').required()\n  .prop('city').required()\n  .prop('zipcode').required()\n\nconst commonSchemas = S.object()\n  .id('https://fastify/demo')\n  .definition('addressSchema', addressSchema)\n  .definition('otherSchema', otherSchema) // You can add any schemas you need\n\nfastify.addSchema(commonSchemas)\n\nconst bodyJsonSchema = S.object()\n  .prop('residence', S.ref('https://fastify/demo#address')).required()\n  .prop('office', S.ref('https://fastify/demo#/definitions/addressSchema')).required()\n\nconst schema = { body: bodyJsonSchema }\n\nfastify.post('/the/url', { schema }, handler)\n```\n\n----------------------------------------\n\nTITLE: Registering an onTimeout Hook in Fastify (Async/Await)\nDESCRIPTION: Demonstrates registering an 'onTimeout' hook using `fastify.addHook` with an `async` function. This hook triggers when a request times out. It's useful for monitoring or logging timed-out requests, but cannot interact with the client.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onTimeout', async (request, reply) => {\n  // Some code\n  await asyncMethod()\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Extension for Custom Properties in Fastify\nDESCRIPTION: Demonstrates how to extend the FastifyRequest interface in TypeScript to include custom property typing for injected properties.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AuthenticatedUser { /* ... */ }\n\ndeclare module 'fastify' {\n  export interface FastifyRequest {\n    authenticatedUser?: AuthenticatedUser;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using $ref to $id in Same JSON Schema\nDESCRIPTION: Shows how to reference a schema definition within the same schema using $ref to a $id. This enables reuse of schema components within a single schema.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst refToId = {\n  type: 'object',\n  definitions: {\n    foo: {\n      $id: '#address',\n      type: 'object',\n      properties: {\n        city: { type: 'string' }\n      }\n    }\n  },\n  properties: {\n    home: { $ref: '#address' },\n    work: { $ref: '#address' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Multiple Regex Parameters in a Single Segment in Fastify (JavaScript)\nDESCRIPTION: Demonstrates defining a GET route with multiple parameters (`:hour`, `:minute`), each matching a specific regular expression (`^\\\\d{2}`), within the same URL segment. Non-matching characters (`h`, `m`) act as separators. Parameters are accessed via `request.params`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/example/at/:hour(^\\\\d{2})h:minute(^\\\\d{2})m', function (request, reply) {\n  // curl ${app-url}/example/at/08h24m\n  // hour === \"08\"\n  // minute === \"24\"\n  const { hour, minute } = request.params;\n  // your code here\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TypeBox Type Provider with npm\nDESCRIPTION: Command for installing the TypeBox type provider package using npm.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Type-Providers.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @fastify/type-provider-typebox\n```\n\n----------------------------------------\n\nTITLE: Registering an onTimeout Hook in Fastify (Callback)\nDESCRIPTION: Demonstrates registering an 'onTimeout' hook using `fastify.addHook` with a callback. This hook executes if a request times out based on the server's `connectionTimeout` setting. The connection is already closed, so no response can be sent.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onTimeout', (request, reply, done) => {\n  // Some code\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Async Route with Uncaught Error in Fastify\nDESCRIPTION: Example of an asynchronous route handler that throws an uncaught error, which Fastify will safely catch and route to its default error handler, resulting in a 500 Internal Server Error response.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Errors.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/', async () => { throw new Error('kaboom') })\n```\n\n----------------------------------------\n\nTITLE: Sending Streams with Reply.send() in Fastify (JavaScript)\nDESCRIPTION: Illustrates sending a Node.js readable stream (e.g., from a file) using `reply.send()`. Requires the `node:fs` module. If the `Content-Type` header is not set, it defaults to `application/octet-stream`. Stream data is sent unmodified and bypasses response validation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nconst fs = require('node:fs')\n\nfastify.get('/streams', function (request, reply) {\n  const stream = fs.createReadStream('some-file', 'utf8')\n  reply.header('Content-Type', 'application/octet-stream')\n  reply.send(stream)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Serialization Functions in Fastify\nDESCRIPTION: Examples of getting and using serialization functions with different schemas and content types.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst serialize = reply\n                  .getSerializationFunction({\n                    type: 'object',\n                    properties: {\n                      foo: {\n                        type: 'string'\n                      }\n                    }\n                  })\nserialize({ foo: 'bar' }) // '{\"foo\":\"bar\"}'\n\n// or\n\nconst serialize = reply\n                  .getSerializationFunction(200)\nserialize({ foo: 'bar' }) // '{\"foo\":\"bar\"}'\n\n// or\n\nconst serialize = reply\n                  .getSerializationFunction(200, 'application/json')\nserialize({ foo: 'bar' }) // '{\"foo\":\"bar\"}'\n```\n\n----------------------------------------\n\nTITLE: Reusing Schemas with replace-way in Fastify\nDESCRIPTION: This example demonstrates schema reuse in Fastify using the replace-way approach. It shows defining a shared address schema with a $id, adding it to Fastify, and then referencing it in the body schema using the replace pattern.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Fluent-Schema.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sharedAddressSchema = {\n  $id: 'sharedAddress',\n  type: 'object',\n  required: ['line1', 'country', 'city', 'zipcode'],\n  properties: {\n    line1: { type: 'string' },\n    line2: { type: 'string' },\n    country: { type: 'string' },\n    city: { type: 'string' },\n    zipcode: { type: 'string' }\n  }\n}\nfastify.addSchema(sharedAddressSchema)\n\nconst bodyJsonSchema = {\n  type: 'object',\n  properties: {\n    vacation: 'sharedAddress#'\n  }\n}\n\nconst schema = { body: bodyJsonSchema }\n\nfastify.post('/the/url', { schema }, handler)\n```\n\n----------------------------------------\n\nTITLE: Initializing Fastify with HTTPS and Custom Options in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a Fastify instance with HTTPS configuration and custom options. It then shows how to access the initialConfig property and use it within a route handler. The example also includes an error case where attempting to modify the read-only initialConfig will throw an error.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nconst { readFileSync } = require('node:fs')\nconst Fastify = require('fastify')\n\nconst fastify = Fastify({\n  https: {\n    allowHTTP1: true,\n    key: readFileSync('./fastify.key'),\n    cert: readFileSync('./fastify.cert')\n  },\n  logger: { level: 'trace'},\n  ignoreTrailingSlash: true,\n  maxParamLength: 200,\n  caseSensitive: true,\n  trustProxy: '127.0.0.1,192.168.1.1/24',\n})\n\nconsole.log(fastify.initialConfig)\n/*\nwill log :\n{\n  caseSensitive: true,\n  https: { allowHTTP1: true },\n  ignoreTrailingSlash: true,\n  maxParamLength: 200\n}\n*/\n\nfastify.register(async (instance, opts) => {\n  instance.get('/', async (request, reply) => {\n    return instance.initialConfig\n    /*\n    will return :\n    {\n      caseSensitive: true,\n      https: { allowHTTP1: true },\n      ignoreTrailingSlash: true,\n      maxParamLength: 200\n    }\n    */\n  })\n\n  instance.get('/error', async (request, reply) => {\n    // will throw an error because initialConfig is read-only\n    // and can not be modified\n    instance.initialConfig.https.allowHTTP1 = false\n\n    return instance.initialConfig\n  })\n})\n\n// Start listening.\nfastify.listen({ port: 3000 }, (err) => {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Types in Fastify with TypeScript\nDESCRIPTION: Example demonstrating how to configure Fastify's Pino logger properties. Shows customization of log level, redaction of sensitive fields, and a custom message key.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from 'fastify'\n\nconst server = fastify({\n  logger: {\n    level: 'info',\n    redact: ['x-userinfo'],\n    messageKey: 'message'\n  }\n})\n\nserver.get('/', async (request, reply) => {\n  server.log.info('log message')\n  return 'another message'\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Serializer Options in Fastify (JavaScript)\nDESCRIPTION: Shows how to configure the options for the default JSON serializer (`fast-json-stringify`) used by Fastify. This is done by passing an object to the `serializerOpts` option during Fastify initialization, allowing customization of serialization behavior like number rounding.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst fastify = require('fastify')({\n  serializerOpts: {\n    rounding: 'ceil'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Trust Function for Fastify trustProxy Option (JavaScript)\nDESCRIPTION: Defines a custom JavaScript function `myTrustFn` to be used with the `trustProxy` option in Fastify. This function determines whether a proxy address is trusted based on the address itself or its hop count. It takes the address and hop number as arguments and returns `true` if the proxy should be trusted, `false` otherwise.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction myTrustFn(address, hop) {\n  return address === '1.2.3.4' || hop === 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for Fastify Route Generics - TypeScript\nDESCRIPTION: This snippet defines interfaces ('IQuerystring', 'IHeaders', and 'IReply') used as generic parameters for strongly typing Fastify routes. These interfaces specify typings for query string parameters, headers, and possible reply payloads keyed by status code. There are no direct dependencies but these are intended for use as generics in subsequent Fastify route declarations. They constrain what 'request.query', 'request.headers', and route responses can be. Limitation: These serve only as type contracts, not runtime validation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IQuerystring {\n  username: string;\n  password: string;\n}\n\ninterface IHeaders {\n  'h-Custom': string;\n}\n\ninterface IReply {\n  200: { success: boolean };\n  302: { url: string };\n  '4xx': { error: string };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Client Error Handler in Fastify (JavaScript)\nDESCRIPTION: Provides an example of setting a custom `clientErrorHandler` function during Fastify initialization. This function receives the error and the raw socket as arguments. It's responsible for logging the error (using `this.log`), checking if the socket is writable, and sending a complete, properly formatted HTTP 400 response directly to the socket.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst fastify = require('fastify')({\n  clientErrorHandler: function (err, socket) {\n    const body = JSON.stringify({\n      error: {\n        message: 'Client error',\n        code: '400'\n      }\n    })\n\n    // `this` is bound to fastify instance\n    this.log.trace({ err }, 'client error')\n\n    // the handler is responsible for generating a valid HTTP response\n    socket.end([\n      'HTTP/1.1 400 Bad Request',\n      `Content-Length: ${body.length}`,\n      `Content-Type: application/json\\r\\n\\r\\n${body}`\n    ].join('\\r\\n'))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up a Fastify Server with Client Abort Detection\nDESCRIPTION: Creates a basic Fastify server with a global onRequest hook that detects when clients abort requests. Includes a delayed response route to demonstrate the functionality.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Detecting-When-Clients-Abort.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fastify from 'fastify';\n\nconst sleep = async (time) => {\n  return await new Promise(resolve => setTimeout(resolve, time || 1000));\n}\n\nconst app = Fastify({\n  logger: {\n    transport: {\n      target: 'pino-pretty',\n      options: {\n        translateTime: 'HH:MM:ss Z',\n        ignore: 'pid,hostname',\n      },\n    },\n  },\n})\n\napp.addHook('onRequest', async (request, reply) => {\n  request.raw.on('close', () => {\n    if (request.raw.aborted) {\n      app.log.info('request closed')\n    }\n  })\n})\n\napp.get('/', async (request, reply) => {\n  await sleep(3000)\n  reply.code(200).send({ ok: true })\n})\n\nconst start = async () => {\n  try {\n    await app.listen({ port: 3000 })\n  } catch (err) {\n    app.log.error(err)\n    process.exit(1)\n  }\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Schema Compilation Examples in Fastify\nDESCRIPTION: Demonstrates proper and improper ways to compile and cache validation schemas using compileValidationSchema method.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Request.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema1 = {\n  type: 'object',\n  properties: {\n    foo: {\n      type: 'string'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Errors with Reply.send() using http-errors in Fastify (JavaScript)\nDESCRIPTION: Shows how to easily send standard HTTP errors using `reply.send()` in conjunction with the `http-errors` library. Fastify formats instances of `Error` into a standard JSON error structure. If the error's status code is below 400, Fastify defaults it to 500.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/', function (request, reply) {\n  reply.send(httpErrors.Gone())\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Client Request Abortion with fetch and AbortController\nDESCRIPTION: Shows how to test client request abort detection using Node.js fetch API with an AbortController to cancel the request after a specific timeout.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Detecting-When-Clients-Abort.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst controller = new AbortController();\nconst signal = controller.signal;\n\n(async () => {\n   try {\n      const response = await fetch('http://localhost:3000', { signal });\n      const body = await response.text();\n      console.log(body);\n   } catch (error) {\n      console.error(error);\n   }\n})();\n\nsetTimeout(() => {\n   controller.abort()\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Controller in Fastify\nDESCRIPTION: Shows how to configure a custom schema controller to manage schema storage and compilation. This example defines custom bucket management and compiler factories for validation and serialization.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = Fastify({\n  schemaController: {\n    /**\n     * This factory is called whenever `fastify.register()` is called.\n     * It may receive as input the schemas of the parent context if some schemas have been added.\n     * @param {object} parentSchemas these schemas will be returned by the\n     * `getSchemas()` method function of the returned `bucket`.\n     */\n    bucket: function factory (parentSchemas) {\n      return {\n        add (inputSchema) {\n          // This function must store the schema added by the user.\n          // This function is invoked when `fastify.addSchema()` is called.\n        },\n        getSchema (schema$id) {\n          // This function must return the raw schema requested by the `schema$id`.\n          // This function is invoked when `fastify.getSchema(id)` is called.\n          return aSchema\n        },\n        getSchemas () {\n          // This function must return all the schemas referenced by the routes schemas' $ref\n          // It must return a JSON where the property is the schema `$id` and the value is the raw JSON Schema.\n          const allTheSchemaStored = {\n            'schema$id1': schema1,\n            'schema$id2': schema2\n          }\n          return allTheSchemaStored\n        }\n      }\n    },\n\n    /**\n     * The compilers factory lets you fully control the validator and serializer\n     * in the Fastify's lifecycle, providing the encapsulation to your compilers.\n     */\n    compilersFactory: {\n      /**\n       * This factory is called whenever a new validator instance is needed.\n       * It may be called whenever `fastify.register()` is called only if new schemas have been added to the\n       * encapsulation context.\n       * It may receive as input the schemas of the parent context if some schemas have been added.\n       * @param {object} externalSchemas these schemas will be returned by the\n       * `bucket.getSchemas()`. Needed to resolve the external references $ref.\n       * @param {object} ajvServerOption the server `ajv` options to build your compilers accordingly\n       */\n      buildValidator: function factory (externalSchemas, ajvServerOption) {\n        // This factory function must return a schema validator compiler.\n        // See [#schema-validator](./Validation-and-Serialization.md#schema-validator) for details.\n        const yourAjvInstance = new Ajv(ajvServerOption.customOptions)\n        return function validatorCompiler ({ schema, method, url, httpPart }) {\n          return yourAjvInstance.compile(schema)\n        }\n      },\n\n      /**\n       * This factory is called whenever a new serializer instance is needed.\n       * It may be called whenever `fastify.register()` is called only if new schemas have been added to the\n       * encapsulation context.\n       * It may receive as input the schemas of the parent context if some schemas have been added.\n       * @param {object} externalSchemas these schemas will be returned by the\n       * `bucket.getSchemas()`. Needed to resolve the external references $ref.\n       * @param {object} serializerOptsServerOption the server `serializerOpts`\n       * options to build your compilers accordingly\n       */\n      buildSerializer: function factory (externalSchemas, serializerOptsServerOption) {\n        // This factory function must return a schema serializer compiler.\n        // See [#schema-serializer](./Validation-and-Serialization.md#schema-serializer) for details.\n        return function serializerCompiler ({ schema, method, url, httpStatus, contentType }) {\n          return data => JSON.stringify(data)\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Printing Route Trees in Fastify\nDESCRIPTION: Demonstrates how to use fastify.printRoutes() to visualize the router's route tree structure. Shows basic route printing, method-specific printing, and compressed tree output.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.get('/test', () => {})\nfastify.get('/test/hello', () => {})\nfastify.get('/testing', () => {})\nfastify.get('/testing/:param', () => {})\nfastify.put('/update', () => {})\n\nfastify.ready(() => {\n  console.log(fastify.printRoutes())\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Extended HTTP Server with Custom Request Types in Fastify\nDESCRIPTION: An example showing how to extend the HTTP server with custom request types. This allows specifying special properties and methods that become available on all instances of the custom type.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from 'fastify'\nimport http from 'node:http'\n\ninterface customRequest extends http.IncomingMessage {\n  mySpecialProp: string\n}\n\nconst server = fastify<http.Server, customRequest>()\n\nserver.get('/', async (request, reply) => {\n  const someValue = request.raw.mySpecialProp // TS knows this is a string, because of the `customRequest` interface\n  return someValue.toUpperCase()\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TypeBox for JSON Schema Typing - Bash\nDESCRIPTION: A bash command to install the TypeBox npm package, used for building schemas and types for Fastify route validation. No additional parameters are required other than a Node.js/npm environment. Input: Terminal command; Output: package install in node_modules. Prerequisite: Node.js and npm must be installed.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @sinclair/typebox\n```\n\n----------------------------------------\n\nTITLE: Error Handler Usage in Fastify\nDESCRIPTION: Demonstrates how to use the default error handler within custom error handling logic.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.get('/', {\n  errorHandler: (error, request, reply) => {\n    if (error.code === 'SOMETHING_SPECIFIC') {\n      reply.send({ custom: 'response' })\n      return\n    }\n\n    fastify.errorHandler(error, request, response)\n  }\n}, handler)\n```\n\n----------------------------------------\n\nTITLE: Advanced Request and Response Serialization in Fastify Logger (JavaScript)\nDESCRIPTION: This code provides an example of advanced request and response serialization in Fastify's logger, including method, URL, path, parameters, and headers for requests, and status code for responses.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Logging.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')({\n  logger: {\n    transport: {\n      target: 'pino-pretty'\n    },\n    serializers: {\n      res (reply) {\n        // The default\n        return {\n          statusCode: reply.statusCode\n        }\n      },\n      req (request) {\n        return {\n          method: request.method,\n          url: request.url,\n          path: request.routeOptions.url,\n          parameters: request.params,\n          // Including headers in the log could violate privacy laws,\n          // e.g., GDPR. Use the \"redact\" option to remove sensitive\n          // fields. It could also leak authentication data in the logs.\n          headers: request.headers\n        };\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Route Prefixes with fastify-plugin in Fastify (JavaScript)\nDESCRIPTION: Explains the correct way to apply a route `prefix` when the routes themselves are encapsulated within a plugin created using `fastify-plugin`. It requires nesting: the `fastify-plugin` wrapper contains an inner `app.register()` call where the actual route module and the `prefix` option are specified.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst fp = require('fastify-plugin')\nconst routes = require('./lib/routes')\n\nmodule.exports = fp(async function (app, opts) {\n  app.register(routes, {\n    prefix: '/v1',\n  })\n}, {\n  name: 'my-routes'\n})\n```\n\n----------------------------------------\n\nTITLE: Plugin with Skip-Override Symbol\nDESCRIPTION: Demonstrates using the skip-override symbol to preserve plugin scope without fastify-plugin.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Plugins.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction yourPlugin (fastify, opts, done) {\n  fastify.decorate('utility', function () {})\n  done()\n}\nyourPlugin[Symbol.for('skip-override')] = true\nmodule.exports = yourPlugin\n```\n\n----------------------------------------\n\nTITLE: Understanding Fastify Hook Scope and 'this' Context\nDESCRIPTION: Illustrates how the `this` context within a Fastify hook (except `onClose`) refers to the Fastify instance associated with the plugin where the *route* was registered, not necessarily where the hook was added. This demonstrates the effect of encapsulation on hook execution context. Using arrow functions for hooks changes the behavior of `this`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_35\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onRequest', function (request, reply, done) {\n  const self = this // Fastify context\n  done()\n})\n```\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onRequest', async function (req, reply) {\n  if (req.raw.url === '/nested') {\n    assert.strictEqual(this.foo, 'bar')\n  } else {\n    assert.strictEqual(this.foo, undefined)\n  }\n})\n\nfastify.get('/', async function (req, reply) {\n  assert.strictEqual(this.foo, undefined)\n  return { hello: 'world' }\n})\n\nfastify.register(async function plugin (fastify, opts) {\n  fastify.decorate('foo', 'bar')\n\n  fastify.get('/nested', async function (req, reply) {\n    assert.strictEqual(this.foo, 'bar')\n    return { hello: 'world' }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring File Destination for Fastify Logger (JavaScript)\nDESCRIPTION: This snippet shows how to specify a file destination for the Fastify logger by providing options when creating the Fastify instance.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Logging.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')({\n  logger: {\n    level: 'info',\n    file: '/path/to/file' // Will use pino.destination()\n  }\n})\n\nfastify.get('/', options, function (request, reply) {\n  request.log.info('Some info about the current request')\n  reply.send({ hello: 'world' })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Customer Route Handling in Fastify\nDESCRIPTION: This JavaScript snippet defines a Fastify plugin for handling customer routes where it fetches sensitive data using a magicKey. It includes error handling for scenarios when data retrieval fails, ensuring the application responds appropriately with status codes. Dependencies include the Fastify framework and an external provider module.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Delay-Accepting-Requests.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fp = require('fastify-plugin')\n\nconst provider = require('./provider')\n\nmodule.exports = fp(async function (fastify) {\n  fastify.get('*', async function (request ,reply) {\n    try {\n      const data = await provider.fetchSensitiveData(request.server.magicKey)\n      return { customer: true, error: false }\n    } catch (error) {\n      request.log.error({\n        error,\n        message: 'Failed at fetching sensitive data from provider',\n      })\n\n      reply.statusCode = 500\n      return { customer: null, error: true }\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Plugin API Consistency in Fastify v4 and v5\nDESCRIPTION: Ensures plugins exclusively use either callbacks or promises to prevent ambiguous behavior. Fastify v5 enforces strict separation between these APIs, removing the flexibility present in v4 to mix them within the same plugin registration.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v4\nfastify.register(async function (instance, opts, done) {\n  done();\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v5\nfastify.register(async function (instance, opts) {\n  return;\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v5\nfastify.register(function (instance, opts, done) {\n  done();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Delay for Incoming Requests in Fastify\nDESCRIPTION: This JavaScript snippet defines a Fastify plugin to delay handling incoming requests until a magicKey is generated from an external provider. It utilizes the 'fastify-plugin' for enhanced plugin compatibility and error management to ensure the application does not crash on unhandled errors. Dependencies include the Fastify framework and a custom provider module.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Delay-Accepting-Requests.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fp = require('fastify-plugin')\n\nconst provider = require('./provider')\n\nconst USUAL_WAIT_TIME_MS = 5000\n\nasync function setup(fastify) {\n  // As soon as we're listening for requests, let's work our magic\n  fastify.server.on('listening', doMagic)\n\n  // Set up the placeholder for the magicKey\n  fastify.decorate('magicKey')\n\n  // Our magic -- important to make sure errors are handled. Beware of async\n  // functions outside `try/catch` blocks\n  // If an error is thrown at this point and not captured it'll crash the\n  // application\n  function doMagic() {\n    fastify.log.info('Doing magic!')\n\n    provider.thirdPartyMagicKeyGenerator(USUAL_WAIT_TIME_MS)\n      .catch((error) => {\n        fastify.log.error({\n          error,\n          message: 'Got an error while trying to get the magic key!'\n        })\n\n        // Since we won't be able to serve requests, might as well wrap\n        // things up\n        fastify.close(() => process.exit(1))\n      })\n  }\n}\n\nconst delay = (routes) =>\n  function (fastify, opts, done) {\n    // Make sure customer requests won't be accepted if the magicKey is not\n    // available\n    fastify.addHook('onRequest', function (request, reply, next) {\n      if (!request.server.magicKey) {\n        reply.statusCode = 503\n        reply.header('Retry-After', USUAL_WAIT_TIME_MS)\n        reply.send({ error: true, retryInMs: USUAL_WAIT_TIME_MS })\n      }\n\n      next()\n    })\n\n    // Register to-be-delayed routes\n    fastify.register(routes, opts)\n\n    done()\n  }\n\nmodule.exports = {\n  setup: fp(setup),\n  delay,\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'after' Hook with Callbacks in Fastify\nDESCRIPTION: Demonstrates how to use the 'after' hook with callback functions to execute code after the current plugin and all its nested plugins have loaded but before the server is ready.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfastify\n  .register((instance, opts, done) => {\n    console.log('Current plugin')\n    done()\n  })\n  .after(err => {\n    console.log('After current plugin')\n  })\n  .register((instance, opts, done) => {\n    console.log('Next plugin')\n    done()\n  })\n  .ready(err => {\n    console.log('Everything has been loaded')\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Diagnostic Channel in Fastify v5\nDESCRIPTION: Integrates the Diagnostic Channel API in Fastify v5 for enhanced tracing and monitoring of request lifecycles. This powerful feature allows publishing messages during the start, end, and error phases of request handling, enabling detailed analysis and debugging.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict'\n\nconst diagnostics = require('node:diagnostics_channel')\nconst sget = require('simple-get').concat\nconst Fastify = require('fastify')\n\ndiagnostics.subscribe('tracing:fastify.request.handler:start', (msg) => {\n  console.log(msg.route.url) // '/:id'\n  console.log(msg.route.method) // 'GET'\n})\n\ndiagnostics.subscribe('tracing:fastify.request.handler:end', (msg) => {\n  // msg is the same as the one emitted by the 'tracing:fastify.request.handler:start' channel\n  console.log(msg)\n})\n\ndiagnostics.subscribe('tracing:fastify.request.handler:error', (msg) => {\n  // in case of error\n})\n\nconst fastify = Fastify()\nfastify.route({\n  method: 'GET',\n  url: '/:id',\n  handler: function (req, reply) {\n    return { hello: 'world' }\n  }\n})\n\nfastify.listen({ port: 0 }, function () {\n  sget({\n    method: 'GET',\n    url: fastify.listeningOrigin + '/7'\n  }, (err, response, body) => {\n    t.error(err)\n    t.equal(response.statusCode, 200)\n    t.same(JSON.parse(body), { hello: 'world' })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Including Literal Colons in Route Paths in Fastify (JavaScript)\nDESCRIPTION: Demonstrates how to include a literal colon (`:`) within a Fastify route path without declaring a parameter by using a double colon (`::`). The route `/name::verb` will match the exact path `/name:verb`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nfastify.post('/name::verb') // will be interpreted as /name:verb\n```\n\n----------------------------------------\n\nTITLE: Updating Reply Trailer Implementation in Fastify v5\nDESCRIPTION: Shows how to update the implementation of response trailers in Fastify v5, which now requires an async function or callback instead of direct return.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// v4\nfastify.get('/route', (req, reply) => {\n  reply.trailer('ETag', function (reply, payload) {\n    return 'custom-etag'\n  })\n  reply.send('')\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// v5\nfastify.get('/route', (req, reply) => {\n  reply.trailer('ETag', async function (reply, payload) {\n    return 'custom-etag'\n  })\n  reply.send('')\n});\n```\n\n----------------------------------------\n\nTITLE: Using 'ready' Hook with Callback in Fastify\nDESCRIPTION: Demonstrates how to use the 'ready' hook with a callback function to execute code after all plugins have been loaded, with error handling.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.ready(err => {\n  if (err) throw err\n})\n```\n\n----------------------------------------\n\nTITLE: Defining TypeBox Schema and Static Type in TypeScript - TypeScript\nDESCRIPTION: Illustrates how to define a JSON schema and TypeScript type for a User object using TypeBox's Type and Static utilities. The schema includes a required 'name' string and an optional 'mail' string with an email format validator. Dependencies: '@sinclair/typebox'. Input: Used as schema (User) and type (UserType) in subsequent Fastify routes. No direct output from this snippet. Limitation: Schema and type are tightly coupled for consistent validation and typing.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Static, Type } from '@sinclair/typebox'\n\nexport const User = Type.Object({\n  name: Type.String(),\n  mail: Type.Optional(Type.String({ format: 'email' })),\n})\n\nexport type UserType = Static<typeof User>\n```\n\n----------------------------------------\n\nTITLE: Compiling Serialization Schemas in Fastify\nDESCRIPTION: Examples of compiling serialization schemas with different configurations and content types.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema1 = {\n  type: 'object',\n  properties: {\n    foo: {\n      type: 'string'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Encapsulation with Fastify's Register and Decorate\nDESCRIPTION: Example showing how decorators are encapsulated within their register context. The second register block will throw an error because util is only available in the first context.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.register((instance, opts, done) => {\n  instance.decorate('util', (a, b) => a + b)\n  console.log(instance.util('that is ', 'awesome'))\n\n  done()\n})\n\nfastify.register((instance, opts, done) => {\n  console.log(instance.util('that is ', 'awesome')) // This will throw an error\n\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Request Serializer in Fastify Logger (JavaScript)\nDESCRIPTION: This snippet shows how to customize the request serializer in Fastify's logger to control what information is logged for each request.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Logging.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')({\n  logger: {\n    serializers: {\n      req (request) {\n        return { url: request.url }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Fastify Error Interface Definition\nDESCRIPTION: Custom error interface extending Node.js Error with additional properties for status code and validation results.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nfastify.FastifyError extends Error {\n  statusCode?: number;\n  validation?: ValidationResult[];\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Plugin Registration\nDESCRIPTION: Shows how to handle errors during plugin registration using after, ready, and listen callbacks.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.register(require('my-plugin'))\n\n// `after` will be executed once\n// the previous declared `register` has finished\nfastify.after(err => console.log(err))\n\n// `ready` will be executed once all the registers declared\n// have finished their execution\nfastify.ready(err => console.log(err))\n\n// `listen` is a special ready,\n// so it behaves in the same way\nfastify.listen({ port: 3000 }, (err, address) => {\n  if (err) console.log(err)\n})\n```\n\n----------------------------------------\n\nTITLE: Registering an onRequestAbort Hook in Fastify (Callback)\nDESCRIPTION: Illustrates registering an 'onRequestAbort' hook using `fastify.addHook` with a callback. This hook is triggered if the client closes the connection before the request processing completes. No response can be sent. Client abort detection may not be fully reliable.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onRequestAbort', (request, done) => {\n  // Some code\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Reply Redirect Method in Fastify v5\nDESCRIPTION: Shows the required changes for the reply.redirect() method in Fastify v5, which now accepts the URL first and the status code second.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// v4\nreply.redirect(301, '/new-route')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// v5\nreply.redirect('/new-route', 301)\n```\n\n----------------------------------------\n\nTITLE: Using FromSchema to Type Fastify Route Body (TypeScript)\nDESCRIPTION: Shows using the FromSchema utility from json-schema-to-ts to translate a JSON Schema into a TypeScript type. Applies this generated type to a Fastify route handler, enabling type-checked access to request body properties. Sample demonstrates both correct and incorrect property usage, enforcing compile-time safety. Expects valid Fastify and json-schema-to-ts integration.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FromSchema } from \"json-schema-to-ts\";\nfastify.post<{ Body: FromSchema<typeof todo> }>(\n  '/todo',\n  {\n    schema: {\n      body: todo,\n      response: {\n        201: {\n          type: 'string',\n        },\n      },\n    }\n  },\n  async (request, reply): Promise<void> => {\n\n    /*\n    request.body has type\n    {\n      [x: string]: unknown;\n      description?: string;\n      done?: boolean;\n      name: string;\n    }\n    */\n\n    request.body.name // will not throw type error\n    request.body.notthere // will throw type error\n\n    reply.status(201).send();\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Finding a Route in Fastify\nDESCRIPTION: Shows how to use the findRoute method to retrieve a route already registered to the internal router, including its parameters and constraints.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst route = fastify.findRoute({\n  url: '/artists/:artistId',\n  method: 'GET',\n  constraints: { version: '1.0.0' } // optional\n})\n\nif (route !== null) {\n  // perform some route checks\n  console.log(route.params)   // `{artistId: ':artistId'}`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Fastify server with conditional request handling\nDESCRIPTION: This snippet demonstrates a basic Fastify server setup with routes for checking readiness (/ping), receiving webhook notifications (/webhook), and handling customer requests (/v1*). The server is not ready to handle customer requests until it receives a magic key from an external provider.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Delay-Accepting-Requests.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Fastify = require('fastify')\n\nconst provider = require('./provider')\n\nconst server = Fastify({ logger: true })\nconst USUAL_WAIT_TIME_MS = 5000\n\nserver.get('/ping', function (request, reply) {\n  reply.send({ error: false, ready: request.server.magicKey !== null })\n})\n\nserver.post('/webhook', function (request, reply) {\n  // It's good practice to validate webhook requests come from\n  // who you expect. This is skipped in this sample for the sake\n  // of simplicity\n\n  const { magicKey } = request.body\n  request.server.magicKey = magicKey\n  request.log.info('Ready for customer requests!')\n\n  reply.send({ error: false })\n})\n\nserver.get('/v1*', async function (request, reply) {\n  try {\n    const data = await provider.fetchSensitiveData(request.server.magicKey)\n    return { customer: true, error: false }\n  } catch (error) {\n    request.log.error({\n      error,\n      message: 'Failed at fetching sensitive data from provider',\n    })\n\n    reply.statusCode = 500\n    return { customer: null, error: true }\n  }\n})\n\nserver.decorate('magicKey')\n\nserver.listen({ port: '1234' }, () => {\n  provider.thirdPartyMagicKeyGenerator(USUAL_WAIT_TIME_MS)\n    .catch((error) => {\n      server.log.error({\n        error,\n        message: 'Got an error while trying to get the magic key!'\n      })\n\n      // Since we won't be able to serve requests, might as well wrap\n      // things up\n      server.close(() => process.exit(1))\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Serializer Configuration in Fastify\nDESCRIPTION: Example of setting a custom serializer for specific content types.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nreply\n  .header('Content-Type', 'application/x-protobuf')\n  .serializer(protoBuf.serialize)\n```\n\n----------------------------------------\n\nTITLE: Using Custom HTTP Methods in Route Definitions\nDESCRIPTION: Shows how to use a custom HTTP method in route definitions after adding it with addHttpMethod(). The example demonstrates using the 'MKCOL' method with a route handler.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.addHttpMethod('MKCOL', { hasBody: true })\nfastify.mkcol('/', (req, reply) => {\n  // Handle the 'MKCOL' request\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Buffers with Reply.send() using Callback in Fastify (JavaScript)\nDESCRIPTION: Demonstrates sending a Node.js Buffer (e.g., from reading a file) using `reply.send()` within a callback pattern. Requires the `node:fs` module. If the `Content-Type` header isn't set, it defaults to `application/octet-stream`. Buffer data is sent unmodified.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nconst fs = require('node:fs')\n\nfastify.get('/streams', function (request, reply) {\n  fs.readFile('some-file', (err, fileBuffer) => {\n    reply.send(err || fileBuffer)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for TypeScript Plugin Compilation (JSON)\nDESCRIPTION: Updates the package.json to include a 'types' field pointing to the TypeScript definition file and a 'build' script to invoke the TypeScript compiler. This configuration is required for generating type definitions when building TypeScript-based Fastify plugins.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": \"index.d.ts\",\n  \"scripts\": {\n    \"build\": \"tsc -p tsconfig.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Fastify Server with Default Options and Callback\nDESCRIPTION: Demonstrates how to start a Fastify server with default options (port 0 and localhost) using a callback function for handling errors.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.listen((err, address) => {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fastify Custom Error Handler Propagation in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how Fastify handles errors with nested custom error handlers using `setErrorHandler`. It sets up a root error handler and a plugin with its own error handler that re-throws received errors. The `/bad` route throws a string primitive, which, when re-thrown by the plugin's handler, bypasses the root custom handler and is caught by Fastify's default handler. The `/good` route throws an `Error` instance, which correctly propagates up to the root custom error handler when re-thrown. This highlights the importance of throwing `Error` objects for consistent error handling across encapsulated contexts. Requires the `fastify` library.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Errors.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst Fastify = require('fastify')\n\n// Instantiate the framework\nconst fastify = Fastify({\n  logger: true\n})\n\n// Register parent error handler\nfastify.setErrorHandler((error, request, reply) => {\n  reply.status(500).send({ ok: false })\n})\n\nfastify.register((app, options, next) => {\n  // Register child error handler\n  fastify.setErrorHandler((error, request, reply) => {\n    throw error\n  })\n\n  fastify.get('/bad', async () => {\n    // Throws a non-Error type, 'bar'\n    throw 'foo'\n  })\n\n  fastify.get('/good', async () => {\n    // Throws an Error instance, 'bar'\n    throw new Error('bar')\n  })\n\n  next()\n})\n\n// Run the server\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  // Server is listening at ${address}\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Response Hijacking in Fastify v5\nDESCRIPTION: Shows how to update code that manually controls response sending in Fastify v5, replacing direct modification of reply.sent with the new reply.hijack() method.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// v4\nfastify.get('/route', (req, reply) => {\n  reply.sent = true;\n  reply.raw.end('hello');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// v5\nfastify.get('/route', (req, reply) => {\n  reply.hijack();\n  reply.raw.end('hello');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Asynchronous Constraints with frameworkErrors\nDESCRIPTION: Shows how to handle errors in asynchronous constraints by providing a custom frameworkErrors handler. This prevents route selection from breaking or exposing sensitive information.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst Fastify = require('fastify')\n\nconst fastify = Fastify({\n  frameworkErrors: function (err, res, res) {\n    if (err instanceof Fastify.errorCodes.FST_ERR_ASYNC_CONSTRAINT) {\n      res.code(400)\n      return res.send(\"Invalid header provided\")\n    } else {\n      res.send(err)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Fastify Request Handler Tracing Events\nDESCRIPTION: Shows how to subscribe to diagnostics channel events for tracing Fastify request handlers, including start, end, and error events.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dc = require('node:diagnostics_channel')\nconst channel = dc.channel('tracing:fastify.request.handler:start')\nchannel.subscribe((msg) => {\n  console.log(msg.request, msg.reply)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Building Netlify Functions (JavaScript)\nDESCRIPTION: Defines a Webpack configuration file (`webpack.config.netlify.js`) specifically for bundling Node.js code for Netlify Functions. It utilizes `webpack-node-externals` to keep Node.js built-ins and `node_modules` external, uses `dotenv-safe` for environment variable loading in development, sets up a development server proxy for Netlify Dev, and injects build-time environment variables (`APP_ROOT_PATH`, `NETLIFY_ENV`, `CONTEXT`) using `webpack.DefinePlugin`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst nodeExternals = require('webpack-node-externals');\nconst dotenv = require('dotenv-safe');\nconst webpack = require('webpack');\n\nconst env = process.env.NODE_ENV || 'production';\nconst dev = env === 'development';\n\nif (dev) {\n  dotenv.config({ allowEmptyValues: true });\n}\n\nmodule.exports = {\n  mode: env,\n  devtool: dev ? 'eval-source-map' : 'none',\n  externals: [nodeExternals()],\n  devServer: {\n    proxy: {\n      '/.netlify': {\n        target: 'http://localhost:9000',\n        pathRewrite: { '^/.netlify/functions': '' }\n      }\n    }\n  },\n  module: {\n    rules: []\n  },\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env.APP_ROOT_PATH': JSON.stringify('/'),\n      'process.env.NETLIFY_ENV': true,\n      'process.env.CONTEXT': env\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handler with Validation Status Code\nDESCRIPTION: Example of implementing a custom error handler that uses the validation status code.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.setErrorHandler(function (error, request, reply) {\n  request.log.error(error, `This error has status code ${error.statusCode}`)\n  reply.status(error.statusCode).send(error)\n})\n```\n\n----------------------------------------\n\nTITLE: Using RawRequestDefaultExpression in Fastify TypeScript\nDESCRIPTION: Example showing how the RawRequestDefaultExpression utility type works in Fastify. It returns different request types based on the server type (HTTP vs HTTP2).\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport http from 'node:http'\nimport http2 from 'node:http2'\nimport { RawRequestDefaultExpression } from 'fastify'\n\nRawRequestDefaultExpression<http.Server> // -> http.IncomingMessage\nRawRequestDefaultExpression<http2.Http2Server> // -> http2.Http2ServerRequest\n```\n\n----------------------------------------\n\nTITLE: Validating Plugin Dependencies with getDecorator (JavaScript)\nDESCRIPTION: Demonstrates using `fastify.getDecorator` within a plugin registration function to ensure a required decorator ('usersRepository') exists before defining routes that depend on it. This provides early validation at registration time.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nfastify.register(async function (fastify) {\n  const usersRepository = fastify.getDecorator('usersRepository')\n\n  fastify.get('/users', async function (request, reply) {\n    // We are sure `usersRepository` exists at runtime\n    return usersRepository.findAll()\n  })\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Option Changes in Fastify v2 vs v3\nDESCRIPTION: Demonstrates how the setSchemaCompiler and setSchemaResolver options have been replaced with setValidatorCompiler in v3 to enable future tooling improvements.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V3.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = Fastify();\nconst ajv = new AJV();\najv.addSchema(schemaA);\najv.addSchema(schemaB);\n\nfastify.setSchemaCompiler(schema => ajv.compile(schema));\nfastify.setSchemaResolver(ref => ajv.getSchema(ref).schema);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = Fastify();\nconst ajv = new AJV();\najv.addSchema(schemaA);\najv.addSchema(schemaB);\n\nfastify.setValidatorCompiler(({ schema, method, url, httpPart }) =>\n  ajv.compile(schema)\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Errors within a Fastify Hook (Async/Await)\nDESCRIPTION: Shows how to handle errors within an `async` Fastify hook. Simply `throw` an error; Fastify will catch it, stop the request lifecycle, and trigger the standard error handling process.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onRequest', async (request, reply) => {\n  throw new Error('Some error')\n})\n```\n\n----------------------------------------\n\nTITLE: Setup Fastify Server with CLI in JavaScript\nDESCRIPTION: This JavaScript code snippet exemplifies how to set up a Fastify server file for use with fastify-cli. The `server.js` file is structured to define a basic Fastify server that handles a GET request at the root endpoint and responds with a JSON object.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n// server.js\n'use strict'\n\nmodule.exports = async function (fastify, opts) {\n  fastify.get('/', async (request, reply) => {\n    return { hello: 'world' }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Route Matching Update Using Fastify v4 and v5\nDESCRIPTION: Illustrates the change in route matching behavior in Fastify v5, which now requires route definitions to be passed exactly as defined for `fastify.hasRoute()`. The example reveals how the URL pattern should match the route definition. This adjustment aligns with behaviors in `find-my-way`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v4\nfastify.get('/example/:file(^\\\\d+).png', function (request, reply) { })\n\nconsole.log(fastify.hasRoute({\n  method: 'GET',\n  url: '/example/12345.png'\n})); // true\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v5\n\nfastify.get('/example/:file(^\\\\d+).png', function (request, reply) { })\n\nconsole.log(fastify.hasRoute({\n  method: 'GET',\n  url: '/example/:file(^\\\\d+).png'\n})); // true\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Handling with onRoute Hook in Fastify - JavaScript\nDESCRIPTION: Using the onRoute hook in Fastify, this code modifies route options dynamically as they are registered, allowing for conditional addition of handlers based on route configuration.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify.register((instance, opts, done) => {\n  instance.decorate('util', (request, key, value) => { request[key] = value })\n\n  function handler(request, reply, done) {\n    instance.util(request, 'timestamp', new Date())\n    done()\n  }\n\n  instance.addHook('onRoute', (routeOptions) => {\n    if (routeOptions.config && routeOptions.config.useUtil === true) {\n      if (!routeOptions.preHandler) {\n        routeOptions.preHandler = [handler]\n        return\n      }\n      if (Array.isArray(routeOptions.preHandler)) {\n        routeOptions.preHandler.push(handler)\n        return\n      }\n      routeOptions.preHandler = [routeOptions.preHandler, handler]\n    }\n  })\n\n  fastify.get('/plugin1', {config: {useUtil: true}}, (request, reply) => {\n    reply.send(request)\n  })\n\n  fastify.get('/plugin2', (request, reply) => {\n    reply.send(request)\n  })\n\n  done()\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Fastify Reply Lifecycle with ASCII Art\nDESCRIPTION: This ASCII art diagram shows the reply lifecycle in Fastify, including error handling, schema validation, and various paths for sending replies. It illustrates how different types of responses are processed and serialized.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Lifecycle.md#2025-04-22_snippet_1\n\nLANGUAGE: ascii-art\nCODE:\n```\n                        ★ schema validation Error\n                                    │\n                                    └─▶ schemaErrorFormatter\n                                               │\n                          reply sent ◀── JSON ─┴─ Error instance\n                                                      │\n                                                      │         ★ throw an Error\n                     ★ send or return                 │                 │\n                            │                         │                 │\n                            │                         ▼                 │\n       reply sent ◀── JSON ─┴─ Error instance ──▶ setErrorHandler ◀─────┘\n                                                      │\n                                 reply sent ◀── JSON ─┴─ Error instance ──▶ onError Hook\n                                                                                │\n                                                                                └─▶ reply sent\n```\n\n----------------------------------------\n\nTITLE: ESM Plugin Implementation\nDESCRIPTION: Shows how to implement plugins using ES modules in Node.js v13.3.0 and above.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Plugins.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// main.mjs\nimport Fastify from 'fastify'\nconst fastify = Fastify()\n\nfastify.register(import('./plugin.mjs'))\n\nfastify.listen({ port: 3000 }, console.log)\n\n\n// plugin.mjs\nasync function plugin (fastify, opts) {\n  fastify.get('/', async (req, reply) => {\n    return { hello: 'world' }\n  })\n}\n\nexport default plugin\n```\n\n----------------------------------------\n\nTITLE: Uncaught Exception Handling in Fastify v2 vs v3\nDESCRIPTION: Shows how error handling has improved in v3 to manage all unexpected errors in both sync and async routes, whereas in v2 the server would crash on sync route errors.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V3.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.setErrorHandler((error, request, reply) => {\n  // this is NOT called\n  reply.send(error)\n})\nfastify.get('/', (request, reply) => {\n  const maybeAnArray = request.body.something ? [] : 'I am a string'\n  maybeAnArray.substr() // Thrown: [].substr is not a function and crash the server\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.setErrorHandler((error, request, reply) => {\n  // this IS called\n  reply.send(error)\n})\nfastify.get('/', (request, reply) => {\n  const maybeAnArray = request.body.something ? [] : 'I am a string'\n  maybeAnArray.substr() // Thrown: [].substr is not a function, but it is handled\n})\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Routes with Fastify v4 and v5 in JavaScript\nDESCRIPTION: These snippets illustrate routing differences in Fastify v4 and v5, emphasizing the modified behavior of HEAD and GET routes when `exposeHeadRoutes` is true. The v5 example showcases using `exposeHeadRoutes: false` within GET routes to customize route handling. Prerequisites include knowledge of Fastify's routing system.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v4\nfastify.get('/route', {\n\n}, (req, reply) => {\n  reply.send({ hello: 'world' });\n});\n\nfastify.head('/route', (req, reply) => {\n  // ...\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v5\nfastify.get('/route', {\n  exposeHeadRoutes: false\n}, (req, reply) => {\n  reply.send({ hello: 'world' });\n});\n\nfastify.head('/route', (req, reply) => {\n  // ...\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v5\nfastify.head('/route', (req, reply) => {\n  // ...\n});\n\nfastify.get('/route', {\n\n}, (req, reply) => {\n  reply.send({ hello: 'world' });\n});\n```\n\n----------------------------------------\n\nTITLE: Updated Logging Serialization in Fastify v2 vs v3\nDESCRIPTION: Demonstrates the change in logging serializers, which now receive Fastify Request and Reply objects instead of native ones. Custom serializers need to be updated to access properties from the raw objects.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V3.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')({\n  logger: {\n    serializers: {\n      res(res) {\n        return {\n          statusCode: res.statusCode,\n          customProp: res.customProp\n        };\n      }\n    }\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')({\n  logger: {\n    serializers: {\n      res(reply) {\n        return {\n          statusCode: reply.statusCode, // No change required\n          customProp: reply.raw.customProp // Log custom property from res object\n        };\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Errors within a Fastify Hook (Callback)\nDESCRIPTION: Shows how to handle errors within a Fastify hook using the `done` callback. Passing an `Error` object to `done()` stops the request lifecycle and triggers Fastify's standard error handling mechanism.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onRequest', (request, reply, done) => {\n  done(new Error('Some error'))\n})\n```\n\n----------------------------------------\n\nTITLE: Safe Response Serialization in Fastify Logger (JavaScript)\nDESCRIPTION: This snippet demonstrates a safe way to serialize response headers in Fastify's logger by checking for the existence of the getHeaders method before calling it.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Logging.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')({\n  logger: {\n    transport: {\n      target: 'pino-pretty'\n    },\n    serializers: {\n      res (reply) {\n        // The default\n        return {\n          statusCode: reply.statusCode,\n          headers: typeof reply.getHeaders === 'function'\n            ? reply.getHeaders()\n            : {}\n        }\n      },\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Server Listen Method in Fastify v5\nDESCRIPTION: Shows the required changes for the server listen method in Fastify v5, which now only accepts an options object rather than variadic arguments.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// v4\nfastify.listen(8000)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// v5\nfastify.listen({ port: 8000 })\n```\n\n----------------------------------------\n\nTITLE: Ensuring Type Safety when Setting Request Decorators with setDecorator<T> (TypeScript)\nDESCRIPTION: Demonstrates how `req.setDecorator<T>` provides type safety when setting a request decorator's value. By specifying the type parameter (`<string>`), it enforces type checking on the assigned value ('Bob Dylan') without requiring explicit type assertions or global module augmentation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nfastify.addHook('preHandler', async (req, reply) => {\n  req.setDecorator<string>('user', 'Bob Dylan')\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Node Test Runner Integration\nDESCRIPTION: Implements a formal test using Node's built-in test runner. Tests the root route for correct status code response.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Testing.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst { test } = require('node:test')\nconst build = require('./app')\n\ntest('requests the \"/\" route', async t => {\n  t.plan(1)\n  const app = build()\n\n  const response = await app.inject({\n    method: 'GET',\n    url: '/'\n  })\n  t.assert.strictEqual(response.statusCode, 200, 'returns a status code of 200')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Levels per Route in Fastify (JavaScript)\nDESCRIPTION: Demonstrates how to assign a specific log level (`warn`) directly to an individual Fastify route. This is done by including the `logLevel` property within the options object passed as the second argument (before the handler) to the route definition method (e.g., `fastify.get`). This overrides both the server and any plugin-level log settings for this specific route.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nfastify.get('/', { logLevel: 'warn' }, (request, reply) => {\n  reply.send({ hello: 'world' })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining onRegisterHookHandler in TypeScript for Fastify Plugin Registration\nDESCRIPTION: Type definition for a hook that triggers when a new plugin is registered creating a new encapsulation context. This hook executes before the registered code and is useful for operations that need to be performed in a specific plugin context.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\nfastify.onRegisterHookHandler< [RawServer][RawServerGeneric], [RawRequest][RawRequestGeneric], [RawReply][RawReplyGeneric], [Logger][LoggerGeneric]>(instance: [FastifyInstance][FastifyInstance], done: (err?: [FastifyError][FastifyError]) => void): Promise\\<unknown\\> | void\n```\n\n----------------------------------------\n\nTITLE: Using Routing Method in Fastify\nDESCRIPTION: Shows how to use the routing method to access the internal router's lookup method for matching requests to handlers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.routing(req, res)\n```\n\n----------------------------------------\n\nTITLE: Example Versioned Route Module (v2) for Prefixing in Fastify (JavaScript)\nDESCRIPTION: Provides another example route module (`routes/v2/users.js`) defining a `/user` GET endpoint, but using a different handler (`handler_v2`). Like the v1 example, this module is meant to be registered using `fastify.register()` with a distinct `prefix` (e.g., `/v2`) to create the final route `/v2/user`. The `done()` callback is essential.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Routes.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n// routes/v2/users.js\nmodule.exports = function (fastify, opts, done) {\n  fastify.get('/user', handler_v2)\n  done()\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with Custom Status Code in a Fastify Hook (Callback)\nDESCRIPTION: Demonstrates setting a custom HTTP status code using `reply.code()` before passing an error to the `done()` callback within a hook. This allows customizing the error response sent to the client.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('preHandler', (request, reply, done) => {\n  reply.code(400)\n  done(new Error('Some error'))\n})\n```\n\n----------------------------------------\n\nTITLE: Using Logger in Fastify Route Handlers (JavaScript)\nDESCRIPTION: This snippet shows how to use the logger within Fastify route handlers to log information about the current request.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Logging.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.get('/', options, function (request, reply) {\n  request.log.info('Some info about the current request')\n  reply.send({ hello: 'world' })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Server Decorators for HTML Generation\nDESCRIPTION: Example of using the decorate API to add an HTML generation utility to the Fastify instance. This works but requires accessing fastify within route handlers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.decorate('html', payload => {\n  return generateHtml(payload)\n})\n\nfastify.get('/html', (request, reply) => {\n  reply\n    .type('text/html')\n    .send(fastify.html({ hello: 'world' }))\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Express Middleware with @fastify/express\nDESCRIPTION: Example showing how to register and use multiple Express-style middleware packages with @fastify/express plugin. Demonstrates implementation of security-related middleware like CORS, DNS prefetch control, and XSS protection.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait fastify.register(require('@fastify/express'))\nfastify.use(require('cors')())\nfastify.use(require('dns-prefetch-control')())\nfastify.use(require('frameguard')())\nfastify.use(require('hsts')())\nfastify.use(require('ienoopen')())\nfastify.use(require('x-xss-protection')())\n```\n\n----------------------------------------\n\nTITLE: Default Fastify Listen Options\nDESCRIPTION: Shows the default options used when starting a Fastify server with the listen method, including port, host, and socket configuration.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.listen({\n  port: 0,\n  host: 'localhost',\n  exclusive: false,\n  readableAll: false,\n  writableAll: false,\n  ipv6Only: false\n}, (err) => {})\n```\n\n----------------------------------------\n\nTITLE: Function-based Plugin Options\nDESCRIPTION: Demonstrates using a function to generate plugin options with access to the Fastify instance.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fp = require('fastify-plugin')\n\nfastify.register(fp((fastify, opts, done) => {\n  fastify.decorate('foo_bar', { hello: 'world' })\n\n  done()\n}))\n\n// The opts argument of fastify-foo will be { hello: 'world' }\nfastify.register(require('fastify-foo'), parent => parent.foo_bar)\n```\n\n----------------------------------------\n\nTITLE: Localizing Validation Error Messages with ajv-i18n\nDESCRIPTION: Demonstrates how to use ajv-i18n to localize validation error messages. The example shows how to translate error messages to Russian before sending them in the response.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst localize = require('ajv-i18n')\n\nconst fastify = Fastify()\n\nconst schema = {\n  body: {\n    type: 'object',\n    properties: {\n      name: {\n        type: 'string',\n      },\n      age: {\n        type: 'number',\n      }\n    },\n    required: ['name', 'age'],\n  }\n}\n\nfastify.setErrorHandler(function (error, request, reply) {\n  if (error.validation) {\n    localize.ru(error.validation)\n    reply.status(400).send(error.validation)\n    return\n  }\n  reply.send(error)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing JsonSchemaToTs Type Provider with npm\nDESCRIPTION: Command for installing the json-schema-to-ts type provider package using npm.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Type-Providers.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @fastify/type-provider-json-schema-to-ts\n```\n\n----------------------------------------\n\nTITLE: Multiple Headers Setting\nDESCRIPTION: Example of setting multiple headers at once using an object.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreply.headers({\n  'x-foo': 'foo',\n  'x-bar': 'bar'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Client Close Behavior in Fastify\nDESCRIPTION: Shows how to configure the @fastify/redis plugin to close the Redis client connection when the Fastify server shuts down, which is not the default behavior.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Database.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.register(require('@fastify/redis'), {\n  client: redis,\n  closeClient: true\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting ESM Plugins in Fastify - JavaScript\nDESCRIPTION: The snippet outlines exportation of a Fastify plugin as an ES module, compatible with Node.js versions 13.3.0 and up, exemplifying a simple route response setup.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n// plugin.mjs\nasync function plugin (fastify, opts) {\n  fastify.get('/', async (req, reply) => {\n    return { hello: 'world' }\n  })\n}\n\nexport default plugin\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc for Code Completion in JavaScript\nDESCRIPTION: JavaScript example using JSDoc comments with TypeScript type references to provide code completion in vanilla JavaScript Fastify plugins.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n/**  @type {import('fastify').FastifyPluginAsync<{ optionA: boolean, optionB: string }>} */\nmodule.exports = async function (fastify, { optionA, optionB }) {\n  fastify.get('/look', () => 'at me');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Consistent Custom Errors with @fastify/error - JavaScript\nDESCRIPTION: The code introduces the @fastify/error module to create standardized error objects within Fastify plugins, ensuring uniform error handling across various components.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst createError = require('@fastify/error')\nconst CustomError = createError('ERROR_CODE', 'message')\nconsole.log(new CustomError())\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Error Handler Logic in Fastify\nDESCRIPTION: Shows the default error handler logic used by Fastify when no custom error handler is set. It logs errors based on their status code severity.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst statusCode = error.statusCode\nif (statusCode >= 500) {\n  log.error(error)\n} else if (statusCode >= 400) {\n  log.info(error)\n} else {\n  log.error(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an npm Project and Installing Fastify Plugin Dependencies (Bash)\nDESCRIPTION: Bootstraps a new npm project and installs the dependencies required to build a Fastify plugin with TypeScript support. Installs both runtime (fastify, fastify-plugin) and developer (typescript, @types/node) packages, ensuring both code execution and type checking capabilities.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\nnpm i fastify fastify-plugin\nnpm i -D typescript @types/node\n```\n\n----------------------------------------\n\nTITLE: Schema Substitution Changes in Fastify v2 vs v3\nDESCRIPTION: Shows how schema substitution has changed from a non-standard syntax to a JSON Schema compliant $ref-based approach for better compatibility.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V3.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  body: 'schemaId#'\n};\nfastify.route({ method, url, schema, handler });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  body: {\n    $ref: 'schemaId#'\n  }\n};\nfastify.route({ method, url, schema, handler });\n```\n\n----------------------------------------\n\nTITLE: Decorating Requests in Fastify v4 and v5\nDESCRIPTION: Explores how to avoid sharing reference types like `Array` or `Object` when decorating requests/replies. Fastify v5 prohibits this to maintain data integrity across requests, requiring either the provision of instances in hooks or using functions/getters for dynamic allocation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v4\nfastify.decorateRequest('myObject', { hello: 'world' });\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v5\nfastify.decorateRequest('myObject');\nfastify.addHook('onRequest', async (req, reply) => {\n  req.myObject = { hello: 'world' };\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v5\nfastify.decorateRequest('myObject', () => ({ hello: 'world' }));\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v5\nfastify.decorateRequest('myObject', {\n  getter () {\n    return { hello: 'world' }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Tree Printing in Fastify\nDESCRIPTION: Demonstrates how to print the internal plugin tree structure for debugging plugin loading order.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.register(async function foo (instance) {\n  instance.register(async function bar () {})\n})\nfastify.register(async function baz () {})\n\nfastify.ready(() => {\n  console.error(fastify.printPlugins())\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Instance via Reply\nDESCRIPTION: Demonstrates how to access the Fastify server instance through the reply object within an encapsulated context.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.decorate('util', function util () {\n  return 'foo'\n})\n\nfastify.get('/', async function (req, rep) {\n  return rep.server.util() // foo\n})\n```\n\n----------------------------------------\n\nTITLE: Updating JSON Schema Format for Query String in Fastify v5\nDESCRIPTION: Demonstrates the change in schema format required for query string validation in Fastify v5, moving from a simplified format to requiring a complete JSON Schema with type specification.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// v4\nfastify.get('/route', {\n  schema: {\n    querystring: {\n      name: { type: 'string' }\n    }\n  }\n}, (req, reply) => {\n  reply.send({ hello: req.query.name });\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// v5\nfastify.get('/route', {\n  schema: {\n    querystring: {\n      type: 'object',\n      properties: {\n        name: { type: 'string' }\n      },\n      required: ['name']\n    }\n  }\n}, (req, reply) => {\n  reply.send({ hello: req.query.name });\n});\n```\n\n----------------------------------------\n\nTITLE: Typing Fastify Decorators via Module Augmentation (TypeScript)\nDESCRIPTION: Demonstrates the standard TypeScript approach for typing Fastify decorators (`FastifyInstance`, `FastifyRequest`, `FastifyReply`) using module augmentation. This modifies the interfaces globally.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\ndeclare module 'fastify' {\n  interface FastifyInstance {\n    usersRepository: IUsersRepository\n  }\n  interface FastifyRequest {\n    session: ISession\n  }\n  interface FastifyReply {\n    sendSuccess: SendSuccessFn\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Stream to Fastify Logger (JavaScript)\nDESCRIPTION: This code demonstrates how to pass a custom stream to the Pino instance in Fastify by adding a stream field to the logger object.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Logging.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst split = require('split2')\nconst stream = split(JSON.parse)\n\nconst fastify = require('fastify')({\n  logger: {\n    level: 'info',\n    stream: stream\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Server Decorators for Request Headers\nDESCRIPTION: Example of using the decorate API to add a utility that accesses request headers. This works but is not as clean as using request decorators.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.decorate('getHeader', (req, header) => {\n  return req.headers[header]\n})\n\nfastify.addHook('preHandler', (request, reply, done) => {\n  request.isHappy = fastify.getHeader(request.raw, 'happy')\n  done()\n})\n\nfastify.get('/happiness', (request, reply) => {\n  reply.send({ happy: request.isHappy })\n})\n```\n\n----------------------------------------\n\nTITLE: Emitting Warnings with process-warning in Fastify - JavaScript\nDESCRIPTION: This snippet uses the process-warning module to emit deprecation and specific use case warnings, useful for notifying users of an API about potential issues or updates.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst warning = require('process-warning')()\nwarning.create('MyPluginWarning', 'MP_ERROR_CODE', 'message')\nwarning.emit('MP_ERROR_CODE')\n```\n\n----------------------------------------\n\nTITLE: Setting Up an HTTPS Server with Fastify in TypeScript - Part 1\nDESCRIPTION: The initial setup for creating an HTTPS server with Fastify, showing the required imports from Node.js and Fastify.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport fastify from 'fastify'\n```\n\n----------------------------------------\n\nTITLE: Accessing Socket Information in Fastify v4 and v5\nDESCRIPTION: This code demonstrates the deprecated use of `request.connection` in favor of `request.socket` in Fastify v5, which allows obtaining the remote address from socket properties. This change aims to streamline access to socket details. Ensure your code is compliant with v5's changes to prevent disruptions.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v4\nfastify.get('/route', (req, reply) => {\n  console.log(req.connection.remoteAddress);\n  return { hello: 'world' };\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v5\nfastify.get('/route', (req, reply) => {\n  console.log(req.socket.remoteAddress);\n  return { hello: 'world' };\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Access to Request Parameters in Fastify v5\nDESCRIPTION: Shows how to update code that relies on the request parameters object having a prototype in Fastify v5, where params no longer inherits from Object.prototype.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// v4\nfastify.get('/route/:name', (req, reply) => {\n  console.log(req.params.hasOwnProperty('name')); // true\n  return { hello: req.params.name };\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// v5\nfastify.get('/route/:name', (req, reply) => {\n  console.log(Object.hasOwn(req.params, 'name')); // true\n  return { hello: req.params.name };\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Semicolon Delimiter for Query String in Fastify v5\nDESCRIPTION: Demonstrates how to enable semicolon delimiters in query strings in Fastify v5, which is now disabled by default to comply with RFC 3986.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')({\n  useSemicolonDelimiter: true\n});\n```\n\n----------------------------------------\n\nTITLE: Removing app.use() in Fastify v4\nDESCRIPTION: Codemod command to automatically remove app.use() calls, which are no longer supported in Fastify v4.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V4.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx codemod@latest fastify/4/remove-app-use\n```\n\n----------------------------------------\n\nTITLE: Inferring Decorator Function Type (TypeScript)\nDESCRIPTION: Shows a common pattern for inferring the type of a function intended to be used as a Fastify decorator, avoiding manual type definition. The `typeof` operator is used to create the type `SendSuccess` from the `sendSuccess` function implementation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nfunction sendSuccess (this: FastifyReply) {\n  return this.send({ success: true })\n}\n\nexport type SendSuccess = typeof sendSuccess\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing Fastify Internal Lifecycle with ASCII Art\nDESCRIPTION: This ASCII art diagram illustrates the internal lifecycle of Fastify, showing the flow from incoming request to outgoing response. It includes various hooks, error handling, and the main processing stages.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Lifecycle.md#2025-04-22_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\nIncoming Request\n  │\n  └─▶ Routing\n        │\n        └─▶ Instance Logger\n             │\n   4**/5** ◀─┴─▶ onRequest Hook\n                  │\n        4**/5** ◀─┴─▶ preParsing Hook\n                        │\n              4**/5** ◀─┴─▶ Parsing\n                             │\n                   4**/5** ◀─┴─▶ preValidation Hook\n                                  │\n                            400 ◀─┴─▶ Validation\n                                        │\n                              4**/5** ◀─┴─▶ preHandler Hook\n                                              │\n                                    4**/5** ◀─┴─▶ User Handler\n                                                    │\n                                                    └─▶ Reply\n                                                          │\n                                                4**/5** ◀─┴─▶ preSerialization Hook\n                                                                │\n                                                                └─▶ onSend Hook\n                                                                      │\n                                                            4**/5** ◀─┴─▶ Outgoing Response\n                                                                            │\n                                                                            └─▶ onResponse Hook\n```\n\n----------------------------------------\n\nTITLE: Using Diagnostics Channel for Fastify Initialization\nDESCRIPTION: Illustrates how to use the diagnostics_channel to subscribe to Fastify initialization events and add custom hooks for tracing.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tracer = /* retrieved from elsewhere in the package */\nconst dc = require('node:diagnostics_channel')\nconst channel = dc.channel('fastify.initialization')\nconst spans = new WeakMap()\n\nchannel.subscribe(function ({ fastify }) {\n  fastify.addHook('onRequest', (request, reply, done) => {\n    const span = tracer.startSpan('fastify.request.handler')\n    spans.set(request, span)\n    done()\n  })\n\n  fastify.addHook('onResponse', (request, reply, done) => {\n    const span = spans.get(request)\n    span.finish()\n    done()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Schema Modification in Fastify\nDESCRIPTION: Example showing the correct way to modify schema properties while maintaining proper validation caching.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Request.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst validate = request.compileValidationSchema(schema1)\n\n// Later on...\nconst newSchema = Object.assign({}, schema1)\nnewSchema.properties.foo.type = 'integer'\n\nconst newValidate = request.compileValidationSchema(newSchema)\n\nconsole.log(newValidate === validate) // false\n```\n\n----------------------------------------\n\nTITLE: Implementing Substitutable Type Provider in TypeScript\nDESCRIPTION: This code snippet shows the correct implementation of a custom type provider that is substitutable with FastifyTypeProviderDefault by using 'unknown' instead of 'never' for type reduction.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Write-Type-Provider.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SubstitutableTypeProvider extends FastifyTypeProvider {\n  // good, anything can be assigned to `unknown`\n  validator: this['schema'] extends /** custom check here**/ ? /** narrowed type here **/ : unknown;\n  serializer: this['schema'] extends /** custom check here**/ ? /** narrowed type here **/ : unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Request Headers in Fastify\nDESCRIPTION: Example showing how to set custom headers on a Fastify request object. Headers are set using a simple object assignment and remain accessible via request.headers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Request.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.headers = {\n  'foo': 'bar',\n  'baz': 'qux'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Fastify Plugin\nDESCRIPTION: Commands to initialize a new npm project and install the fastify-plugin dependency, which is required for creating a Fastify plugin with TypeScript support.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\nnpm i fastify-plugin\n```\n\n----------------------------------------\n\nTITLE: Using $ref to /definitions in Same JSON Schema\nDESCRIPTION: Shows how to reference a schema definition within the same schema using $ref to /definitions. This is another approach to reuse schema components within a single schema.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst refToDefinitions = {\n  type: 'object',\n  definitions: {\n    foo: {\n      $id: '#address',\n      type: 'object',\n      properties: {\n        city: { type: 'string' }\n      }\n    }\n  },\n  properties: {\n    home: { $ref: '#/definitions/foo' },\n    work: { $ref: '#/definitions/foo' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating reply.res to reply.raw in Fastify v4\nDESCRIPTION: Codemod command to replace references to reply.res with reply.raw, as required in Fastify v4.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V4.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx codemod@latest fastify/4/reply-raw-access\n```\n\n----------------------------------------\n\nTITLE: Simulating external provider interactions with delays\nDESCRIPTION: This code simulates an external provider that generates a magic key and provides sensitive data. It includes artificial delays to simulate network latency and processing time, and demonstrates how a provider might call back to the server's webhook endpoint.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Delay-Accepting-Requests.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { fetch } = require('undici')\nconst { setTimeout } = require('node:timers/promises')\n\nconst MAGIC_KEY = '12345'\n\nconst delay = setTimeout\n\nexports.thirdPartyMagicKeyGenerator = async (ms) => {\n  // Simulate processing delay\n  await delay(ms)\n\n  // Simulate webhook request to our server\n  const { status } = await fetch(\n    'http://localhost:1234/webhook',\n    {\n      body: JSON.stringify({ magicKey: MAGIC_KEY }),\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n    },\n  )\n\n  if (status !== 200) {\n    throw new Error('Failed to fetch magic key')\n  }\n}\n\nexports.fetchSensitiveData = async (key) => {\n  // Simulate processing delay\n  await delay(700)\n  const data = { sensitive: true }\n\n  if (key === MAGIC_KEY) {\n    return data\n  }\n\n  throw new Error('Invalid key')\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fastify Plugin with TypeScript Import\nDESCRIPTION: TypeScript example showing how to properly import a Fastify plugin to trigger type augmentation while registering the plugin.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'plugin' // here will trigger the type augmentation.\n\nfastify.register(require('plugin'))\n```\n\n----------------------------------------\n\nTITLE: Typing Bound Decorator Functions with OmitThisParameter (TypeScript)\nDESCRIPTION: Explains and demonstrates how to correctly type a decorator function retrieved using `getDecorator`. Since `getDecorator` returns the function with its `this` context pre-bound, the `this` parameter is removed from its signature. The `OmitThisParameter` utility type is required to correctly type the retrieved function (`BoundSendSuccess`).\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nfunction sendSuccess (this: FastifyReply) {\n  return this.send({ success: true })\n}\n\ntype BoundSendSuccess = OmitThisParameter<typeof sendSuccess>\n\nfastify.decorateReply('sendSuccess', sendSuccess)\nfastify.get('/success', async (request, reply) => {\n  const sendSuccess = reply.getDecorator<BoundSendSuccess>('sendSuccess')\n  await sendSuccess()\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Install Fastify CLI Tool using NPM\nDESCRIPTION: To use Fastify's CLI integration, first install the fastify-cli package using npm. This command installs the fastify-cli locally, allowing you to scaffold and manage Fastify projects from the command line.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnpm i fastify-cli\n```\n\n----------------------------------------\n\nTITLE: Synchronous Route with Uncaught Error in Fastify\nDESCRIPTION: Example of a synchronous route handler that throws an uncaught error, which Fastify will catch and route to its default error handler, resulting in a 500 Internal Server Error response.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Errors.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/', () => { throw new Error('kaboom') })\n```\n\n----------------------------------------\n\nTITLE: Decorating Utilities and Handling Requests in Fastify - JavaScript\nDESCRIPTION: This snippet demonstrates the use of Fastify's decorate functionality to create a utility function and apply it to every request via hooks, simplifying request handling across different routes.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify.decorate('util', (request, key, value) => { request[key] = value })\n\nfastify.get('/plugin1', (request, reply) => {\n  fastify.util(request, 'timestamp', new Date())\n  reply.send(request)\n})\n\nfastify.get('/plugin2', (request, reply) => {\n  fastify.util(request, 'timestamp', new Date())\n  reply.send(request)\n})\n```\n\n----------------------------------------\n\nTITLE: Add NPM Script for Running Fastify Server\nDESCRIPTION: To run your Fastify server from the CLI using npm, add a start script to your package.json file. The script utilizes fastify-cli to start the server defined in `server.js`.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"fastify start server.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Request Decoration Pattern - JavaScript\nDESCRIPTION: Recommended approach using the decorator API to properly initialize and modify request properties.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.decorateRequest('user', '')\n\nfastify.addHook('preHandler', (req, reply, done) => {\n  req.user = 'Bob Dylan'\n  done()\n})\n\nfastify.get('/', (req, reply) => {\n  reply.send(`Hello, ${req.user}!`)\n})\n```\n\n----------------------------------------\n\nTITLE: Viewing Firebase Functions Logs (Bash)\nDESCRIPTION: Retrieves and displays logs for the deployed Firebase Functions using the Firebase CLI. This command is essential for monitoring function execution, debugging issues, and understanding application behavior in the deployed Firebase environment.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:log\n```\n\n----------------------------------------\n\nTITLE: Updated provider simulation for the plugin-based approach\nDESCRIPTION: This version of the provider simulation module works with the improved plugin-based implementation. It maintains the same interface and functionality as the original version, generating a magic key and providing access to sensitive data.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Delay-Accepting-Requests.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { fetch } = require('undici')\nconst { setTimeout } = require('node:timers/promises')\n\nconst MAGIC_KEY = '12345'\n\nconst delay = setTimeout\n\nexports.thirdPartyMagicKeyGenerator = async (ms) => {\n  // Simulate processing delay\n  await delay(ms)\n\n  // Simulate webhook request to our server\n  const { status } = await fetch(\n    'http://localhost:1234/webhook',\n    {\n      body: JSON.stringify({ magicKey: MAGIC_KEY }),\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n    },\n  )\n\n  if (status !== 200) {\n    throw new Error('Failed to fetch magic key')\n  }\n}\n\nexports.fetchSensitiveData = async (key) => {\n  // Simulate processing delay\n  await delay(700)\n  const data = { sensitive: true }\n\n  if (key === MAGIC_KEY) {\n    return data\n  }\n\n  throw new Error('Invalid key')\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Fastify Plugin with Default Export\nDESCRIPTION: Alternative TypeScript example showing how to import a Fastify plugin with its default export and trigger type augmentation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport plugin from 'plugin' //  here will trigger the type augmentation.\n\nfastify.register(plugin)\n```\n\n----------------------------------------\n\nTITLE: Installing json-schema-to-ts for Direct Type Inference (Bash)\nDESCRIPTION: Installs the json-schema-to-ts package as a dev dependency. This library allows inferring TypeScript types directly from JSON Schema objects in code, enabling type-safe request payloads without needing offline code generation. Use before implementing inference logic in application code.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D json-schema-to-ts\n```\n\n----------------------------------------\n\nTITLE: Fastify Route Handler Interface Definition\nDESCRIPTION: Interface definition for route shorthand options that includes a required handler property of type RouteHandlerMethod.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nfastify.RouteShorthandOptionsWithHandler<RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig>\n```\n\n----------------------------------------\n\nTITLE: Object.assign Prototype Poisoning Vulnerability\nDESCRIPTION: Shows how Object.assign() can inadvertently convert a harmless __proto__ property into an actual prototype, demonstrating the security vulnerability.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Prototype-Poisoning.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n> const x = Object.assign({}, a);\n> x;\n{ b: 5}\n> x.c;\n6;\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Fastify Plugin in JavaScript\nDESCRIPTION: This snippet defines a basic Fastify plugin using the `fastify-plugin` module. The asynchronous function `myPlugin` takes `fastify` and `options` as arguments. Inside, it uses `fastify.decorateRequest` to add a property `helloRequest` to the request object and `fastify.decorate` to add `helloInstance` to the Fastify instance itself. The plugin is exported wrapped in `fastify-plugin` to ensure proper encapsulation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Testing.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst fP = require(\"fastify-plugin\")\n\nasync function myPlugin(fastify, options) {\n    fastify.decorateRequest(\"helloRequest\", \"Hello World\")\n    fastify.decorate(\"helloInstance\", \"Hello Fastify Instance\")\n}\n\nmodule.exports = fP(myPlugin)\n```\n\n----------------------------------------\n\nTITLE: Joi Validation Integration in Fastify\nDESCRIPTION: Example of using Joi validation library instead of the default Ajv validator.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst Joi = require('joi')\n\nfastify.post('/the/url', {\n  schema: {\n    body: Joi.object().keys({\n      hello: Joi.string().required()\n    }).required()\n  },\n  validatorCompiler: ({ schema, method, url, httpPart }) => {\n    return data => schema.validate(data)\n  }\n}, handler)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Handling Composition in Fastify v4\nDESCRIPTION: Example showing how error handling is composed in Fastify v4, with errors propagating through multiple handlers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V4.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fastify from 'fastify'\n\nconst fastify = Fastify()\n\nfastify.register(async fastify => {\n  fastify.setErrorHandler(async err => {\n    console.log(err.message) // 'kaboom'\n    throw new Error('caught')\n  })\n\n  fastify.get('/encapsulated', async () => {\n    throw new Error('kaboom')\n  })\n})\n\nfastify.setErrorHandler(async err => {\n  console.log(err.message) // 'caught'\n  throw new Error('wrapped')\n})\n\nconst res = await fastify.inject('/encapsulated')\nconsole.log(res.json().message) // 'wrapped'\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify as Dependency\nDESCRIPTION: Command to install Fastify as a dependency in an existing project.\nSOURCE: https://github.com/fastify/fastify/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i fastify\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Script for Creating Users Table\nDESCRIPTION: A SQL migration script for Postgrator that creates a users table with id, created_at, firstName, and lastName fields. The migration follows Postgrator's naming convention for versioning and actions.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Database.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS users (\n  id SERIAL PRIMARY KEY NOT NULL,\n  created_at DATE NOT NULL DEFAULT CURRENT_DATE,\n  firstName TEXT NOT NULL,\n  lastName TEXT NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Route Metadata Printing in Fastify\nDESCRIPTION: Shows how to print route metadata including hooks and custom properties using includeMeta and includeHooks options.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.get('/test', () => {})\nfastify.get('/test/hello', () => {})\n\nconst onTimeout = () => {}\n\nfastify.addHook('onRequest', () => {})\nfastify.addHook('onTimeout', onTimeout)\n\nconsole.log(fastify.printRoutes({ includeHooks: true, includeMeta: ['errorHandler'] }))\n```\n\n----------------------------------------\n\nTITLE: Measuring Response Time with Fastify v4 and v5\nDESCRIPTION: Fastify v5 replaces `reply.getResponseTime()` with `reply.elapsedTime` for measuring the response time. These code samples update the approach to retrieve response durations accurately using the new method available in v5. Ensure the Fastify instance is up to date to support this change.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v4\nfastify.get('/route', (req, reply) => {\n  console.log(reply.getResponseTime());\n  return { hello: 'world' };\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v5\nfastify.get('/route', (req, reply) => {\n  console.log(reply.elapsedTime);\n  return { hello: 'world' };\n});\n```\n\n----------------------------------------\n\nTITLE: Method-Specific Route Printing in Fastify\nDESCRIPTION: Shows how to print method-specific route trees for debugging purposes using the method parameter.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(fastify.printRoutes({ method: 'GET' }))\nconsole.log(fastify.printRoutes({ method: 'PUT' }))\n```\n\n----------------------------------------\n\nTITLE: Using Reply Decorators for Enhanced HTML Response\nDESCRIPTION: Example of using decorateReply to add an HTML method to the reply object, providing a cleaner API with access to the Reply context through 'this'.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.decorateReply('html', function (payload) {\n  this.type('text/html') // This is the 'Reply' object\n  this.send(generateHtml(payload))\n})\n\nfastify.get('/html', (request, reply) => {\n  reply.html({ hello: 'world' })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Express Middleware in Fastify v2 vs v3\nDESCRIPTION: Shows how middleware support has changed in Fastify v3, requiring the use of the @fastify/express or @fastify/middie plugin instead of being built-in.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V3.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Using the Express `cors` middleware in Fastify v2.\nfastify.use(require('cors')());\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Using the Express `cors` middleware in Fastify v3.\nawait fastify.register(require('@fastify/express'));\nfastify.use(require('cors')());\n```\n\n----------------------------------------\n\nTITLE: Calling Not Found Handler in Fastify\nDESCRIPTION: Example of invoking the custom not found handler.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nreply.callNotFound()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes readinessProbe for Fastify - YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes readinessProbe that checks the /health endpoint on port 4000 to determine if the Fastify app is ready. It is necessary to ensure the pod can be reached on 0.0.0.0 or by configuring the probe's hostname appropriately. Dependencies: a running Kubernetes cluster, Fastify app listening on the correct interface, and the probe requires endpoints for health checking. Key parameters include httpGet parameters (path, port), initialDelaySeconds, periodSeconds, timeoutSeconds, successThreshold, and failureThreshold. Input: Kubernetes health check mechanism; output: Pod readiness status. Limitation: Probe may fail if the Fastify server does not listen on the pod IP or if the endpoint is unavailable.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Recommendations.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nreadinessProbe:\n    httpGet:\n        path: /health\n        port: 4000\n    initialDelaySeconds: 30\n    periodSeconds: 30\n    timeoutSeconds: 3\n    successThreshold: 1\n    failureThreshold: 5\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify Project Setup\nDESCRIPTION: Commands to create and initialize a new Fastify project using npm.\nSOURCE: https://github.com/fastify/fastify/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-app\ncd my-app\nnpm init fastify\nnpm i\nnpm run dev\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Fastify v4 Migration Codemod Recipe\nDESCRIPTION: Command to run a set of codemods that automatically update code to Fastify v4 patterns and APIs.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V4.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx codemod@latest fastify/4/migration-recipe\n```\n\n----------------------------------------\n\nTITLE: Testing Fastify Route Encapsulation\nDESCRIPTION: Shell commands demonstrating how to test the encapsulated routes using curl, showing different levels of decorator accessibility.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Encapsulation.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# curl -H 'authorization: Bearer abc123' http://127.0.0.1:8000/one\n{\"answer\":42}\n# curl http://127.0.0.1:8000/two\n{\"answer\":42,\"foo\":\"foo\"}\n# curl http://127.0.0.1:8000/three\n{\"answer\":42,\"foo\":\"foo\",\"bar\":\"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Run Fastify Server with NPM Start Command\nDESCRIPTION: Use npm to start the Fastify server after setting up the start script in package.json. This bash command runs the configured start script, which launches the server with fastify-cli.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining npm Script for Building Netlify Functions (JSON)\nDESCRIPTION: Shows an example of adding a `build:functions` script to the `scripts` section of a `package.json` file. This script utilizes the `netlify-lambda build` command to process the source files located in the `functions` directory, applying the custom Webpack configuration specified by `--config ./webpack.config.netlify.js` to produce optimized function bundles for Netlify deployment.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  ...\n  \"build:functions\": \"netlify-lambda build functions --config ./webpack.config.netlify.js\"\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Specification Example\nDESCRIPTION: Example showing how to specify a Fastify dependency version using the tilde range qualifier to receive only patch updates within a specific minor version.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/LTS.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"fastify\": \"~3.15.x\"\n```\n\n----------------------------------------\n\nTITLE: Defining headers.json for Schema Input (JSON)\nDESCRIPTION: Defines a JSON schema for HTTP headers, requiring a single string property 'h-Custom'. This file is meant to be placed inside a 'schemas' directory and used as input for type generation tooling. Ensure the 'schemas' folder exists before saving the file.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Headers Schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"h-Custom\": { \"type\": \"string\" }\n  },\n  \"additionalProperties\": false,\n  \"required\": [\"h-Custom\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Schema Modification in Fastify\nDESCRIPTION: Example showing incorrect way to modify schema properties that won't work with validation caching.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Request.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst validate = request.compileValidationSchema(schema1)\n\n// Later on...\nschema1.properties.foo.type. = 'integer'\nconst newValidate = request.compileValidationSchema(schema1)\n\nconsole.log(newValidate === validate) // true\n```\n\n----------------------------------------\n\nTITLE: Handling Plugin Startup Errors with after in Fastify - JavaScript\nDESCRIPTION: This code uses Fastify's after API to catch and handle startup errors in plugins, allowing custom error handling logic right after plugin registration.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nfastify\n  .register(require('./database-connector'))\n  .after(err => {\n    if (err) throw err\n  })\n```\n\n----------------------------------------\n\nTITLE: Registering an onRequestAbort Hook in Fastify (Async/Await)\nDESCRIPTION: Illustrates registering an 'onRequestAbort' hook using `fastify.addHook` with an `async` function. This hook executes when the client aborts the connection prematurely. Useful for cleanup or logging aborted requests. No response can be sent.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Hooks.md#2025-04-22_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nfastify.addHook('onRequestAbort', async (request) => {\n  // Some code\n  await asyncMethod()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Content Type in Fastify\nDESCRIPTION: Example of setting the Content-Type header for the response.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nreply.type('text/html')\n```\n\n----------------------------------------\n\nTITLE: Using $ref to a Shared Schema /definitions as External Schema\nDESCRIPTION: Shows how to reference a schema component from a shared schema using $ref to /definitions. This is another approach to reuse schema components across multiple schemas.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Validation-and-Serialization.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.addSchema({\n  $id: 'http://foo/shared.json',\n  type: 'object',\n  definitions: {\n    foo: {\n      type: 'object',\n      properties: {\n        city: { type: 'string' }\n      }\n    }\n  }\n})\n\nconst refToSharedSchemaDefinitions = {\n  type: 'object',\n  properties: {\n    home: { $ref: 'http://foo/shared.json#/definitions/foo' },\n    work: { $ref: 'http://foo/shared.json#/definitions/foo' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct vs. Incorrect Type Provider Usage with Plugins\nDESCRIPTION: Example demonstrating the correct and incorrect ways to use type providers with plugins. Type providers don't propagate globally, so they must be registered in each plugin scope.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Type-Providers.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Fastify from 'fastify'\nimport { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'\nimport { Type } from '@sinclair/typebox'\n\nconst server = Fastify().withTypeProvider<TypeBoxTypeProvider>()\n\nserver.register(plugin1) // wrong\nserver.register(plugin2) // correct\n\nfunction plugin1(fastify: FastifyInstance, _opts, done): void {\n  fastify.get('/', {\n    schema: {\n      body: Type.Object({\n        x: Type.String(),\n        y: Type.Number(),\n        z: Type.Boolean()\n      })\n    }\n  }, (req) => {\n    // In a new scope, call `withTypeProvider` again to ensure it works\n    const { x, y, z } = req.body\n  });\n  done()\n}\n\nfunction plugin2(fastify: FastifyInstance, _opts, done): void {\n  const server = fastify.withTypeProvider<TypeBoxTypeProvider>()\n\n  server.get('/', {\n    schema: {\n      body: Type.Object({\n        x: Type.String(),\n        y: Type.Number(),\n        z: Type.Boolean()\n      })\n    }\n  }, (req) => {\n    // works\n    const { x, y, z } = req.body\n  });\n  done()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Dependencies\nDESCRIPTION: Shell command for installing required MongoDB dependencies.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm i fastify-plugin @fastify/mongodb\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Functions (Bash)\nDESCRIPTION: Deploys the functions defined in the current Firebase project to the Firebase cloud environment using the Firebase CLI. The `--only functions` flag ensures that only the function resources are updated or deployed.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy --only functions\n```\n\n----------------------------------------\n\nTITLE: Forcing TypeScript to Import Plugin Types with tsconfig\nDESCRIPTION: JSON configuration for tsconfig.json that forces TypeScript to import specific plugin types, ensuring type augmentation occurs.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_27\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"types\": [\"plugin\"] // we force TypeScript to import the types\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Delay Plugin Factory Fastify JavaScript\nDESCRIPTION: This JavaScript snippet defines a Fastify plugin factory 'delay' that wraps routes with an onRequest hook to manage service readiness. It ensures certain requests are delayed and returns a 503 status code when the server is not ready. Dependencies include Fastify and its hooks mechanism. Key parameters include 'routes' for delayed routes and 'magicKey' to check readiness. Outputs a 503 status with retry information when not ready, otherwise normal route handling.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Delay-Accepting-Requests.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst delay = (routes) =>\n  function (fastify, opts, done) {\n    // Make sure customer requests won\\'t be accepted if the magicKey is not\n    // available\n    fastify.addHook('onRequest', function (request, reply, next) {\n      if (!request.server.magicKey) {\n        reply.statusCode = 503\n        reply.header('Retry-After', USUAL_WAIT_TIME_MS)\n        reply.send({ error: true, retryInMs: USUAL_WAIT_TIME_MS })\n      }\n\n      next()\n    })\n\n    // Register to-be-delayed routes\n    fastify.register(routes, opts)\n\n    done()\n  }\n```\n\n----------------------------------------\n\nTITLE: Modular Type Provider Setup with FastifyInstance Type Definition\nDESCRIPTION: Example showing how to use Type Providers in a modular application structure by defining a proper FastifyInstance type with the Type Provider. This pattern is useful when working with separate route files.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Type-Providers.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\nimport Fastify from 'fastify'\nimport { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'\nimport { registerRoutes } from './routes'\n\nconst server = Fastify().withTypeProvider<TypeBoxTypeProvider>()\n\nregisterRoutes(server)\n\nserver.listen({ port: 3000 })\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// routes.ts\nimport { Type } from '@sinclair/typebox'\nimport {\n  FastifyInstance,\n  FastifyBaseLogger,\n  RawReplyDefaultExpression,\n  RawRequestDefaultExpression,\n  RawServerDefault\n} from 'fastify'\nimport { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'\n\ntype FastifyTypebox = FastifyInstance<\n  RawServerDefault,\n  RawRequestDefaultExpression<RawServerDefault>,\n  RawReplyDefaultExpression<RawServerDefault>,\n  FastifyBaseLogger,\n  TypeBoxTypeProvider\n>;\n\nexport function registerRoutes(fastify: FastifyTypebox): void {\n  fastify.get('/', {\n    schema: {\n      body: Type.Object({\n        x: Type.String(),\n        y: Type.Number(),\n        z: Type.Boolean()\n      })\n    }\n  }, (req) => {\n    // works\n    const { x, y, z } = req.body\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Registration with Direct Options\nDESCRIPTION: Shows plugin registration with direct options when option name collisions are not a concern.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.register(require('fastify-foo'), {\n  prefix: '/foo',\n  fooOption1: 'value',\n  fooOption2: 'value'\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Fastify Error Codes in Node.js\nDESCRIPTION: Demonstrates how to import the `errorCodes` object from the Fastify library using both ES Module (`import`) and CommonJS (`require`) syntaxes in Node.js. This object provides access to Fastify's predefined error code constants for error handling.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Errors.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// ESM\nimport { errorCodes } from 'fastify'\n\n// CommonJS\nconst errorCodes = require('fastify').errorCodes\n```\n\n----------------------------------------\n\nTITLE: Defining querystring.json for Schema Input (JSON)\nDESCRIPTION: Defines a JSON schema for an authentication query string, including 'username' and 'password' as required string properties. Intended for use in the 'schemas' directory for type/interface generation. The schema ensures incoming data conforms to the expected structure when validating requests.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Querystring Schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"username\": { \"type\": \"string\" },\n    \"password\": { \"type\": \"string\" }\n  },\n  \"additionalProperties\": false,\n  \"required\": [\"username\", \"password\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for a Node.js Fastify App (Dockerfile)\nDESCRIPTION: Provides a basic Dockerfile configuration for packaging a Node.js Fastify application for deployment, suitable for environments like Google Cloud Run. It uses the official `node:10` image, sets up the working directory, optimizes dependency installation by copying `package*.json` first, installs production dependencies, copies application code, and specifies `npm start` as the container's startup command.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_11\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Use the official Node.js 10 image.\n# https://hub.docker.com/_/node\nFROM node:10\n\n# Create and change to the app directory.\nWORKDIR /usr/src/app\n\n# Copy application dependency manifests to the container image.\n# A wildcard is used to ensure both package.json AND package-lock.json are copied.\n# Copying this separately prevents re-running npm install on every code change.\nCOPY package*.json ./\n\n# Install production dependencies.\nRUN npm i --production\n\n# Copy local code to the container image.\nCOPY . .\n\n# Run the web service on container startup.\nCMD [ \"npm\", \"start\" ]\n```\n\n----------------------------------------\n\nTITLE: Setting Request Decorator Value Directly (TypeScript)\nDESCRIPTION: Illustrates the standard, but potentially unsafe, way of setting the value of a request decorator (`req.user`) within a hook (`preHandler`). This approach lacks compile-time or runtime checks to ensure the decorator exists or prevent typos.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nfastify.decorateRequest('user', '')\nfastify.addHook('preHandler', async (req, reply) => {\n  req.user = 'Bob Dylan'\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Emulators for Local Function Testing (Bash)\nDESCRIPTION: Runs the Firebase emulators, specifically targeting only the functions emulator (`--only functions`). This command allows developers to test their Firebase Functions implementation in a local environment that mimics the cloud environment before deployment.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfirebase emulators:start --only functions\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Utility Module\nDESCRIPTION: Traditional approach to creating and exporting a utility function that can be used in other files by importing it, without using Fastify's decorator system.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// your-awesome-utility.js\nmodule.exports = function (a, b) {\n  return a + b\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Request Object Mutation Example - JavaScript\nDESCRIPTION: Example showing a discouraged way of mutating request objects that can cause JavaScript engine deoptimization.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.addHook('preHandler', function (req, reply, done) {\n  req.user = 'Bob Dylan'\n  done()\n})\n\nfastify.get('/', function (req, reply) {\n  reply.send(`Hello, ${req.user}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Configuration with Declaration Output (Bash/JSON)\nDESCRIPTION: Shows how to generate a tsconfig.json for TypeScript compilation via CLI, followed by editing the config to ensure declaration files are produced for type definition emission. Required for publishing or using plugins with TypeScript consumers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx typescript --init\n```\n\n----------------------------------------\n\nTITLE: Using RawReplyDefaultExpression in Fastify TypeScript\nDESCRIPTION: This example shows how to use the RawReplyDefaultExpression type with different server types (http and http2). It demonstrates the conditional return type based on the server type.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport http from 'node:http'\nimport http2 from 'node:http2'\nimport { RawReplyDefaultExpression } from 'fastify'\n\nRawReplyDefaultExpression<http.Server> // -> http.ServerResponse\nRawReplyDefaultExpression<http2.Http2Server> // -> http2.Http2ServerResponse\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table of Contents for Fastify Guides\nDESCRIPTION: This markdown snippet creates a table of contents for Fastify guides. It includes a centered header, an anchor tag for navigation, and a list of guide titles with their corresponding file links and brief descriptions.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<h1 align=\"center\">Fastify</h1>\n\n## Guides Table Of Contents\n<a id=\"guides-toc\"></a>\n\nThis table of contents is in alphabetical order.\n\n+ [Benchmarking](./Benchmarking.md): This guide introduces how to benchmark\n  applications based on Fastify.\n+ [Contributing](./Contributing.md): Details how to participate in the\n  development of Fastify, and shows how to setup an environment compatible with\n  the project's code style.\n+ [Delay Accepting Requests](./Delay-Accepting-Requests.md): A practical guide\n  on how to delay serving requests to specific routes until some condition is\n  met in your application. This guide focuses on solving the problem using\n  [`Hooks`](../Reference/Hooks.md), [`Decorators`](../Reference/Decorators.md),\n  and [`Plugins`](../Reference/Plugins.md).\n+ [Detecting When Clients Abort](./Detecting-When-Clients-Abort.md): A\n  practical guide on detecting if and when a client aborts a request.\n+ [Ecosystem](./Ecosystem.md): Lists all core plugins and many known community\n  plugins.\n+ [Fluent Schema](./Fluent-Schema.md): Shows how JSON Schema can be\n  written with a fluent API and used in Fastify.\n+ [Getting Started](./Getting-Started.md): Introduction tutorial for Fastify.\n  This is where beginners should start.\n+ [Migration Guide (v4)](./Migration-Guide-V4.md): Details how to migrate to\n  Fastify v4 from earlier versions.\n+ [Migration Guide (v3)](./Migration-Guide-V3.md): Details how to migrate to\n  Fastify v3 from earlier versions.\n+ [Plugins Guide](./Plugins-Guide.md): An informal introduction to writing\n  Fastify plugins.\n+ [Prototype Poisoning](./Prototype-Poisoning.md): A description of how the\n  prototype poisoning attack works and is mitigated.\n+ [Recommendations](./Recommendations.md): Recommendations for how to deploy\n  Fastify into production environments.\n+ [Serverless](./Serverless.md): Details on how to deploy Fastify applications\n  in various Function as a Service (FaaS) environments.\n+ [Style Guide](./Style-Guide.md): Explains the writing style we use for the\n  Fastify documentation for those who want to contribute documentation.\n+ [Testing](./Testing.md): Explains how to write unit tests for Fastify\n  applications.\n+ [Write Plugin](./Write-Plugin.md): A set of guidelines for what the Fastify\n  team considers good practices for writing a Fastify plugin.\n```\n\n----------------------------------------\n\nTITLE: Updating Type Provider Implementation in Fastify v5\nDESCRIPTION: Shows the required changes for type providers in Fastify v5, which now differentiates between validator and serializer schemas with separate types.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- a/index.ts\n+++ b/index.ts\n@@ -11,7 +11,8 @@ import {\n import { FromSchema, FromSchemaDefaultOptions, FromSchemaOptions, JSONSchema } from 'json-schema-to-ts'\n\n export interface JsonSchemaToTsProvider<\n   Options extends FromSchemaOptions = FromSchemaDefaultOptions\n > extends FastifyTypeProvider {\n-  output: this['input'] extends JSONSchema ? FromSchema<this['input'], Options> : unknown;\n+  validator: this['schema'] extends JSONSchema ? FromSchema<this['schema'], Options> : unknown;\n+  serializer: this['schema'] extends JSONSchema ? FromSchema<this['schema'], Options> : unknown;\n }\n```\n\n----------------------------------------\n\nTITLE: Enabling Declaration Files in tsconfig.json (JSON)\nDESCRIPTION: Modifies the 'compilerOptions' in tsconfig.json to enable declaration file generation. This is essential for distributing TypeScript plugins so that consumers can use type information in their own TypeScript projects.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"declaration\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Assertions when Setting Decorators Directly (TypeScript)\nDESCRIPTION: Shows the necessity of using TypeScript type assertions (`as typeof req & { user: string }`) when setting a request decorator directly if its type is not declared globally via module augmentation. This bypasses compiler checks.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nfastify.addHook('preHandler', async (req, reply) => {\n  (req as typeof req & { user: string }).user = 'Bob Dylan'\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for TypeScript Support\nDESCRIPTION: JSON configuration for package.json that specifies the main JavaScript file and TypeScript type definitions file for a Fastify plugin.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Response Trailers in Fastify\nDESCRIPTION: Example showing how to remove a previously set response trailer.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Reply.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreply.trailer('server-timing', function() {\n  return 'db;dur=53, app;dur=47.2'\n})\nreply.removeTrailer('server-timing')\nreply.getTrailer('server-timing') // undefined\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Prototype Assignment\nDESCRIPTION: Shows how JavaScript prototype inheritance works by setting a prototype using __proto__ and accessing inherited properties.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Prototype-Poisoning.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n> const a = { b: 5 };\n> a.b;\n5\n> a.__proto__ = { c: 6 };\n> a.c;\n6\n> a;\n{ b: 5 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Build Settings for Functions (TOML)\nDESCRIPTION: Defines build settings within a `netlify.toml` configuration file. The `[build]` section specifies the command Netlify should execute to build the site and functions (`npm run build:functions`). The `functions` property indicates the directory (`functions-build`) containing the compiled serverless functions ready for deployment. The `publish` property (commented out) typically points to the static frontend assets directory.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[build]\n  # This will be run the site build\n  command = \"npm run build:functions\"\n  # This is the directory is publishing to netlify's CDN\n  # and this is directory of your front of your app\n  # publish = \"build\"\n  # functions build directory\n  functions = \"functions-build\" # always appends `-build` folder to your `functions` folder for builds\n```\n\n----------------------------------------\n\nTITLE: Deploying Docker Image to Google Cloud Run (Bash)\nDESCRIPTION: Uses the `gcloud beta run deploy` command to deploy a container image stored in Google Container Registry (`gcr.io/PROJECT-ID/APP-NAME`) to the fully managed Google Cloud Run service. The `--platform managed` flag specifies the deployment target. Replace `PROJECT-ID` and `APP-NAME` with the actual project ID and application name.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta run deploy --image gcr.io/PROJECT-ID/APP-NAME --platform managed\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for ESM\nDESCRIPTION: JSON configuration in package.json to enable ECMAScript Modules (ESM) in a project.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getter/Setter Decorator Pattern - JavaScript\nDESCRIPTION: Example showing how to use getter/setter pattern for decorators.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Decorators.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfastify.decorate('foo', {\n  getter () {\n    return 'a getter'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Compressed Route Tree Printing in Fastify\nDESCRIPTION: Demonstrates printing compressed route trees by disabling common prefix display.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(fastify.printRoutes({ commonPrefix: false }))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support Changes in Fastify v2 vs v3\nDESCRIPTION: Illustrates the differences in TypeScript type definitions between v2 and v3, with v3 introducing a more structured approach to defining request schemas using generic constraints.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V3.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PingQuerystring {\n  foo?: number;\n}\n\ninterface PingParams {\n  bar?: string;\n}\n\ninterface PingHeaders {\n  a?: string;\n}\n\ninterface PingBody {\n  baz?: string;\n}\n\nserver.get<PingQuerystring, PingParams, PingHeaders, PingBody>(\n  '/ping/:bar',\n  opts,\n  (request, reply) => {\n    console.log(request.query); // This is of type `PingQuerystring`\n    console.log(request.params); // This is of type `PingParams`\n    console.log(request.headers); // This is of type `PingHeaders`\n    console.log(request.body); // This is of type `PingBody`\n  }\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nserver.get<{\n  Querystring: PingQuerystring;\n  Params: PingParams;\n  Headers: PingHeaders;\n  Body: PingBody;\n}>('/ping/:bar', opts, async (request, reply) => {\n  console.log(request.query); // This is of type `PingQuerystring`\n  console.log(request.params); // This is of type `PingParams`\n  console.log(request.headers); // This is of type `PingHeaders`\n  console.log(request.body); // This is of type `PingBody`\n});\n```\n\n----------------------------------------\n\nTITLE: Example Output of Initial Fastify Plugin Test\nDESCRIPTION: This snippet shows the expected console output after running the initial test script (`test/myFirstPlugin.test.js` from the previous example). It confirms that the simulated request returned a status code of 200 and a JSON body `{\"message\":\"Hello World\"}`, indicating the plugin was registered correctly and the decorator was accessible in the route.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Testing.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nstatus code:  200\nbody:  {\"message\":\"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Shared Context in Fastify\nDESCRIPTION: Shell commands showing how decorators are now shared between contexts after breaking encapsulation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Encapsulation.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# curl http://127.0.0.1:8000/two\n{\"answer\":42,\"foo\":\"foo\",\"bar\":\"bar\"}\n# curl http://127.0.0.1:8000/three\n{\"answer\":42,\"foo\":\"foo\",\"bar\":\"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking with Specific Node.js Version\nDESCRIPTION: Runs benchmark tests using a specific Node.js version (v10) using npx.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Benchmarking.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx -p node@10 -- npm run benchmark\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastify Server\nDESCRIPTION: Creates a server instance with logging configuration using pino-pretty for formatted output. Sets up server to listen on port 3000 with error handling.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Testing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst server = require('./app')({\n  logger: {\n    level: 'info',\n    transport: {\n      target: 'pino-pretty'\n    }\n  }\n})\n\nserver.listen({ port: 3000 }, (err, address) => {\n  if (err) {\n    server.log.error(err)\n    process.exit(1)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Unsandboxing VSCode for Portable Mode\nDESCRIPTION: Command to remove quarantine attributes from VSCode installation for portable mode functionality.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Contributing.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nxattr -dr com.apple.quarantine /Applications/VSCodeFastify/Visual\\ Studio\\ Code.app\n```\n\n----------------------------------------\n\nTITLE: Installing json-schema-to-typescript via npm (Bash)\nDESCRIPTION: Installs the json-schema-to-typescript package as a development dependency using npm. This is required to convert JSON Schema files into TypeScript interfaces using the CLI utility 'json2ts'. Run this command in your project root before using schema compilation scripts.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D json-schema-to-typescript\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Standalone Utility\nDESCRIPTION: Example of importing and using a utility module the traditional way, which requires importing it in every file where it's needed.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Plugins-Guide.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst util = require('./your-awesome-utility')\nconsole.log(util('that is ', 'awesome'))\n```\n\n----------------------------------------\n\nTITLE: Fastify Body Parser Type Definition\nDESCRIPTION: Function type definition for body parser methods that can handle either string or Buffer body content.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nfastify.FastifyBodyParser<RawBody, RawServer, RawRequest>\n```\n\n----------------------------------------\n\nTITLE: Submitting App Build to Google Cloud Build (Bash)\nDESCRIPTION: Uses the `gcloud builds submit` command to initiate a build process on Google Cloud Build using the source code and Dockerfile in the current directory. The command tags the resulting Docker image with a specified name (`gcr.io/PROJECT-ID/APP-NAME`) and pushes it to Google Container Registry (GCR). Replace `PROJECT-ID` and `APP-NAME` with actual values.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngcloud builds submit --tag gcr.io/PROJECT-ID/APP-NAME\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Tools via npm (Bash)\nDESCRIPTION: Installs the `firebase-tools` package globally using npm. This command-line interface is a prerequisite for interacting with Firebase services, including emulating and deploying Firebase Functions locally and to the cloud.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: 503 Service Unavailable Response in Shell\nDESCRIPTION: This Shell snippet represents the HTTP response when a GET request fails due to the server being unready. It showcases a 503 Service Unavailable status with a JSON payload indicating an error and retry time. Required headers include Connection, Content-Length, Content-Type, Date, and Keep-Alive. Inputs include HTTP requests during server unavailability, with output as HTTP response information.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Delay-Accepting-Requests.md#2025-04-22_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nHTTP/1.1 503 Service Unavailable\nConnection: keep-alive\nContent-Length: 31\nContent-Type: application/json; charset=utf-8\nDate: Fri, 15 Apr 2022 23:03:15 GMT\nKeep-Alive: timeout=5\nRetry-After: 5000\n\n{\n    \"error\": true,\n    \"retryInMs\": 5000\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Fastify Title in HTML\nDESCRIPTION: A centered HTML heading for the Fastify project title.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Ecosystem.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1 align=\"center\">Fastify</h1>\n```\n\n----------------------------------------\n\nTITLE: Quick Benchmark Shortcut\nDESCRIPTION: Alternative command for running benchmark comparison using npm script.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Benchmarking.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run bench\n```\n\n----------------------------------------\n\nTITLE: Exporting Lambda Handler for Netlify Functions (JavaScript)\nDESCRIPTION: Creates a `server.js` file within the Netlify `functions` directory. It exports the `handler` function from an existing AWS Lambda-compatible file (assumed to be `../lambda.js` in this example). This serves as the entry point for Netlify to invoke the Fastify application, bridging Netlify's environment with the Lambda handler logic. The relative path to the main Lambda file must be adjusted.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nexport { handler } from '../lambda.js'; // Change `lambda.js` path to your `lambda.js` path\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify with yarn\nDESCRIPTION: Command to install Fastify using yarn package manager.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Getting-Started.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add fastify\n```\n\n----------------------------------------\n\nTITLE: Fastify Content Type Parser Interface\nDESCRIPTION: Function type definition for content type parser methods where content is typed via RawRequest generic.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nfastify.FastifyContentTypeParser<RawServer, RawRequest>\n```\n\n----------------------------------------\n\nTITLE: Simulated Server Logs in Shell\nDESCRIPTION: This Shell snippet shows a series of log entries from a Fastify server process. It demonstrates server startup logs, incoming request logs, and response statuses during the delay period. The logs are used to verify request handling behavior during server readiness checks. No specific dependencies. The inputs are the server events and operations, with JSON-formatted log outputs to standard output.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Delay-Accepting-Requests.md#2025-04-22_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n{\"time\":1650063793316,\"msg\":\"Doing magic!\"}\n{\"time\":1650063793316,\"msg\":\"Server listening at http://127.0.0.1:1234\"}\n{\"time\":1650063795030,\"reqId\":\"req-1\",\"req\":{\"method\":\"GET\",\"url\":\"/v1\",\"hostname\":\"localhost:1234\",\"remoteAddress\":\"127.0.0.1\",\"remotePort\":51928},\"msg\":\"incoming request\"}\n{\"time\":1650063795033,\"reqId\":\"req-1\",\"res\":{\"statusCode\":503},\"responseTime\":2.5721680000424385,\"msg\":\"request completed\"}\n{\"time\":1650063796248,\"reqId\":\"req-2\",\"req\":{\"method\":\"GET\",\"url\":\"/ping\",\"hostname\":\"localhost:1234\",\"remoteAddress\":\"127.0.0.1\",\"remotePort\":51930},\"msg\":\"incoming request\"}\n{\"time\":1650063796248,\"reqId\":\"req-2\",\"res\":{\"statusCode\":200},\"responseTime\":0.4802369996905327,\"msg\":\"request completed\"}\n{\"time\":1650063798377,\"reqId\":\"req-3\",\"req\":{\"method\":\"POST\",\"url\":\"/webhook\",\"hostname\":\"localhost:1234\",\"remoteAddress\":\"127.0.0.1\",\"remotePort\":51932},\"msg\":\"incoming request\"}\n{\"time\":1650063798379,\"reqId\":\"req-3\",\"msg\":\"Ready for customer requests!\"}\n{\"time\":1650063798379,\"reqId\":\"req-3\",\"res\":{\"statusCode\":200},\"responseTime\":1.3567829988896847,\"msg\":\"request completed\"}\n{\"time\":1650063799858,\"reqId\":\"req-4\",\"req\":{\"method\":\"GET\",\"url\":\"/v1\",\"hostname\":\"localhost:1234\",\"remoteAddress\":\"127.0.0.1\",\"remotePort\":51934},\"msg\":\"incoming request\"}\n{\"time\":1650063800561,\"reqId\":\"req-4\",\"res\":{\"statusCode\":200},\"responseTime\":702.4662979990244,\"msg\":\"request completed\"}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Routes in Plugins for Fastify v4\nDESCRIPTION: Codemod command to wrap synchronous route definitions in plugins, improving error reporting in Fastify v4.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V4.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx codemod@latest fastify/4/wrap-routes-plugin\n```\n\n----------------------------------------\n\nTITLE: Gitflow Branch Comparison\nDESCRIPTION: Compares benchmark results between current branch and main using Gitflow approach.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Benchmarking.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbranchcmp --rounds 2 --gitflow --script \"npm run benchmark\"\n```\n\n----------------------------------------\n\nTITLE: Running Basic Benchmark Test\nDESCRIPTION: Executes the default benchmark test in the current branch using npm.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Benchmarking.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run benchmark\n```\n\n----------------------------------------\n\nTITLE: Breaking Fastify Encapsulation with fastify-plugin\nDESCRIPTION: Shows how to break encapsulation using fastify-plugin to share decorators between parent and child contexts.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Encapsulation.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconst fastify = require('fastify')()\nconst fastifyPlugin = require('fastify-plugin')\n\nfastify.decorateRequest('answer', 42)\n\nfastify.register(async function publicContext (childServer) {\n  childServer.decorateRequest('foo', 'foo')\n\n  childServer.route({\n    path: '/two',\n    method: 'GET',\n    handler (request, response) {\n      response.send({\n        answer: request.answer,\n        foo: request.foo,\n        bar: request.bar\n      })\n    }\n  })\n\n  childServer.register(fastifyPlugin(grandchildContext))\n\n  async function grandchildContext (grandchildServer) {\n    grandchildServer.decorateRequest('bar', 'bar')\n\n    grandchildServer.route({\n      path: '/three',\n      method: 'GET',\n      handler (request, response) {\n        response.send({\n          answer: request.answer,\n          foo: request.foo,\n          bar: request.bar\n        })\n      }\n    })\n  }\n})\n\nfastify.listen({ port: 8000 })\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Logger Configuration in Fastify v5\nDESCRIPTION: Shows how to update custom logger configuration in Fastify v5, which now uses the loggerInstance option instead of the logger option for custom loggers.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V5.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// v4\nconst logger = require('pino')();\nconst fastify = require('fastify')({\n  logger\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// v5\nconst loggerInstance = require('pino')();\nconst fastify = require('fastify')({\n  loggerInstance\n});\n```\n\n----------------------------------------\n\nTITLE: 200 OK Response with Readiness Information in Shell\nDESCRIPTION: This Shell snippet presents the 200 OK HTTP response of a GET request to the /ping endpoint, which checks server readiness. It features a JSON payload confirming the server is operational but not fully ready for customer requests. Expected headers include Connection, Content-Length, Content-Type, Date, and Keep-Alive. The input stems from GET requests for readiness, with output showing JSON readiness status.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Delay-Accepting-Requests.md#2025-04-22_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nHTTP/1.1 200 OK\nConnection: keep-alive\nContent-Length: 29\nContent-Type: application/json; charset=utf-8\nDate: Fri, 15 Apr 2022 23:03:16 GMT\nKeep-Alive: timeout=5\n\n{\n    \"error\": false,\n    \"ready\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Async Disposal in Fastify with TypeScript\nDESCRIPTION: Shows how to use Symbol.asyncDispose with TypeScript's using keyword for automatic resource cleanup.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Server.md#2025-04-22_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\ntest('Uses app and closes it afterwards', async () => {\n  await using app = fastify();\n  // do something with app.\n})\n```\n\n----------------------------------------\n\nTITLE: Final 200 OK Response in Shell\nDESCRIPTION: A Shell snippet depicting a 200 OK HTTP response for a successful GET /v1 request after the server becomes ready. It illustrates an HTTP response with JSON data confirming customer readiness. Consists of headers: Connection, Content-Length, Content-Type, Date, and Keep-Alive. Inputs are successful HTTP requests with JSON output indicating server availability.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Delay-Accepting-Requests.md#2025-04-22_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nHTTP/1.1 200 OK\nConnection: keep-alive\nContent-Length: 31\nContent-Type: application/json; charset=utf-8\nDate: Fri, 15 Apr 2022 23:03:20 GMT\nKeep-Alive: timeout=5\n\n{\n    \"customer\": true,\n    \"error\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Await to Register Calls in Fastify v4\nDESCRIPTION: Codemod command to add 'await' to register calls, ensuring proper asynchronous behavior in Fastify v4.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Migration-Guide-V4.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx codemod@latest fastify/4/await-register-calls\n```\n\n----------------------------------------\n\nTITLE: Adding Bounty Information to Issue in Markdown\nDESCRIPTION: This snippet provides a template for adding bounty information to an issue. It includes the bounty amount and a link to the bounty program details.\nSOURCE: https://github.com/fastify/fastify/blob/main/EXPENSE_POLICY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 💰 Bounty\n\nThis issue has a bounty of [$AMOUNT](LINK TO THE BOUNTY COMMENT).\n_Read more about [the bounty program](./EXPENSE_POLICY.md)_\n```\n\n----------------------------------------\n\nTITLE: Multi-Branch Benchmark Comparison\nDESCRIPTION: Compares benchmark results across different branches with multiple rounds using branchcmp.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Benchmarking.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbranchcmp --rounds 2 --script \"npm run benchmark\"\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings Configuration\nDESCRIPTION: JSON configuration for VSCode settings including JavaScript formatting and UI customizations.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Contributing.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"[javascript]\": {\n        \"editor.defaultFormatter\": \"dbaeumer.vscode-eslint\",\n        \"editor.codeActionsOnSave\": {\n            \"source.fixAll\": true\n        }\n    },\n\n    \"workbench.colorCustomizations\": {\n        \"statusBar.background\": \"#178bb9\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Substitutable Type Provider in TypeScript\nDESCRIPTION: This code snippet demonstrates an incorrect implementation of a custom type provider that is not substitutable with FastifyTypeProviderDefault due to the use of 'never' for type reduction.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Write-Type-Provider.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotSubstitutableTypeProvider extends FastifyTypeProvider {\n   // bad, nothing is assignable to `never` (except for itself)\n  validator: this['schema'] extends /** custom check here**/ ? /** narrowed type here **/ : never;\n  serializer: this['schema'] extends /** custom check here**/ ? /** narrowed type here **/ : never;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Webpack Bundler Tests for Fastify\nDESCRIPTION: This script demonstrates how to install dependencies and run the webpack bundler tests for Fastify. It first installs the main repository dependencies, then navigates to the webpack bundler test directory, installs the bundler-specific dependencies, and runs the test command which bundles the code before testing.\nSOURCE: https://github.com/fastify/fastify/blob/main/test/bundler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  # path: root of repository /fastify\n  npm i\n  cd test/bundler/webpack\n  npm i\n  npm run test # test command runs bundle before of starting the test\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates for HTTPS Server\nDESCRIPTION: Shell commands to generate SSL certificates (key.pem and cert.pem) required for setting up an HTTPS server with Fastify.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nopenssl genrsa -out key.pem\nopenssl req -new -key key.pem -out csr.pem\nopenssl x509 -req -days 9999 -in csr.pem -signkey key.pem -out cert.pem\nrm csr.pem\n```\n\n----------------------------------------\n\nTITLE: Setting VSCode Fastify Alias\nDESCRIPTION: Shell alias definition for the Fastify-specific VSCode installation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Contributing.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nalias code-fastify=\"/Applications/VSCodeFastify/Visual\\ Studio\\ Code.app/Contents/Resources/app/bin/code\"\n```\n\n----------------------------------------\n\nTITLE: Creating VSCode Data Directories\nDESCRIPTION: Shell command to create necessary data directories for portable VSCode installation.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Contributing.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p /Applications/VSCodeFastify/code-portable-data/{user-data,extensions}\n```\n\n----------------------------------------\n\nTITLE: JSON.parse Handling of __proto__ Property\nDESCRIPTION: Demonstrates how JSON.parse() handles the __proto__ property differently from direct assignment, creating a regular property instead of a prototype reference.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Prototype-Poisoning.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n> const text = '{\"b\": 5, \"__proto__\": { \"c\": 6 }}';\n> const a = JSON.parse(text);\n> a;\n{b: 5, __proto__: { c: 6 }}\n```\n\n----------------------------------------\n\nTITLE: Adding Hyperlinks in Markdown\nDESCRIPTION: Demonstrates the correct way to add hyperlinks in Markdown, including examples of good and bad practices. The snippet shows how to create clear and descriptive links.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Style-Guide.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- More like this -->\n\n// Add clear & brief description\n[Fastify Plugins] (https://fastify.dev/docs/latest/Plugins/)\n\n<!--Less like this -->\n\n// incomplete description\n[Fastify] (https://fastify.dev/docs/latest/Plugins/)\n\n// Adding title in link brackets\n[](https://fastify.dev/docs/latest/Plugins/ \"fastify plugin\")\n\n// Empty title\n[](https://fastify.dev/docs/latest/Plugins/)\n\n// Adding links localhost URLs instead of using code strings (``)\n[http://localhost:3000/](http://localhost:3000/)\n```\n\n----------------------------------------\n\nTITLE: Verifying VSCode Installation Path\nDESCRIPTION: Shell command to verify the VSCode installation directory for Fastify development.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n[ -d /Applications/VSCodeFastify/Visual\\ Studio\\ Code.app ] && echo \"found\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Fastify Version Branches in Markdown\nDESCRIPTION: A Markdown table showing the different Fastify versions and their corresponding Git branches. This helps contributors understand which branch to use for version-specific changes.\nSOURCE: https://github.com/fastify/fastify/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n|Version|Branch|\n|-------|------|\n**v1.x**|[branch 1.x](https://github.com/fastify/fastify/tree/1.x)|\n**v2.x**|[branch 2.x](https://github.com/fastify/fastify/tree/2.x)|\n**v3.x**|[branch 3.x](https://github.com/fastify/fastify/tree/3.x)|\n**v4.x**|[branch 4.x](https://github.com/fastify/fastify/tree/4.x)|\n```\n\n----------------------------------------\n\nTITLE: Database Migration with Postgrator in Node.js\nDESCRIPTION: Demonstrates how to run PostgreSQL database migrations using Postgrator. The script connects to a PostgreSQL database, configures Postgrator to use specific migration files, and handles execution of pending migrations.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Database.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst pg = require('pg')\nconst Postgrator = require('postgrator')\nconst path = require('node:path')\n\nasync function migrate() {\n  const client = new pg.Client({\n    host: 'localhost',\n    port: 5432,\n    database: 'example',\n    user: 'example',\n    password: 'example',\n  });\n\n  try {\n    await client.connect();\n\n    const postgrator = new Postgrator({\n      migrationPattern: path.join(__dirname, '/migrations/*'),\n      driver: 'pg',\n      database: 'example',\n      schemaTable: 'migrations',\n      currentSchema: 'public', // Postgres and MS SQL Server only\n      execQuery: (query) => client.query(query),\n    });\n\n    const result = await postgrator.migrate()\n\n    if (result.length === 0) {\n      console.log(\n        'No migrations run for schema \"public\". Already at the latest one.'\n      )\n    }\n\n    console.log('Migration done.')\n\n    process.exitCode = 0\n  } catch(err) {\n    console.error(err)\n    process.exitCode = 1\n  }\n\n  await client.end()\n}\n\nmigrate()\n```\n\n----------------------------------------\n\nTITLE: Adding compile-schemas Script to package.json (JSON)\nDESCRIPTION: Adds a 'compile-schemas' npm script in package.json to compile all schemas from the 'schemas' directory into TypeScript types in the 'types' directory. This uses the 'json2ts' CLI provided by json-schema-to-typescript and expects the dependencies to be installed. Triggers schema conversion via 'npm run compile-schemas'.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/TypeScript.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"compile-schemas\": \"json2ts -i schemas -o types\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .dockerignore for Node.js Docker Build\nDESCRIPTION: Defines a `.dockerignore` file to exclude specified files and directories (`Dockerfile`, `README.md`, `node_modules`, `npm-debug.log`) from the Docker build context. This optimization prevents unnecessary files from being copied into the Docker image, resulting in smaller image sizes and faster build times.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Serverless.md#2025-04-22_snippet_12\n\nLANGUAGE: dockerignore\nCODE:\n```\nDockerfile\nREADME.md\nnode_modules\nnpm-debug.log\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Logging in Fastify (JavaScript)\nDESCRIPTION: This snippet demonstrates how to enable the production JSON logger in Fastify by passing a simple configuration object when creating a Fastify instance.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Logging.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fastify = require('fastify')({\n  logger: true\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Example Benchmark\nDESCRIPTION: Runs benchmark on specific example using concurrent execution with autocannon for load testing.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Benchmarking.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nbranchcmp --rounds 2 -s \"node ./node_modules/concurrently -k -s first \\\"node ./examples/asyncawait.js\\\" \\\"node ./node_modules/autocannon -c 100 -d 5 -p 10 localhost:3000/\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Nested Plugin Registration\nDESCRIPTION: Demonstrates how to register plugins within other plugins.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Reference/Plugins.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (fastify, opts, done) {\n  fastify.decorate('utility', function () {})\n\n  fastify.get('/', handler)\n\n  fastify.register(require('./other-plugin'))\n\n  done()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Extension\nDESCRIPTION: Command to install the ESLint extension for VSCode to maintain code formatting standards.\nSOURCE: https://github.com/fastify/fastify/blob/main/docs/Guides/Contributing.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncode-fastify --install-extension dbaeumer.vscode-eslint\n```"
  }
]