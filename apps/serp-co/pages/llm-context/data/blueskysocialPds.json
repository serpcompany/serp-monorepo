[
  {
    "owner": "bluesky-social",
    "repo": "pds",
    "content": "TITLE: Migrating Bluesky Account Between Personal Data Servers in TypeScript\nDESCRIPTION: This code demonstrates the process of migrating a Bluesky account from one Personal Data Server (PDS) to another. It includes steps for creating a new account, migrating data and blobs, transferring identity, and finalizing the migration. The script uses the AtpAgent from @atproto/api and requires out-of-band email confirmation.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport AtpAgent from '@atproto/api'\nimport { Secp256k1Keypair } from '@atproto/crypto'\nimport * as ui8 from 'uint8arrays'\n\nconst OLD_PDS_URL = 'https://bsky.social'\nconst NEW_PDS_URL = 'https://example.com'\nconst CURRENT_HANDLE = 'to-migrate.bsky.social'\nconst CURRENT_PASSWORD = 'password'\nconst NEW_HANDLE = 'migrated.example.com'\nconst NEW_ACCOUNT_EMAIL = 'migrated@example.com'\nconst NEW_ACCOUNT_PASSWORD = 'password'\nconst NEW_PDS_INVITE_CODE = 'example-com-12345-abcde'\n\nconst migrateAccount = async () => {\n  const oldAgent = new AtpAgent({ service: OLD_PDS_URL })\n  const newAgent = new AtpAgent({ service: NEW_PDS_URL })\n\n  await oldAgent.login({\n    identifier: CURRENT_HANDLE,\n    password: CURRENT_PASSWORD,\n  })\n\n  const accountDid = oldAgent.session?.did\n  if (!accountDid) {\n    throw new Error('Could not get DID for old account')\n  }\n\n  // Create account\n  // ------------------\n\n  const describeRes = await newAgent.api.com.atproto.server.describeServer()\n  const newServerDid = describeRes.data.did\n\n  const serviceJwtRes = await oldAgent.com.atproto.server.getServiceAuth({\n    aud: newServerDid,\n    lxm: 'com.atproto.server.createAccount',\n  })\n  const serviceJwt = serviceJwtRes.data.token\n\n  await newAgent.api.com.atproto.server.createAccount(\n    {\n      handle: NEW_HANDLE,\n      email: NEW_ACCOUNT_EMAIL,\n      password: NEW_ACCOUNT_PASSWORD,\n      did: accountDid,\n      inviteCode: NEW_PDS_INVITE_CODE,\n    },\n    {\n      headers: { authorization: `Bearer ${serviceJwt}` },\n      encoding: 'application/json',\n    },\n  )\n  await newAgent.login({\n    identifier: NEW_HANDLE,\n    password: NEW_ACCOUNT_PASSWORD,\n  })\n\n  // Migrate Data\n  // ------------------\n\n  const repoRes = await oldAgent.com.atproto.sync.getRepo({ did: accountDid })\n  await newAgent.com.atproto.repo.importRepo(repoRes.data, {\n    encoding: 'application/vnd.ipld.car',\n  })\n\n  let blobCursor: string | undefined = undefined\n  do {\n    const listedBlobs = await oldAgent.com.atproto.sync.listBlobs({\n      did: accountDid,\n      cursor: blobCursor,\n    })\n    for (const cid of listedBlobs.data.cids) {\n      const blobRes = await oldAgent.com.atproto.sync.getBlob({\n        did: accountDid,\n        cid,\n      })\n      await newAgent.com.atproto.repo.uploadBlob(blobRes.data, {\n        encoding: blobRes.headers['content-type'],\n      })\n    }\n    blobCursor = listedBlobs.data.cursor\n  } while (blobCursor)\n\n  const prefs = await oldAgent.api.app.bsky.actor.getPreferences()\n  await newAgent.api.app.bsky.actor.putPreferences(prefs.data)\n\n  // Migrate Identity\n  // ------------------\n\n  const recoveryKey = await Secp256k1Keypair.create({ exportable: true })\n  const privateKeyBytes = await recoveryKey.export()\n  const privateKey = ui8.toString(privateKeyBytes, 'hex')\n\n  await oldAgent.com.atproto.identity.requestPlcOperationSignature()\n\n  const getDidCredentials =\n    await newAgent.com.atproto.identity.getRecommendedDidCredentials()\n  const rotationKeys = getDidCredentials.data.rotationKeys ?? []\n  if (!rotationKeys) {\n    throw new Error('No rotation key provided')\n  }\n  const credentials = {\n    ...getDidCredentials.data,\n    rotationKeys: [recoveryKey.did(), ...rotationKeys],\n  }\n\n  // @NOTE, this token will need to come from the email from the previous step\n  const TOKEN = ''\n\n  const plcOp = await oldAgent.com.atproto.identity.signPlcOperation({\n    token: TOKEN,\n    ...credentials,\n  })\n\n  console.log(\n    `❗ Your private recovery key is: ${privateKey}. Please store this in a secure location! ❗`,\n  )\n\n  await newAgent.com.atproto.identity.submitPlcOperation({\n    operation: plcOp.data.operation,\n  })\n\n  // Finalize Migration\n  // ------------------\n\n  await newAgent.com.atproto.server.activateAccount()\n  await oldAgent.com.atproto.server.deactivateAccount({})\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading PDS Installer Script in Bash\nDESCRIPTION: Commands to download the PDS installer script using wget or curl, followed by executing the installer with root privileges.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/bluesky-social/pds/main/installer.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/bluesky-social/pds/main/installer.sh >installer.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo bash installer.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP for Bluesky PDS\nDESCRIPTION: Environment variable settings for configuring SMTP on a Bluesky PDS, including examples for Resend email service and standard SMTP servers.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPDS_EMAIL_SMTP_URL=smtps://resend:<your api key here>@smtp.resend.com:465/\nPDS_EMAIL_FROM_ADDRESS=admin@your.domain\n```\n\nLANGUAGE: bash\nCODE:\n```\nPDS_EMAIL_SMTP_URL=smtps://username:password@smtp.example.com/\n```\n\nLANGUAGE: bash\nCODE:\n```\nPDS_EMAIL_SMTP_URL=smtp:///?sendmail=true\n```\n\n----------------------------------------\n\nTITLE: Fetching Service Authentication Token in Bluesky PDS\nDESCRIPTION: This snippet demonstrates how to obtain a JWT signed with the signing key associated with your DID from your old PDS. This is necessary for creating an account on the new PDS.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.server.getServiceAuth\n```\n\n----------------------------------------\n\nTITLE: Creating Account on New Bluesky PDS\nDESCRIPTION: This snippet shows the API endpoint for creating a new account on the destination PDS. It requires the JWT obtained from the previous step as a Bearer token.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.server.createAccount\n```\n\n----------------------------------------\n\nTITLE: Creating Bluesky PDS Account with pdsadmin in Bash\nDESCRIPTION: Command to create a new account on the Bluesky PDS using the pdsadmin tool with root privileges.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo pdsadmin account create\n```\n\n----------------------------------------\n\nTITLE: Updating Bluesky PDS in Bash\nDESCRIPTION: Command to update the Bluesky PDS to the latest version using the pdsadmin tool with root privileges.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo pdsadmin update\n```\n\n----------------------------------------\n\nTITLE: Activating Account on New Bluesky PDS\nDESCRIPTION: This API call activates the migrated account on the new PDS, ensuring that the DID is set up correctly and sending out events on the firehose.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.server.activateAccount\n```\n\n----------------------------------------\n\nTITLE: Exporting Repository from Old Bluesky PDS\nDESCRIPTION: This API call retrieves the entire repository as a CAR file from the old PDS, which is necessary for migrating data to the new PDS.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.sync.getRepo\n```\n\n----------------------------------------\n\nTITLE: Checking Account Status on New Bluesky PDS\nDESCRIPTION: This API call is used to check the status of the new account, including repo state, indexed records, private state values, and blob counts.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.server.checkAccountStatus\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Bluesky PDS\nDESCRIPTION: Environment variable settings to configure logging destination and level for a Bluesky PDS.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nLOG_DESTINATION=/pds/pds.log\nLOG_LEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Generating Invite Code for Bluesky PDS in Bash\nDESCRIPTION: Command to create an invite code for new account registration on the Bluesky PDS using the pdsadmin tool with root privileges.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo pdsadmin create-invite-code\n```\n\n----------------------------------------\n\nTITLE: Fetching Recommended DID Credentials from New Bluesky PDS\nDESCRIPTION: This API call retrieves the new PDS's recommendations for DID credentials, including handle, PDS endpoint, and signing key.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.identity.getRecommendedDidCredentials\n```\n\n----------------------------------------\n\nTITLE: Requesting PLC Operation Signature from Old Bluesky PDS\nDESCRIPTION: This API call requests a signed PLC operation from the old PDS, which is necessary for updating the DID to point to the new PDS.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.identity.signPlcOperation\n```\n\n----------------------------------------\n\nTITLE: Importing Repository to New Bluesky PDS\nDESCRIPTION: This API endpoint is used to upload the CAR file containing the repository data to the new PDS.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.repo.importRepo\n```\n\n----------------------------------------\n\nTITLE: Listing Missing Blobs on New Bluesky PDS\nDESCRIPTION: This API endpoint helps identify any missing blobs on the new PDS after the migration process.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.repo.listMissingBlobs\n```\n\n----------------------------------------\n\nTITLE: Listing Blobs in Bluesky PDS\nDESCRIPTION: This API call is used to discover all relevant blobs that need to be migrated from the old PDS.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.sync.listBlobs\n```\n\n----------------------------------------\n\nTITLE: Downloading Blob from Old Bluesky PDS\nDESCRIPTION: This API endpoint is used to download the contents of a specific blob from the old PDS.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.sync.getBlob\n```\n\n----------------------------------------\n\nTITLE: Uploading Blob to New Bluesky PDS\nDESCRIPTION: This API call is used to upload a blob to the new PDS after downloading it from the old PDS.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.repo.uploadBlob\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Preferences from Old Bluesky PDS\nDESCRIPTION: This API call fetches the user's preferences from the old PDS, which is part of migrating private state.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\napp.bsky.actor.getPreferences\n```\n\n----------------------------------------\n\nTITLE: Setting User Preferences on New Bluesky PDS\nDESCRIPTION: This API endpoint is used to set the user's preferences on the new PDS after retrieving them from the old PDS.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\napp.bsky.actor.putPreferences\n```\n\n----------------------------------------\n\nTITLE: Requesting Email Challenge for PLC Operation Signature\nDESCRIPTION: This API call initiates an email challenge to authorize the PLC operation signature request.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.identity.requestPlcOperationSignature\n```\n\n----------------------------------------\n\nTITLE: Submitting PLC Operation to New Bluesky PDS\nDESCRIPTION: This API endpoint is used to submit the signed PLC operation to the new PDS for verification and processing.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.identity.submitPlcOperation\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket Connection for Bluesky PDS in Bash\nDESCRIPTION: Command to test WebSocket connectivity for the Bluesky PDS using wsdump, which is crucial for network content synchronization.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwsdump \"wss://example.com/xrpc/com.atproto.sync.subscribeRepos?cursor=0\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Bluesky PDS Logs in Bash\nDESCRIPTION: Command to view logs from the Bluesky PDS Docker container using the docker logs command.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[sudo] docker logs pds\n```\n\n----------------------------------------\n\nTITLE: Deleting Account on Old Bluesky PDS\nDESCRIPTION: This API endpoint is used to delete the account on the old PDS as a clean-up step after migration.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.server.deleteAccount\n```\n\n----------------------------------------\n\nTITLE: Deactivating Account on Old Bluesky PDS\nDESCRIPTION: This API call deactivates the account on the old PDS, with an optional parameter to specify how long the server should retain the deactivated account.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/ACCOUNT_MIGRATION.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\ncom.atproto.server.deactivateAccount\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard copyright notice template for applying Apache License 2.0 to software projects. Includes placeholders for year and copyright owner information.\nSOURCE: https://github.com/bluesky-social/pds/blob/main/LICENSE-APACHE.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
  }
]