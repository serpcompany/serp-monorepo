[
  {
    "owner": "syncfusion",
    "repo": "flutter-widgets",
    "content": "TITLE: Applying Autofit to Multiple Excel Cells - Dart\nDESCRIPTION: This code snippet demonstrates how to apply autofit to multiple cells (ranges) in an Excel worksheet using the Syncfusion Flutter Excel widget.  It creates a new Excel document, assigns text to cell ranges, applies autofit to columns and rows, and then saves the Excel file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Create a new Excel Document.\nfinal Workbook workbook = Workbook();\n\n// Accessing sheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\n// Assigning text to cells\nfinal Range range = sheet.getRangeByName('A1:D1');\nrange.setText('This is Long Text');\nfinal Range range1 = sheet.getRangeByName('A2:A5');\nrange1.setText('This is Long Text using AutoFit Columns and Rows');\nrange1.cellStyle.wrapText = true;\n\n// Auto-Fit column the range\nrange.autoFitColumns();\n\n// Auto-Fit row the range\nrange1.autoFitRows();\n\n// Save and dispose workbook.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('AutoFits.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n\n```\n```\n\n----------------------------------------\n\nTITLE: Adding SfPdfViewer Widget - Dart\nDESCRIPTION: Demonstrates how to integrate the SfPdfViewer widget into a Flutter widget tree. It loads a PDF from a network URL using `SfPdfViewer.network` and displays it within a `Container` in the `Scaffold`'s body. This is a fundamental step to show a PDF document in your Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/README.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: Container(\n          child: SfPdfViewer.network(\n              'https://cdn.syncfusion.com/content/PDFViewer/flutter-succinctly.pdf')));\n}\n```\n\n----------------------------------------\n\nTITLE: Create Excel Chart - Dart\nDESCRIPTION: This code snippet demonstrates how to create a basic column chart in an Excel document using the Syncfusion Flutter OfficeChart library. It initializes a new Excel workbook, adds data to a worksheet, creates a chart, sets the chart type, defines the data range, and saves the workbook to a file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new Excel document.\nfinal Workbook workbook = Workbook();\n// Accessing worksheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n// Setting value in the cell.\nsheet.getRangeByName('A1').setText('John');\nsheet.getRangeByName('A2').setText('Amy');\nsheet.getRangeByName('A3').setText('Jack');\nsheet.getRangeByName('A4').setText('Tiya');\nsheet.getRangeByName('B1').setNumber(10);\nsheet.getRangeByName('B2').setNumber(12);\nsheet.getRangeByName('B3').setNumber(20);\nsheet.getRangeByName('B4').setNumber(21);\n// Create an instances of chart collection.\nfinal ChartCollection charts = ChartCollection(sheet);\n// Add the chart.\nfinal Chart chart = charts.add();\n// Set Chart Type.\nchart.chartType = ExcelChartType.column;\n// Set data range in the worksheet.\nchart.dataRange = sheet.getRangeByName('A1:B4');\n// set charts to worksheet.\nsheet.charts = charts;\n// save and dispose the workbook.\nList<int> bytes = workbook.saveAsStream();\nFile('Chart.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n```\n\n----------------------------------------\n\nTITLE: Adding Chat Widget in Dart\nDESCRIPTION: This code snippet demonstrates how to initialize and add the `SfChat` widget to the body of a `Scaffold` widget in Flutter.  The `SfChat` widget is the core component of the Syncfusion Flutter Chat library and is used to display the chat interface.  It requires the `flutter` SDK to be properly set up and the `syncfusion_flutter_chat` package to be installed in the project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: SfChat(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SfSlider Package - Dart\nDESCRIPTION: This code snippet shows how to import the Syncfusion Flutter Sliders package into a Dart file. This import statement is necessary to use the SfSlider, SfRangeSlider and other components from the package.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:syncfusion_flutter_sliders/sliders.dart';\n```\n\n----------------------------------------\n\nTITLE: Export DataGrid to Excel - Flutter/Dart\nDESCRIPTION: Exports the DataGrid data to an Excel workbook. Uses the `exportToExcelWorkbook` method from the `SfDataGridState` class and saves the result to a file named 'DataGrid.xlsx'. Requires the GlobalKey to access the DataGrid's state and dispose of the workbook after saving.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n  Future<void> exportDataGridToExcel() async {\n    final Workbook workbook = _key.currentState!.exportToExcelWorkbook();\n    final List<int> bytes = workbook.saveAsStream();\n    File('DataGrid.xlsx').writeAsBytes(bytes);\n    workbook.dispose();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Add Bullets and Lists to PDF - Dart\nDESCRIPTION: Creates a PDF document and adds both ordered (numbered) and unordered (bulleted) lists to a page. The snippet demonstrates creating nested lists, customizing marker styles, and drawing the lists within the defined bounds on the PDF page. The resulting PDF is saved as \"BulletandList.pdf\".\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new PDF document.\nfinal PdfDocument document = PdfDocument();\n// Add a new page to the document.\nfinal PdfPage page = document.pages.add();\n// Create a PDF ordered list.\nfinal PdfOrderedList orderedList = PdfOrderedList(\n    items: PdfListItemCollection(<String>[\n      'Mammals',\n      'Reptiles',\n      'Birds',\n      'Insects',\n      'Aquatic Animals'\n    ]),\n    marker: PdfOrderedMarker(\n        style: PdfNumberStyle.numeric,\n        font: PdfStandardFont(PdfFontFamily.helvetica, 12)),\n    markerHierarchy: true,\n    format: PdfStringFormat(lineSpacing: 10),\n    textIndent: 10);\n// Create a un ordered list and add it as a sublist.\norderedList.items[0].subList = PdfUnorderedList(\n    marker: PdfUnorderedMarker(\n        font: PdfStandardFont(PdfFontFamily.helvetica, 10),\n        style: PdfUnorderedMarkerStyle.disk),\n    items: PdfListItemCollection(<String>[\n      'body covered by hair or fur',\n      'warm-blooded',\n      'have a backbone',\n      'produce milk',\n      'Examples'\n    ]),\n    textIndent: 10,\n    indent: 20);\n// Draw the list to the PDF page.\norderedList.draw(\n    page: page,\n    bounds: Rect.fromLTWH(\n        0, 0, page.getClientSize().width, page.getClientSize().height));\n// Save the document.\nFile('BulletandList.pdf').writeAsBytes(await document.save());\n// Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Add DataGrid to App - Flutter/Dart\nDESCRIPTION: Adds the Syncfusion Flutter DataGrid to a Flutter application within a Scaffold widget. Includes buttons to trigger the export functions for Excel and PDF. This code creates the UI layout, including buttons and the DataGrid.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/README.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text(\n          'Syncfusion Flutter DataGrid Export',\n          overflow: TextOverflow.ellipsis,\n        ),\n      ),\n      body: Column(\n        children: <Widget>[\n          Container(\n            margin: const EdgeInsets.all(12.0),\n            child: Row(\n              children: <Widget>[\n                SizedBox(\n                  height: 40.0,\n                  width: 150.0,\n                  child: MaterialButton(\n                      color: Colors.blue,\n                      child: const Center(\n                          child: Text(\n                        'Export to Excel',\n                        style: TextStyle(color: Colors.white),\n                      )),\n                      onPressed: exportDataGridToExcel),\n                ),\n                const Padding(padding: EdgeInsets.all(20)),\n                SizedBox(\n                  height: 40.0,\n                  width: 150.0,\n                  child: MaterialButton(\n                      color: Colors.blue,\n                      child: const Center(\n                          child: Text(\n                        'Export to PDF',\n                        style: TextStyle(color: Colors.white),\n                      )),\n                      onPressed: exportDataGridToPdf),\n                ),\n              ],\n            ),\n          ),\n          Expanded(\n            child: SfDataGrid(\n              source: employeeDataSource,\n              columns: <GridColumn>[\n                GridColumn(\n                    columnName: 'ID',\n                    label: Container(\n                        padding: const EdgeInsets.all(16.0),\n                        alignment: Alignment.center,\n                        child: const Text(\n                          'ID',\n                        ))),\n                GridColumn(\n                    columnName: 'Name',\n                    label: Container(\n                        padding: const EdgeInsets.all(8.0),\n                        alignment: Alignment.center,\n                        child: const Text('Name'))),\n                GridColumn(\n                    columnName: 'Designation',\n                    label: Container(\n                        padding: const EdgeInsets.all(8.0),\n                        alignment: Alignment.center,\n                        child: const Text(\n                          'Designation',\n                          overflow: TextOverflow.ellipsis,\n                        ))),\n                GridColumn(\n                    columnName: 'Salary',\n                    label: Container(\n                        padding: const EdgeInsets.all(8.0),\n                        alignment: Alignment.center,\n                        child: const Text('Salary'))),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Charts to Excel Worksheet - Dart\nDESCRIPTION: This code snippet demonstrates how to add a chart to an Excel worksheet using the Syncfusion Flutter Excel widget. It creates a new Excel document, adds data to the worksheet, creates a chart, sets the chart type and data range, and saves the Excel file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:syncfusion_officechart/officechart.dart';\n\n```dart\n// Create a new Excel document.\nfinal Workbook workbook = Workbook();\n// Accessing worksheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\n// Setting value in the cell.\nsheet.getRangeByName('A1').setText('John');\nsheet.getRangeByName('A2').setText('Amy');\nsheet.getRangeByName('A3').setText('Jack');\nsheet.getRangeByName('A4').setText('Tiya');\nsheet.getRangeByName('B1').setNumber(10);\nsheet.getRangeByName('B2').setNumber(12);\nsheet.getRangeByName('B3').setNumber(20);\nsheet.getRangeByName('B4').setNumber(21);\n\n// Create an instances of chart collection.\nfinal ChartCollection charts = ChartCollection(sheet);\n\n// Add the chart.\nfinal Chart chart = charts.add();\n\n// Set Chart Type.\nchart.chartType = ExcelChartType.column;\n\n// Set data range in the worksheet.\nchart.dataRange = sheet.getRangeByName('A1:B4');\n\n// set charts to worksheet.\nsheet.charts = charts;\n\n// save and dispose the workbook.\nfinal List<int> bytes = workbook.saveAsStream();\nworkbook.dispose();\nFile('Chart.xlsx').writeAsBytes(bytes);\n\n```\n```\n\n----------------------------------------\n\nTITLE: Import OfficeChart and XlsIO Packages - Dart\nDESCRIPTION: This code snippet imports the necessary packages for creating Excel charts using Syncfusion Flutter OfficeChart and XlsIO libraries. The syncfusion_flutter_xlsio package is used for Excel document manipulation, and syncfusion_officechart package enables chart creation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:syncfusion_flutter_xlsio/xlsio.dart';\nimport 'package:syncfusion_officechart/officechart.dart';\n```\n\n----------------------------------------\n\nTITLE: Create Bar Chart - Dart\nDESCRIPTION: This code snippet creates a bar chart in an Excel document using the Syncfusion Flutter OfficeChart library. It initializes an Excel workbook, populates a worksheet with item and amount data, and then creates a bar chart visualizing this data.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new Excel document.\nfinal Workbook workbook = Workbook();\n// Accessing worksheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n// Setting value in the cell.\nsheet.getRangeByName('A1').setText('Items');\nsheet.getRangeByName('B1').setText('Amount(in \\$)');\nsheet.getRangeByName('C1').setText('Count');\nsheet.getRangeByName('A2').setText('Beverages');\nsheet.getRangeByName('A3').setText('Condiments');\nsheet.getRangeByName('A4').setText('Confections');\nsheet.getRangeByName('A5').setText('Dairy Products');\nsheet.getRangeByName('A6').setText('Grains / Cereals');\nsheet.getRangeByName('B2').setNumber(2776);\nsheet.getRangeByName('B3').setNumber(1077);\nsheet.getRangeByName('B4').setNumber(2287);\nsheet.getRangeByName('B5').setNumber(1368);\nsheet.getRangeByName('B6').setNumber(3325);\nsheet.getRangeByName('C2').setNumber(925);\nsheet.getRangeByName('C3').setNumber(378);\nsheet.getRangeByName('C4').setNumber(880);\nsheet.getRangeByName('C5').setNumber(581);\nsheet.getRangeByName('C6').setNumber(189);\n// Create an instances of chart collection.\nfinal ChartCollection charts = ChartCollection(sheet);\n// Add the chart.\nfinal Chart chart1 = charts.add();\n// Set Chart Type.\nchart1.chartType = ExcelChartType.bar;\n// Set data range in the worksheet.\nchart1.dataRange = sheet.getRangeByName('A1:C6');\nchart1.isSeriesInRows = false;\n// set charts to worksheet.\nsheet.charts = charts;\n// save and dispose the workbook.\nList<int> bytes = workbook.saveAsStream();\nFile('BarChart.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n```\n\n----------------------------------------\n\nTITLE: Adding Vertical Range Slider with Elements - Flutter\nDESCRIPTION: This code snippet creates a vertical Syncfusion Flutter Range Slider with ticks, labels, and tooltips. Similar to the horizontal example, it sets min/max values, interval, and enables tooltips. The `SfRangeSlider.vertical` constructor is used for vertical orientation. The `onChanged` callback is used to update the `_values` state.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/README.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nSfRangeValues _values = SfRangeValues(40.0, 80.0);\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: const Text('Syncfusion Flutter Vertical Range Slider'),\n    ),\n    body: SfRangeSlider.vertical(\n      min: 0.0,\n      max: 100.0,\n      values: _values,\n      interval: 20,\n      showTicks: true,\n      showLabels: true,\n      enableTooltip: true,\n      minorTicksPerInterval: 1,\n      onChanged: (SfRangeValues values) {\n        setState(() {\n          _values = values;\n        });\n      },\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Filling Existing PDF Form - Flutter\nDESCRIPTION: This code snippet demonstrates how to load an existing PDF document and fill its form fields using the Syncfusion Flutter PDF package. It reads the PDF from a file named 'input.pdf', retrieves the text box and radio button fields, sets their values, and saves the modified document to 'output.pdf'. It relies on `syncfusion_flutter_pdf` and `dart:io` for file operations. Inputs are the file path to the existing PDF.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n//Load the existing PDF document.\nfinal PdfDocument document =\n    PdfDocument(inputBytes: File('input.pdf').readAsBytesSync());\n\n//Get the form.\nPdfForm form = document.form;\n\n//Get text box and fill value.\nPdfTextBoxField name = document.form.fields[0] as PdfTextBoxField;\nname.text = 'John';\n\n//Get the radio button and select.\nPdfRadioButtonListField gender = form.fields[1] as PdfRadioButtonListField;\ngender.selectedIndex = 1;\n\n//Save and dispose the document.\nFile('output.pdf').writeAsBytesSync(await document.save());\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Import XlsIO Package - Dart\nDESCRIPTION: This code snippet shows how to import the Syncfusion Flutter XlsIO package into a Flutter project. This import statement is necessary to access the classes and functions provided by the library, allowing you to create and manipulate Excel files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:syncfusion_flutter_xlsio/xlsio.dart';\n```\n\n----------------------------------------\n\nTITLE: Export DataGrid to PDF - Flutter/Dart\nDESCRIPTION: Exports the DataGrid data to a PDF document. Uses the `exportToPdfDocument` method from the `SfDataGridState` class and saves the result to a file named 'DataGrid.pdf'.  Requires the GlobalKey to access the DataGrid's state and dispose of the document after saving.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n  Future<void> exportDataGridToPdf() async {\n    final PdfDocument document =\n        _key.currentState!.exportToPdfDocument();\n\n    final List<int> bytes = document.save();\n    File('DataGrid.pdf').writeAsBytes(bytes);\n    document.dispose();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Add GlobalKey to DataGrid - Flutter/Dart\nDESCRIPTION: Creates a GlobalKey for the SfDataGridState and assigns it to the DataGrid. This GlobalKey allows access to the DataGrid's state and methods, which is required for exporting. This key allows access to the `exportToExcelWorkbook` and `exportToPdfDocument` methods.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal GlobalKey<SfDataGridState> _key = GlobalKey<SfDataGridState>();\n\n...\n    child: SfDataGrid(\n    key: _key,\n...\n\n```\n\n----------------------------------------\n\nTITLE: Creating PDF Form - Flutter\nDESCRIPTION: This code snippet demonstrates how to create a new PDF document and add form fields such as text boxes and checkboxes using the Syncfusion Flutter PDF package. It creates a 'firstname' text box and a 'checkbox' on a new PDF page, then saves the document to a file. It depends on the `syncfusion_flutter_pdf` package and file system operations using `dart:io`. Inputs are the properties for text box and checkbox.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n//Create a new PDF document.\nPdfDocument document = PdfDocument();\n\n//Create a new page to add form fields.\nPdfPage page = document.pages.add();\n\n//Create text box field and add to the forms collection.\ndocument.form.fields.add(PdfTextBoxField(\n    page, 'firstname', Rect.fromLTWH(0, 0, 100, 20),\n    text: 'John'));\n\n//Create check box field and add to the form.\ndocument.form.fields.add(PdfCheckBoxField(\n    page, 'checkbox', Rect.fromLTWH(150, 0, 30, 30),\n    isChecked: true));\n\n//Save and dispose the document.\nFile('form.pdf').writeAsBytesSync(await document.save());\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Add Data to Excel Worksheet - Dart\nDESCRIPTION: This snippet demonstrates how to add text, number, and datetime values to an Excel worksheet using the Syncfusion Flutter XlsIO library. It accesses the first worksheet and sets values to specific cells using the `setText`, `setNumber`, and `setDateTime` methods. The file is saved as AddingTextNumberDateTime.xlsx.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new Excel document.\nfinal Workbook workbook = new Workbook();\n//Accessing worksheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n//Add Text.\nsheet.getRangeByName('A1').setText('Hello World');\n//Add Number\nsheet.getRangeByName('A3').setNumber(44);\n//Add DateTime\nsheet.getRangeByName('A5').setDateTime(DateTime(2020,12,12,1,10,20));\n// Save the document.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('AddingTextNumberDateTime.xlsx').writeAsBytes(bytes);\n//Dispose the workbook.\nworkbook.dispose();\n```\n\n----------------------------------------\n\nTITLE: Apply Number Format - Dart\nDESCRIPTION: This code snippet demonstrates how to apply a specific number format to an Excel worksheet cell using the Syncfusion Flutter XlsIO library. It sets the value of cell A1 to 100 and then applies the number format '\\S#,##0.00'. The file is saved as ApplyNumberFormat.xlsx.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new Excel document.\nfinal Workbook workbook = new Workbook();\n//Accessing worksheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\n//Applying Number format.\nfinal Range range = sheet.getRangeByName('A1');\nrange.setNumber(100);\nrange.numberFormat = '\\S#,##0.00';\n\n// Save the document.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('ApplyNumberFormat.xlsx').writeAsBytes(bytes);\n//Dispose the workbook.\nworkbook.dispose();\n```\n\n----------------------------------------\n\nTITLE: Encrypting PDF - Flutter\nDESCRIPTION: This code snippet demonstrates how to encrypt an existing PDF document using the Syncfusion Flutter PDF library. It loads an existing PDF, sets user and owner passwords, specifies the encryption algorithm (AES 256-bit), saves the secured document, and disposes of the document.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n//Load the existing PDF document.\nfinal PdfDocument document =\n    PdfDocument(inputBytes: File('input.pdf').readAsBytesSync());\n\n//Add security to the document.\nfinal PdfSecurity security = document.security;\n\n//Set password.\nsecurity.userPassword = 'userpassword@123';\nsecurity.ownerPassword = 'ownerpassword@123';\n\n//Set the encryption algorithm.\nsecurity.algorithm = PdfEncryptionAlgorithm.aesx256Bit;\n\n//Save the document.\nFile('secured.pdf').writeAsBytes(await document.save());\n\n//Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Initializing Chat Data Source - Flutter\nDESCRIPTION: This code snippet demonstrates how to initialize a list of `ChatMessage` objects and bind it to the `SfChat` widget. It shows how to define a `ChatMessage` with text, time, and author details.  The snippet includes a `initState` method to populate the `_messages` list and a `build` method to create the `SfChat` widget with the data bound to it.  The `dispose` method clears the message list.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nlate List<ChatMessage> _messages;\n\n@override\nvoid initState() {\n  _messages = <ChatMessage>[\n    ChatMessage(\n      text: 'Hello, how can I help you today?',\n      time: DateTime.now(),\n      author: const ChatAuthor(\n        id: 'a2c4-56h8-9x01-2a3d',\n        name: 'Incoming user name',\n      ),\n    ),\n  ];\n  super.initState();\n}\n\n@override\nWidget build(BuildContext context) {\n  return SfChat(\n    messages: _messages,\n    outgoingUser: '8ob3-b720-g9s6-25s8',\n    composer: const ChatComposer(\n      decoration: InputDecoration(\n        hintText: 'Type a message',\n      ),\n    ),\n    actionButton: ChatActionButton(\n      onPressed: (String newMessage) {\n        setState(() {\n          _messages.add(ChatMessage(\n            text: newMessage,\n            time: DateTime.now(),\n            author: const ChatAuthor(\n              id: '8ob3-b720-g9s6-25s8',\n              name: 'Outgoing user name',\n            ),\n          ));\n        });\n      },\n    ),\n  );\n}\n\n@override\nvoid dispose() {\n  _messages.clear();\n  super.dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Data Source - Dart\nDESCRIPTION: This code demonstrates adding a data source to the SfCalendar widget to display appointments. It defines a `Meeting` class, a `MeetingDataSource` class extending `CalendarDataSource`, and a `_getDataSource` method to create a list of `Meeting` objects.  The `dataSource` property of `SfCalendar` is set to an instance of `MeetingDataSource`. The month view is set, and the appointments will be shown as appointments in the month view via the appointmentDisplayMode. The MeetingDataSource class overrides methods to map Meeting properties to the corresponding calendar properties.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/README.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        body: SfCalendar(\n          view: CalendarView.month,\n          dataSource: MeetingDataSource(_getDataSource()),\n          monthViewSettings: MonthViewSettings(\n              appointmentDisplayMode: MonthAppointmentDisplayMode.appointment),\n        ));\n  }\n\n  List<Meeting> _getDataSource() {\n    final List<Meeting> meetings = <Meeting>[];\n    final DateTime today = DateTime.now();\n    final DateTime startTime =\n    DateTime(today.year, today.month, today.day, 9, 0, 0);\n    final DateTime endTime = startTime.add(const Duration(hours: 2));\n    meetings.add(\n        Meeting('Conference', startTime, endTime, const Color(0xFF0F8644), false));\n    return meetings;\n  }\n}\n\nclass MeetingDataSource extends CalendarDataSource {\n  MeetingDataSource(List<Meeting> source){\n    appointments = source;\n  }\n\n  @override\n  DateTime getStartTime(int index) {\n    return appointments![index].from;\n  }\n\n  @override\n  DateTime getEndTime(int index) {\n    return appointments![index].to;\n  }\n\n  @override\n  String getSubject(int index) {\n    return appointments![index].eventName;\n  }\n\n  @override\n  Color getColor(int index) {\n    return appointments![index].background;\n  }\n\n  @override\n  bool isAllDay(int index) {\n    return appointments![index].isAllDay;\n  }\n}\n\nclass Meeting {\n  Meeting(this.eventName, this.from, this.to, this.background, this.isAllDay);\n\n  String eventName;\n  DateTime from;\n  DateTime to;\n  Color background;\n  bool isAllDay;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Project and Finding PDFium - CMake\nDESCRIPTION: This snippet initializes the CMake project, finds the PDFium library (including headers, DLL, and import library), and defines variables for their locations. It uses `find_path` and `find_file` to locate the PDFium components within the project structure, using specified path suffixes and architecture (x64).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nset(PROJECT_NAME \"syncfusion_pdfviewer_windows\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\ninclude(FindPackageHandleStandardArgs)\n\nfind_path(PDFium_INCLUDE_DIR\n    NAMES \"fpdfview.h\"\n    PATHS \"${CMAKE_CURRENT_LIST_DIR}\"\n    PATH_SUFFIXES \"include/pdfium\"\n)\n\nset(PDFium_ARCH x64)\n\nfind_file(PDFium_LIBRARY\n    NAMES \"pdfium.dll\"\n    PATHS \"${CMAKE_CURRENT_LIST_DIR}\"\n    PATH_SUFFIXES \"include/pdfium/${PDFium_ARCH}/bin\")\n\nfind_file(PDFium_IMPLIB\n    NAMES \"pdfium.dll.lib\"\n    PATHS \"${CMAKE_CURRENT_LIST_DIR}\"\n    PATH_SUFFIXES \"include/pdfium/${PDFium_ARCH}/lib\")\n\nadd_library(pdfium SHARED IMPORTED)\nset_target_properties(pdfium\nPROPERTIES\nIMPORTED_LOCATION             \"${PDFium_LIBRARY}\"\nIMPORTED_IMPLIB               \"${PDFium_IMPLIB}\"\nINTERFACE_INCLUDE_DIRECTORIES \"${PDFium_INCLUDE_DIR};${PDFium_INCLUDE_DIR}/cpp\"\n)\n\nfind_package_handle_standard_args(PDFium\nREQUIRED_VARS PDFium_LIBRARY PDFium_IMPLIB PDFium_INCLUDE_DIR\n)\n```\n\n----------------------------------------\n\nTITLE: Add Image to Excel - Dart\nDESCRIPTION: This code snippet demonstrates how to add an image to an Excel worksheet using the Syncfusion Flutter XlsIO library. It reads the bytes of an image file named 'image.png' from the file system and adds it to the worksheet. This example assumes the image file exists in the same directory as the application. The file is saved as AddingImage.xlsx.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new Excel document.\nfinal Workbook workbook = new Workbook();\n//Accessing worksheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\n//Adding a picture\nfinal List<int> bytes = File('image.png').readAsBytesSync();\nfinal Picture picture = sheet.picutes.addStream(1, 1, bytes);\n\n// Save the document.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('AddingImage.xlsx').writeAsBytes(bytes);\n//Dispose the workbook.\nworkbook.dispose();\n```\n\n----------------------------------------\n\nTITLE: Adding SfSlider to Widget Tree - Dart\nDESCRIPTION: This code snippet demonstrates how to add the SfSlider widget to the Flutter widget tree. It shows the basic structure of a Flutter app with a SfSlider nested within a MaterialApp, Scaffold, and Center widget. This will render an empty slider.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n    return MaterialApp(\n        home: Scaffold(\n            body: Center(\n                child: SfSlider(),\n              ),\n          ),\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Hyperlinks to Excel Worksheet - Dart\nDESCRIPTION: This code snippet demonstrates how to add hyperlinks to an Excel worksheet using the Syncfusion Flutter Excel widget. It creates a new Excel document, adds a hyperlink to a cell, sets the hyperlink type, URL, screen tip, and text to display, and saves the Excel file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Create a new Excel Document.\nfinal Workbook workbook = Workbook();\n\n// Accessing sheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\n//Creating a Hyperlink for a Website.\nfinal Hyperlink hyperlink = sheet.hyperlinks.add(sheet.getRangeByName('A1'),\n    HyperlinkType.url, 'https://www.syncfusion.com');\nhyperlink.screenTip =\n    'To know more about Syncfusion products, go through this link.';\nhyperlink.textToDisplay = 'Syncfusion';\n\n// Save and dispose workbook.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('Hyperlinks.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n\n```\n```\n\n----------------------------------------\n\nTITLE: Importing DataGrid Package - Dart\nDESCRIPTION: This code snippet imports the necessary package for using the Syncfusion Flutter DataGrid in a Dart application. This import is essential for accessing the DataGrid widget and its associated classes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:syncfusion_flutter_datagrid/datagrid.dart';\n```\n\n----------------------------------------\n\nTITLE: Create Simple Excel Document - Dart\nDESCRIPTION: This code snippet demonstrates how to create a basic Excel document using the Syncfusion Flutter XlsIO library. It initializes a new workbook, accesses the first worksheet, saves the workbook to a file, and then disposes of the workbook object to release resources.  The file is saved as CreateExcel.xlsx.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new Excel document.\nfinal Workbook workbook = new Workbook();\n//Accessing worksheet via index.\nworkbook.worksheets[0];\n// Save the document.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('CreateExcel.xlsx').writeAsBytes(bytes);\n//Dispose the workbook.\nworkbook.dispose();\n```\n\n----------------------------------------\n\nTITLE: Signing Existing PDF Document - Flutter\nDESCRIPTION: This code snippet shows how to digitally sign an existing PDF document using the Syncfusion Flutter PDF package. It loads the PDF from 'input.pdf', retrieves the signature field, associates it with a digital certificate loaded from 'certificate.pfx' (protected by 'password@123'), and saves the signed PDF as 'output.pdf'.  It depends on `syncfusion_flutter_pdf` and access to a valid certificate file. Inputs are the path to the existing PDF and the certificate file and password.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\n//Load the existing PDF document.\nfinal PdfDocument document =\n    PdfDocument(inputBytes: File('input.pdf').readAsBytesSync());\n\n//Get the signature field.\nPdfSignatureField signatureField =\n    document.form.fields[0] as PdfSignatureField;\n\n//Get signature field and sign.\nsignatureField.signature = PdfSignature(\n  certificate:\n      PdfCertificate(File('certificate.pfx').readAsBytesSync(), 'password@123'),\n);\n\n//Save and dispose the document.\nFile('output.pdf').writeAsBytesSync(await document.save());\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Adding Date Range Picker Widget - Flutter\nDESCRIPTION: This code snippet demonstrates how to add the SfDateRangePicker widget to your Flutter widget tree. The SfDateRangePicker is added as a child of a Container within a Scaffold.  This provides a basic implementation of the DateRangePicker in a Flutter app.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/README.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: Container(\n    child: SfDateRangePicker(),\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Map Data Source to Treemap - Dart\nDESCRIPTION: This snippet demonstrates how to map a data source to the SfTreemap widget. It includes defining a data model (SocialMediaUsers), initializing a list of data, and configuring the Treemap's `dataCount`, `weightValueMapper`, and `levels` properties to display hierarchical data based on country and user counts.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nlate List<SocialMediaUsers> _source;\n\n@override\nvoid initState() {\n  _source = <SocialMediaUsers>[\n    SocialMediaUsers('India', 'Facebook', 25.4),\n    SocialMediaUsers('USA', 'Instagram', 19.11),\n    SocialMediaUsers('Japan', 'Facebook', 13.3),\n    SocialMediaUsers('Germany', 'Instagram', 10.65),\n    SocialMediaUsers('France', 'Twitter', 7.54),\n    SocialMediaUsers('UK', 'Instagram', 4.93),\n  ];\n  super.initState();\n}\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: SfTreemap(\n      dataCount: _source.length,\n      weightValueMapper: (int index) {\n        return _source[index].usersInMillions;\n      },\n      levels: [\n        TreemapLevel(\n          groupMapper: (int index) {\n            return _source[index].country;\n          },\n        ),\n      ],\n    ),\n  );\n}\n\nclass SocialMediaUsers {\n  const SocialMediaUsers(this.country, this.socialMedia, this.usersInMillions);\n\n  final String country;\n  final String socialMedia;\n  final double usersInMillions;\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Workbook Elements in Excel - Dart\nDESCRIPTION: This code snippet demonstrates how to protect workbook elements (window and content) in an Excel document using the Syncfusion Flutter Excel widget. It creates a new Excel document, adds text to a cell, sets protection flags (isProtectWindow, isProtectContent), applies the protection with a password, and saves the Excel file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Create a new Excel Document.\nfinal Workbook workbook = Workbook();\n\n// Accessing sheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\n// Assigning text to cells\nfinal Range range = sheet.getRangeByName('A1');\nrange.setText('WorkBook Protected');\n\nfinal bool isProtectWindow = true;\nfinal bool isProtectContent = true;\n\n// Protect Workbook\nworkbook.protect(isProtectWindow, isProtectContent, 'password');\n\n// Save and dispose workbook.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('WorkbookProtect.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Month Agenda View - Dart\nDESCRIPTION: This snippet adds an agenda view to the month view of the calendar. The `monthViewSettings` property is used, with its `showAgenda` property set to `true`.  This displays the appointments for the selected date below the month view.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/README.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: SfCalendar(\n    view: CalendarView.month,\n    monthViewSettings: MonthViewSettings(showAgenda: true),\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory in the CMake build process. This includes the CMakeLists.txt file located in the Flutter directory, which contains build rules for the Flutter engine and related tools. This is crucial for integrating Flutter into the native build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Creating a Radial Gauge with Elements - Flutter\nDESCRIPTION: This code snippet demonstrates how to create a SfRadialGauge widget with various elements such as axes, ranges, pointers, and annotations.  The gauge displays a scale from 0 to 150, with color-coded ranges for different value intervals. A needle pointer indicates the current value, and an annotation displays the numerical value within the gauge. The code is embedded in a MaterialApp within a Scaffold and a Center widget.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n      body: Center(\n        child: Container(\n          child: SfRadialGauge(\n          axes: <RadialAxis>[\n            RadialAxis(minimum: 0, maximum: 150,\n            ranges: <GaugeRange>[\n              GaugeRange(startValue: 0, endValue: 50, color:Colors.green),\n              GaugeRange(startValue: 50,endValue: 100,color: Colors.orange),\n              GaugeRange(startValue: 100,endValue: 150,color: Colors.red)],\n            pointers: <GaugePointer>[\n              NeedlePointer(value: 90)],\n            annotations: <GaugeAnnotation>[\n              GaugeAnnotation(widget: Container(child: \n                 Text('90.0',style: TextStyle(fontSize: 25,fontWeight: FontWeight.bold))),\n                 angle: 90, positionFactor: 0.5\n              )]\n          )])\n      ))),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding SfCartesianChart to Widget Tree - Flutter\nDESCRIPTION: This code snippet demonstrates how to add a `SfCartesianChart` widget to the Flutter widget tree within a `Container` and `Center` widget. The `SfCartesianChart` is a core component from Syncfusion for displaying various chart types like line, column, and bar charts.  It's placed within a `Scaffold` to provide a basic app structure.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/README.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n        child: Container(\n          child: SfCartesianChart()\n        )\n      )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening PDF Form - Flutter\nDESCRIPTION: This code snippet demonstrates how to flatten an existing PDF form using the Syncfusion Flutter PDF package. Flattening removes the interactive form fields, making the PDF non-editable. The code loads 'input.pdf', flattens all form fields, and saves the result to 'output.pdf'. It depends on `syncfusion_flutter_pdf` and `dart:io`. Inputs are the file path to the existing PDF.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n//Load the existing PDF document.\nfinal PdfDocument document =\n    PdfDocument(inputBytes: File('input.pdf').readAsBytesSync());\n\n//Get the form.\nPdfForm form = document.form;\n\n//Flatten all the form fields.\nform.flattenAllFields();\n\n//Save and dispose the document.\nFile('output.pdf').writeAsBytesSync(await document.save());\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Binding Data to SfCartesianChart - Flutter\nDESCRIPTION: This code snippet shows how to bind data to a `SfCartesianChart` to display a line chart.  It initializes a `CategoryAxis` for the x-axis and creates a `LineSeries`.  The `dataSource` property is populated with `SalesData` objects, and `xValueMapper` and `yValueMapper` are used to map data fields to the chart's x and y axes respectively. The SalesData class is defined to hold the year and sales information.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n        child: Container(\n          child: SfCartesianChart(\n            // Initialize category axis\n            primaryXAxis: CategoryAxis(),\n\n            series: <LineSeries<SalesData, String>>[\n              LineSeries<SalesData, String>(\n                // Bind data source\n                dataSource:  <SalesData>[\n                  SalesData('Jan', 35),\n                  SalesData('Feb', 28),\n                  SalesData('Mar', 34),\n                  SalesData('Apr', 32),\n                  SalesData('May', 40)\n                ],\n                xValueMapper: (SalesData sales, _) => sales.year,\n                yValueMapper: (SalesData sales, _) => sales.sales\n              )\n            ]\n          )\n        )\n      )\n  );\n}\n\nclass SalesData {\n  SalesData(this.year, this.sales);\n  final String year;\n  final double sales;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Text from PDF - Flutter\nDESCRIPTION: This code snippet demonstrates how to extract text from all pages of an existing PDF document using the Syncfusion Flutter PDF library.  It loads the PDF document, extracts the text using PdfTextExtractor, and then disposes of the document. Also contains example of extracting text from a specific page.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n//Load an existing PDF document.\nfinal PdfDocument document =\n    PdfDocument(inputBytes: File('input.pdf').readAsBytesSync());\n//Extract the text from all the pages.\nString text = PdfTextExtractor(document).extractText();\n//Dispose the document.\ndocument.dispose();\n```\n\nLANGUAGE: dart\nCODE:\n```\n//Load an existing PDF document.\nPdfDocument document =\n   PdfDocument(inputBytes: File('input.pdf').readAsBytesSync());\n//Extract the text from page 1.\nString text = PdfTextExtractor(document).extractText(startPageIndex: 0);\n//Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Creating a PDF Table - Flutter\nDESCRIPTION: This code snippet demonstrates how to create a PDF table using the Syncfusion Flutter PDF library. It initializes a PdfDocument, adds a page, creates a PdfGrid, defines columns and header rows, adds data rows, formats the grid, and draws the table on the page. Finally, it saves the document to a file and disposes of it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Create a new PDF document.\nfinal PdfDocument document = PdfDocument();\n// Add a new page to the document.\nfinal PdfPage page = document.pages.add();\n// Create a PDF grid class to add tables.\nfinal PdfGrid grid = PdfGrid();\n// Specify the grid column count.\ngrid.columns.add(count: 3);\n// Add a grid header row.\nfinal PdfGridRow headerRow = grid.headers.add(1)[0];\nheaderRow.cells[0].value = 'Customer ID';\nheaderRow.cells[1].value = 'Contact Name';\nheaderRow.cells[2].value = 'Country';\n// Set header font.\nheaderRow.style.font =\n    PdfStandardFont(PdfFontFamily.helvetica, 10, style: PdfFontStyle.bold);\n// Add rows to the grid.\nPdfGridRow row = grid.rows.add();\nrow.cells[0].value = 'ALFKI';\nrow.cells[1].value = 'Maria Anders';\nrow.cells[2].value = 'Germany';\n// Add next row.\nrow = grid.rows.add();\nrow.cells[0].value = 'ANATR';\nrow.cells[1].value = 'Ana Trujillo';\nrow.cells[2].value = 'Mexico';\n// Add next row.\nrow = grid.rows.add();\nrow.cells[0].value = 'ANTON';\nrow.cells[1].value = 'Antonio Mereno';\nrow.cells[2].value = 'Mexico';\n// Set grid format.\ngrid.style.cellPadding = PdfPaddings(left: 5, top: 5);\n// Draw table in the PDF page.\ngrid.draw(\n    page: page,\n    bounds: Rect.fromLTWH(\n        0, 0, page.getClientSize().width, page.getClientSize().height));\n// Save the document.\nFile('PDFTable.pdf').writeAsBytes(await document.save());\n// Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Formatting in Excel - Dart\nDESCRIPTION: This code snippet demonstrates how to add and apply conditional formatting to a cell in an Excel worksheet using the Syncfusion Flutter Excel widget. It creates a new Excel document, adds a conditional format to a cell based on a value range, sets formatting properties when the condition is met (background color, font color, borders, etc.), and saves the Excel file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Create a new Excel Document.\nfinal Workbook workbook = Workbook();\n\n// Accessing sheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\n//Applying conditional formatting to \"A2\".\nfinal ConditionalFormats conditions =\n    sheet.getRangeByName('A2').conditionalFormats;\nfinal ConditionalFormat condition = conditions.addCondition();\n\n//Represents conditional format rule that the value in target range should be between 10 and 20\ncondition.formatType = ExcelCFType.cellValue;\ncondition.operator = ExcelComparisonOperator.between;\ncondition.firstFormula = '10';\ncondition.secondFormula = '20';\nsheet.getRangeByIndex(2, 1).setText('Enter a number between 10 and 20');\n\n//Setting format properties to be applied when the above condition is met.\n//set back color by hexa decimal.\ncondition.backColor = '#00FFCC';\n//set font color by RGB values.\ncondition.fontColorRgb = Color.fromARGB(255, 200, 20, 100);\n//set font bold.\ncondition.isBold = true;\n//set font italic.\ncondition.isItalic = true;\n//set number format.\ncondition.numberFormat = '0.0';\n//set font underline.\ncondition.underline = true;\n//set top border line style\ncondition.topBorderStyle = LineStyle.thick;\n// set top border color by RGB values.\ncondition.topBorderColorRgb = Color.fromARGB(255, 200, 1, 200);\n//set bottom border line style.\ncondition.bottomBorderStyle = LineStyle.medium;\n//set bottom border color by hexa decimal.\ncondition.bottomBorderColor = '#FF0000';\n//set right border line style.\ncondition.rightBorderStyle = LineStyle.double;\n// set right border color by RGB values.\ncondition.rightBorderColorRgb = Color.fromARGB(250, 24, 160, 200);\n//set left border line style.\ncondition.leftBorderStyle = LineStyle.thin;\n//set left border color by hexa decimal.\ncondition.leftBorderColor = '#AAFFAA';\n\n//save and dispose.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('ConditionalFormatting.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build. This allows CMake to build the Flutter-related components of the project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Add Images to a PDF Document - Dart\nDESCRIPTION: Creates a PDF document and adds an image (input.png) to the document. It reads the image data from a file, loads it using PdfBitmap, draws the image on a page, saves the document as \"ImageToPDF.pdf\", and disposes the document.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n//Create a new PDF document.\nfinal PdfDocument document = PdfDocument();\n//Read image data.\nfinal Uint8List imageData = File('input.png').readAsBytesSync();\n//Load the image using PdfBitmap.\nfinal PdfBitmap image = PdfBitmap(imageData);\n//Draw the image to the PDF page.\ndocument.pages\n    .add()\n    .graphics\n    .drawImage(image, const Rect.fromLTWH(0, 0, 500, 200));\n// Save the document.\nFile('ImageToPDF.pdf').writeAsBytes(await document.save());\n// Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Importing Data List into Excel Worksheet - Dart\nDESCRIPTION: This code snippet demonstrates how to import a list of data into an Excel worksheet using the Syncfusion Flutter Excel widget. It creates a new Excel document, initializes a list of objects (strings, numbers, DateTime), imports the list into the sheet, and saves the Excel file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Create a new Excel Document.\nfinal Workbook workbook = Workbook();\n\n// Accessing sheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\n//Initialize the list\nfinal List<Object> list = [\n  'Toatal Income',\n  20000,\n  'On Date',\n  DateTime(2021, 1, 1)\n];\n\n//Import the Object list to Sheet\nsheet.importList(list, 1, 1, true);\n\n// Save and dispose workbook.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('ImportDataList.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying PDF Annotations - Flutter\nDESCRIPTION: This code snippet demonstrates how to load and modify an existing PDF annotation. It assumes a PDF document is already loaded and the first annotation on the first page is a PdfRectangleAnnotation.  It changes the annotation's text property.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n//Load and modify the existing annotation.\nfinal PdfRectangleAnnotation rectangleAnnotation =\n    document.pages[0].annotations[0] as PdfRectangleAnnotation;\n//Change the annotation text.\nrectangleAnnotation.text = 'Changed';\n```\n\n----------------------------------------\n\nTITLE: Signing PDF Document - Flutter\nDESCRIPTION: This code snippet shows how to create a new PDF document and digitally sign it using the Syncfusion Flutter PDF package.  It creates a signature field on a new page, associates it with a digital certificate loaded from 'certificate.pfx' (protected by 'password@123'), adds the field to the document, and saves the signed PDF as 'signed.pdf'.  It requires `syncfusion_flutter_pdf` and access to the certificate file.  Inputs are the certificate file path and password.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n//Create a new PDF document.\nPdfDocument document = PdfDocument();\n\n//Add a new PDF page.\nPdfPage page = document.pages.add();\n\n//Create signature field.\nPdfSignatureField signatureField = PdfSignatureField(page, 'Signature',\n    bounds: Rect.fromLTWH(0, 0, 200, 50),\n    signature: PdfSignature(\n       certificate:\n          PdfCertificate(File('certificate.pfx').readAsBytesSync(), 'password@123')\n    ));\n  \n//Add the signature field to the document.\ndocument.form.fields.add(signatureField);\n\n//Save and dispose the PDF document\nFile('signed.pdf').writeAsBytes(await document.save());\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Loading and Modifying PDF - Flutter\nDESCRIPTION: This code snippet loads an existing PDF document, retrieves the first page, draws text on it, saves the modified document, and disposes of the document. It uses the Syncfusion Flutter PDF library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n//Load the existing PDF document.\nfinal PdfDocument document =\n    PdfDocument(inputBytes: File('input.pdf').readAsBytesSync());\n//Get the existing PDF page.\nfinal PdfPage page = document.pages[0];\n//Draw text in the PDF page.\npage.graphics.drawString(\n    'Hello World!', PdfStandardFont(PdfFontFamily.helvetica, 12),\n    brush: PdfSolidBrush(PdfColor(0, 0, 0)),\n    bounds: const Rect.fromLTWH(0, 0, 150, 20));\n//Save the document.\nFile('output.pdf').writeAsBytes(await document.save());\n//Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Saving Signature as Image in Web (Mobile browser) - Flutter\nDESCRIPTION: This code snippet demonstrates how to save a signature drawn in the Syncfusion Flutter SignaturePad as an image in a web application (specifically targeting mobile browsers). It uses the renderToContext2D method to render the signature to an HTML canvas, then extracts the image data as a Uint8List. The GlobalKey is essential to accessing the SignaturePad's state.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/README.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  GlobalKey<SfSignaturePadState> _signaturePadKey = GlobalKey();\n  return Scaffold(\n    body: Column(\n      children: [\n        Container(\n          child: SfSignaturePad(\n            key: _signaturePadKey,\n            backgroundColor: Colors.grey[200],\n          ),\n          height: 200,\n          width: 300,\n        ),\n        RaisedButton(\n            child: Text(\"Save As Image\"),\n            onPressed: () async {\n\n\t\t\t\t//Get a html canvas context.\n                final canvas = html.CanvasElement(width: 500, height: 500);\n                final context = canvas.context2D;\n\n\t\t\t\t//Get the signature in the canvas context.\n                _signaturePadKey.currentState!.renderToContext2D(context);\n\n\t\t\t\t//Get the image from the canvas context\n                final blob = await canvas.toBlob('image/jpeg', 1.0);\n\n\t\t\t\t//Save the image as Uint8List to use it in local device.\n                final completer = Completer<Uint8List>();\n                final reader = html.FileReader();\n                reader.readAsArrayBuffer(blob);\n                reader.onLoad.listen((_) => completer.complete(reader.result));\n                Uint8List imageData = await completer.future;\n\n            }),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Linear Gauge to Widget Tree - Dart\nDESCRIPTION: This code snippet demonstrates how to add a SfLinearGauge widget to the Flutter widget tree.  It is added as a child of a Container widget, which is itself a child of a Center widget within a Scaffold. This sets up the basic structure for displaying a linear gauge.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n      body: Center(\n        child: Container(\n          child: SfLinearGauge()\n      ))),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Columns for SfDataGrid - Flutter\nDESCRIPTION: This code snippet demonstrates how to define the columns for the `SfDataGrid` in Flutter. It creates a list of `GridColumn` objects, each defining a column in the grid. Each column has a `columnName` and a `label`, which is a widget displayed in the column header. It requires the `GridColumn` class from the Syncfusion Flutter DataGrid package.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/README.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: const Text('Syncfusion Flutter DataGrid'),\n    ),\n    body: SfDataGrid(\n      source: employeeDataSource,\n      columns: <GridColumn>[\n        GridColumn(\n            columnName: 'id',\n            label: Container(\n                padding: EdgeInsets.all(16.0),\n                alignment: Alignment.centerRight,\n                child: Text(\n                  'ID',\n                ))),\n        GridColumn(\n            columnName: 'name',\n            label: Container(\n                padding: EdgeInsets.all(16.0),\n                alignment: Alignment.centerLeft,\n                child: Text('Name'))),\n        GridColumn(\n            columnName: 'designation',\n            width: 120,\n            label: Container(\n                padding: EdgeInsets.all(16.0),\n                alignment: Alignment.centerLeft,\n                child: Text('Designation'))),\n        GridColumn(\n            columnName: 'salary',\n            label: Container(\n                padding: EdgeInsets.all(16.0),\n                alignment: Alignment.centerRight,\n                child: Text('Salary'))),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SfDataGrid with DataSource - Flutter\nDESCRIPTION: This code shows how to initialize the `SfDataGrid` with the created `DataGridSource`. It sets the `source` property of the `SfDataGrid` to an instance of the `EmployeeDataSource`.  It assumes that `_employeeDataSource` is an existing instance of `EmployeeDataSource`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      appBar: AppBar(\n        title: Text('Syncfusion DataGrid'),\n      ),\n      body: Center(\n        child: Expanded(\n          child: SfDataGrid(\n            source: _employeeDataSource,\n          ),\n        ),\n      ));\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Built-In Style - Dart\nDESCRIPTION: This code snippet demonstrates how to apply a built-in style to an Excel worksheet cell using the Syncfusion Flutter XlsIO library. It applies the 'linkedCell' built-in style to cell A1, providing a pre-defined formatting configuration. The file is saved as ApplyBuildInStyle.xlsx.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new Excel document.\nfinal Workbook workbook = new Workbook();\n//Accessing worksheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\n//Applying Number format.\nsheet.getRangeByName('A1').builtInStyle = BuiltInStyles.linkedCell;\n\n// Save the document.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('ApplyBuildInStyle.xlsx').writeAsBytes(bytes);\n//Dispose the workbook.\nworkbook.dispose();\n```\n\n----------------------------------------\n\nTITLE: Adding SfSparkLineChart to Widget Tree - Flutter\nDESCRIPTION: This code snippet demonstrates how to add a `SfSparkLineChart` widget to the Flutter widget tree within a `Container` and `Center` widget. The `SfSparkLineChart` is a component from Syncfusion for displaying a sparkline chart. It's placed within a `Scaffold` to provide a basic app structure.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/README.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n        child: Container(\n          child: SfSparkLineChart()\n        )\n      )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Data Source - Dart\nDESCRIPTION: This code snippet demonstrates how to create a data source for the `SfDataGrid`. It initializes a list of `Employee` objects and creates an `EmployeeDataSource` from it. The `initState` method is used to initialize the data and the data source when the widget is first created. `DataGridSource` objects should not be re-created with each build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nList<Employee> employees = <Employee>[];\n\nlate EmployeeDataSource employeeDataSource;\n\n@override\nvoid initState() {\n  super.initState();\n  employees= getEmployees();\n  employeeDataSource = EmployeeDataSource(employees: employees);\n}\n\n List<Employee> getEmployees() {\n  return[\n  Employee(10001, 'James', 'Project Lead', 20000),\n  Employee(10002, 'Kathryn', 'Manager', 30000),\n  Employee(10003, 'Lara', 'Developer', 15000),\n  Employee(10004, 'Michael', 'Designer', 15000),\n  Employee(10005, 'Martin', 'Developer', 15000),\n  Employee(10006, 'Newberry', 'Developer', 15000),\n  Employee(10007, 'Balnc', 'Developer', 15000),\n  Employee(10008, 'Perry', 'Developer', 15000),\n  Employee(10009, 'Gable', 'Developer', 15000),\n  Employee(10010, 'Grimes', 'Developer', 15000)\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows and Columns in Excel - Dart\nDESCRIPTION: This code snippet demonstrates how to delete rows and columns from an Excel worksheet using the Syncfusion Flutter Excel widget. It creates a new Excel document, adds text to specific cells, deletes a row and a column at specified indices, and saves the Excel file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Create a new Excel Document.\nfinal Workbook workbook = Workbook();\n\n// Accessing sheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\nRange range = sheet.getRangeByName('A2');\nrange.setText('Hello');\n\nrange = sheet.getRangeByName('C2');\nrange.setText('World');\n\n// Delete a row\nsheet.deleteRow(1, 1);\n\n// Delete a column.\nsheet.deleteColumn(2, 1);\n\n// Save and dispose workbook.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('DeleteRowandColumn.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a GeoJSON File to Flutter Map\nDESCRIPTION: This code snippet demonstrates how to add a GeoJSON file as a source for a map shape layer. It initializes a `MapShapeSource` with the path to the GeoJSON file ('assets/australia.json') and the `shapeDataField` ('STATE_NAME'). This source is then used to create a `MapShapeLayer` within the `SfMaps` widget, rendering the geographical data from the file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nlate MapShapeSource _mapSource;\n\n@override\nvoid initState() {\n  _mapSource = MapShapeSource.asset(\n    'assets/australia.json',\n    shapeDataField: 'STATE_NAME',\n  );\n\n  super.initState();\n}\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: SfMaps(\n      layers: [\n        MapShapeLayer(\n          source: _mapSource,\n        ),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Set Symbology - Dart\nDESCRIPTION: This code shows how to set the barcode symbology to QR Code using the `symbology` property of the `SfBarcodeGenerator`. The input value is 'www.syncfusion.com'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n          body: Center(\n              child: Container(\n        height: 200,\n        child: SfBarcodeGenerator(\n          value: 'www.syncfusion.com',\n          symbology: QRCode(),\n        ),\n      ))),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: This snippet creates a static library named `flutter_wrapper_app` from the core and app wrapper sources. It applies standard settings, links it to the `flutter` interface library, includes the wrapper root directory, and adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: PDF Conformance - Flutter\nDESCRIPTION: This code snippet shows how to create a PDF conformance document (PDF/A-1B in this case) using the Syncfusion Flutter PDF library.  It creates a PdfDocument with the specified conformance level, adds a page, draws text on it using a TrueType font, saves the document, and disposes of it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n//Create a PDF conformance document.\nfinal PdfDocument document = PdfDocument(conformanceLevel: PdfConformanceLevel.a1b)\n  ..pages.add().graphics.drawString('Hello World',\n      PdfTrueTypeFont(File('Roboto-Regular.ttf').readAsBytesSync(), 12),\n      bounds: Rect.fromLTWH(20, 20, 200, 50), brush: PdfBrushes.black);\n//Save and dispose the document.\nFile('conformance.pdf').writeAsBytesSync(await document.save());\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Adding Chart Elements to SfCartesianChart - Flutter\nDESCRIPTION: This code snippet demonstrates how to add chart elements like a title, legend, and tooltip to a `SfCartesianChart`.  It initializes a `TooltipBehavior` and configures the chart with `ChartTitle`, `Legend`, and `TooltipBehavior` properties. It also includes `DataLabelSettings` to display data labels on the chart. The SalesData is same as previous snippet.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nTooltipBehavior _tooltipBehavior;\n\n@override\nvoid initState(){\n  _tooltipBehavior = TooltipBehavior(enable: true);\n  super.initState();\n}\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n        child: Container(\n          child: SfCartesianChart(\n\n            primaryXAxis: CategoryAxis(),\n            // Chart title\n            title: ChartTitle(text: 'Half yearly sales analysis'),\n            // Enable legend\n            legend: Legend(isVisible: true),\n            // Enable tooltip\n            tooltipBehavior: _tooltipBehavior,\n\n            series: <LineSeries<SalesData, String>>[\n              LineSeries<SalesData, String>(\n                dataSource:  <SalesData>[\n                  SalesData('Jan', 35),\n                  SalesData('Feb', 28),\n                  SalesData('Mar', 34),\n                  SalesData('Apr', 32),\n                  SalesData('May', 40)\n                ],\n                xValueMapper: (SalesData sales, _) => sales.year,\n                yValueMapper: (SalesData sales, _) => sales.sales,\n                // Enable data label\n                dataLabelSettings: DataLabelSettings(isVisible: true)\n              )\n            ]\n          )\n        )\n      )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Add Text using TrueType Fonts - Dart\nDESCRIPTION: Creates a PDF document and adds the text \"Hello World!!!\" using a TrueType font (arial.ttf). It reads the font data from a file, creates a PdfTrueTypeFont object, draws the text on a page, saves the document as \"TrueType.pdf\", and disposes the document.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n//Create a new PDF document.\nfinal PdfDocument document = PdfDocument();\n//Read font data.\nfinal Uint8List fontData = File('arial.ttf').readAsBytesSync();\n//Create a PDF true type font object.\nfinal PdfFont font = PdfTrueTypeFont(fontData, 12);\n//Draw text using ttf font.\ndocument.pages.add().graphics.drawString('Hello World!!!', font,\n    bounds: const Rect.fromLTWH(0, 0, 200, 50));\n// Save the document.\nFile('TrueType.pdf').writeAsBytes(await document.save());\n// Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Creating DataGridSource for SfDataGrid - Flutter\nDESCRIPTION: This code snippet demonstrates how to create a `DataGridSource` for the `SfDataGrid` in Flutter. It overrides the `rows` and `buildRow` methods to provide data and widgets for each cell in the grid. It depends on the `DataGridSource`, `DataGridRow`, `DataGridCell`, and `DataGridRowAdapter` classes from the Syncfusion Flutter DataGrid package.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass EmployeeDataSource extends DataGridSource {\n  EmployeeDataSource({List<Employee> employees}) {\n     _employees = employees\n        .map<DataGridRow>((e) => DataGridRow(cells: [\n              DataGridCell<int>(columnName: 'id', value: e.id),\n              DataGridCell<String>(columnName: 'name', value: e.name),\n              DataGridCell<String>(\n                  columnName: 'designation', value: e.designation),\n              DataGridCell<int>(columnName: 'salary', value: e.salary),\n            ]))\n        .toList();\n  }\n\n  List<DataGridRow>  _employees = [];\n\n  @override\n  List<DataGridRow> get rows =>  _employees;\n\n  @override\n  DataGridRowAdapter? buildRow(DataGridRow row) {\n    return DataGridRowAdapter(\n        cells: row.getCells().map<Widget>((dataGridCell) {\n      return Container(\n        alignment: (dataGridCell.columnName == 'id' || dataGridCell.columnName == 'salary')\n            ? Alignment.centerRight\n            : Alignment.centerLeft,\n        padding: EdgeInsets.all(16.0),\n        child: Text(dataGridCell.value.toString()),\n      );\n    }).toList());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Formulas to Excel - Dart\nDESCRIPTION: This code snippet demonstrates how to add formulas to Excel worksheet cells using the Syncfusion Flutter XlsIO library. It sets numeric values in cells A1 and A2, enables sheet calculations, and then sets a formula in cell A3 that adds the values of A1 and A2. The file is saved as AddingFormula.xlsx.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new Excel document.\nfinal Workbook workbook = new Workbook();\n//Accessing worksheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n//Setting value in the cell\nsheet.getRangeByName('A1').setNumber(22);\nsheet.getRangeByName('A2').setNumber(44);\n\n//Formula calculation is enabled for the sheet\nsheet.enableSheetCalculations();\n\n//Setting formula in the cell\nsheet.getRangeByName('A3').setFormula('=A1+A2');\n\n// Save the document.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('AddingFormula.xlsx').writeAsBytes(bytes);\n//Dispose the workbook.\nworkbook.dispose();\n```\n\n----------------------------------------\n\nTITLE: Loading PDF from Network - Dart\nDESCRIPTION: Demonstrates loading a PDF document from a network URL using `SfPdfViewer.network`. This is useful for displaying PDFs hosted on a remote server.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: SfPdfViewer.network(\n              'https://cdn.syncfusion.com/content/PDFViewer/flutter-succinctly.pdf'));\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Syncfusion Flutter Calendar Package - Dart\nDESCRIPTION: This code snippet demonstrates how to import the Syncfusion Flutter Calendar package into your Dart file. This import statement is necessary to use the SfCalendar widget and its associated classes and methods.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:syncfusion_flutter_calendar/calendar.dart';\n```\n\n----------------------------------------\n\nTITLE: Inserting Rows and Columns in Excel - Dart\nDESCRIPTION: This code snippet demonstrates how to insert rows and columns into an Excel worksheet using the Syncfusion Flutter Excel widget. It creates a new Excel document, adds text to specific cells, inserts a row and a column at specified indices with format options, and saves the Excel file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Create a new Excel Document.\nfinal Workbook workbook = Workbook();\n\n// Accessing sheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\nRange range = sheet.getRangeByName('A1');\nrange.setText('Hello');\n\nrange = sheet.getRangeByName('B1');\nrange.setText('World');\n\n// Insert a row\nsheet.insertRow(1, 1, ExcelInsertOptions.formatAsAfter);\n\n// Insert a column.\nsheet.insertColumn(2, 1, ExcelInsertOptions.formatAsBefore);\n\n// Save and dispose workbook.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('InsertRowandColumn.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n\n```\n```\n\n----------------------------------------\n\nTITLE: Create a PDF Document with Text - Dart\nDESCRIPTION: Creates a new PDF document, adds a page, writes \"Hello World!\" using a standard Helvetica font, saves the document to a file named \"HelloWorld.pdf\", and then disposes of the document. This snippet demonstrates the basic steps to create a PDF and add text to it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new PDF document.\nfinal PdfDocument document = PdfDocument();\n// Add a PDF page and draw text.\ndocument.pages.add().graphics.drawString(\n    'Hello World!', PdfStandardFont(PdfFontFamily.helvetica, 12),\n    brush: PdfSolidBrush(PdfColor(0, 0, 0)),\n    bounds: const Rect.fromLTWH(0, 0, 150, 20));\n// Save the document.\nFile('HelloWorld.pdf').writeAsBytes(await document.save());\n// Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Adding Radial Gauge to Widget Tree - Dart\nDESCRIPTION: This code shows how to add the SfRadialGauge widget to the Flutter widget tree.  The gauge is placed inside a Container, which is centered within a Scaffold.  This creates the basic structure for displaying a radial gauge in a Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n@override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n      body: Center(\n        child: Container(\n          child: SfRadialGauge()\n      ))),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Protecting Worksheet in Excel - Dart\nDESCRIPTION: This code snippet demonstrates how to protect an Excel worksheet using the Syncfusion Flutter Excel widget. It creates a new Excel document, adds text to a cell, defines ExcelSheetProtectionOption, protects the worksheet with a password and specified options, and saves the Excel file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Create a new Excel Document.\nfinal Workbook workbook = Workbook();\n\n// Accessing sheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\n// Assigning text to cells\nfinal Range range = sheet.getRangeByName('A1');\nrange.setText('Worksheet Protected');\n\n// ExcelSheetProtectionOption\nfinal ExcelSheetProtectionOption options = ExcelSheetProtectionOption();\noptions.all = true;\n\n// Protecting the Worksheet by using a Password\nsheet.protect('Password', options);\n\n// Save and dispose workbook.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('WorksheetProtect.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n\n```\n```\n\n----------------------------------------\n\nTITLE: Setting First Day of Week - Dart\nDESCRIPTION: This snippet demonstrates how to set the first day of the week for the calendar using the `firstDayOfWeek` property.  In this example, the first day of the week is set to Monday (1).  Requires specifying view as week.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: SfCalendar(\n    view: CalendarView.week,\n    firstDayOfWeek: 1,\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Linear Gauge Elements - Dart\nDESCRIPTION: This code demonstrates adding elements to the SfLinearGauge, such as ranges, and pointer markers. It defines a stateful widget that contains a SfLinearGauge with a range and marker pointers, allowing data visualization on the gauge. It needs the syncfusion_flutter_gauges package.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nclass _DemoAppState extends State<DemoApp> {\n  double _pointerValue = 45;\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n          body: Center(\n              child: Container(\n        child: SfLinearGauge(\n        ranges: [\n          LinearGaugeRange(\n            startValue: 0,\n            endValue: 50,\n          ),\n        ],\n        markerPointers: [\n          LinearShapePointer(\n            value: 50,\n          ),\n        ],\n        barPointers: [LinearBarPointer(value: 80)],\n      ),\n      ))),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Autofit to Single Excel Cells - Dart\nDESCRIPTION: This code snippet demonstrates how to apply autofit to single cells in an Excel worksheet using the Syncfusion Flutter Excel widget.  It creates a new Excel document, adds text to specific cells, applies autofit to a single row and a single column, and then saves the Excel file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Create a new Excel Document.\nfinal Workbook workbook = Workbook();\n\n// Accessing sheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\nfinal Range range = sheet.getRangeByName('A1');\nrange.setText('WrapTextWrapTextWrapTextWrapText');\nrange.cellStyle.wrapText = true;\n\nfinal Range range1 = sheet.getRangeByName('B1');\nrange1.setText('This is long text');\n\n// AutoFit applied to a single row\nsheet.autoFitRow(1);\n\n// AutoFit applied to a single Column.\nsheet.autoFitColumn(2);\n\n// Save and dispose workbook.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('AutoFit.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n\n```\n```\n\n----------------------------------------\n\nTITLE: Import Barcode Package - Dart\nDESCRIPTION: Imports the Syncfusion Flutter Barcode package, which is required to use the SfBarcodeGenerator widget in your Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:syncfusion_flutter_barcodes/barcodes.dart';\n```\n\n----------------------------------------\n\nTITLE: Importing Chat Library in Dart\nDESCRIPTION: This code snippet shows how to import the Syncfusion Flutter Chat library into a Dart file.  This import statement is necessary to use the SfChat widget and related classes in your Flutter application. It allows access to all the functionalities offered by the Chat package.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:syncfusion_flutter_chat/chat.dart';\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the `FLUTTER_LIBRARY` variable, which specifies the path to the Flutter engine DLL.  It sets the variable in the PARENT_SCOPE so it can be used in the install step. Also sets `FLUTTER_ICU_DATA_FILE` and `PROJECT_BUILD_DIR` similarly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Calendar to Widget Tree - Dart\nDESCRIPTION: This code snippet shows how to add the SfCalendar widget to the widget tree within a Flutter application. It's added as a child of the Scaffold widget within a Container. The SfCalendar widget provides the basic calendar UI.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: Container(\n    child: SfCalendar(),\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Signature as Image (Mobile/Desktop) - Dart\nDESCRIPTION: This code shows how to save the signature drawn in the `SfSignaturePad` as an image on mobile and desktop platforms.  It uses a `GlobalKey` to access the `SfSignaturePadState` and calls the `toImage()` method.  A `RaisedButton` triggers the image saving process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  GlobalKey<SfSignaturePadState> _signaturePadKey = GlobalKey();\n  return Scaffold(\n    body: Column(\n      children: [\n        Container(\n          child: SfSignaturePad(\n            key: _signaturePadKey,\n            backgroundColor: Colors.grey[200],\n          ),\n          height: 200,\n          width: 300,\n        ),\n        RaisedButton(\n            child: Text(\"Save As Image\"),\n            onPressed: () async {\n              ui.Image image =\n                 await _signaturePadKey.currentState!.toImage();\n            }),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Working Days and Hours - Dart\nDESCRIPTION: This snippet configures the working days and hours within the calendar. The `timeSlotViewSettings` property is used to set the `startHour`, `endHour`, and `nonWorkingDays`. This example sets the working hours from 9 AM to 4 PM, with Friday and Saturday as non-working days. The nonWorkingDays property accepts a list of integers corresponding to DateTime weekday constants (e.g., DateTime.friday).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: SfCalendar(\n    view: CalendarView.workWeek,\n    timeSlotViewSettings: TimeSlotViewSettings(\n        startHour: 9,\n        endHour: 16,\n        nonWorkingDays: <int>[DateTime.friday, DateTime.saturday]),\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Importing PDF Viewer Package - Dart\nDESCRIPTION: Imports the necessary package to use the Syncfusion Flutter PDF Viewer widget. This allows access to the SfPdfViewer class and related functionalities within your Dart code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/README.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:syncfusion_flutter_pdfviewer/pdfviewer.dart';\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, setting the minimum required version and defining the project name and supported languages (CXX).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Adding Headers and Footers - Flutter\nDESCRIPTION: This code snippet demonstrates how to add headers and footers to a PDF document using the Syncfusion Flutter PDF library. It creates a PdfDocument, defines PdfPageTemplateElement for the header and footer, draws text in them, and assigns them to the document's template. Finally, it saves the document and disposes of it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n//Create a new PDF document.\nfinal PdfDocument document = PdfDocument();\n//Create a PDF page template and add header content.\nfinal PdfPageTemplateElement headerTemplate =\n    PdfPageTemplateElement(const Rect.fromLTWH(0, 0, 515, 50));\n//Draw text in the header.\nheaderTemplate.graphics.drawString(\n    'This is page header', PdfStandardFont(PdfFontFamily.helvetica, 12),\n    bounds: const Rect.fromLTWH(0, 15, 200, 20));\n//Add the header element to the document.\ndocument.template.top = headerTemplate;\n//Create a PDF page template and add footer content.\nfinal PdfPageTemplateElement footerTemplate =\n    PdfPageTemplateElement(const Rect.fromLTWH(0, 0, 515, 50));\n//Draw text in the footer.\nfooterTemplate.graphics.drawString(\n    'This is page footer', PdfStandardFont(PdfFontFamily.helvetica, 12),\n    bounds: const Rect.fromLTWH(0, 15, 200, 20));\n//Set footer in the document.\ndocument.template.bottom = footerTemplate;\n//Now create pages.\ndocument.pages.add();\ndocument.pages.add();\n// Save the document.\nFile('HeaderandFooter.pdf').writeAsBytes(await document.save());\n// Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Loading Encrypted PDF Document - Flutter\nDESCRIPTION: This code snippet demonstrates how to load an encrypted PDF document using the SfPdfViewer widget in Flutter.  It utilizes the `SfPdfViewer.network` constructor to load the PDF from a URL and specifies the password required to decrypt and display the document. The `password` property accepts a string representing the PDF's password.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/README.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: Container(\n          child: SfPdfViewer.network(\n              'https://cdn.syncfusion.com/content/PDFViewer/encrypted.pdf',\n              password: 'syncfusion')));\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Syncfusion Flutter Charts Package\nDESCRIPTION: This code snippet imports the necessary package to use Syncfusion Flutter Charts in a Flutter application.  This import statement makes the chart widgets available for use in the code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/README.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:syncfusion_flutter_charts/charts.dart';\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to SfSparkLineChart - Flutter\nDESCRIPTION: This code snippet demonstrates how to add elements like a trackball, marker, and data labels to a `SfSparkLineChart`. It configures the chart with `SparkChartTrackball`, `SparkChartMarker`, and `SparkChartLabelDisplayMode` properties.  These elements provide additional information about the data plotted in the spark chart.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/README.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n        child: Container(\n          child: SfSparkLineChart(\n              //Enable the trackball\n              trackball: SparkChartTrackball(\n                  activationMode: SparkChartActivationMode.tap),\n              //Enable marker\n              marker: SparkChartMarker(\n                  displayMode: SparkChartMarkerDisplayMode.all),\n              //Enable data label\n              labelDisplayMode: SparkChartLabelDisplayMode.all,\n              data: <double>[\n                1, 5, -6, 0, 1, -2, 7, -7, -4, -10, 13, -6, 7, 5, 11, 5, 3\n              ],\n            )\n        )\n      )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading PDF from Memory - Dart\nDESCRIPTION: Shows loading a PDF document from memory (Uint8List) using `SfPdfViewer.memory`. This is useful when the PDF data is already available in memory, such as after downloading it from a network.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/README.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: SfPdfViewer.memory(\n              bytes));\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Global Style - Dart\nDESCRIPTION: This snippet shows how to apply a global style to Excel worksheet cells using the Syncfusion Flutter XlsIO library. It defines a global style with various properties such as background color, font, alignment, and borders, then applies it to cells A1 and A4 using cellStyle property. This example demonstrates the use of both hexadecimal and RGB values for color definitions. The file is saved as ApplyGlobalStyle.xlsx.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new Excel document.\nfinal Workbook workbook = new Workbook();\n\n//Accessing worksheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n\n//Defining a global style with all properties.\nStyle globalStyle = workbook.styles.add('style');\n//set back color by hexa decimal.\nglobalStyle.backColor = '#37D8E9';\n//set font name.\nglobalStyle.fontName = 'Times New Roman';\n//set font size.\nglobalStyle.fontSize = 20;\n//set font color by hexa decimal.\nglobalStyle.fontColor = '#C67878';\n//set font italic.\nglobalStyle.italic = true;\n//set font bold.\nglobalStyle.bold = true;\n//set font underline.\nglobalStyle.underline = true;\n//set wraper text.\nglobalStyle.wrapText = true;\n//set indent value.\nglobalStyle.indent = 1;\n//set horizontal alignment type.\nglobalStyle.hAlign = HAlignType.left;\n//set vertical alignment type.\nglobalStyle.vAlign = VAlignType.bottom;\n//set text rotation.\nglobalStyle.rotation = 90;\n//set all border line style.\nglobalStyle.borders.all.lineStyle = LineStyle.thick;\n//set border color by hexa decimal.\nglobalStyle.borders.all.color = '#9954CC';\n//set number format.\nglobalStyle.numberFormat = '_(\\$* #,##0_)';\n\n//Apply GlobalStyle to 'A1'.\nsheet.getRangeByName('A1').cellStyle = globalStyle;\n\n//Defining Gloabl style.\nglobalStyle = workbook.styles.add('style1');\n//set back color by RGB value.\nglobalStyle.backColorRgb = Color.fromARGB(245, 22, 44, 144);\n//set font color by RGB value.\nglobalStyle.fontColorRgb = Color.fromARGB(255, 244, 22, 44);\n//set border line style.\nglobalStyle.borders.all.lineStyle = LineStyle.double;\n//set border color by RGB value.\nglobalStyle.borders.all.colorRgb = Color.fromARGB(255, 44, 200, 44);\n\n//Apply GlobalStyle to 'A4';\nsheet.getRangeByName('A4').cellStyle = globalStyle;\n\n// Save the document.\nfinal List<int> bytes = workbook.saveAsStream();\nFile('ApplyGlobalStyle.xlsx').writeAsBytes(bytes);\n//Dispose the workbook.\nworkbook.dispose();\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: This snippet includes the generated plugin CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Map Elements (Labels, Legend, Tooltip) - Flutter\nDESCRIPTION: This code snippet showcases how to add data labels, a legend, and a tooltip to a Flutter Map using the `MapShapeLayer`. It demonstrates the usage of `showDataLabels`, `MapLegend`, and `shapeTooltipBuilder` properties. The color for legend icons is derived from the `shapeColorValueMapper`. The `initState` method initializes the data and map source, mapping state names, colors, and state codes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nlate List<Model> data;\nlate MapShapeSource _mapSource;\n\n@override\nvoid initState() {\n  data = <Model>[\n    Model('New South Wales', Color.fromRGBO(255, 215, 0, 1.0),\n        '       New\\nSouth Wales'),\n    Model('Queensland', Color.fromRGBO(72, 209, 204, 1.0), 'Queensland'),\n    Model('Northern Territory', Colors.red.withOpacity(0.85),\n        'Northern\\nTerritory'),\n    Model('Victoria', Color.fromRGBO(171, 56, 224, 0.75), 'Victoria'),\n    Model('South Australia', Color.fromRGBO(126, 247, 74, 0.75),\n        'South Australia'),\n    Model('Western Australia', Color.fromRGBO(79, 60, 201, 0.7),\n        'Western Australia'),\n    Model('Tasmania', Color.fromRGBO(99, 164, 230, 1), 'Tasmania'),\n    Model('Australian Capital Territory', Colors.teal, 'ACT')\n  ];\n\n  _mapSource = MapShapeSource.asset(\n    'assets/australia.json',\n    shapeDataField: 'STATE_NAME',\n    dataCount: data.length,\n    primaryValueMapper: (int index) => data[index].state,\n    dataLabelMapper: (int index) => data[index].stateCode,\n    shapeColorValueMapper: (int index) => data[index].color,\n  );\n  super.initState();\n}\n\n@override\nWidget build(BuildContext context) {\n  final ThemeData themeData = Theme.of(context);\n  return Scaffold(\n    body: Container(\n      height: 520,\n      child: Center(\n        child: SfMaps(\n          layers: <MapShapeLayer>[\n            MapShapeLayer(\n              source: _mapSource,\n              legend: MapLegend(MapElement.shape),\n              showDataLabels: true,\n              shapeTooltipBuilder: (BuildContext context, int index) {\n                return Padding(\n                  padding: const EdgeInsets.all(7),\n                  child: Text(data[index].stateCode,\n                      style: themeData.textTheme.caption!\n                          .copyWith(color: themeData.colorScheme.surface)),\n                );\n              },\n              tooltipSettings: MapTooltipSettings(\n                  color: Colors.grey[700],\n                  strokeColor: Colors.white,\n                  strokeWidth: 2),\n              strokeColor: Colors.white,\n              strokeWidth: 0.5,\n              dataLabelSettings: MapDataLabelSettings(\n                  textStyle: TextStyle(\n                      color: Colors.black,\n                      fontWeight: FontWeight.bold,\n                      fontSize: themeData.textTheme.caption!.fontSize)),\n            ),\n          ],\n        ),\n      ),\n    ),\n  );\n}\n\nclass Model {\n  Model(this.state, this.color, this.stateCode);\n\n  String state;\n  Color color;\n  String stateCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Syncfusion Flutter Spark Charts Package\nDESCRIPTION: This code snippet imports the necessary package to use Syncfusion Flutter Spark Charts in a Flutter application.  This allows the use of sparkline charts within the Flutter project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:syncfusion_flutter_charts/sparkcharts.dart';\n```\n\n----------------------------------------\n\nTITLE: Importing Syncfusion Sliders Package - Flutter\nDESCRIPTION: This code snippet shows the import statement required to use the Syncfusion Flutter Sliders package. It imports the `syncfusion_flutter_sliders` library, providing access to `SfRangeSlider` and other slider-related widgets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/README.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:syncfusion_flutter_sliders/sliders.dart';\n```\n\n----------------------------------------\n\nTITLE: Web Integration Script Tags - HTML\nDESCRIPTION: Specifies the script tags required for web integration of the Flutter PDF Viewer. These scripts load the PdfJs library, which is used to render PDF pages as images in the web platform.  These must be added to the `web/index.html` file within the `<body>` tags.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js\"></script>\n<script type=\"text/javascript\">\n   pdfjsLib.GlobalWorkerOptions.workerSrc = \"//cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.worker.min.js\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical SfSlider - Dart\nDESCRIPTION: This code snippet shows how to create and configure a vertical SfSlider. It's similar to the horizontal slider, but uses the `SfSlider.vertical` constructor.  Properties such as min, max, value, interval, showTicks, showLabels, enableTooltip, and onChanged are configured. The `setState` method updates the UI upon value change.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\ndouble _value = 40.0;\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: const Text('Syncfusion Flutter Vertical Slider'),\n    ),\n    body: SfSlider.vertical(\n      min: 0.0,\n      max: 100.0,\n      value: _value,\n      interval: 20,\n      showTicks: true,\n      showLabels: true,\n      enableTooltip: true,\n      minorTicksPerInterval: 1,\n      onChanged: (dynamic value) {\n        setState(() {\n          _value = value;\n        });\n      },\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter assets are assembled before the executable is built. This step is crucial for including the Dart code and other assets in the final application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/runner/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Changing Calendar Views - Dart\nDESCRIPTION: This snippet shows how to change the default calendar view to the month view using the `view` property of the `SfCalendar` widget. The `CalendarView.month` enumeration configures the calendar to display the month view.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: SfCalendar(\n    view: CalendarView.month,\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Signature in SignaturePad - Flutter\nDESCRIPTION: This code snippet shows how to clear the signature drawn in the Syncfusion Flutter SignaturePad using the clear() method. A GlobalKey is used to access the SignaturePad's state and call the clear() function. The method returns a ui.Image but it is not used in this particular example.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/README.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@override\n  Widget build(BuildContext context) {\n    \n\tGlobalKey<SfSignaturePadState> _signaturePadKey = GlobalKey();\n    \n\treturn Scaffold(\n      body: Column(\n        children: [\n          Container(\n            child: SfSignaturePad(\n              key: _signaturePadKey,\n              backgroundColor: Colors.grey[200],\n            ),\n            height: 200,\n            width: 300,\n          ),\n          RaisedButton(\n              child: Text(\"Clear\"),\n              onPressed: () async {\n                ui.Image image =\n                   _signaturePadKey.currentState.clear();\n              }),\n        ],\n      ),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library defines the include directories and link libraries required to use the Flutter engine. It depends on the `flutter_assemble` target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Loading PDF from Asset - Dart\nDESCRIPTION: Shows how to load a PDF document from the application's assets using `SfPdfViewer.asset`. This is suitable for PDF files included within the Flutter project bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: SfPdfViewer.asset(\n              'assets/flutter-succinctly.pdf'));\n}\n```\n\n----------------------------------------\n\nTITLE: Create Column Chart - Dart\nDESCRIPTION: This code snippet demonstrates creating a column chart within an Excel worksheet using the Syncfusion Flutter OfficeChart. It sets up sample data for venue costs, specifies the chart type as a column chart, and defines the data range used for the chart.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new Excel document.\nfinal Workbook workbook = Workbook();\n// Accessing worksheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n// Setting value in the cell.\nsheet.getRangeByName('A11').setText('Venue');\nsheet.getRangeByName('A12').setText('Seating & Decor');\nsheet.getRangeByName('A13').setText('Technical Team');\nsheet.getRangeByName('A14').setText('performers');\nsheet.getRangeByName('A15').setText('performer\\'s Transport');\nsheet.getRangeByName('B11:B15').numberFormat = '\\$#,##0_)';\nsheet.getRangeByName('B11').setNumber(17500);\nsheet.getRangeByName('B12').setNumber(1828);\nsheet.getRangeByName('B13').setNumber(800);\nsheet.getRangeByName('B14').setNumber(14000);\nsheet.getRangeByName('B15').setNumber(2600);\n// Create an instances of chart collection.\nfinal ChartCollection charts = ChartCollection(sheet);\n// Add the chart.\nfinal Chart chart1 = charts.add();\n// Set Chart Type.\nchart1.chartType = ExcelChartType.column;\n// Set data range in the worksheet.\nchart1.dataRange = sheet.getRangeByName('A11:B15');\nchart1.isSeriesInRows = false;\n// set charts to worksheet.\nsheet.charts = charts;\n// save and dispose the workbook.\nList<int> bytes = workbook.saveAsStream();\nFile('ExcelColumnChart.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n```\n\n----------------------------------------\n\nTITLE: Find Package Dependencies\nDESCRIPTION: Uses `pkg_check_modules` to find and import system-level dependencies required for the Flutter application, such as GTK, GLib, GIO, Blkid, and LZMA. These dependencies are necessary for GUI rendering and other system interactions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Initializing MapShapeSource with Data Mapping - Flutter\nDESCRIPTION: This code snippet demonstrates how to initialize a MapShapeSource using an asset file (GeoJSON) and map it with a data source. It uses the `shapeDataField` to map the GeoJSON shape properties to the data source's `primaryValueMapper`. The `initState` method is overridden to initialize the data and the map source.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nlate List<Model> data;\nlate MapShapeSource _mapSource;\n\n@override\nvoid initState() {\n  data = <Model>[\n    Model('New South Wales', '       New\\nSouth Wales'),\n    Model('Queensland', 'Queensland'),\n    Model('Northern Territory', 'Northern\\nTerritory'),\n    Model('Victoria', 'Victoria'),\n    Model('South Australia', 'South Australia'),\n    Model('Western Australia', 'Western Australia'),\n    Model('Tasmania', 'Tasmania'),\n    Model('Australian Capital Territory', 'ACT')\n  ];\n\n  _mapSource = MapShapeSource.asset(\n    'assets/australia.json',\n    shapeDataField: 'STATE_NAME',\n    dataCount: data.length,\n    primaryValueMapper: (int index) => data[index].state,\n  );\n\n  super.initState();\n}\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: SfMaps(\n      layers: <MapShapeLayer>[\n        MapShapeLayer(\n          source: _mapSource,\n        ),\n      ],\n    ),\n  );\n}\n\nclass Model {\n  Model(this.state, this.stateCode);\n\n  String state;\n  String stateCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Import DataGrid Export Package - Dart\nDESCRIPTION: Imports the Syncfusion Flutter DataGrid export package.  This import statement is necessary to access the classes and methods required to export the DataGrid to Excel and PDF formats. It is a required dependency for using the export functionality.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/README.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:syncfusion_flutter_datagrid_export/export.dart';\n```\n\n----------------------------------------\n\nTITLE: Adding/Removing PDF Pages - Flutter\nDESCRIPTION: This snippet demonstrates how to add or remove pages from an existing PDF document. It loads the PDF, removes the first page, adds a new page and draws text onto it, saves the changes, and disposes of the document using Syncfusion Flutter PDF library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n//Load the existing PDF document.\nfinal PdfDocument document =\n    PdfDocument(inputBytes: File('input.pdf').readAsBytesSync());\n//Remove the page from the document.\ndocument.pages.removeAt(0);\n//Add new page and draw text.\ndocument.pages.add().graphics.drawString(\n    'Hello World!', PdfStandardFont(PdfFontFamily.helvetica, 12),\n    brush: PdfSolidBrush(PdfColor(0, 0, 0)),\n    bounds: const Rect.fromLTWH(0, 0, 150, 20));\n//Save the document.\nFile('output.pdf').writeAsBytes(await document.save());\n//Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model Class - Dart\nDESCRIPTION: This code snippet defines a simple data model class called `Employee`. It includes properties such as `id`, `name`, `designation`, and `salary`. This class is used to represent the data displayed in the DataGrid.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nclass Employee {\n  Employee(this.id, this.name, this.designation, this.salary);\n  final int id;\n  final String name;\n  final String designation;\n  final int salary;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet specifies the minimum required version of CMake for the project, ensuring compatibility with the CMake features used in the build process. It sets the baseline for CMake functionality.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Finding Text in PDF - Flutter\nDESCRIPTION: This code snippet illustrates how to find specific text within a PDF document using the Syncfusion Flutter PDF library. It loads an existing PDF document, searches for specified text (['text1', 'text2']), retrieves the matched items, accesses the first matched item, and extracts its bounds, page index, and text.  Finally, it disposes of the document.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n//Load an existing PDF document.\nPdfDocument document =\n    PdfDocument(inputBytes: File('input.pdf').readAsBytesSync());\n//Find the text and get matched items.\nList<MatchedItem> textCollection =\n    PdfTextExtractor(document).findText(['text1', 'text2']); \n//Get the matched item in the collection using index.\nMatchedItem matchedText = textCollection[0];\n//Get the text bounds.\nRect textBounds = matchedText.bounds;  \n//Get the page index.\nint pageIndex = matchedText.pageIndex; \n//Get the text.\nString text = matchedText.text;\n//Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal SfSlider - Dart\nDESCRIPTION: This code snippet demonstrates how to configure a horizontal SfSlider with various properties. It includes settings for minimum and maximum values, current value, interval, ticks, labels, tooltips, and the onChanged callback function to update the value when the slider is moved. The `setState` method is used to trigger a UI update when the slider's value changes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ndouble _value = 40.0;\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n     appBar: AppBar(\n       title: const Text('Syncfusion Flutter Slider'),\n     ),\n     body: SfSlider(\n       min: 0.0,\n       max: 100.0,\n       value: _value,\n       interval: 20,\n       showTicks: true,\n       showLabels: true,\n       enableTooltip: true,\n       minorTicksPerInterval: 1,\n       onChanged: (dynamic value){\n         setState(() {\n           _value = value;\n         });\n       },\n     ),\n   );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings and Compilation Definitions in CMake\nDESCRIPTION: This CMake snippet applies standard project settings, defines compilation definitions (specifically disabling NOMINMAX), links necessary libraries (flutter and flutter_wrapper_app), and sets the include directories to the source directory.  It ensures the executable can find Flutter-related headers and libraries during compilation and linking.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Range Slider with Elements - Flutter\nDESCRIPTION: This code snippet demonstrates how to create a horizontal Syncfusion Flutter Range Slider with ticks, labels, and tooltips. It sets the minimum and maximum values, interval, and enables tooltips to show the current position of the range slider thumb. The `onChanged` callback updates the `_values` state, reflecting the new thumb positions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/README.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSfRangeValues _values = SfRangeValues(40.0, 80.0);\n\n@override\nWidget build(BuildContext context) {\n   return Scaffold(\n     appBar: AppBar(\n       title: const Text('Syncfusion Flutter Range Slider'),\n     ),\n     body: SfRangeSlider(\n        min: 0.0,\n        max: 100.0,\n        values: _values,\n        interval: 20,\n        showTicks: true,\n        showLabels: true,\n        enableTooltip: true,\n        minorTicksPerInterval: 1,\n        onChanged: (SfRangeValues values){\n          setState(() {\n            _values = values;\n          });\n        },\n      ),\n   );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: This snippet configures build options based on whether the generator is multi-config or single-config (like Makefile). For multi-config generators (Visual Studio), it sets the configuration types (Debug, Profile, Release). For single-config generators, it sets the `CMAKE_BUILD_TYPE` if not already set, with allowed values being Debug, Profile, and Release.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Loading PDF from File - Dart\nDESCRIPTION: Illustrates how to load a PDF document from a local file using `SfPdfViewer.file`.  Requires the `dart:io` package to access the file system. Ensure necessary permissions are granted to access the file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/README.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: SfPdfViewer.file(\n              File('storage/emulated/0/Download/flutter-succinctly.pdf')));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library to the data directory within the installation prefix. It only happens for Profile and Release configurations. The component is Runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Add Barcode Generator - Dart\nDESCRIPTION: This snippet demonstrates how to add the SfBarcodeGenerator widget to your Flutter widget tree within a Container and Scaffold. The height of the container is set to 200 to constrain the size of the Barcode.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n @override\n    Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n          body: Center(\n              child: Container(\n        height: 200,\n        child: SfBarcodeGenerator(value: 'www.syncfusion.com'),\n      ))),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Saving Signature as Image (Web) - Dart\nDESCRIPTION: This code demonstrates saving the signature drawn in the `SfSignaturePad` as an image on the web platform (desktop browser). It utilizes a `GlobalKey` to access the `SfSignaturePadState` and calls the `toImage()` method. A `RaisedButton` initiates the image saving process.  The structure is very similar to the mobile/desktop implementation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  GlobalKey<SfSignaturePadState> _signaturePadKey = GlobalKey();\n  return Scaffold(\n    body: Column(\n      children: [\n        Container(\n          child: SfSignaturePad(\n            key: _signaturePadKey,\n            backgroundColor: Colors.grey[200],\n          ),\n          height: 200,\n          width: 300,\n        ),\n        RaisedButton(\n            child: Text(\"Save As Image\"),\n            onPressed: () async {\n              ui.Image image =\n                 await _signaturePadKey.currentState!.toImage();\n            }),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AI AssistView Widget - Flutter\nDESCRIPTION: This code snippet shows how to add the `SfAIAssistView` widget to a Flutter application within a `Scaffold` widget. The `SfAIAssistView` widget is initialized as the body of the `Scaffold`. This setup provides a basic structure for the AI AssistView user interface.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: SfAIAssistView(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake to be used for the project. Ensures compatibility with specific CMake features and syntax.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Create Pie Chart - Dart\nDESCRIPTION: This code snippet demonstrates how to create a pie chart in an Excel document using the Syncfusion Flutter OfficeChart library. It sets up a new Excel workbook, inserts data representing venue costs, creates a pie chart based on the specified data range, and saves the Excel file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a new Excel document.\nfinal Workbook workbook = Workbook();\n// Accessing worksheet via index.\nfinal Worksheet sheet = workbook.worksheets[0];\n// Setting value in the cell.\nsheet.getRangeByName('A11').setText('Venue');\nsheet.getRangeByName('A12').setText('Seating & Decor');\nsheet.getRangeByName('A13').setText('Technical Team');\nsheet.getRangeByName('A14').setText('performers');\nsheet.getRangeByName('A15').setText('performer\\'s Transport');\nsheet.getRangeByName('B11:B15').numberFormat = '\\$#,##0_)';\nsheet.getRangeByName('B11').setNumber(17500);\nsheet.getRangeByName('B12').setNumber(1828);\nsheet.getRangeByName('B13').setNumber(800);\nsheet.getRangeByName('B14').setNumber(14000);\nsheet.getRangeByName('B15').setNumber(2600);\n// Create an instances of chart collection.\nfinal ChartCollection charts = ChartCollection(sheet);\n// Add the chart.\nfinal Chart chart1 = charts.add();\n// Set Chart Type.\nchart1.chartType = ExcelChartType.pie;\n// Set data range in the worksheet.\nchart1.dataRange = sheet.getRangeByName('A11:B15');\nchart1.isSeriesInRows = false;\n// set charts to worksheet.\nsheet.charts = charts;\n// save and dispose the workbook.\nList<int> bytes = workbook.saveAsStream();\nFile('PieChart.xlsx').writeAsBytes(bytes);\nworkbook.dispose();\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This function applies a standard set of compilation settings to a target. This includes enabling C++14, adding warning flags, and setting optimization levels based on the build type. It is used to ensure consistency across targets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initialize Treemap Widget - Dart\nDESCRIPTION: This code snippet shows how to initialize the SfTreemap widget as a child of another widget within the build method of a Flutter widget. It creates a basic Scaffold with a Center widget containing the SfTreemap, providing a minimal Treemap display.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n      child: SfTreemap(),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PDF Bookmarks - Flutter\nDESCRIPTION: This snippet illustrates how to create bookmarks in a PDF document using the Syncfusion Flutter PDF library.  It loads an existing PDF document, creates a bookmark, sets the bookmark's destination page and location, sets the color of the bookmark, saves the document, and disposes of the document.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n//Load the existing PDF document.\nfinal PdfDocument document =\n    PdfDocument(inputBytes: File('input.pdf').readAsBytesSync());\n//Create a document bookmark.\nfinal PdfBookmark bookmark = document.bookmarks.add('Page 1');\n//Set the destination page and location.\nbookmark.destination = PdfDestination(document.pages[1], Offset(20, 20));\n//Set the bookmark color.\nbookmark.color = PdfColor(255, 0, 0);\n//Save the document.\nFile('bookmark.pdf').writeAsBytes(await document.save());\n//Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: This snippet sets the CMAKE_INSTALL_PREFIX to the build bundle directory. This ensures files are installed next to the executable. It overrides the default prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Show Barcode Value - Dart\nDESCRIPTION: This code demonstrates how to display the barcode's value below the barcode by setting the `showValue` property to `true`.  It utilizes the `QRCode` symbology and the input value 'www.syncfusion.com'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n  @override\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n          body: Center(\n              child: Container(\n        height: 200,\n        child: SfBarcodeGenerator(\n          value: 'www.syncfusion.com',\n          symbology: QRCode(),\n          showValue: true,\n        ),\n      ))),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake File\nDESCRIPTION: This snippet includes the 'flutter/generated_plugins.cmake' file, which manages the build process for Flutter plugins and their integration into the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Binding Data to SfSparkLineChart - Flutter\nDESCRIPTION: This code snippet shows how to bind data to a `SfSparkLineChart`. The `data` property is assigned a list of double values that will be used to render the sparkline chart.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/README.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n        child: Container(\n          child: SfSparkLineChart(\n              data: <double>[\n                1, 5, -6, 0, 1, -2, 7, -7, -4, -10, 13, -6, 7, 5, 11, 5, 3\n              ],\n            )\n        )\n      )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PDF Annotations - Flutter\nDESCRIPTION: This snippet showcases how to create a new rectangle annotation and add it to a PDF page. It loads an existing PDF, creates a PdfRectangleAnnotation with specified bounds, text, and color, adds it to the first page's annotations, saves the document, and then disposes of it. Uses Syncfusion Flutter PDF library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n//Load the existing PDF document.\nfinal PdfDocument document =\n    PdfDocument(inputBytes: File('input.pdf').readAsBytesSync());\n//Create a new rectangle annotation and add to the PDF page.\ndocument.pages[0].annotations.add(PdfRectangleAnnotation(\n      Rect.fromLTWH(0, 0, 150, 100), 'Rectangle',\n      color: PdfColor(255, 0, 0), setAppearance: true));\n//Save the document.\nFile('annotations.pdf').writeAsBytes(await document.save());\n//Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Importing SignaturePad Package - Dart\nDESCRIPTION: This code snippet shows how to import the Syncfusion Flutter SignaturePad package into your Dart project. This import statement is necessary to use the SignaturePad widget and its associated functionalities.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:syncfusion_flutter_signaturepad/signaturepad.dart';\n```\n\n----------------------------------------\n\nTITLE: Building the Application Executable\nDESCRIPTION: This snippet adds an executable target for the application, specifying the source files to be compiled. It then applies the standard compilation settings, links against the Flutter engine and GTK, and adds a dependency on the Flutter assemble task.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Removing and Re-copying Assets Directory\nDESCRIPTION: This snippet removes the assets directory recursively before re-copying it. This prevents stale files from a previous install from persisting. An install CODE command is used to run a file operation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Bundling PDFium Libraries with the Plugin - CMake\nDESCRIPTION: This snippet creates a variable `syncfusion_pdfviewer_windows_bundled_libraries` which is a list of absolute paths to the libraries that should be bundled with the plugin. It specifically adds the path to the PDFium library (`PDFium_LIBRARY`) to this list. The `PARENT_SCOPE` option makes this variable available in the parent scope, likely for use in packaging or deployment.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# List of absolute paths to libraries that should be bundled with the plugin\nset(syncfusion_pdfviewer_windows_bundled_libraries\n  \"${PDFium_LIBRARY}\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Installing runtime targets and files\nDESCRIPTION: This section installs the main executable, ICU data file, Flutter library, plugin bundled libraries, and native assets to the appropriate destination directories. This ensures that all required files are present next to the executable at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Import AI AssistView - Flutter\nDESCRIPTION: This code snippet demonstrates how to import the `syncfusion_flutter_chat/assist_view.dart` library, which is required to use the AI AssistView widget in a Flutter application. This import statement makes the `SfAIAssistView` class available for use in your code. No dependencies other than the Syncfusion Flutter Chat package are needed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:syncfusion_flutter_chat/assist_view.dart';\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target and Linking Libraries\nDESCRIPTION: This snippet adds the executable target with specified source files. It applies standard compilation settings, links against the Flutter library and GTK, and adds a dependency on the flutter_assemble target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Range Selector Widget - Flutter\nDESCRIPTION: This snippet adds a basic `SfRangeSelector` widget to the widget tree. The `SfRangeSelector` is placed within a `Center` widget, which is inside the `Scaffold`'s `body`. This demonstrates the fundamental integration of the range selector into a Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/README.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n    return MaterialApp(\n        home: Scaffold(\n            body: Center(\n                child: SfRangeSelector(),\n            ),\n        ),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to invoke the Flutter tool backend script. This script assembles the Flutter library. The command runs every time because it depends on a non-existent file (`_phony_`). It uses the `FLUTTER_TOOL_ENVIRONMENT` and passes arguments such as the target platform and build type to the script.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Syncfusion Flutter PDF - Dart\nDESCRIPTION: Imports the syncfusion_flutter_pdf package into your Dart project. This import is necessary to use the PDF functionalities provided by the Syncfusion library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:syncfusion_flutter_pdf/pdf.dart';\n```\n\n----------------------------------------\n\nTITLE: Referencing Flutter Charts Package in pubspec.yaml\nDESCRIPTION: This code snippet demonstrates how to reference the syncfusion_flutter_charts package in your application's pubspec.yaml file by specifying its local path. This allows you to use the local version of the package instead of fetching it from pub.dev. Replace 'D:/flutter-widgets/packages/syncfusion_flutter_charts' with the actual path to the package on your machine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nsyncfusion_flutter_charts:\n    path: D:/flutter-widgets/packages/syncfusion_flutter_charts\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flutter Map Widget\nDESCRIPTION: This code demonstrates how to initialize a basic SfMaps widget within a Flutter application. It creates a Scaffold with a Center widget containing the SfMaps widget. This provides a simple starting point for displaying a map, which can then be customized with layers, markers, and other features.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n      child: SfMaps(),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: Configures build options based on whether the generator is multi-config (e.g., Visual Studio). If it is, it sets the configuration types to Debug, Profile, and Release. Otherwise, it sets the build type to Debug if not already set and allows the user to choose between Debug, Profile, and Release.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library to the installation directory, but only for non-Debug builds. This ensures that the AOT library is only included in release builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Treemap with Tooltip, Labels, and Legend - Flutter\nDESCRIPTION: This snippet demonstrates how to create a Flutter Treemap using the Syncfusion SfTreemap widget. It includes the implementation of tooltips using `tooltipBuilder`, custom labels with `labelBuilder`, and a legend (though not explicitly shown in this reduced snippet, the context suggests its use). The `SocialMediaUsers` class defines the data structure for the treemap.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nlate List<SocialMediaUsers> _source;\n\n@override\nvoid initState() {\n  _source = <SocialMediaUsers>[\n    SocialMediaUsers('India', 'Facebook', 25.4),\n    SocialMediaUsers('USA', 'Instagram', 19.11),\n    SocialMediaUsers('Japan', 'Facebook', 13.3),\n    SocialMediaUsers('Germany', 'Instagram', 10.65),\n    SocialMediaUsers('France', 'Twitter', 7.54),\n    SocialMediaUsers('UK', 'Instagram', 4.93),\n  ];\n  super.initState();\n}\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: SfTreemap(\n      dataCount: _source.length,\n      weightValueMapper: (int index) {\n        return _source[index].usersInMillions;\n      },\n      levels: [\n        TreemapLevel(\n          groupMapper: (int index) {\n            return _source[index].country;\n          },\n          labelBuilder: (BuildContext context, TreemapTile tile) {\n            return Padding(\n              padding: const EdgeInsets.all(2.5),\n              child: Text(\n                '${tile.group}',\n                style: TextStyle(color: Colors.black),\n              ),\n            );\n          },\n          tooltipBuilder: (BuildContext context, TreemapTile tile) {\n            return Padding(\n              padding: const EdgeInsets.all(10),\n              child: Text(\n                  'Country          : ${tile.group}\\nSocial media : ${tile.weight}M',\n                  style: TextStyle(color: Colors.black)),\n            );\n          },\n        ),\n      ],\n    ),\n  );\n}\n\nclass SocialMediaUsers {\n  const SocialMediaUsers(this.country, this.socialMedia, this.usersInMillions);\n\n  final String country;\n  final String socialMedia;\n  final double usersInMillions;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Date Range Picker Views - Flutter\nDESCRIPTION: This code snippet shows how to change the view of the SfDateRangePicker widget.  The `view` property is set to `DateRangePickerView.year`, which will display the year view. This allows users to navigate through years instead of months.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n      body: SfDateRangePicker(\n    view: DateRangePickerView.year,\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining standard compilation settings\nDESCRIPTION: This function sets standard compilation features, options, and definitions for a specified target, enabling C++17 and setting warning levels. It disables exceptions and defines _DEBUG for Debug configurations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Setting Dependencies\nDESCRIPTION: Applies standard compilation settings to the executable target, links the target against the Flutter library and GTK, and adds a dependency on the `flutter_assemble` target, which is responsible for assembling Flutter assets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Creates a custom command to invoke the Flutter tool backend to assemble the Flutter engine and generate necessary files.  A phony output file is used to ensure the command runs every time.  The command uses the flutter tool's `tool_backend.bat` script. It defines the output files, environment variables, and the command to execute.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the Flutter application is assembled before other targets that depend on it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy and RPATH\nDESCRIPTION: This snippet sets a CMake policy (CMP0063) and configures the RPATH for the application. The RPATH ensures that the application can find its shared libraries at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding SfRangeSlider to Widget Tree - Dart\nDESCRIPTION: This code snippet demonstrates how to add the SfRangeSlider widget to the Flutter widget tree. It creates a basic app structure with SfRangeSlider nested inside MaterialApp, Scaffold, and Center widgets. This provides the foundation for implementing a range slider in a Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n    return MaterialApp(\n        home: Scaffold(\n            body: Center(\n                child: SfRangeSlider(),\n              ),\n          ),\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Assembly\nDESCRIPTION: This snippet defines a custom command to run the Flutter tool backend for Windows to assemble the Flutter application. It depends on the Flutter library, header files, and C++ wrapper sources.  It uses a phony output file to ensure the command runs every time. The command executes a batch script `tool_backend.bat` with specific arguments to build the Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the designated data directory.  The ICU data file is required for internationalization support. The component is set to 'Runtime'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: PDF Document with Flow Layout - Dart\nDESCRIPTION: Creates a PDF document and adds a paragraph with flow layout. It creates a PdfTextElement with specified text and font, then draws the text on a page with pagination. It also draws a line below the text. The document is saved as \"TextFlow.pdf\" and disposed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nconst String paragraphText =\n    'Adobe Systems Incorporated\\'s Portable Document Format (PDF) is the de facto'\n    'standard for the accurate, reliable, and platform-independent representation of a paged'\n    'document. It\\'s the only universally accepted file format that allows pixel-perfect layouts.'\n    'In addition, PDF supports user interaction and collaborative workflows that are not'\n    'possible with printed documents.';\n\n// Create a new PDF document.\nfinal PdfDocument document = PdfDocument();\n// Add a new page to the document.\nfinal PdfPage page = document.pages.add();\n// Create a new PDF text element class and draw the flow layout text.\nfinal PdfLayoutResult layoutResult = PdfTextElement(\n        text: paragraphText,\n        font: PdfStandardFont(PdfFontFamily.helvetica, 12),\n        brush: PdfSolidBrush(PdfColor(0, 0, 0)))\n    .draw(\n        page: page,\n        bounds: Rect.fromLTWH(\n            0, 0, page.getClientSize().width, page.getClientSize().height),\n        format: PdfLayoutFormat(layoutType: PdfLayoutType.paginate))!;\n// Draw the next paragraph/content.\npage.graphics.drawLine(\n    PdfPen(PdfColor(255, 0, 0)),\n    Offset(0, layoutResult.bounds.bottom + 10),\n    Offset(page.getClientSize().width, layoutResult.bounds.bottom + 10));\n// Save the document.\nFile('TextFlow.pdf').writeAsBytes(await document.save());\n// Dispose the document.\ndocument.dispose();\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links necessary libraries to the executable target, including the Flutter engine, the Flutter wrapper app, and dwmapi.lib for Desktop Window Manager API functions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-Of-Time) compiled library on Profile and Release builds. The AOT_LIBRARY variable points to the compiled AOT snapshot, and the install command copies it to the data directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name and Application ID\nDESCRIPTION: Sets the binary name and application ID for the project.  BINARY_NAME defines the name of the executable, and APPLICATION_ID is a unique identifier for the application, often used for packaging and distribution.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Executable\nDESCRIPTION: This snippet sets the RPATH (Run-Time Search Path) for the executable.  Setting it to `$ORIGIN/lib` tells the dynamic linker to look for shared libraries in the `lib` subdirectory relative to the executable's location.  This is important for finding Flutter's and plugin's libraries at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a preprocessor definition for the application ID. This allows the application code to access the application ID at compile time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Range Selector with Chart and Date Intervals - Flutter\nDESCRIPTION: This code snippet demonstrates how to add a child (in this case, an `SfCartesianChart`) inside the `SfRangeSelector`. It configures date intervals, labels, and ticks for date selection. The chart's x-axis is a `DateTimeAxis` that is linked to the range selector. Date formatting is also specified using `DateFormat.y()`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/README.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal DateTime dateMin = DateTime(2003, 01, 01);\nfinal DateTime dateMax = DateTime(2010, 01, 01);\nfinal SfRangeValues dateValues = \n            SfRangeValues(DateTime(2005, 01, 01), DateTime(2008, 01, 01));\n\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Syncfusion Flutter Range Selector'),\n      ),\n      body: Container(\n          margin: const EdgeInsets.all(0),\n          padding: const EdgeInsets.all(0),\n          child: Stack(\n            children: <Widget>[\n              Padding(\n                padding: const EdgeInsets.only(top: 10),\n                child: Center(\n                  child: SfRangeSelector(\n                    min: dateMin,\n                    max: dateMax,\n                    initialValues: dateValues,\n                    labelPlacement: LabelPlacement.betweenTicks,\n                    interval: 1,\n                    dateIntervalType: DateIntervalType.years,\n                    dateFormat: DateFormat.y(),\n                    showTicks: true,\n                    showLabels: true,\n                    child: Container(\n                      child: SfCartesianChart(\n                        margin: const EdgeInsets.all(0),\n                        primaryXAxis: DateTimeAxis(\n                          minimum: dateMin,\n                          maximum: dateMax,\n                          isVisible: false,\n                        ),\n                        primaryYAxis: NumericAxis(isVisible: false, maximum: 4),\n                        series: <SplineAreaSeries<Data, DateTime>>[\n                          SplineAreaSeries<Data, DateTime>(\n                              dataSource: chartData,\n                              xValueMapper: (Data sales, int index) => sales.x,\n                              yValueMapper: (Data sales, int index) => sales.y)\n                        ],\n                      ),\n                      height: 200,\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          )),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter App Wrapper Library\nDESCRIPTION: Defines a static library `flutter_wrapper_app` that wraps the Flutter engine for use in the application runner. It includes core implementation files, application wrapper files, sets standard build settings, and links against the `flutter` interface library. It also defines include directories and adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Configuration\nDESCRIPTION: This CMake snippet configures the project settings including the minimum required CMake version, project name, and executable target. It also adds dependencies and links libraries necessary for the Flutter application to build and run correctly on Windows.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the Flutter library and headers are built before any target that depends on `flutter_assemble`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Date Selection Change in Flutter DateRangePicker\nDESCRIPTION: This code snippet demonstrates how to use the `onSelectionChanged` callback to capture selected dates or range details when using the Syncfusion Flutter DateRangePicker. It includes a placeholder `_onSelectionChanged` function and a `build` method that constructs the `SfDateRangePicker` widget with range selection mode enabled and the callback assigned. The selection details are returned in the `DateRangePickerSelectionChangedArgs` object.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid _onSelectionChanged(DateRangePickerSelectionChangedArgs args) {\n  // TODO: implement your code here\n}\n\n@override\nWidget build(BuildContext context) {\n  return MaterialApp(\n    home: Scaffold(\n      body: Container(\n        child: SfDateRangePicker(\n          onSelectionChanged: _onSelectionChanged,\n          selectionMode: DateRangePickerSelectionMode.range,\n        ),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to invoke the Flutter tool backend for assembling the Flutter application. This command uses the Flutter tool to generate the Flutter library and other necessary files. It depends on the Flutter root, tool environment, and target configuration.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Building Executable\nDESCRIPTION: Adds the executable target, specifying source files and linking to Flutter and GTK libraries.  It also configures build settings using apply_standard_settings and manages dependencies on flutter_assemble.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies (GTK)\nDESCRIPTION: This section uses `pkg-config` to find the GTK library. It requires GTK version 3.0 or higher. The `IMPORTED_TARGET` option imports GTK as a CMake target which can be linked against.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Flags for Profile Build Type\nDESCRIPTION: These snippets set the linker and compiler flags specifically for the Profile build type, using the values defined for the Release build type. This helps in achieving performance characteristics similar to Release builds while still allowing for some profiling capabilities.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Runner\nDESCRIPTION: This CMake configuration file defines the build process for a Flutter runner application. It sets the minimum required CMake version, defines the project with C++ support, and adds an executable target with the specified source files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: These snippets define the installation directories for data and library files. INSTALL_BUNDLE_DATA_DIR specifies where to install data files, while INSTALL_BUNDLE_LIB_DIR specifies where to install library files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet removes any existing assets and then installs the Flutter assets directory to the installation directory. This ensures that the application has the correct assets at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Building the Application Executable\nDESCRIPTION: This block adds the executable target with source files, applies standard settings, links libraries (flutter and GTK), adds dependencies, and sets the runtime output directory to an intermediate location to prevent accidental execution of the unbundled binary.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to run the Flutter tool backend script. This script is responsible for assembling the Flutter library and headers. The command runs every time because the _phony_ file doesn't exist. Dependencies: Flutter tool, Flutter root, CMake command.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMAKE_INSTALL_PREFIX\nDESCRIPTION: Sets the installation prefix if it is initialized to the default. Defines the base directory for installation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the installation library directory, under the Runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the Ahead-Of-Time (AOT) compiled library to the data directory for Profile and Release builds only.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: Configures the build options based on whether the generator is multi-config or single-config. If multi-config, sets the configuration types to Debug, Profile, and Release. If single-config, sets the build type to Debug and allows selecting Debug, Profile, or Release.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory\nDESCRIPTION: This snippet removes the existing flutter_assets directory and then installs the flutter_assets directory to the data directory within the installation bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Subdirectory Variables\nDESCRIPTION: This snippet defines the subdirectories for data and library files within the installation bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Managed Directory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory, enabling the build system to handle Flutter-related build tasks.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the target executable to the installation prefix. This copies the executable into the installation directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This line adds the Flutter managed directory as a subdirectory to the build, enabling Flutter's build system to be integrated into the overall project build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the Ahead-Of-Time (AOT) compiled library to the data directory within the installation prefix. The AOT library is only installed for Profile and Release builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding SignaturePad to Widget Tree - Dart\nDESCRIPTION: This code snippet demonstrates how to add the `SfSignaturePad` widget to the Flutter widget tree. It is added as a child of a `Container` within a `Scaffold`'s `body`. The `SignaturePad` widget will render the signature capture area.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n@override\n\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        child: SfSignaturePad(),\n      ),\n    );\n  }\n  \n```\n\n----------------------------------------\n\nTITLE: Configuring Build Type\nDESCRIPTION: This snippet configures the build type if it's not already set. It defaults to 'Debug' and provides options for 'Debug', 'Profile', and 'Release' build modes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking libraries and including directories\nDESCRIPTION: Links the application target with necessary libraries, including Flutter's libraries and Windows-specific libraries (dwmapi.lib). It also includes the project's source directory.  This step ensures that the application can access external functionality.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the install bundle library directory under the Runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter as a Subdirectory\nDESCRIPTION: This code adds the Flutter directory (containing Flutter's CMake scripts) as a subdirectory to the current CMake project.  This makes Flutter's build rules available for the main project, allowing Flutter code to be compiled and linked.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This code adds an executable target named `${BINARY_NAME}` (example) using the specified source files. It then applies standard settings, links against the flutter library and GTK, and adds a dependency on the flutter_assemble target to ensure the Flutter code is built before the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend function\nDESCRIPTION: Defines a custom CMake function `list_prepend` that prepends a given prefix to each element in a list. This function is necessary because the `list(TRANSFORM ... PREPEND ...)` command is not available in CMake versions prior to 3.12.  It takes the list name and the prefix as input, and modifies the list in the parent scope.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes a CMake file for managing generated plugins. This file likely contains build rules for the plugins and adds them to the application's build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet defines the installation directories for data (assets, ICU data) and libraries, preparing for the installation process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Importing Gauge Package - Dart\nDESCRIPTION: This code snippet shows how to import the Syncfusion Flutter Gauges package into your Dart file. This import statement provides access to the SfLinearGauge and SfRadialGauge widgets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:syncfusion_flutter_gauges/gauges.dart';\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the project. This includes the Flutter engine and related build files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Add Executable Target\nDESCRIPTION: Adds the executable target with specified source files. The files include main.cc, my_application.cc and generated_plugin_registrant.cc.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter` and sets its include directories and link libraries. This library is used to link against the Flutter library and its dependencies. Dependencies include GTK, GLIB, GIO, BLKID, and LZMA.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Finding GTK Package\nDESCRIPTION: Uses `pkg-config` to find the GTK (Gimp Toolkit) library.  It's a system-level dependency for the application.  `REQUIRED` specifies that the build should fail if GTK is not found. `IMPORTED_TARGET` creates a CMake target named `PkgConfig::GTK` that can be linked against.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Configuration Build Options\nDESCRIPTION: Configures build options based on whether the generator is multi-configuration (e.g., Visual Studio) or single-configuration (e.g., Make). It sets the CMAKE_BUILD_TYPE to Debug if it's not already set and provides options for Debug, Profile, and Release build types.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding GTK Package\nDESCRIPTION: This uses `find_package` and `pkg_check_modules` to locate the GTK library using PkgConfig.  It requires GTK version 3.0 or higher and imports a target named `PkgConfig::GTK` which represents the GTK library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: Adds an executable target to the build. This defines how the main application executable is built, including the source files to compile and the libraries to link against.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions\nDESCRIPTION: Adds a preprocessor definition for the application ID.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: These snippets define the installation directories for data (assets) and libraries, relative to the install prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This code installs the Flutter library to the lib directory within the bundle. This library contains the core Flutter runtime code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Re-Copy Assets Directory\nDESCRIPTION: Removes and re-copies the assets directory to ensure no stale files from a previous install.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: LinearMarkerPointer Drag Behavior - Flutter\nDESCRIPTION: Added pointer drag behavior options (free and constraint) to the `LinearMarkerPointer`. Also, `onChangeStart` and `onChangeEnd` callbacks were added to the `LinearMarkerPointer` to notify the user about the marker pointer start and end actions. The `onValueChanged` callback has been renamed to `onChanged`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nLinearMarkerPointer\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes a CMake file that handles building Flutter plugins and adding them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` and sets its source files, properties, include directories, and link libraries. It depends on the `flutter_assemble` target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set RPATH for Executable\nDESCRIPTION: Sets the RPATH (run-time search path) for the executable.  This allows the application to locate shared libraries at runtime, relative to its location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the ephemeral directory path to each header file. These headers are necessary for compiling Flutter plugins and applications.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Finding System-Level Dependencies (GTK)\nDESCRIPTION: This snippet uses `find_package` and `pkg_check_modules` to find and import the GTK library. This ensures that the application can link against GTK if it's used.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Adding runner subdirectory\nDESCRIPTION: This snippet adds the runner directory as a subdirectory, which contains the application build files (runner/CMakeLists.txt).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Finding System-Level Dependencies\nDESCRIPTION: Uses `pkg_check_modules` to find system-level dependencies like GTK, GLib, Gio, Blkid and LZMA using pkg-config. These are essential for the Flutter application to interact with the underlying operating system. Dependencies: pkg-config, GTK, GLib, Gio, Blkid, LZMA.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains settings specific to the current Flutter project, such as build flags and paths.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Runner Executable with CMake\nDESCRIPTION: This CMake script defines the executable, specifies source files for compilation, sets compiler definitions, links required libraries, and declares dependencies. It configures the build process for creating a Flutter runner executable on Windows.  Key aspects include specifying source files, linking Flutter libraries, and setting necessary compiler definitions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: This snippet sets the variable FLUTTER_MANAGED_DIR to the directory containing the Flutter engine. This variable is used to include the Flutter engine build rules.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Runner Executable with CMake\nDESCRIPTION: This CMake code defines the executable for a Flutter runner application. It specifies the minimum CMake version, adds the executable with source files, applies standard settings, sets compile definitions to avoid conflicts with the Windows API, links the necessary Flutter libraries, includes the project source directory, and adds a dependency on the Flutter assembly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable binary to the installation prefix. The component is set to 'Runtime'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the `generated_config.cmake` file from the ephemeral directory. This file is expected to contain configurations provided by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining a Function to Apply Standard Settings\nDESCRIPTION: This function, APPLY_STANDARD_SETTINGS, applies common compilation settings to a specified target. This includes setting the C++ standard to C++17, enabling compiler warnings, treating warnings as errors, disabling specific warnings, enabling exception handling, and defining preprocessor macros based on the configuration type (Debug or Release).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Importing DatePicker Package - Flutter\nDESCRIPTION: This code snippet demonstrates how to import the necessary package for using the Syncfusion Flutter DatePicker widget. This import statement allows you to use the SfDateRangePicker widget and its associated classes in your Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/README.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:syncfusion_flutter_datepicker/datepicker.dart';\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-of-Time) compiled library to the library subdirectory of the installation bundle for non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: This snippet conditionally installs plugin-bundled libraries to the library directory within the install prefix. The component is set to \"Runtime\".\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Uses `pkg-config` to find system-level dependencies such as GTK, GLIB, and GIO. These libraries are required for the Flutter engine to run on Linux.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and header files. This target ensures that the Flutter tool backend script is executed before any target that depends on the Flutter library or headers. This target essentially groups the generated files and ensures they are built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Library and Linking Dependencies - CMake\nDESCRIPTION: This snippet defines the Flutter plugin library (`syncfusion_pdfviewer_windows_plugin`) as a SHARED library. It includes the source files, applies standard settings (presumably using a custom function), sets C++ visibility to hidden, defines a compile definition (`FLUTTER_PLUGIN_IMPL`), sets include directories, and links the library against `pdfium`, `flutter`, and `flutter_wrapper_plugin`.  The `apply_standard_settings` function is not defined but is assumed to configure common build settings.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(PLUGIN_NAME \"syncfusion_pdfviewer_windows_plugin\")\n\nadd_library(${PLUGIN_NAME} SHARED\n\"pdfviewer.cpp\"\n\"pdfviewer.h\"\n\"syncfusion_pdfviewer_windows_plugin.cpp\"\n)\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE pdfium flutter flutter_wrapper_plugin)\n```\n\n----------------------------------------\n\nTITLE: Radial Gauge Pointer Drag Enhancement - Flutter\nDESCRIPTION: The radial gauge now allows pointers to be dragged beyond the end-angle for circular gauges. For non-circular gauges, pointers can only be dragged between the start and end angles. The `GaugeRange` will always apply in a clockwise direction, even if `startValue` is greater than `endValue`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nGaugeRange\n```\n\nLANGUAGE: Dart\nCODE:\n```\nstartValue\n```\n\nLANGUAGE: Dart\nCODE:\n```\nendValue\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Type\nDESCRIPTION: Configures the build type (Debug, Profile, Release) if it's not already set.  Defaults to Debug mode. This impacts compilation flags and optimization levels.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: Sets the name of the output binary for the project. This is used later when creating the executable target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flags for Profile Build Type\nDESCRIPTION: Sets the linker and compiler flags for the 'Profile' build type. It copies the flags from the 'Release' build type. Optimizes the application for profiling.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install Step as Default in Visual Studio\nDESCRIPTION: This snippet sets the install step as the default build step in Visual Studio. This is done because the install step is required to run the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name and specifies that CXX (C++) language support is required. This command is essential for initializing the CMake project and enabling C++ compilation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` from the core and plugin wrapper sources. It applies standard settings, sets properties for position-independent code and hidden C++ visibility, links it to the Flutter library, includes the wrapper's include directory, and adds a dependency on `flutter_assemble`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT (Ahead-Of-Time) library to the data directory within the installation prefix, but only in Profile and Release configurations. This library contains pre-compiled code for improved performance.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Building a Flutter WIN32 Executable using CMake\nDESCRIPTION: This CMake code defines the build process for a Flutter runner executable on WIN32. It specifies the source files, dependencies, and compiler settings required to build the application. The code includes adding resource files and setting compiler definitions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which handles building and adding plugins to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages the building and linking of Flutter plugins into the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Set Ephemeral Directory Variable\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable to point to the 'ephemeral' directory within the current source directory. This directory typically contains generated configuration files and pre-built artifacts from the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Defining APPLY_STANDARD_SETTINGS Function\nDESCRIPTION: Defines a function `APPLY_STANDARD_SETTINGS` that applies standard compilation settings to a given target. This includes setting C++ standard to 17, adding compiler options for warnings and exception handling, and defining conditional debug definitions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring for Cross-Building\nDESCRIPTION: This snippet configures the build environment for cross-building. If `FLUTTER_TARGET_PLATFORM_SYSROOT` is defined, it sets the `CMAKE_SYSROOT` and related paths to use the cross-compilation toolchain and sysroot.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: This snippet sets the FLUTTER_MANAGED_DIR variable to point to the 'flutter' subdirectory within the current source directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Set Ephemeral Directory\nDESCRIPTION: Defines the ephemeral directory where generated configuration files and libraries are located. This helps in organizing build artifacts and dependencies.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version, project name, and supported languages (CXX). It also sets the binary name and application ID.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"pdf_example\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.pdf_example\")\n```\n\n----------------------------------------\n\nTITLE: Set Binary Name\nDESCRIPTION: Sets the name of the output binary. This allows for easy reference to the built executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Libraries\nDESCRIPTION: Installs bundled plugin libraries to the lib directory within the installation prefix. This ensures that plugins are included with the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: Adds a preprocessor definition for the application ID. This allows the application to access its application ID at compile time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMAKE_BUILD_TYPE\nDESCRIPTION: Configures the build type if not already set. Defaults to Debug, and allows users to select Debug, Profile, or Release. This determines compiler optimizations and debugging information.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project is compatible with the features used in the CMakeLists.txt file. It's essential to specify a version that supports the commands and features used throughout the build configuration.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Setting Sysroot for Cross-Building\nDESCRIPTION: Configures the sysroot for cross-compilation. This is used when building for a different architecture or operating system than the host system. The CMAKE_SYSROOT variable specifies the root directory of the target system's file system.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Defines a function `APPLY_STANDARD_SETTINGS` that applies standard compilation features and options to a target. This includes setting the C++ standard to 17, enabling specific warnings, and disabling exceptions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources. This ensures that the Flutter engine and its dependencies are built before other targets that depend on `flutter_assemble` are built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This snippet sets the `FLUTTER_LIBRARY` variable to the path of the Flutter library (`libflutter_linux_gtk.so`). This path is defined relative to the `EPHEMERAL_DIR`.  The variable is then published to the parent scope for use in subsequent build steps, as are other key paths.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a CMake configuration file generated by the Flutter tool. This file likely contains project-specific settings and dependencies needed for the build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project is at least 3.10.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Interface Library\nDESCRIPTION: Adds an interface library named `flutter`.  This library encapsulates the necessary include directories and link libraries for using Flutter in the project. Dependencies like GTK, GLIB, GIO, BLKID, and LZMA are linked.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Settings\nDESCRIPTION: Configures CMake for cross-building by setting the system root and find paths. This section is executed only if `FLUTTER_TARGET_PLATFORM_SYSROOT` is defined.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Tool Backend\nDESCRIPTION: Defines a custom command to invoke the Flutter tool backend for assembling the Flutter application. This command runs the `tool_backend.bat` script with specific arguments, including the target platform and build configuration. The command depends on the Flutter library, header files, and C++ wrapper sources. A custom target `flutter_assemble` is created to ensure that the Flutter tool is run during the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Paths\nDESCRIPTION: Sets the paths to the Flutter library (`libflutter_linux_gtk.so`), ICU data file (`icudtl.dat`), project build directory, and AOT library. These paths are published to the parent scope for use in subsequent build steps, particularly the installation process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Importing Flutter Maps Package\nDESCRIPTION: This code snippet shows how to import the Syncfusion Flutter Maps package into your Dart file. This import statement is essential for using any of the map-related widgets and functionalities provided by the package. It should be placed at the top of the Dart file where you intend to use the maps feature.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:syncfusion_flutter_maps/maps.dart';\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Creates an interface library named 'flutter'. This library represents the Flutter API and doesn't contain any code itself but provides include directories and link libraries for other targets to use.  It links to the actual Flutter library file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library represents the Flutter engine and is used to link against other libraries. It specifies the include directories and link libraries required to use the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to run the Flutter tool backend.  This command generates the Flutter library, header files, and C++ wrapper sources.  It uses a phony output file to ensure the command runs every time. It sets the `FLUTTER_TOOL_ENVIRONMENT` environment variables.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Install to Default Build\nDESCRIPTION: This snippet ensures the install step is included by default when building from Visual Studio. This ensures required files are put in place to allow running after building.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Properties\nDESCRIPTION: This CMake snippet configures the target properties for the Flutter application executable. It applies standard settings, defines a compiler definition to disable min/max macros, links Flutter libraries, includes source directories, and adds a dependency on the flutter_assemble target, which prebuilds the flutter code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name and specifies the languages used in the project. In this case, the project is named 'example' and uses CXX (C++) as the language.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries\nDESCRIPTION: This snippet adds the executable target with the specified source files and applies standard settings. It links the target to `flutter` and `PkgConfig::GTK` libraries, and adds a dependency on `flutter_assemble`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and header files. This ensures that the custom command to assemble the Flutter library is executed before any target that depends on `flutter_assemble`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysroot for Cross-Building\nDESCRIPTION: This snippet configures the sysroot for cross-building, setting the CMAKE_SYSROOT and CMAKE_FIND_ROOT_PATH variables based on the FLUTTER_TARGET_PLATFORM_SYSROOT environment variable. It also sets the search modes for finding programs, packages, libraries, and includes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the CMake project. This allows the CMake project to build the Flutter engine and related components.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: Installs Flutter assets by first removing the existing asset directory and then copying the new assets into the data directory. This ensures that the assets are up-to-date on each build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings and Linking Libraries\nDESCRIPTION: This CMake code applies standard settings to the binary, sets a compile definition to prevent min/max macro conflicts, links necessary Flutter libraries (flutter and flutter_wrapper_app), includes source directories, and adds a dependency on the flutter_assemble target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named `flutter_assemble`. This target depends on the Flutter library, header files, and C++ wrapper sources. When this target is built, the custom command to assemble the Flutter engine will be executed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings Function\nDESCRIPTION: This snippet defines a function `APPLY_STANDARD_SETTINGS` that applies common compilation settings to a given target. It sets the C++ standard to C++17, adds compiler options for warnings, and disables exceptions. It also adds a debug definition when building in Debug mode.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compiler Settings Function\nDESCRIPTION: This CMake function `APPLY_STANDARD_SETTINGS` applies common compilation flags to the specified target, including enabling C++14, setting warning levels, and enabling optimizations for non-Debug builds. The target is the executable being built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add Runner Subdirectory\nDESCRIPTION: Adds the runner directory as a subdirectory, responsible for building the application's runner component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Finding System Package Dependencies\nDESCRIPTION: This snippet uses `pkg-config` to find system-level dependencies, specifically GTK+ 3.0. It marks GTK as a required imported target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Settings Function\nDESCRIPTION: Defines a function APPLY_STANDARD_SETTINGS that applies standard compilation features, options, and definitions to a given target. This includes setting the C++ standard to 17, enabling warnings, disabling exceptions, and defining debug macros.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Tool Backend\nDESCRIPTION: Adds a custom command that executes the Flutter tool backend script to generate the Flutter library and headers. The command runs every time because the input is a non-existent file `_phony_`. The Flutter tool environment variables are passed to the script. The output includes the Flutter library and header files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Target Settings\nDESCRIPTION: This CMake function applies standard compilation settings to a specified target. It sets the C++ standard to 17, adds compile options for warnings and exception handling, and defines preprocessor macros. TARGET parameter specifies the target to which the setting are applied.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, defines the project name, and specifies that the project uses C++.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project\nDESCRIPTION: This snippet sets the minimum required CMake version and declares the project with CXX language support. It initializes the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Paths and Bundle Creation\nDESCRIPTION: This section configures the installation process.  It sets the installation prefix to a bundle directory, ensures a clean bundle directory on each install, and defines the installation directories for data and libraries. It then installs the executable, data files (ICU data), and library files into these directories.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the binary name to \"example\". This name will be used for the executable file produced by the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Assembly\nDESCRIPTION: Defines a custom command to assemble the Flutter engine. It uses a 'phony' output file to force the command to run every time. The command executes the 'tool_backend.bat' script with the specified environment variables, Flutter target platform, and configuration.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (App)\nDESCRIPTION: Defines the C++ wrapper source files for the main application. These sources implement the Flutter engine and view controller. The list is transformed to include the full path to each source file within the wrapper root directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: Installs bundled plugin libraries to the library directory, if they exist.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Target\nDESCRIPTION: Adds an executable target for the application. It links the executable with the Flutter library, GTK, and sets dependencies on the flutter_assemble target. Also sets the output directory for the executable to prevent accidental execution of unbundled version.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter App Wrapper Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` that includes the core and app wrapper sources. This library is linked with the Flutter engine and provides the necessary functionality for the Flutter application runner.  Standard settings are applied.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named `flutter_assemble` that depends on the Flutter library, header files, and C++ wrapper sources. This target ensures that these files are up-to-date before any other targets that depend on them are built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types\nDESCRIPTION: Configures build types (Debug, Profile, Release) based on whether the generator is multi-config. If multi-config is supported, it explicitly sets the configuration types. Otherwise, it sets the `CMAKE_BUILD_TYPE` if it isn't already set, providing options for Debug, Profile, and Release builds. It also defines the flags for profile builds to be the same as release builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: These snippets define variables for the data and library installation directories within the install prefix.  They are then used by the `install` commands.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This code installs the ICU (International Components for Unicode) data file to the data directory within the bundle. This file is required for proper internationalization support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Install RPATH\nDESCRIPTION: Sets the RPATH for the installed executable.  This allows the executable to find its shared libraries at runtime by specifying a relative path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-Of-Time) compiled library to the data directory but only during Profile and Release configurations.  It is not installed in Debug mode. Defines the COMPONENT as Runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: This function applies standard compilation settings to a given target, including setting the C++ standard to 14, adding compiler warnings and errors, and enabling optimizations for non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` from the core and app wrapper sources. It applies standard settings, links the Flutter interface library, includes the wrapper include directory, and adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Output Directory\nDESCRIPTION: Sets the runtime output directory for the executable. This places the executable in a subdirectory to prevent users from running the unbundled copy, ensuring they use the installed/bundled version which has the correct resource paths.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Target\nDESCRIPTION: Creates the executable target with the specified source files: main.cc, my_application.cc, and generated_plugin_registrant.cc. It applies the standard compilation settings, links the executable against the Flutter library and GTK, and adds a dependency on the flutter_assemble target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Install\nDESCRIPTION: Sets the RPATH (Run-Path) for the installed executable. This allows the executable to find its shared libraries at runtime. $ORIGIN refers to the directory where the executable is located.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows macros\nDESCRIPTION: Disables the NOMINMAX Windows macro to prevent conflicts with C++ standard library functions like min and max. This is a common practice to avoid naming collisions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy and Install RPATH\nDESCRIPTION: This snippet sets a CMake policy and the install RPATH. CMP0063 is set to NEW, which manages the scope of variables set by `file(GLOB...)`. The install RPATH is set to `$ORIGIN/lib` to allow the executable to find shared libraries at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named `flutter_assemble` that depends on the output files of the Flutter assembly command. This target is used to trigger the assembly process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assemble\nDESCRIPTION: This snippet creates a custom command that runs the Flutter tool backend script.  The `_phony_` file is used to force the command to run every time, since there's no way to get a full input/output list from the flutter tool. It specifies the outputs of the command (Flutter library, headers, and wrapper sources), the command to execute (CMake with Flutter tool environment and backend script), and the verbatim flag.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This CMake function applies standard compilation settings to a given target. It enables C++14, sets warning flags (-Wall, -Werror), optimization levels for non-Debug builds, and NDEBUG definition for non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: This snippet sets the `FLUTTER_MANAGED_DIR` variable to the `flutter` subdirectory within the current source directory. This variable is used to locate Flutter-specific build files and resources.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Assets Directory\nDESCRIPTION: This snippet removes the flutter_assets directory and then installs it. It first removes any existing `flutter_assets` directory in the installation directory and then installs the directory from the build directory to the installation directory. This ensures that the asset files are updated on each install.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding executable target\nDESCRIPTION: Defines the executable target for the application, specifying the source files to be compiled and linked. BINARY_NAME is defined in the top-level CMakeLists.txt. It includes the core application source files and the generated plugin registrant.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. Interface libraries don't contain any code but provide include directories and link libraries to other targets.  It defines the include directories (ephemeral) and the library to link against (flutter_windows.dll).  Finally, it adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` using the core and app wrapper sources. It applies standard settings, links it to the Flutter library, includes the wrapper's include directory, and adds a dependency on `flutter_assemble`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Paths\nDESCRIPTION: This snippet defines the path to the Flutter Windows DLL, ICU data file, project build directory, and AOT library.  It also publishes the FLUTTER_LIBRARY, FLUTTER_ICU_DATA_FILE, PROJECT_BUILD_DIR and AOT_LIBRARY variables to the parent scope for use during the installation process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory in the install prefix.  This file contains locale data required by Flutter.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Directory\nDESCRIPTION: This sets the runtime output directory for the executable to `intermediates_do_not_run`, preventing users from running the unbundled executable directly. It ensures the bundled version is used.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the location of the ephemeral directory, which contains generated configuration files. The ephemeral directory is crucial as it holds configuration files produced by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter` and sets its include directories and link libraries. It depends on the `flutter_assemble` target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assemble\nDESCRIPTION: Adds a custom target that depends on the Flutter library and headers. This target ensures that the Flutter library and headers are assembled before the application is built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Append Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers provide the necessary interfaces for interacting with the Flutter engine.  These are the C API headers exposed by the engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command that executes the Flutter tool backend script to assemble the Flutter library and header files. The command is triggered whenever the specified output files are missing or outdated.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: Installs the flutter assets directory by first removing the directory recursively, then re-copying the assets directory to ensure up-to-date files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Settings Function\nDESCRIPTION: This snippet defines a function `APPLY_STANDARD_SETTINGS` that applies standard compiler features, options, and definitions to a target. It enables C++17, sets warning levels, disables exceptions, and defines debug symbols based on the configuration.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Installation\nDESCRIPTION: This snippet sets the RPATH (Run-Path) for the installed executable. RPATH is used by the dynamic linker to locate shared libraries at runtime. Setting it to \"$ORIGIN/lib\" tells the linker to look for libraries in the `lib` directory relative to the executable's location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install RPATH\nDESCRIPTION: This snippet sets the install RPATH to '$ORIGIN/lib', ensuring that the application can find its shared libraries at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Wrapper Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` for plugin support, including core and plugin implementation sources. Standard settings are applied, and it's linked against the `flutter` interface library. Includes directories are configured to point to the wrapper's include directory. flutter_assemble is added as a dependency. Position independent code and hidden visibility are set as properties.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library\nDESCRIPTION: Defines a static library `flutter_wrapper_plugin` that wraps the Flutter engine for use in plugins.  It includes core implementation files, plugin registrar files, sets standard build settings, and links against the `flutter` interface library. It also defines include directories and adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: Creates a custom command that executes the Flutter tool backend to generate necessary files. The command uses a phony output to force execution every time, as there is no way to get a full input/output list from the flutter tool. It sets environment variables and runs the `tool_backend.bat` script.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Finds system-level dependencies using `pkg-config`. This section searches for GTK, GLIB, and GIO libraries, which are required for the Flutter Linux embedding. It uses `pkg_check_modules` to find the packages and import their targets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake\nDESCRIPTION: This snippet includes the generated_plugins.cmake file, which contains build rules for the Flutter plugins used in the application. This allows the plugins to be built and linked into the application. The plugins are essential to extend Flutter with platform specific functionality.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Install to Default Build\nDESCRIPTION: Sets the install step as the default build target in Visual Studio. Makes installation the default action when building the project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library `flutter_wrapper_plugin` containing the core and plugin parts of the C++ wrapper. It links against the `flutter` interface library and sets include directories.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This CMake function, `APPLY_STANDARD_SETTINGS`, applies standard compilation settings to a given target. It sets C++ standard to 14, enables warnings as errors, and applies optimization flags for non-Debug builds. It also defines NDEBUG for non-Debug configurations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. This includes setting the C++ standard, adding compiler options for warnings and optimizations, and defining preprocessor macros for debug/release builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing AI AssistView Data Source - Flutter\nDESCRIPTION: This code snippet demonstrates how to initialize a list of `AssistMessage` objects and bind it to the `SfAIAssistView` widget. It shows how to define `AssistMessage` objects with request and response constructors. The `_generateResponse` function simulates generating an AI response, adding it to the messages. The `initState` method initializes the `_messages` list, and the `build` method creates the `SfAIAssistView` widget with the data.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/README.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nlate List<AssistMessage> _messages;\n\nvoid _generateResponse(String data) async {\n  String response = '';\n  // Connect with your preferred AI to generate a response to the prompt.\n  final String response = await _getAIResponse(data);\n  setState(() {\n    _messages.add(AssistMessage.response(data: response));\n  });\n}\n\n@override\nvoid initState() {\n  _messages = <AssistMessage>[];\n  super.initState();\n}\n\n@override\nWidget build(BuildContext context) {\n  return SfAIAssistView(\n    messages: _messages,\n    composer: const AssistComposer(\n      decoration: InputDecoration(\n        hintText: 'Type a message',\n      ),\n    ),\n    actionButton: AssistActionButton(\n      onPressed: (String data) {\n        setState(() {\n          _messages.add(AssistMessage.request(data: data));\n        });\n        _generateResponse(data);\n        });\n      },\n    ),\n  );\n}\n\n@override\nvoid dispose() {\n  _messages.clear();\n  super.dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable to the specified destination directory within the build bundle. This ensures that the executable is placed in the correct location for distribution.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Applying Settings & Linking Target\nDESCRIPTION: Applies the standard settings defined earlier and links the executable to the flutter and GTK libraries. It also adds a dependency on the flutter_assemble target, ensuring that the Flutter assets are built before the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This snippet iterates through the bundled libraries and installs them to the lib directory within the installation bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the generated Flutter library, headers, and C++ wrapper sources. This target triggers the execution of the custom command to assemble the Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to run the Flutter tool backend script.  The script generates the Flutter library and headers. A phony file is used as an output to force the command to run every time. The flutter tool environment variables are passed as well.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: Sets the installation directories for data and libraries. INSTALL_BUNDLE_DATA_DIR will contain assets and other data files, while INSTALL_BUNDLE_LIB_DIR will contain libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. This function sets C++ standard, compiler warnings, and optimization levels based on the build type. It's called for the main executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and libraries. This directory is crucial for accessing Flutter's internal build artifacts.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Directory\nDESCRIPTION: This snippet sets the output directory for the executable to a subdirectory, preventing accidental execution of the unbundled copy.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: Installs bundled plugin libraries to the installation library directory, under the Runtime component. This step is conditional based on the existence of the PLUGIN_BUNDLED_LIBRARIES variable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: This section configures build options based on whether the generator is multi-config or single-config. It sets the CMAKE_CONFIGURATION_TYPES for multi-config generators and CMAKE_BUILD_TYPE for single-config generators.  It defaults the build type to Debug if not specified, and sets available options.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Project Variables\nDESCRIPTION: Defines several project-specific variables, including the ephemeral directory, Flutter library location, ICU data file path, project build directory, and AOT library location. These variables are used throughout the CMake configuration to locate necessary files and directories. The PARENT_SCOPE option makes these variables available in the parent scope for the install step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build process.  This integrates the Flutter build system into the overall CMake build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Multi-Config Generators\nDESCRIPTION: Configures build options based on whether the CMake generator supports multiple configurations (e.g., Debug, Release). Sets available configuration types if multi-config is supported, otherwise defaults to Debug build type.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Customizing SignaturePad Elements - Dart\nDESCRIPTION: This code snippet illustrates how to customize the appearance of the `SfSignaturePad` widget.  It sets the minimum and maximum stroke widths, stroke color, and background color. The `SignaturePad` is wrapped in a `Container` to define its size.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n@override\n  Widget build(BuildContext context) {\n\n    return Scaffold(\n      body: Center(\n        child: Container(\n          child: SfSignaturePad(\n            minimumStrokeWidth: 1,\n            maximumStrokeWidth: 3,\n            strokeColor: Colors.blue,\n            backgroundColor: Colors.grey,\n          ),\n          height: 200,\n          width: 300,\n        ),\n      ),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the path to the Flutter Windows DLL. This DLL contains the Flutter engine and is required for running Flutter applications on Windows. The path is then published to the parent scope for use in install steps.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This snippet sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL file located in the ephemeral directory. It publishes the variable to the parent scope for the install step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the `EPHEMERAL_DIR` path to each. These headers are required for compiling code that interacts with the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions for Unicode support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the `WRAPPER_ROOT` variable, which represents the path to the directory containing the C++ client wrapper code. This wrapper provides an interface between the Flutter engine and native Windows code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the binary that will be produced by the build process. This name is used throughout the CMake configuration.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Assets\nDESCRIPTION: Removes and reinstalls the assets directory on each build to avoid stale files. The asset directory is copied to the data directory within the installation prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Building the Application Executable\nDESCRIPTION: This snippet creates the executable target. It compiles main.cc, my_application.cc, and generated_plugin_registrant.cc, links against Flutter and GTK libraries, and adds a dependency on the flutter_assemble target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Applying standard settings\nDESCRIPTION: Applies a set of standard build settings to the application target. This step configures common build options for the project. It's assumed that apply_standard_settings is a function defined elsewhere.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets a CMake policy to NEW. CMake policies control CMake's behavior and compatibility. Setting this policy can affect how certain CMake features are handled.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Defaults\nDESCRIPTION: This snippet sets the installation step as the default build step and configures the installation prefix to the build bundle directory, ensuring that the necessary files are placed in the correct location for running the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: Configures build options based on whether the generator is multi-config or single-config.  For multi-config generators (like Visual Studio), it sets the available configuration types.  For single-config generators, it sets the CMAKE_BUILD_TYPE to Debug if not already set and defines the available build types.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Target Platform\nDESCRIPTION: Sets a default value for the `FLUTTER_TARGET_PLATFORM` variable if it is not already defined. This variable specifies the target platform (e.g., Windows x64) for the build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types\nDESCRIPTION: This code configures build types (Debug, Profile, Release) based on whether the generator is multi-config or single-config. It sets the `CMAKE_BUILD_TYPE` if not already set, and provides options for the user to select a build type.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: Creates a custom command to assemble the Flutter engine and its dependencies. This command executes the `tool_backend.bat` script using the CMake command-line tool, setting the environment variables provided by FLUTTER_TOOL_ENVIRONMENT. The phony output ensures that the command runs every time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This CMake snippet initializes the project, adds an executable target, specifies source files, sets compile definitions, and links necessary libraries for a Flutter Windows application. It ensures the correct setup for building the application's runner.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings Function\nDESCRIPTION: Defines a function APPLY_STANDARD_SETTINGS that applies standard compilation settings to a given target. It sets C++ standard to C++17, adds compile options for warnings and exceptions, and defines conditional debug definitions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assemble\nDESCRIPTION: Adds a custom command that executes the `tool_backend.bat` script to generate the Flutter engine library and related files. The command uses a phony output file to ensure it runs every time. It uses the `FLUTTER_TOOL_ENVIRONMENT` environment variables.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Runner\nDESCRIPTION: This CMake configuration sets the minimum required CMake version, defines the project name, and creates the executable. It also specifies the source files, compile definitions, linked libraries, include directories, and dependencies necessary for building the Flutter runner application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Type\nDESCRIPTION: This code block configures the build type if it's not already set.  It defaults to \"Debug\" and allows the user to select from \"Debug\", \"Profile\", or \"Release\" build types, affecting compiler optimizations and debugging information.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Set CMake Policy\nDESCRIPTION: Sets CMake policy CMP0063 to NEW. CMake policies control CMake's behavior and compatibility.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data\nDESCRIPTION: Installs the ICU data file to the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` from the core and plugin wrapper sources. It applies standard settings, sets properties for position-independent code and hidden C++ visibility, and links the Flutter interface library. Includes the wrapper include directory. Adds a dependency on the flutter_assemble target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: This snippet creates a static library `flutter_wrapper_plugin` from the core and plugin wrapper sources. It configures standard settings, position-independent code, C++ visibility, and links the library to the Flutter interface. It also defines include directories and adds a dependency on `flutter_assemble`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target for Flutter Assembly\nDESCRIPTION: Defines a custom target named 'flutter_assemble' that depends on the Flutter library, headers, and wrapper source files. This target ensures that the Flutter engine is assembled before any other targets that depend on it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This conditional installation ensures the AOT (Ahead-Of-Time) compiled library is included in the installation only for non-Debug builds, enhancing performance for Profile and Release modes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses the `find_package` and `pkg_check_modules` commands to locate and import system-level dependencies such as GTK, GLIB, GIO, BLKID, and LZMA. These dependencies are required for the Flutter application to run on Linux with GTK. The imported targets are used later for linking.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the ICU data file to the data directory in the install prefix.  This provides internationalization support. The COMPONENT Runtime specifies that this is part of the runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies using PkgConfig\nDESCRIPTION: Uses the PkgConfig module to find required system dependencies, such as GTK, GLIB, GIO, BLKID, and LZMA. It imports these dependencies as imported targets for linking against in the build process. It ensures that these libraries are available on the system.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Library Interface\nDESCRIPTION: Creates an interface library named `flutter` and configures its include directories and link libraries.  It adds flutter_assemble as a dependency to ensure the Flutter engine is built before anything else.  It uses `target_link_libraries` to link the flutter library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` and sets its source files, include directories, and link libraries. It depends on the `flutter_assemble` target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the 'flutter/generated_plugins.cmake' file, which manages building the Flutter plugins and adding them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake File\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application.  It is essential for incorporating plugins into the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Windows Runner\nDESCRIPTION: This CMake configuration builds a Flutter Windows application. It sets the minimum required CMake version, defines the project, and specifies the source files to be compiled into the executable. It also configures compiler definitions, links necessary libraries, and sets up dependencies, including the Flutter engine and plugins.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: This snippet sets the installation prefix to the build bundle directory. This ensures that the application is installed into the correct location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the lib directory within the bundle. The Flutter library contains the core Flutter engine code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type\nDESCRIPTION: This block configures the build type (Debug, Profile, or Release) if it's not already set. The default build type is set to Debug. This allows selecting different compilation flags depending on the intended use.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble`. This target depends on the Flutter library and headers. It triggers the custom command defined earlier to assemble the Flutter library. This ensures that the Flutter library is built before any other targets that depend on it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configure Cross-Building\nDESCRIPTION: Configures the CMake environment for cross-building. It sets the SYSROOT and FIND_ROOT_PATH variables, adjusting how CMake searches for system libraries and headers.  This section is conditional upon the FLUTTER_TARGET_PLATFORM_SYSROOT variable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix and Bundle Directory\nDESCRIPTION: This snippet sets the install prefix to the build bundle directory and initializes a clean directory on each build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Adds an interface library for Flutter. This library is used to link the Flutter engine with the application. It also specifies the include directories and linked libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT (Ahead-Of-Time) compiled library to the installation's data directory. This is only done for Profile and Release builds, not Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions for Unicode\nDESCRIPTION: This snippet adds preprocessor definitions for UNICODE and _UNICODE. These are commonly used in Windows development to ensure that the application uses Unicode character encoding. This supports internationalization.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Finding and Checking GTK Package\nDESCRIPTION: This snippet uses `find_package` to find the PkgConfig package and then uses `pkg_check_modules` to check for the GTK (gtk+-3.0) package as a required dependency. The GTK package is imported as `PkgConfig::GTK`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings to a target, including C++ standard version, compiler warnings, exception handling, and debug definitions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.10 and declares the project named 'runner' using C++ as the language.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Update Bar Painter with isAxisInversed - Flutter\nDESCRIPTION: The bar painter within the `SfLinearGauge` now updates correctly when the `isAxisInversed` property is dynamically changed. This ensures the visual representation of the bar accurately reflects the axis inversion state in real-time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nisAxisInversed\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: Sets the name of the binary executable that will be built.  This variable is used later in the CMake configuration to specify the output file name.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. Ensures that the CMake version used is compatible with the project's CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets a specific CMake policy (CMP0063) to NEW.  CMake policies control CMake's behavior and compatibility across different versions. Setting to NEW enables the newer behavior associated with this policy.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter library.  It executes the `tool_backend.sh` script from the Flutter tools, passing the target platform and build type as arguments. The command's output are the Flutter library and headers.  A phony file is included to force the command to always run.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Project Definition in CMake\nDESCRIPTION: Defines the project name and the programming languages used. It sets up the basic project structure for CMake to manage the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. It ensures that the CMake version used is at least 3.15 or higher.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Wrapper Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_plugin' from the core and plugin wrapper source files.  It applies standard settings, sets properties for position-independent code and CXX visibility, links it against the 'flutter' interface library, and defines the include directories.  It also depends on the 'flutter_assemble' target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assemble\nDESCRIPTION: Adds a custom command that runs the Flutter tool backend script to assemble the Flutter library. This command is triggered every time due to the phony file, as there's no way to get full input/output list from the Flutter tool. The tool_backend.sh script is used to build the Flutter library for the Linux platform. It also defines the environment variables required by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: This snippet adds a custom command that invokes the Flutter tool backend script to assemble the Flutter library. This command is executed during the build process to generate the `libflutter_linux_gtk.so` file and related headers. The command uses a phony file to ensure it runs every time, as there's no reliable way to track inputs and outputs.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build process. This ensures that the CMake version is compatible with the commands and features used in the script.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the path to the ephemeral directory, which contains generated configuration files and libraries. This directory is used to store temporary build artifacts.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the `FLUTTER_LIBRARY` variable, which represents the path to the Flutter Windows DLL. This DLL contains the core Flutter engine code. The variable is also set in the parent scope for use in install steps.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: Configures build options based on whether the generator is multi-config or single-config. For multi-config generators (e.g., Visual Studio), it sets the available configurations (Debug, Profile, Release). For single-config generators, it sets the CMAKE_BUILD_TYPE to Debug if not already set and allows the user to choose between Debug, Profile, and Release.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: This adds a custom command to run the Flutter tool backend. It uses a phony output file to ensure the command runs every time.  It executes the `tool_backend.bat` script with the specified Flutter tool environment and configuration. The script generates the Flutter library, headers, and C++ wrapper sources.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: This snippet creates a static library named 'flutter_wrapper_plugin'. It links the wrapper core and plugin sources, applies standard settings, sets properties for position independent code and hidden C++ visibility, links to the 'flutter' interface library, sets include directories, and adds `flutter_assemble` as a dependency.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory within the installation prefix. This file contains localization data for the application. The component is set to 'Runtime'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This code block manages the installation of Flutter assets. It ensures the asset directory is fully re-copied on each build to avoid stale files, which are then installed into the data directory of the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: This snippet adds a dependency on flutter_assemble target for the executable target. This ensures that the flutter_assemble target (which compiles Flutter code) is built before the executable target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation to Default Build\nDESCRIPTION: This snippet configures Visual Studio to include the 'install' target in the default build. This ensures that the application is installed after building, which is necessary to run the application.  This sets the `CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD` variable to 1.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This line specifies the minimum version of CMake required to build the project.  It ensures that the CMake version used is at least 3.15.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Build Bundle Directory\nDESCRIPTION: Removes the build bundle directory at the start of the installation process. This ensures a clean slate for each build and prevents stale files from previous installations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Target Platform\nDESCRIPTION: Sets a default value for `FLUTTER_TARGET_PLATFORM` if it is not already defined. This is a fallback for older versions of the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Languages\nDESCRIPTION: Defines the project name and specifies that C++ is used. The binary name and application ID are set for the resulting executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Appending Core C++ Wrapper Sources\nDESCRIPTION: This snippet appends core C++ wrapper source files to the `CPP_WRAPPER_SOURCES_CORE` variable. It then prepends the `WRAPPER_ROOT` to each source file path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Install ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory within the application bundle. This file contains locale data needed for internationalization.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This snippet installs any bundled plugin libraries to the library directory within the installation prefix. It checks if PLUGIN_BUNDLED_LIBRARIES is defined before attempting to install the libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding preprocessor definitions\nDESCRIPTION: Adds preprocessor definitions to the application target, embedding the Flutter version information into the compiled executable. This allows the application to access version details at runtime. FLUTTER_VERSION and other related variables should be defined before this step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (Plugin)\nDESCRIPTION: Defines the C++ wrapper source files specific to plugins. These sources implement the plugin registration mechanism. The list is transformed to include the full path to each source file within the wrapper root directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Finding GTK Package\nDESCRIPTION: Finds the GTK package using pkg-config. GTK is a dependency for the Flutter application, especially on desktop platforms. pkg_check_modules ensures that the GTK library is available and imported as a target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the build bundle directory, which is the location where the application's files are copied after the build process.  It uses a generator expression to get the directory of the output binary. This is used in install commands.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings\nDESCRIPTION: This snippet applies a standard set of build settings to the executable target. This likely includes common compiler flags and configurations for building Flutter applications on Windows.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Show Last Label Property - Flutter\nDESCRIPTION: Now, on setting the `showLastLabel` property as `false`, the last label will not be visible in the `SfRadialGauge` widget. To make it visible, set the `showLastLabel` property as `true`. This provides control over the visibility of the last label on the gauge axis.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nshowLastLabel\n```\n\nLANGUAGE: Dart\nCODE:\n```\nSfRadialGauge\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to run the Flutter tool backend, which assembles the Flutter application.  The command uses the flutter_tool to generate the Flutter library, header files, and wrapper sources. The `_phony_` output forces the command to run every time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter Windows DLL file. This is the core Flutter library that provides the runtime environment for the Flutter application.  The path is then published to the parent scope for use in the install step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory\nDESCRIPTION: Removes the existing assets directory and then installs the entire assets directory to the data directory to ensure that no stale files remain from the previous install.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Installation\nDESCRIPTION: This snippet sets the install RPATH (Run-Time Search Path) to '$ORIGIN/lib'. This helps the executable locate shared libraries at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Libraries\nDESCRIPTION: Sets the runtime search path (RPATH) for shared libraries. This allows the application to find its libraries at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Runner (C++)\nDESCRIPTION: This CMake configuration sets up the build environment for a Flutter application's runner component. It defines the executable, specifies source files, includes necessary libraries like 'flutter' and 'flutter_wrapper_app', and manages dependencies to ensure a successful build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet first removes any existing assets and then installs the Flutter assets directory to the data directory within the installation prefix. This ensures that assets are up-to-date. The component is Runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This conditional installation includes the AOT (Ahead-Of-Time compilation) library only for non-Debug builds. This improves performance by pre-compiling the application code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: This snippet adds a custom command to assemble the Flutter library. It runs the `tool_backend.sh` script with specific environment variables to generate the Flutter library and headers. The `_phony_` file ensures the command always executes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH\nDESCRIPTION: This snippet sets the RPATH (Run-Path) to $ORIGIN/lib, which allows the executable to find its shared libraries in the lib directory relative to the executable's location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directory\nDESCRIPTION: This snippet sets the installation directory and removes any existing content in the bundle directory to ensure a clean build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Location\nDESCRIPTION: Sets the location of the Flutter Windows library (flutter_windows.dll).  This is crucial for linking the Flutter engine to the Windows application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy and RPATH\nDESCRIPTION: This snippet sets a CMake policy (CMP0063) and configures the runtime path (RPATH) to locate shared libraries at runtime. The RPATH is set to `$ORIGIN/lib`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: This snippet installs native assets from the specified directory to the lib directory within the installation bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the generated_plugins.cmake file, which contains build rules for the Flutter plugins. This ensures that the plugins are built and added to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Install to Default Build\nDESCRIPTION: Makes the \"install\" step the default build action in Visual Studio. This ensures that the application is always installed after building.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: Installs the Flutter assets directory. It ensures a fresh copy is made on each build by removing any existing directory before copying.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting default install step\nDESCRIPTION: Sets the \"install\" step as the default build target in Visual Studio. This ensures that the application is properly installed before running.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the path of the 'ephemeral' directory, which typically contains generated configuration files and the Flutter library. This variable is used throughout the CMake script to reference files within this directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory within the installation prefix. This file is required for internationalization support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Finding and Checking GTK Packages\nDESCRIPTION: This uses the `PkgConfig` module to find the GTK library (version 3.0 or later) and make it available as an imported target. The `REQUIRED` keyword ensures that the build will fail if GTK is not found.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library on non-Debug builds to the lib directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: Sets the variable FLUTTER_MANAGED_DIR to the location of the Flutter project within the CMake project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Link libraries and set include directories\nDESCRIPTION: Specifies the libraries to link with the executable, including Flutter-specific libraries and Windows system libraries (dwmapi.lib for Desktop Window Manager API). It also sets the include directories to locate necessary header files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: Installs bundled plugin libraries to the lib directory within the bundle. This only occurs if PLUGIN_BUNDLED_LIBRARIES is defined. Bundled plugin libraries are pre-built shared libraries included with the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This snippet installs the assets directory.  It copies the contents of the PROJECT_BUILD_DIR/${FLUTTER_ASSET_DIR_NAME} to the INSTALL_BUNDLE_DATA_DIR. The component is set to 'Runtime'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: This snippet defines a list of header files (`FLUTTER_LIBRARY_HEADERS`) required for the Flutter library. It then prepends the `EPHEMERAL_DIR` path to each header file using the `list_prepend` function.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet creates an interface library named `flutter` and sets its include directories and link libraries. The include directory is set to the ephemeral directory, and the link libraries include the Flutter library itself and the system dependencies found earlier. This interface library is used to propagate these settings to dependent targets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: This snippet defines a function `APPLY_STANDARD_SETTINGS` that applies standard compilation features, options, and definitions to a given target. It sets the C++ standard to C++17 and configures warning levels and exception handling.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named 'flutter_assemble'. This target depends on the output files generated by the Flutter tool backend command. This ensures that the Flutter library and related files are assembled before any other targets that depend on them are built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library serves as a container for include directories and linked libraries, allowing other targets to depend on it. The include directories and linked libraries include the ephemeral directory and required system libraries (GTK, GLib, GIO).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Assembling Flutter Windows Library\nDESCRIPTION: Defines a custom command to assemble the Flutter library and headers using the Flutter tool backend.  This runs the `tool_backend.bat` script to generate the necessary files. A phony output is used to ensure the command runs every time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses `find_package` and `pkg_check_modules` to find system-level dependencies like GTK, GLib, Gio, Blkid, and LZMA using pkg-config.  It is essential for linking the Flutter library with the necessary system libraries on Linux.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Finding system dependencies\nDESCRIPTION: Uses `pkg-config` to find required system libraries such as GTK, GLIB, GIO, BLKID, and LZMA.  The IMPORTED_TARGET keyword creates CMake targets that can be used to link against these libraries. `pkg_check_modules` will error if the required package is not found.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: Adds preprocessor definitions to enable Unicode support in the project. This ensures that the application can handle Unicode characters correctly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This snippet installs bundled plugin libraries to the library subdirectory of the installation bundle, if any are defined.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory Variable\nDESCRIPTION: Defines the `WRAPPER_ROOT` variable, pointing to the location of the C++ client wrapper source files within the ephemeral directory. These wrapper files provide an interface between the Flutter engine and native Windows code. This variable is used to construct paths to the wrapper source files later in the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Assembly\nDESCRIPTION: Defines a custom command to run the Flutter tool backend script, which generates the Flutter library and related files.  The command runs every time because it depends on a non-existent file (_phony_). The flutter tool environment is passed to the backend script.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter library (`libflutter_linux_gtk.so`). This variable is then published to the parent scope for use in other parts of the build process.  It also sets the paths for the ICU data file and the AOT library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Wrapper Sources (Core)\nDESCRIPTION: This defines lists of C++ wrapper source files for core functionality, plugins and the application. It also prepends the `WRAPPER_ROOT` to each source file's path. These wrappers facilitate the integration of Flutter with the native Windows environment.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources\nDESCRIPTION: Creates lists of C++ source files for the core wrapper, plugin wrapper, and app wrapper. It then prepends `WRAPPER_ROOT` to each file path. These source files implement the native functionality and interact with the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet creates an interface library named `flutter`. It sets the include directories and links the library to the `FLUTTER_LIBRARY` and other system dependencies such as GTK, GLIB, GIO, BLKID and LZMA.  It also adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Appending to C++ Wrapper Sources List\nDESCRIPTION: These snippets append different sets of source files to the `CPP_WRAPPER_SOURCES_CORE`, `CPP_WRAPPER_SOURCES_PLUGIN`, and `CPP_WRAPPER_SOURCES_APP` lists, respectively. These source files likely implement the C++ wrapper functionality for core features, plugins, and the application itself.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the installation prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting up Installation\nDESCRIPTION: This section sets up the installation process, defining the bundle directory and cleaning it on each build. It handles creating a relocatable bundle in the build directory and sets up the necessary file structure.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Target Executable\nDESCRIPTION: This snippet installs the target executable (BINARY_NAME) to the installation prefix. It specifies that the target should be installed as a runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter library and headers. This command runs the Flutter tool backend script to generate the necessary Flutter components.  The `_phony_` file ensures the command runs every time because there is no direct way to get input/output lists from the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the specified installation prefix. The component is Runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets a CMake policy to control the behavior of CMake. CMP0063 relates to the handling of relative paths and ensures consistent behavior across different CMake versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake\nDESCRIPTION: Includes the generated plugins CMake file, which manages building the plugins and adding them to the application. Integrates plugins into the Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Set minimum CMake version and project name\nDESCRIPTION: Specifies the minimum required CMake version and defines the project name. The project name is set to \"runner\" and the languages are set to CXX.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. This includes setting C++ standard, compiler options for warnings and optimization levels, and defines.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Installation\nDESCRIPTION: This snippet sets the RPATH for the installation to '$ORIGIN/lib', allowing the executable to find shared libraries at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers generated by the custom command. This ensures that the Flutter library is assembled before other targets that depend on it are built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Unicode\nDESCRIPTION: This snippet adds definitions to use Unicode for all projects.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Option\nDESCRIPTION: Defines build configuration options, setting up different configurations like Debug, Profile, and Release, and handling the build type based on the generator being used. If a multi-configuration generator is used, it defines the available configurations; otherwise, it sets the `CMAKE_BUILD_TYPE`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending and Transforming C++ Wrapper Sources\nDESCRIPTION: Defines lists of C++ source files for the core, plugin, and app components of the Flutter wrapper. Each source file name is appended to its respective list, and then the `WRAPPER_ROOT` directory is prepended to each source file path, ensuring that the correct source files are used during compilation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Flags\nDESCRIPTION: This snippet adds definitions to enable Unicode support for the project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This line includes the `generated_plugins.cmake` file, which contains the build rules for the generated plugins, ensuring they are built and linked into the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable with the specified binary name to the installation prefix.  The component is specified as Runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: This snippet creates a static library named `flutter_wrapper_plugin` using core and plugin wrapper sources. It applies standard settings, sets properties for position independent code and hidden C++ visibility, and links the Flutter interface library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter library headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the `EPHEMERAL_DIR` to each of them using the custom `list_prepend` function.  These header files define the interface to the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: This snippet configures build options based on whether the generator is multi-config or single-config. For multi-config generators (like Visual Studio), it explicitly sets the available configuration types. For single-config generators, it sets the CMAKE_BUILD_TYPE if not already set.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This snippet defines a function to apply standard compilation settings to a target, including C++ standard, compiler options, and definitions. It enables C++14, sets warning flags, and adds optimization flags for non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the Ahead-Of-Time (AOT) compiled library to the bundle. This is only done for non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. Interface libraries do not contain any code themselves but expose include directories and link libraries to dependent targets. The `EPHEMERAL_DIR` is added as an include directory. The Flutter library and other system libraries are linked.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the lib directory in the install prefix. The COMPONENT Runtime specifies that this is part of the runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter ICU data\nDESCRIPTION: Installs the Flutter ICU data file to the data directory within the bundle.  This file is required for internationalization support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses `pkg_check_modules` to find and import necessary system-level dependencies like GTK, GLib, Gio, Blkid, and LZMA. It checks for the availability of these modules using `pkg-config` and creates imported targets for each.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Settings Function\nDESCRIPTION: Defines a function `APPLY_STANDARD_SETTINGS` that applies common compilation settings to a target. This includes setting the C++ standard to C++17, adding compiler options for warnings and exceptions, and defining preprocessor definitions for exception handling and debug configuration.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet conditionally installs the AOT library only for non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: This snippet configures build options based on whether the generator is multi-configuration or single-configuration. For multi-configuration generators (like Visual Studio), it sets the configuration types to Debug, Profile, and Release. For single-configuration generators, it sets the build type to Debug if not already specified.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library, header files, and wrapper sources. This target triggers the Flutter tool backend to assemble the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable to the install prefix directory. The COMPONENT Runtime specifies that this is part of the runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting CMAKE_INSTALL_RPATH\nDESCRIPTION: Sets the runtime path for the installed application to look for shared libraries in the lib directory relative to the executable. This is important for finding Flutter's native libraries at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Linker and Compiler Flags for Profile Build\nDESCRIPTION: This snippet sets the linker and compiler flags for the Profile build configuration to be the same as the Release build configuration. This ensures that the Profile build is optimized for performance, similar to the Release build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet sets a CMake policy to 'NEW'. CMake policies manage compatibility and behavior between CMake versions. Setting CMP0063 to NEW ensures that a newer, possibly preferred, behavior is used.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Installing Library File\nDESCRIPTION: Installs the Flutter library file to the library directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Sets the minimum required CMake version to 3.15. This ensures that the project can be built with the specified CMake features and policies.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This snippet removes the existing assets directory and then installs the current assets directory to the data directory in the install prefix. It ensures a clean copy of assets on each build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Directories\nDESCRIPTION: This snippet defines the installation directories for data and libraries within the bundle. It specifies where data files and libraries will be placed during the installation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Directories\nDESCRIPTION: This snippet defines variables for the data and library installation directories within the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting install prefix\nDESCRIPTION: Sets the installation prefix to the build bundle directory.  This makes the installation relative to the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This code installs the executable to the root of the installation prefix (within the bundle). This ensures that the executable is placed in the correct location for execution after installation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines build configuration options, handling both multi-configuration and single-configuration generators. It sets the CMAKE_BUILD_TYPE to Debug if not already specified, and defines the available build types.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name and Application ID\nDESCRIPTION: This snippet sets the binary name to 'example' and the application ID to 'com.example.example'. It uses `set` commands to define these project-specific variables within CMake.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: This snippet creates a static library `flutter_wrapper_app` from the core and app wrapper sources. It configures standard settings, links the library to the Flutter interface, defines include directories, and adds a dependency on `flutter_assemble`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Installation\nDESCRIPTION: This snippet sets the RPATH (runtime path) for the installed binary to \"$ORIGIN/lib\". RPATH allows the executable to find shared libraries at runtime without relying on system-wide library paths.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting build bundle directory\nDESCRIPTION: Sets the build bundle directory, where the application and its dependencies will be placed.  This is next to the executable to allow running from Visual Studio.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory in the CMake build. Includes Flutter build rules and manages Flutter-related dependencies.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library headers and prepends the ephemeral directory path to each header. These headers are required for compiling the Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends the list of Flutter library headers to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are essential for compiling code that interacts with the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Define List Prepend Function\nDESCRIPTION: Defines a CMake function `list_prepend` that prepends a given prefix to each element of a list. It iterates through each element in the input list, adds the prefix, and updates the list in the parent scope. This overcomes limitations of older CMake versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: This sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL. This DLL contains the core Flutter engine and is required for running the Flutter application on Windows. The scope is then set to PARENT_SCOPE for access in other scopes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a CMake function called `list_prepend` that prepends a given prefix to each element in a list. This function emulates the `list(TRANSFORM ... PREPEND ...)` command, which isn't available in CMake 3.10. It takes the list name and the prefix as input.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Assets Directory\nDESCRIPTION: Removes the existing assets directory and re-copies it from the build directory to the installation directory. This ensures that stale files from previous builds are removed. This install step is performed at build time rather than install time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command that invokes the Flutter tool backend to assemble the Flutter library. This command runs the `tool_backend.sh` script with the specified Flutter target platform and build type, utilizing the `FLUTTER_TOOL_ENVIRONMENT`. The `_phony_` file forces the command to re-run every time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: This snippet defines the `FLUTTER_LIBRARY` variable, pointing to the `libflutter_linux_gtk.so` file in the ephemeral directory. This shared object is the core Flutter runtime library for Linux. It also sets several other variables in the PARENT_SCOPE for use in other parts of the build or installation process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named 'flutter'. It specifies include directories and link libraries for the Flutter library.  It also establishes a dependency on the 'flutter_assemble' target, which triggers the assembly of the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: CMake Target Configuration\nDESCRIPTION: This snippet configures the target executable by applying standard settings, defining compiler definitions (specifically disabling min/max macros), linking necessary libraries (flutter and flutter_wrapper_app), including source directories, and adding a dependency on the flutter_assemble target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: This snippet adds a custom command to assemble the Flutter library. It executes the `tool_backend.sh` script with the specified Flutter target platform and build type. The command's output includes the Flutter library and header files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet sets the installation directories for the application bundle, defining where the executable, data files, and libraries will be placed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target for Flutter Assembly\nDESCRIPTION: This snippet defines a custom target `flutter_assemble` that depends on the output files generated by the custom command defined previously. This target ensures that the Flutter library and related components are assembled before other targets that depend on them are built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring compile definitions and link libraries\nDESCRIPTION: This CMake code applies standard build settings, defines the NOMINMAX macro to prevent conflicts with Windows headers, and links the necessary libraries, including flutter and flutter_wrapper_app. It also includes the source directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: This snippet creates a static library named `flutter_wrapper_app` that wraps Flutter functionality for the main application. It includes core implementations and app-specific sources, applies standard settings, links against the `flutter` interface library, and sets the include directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: Installs the application's assets directory to the data directory within the installation prefix. It first removes the existing directory and then copies the new one, ensuring that the assets are always up-to-date.  The component is set to 'Runtime'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: CMake Target Configuration\nDESCRIPTION: This snippet configures the target executable, setting compile definitions, linking libraries, and including directories. It defines 'NOMINMAX' to prevent conflicts with the Windows API and links against the flutter and flutter_wrapper_app libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Asset Directory\nDESCRIPTION: This snippet removes any existing asset directory in the installation location before installing the new asset directory.  It then installs the asset directory from the project build directory to the data directory within the installation prefix. This ensures that the assets are up-to-date.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a preprocessor definition for the application ID, which is used in the source code. It makes the application ID available to the C++ code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory, which includes the CMake build rules for the Flutter engine and related components.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Plugin Wrapper Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_plugin'. This library contains the C++ wrapper code for Flutter plugins. It depends on the core wrapper sources and the plugin-specific wrapper sources. It links against the 'flutter' interface library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the project can be built with compatible CMake versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the build bundle directory to the directory where the target executable is located. This is used for installing support files next to the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Installation\nDESCRIPTION: This snippet sets the RPATH (run-time search path) for the installed application. The RPATH specifies where the dynamic linker should look for shared libraries at runtime. `$ORIGIN/lib` indicates that libraries should be searched in the `lib` directory relative to the executable's location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable to the root of the installation prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the lib directory within the build bundle. This library is essential for running the Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library headers and prepends the path to the ephemeral Flutter Linux directory to each header file. Defines the interface library flutter, sets include directories, and links necessary libraries.  These headers expose the Flutter API necessary for plugin development.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: This snippet sets the variable `FLUTTER_MANAGED_DIR` to the location of the Flutter directory within the project.  This directory contains the Flutter engine and related build files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file. The file specified by `${FLUTTER_ICU_DATA_FILE}` is installed into the directory specified by `${INSTALL_BUNDLE_DATA_DIR}` under the 'Runtime' component. This file contains locale data required for internationalization.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: This snippet installs native assets from the build directory to the installation directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable binary. It specifies that the target `${BINARY_NAME}` should be installed into the directory specified by `${CMAKE_INSTALL_PREFIX}` under the 'Runtime' component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the ICU data file to the data directory.  Ensures the ICU data file is present for internationalization support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Project Initialization\nDESCRIPTION: Initializes the CMake project named 'runner' and specifies that CXX (C++) is the primary language used in the project. This is necessary for building the Flutter application's native components.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Appending and Transforming Flutter Library Headers\nDESCRIPTION: Defines a list of header files required for the Flutter library, and prepends the `EPHEMERAL_DIR` to each entry. This ensures that the correct header files are included during compilation. The `list(TRANSFORM)` command modifies each element of the list by adding the directory path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app`. This library contains the C++ wrapper code required for the main application. It links against the `flutter` interface library and includes the necessary directories. Standard settings are applied.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Libraries\nDESCRIPTION: This snippet installs bundled plugin libraries to the lib directory within the installation prefix. The component is Runtime. It is conditional on PLUGIN_BUNDLED_LIBRARIES being defined.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources\nDESCRIPTION: This snippet defines lists of C++ source files for the core, plugin, and app wrapper components, then prepends the path to the wrapper root directory to each source file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Finding GTK Package\nDESCRIPTION: This snippet uses `pkg-config` to find the GTK library. It is a system-level dependency used by the Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named `flutter_assemble` that depends on the Flutter library, header files, and C++ wrapper sources. This target ensures that the Flutter tool backend is executed before any other targets that depend on these files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the CMake project. This allows CMake to process the CMakeLists.txt file within the Flutter directory, which contains build rules for the Flutter engine and plugins.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the generated plugin build rules, which manage building the plugins and adding them to the application. Uses the flutter/generated_plugins.cmake file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Set Application Identifiers\nDESCRIPTION: Defines the binary name and application ID. BINARY_NAME sets the name of the executable file, and APPLICATION_ID sets a unique identifier for the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the binary name to 'syncfusion_pdfviewer_windows_example', which is used later for defining the target executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"syncfusion_pdfviewer_windows_example\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to run the Flutter tool backend script. This script is responsible for assembling the Flutter library and headers. A phony file is used to ensure that the command runs every time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: This snippet adds a custom command to run the Flutter tool backend to assemble the Flutter application. It defines the output files and the command to execute, including environment variables.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Target Settings Function\nDESCRIPTION: This snippet defines a function to apply standard compile features, options, and definitions to a target. It sets C++ standard to 17, enables warnings, disables exceptions, and adds debug definitions for Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT library to the data directory in the install prefix. This is only done for Profile and Release builds, not Debug builds. The CONFIGURATIONS Profile;Release specifies the build configurations for which the library is installed. The COMPONENT Runtime specifies that this is part of the runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. It specifies the include directories and link libraries required to use the Flutter library. This simplifies linking against the Flutter library in other parts of the project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Interface Library\nDESCRIPTION: Creates an INTERFACE library named flutter.  INTERFACE libraries are used to group properties such as include directories and linked libraries.  This is where the include directories, library links, and dependency configuration are linked to the Flutter framework.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Project Initialization and Language Setup\nDESCRIPTION: Initializes the CMake project and specifies the programming languages used (in this case, CXX for C++).  It also sets the binary name and application ID for the project, which are used in subsequent build steps.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Pub Get Command\nDESCRIPTION: This command is used to fetch all the dependencies specified in the pubspec.yaml file, including the locally referenced syncfusion_flutter_charts package. Running this command ensures that your project has all the necessary packages to run correctly. It should be executed from the root directory of your Flutter project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n$ flutter pub get\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains build settings and other configuration parameters specific to the Flutter project. The included file is located in the `EPHEMERAL_DIR`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: Adds preprocessor definitions to enable Unicode support in the project. Ensures wide character support and proper handling of Unicode strings.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Add preprocessor definitions for Flutter versioning\nDESCRIPTION: Defines preprocessor macros that provide the Flutter version information during compilation. These macros are used to embed the application's version details into the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers\nDESCRIPTION: This defines a list of Flutter library header files and prepends the `EPHEMERAL_DIR` to each header's path. These headers provide interfaces for interacting with the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining standard compiler settings function\nDESCRIPTION: Defines a function `APPLY_STANDARD_SETTINGS` which applies standard compiler flags and features to a given target. This includes enabling C++14, setting warning flags, and enabling optimizations for non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Components\nDESCRIPTION: This set of install commands installs the target executable, the Flutter ICU data file, and the Flutter library to their respective destinations within the installation directory. Defines the COMPONENT as Runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: This snippet sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL within the 'ephemeral' directory, and published to parent scope. The published variables are available to the install step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Removing Flutter Assets Directory\nDESCRIPTION: Removes the Flutter assets directory before installing new assets. This ensures that the installed assets are up-to-date and prevents stale files from previous builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Settings\nDESCRIPTION: This snippet configures settings for cross-building, specifically setting the CMAKE_SYSROOT and CMAKE_FIND_ROOT_PATH variables based on the FLUTTER_TARGET_PLATFORM_SYSROOT variable. This is useful when building for a different target platform.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Pointer Update Exception Fix - Flutter\nDESCRIPTION: The disposed exception that previously occurred when a pointer was dynamically updated in the radial gauge has been fixed. This ensures that pointer updates can be made without causing the gauge to throw an exception and helps maintain stability and reliability.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nRadial Gauge\n```\n\n----------------------------------------\n\nTITLE: Set CMake Policy\nDESCRIPTION: Sets a specific CMake policy to NEW. This controls how CMake handles certain behaviors or warnings.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Directories\nDESCRIPTION: This snippet defines variables for the data and library installation directories within the bundle. These variables are used in subsequent install commands.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the ICU data file to the data directory within the build bundle. The ICU data file is required for internationalization support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the `FLUTTER_LIBRARY` variable, which points to the Flutter Linux GTK shared library.  Also sets the ICU data file, project build directory, and AOT library paths, making them available in the parent scope for install steps.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: Adds definitions for UNICODE and _UNICODE to the compiler flags. This ensures that the project uses Unicode character encoding.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the library directory within the installation prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Define Standard Compilation Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings to a target, including C++ standard, compiler warnings, and optimization flags. This helps maintain consistency across all targets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Bundle Directory\nDESCRIPTION: This snippet removes the existing build bundle directory during installation to ensure a clean build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains platform-specific settings and dependencies required for the build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: Sets the CMAKE_INSTALL_PREFIX to the build bundle directory, which determines where the application will be installed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: This snippet checks if the `CMAKE_INSTALL_PREFIX` is initialized to its default value. If it is, it sets the install prefix to the `BUILD_BUNDLE_DIR`. This ensures that the application is installed into the build bundle directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the runner directory as a subdirectory, which contains the application build rules.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Sources (App)\nDESCRIPTION: Defines the list of app-related C++ wrapper source files.  Transforms the source file names to include the wrapper root directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the location of the ephemeral directory, which contains generated configuration files and the Flutter engine. This directory is typically managed by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the `generated_config.cmake` file from the ephemeral directory. This file contains configurations generated by the Flutter tool, such as toolchain settings and project-specific configurations. Dependencies include the existence of this file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT library for non-Debug builds. This section is skipped when building in Debug mode.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT (Ahead-of-Time) compiled library to the data directory within the installation prefix for 'Profile' and 'Release' builds. This library contains pre-compiled code for improved performance.  The component is set to 'Runtime'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Application Subdirectory\nDESCRIPTION: Adds the runner directory as a subdirectory to the build, which contains the application-specific code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This snippet defines a list of Flutter library headers and then prepends the path to the flutter_linux directory in the ephemeral directory to each of those files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Installing plugin libraries\nDESCRIPTION: Installs bundled plugin libraries to the library directory within the bundle, if any are present.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Scope Variables\nDESCRIPTION: Sets variables in the parent scope to make them available to other CMake files or build scripts. These variables include the Flutter library path, ICU data file path, project build directory, and AOT library path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Adds an interface library named `flutter`.  This library is used to group the necessary include directories and link libraries for using the Flutter engine. It specifies the include directories and the Flutter library itself.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Add executable target for the Flutter app\nDESCRIPTION: Defines the executable target for the Flutter application.  It specifies the source files that are included in the build, defining the entrypoint and core logic of the Windows application. The WIN32 keyword specifies that this is a Windows executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up installation directories\nDESCRIPTION: This section defines installation directories relative to the executable and sets the installation prefix. It also enables the install step by default in Visual Studio.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (Core)\nDESCRIPTION: Defines the C++ source files for the core wrapper components. These files provide the core functionality for interacting with the Flutter engine from C++ code. The `list(TRANSFORM)` command prepends the wrapper root directory to each source file path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for shared libraries\nDESCRIPTION: Sets the RPATH (Run-Time Search Path) for the installed executable.  This ensures that the executable can find its shared libraries at runtime.  `$ORIGIN` specifies that the libraries are located in the same directory as the executable, or in a subdirectory named `lib`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the directory where the application bundle will be created during installation. If CMAKE_INSTALL_PREFIX is at the default, override it with a bundle directory within the project binary directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Sets the minimum required CMake version for the project. This ensures that the CMake version used to build the project meets the minimum requirements for the commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Applying standard compiler settings\nDESCRIPTION: Defines a function APPLY_STANDARD_SETTINGS to apply standard compiler settings to a target. It sets the C++ standard to C++17, enables warnings, disables exceptions, and adds debug definitions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version and Project Directories\nDESCRIPTION: This snippet sets the minimum required CMake version and defines project directories for ephemeral files and the C++ client wrapper.  It also includes a generated configuration file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the lib directory in the install prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Assembly\nDESCRIPTION: Defines a custom command that runs the Flutter tool backend to assemble the Flutter application. It specifies the output files and the command to execute.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target in CMake\nDESCRIPTION: This snippet adds an executable target named `${BINARY_NAME}` for the Windows platform, listing the source files required for building the application. It also includes resource files and a manifest.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: This snippet sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL within the ephemeral directory, it is then published to the parent scope for install step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for Executable\nDESCRIPTION: This code sets the output directory for the executable to `intermediates_do_not_run` within the binary directory.  This prevents users from accidentally running the unbundled executable, as it requires resources to be in the correct relative locations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Prepend Header Paths\nDESCRIPTION: Prepends the path to the flutter_linux directory within the ephemeral directory to the list of FLUTTER_LIBRARY_HEADERS. This ensures that the compiler can find the header files when compiling code that uses the Flutter library. Uses the previously defined list_prepend function.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend Function\nDESCRIPTION: Defines a function `list_prepend` that prepends a prefix to each element in a list.  This is a workaround for older CMake versions that lack the `list(TRANSFORM ... PREPEND ...)` command.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet initializes the CMake project, specifies the minimum required CMake version, and defines the project name. It also adds an executable target named ${BINARY_NAME} that builds the Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Application Executable\nDESCRIPTION: This snippet installs the application executable to the installation directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Type\nDESCRIPTION: Configures the build type if it's not already set. It defaults to \"Debug\" and allows users to choose between \"Debug\", \"Profile\", and \"Release\" build modes. The build type affects compiler optimizations and debugging information.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Removing Previous Bundle Directory\nDESCRIPTION: This code uses the `install(CODE)` command to remove the existing build bundle directory at the beginning of the installation process.  This ensures a clean build and prevents stale files from previous installations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Find GTK Package\nDESCRIPTION: Finds the GTK (Gimp Toolkit) package using pkg-config. GTK is a cross-platform toolkit for creating graphical user interfaces. This is a system-level dependency.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Library\nDESCRIPTION: Installs the Flutter library to the lib directory within the application bundle. This library contains the core Flutter runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining APPLY_STANDARD_SETTINGS Function\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. This includes setting the C++ standard, compiler options, and definitions. Disables exceptions and defines debug configuration.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: CMake Target Settings\nDESCRIPTION: This applies standard settings to the executable target, adds a preprocessor definition to disable min/max macros, links required libraries (flutter, flutter_wrapper_app), sets the include directories, and adds a dependency on flutter_assemble.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the install prefix under the Runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Set minimum CMake version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used is compatible with the features and syntax used in the CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the `WRAPPER_ROOT` variable, pointing to the directory containing C++ wrapper code. This wrapper provides an interface between the Flutter engine and native Windows code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Defining Settings for Profile Build Mode\nDESCRIPTION: Defines settings for the Profile build mode, linking flags, and compiler flags. It copies the release settings to the profile build mode.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the output binary to \"example\". This variable is used later in the script when defining the target executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Managed Directory\nDESCRIPTION: This snippet defines the directory where Flutter-related files are managed. The FLUTTER_MANAGED_DIR variable is used to include the Flutter build rules. It points to the 'flutter' directory within the project's source directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Setting binary name\nDESCRIPTION: Sets the binary name of the executable. This defines the name of the final executable file that will be built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Defines a list of Flutter library headers. These headers are essential for compiling code that uses the Flutter Linux embedder API. The `list_prepend` function prepends the path to the ephemeral directory to each header file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the build, enabling Flutter-specific build rules.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet sets a CMake policy to NEW. CMake policies manage compatibility between different CMake versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Bundle Directory\nDESCRIPTION: Adds an install step to remove the existing build bundle directory before each build. This ensures a clean install and prevents stale files from previous builds from causing issues.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter library. This path is used to link the Flutter engine with the application. The path is also published to the parent scope for the install step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assemble\nDESCRIPTION: Adds a custom command to run the Flutter tool backend. This command is responsible for assembling the Flutter library and headers. It depends on the flutter tool environment and the target platform.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (Core)\nDESCRIPTION: Defines the core C++ wrapper source files.  These sources implement core functionalities needed for the wrapper. The list is transformed to include the full path to each source file within the wrapper root directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: Sets the installation prefix to the build bundle directory if it was initialized to its default value. This ensures that the application and its dependencies are installed into the correct location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: This snippet creates a static library named `flutter_wrapper_app` using core and application wrapper sources. It applies standard settings and links the Flutter interface library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix and Bundle Directory\nDESCRIPTION: This code sets the installation prefix and defines the build bundle directory.  If the installation prefix is the default, it will be set to the build bundle directory, which is used to create a relocatable bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies with PkgConfig\nDESCRIPTION: Uses `PkgConfig` to locate system-level dependencies like GTK, GLib, and GIO. These dependencies are required for the Flutter Linux embedder to interact with the host operating system. The `IMPORTED_TARGET` option creates imported targets that can be linked against.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend function\nDESCRIPTION: Defines a CMake function called `list_prepend` that prepends a given prefix to each element of a list. This function is used to add a directory prefix to header files. It's defined because `list(TRANSFORM ... PREPEND ...)` is not available in CMake 3.10.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet adds the executable target, specifying the source files to be compiled. The executable is named based on the `BINARY_NAME` variable. Includes main.cc, my_application.cc, and generated_plugin_registrant.cc.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding syncfusion_flutter_pdfviewer as a dependency\nDESCRIPTION: This code snippet demonstrates how to add the `syncfusion_flutter_pdfviewer` package as a dependency in your Flutter project's `pubspec.yaml` file. This is required to use the PDF viewer plugin. The minimum version is specified as `^20.3.0`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n...\ndependencies:\n  ...\n  syncfusion_flutter_pdfviewer: ^20.3.0\n  ...\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. This includes setting C++ standard, enabling warnings as errors, and setting optimization levels based on the build configuration (Debug vs. Release/Profile).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Set minimum CMake version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Variables\nDESCRIPTION: This snippet defines variables for the binary name and application ID, and sets CMake policy CMP0063.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake File\nDESCRIPTION: Includes a CMake file that handles the build rules for Flutter plugins.  This manages building the plugins and adding them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding custom target for Flutter assemble\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and header files. This target is used to trigger the custom command that builds the Flutter library. The dependencies ensure that the target will execute the custom command that builds the flutter library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Flags\nDESCRIPTION: Sets the compiler and linker flags for the 'Profile' build configuration to be the same as the 'Release' configuration. This ensures that the 'Profile' build has similar optimizations to 'Release'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Linker and Compiler Flags for Profile Build\nDESCRIPTION: This snippet sets the linker and compiler flags for the 'Profile' build type to be the same as the 'Release' build type. This ensures consistent optimization levels.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Linker and Compiler Flags for Profile Mode\nDESCRIPTION: This snippet sets the linker and compiler flags for the 'Profile' build mode to be the same as the 'Release' build mode, optimizing for performance profiling.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and header files. This ensures that the custom command to assemble the Flutter library is executed before any target that depends on the `flutter_assemble` target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assemble\nDESCRIPTION: Adds a custom target named flutter_assemble that depends on the Flutter library and headers. This target ensures that the custom command for assembling the Flutter library is executed before any targets that depend on it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the path to the Flutter library (`libflutter_linux_gtk.so`). This path is then published to the parent scope for use in the installation step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: This snippet adds a custom target named `flutter_assemble` that depends on the Flutter library and header files. This target ensures that the Flutter library is assembled before other targets that depend on it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Type\nDESCRIPTION: This snippet configures the build type if it's not already set. It defaults to \"Debug\" and provides options for \"Debug\", \"Profile\", and \"Release\".\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: Installs plugin bundled libraries to the library directory within the installation prefix. This ensures that plugins are installed along with the application.  The component is set to 'Runtime'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build.  This handles the Flutter specific build rules.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Output Directory\nDESCRIPTION: This snippet sets the runtime output directory for the binary, placing it in a subdirectory to prevent users from running the unbundled copy.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the installation prefix. The component is set to 'Runtime' to categorize it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter` and sets its include directories and link libraries.  It links against the system libraries GTK, GLib, GIO, BLKID, and LZMA. It also adds the flutter assemble target as a dependency.  Interface libraries are used to propagate include directories and link dependencies without creating a physical library file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file, which manages the building of plugins and their integration into the application. This ensures that the plugins are built and linked correctly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Uses `pkg_check_modules` to find system-level dependencies such as GTK, GLIB, and GIO. These dependencies are required for the Flutter application to interact with the Linux system.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the path to the 'ephemeral' directory, which likely contains generated files and configurations. This path is used to locate dependencies and other resources needed during the build process. Using a variable makes it easier to update the location if necessary.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the main Flutter library. The file specified by `${FLUTTER_LIBRARY}` is installed into the directory specified by `${INSTALL_BUNDLE_LIB_DIR}` under the 'Runtime' component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Creates a custom command to run the Flutter tool backend. This command is responsible for assembling the Flutter library and generating the necessary header files and wrapper sources. It depends on the Flutter tool and the specified configuration. It uses a phony output to force the command to run every time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Include Install to Default Build\nDESCRIPTION: Sets the \"install\" step as the default build step, ensuring that the application can be run after building from Visual Studio.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: Sets the directory containing the Flutter-managed source files. Defines the path to the Flutter integration within the CMake project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Creating App Wrapper Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` for the runner application. It includes core and app implementation sources and links against the `flutter` interface library. Includes directories are configured to point to the wrapper's include directory. flutter_assemble is added as a dependency.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable to the installation prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Flags\nDESCRIPTION: This snippet sets the linker and compiler flags for the 'Profile' build type to be the same as the 'Release' build type.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Assembly\nDESCRIPTION: This snippet defines a custom command to run the Flutter tool backend script to assemble the Flutter library and related components. It specifies the outputs of the command, the command to execute, and the environment variables to use. It depends on the Flutter tool being available and configured correctly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake File\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages the plugin build rules.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Asset Directory\nDESCRIPTION: Adds an install step to remove the existing Flutter assets directory before copying the new assets. This ensures that only the latest assets are included in the bundle and prevents stale files from causing issues.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT (Ahead-of-Time) compiled library to the lib directory within the build bundle, but only for non-Debug builds. This improves performance in Release and Profile builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: This adds a custom target named `flutter_assemble` that depends on the Flutter library, headers, and C++ wrapper sources. This target triggers the custom command to assemble the Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the lib directory within the installation bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: This snippet adds a custom target named `flutter_assemble` that depends on the Flutter library, header files, and C++ wrapper sources. This target triggers the Flutter assembly process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Uses PkgConfig to find system-level dependencies, specifically GTK (gtk+-3.0). PkgConfig helps locate libraries and their associated include directories and linker flags.  The REQUIRED flag ensures that the build fails if GTK is not found.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration\nDESCRIPTION: This snippet defines the build configuration options, setting the CMAKE_BUILD_TYPE to \"Debug\" if it's not already set. It also sets the available build type strings.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This snippet appends a list of header files related to the Flutter library to the `FLUTTER_LIBRARY_HEADERS` variable. It then prepends the `EPHEMERAL_DIR` to each header file path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT (Ahead-Of-Time) compiled library (`AOT_LIBRARY`) to the `data` subdirectory of the installation prefix.  This is done only for Profile and Release builds. The runtime component is specified.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Defines the list of Flutter library headers and prepends the `EPHEMERAL_DIR` to each header path. This ensures that the headers can be found during compilation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Project Properties\nDESCRIPTION: This snippet sets the minimum required CMake version, defines the project name and supported languages (CXX), sets the binary name and application ID, and sets CMake policy CMP0063 to NEW.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: This snippet sets the `EPHEMERAL_DIR` variable to the absolute path of the 'ephemeral' directory within the current source directory. This directory is used to store generated configuration files and other temporary build artifacts.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: This sets the `EPHEMERAL_DIR` variable to the directory containing ephemeral files. These are files generated by the Flutter tool during the build process.  It's used as a base path for other paths.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Prepend Path to Flutter Headers\nDESCRIPTION: Prepends the path to the Flutter Linux headers to the `FLUTTER_LIBRARY_HEADERS` list, ensuring that the compiler can find them during compilation. This utilizes the `list_prepend` function defined earlier in the file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Flags\nDESCRIPTION: Sets the linker and compiler flags for the Profile build configuration to be the same as the Release configuration. This ensures that the Profile build has similar optimizations to the Release build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet sets the `EPHEMERAL_DIR` variable to the absolute path of the 'ephemeral' directory within the source directory. This directory typically contains generated configuration files and other temporary build artifacts.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Shared Libraries\nDESCRIPTION: This code sets the RPATH (Runtime Path) for shared libraries to `$ORIGIN/lib`.  This ensures that the application can find its shared libraries at runtime relative to its own location within the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: This snippet defines settings for the Profile build mode, copying the linker and compiler flags from the Release build mode.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Installation\nDESCRIPTION: Sets the RPATH (Run-Path) for the installed executable to `$ORIGIN/lib`. This ensures that the executable can find its shared libraries at runtime by looking in the `lib` directory relative to the executable's location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Libraries\nDESCRIPTION: Sets the runtime path (RPATH) for the installed executable to find its shared libraries.  `$ORIGIN/lib` instructs the dynamic linker to search for libraries in the 'lib' subdirectory of the directory containing the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This ensures that the custom command to assemble the Flutter library is executed before any target that depends on `flutter_assemble`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory Variable\nDESCRIPTION: This snippet sets the `WRAPPER_ROOT` variable to the absolute path of the 'cpp_client_wrapper' directory within the 'ephemeral' directory.  This directory likely contains C++ wrapper code for interfacing with Flutter.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets a CMake policy to 'NEW'.  Specifically, it sets CMP0063 to 'NEW', which affects how CMake handles target directories in install commands. It's related to controlling how relative paths are interpreted during installation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: This snippet uses `find_package` to locate the PkgConfig package and then uses `pkg_check_modules` to find the GTK library. This makes GTK available as an imported target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: This CMake function `list_prepend` prepends a given prefix to each element in a list. This emulates `list(TRANSFORM ... PREPEND ...)` which is unavailable in CMake 3.10.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type\nDESCRIPTION: This snippet sets the default build type to 'Debug' if CMAKE_BUILD_TYPE is not already set, and defines allowed values for it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the ephemeral directory path, which likely contains generated or temporary files used during the build process. This allows for easy referencing of files within that directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake features used in the file are supported by the CMake version available on the build system. Using a lower version may lead to build errors.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Finding Package GTK\nDESCRIPTION: Finds the GTK library using pkg-config.  It's marked as REQUIRED so the build will fail if it can't be found. IMPORTED_TARGET creates a CMake target that can be linked against.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target is used to ensure that the Flutter library is built before anything that depends on it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: If the `CMAKE_INSTALL_PREFIX` variable has not been initialized, it is set to the `BUILD_BUNDLE_DIR`.  This variable determines where the application will be installed during the installation process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Making Install Step Default\nDESCRIPTION: Makes the install step the default build action. This ensures that the installation step is executed after the build, copying the necessary files into place.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: Sets the installation directories for data files and libraries within the bundle. These directories will be used to store the application's assets and shared libraries during the installation process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting linker flags\nDESCRIPTION: Sets linker flags for the Profile build type, copying the Release linker flags. These are used to optimize the build for performance profiling.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the ICU data file to the data directory within the installation bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a CMake function list_prepend that prepends a prefix to each element in a list. This function is used to modify list variables by adding a prefix to each item in the list. It works by iterating through the list and appending the prefix to each element, then updating the list variable in the parent scope.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build process. This allows CMake to process the CMakeLists.txt file within the Flutter directory, enabling the build of Flutter libraries and tools.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Flags\nDESCRIPTION: Sets linker and compiler flags for the Profile build type to be the same as the Release build type.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Set Build Bundle Directory\nDESCRIPTION: Sets the directory where the application bundle will be built. It uses the target file directory of the binary.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the installation's data directory. The ICU data file contains locale-specific data required for internationalization.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Headers\nDESCRIPTION: Defines the list of header files that are part of the Flutter library interface. These headers are needed to compile code that uses the Flutter library.  Transforms the header file names to include the ephemeral directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Executable and Application ID\nDESCRIPTION: This snippet sets the binary name of the executable and the GTK application identifier.  It defines the `BINARY_NAME` which determines the on-disk name of the application and the `APPLICATION_ID` which is the unique GTK application identifier.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"chat_example\")\nset(APPLICATION_ID \"com.syncfusion.chat_example\")\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Settings Function\nDESCRIPTION: This snippet defines a CMake function `APPLY_STANDARD_SETTINGS` that applies common compile features, options, and definitions to a target.  It configures C++ standard, warnings, exception handling, and debug configurations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Building Executable\nDESCRIPTION: This snippet adds the executable target, specifies source files, applies standard settings, and links against required libraries (Flutter and GTK). It also sets the output directory to avoid running unbundled copies.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Application build\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Appending to Flutter Library Headers List\nDESCRIPTION: This snippet appends a list of header files to the `FLUTTER_LIBRARY_HEADERS` list. These headers are likely required for interacting with the Flutter library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter library (`libflutter_linux_gtk.so`) located in the ephemeral directory. The path is then made available to the parent scope.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Project with CXX Language\nDESCRIPTION: This snippet defines the project name as \"example\" and specifies that it uses the CXX (C++) language. This sets up the basic project structure and enables C++ compilation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Installation\nDESCRIPTION: Sets the RPATH (Run-Time Search Path) for the installed executable, allowing it to find shared libraries at runtime. Uses `$ORIGIN` to specify a relative path to the executable's directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: Defines the directories for installing data and library files within the application bundle.  `INSTALL_BUNDLE_DATA_DIR` is used for data files, while `INSTALL_BUNDLE_LIB_DIR` is used for library files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Appending Plugin C++ Wrapper Sources\nDESCRIPTION: This snippet appends plugin-related C++ wrapper source files to the `CPP_WRAPPER_SOURCES_PLUGIN` variable. It then prepends the `WRAPPER_ROOT` to each source file path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This sets the `EPHEMERAL_DIR` variable to the directory containing generated configuration files. It's used as a base path for other related files and configurations generated by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.15. This ensures that the CMake version used to build the project is compatible with the features and syntax used in the CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Setting up dependencies\nDESCRIPTION: This CMake code sets up dependencies for the executable, ensuring that the Flutter assemble task is completed before building the runner application. It ensures the flutter_assemble target is built before building the ${BINARY_NAME}.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes a CMake file named `generated_plugins.cmake` located in the flutter directory. This file contains build rules for managing Flutter plugins used in the application. It builds and adds the plugins to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.10. This ensures that the CMake features used in the script are compatible with the CMake version used to build the project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Appending App C++ Wrapper Sources\nDESCRIPTION: This snippet appends application-related C++ wrapper source files to the `CPP_WRAPPER_SOURCES_APP` variable. It prepends the `WRAPPER_ROOT` to each source file path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This snippet defines the `FLUTTER_LIBRARY` variable, which stores the path to the Flutter Windows DLL. It also publishes this variable to the parent scope for installation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Target Platform Variable\nDESCRIPTION: This snippet sets the `FLUTTER_TARGET_PLATFORM` variable to a default value of \"windows-x64\" if it is not already defined. This is a fallback configuration for older versions of the flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: This snippet defines the `WRAPPER_ROOT` variable, pointing to the directory containing C++ wrapper code that interfaces with the Flutter engine. This directory is essential for building the C++ components.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install Step as Default\nDESCRIPTION: Sets the `CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD` variable to 1, making the \"install\" step the default build action in Visual Studio. This is necessary because the install step is required to run the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets a specific CMake policy (CMP0063) to NEW. CMake policies control how CMake behaves in certain situations. Setting a policy to NEW adopts the new behavior introduced in CMake. Policies help maintain compatibility across CMake versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the `WRAPPER_ROOT` variable, which specifies the location of the C++ client wrapper code. This wrapper provides an interface between Flutter and native Windows code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: This snippet defines the installation directories for data and libraries relative to the CMAKE_INSTALL_PREFIX.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Uses pkg-config to find system-level dependencies such as GTK, GLIB, and GIO. These dependencies are required for the Flutter Linux runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH\nDESCRIPTION: This snippet sets the runtime path (RPATH) for the executable to '$ORIGIN/lib', ensuring that the application can find its shared libraries at runtime relative to its location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Directory\nDESCRIPTION: Sets the runtime output directory for the executable. This ensures that the executable is placed in a subdirectory to prevent users from running the unbundled copy.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Definitions\nDESCRIPTION: Adds preprocessor definitions `-DUNICODE` and `-D_UNICODE` to ensure Unicode support in the project. These definitions are essential for handling wide character strings and Unicode-related functionalities.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: Sets the installation prefix to the build bundle directory if it hasn't been explicitly set. This ensures that the application is installed to the correct location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: Installs any bundled libraries from plugins to the lib directory within the build bundle.  These are the native libraries of plugins included in the app.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets up the basic CMake project, defining the minimum required CMake version and the project name. It also specifies that the project uses C++.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: Sets the install prefix to the build bundle directory if it was initialized to the default value. This ensures that the application is installed in the correct location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add dependency on Flutter assembly\nDESCRIPTION: Adds a dependency to ensure that the Flutter assembly task is executed before building the executable. This guarantees that Flutter assets and code are compiled and ready before linking.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet sets the CMake policy CMP0063 to NEW. CMake policies are used to control the behavior of CMake commands and ensure compatibility across different versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: Installs the assets directory to the bundle. The install(CODE) part ensures the directory is cleared first, preventing stale files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\"\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: Specifies the minimum required version of CMake for the project.  This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the location of the ephemeral directory, which contains generated configuration files and the Flutter library.  This variable is used to locate other required files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name and Application ID\nDESCRIPTION: Sets the binary name and application ID for the project. The binary name determines the name of the executable, and the application ID uniquely identifies the application. APPLICATION_ID is used to set -DAPPLICATION_ID compiler definition.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: This snippet sets the `WRAPPER_ROOT` variable to the absolute path of the 'cpp_client_wrapper' directory inside the `EPHEMERAL_DIR`. This path is used to locate the C++ wrapper source files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Transforming Flutter Library Headers List\nDESCRIPTION: This snippet transforms each element in the `FLUTTER_LIBRARY_HEADERS` list by prepending the `EPHEMERAL_DIR` path to it, creating the absolute path for each header file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet sets the CMake policy CMP0063 to NEW, which affects how CMake handles certain features. It helps maintain compatibility across different CMake versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the BUILD_BUNDLE_DIR variable to the directory where the target file will be located after the build.  This defines where to install the files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the `BUILD_BUNDLE_DIR` variable to the directory where the executable file will be located. This is used for installing support files next to the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains build settings and variables specific to the Flutter project. Including it allows the CMake build process to integrate with the Flutter toolchain.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH\nDESCRIPTION: Sets the runtime search path (RPATH) for the executable to the 'lib' directory relative to the executable's location. This allows the executable to find shared libraries at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting ICU Data File Path\nDESCRIPTION: This snippet defines the `FLUTTER_ICU_DATA_FILE` variable, storing the path to the ICU data file used for internationalization. The variable is published to the parent scope.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the CMake project. This likely contains CMake build scripts provided by Flutter for building the Flutter engine and related components.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: Installs the bundled plugin libraries to the lib directory, if any exist. Includes the plugin dependencies in the installed application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources\nDESCRIPTION: Defines the lists of C++ wrapper sources for core implementations, plugin registrar, and the Flutter engine. The `WRAPPER_ROOT` is prepended to each source path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file for building plugin targets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This sets the minimum required CMake version to 3.15. This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Installing Binary\nDESCRIPTION: Installs the main executable to the installation prefix, under the Runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compiler Settings\nDESCRIPTION: This function applies standard compiler features, options, and definitions to the specified target.  It sets the C++ standard to C++14, adds compiler warnings as errors, and enables optimizations and disables debug assertions for non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers provide the necessary interfaces for interacting with the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Languages\nDESCRIPTION: This snippet defines the project name and specifies the programming languages used in the project. It's essential for CMake to recognize and process the source files correctly. Here, CXX is used indicating the project will use C++.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Defining APPLY_STANDARD_SETTINGS Function\nDESCRIPTION: This function applies standard compiler settings to a target. It sets the C++ standard to C++17, enables warnings and treats them as errors, enables exception handling, and disables exception support.  It also defines _DEBUG for Debug configurations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: Installs the assets directory to the installation directory.  This directory contains the application's assets, such as images, fonts, and other resources.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flags for Profile Build Type\nDESCRIPTION: This snippet sets the linker and compiler flags for the \"Profile\" build type to be the same as the \"Release\" build type.  This is a common practice to optimize performance in profile builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the root directory for the C++ client wrapper code. This allows referencing source files and header files within the wrapper directory using a consistent path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Including generated plugins\nDESCRIPTION: This snippet includes the generated plugin build rules, which manage building the plugins and adding them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH\nDESCRIPTION: Sets the RPATH (runtime search path) for the installed executable to '$ORIGIN/lib'. This allows the executable to find its shared libraries at runtime relative to its location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings. It ensures that the project uses newer CMake features.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: Sets the FLUTTER_MANAGED_DIR variable to point to the 'flutter' directory within the current source directory.  This directory contains Flutter-related build files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake File\nDESCRIPTION: This code includes the `generated_plugins.cmake` file located in the `flutter` directory.  This file contains the build rules for any Flutter plugins used in the application, ensuring that the plugins are built and linked correctly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Asset Directory\nDESCRIPTION: Removes and then installs the asset directory to ensure a clean installation. This avoids stale files from previous builds. Uses install(CODE) to execute a command at install time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This defines a function `APPLY_STANDARD_SETTINGS` that applies standard compilation settings to a given target, including C++14 standard, warning flags, optimization levels, and debug definitions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Managed Directory\nDESCRIPTION: This line adds the Flutter managed directory (containing auto-generated code) as a subdirectory to the build. This allows CMake to discover and build Flutter-related targets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: This snippet sets the installation prefix to the build bundle directory. This specifies where the application will be installed during the install step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions\nDESCRIPTION: This snippet adds preprocessor definitions to the executable target for managing the Flutter version. These definitions allow the application to access the Flutter version information during compilation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.14 and declares the project name as 'syncfusion_pdfviewer_windows_example', specifying CXX as the language.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(syncfusion_pdfviewer_windows_example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Sets the minimum required version of CMake to 3.15, ensuring compatibility with the features used in the build script. This is a standard practice for CMake projects to specify the minimum CMake version required to process the CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake features used in the script are supported by the CMake version installed on the system. It sets the lower bound for CMake compatibility.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Variables\nDESCRIPTION: Defines variables for key directories like the ephemeral directory (containing generated files) and the C++ wrapper directory. These variables are used throughout the configuration to locate source files and libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name and specifies that the project uses C++ as a language. The project name is used for various build artifacts and targets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: This snippet sets the install prefix to the build bundle directory, ensuring that the installed files are placed next to the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet sets the `EPHEMERAL_DIR` variable to the absolute path of the 'ephemeral' directory within the current source directory. This directory contains generated configuration files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Libraries\nDESCRIPTION: This snippet sets the RPATH (Run-Time Search Path) for bundled libraries. This allows the application to find the libraries at runtime by specifying a path relative to the binary.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Defines a list of Flutter library header files and prepends the ephemeral directory path to each of them.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the ICU (International Components for Unicode) data file to the installation directory.  This file is required for proper localization and internationalization support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project meets the minimum requirements to interpret the CMakeLists.txt file correctly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Directories\nDESCRIPTION: Defines and sets the project's ephemeral directory, which contains generated configuration files. It also includes the generated configuration file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used is compatible with the commands and features used in the build script.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Name and Application ID\nDESCRIPTION: This snippet defines the binary name as 'example' and the application ID as 'com.syncfusion.example'. It also sets the install rpath.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.syncfusion.example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Languages\nDESCRIPTION: Defines the project name as \"chat_example\" and specifies that the project uses C++ (CXX). This is a fundamental step in setting up the CMake project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(chat_example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: Sets the `FLUTTER_MANAGED_DIR` variable to the `flutter` subdirectory of the current source directory. This variable is used to locate Flutter-related build files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Install AOT Library\nDESCRIPTION: Installs the AOT library to the data directory within the installation prefix for Profile and Release configurations, marking it as a runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a generated configuration file from the ephemeral directory. This file likely contains configurations provided by the Flutter tool. The file path is constructed using the `EPHEMERAL_DIR` variable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH\nDESCRIPTION: Sets the runtime path (RPATH) for the executable. This allows the application to find its shared libraries at runtime. $ORIGIN means relative to the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and the project name. It also indicates that the project uses C++.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the `BUILD_BUNDLE_DIR` variable to the directory where the built executable will be placed. This directory is used as the base for the installation prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet creates an interface library named `flutter`. It specifies the include directories and links the Flutter library for the interface.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Removing Build Bundle Directory\nDESCRIPTION: Removes the build bundle directory before each install. This ensures that the bundle is built from scratch and avoids stale files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH\nDESCRIPTION: Sets the runtime path for shared libraries to be relative to the origin of the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Type\nDESCRIPTION: Configures the build type (Debug, Profile, Release) if not already specified. Sets Debug as the default if not specified.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Target and Files\nDESCRIPTION: These `install` commands specify where to install the binary, ICU data file, and Flutter library.  It also copies plugin libraries if they are bundled.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: This snippet defines the FLUTTER_MANAGED_DIR variable, which points to the 'flutter' subdirectory containing the Flutter engine build files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build. This allows CMake to process the CMakeLists.txt file within the Flutter directory and build the Flutter library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.10 and declares the project name as 'runner' with CXX as the language.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: Defines the directory where Flutter-related files are located.  This directory is typically named `flutter` and contains the Flutter engine and plugin-related files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: Adds an executable target to the build. This defines the source files that will be compiled and linked to create the executable binary.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a generated CMake configuration file from the ephemeral directory. This file contains configurations provided by the Flutter tool, such as build settings and dependency information.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a CMake configuration file generated by the Flutter tool, located in the `EPHEMERAL_DIR`. This file provides project-specific configuration settings necessary for the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: Sets the installation directories for data and libraries. `INSTALL_BUNDLE_DATA_DIR` is set to `CMAKE_INSTALL_PREFIX/data` and `INSTALL_BUNDLE_LIB_DIR` is set to `CMAKE_INSTALL_PREFIX`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Sources (Plugin)\nDESCRIPTION: Defines the list of plugin-related C++ wrapper source files.  Transforms the source file names to include the wrapper root directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: Sets the variable `FLUTTER_MANAGED_DIR` to the path of the Flutter directory within the project. This directory contains the Flutter library and tool build rules.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory\nDESCRIPTION: Sets the runtime output directory for the executable. This moves the executable to a subdirectory to avoid accidental execution of the unbundled binary.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated CMake Configuration\nDESCRIPTION: This snippet includes a generated CMake configuration file from the `EPHEMERAL_DIR` directory. This file likely contains configurations provided by the Flutter tool during the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMAKE_INSTALL_PREFIX\nDESCRIPTION: This snippet sets the CMAKE_INSTALL_PREFIX to the BUILD_BUNDLE_DIR if it was initialized to the default value. This is where the application will be installed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Bundled Plugin Libraries\nDESCRIPTION: Installs bundled plugin libraries to the library directory within the installation prefix, marking them as a runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and the project name, along with the supported language (CXX).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.15. This ensures that the project can be built with CMake version 3.15 or higher.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used is compatible with the commands and features used in the build script.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target\nDESCRIPTION: Links the Flutter engine and GTK libraries to the executable target. These libraries provide the necessary functionality for the Flutter application to run.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: Installs any bundled plugin libraries to the installation directory. These libraries are required for plugins to function correctly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files. This directory is used to locate Flutter-specific configuration files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: This snippet sets the `FLUTTER_MANAGED_DIR` variable to point to the 'flutter' directory in the current source directory.  This directory likely contains CMake scripts and resources managed by the Flutter toolchain.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compile Settings Function\nDESCRIPTION: This CMake function applies a set of standard compilation settings to a given target. It enables C++17 standard, sets warning levels, disables exceptions, and adds debug configurations. APPLY_STANDARD_SETTINGS is called on targets to ensure consistent compilation options.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This command adds a preprocessor definition for the application ID. This allows the application code to access the application ID at compile time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This sets the minimum required CMake version to 3.10. This ensures that the CMake version used to build the project is compatible with the commands and features used in the script.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the `BUILD_BUNDLE_DIR` variable to the directory where the target executable will be located. This is used as the base directory for installation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assemble\nDESCRIPTION: Adds a dependency on the 'flutter_assemble' custom target. This ensures that the Flutter library is assembled before any target that depends on 'flutter' is built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: Sets the variable FLUTTER_MANAGED_DIR to the path of the Flutter directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: Defines variables for the data and library installation directories within the bundle. These variables are used to specify where the application's data and library files are installed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the path to the Flutter library (libflutter_linux_gtk.so) and other required data files like icudtl.dat and makes them available to parent scopes. This is important because these paths are needed during the installation process to copy shared libraries to the correct directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting ephemeral directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the absolute path of the `ephemeral` directory. The path is built from the current source directory `CMAKE_CURRENT_SOURCE_DIR`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Opting in to modern CMake behaviors\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent CMake versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: This snippet sets variables related to the Flutter library, ICU data file, project build directory, and AOT library.  These variables are published to the parent scope for use in installation steps.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file. This allows CMake to process the plugin build rules and add the plugins to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the ephemeral directory path to each header. This ensures that the compiler can locate the header files during the build process. The list is then used to set the include directories for the Flutter interface library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH\nDESCRIPTION: Sets the runtime search path (RPATH) for the executable to find shared libraries at runtime. This allows the executable to find the required libraries without needing environment variables.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring for Cross-Building\nDESCRIPTION: This block configures the build environment for cross-compilation by setting the sysroot and find paths, which are crucial when targeting a different architecture or operating system. It ensures CMake searches in the specified sysroot for packages, libraries, and includes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Support\nDESCRIPTION: Adds preprocessor definitions to enable Unicode support for the project. `-DUNICODE` and `-D_UNICODE` are added to the compilation flags.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: SfLinearGauge Constraints Adjustment - Flutter\nDESCRIPTION: The `SfLinearGauge` widget now correctly adjusts its constraints when the screen is resized. This ensures proper rendering and layout of the gauge across different screen sizes and orientations, improving the user experience on various devices.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nSfLinearGauge\n```\n\n----------------------------------------\n\nTITLE: Finding GTK Package\nDESCRIPTION: Uses PkgConfig to find the GTK (Gimp Toolkit) library.  GTK is a cross-platform toolkit for creating graphical user interfaces.  `REQUIRED` indicates that the build should fail if GTK is not found. `IMPORTED_TARGET` creates an imported target for GTK.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Bundle\nDESCRIPTION: Removes the build bundle directory at the beginning of the installation process. This ensures that the installation starts with a clean slate.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project meets the specified requirements.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the directory where the application bundle will be created.  This directory is named `bundle` and is located in the project binary directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets a specific CMake policy to 'NEW'.  This policy setting affects how CMake handles certain situations and ensures consistent behavior across different CMake versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains settings specific to the Flutter environment, such as paths to dependencies or build flags.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the library directory within the installation prefix. This library contains the core Flutter framework. The component is set to 'Runtime'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes a generated configuration file from the ephemeral directory. This file likely contains settings and variables provided by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a generated configuration file (`generated_config.cmake`) from the ephemeral directory. This file likely contains build-specific settings provided by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the `flutter/generated_plugins.cmake` file, which manages the building of Flutter plugins and adds them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions for UNICODE and _UNICODE, ensuring that the application uses Unicode for all text encoding.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets the CMake policy CMP0063 to NEW.  This configures how CMake handles certain behaviors that have changed between versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.14. This ensures that the CMake project can be built with CMake version 3.14 or higher.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: Adds a compiler definition that makes the application ID available to the C++ code. This allows the application to access its unique identifier at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the BUILD_BUNDLE_DIR variable to the directory where the executable is located. This directory is used for installing support files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This snippet installs bundled plugin libraries, if any, into the installation directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the ICU data file (`FLUTTER_ICU_DATA_FILE`) to the `data` subdirectory of the installation prefix. The runtime component is specified.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Build Directory\nDESCRIPTION: This snippet defines the `PROJECT_BUILD_DIR` variable, pointing to the project's build directory. This is also published to the parent scope.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Apply standard build settings\nDESCRIPTION: Applies a standard set of build settings to the executable. This function is assumed to be defined elsewhere and encapsulates common build configurations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the `generated_config.cmake` file, which contains configuration settings generated by the Flutter tool. This file likely contains platform-specific settings and dependencies.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding definitions for Unicode\nDESCRIPTION: Adds compiler definitions to enable Unicode support for all projects. These definitions ensure that the application handles Unicode characters correctly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name and Application ID\nDESCRIPTION: Sets the binary name and application ID for the project. The binary name defines the name of the executable file, while the application ID uniquely identifies the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library (libflutter_engine.so) to the installation directory.  This library contains the Flutter engine and is essential for running Flutter applications.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions for Unicode support. This ensures that the application is compiled with Unicode enabled.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Target\nDESCRIPTION: Adds a dependency on the `flutter_assemble` target. This ensures that the Flutter assets are built before the executable is linked.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Sets the minimum required CMake version for the project. This ensures that the build system uses a compatible version of CMake.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: Adds the `runner` subdirectory to the build. This likely contains the main application code and associated build scripts.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the ICU data file to the data directory in the installation bundle. The ICU data file is required for internationalization support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: Adds the UNICODE and _UNICODE definitions to ensure Unicode support for all projects. These definitions are used during compilation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This configuration file likely contains project-specific settings and dependencies provided by the Flutter environment.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the project to 3.15. This ensures that the CMake version used to build the project meets the specified requirement.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable\nDESCRIPTION: This snippet links the necessary libraries to the executable target. It links both the Flutter library and the GTK library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the build bundle directory and the default installation prefix. The installation prefix is set to the bundle directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: Sets the binary name for the executable. This variable is used later to define the target executable's name as \"example\".\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This includes the generated configuration file from the ephemeral directory. This file contains configuration options provided by the Flutter tool, influencing the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the installation prefix. The component is Runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets a CMake policy to a new behavior.  CMP0063 relates to the target_sources command and how relative paths are interpreted.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Install to Default Build\nDESCRIPTION: Sets the CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD variable to 1, which makes the install step the default build action in Visual Studio.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name and Application ID\nDESCRIPTION: Sets the name of the executable binary and the application ID. The application ID is often used as the bundle identifier or package name.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Setting AOT Library Path\nDESCRIPTION: This snippet sets the path to the AOT (Ahead-of-Time) compiled library. The variable is published to the parent scope.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: Adds the 'runner' directory as a subdirectory to the build.  This directory typically contains the application's main source code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: CMake Policy Setting\nDESCRIPTION: This snippet sets a CMake policy to NEW. CMake policies are used to manage compatibility between different CMake versions. Setting a policy to NEW uses the new behavior, which can affect how CMake interprets certain commands.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the final executable binary.  It is used later during installation and deployment of the application. It sets the binary name to \"example\".\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.10, ensuring compatibility with the build system's features.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library.  This is the core Flutter engine library that provides the Flutter runtime environment.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup and Executable Definition\nDESCRIPTION: This snippet initializes the CMake project and defines the executable. It specifies the minimum CMake version, sets the project name, and adds the source files needed to build the WIN32 executable.  BINARY_NAME is assumed to be defined elsewhere, likely set by flutter build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the directory where the application bundle will be built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the binary name for the executable to 'example'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Installing the executable\nDESCRIPTION: Installs the executable to the installation prefix, placing it at the top level of the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file. This manages the build rules for Flutter plugins used by the application, and integrates them into the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: This snippet creates a static library named `flutter_wrapper_plugin` from the core and plugin wrapper sources. It applies standard settings, sets properties for position-independent code and hidden C++ visibility, links it to the `flutter` interface library, includes the wrapper root directory, and adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: This snippet adds an interface library named `flutter`. It then sets the include directories and link libraries for this interface, allowing other targets to link against the Flutter library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This section manages the installation of Flutter assets by first removing any existing asset directory and then copying the entire directory from the build directory to the installation directory. This ensures a clean and up-to-date asset deployment.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: Adds the 'runner' directory as a subdirectory in the CMake build process. This likely contains the application build files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Install Bundled Plugin Libraries\nDESCRIPTION: Installs any bundled plugin libraries to the lib directory within the application bundle.  This is conditional based on the PLUGIN_BUNDLED_LIBRARIES variable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet sets the installation directories for data and library files within the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysroot for Cross-Building\nDESCRIPTION: This snippet configures the sysroot for cross-building. If `FLUTTER_TARGET_PLATFORM_SYSROOT` is defined, it sets `CMAKE_SYSROOT` and `CMAKE_FIND_ROOT_PATH` accordingly and adjusts search modes for programs, packages, libraries, and includes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory, building the Flutter engine and related tools.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Libraries\nDESCRIPTION: Installs the bundled plugin libraries to the lib directory in the install prefix, if PLUGIN_BUNDLED_LIBRARIES is set. The COMPONENT Runtime specifies that this is part of the runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets the CMake policy for compatibility. CMP0063 relates to target_sources command.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT library to the installation directory, but only for Profile and Release configurations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a function called `list_prepend` that prepends a prefix to each element in a list. This function emulates the `list(TRANSFORM ... PREPEND ...)` functionality, which is not available in CMake 3.10.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL. This DLL contains the Flutter engine itself.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the \"runner\" subdirectory to the build process. This is where the application-specific code resides.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the project uses a compatible version of CMake.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name and the languages used in the project. In this case, the project is named 'runner' and uses C++.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet sets a CMake policy to NEW. CMake policies are used to ensure compatibility across different CMake versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for shared libraries\nDESCRIPTION: Sets the rpath so that shared libraries will be found at runtime in the lib directory relative to the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the `flutter/generated_plugins.cmake` file, which manages the building and integration of Flutter plugins into the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable file to the installation directory. The `RUNTIME` keyword specifies that the target is an executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the lib directory within the installation prefix. This library contains the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Data and Lib Directories\nDESCRIPTION: Sets the installation directories for data and library files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Installing the Executable\nDESCRIPTION: Installs the executable file (defined by `BINARY_NAME`) to the installation prefix. The runtime component is specified.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build.  This processes the CMakeLists.txt file located in the Flutter directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file contains configuration settings provided by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: Sets the binary name to \"example\". This variable is used to name the executable file that will be built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the installation's lib directory. This is the main Flutter runtime library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This snippet installs the plugin bundled libraries, if any exist. It iterates through the PLUGIN_BUNDLED_LIBRARIES variable and installs each library to the designated library directory. The component is set to 'Runtime'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: Defines a function `APPLY_STANDARD_SETTINGS` to apply standard compilation settings to a target. This includes setting the C++ standard to C++17, enabling warnings, treating warnings as errors, disabling specific warnings (4100), enabling exception handling (/EHsc), and disabling exceptions by setting `_HAS_EXCEPTIONS=0`. Also defines the debug configuration.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the root directory for the C++ client wrapper code, likely containing platform-specific implementations for Flutter plugins and applications.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Project Setup and Executable Definition in CMake\nDESCRIPTION: This CMake snippet initializes the project, sets the minimum required CMake version, and defines the executable including its source files. It specifies WIN32 for a Windows application and includes the generated plugin registrant.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Bundle Directory\nDESCRIPTION: Removes the bundle directory at the start of the installation process to ensure a clean build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: Defines the installation directories for data and libraries within the install prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter Windows DLL and other associated files like ICU data.  These variables are then published to the parent scope for use in installation steps.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file contains configurations provided by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory in the CMake project.  This will process the `CMakeLists.txt` file inside the flutter directory, building the flutter engine and related tools.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: This snippet sets the variable `FLUTTER_MANAGED_DIR` to point to the 'flutter' subdirectory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Finds and imports system-level dependencies using PkgConfig, specifically GTK+-3.0.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the `generated_plugins.cmake` file, which manages the building and linking of plugins into the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a CMake configuration file generated by the Flutter tool. This file likely contains configuration settings specific to the Flutter project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: Sets the name of the output binary executable. This name will be used for the generated executable file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Subdirectory\nDESCRIPTION: Adds the Flutter-managed directory as a subdirectory, enabling the Flutter build rules and integration.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the build process uses a compatible CMake version with necessary features.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet defines the `EPHEMERAL_DIR` variable, which stores the path to the ephemeral directory. This directory contains generated configuration files and pre-built libraries for Flutter.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Project Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file.  A minimum version of 3.10 is specified.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the build bundle directory and sets the `CMAKE_INSTALL_PREFIX` to this directory if it is initialized to its default value.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Name and Application ID\nDESCRIPTION: This section defines the binary name and application ID for the project. These variables are used later in the configuration to set the output name and application identifier.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Target Platform\nDESCRIPTION: Sets the Flutter target platform if not already defined. It provides a fallback configuration for older versions of the Flutter tool. The default target platform is 'windows-x64'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Installation Directories\nDESCRIPTION: Sets the installation directories for data and libraries within the bundle.  INSTALL_BUNDLE_DATA_DIR is for assets, and INSTALL_BUNDLE_LIB_DIR is for shared libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Flags\nDESCRIPTION: This snippet sets the linker and compiler flags for the 'Profile' build type to be the same as those for the 'Release' build type. This is a common practice in Flutter projects.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter tool portions of the build are run before the binary is built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: These snippets define the installation directories for data and libraries within the install prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory. This includes the build rules for the Flutter engine and related tools.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This snippet iterates through the bundled libraries and installs them to the lib directory in the installation bundle. These libraries are plugins or other dependencies that are bundled with the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Installing Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assemble\nDESCRIPTION: Adds a custom command to assemble the Flutter library. This command runs the flutter tool backend script, which generates the library and header files.  A phony file is used to force the command to run every time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Install Executable\nDESCRIPTION: Installs the executable to the designated directory within the application bundle.  The DESTINATION is set to CMAKE_INSTALL_PREFIX, and the component is Runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains platform-specific configurations, compiler flags, and other settings required for building the Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library (`FLUTTER_LIBRARY`) to the installation prefix. The runtime component is specified.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet installs the Flutter assets directory to the data directory, after removing any existing directory, ensuring a clean asset deployment.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the path to the Flutter library (libflutter_linux_gtk.so). This library contains the core Flutter runtime code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to the location of the C++ client wrapper directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: Sets the installation directories for data and libraries within the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds definitions to enable Unicode support for all projects.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: Sets the CMAKE_INSTALL_PREFIX to the build bundle directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: Applies the standard compiler settings defined in the `APPLY_STANDARD_SETTINGS` function to the executable target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Set Executable Output Directory\nDESCRIPTION: Sets the output directory for the executable to a subdirectory to avoid running the unbundled copy, which is intended to prevent users from running the executable directly without the required resources.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake policy\nDESCRIPTION: Sets a CMake policy to NEW. This controls how CMake behaves in certain situations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a preprocessor definition for the application ID.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: Sets the name of the executable binary that will be built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter library\nDESCRIPTION: Installs the Flutter library (engine) to the library directory within the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file, which is expected to be created by the Flutter tool. This file likely contains important settings and paths specific to the Flutter project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the install bundle data directory under the Runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains project-specific settings and dependencies.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: This code sets the minimum required CMake version to 3.10 and declares the project name as \"runner\" with CXX as a supported language. It's crucial for defining the compatibility level and enabling C++ support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: Sets the install prefix to the build bundle directory. If the CMAKE_INSTALL_PREFIX is initialized to the default value, it overrides this to point to the bundle directory. This dictates where the application is installed to.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the designated library directory. The component is set to 'Runtime'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Targets and Files\nDESCRIPTION: This snippet defines the installation rules for the application, including the executable, ICU data file, Flutter library, and plugin bundled libraries. It specifies the destination directories for each component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: Adds preprocessor definitions to enable Unicode support in the project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Name and Application ID\nDESCRIPTION: This snippet defines the binary name of the executable and the application ID. The APPLICATION_ID is used as a preprocessor definition during compilation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: Initializes the CMake project, specifying the minimum required CMake version and the project language.  It sets the project name to \"example\" and specifies C++ as the language.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the lib directory within the installation prefix. The component is Runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: This snippet defines a CMake function called `list_prepend` that prepends a given prefix to each element in a list. It iterates through the input list, adds the prefix to each element, and updates the list in the parent scope. This function is used to prepend the ephemeral directory to the list of Flutter library headers.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the `generated_plugins.cmake` file, which contains build rules for building the Flutter plugins and adding them to the application. This ensures that all plugins are built and linked correctly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Creates an interface library named 'flutter'. Interface libraries are used to propagate usage requirements, such as include directories and link libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Libraries\nDESCRIPTION: Installs bundled plugin libraries to the library directory, if they exist.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the BUILD_BUNDLE_DIR variable to the directory where the built application will be bundled. It uses the TARGET_FILE_DIR generator expression to get the directory of the output binary.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type\nDESCRIPTION: This snippet sets the build type to Debug if it is not already set, and provides options for Profile and Release builds. It allows users to select the build mode.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory\nDESCRIPTION: This snippet installs the Flutter assets directory. It first removes the existing assets directory to ensure a clean copy.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\"\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: Installs bundled plugin libraries to the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Flags\nDESCRIPTION: Sets the linker and compiler flags for the Profile build type to be the same as the Release build type.  This applies specific configurations for the profile build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet sets the CMake policy CMP0063 to NEW.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: Adds the \"runner\" subdirectory for the application build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet sets a specific CMake policy to \"NEW\".\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the library directory within the install prefix. The component is set to \"Runtime\".\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the build system has the necessary features and capabilities.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which represents the path to the ephemeral directory containing generated configuration files. This directory is crucial for integrating Flutter's build output with the native build system.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the Flutter components are assembled before any other targets that depend on them are built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: Defines the `FLUTTER_LIBRARY` variable, which points to the Flutter engine library (`flutter_windows.dll`). This library contains the core Flutter runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n```\n\n----------------------------------------\n\nTITLE: Setting Interface Include Directories\nDESCRIPTION: Sets the include directories for the 'flutter' interface library. This ensures that any target that links against 'flutter' will have the necessary include directories.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets a CMake policy to ensure consistent behavior across different CMake versions. CMP0063 is used to manage dependencies.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros\nDESCRIPTION: This snippet disables Windows macros that may collide with C++ standard library functions by defining NOMINMAX. This prevents potential compilation errors due to naming conflicts.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the `EPHEMERAL_DIR` to each header path.  This list is used to specify include directories for the build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Library\nDESCRIPTION: Installs the Flutter library to the library directory within the installation prefix, marking it as a runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This sets the variable `EPHEMERAL_DIR` to point to the directory containing generated configuration files. This simplifies referencing files within the ephemeral directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the `runner` directory as a subdirectory, which likely contains the application's source code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets a CMake policy to avoid warnings about uninitialized variables. CMP0063 relates to target_sources command behavior.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Adding Application Definition\nDESCRIPTION: Adds a preprocessor definition for the APPLICATION_ID. This allows the application code to access the application ID at compile time. The application ID is used to identify the application on the target platform.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a custom CMake function `list_prepend` to prepend a prefix to each element of a list. This function is used because the `list(TRANSFORM ... PREPEND ...)` command is not available in CMake 3.10.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a preprocessor definition for the application ID, using the value defined earlier.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Path\nDESCRIPTION: Defines the `FLUTTER_LIBRARY` variable to the path of the Flutter Linux GTK shared library. It also sets other variables like `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY` for use in subsequent steps. These variables are published to the parent scope using `PARENT_SCOPE`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter interface library\nDESCRIPTION: Creates an interface library named `flutter`. This allows to define the interface of the flutter library without needing to compile any source code.  It sets the include directories and link libraries for the `flutter` target. It also adds the required dependencies. These dependencies include system libraries like GTK, GLIB, GIO, BLKID and LZMA.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for runtime\nDESCRIPTION: Sets the RPATH (Run-Time Search Path) for the executable to find shared libraries at runtime. This is important for locating the Flutter engine and plugin libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions for Unicode. This is commonly done to ensure that the application supports Unicode characters.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. This includes setting the C++ standard, compiler options, and preprocessor definitions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Opting into Modern CMake Behaviors\nDESCRIPTION: Explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake. This helps maintain compatibility and ensures best practices are followed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL.  This value is also set in the parent scope for installation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Find System Dependencies using PkgConfig\nDESCRIPTION: Uses `find_package` and `pkg_check_modules` to locate and import system-level dependencies like GTK, GLib, GIO, BLKID, and LZMA. These libraries are essential for the Flutter Linux GTK embedding to function correctly. The `IMPORTED_TARGET` keyword makes them available as CMake targets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Finding System-Level Dependencies\nDESCRIPTION: This snippet uses the PkgConfig module to find the GTK+ 3.0 library, requiring it for the build and importing its target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and other temporary build artifacts. This directory is used to include necessary configuration files and locate the Flutter library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds definitions to ensure Unicode support for the project.  It adds both UNICODE and _UNICODE preprocessor definitions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Install to Default Build\nDESCRIPTION: This snippet makes the \"install\" step default in Visual Studio, as it's required to run the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: Sets the INSTALL_BUNDLE_DATA_DIR and INSTALL_BUNDLE_LIB_DIR variables, which specify the directories where data and library files will be installed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: Adds the 'runner' directory as a subdirectory in the CMake build. Manages the application build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Clean Flutter Asset Directory\nDESCRIPTION: Removes the existing flutter_assets directory within the data directory before copying the new assets, ensuring that stale files are removed. The destination is the install directory, and the component is Runtime.  This uses the CODE signature for install.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: Adds the executable target, specifying the source files to be compiled into the executable. The source files include `main.cc`, `my_application.cc`, and the generated plugin registrant file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Find Package Dependencies\nDESCRIPTION: Uses the find_package command to locate system-level dependencies required by the Flutter application. It uses pkg-config to find and import the necessary libraries and their associated include paths. Includes GTK, GLIB, GIO, BLKID, and LZMA.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Add Application ID Definition\nDESCRIPTION: Adds a compile definition for the application ID. This makes the application ID available in the source code during compilation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Library (Plugin)\nDESCRIPTION: This creates a static library named `flutter_wrapper_plugin` from the core and plugin wrapper sources. It applies standard settings, sets properties for position-independent code and hidden CXX visibility, links the Flutter library, includes the wrapper include directory, and adds a dependency on `flutter_assemble`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Asset Directory\nDESCRIPTION: This code removes the existing flutter_assets directory and then copies the current build's flutter_assets directory into the installation bundle. This ensures that the assets are up-to-date and avoids stale files from previous builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\"\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flags for Profile Build Type\nDESCRIPTION: Sets the linker and compiler flags for the Profile build type, using the flags defined for the Release build type as a base.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build process. This ensures that the CMake version used is compatible with the build script's features.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Add Unicode Definitions\nDESCRIPTION: Adds definitions for Unicode support for all projects. These definitions are required for proper handling of Unicode characters.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This function applies standard compilation settings to a specified target, including enabling C++14 standard, adding compiler warnings, treating warnings as errors, and enabling optimizations for non-Debug builds. It takes a target name as input.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: Adds the runner subdirectory to the build. This likely contains the application-specific code and build rules. See runner/CMakeLists.txt.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Settings\nDESCRIPTION: This snippet configures settings for cross-building if `FLUTTER_TARGET_PLATFORM_SYSROOT` is defined.  It sets the CMake SYSROOT, find root path, and find path modes for programs, packages, libraries, and includes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the installation prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources\nDESCRIPTION: Defines lists of C++ source files for the core wrapper, plugin wrapper, and application wrapper. The TRANSFORM command prepends the wrapper root directory to each source file name.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the build system. This ensures that the build system has the necessary features and functionalities to correctly interpret and execute the CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file contains settings and variables provided by the Flutter tool, such as build type and target platform.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the directory containing generated files, such as the Flutter library and headers. This directory is used as a central location for accessing these resources during the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file contains settings specific to the Flutter project, such as build flags and dependencies. It's essential for customizing the build according to the Flutter project's requirements.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet creates an interface library named `flutter` and sets its include directories and link libraries. The purpose of this interface library is to provide a convenient way to link against the Flutter library and include the necessary header files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration File\nDESCRIPTION: Includes the `generated_config.cmake` file, which is expected to be located in the ephemeral directory. This file likely contains configuration parameters provided by the Flutter tool, such as build flags or target platform settings. This file needs to exist to successfully continue with the build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions for Unicode support. `-DUNICODE` and `-D_UNICODE` are added to the compiler flags, enabling Unicode support in the project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets a CMake policy to \"NEW\". CMake policies are used to control CMake's behavior and ensure compatibility across different versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This function applies standard compilation settings to a given target, including C++ standard, warning flags, and optimization levels based on the build configuration (Debug or Release).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the `WRAPPER_ROOT` variable, which points to the directory containing C++ wrapper code. This code provides a bridge between Flutter and native Windows APIs.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Libraries\nDESCRIPTION: This snippet installs plugin bundled libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Visual Studio Install to Default Build\nDESCRIPTION: Sets the Visual Studio install step to default, making it required to run the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses pkg-config to find and import the GTK library, which is a system-level dependency.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Target\nDESCRIPTION: This snippet creates the executable target with name defined by ${BINARY_NAME}.  It specifies the source files required for building the executable, including C++ files, resource files, and a manifest file. The WIN32 keyword indicates that this is a Windows application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the `FLUTTER_LIBRARY` variable, specifying the path to the Flutter engine's DLL file. This variable is then published to the parent scope for use in the install step. It also sets the path for the ICU data file and project build directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the 'runner' subdirectory, which likely contains the application-specific build rules and source code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Defining Project with CXX Language\nDESCRIPTION: Defines the project name as 'example' and specifies CXX as the project language.  This initializes the CMake project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This code snippet sets the minimum required CMake version to 3.15 and defines the project name as 'example' with C++ language support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources. This ensures that the Flutter components are assembled before any other targets that depend on them.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet adds the executable target for the application. It defines the target name using the BINARY_NAME variable and includes the necessary source files for the Windows runner.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake minimum version\nDESCRIPTION: Specifies the minimum required version of CMake for the project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Name and Application ID\nDESCRIPTION: This code defines variables for the binary name and application ID. These variables are used throughout the CMake script to configure the application build and identify the application during installation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building and adding plugins to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types\nDESCRIPTION: This snippet configures build types (Debug, Profile, Release) based on whether the generator is multi-config or single-config. If no build type is specified, it defaults to Debug.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory, incorporating Flutter's build rules into the CMake project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining build configuration options\nDESCRIPTION: This snippet defines the build configuration options for the project, differentiating between single-configuration and multi-configuration generators. It sets the CMAKE_BUILD_TYPE to Debug if not already set and defines the available build types.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the installation directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory in the CMake build process. This includes the Flutter library and tool build rules.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file contains settings specific to the Flutter build environment and target platform.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: This snippet configures the build type to 'Debug' if not already set, and allows the user to select from 'Debug', 'Profile', and 'Release' build types.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Import Treemap Package - Dart\nDESCRIPTION: This snippet demonstrates how to import the Syncfusion Flutter Treemap package into your Dart project. This import statement is necessary to use the Treemap widget and its associated classes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:syncfusion_flutter_treemap/treemap.dart';\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Uses `pkg-config` to find system-level dependencies required by Flutter, such as GTK, GLib, GIO, BLKID, and LZMA. These dependencies are essential for Flutter's underlying functionality on Linux.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Adding custom command for Flutter assemble\nDESCRIPTION: Adds a custom command that runs the Flutter tool to assemble the Flutter library. The command uses the `${FLUTTER_TOOL_ENVIRONMENT}` environment variables and the `${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh` script.  A phony file is included as output to ensure the command runs every time.  The outputs are the Flutter library, header files and the phony file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the build. This includes the Flutter build system into the CMake project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used is compatible with the commands and features used in the script. The version specified here is 3.15.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library `flutter_wrapper_app` containing the core and app parts of the C++ wrapper.  It links against the `flutter` interface library and sets include directories.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the 'runner' subdirectory, which contains the application-specific code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the build, which contains Flutter library and tool build rules.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This code conditionally installs bundled plugin libraries to the lib directory within the bundle.  It only executes if `PLUGIN_BUNDLED_LIBRARIES` is defined.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: Configures build options based on whether the generator is multi-config (e.g., Visual Studio) or single-config (e.g., Makefiles). It sets the CMAKE_BUILD_TYPE to \"Debug\" if not already specified.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the 'runner' directory as a subdirectory in the CMake project. This directory likely contains the application-specific code, including the main Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the runner subdirectory to the build, where the application-specific CMakeLists.txt file is located.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the `EPHEMERAL_DIR` path to each of them. This ensures that the compiler can find the necessary header files when building the wrapper libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: Adds a preprocessor definition for the application ID. This allows the application code to access the application ID at compile time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.10 for the project. This ensures that the CMake version used to build the project is compatible with the features and commands used in the CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet specifies the minimum required CMake version for the project. It ensures that the CMake version used is at least 3.15 to support the features used in the build script.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the target executable (specified by `BINARY_NAME`) to the install prefix. The component is set to \"Runtime\".\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target for Flutter Assembly\nDESCRIPTION: Defines a custom target named `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources. This target ensures that the Flutter tool backend script is executed before any target that depends on these files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Application Identifiers\nDESCRIPTION: This snippet defines the binary name and application ID for the project. These values are used throughout the build process and in the final application bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Clean Build Bundle Directory\nDESCRIPTION: Removes the build bundle directory recursively before each installation to ensure a clean bundle.  This is a custom installation step using the CODE signature.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Project Declaration\nDESCRIPTION: Declares the project name and specifies that it uses C++ (CXX) as the programming language. The project name is set to \"example\".\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Adding executable and source files\nDESCRIPTION: This CMake code adds the executable target and specifies the source files required to build the Flutter Windows runner application. It includes C++ source files, generated plugin registration, resources, and a manifest file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library for the Flutter application wrapper, including the core and application source files. Links against the Flutter interface library and defines include directories.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Install ICU Data File\nDESCRIPTION: Installs the ICU data file to the data directory within the installation prefix, marking it as a runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: This snippet sets the `WRAPPER_ROOT` variable to the absolute path of the 'cpp_client_wrapper' directory within the ephemeral directory. This directory contains C++ wrapper code for interacting with the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets the CMake policy CMP0063 to NEW. This ensures consistent behavior across CMake versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Adding Application Subdirectory\nDESCRIPTION: This snippet adds the 'runner' subdirectory, containing the application build rules.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Setting executable name\nDESCRIPTION: This snippet defines the name of the executable file that will be created for the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: This snippet installs the native assets to the lib directory in the installation bundle. Native assets are platform-specific files that are needed by the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Defines the location of the Flutter Windows dynamic library (`flutter_windows.dll`) and other related files like the ICU data file (`icudtl.dat`) and AOT library (`app.so`). These variables are published to the parent scope for use in the installation step. PROJECT_BUILD_DIR is also set and published to the parent scope.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix and Making Install Default\nDESCRIPTION: Makes the \"install\" step default in Visual Studio and sets the installation prefix to the build bundle directory. This ensures that the application is installed to the correct location when built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Install Step\nDESCRIPTION: This snippet makes the install step the default, as it's required to run the application. This is specific to Visual Studio.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter library path\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter engine shared library for Linux GTK.  The path is constructed using the `EPHEMERAL_DIR` variable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the lib directory in the installation bundle. It contains the core Flutter runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: Sets the binary name for the executable. This determines the name of the application file that will be created when building the project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"chat_example\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This code conditionally installs the AOT (Ahead-Of-Time) compiled library to the lib directory within the bundle. This is done only for non-Debug builds, as AOT compilation is typically used for release builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable\nDESCRIPTION: Adds the executable target to the project. It specifies the source files used to build the executable and links the necessary libraries, including flutter and GTK. It also sets up dependencies and output directories.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This defines the executable target, specifying the source files to be compiled, applying standard settings, and linking required libraries (flutter, GTK). It also adds a dependency on `flutter_assemble` to ensure flutter assets are built before the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Assets Directory\nDESCRIPTION: Removes the existing assets directory and then installs the new assets directory to ensure that the application has the latest assets. This is done by executing CMake code to remove the directory recursively before installing it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the installation prefix. The ICU data file is required for internationalization support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Set RPATH for Installation\nDESCRIPTION: Sets the runtime path (RPATH) for the installed executable, allowing it to find its shared libraries at runtime.  '$ORIGIN/lib' specifies a relative path to the executable's directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: This snippet adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target triggers the custom command to assemble the library when built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake project for Flutter Windows runner\nDESCRIPTION: This CMake code sets up the project with a minimum required version, defines the project name, and specifies CXX as the language. It prepares the build environment for the Flutter Windows runner application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: Sets the binary name to \"example\". This determines the name of the executable file produced by the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Asset Directory During Installation\nDESCRIPTION: This snippet removes the existing asset directory during installation to prevent stale files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the BUILD_BUNDLE_DIR variable to the directory where the build bundle will be created. This is typically next to the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type\nDESCRIPTION: Configures the build type if it's not already set.  Defaults to 'Debug'.  Allows the user to select from 'Debug', 'Profile', and 'Release' build types.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name and specifies that the project uses C++ as the primary language.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet removes the existing assets directory and then installs the Flutter assets directory to the data directory in the installation bundle.  This ensures that all assets are copied, including updates. Uses `FLUTTER_ASSET_DIR_NAME` which is typically `flutter_assets`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for Executable\nDESCRIPTION: This snippet sets the output directory for the executable, placing it in a subdirectory to prevent accidental execution of the unbundled copy. This is important because the bundled executable relies on resources being in the correct relative location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library and Data File for Parent Scope\nDESCRIPTION: Sets the `FLUTTER_LIBRARY`, `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR` and `AOT_LIBRARY` variables in the parent scope. This makes them available to other parts of the build process, like the install step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Create flutter_wrapper_app STATIC library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` that encapsulates the C++ wrapper code needed for the application runner. It includes core implementations and app source files. It links against the flutter INTERFACE library and sets include directories. Adds dependency on flutter_assemble target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type\nDESCRIPTION: This configures the build type (Debug, Profile, Release). If no build type is specified, it defaults to Debug. The user can override this by setting CMAKE_BUILD_TYPE.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function\nDESCRIPTION: Defines a function to prepend a prefix to each element of a list. This is a workaround for older CMake versions that don't have the `list(TRANSFORM ... PREPEND ...)` command.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Paths\nDESCRIPTION: Sets the path to the Flutter library, ICU data file, project build directory, and AOT library. These paths are then published to the parent scope for use in other parts of the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: Creates a custom command to run the Flutter tool backend to assemble the Flutter components. It uses a phony output file to force the command to run every time.  It sets up the environment and executes `tool_backend.bat` with appropriate arguments.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assembly\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target, ensuring that the Flutter assets are built before the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-of-Time) library to the data directory within the install prefix, but only for \"Profile\" and \"Release\" build configurations. The component is set to \"Runtime\".\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: CMake Executable Definition\nDESCRIPTION: This defines the executable target, listing all source files to be compiled into the application.  It specifies that the target is a WIN32 application. It includes application source files, generated plugin registration, resources, and a manifest file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the root directory for the C++ client wrapper. This variable is used to locate the source files for the C++ wrapper, which is used to interact with the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: This snippet sets the `CMAKE_INSTALL_PREFIX` to the `BUILD_BUNDLE_DIR`.  It configures where the files will be installed. If the install prefix hasn't been initialized already, it defaults to system paths.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define list_prepend function\nDESCRIPTION: Defines a CMake function called list_prepend. This function prepends a given prefix to each element in a list. It mimics the behavior of list(TRANSFORM ... PREPEND ...), which is not available in CMake versions prior to 3.12. Used to manipulate list values.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures compatibility with the CMake features used in the build scripts. Version 3.10 or higher is required.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library (Non-Debug)\nDESCRIPTION: This snippet installs the AOT (Ahead-Of-Time) compiled library to the lib directory in the installation bundle, but only for non-Debug builds. AOT compilation improves performance in Release and Profile builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Adds an interface library named `flutter` and sets the include directories and link libraries. This library provides a way for other targets to link against the Flutter library and include its headers.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This code defines a preprocessor macro `APPLICATION_ID` with the value of the `APPLICATION_ID` variable.  This macro can be used in the C++ code to access the application ID.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the 'runner' directory as a subdirectory in the CMake build process. The runner directory likely contains the application's native code and build rules. This is necessary to build the application itself.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Rules\nDESCRIPTION: This snippet includes the generated plugin build rules from the flutter directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (App)\nDESCRIPTION: Defines the C++ source files for the application wrapper, which includes flutter_engine.cc and flutter_view_controller.cc. The `list(TRANSFORM)` command prepends the wrapper root directory to each source file path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable binary to the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type\nDESCRIPTION: This snippet sets the default build type to 'Debug' if not already defined. It also sets the allowed values for the `CMAKE_BUILD_TYPE` cache variable to 'Debug', 'Profile', and 'Release'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project.  This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project and defines the project name and supported languages (CXX).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Variables\nDESCRIPTION: Sets variables for the Flutter library, ICU data file, project build directory, and AOT library. The `PARENT_SCOPE` option makes these variables available to the parent scope for use in other parts of the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Finds required system-level dependencies using the `PkgConfig` module.  It checks for GTK, GLIB, and GIO. The `IMPORTED_TARGET` option creates imported targets for each dependency, allowing them to be linked against later.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Libraries\nDESCRIPTION: Installs bundled libraries for plugins to the installation directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions\nDESCRIPTION: This snippet adds a compiler definition for the application ID.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the location of the ephemeral directory, which contains generated configuration files and other temporary build artifacts. This directory is used to store files generated by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the project. This ensures compatibility with the specified CMake version.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Set Ephemeral Directory\nDESCRIPTION: Defines the variable EPHEMERAL_DIR to store the path to the ephemeral directory. This directory typically contains generated files and configurations from the Flutter tool. This sets the stage for including the generated configuration.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the target executable to the installation directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configure Build Type\nDESCRIPTION: Configures the build type (Debug, Profile, Release) if not already set. This is crucial for setting optimization levels and debugging information.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT (Ahead-Of-Time) compiled library to the data directory in Profile and Release configurations only. Enables optimized performance in non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. This includes setting the C++ standard to C++14, enabling warnings as errors, and adding optimization flags for non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Install Bundle Directories\nDESCRIPTION: This snippet sets the installation directories for data and libraries within the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: This function applies standard compilation features and options to a target, including C++ standard, warnings as errors, and optimization level for non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: This block configures build options based on whether the generator is multi-config (e.g., Visual Studio).  It sets the configuration types (Debug, Profile, Release) and the build type if not already specified. Defines flags for different build modes.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files. This directory is used to include configurations generated by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter application. This command executes the `tool_backend.sh` script with the specified environment variables and parameters.  The command is designed to run every time due to the `_phony_` output which ensures that the dependencies are always rebuilt.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: Initializes the CMake project, setting the minimum required version and project name. The LANGUAGES CXX argument specifies that the project uses C++.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the directory where the build bundle will be created. It also sets the install prefix to this directory, ensuring that all installed files are placed within the bundle. Also removes the bundle directory at install time to ensure a clean build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains settings specific to the Flutter project and target platform.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data subdirectory of the installation bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Directory\nDESCRIPTION: This snippet sets the output directory for the executable to a subdirectory to prevent users from running the unbundled copy. This ensures that the application is only run from the install-generated bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library headers and prepends the path to the ephemeral directory to each header. These headers are used to compile the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Assemble\nDESCRIPTION: This snippet defines a custom command to run the Flutter tool backend. It sets up a phony output file to force the command to run every time, and then uses the CMAKE_COMMAND to execute the tool backend batch script. The command depends on various Flutter library files and header files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Interface Link Libraries\nDESCRIPTION: Sets the link libraries for the 'flutter' interface library. This ensures that any target that links against 'flutter' will link against the Flutter library and its dependencies (GTK, GLIB, GIO).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent CMake versions.  It also sets the RPATH for bundled libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable to point to the 'ephemeral' directory within the current source directory. This directory likely contains generated configuration files and pre-built libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: This snippet initializes the CMake project, specifies the minimum required CMake version, and sets the project name and languages used.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: These snippets set the installation directories for data and libraries within the installation prefix. INSTALL_BUNDLE_DATA_DIR is set to `<INSTALL_PREFIX>/data`, and INSTALL_BUNDLE_LIB_DIR is set to `<INSTALL_PREFIX>`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This snippet conditionally installs plugin bundled libraries. If `PLUGIN_BUNDLED_LIBRARIES` is set, it installs the files specified by that variable into the directory specified by `${INSTALL_BUNDLE_LIB_DIR}` under the 'Runtime' component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Scope Variables\nDESCRIPTION: Defines variables in the parent scope for use in other CMake files or build steps. These variables include paths to the Flutter library, ICU data file, project build directory, and AOT library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend function\nDESCRIPTION: Defines a CMake function to prepend a prefix to each element in a list. This function is used to modify the list of Flutter library headers by adding the path to the ephemeral directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Path\nDESCRIPTION: Sets the variable FLUTTER_LIBRARY to the path of the Flutter library file. This path is typically located within the ephemeral directory.  Publishes the variable to the PARENT_SCOPE for use in the install step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: Sets the installation directories for data and library files. These directories are used to install the application's assets and libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: Installs the Flutter assets directory to the data directory within the bundle. The Flutter assets directory contains the application's resources, such as images, fonts, and localization files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` from the core and plugin C++ wrapper sources. Standard settings are applied, position independent code is enabled, C++ visibility is set to hidden, the library is linked against the `flutter` interface library, and include directories are set. A dependency on `flutter_assemble` is also added.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake features used are supported by the CMake version available on the system.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: Adds the 'runner' directory as a subdirectory to the build process. This directory likely contains application-specific source code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter build dependency\nDESCRIPTION: Adds a dependency on the flutter_assemble target, ensuring that the Flutter build tool runs before the application is built. This step is crucial for generating Flutter artifacts required by the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configure Build Options\nDESCRIPTION: Configures build options based on whether the generator supports multiple configurations. If multi-config, it sets available configurations. Otherwise, it sets the build type (Debug, Profile, Release).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the build, allowing the Flutter build rules to be included.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This snippet installs bundled plugin libraries if they exist.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target for Flutter Assembly\nDESCRIPTION: This snippet defines a custom target named `flutter_assemble` that depends on the Flutter library, header files, and C++ wrapper sources. This target is used to trigger the Flutter assembly process, ensuring that all necessary files are built before the application is linked.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Assembly\nDESCRIPTION: Defines a custom command to run the Flutter tool's backend script for assembling the Flutter engine. It sets the `FLUTTER_TOOL_ENVIRONMENT` environment variables and executes `tool_backend.bat` with specified parameters. It outputs the Flutter library, headers, and wrapper sources. A phony output is used to ensure the command runs every time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: This snippet adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the custom command to assemble the Flutter library is executed before any targets that depend on it. This target essentially groups the files required for flutter assembly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring build options\nDESCRIPTION: Configures build options based on whether the generator is multi-config.  It sets the CMAKE_CONFIGURATION_TYPES for multi-config generators or CMAKE_BUILD_TYPE for single-config generators. If CMAKE_BUILD_TYPE is not already set, it defaults to Debug.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Library Headers List\nDESCRIPTION: Creates a list of Flutter library header files and prepends the ephemeral directory path to each header file. This list is used to define include directories for the Flutter library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Declaring CMake Project\nDESCRIPTION: Declares the project name and specifies that it uses C++.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: Adds the \"runner\" directory as a subdirectory to the build. This likely contains the application's main code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-Of-Time) compiled library.  The file specified by `${AOT_LIBRARY}` is installed into `${INSTALL_BUNDLE_DATA_DIR}`.  This installation is only performed for Profile and Release build configurations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the absolute path of the 'ephemeral' directory relative to the current source directory. This directory typically contains generated configuration files and pre-built Flutter engine artifacts. This variable is used to locate these resources during the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Defines variables for the Flutter library (flutter_windows.dll), ICU data file, project build directory, and AOT library, and sets them in the parent scope so they are available to other parts of the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet installs Flutter assets by first removing the existing assets directory and then copying the new assets.  This ensures stale files are removed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the installation directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Wrapper Sources\nDESCRIPTION: Creates a list of plugin C++ wrapper source files and prepends the `WRAPPER_ROOT` path to each. These sources handle plugin registration and related functionalities.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Executable\nDESCRIPTION: This snippet applies the standard build settings defined earlier to the executable target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory in the installation prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Using Unicode for All Projects\nDESCRIPTION: Adds definitions to enable Unicode support for all projects. This ensures that the application can handle Unicode characters correctly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the build bundle directory to be the directory where the target executable resides. This ensures that support files are copied next to the executable for easier running.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the build bundle directory to the directory where the target executable is located.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Creates a list of header files related to the Flutter library. It prepends the ephemeral directory to each header file's path to ensure CMake can find the headers during compilation.  These headers provide the API for interacting with the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set Binary Name in CMake\nDESCRIPTION: Sets the name of the executable or library that will be built by CMake. Defines the output file name.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT (Ahead-Of-Time) compiled library for Profile and Release builds, under the Runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` that includes the core and plugin wrapper sources. This library is linked with the Flutter engine and provides the necessary functionality for Flutter plugins to interact with the native platform. Standard settings are applied, position-independent code is enabled, and visibility is set to hidden.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Type\nDESCRIPTION: Configures the build type (Debug, Profile, Release). If CMAKE_BUILD_TYPE is not already set, it defaults to Debug and allows the user to select one of the available options.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build. This integrates the Flutter build system with the main CMake project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Runner\nDESCRIPTION: This CMake snippet sets up the build environment for a Flutter runner application targeting Windows. It specifies the minimum CMake version, project name, source files, compilation definitions (disabling NOMINMAX), necessary libraries (flutter, flutter_wrapper_app), include directories, and adds a dependency on flutter_assemble to ensure the Flutter application is built before the runner.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources\nDESCRIPTION: Defines lists of C++ wrapper source files for core, plugin, and app components, prepending the wrapper root directory path to each of them.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Compilation Settings\nDESCRIPTION: Defines a function to apply standard compilation settings to a target, including C++ standard, warning levels, exception handling, and debug definitions.  It sets the C++ standard to C++17, enables strict warnings, disables exceptions and defines _DEBUG for Debug configurations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Create flutter INTERFACE library\nDESCRIPTION: Defines an interface library named `flutter`. It includes setting include directories and linking against the Flutter library.  Adds dependency on flutter_assemble target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Bundle Directories\nDESCRIPTION: Sets the directories for installing data and libraries within the build bundle. These variables define where the data files and shared libraries should be placed when the application is installed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing Asset Directory\nDESCRIPTION: This snippet installs the Flutter asset directory to the data subdirectory of the installation bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Radial Gauge Dispose Exception Fix - Flutter\nDESCRIPTION: A previously occurring disposed exception is now resolved. This issue occurred when the radial gauge was displayed in a button click, along with a marker or needle pointer. The fix ensures smooth and stable rendering of the radial gauge in such scenarios.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nRadial Gauge\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the root directory for the C++ client wrapper code. This wrapper provides an interface between the Flutter engine and the host application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and the languages used (CXX for C++). It also sets the name of the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(pdf_example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"pdf_example\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the installation directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library for the Flutter plugin wrapper, including the core and plugin source files.  Sets properties for position independent code and hidden C++ visibility.  Links against the Flutter interface library and defines include directories.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: This snippet creates a static library named `flutter_wrapper_plugin` that wraps Flutter functionality for plugins.  It includes core implementations and plugin registrar sources, applies standard settings, sets properties for position independent code and hidden C++ visibility, links against the `flutter` interface library, and sets the include directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory, allowing the Flutter build system to be integrated.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: Includes the generated_plugins.cmake file, which contains build rules for managing plugins and adding them to the application. This file is generated by Flutter's plugin registration tooling.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT library\nDESCRIPTION: Installs the AOT (Ahead-Of-Time) compiled library for non-Debug configurations. This library contains pre-compiled Dart code for faster startup times in Profile and Release builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Create flutter_wrapper_plugin STATIC library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` that encapsulates the C++ wrapper code needed for a plugin.  It includes core implementations and plugin registrar source files.  It also links against the flutter INTERFACE library and sets include directories. Adds dependency on flutter_assemble target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Sets the minimum required CMake version to 3.14. This ensures that the project can be built with compatible CMake versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies with PkgConfig\nDESCRIPTION: Uses PkgConfig to find and import system-level dependencies like GTK, GLIB, GIO, BLKID, and LZMA.  The `REQUIRED` keyword ensures that the build fails if any of these dependencies are not found.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets the CMake policy CMP0063 to NEW.  This configures how CMake handles certain behaviors related to target properties.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: Removes the existing assets directory and then installs the current assets directory to the data directory within the build bundle. This ensures that the application has the correct assets. It fully re-copies them each build, preventing stale files from previous installs.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Settings and Link Libraries\nDESCRIPTION: Applies standard compilation settings to the executable target and links required libraries, including flutter and GTK. It also adds a dependency on the 'flutter_assemble' target, ensuring Flutter assets are built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: This snippet defines the project name and the programming languages used. It sets the project name to \"example\" and specifies CXX (C++) as the language used in the project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the directory where the build bundle will be created. Determines the output directory for the built application and its dependencies.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories\nDESCRIPTION: This snippet adds include directories to the executable target, ensuring that the compiler can find the necessary header files during compilation. It includes the project's source directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file, which contains locale and internationalization data. This file is essential for Flutter applications that need to support multiple languages and regions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable to the designated installation prefix.  The `RUNTIME` keyword specifies that this is an executable file. `DESTINATION` specifies the directory where it should be installed.  `COMPONENT Runtime` categorizes this installation as part of the Runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command that executes the flutter tool backend script to assemble the Flutter application. This command is triggered when the output files (Flutter library and headers) are out of date. It sets environment variables and calls the tool_backend.sh script. It creates a phony file to ensure the command is always executed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types\nDESCRIPTION: This snippet configures the build types (Debug, Profile, Release) and sets the default build type to Debug if not already specified. It handles both single-configuration and multi-configuration generators.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` using the core and app C++ wrapper sources. Standard settings are applied, the library is linked against the `flutter` interface library, and include directories are set. The target also depends on `flutter_assemble`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the path of the ephemeral directory. This directory contains generated configuration files and other temporary build artifacts.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing Assets\nDESCRIPTION: This snippet installs the Flutter assets directory, removing any existing directory first to ensure a clean install.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Set wrapper root directory\nDESCRIPTION: Defines the root directory for the C++ client wrapper code, which provides an interface between the Flutter engine and native Windows code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the install prefix. The component is set to \"Runtime\".\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library headers and prepends the `EPHEMERAL_DIR/flutter_linux/` path to each header. This list is used to specify the include directories for the Flutter library. The `list_prepend` function defined earlier is used for this purpose.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: Installs the plugin bundled libraries (`PLUGIN_BUNDLED_LIBRARIES`) to the installation prefix. The runtime component is specified. This is conditional, based on if `PLUGIN_BUNDLED_LIBRARIES` exists.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the `BUILD_BUNDLE_DIR` variable, which specifies the directory where the application bundle will be built. It uses a generator expression to get the directory of the binary file for the target `${BINARY_NAME}`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name and the programming languages used. Here, the project name is set to \"example\", and C++ is specified as the language.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a generated CMake configuration file from the ephemeral directory. This file typically contains variables and settings provided by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: Defines the Flutter managed directory relative to the current source directory. This directory typically contains Flutter-related build files and dependencies.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Installing Targets and Files\nDESCRIPTION: Installs the executable, ICU data file, and Flutter library to their respective destination directories. It includes handling for bundled plugin libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and the project name, along with the languages used (CXX).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project and sets the minimum required CMake version. It also specifies the languages used in the project as CXX (C++).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Prepending Header Paths\nDESCRIPTION: Prepends the path to the Flutter Linux headers to the FLUTTER_LIBRARY_HEADERS list, ensuring that the compiler can find the header files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: Sets the installation prefix to a build bundle directory. If the default installation prefix is initialized, it's overridden with the build bundle directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: Installs any bundled libraries that are part of Flutter plugins. These are native libraries that are packaged with the plugins.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: Sets the installation directories for data and library files within the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links the executable target with required libraries. flutter and flutter_wrapper_app are essential libraries required for the flutter build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet sets the CMake policy for handling certain behaviors. CMP0063 is set to NEW.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the build process uses a compatible version of CMake.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Defines a list of header files that are part of the Flutter library interface. These headers provide access to Flutter functionality from C++ code. The list is transformed to include the full path to each header within the ephemeral directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Include Generated Plugins\nDESCRIPTION: Includes the generated plugin build rules, managing the building and addition of plugins to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assemble\nDESCRIPTION: Adds a custom target named 'flutter_assemble'. This target depends on the Flutter library and header files, and is used to trigger the custom command that assembles the Flutter library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Including generated plugins\nDESCRIPTION: Includes the generated plugins CMake file. This manages building the plugins and adding them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting up Installation\nDESCRIPTION: This snippet sets up the installation process, defining the build bundle directory and setting the install prefix to that directory. It also removes the bundle directory at the start of installation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory, which includes necessary Flutter build rules.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Target\nDESCRIPTION: Installs the runtime target (the executable) to the specified destination directory. Configures the installation of the application executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Include generated configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains platform-specific settings and build configurations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory within the installation prefix, under the Runtime component.  This data file is essential for internationalization support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: Installs the Flutter assets directory to the data directory within the application bundle. These assets include images, fonts, and other resources used by the Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Paths\nDESCRIPTION: Sets the path to the Flutter library (flutter_windows.dll) and other related files, such as the ICU data file and AOT library.  These paths are then published to the parent scope for use during the installation process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Set project directories\nDESCRIPTION: Defines the directory for ephemeral files generated by the Flutter tool. This includes generated configurations and wrapper code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Directory\nDESCRIPTION: Sets the runtime output directory for the executable to a subdirectory called 'intermediates_do_not_run'. This prevents users from accidentally running the unbundled executable, as it requires the resources to be in the correct relative locations within the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the `FLUTTER_LIBRARY` variable, which specifies the path to the Flutter library (`libflutter_linux_gtk.so`). The variable is then published to the parent scope for the installation step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Axis Tapped Callback Value - Flutter\nDESCRIPTION: The axis tapped callback now returns the correct value when the `canScaleToFit` property is enabled in the gauges. This enhancement ensures that the callback provides accurate information about the tapped axis, enabling developers to implement correct interaction logic.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\ncanScaleToFit\n```\n\n----------------------------------------\n\nTITLE: Set Flutter library path\nDESCRIPTION: Defines the path to the Flutter Windows DLL. The path is then published to the parent scope for the install step.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated CMake Config\nDESCRIPTION: Includes a generated CMake configuration file from the `EPHEMERAL_DIR`. This file is expected to be created by the Flutter tool and contains project-specific configurations. Dependencies: Requires the Flutter tool to generate the `generated_config.cmake` file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Configures the installation process, copying support files next to the executable and setting the installation prefix. This ensures the application can run in place without a separate bundle. It includes logic to make the \"install\" step the default and defines installation directories for data and libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Disable conflicting Windows macros\nDESCRIPTION: Disables the Windows \"NOMINMAX\" macro to prevent conflicts with the C++ standard library's min and max functions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project.  This ensures that the CMake version being used supports the commands and features used in this file.  It sets the minimum version to 3.10.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Adds an interface library named `flutter`. This library is used to group the Flutter library, its headers, and its dependencies. It sets the include directories and links the necessary libraries (GTK, GLIB, GIO) to the interface library. A dependency on `flutter_assemble` is added to ensure that the Flutter library is built before anything that depends on this interface.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing assets directory\nDESCRIPTION: Installs the assets directory. This step removes any existing assets from the previous install and then copies the updated directory to the installation location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the build system uses a compatible version of CMake.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter directory as a subdirectory to the build. This includes the Flutter library and tool build rules into the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake features used are compatible with the specified version.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Output Directory for Executable\nDESCRIPTION: This snippet sets the runtime output directory for the executable to an intermediate subdirectory to prevent accidental execution of the unbundled copy.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the `BUILD_BUNDLE_DIR` variable to the directory where the executable will be located after the build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: Sets the installation prefix to a build bundle directory.  If the CMAKE_INSTALL_PREFIX is initialized to default, it is overridden.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` containing the core and plugin C++ wrapper sources. It applies standard settings, sets properties for position independent code and hidden C++ visibility, links against the `flutter` interface library, and adds include directories and dependencies.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake to be 3.15 or higher to ensure compatibility with the features used in the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Defines variables for the path to the Flutter library (`libflutter_linux_gtk.so`), the ICU data file (`icudtl.dat`), the project build directory, and the AOT library. These variables are published to the parent scope for use in subsequent build steps. The paths are used to locate the necessary files for linking and deployment.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Profile build mode settings\nDESCRIPTION: This snippet defines specific linker and compiler flags for the Profile build mode, inheriting the release settings.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Install Executable\nDESCRIPTION: Installs the executable to the specified installation prefix, marking it as a runtime component.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library (Non-Debug)\nDESCRIPTION: Installs the Ahead-Of-Time (AOT) compiled library for non-Debug builds. AOT compilation optimizes the application's performance by compiling Dart code to native code before runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin`. This library contains the C++ wrapper code required for plugins. It links against the `flutter` interface library and includes the necessary directories. Standard settings are applied, and position independent code and hidden CXX visibility are enabled.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: Installs bundled libraries for plugins to the installation's lib directory. This copies the plugin libraries into the installation directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files. These headers are required for compiling code that interacts with the Flutter runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function\nDESCRIPTION: Defines a CMake function called `list_prepend` that prepends a given prefix to each element in a list. This function is used because `list(TRANSFORM ... PREPEND ...)` is not available in CMake 3.10.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Type\nDESCRIPTION: Sets the build type to Debug if not already specified.  Also defines the allowed build types.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library to the lib directory within the installation bundle, but only for non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Rules\nDESCRIPTION: This snippet includes the generated plugin build rules, which manage building the plugins and adding them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting up Installation\nDESCRIPTION: Configures installation parameters, setting the build bundle directory, cleaning it up on each build, and configuring destination directories for data and libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install to Default Build\nDESCRIPTION: Makes the \"install\" step default for Visual Studio builds, as it's required to run the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: Sets the minimum required CMake version and defines the project name with CXX language support. This is the starting point for any CMake project, defining the basic project configurations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet adds the source directory to the include directories for the executable target. This allows the compiler to find header files in the project's source code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Append Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library header files to the FLUTTER_LIBRARY_HEADERS variable. These headers are necessary for compiling code that interacts with the Flutter engine. The list is later prepended with the ephemeral directory path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: Sets the installation directories for data and libraries. The data directory is used for assets and other data files, while the lib directory is used for shared libraries.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Bundle Data and Library Directories\nDESCRIPTION: These snippets set the installation directories for data files and libraries within the application bundle. `INSTALL_BUNDLE_DATA_DIR` is set to `${CMAKE_INSTALL_PREFIX}/data` and `INSTALL_BUNDLE_LIB_DIR` is set to `${CMAKE_INSTALL_PREFIX}`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.15. This ensures that the CMake version used is compatible with the features and commands used in the script.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: Sets the FLUTTER_MANAGED_DIR variable to the location of the Flutter managed files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This snippet installs bundled plugin libraries to the installation directory, if any exist.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Directory\nDESCRIPTION: This snippet sets the runtime output directory for the executable to a subdirectory to prevent users from running the unbundled executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Targets\nDESCRIPTION: Installs the executable binary to the installation prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the location of the ephemeral directory, which contains generated configuration files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Path\nDESCRIPTION: Sets the runtime path (RPATH) for the installed executable. RPATH tells the dynamic linker where to find shared libraries at runtime. Here, it's set to '$ORIGIN/lib', which means the libraries are expected to be in the 'lib' subdirectory relative to the executable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library for Profile and Release builds only.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions\nDESCRIPTION: This snippet sets compile definitions for the executable target.  The NOMINMAX definition prevents Windows headers from defining min/max macros that can conflict with C++ standard library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and build artifacts. This directory is typically managed by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT library to the library directory, but only for non-Debug builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory for building Flutter-related targets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Changing First Day of Week - Flutter\nDESCRIPTION: This code snippet demonstrates how to change the first day of the week in the SfDateRangePicker widget.  The `firstDayOfWeek` property within `DateRangePickerMonthViewSettings` is set to `1` (Monday).\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n\treturn Scaffold(\n\t\tbody: SfDateRangePicker(\n      view: DateRangePickerView.month,\n      monthViewSettings: DateRangePickerMonthViewSettings(firstDayOfWeek: 1),\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Language\nDESCRIPTION: Defines the project name as \"example\" and specifies that the project uses the CXX (C++) language.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake\nDESCRIPTION: Includes the `generated_plugins.cmake` file from the flutter directory, which manages building plugins and adding them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake to ensure compatibility and access to necessary features for building the Flutter Windows application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Prepending to Flutter Library Headers\nDESCRIPTION: Prepends the `EPHEMERAL_DIR` and `/flutter_linux/` to each of the header file paths stored in the `FLUTTER_LIBRARY_HEADERS` variable.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: Adds a preprocessor definition for the application ID. This allows the application code to access the application ID at compile time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Application Wrapper Sources\nDESCRIPTION: Creates a list of application C++ wrapper source files and prepends the `WRAPPER_ROOT` path to each. These sources provide functionalities for the Flutter engine and view controller.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Include Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file, which manages building and linking plugins into the application. This enables the Flutter application to use native plugins.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes the `generated_config.cmake` file from the ephemeral directory.  This file likely contains configurations specific to the Flutter build, such as platform-specific settings or toolchain information. It is crucial for integrating the Flutter environment with the CMake build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory Variable\nDESCRIPTION: This sets the `WRAPPER_ROOT` variable to the directory containing the C++ client wrapper code. This wrapper facilitates communication between Flutter and native Windows code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory\nDESCRIPTION: This snippet removes the old assets directory and installs the new assets directory recursively.  It first removes any pre-existing files to ensure assets are fully updated.  This is part of the install process. Defines the COMPONENT as Runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_pdfviewer_windows/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the `FLUTTER_MANAGED_DIR` as a subdirectory to the build process. This includes the CMake files and build rules within the Flutter directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This code sets the installation directories for data files (assets) and libraries within the build bundle. This defines where these files will be placed during the installation process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet defines the `EPHEMERAL_DIR` variable, pointing to the directory containing generated configuration files and the Flutter library. This directory is essential for locating Flutter-specific resources during the build process.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: This snippet defines a list of Flutter library header files and prepends the path to the ephemeral directory to each header file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: Sets the installation directories for data and libraries. Specifies where the assets and shared libraries will be installed.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Cleaning Build Bundle Directory\nDESCRIPTION: This snippet removes the build bundle directory at the start of the installation process to ensure a clean build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Assets\nDESCRIPTION: Installs the Flutter assets directory to the data directory within the application bundle, making the application's assets available at runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and setting the project name. It uses CXX as the language for compilation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: Adds the \"runner\" directory as a subdirectory to the build process. This likely contains the main application's source code and build configurations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake File\nDESCRIPTION: Includes the 'generated_plugins.cmake' file, which manages the building of plugins and adding them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file likely contains configuration settings provided by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory. This includes the Flutter build rules and makes it possible to link against the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assemble\nDESCRIPTION: This snippet creates a custom target named 'flutter_assemble' which depends on the Flutter library, headers, and wrapper sources. This target is used to trigger the custom command that assembles the Flutter application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet creates an interface library named 'flutter'. It sets the include directories and link libraries for the interface, then adds `flutter_assemble` as a dependency.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: Specifies the minimum required version of CMake for the project.  This ensures that the CMake version used is compatible with the commands and features used in the script. If the CMake version is lower than specified, an error is raised.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Finds required packages using PkgConfig, specifically GTK. This makes sure that the GTK library and its headers are found.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable and Libraries\nDESCRIPTION: This snippet installs the binary, the Flutter ICU data file, the Flutter library, and any bundled plugin libraries into the bundle directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Headers\nDESCRIPTION: This snippet creates a list of Flutter library header files and prepends the path to the ephemeral directory to each header file. This configures the include paths for the Flutter library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Flags\nDESCRIPTION: This snippet sets the linker and compiler flags for the 'Profile' build configuration to be the same as those for the 'Release' configuration.  This ensures consistent builds between Profile and Release modes, particularly regarding optimizations.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: This snippet sets the `EPHEMERAL_DIR` variable to the absolute path of the 'ephemeral' directory, relative to the source directory. This directory contains generated configuration files and other temporary build artifacts.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. It also defines the project name and specifies that CXX is the language used.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Library Interface\nDESCRIPTION: Defines an INTERFACE library named `flutter` and adds necessary include directories and link libraries.  An INTERFACE library doesn't produce any output directly, but provides include directories and link dependencies to any target that links against it.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the build bundle directory to the directory containing the executable. This is where support files are copied.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources\nDESCRIPTION: Defines the source files for the C++ wrapper libraries, separating them into core, plugin, and app components. The wrapper root path is prepended to each source file. Static libraries are created for the plugin and app wrappers, linking them against the Flutter interface library. These wrappers provide an interface between Flutter and native C++ code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the lib directory. Enables Flutter runtime support for the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting install directories\nDESCRIPTION: Sets the directories for installing data and libraries within the bundle.  These are used in the subsequent install commands.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings in CMake\nDESCRIPTION: This snippet applies standard settings to the executable target. It defines compile definitions to avoid naming conflicts (NOMINMAX), links required libraries (flutter, flutter_wrapper_app), and sets include directories. It also adds a dependency on flutter_assemble.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Installation\nDESCRIPTION: Sets the RPATH (Run-Time Search Path) for the installed executable. This allows the executable to find shared libraries at runtime, specifically from the 'lib' directory relative to the executable's location.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Including generated configuration\nDESCRIPTION: Includes the CMake configuration file generated by the Flutter tool. This file likely contains important settings and variables needed for the build process, such as paths to dependencies or build flags. It utilizes the previously set `EPHEMERAL_DIR` to locate the file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-Of-Time compilation) library to the data directory in the install prefix for Profile and Release builds only.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: This CMake function `list_prepend` prepends a given prefix to each element of a list. It iterates over the input list, creates a new list with the prefix applied to each element, and then updates the original list in the parent scope.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officechart/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a preprocessor definition for `APPLICATION_ID` with the value set previously.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the lib directory within the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Project and Executable\nDESCRIPTION: This CMake snippet defines the minimum required CMake version, the project name, and creates an executable target named ${BINARY_NAME} for a Flutter application on Windows. It includes source files, resource files, and a manifest file necessary for the application to run. BINARY_NAME is not defined, but likely defined in a parent CMakeLists.txt or toolchain file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Managed Directory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the CMake project. This includes necessary Flutter build rules and targets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet specifies the minimum required version of CMake for the project to be built. This ensures that the CMake version used is compatible with the commands and features used in the script.  It sets the minimum required version to 3.15.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: Installs the Flutter assets directory, first removing any existing directory to ensure no stale files remain. The assets are copied to the data directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library is used to group the Flutter headers and link libraries together.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: Adds preprocessor definitions for Unicode support.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the flutter managed directory as a subdirectory to the build.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Set Build Bundle Directory\nDESCRIPTION: Sets the build bundle directory, which is where the relocatable application bundle will be created during the installation process. It initializes CMAKE_INSTALL_PREFIX to point to this bundle directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Application Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` containing the core and application C++ wrapper sources. It applies standard settings, links against the `flutter` interface library, and adds include directories and dependencies.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating App Wrapper Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_app' from the core and app wrapper source files. It applies standard settings, links it against the 'flutter' interface library, and defines the include directories. It also depends on the 'flutter_assemble' target.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Library (App)\nDESCRIPTION: This creates a static library named `flutter_wrapper_app` from the core and app wrapper sources.  It links the Flutter library, includes the wrapper include directory, and adds a dependency on `flutter_assemble`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set Install Directories\nDESCRIPTION: Sets the installation directories for data and libraries within the bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter App Wrapper Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_app'. This library contains the C++ wrapper code for the Flutter application. It depends on the core wrapper sources and the app-specific wrapper sources. It links against the 'flutter' interface library.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This snippet appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers define the API for interacting with the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: This snippet creates a static library named 'flutter_wrapper_app'. It links the wrapper core and app sources, applies standard settings, links to the 'flutter' interface library, sets include directories, and adds `flutter_assemble` as a dependency.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directory Variables\nDESCRIPTION: This snippet sets variables for installation directories. It defines the build bundle directory and sets the default installation prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: Adds a preprocessor definition for the application ID, making it available to the C++ code during compilation.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Cleaning Build Bundle Directory\nDESCRIPTION: This snippet removes the build bundle directory at the beginning of the install process. It ensures that the bundle is built from scratch.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the install prefix. The component is set to 'Runtime'.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: This snippet defines the project name and specifies that the project uses C++ as the programming language. The project name is set to \"example\".\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the final executable binary. The BINARY_NAME variable is used in subsequent steps to define target names and installation paths. It's a convenient way to manage the output executable's name.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Build Bundle Directory\nDESCRIPTION: This snippet ensures a clean build bundle directory by removing its contents recursively before each install.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the 'flutter/generated_plugins.cmake' file, which manages building plugins and adding them to the application.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend Function\nDESCRIPTION: Defines a custom CMake function, `list_prepend`, to prepend a prefix to each element in a list. This function simulates the behavior of `list(TRANSFORM ... PREPEND ...)` in newer CMake versions, providing compatibility with CMake 3.10.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the binary executable for the project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Defines an interface library named `flutter`. Interface libraries are used to group include directories and link libraries without generating any actual object code.  Dependencies on this library are propagated to dependent targets.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Assets Directory\nDESCRIPTION: Removes the old assets directory and then installs the new assets directory. Avoids stale asset files.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the library subdirectory of the installation bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings\nDESCRIPTION: This snippet applies standard settings to the executable target using a custom function. This probably includes setting compiler flags and other configurations to ensure the application builds correctly.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: Sets the installation prefix to the build bundle directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This line includes a CMake file responsible for building and integrating generated plugins into the application. It allows the app to use flutter plugins.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Core Wrapper Sources\nDESCRIPTION: Creates a list of core C++ wrapper source files and prepends the `WRAPPER_ROOT` path to each. These sources provide core functionalities for the C++ wrapper.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: Sets the install prefix to the build bundle directory. If the install prefix is initialized to the default value, it is overridden with the build bundle directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to the path of the C++ client wrapper directory. This directory contains the source code for the C++ wrappers around the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Sources (Core)\nDESCRIPTION: Defines the list of core C++ wrapper source files.  Transforms the source file names to include the wrapper root directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named flutter_assemble that depends on the Flutter library and header files. This target is used to trigger the custom command that assembles the Flutter application.  Ensures that the Flutter assets are built before any target that depends on the flutter interface library. The target uses the result from the previous custom command to trigger the assemble.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Details\nDESCRIPTION: This code block sets the minimum required CMake version, defines the project name, specifies the languages used (CXX), sets the binary name and application ID. It also sets the installation RPATH.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_officecore/example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing Binary Target\nDESCRIPTION: This snippet installs the binary executable to the specified destination within the installation prefix.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Prepending to Flutter Library Headers List\nDESCRIPTION: This snippet uses the custom `list_prepend` function to prepend the path to the Flutter Linux headers directory to the `FLUTTER_LIBRARY_HEADERS` list.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Set Profile Flags\nDESCRIPTION: Sets compiler and linker flags for the Profile build configuration, copying values from the Release configuration. This ensures consistent settings for both Release and Profile builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Set Install Prefix\nDESCRIPTION: Sets the installation prefix to the build bundle directory.  If the install prefix is initialized to default, it's overridden.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory. This includes the CMake build rules for the Flutter engine.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_core/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Libraries\nDESCRIPTION: This snippet installs bundled plugin libraries to the lib directory in the install prefix, if any are defined.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Flags\nDESCRIPTION: Sets the compiler and linker flags for the Profile build configuration to be the same as the Release configuration.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Asset Directory Name\nDESCRIPTION: Defines the name of the directory containing the Flutter assets. This directory is typically named `flutter_assets`.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Assets Directory\nDESCRIPTION: This snippet ensures the assets directory is fully re-copied on each build by first removing any existing directory and then installing the directory to its location. This prevents stale files from remaining from a previous install.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the location of the ephemeral directory where generated configuration files and other temporary build artifacts are stored.  It uses CMAKE_CURRENT_SOURCE_DIR to locate the directory relative to the current CMakeLists.txt file.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library (Non-Debug Builds)\nDESCRIPTION: This snippet installs the AOT library to the install bundle library directory under the Runtime component, but only if the build type is not Debug.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (Plugin)\nDESCRIPTION: Defines the C++ source files for the plugin wrapper. These source files facilitate the registration and interaction with Flutter plugins from C++ code. The `list(TRANSFORM)` command prepends the wrapper root directory to each source file path.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_barcodes/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This code sets the CMake policy CMP0063 to NEW. CMake policies control how CMake behaves in certain situations. Setting this policy ensures consistent behavior across different CMake versions.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datepicker/example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. It includes necessary header files and links against the Flutter library. This library acts as an abstraction for other components that depend on Flutter.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid_export/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Assets Directory\nDESCRIPTION: Removes the existing assets directory before installing the new assets. This ensures that stale files are not included in the application bundle.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Install AOT Library\nDESCRIPTION: Installs the AOT (Ahead-of-Time) compiled library to the lib directory within the application bundle for non-Debug builds. This improves application startup time in release builds.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory within the bundle. The ICU data file provides locale-specific data for internationalization and localization.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT (Ahead-of-Time) compiled library to the installation directory, but only for non-Debug builds. AOT compilation improves performance by compiling the Dart code to native code before runtime.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_localizations/example/linux/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT (Ahead-of-Time) compiled library to the lib directory within the bundle for non-Debug builds. AOT compilation improves application startup time by pre-compiling Dart code to native code.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_gauges/example/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum CMake version required for the build. Ensures compatibility with CMake features used in the script.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_sliders/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Accessing Flutter Charts Example Folder Path\nDESCRIPTION: This shows an example file path which is used to access example packages. It is a relative path. This snippet is used to open an example folder inside a package in an IDE.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n..\\flutter-widgets\\packages\\syncfusion_flutter_charts\\example\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file is expected to be created by the Flutter tool and contains important settings for the build process. Requires EPHEMERAL_DIR to be defined beforehand.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions\nDESCRIPTION: Adds a preprocessor definition for the application ID. This allows the application to access the application ID at compile time.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target `flutter_assemble` that depends on the Flutter library, header files, and C++ wrapper sources. This target ensures that these files are built before any other targets that depend on them.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_datagrid/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assemble\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter engine library, header files, and C++ wrapper sources. This target ensures that these files are generated before any other targets that depend on them are built.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a CMake function `list_prepend` that prepends a given prefix to each element in a list. This is a workaround for older CMake versions that do not have the `list(TRANSFORM ... PREPEND ...)` command.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the installation directory. The executable is placed in the root of the installation directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a generated CMake configuration file from the ephemeral directory. This file likely contains build settings provided by the Flutter tool.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the library directory.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_xlsio/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated files. This is used to locate configuration files and other generated build artifacts.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_chat/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Define Flutter Managed Directory\nDESCRIPTION: Defines the directory where Flutter-managed files are located, which is used for managing Flutter-specific build rules and dependencies.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies using PkgConfig\nDESCRIPTION: Uses the `find_package` and `pkg_check_modules` commands to locate system-level dependencies such as GTK, GLib, Gio, Blkid, and LZMA. These dependencies are required for the Flutter Linux application to function correctly. The `REQUIRED IMPORTED_TARGET` option creates imported targets that can be linked to later.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_calendar/example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a CMake function to prepend a prefix to each element in a list. This function is used to update the paths in FLUTTER_LIBRARY_HEADERS.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the project to 3.10.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_charts/example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory, allowing CMake to process the Flutter build rules.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_signaturepad/example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining Wrapper Source Files\nDESCRIPTION: Defines lists of C++ source files for the core, plugin, and app wrapper components. The paths to these source files are prepended with the wrapper root directory. These are separated into CORE, PLUGIN, and APP components.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdf/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name and specifies that C++ is the language being used. This is a fundamental step for any CMake project.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Adding runner subdirectory\nDESCRIPTION: Adds the \"runner\" subdirectory which contains the application-specific build rules.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_pdfviewer_platform_interface/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install to Default Build\nDESCRIPTION: This snippet sets `CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD` to 1, making the install step the default build step in Visual Studio. This ensures that the application is always installed after building.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_maps/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Defines an interface library named `flutter`. This sets up include directories and links to system libraries required by Flutter.\nSOURCE: https://github.com/syncfusion/flutter-widgets/blob/master/packages/syncfusion_flutter_treemap/example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```"
  }
]