[
  {
    "owner": "kevinheavey",
    "repo": "solders",
    "content": "TITLE: Constructing and Sending SOL Transaction in Python using Solders\nDESCRIPTION: This snippet demonstrates how to construct a versioned transaction that sends SOL from one wallet to another using the Solana System Program. It uses various classes from the Solders library to create the transaction structure.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/transactions.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.hash import Hash\nfrom solders.keypair import Keypair\nfrom solders.message import MessageV0\nfrom solders.system_program import TransferParams, transfer\nfrom solders.transaction import VersionedTransaction\n\nsender = Keypair()  # let's pretend this account actually has SOL to send\nreceiver = Keypair()\nix = transfer(\n    TransferParams(\n        from_pubkey=sender.pubkey(), to_pubkey=receiver.pubkey(), lamports=1_000_000\n    )\n)\nblockhash = Hash.default()  # replace with a real blockhash using get_latest_blockhash\nmsg = MessageV0.try_compile(\n    payer=sender.pubkey(),\n    instructions=[ix],\n    address_lookup_table_accounts=[],\n    recent_blockhash=blockhash,\n)\ntx = VersionedTransaction(msg, [sender])\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing a Solana Transaction with Solders\nDESCRIPTION: Example demonstrating how to import Solders modules and use them to create a transaction. Shows creating an instruction, building a message, and signing a transaction with a keypair.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from solders.message import Message\n>>> from solders.keypair import Keypair\n>>> from solders.instruction import Instruction\n>>> from solders.hash import Hash\n>>> from solders.transaction import Transaction\n>>> from solders.pubkey import Pubkey\n>>> program_id = Pubkey.default()\n>>> arbitrary_instruction_data = bytes([1])\n>>> accounts = []\n>>> instruction = Instruction(program_id, arbitrary_instruction_data, accounts)\n>>> payer = Keypair()\n>>> message = Message([instruction], payer.pubkey())\n>>> blockhash = Hash.default()  # replace with a real blockhash\n>>> tx = Transaction([payer], message, blockhash)\n```\n\n----------------------------------------\n\nTITLE: Signing and Verifying Messages with Keypair in Solders (Python)\nDESCRIPTION: Demonstrates how to sign a message with a keypair and verify the signature. This is a fundamental cryptographic operation that allows proof of message authenticity and integrity.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/keypairs.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.keypair import Keypair\n\nsecret_key = [\n      174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138, 189, 224, 216, 117,\n      173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240,\n      121, 121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,\n] \nkeypair = Keypair.from_bytes(secret_key)\nmessage = b\"The quick brown fox jumps over the lazy dog\"\nsignature = keypair.sign_message(message)\nassert signature.verify(keypair.pubkey(), message)\n```\n\n----------------------------------------\n\nTITLE: Generating Program Derived Addresses (PDAs) in Python using Solders Pubkey\nDESCRIPTION: Shows how to use the find_program_address static method to generate a Program Derived Address (PDA). It takes an array of seed bytes and a program ID, and returns the PDA along with its bump seed.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/pubkeys.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom solders.pubkey import Pubkey\n\nprogram_id = Pubkey.from_string(\"G1DCNUQTSGHehwdLCAmRyAG8hf51eCHrLNUqkgGKYASj\")\npda, bump = Pubkey.find_program_address([b\"test\"], program_id)\nprint(f\"bump: {bump}; pda: {pda}\")\n```\n\n----------------------------------------\n\nTITLE: Partial Signing of Solana Transactions in Python using Solders\nDESCRIPTION: This snippet shows how to partially sign a transaction using the NullSigner class, then serialize and deserialize it to allow a second party to complete the signing process. It demonstrates handling multi-signature transactions without sharing private keys.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/transactions.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.hash import Hash\nfrom solders.instruction import AccountMeta, Instruction\nfrom solders.keypair import Keypair\nfrom solders.message import MessageV0, to_bytes_versioned\nfrom solders.null_signer import NullSigner\nfrom solders.pubkey import Pubkey\nfrom solders.transaction import VersionedTransaction\n\nkeypair0 = Keypair()\nkeypair1 = Keypair()\nix = Instruction(\n    Pubkey.new_unique(), b\"\", [AccountMeta(keypair1.pubkey(), True, False)]\n)\nmessage = MessageV0.try_compile(keypair0.pubkey(), [ix], [], Hash.default())\n# sign with a real signer and a null signer\nsigners = (keypair0, NullSigner(keypair1.pubkey()))\npartially_signed = VersionedTransaction(message, signers)\nserialized = bytes(partially_signed)\ndeserialized = VersionedTransaction.from_bytes(serialized)\nassert deserialized == partially_signed\ndeserialized_message = deserialized.message\n# find the null signer in the deserialized transaction\nkeypair1_sig_index = next(\n    i\n    for i, key in enumerate(deserialized_message.account_keys)\n    if key == keypair1.pubkey()\n)\nsigs = deserialized.signatures\n# replace the null signature with a real signature\nsigs[keypair1_sig_index] = keypair1.sign_message(\n    to_bytes_versioned(deserialized_message)\n)\ndeserialized.signatures = sigs\nfully_signed = VersionedTransaction(message, [keypair0, keypair1])\nassert deserialized.signatures == fully_signed.signatures\nassert deserialized == fully_signed\nassert bytes(deserialized) == bytes(fully_signed)\n```\n\n----------------------------------------\n\nTITLE: Minimal Example: Transferring Lamports with LiteSVM in Python\nDESCRIPTION: This snippet demonstrates a basic LiteSVM setup to transfer lamports from Alice to Bob without loading custom programs. It initializes LiteSVM, creates accounts, and performs a transfer transaction.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/litesvm.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.system_program import TransferParams, transfer\nfrom solders.pubkey import Pubkey\nfrom solders.keypair import Keypair\nfrom solders.litesvm import LiteSVM\n\ndef test_one_transfer():\n    svm = LiteSVM()\n    alice = Keypair()\n    bob = Keypair()\n    svm.create_account(\n        alice.pubkey(),\n        1_000_000_000\n    )\n    tx = transfer(\n        TransferParams(\n            from_pubkey=alice.pubkey(),\n            to_pubkey=bob.pubkey(),\n            lamports=500_000_000\n        )\n    )\n    svm.process_transaction(\n        tx,\n        [alice]\n    )\n    assert svm.get_balance(alice.pubkey()) == 500_000_000\n    assert svm.get_balance(bob.pubkey()) == 500_000_000\n```\n\n----------------------------------------\n\nTITLE: Generating a New Keypair in Solders (Python)\nDESCRIPTION: Creates a new random Keypair object for use with Solana. This generates a secure keypair with a random seed that can be used for transactions and other cryptographic operations.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/keypairs.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.keypair import Keypair\nkeypair = Keypair()\n```\n\n----------------------------------------\n\nTITLE: Checking Address Validity in Python using Solders Pubkey\nDESCRIPTION: Demonstrates how to check if a public key is on the ed25519 curve and suitable for users. It shows the difference between a valid user public key and an off-curve address.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/pubkeys.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom solders.pubkey import Pubkey\n\n# Note that Keypair() will always give a public key that is valid for users\nkey = Pubkey.from_string('5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY') # Valid public key\nassert key.is_on_curve() # Lies on the ed25519 curve and is suitable for users\n\noff_curve_address = Pubkey.from_string('4BJXYkfvg37zEmBbsacZjeQDpTNx91KppxFJxRqrz48e') # Valid public key\nassert not off_curve_address.is_on_curve() # Not on the ed25519 curve, therefore not suitable for users\n```\n\n----------------------------------------\n\nTITLE: Parsing a Single RPC Response in Python with Solders\nDESCRIPTION: Illustrates how to parse a JSON RPC response into a strongly-typed object using the from_json method. This example parses a GetIdentity response and demonstrates type checking and value access.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/rpc.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.rpc.responses import GetIdentityResp, RpcIdentity\nraw = \"\"\"{\n    \"jsonrpc\": \"2.0\",\n    \"result\": { \"identity\": \"2r1F4iWqVcb8M1DbAjQuFpebkQHY9hcVU4WuW2DJBppN\" },\n    \"id\": 1\n    }\"\"\"\nparsed = GetIdentityResp.from_json(raw)\nassert isinstance(parsed, GetIdentityResp)\nassert str(parsed.value.identity) == \"2r1F4iWqVcb8M1DbAjQuFpebkQHY9hcVU4WuW2DJBppN\"\n```\n\n----------------------------------------\n\nTITLE: Deploying and Testing SPL Logging Program with LiteSVM in Python\nDESCRIPTION: This example shows how to deploy a custom Solana program (SPL logging) using LiteSVM and test its functionality. It demonstrates loading a program from a file, creating necessary accounts, and executing a transaction to invoke the program.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/litesvm.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom pathlib import Path\nfrom solders.keypair import Keypair\nfrom solders.system_program import create_account, CreateAccountParams\nfrom solders.instruction import Instruction\nfrom solders.transaction import Transaction\nfrom solders.message import Message\nfrom solders.litesvm import LiteSVM\n\n@pytest.fixture(scope=\"module\")\ndef program_id():\n    return Keypair()\n\n@pytest.fixture(scope=\"module\")\ndef svm(program_id):\n    svm = LiteSVM()\n    program_data = Path(\"tests/fixtures/spl_example_logging.so\").read_bytes()\n    svm.add_program_from_file(program_id.pubkey(), program_data)\n    return svm\n\ndef test_logging(svm, program_id):\n    payer = Keypair()\n    svm.create_account(payer.pubkey(), 1_000_000_000)\n    logs = svm.get_logs()\n    assert len(logs) == 1\n    assert \"Program 11111111111111111111111111111111 invoke [1]\" in logs[0]\n    account = Keypair()\n    create_acct_ix = create_account(\n        CreateAccountParams(\n            from_pubkey=payer.pubkey(),\n            to_pubkey=account.pubkey(),\n            lamports=1_000_000,\n            space=10,\n            owner=program_id.pubkey(),\n        )\n    )\n    program_ix = Instruction(\n        program_id=program_id.pubkey(),\n        accounts=[],\n        data=b\"\",\n    )\n    msg = Message.new_with_blockhash(\n        [create_acct_ix, program_ix],\n        payer.pubkey(),\n        svm.get_latest_blockhash(),\n    )\n    tx = Transaction.new_unsigned(msg)\n    svm.process_transaction(tx, [payer, account])\n    logs = svm.get_logs()\n    assert len(logs) > 1\n    assert \"Program log: static string\" in logs[-3]\n    assert \"Program log: log message with a parameter: 42\" in logs[-2]\n    assert \"Program log: the last log message\" in logs[-1]\n```\n\n----------------------------------------\n\nTITLE: Restoring a Keypair from a Mnemonic Phrase in Solders (Python)\nDESCRIPTION: Shows how to create a Keypair from a mnemonic seed phrase (also known as a recovery phrase). This requires the Python mnemonic package and allows derivation of keypairs from human-readable phrases.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/keypairs.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.keypair import Keypair\nfrom mnemonic import Mnemonic\n\nmnemo = Mnemonic(\"english\")\nseed = mnemo.to_seed(\"pill tomorrow foster begin walnut borrow virtual kick shift mutual shoe scatter\")\nkeypair = Keypair.from_seed(seed[:32])\n```\n\n----------------------------------------\n\nTITLE: Writing Arbitrary Account Data with LiteSVM in Python\nDESCRIPTION: This example illustrates how to write arbitrary account data using LiteSVM, specifically creating a USDC account without the actual mint keypair. It demonstrates the flexibility of LiteSVM in setting up test scenarios that might not be possible in a real environment.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/litesvm.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.pubkey import Pubkey\nfrom solders.keypair import Keypair\nfrom solders.litesvm import LiteSVM\nfrom spl_token.state import Account\n\ndef test_usdc_mint():\n    svm = LiteSVM()\n    usdc_mint = Pubkey.from_string(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\")\n    alice = Keypair()\n    alice_ata = Pubkey.find_program_address(\n        [bytes(alice.pubkey()), bytes(svm.TOKEN_PROGRAM_ID), bytes(usdc_mint)],\n        svm.ASSOCIATED_TOKEN_PROGRAM_ID,\n    )[0]\n    alice_balance = 1_000_000_000\n    account = Account(\n        mint=usdc_mint,\n        owner=alice.pubkey(),\n        amount=alice_balance,\n        delegate=None,\n        state=0,\n        is_native=None,\n        delegated_amount=0,\n        close_authority=None,\n    )\n    svm.create_account_with_data(alice_ata, bytes(account))\n    assert svm.get_packed_account_data(alice_ata, Account) == account\n```\n\n----------------------------------------\n\nTITLE: Creating a Batch RPC Request in Python with Solders\nDESCRIPTION: Shows how to combine multiple RPC request objects into a single JSON batch request using the batch_to_json function. This example creates a batch request with GetClusterNodes and GetEpochSchedule methods.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/rpc.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.rpc.requests import batch_to_json, GetClusterNodes, GetEpochSchedule\nbatch_to_json([GetClusterNodes(0), GetEpochSchedule(1)])\n```\n\n----------------------------------------\n\nTITLE: Restoring a Keypair from Secret Key Bytes in Solders (Python)\nDESCRIPTION: Creates a Keypair from an existing 64-byte secret key. This method is used when you already have the raw bytes of a keypair and need to reconstruct the Keypair object.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/keypairs.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.keypair import Keypair\n\nsecret_key = [\n    174, 47, 154, 16, 202, 193, 206, 113,\n    199, 190, 53, 133, 169, 175, 31, 56,\n    222, 53, 138, 189, 224, 216, 117, 173,\n    10, 149, 53, 45, 73, 251, 237, 246,\n    15, 185, 186, 82, 177, 240, 148, 69,\n    241, 227, 167, 80, 141, 89, 240, 121,\n    121, 35, 172, 247, 68, 251, 226, 218,\n    48, 63, 176, 109, 168, 89, 238, 135,\n]\n\nkeypair = Keypair.from_bytes(secret_key)\nprint(f\"Created Keypair with public key: {keypair.pubkey()}\")\n```\n\n----------------------------------------\n\nTITLE: Restoring a Keypair from Base58 String in Solders (Python)\nDESCRIPTION: Creates a Keypair from a base58-encoded secret key string. This method is useful when working with secret keys stored in base58 format, which is common in Solana.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/keypairs.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.keypair import Keypair\n\nb58_string = \"5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG\"\nkeypair = Keypair.from_base58_string(b58_string)\nprint(f\"Created Keypair with public key: {keypair.pubkey()}\")\n```\n\n----------------------------------------\n\nTITLE: Converting a Keypair to Raw Bytes in Solders (Python)\nDESCRIPTION: Demonstrates how to convert a Keypair object to its raw byte representation. This returns a 64-byte array where the first 32 bytes are the secret seed and the last 32 bytes are the public key.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/keypairs.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.keypair import Keypair\nkeypair = Keypair()\nraw = bytes(keypair)\n```\n\n----------------------------------------\n\nTITLE: Verifying a Keypair in Solders (Python)\nDESCRIPTION: Demonstrates how to verify that a public key corresponds to a specific keypair. This is useful when you need to confirm the relationship between a keypair and a known public key.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/keypairs.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.keypair import Keypair\nfrom solders.pubkey import Pubkey\n\npublic_key = Pubkey.from_string(\"24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p\")\n\nkeys = [\n        174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,\n        189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,\n        148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,\n        63, 176, 109, 168, 89, 238, 135,\n    ]\nkeypair = Keypair.from_bytes(keys)\n\nassert keypair.pubkey() == public_key\n```\n\n----------------------------------------\n\nTITLE: Building a GetFeeForMessage RPC Request in Python\nDESCRIPTION: Demonstrates how to construct a GetFeeForMessage RPC request object and convert it to a JSON string using the .to_json() method. It includes setting the commitment level and using a default MessageV0.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/rpc.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.rpc.requests import GetFeeForMessage\nfrom solders.commitment_config import CommitmentLevel\nfrom solders.message import MessageV0\nGetFeeForMessage(MessageV0.default(), commitment=CommitmentLevel.Processed).to_json()\n```\n\n----------------------------------------\n\nTITLE: Parsing an RPC Batch Response in Python with Solders\nDESCRIPTION: Demonstrates how to parse an RPC batch response into a list of strongly-typed objects using the batch_from_json function. This example parses responses for GetBlockHeight and GetFirstAvailableBlock methods.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/rpc.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom solders.rpc.responses import batch_from_json, GetBlockHeightResp, GetFirstAvailableBlockResp\nraw = '[{ \"jsonrpc\": \"2.0\", \"result\": 1233, \"id\": 1 },{ \"jsonrpc\": \"2.0\", \"result\": 111, \"id\": 1 }]'\nbatch_from_json(raw, [GetBlockHeightResp, GetFirstAvailableBlockResp])\n```\n\n----------------------------------------\n\nTITLE: Time Travel Testing with LiteSVM Clock Manipulation in Python\nDESCRIPTION: This snippet demonstrates how to use LiteSVM's time manipulation features to test time-dependent Solana programs. It uses a custom program that panics if the unix timestamp is greater than 100, and shows how to set the clock to different times for testing.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/litesvm.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom pathlib import Path\nfrom solders.keypair import Keypair\nfrom solders.system_program import create_account, CreateAccountParams\nfrom solders.instruction import Instruction\nfrom solders.transaction import Transaction\nfrom solders.message import Message\nfrom solders.clock import Clock\nfrom solders.litesvm import LiteSVM\n\n@pytest.fixture(scope=\"module\")\ndef program_id():\n    return Keypair()\n\n@pytest.fixture(scope=\"module\")\ndef svm(program_id):\n    svm = LiteSVM()\n    program_data = Path(\"tests/fixtures/clock_example.so\").read_bytes()\n    svm.add_program_from_file(program_id.pubkey(), program_data)\n    return svm\n\ndef test_clock(svm, program_id):\n    payer = Keypair()\n    svm.create_account(payer.pubkey(), 1_000_000_000)\n    account = Keypair()\n    create_acct_ix = create_account(\n        CreateAccountParams(\n            from_pubkey=payer.pubkey(),\n            to_pubkey=account.pubkey(),\n            lamports=1_000_000,\n            space=10,\n            owner=program_id.pubkey(),\n        )\n    )\n    program_ix = Instruction(\n        program_id=program_id.pubkey(),\n        accounts=[],\n        data=b\"\",\n    )\n    msg = Message.new_with_blockhash(\n        [create_acct_ix, program_ix],\n        payer.pubkey(),\n        svm.get_latest_blockhash(),\n    )\n    tx = Transaction.new_unsigned(msg)\n    svm.process_transaction(tx, [payer, account])\n    logs = svm.get_logs()\n    assert \"Program log: Clock is OK\" in logs[-1]\n    svm.set_clock(Clock(unix_timestamp=101))\n    with pytest.raises(Exception):\n        svm.process_transaction(tx, [payer, account])\n    logs = svm.get_logs()\n    assert \"Program log: Clock is too late!\" in logs[-1]\n```\n\n----------------------------------------\n\nTITLE: Installing Solders with pip\nDESCRIPTION: Simple pip command to install the Solders package. Requires Python 3.7 or higher.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install solders\n```\n\n----------------------------------------\n\nTITLE: Sphinx Automodule Documentation Directive for Transaction Module\nDESCRIPTION: RST directive to automatically generate documentation from the solders.transaction Python module, including all members and undocumented members.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/transaction.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: solders.transaction\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Solders Pubkey Module\nDESCRIPTION: ReStructuredText documentation structure that uses autodoc to generate documentation for the solders.pubkey module, including all members and undocumented members.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/pubkey.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n======\nPubkey\n======\n\n.. automodule:: solders.pubkey\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Signature Module Documentation with Sphinx\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the solders.signature module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/signature.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: solders.signature\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for solders.instruction Module\nDESCRIPTION: This directive instructs Sphinx to automatically generate documentation for the 'solders.instruction' module, including all members and undocumented members. This is typically used in Python documentation to create API references.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/instruction.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: solders.instruction\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Hash Module Documentation with Sphinx\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the solders.hash module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/hash.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: solders.hash\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: reStructuredText Documentation Block for solders.clock\nDESCRIPTION: A reStructuredText directive block that configures automatic documentation generation for the solders.clock module. It includes all members and undocumented members.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/clock.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=====\nClock\n=====\n\n.. automodule:: solders.clock\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Compute Budget Module Documentation with Sphinx\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the solders.compute_budget module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/compute_budget.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: solders.compute_budget\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation Directive\nDESCRIPTION: RestructuredText directive to automatically generate documentation for the solders.commitment_config module, including all members and undocumented members.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/commitment_config.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: solders.commitment_config\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Importing Solders RPC Config Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the RPC configuration module from the Solders project. It uses Python's automodule directive to automatically generate documentation for all members and undocumented members of the module.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/rpc/config.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: solders.rpc.config\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Python Module Documentation for Solders RPC Errors\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the solders.rpc.errors module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/rpc/errors.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: solders.rpc.errors\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for solders.rpc.requests Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the solders.rpc.requests module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/rpc/requests.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: solders.rpc.requests\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for Solders RPC Responses in Python\nDESCRIPTION: This snippet configures the Sphinx autodoc extension to generate documentation for the solders.rpc.responses module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/rpc/responses.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: solders.rpc.responses\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation Directive\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the solders.system_program module, including all members and undocumented members.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/system_program.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: solders.system_program\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for SPL Associated Token Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the solders.token.associated module. It includes all members and undocumented members in the generated documentation.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/token/associated.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: solders.token.associated\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText AutoDoc Transaction Metadata Documentation\nDESCRIPTION: ReStructuredText directive for automatically generating documentation from the solders.transaction_metadata module. Includes all members and undocumented members.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/transaction_metadata.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: solders.transaction_metadata\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Block for Transaction Status Module\nDESCRIPTION: Sphinx documentation directive to automatically generate API documentation for the solders.transaction_status module, including all members and undocumented members.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/transaction_status.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: solders.transaction_status\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Sysvar Module Documentation with Sphinx\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the solders.sysvar module. It includes all members and undocumented members in the generated documentation.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/sysvar.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: solders.sysvar\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Automodule Configuration for Solders Stake History in RST\nDESCRIPTION: Sphinx documentation directive that automatically includes documentation for the stake_history module in the Solders project. The directive includes all members and undocumented members from the module.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/stake_history.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: solders.stake_history\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Slot History Module Documentation in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the solders.slot_history module. It includes all members and undocumented members in the generated documentation.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/slot_history.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: solders.slot_history\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for LiteSVM Module\nDESCRIPTION: Sphinx reStructuredText directive for automatically generating documentation from the solders.litesvm Python module. The configuration includes all module members and undocumented members.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/litesvm.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: solders.litesvm\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Solders Epoch Rewards Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the solders.epoch_rewards module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/epoch_rewards.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: solders.epoch_rewards\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Address Lookup Table Account Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the solders.address_lookup_table_account module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/address_lookup_table_account.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: solders.address_lookup_table_account\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Python Module Documentation for Solders Account Decoder\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the solders.account_decoder module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/account_decoder.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: solders.account_decoder\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Solders Tutorials in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the Solders project tutorials using reStructuredText directives. It sets the maximum depth to 2 and lists the tutorial topics.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/tutorials/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   \n   keypairs\n   pubkeys\n   transactions\n   rpc\n   litesvm\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for Solders Project\nDESCRIPTION: This snippet configures the Sphinx documentation structure for the Solders project. It includes the README file and sets up a table of contents with links to tutorials and API reference.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../README.md\n   :parser: myst_parser.sphinx_\n\n.. toctree::\n   :maxdepth: 1\n\n   self\n   tutorials/index\n   api_reference/index\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure\nDESCRIPTION: ReStructuredText toctree directive that defines the structure of the API documentation, listing all available modules in the Solders project.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   account\n   account_decoder\n   address_lookup_table_account\n   clock\n   commitment_config\n   compute_budget\n   epoch_rewards\n   epoch_schedule\n   errors\n   hash\n   instruction\n   litesvm\n   keypair\n   message\n   null_signer\n   presigner\n   pubkey\n   rpc/index\n   signature\n   slot_history\n   stake_history\n   system_program\n   sysvar\n   token/index\n   transaction_metadata\n   transaction_status\n   transaction\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for SPL Token\nDESCRIPTION: Documentation structure using reStructuredText (RST) format to organize SPL Token modules with associated and state components using toctree directive\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/token/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=========\nSPL Token\n=========\n\n\nModules:\n\n.. toctree::\n   :maxdepth: 2\n\n   associated\n   state\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for solders.message\nDESCRIPTION: RST directive to automatically generate documentation for the solders.message module, including all members and undocumented members.\nSOURCE: https://github.com/kevinheavey/solders/blob/main/docs/api_reference/message.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: solders.message\n    :members:\n    :undoc-members:\n```"
  }
]