[
  {
    "owner": "tonaljs",
    "repo": "tonal",
    "content": "TITLE: Migrating from Default to Named Exports in @tonaljs/note (JavaScript)\nDESCRIPTION: This snippet illustrates the deprecated use of default exports and the recommended approach using named exports for importing modules from the @tonaljs/note package. It details how to import Note from @tonaljs/note using both the deprecated method and the correct method using `import * as Note`. This change affects all tonaljs modules.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/collection/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Importing Note Module (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to import the Note module from the @tonaljs/note package.  It provides the correct way to import the module after the deprecation of default exports, using the `* as` syntax. The module must be installed via npm or a similar package manager.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/CHANGELOG.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Getting Chord Notes\nDESCRIPTION: This Javascript snippet uses the `Chord.notes` function to get the notes of a chord. It requires the 'tonal' library and provides examples with different chord qualities and a bass note.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CHANGELOG.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nChord.notes(\"Cmaj7\", \"C4\"); // => ['C4', 'E4', 'G4', 'B4']\nChord.notes(\"maj7\", \"D5\"); // => ['D5', 'F#5', 'A5', 'C#6']\n```\n\n----------------------------------------\n\nTITLE: Retrieving Note Properties with Note.get in JavaScript\nDESCRIPTION: Example of using Note.get to retrieve complete note information and various shorthands to access specific properties like name, pitchClass, accidentals, octave, midi, frequency, and chroma.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/notes.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nNote.get(\"C4\"); // => { name: \"C4\", midi: 60, ... }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nNote.name(\"fx4\"); // => \"F##4\"\nNote.pitchClass(\"Ab5\"); // => \"Ab\"\nNote.accidentals(\"Eb\"); // => 'Eb'\nNote.octave(\"C4\"); // => 4\nNote.midi(\"A4\"); // => 69\nNote.freq(\"A4\"); // => 440\nNote.chroma(\"D\"); // => 2\n\n[\"C\", \"D\", \"E\"].map(Note.chroma); // => [0, 2, 4]\n```\n\n----------------------------------------\n\nTITLE: Importing Note and Interval from Tonal.js\nDESCRIPTION: This code snippet imports the `note` and `interval` functions from the `@tonaljs/core` module. These functions are used to parse note and interval names and retrieve their properties. There are no external dependencies besides the Tonal.js library. The function returns an object containing the properties.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { note, interval } from \"@tonaljs/core\";\nnote(\"c4\"); // => { name: 'C4', oct: 4, ...}\ninterval(\"p5\"); // => { name: '5P', semitones: 7, ...}\n```\n\n----------------------------------------\n\nTITLE: Importing Scale and Getting Notes Tonal.js JavaScript\nDESCRIPTION: Imports the `Scale` object from the 'tonal' package and demonstrates how to get the notes of a specific scale by name. The scale name can include a tonic and octave (e.g., \"c5 pentatonic\"). Accessing the `.notes` property returns an array of note strings.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Scale } from \"tonal\";\n\nScale.get(\"c5 pentatonic\").notes; // => [\"C5\", \"D5\", \"E5\", \"G5\", \"A5\"],\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between Notes\nDESCRIPTION: This snippet uses the `Note.distance()` function to calculate the interval between two notes. The function takes two note names as input and returns the interval between them as a string.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nNote.distance(\"C\", \"D\").toEqual(\"2M\");\nNote.distance(\"C3\", \"E3\").toEqual(\"3M\");\nNote.distance(\"C3\", \"E4\").toEqual(\"10M\");\n```\n\n----------------------------------------\n\nTITLE: Creating Chord with Specific Parts\nDESCRIPTION: Demonstrates using `Chord.getChord` to construct a chord by explicitly specifying the chord type, tonic, and bass. This method offers more control over chord construction compared to `Chord.get` with a single string argument.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nChord.getChord(\"maj7\", \"C\", \"B\") === Chord.get(\"Cmaj7/B\");\n```\n\n----------------------------------------\n\nTITLE: Calculate Interval Distance - JavaScript\nDESCRIPTION: Calculate the interval between two notes using `Interval.distance()`. The function takes two note names as strings (e.g., \"C4\", \"G4\") and returns the interval between them (e.g., \"5P\").\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nInterval.distance(\"C4\", \"G4\"); // => \"5P\"\n```\n\n----------------------------------------\n\nTITLE: Basic Note Operations in JavaScript with Tonal.js\nDESCRIPTION: Examples of basic note operations including getting note information, extracting note parts, converting between MIDI and notes, and finding enharmonic equivalents using Tonal.js.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/notes.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Note } from \"tonal\";\n\nNote.get(\"C4\"); // => { midi: 60 ...}\nNote.name(\"fx4\"); // => \"F##4\"\nNote.pitchClass(\"Ab5\"); // => \"Ab\"\nNote.octave(\"C4\"); // => 4\nNote.midi(\"A4\"); // => 69\nNote.fromMidi(61); // => \"Db4\"\nNote.enharmonic(\"C#\"); // => \"Db\"\n```\n\n----------------------------------------\n\nTITLE: Importing Tonal Modules (ES6) in Javascript\nDESCRIPTION: This snippet demonstrates the standard ES6 syntax for importing named modules like 'Note' and 'Scale' from the 'tonal' package. Use this in modern JavaScript environments or with bundlers. Requires the 'tonal' package installed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Note, Scale } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Importing RhythmPattern in ES6\nDESCRIPTION: Shows how to import the RhythmPattern module using ES6 import syntax for the full Tonal library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/rhythm-pattern/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RhythmPattern } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tonal Library Functionality - JavaScript\nDESCRIPTION: Provides various examples of how to use functions from the tonal library for notes, intervals, scales, and chords. Includes operations like unit conversion, transposition, interval calculations, scale generation, and chord manipulations. Requires the 'tonal' package installed via npm.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Chord, Interval, Note, Scale } from \"tonal\";\n\nNote.midi(\"C4\"); // => 60\nNote.freq(\"a4\"); // => 440\nNote.accidentals(\"c#2\"); // => '#'\nNote.transpose(\"C4\", \"5P\"); // => \"G4\"\nInterval.semitones(\"5P\"); // => 7\nInterval.distance(\"C4\", \"G4\"); // => \"5P\"\n\n// Scales\nScale.get(\"C major\").notes; // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n[1, 3, 5, 7].map(Scale.degrees(\"C major\")); // => [\"C\", \"E\", \"G\", \"B\"]\n\nChord.get(\"Cmaj7\").name; // => \"C major seventh\"\n\n// Chord inversions\nconst triad = Chord.degrees(\"Cm\");\n[1, 2, 3].map(triad); // => [\"C\", \"Eb\", \"G\"];\n[2, 3, 1].map(triad); // => [\"Eb\", \"G\", \"C\"];\n[3, 1, 2].map(triad); // => [\"G\", \"C\", \"Eb\"];\n```\n\n----------------------------------------\n\nTITLE: Using Interval Calculations in Tonal (JavaScript)\nDESCRIPTION: Demonstrates how to use core functions in the Tonal.js Intervals module to measure distances between notes, invert and simplify intervals, compute semitones, and add intervals. Requires the 'tonal' library as a dependency. Input values are interval or note strings; outputs are interval names or numbers, depending on the method called.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/intervals.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Interval } from \"tonal\";\n\nInterval.distance(\"C4\", \"G4\"); // => \"5P\"\nInterval.invert(\"2M\"); // => \"7m\"\nInterval.simplify(\"9M\"); // => \"2M\"\nInterval.semitones(\"4P\"); // => 5\nInterval.add(\"4P\", \"2M\"); // => \"5P\"\n```\n\n----------------------------------------\n\nTITLE: Transposing Musical Notes Using @tonaljs/pitch-distance in JavaScript\nDESCRIPTION: The transpose function takes a note string and an interval string and returns the transposed note name as a string. If parameters are invalid, it returns an empty string. It supports notes with or without octave numbers, and intervals such as \"3M\" for a major third. Examples demonstrate transposing single notes and mapping over arrays of notes. The function handles invalid inputs gracefully, always returning a string.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pitch-distance/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { transpose } from \"@tonaljs/pitch-distance\";\ntranspose(\"C4\", \"5P\"); // => \"G4\"\n\n// Examples\ntranspose(\"d3\", \"3M\"); // => \"F#3\"\ntranspose(\"D\", \"3M\"); // => \"F#\"\n[\"C\", \"D\", \"E\", \"F\", \"G\"].map((pc) => transpose(pc, \"M3\"));\n// => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n\n// Invalid input always returns empty string\ntranspose(\"one\", \"two\"); // => \"\"\n```\n\n----------------------------------------\n\nTITLE: Transposing Notes by Interval\nDESCRIPTION: This snippet demonstrates how to transpose a note by a given interval using `Note.transpose()`. It takes a note name and an interval as input and returns the transposed note name. Empty string is returned if the parameters are invalid. The interval defines the direction and size of the transposition.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nNote.transpose(\"d3\", \"3M\"); // => \"F#3\"\nNote.transpose(\"D\", \"3M\"); // => \"F#\"\n```\n\n----------------------------------------\n\nTITLE: Transposing Notes with Curried Functions\nDESCRIPTION: This snippet illustrates the use of curried versions of the `transpose` function (`transposeBy` and `transposeFrom`) to simplify transposing multiple notes. It demonstrates how to apply a fixed interval to an array of notes. These functions allows you to perform multiple transpositions in a more concise manner.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n[\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\n// => [\"G\", \"A\", \"B\"]\n\n[\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\n// => [\"C\", \"E\", \"G\"]\n```\n\n----------------------------------------\n\nTITLE: Find Distance Between Notes Using distance()\nDESCRIPTION: The `distance()` function calculates and returns the interval name between two notes. It takes two string arguments representing the notes.  The function returns the interval name as a string, or an empty string if the parameters are invalid. It leverages the `@tonaljs/core` module.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndistance(\"C3\", \"E4\"); // => \"10M\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Note Properties Shorthands\nDESCRIPTION: This code demonstrates the use of shorthand functions to retrieve specific note properties. It showcases functions like `Note.name()`, `Note.pitchClass()`, `Note.accidentals()`, `Note.octave()`, `Note.midi()`, `Note.freq()`, and `Note.chroma()`.  Each function takes a note name as input and returns the corresponding property value.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nNote.name(\"fx4\"); // => \"F##4\"\nNote.pitchClass(\"Ab5\"); // => \"Ab\"\nNote.accidentals(\"Eb\"); // => 'b'\nNote.octave(\"C4\"); // => 4\nNote.midi(\"A4\"); // => 69\nNote.freq(\"A4\"); // => 440\nNote.chroma(\"D\"); // => 2\n\n[\"C\", \"D\", \"E\"].map(Note.chroma); // => [0, 2, 4]\n```\n\n----------------------------------------\n\nTITLE: Simplified Interval from Pitch Class with distance()\nDESCRIPTION: This code illustrates how the `distance()` function simplifies the interval when one of the notes is a pitch class (e.g., C).  It highlights the behavior where the octave is omitted. It uses the `@tonaljs/core` module and returns a string representing the simplified interval.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndistance(\"C\", \"E\"); // => \"3M\"\ndistance(\"C\", \"E4\"); // => \"3M\"\ndistance(\"C4\", \"E\"); // => \"3M\"\n```\n\n----------------------------------------\n\nTITLE: Importing Function from Specific Tonal Module - JavaScript\nDESCRIPTION: Shows how to import and use a function directly from an individually installed '@tonaljs' scoped module. This approach is recommended for minimizing the final application bundle size when using bundlers. Requires the specific '@tonaljs' module to be installed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { transpose } from \"@tonaljs/note\";\ntranspose(\"A4\", \"P5\");\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between Notes with Interval.distance (JavaScript)\nDESCRIPTION: Shows the use of 'Interval.distance' to calculate the interval between two notes using Tonal.js. Takes two note strings as input and returns the interval as a string (e.g., \"5P\"). Requires the 'tonal' package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/intervals.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nInterval.distance(\"C4\", \"G4\"); // => \"5P\"\n```\n\n----------------------------------------\n\nTITLE: Using Function from Individual Tonal Module in Javascript\nDESCRIPTION: This snippet demonstrates importing a specific function ('transpose') directly from an individually installed module ('@tonaljs/note'). This further reduces bundle size by only importing what is needed. Requires the '@tonaljs/note' package to be installed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/index.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { transpose } from \"@tonaljs/note\";\ntranspose(\"A4\", \"P5\");\n```\n\n----------------------------------------\n\nTITLE: Utility Examples for Note Properties with @tonaljs/note in JavaScript\nDESCRIPTION: These snippets demonstrate usage of the @tonaljs/note package to extract properties like octave, midi number, and validity status from note strings. They also show how to check if two notes are enharmonic by comparing midi or height values. Examples illustrate filtering out invalid notes and changing octaves by manipulating pitch classes. These utilities help validate and process musical notes in combination with pitch-distance calculations.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pitch-distance/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Getting note properties\nnote(\"C4\").octave; // => 4\nnote(\"C4\").midi; // => 60\n\n// Validity checking\nnote(\"C4\").empty; // => false\nnote(\"x\").empty; // => true\nnote(\"x\").name; // => \"\"\nnote(\"x\").octave; // => undefined\n\n// Filtering invalid notes\n[...].map(note).filter(n => !n.empty).map(n => n.name)\n\n// Checking enharmonics\nnote(\"Cb4\").midi === note(\"B3\").midi;\n\n// Using height property\nnote(\"Cb\").height === note(\"B\").height;\n\n// Changing octave\nnote(\"Cb4\").pc + 5; // => \"Cb5\"\n```\n\n----------------------------------------\n\nTITLE: Get the Midi number of a note\nDESCRIPTION: This demonstrates how to retrieve the MIDI number of a note using the `note()` function. The function returns the MIDI value. It depends on the `@tonaljs/core` module. The input is a valid note name and the output is the midi number.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nnote(\"C4\").midi; // => 60\n```\n\n----------------------------------------\n\nTITLE: Transposing Notes by Fifths\nDESCRIPTION: This snippet demonstrates the `Note.transposeFifths()` function, which transposes a note by a specified number of fifths. The function takes a note name and a number representing the fifths to transpose by, and returns the transposed note name.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nNote.transposeFifths(\"G4\", 3); // => \"E6\"\nNote.transposeFifths(\"G\", 3); // => \"E\"\n\n[0, 1, 2, 3, 4, 5, 6].map((n) => transposeFifths(\"F#\", n));\n// => [\"F#\", \"C#\", \"G#\", \"D#\", \"A#\", \"E#\", \"B#\"]\n[0, -1, -2, -3, -4, -5, -6].map((n) => transposeFifths(\"Bb\", n));\n// => [\"Bb\", \"Eb\", \"Ab\", \"Db\", \"Gb\", \"Cb\", \"Fb\"]\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Interval Property Functions (JavaScript)\nDESCRIPTION: Shows usage of shorthand functions like 'name', 'num', 'quality', and 'semitones' from the Tonal.js Intervals module to quickly access basic information about intervals. These functions expect an interval string as input and return the corresponding property (e.g., interval name, number, or quality). The library dependency is 'tonal'.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/intervals.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nInterval.name(\"d4\"); // => \"4d\"\nInterval.num(\"5P\"); // => 5\nInterval.quality(\"5P\"); // => \"P\"\nInterval.semitones(\"P4\"); // => 5\n```\n\n----------------------------------------\n\nTITLE: Importing Tonal.js Key Module and Accessing Major Key Properties in JavaScript\nDESCRIPTION: Imports the Tonal.js Key module and demonstrates retrieving triads and specific chords from a major key using `majorKey` and `majorKeyChords` functions. The snippet shows how to access chord arrays and find a chord object by name within a major key context.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/keys.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Key from \"tonal\";\n\nKey.majorKey(\"C\").triads; // => [\"C\", \"Dm\", \"Em\", \"F\", \"G\" \"Am\", \"Bdim\"],\nKey.majorKeyChords(\"C\").find((chord) => chord.name === \"Em\"); // => { name: \"Em\", roles: [\"T\", \"ii/II\"] }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Major Key Properties Using `majorKey` in JavaScript\nDESCRIPTION: Shows how to obtain a comprehensive object representing a major key given a tonic. The object includes properties such as tonic, type, relative minor, scale intervals, grades, triads, chords, harmonic functions, chord scales, and various dominant substitutions. Requires the Tonal.js Key package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/keys.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nKey.majorKey(\"C\") // =>\n{\n  tonic: \"C\",\n  type: \"major\",\n  minorRelative: \"A\",\n  alteration: 0,\n  keySignature: \"\",\n  grades: [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"],\n  intervals: [\"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\"],\n  scale: [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"],\n  triads: [\"C\", \"Dm\", \"Em\", \"F\", \"G\" \"Am\", \"Bdim\"],\n  chords: [\"Cmaj7\", \"Dm7\", \"Em7\", \"Fmaj7\", \"G7\" \"Am7\", \"Bm7b5\"],\n  chordsHarmonicFunction: [\"T\", \"SD\", \"T\", \"SD\", \"D\", \"T\", \"D\"],\n  chordScales: [\"C major\", \"D dorian\", \"E phrygian\", \"F lydian\", \"G mixolydian\", \"A minor\", \"B locrian\"],\n  secondaryDominants: [\"\", \"A7\", \"B7\", \"C7\", \"D7\", \"E7\", \"\"],\n  secondaryDominantsSupertonics: [\"\"  \"Em7b5\", \"F#m7\", \"Gm7\", \"Am7\",  \"Bm7b5\", \"\"],\n  substituteDominants: [\"\" \"Eb7\", \"F7\",  \"Gb7\", \"Ab7\", \"Bb7\", \"\"],\n  substituteDominantsSupertonics: [ '', 'Bbm7', 'Cm7', 'Dbm7b5', 'Ebm7b5', 'Fm7', '' ],\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Note Name to Midi Number in Tonal.js\nDESCRIPTION: This snippet demonstrates how to convert a note name (e.g., \"C4\") to its corresponding MIDI number using the `Midi.toMidi` function from the Tonal.js library. It imports the `Midi` object and then calls `Midi.toMidi` with a note name as input, returning the MIDI number.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/midi.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Midi } from \"tonal\";\n\nMidi.toMidi(\"C4\"); // => 60\n```\n\n----------------------------------------\n\nTITLE: Get Note Properties Using note()\nDESCRIPTION: The `note()` function takes a note name as a string and returns an object containing various properties of the note, such as name, pitch class, octave, chroma, midi, and frequency. The function does not require external dependencies, and the expected input is a valid or invalid note name string. The output is an object with note properties.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnote(\"ab4\");\n// =>\n// {\n//   name: \"Ab4\",\n//   pc: \"Ab\",\n//   letter: \"A\",\n//   acc: \"b\",\n//   step: 5,\n//   alt: -1,\n//   oct: 4,\n//   chroma: 8,\n//   midi: 68,\n//   freq: 415.3046975799451,\n// }\n```\n\n----------------------------------------\n\nTITLE: Transposing chords with 'Chord.transpose'\nDESCRIPTION: This snippet demonstrates transposing a chord symbol by a given interval ('5P') using 'Chord.transpose', useful for key modulation or chord progression variations.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.transpose(\"Eb7b9\", \"5P\"); // => \"Bb7b9\"\n```\n\n----------------------------------------\n\nTITLE: Invert Interval - JavaScript\nDESCRIPTION: Invert an interval using `Interval.invert()`. This function calculates the inversion of a given interval (e.g., \"3m\" becomes \"6M\"). It takes the interval name as a string and returns the inverted interval name.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nInterval.invert(\"3m\"); // => \"6M\"\nInterval.invert(\"2M\"); // => \"7m\"\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Chords of a Minor Key Using `minorKeyChords` in JavaScript\nDESCRIPTION: Retrieves a comprehensive list of chords available in a given minor key as chord objects with names and roles. The example generates a comma-separated list of chord names for the tonic 'C'. Requires the Tonal.js Key package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/keys.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nKey.minorKeyChords(\"C\")\n  .map((chord) => chord.name)\n  .join(\", \");\n// => \"Cm7, Dm7b5, Ebmaj7, Fm7, Gm7, Abmaj7, Bb7, G7, C7, D7, Eb7, F7, Dm7, Am7, Bbm7b5, Cm7b5, Db7, Gb7, Ab7, Bbb7, Cb7, Abm7, Dbm7, Ebm7, Fbm7b5, Gbm7b5, CmMaj7, Eb+maj7, Bo7, Am7b5, Ebm7b5, Cm6, Bm7b5, A7, Em7, Gm7b5, Bbm7, Dbm7b5\"\n```\n\n----------------------------------------\n\nTITLE: Check if a note name is valid\nDESCRIPTION: This code illustrates how to check if a note name is valid by inspecting its `empty` property after parsing it with the `note()` function. This property is true if the note is invalid. The snippet uses functions from `@tonaljs/core`. The input is a string and the output is a boolean.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nnote(\"C4\").empty; // => false\nnote(\"x\").empty; // => true\nnote(\"x\").name; // => \"\"\nnote(\"x\").octave; // => undefined\n// remove all invalid note names\n[...].map(note).filter(n => !n.empty).map(n => n.name)\n```\n\n----------------------------------------\n\nTITLE: Getting Major Key Properties (JavaScript)\nDESCRIPTION: Provides an example of calling the `Key.majorKey` function with the tonic \"C\" and shows the comprehensive object returned. This object contains detailed properties of the C major key, including its type, relative minor, alteration, scale, chords, harmonic functions, and related concepts. Requires the \"tonal\" package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/key/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nKey.majorKey(\"C\") // =>\n{\n  tonic: \"C\",\n  type: \"major\",\n  minorRelative: \"A\",\n  alteration: 0,\n  keySignature: \"\",\n  grades: [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"],\n  intervals: [\"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\"],\n  scale: [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"],\n  triads: [\"C\", \"Dm\", \"Em\", \"F\", \"G\", \"Am\", \"Bdim\"],\n  chords: [\"Cmaj7\", \"Dm7\", \"Em7\", \"Fmaj7\", \"G7\", \"Am7\", \"Bm7b5\"],\n  chordsHarmonicFunction: [\"T\", \"SD\", \"T\", \"SD\", \"D\", \"T\", \"D\"],\n  chordScales: [\"C major\", \"D dorian\", \"E phrygian\", \"F lydian\", \"G mixolydian\", \"A minor\", \"B locrian\"],\n  secondaryDominants: [\"\", \"A7\", \"B7\", \"C7\", \"D7\", \"E7\", \"\"],\n  secondaryDominantsMinorRelative: [\"\", \"Em7b5\", \"F#m7\", \"Gm7\", \"Am7\", \"Bm7b5\", \"\"],\n  substituteDominants: [\"\", \"Eb7\", \"F7\", \"Gb7\", \"Ab7\", \"Bb7\", \"\"],\n  substituteDominantsMinorRelative: [\"\", \"Em7\", \"Cm7\", \"Dbm7\", \"Am7\", \"Fm7\", \"\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Scale Range Tonal.js JavaScript\nDESCRIPTION: `Scale.rangeOf()` takes a scale name (which *must* include a tonic) and returns a function. This returned function generates an array of notes within that scale between two specified note limits (`from` and `to`), inclusive.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst range = Scale.rangeOf(\"C pentatonic\");\nrange(\"C4\", \"C5\"); // => [\"C4\", \"D4\", \"E4\", \"G4\", \"A4\", \"C5\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Note Module in Node.js\nDESCRIPTION: This snippet illustrates importing the `Note` module using the CommonJS `require` syntax, suitable for Node.js environments. It allows access to the note manipulation functions provided by the module.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Note } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Creating Numeric MIDI Ranges using Range.numeric in JavaScript\nDESCRIPTION: This function generates a numeric (MIDI) range between given notes or numbers. It accepts an array of note names or midi numbers and returns an ordered array connecting the start and end points, supporting ascending and descending sequences. Dependencies include the @tonaljs/range module. Inputs are note names or midi numbers; output is an array of midi numbers representing the range.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/range/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nRange.numeric([10, 5]); // => [ 10, 9, 8, 7, 6, 5 ]\nRange.numeric([-5, 5]); // => [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\nRange.numeric([\"C5\", \"C4\"]); // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\nRange.numeric([\"C4\", \"E4\", \"Bb3\"]); // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\n```\n\n----------------------------------------\n\nTITLE: Determine if Two Notes are Enharmonics using height\nDESCRIPTION: The snippet demonstrates a more robust way to determine if two notes are enharmonics by utilizing the `height` property. It uses functions from the `@tonaljs/core` module. The input is a string and the output is a boolean.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nnote(\"Cb\").height === note(\"B\").height;\n```\n\n----------------------------------------\n\nTITLE: Adding Intervals with Interval.add (JavaScript)\nDESCRIPTION: Illustrates the 'Interval.add' function which combines two intervals and returns their sum as an interval string. Inputs are two interval strings; the result adheres to music theory interval addition rules. The function requires Tonal.js.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/intervals.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nInterval.add(\"3m\", \"5P\"); // => \"7m\"\n```\n\n----------------------------------------\n\nTITLE: Querying Interval Properties with Interval.get (JavaScript)\nDESCRIPTION: Utilizes the 'Interval.get' method from Tonal.js to retrieve a full breakdown of properties for a given interval. Returns an object with properties such as name, number, quality, direction, octave, semitones, and more. Requires the 'tonal' library, and accepts a string representing the interval as input.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/intervals.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nInterval.get(\"5P\"); // => { name: \"5P\", num: 5, ...}\n```\n\n----------------------------------------\n\nTITLE: Calculating Frequency from MIDI Number with Optional Tuning\nDESCRIPTION: Implements the `midiToFreq` function to convert MIDI numbers to their corresponding frequency in Hertz, with an optional tuning parameter defaulting to 440Hz. It takes a MIDI number and optional tuning frequency, returning the frequency in Hz. Examples include standard pitch and alternative tuning.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/midi/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nMidi.midiToFreq(60); // => 261.6255653005986\nMidi.midiToFreq(69); // => 440\nMidi.midiToFreq(69, 443); // => 443\n```\n\n----------------------------------------\n\nTITLE: Detecting Chords from Notes\nDESCRIPTION: Example of using `Chord.detect` to identify possible chord names based on a given list of notes. This is useful for chord recognition or analysis.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nChord.detect([\"D\", \"F#\", \"A\", \"C\"]); // => [\"D7\"]\nChord.detect([\"F#\", \"A\", \"C\", \"D\"]); // => [\"D7/F#\"]\n```\n\n----------------------------------------\n\nTITLE: Parsing Detailed Note with Accidentals and Octave - Tonaljs - JavaScript\nDESCRIPTION: This example illustrates the output of the `note` function when parsing a note name with an accidental and octave ('ab4'). It shows the detailed structure of the returned object, including properties like pitch class, accidental, step, alt, octave, chroma, midi value, and frequency.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pitch-note/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnote(\"ab4\");\n// =>\n// {\n//   name: \"Ab4\",\n//   pc: \"Ab\",\n//   letter: \"A\",\n//   acc: \"b\",\n//   step: 5,\n//   alt: -1,\n//   oct: 4,\n//   chroma: 8,\n//   midi: 68,\n//   freq: 415.3046975799451,\n// }\n```\n\n----------------------------------------\n\nTITLE: Retrieving chord type information using ChordType.get()\nDESCRIPTION: Demonstrates how to retrieve detailed information about a chord type using the get() method. Returns an object with name, aliases, quality, intervals, and other properties.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-type/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nChordType.get(\"major\"); // =>\n// {\n//   name: \"major\",\n//   aliases: [\"M\", \"\"],\n//   quality: \"Major\",\n//   intervals: [\"1P\", \"3M\", \"5P\"],\n//   num: 2192,\n//   chroma: \"100010010000\",\n//   length: 3\n// });\n```\n\n----------------------------------------\n\nTITLE: Converting Note or Number to MIDI Number using TonalJS Midi Module\nDESCRIPTION: Provides the `toMidi` function to convert a note name or numeric value into a MIDI number within the range 0-127. It requires a string or number as input, returning the corresponding MIDI note or null if invalid. Examples demonstrate converting note names, numbers, and invalid inputs.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/midi/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nMidi.toMidi(\"C4\"); // => 60\nMidi.toMidi(\"#\"); // => null\nMidi.toMidi(60); // => 60\nMidi.toMidi(\"60\"); // => 60\nMidi.toMidi(-1); // => null\n```\n\n----------------------------------------\n\nTITLE: Querying Pitch Class Set Properties with Pcset.get in JavaScript\nDESCRIPTION: Retrieves the properties of a pitch class set, such as the set number, chroma, intervals, and length, by passing an array of note names. Dependencies: 'tonal' package with Pcset imported. Input is a collection of note names and output is a properties object describing the set. Handles sets with any pitch class input, ensuring no duplicates.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pcset/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nPcset.get([\"c\", \"d\", \"e\"]);\n// =>\n// {\n//   num: 2688,\n//   chroma: \"101010000000\",\n//   intervals: [\"1P\", \"2M\", \"3M\"],\n//   length: 3\n// }\n```\n\n----------------------------------------\n\nTITLE: Mapping Degrees to Notes with Octaves Tonaljs Scale\nDESCRIPTION: Illustrates using the function returned by `Scale.degrees()` (with a scale name including an octave) in conjunction with `map` to generate an array of notes with octaves from a list of degrees.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n[1, 2, 3].map(Scale.degrees(\"C4 major\")) => [\"C4\", \"D4\", \"E4\"]\n```\n\n----------------------------------------\n\nTITLE: Converting Roman Numerals to Leadsheet Chords in Tonal.js - Example\nDESCRIPTION: This code snippet provides an example of using the `fromRomanNumerals` function. It takes the tonic \"C\" and the Roman numeral chord progression [\"IMaj7\", \"IIm7\", \"V7\"] as input. The expected output is [\"CMaj7\", \"Dm7\", \"G7\"], which are the equivalent leadsheet chords. This function relies on the tonal.js library and assumes it has been imported previously.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/progressions.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nProgression.fromRomanNumerals(\"C\", [\"IMaj7\", \"IIm7\", \"V7\"]);\n// => [\"CMaj7\", \"Dm7\", \"G7\"]\n```\n\n----------------------------------------\n\nTITLE: Detecting Scales from Notes Tonal.js JavaScript\nDESCRIPTION: `Scale.detect()` identifies and returns a list of scale names whose notes (pitch classes) match a given array of input note strings. By default, it uses the first note in the input array as a potential tonic to filter the results.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nScale.detect([\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]);\n// => [\"C major\", \"C bebop\", \"C bebop major\",\n//     \"C ichikosucho\",  \"C chromatic\"];\n```\n\n----------------------------------------\n\nTITLE: Getting a duration value object with dots\nDESCRIPTION: Illustrates the use of `DurationValue.get()` with dotted durations. The `name` parameter can include dots (e.g., 'quarter..') to represent augmented durations.  The returned object contains the calculated `value` and `fraction` properties.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/duration-value/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nDurationValue.get(\"quarter..\"); // =>\n// {\n//   empty: false,\n//   name: 'q..',\n//   value: 0.4375,\n//   fraction: [ 7, 16 ],\n//   shorthand: 'q',\n//   dots: '..',\n//   names: [ 'quarter', 'crotchet' ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Creating Scale Range Function with Tonic Tonaljs Scale\nDESCRIPTION: Uses the `Scale.rangeOf()` function, which returns a function to generate a range of notes within the specified scale, provided the scale name includes a tonic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst range = Scale.rangeOf(\"C pentatonic\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Core Tonal Functionality in Javascript\nDESCRIPTION: This snippet shows how to import various modules from the 'tonal' library and use their functions. It covers basic operations like getting MIDI or frequency from notes, transposing notes, calculating interval semitones, querying scales and chords, and performing chord inversions using degrees. Requires the 'tonal' package installed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Chord, Interval, Note, Scale } from \"tonal\";\n\nNote.midi(\"C4\"); // => 60\nNote.freq(\"a4\"); // => 440\nNote.accidentals(\"c#2\"); // => '#'\nNote.transpose(\"C4\", \"5P\"); // => \"G4\"\nInterval.semitones(\"5P\"); // => 7\nInterval.distance(\"C4\", \"G4\"); // => \"5P\"\n\n// Scales\nScale.get(\"C major\").notes; // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n[1, 3, 5, 7].map(Scale.degrees(\"C major\")); // => [\"C\", \"E\", \"G\", \"B\"]\n\nChord.get(\"Cmaj7\").name; // => \"C major seventh\"\n\n// Chord inversions\nconst triad = Chord.degrees(\"Cm\");\n[1, 2, 3].map(triad); // => [\"C\", \"Eb\", \"G\"];\n[2, 3, 1].map(triad); // => [\"Eb\", \"G\", \"C\"];\n[3, 1, 2].map(triad); // => [\"G\", \"C\", \"Eb\"];\n```\n\n----------------------------------------\n\nTITLE: Getting Minor Key Properties (JavaScript)\nDESCRIPTION: Illustrates the output of the `Key.minorKey` function for the tonic \"C\", showcasing the detailed object structure. The result includes properties for the key itself (type, relative major, alteration) and nested objects for the natural, harmonic, and melodic minor forms, each listing scales, chords, intervals, and harmonic functions. Requires the \"tonal\" package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/key/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nKey.minorKey(\"C\") // =>\n{\n  tonic: \"C\",\n  type: \"minor\",\n  relativeMajor: \"Eb\",\n  alteration: -3,\n  keySignature: \"bbb\",\n  natural: {\n    tonic: \"C\",\n    grades: [\"I\", \"II\", \"bIII\", \"IV\", \"V\", \"bVI\", \"bVII\"],\n    intervals: [\"1P\", \"2M\", \"3m\", \"4P\", \"5P\", \"6m\", \"7m\"],\n    scale: [\"C\", \"D\", \"Eb\", \"F\", \"G\", \"Ab\", \"Bb\"],\n    triads: [\"Cm\", \"Ddim\", \"Eb\", \"Fm\", \"Gm\", \"Ab\", \"Bb\"],\n    chords: [\"Cm7\", \"Dm7b5\", \"Ebmaj7\", \"Fm7\", \"Gm7\", \"Abmaj7\", \"Bb7\"],\n    chordsHarmonicFunction: [\"T\", \"SD\", \"T\", \"SD\", \"D\", \"SD\", \"SD\"],\n    chordScales: [\"C minor\", \"D locrian\", \"Eb major\", \"F dorian\", \"G phrygian\", \"Ab lydian\", \"Bb mixolydian\"\n    ]\n  },\n  harmonic: {\n    tonic: \"C\",\n    grades: [\"I\", \"II\", \"bIII\", \"IV\", \"V\", \"bVI\", \"VII\"],\n    intervals: [\"1P\", \"2M\", \"3m\", \"4P\", \"5P\", \"6m\", \"7M\"],\n    scale: [\"C\", \"D\", \"Eb\", \"F\", \"G\", \"Ab\", \"B\"],\n    triads: [\"Cm\", \"Ddim\", \"Ebaug\", \"Fm\", \"G\", \"Ab\", \"Bdim\"],\n    chords: [\"CmMaj7\", \"Dm7b5\", \"Eb+maj7\", \"Fm7\", \"G7\", \"Abmaj7\", \"Bo7\"],\n    chordsHarmonicFunction: [\"T\", \"SD\", \"T\", \"SD\", \"D\", \"SD\", \"D\"],\n    chordScales: [\"C harmonic minor\", \"D locrian 6\", \"Eb major augmented\", \"F lydian diminished\", \"G phrygian dominant\", \"Ab lydian #9\", \"B ultralocrian\"\n    ]\n  },\n  melodic: {\n    tonic: \"C\",\n    grades: [\"I\", \"II\", \"bIII\", \"IV\", \"V\", \"VI\", \"VII\"],\n    intervals: [\"1P\", \"2M\", \"3m\", \"4P\", \"5P\", \"6M\", \"7M\"],\n    scale: [\"C\", \"D\", \"Eb\", \"F\", \"G\", \"A\", \"B\"],\n    triads: [\"Cm\", \"Dm\", \"Ebaug\", \"F\", \"G\", \"Adim\", \"Bdim\"],\n    chords: [\"Cm6\", \"Dm7\", \"Eb+maj7\", \"F7\", \"G7\", \"Am7b5\", \"Bm7b5\" ],\n    chordsHarmonicFunction: [\"T\", \"SD\", \"T\", \"SD\", \"D\", \"\", \"\"],\n    chordScales: [\"C melodic minor\", \"D dorian b2\", \"Eb lydian augmented\", \"F lydian dominant\", \"G mixolydian b6\", \"A locrian #2\", \"B altered\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tonal.js Modules - Corrected\nDESCRIPTION: This shows the corrected import statement for modules within Tonal.js.  This resolves the deprecation of default exports within Tonal.js packages. It uses the `* as` syntax to import all exports from the `@tonaljs/note` module and assign them to the `Note` namespace.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Using Scale.detect\nDESCRIPTION: This JavaScript snippet demonstrates the use of the `Scale.detect` function to identify possible scales from a set of notes. This function uses 'tonal' library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CHANGELOG.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nScale.detect([\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]);\n// => [\"C major\", \"C bebop\", \"C bebop major\",\n//     \"C ichikosucho\",  \"C chromatic\"];\n```\n\n----------------------------------------\n\nTITLE: Migrating Default Exports to Namespace Imports in TonalJS - JavaScript\nDESCRIPTION: This snippet demonstrates the recommended change from using deprecated default imports of TonalJS modules to the preferred namespace import style in JavaScript. This change resolves deprecation warnings by importing all named exports as properties of a namespace object rather than relying on single default exports. The examples show the previous and updated import statements for the @tonaljs/note module. No additional dependencies are required beyond having the TonalJS packages installed. This approach improves code clarity and compatibility with current package export standards.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/range/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Converting Chords to Roman Numerals\nDESCRIPTION: Converts a chord progression expressed in leadsheet chords to Roman numeral analysis chords, given a key tonic.  The function `Progression.toRomanNumerals` takes a key tonic string (e.g., \"C\") and an array of leadsheet chord strings (e.g., [\"CMaj7\", \"Dm7\", \"G7\"]) as input, and returns an array of corresponding Roman numeral chord strings (e.g., [\"IMaj7\", \"IIm7\", \"V7\"]).\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/progression/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nProgression.toRomanNumerals(\"C\", [\"CMaj7\", \"Dm7\", \"G7\"]);\n// => \"IMaj7\", \"IIm7\", \"V7\"]\n```\n\n----------------------------------------\n\nTITLE: Getting the best voicing with Voicing.get (TypeScript)\nDESCRIPTION: Calculates the optimal voicing for a given chord, considering range, dictionary, voice leading, and previous voicing for smooth transition. Internally calls Voicing.search; dependencies include Voicing and optionally a voiceLeading object. Inputs include chord, range, dictionary, voiceLeading object, and last voicing; output is a single voicing array.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/voicings.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nVoicing.get(\"Dm7\");\nVoicing.get(\"Dm7\", [\"F3\", \"A4\"], lefthand, topNoteDiff);\nconst last = [\"C4\", \"E4\", \"G4\", \"B4\"];\nVoicing.get(\"Dm7\", [\"F3\", \"A4\"], lefthand, topNoteDiff, last);\n```\n\n----------------------------------------\n\nTITLE: Improved Import Syntax for @tonaljs Modules - JavaScript\nDESCRIPTION: Demonstrates the updated recommended import syntax to avoid deprecated default exports in @tonaljs packages. Instead of importing the default export, the snippet shows how to import all named exports under a namespace object. This change increases clarity and compatibility across modules.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Get notes from Pcset\nDESCRIPTION: Returns the sorted pitch class notes given a pcset (represented as a string or number) or a list of notes. The output is an array of strings representing the note names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/pitch-class-sets.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPcset.notes([\"D3\", \"A3\", \"Bb3\", \"C4\", \"D4\", \"E4\", \"F4\", \"G4\", \"A4\"]); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"Bb\"]\nPcset.notes(\"101011010110\"); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"Bb\"]\n```\n\n----------------------------------------\n\nTITLE: Obtaining Full Note Names from Chord Symbols and Roots - JavaScript\nDESCRIPTION: Demonstrates how the newly introduced Chord.notes function returns full note names including octave numbers by providing the chord symbol and a root note with octave. This contrasts with previously returned pitch classes and helps in applications requiring explicit note names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.notes(\"Cmaj7\", \"C4\"); // => ['C4', 'E4', 'G4', 'B4']\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.notes(\"maj7\", \"D5\"); // => ['D5', 'F#5', 'A5', 'C#6']\n```\n\n----------------------------------------\n\nTITLE: Parsing Interval and Getting Semitones in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the `parse` and `toName` functions from the `@tonaljs/pitch-interval` package.  It then uses the `parse` function to parse an interval name ('4P') and accesses the `semitones` property to get the number of semitones.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pitch-interval/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse, toName } from \"@tonaljs/pitch-interval\";\n\nparse(\"4P\").semitones; // => 5\n```\n\n----------------------------------------\n\nTITLE: Searching Voicings - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `Voicing.search` method to find all possible voicings for a given chord within a specified range. It takes a chord symbol, an optional range, and an optional dictionary of voicings as input, and returns an array of possible voicings.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nVoicing.search(chord: string, range?: [string, string], dictionary?: VoicingDictionary): string[][]\n```\n\n----------------------------------------\n\nTITLE: Using RomanNumeral.get() to parse roman numeral chord symbols in JavaScript\nDESCRIPTION: Demonstrates how to use the RomanNumeral.get() function to extract properties from a roman numeral symbol, including the chord type, accidentals, and scale step.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/notation/roman-numerals.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRomanNumeral.get(\"bVIIMaj7\");\n// =>\n// {\n//   empty: false,\n//   name: \"bVIIMaj7\",\n//   roman: \"VII\",\n//   acc: \"b\",\n//   chordType: \"Maj7\",\n//   alt: -1,\n//   step: 6,\n//   major: true,\n//   oct: 0\n// }\n```\n\n----------------------------------------\n\nTITLE: ABC to Scientific Notation Conversion in Tonaljs\nDESCRIPTION: This code snippet demonstrates how to convert a note name from ABC notation to scientific notation using the `abcToScientificNotation` function in the Tonaljs AbcNotation module. It requires importing the `AbcNotation` from \"tonal\" library. The function takes a note name in ABC notation as input (e.g., \"c\") and returns its equivalent in scientific notation (e.g., \"C5\").\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/notation/abc-notation.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbcNotation } from \"tonal\";\n\nAbcNotation.abcToScientificNotation(\"c\"); // => \"C5\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Scales from Notes Tonaljs Scale\nDESCRIPTION: Uses the `Scale.detect()` function with an array of note names to find all matching scales. By default, it attempts to use the first note as the tonic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nScale.detect([\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]);\n```\n\n----------------------------------------\n\nTITLE: Searching Voicings - Example\nDESCRIPTION: This code example demonstrates how to search for voicings of a Cmaj7 chord (`C^7`) within a specified range (\"E3\", \"D5\"), using a custom voicing dictionary. The expected output is a set of possible voicings, each represented as an array of note names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nVoicing.search(\"C^7\", [\"E3\", \"D5\"], { \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"] });\n/* => [\n  ['E3', 'G3', 'B3', 'D4'],\n  ['E4', 'G4', 'B4', 'D5'],\n  ['B3', 'D4', 'E4', 'G4'],\n] */\n```\n\n----------------------------------------\n\nTITLE: Using Namespace Imports for tonaljs Modules - JavaScript\nDESCRIPTION: This snippet shows the recommended namespace import syntax for @tonaljs modules following the deprecation of default exports. By importing the entire module namespace as Note, all NOTE-related functionality is grouped under the Note object. This pattern is future-proof and compatible with the current package structure.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-type/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Tokenizing a note name in scientific notation\nDESCRIPTION: Demonstrates how to use the tokenize function to break a note name into its component parts: prefix, letter, accidental, octave, and any additional text.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/notation-scientific/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntokenize(\"Abb4 major\"); // => [\"\", \"A\", \"bb\", \"4\", \"major\"]\n```\n\n----------------------------------------\n\nTITLE: Subtract Intervals - JavaScript\nDESCRIPTION: Subtract one interval from another using `Interval.subtract()`. The function takes two interval names as strings (minuend and subtrahend) and returns the resulting interval name. The order of arguments matters, as `subtract(a, b)` is equivalent to `a - b`.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsubtract(\"5P\", \"3M\"); // => '3m'\nsubtract(\"3M\", \"5P\"); // => '-3m'\n```\n\n----------------------------------------\n\nTITLE: Example Output of Scale.detect with Tonic Tonaljs Scale\nDESCRIPTION: Shows an example output array returned by `Scale.detect()` when given the notes of a C Major scale but specifying 'A' as the tonic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// => [ 'A aeolian', 'A minor bebop', 'A chromatic' ]\n```\n\n----------------------------------------\n\nTITLE: Convert Midi Number to Frequency (midiToFreq) in Tonal.js\nDESCRIPTION: This snippet showcases the usage of the `Midi.midiToFreq` function for converting a MIDI number to its corresponding frequency in Hertz. It takes a MIDI number and an optional tuning parameter (defaulting to 440 Hz) as input and returns the frequency as a number.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/midi.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMidi.midiToFreq(60); // => 261.6255653005986\nMidi.midiToFreq(69); // => 440\nMidi.midiToFreq(69, 443); // => 443\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Exports with Namespace Imports in @tonaljs Modules - JavaScript\nDESCRIPTION: Shows the recommended update for importing @tonaljs modules where default exports are deprecated. Instead of importing a module's default export, use namespace imports to preserve compatibility and follow updated practices. This change impacts all @tonaljs packages and avoids potential breaking changes due to deprecated export patterns.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/duration-value/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Detecting Enharmonic Inclusion with isNoteIncludedIn in JavaScript\nDESCRIPTION: Further demonstrates isNoteIncludedIn's ability to consider enharmonics as members of a set, where notes like 'Fb' are recognized as equivalents to 'E'. Ensures broader and more accurate music-theoretical comparisons. Relies on 'tonal' library's note equivalence logic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pcset/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nisInCTriad(\"Fb\"); // => true\n```\n\n----------------------------------------\n\nTITLE: Importing Tonal Modules (ES6) - JavaScript\nDESCRIPTION: Demonstrates importing specific modules (Note, Scale) from the 'tonal' library using ES6 'import' syntax. This is the standard way to use the library in modern JavaScript environments with module support or bundlers like Webpack or Rollup. Requires an ES6 module-compatible environment.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Note, Scale } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Analyzing a voicing with Voicing.analyze (TypeScript)\nDESCRIPTION: Provides details about a specific voicing, such as top and bottom notes, and the average MIDI value. Useful for understanding voicing characteristics. Inputs are an array of note strings; output is an object with analyzed properties.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/voicings.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nVoicing.analyze([\"C4\", \"E4\", \"G4\", \"B4\"]);\n```\n\n----------------------------------------\n\nTITLE: Getting detailed chord properties with 'Chord.get' method\nDESCRIPTION: This snippet illustrates how to obtain comprehensive chord information including symbol, tonic, bass, root, rootDegree, and notes using 'Chord.get'. It exemplifies retrieving properties for a chord with a specific inversion, 'Cmaj7/B', aiding in advanced musical analysis.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example of detailed chord properties\n// {\n//   empty: false,\n//   name: 'C major seventh over B',\n//   setNum: 2193,\n//   chroma: '100010010001',\n//   normalized: '100010010001',\n//   intervals: [ '7M', '8P', '10M', '12P' ],\n//   quality: 'Major',\n//   aliases: [ 'maj7', 'Δ', 'ma7', 'M7', 'Maj7', '^7' ],\n//   symbol: 'Cmaj7/B',\n//   tonic: 'C',\n//   type: 'major seventh',\n//   root: 'B',\n//   bass: 'B',\n//   rootDegree: 4,\n//   notes: [ 'B', 'C', 'E', 'G' ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Getting RomanNumeral properties from string\nDESCRIPTION: Shows how to use the `RomanNumeral.get` function to parse a roman numeral string like \"bVIIMaj7\". It returns an object containing detailed properties such as name, roman part, accidentals, chord type, step, etc. Requires the `RomanNumeral` object to be imported/required. Input: A string representing a roman numeral. Output: An object with properties of the parsed roman numeral.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/roman-numeral/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nRomanNumeral.get(\"bVIIMaj7\");\n// =>\n// {\n//   empty: false,\n//   name: \"bVIIMaj7\",\n//   roman: \"VII\",\n//   acc: \"b\",\n//   chordType: \"Maj7\",\n//   alt: -1,\n//   step: 6,\n//   major: true,\n//   oct: 0\n// }\n```\n\n----------------------------------------\n\nTITLE: Calculating Interval Distance Between Notes Using @tonaljs/pitch-distance in JavaScript\nDESCRIPTION: The distance function computes the interval name between two notes, given as strings. It returns the interval as a string or an empty string if inputs are invalid. It works with pitch classes and full note names with octaves, and simplifies intervals when one note lacks an octave. Examples include distances spanning octaves and single-octave intervals. The function reliably returns strings, handling invalid inputs gracefully.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pitch-distance/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { distance } from \"@tonaljs/pitch-distance\";\ndistance(\"C4\", \"G4\"); // => \"5P\"\n\ndistance(\"C3\", \"E4\"); // => \"10M\"\n\ndistance(\"C\", \"E\"); // => \"3M\"\ndistance(\"C\", \"E4\"); // => \"3M\"\ndistance(\"C4\", \"E\"); // => \"3M\"\n\n// Invalid input\ndistance(\"today\", \"tomorrow\"); // => \"\"\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Chords of a Major Key Using `majorKeyChords` in JavaScript\nDESCRIPTION: Fetches an array of chord objects for a specified major key, where each object contains the chord's name and its harmonic roles. The snippet demonstrates mapping chord names to a comma-separated string for display. Depends on the Tonal.js Key module.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/keys.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nKey.majorKeyChords(\"C\")\n  .map((chord) => chord.name)\n  .join(\", \");\n// => \"Cmaj7, Dm7, Em7, Fmaj7, G7, Am7, Bm7b5, A7, B7, C7, D7, E7, F#m7, Gm7b5, Am7b5, Bm7, Eb7, F7, Gb7, Ab7, Bb7, Bbm7, Cm7, Dbm7b5, Ebm7b5, Fm7\"\n```\n\n----------------------------------------\n\nTITLE: Generating Note Range with Scale Range Function Tonaljs Scale\nDESCRIPTION: Demonstrates using the function returned by `Scale.rangeOf(\"C pentatonic\")` to generate a range of notes between 'C4' and 'C5' that belong to the C Pentatonic scale.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nrange(\"C4\", \"C5\"); // => [\"C4\", \"D4\", \"E4\", \"G4\", \"A4\", \"C5\"]\n```\n\n----------------------------------------\n\nTITLE: Constructing chords with 'Chord.getChord' method\nDESCRIPTION: This snippet shows how to build a chord by specifying its type, tonic, and bass, using 'Chord.getChord'. It confirms that the object-based approach yields the same result as a combined symbol, useful for programmatically creating chords.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.getChord(\"maj7\", \"C\", \"B\") === Chord.get(\"Cmaj7/B\");\n```\n\n----------------------------------------\n\nTITLE: Get Interval Properties - JavaScript\nDESCRIPTION: Retrieve the properties of a musical interval using `Interval.get()`. The function takes the interval name as a string (e.g., \"5P\") and returns an object containing the interval's name, type, direction, number, quality, alteration, octave span, semitone count, and simplified number.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nInterval.get(\"5P\"); // => { name: \"5P\", num: 5, ...}\n```\n\n----------------------------------------\n\nTITLE: Getting Extended Scales Tonaljs Scale\nDESCRIPTION: Uses the `Scale.extended()` function to find scale names that contain all the notes of the given scale plus at least one additional note.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nScale.extended(\"major\");\n```\n\n----------------------------------------\n\nTITLE: Converting parsed note data back to a note name\nDESCRIPTION: Shows how to use the name function to convert a parsed note object back into a string representation in scientific notation.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/notation-scientific/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nname({ step: 1, oct: 2, alt: 1 }); // => \"D#1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Chromatic Note Ranges - JavaScript\nDESCRIPTION: This snippet shows the usage of `Range.chromatic` function, which generates a chromatic note range. The function takes an array of notes or midi numbers. Additionally, it accepts an optional `options` object to customize the output. The available options are `sharps` (boolean) for using sharps and `pitchClass` (boolean) to omit octaves.  The output is an array of note names. It's part of the `tonaljs` library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/utils/ranges.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nRange.chromatic([\"C2\", \"E2\", \"D2\"]);\n// => [\"C2\", \"Db2\", \"D2\", \"Eb2\", \"E2\", \"Eb2\", \"D2\"]\nRange.chromatic([\"C2\", \"C3\"], { sharps: true });\n// => [ \"C2\", \"C#2\", \"D2\", \"D#2\", \"E2\", \"F2\", \"F#2\", \"G2\", \"G#2\", \"A2\", \"A#2\", \"B2\", \"C3\" ]\n```\n\n----------------------------------------\n\nTITLE: Example Output of Scale.extended Tonaljs Scale\nDESCRIPTION: Shows an example output array returned by `Scale.extended(\"major\")`, listing scales like Bebop, Chromatic, etc., which extend the Major scale.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n```\n\n----------------------------------------\n\nTITLE: Converting MIDI Number to Note Name\nDESCRIPTION: This snippet uses `Note.fromMidi()` to convert a MIDI number to its corresponding note name. The function takes a number representing a MIDI note and returns the note name as a string. This uses functionality from the `@tonaljs/midi` package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nNote.fromMidi(61); // => \"Db4\"\nNote.fromMidi(61.7); // => \"D4\"\n[60, 61, 62].map(Note.fromMidi); // => [\"C4\", \"Db4\", \"D4\"]\n```\n\n----------------------------------------\n\nTITLE: Converting Roman Numerals to Leadsheet Chords in Tonal.js\nDESCRIPTION: This snippet demonstrates the `fromRomanNumerals` function from the tonal.js library. It takes a key tonic (e.g., \"C\") and an array of Roman numeral chords (e.g., [\"IMaj7\", \"IIm7\", \"V7\"]) as input. It returns an array of leadsheet chords (e.g., [\"CMaj7\", \"Dm7\", \"G7\"]) representing the same progression in the specified key. Requires the `tonal` library to be installed and imported.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/progressions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Progression } from \"tonal\";\n\nProgression.fromRomanNumerals(\"C\", [\"IMaj7\", \"IIm7\", \"V7\"]); // => [\"CMaj7\", \"Dm7\", \"G7\"]\n```\n\n----------------------------------------\n\nTITLE: Finding Chord Scales\nDESCRIPTION: Example of using `Chord.chordScales` to get a list of scales that contain the specified chord. This is useful for improvisation and harmonic analysis.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nChord.chordScales(\"C7b9\");\n// => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\n```\n\n----------------------------------------\n\nTITLE: Getting Scale Modes Tonaljs Scale\nDESCRIPTION: Uses the `Scale.modeNames()` function to find the modes of a given scale. It returns an array of arrays, where each inner array contains the tonic and the name of the mode.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nScale.modeNames(\"C pentatonic\"); // => [\n```\n\n----------------------------------------\n\nTITLE: Retrieving Common Time Signatures (JavaScript)\nDESCRIPTION: This code snippet demonstrates retrieving a list of the most frequently used time signatures using the `TimeSignature.names()` function. This function doesn't take any arguments and returns an array of strings, representing the common time signatures. The output of this function is a string array.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/signatures.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTimeSignature.names();\n```\n\n----------------------------------------\n\nTITLE: Get Interval Properties Using interval()\nDESCRIPTION: The `interval()` function takes an interval name as a string and returns an object with properties like name, type, direction, number, quality, and semitones. It does not require external dependencies. The expected input is a valid or invalid interval name. The output is an object containing the interval properties. \nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ninterval(\"4d\");\n// =>\n// {\n//   name: \"4d\",\n//   type: \"perfectable\",\n//   dir: 1,\n//   num: 4,\n//   q: \"d\",\n//   alt: -1,\n//   chroma: 4,\n//   oct: 0,\n//   semitones: 4,\n//   simple: 4,\n// }\n```\n\n----------------------------------------\n\nTITLE: Using assumePerfectFifth Option with detect in JavaScript\nDESCRIPTION: Demonstrates the optional `assumePerfectFifth` option for the `detect` function (or `Chord.detect`). When set to `true`, the function attempts to identify chords even if the perfect fifth is omitted from the input notes. If `false` (or omitted), the perfect fifth is generally required for standard chord recognition.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-detect/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndetect([\"D\", \"F\", \"C\"], { assumePerfectFifth: true }); // => [\"Dm7\"]\ndetect([\"D\", \"F\", \"C\"], { assumePerfectFifth: false }); // => []\n```\n\n----------------------------------------\n\nTITLE: Searching for note arrangements matching interval sets (TypeScript)\nDESCRIPTION: Generates all possible note arrangements within a range that match given interval sets relative to a root note, useful for voicing synthesis. Inputs include interval sets, range, and root; output is an array of note arrays.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/voicings.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nVoicing.searchSets([\n  [\"1P\", \"3M\", \"5P\"],\n  [\"3M\", \"5P\", \"8P\"],\n],\n[\"C3\", \"G4\"],\n\"C\"\n);\n```\n\n----------------------------------------\n\nTITLE: Mapping Scale.degrees over Array Tonal.js JavaScript\nDESCRIPTION: Illustrates how the function returned by `Scale.degrees()` can be conveniently used with array methods like `map`. This allows generating a sequence of notes from an array of scale degrees. The octave handling depends on whether the scale tonic includes an octave.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n[1, 2, 3].map(Scale.degrees(\"C major\")) => [\"C\", \"D\", \"E\"]\n[1, 2, 3].map(Scale.degrees(\"C4 major\")) => [\"C4\", \"D4\", \"E4\"]\n[-1, -2, -3].map(Scale.degrees(\"C major\")) => [\"B\", \"A\", \"G\"]\n```\n\n----------------------------------------\n\nTITLE: Getting Chord Notes\nDESCRIPTION: Example of using `Chord.notes` to get the notes of a chord given the chord type and tonic.  The tonic can include the octave number.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nChord.notes(\"maj7\", \"C4\"); // => [\"C4\", \"E4\", \"G4\", \"B4\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Scale Degree Function Tonaljs Scale\nDESCRIPTION: Uses the `Scale.degrees()` function, which returns a new function. This returned function takes a degree number and returns the corresponding note name within the specified scale.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst c4major = Scale.degrees(\"C4 major\");\n```\n\n----------------------------------------\n\nTITLE: Finding Chords Within a Scale Tonal.js JavaScript\nDESCRIPTION: `Scale.scaleChords()` takes a scale name (pitch classes only, without tonic) and returns a list of chord type names. These are the chord types whose notes are all present within the given scale's set of notes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nScale.scaleChords(\"pentatonic\");\n// => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n```\n\n----------------------------------------\n\nTITLE: Converting intervals to roman numerals in JavaScript using Tonal.js\nDESCRIPTION: Shows how to convert an interval to a roman numeral by passing an Interval object to the RomanNumeral.get() function.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/notation/roman-numerals.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Interval, RomanNumeral } from \"tonal\";\n\nRomanNumeral.get(Interval.get(\"3m\")).name; // => \"bIII\"\n```\n\n----------------------------------------\n\nTITLE: Converting Frequency to MIDI Note Number\nDESCRIPTION: Implements `freqToMidi` to convert a frequency in Hertz to the nearest MIDI number, with decimal precision. Useful for mapping measured or synthesized frequencies back to MIDI notes. Examples include standard A440 tuning and alternative pitch.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/midi/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nMidi.freqToMidi(220); //=> 57\nMidi.freqToMidi(261.62); //=> 60\nMidi.freqToMidi(261); //=> 59.96\n```\n\n----------------------------------------\n\nTITLE: Using Scale Degree Function Negative Degree Example 3 Tonaljs Scale\nDESCRIPTION: Demonstrates using the function returned by `Scale.degrees(\"C4 major\")` with a larger negative degree (-7) to get a note multiple octaves below the tonic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nc4major(-7); // => \"C2\"\n```\n\n----------------------------------------\n\nTITLE: Listing All Interval Names with Interval.names (JavaScript)\nDESCRIPTION: Demonstrates how to use 'Interval.names' to retrieve the list of natural interval names available in Tonal.js. This utility accepts no parameters and returns an array of strings corresponding to standard intervals. The 'tonal' package must be installed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/intervals.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nInterval.names(); // => [\"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6m\", \"7m\"]\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between ABC Notes with Tonaljs\nDESCRIPTION: This code snippet shows how to find the interval between two notes in ABC notation using the `distance` function in the Tonaljs AbcNotation module. It assumes `AbcNotation` has been imported. The function takes two notes in ABC notation as input (e.g., \"=C\", \"g\") and returns the interval between them (e.g., \"12P\").\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/notation/abc-notation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nAbcNotation.distance(\"=C\", \"g\"); // => \"12P\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving detailed mode information with Mode.get()\nDESCRIPTION: Demonstrates how to get detailed information about a specific mode using the Mode.get() method, including its name, aliases, intervals, and chord types.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/modes.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMode.get(\"major\");\n// {\n//   name: \"ionian\",\n//   aliases: [\"major\"]\n//   intervals: [\"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\"]\n//   modeNum: 0,\n//   mode: 2773,\n//   alt: 0,\n//   triad: \"\",\n//   seventh: \"Maj7\",\n// }\n```\n\n----------------------------------------\n\nTITLE: Add Intervals - JavaScript\nDESCRIPTION: Add two intervals together using `Interval.add()`. The function takes two interval names as strings and returns the resulting interval name (e.g., adding \"3m\" and \"5P\" results in \"7m\").\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nInterval.add(\"3m\", \"5P\"); // => \"7m\"\n```\n\n----------------------------------------\n\nTITLE: Getting Scale Details with Tonic Tonaljs Scale\nDESCRIPTION: Uses the `Scale.get()` function to retrieve detailed information about a scale specified by name, including a tonic. The function returns an object containing properties like `name`, `type`, `tonic`, `notes`, `intervals`, and more.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nScale.get(\"c5 pentatonic\");\n```\n\n----------------------------------------\n\nTITLE: Using Scale.steps and Chord.steps\nDESCRIPTION: This Javascript snippet illustrates how to use `Scale.steps` and `Chord.steps` to map a numeric range to the steps of a scale or a chord. This uses the 'tonal' library and requires knowledge of scales and chords.  The code generates an array by using `map()` to call the `Scale.steps` and `Chord.steps` functions.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CHANGELOG.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { Range, Scale, Chod } from \"tonal\";\n\nRange.numeric([-3, 3]).map(Scale.steps(\"C4 major\"));\nRange.numeric([-3, 3]).map(Chord.steps([\"C4\", \"aug\"]));\n// => [\"G3\", \"A3\", \"B3\", \"C4\", \"D4\", \"E4\", \"F4\"]\n```\n\n----------------------------------------\n\nTITLE: Example Output of Scale.reduced Tonaljs Scale\nDESCRIPTION: Shows an example output array returned by `Scale.reduced(\"major\")`, listing scales like Pentatonic and Ritusen which are subsets of the Major scale.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n```\n\n----------------------------------------\n\nTITLE: Mapping Negative Degrees to Notes Tonaljs Scale\nDESCRIPTION: Illustrates using the function returned by `Scale.degrees()` in conjunction with `map` and negative degrees to generate an array of notes below the tonic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n[-1, -2, -3].map(Scale.degrees(\"C major\")) => [\"B\", \"A\", \"G\"]\n```\n\n----------------------------------------\n\nTITLE: Using Scale Degree Function 1st Degree Tonaljs Scale\nDESCRIPTION: Demonstrates using the function returned by `Scale.degrees(\"C4 major\")` to get the 1st degree note.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nc4major(1); // => \"C4\"\n```\n\n----------------------------------------\n\nTITLE: Using shorthands to get duration value objects\nDESCRIPTION: Shows that `DurationValue.get` accepts shorthands (e.g., 'q') and treats them the same as their full name equivalents (e.g., 'quarter'). It also demonstrates that dots work with shorthands too.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/duration-value/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nDurationValue.get(\"q\") == DurationValue.get(\"quarter\");\nDurationValue.get(\"q.\") == DurationValue.get(\"quarter.\");\nDurationValue.get(\"q..\") == DurationValue.get(\"quarter..\");\n```\n\n----------------------------------------\n\nTITLE: Example Output of Scale.scaleChords Tonaljs Scale\nDESCRIPTION: Shows an example output array returned by `Scale.scaleChords(\"pentatonic\")`, listing common chords found within a pentatonic scale.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n```\n\n----------------------------------------\n\nTITLE: Converting MIDI Number to Note Name with Options\nDESCRIPTION: Provides `midiToNoteName` to convert a MIDI number to its note name, with options for pitch class notation and use of sharps. It handles notes with accidentals and can approximate to the nearest note. Examples show various configurations of note naming.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/midi/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nMidi.midiToNoteName(61); // => \"Db4\"\nMidi.midiToNoteName(61, { pitchClass: true }); // => \"Db\"\nMidi.midiToNoteName(61, { sharps: true }); // => \"C#4\"\nMidi.midiToNoteName(61, { pitchClass: true, sharps: true }); // => \"C#\"\n// it rounds to nearest note\nmidiToNoteName(61.7); // => \"D4\"\n```\n\n----------------------------------------\n\nTITLE: Creating Random Rhythm Patterns\nDESCRIPTION: Example of using the random function to generate rhythm patterns of a specified length with a probability threshold for beats. Optionally accepts a custom random function.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/rhythm-pattern/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrandom(4); // => [1, 0, 0, 1]\n```\n\n----------------------------------------\n\nTITLE: Finding Intervals Between Notes in JavaScript with Tonal.js\nDESCRIPTION: Examples of using Note.distance to find the musical interval between two notes, handling both pitch classes and notes with octaves.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/notes.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nNote.distance(\"C\", \"D\").toEqual(\"2M\");\nNote.distance(\"C3\", \"E3\").toEqual(\"3M\");\nNote.distance(\"C3\", \"E4\").toEqual(\"10M\");\n```\n\n----------------------------------------\n\nTITLE: Using Chord.detect to Identify Chords in JavaScript\nDESCRIPTION: Provides examples of using the `Chord.detect` function. It takes an array of note strings as input and returns an array of possible matching chord names. The order of notes in the input array can influence the detected inversion, indicated by slash notation (e.g., 'D7/F#').\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-detect/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nChord.detect([\"D\", \"F#\", \"A\", \"C\"]); // => [\"D7\"]\nChord.detect([\"F#\", \"A\", \"C\", \"D\"]); // => [\"D7/F#\"]\nChord.detect([\"A\", \"C\", \"D\", \"F#\"]); // => [\"D7/A\"]\nChord.detect([\"E\", \"G#\", \"B\", \"C#\"]); // => [\"E6\", \"C#m7/E\"]\n```\n\n----------------------------------------\n\nTITLE: Finding Scale Mode Names Tonal.js JavaScript\nDESCRIPTION: `Scale.modeNames()` takes a scale name (which should include a tonic) and returns an array of arrays. Each inner array represents a mode, containing the mode's tonic and its corresponding scale type name.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nScale.modeNames(\"C pentatonic\"); // => [\n//    [\"C\", \"major pentatonic\"],\n//    [\"D\", \"egyptian\"],\n//    [\"E\", \"malkos raga\"],\n//    [\"G\", \"ritusen\"],\n//    [\"A\", \"minor pentatonic\"]\n//  ]\n```\n\n----------------------------------------\n\nTITLE: Interval Shorthand Functions - JavaScript\nDESCRIPTION: Use shorthand functions to extract specific properties of an interval. `Interval.name()` returns the interval name, `Interval.num()` the interval number, `Interval.quality()` the interval quality, and `Interval.semitones()` the number of semitones.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nInterval.name(\"d4\"); // => \"4d\"\nInterval.num(\"5P\"); // => 5\nInterval.quality(\"5P\"); // => \"P\"\nInterval.semitones(\"P4\"); // => 5\n```\n\n----------------------------------------\n\nTITLE: Importing Scale Module ES6\nDESCRIPTION: Demonstrates how to import the `Scale` object using ES6 import syntax from the main `tonal` package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Scale } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Using Scale.steps with Numeric Range Tonaljs Scale\nDESCRIPTION: Demonstrates the `Scale.steps()` function, which is similar to `Scale.degrees()` but returns the tonic for degree 0. It is used here with `Range.numeric` and `map` to generate a sequence of notes from a numerical range.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nRange.numeric([-3, 3]).map(Scale.steps(\"C4 major\"));\n```\n\n----------------------------------------\n\nTITLE: Listing Common Time Signatures\nDESCRIPTION: Calls the static `names()` method on the TimeSignature object to retrieve an array of strings representing frequently-used time signatures. This provides a quick list of common musical meters.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/time-signature/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nTimeSignature.names();\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Collection from Tonal.js\nDESCRIPTION: Demonstrates how to import the Collection module from Tonal.js and use its shuffle function on an array.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/utils/collections.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Collection } from \"tonal\";\nCollection.shuffle([\"a\", \"b\", \"c\"]);\n```\n\n----------------------------------------\n\nTITLE: Importing TimeSignature Module (Recommended)\nDESCRIPTION: This JavaScript code snippet shows the recommended way to import the TimeSignature module from the @tonaljs/time-signature package as of version 4.9.0.  It imports the module using `import * as` syntax.  This is the preferred way to import single packages now.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/time-signature/CHANGELOG.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as TimeSignature from \"@tonaljs/time-signature\";\n```\n\n----------------------------------------\n\nTITLE: Using Scale.degrees\nDESCRIPTION: This snippet demonstrates the use of `Scale.degrees` function in 'tonal' library. It maps numbers to scale degrees, optionally including the octave. It provides two examples; one without and one with octave specifications.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CHANGELOG.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n[1, 2, 3, 4].map(Chord.degrees(\"C4\")) => [\"C4\", \"E4\", \"G4\", \"C5\"]`\n```\n\n----------------------------------------\n\nTITLE: Importing AbcNotation in Node.js\nDESCRIPTION: Imports the `AbcNotation` module from the `@tonaljs/abc-notation` package in a Node.js environment using the `require` function.  This enables the use of abc notation conversion functionalities.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/abc-notation/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AbcNotation } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Getting a list of all mode names in Tonal.js\nDESCRIPTION: Shows how to retrieve a list of all available mode names using the Mode.names() method.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/modes.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMode.names();\n// => [\"ionian\", \"dorian\", \"phrygian\", \"lydian\", \"mixolydian\", \"aeolian\", \"locrian\"];\n```\n\n----------------------------------------\n\nTITLE: Generating Mode Notes with Tonic - Tonal.js Mode JavaScript\nDESCRIPTION: Uses the `Mode.notes()` function to generate the notes of a specific musical mode relative to a given tonic note. It takes the mode name and tonic as arguments and returns an array of note strings.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/mode/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nMode.notes(\"ionian\", \"C\");\n// => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nMode.notes(\"major\", \"C\");\n// => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nMode.notes(\"minor\", \"C\");\n// => [\"C\", \"D\", \"Eb\", \"F\", \"G\", \"Ab\", \"Bb\"];\n```\n\n----------------------------------------\n\nTITLE: Transpose Notes Using transpose()\nDESCRIPTION: The `transpose()` function transposes a note by a given interval, returning the resulting note name. It takes two string arguments: the note to transpose and the interval. It depends on the `@tonaljs/core` module and returns a string with the transposed note.  It handles invalid parameters by returning an empty string.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntranspose(\"d3\", \"3M\"); // => \"F#3\"\ntranspose(\"D\", \"3M\"); // => \"F#\"\n[\"C\", \"D\", \"E\", \"F\", \"G\"].map((pc) => transpose(pc, \"M3\"));\n// => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n```\n\n----------------------------------------\n\nTITLE: Rotating Rhythm Patterns\nDESCRIPTION: Example of using the rotate function to shift a rhythm pattern by a specified number of steps. This creates variations of existing patterns while maintaining their structure.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/rhythm-pattern/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nrotate([1, 0, 0, 1], 2); // => [0, 1, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Finding extended chords with 'Chord.extended'\nDESCRIPTION: This snippet shows how to find chords that are supersets of a given chord ('Cmaj7') with 'Chord.extended', useful for exploring chord extensions and voicings.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.extended(\"Cmaj7\");\n// => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\n```\n\n----------------------------------------\n\nTITLE: Defining a Chord Voicing Dictionary Object in TypeScript\nDESCRIPTION: Provides an example of a chord voicing dictionary object named 'lefthand', mapping standard chord symbols (e.g., m7, 7, 69) to arrays of string voicing patterns. Intended for use with TonalJS's VoicingDictionary API, this object can be utilized or extended to customize chord voicings. Each key corresponds to a chord type and each value is an array of intervals representing possible voicings. No external dependencies beyond a TypeScript environment and the TonalJS library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing-dictionary/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst lefthand = {\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n  \"69\": [\"3M 5P 6A 9M\"],\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"],\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"],\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\n  \"7#11\": [\"7m 9M 11A 13A\"],\n  \"7#9\": [\"3M 7m 9A\"],\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Semitone Counts to Interval Names with Interval.fromSemitones (JavaScript)\nDESCRIPTION: Illustrates the use of 'Interval.fromSemitones' to convert a numeric semitone value into a corresponding interval name, including the sign for descending intervals. Accepts a number as input and returns an interval string; can be mapped over arrays. Requires Tonal.js.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/intervals.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nInterval.fromSemitones(7); // => \"5P\"\nInterval.fromSemitones(-7); // => \"-5P\"\n\n[0, 1, 2, 3, 4].map(Interval.fromSemitones);\n```\n\n----------------------------------------\n\nTITLE: Importing Pcset with ES6 syntax in JavaScript\nDESCRIPTION: Demonstrates how to import the Pcset object from the 'tonal' library using ES6 module syntax. Requires the 'tonal' package installed as a dependency. This import provides access to all Pcset-related functions for pitch class manipulation. Intended for environments supporting ES6 import/export syntax.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pcset/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Pcset } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Simplifying Intervals with Interval.simplify (JavaScript)\nDESCRIPTION: Shows how to use 'Interval.simplify' to reduce compound intervals to their simple equivalents within the octave. The function takes a string representation of an interval, handles negative values, and can be mapped over arrays. Tonal.js must be available as a dependency.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/intervals.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nInterval.simplify(\"9M\"); // => \"2M\"\nInterval.simplify(\"2M\"); // => \"2M\"\nInterval.simplify(\"-2M\"); // => \"7m\"\n[\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify);\n// => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n```\n\n----------------------------------------\n\nTITLE: Generating Range from Custom Notes Tonal.js JavaScript\nDESCRIPTION: `Scale.rangeOf()` can also accept a list of note names (pitch classes) instead of a predefined scale name. This creates a function that generates a range using only the notes provided in the input array, between the specified `from` and `to` notes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst range = Scale.rangeOf(\"C\", \"Db\", \"G\");\nrange(\"C4\", \"C5\"); // => [\"C4\", \"Db4\", \"G4\", \"C5\"]\n```\n\n----------------------------------------\n\nTITLE: Getting all scale fits with 'Chord.chordScales'\nDESCRIPTION: This code retrieves all scales compatible with a specific chord ('C7b9') through 'Chord.chordScales', aiding in modal and scale degree analysis for improvisation or composition.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.chordScales(\"C7b9\"); // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\n```\n\n----------------------------------------\n\nTITLE: Change the Octave of a Note\nDESCRIPTION: This snippet shows how to change the octave of a note by combining its pitch class (`pc`) and a new octave number. This illustrates how to manipulate the note properties. It relies on the `@tonaljs/core` module. The input is a string and the output is a string.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nnote(\"Cb4\").pc + 5; // => \"Cb5\"\n```\n\n----------------------------------------\n\nTITLE: Creating Chromatic Note Ranges with Range.chromatic in JavaScript\nDESCRIPTION: This function generates a chromatic note range between specified notes or numbers, returning note names instead of midi numbers. The function accepts an array of notes or midi notes and an optional options object to customize output formatting, including use of sharps and octave omission. It relies on @tonaljs/range and outputs an array of note names representing the chromatic sequence with specified options.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/range/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nRange.chromatic([\"C2\", \"E2\", \"D2\"]); // => [\"C2\", \"Db2\", \"D2\", \"Eb2\", \"E2\", \"Eb2\", \"D2\"]\nRange.chromatic([\"C2\", \"C3\"], { sharps: true }); // => [ \"C2\", \"C#2\", \"D2\", \"D#2\", \"E2\", \"F2\", \"F#2\", \"G2\", \"G#2\", \"A2\", \"A#2\", \"B2\", \"C3\" ]\n```\n\n----------------------------------------\n\nTITLE: Finding Chord in Major Key Chords with Tonaljs JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the list of chords associated with a specific major key using the `Key.majorKeyChords` function from the tonaljs library. It then shows how to use array methods like `find` to locate a specific chord within that list. The input is a key name string, and the output is the chord object if found.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/key/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Key from \"tonal\";\n\nKey.majorKeyChords(\"C\").find((chord) => chord.name === \"Em\"); // => { name: \"Em\", roles: [\"T\", \"ii/II\"] }\n```\n\n----------------------------------------\n\nTITLE: Importing Voice Leading Module in Node.js\nDESCRIPTION: Shows how to import the Voice Leading module from Tonal in a Node.js environment.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/leading.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { VoiceLeading } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Get Interval Names - JavaScript\nDESCRIPTION: Retrieve a list of natural interval names using `Interval.names()`. This function returns an array of strings, where each string represents a standard interval name (e.g., \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6m\", \"7m\").\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nInterval.names(); // => [\"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6m\", \"7m\"]\n```\n\n----------------------------------------\n\nTITLE: Enforcing Pitch Class for Enharmonic\nDESCRIPTION: This code utilizes `Note.enharmonic()` to specify the desired pitch class for determining enharmonic equivalents.  It forces a specific pitch class to be returned, while also correctly calculating the octave. The results are only valid if the pitch classes have the same chroma.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nNote.enharmonic(\"F2\", \"E#\"); // => \"E#2\"\nNote.enharmonic(\"B2\", \"Cb\"); // => \"Cb3\"\nNote.enharmonic(\"C2\", \"B#\"); // => \"B#1\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Interval Properties in JavaScript\nDESCRIPTION: This code snippet demonstrates the `interval` function which takes an interval name as input and returns an object containing properties such as name, type, direction, number, quality, alteration, octave, semitones and simple. If invalid input given, it returns an object with empty properties.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pitch-interval/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninterval(\"4d\");\n// =>\n// {\n//   name: \"4d\",\n//   type: \"perfectable\",\n//   dir: 1,\n//   num: 4,\n//   q: \"d\",\n//   alt: -1,\n//   chroma: 4,\n//   oct: 0,\n//   semitones: 4,\n//   simple: 4,\n// }\ninterval(\"hello\"); // => { empty: true, name: \"\" }\n```\n\n----------------------------------------\n\nTITLE: Importing and Basic Note Parsing - Tonaljs - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the `note` function from the `@tonaljs/pitch-note` package and use it to parse a simple note name like 'c4'. The function returns an object containing properties of the note.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pitch-note/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { note } from \"@tonaljs/pitch-note\";\n\nnote(\"c4\"); // => { name: 'C4', oct: 4, ...}\n```\n\n----------------------------------------\n\nTITLE: Chord Retrieval Using Pitch Classes Instead of Notes with Octaves - JavaScript\nDESCRIPTION: Illustrates the breaking change in Chord.get behavior where chords are now identified by pitch classes instead of notes including octave. The symbol for a chord is simplified by removing the octave from the tonic, and the output chord notes are pitch classes only. This standardizes chord representation to focus on pitch class sets.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.get(\"M\", \"C4\"); // =>\n// {\n//   name: 'C4 major',\n//   tonic: 'C4',\n//   notes: [ 'C4', 'E4', 'G4' ]\n// ...\n// }\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.get(\"M\", \"C4\"); // =>\n// {\n//   name: 'C major',\n//   tonic: 'C',\n//   notes: [ 'C', 'E', 'G' ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Declaring VoiceLeadingFunction Type in TypeScript\nDESCRIPTION: Defines the TypeScript type alias 'VoiceLeadingFunction' representing a function that takes an array of chord voicings and a previous voicing, then returns a single voicing array representing the optimal next chord. This type ensures consistent input and output for voice leading functions.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voice-leading/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare type VoiceLeadingFunction = (\n  voicings: string[][],\n  lastVoicing: string[]\n) => string[];\n```\n\n----------------------------------------\n\nTITLE: Getting Voicing - TypeScript\nDESCRIPTION: This snippet describes the function signature for the `Voicing.get` method. This function is used to retrieve the 'best' voicing for a given chord. It takes the chord, range, dictionary, voice leading, and optionally a previous voicing.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nVoicing.get(\n  chord: string,\n  range?: [string, number],\n  dictionary?: VoicingDictionary,\n  voiceLeading?: VoiceLeading,\n  lastVoicing?: string[]\n) => string[];\n```\n\n----------------------------------------\n\nTITLE: Obtaining Specific Notes of a Chord Using 'Chord.notes'\nDESCRIPTION: This snippet shows the use of 'Chord.notes' to get actual note strings (including octaves) of the chord when given a chord type and a root, e.g., 'Cmaj7' with 'C4' as the root, producing notes like 'C4', 'E4'. It highlights the distinction between pitch classes and specific notes with octaves.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.notes(\"Cmaj7\", \"C4\"); // => ['C4', 'E4', 'G4', 'B4']\n```\n\n----------------------------------------\n\nTITLE: Getting Scale Notes by Degree Tonal.js JavaScript\nDESCRIPTION: `Scale.degrees()` takes a scale name and returns a function. This returned function accepts a degree number (1-based index) and returns the corresponding note name within the scale. It handles degrees outside the scale length, wrapping around octaves.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst c4major = Scale.degrees(\"C4 major\");\nc4major(1); // => \"C4\"\nc4major(2); // => \"D4\"\nc4major(8); // => \"C5\"\nc4major(-1); // => \"B3\"\nc4major(-3); // => \"A3\"\nc4major(-7); // => \"C2\"\n```\n\n----------------------------------------\n\nTITLE: Handling Dotted Notes Using DurationValue.get with Dots in JavaScript\nDESCRIPTION: Illustrates querying durations with additional dots to represent dotted notes (increasing the duration). DurationValue.get accepts note names with arbitrary numbers of dots (e.g., \"quarter..\") and returns an updated duration object reflecting the correct fractional duration and numeric value that accounts for the dots.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/duration.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nDurationValue.get(\"quarter..\"); // =>\n// {\n//   empty: false,\n//   name: 'q..',\n//   value: 0.4375,\n//   fraction: [ 7, 16 ],\n//   shorthand: 'q',\n//   dots: '..',\n//   names: [ 'quarter', 'crotchet' ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Importing DurationValue in ES6\nDESCRIPTION: Demonstrates how to import the DurationValue function from the @tonaljs/duration-value package using ES6 syntax. This is required to use the functions provided by the module.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/duration-value/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DurationValue } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Getting Chord Properties\nDESCRIPTION: Example of using `Chord.get` to retrieve chord properties. The input is a chord symbol string and the output is an object containing various chord properties, including notes, intervals, and the root note.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nChord.get(\"Cmaj7/B\"); // =>\n// {\n//   empty: false,\n//   name: 'C major seventh over B',\n//   setNum: 2193,\n//   chroma: '100010010001',\n//   normalized: '100010010001',\n//   intervals: [ '7M', '8P', '10M', '12P' ],\n//   quality: 'Major',\n//   aliases: [ 'maj7', 'Δ', 'ma7', 'M7', 'Maj7', '^7' ],\n//   symbol: 'Cmaj7/B',\n//   tonic: 'C',\n//   type: 'major seventh',\n//   root: 'B',\n//   bass: 'B',\n//   rootDegree: 4,\n//   notes: [ 'B', 'C', 'E', 'G' ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Converting Roman Numerals to Chords\nDESCRIPTION: Converts a chord progression expressed in Roman numerals to leadsheet chords, given a key tonic. The function `Progression.fromRomanNumerals` takes a key tonic string (e.g., \"C\") and an array of Roman numeral chord strings (e.g., [\"IMaj7\", \"IIm7\", \"V7\"]) as input, and returns an array of corresponding leadsheet chord strings (e.g., [\"CMaj7\", \"Dm7\", \"G7\"]).\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/progression/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nProgression.fromRomanNumerals(\"C\", [\"IMaj7\", \"IIm7\", \"V7\"]);\n// => [\"CMaj7\", \"Dm7\", \"G7\"]\n```\n\n----------------------------------------\n\nTITLE: Get the Octave of a Note\nDESCRIPTION: This snippet demonstrates how to get the octave of a note. It utilizes the `note()` function to parse a note name and then accesses its `octave` property. It depends on the `@tonaljs/core` module. The input is a valid note name and the output is the octave number or null.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nnote(\"C4\").octave; // => 4\n```\n\n----------------------------------------\n\nTITLE: Getting Time Signature Details (JavaScript)\nDESCRIPTION: This code demonstrates retrieving detailed information about a time signature using the `TimeSignature.get()` function. This function accepts a string (e.g., \"3/4\") or an array (e.g., [3, 4] or [\"3\", \"4\"]) as input and returns an object containing information about the time signature, including the upper and lower numbers.  It supports various time signature types like simple, compound, irregular, and irrational.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/signatures.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTimeSignature.get(\"3/4\"); // =>\n// {\n//   empty: false,\n//   name: \"3/4\",\n//   upper: 3,\n//   lower: 4,\n//   type: \"simple\",\n//   additive: []\n// };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nTimeSignature.get(\"3+2+3/8\"); // =>\n// {\n//   empty: false,\n//   name: '3+2+3/8',\n//   type: 'irregular',\n//   upper: 8,\n//   lower: 8,\n//   additive: [ 3, 2, 3 ]\n// }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nTimeSignature.get(\"12/10\"); // =>\n// {\n//   empty: false,\n//   name: '12/10',\n//   type: 'irrational',\n//   upper: 12,\n//   lower: 10,\n//   additive: []\n// }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nTimeSignature.get([3, 4]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nTimeSignature.get([\"3\", \"4\"]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nTimeSignature.get([\"3+2+3\", \"8\"]);\n```\n\n----------------------------------------\n\nTITLE: Converting Leadsheet Chords to Roman Numerals in Tonal.js\nDESCRIPTION: This snippet demonstrates the `toRomanNumerals` function in the tonal.js library. It is the inverse of `fromRomanNumerals`. It takes a key tonic and an array of leadsheet chords as input, and it returns the corresponding Roman numeral analysis chords. The example shows the conversion from leadsheet chords to roman numerals using the key \"C\". Requires the tonal library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/progressions.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nProgression.toRomanNumerals(\"C\", [\"CMaj7\", \"Dm7\", \"G7\"]);\n// => \"IMaj7\", \"IIm7\", \"V7\"]\n```\n\n----------------------------------------\n\nTITLE: Deprecation of Default Module Export Pattern\nDESCRIPTION: This snippet explains the transition from default exports to namespace imports for '@tonaljs' modules to adhere to new best practices and deprecation policies. Dependencies include various '@tonaljs/*' packages. It shows how to import modules as entire namespaces rather than default imports, e.g., 'import * as Note from \"@tonaljs/note\"'.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Importing VoicingDictionary with ES6 Modules in JavaScript\nDESCRIPTION: Demonstrates how to import the VoicingDictionary from the Tonal library using ES6 module syntax. Requires the 'tonal' package to be installed as a dependency. No parameters are needed; this statement brings VoicingDictionary into scope for usage. The expected environment is a modern JavaScript runner with ES6 module support.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing-dictionary/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { VoicingDictionary } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Importing Typescript Types\nDESCRIPTION: This snippet demonstrates importing the `NoteType` and `IntervalType` types from the Tonal.js library using TypeScript. These types are used for type-checking variables that represent musical notes and intervals.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CHANGELOG.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Interval, IntervalType, Note, NoteType } from \"tonal\";\n\nconst note: NoteType = Note.get(\"C4\");\nconst interval: IntervalType = Interval.get(\"4P\");\n```\n\n----------------------------------------\n\nTITLE: Recommended Named Export Usage (New)\nDESCRIPTION: Illustrates the recommended way of importing modules in tonaljs using named exports with the `* as` syntax.  This is the preferred method for importing tonaljs modules.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/mode/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Generating Permutations with Collection.permutations\nDESCRIPTION: The permutations function returns all possible arrangements of elements in an array. For an array of n elements, it will return n! different permutations.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/utils/collections.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.permutations([\"a\", \"b\", \"c\"])) // =>\n// =>\n// [\n//   [\"a\", \"b\", \"c\"],\n//   [\"b\", \"a\", \"c\"],\n//   [\"b\", \"c\", \"a\"],\n//   [\"a\", \"c\", \"b\"],\n//   [\"c\", \"a\", \"b\"],\n//   [\"c\", \"b\", \"a\"]\n// ]\n```\n\n----------------------------------------\n\nTITLE: Example Output of Scale.modeNames Tonaljs Scale\nDESCRIPTION: Shows the example output returned by `Scale.modeNames(\"C pentatonic\")`, listing the modes of the C Pentatonic scale.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n//    [\"C\", \"major pentatonic\"],\n//    [\"D\", \"egyptian\"],\n//    [\"E\", \"malkos raga\"],\n//    [\"G\", \"ritusen\"],\n//    [\"A\", \"minor pentatonic\"]\n//  ]\n```\n\n----------------------------------------\n\nTITLE: Importing @tonaljs Modules with Namespace Import in JavaScript\nDESCRIPTION: Shows the recommended way to import @tonaljs modules after default exports were deprecated. Instead of using default imports which are no longer supported, modules should be imported using namespace imports to include all exported members. This maintains compatibility with latest module versions and reflects updated usage patterns.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing-dictionary/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Handling Slash Chords with Bass Notes\nDESCRIPTION: This snippet demonstrates the new feature where chords can specify a bass note via slash notation, with the bass being a pitch class. The resulting chord object contains a 'bass' property indicating the bass pitch class. Examples include 'Cmaj7/B' and 'Eb/D'.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.get(\"Cmaj7/B\");\nChord.get(\"Eb/D\");\n```\n\n----------------------------------------\n\nTITLE: Generating and Manipulating Rhythm Patterns with TonalJS\nDESCRIPTION: This TypeScript snippet demonstrates importing the `RhythmPattern` object from the `tonal` library and using its static methods to generate various rhythmic patterns. Examples include creating Euclidean rhythms (`euclid`), patterns from hexadecimal (`hex`) or binary representations (`binary`), defining patterns by onset counts (`onsets`), generating random patterns (`random`), creating patterns based on probability arrays (`probability`), and rotating existing patterns (`rotate`). Each method returns an array representing the rhythmic pattern (typically 1 for onset, 0 for rest).\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/rhythm-pattern/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RhythmPattern } from \"tonal\";\n\nRhythmPattern.euclid(8, 3); // => [1, 0, 0, 1, 0, 0, 1, 0]\nRhythmPattern.hex(\"8f\"); // => [1, 0, 0, 0, 1, 1, 1, 1]\nRhythmPattern.binary(12, 13); // => [1, 1, 0, 0, 1, 1, 0, 1]\nRhythmPattern.onsets(1, 2, 2, 1); // => [1, 0, 1, 0, 0, 1, 0, 0, 1, 0]\nRhythmPattern.random(4); // => [1, 0, 0, 1]\nRhythmPattern.probability([0.6, 0, 0.2, 0.5]); // => [0, 0, 0, 1]\nRhythmPattern.rotate([1, 0, 0, 1], 2); // => [0, 1, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Deprecating Default Imports for tonaljs Modules - JavaScript\nDESCRIPTION: This snippet demonstrates the old usage of default imports for @tonaljs modules, which is now deprecated in favor of namespace imports. The default import syntax imports the Note module using the default export. Users upgrading from earlier versions should update existing imports to use the namespace pattern to ensure future compatibility.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-type/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Tonal Module - Bash\nDESCRIPTION: Command to install a single, specific module from the '@tonaljs' scoped packages (e.g., '@tonaljs/note') using npm. Useful for reducing bundle size by only including needed functionality. Requires Node.js and npm.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tonaljs/note\n```\n\n----------------------------------------\n\nTITLE: Implementing Top Note Difference Voice Leading Function in TypeScript\nDESCRIPTION: Implements a voice leading function that selects the voicing whose highest note is closest in pitch to the highest note of the previous voicing. It first handles the case with no prior voicing by returning the first voicing. It uses the 'Note.midi' method to convert note names into MIDI numbers for pitch comparison. The function sorts candidate voicings by their absolute top note MIDI difference to the last voicing and returns the voicing with the smallest difference.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voice-leading/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst topNoteDiff: VoiceLeadingFunction = (voicings, lastVoicing) => {\n  if (!lastVoicing || !lastVoicing.length) {\n    // if no lastVoicing is given\n    return voicings[0];\n  }\n  const topNoteMidi = (voicing: string[]) =>\n    Note.midi(voicing[voicing.length - 1]) || 0;\n  const diff = (voicing: string[]) =>\n    Math.abs(topNoteMidi(lastVoicing) - topNoteMidi(voicing));\n  return voicings.sort((a, b) => diff(a) - diff(b))[0]; // return voicing with least diff\n};\n```\n\n----------------------------------------\n\nTITLE: Using Scale.steps with Range Mapping Tonal.js JavaScript\nDESCRIPTION: `Scale.steps()` is similar to `Scale.degrees()` but treats 0 as the tonic. This example imports `Range` and `Scale`, then uses `Range.numeric()` to generate a range of step numbers. `map` is used with the function returned by `Scale.steps()` to get the corresponding notes in the \"C4 major\" scale for each step number.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Range, Scale } from \"tonal\";\n\nRange.numeric([-3, 3]).map(Scale.steps(\"C4 major\"));\n// => [\"G3\", \"A3\", \"B3\", \"C4\", \"D4\", \"E4\", \"F4\"]\n```\n\n----------------------------------------\n\nTITLE: Getting Time Signature Details (String)\nDESCRIPTION: Calls the static `get()` method with a string representing a time signature (e.g., \"3/4\"). The function parses the string and returns an object containing detailed properties like name, upper, lower, type, and additive components.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/time-signature/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nTimeSignature.get(\"3/4\"); // =>\n// {\n//   empty: false,\n//   name: \"3/4\",\n//   upper: 3,\n//   lower: 4,\n//   type: \"simple\",\n//   additive: []\n// };\n```\n\n----------------------------------------\n\nTITLE: Convert Note Name to Midi Number (toMidi) in Tonal.js\nDESCRIPTION: This snippet shows how to use the `Midi.toMidi` function to convert different note representations (note names, MIDI numbers, and strings of MIDI numbers) to MIDI numbers. The function accepts a string or number as input and returns a MIDI number or null if the input is invalid.  The output is always between 0-127.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/midi.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMidi.toMidi(\"C4\"); // => 60\nMidi.toMidi(\"#\"); // => null\nMidi.toMidi(60); // => 60\nMidi.toMidi(\"60\"); // => 60\nMidi.toMidi(-1); // => null\n```\n\n----------------------------------------\n\nTITLE: Importing Note Module and Using Distance\nDESCRIPTION: This snippet shows how to import the `Note` module from the 'tonal' library and use its `distance` function to calculate the interval between two notes. It requires the 'tonal' library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CHANGELOG.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Note } from \"tonal\";\nNote.distance(\"c4\", \"e7\"); // => \"24M\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NoteType and IntervalType Types in TypeScript\nDESCRIPTION: This snippet demonstrates importing the NoteType and IntervalType types alongside Note and Interval objects from the tonal library. It shows how to obtain typed variables representing musical notes and intervals using the Note.get and Interval.get methods. The snippet requires the tonal TypeScript library with exported types from version 6.1.0 or newer. Inputs are string representations of musical notes (e.g. \"C4\") and intervals (e.g. \"P4\") and the output are typed NoteType and IntervalType instances. This enables static type checking and improved type safety in musical note and interval handling.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pitch-note/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Interval, IntervalType, Note, NoteType } from \"tonal\";\n\nconst note: NoteType = Note.get(\"C4\");\nconst interval: IntervalType = Interval.get(\"P4\");\n```\n\n----------------------------------------\n\nTITLE: Using Note.distance (JavaScript)\nDESCRIPTION: This code snippet demonstrates using the `Note.distance` function to calculate the interval between two musical notes. It takes two string arguments, the starting and ending notes, and returns the interval. The @tonaljs/note package is required. The output will be a string representing the interval.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/CHANGELOG.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Note } from \"tonal\";\nNote.distance(\"c4\", \"e7\"); // => \"24M\"\n```\n\n----------------------------------------\n\nTITLE: Example Output of Scale.detect Exact Match Tonaljs Scale\nDESCRIPTION: Shows an example output array returned by `Scale.detect()` with `match: \"exact\"`, identifying the D Major Pentatonic scale.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// => [\"D major pentatonic\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Time Duration Value Using Tonal DurationValue in JavaScript\nDESCRIPTION: Demonstrates importing the DurationValue module and retrieving the numeric duration value for a named musical note duration such as \"quarter\". Requires the Tonal library package \"duration-value\". The key parameter is the duration name string, and the output is the fractional numeric duration (e.g., 0.25 for quarter notes).\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/duration.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { DurationValue } from \"tonal\";\n\nDurationValue.get(\"quarter\").value; // => 0.25\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scale Type Information (JavaScript)\nDESCRIPTION: Uses the `ScaleType.get` function to retrieve detailed information about a musical scale type by its name, such as 'major'. The output is an object containing properties like name, aliases, intervals, chroma, and length. If the scale type is not found, it typically returns null or undefined.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale-type/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nScaleType.get(\"major\");\n// =>\n// {\n// name: \"major\",\n// aliases: [\"ionian\"],\n// num: 2773,\n// chroma: \"101011010101\",\n// length: 7\n// intervals: [\"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\"],\n// });\n```\n\n----------------------------------------\n\nTITLE: Deprecated Default Export Example\nDESCRIPTION: This code snippet illustrates the deprecated default export syntax for @tonaljs modules and the recommended alternative using `import * as ModuleName from \"@tonaljs/module\"`. This change affects all modules within the @tonaljs library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Function from Note Module\nDESCRIPTION: This snippet shows how to import a specific function, `get`, from the `@tonaljs/note` module.  This can be useful for optimizing bundle sizes if only a subset of the module's functionality is needed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { get } from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Using Chord Steps with Range\nDESCRIPTION: Shows how to use `Chord.steps` with a numeric range to generate notes relative to a chord's tonic.  `Chord.steps` is similar to `Chord.degrees` but treats 0 as the tonic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Range, Chord } from \"tonal\";\n\nRange.numeric([-3, 3]).map(Chord.steps([\"C4\", \"aug\"]));\n// => [\"G#3\", \"E3\", \"C3\", \"C4\", \"E4\", \"G#4\", \"C5\"]\n```\n\n----------------------------------------\n\nTITLE: Converting Frequency to Note Name\nDESCRIPTION: This snippet demonstrates the use of `Note.fromFreq()` to convert a frequency in Hz to a note name.  It takes a frequency value as input and returns the closest note name. The result might not be a perfect match due to rounding.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nNote.fromFreq(440); // => \"A4\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving notes of a chord with 'Chord.notes'\nDESCRIPTION: This code demonstrates how to get the pitch class notes of a specific chord ('maj7') at a specified tonic ('C4'), useful for harmonic analysis and generating chord voicings programmatically.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.notes(\"maj7\", \"C4\"); // => [\"C4\", \"E4\", \"G4\", \"B4\"]\n```\n\n----------------------------------------\n\nTITLE: Transposing Notes by Intervals in JavaScript with Tonal.js\nDESCRIPTION: Examples of transposing notes by musical intervals using Note.transpose and its curried versions transposeBy and transposeFrom for working with arrays.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/notes.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nNote.transpose(\"d3\", \"3M\"); // => \"F#3\"\nNote.transpose(\"D\", \"3M\"); // => \"F#\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\n// => [\"G\", \"A\", \"B\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\n// => [\"C\", \"E\", \"G\"]\n```\n\n----------------------------------------\n\nTITLE: Handling Zero Degree Scale.degrees Tonal.js JavaScript\nDESCRIPTION: Demonstrates the behavior of the function returned by `Scale.degrees()` when passed 0 as the degree. It explicitly shows that a degree of 0 results in an empty string output.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nc4major(0); // => \"\"\n```\n\n----------------------------------------\n\nTITLE: Convert Frequency to Midi Number (freqToMidi) in Tonal.js\nDESCRIPTION: This snippet demonstrates the `Midi.freqToMidi` function, which converts a frequency in Hertz to its corresponding MIDI number. The resulting MIDI number can have decimal places (with two digits precision).\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/midi.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMidi.freqToMidi(220); //=> 57\nMidi.freqToMidi(261.62); //=> 60\nMidi.freqToMidi(261); //=> 59.96\n```\n\n----------------------------------------\n\nTITLE: Scale.detect Usage Example\nDESCRIPTION: This example demonstrates how to use the `Scale.detect` function to identify possible scales based on a given set of notes. The function takes an array of notes as input and returns an array of possible scale names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nScale.detect([\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]);\n// => [\"C major\", \"C bebop\", \"C bebop major\",\n//     \"C ichikosucho\",  \"C chromatic\"];\n```\n\n----------------------------------------\n\nTITLE: Importing Tonal.js Modules\nDESCRIPTION: This snippet demonstrates the correct way to import modules from the Tonal.js library after the deprecation of default exports.  It replaces the default export usage with a named import strategy using the `* as` syntax.  This improves clarity and prevents potential conflicts.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Tonal.js Functions\nDESCRIPTION: This example shows how to import a specific function, `transpose`, from an individual tonal.js module (note). By importing specific functions, the final bundle size can be reduced as you are only importing the functionality needed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { transpose } from \"@tonaljs/note\";\ntranspose(\"A4\", \"P5\");\n```\n\n----------------------------------------\n\nTITLE: Importing All Exports from Note Module in JavaScript\nDESCRIPTION: This snippet illustrates the recommended method to import the entire set of exported members from the @tonaljs/note package as a namespace object called Note. This approach uses the ECMAScript module syntax and is compatible with the updated module structure following deprecation of default exports. The main dependency is the @tonaljs/note package, and no additional configuration is needed. All exported members are available as properties of the Note object.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voice-leading/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Implementing a Voice Leading Function with Top Note Difference\nDESCRIPTION: Example implementation of a voice leading function that selects a voicing with minimal difference between top notes of consecutive chords. It handles cases where no previous voicing exists and uses MIDI note values for comparison.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/leading.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst topNoteDiff: VoiceLeadingFunction = (voicings, lastVoicing) => {\n  if (!lastVoicing || !lastVoicing.length) {\n    // if no lastVoicing is given\n    return voicings[0];\n  }\n  const topNoteMidi = (voicing: string[]) =>\n    Note.midi(voicing[voicing.length - 1]) || 0;\n  const diff = (voicing: string[]) =>\n    Math.abs(topNoteMidi(lastVoicing) - topNoteMidi(voicing));\n  return voicings.sort((a, b) => diff(a) - diff(b))[0]; // return voicing with least diff\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Frequencies to Notes with Note.fromFreq in JavaScript\nDESCRIPTION: Examples of converting frequencies in Hertz to note names with Note.fromFreq and Note.fromFreqSharps, rounding to the nearest note.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/notes.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nNote.fromFreq(440); // => \"A4\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[440, 550, 660].map(t.Note.fromFreq); // => [ 'A4', 'Db5', 'E5' ]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[440, 550, 660].map(t.Note.fromFreqSharps); // => [ 'A4', 'C#5', 'E5' ]\n```\n\n----------------------------------------\n\nTITLE: Finding Enharmonic Equivalents\nDESCRIPTION: This snippet demonstrates `Note.enharmonic()` to find the enharmonic equivalent of a given note. The function returns the equivalent note name or an empty string if the input is not valid. If the function is provided a pitch class, it will calculate the octave accordingly.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nNote.enharmonic(\"C#\"); // => \"Db\"\nNote.enharmonic(\"C##\"); // => \"D\"\nNote.enharmonic(\"C###\"); // => \"Eb\"\n\nNote.enharmonic(\"C##b\"); // => \"\"\n\n```\n\n----------------------------------------\n\nTITLE: Updating Module Imports in @tonaljs - JavaScript\nDESCRIPTION: Illustrates the change in recommended import style for @tonaljs modules. The snippet on the left shows the deprecated default export import, while the snippet on the right shows the new recommended way using a namespace import. This change affects how modules from packages like @tonaljs/note should be imported.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pcset/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mode Details - Tonal.js Mode JavaScript\nDESCRIPTION: Uses the `Mode.get()` function to retrieve detailed information about a musical mode, specified by its name (e.g., \"major\"). It returns an object containing properties like name, aliases, intervals, mode number, alterations, and associated triad/seventh chord types.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/mode/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nMode.get(\"major\");\n// {\n//   name: \"ionian\",\n//   aliases: [\"major\"]\n//   intervals: [\"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\"]\n//   modeNum: 0,\n//   mode: 2773,\n//   alt: 0,\n//   triad: \"\",\n//   seventh: \"Maj7\",\n// }\n```\n\n----------------------------------------\n\nTITLE: Creating Numeric (MIDI) Ranges - JavaScript\nDESCRIPTION: This snippet demonstrates the `Range.numeric` function, which generates a numeric range of MIDI note numbers based on the input array of note names or numbers. It takes an array of strings or numbers representing the starting and ending notes (peaks and valleys), and returns a number array representing the range. The range can be ascending or descending depending on the input values. No dependencies are required; this is part of the `tonaljs` library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/utils/ranges.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nRange.numeric([10, 5]); // => [ 10, 9, 8, 7, 6, 5 ]\nRange.numeric([-5, 5]); // => [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\nRange.numeric([\"C5\", \"C4\"]); // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\nRange.numeric([\"C4\", \"E4\", \"Bb3\"]); // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\n```\n\n----------------------------------------\n\nTITLE: Simplifying Note Accidentals in JavaScript with Tonal.js\nDESCRIPTION: Examples of simplifying note names by reducing excessive accidentals using Note.simplify, which converts notes to their equivalent with fewer accidentals.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/notes.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nNote.simplify(\"C#\"); // => \"C#\"\nNote.simplify(\"C##\"); // => \"D\"\nNote.simplify(\"C###\"); // => \"D#\"\n```\n\n----------------------------------------\n\nTITLE: Determine if Two Notes are Enharmonics\nDESCRIPTION: The snippet demonstrates two ways to determine if two notes are enharmonics. It uses both the `midi` property and `height` property to compare the notes. It relies on the `@tonaljs/core` module. The input is a string and the output is a boolean.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nnote(\"Cb4\").midi === note(\"B3\").midi;\n```\n\n----------------------------------------\n\nTITLE: Using the Top Note Difference Voice Leading Function\nDESCRIPTION: Example usage of the topNoteDiff function to select a chord voicing with top notes closest in pitch to the previous chord. The function picks the voicing where A4 is closest to the previous B4 top note.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/leading.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntopNoteDiff(\n  [\n    [\"F3\", \"A3\", \"C4\", \"E4\"], // top note = E4\n    [\"C4\", \"E4\", \"F4\", \"A4\"], // top note = A4\n  ],\n  [\"C4\", \"E4\", \"G4\", \"B4\"], // top note = B4\n);\n// ['C4', 'E4', 'F4', 'A4'] // => A4 is closer to B4 than E4\n```\n\n----------------------------------------\n\nTITLE: Finding relative tonics between modes\nDESCRIPTION: Demonstrates how to find the relative tonic between different modes using the Mode.relativeTonic() method, such as finding the relative minor of a major key.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/modes.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMode.relativeTonic(\"minor\", \"major\", \"C\"); // => \"A\"\n```\n\n----------------------------------------\n\nTITLE: Converting MIDI Number to Sharp Note Name\nDESCRIPTION: This snippet uses `Note.fromMidiSharps()` to convert a MIDI number to its corresponding sharp note name. The function takes a MIDI number as input and returns the note name, using sharps instead of flats where appropriate.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nNote.fromMidiSharps(61); // => \"C#4\"\n```\n\n----------------------------------------\n\nTITLE: Getting Major Tonic from Key Signature (JavaScript)\nDESCRIPTION: Demonstrates the use of the `Key.majorTonicFromKeySignature` function. This function takes a string representing a musical key signature (e.g., \"bbb\" for three flats) and returns the corresponding major key's tonic (e.g., \"Eb\"). Required dependency: \"tonal\" package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/key/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nKey.majorTonicFromKeySignature(\"bbb\"); // => Eb\n```\n\n----------------------------------------\n\nTITLE: Importing Tonal.js Modules - JavaScript\nDESCRIPTION: This snippet demonstrates the correct way to import Tonal.js modules.  Due to deprecation of default exports, instead of importing a module directly using a default export, it's now recommended to import all exports using a named import.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/midi/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Sorting Note Collections in JavaScript with Tonal.js\nDESCRIPTION: Examples of sorting arrays of note names in ascending or descending order using Note.sortedNames, which can handle pitch classes and notes with octaves.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/notes.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nNote.sortedNames([\"c2\", \"c5\", \"c1\", \"c0\", \"c6\", \"c\"]);\n// => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\nNote.sortedNames([\"c\", \"F\", \"G\", \"a\", \"b\", \"h\", \"J\"]);\n// => ['C', 'F', 'G', 'A', 'B']\n```\n\nLANGUAGE: javascript\nCODE:\n```\nNote.sortedNames([\"c2\", \"c5\", \"c1\", \"c0\", \"c6\", \"c\"], Note.descending);\n// => ['C6', 'C5', 'C2', 'C3', 'C1', 'C0']\n```\n\n----------------------------------------\n\nTITLE: Creating Hexadecimal Rhythm Patterns\nDESCRIPTION: Example of using the hex function to create rhythm patterns from hexadecimal numbers. The hex string is converted to a binary representation and then to an array of 0s and 1s.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/rhythm-pattern/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nhex(\"8f\"); // => [1, 0, 0, 0, 1, 1, 1, 1]\n```\n\n----------------------------------------\n\nTITLE: Generating seventh chords from a mode\nDESCRIPTION: Shows how to generate the sequence of seventh chords from a mode with a specific tonic using the Mode.seventhChords() method.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/modes.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMode.seventhChords(\"major\", \"C\");\n// => [\"CMaj7\", \"Dm7\", \"Em7\", \"FMaj7\", \"G7\", \"Am7\", \"B7b5\"];\n```\n\n----------------------------------------\n\nTITLE: Simplify Interval - JavaScript\nDESCRIPTION: Simplify an interval using `Interval.simplify()`. This function reduces compound intervals to their simple equivalents (e.g., \"9M\" becomes \"2M\"). It takes the interval name as a string and returns the simplified interval name.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nInterval.simplify(\"9M\"); // => \"2M\"\nInterval.simplify(\"2M\"); // => \"2M\"\nInterval.simplify(\"-2M\"); // => \"7m\"\n[\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify);\n// => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Functions from RhythmPattern\nDESCRIPTION: Shows how to import specific functions from the rhythm-pattern module directly for more targeted usage.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/rhythm-pattern/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { binary, euclid } from \"@tonaljs/rhythm-pattern\";\n```\n\n----------------------------------------\n\nTITLE: Chord Alias Example\nDESCRIPTION: Example of using the `chord` alias directly from the `@tonaljs/chord` package. This provides a shorthand for accessing the `Chord.get` function.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { chord } from \"@tonaljs/chord\";\n\nchord(\"C6add2\");\n```\n\n----------------------------------------\n\nTITLE: Working with Note Collections in JavaScript with Tonal.js\nDESCRIPTION: Examples of extracting valid note names from arrays and generating collections of note names using Note.names, which normalizes note names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/notes.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nNote.names([\"fx\", \"bb\", 12, \"nothing\", {}, null])) // => [\"F##\", \"Bb\"];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nNote.names(); // =>[\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\n```\n\n----------------------------------------\n\nTITLE: Create Interval from Semitones - JavaScript\nDESCRIPTION: Create an interval name from a number of semitones using `Interval.fromSemitones()`. This function takes an integer representing the number of semitones and returns the corresponding interval name as a string. It can handle both positive and negative values.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nInterval.fromSemitones(7); // => \"5P\"\nInterval.fromSemitones(-7); // => \"-5P\"\n\n[0, 1, 2, 3, 4].map(Interval.fromSemitones);\n```\n\n----------------------------------------\n\nTITLE: Getting Detailed Duration Value Object with Tonal DurationValue.get Method in JavaScript\nDESCRIPTION: Shows how to obtain a detailed duration object for a named note duration using DurationValue.get(name). Returns an object containing properties like \"empty\", \"name\", \"value\" (numeric duration), \"fraction\" (numerator and denominator), \"shorthand\", \"dots\", and all recognized \"names\" (aliases). Input is a string representing the note duration (e.g., \"quarter\").\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/duration.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nDurationValue.get(\"quarter\"); // =>\n// {\n//   empty: false,\n//   name: 'q',\n//   value: 0.25,\n//   fraction: [ 1, 4 ],\n//   shorthand: 'q',\n//   dots: '',\n//   names: [ 'quarter', 'crotchet' ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Sorting and Removing Duplicate Note Names\nDESCRIPTION: This snippet demonstrates the use of `Note.sortedUniqNames()` to sort an array of note names in ascending order and remove duplicate entries. The function returns a new array containing only unique note names, sorted from low to high.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nNote.sortedUniqNames([\"c2\", \"c5\", \"c1\", \"c0\", \"c6\", \"c\"]);\n// => [\"C0\", \"C1\", \"C2\", \"C5\", \"C6\"]\n```\n\n----------------------------------------\n\nTITLE: Finding notes of a mode with a specific tonic\nDESCRIPTION: Shows how to retrieve the notes of a mode with a given tonic using the Mode.notes() method, supporting both formal mode names and common aliases.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/modes.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMode.notes(\"ionian\", \"C\");\n// => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\nMode.notes(\"major\", \"C\");\n// => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\nMode.notes(\"minor\", \"C\");\n// => [\"C\", \"D\", \"Eb\", \"F\", \"G\", \"Ab\", \"Bb\"];\n```\n\n----------------------------------------\n\nTITLE: Normalizing and Sorting Scale Notes Tonal.js JavaScript\nDESCRIPTION: `Scale.scaleNotes()` takes an array of note strings and returns a new array of sorted pitch classes. The output array always starts with the pitch class of the first note in the input array. This is useful for standardizing note collections.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Always start with the first note of the input array\nScale.scaleNotes([\"D4\", \"c#5\", \"A5\", \"F#6\"]); // => [\"D\", \"F#\", \"A\", \"C#\"]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Euclid Rhythm Generation in Tonal.js (JavaScript)\nDESCRIPTION: Demonstrates importing the `RhythmPattern` object from the 'tonal' library and using the `euclid` static method to generate a Euclidean rhythm pattern. The `euclid` function takes the total number of steps and the desired number of beats as arguments, returning an array of 1s (beats) and 0s (rests).\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/patterns.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RhythmPattern } from \"tonal\";\n\nRhythmPattern.euclid(8, 3); // => [1, 0, 0, 1, 0, 0, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Return Pitch Class Set (pcset) from Midi Numbers in Tonal.js\nDESCRIPTION: This snippet illustrates how to use the `Midi.pcset` function to derive the pitch class set from a list of MIDI numbers or a pitch class chroma string.  A pitch class set is a sorted collection of unique notes between 0 and 11.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/midi.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nMidi.pcset([62, 63, 60, 65, 70, 72]); // => [0, 2, 3, 5, 10]\nMidi.pcset(\"100100100101\"); // => [0, 3, 6, 9, 11]\n```\n\n----------------------------------------\n\nTITLE: Importing Note Module Using Namespace Import in JavaScript\nDESCRIPTION: Imports all exports from @tonaljs/note as the Note namespace, conforming to the new recommended practice after deprecation of default exports. This ensures compatibility with the latest versions and aligns with modern JavaScript module usage. Requires the @tonaljs/note dependency to be installed. The Note object will contain all exported members, and this syntax is necessary for receiving future updates and support.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/roman-numeral/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Using Top Note Difference Voice Leading Function in TypeScript\nDESCRIPTION: Demonstrates the application of the 'topNoteDiff' function with sample voicings and a previous voicing. The example inputs are arrays of note strings representing chords. The function returns the chord whose top note is closest in pitch to the top note of the last voicing, highlighting practical usage of the voice leading logic. Outputs the voicing with minimal high note movement.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voice-leading/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntopNoteDiff(\n  [\n    [\"F3\", \"A3\", \"C4\", \"E4\"], // top note = E4\n    [\"C4\", \"E4\", \"F4\", \"A4\"], // top note = A4\n  ],\n  [\"C4\", \"E4\", \"G4\", \"B4\"] // top note = B4\n);\n// ['C4', 'E4', 'F4', 'A4'] // => A4 is closer to B4 than E4\n```\n\n----------------------------------------\n\nTITLE: Replicating Previous Chord.get Behavior with Array Input - JavaScript\nDESCRIPTION: This snippet shows how to replicate the old Chord.get parsing behavior in both v4.x and v5.x by providing an array of tonic and chord type. This explicit format avoids ambiguity and ensures consistent parsing of both the tonic (with octave) and the chord type, resulting in the correct chord object.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-type/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.get([\"C4\", \"maj7\"]); // => { symbol: 'Cmaj7', tonic: 'C4' ... }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minor Key Properties Using `minorKey` in JavaScript\nDESCRIPTION: Shows how to obtain a detailed minor key object with subdivisions for natural, harmonic, and melodic variants. Each includes tonic, scale intervals, grades, triads, chords, harmonic functions, chord scales, secondary dominants, and substitutions. This requires the Tonal.js Key package and a tonic string as input.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/keys.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nKey.minorKey(\"C\") // =>\n{\n  tonic: \"C\",\n  type: \"minor\",\n  relativeMajor: \"Eb\",\n  alteration: -3,\n  keySignature: \"bbb\",\n  natural: {\n    tonic: \"C\",\n    grades: [\"I\", \"II\", \"bIII\", \"IV\", \"V\", \"bVI\", \"bVII\"],\n    intervals: [\"1P\", \"2M\", \"3m\", \"4P\", \"5P\", \"6m\", \"7m\"],\n    scale: [\"C\", \"D\", \"Eb\", \"F\", \"G\", \"Ab\", \"Bb\"],\n    triads: [\"Cm\", \"Ddim\", \"Eb\", \"Fm\", \"Gm\", \"Ab\", \"Bb\"],\n    chords: [\"Cm7\", \"Dm7b5\", \"Ebmaj7\", \"Fm7\", \"Gm7\", \"Abmaj7\", \"Bb7\"],\n    chordsHarmonicFunction: [\"T\", \"SD\", \"T\", \"SD\", \"D\", \"SD\", \"SD\"],\n    chordScales: [\n      \"C minor\",\n      \"D locrian\",\n      \"Eb major\",\n      \"F dorian\",\n      \"G phrygian\",\n      \"Ab lydian\",\n      \"Bb mixolydian\",\n    ],\n    secondaryDominants: [\"G7\", \"\", \"\", \"C7\", \"D7\", \"Eb7\", \"F7\"],\n    secondaryDominantSupertonics: [\n      \"Dm7\",\n      \"\",\n      \"\",\n      \"Gm7\",\n      \"Am7\",\n      \"Bbm7b5\",\n      \"Cm7b5\",\n    ],\n    substituteDominants: [\"Db7\", \"\", \"\", \"Gb7\", \"Ab7\", \"Bbb7\", \"Cb7\"],\n    substituteDominantSupertonics: [\n      \"Abm7\",\n      \"\",\n      \"\",\n      \"Dbm7\",\n      \"Ebm7\",\n      \"Fbm7b5\",\n      \"Gbm7b5\",\n    ],\n    secondaryDominantsMinorRelative: [\n      \"Dm7\",\n      \"\",\n      \"\",\n      \"Gm7\",\n      \"Am7\",\n      \"Bbm7b5\",\n      \"Cm7b5\",\n    ],\n    substituteDominantsMinorRelative: [\n      \"Abm7\",\n      \"\",\n      \"\",\n      \"Dbm7\",\n      \"Ebm7\",\n      \"Fbm7b5\",\n      \"Gbm7b5\",\n    ],\n  },\n  harmonic: {\n    tonic: \"C\",\n    grades: [\"I\", \"II\", \"bIII\", \"IV\", \"V\", \"bVI\", \"VII\"],\n    intervals: [\"1P\", \"2M\", \"3m\", \"4P\", \"5P\", \"6m\", \"7M\"],\n    scale: [\"C\", \"D\", \"Eb\", \"F\", \"G\", \"Ab\", \"B\"],\n    triads: [\"Cm\", \"Ddim\", \"Ebaug\", \"Fm\", \"G\", \"Ab\", \"Bdim\"],\n    chords: [\"CmMaj7\", \"Dm7b5\", \"Eb+maj7\", \"Fm7\", \"G7\", \"Abmaj7\", \"Bo7\"],\n    chordsHarmonicFunction: [\"T\", \"SD\", \"T\", \"SD\", \"D\", \"SD\", \"D\"],\n    chordScales: [\n      \"C harmonic minor\",\n      \"D locrian 6\",\n      \"Eb major augmented\",\n      \"F lydian diminished\",\n      \"G phrygian dominant\",\n      \"Ab lydian #9\",\n      \"B ultralocrian\",\n    ],\n    secondaryDominants: [\"\", \"\", \"\", \"C7\", \"D7\", \"Eb7\", \"\"],\n    secondaryDominantSupertonics: [\"\", \"\", \"\", \"Gm7\", \"Am7b5\", \"Bbm7b5\", \"\"],\n    substituteDominants: [\"\", \"\", \"\", \"Gb7\", \"Ab7\", \"Bbb7\", \"\"],\n    substituteDominantSupertonics: [\"\", \"\", \"\", \"Dbm7\", \"Ebm7b5\", \"Fbm7b5\", \"\"],\n    secondaryDominantsMinorRelative: [\"\", \"\", \"\", \"Gm7\", \"Am7b5\", \"Bbm7b5\", \"\"],\n    substituteDominantsMinorRelative: [\n      \"\",\n      \"\",\n      \"\",\n      \"Dbm7\",\n      \"Ebm7b5\",\n      \"Fbm7b5\",\n      \"\",\n    ],\n  },\n  melodic: {\n    tonic: \"C\",\n    grades: [\"I\", \"II\", \"bIII\", \"IV\", \"V\", \"VI\", \"VII\"],\n    intervals: [\"1P\", \"2M\", \"3m\", \"4P\", \"5P\", \"6M\", \"7M\"],\n    scale: [\"C\", \"D\", \"Eb\", \"F\", \"G\", \"A\", \"B\"],\n    triads: [\"Cm\", \"Dm\", \"Ebaug\", \"F\", \"G\", \"Adim\", \"Bdim\"],\n    chords: [\"Cm6\", \"Dm7\", \"Eb+maj7\", \"F7\", \"G7\", \"Am7b5\", \"Bm7b5\"],\n    chordsHarmonicFunction: [\"T\", \"SD\", \"T\", \"SD\", \"D\", \"\", \"\"],\n    chordScales: [\n      \"C melodic minor\",\n      \"D dorian b2\",\n      \"Eb lydian augmented\",\n      \"F lydian dominant\",\n      \"G mixolydian b6\",\n      \"A locrian #2\",\n      \"B altered\",\n    ],\n    secondaryDominants: [\"\", \"A7\", \"\", \"C7\", \"D7\", \"\", \"\"],\n    secondaryDominantSupertonics: [\"\", \"Em7\", \"\", \"Gm7b5\", \"Am7b5\", \"\", \"\"],\n    substituteDominants: [\"\", \"Eb7\", \"\", \"Gb7\", \"Ab7\", \"\", \"\"],\n    substituteDominantSupertonics: [\"\", \"Bbm7\", \"\", \"Dbm7b5\", \"Ebm7b5\", \"\", \"\"],\n    secondaryDominantsMinorRelative: [\"\", \"Em7\", \"\", \"Gm7b5\", \"Am7b5\", \"\", \"\"],\n    substituteDominantsMinorRelative: [\n      \"\",\n      \"Bbm7\",\n      \"\",\n      \"Dbm7b5\",\n      \"Ebm7b5\",\n      \"\",\n      \"\",\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing detect Function Directly with ES6 in JavaScript\nDESCRIPTION: Illustrates importing the `detect` function specifically from the `@tonaljs/chord-detect` package using ES6 `import`. This is useful when only the chord detection functionality is needed, potentially reducing bundle size.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-detect/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { detect } from \"@tonaljs/chord-detect\";\n```\n\n----------------------------------------\n\nTITLE: Individual Tonal.js Module Installation\nDESCRIPTION: This snippet demonstrates how to install individual modules from the tonal library.  This can reduce bundle sizes by allowing you to import only the required functions rather than the entire library.  The example shows installation for the note module.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tonaljs/note\n```\n\n----------------------------------------\n\nTITLE: Using Tonal.js Library - Browser\nDESCRIPTION: This code snippet demonstrates how to use the tonal library directly in a browser environment by including the minified version from a CDN. This method makes the Tonal library available globally.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/tonal/browser/tonal.min.js\"></script>\n<script>\n  console.log(Tonal.Key.minorKey(\"Ab\"));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rotating Rhythm Patterns with Tonal.js (TypeScript)\nDESCRIPTION: Illustrates rotating a given rhythm `pattern` (array of 1s and 0s) to the right by a specified number of `rotations` using `RhythmPattern.rotate`. Requires the `RhythmPattern` object from Tonal.js. Returns the rotated pattern array.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/patterns.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nRhythmPattern.rotate([1, 0, 0, 1], 2); // => [0, 1, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Getting Voicing - Example\nDESCRIPTION: This example demonstrates the usage of the `Voicing.get` function. It shows how to obtain a voicing for Dm7, and also how the optional parameters, like range, dictionary, and the last voicing, affect the output. The example shows how voice leading is used to choose the next voicing.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nVoicing.get(\"Dm7\");\n/* ['F3', 'A3', 'C4', 'E4']); */\nVoicing.get(\"Dm7\", [\"F3\", \"A4\"], lefthand, topNoteDiff);\n/* ['F3', 'A3', 'C4', 'E4']; */\nconst last = [\"C4\", \"E4\", \"G4\", \"B4\"];\nVoicing.get(\"Dm7\", [\"F3\", \"A4\"], lefthand, topNoteDiff, last);\n/* ['C4', 'E4', 'F4', 'A4']; */ // => A4 is closest to B4\n```\n\n----------------------------------------\n\nTITLE: Determining Major Tonic From Key Signature Using `majorTonicFromKeySignature` in JavaScript\nDESCRIPTION: Provides a method to find the major tonic note given a key signature string representing accidentals ('b' or '#'). The example shows retrieving 'Eb' as the tonic for the key signature 'bbb'. Requires Tonal.js Key package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/keys.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nKey.majorTonicFromKeySignature(\"bbb\"); // => Eb\n```\n\n----------------------------------------\n\nTITLE: Find Nearest Midi Note in Pcset (pcsetNearest) in Tonal.js\nDESCRIPTION: This snippet shows the usage of `Midi.pcsetNearest`, which returns a function that finds the nearest MIDI note within a pitch class set. It is used to constrain notes to a scale, for example.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/midi.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst nearest = Midi.pcsetNearest(Scale.get(\"D dorian\").chroma);\n[60, 61, 62, 63, 64, 65, 66].map(nearest); // => [60, 62, 62, 63, 65, 65, 67]\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance between ABC Notes in JavaScript\nDESCRIPTION: Calculates the interval distance between two notes in ABC notation using the `distance` function. The function accepts two notes in ABC notation as strings and returns the interval distance between them as a string.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/abc-notation/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nAbcNotation.distance(\"=C\", \"g\"); // => \"12P\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Exact Scale Match Tonaljs Scale\nDESCRIPTION: Uses the `Scale.detect()` function with notes and an options object setting `match` to \"exact\", returning only scales that precisely match the provided notes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nScale.detect([\"D\", \"E\", \"F#\", \"A\", \"B\"], { match: \"exact\" });\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Scale Notes Tonal.js JavaScript\nDESCRIPTION: Another example of `Scale.scaleNotes()`. It demonstrates that the function automatically removes duplicate note names, regardless of octave or capitalization, returning only the unique pitch classes present in the input array.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Remove duplicates\nScale.scaleNotes([\"C4\", \"c3\", \"C5\", \"C4\", \"c4\"]); // => [\"C\"]\n```\n\n----------------------------------------\n\nTITLE: Detecting Exact Match Scales Tonal.js JavaScript\nDESCRIPTION: Uses the `match: \"exact\"` option in `Scale.detect()` to find only the scale(s) that contain *exactly* the same notes as the input array. It defaults to the first note as the potential tonic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nScale.detect([\"D\", \"E\", \"F#\", \"A\", \"B\"], { match: \"exact\" });\n// => [\"D major pentatonic\"]\n```\n\n----------------------------------------\n\nTITLE: Convert Midi Number to Note Name (midiToNoteName) in Tonal.js\nDESCRIPTION: This snippet demonstrates how to convert a MIDI number to its corresponding note name using the `Midi.midiToNoteName` function. It includes optional parameters to specify whether to use sharps and if the output should be the pitch class only. If the midi number has decimals, it will be rounded to the nearest note name.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/midi.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMidi.midiToNoteName(61); // => \"Db4\"\nMidi.midiToNoteName(61, { pitchClass: true }); // => \"Db\"\nMidi.midiToNoteName(61, { sharps: true }); // => \"C#4\"\nMidi.midiToNoteName(61, { pitchClass: true, sharps: true }); // => \"C#\"\n// it rounds to nearest note\nmidiToNoteName(61.7); // => \"D4\"\n```\n\n----------------------------------------\n\nTITLE: Requiring RomanNumeral module (Node.js)\nDESCRIPTION: Demonstrates how to require the `RomanNumeral` object from the \"tonal\" package using Node.js/CommonJS syntax. This is required to use the RomanNumeral functions in a Node.js environment. No specific dependencies beyond the package itself. Input: None. Output: Makes the `RomanNumeral` object available.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/roman-numeral/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { RomanNumeral } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Example Output of Scale.detect Tonaljs Scale\nDESCRIPTION: Shows an example output array returned by `Scale.detect()` when given the notes of a C Major scale, listing potential scale matches.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// => [\"C major\", \"C bebop\", \"C bebop major\",\n//     \"C ichikosucho\",  \"C chromatic\"];\n```\n\n----------------------------------------\n\nTITLE: Creating Rhythm Patterns from Onset Intervals with Tonal.js (JavaScript)\nDESCRIPTION: Demonstrates using `RhythmPattern.onsets` to construct a rhythm pattern based on the specified intervals (onsets) between consecutive beats. Requires the `RhythmPattern` object from Tonal.js. Takes a variable number of onset integers as arguments and returns the resulting pattern as an array of 1s and 0s.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/patterns.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nRhythmPattern.onsets(1, 2, 2, 1); // => [1, 0, 1, 0, 0, 1, 0, 0, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Default range and dictionary fallback in Voicing.search\nDESCRIPTION: Performs a chord voicing search with default settings if range and dictionary parameters are omitted, returning the most common voicings for the chord. No dependencies are required besides the Voicing class; input is just the chord symbol; output is an array of voicing arrays.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/voicings.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nVoicing.search(\"C^7\");\n```\n\n----------------------------------------\n\nTITLE: Importing Chord Module (Node.js)\nDESCRIPTION: Demonstrates how to import the Chord module using Node.js's `require` syntax.  This is necessary for projects using CommonJS modules.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Chord } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Tonal.js Example Usage\nDESCRIPTION: This is a code example showcasing some of the basic functions of the tonal library. It covers the use of the `Note`, `Interval`, and `Scale` modules. It shows how to use functions for note manipulation, interval calculations, and scale generation.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Interval, Note, Scale } from \"tonal\";\n\nNote.midi(\"A4\"); // => 60\nNote.freq(\"a4\").freq; // => 440\nNote.accidentals(\"c#2\"); // => '#'\nNote.transpose(\"C4\", \"5P\"); // => \"G4\"\nInterval.semitones(\"5P\"); // => 7\nInterval.distance(\"C4\", \"G4\"); // => \"5P\"\nScale.get(\"C major\").notes; // =>[\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n```\n\n----------------------------------------\n\nTITLE: Sorting and Normalizing Notes with Pcset.notes in JavaScript\nDESCRIPTION: Demonstrates use of Pcset.notes to return sorted, normalized pitch class note names from a collection or a chroma string. Accepts various representations and always returns a sorted array of notes, removing octaves or duplicates. Useful for normalizing user input or datasets of notes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pcset/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nPcset.notes([\"D3\", \"A3\", \"Bb3\", \"C4\", \"D4\", \"E4\", \"F4\", \"G4\", \"A4\"]); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"Bb\"]\nPcset.notes(\"101011010110\"); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"Bb\"]\n```\n\n----------------------------------------\n\nTITLE: Fixing Note.distance Functionality\nDESCRIPTION: This snippet restores the 'Note.distance' function in the tonal library, allowing users to compute the interval distance between two notes, including notes in adjacent octaves. Dependencies involve '@tonaljs/note' or equivalent. The function takes two note names as input strings and outputs a string representing the interval, e.g., \"24M\".\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Note } from \"tonal\";\nNote.distance(\"c4\", \"e7\"); // => \"24M\"\n```\n\n----------------------------------------\n\nTITLE: Using Short Names and Aliases with DurationValue in JavaScript\nDESCRIPTION: Demonstrates equivalence of short and long form duration names including dotted variants. Also shows usage of alias methods \"value\" and \"fraction\" which directly return the numeric duration and fraction arrays respectively from a shorthand string input. This simplifies obtaining key duration data without needing the full object.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/duration.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nDurationValue.get(\"q\") == DurationValue.get(\"quarter\");\nDurationValue.get(\"q.\") == DurationValue.get(\"quarter.\");\nDurationValue.get(\"q..\") == DurationValue.get(\"quarter..\");\n\nDurationValue.value(\"q..\"); // => 0.4375\nDurationValue.fraction(\"q..\"); // => [ 7, 16 ]\n```\n\n----------------------------------------\n\nTITLE: Transposing a Chord\nDESCRIPTION: Example of using `Chord.transpose` to transpose a chord symbol by a specified interval.  This is useful for key changes and harmonic manipulations.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nChord.transpose(\"Eb7b9\", \"5P\"); // => \"Bb7b9\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing transition between two voicings with Voicing.analyzeTransition (TypeScript)\nDESCRIPTION: Calculates the difference in top and bottom notes and the movement metric between two voicings, aiding in voice leading assessment. Inputs are two note arrays; output is an object with differences and movement measure.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/voicings.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nVoicing.analyzeTransition([\"C4\", \"E4\", \"G4\", \"B4\"], [\"D4\", \"F4\", \"A4\", \"C5\"]);\n```\n\n----------------------------------------\n\nTITLE: Converting Frequency to Sharp Note Name (Rounded)\nDESCRIPTION: This snippet shows the use of `Note.fromFreqSharps()` to convert frequencies to sharp note names. It provides a way to get note names with sharps instead of flats when rounding frequencies.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n[440, 550, 660].map(t.Note.fromFreqSharps); // => [ 'A4', 'C#5', 'E5' ]\n```\n\n----------------------------------------\n\nTITLE: Simplifying Note Names\nDESCRIPTION: This snippet utilizes `Note.simplify()` to reduce the number of accidentals in a note name. It returns the same note with fewer sharps or flats (e.g., \"C##\" becomes \"D\"). The function returns an empty string if the input is not a valid note.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nNote.simplify(\"C#\"); // => \"C#\"\nNote.simplify(\"C##\"); // => \"D\"\nNote.simplify(\"C###\"); // => \"D#\"\n```\n\n----------------------------------------\n\nTITLE: Scale.degrees Usage Example\nDESCRIPTION: This code shows how to use the `Scale.degrees` function, which takes a scale name and returns a function that maps degree numbers to note names within the scale. This allows extracting notes at specific degrees of a given scale.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[1, 2, 3].map(Scale.degrees(\"C major\")) // => [\"C\", \"D\", \"E\"]\n```\n\n----------------------------------------\n\nTITLE: Chord.get Behavior Change Regarding Numeric Components in Single String Parameter - JavaScript\nDESCRIPTION: Highlights a breaking change where Chord.get no longer parses numeric parts of a single string argument as tonic octave, but only as chord type components. An example contrasts the old behavior recognizing 'C4maj7' as a chord, with the new behavior returning empty for unsupported chord types with embedded numbers. Using an array of string components is demonstrated as a workaround to preserve previous behavior.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.get(\"C4maj7\"); // => { symbol: 'Cmaj7', tonic: 'C4' ... }\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.get(\"C4maj7\"); // => { empty: true }\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.get([\"C4\", \"maj7\"]); // => { symbol: 'Cmaj7', tonic: 'C4' ... }\n```\n\n----------------------------------------\n\nTITLE: Importing and listing available modes in Tonal.js\nDESCRIPTION: Shows how to import the Mode module from Tonal.js and retrieve a list of all available mode names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/modes.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Mode } from \"tonal\";\nMode.names(); // => [\"ionian\", \"dorian\", \"phrygian\", \"lydian\", \"mixolydian\", \"aeolian\", \"locrian\"];\n```\n\n----------------------------------------\n\nTITLE: Adding a new custom chord type to tonal.js ChordType dictionary\nDESCRIPTION: This snippet illustrates adding a new chord type called 'mayor' with specific intervals and aliases using the add method. It then demonstrates retrieving the added chord type by name, confirming the addition, which enhances the dictionary's extensibility for custom chords.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/dictionaries/chord-types.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nChordType.add([\"1P\", \"3M\", \"5P\"], [\"M\", \"may\"], \"mayor\");\nChordType.get(\"mayor\"); // => { name: 'mayor', quality: \"Major\", chroma: ... }\nChordType.get(\"may\"); // => { name: 'mayor', quality: \"Major\", chroma: ... }\n```\n\n----------------------------------------\n\nTITLE: Using Voicing Dictionary - Example\nDESCRIPTION: This snippet demonstrates the usage of an existing dictionary from the `@tonaljs/voicing-dictionary` package. It shows how to pass a dictionary as a parameter to `Voicing.search` to generate the chord voicings with a different style.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VoicingDictionary } from \"@tonaljs/voicing-dictionary\";\nVoicing.search(\"C^7\", [\"E3\", \"D5\"], VoicingDictionary.lefthand);\n/* => [\n  ['E3', 'G3', 'B3', 'D4'],\n  ['E4', 'G4', 'B4', 'D5'],\n  ['B3', 'D4', 'E4', 'G4'],\n] */\n```\n\n----------------------------------------\n\nTITLE: Generating Pitch Class Set from MIDI Notes or Chroma String\nDESCRIPTION: Provides `pcset` to derive a sorted array of pitch classes (0-11) from an array of MIDI notes or a chroma string representing set bits. It helps identify the unique pitch classes contained within a set of notes or chromatic pattern. Examples demonstrate converting MIDI arrays and binary strings.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/midi/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nMidi.pcset([62, 63, 60, 65, 70, 72]); // => [0, 2, 3, 5, 10]\nMidi.pcset(\"100100100101\"); // => [0, 3, 6, 9, 11]\n```\n\n----------------------------------------\n\nTITLE: Handle Invalid Interval Names in interval()\nDESCRIPTION: This code snippet shows the behavior of the `interval()` function when provided an invalid interval name, returning an object indicating an empty result. This showcases how to handle potentially invalid input.  The input is a string and the output is an object. No dependencies are needed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ninterval(\"hello\"); // => { empty: true, name: \"\" }\n```\n\n----------------------------------------\n\nTITLE: Adding custom chords and detecting with 'ChordType.add' and 'Chord.detect'\nDESCRIPTION: This example shows how to extend the chord dictionary with 'ChordType.add', allowing recognition of custom chords like '5maj7'. It then demonstrates detecting a chord from note data, illustrating customization capabilities.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Chord, ChordType } from \"tonal\";\n\nChordType.add([\"1P\", \"5P\", \"7M\"], [\"5maj7\", \"5add7\"]);\nChord.detect([\"C3\", \"G3\", \"B3\"]); // => [\"C5maj7\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Probability-based Rhythm Patterns\nDESCRIPTION: Example of using the probability function to generate rhythm patterns based on an array of probability thresholds. Each position has a different probability of becoming a beat.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/rhythm-pattern/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nprobability([0.6, 0, 0.2, 0.5]); // => [0, 0, 0, 1]\n```\n\n----------------------------------------\n\nTITLE: Retrieving chord notes and scales with tonaljs Chord module\nDESCRIPTION: This snippet imports the Chord object from tonaljs and demonstrates usage of 'Chord.get' to retrieve chord properties, including notes and associated scales via 'Chord.chordScales'. It highlights how to access chord notes for 'Cmaj7' and scales relevant to 'C7b9'.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Chord } from \"tonal\";\n\nChord.get(\"Cmaj7\").notes; // => [\"C\", \"E\", \"E\", \"G\"]\nChord.chordScales(\"C7b9\"); // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\n```\n\n----------------------------------------\n\nTITLE: Finding Enharmonic Equivalents in JavaScript with Tonal.js\nDESCRIPTION: Examples of finding enharmonic equivalents of notes using Note.enharmonic, with options to enforce specific pitch classes and handle octave changes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/notes.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nNote.enharmonic(\"C#\"); // => \"Db\"\nNote.enharmonic(\"C##\"); // => \"D\"\nNote.enharmonic(\"C###\"); // => \"Eb\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nNote.enharmonic(\"F2\", \"E#\"); // => \"E#2\"\nNote.enharmonic(\"B2\", \"Cb\"); // => \"Cb3\"\nNote.enharmonic(\"C2\", \"B#\"); // => \"B#1\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nNote.enharmonic(\"F2\", \"Eb\"); // => \"\"\n```\n\n----------------------------------------\n\nTITLE: Getting Minor Tonic from Key Signature (JavaScript)\nDESCRIPTION: Shows how to derive the minor tonic from a key signature. This is achieved by first using `Key.majorTonicFromKeySignature` to find the major key's tonic, then using `Key.majorKey` to get the major key object, and finally accessing its `relativeMinor` property. Requires the \"tonal\" package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/key/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nKey.majorKey(Key.majorTonicFromKeySignature(\"###\")).relativeMinor; // => \"F#\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving all triad chord names using ChordType.all in tonal.js\nDESCRIPTION: This snippet filters all chord types to select those with a length of 3 (triads) and maps their names into an array. It showcases how to iterate over the complete list of chord types, extract specific categories, and obtain user-friendly chord name lists.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/dictionaries/chord-types.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nChordType.all()\n  .filter((get) => get.length === 3)\n  .map((get) => get.name);\n```\n\n----------------------------------------\n\nTITLE: Partial Function Application Example\nDESCRIPTION: This snippet shows an example of partial function application using `isSubsetOf` in Tonal.js v3 and v4. It demonstrates that partial application is obligatory in this case.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/migration-guide.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nisSubsetOf(set1)(set2); // => true\n```\n\n----------------------------------------\n\nTITLE: Getting Chord Degrees\nDESCRIPTION: Demonstrates using `Chord.degrees` to create a function that returns a note name from a chord degree, given the chord type and tonic. This function allows generating notes based on degree within a chord.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst c4m7 = Chord.degrees(\"m7\", \"C4\");\nc4m7(1); // => \"C4\"\nc4m7(2); // => \"Eb4\"\nc4m7(3); // => \"G4\"\nc4m7(4); // => \"Bb4\"\nc4m7(1); // => \"C5\"\n```\n\n----------------------------------------\n\nTITLE: Finding Nearest MIDI Note in Pitch Class Set\nDESCRIPTION: Implements `pcsetNearest` that returns a function to find the closest MIDI note to a given pitch class set, facilitating scale or mode constraints. The example shows mapping a set of MIDI notes to their nearest pitch class set note based on a D Dorian scale chroma.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/midi/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst nearest = Midi.pcsetNearest(Scale.get(\"D dorian\").chroma);\n[60, 61, 62, 63, 64, 65, 66].map(nearest); // => [60, 62, 62, 63, 65, 65, 67]\n```\n\n----------------------------------------\n\nTITLE: Installing Individual Tonal Module (Note) in Bash\nDESCRIPTION: This command installs only the '@tonaljs/note' package, reducing the project's dependency footprint compared to installing the full 'tonal' package. Use this when you only need functions from a specific module. Requires Node.js and npm installed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/index.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tonaljs/note\n```\n\n----------------------------------------\n\nTITLE: Getting Full Scale Properties Tonal.js JavaScript\nDESCRIPTION: Retrieves a comprehensive object representing a scale by its name using `Scale.get()`. The returned object includes detailed properties such as `name`, `type`, `tonic`, `notes`, `intervals`, `aliases`, `setNum`, `chroma`, and `normalized`, providing full information about the scale.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nScale.get(\"c5 pentatonic\");\n// =>\n// {\n//   empty: false,\n//   name: \"C5 pentatonic\",\n//   type: \"major pentatonic\",\n//   tonic: \"C5\",\n//   notes: [\"C5\", \"D5\", \"E5\", \"G5\", \"A5\"],\n//   intervals: [\"1P\", \"2M\", \"3M\", \"5P\", \"6M\"],\n//   aliases: [\"pentatonic\"],\n//   setNum: 2708,\n//   chroma: \"101010010100\",\n//   normalized: \"101010010100\"\n// }\n```\n\n----------------------------------------\n\nTITLE: Importing RomanNumeral module (ES6)\nDESCRIPTION: Demonstrates how to import the `RomanNumeral` object from the \"tonal\" package using ES6 module syntax. This is required to use the RomanNumeral functions in a modern JavaScript environment. No specific dependencies beyond the package itself. Input: None. Output: Makes the `RomanNumeral` object available.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/roman-numeral/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RomanNumeral } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Search Sets - TypeScript\nDESCRIPTION: This snippet defines the `Voicing.searchSets` function. This optional utility function is designed to render all sets of notes that represent any of the interval sets within a specific range, relative to the root note. This function provides flexibility by allowing chord voicings to be determined using interval sets.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function searchSets(\n  intervalSets: string[][],\n  range: string[],\n  root: string\n);\n```\n\n----------------------------------------\n\nTITLE: Inverting Intervals with Interval.invert (JavaScript)\nDESCRIPTION: Explains how to call 'Interval.invert' to obtain the interval inversion in Tonal.js. Accepts an interval string and returns the inverted interval, handling both major and minor as well as directionality. The 'tonal' library must be installed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/intervals.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nInterval.invert(\"3m\"); // => \"6M\"\nInterval.invert(\"2M\"); // => \"7m\"\n```\n\n----------------------------------------\n\nTITLE: Interval Sets - Example\nDESCRIPTION: This example shows how to use `Voicing.intervalSets` to get possible interval sets for given chord, illustrating that the functionality works, even if the chord symbol is an alias from the dictionary, the function gets the proper sets of intervals.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(Voicing.intervalSets(\"M7\", lefthand)).toEqual([\n  [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n]);\n// could also be used with chord symbol (ignore root)\nexpect(Voicing.intervalSets(\"CM7\", lefthand)).toEqual([\n  [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n]);\n```\n\n----------------------------------------\n\nTITLE: Detecting Exact Scale Match with Tonic Tonaljs Scale\nDESCRIPTION: Uses the `Scale.detect()` function with notes, setting `match` to \"exact\" and also specifying a tonic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nScale.detect([\"D\", \"E\", \"F#\", \"A\", \"B\"], { match: \"exact\", tonic: \"B\" });\n```\n\n----------------------------------------\n\nTITLE: Finding Scale Names by Interval Count (JavaScript)\nDESCRIPTION: Shows how to retrieve all scale types using `ScaleType.all()`, then filter the list to include only scales with a specific number of intervals (e.g., 5 for pentatonics), and finally map the results to extract only the scale names. This utilizes standard JavaScript array methods.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale-type/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nScaleType.all()\n  .filter((scaleType) => scaleType.intervals.length === 5)\n  .map((scaleType) => scaleType.name);\n```\n\n----------------------------------------\n\nTITLE: Removing Octaves from Note Names\nDESCRIPTION: This snippet illustrates a common use case:  removing the octaves from a list of note names. It combines `Note.names()` (to extract valid note names) and `.map(Note.pitchClass)` to obtain only the pitch class of each note name.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nNote.names([\"C2\", \"C#3\", \"Db4\", 12, \"nothing\", {}, null]).map(Note.pitchClass); // => ['C', 'C#', 'Db']\n```\n\n----------------------------------------\n\nTITLE: Interval Sets - TypeScript\nDESCRIPTION: This snippet defines the `Voicing.intervalSets` function. This optional function returns the possible interval sets for a given chord based on the provided dictionary. It allows analysis of chord structures defined.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function intervalSets(\n  chordSymbol: string,\n  dictionary: VoicingDictionary\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Tonal.js Module (Recommended)\nDESCRIPTION: This JavaScript snippet shows the currently recommended way to import Tonal.js modules. It uses a namespace import ('import * as') to bring in all exports from the '@tonaljs/note' module under the 'Note' namespace, replacing the deprecated default export method.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/progression/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Importing Voicing Module - ES6\nDESCRIPTION: This snippet demonstrates how to import the `Voicing` module using ES6 syntax. It makes the `Voicing` module available for use in the current JavaScript file by importing it from the `tonal` library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Voicing } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Extending a Chord\nDESCRIPTION: Demonstrates using `Chord.extended` to find all chord names that are a superset of the given chord (containing all the same notes and at least one more).\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nChord.extended(\"Cmaj7\");\n// => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\n```\n\n----------------------------------------\n\nTITLE: Using Midi.pcset functions\nDESCRIPTION: This JavaScript snippet demonstrates functions for converting between MIDI numbers and pitch class sets. Functions include `Midi.pcset`, `Midi.pcsetSteps`, `Midi.pcsetDegrees`, and `Midi.pcsetNearest`.  These functions require the `tonal` library and are used to work with MIDI note representations and musical scales.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CHANGELOG.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nMidi.pcset([62, 63, 60, 65, 70, 72]); // => [0, 2, 3, 5, 10]\nMidi.pcset(\"100100100101\"); // => [0, 3, 6, 9, 11]\n\nconst steps = Midi.pcsetSteps(Scale.get(\"D dorian\").chroma, 60);\n[-2, -1, 0, 1, 2, 3].map(steps); // => [ 57, 58, 60, 62, 63, 65 ]\n\nconst steps = Midi.pcsetDegrees(Scale.get(\"D dorian\").chroma, 60);\n[-2, -1, 1, 2, 3, 4].map(steps); // => [ 57, 58, 60, 62, 63, 65 ]\n\nconst nearest = Midi.pcsetNearest(Scale.get(\"D dorian\").chroma);\n[60, 61, 62, 63, 64, 65, 66].map(nearest); // => [60, 62, 62, 63, 65, 65, 67]\n```\n\n----------------------------------------\n\nTITLE: Creating Rhythm Patterns from Onsets\nDESCRIPTION: Example of using the onsets function to create rhythm patterns by specifying the duration of each onset. Each number represents a beat followed by a number of rests.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/rhythm-pattern/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nonsets(1, 2, 2, 1); // => [1, 0, 1, 0, 0, 1, 0, 0, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scale Type Information\nDESCRIPTION: Example of using ScaleType.get() to retrieve detailed information about a scale, including its name, aliases, quality, and intervals.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/dictionaries/scale-types.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nScaleType.get(\"major\"); // =>\n// {\n// name: \"major\",\n// aliases: [\"ionian\"],\n// num: 2773,\n// chroma: \"101011010101\",\n// length: 7\n// intervals: [\"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\"],\n// });\n```\n\n----------------------------------------\n\nTITLE: Creating Binary Rhythm Patterns\nDESCRIPTION: Example of using the binary function to create rhythm patterns from numbers in binary form. Numbers are converted to binary representation and then to arrays of 0s and 1s.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/rhythm-pattern/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbinary(13); // => [1, 1, 0, 1]\nbinary(12, 13); // => [1, 1, 0, 0, 1, 1, 0, 1]\n```\n\n----------------------------------------\n\nTITLE: Subtracting Intervals with Interval.subtract (JavaScript)\nDESCRIPTION: Demonstrates the 'Interval.subtract' method in Tonal.js, allowing one interval to be subtracted from another. Accepts two interval strings and returns the resulting interval string, supporting both positive and negative results. Requires the 'tonal' library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/intervals.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nsubtract(\"5P\", \"3M\"); // => '3m'\nsubtract(\"3M\", \"5P\"); // => '-3m'\n```\n\n----------------------------------------\n\nTITLE: Using Scale Degree Function 2nd Degree Tonaljs Scale\nDESCRIPTION: Demonstrates using the function returned by `Scale.degrees(\"C4 major\")` to get the 2nd degree note.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nc4major(2); // => \"D4\"\n```\n\n----------------------------------------\n\nTITLE: Importing TimeSignature (ES6 Tonal)\nDESCRIPTION: Imports the TimeSignature object from the main 'tonal' package using standard ES6 import syntax. This is typically used when the Tonal.js library is installed as a single package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/time-signature/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TimeSignature } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Getting all triad chord names\nDESCRIPTION: Shows how to filter the chord dictionary to find all triads (chords with exactly 3 notes) and extract their names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-type/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nChordType.all()\n  .filter((get) => get.length === 3)\n  .map((get) => get.name);\n```\n\n----------------------------------------\n\nTITLE: Requiring Chord Module with ES5 in JavaScript\nDESCRIPTION: Shows how to import the `Chord` object from the `tonal` package using the CommonJS `require` function, suitable for Node.js or older JavaScript environments.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-detect/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Chord } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Transposing Notes by Fifths in JavaScript with Tonal.js\nDESCRIPTION: Examples of transposing notes by a given number of fifths using Note.transposeFifths, useful for moving around the circle of fifths.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/notes.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nNote.transposeFifths(\"G4\", 3); // => \"E6\"\nNote.transposeFifths(\"G\", 3); // => \"E\"\n\n[0, 1, 2, 3, 4, 5, 6].map((n) => transposeFifths(\"F#\", n));\n// => [\"F#\", \"C#\", \"G#\", \"D#\", \"A#\", \"E#\", \"B#\"]\n[0, -1, -2, -3, -4, -5, -6].map((n) => transposeFifths(\"Bb\", n));\n// => [\"Bb\", \"Eb\", \"Ab\", \"Db\", \"Gb\", \"Cb\", \"Fb\"]\n```\n\n----------------------------------------\n\nTITLE: Detecting Scales with Specified Tonic Tonal.js JavaScript\nDESCRIPTION: Demonstrates using the `tonic` option with `Scale.detect()`. This filters the results to only include scales that fit the input notes and have the specified note as their tonic. The input notes should be pitch classes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nScale.detect([\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"], { tonic: \"A\" });\n// => [ 'A aeolian', 'A minor bebop', 'A chromatic' ]\n```\n\n----------------------------------------\n\nTITLE: Adding Scale Type with Intervals and Aliases (JavaScript)\nDESCRIPTION: Demonstrates adding a new scale type definition to the dictionary using `ScaleType.add`. It requires an array of intervals and can optionally accept a primary name and a list of aliases.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale-type/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nScaleType.add([\"1P\", \"5P\"], null, [\"5\"]);\n```\n\n----------------------------------------\n\nTITLE: Using Scale Degree Function Negative Degree Example 2 Tonaljs Scale\nDESCRIPTION: Demonstrates using the function returned by `Scale.degrees(\"C4 major\")` with a negative degree (-3) to get a note further below the tonic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nc4major(-3); // => \"A3\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Tonal.js Repository and Installing Dependencies\nDESCRIPTION: This snippet provides instructions for downloading the Tonal.js repository using Git, installing the required Node.js dependencies using npm, and building the project. It's the first step in setting up the development environment.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tonaljs/tonal\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Generating Random Rhythm Patterns with Tonal.js (JavaScript)\nDESCRIPTION: Illustrates the use of `RhythmPattern.random` to create a random rhythm pattern of a specified length. Requires the `RhythmPattern` object. Key parameters include `length` (required), `probability` (optional threshold for a beat, default 0.5), and `rnd` (optional custom random function, default `Math.random`). Returns an array of 1s and 0s.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/patterns.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nRhythmPattern.random(4); // => [1, 0, 0, 1]\n```\n\n----------------------------------------\n\nTITLE: Get Pcset properties from chroma or set number\nDESCRIPTION: Demonstrates obtaining Pcset properties from either the chroma representation or the set number, showcasing that different representations can yield the same object.  Pcset.get() handles both chroma string and set number inputs.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/pitch-class-sets.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPcset.get([\"c\", \"d\", \"e\"]);\nPcset.get(2688);\nPcset.get(\"101010000000\");\n```\n\n----------------------------------------\n\nTITLE: Example Output of Scale.steps with Range Tonaljs Scale\nDESCRIPTION: Shows the example output array returned by mapping a range of numbers using the function returned by `Scale.steps(\"C4 major\")`.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// => [\"G3\", \"A3\", \"B3\", \"C4\", \"D4\", \"E4\", \"F4\"]\n```\n\n----------------------------------------\n\nTITLE: Getting a duration value object by name\nDESCRIPTION: Demonstrates how to retrieve a duration value object using the `DurationValue.get(name)` method. The `name` parameter accepts a string representing the duration name (e.g., 'quarter') or shorthand (e.g., 'q'), optionally with dots to indicate augmentation.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/duration-value/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nDurationValue.get(\"quarter\"); // =>\n// {\n//   empty: false,\n//   name: 'q',\n//   value: 0.25,\n//   fraction: [ 1, 4 ],\n//   shorthand: 'q',\n//   dots: '',\n//   names: [ 'quarter', 'crotchet' ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Importing Mode (CommonJS) - Tonal.js JavaScript\nDESCRIPTION: Imports the `Mode` object from the Tonal.js library using the CommonJS `require` syntax, commonly used in Node.js environments.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/mode/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Mode } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Importing Tonal Core Functions\nDESCRIPTION: This JavaScript snippet illustrates the import of specific functions from the `@tonaljs/core` module. It demonstrates the structure of the library version 3, where core functions are exported directly from the core module.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/migration-guide.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { note, interval, transpose, distance } from \"@tonaljs/core\";\n```\n\n----------------------------------------\n\nTITLE: Getting Time Signature Details (Array)\nDESCRIPTION: Calls the static `get()` method with an array representation of a time signature. Arrays can contain numbers `[upper, lower]`, strings `[\"upper\", \"lower\"]`, or a combination for additive signatures `[\"additive_string\", \"lower\"]`. The function parses the array and returns a detailed object.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/time-signature/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nTimeSignature.get([3, 4]);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nTimeSignature.get([\"3\", \"4\"]);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nTimeSignature.get([\"3+2+3\", \"8\"]);\n```\n\n----------------------------------------\n\nTITLE: Normalizing and Sorting Scale Notes Tonaljs Scale\nDESCRIPTION: Uses `Scale.scaleNotes()` with an array of notes containing varying octaves and cases. It returns a sorted array of unique note names (pitch classes) starting with the first input note's pitch class.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Always start with the first note of the input array\nScale.scaleNotes([\"D4\", \"c#5\", \"A5\", \"F#6\"]); // => [\"D\", \"F#\", \"A\", \"C#\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Euclidean Rhythm Patterns\nDESCRIPTION: Example of using the euclid function to create rhythmic patterns based on the Euclidean algorithm, which evenly distributes beats across steps. Commonly used for generating traditional musical rhythms.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/rhythm-pattern/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\neuclid(8, 3); // => [1, 0, 0, 1, 0, 0, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Equating Pitch Class Representation for Keys in JavaScript\nDESCRIPTION: Demonstrates that tonic input with octave notation (e.g., 'C4') and without octave (e.g., 'C') yield the same scale result in the Key module, emphasizing that pitch classes are considered without octave information.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/keys.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nKey.major(\"C4\"); // is equal to\nKey.major(\"C\");\n```\n\n----------------------------------------\n\nTITLE: Using Scale Degree Function 8th Degree Tonaljs Scale\nDESCRIPTION: Demonstrates using the function returned by `Scale.degrees(\"C4 major\")` to get the 8th degree note, showing it correctly moves up an octave.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nc4major(8); // => \"C5\"\n```\n\n----------------------------------------\n\nTITLE: Requiring Tonal Modules (ES5) - JavaScript\nDESCRIPTION: Shows how to require specific modules (Note, Scale) from the 'tonal' library using ES5 'require' syntax. This method is typically used in older Node.js environments or bundlers configured for CommonJS modules. Requires a CommonJS environment.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Note, Scale } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Using RhythmPattern Functions in Typescript\nDESCRIPTION: Demonstrates the use of `RhythmPattern` functions in TypeScript to generate various rhythm patterns (Euclidean, binary, hex, onsets, random, probability, rotate). It leverages the `tonal` library and its `RhythmPattern` module.  This snippet shows several examples of different rhythm pattern generation methods and their results.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CHANGELOG.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { RhythmPattern } from \"tonal\";\n\nRhythmPattern.euclid(8, 3); // => [1, 0, 0, 1, 0, 0, 1, 0]\nRhythmPattern.binary(12, 13); // => [1, 1, 0, 0, 1, 1, 0, 1]\nRhythmPattern.hex(\"8f\"); // => [1, 0, 0, 0, 1, 1, 1, 1]\nRhythmPattern.onsets(1, 2, 2, 1); // => [1, 0, 1, 0, 0, 1, 0, 0, 1, 0]\nRhythmPattern.random(4); // => [1, 0, 0, 1]\nRhythmPattern.probability([0.6, 0, 0.2, 0.5]); // => [0, 0, 0, 1]\nRhythmPattern.rotate([1, 0, 0, 1], 2); // => [0, 1, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Using Tonal Library in Browser - HTML & JavaScript\nDESCRIPTION: Demonstrates including the tonal library in a browser via a CDN script tag and accessing its functionality through the global 'Tonal' object. Suitable for web pages without a build process. Requires an internet connection to load the script.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/tonal/browser/tonal.min.js\"></script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(Tonal.Key.minorKey(\"Ab\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving interval sets for a chord in a dictionary with Voicing.intervalSets (TypeScript)\nDESCRIPTION: Fetches predefined interval sets compatible with a certain chord symbol within a specific dictionary, facilitating voicing generation. Inputs are chord symbol and dictionary; output is an array of interval set arrays.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/voicings.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nVoicing.intervalSets(\"M7\", lefthand); // or \"CM7\"\n```\n\n----------------------------------------\n\nTITLE: Adding 'rhythm-pattern' Package for Rhythm Generation\nDESCRIPTION: This snippet showcases the new 'rhythm-pattern' package in tonal, enabling generation of rhythm sequences via various algorithms like Euclidean distribution, binary, hex, and random patterns. Usage involves calling functions such as 'RhythmPattern.euclid' with pattern parameters, returning arrays of 0s and 1s representing rests and notes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RhythmPattern } from \"tonal\";\n\nRhythmPattern.euclid(8, 3); // => [1, 0, 0, 1, 0, 0, 1, 0]\nRhythmPattern.binary(12, 13); // => [1, 1, 0, 0, 1, 1, 0, 1]\nRhythmPattern.hex(\"8f\"); // => [1, 0, 0, 0, 1, 1, 1, 1]\nRhythmPattern.onsets(1, 2, 2, 1); // => [1, 0, 1, 0, 0, 1, 0, 0, 1, 0]\nRhythmPattern.random(4); // => [1, 0, 0, 1]\nRhythmPattern.probability([0.6, 0, 0.2, 0.5]); // => [0, 0, 0, 1]\nRhythmPattern.rotate([1, 0, 0, 1], 2); // => [0, 1, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Creating Rhythm Patterns from Binary Numbers with Tonal.js (JavaScript)\nDESCRIPTION: Illustrates using the `RhythmPattern.binary` method to create a rhythm pattern by converting input numbers to their binary representations and concatenating the results. Requires the `RhythmPattern` object from Tonal.js. Accepts one or more numbers as arguments and returns an array of 1s and 0s.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/patterns.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRhythmPattern.binary(13); // => [1, 1, 0, 1]\nRhythmPattern.binary(12, 13); // => [1, 1, 0, 0, 1, 1, 0, 1]\n```\n\n----------------------------------------\n\nTITLE: Finding Reduced Scales Tonal.js JavaScript\nDESCRIPTION: `Scale.reduced()` takes a scale name (pitch classes only) and returns a list of other scale names. These are scales whose notes are a proper subset of the input scale's notes (contain fewer notes, but all are from the original scale).\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nScale.reduced(\"major\");\n// => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n```\n\n----------------------------------------\n\nTITLE: Scale.get Case Insensitivity Improvement\nDESCRIPTION: This snippet indicates that 'Scale.get' now ignores case sensitivity, ensuring consistent results regardless of input capitalization. It demonstrates calling 'Scale.get' with 'C Major' and 'c major' and receiving identical scale objects.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nScale.get(\"C Major\");\nScale.get(\"c major\");\n```\n\n----------------------------------------\n\nTITLE: Creating Rhythm Patterns from Hexadecimal Strings with Tonal.js (JavaScript)\nDESCRIPTION: Shows how to use `RhythmPattern.hex` to generate a rhythm pattern from a hexadecimal string input. The method converts the hex string to its binary equivalent. Requires the `RhythmPattern` object from Tonal.js. Takes a single hexadecimal string argument and returns an array of 1s and 0s.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/patterns.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nRhythmPattern.hex(\"8f\"); // => [1, 0, 0, 0, 1, 1, 1, 1]\n```\n\n----------------------------------------\n\nTITLE: Search Sets - Example\nDESCRIPTION: This example shows how to use `Voicing.searchSets`. The function searches and produces the set of notes representing interval sets inside a range, relative to a root note, providing flexibility in determining chord voicings using interval sets.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(\n  Voicing.searchSets(\n    [\n      [\"1P\", \"3M\", \"5P\"],\n      [\"3M\", \"5P\", \"8P\"],\n    ],\n    [\"C3\", \"G4\"],\n    \"C\"\n  )\n).toEqual([\n  [\"C3\", \"E3\", \"G3\"],\n  [\"E3\", \"G3\", \"C4\"],\n  [\"C4\", \"E4\", \"G4\"],\n]);\n```\n\n----------------------------------------\n\nTITLE: Getting Note Names from an Array\nDESCRIPTION: This snippet demonstrates the use of `Note.names()` to extract and normalize note names from an array of mixed input. The function takes an array of various data types and returns an array of valid note names.  Invalid or non-note values are filtered out.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nNote.names([\"fx\", \"bb\", 12, \"nothing\", {}, null]); // => [\"F##\", \"Bb\"];\n```\n\n----------------------------------------\n\nTITLE: Using Range.numeric\nDESCRIPTION: This snippet demonstrates using `Range.numeric` function to generate a numeric range. It uses the `tonal` library. The example uses negative numbers.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CHANGELOG.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nRange.numeric([-5, 5]); // => [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Defining VoicingDictionary - TypeScript\nDESCRIPTION: This TypeScript code defines a sample voicing dictionary.  It's a JavaScript object where keys are chord symbols (e.g., m7, 7, ^7) and values are arrays of chord voicings, represented as strings. The voicings are described using intervals, such as '3m', '5P', and '7m'. This dictionary provides a structured mapping between chord symbols and their corresponding voicings.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/dictionary.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst lefthand = {\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n  \"69\": [\"3M 5P 6A 9M\"],\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"],\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"],\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\n  \"7#11\": [\"7m 9M 11A 13A\"],\n  \"7#9\": [\"3M 7m 9A\"],\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Scale Notes\nDESCRIPTION: This JavaScript snippet demonstrates getting scale notes using `Scale.get`.  It uses the 'tonal' library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CHANGELOG.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nScale.get(\"C Major\");\nScale.get(\"c major\");\n```\n\n----------------------------------------\n\nTITLE: Importing AbcNotation in ES6\nDESCRIPTION: Imports the `AbcNotation` module from the `@tonaljs/abc-notation` package in an ES6 environment.  This allows access to functions for converting between scientific and abc notation.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/abc-notation/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbcNotation } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Get Pcset intervals\nDESCRIPTION: Calculates the intervals of a pitch class set, always relative to C. It ignores the original root of the input notes.  Returns an array of interval strings.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/pitch-class-sets.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPcset.intervals([\"c\", \"d\", \"e\"]); // => [\"1P\", \"5P\", \"7M\"]\nPcset.intervals([\"D\", \"F\", \"A\"]); // => [\"2M\", \"4P\", \"6M\"]\n```\n\n----------------------------------------\n\nTITLE: Get Pcset chroma\nDESCRIPTION: Retrieves the chroma representation of a pitch class set given a collection of notes or a set number. Chroma is the set number as binary string.  It demonstrates that Pcset.chroma accepts both note arrays and set numbers.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/pitch-class-sets.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\nPcset.num([\"c\", \"d\", \"e\"]); //=> 2192\n\n// several set representations are accepted\nPcset.chroma(2192); //=> \"101010000000\"\nPcset.num(\"101010000000\"); // => 2192\n```\n\n----------------------------------------\n\nTITLE: Listing All Modes - Tonal.js Mode JavaScript\nDESCRIPTION: Invokes the `Mode.all()` function to retrieve an array of objects, where each object represents a complete mode definition with all its properties (name, intervals, aliases, etc.). This provides full details for all modes at once.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/mode/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nMode.all();\n```\n\n----------------------------------------\n\nTITLE: Generating Note Range with Collection Function Tonaljs Scale\nDESCRIPTION: Demonstrates using the function returned by `Scale.rangeOf(\"C\", \"Db\", \"G\")` to generate a range of notes between 'C4' and 'C5' using only the notes 'C', 'Db', and 'G'.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nrange(\"C4\", \"C5\"); // => [\"C4\", \"Db4\", \"G4\", \"C5\"]\n```\n\n----------------------------------------\n\nTITLE: Sorting and Filtering Note Names\nDESCRIPTION: This snippet uses `Note.sortedNames()` to sort an array of note names in ascending order. The function filters out non-note values and lists pitch classes before notes. Provides a sorted, filtered list of the input note names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nNote.sortedNames([\"c2\", \"c5\", \"c1\", \"c0\", \"c6\", \"c\"]);\n// => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\nNote.sortedNames([\"c\", \"F\", \"G\", \"a\", \"b\", \"h\", \"J\"]);\n// => ['C', 'F', 'G', 'A', 'B']\n```\n\n----------------------------------------\n\nTITLE: Installing Tonal Library - Bash\nDESCRIPTION: Command to install the complete 'tonal' library package using npm. This provides access to all modules under the 'tonal' namespace for use in your project. Requires Node.js and npm installed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save tonal\n```\n\n----------------------------------------\n\nTITLE: Releasing Tonal.js using Changesets\nDESCRIPTION: This snippet illustrates the steps involved in releasing a new version of Tonal.js using Changesets. It includes creating a new branch, generating and applying changesets, updating package versions and changelogs, building the browser version, and publishing the changed packages to npm.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new branch\ngit co -b release-4.7.4\n\n# Create a changeset and update versions\n\nnpx changeset # Select packages and which version (major, minor, bump)\n# (Optional: edit changeset. The header contains the affected packages.)\nnpx changeset version # Updates version and CHANGELOG of each package\n\n# Create commit and PR\ngit add .\ngit commit -m \"chore: bump version\"\n\n# Build browser\nnpm run build\ngit add .\ngit commit -m \"chore: browser build\"\n\n# Create PR\ngit push\n\n# Publish all changed packages to npm\nnpx changeset publish\n```\n\n----------------------------------------\n\nTITLE: Migrating Tonal.js Module Imports JavaScript\nDESCRIPTION: Illustrates the change in the recommended way to import Tonal.js modules starting from version 4.9.0. The default export is deprecated, and users should transition to using `import * as Module from \"@tonaljs/module-name\"`.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/abc-notation/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Using Pcset.get with Numbers and Chroma Strings in JavaScript\nDESCRIPTION: Demonstrates the flexibility of the Pcset.get function, which accepts arrays of notes, numeric set numbers, or chroma strings as input. All these calls return an identical properties object describing the set. This is useful for converting between different pitch class set representations. Dependencies: 'tonal' library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pcset/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nPcset.get([\"c\", \"d\", \"e\"]);\nPcset.get(2688);\nPcset.get(\"101010000000\");\n```\n\n----------------------------------------\n\nTITLE: Finding reduced chords with 'Chord.reduced'\nDESCRIPTION: This example demonstrates how to identify subsets of a chord ('Cmaj7') with 'Chord.reduced', which helps in harmonic simplification or modulation analysis.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.reduced(\"Cmaj7\"); // => [\"C5\", \"CM\"]\n```\n\n----------------------------------------\n\nTITLE: Testing Note Inclusion in a Set with isNoteIncludedIn in JavaScript\nDESCRIPTION: Shows how to use the (curried) function isNoteIncludedIn to create a tester for set membership, determining if a note belongs to a given pitch class set. Handles both direct matches and enharmonic equivalents (e.g., Fb is included in a set with E). Returns a boolean. Requires 'tonal' package and proper set definition.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pcset/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst isInCTriad = isNoteIncludedIn([\"C\", \"E\", \"G\"]);\nisInCTriad(\"C4\"); // => true\nisInCTriad(\"C#4\"); // => false\n```\n\n----------------------------------------\n\nTITLE: Using 'Chord.steps' for numeric range chord notes\nDESCRIPTION: This example shows how to generate notes of a chord over a numeric range with 'Chord.steps', which starts counting at 0, making it suitable for use with numeric ranges or sequencers.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Range, Chord } from \"tonal\";\n\nRange.numeric([-3, 3]).map(Chord.steps([\"C4\", \"aug\"]));\n// => [\"G#3\", \"E3\", \"C3\", \"C4\", \"E4\", \"G#4\", \"C5\"]\n```\n\n----------------------------------------\n\nTITLE: Importing functions from @tonaljs/notation-scientific\nDESCRIPTION: Shows how to import the main functions from the package. These functions allow parsing and manipulating notes in scientific notation.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/notation-scientific/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse, name, tokenize } from \"@tonaljs/notation-scientific\";\n\nparse(\"cb4\"); // => { step: 0, oct: 4, alt: -1 }\n```\n\n----------------------------------------\n\nTITLE: Getting RomanNumeral name from Interval object\nDESCRIPTION: Illustrates using `RomanNumeral.get` with an object returned by `Interval.get`. This allows converting an interval representation to its roman numeral equivalent. It requires both `RomanNumeral` and `Interval` objects from the \"tonal\" package. Input: An object representing an interval (e.g., from `Interval.get(\"3m\")`). Output: The `name` property of the resulting RomanNumeral object, which is the roman numeral string (e.g., \"bIII\").\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/roman-numeral/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Interval, RomanNumeral } from \"tonal\";\n\nRomanNumeral.get(Interval.get(\"3m\")).name; // => \"bIII\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Pitch Class Set over a Tonic Using mcsetSteps\nDESCRIPTION: Provides `pcsetSteps` to generate a function that maps a pitch class set to MIDI notes based on a specified tonic. Useful for transposing or exploring modes, where each step corresponds to a note in the set relative to the tonic. The example maps steps to actual MIDI notes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/midi/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst steps = Midi.pcsetSteps(Scale.get(\"D dorian\").chroma, 60);\n[-2, -1, 0, 1, 2, 3].map(steps); // => [ 57, 58, 60, 62, 63, 65 ]\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with pnpm - Bash\nDESCRIPTION: This command executes the development script defined in the project's package.json using pnpm. It is typically used to start a local server for viewing documentation or developing the library itself.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Map Pitch Class Set Over Note (pcsetSteps) in Tonal.js\nDESCRIPTION: This snippet demonstrates how to use the `Midi.pcsetSteps` function. It returns a function that maps a pitch class set over any note, relative to a given tonic note. Step 0 is the first note, step 1 the second and so on.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/midi.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst steps = Midi.pcsetSteps(Scale.get(\"D dorian\").chroma, 60);\n[-2, -1, 0, 1, 2, 3].map(steps); // => [ 57, 58, 60, 62, 63, 65 ]\n```\n\n----------------------------------------\n\nTITLE: Getting all duration shorthands\nDESCRIPTION: Demonstrates how to retrieve an array of all duration value shorthands using the `DurationValue.shorthands()` method. This method returns a string array of shorthands such as 'dl', 'l', 'd', etc.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/duration-value/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nDurationValue.shorthands(); // => [\"dl\", \"l\", \"d\", \"w\", \"h\", \"q\", \"e\", \"s\", \"t\", \"sf\", \"h\", \"th\"]\n```\n\n----------------------------------------\n\nTITLE: Listing All Duration Names Using DurationValue.names Method in JavaScript\nDESCRIPTION: Shows how to retrieve an array of all available duration names that the DurationValue module recognizes. This method takes no parameters and returns an array of strings representing note durations such as \"large\", \"duplex longa\", and others, useful to enumerate durations programmatically.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/duration.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nDurationValue.names(); // => [\"large\", \"duplex longa\", ...]\n```\n\n----------------------------------------\n\nTITLE: Getting all duration names\nDESCRIPTION: Demonstrates how to retrieve an array of all duration names using the `DurationValue.names()` method. This method returns a string array of duration names such as 'large', 'duplex longa', etc.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/duration-value/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nDurationValue.names(); // => [\"large\", \"duplex longa\", ...]\n```\n\n----------------------------------------\n\nTITLE: Example Output of Scale.get Tonaljs Scale\nDESCRIPTION: Shows the structure and content of the object returned by `Scale.get(\"c5 pentatonic\")`, illustrating the properties available for a scale object.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// =>\n// {\n//   empty: false,\n//   name: \"C5 pentatonic\",\n//   type: \"major pentatonic\",\n//   tonic: \"C5\",\n//   notes: [\"C5\", \"D5\", \"E5\", \"G5\", \"A5\"],\n//   intervals: [\"1P\", \"2M\", \"3M\", \"5P\", \"6M\"],\n//   aliases: [\"pentatonic\"],\n//   setNum: 2708,\n//   chroma: \"101010010100\",\n//   normalized: \"101010010100\"\n// }\n```\n\n----------------------------------------\n\nTITLE: Default Voicing Values - Example\nDESCRIPTION: This code example shows how `Voicing.search` behaves when no range and/or dictionary is provided; it will default to values defined in the library. The output shows default voicings for a Cmaj7 chord. This highlights the flexibility of the function in handling incomplete input.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nVoicing.search(\"C^7\");\n/* => [\n  ['E3', 'G3', 'B3', 'D4'],\n  ['E4', 'G4', 'B4', 'D5'],\n  ['B3', 'D4', 'E4', 'G4'],\n] */\n```\n\n----------------------------------------\n\nTITLE: Installing Tonal Library using npm\nDESCRIPTION: The following command installs the tonal package and saves it as a project dependency. This will download and set up the necessary files so you can use the library in your project.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save tonal\n```\n\n----------------------------------------\n\nTITLE: Transposing Notes in ABC Notation with Tonaljs\nDESCRIPTION: This code snippet demonstrates how to transpose a note in ABC notation using the `transpose` function in the Tonaljs AbcNotation module. It assumes `AbcNotation` has been imported.  The function takes a note in ABC notation and an interval as input (e.g., \"=C\", \"P19\") and returns the transposed note in ABC notation (e.g., \"g'\").\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/notation/abc-notation.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAbcNotation.transpose(\"=C\", \"P19\"); // => \"g'\"\n```\n\n----------------------------------------\n\nTITLE: Including Tonal in Browser (CDN) in HTML\nDESCRIPTION: This HTML snippet shows how to include the minified browser-ready version of the 'tonal' library using a script tag pointing to a jsDelivr CDN URL. This makes the global 'Tonal' object available in the browser's window scope. Requires an internet connection to load the script.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/tonal/browser/tonal.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Note Collection Range Function Tonaljs Scale\nDESCRIPTION: Uses the `Scale.rangeOf()` function with a list of individual note names instead of a scale name. This returns a function to generate a range of notes using only the provided notes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst range = Scale.rangeOf(\"C\", \"Db\", \"G\");\n```\n\n----------------------------------------\n\nTITLE: Using Key Major Key Chords in JavaScript\nDESCRIPTION: This snippet demonstrates using the `Key.majorKeyChords` function to get chords in a major key and filtering to find a specific chord (Em). It relies on the `tonal` library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CHANGELOG.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Key from \"tonal\";\n\nKey.majorKeyChords(\"C\").find((chord) => chord.name === \"Em\"); // => { name: \"Em\", roles: [\"T\", \"ii/II\"] }\n```\n\n----------------------------------------\n\nTITLE: Using predefined VoicingDictionary for search (TypeScript)\nDESCRIPTION: Utilizes an existing voicing dictionary from @tonaljs/voicing-dictionary to find voicings of a chord, simplifying setup. It requires importing Voicing and VoicingDictionary; returns an array of voicing notes. The dictionary influences the voicing search scope.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/voicings.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { VoicingDictionary } from \"@tonaljs/voicing-dictionary\";\nVoicing.search(\"C^7\", [\"E3\", \"D5\"], VoicingDictionary.lefthand);\n```\n\n----------------------------------------\n\nTITLE: Chord.get Syntax and Octave Handling Before v5.x - JavaScript\nDESCRIPTION: This example illustrates chord parsing in tonaljs version 4.x, where Chord.get can interpret strings with an embedded octave number, such as \"C4maj7\", by assigning the number to the tonic instead of the chord type. The function returns a chord object with both the symbol and tonic extracted. This behavior can be confusing and is now changed in subsequent releases.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-type/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.get(\"C4maj7\"); // => { symbol: 'Cmaj7', tonic: 'C4' ... }\n```\n\n----------------------------------------\n\nTITLE: Migrating @tonaljs Module Imports from Default to Namespace in JavaScript\nDESCRIPTION: Illustrates the change in importing `@tonaljs` modules starting from version 5.1.0, as mentioned in the changelog. The deprecated default import (`import Note from \"@tonaljs/note\";`) should be replaced with the recommended namespace import (`import * as Note from \"@tonaljs/note\";`). This change applies consistently across all modules within the `@tonaljs` library ecosystem.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Creating Scale Range Function without Tonic Tonaljs Scale\nDESCRIPTION: Uses the `Scale.rangeOf()` function with a scale name that does not include a tonic, demonstrating that this results in a range function that will produce an empty array.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst range = Scale.rangeOf(\"pentatonic\");\n```\n\n----------------------------------------\n\nTITLE: Converting Between Chroma and Number Representations in JavaScript\nDESCRIPTION: Shows shorthand functions in the Pcset API to convert between array, number, and chroma representations of pitch class sets. Requires 'tonal' package. Inputs can be flexible (arrays, numbers, strings) and results are consistent across interchangeable forms. Useful when working with multiple set representations programmatically.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pcset/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nPcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\nPcset.num([\"c\", \"d\", \"e\"]); //=> 2192\n\n// several set representations are accepted\nPcset.chroma(2192); //=> \"101010000000\"\nPcset.num(\"101010000000\"); // => 2192\n```\n\n----------------------------------------\n\nTITLE: Getting Natural Pitch Classes\nDESCRIPTION: This snippet shows the use of `Note.names()` without parameters to get a default array of natural pitch classes (C, D, E, F, G, A, B). This provides a simple way to retrieve the fundamental note names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nNote.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Probability-Based Rhythm Patterns with Tonal.js (JavaScript)\nDESCRIPTION: Shows how to use `RhythmPattern.probability` to generate a rhythm pattern where each step's likelihood of being a beat is determined by a corresponding probability value in an input array. Requires the `RhythmPattern` object. Takes an array of `probabilities` and an optional custom random function (`rnd`, default `Math.random`). Returns an array of 1s and 0s.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/patterns.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nRhythmPattern.probability([0.6, 0, 0.2, 0.5]); // => [0, 0, 0, 1]\n```\n\n----------------------------------------\n\nTITLE: Listing All Duration Shorthands Using DurationValue.shorthands Method in JavaScript\nDESCRIPTION: Provides a method to list all shorthand symbols for durations recognized by DurationValue, such as \"dl\", \"l\", \"d\", \"w\", \"h\", \"q\", etc. This facilitates referencing compact duration representations in user interfaces or parsers. No input parameters; outputs an array of shorthand strings.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/duration.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nDurationValue.shorthands(); // => [\"dl\", \"l\", \"d\", \"w\", \"h\", \"q\", \"e\", \"s\", \"t\", \"sf\", \"h\", \"th\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Tonal Library via npm in Bash\nDESCRIPTION: This command installs the full 'tonal' library package from npm into your project's dependencies. The '--save' flag adds it to your package.json file. Requires Node.js and npm to be installed on your system.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save tonal\n```\n\n----------------------------------------\n\nTITLE: Importing Scale Module Single Package\nDESCRIPTION: Demonstrates how to import the `Scale` object directly from the `@tonaljs/scale` package using ES6 import syntax.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Scale from \"@tonaljs/scale\";\n```\n\n----------------------------------------\n\nTITLE: Check if note is included in Pcset\nDESCRIPTION: Creates a curried function to test if a note is included in a given pitch class set. Enharmonics are considered equivalent.  The function returns a boolean value.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/pitch-class-sets.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst isInCTriad = isIncludedIn([\"C\", \"E\", \"G\"]);\nisInCTriad(\"C4\"); // => true\nisInCTriad(\"C#4\"); // => false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisInCTriad(\"Fb\"); // => true\n```\n\n----------------------------------------\n\nTITLE: Getting Note Properties\nDESCRIPTION: This snippet uses `Note.get()` to retrieve information about a given note name.  The function takes a note name as a string and returns an object containing various properties like name, pitch class, letter, octave, chroma, MIDI value, and frequency. The input is a valid note name (e.g., \"C4\"), and the output is an object with the note properties.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nNote.get(\"C4\"); // => { name: \"C4\", midi: 60, ... }\n```\n\n----------------------------------------\n\nTITLE: Getting Chords for a Scale Tonaljs Scale\nDESCRIPTION: Uses the `Scale.scaleChords()` function to get a list of chord names that fit within the specified scale.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nScale.scaleChords(\"pentatonic\");\n```\n\n----------------------------------------\n\nTITLE: Importing VoiceLeading from TonalJS in ES6 and Node.js\nDESCRIPTION: Provides examples of how to import the 'VoiceLeading' namespace or object from the 'tonal' library in both ES6 modules and Node.js CommonJS environments. These snippets show the standard ways to access the voice leading functionality included in '@tonaljs/voice-leading'.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voice-leading/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { VoiceLeading } from \"tonal\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { VoiceLeading } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Finding Relative Tonic - Tonal.js Mode JavaScript\nDESCRIPTION: Uses the `Mode.relativeTonic()` function to find the tonic of a destination mode that is harmonically related to a source mode with a given tonic. It takes the destination mode, source mode, and source tonic as arguments.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/mode/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nMode.relativeTonic(\"minor\", \"major\", \"C\"); // => \"A\"\n```\n\n----------------------------------------\n\nTITLE: Getting Reduced Scales Tonaljs Scale\nDESCRIPTION: Uses the `Scale.reduced()` function to find scale names that are a subset of the given scale (containing fewer notes, but all notes are present in the original scale).\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nScale.reduced(\"major\");\n```\n\n----------------------------------------\n\nTITLE: Importing Note and Interval Types (TypeScript)\nDESCRIPTION: This snippet demonstrates importing and using `NoteType` and `IntervalType` types from the \"tonal\" module.  It shows how to declare variables using these types and assign values obtained from Note.get and Interval.get functions. Requires the tonal library to be installed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/CHANGELOG.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Interval, IntervalType, Note, NoteType } from \"tonal\";\n\nconst note: NoteType = Note.get(\"C4\");\nconst interval: IntervalType = Interval.get(\"P4\");\n```\n\n----------------------------------------\n\nTITLE: Deriving Mode Notes from Intervals - Tonal.js JavaScript\nDESCRIPTION: Shows an alternative approach to generating mode notes by first getting the mode's intervals using `Mode.get()` and then mapping these intervals to notes transposed from the desired tonic using `Note.transposeFrom()`. This requires importing both `Mode` and `Note` modules.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/mode/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Mode, Note } from \"tonal\";\n\nMode.get(\"major\").intervals.map(Note.transposeFrom(\"A\"));\n[\"A\", \"B\", \"C#\", \"D\", \"E\", \"F#\", \"G#\"];\n```\n\n----------------------------------------\n\nTITLE: Import Pcset from tonal\nDESCRIPTION: Imports the Pcset module from the tonal library.  This module allows for operations on pitch class sets.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/pitch-class-sets.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Pcset } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Creating a scale degree function with 'Chord.degrees'\nDESCRIPTION: This snippet creates a function that, given a degree number, returns the corresponding note in a C minor 7 chord starting from 'C4'. It can be used to generate chord tones and their inversions based on scale degrees, aiding in melodic construction.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst c4m7 = Chord.degrees(\"m7\", \"C4\");\n c4m7(1); // => \"C4\"\n c4m7(2); // => \"Eb4\"\n c4m7(3); // => \"G4\"\n c4m7(4); // => \"Bb4\"\n```\n\n----------------------------------------\n\nTITLE: Importing Chord Module with ES6 in JavaScript\nDESCRIPTION: Demonstrates how to import the `Chord` object from the main `tonal` package using the ES6 `import` syntax. This allows access to chord-related functions, including `detect`.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-detect/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Chord } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Calculating Intervals from C with Pcset.intervals in JavaScript\nDESCRIPTION: Uses Pcset.intervals to determine the interval structure of a pitch class set, always calculating intervals from the pitch class 'C'. Supports arrays of various note names and returns an array of interval strings. Useful for analyzing the structure of scales and chords. Dependencies: 'tonal'.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pcset/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nPcset.intervals([\"c\", \"d\", \"e\"]); // => [\"1P\", \"5P\", \"7M\"]\nPcset.intervals([\"D\", \"F\", \"A\"]); // => [\"2M\", \"4P\", \"6M\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Mode (ES6) - Tonal.js JavaScript\nDESCRIPTION: Imports the `Mode` object from the Tonal.js library using standard ES6 module syntax, suitable for modern JavaScript development environments like browsers or Node.js with transpilation.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/mode/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Mode } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Using majorKey with Octave or Pitch Class (JavaScript)\nDESCRIPTION: Shows that the `majorKey` function in `@tonaljs/key` can accept a tonic string with or without an octave number (e.g., \"C4\" or \"C\"). The function internally discards octave information, treating them equivalently as pitch classes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/key/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nKey.majorKey(\"C4\"); // is equal to\nKey.majorKey(\"C\");\n```\n\n----------------------------------------\n\nTITLE: Transposing Notes and Calculating Intervals\nDESCRIPTION: This snippet imports `transpose` and `distance` functions from the `@tonaljs/core` module. It illustrates how to transpose a note by an interval and calculate the interval between two notes. It requires the `@tonaljs/core` module. It receives the note and interval and returns the transposed note.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { transpose, distance } from \"@tonaljs/core\";\ntranspose(\"C4\", \"5P\"); // => \"G4\"\ndistance(\"C4\", \"G4\"); // => \"5P\"\n```\n\n----------------------------------------\n\nTITLE: Searching for chord voicings with Voicing.search (TypeScript)\nDESCRIPTION: Retrieves all possible voicings of a specified chord within a range using a custom or predefined voicing dictionary; it returns an array of voicing arrays. Dependencies include the Voicing class and optionally a VoicingDictionary. Inputs include the chord symbol, range, and dictionary; output is a list of voicing note arrays.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/voicings.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nVoicing.search(\"C^7\", [\"E3\", \"D5\"], { \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"] });\n```\n\n----------------------------------------\n\nTITLE: Using ChordType.get to fetch chord details in tonal.js\nDESCRIPTION: This snippet demonstrates how to retrieve details of the 'major' chord type using the get method from the ChordType object. It requires importing the ChordType module from tonal.js and provides an example of accessing intervals for the 'major' chord, which returns an array of interval strings representing the chord structure.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/dictionaries/chord-types.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ChordType } from \"tonal\";\n\nChordType.get(\"major\").intervals; // => [\"1P\", \"3M\", \"5P\"]\n```\n\n----------------------------------------\n\nTITLE: Filtering Pentatonic Scale Names\nDESCRIPTION: Example showing how to find all pentatonic scale names by filtering the complete scale list to include only those with exactly 5 intervals.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/dictionaries/scale-types.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nScaleType.all()\n  .filter((scaleType) => scaleType.intervals.length === 5)\n  .map((scaleType) => scaleType.name);\n```\n\n----------------------------------------\n\nTITLE: Scientific to ABC Notation Conversion in Tonaljs\nDESCRIPTION: This code snippet demonstrates how to convert a note name from scientific notation to ABC notation using the `scientificToAbcNotation` function in the Tonaljs AbcNotation module. It assumes `AbcNotation` has been imported. The function takes a note name in scientific notation as input (e.g., \"C#4\") and returns its equivalent in ABC notation (e.g., \"^C\").\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/notation/abc-notation.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAbcNotation.scientificToAbcNotation(\"C#4\"); // => \"^C\"\n```\n\n----------------------------------------\n\nTITLE: Generating mode notes using intervals and transposition\nDESCRIPTION: Shows an alternative method to get mode notes by using the mode intervals and Note.transposeFrom() method, which can be useful for more advanced transformations.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/modes.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Mode, Note } from \"tonal\";\n\nMode.get(\"major\").intervals.map(Note.transposeFrom(\"A\"));\n[\"A\", \"B\", \"C#\", \"D\", \"E\", \"F#\", \"G#\"];\n```\n\n----------------------------------------\n\nTITLE: Voice Leading Function Type Definition\nDESCRIPTION: TypeScript declaration for a voice leading function that takes a set of voicings and the last voicing as input, and returns the optimal next voicing.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/leading.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare type VoiceLeadingFunction = (\n  voicings: string[][],\n  lastVoicing: string[],\n) => string[];\n```\n\n----------------------------------------\n\nTITLE: Accessing value and fraction directly\nDESCRIPTION: Demonstrates how to access duration value and fraction directly using `DurationValue.value` and `DurationValue.fraction`. They provide a simplified interface to access single values.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/duration-value/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nDurationValue.value(\"q..\"); // => 0.4375\nDurationValue.fraction(\"q..\"); // => [ 7, 16 ]\n```\n\n----------------------------------------\n\nTITLE: Importing VoicingDictionary with Node.js require in JavaScript\nDESCRIPTION: Shows how to import VoicingDictionary from the Tonal module using Node.js' CommonJS require syntax. Precondition: 'tonal' must be installed as a Node.js dependency. No parameters are specified; importing enables later use of chord voicing utilities within Node.js scripts.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing-dictionary/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { VoicingDictionary } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Using 'Chord.chord' alias for chord creation\nDESCRIPTION: This snippet demonstrates the usage of the alias 'chord' imported from '@tonaljs/chord' to create and manipulate chords, exemplified by creating a 'C6add2' chord, facilitating chord operations with simplified syntax.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { chord } from \"@tonaljs/chord\";\n\nchord(\"C6add2\");\n```\n\n----------------------------------------\n\nTITLE: Importing Voicing module using ES6 syntax\nDESCRIPTION: Shows how to import the Voicing class from @tonaljs/voicing using ES6 module syntax for use in modern JavaScript environments.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/voicings.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Voicing } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Analyzing Voicing - Example\nDESCRIPTION: This example demonstrates the usage of `Voicing.analyze`. It shows an expected output for given voicing, providing insights like the top note, bottom note and the average MIDI value for a chord voicing.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(Voicing.analyze([\"C4\", \"E4\", \"G4\", \"B4\"])).toEqual({\n  topNote: \"B4\",\n  bottomNote: \"C4\",\n  midiAverage: 85.4, // did not check :)\n  // many more values possible\n});\n```\n\n----------------------------------------\n\nTITLE: Deriving Minor Tonic From Major Key Signature in JavaScript\nDESCRIPTION: Illustrates how to obtain the relative minor tonic from a major key signature by composing the `majorTonicFromKeySignature` and `majorKey` methods and accessing the `relativeMinor` property. This method requires a string representation of a key signature with sharps and the Tonal.js Key namespace.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/keys.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmajorKey(majorTonicFromKeySignature(\"###\")).relativeMinor; // => \"F#\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Note Names in Descending Order\nDESCRIPTION: This code uses a custom comparator function with `Note.sortedNames()` to sort an array of note names in descending order.  The comparator (`Note.descending`) reverses the default sorting order. This provides flexibility in sorting based on different criteria.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nNote.sortedNames([\"c2\", \"c5\", \"c1\", \"c0\", \"c6\", \"c\"], Note.descending);\n// => ['C6', 'C5', 'C2', 'C3', 'C1', 'C0']\n```\n\n----------------------------------------\n\nTITLE: Importing Progression in Node.js\nDESCRIPTION: Imports the `Progression` object from the `@tonaljs/progression` library in a Node.js environment using the `require` syntax. This provides access to the library's functions for chord progression analysis and conversion. Requires the `@tonaljs/progression` package to be installed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/progression/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Progression } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Adding 'scale.detect' Functionality\nDESCRIPTION: A new method 'Scale.detect' was introduced, allowing detection of possible scale names given an array of pitch classes or notes. The function returns an array of scale names that match the input set.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nScale.detect([\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]);\n// => [\"C major\", \"C bebop\", \"C bebop major\", \"C ichikosucho\", \"C chromatic\"]\n```\n\n----------------------------------------\n\nTITLE: Mapping over degree functions for chord inversions\nDESCRIPTION: This snippet illustrates mapping degree-based note functions over arrays to generate different chord inversions, demonstrating how to utilize scale degrees for voice leading or harmonic variations.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n[1, 2, 3, 4].map(c4m7); // => [\"C4\", \"Eb4\", \"G4\", \"Bb4\"]\n[2, 3, 4, 5].map(c4m7); // => [\"Eb4\", \"G4\", \"Bb4\", \"C5\"]\n[3, 4, 5, 6].map(c4m7); // => [\"G4\", \"Bb4\", \"C5\", \"Eb5\"]\n[4, 5, 6, 7].map(c4m7); // => [\"Bb4\", \"C5\", \"Eb5\", \"G5\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Tonal Core Module\nDESCRIPTION: This snippet shows the import syntax for the Tonal.js core module using both `require` and ES6 `import` statements. It demonstrates the change in namespace from v2 to v3 and v4, with the core module now accessed via `@tonaljs/core`.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/migration-guide.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tonal = require(\"@tonaljs/core\");\n// or\nimport * as tonal from \"@tonaljs/core\";\n```\n\n----------------------------------------\n\nTITLE: Detecting chords from notes with 'Chord.detect'\nDESCRIPTION: This snippet demonstrates identifying possible chord names from a list of notes using 'Chord.detect'. It enables chord recognition based on note collections, supporting musical analysis and transcription tasks.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/chords.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.detect([\"D\", \"F#\", \"A\", \"C\"]); // => [\"D7\"]\nChord.detect([\"F#\", \"A\", \"C\", \"D\"]); // => [\"D7/F#\"]\n```\n\n----------------------------------------\n\nTITLE: Importing RhythmPattern in Node.js\nDESCRIPTION: Shows how to import the RhythmPattern module using CommonJS require syntax for Node.js environments.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/rhythm-pattern/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { RhythmPattern } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Using Scale.degrees with Scales\nDESCRIPTION: This snippet shows how to use `Scale.degrees` function to map numbers to scale degrees. It requires the 'tonal' library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CHANGELOG.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n[1, 2, 3].map(Scale.degrees(\"C major\")) => [\"C\", \"D\", \"E\"]\n[1, 2, 3].map(Scale.degrees(\"C4 major\")) => [\"C4\", \"D4\", \"E4\"]\n[-1, -2, -3].map(Scale.degrees(\"C major\")) => [\"B\", \"A\", \"G\"]\n```\n\n----------------------------------------\n\nTITLE: Getting Time Signature Details (Additive String)\nDESCRIPTION: Calls the static `get()` method with a string representing an additive time signature (e.g., \"3+2+3/8\"). The function parses the string and returns an object including the 'additive' array detailing the grouped beats.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/time-signature/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nTimeSignature.get(\"3+2+3/8\"); // =>\n// {\n//   empty: false,\n//   name: '3+2+3/8',\n//   type: 'irregular',\n//   upper: 8,\n//   lower: 8,\n//   additive: [ 3, 2, 3 ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Adding a chord type with aliases and retrieving it\nDESCRIPTION: Demonstrates adding a chord type with multiple aliases and then retrieving it using different names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-type/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nChordType.add([\"1P\", \"3M\", \"5P\"], [\"M\", \"may\"], \"mayor\");\nChordType.get(\"mayor\"); // => { name: 'mayor', quality: \"Major\", chroma: ... }\nChordType.get(\"may\"); // => { name: 'mayor', quality: \"Major\", chroma: ... }\n```\n\n----------------------------------------\n\nTITLE: Converting Frequency to Note Name (Rounded)\nDESCRIPTION: This snippet showcases the behavior of `Note.fromFreq()` when applied to multiple frequencies, demonstrating the rounding to the nearest note name.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[440, 550, 660].map(t.Note.fromFreq); // => [ 'A4', 'Db5', 'E5' ]\n```\n\n----------------------------------------\n\nTITLE: Listing Mode Names - Tonal.js Mode JavaScript\nDESCRIPTION: Calls the `Mode.names()` function to get an array containing the string names of all supported musical modes in the library. This function is useful for enumerating available modes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/mode/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nMode.names();\n// => [\"ionian\", \"dorian\", \"phrygian\", \"lydian\", \"mixolydian\", \"aeolian\", \"locrian\"];\n```\n\n----------------------------------------\n\nTITLE: Using Tonal.js Library - ES6 Import\nDESCRIPTION: This snippet demonstrates how to import specific modules from the tonal library using ES6 import syntax. This allows the user to access functions related to notes and scales for musical operations.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Interval, Note, Scale } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Mapping Degrees to Pitch Classes Tonaljs Scale\nDESCRIPTION: Illustrates using the function returned by `Scale.degrees()` (with a scale name lacking an octave) in conjunction with `map` to generate an array of pitch classes from a list of degrees.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n[1, 2, 3].map(Scale.degrees(\"C major\")) => [\"C\", \"D\", \"E\"]\n```\n\n----------------------------------------\n\nTITLE: Using Slash Chords with Bass Specification - JavaScript\nDESCRIPTION: Shows the new feature that allows chord symbols to specify a slash bass note, where the bass must be a pitch class. Examples demonstrate notation with a slash separating chord and bass, enhancing chord symbolic expressivity and bass voice control within the library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.get(\"Cmaj7/B\");\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.get(\"Eb/D\");\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Scale Type to Dictionary\nDESCRIPTION: Example of using ScaleType.add() to create a custom scale type and add it to the dictionary with a name and optional aliases.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/dictionaries/scale-types.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nScaleType.add([\"1P\", \"5P\"], null, [\"5\"]);\n```\n\n----------------------------------------\n\nTITLE: Importing Tonal.js Module (Deprecated)\nDESCRIPTION: This JavaScript snippet demonstrates the deprecated method for importing a single module from Tonal.js using the default export. It imports the 'Note' module directly from '@tonaljs/note'. This syntax is no longer recommended.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/progression/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Importing Midi Function in Tonal.js\nDESCRIPTION: This snippet shows how the `midiToNoteName` function is imported from the `@tonaljs/midi` module. It highlights the change in module location from `tonal-note` in version 2 to `@tonaljs/midi` in version 3.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/migration-guide.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { midiToNoteName } from \"@tonaljs/midi\";\n```\n\n----------------------------------------\n\nTITLE: Requiring tonaljs Key Module (Node.js)\nDESCRIPTION: Illustrates the CommonJS require syntax used in Node.js environments to load the `Key` object from the \"tonal\" package. This makes the Key functions accessible within Node.js scripts. Required dependency: \"tonal\" npm package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/key/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Key } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Analyzing Transition - TypeScript\nDESCRIPTION: This snippet provides the signature for the `Voicing.analyzeTransition` function. This function calculates useful information about the transition between two voicings. It returns details like the differences of top and bottom notes, and a movement metric.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function analyzeTransition(\n  from: string[],\n  to: string[]\n): {\n  topNoteDiff: number;\n  bottomNoteDiff: number;\n  movement: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Analyzing Voicing - TypeScript\nDESCRIPTION: This snippet defines the `Voicing.analyze` function.  This optional utility function returns the top and bottom notes, along with the average MIDI value of a given voicing. This provides convenient information for the voice.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function analyze(voicing: string[]): {\n  topNote: string;\n  bottomNote: string;\n  midiAverage: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Handle Invalid Parameters in transpose()\nDESCRIPTION: This code demonstrates the `transpose()` function's handling of invalid parameters, which results in an empty string return value. It's used for error handling. The input are two string arguments and the output is a string. No dependencies are required.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntranspose(\"one\", \"two\"); // => \"\"\n```\n\n----------------------------------------\n\nTITLE: Rotating Arrays with Collection.rotate\nDESCRIPTION: The rotate function shifts all elements in an array by a specified number of positions. Elements that move beyond the end of the array are wrapped to the beginning.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/utils/collections.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.rotate(1, [1, 2, 3]); // => [2, 3, 1]\n```\n\n----------------------------------------\n\nTITLE: Converting from Scientific to ABC Notation in JavaScript\nDESCRIPTION: Converts a note name from scientific notation to ABC notation using the `scientificToAbcNotation` function. The function takes a string representing the note in scientific notation as input and returns the equivalent note in ABC notation as a string.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/abc-notation/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nAbcNotation.scientificToAbcNotation(\"C#4\"); // => \"^C\"\n```\n\n----------------------------------------\n\nTITLE: Shuffling Arrays with Collection.shuffle\nDESCRIPTION: The shuffle function randomizes the order of elements in an array using the Fisher-Yates algorithm. The shuffling is performed in-place on the original array.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/utils/collections.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.shuffle([\"a\", \"b\", \"c\"]);\n```\n\n----------------------------------------\n\nTITLE: Adding a custom chord type to the dictionary\nDESCRIPTION: Shows how to add a new chord type to the dictionary by specifying intervals, aliases, and an optional full name.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-type/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nadd([\"1P\", \"3M\", \"5P\"], [\"M\"], \"mayor\");\n```\n\n----------------------------------------\n\nTITLE: Scale.get Case Insensitivity\nDESCRIPTION: This code snippet shows that the `Scale.get` method now ignores case. This means that both uppercase and lowercase versions of the scale name will return the same result.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nScale.get(\"C Major\");\nScale.get(\"c major\");\n```\n\n----------------------------------------\n\nTITLE: Generating triads from a mode\nDESCRIPTION: Demonstrates how to generate the sequence of triads from a mode with a specific tonic using the Mode.triads() method.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/modes.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nMode.triads(\"major\", \"C\");\n// => [\"C\", \"Dm\", \"Em\", \"F\", \"G\", \"Am\", \"Bdim\"];\n```\n\n----------------------------------------\n\nTITLE: Importing Range and Scale for Steps Example\nDESCRIPTION: Imports the `Range` and `Scale` objects needed for demonstrating the `Scale.steps` function with `Range.numeric`.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Range, Scale } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Adding Named Scale with Aliases\nDESCRIPTION: Example demonstrating how to add a quinta scale with multiple aliases and then retrieve it using different names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/dictionaries/scale-types.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nScaleType.add([\"1P\", \"5P\"], \"quinta\", [\"quinta justa\", \"diapente\"]);\nScaleType.scale(\"quinta\"); // => { name: \"quinta\", intervals: ...}\nScaleType.scale(\"quinta justa\"); // => { name: \"quinta\", intervals: ... }\n```\n\n----------------------------------------\n\nTITLE: Exporting TypeScript Types NoteType and IntervalType\nDESCRIPTION: This snippet exports the TypeScript types 'NoteType' and 'IntervalType' from the tonal library, enabling type safety and autocompletion for note and interval objects. Dependencies include '@tonaljs/note', '@tonaljs/interval', and '@tonaljs/core'. It demonstrates how to import these types and use them to type variables holding note and interval objects.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Interval, IntervalType, Note, NoteType } from \"tonal\";\n\nconst note: NoteType = Note.get(\"C4\");\nconst interval: IntervalType = Interval.get(\"P4\");\n```\n\n----------------------------------------\n\nTITLE: Deprecated Default Export Usage (Old)\nDESCRIPTION: Shows the deprecated way of importing modules in tonaljs using default exports. This method is no longer recommended.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/mode/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Handle Invalid Note Names in note()\nDESCRIPTION: This code snippet demonstrates that when an invalid note name is passed to the `note()` function, it returns an object indicating it is an empty or invalid note. This behavior is built into the library for error handling. The input is a string and the output is an object. There are no specific dependencies required for this functionality.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnote(\"hello\"); // => { empty: true, name: \"\" }\n```\n\n----------------------------------------\n\nTITLE: Adding and Retrieving a Custom Scale Type (JavaScript)\nDESCRIPTION: Illustrates adding a custom scale type named 'quinta' with aliases using `ScaleType.add`. It then shows how to retrieve this newly added scale type using `ScaleType.scale` (note: the API section lists `get`, so `scale` might be a typo in the source) by its primary name or one of its aliases.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale-type/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nScaleType.add([\"1P\", \"5P\"], \"quinta\", [\"quinta justa\", \"diapente\"]);\nScaleType.scale(\"quinta\"); // => { name: \"quinta\", intervals: ...}\nScaleType.scale(\"quinta justa\"); // => { name: \"quinta\", intervals: ... }\n```\n\n----------------------------------------\n\nTITLE: Get Pcset properties\nDESCRIPTION: Retrieves properties of a pitch class set given a collection of notes. It returns an object containing the set number (num), chroma, intervals (starting from C), and length.  It accepts notes, chroma string, or set number as input.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/pitch-class-sets.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPcset.get([\"c\", \"d\", \"e\"]);\n// =>\n// {\n//   num: 2688,\n//   chroma: \"101010000000\",\n//   intervals: [\"1P\", \"2M\", \"3M\"],\n//   length: 3\n// }\n```\n\n----------------------------------------\n\nTITLE: Retrieving all mode objects with Mode.all()\nDESCRIPTION: Demonstrates how to get a list of all mode objects with their complete information using the Mode.all() method.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/harmony/modes.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMode.all();\n```\n\n----------------------------------------\n\nTITLE: Generating Mode Triads with Tonic - Tonal.js Mode JavaScript\nDESCRIPTION: Utilizes the `Mode.triads()` function to calculate the triad chords formed on each degree of a specified mode with a given tonic. It takes the mode name and tonic as arguments and returns an array of chord names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/mode/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nMode.triads(\"major\", \"C\");\n// => [\"C\", \"Dm\", \"Em\", \"F\", \"G\", \"Am\", \"Bdim\"];\n```\n\n----------------------------------------\n\nTITLE: Importing ScaleType from tonal.js\nDESCRIPTION: Basic import statement to use the ScaleType module from the tonal library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/dictionaries/scale-types.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ScaleType } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Using Scale Degree Function Negative Degree Tonaljs Scale\nDESCRIPTION: Demonstrates using the function returned by `Scale.degrees(\"C4 major\")` with a negative degree (-1) to get the note below the tonic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nc4major(-1); // => \"B3\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Transition - Example\nDESCRIPTION: This example shows how the `Voicing.analyzeTransition` function is used. It shows how to analyze the transition between two voicings, providing information about the movement between them, expressed in semitones.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(\n  Voicing.analyzeTransition([\"C4\", \"E4\", \"G4\", \"B4\"], [\"D4\", \"F4\", \"A4\", \"C5\"])\n).toEqual({\n  topNoteDiff: 1,\n  bottomNoteDiff: 2,\n  movement: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Invalid Pitch Class for Enharmonic\nDESCRIPTION: This snippet shows the return value when the enforced pitch class does not have the same chroma as the original note. In this case the function returns an empty string.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nNote.enharmonic(\"F2\", \"Eb\"); // => \"\"\n```\n\n----------------------------------------\n\nTITLE: Using Scale Degree Function Zero Degree Tonaljs Scale\nDESCRIPTION: Demonstrates using the function returned by `Scale.degrees(\"C4 major\")` with degree 0, which returns an empty string as per the documentation.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nc4major(0); // => \"\"\n```\n\n----------------------------------------\n\nTITLE: Example Output of Scale.detect Exact Match with Tonic Tonaljs Scale\nDESCRIPTION: Shows an example output array returned by `Scale.detect()` with `match: \"exact\"` and a specified tonic, identifying the B Major Pentatonic scale (which is the relative major pentatonic of G# minor pentatonic, but here it's likely matching the note set relative to B, implying a mode interpretation).\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// => [\"B major pentatonic\"]\n```\n\n----------------------------------------\n\nTITLE: Finding Extended Scales Tonal.js JavaScript\nDESCRIPTION: `Scale.extended()` takes a scale name (pitch classes only) and returns a list of other scale names. These are scales that contain all the notes of the input scale and at least one additional note.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nScale.extended(\"major\");\n// => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n```\n\n----------------------------------------\n\nTITLE: Listing All Possible Music Scales using chromas and pcset in JavaScript\nDESCRIPTION: Combines the chromas and pcset utilities from @tonaljs/pcset and the transposeFrom function from @tonaljs/note to map through all possible chroma representations, generating arrays of transposed intervals from 'C'. Assumes both packages are installed as dependencies. Facilitates programmatic generation of every possible musical scale.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pcset/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { chromas, pcset } from \"@tonaljs/pcset\";\nimport { transposeFrom } from \"@tonaljs/note\";\n\nchromas().map((chroma) => pcset(chroma).intervals.map(transposeFrom(\"C\")));\n```\n\n----------------------------------------\n\nTITLE: Adding a custom chord type and detecting it in a chord\nDESCRIPTION: Demonstrates how to add a custom chord type and then use it with the Chord.detect() function to identify chords based on notes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-type/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Chord, ChordType } from \"tonal\";\n\nChordType.add([\"1P\", \"5P\", \"7M\"], [\"5maj7\", \"5add7\"]);\nChord.detect([\"C3\", \"G3\", \"B3\"]); // => [\"C5maj7\"]\n```\n\n----------------------------------------\n\nTITLE: Converting MIDI to Notes with Note.fromMidi in JavaScript\nDESCRIPTION: Examples of converting MIDI numbers to note names with Note.fromMidi and Note.fromMidiSharps, which handles both integer and decimal MIDI values.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/basics/notes.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nNote.fromMidi(61); // => \"Db4\"\nNote.fromMidi(61.7); // => \"D4\"\n[60, 61, 62].map(Note.fromMidi); // => [\"C4\", \"Db4\", \"D4\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nNote.fromMidiSharps(61); // => \"C#4\"\n```\n\n----------------------------------------\n\nTITLE: Transposing a Note in ABC Notation in JavaScript\nDESCRIPTION: Transposes a note in ABC notation by a given interval using the `transpose` function. The function takes the note in ABC notation and the interval as strings, returning the transposed note in ABC notation.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/abc-notation/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nAbcNotation.transpose(\"=C\", \"P19\"); // => \"g'\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Exact Match Scales with Tonic Tonal.js JavaScript\nDESCRIPTION: Combines the `match: \"exact\"` and `tonic` options in `Scale.detect()`. This allows precise detection of scales that exactly match the input notes and have the specified note as their tonic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nScale.detect([\"D\", \"E\", \"F#\", \"A\", \"B\"], { match: \"exact\", tonic: \"B\" });\n// => [\"B major pentatonic\"]\n```\n\n----------------------------------------\n\nTITLE: Converting from ABC to Scientific Notation in JavaScript\nDESCRIPTION: Converts a note name from ABC notation to scientific notation using the `abcToScientificNotation` function.  The function takes a string representing the note in ABC notation as input and returns the equivalent note in scientific notation as a string.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/abc-notation/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAbcNotation.abcToScientificNotation(\"c\"); // => \"C5\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Chord Degrees\nDESCRIPTION: Example of using `Chord.degrees` output function with `map` to obtain chord inversions. It generates the notes of chord inversions based on the given degree sequence.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n[1, 2, 3, 4].map(c4m7); // => [\"C4\", \"Eb4\", \"G4\", \"Bb4\"]\n[2, 3, 4, 5].map(c4m7); // => [\"Eb4\", \"G4\", \"Bb4\", \"C5\"]\n[3, 4, 5, 6].map(c4m7); // => [\"G4\", \"Bb4\", \"C5\", \"Eb5\"]\n[4, 5, 6, 7].map(c4m7); // => [\"Bb4\", \"C5\", \"Eb5\", \"G5\"]\n```\n\n----------------------------------------\n\nTITLE: Chord.get Syntax and Octave Handling in v5.x and Later - JavaScript\nDESCRIPTION: This example demonstrates the updated parsing logic in tonaljs v5.x and later, where Chord.get treats all numbers following the tonic as part of the chord type. If the type is unrecognized (e.g., \"4maj7\"), the function returns an empty chord object. To obtain the previous behavior, users should pass input as an array, making the tonic and chord type explicit.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-type/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.get(\"C4maj7\"); // => { empty: true } <- there is no \"4maj7\" chord type, so no chord is returned\n```\n\n----------------------------------------\n\nTITLE: Requiring Tonal Modules (ES5) in Javascript\nDESCRIPTION: This snippet demonstrates the CommonJS syntax for requiring named modules like 'Note' and 'Scale' from the 'tonal' package using destructuring. Use this primarily in Node.js environments. Requires the 'tonal' package installed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Note, Scale } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Notes Tonaljs Scale\nDESCRIPTION: Demonstrates `Scale.scaleNotes()` with an array containing duplicate note names and varying octaves. It shows that the function removes duplicates and returns only unique pitch classes.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Remove duplicates\nScale.scaleNotes([\"C4\", \"c3\", \"C5\", \"C4\", \"c4\"]); // => [\"C\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Mode Seventh Chords with Tonic - Tonal.js Mode JavaScript\nDESCRIPTION: Employs the `Mode.seventhChords()` function to determine the seventh chords built on each degree of a particular mode relative to a provided tonic note. It takes the mode name and tonic as arguments and returns an array of seventh chord names.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/mode/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nMode.seventhChords(\"major\", \"C\");\n// => [\"CMaj7\", \"Dm7\", \"Em7\", \"FMaj7\", \"G7\", \"Am7\", \"B7b5\"];\n```\n\n----------------------------------------\n\nTITLE: Handle Invalid Parameters in distance()\nDESCRIPTION: This code snippet shows that if you input invalid parameters to the `distance()` function, the function returns an empty string. This shows how the function handles errors. The inputs are string representations of notes, and the output is a string.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/core/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndistance(\"today\", \"tomorrow\"); // => \"\"\n```\n\n----------------------------------------\n\nTITLE: Changing Chord Representation to Use Pitch Classes\nDESCRIPTION: This snippet reflects a significant API change where chords now operate on pitch classes rather than notes with octaves, simplifying chord definitions and distinguishing tonic notes from pitch classes used in chord analysis. Dependencies include '@tonaljs/chord'. Functions like 'Chord.get' now return an object with 'name', 'tonic' as pitch class, and 'notes' as pitch classes, e.g., 'C', 'E', 'G'.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nChord.get(\"M\", \"C4\"); // => { name: 'C major', tonic: 'C', notes: [ 'C', 'E', 'G' ] }\n```\n\n----------------------------------------\n\nTITLE: Generating Euclidean Rhythm Patterns with Tonal.js (TypeScript)\nDESCRIPTION: Demonstrates generating a Euclidean rhythm pattern using `RhythmPattern.euclid`. This method requires the `RhythmPattern` object from Tonal.js. It takes the total number of `steps` (pattern length) and the number of `beats` as arguments, returning the resulting pattern as an array of 1s and 0s.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/patterns.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nRhythmPattern.euclid(8, 3); // => [1, 0, 0, 1, 0, 0, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Reducing a Chord\nDESCRIPTION: Example of using `Chord.reduced` to find all chord names that are a subset of the given chord (containing fewer notes but all from the given chord).\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nChord.reduced(\"Cmaj7\"); // => [\"C5\", \"CM\"]\n```\n\n----------------------------------------\n\nTITLE: Handling Edge Cases in Chord Degrees\nDESCRIPTION: Demonstrates edge case behavior of the `Chord.degrees` output function.  Specifically, passing `0` to the degree function returns an empty string.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nc4m7(0); // => \"\"\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Note Input - Tonaljs - JavaScript\nDESCRIPTION: This snippet demonstrates the behavior of the `note` function when provided with an invalid or non-parsable string input, such as 'hello'. It shows that the function gracefully handles invalid input by returning an object with `empty: true` and an empty `name` property, rather than throwing an error.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pitch-note/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnote(\"hello\"); // => { empty: true, name: \"\" }\n```\n\n----------------------------------------\n\nTITLE: Detecting Scales with Specific Tonic Tonaljs Scale\nDESCRIPTION: Uses the `Scale.detect()` function with an array of notes and an options object specifying a desired tonic, overriding the default behavior.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nScale.detect([\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"], { tonic: \"A\" });\n```\n\n----------------------------------------\n\nTITLE: Enharmonic with Natural Notes\nDESCRIPTION: This snippet demonstrates that when calling `Note.enharmonic()` on a natural note name, the same value is returned. The octave is also preserved.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nNote.enharmonic(\"C\"); // => \"C\"\nNote.enharmonic(\"C4\"); // => \"C4\"\n```\n\n----------------------------------------\n\nTITLE: Importing Note Module in ES6\nDESCRIPTION: This snippet demonstrates how to import the `Note` module from the `@tonaljs/note` package using ES6 syntax.  This allows access to the note manipulation functions provided by the module.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/note/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Note } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Importing ScaleType Object (ES6)\nDESCRIPTION: Imports the ScaleType object from the 'tonal' library using ES6 module syntax. This is the standard way to import modules in modern JavaScript environments like browsers or Node.js with appropriate configurations.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale-type/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { ScaleType } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Importing Progression in ES6\nDESCRIPTION: Imports the `Progression` object from the `@tonaljs/progression` library using ES6 module syntax. This allows you to use the functions provided by the library in your JavaScript code. No dependencies beyond the `@tonaljs/progression` package itself.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/progression/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Progression } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Generating Empty Range without Tonic Tonaljs Scale\nDESCRIPTION: Demonstrates using the range function created by `Scale.rangeOf(\"pentatonic\")` (without a tonic). Calling the range function yields an empty array.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nrange(\"C4\", \"C5\"); // => []\n```\n\n----------------------------------------\n\nTITLE: Importing TimeSignature from Tonal.js (JavaScript)\nDESCRIPTION: This snippet imports the `TimeSignature` object from the `tonal` library. This dependency is required to use the time signature related functions.  This imports the TimeSignature class, enabling access to its methods for parsing and interacting with time signatures.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/time/signatures.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TimeSignature } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Getting Time Signature Details (Irrational String)\nDESCRIPTION: Calls the static `get()` method with a string representing an irrational time signature (e.g., \"12/10\"). The function parses the string and returns an object, identifying the type as 'irrational'.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/time-signature/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nTimeSignature.get(\"12/10\"); // =>\n// {\n//   empty: false,\n//   name: '12/10',\n//   type: 'irrational',\n//   upper: 12,\n//   lower: 10,\n//   additive: []\n// }\n```\n\n----------------------------------------\n\nTITLE: Handling Scale Range without Tonic Tonal.js JavaScript\nDESCRIPTION: This example shows that `Scale.rangeOf()` requires the scale name input to contain a tonic. If a scale type name without a tonic is provided, the function returned will produce an empty array when called, as it cannot determine the starting point or structure relative to a tonic.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/groups/scales.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst range = Scale.rangeOf(\"pentatonic\");\nrange(\"C4\", \"C5\"); // => []\n```\n\n----------------------------------------\n\nTITLE: Importing Voice Leading Module in ES6\nDESCRIPTION: Shows how to import the Voice Leading module from Tonal in an ES6 environment.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/leading.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VoiceLeading } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Importing TimeSignature (ES6 Single Module)\nDESCRIPTION: Imports the default export (the TimeSignature object) directly from the '@tonaljs/time-signature' package using ES6 import syntax. This is used when installing and importing the module as a standalone package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/time-signature/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport TimeSignature from \"@tonaljs/time-signature\";\n```\n\n----------------------------------------\n\nTITLE: Importing DurationValue as a single module\nDESCRIPTION: Shows how to import the DurationValue as a single module from the @tonaljs/duration-value package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/duration-value/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport DurationValue from \"@tonaljs/duration-value\";\n```\n\n----------------------------------------\n\nTITLE: Importing VoicingDictionary - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the VoicingDictionary from the tonal library in an ES6 environment.  It imports the `VoicingDictionary` object from the \"tonal\" module, allowing the program to utilize the chord voicing data.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/dictionary.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VoicingDictionary } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Using Tonal.js Library - ES5 Require\nDESCRIPTION: This snippet shows how to import modules from the tonal library using ES5 require syntax. It is functionally equivalent to the ES6 import, providing access to the tonal library's music theory functions.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Note, Scale } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Importing Voicing Module - Node.js\nDESCRIPTION: This snippet demonstrates how to import the `Voicing` module in a Node.js environment using the `require` function. It allows the user to import the necessary module from the `tonal` library and start using it.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Voicing } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Tonal Global Object in Javascript\nDESCRIPTION: This JavaScript snippet demonstrates how to access functionality from the 'tonal' library when it is loaded via a script tag in the browser. The entire library is available under the global 'Tonal' object. Requires the 'tonal' browser script to be loaded beforehand.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/index.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(Tonal.Key.minorKey(\"Ab\"));\n```\n\n----------------------------------------\n\nTITLE: Importing Chord Module (ES6)\nDESCRIPTION: Demonstrates how to import the Chord module using ES6 syntax. This is the preferred method for modern JavaScript projects.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Chord } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Importing ChordType module in ES6\nDESCRIPTION: Shows how to import the ChordType module using ES6 import syntax.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-type/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ChordType } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Importing tonaljs Key Module (ES6)\nDESCRIPTION: Demonstrates the standard ES6 import syntax to bring the `Key` object into scope from the \"tonal\" package, making its functions available for use in a module environment. Required dependency: \"tonal\" npm package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/key/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Key } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: ES6 Import Statement\nDESCRIPTION: Import the Interval object from the @tonaljs/interval package using ES6 syntax. This allows you to access the interval-related functions provided by the library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Interval } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Creating Numeric Ranges with Collection.range\nDESCRIPTION: The range function creates an array of consecutive integers from a start to end value. It works in both ascending and descending order.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/utils/collections.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.range(-2, 2); // => [-2, -1, 0, 1, 2]\nCollection.range(2, -2); // => [2, 1, 0, -1, -2]\n```\n\n----------------------------------------\n\nTITLE: Importing Scale Module Node.js Require\nDESCRIPTION: Demonstrates how to import the `Scale` object using Node.js `require` syntax from the main `tonal` package.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Scale } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Importing ScaleType Object (CommonJS)\nDESCRIPTION: Imports the ScaleType object from the 'tonal' library using Node.js CommonJS require syntax. This is typical for traditional Node.js applications.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/scale-type/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { ScaleType } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Importing TimeSignature (Node.js Tonal)\nDESCRIPTION: Imports the TimeSignature object from the main 'tonal' package using Node.js require syntax. This is suitable for server-side JavaScript environments.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/time-signature/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { TimeSignature } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Importing Voicing module using CommonJS require\nDESCRIPTION: Demonstrates how to import the Voicing class from @tonaljs/voicing using CommonJS require syntax, suitable for Node.js environments.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/voicings.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Voicing } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Importing VoicingDictionary - Node.js\nDESCRIPTION: This code shows how to import the VoicingDictionary using Node.js's `require` function. It requires the \"tonal\" module and destructures the `VoicingDictionary` object for use within the program. This allows the application to access and utilize chord voicing data from the tonal library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/voicings/dictionary.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { VoicingDictionary } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Node.js Require Statement\nDESCRIPTION: Import the Interval object from the @tonaljs/interval package using Node.js require syntax. This allows you to access the interval-related functions provided by the library in a Node.js environment.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/interval/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Interval } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Importing DurationValue in Node.js\nDESCRIPTION: Demonstrates how to import the DurationValue function from the @tonaljs/duration-value package in a Node.js environment using the require syntax.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/duration-value/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DurationValue } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Importing Pcset with CommonJS syntax in JavaScript\nDESCRIPTION: Shows how to import the Pcset object using CommonJS 'require' syntax, suitable for Node.js environments. Requires the 'tonal' package as a dependency. After import, functions under Pcset are accessible for managing pitch class sets.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/pcset/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Pcset } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Importing ChordType module in Node.js\nDESCRIPTION: Shows how to import the ChordType module using CommonJS require syntax in Node.js.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/chord-type/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ChordType } = require(\"tonal\");\n```\n\n----------------------------------------\n\nTITLE: Importing the RomanNumeral module in JavaScript\nDESCRIPTION: Shows how to import the RomanNumeral module from the Tonal library to work with Roman numeral chord symbols.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/site/content/docs/notation/roman-numerals.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RomanNumeral } from \"tonal\";\n```\n\n----------------------------------------\n\nTITLE: Deprecated Default Import of @tonaljs Modules in JavaScript\nDESCRIPTION: Shows the older syntax for importing @tonaljs modules using default exports, which is now deprecated. This example is provided to illustrate the recommended migration path to namespace imports. Usage of default imports is discouraged to avoid compatibility issues with recent @tonaljs package versions.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voicing-dictionary/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Importing TimeSignature Module (Deprecated)\nDESCRIPTION: This JavaScript code snippet demonstrates the deprecated way of importing the TimeSignature module from the @tonaljs/time-signature package using a default export.  It shows how to import the module before version 4.9.0. This approach is no longer recommended.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/time-signature/CHANGELOG.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport TimeSignature from \"@tonaljs/time-signature\";\n```\n\n----------------------------------------\n\nTITLE: Typo Fix and Breaking Change in Function Name\nDESCRIPTION: This snippet addresses impact fixes including renaming 'substract' to 'subtract' for clarity, and removing the 'NoInterval' interface, instead returning 'Interval' with an 'empty' property for invalid intervals to standardize error handling within the library.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/CHANGELOG.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Corrected typo:\n// 'substract' -> 'subtract'\n// Removed 'NoInterval' interface, now returns 'Interval' with 'empty' property on invalid parsing.\n```\n\n----------------------------------------\n\nTITLE: Importing Note Module via Default Import in JavaScript\nDESCRIPTION: This snippet demonstrates the deprecated approach of importing the Note module from the @tonaljs/note package using a default import. Its usage is discouraged from version 5.1.0 onwards due to updates in export structure. The syntax assumes that the Note symbol is exported as default, which is no longer the case. No additional dependencies are required except for a compatible version of @tonaljs/note installed in the project.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/voice-leading/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Running Tonal.js Tests\nDESCRIPTION: This snippet shows how to run the test suite for the Tonal.js project using the `npm run test:ci` command. It is a crucial step to ensure that any changes or additions do not introduce regressions and that the project's functionality remains intact before submitting a pull request.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/docs/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:ci\n```\n\n----------------------------------------\n\nTITLE: Importing Note Module with Deprecated Default Export in JavaScript\nDESCRIPTION: Imports the Note module from @tonaljs/note using the default export syntax, which was previously common but is now deprecated in newer versions. This approach does not require any special setup other than having the @tonaljs/note package installed. No parameters are used; the entire Note functionality is available as a default import. This form is not recommended for versions >=4.9.0, as future support may be removed.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/roman-numeral/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Note from \"@tonaljs/note\";\n```\n\n----------------------------------------\n\nTITLE: Dependencies Updates Across Versions\nDESCRIPTION: This snippet notes that multiple dependencies in the tonal library were updated across versions, ensuring compatibility with newer modules, bug fixes, and feature support. No specific code present, but signifies ongoing maintenance.\nSOURCE: https://github.com/tonaljs/tonal/blob/main/packages/tonal/CHANGELOG.md#_snippet_9\n\n"
  }
]