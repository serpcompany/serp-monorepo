[
  {
    "owner": "timescale",
    "repo": "timescaledb-ts",
    "content": "TITLE: Creating a Hypertable with TimescaleDB TypeORM\nDESCRIPTION: This code snippet demonstrates how to define a hypertable using the `@Hypertable` decorator provided by the `@timescaledb/typeorm` plugin. It defines the `PageLoad` entity as a hypertable, specifying compression settings and columns.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryColumn } from 'typeorm';\nimport { Hypertable, TimeColumn } from '@timescaledb/typeorm';\n\n@Entity('page_loads')\n@Hypertable({\n  compression: {\n    compress: true,\n    compress_orderby: 'time',\n    compress_segmentby: 'user_agent',\n    policy: {\n      schedule_interval: '7 days',\n    },\n  },\n})\nexport class PageLoad {\n  @PrimaryColumn({ name: 'user_agent', type: 'varchar' })\n  userAgent!: string;\n\n  @TimeColumn()\n  time!: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hypertable with TypeORM decorator\nDESCRIPTION: This code snippet demonstrates how to define a Hypertable using the @Hypertable decorator from the @timescaledb/typeorm package in TypeORM. It also shows the use of @TimeColumn decorator to define a time column.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryColumn } from 'typeorm';\n+ import { Hypertable, TimeColumn } from '@timescaledb/typeorm';\n\n+ @Hypertable({ ... })\n@Entity('page_loads')\nexport class PageLoad {\n  @PrimaryColumn({ type: 'varchar' })\n  user_agent!: string;\n\n+  @TimeColumn()\n  time!: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Continuous Aggregate with TimescaleDB TypeORM\nDESCRIPTION: This code demonstrates how to define a continuous aggregate (materialized view) using the `@ContinuousAggregate`, `@AggregateColumn`, and `@BucketColumn` decorators. It aggregates data from the `PageLoad` hypertable into hourly summaries.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViewColumn } from 'typeorm';\nimport { ContinuousAggregate, AggregateColumn, BucketColumn } from '@timescaledb/typeorm';\nimport { PageLoad } from './PageLoad';\n\n@ContinuousAggregate(PageLoad, {\n  name: 'hourly_page_views',\n  bucket_interval: '1 hour',\n  refresh_policy: {\n    start_offset: '3 days',\n    end_offset: '1 hour',\n    schedule_interval: '1 hour',\n  },\n})\nexport class HourlyPageViews {\n  @BucketColumn({\n    source_column: 'time',\n  })\n  bucket!: Date;\n\n  @AggregateColumn({\n    type: 'count',\n  })\n  total_views!: number;\n\n  @AggregateColumn({\n    type: 'unique_count',\n    column: 'user_agent',\n  })\n  unique_users!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Candlestick Data with TimescaleDB TypeORM\nDESCRIPTION: This code demonstrates how to query candlestick data using the `getCandlesticks` method. It retrieves candlestick data for a specified time range and ticker symbol, configured with specific time, price, and volume columns.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst repository = AppDataSource.getRepository(StockPrice);\n\nconst candlesticks = await repository.getCandlesticks({\n  timeRange: {\n    start: new Date('2025-01-01'),\n    end: new Date('2025-01-02'),\n  },\n  config: {\n    time_column: 'timestamp',\n    price_column: 'price',\n    volume_column: 'volume',\n    bucket_interval: '1 hour',\n  },\n  where: {\n    symbol: 'AAPL',\n  },\n});\n\nconsole.log(candlesticks);\n// Output:\n// [\n//   {\n//     bucket_time: \"2025-01-01T00:00:00.000Z\",\n//     open: 185.25,\n//     high: 186.64,\n//     low: 183.34,\n//     close: 184.87,\n//     open_time: \"2025-01-01T00:02:15.000Z\",\n//     high_time: \"2025-01-01T00:45:12.000Z\",\n//     low_time: \"2025-01-01T00:15:33.000Z\",\n//     close_time: \"2025-01-01T00:59:45.000Z\",\n//     volume: 2589100,\n//     vwap: 184.95\n//   },\n//   ...\n// ]\n```\n\n----------------------------------------\n\nTITLE: Managing Hypertables: Create, Drop, Inspect SQL Generation in Typescript\nDESCRIPTION: This snippet showcases how to create, drop, and inspect hypertables using the @timescaledb/core package in TypeScript. It demonstrates generating SQL for each of these operations, including defining compression policies.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/core/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst hypertable = TimescaleDB.createHypertable('table_name', {\n  by_range: {\n    column_name: 'time',\n  },\n  compression: {\n    compress: true,\n    compress_orderby: 'time',\n    compress_segmentby: 'device_id',\n    policy: {\n      schedule_interval: '7 days',\n    },\n  },\n});\n\n// Generate creation SQL\nconst createSql = hypertable.up().build();\n\n// Generate drop SQL\nconst dropSql = hypertable.down().build();\n\n// Check if hypertable exists\nconst checkSql = hypertable.inspect().build();\n```\n\n----------------------------------------\n\nTITLE: API Endpoints for Node.js TimescaleDB App\nDESCRIPTION: This snippet displays the API endpoints for interacting with the Node.js TimescaleDB application, including recording page views, getting statistics for a specified time range, and checking the compression status.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/examples/node-sequelize/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Record page view\nPOST /api/pageview\n\n# Get stats for time range\nGET /api/stats?start=2025-01-01&end=2025-01-02\n\n# Check compression status\nGET /api/compression\n```\n\n----------------------------------------\n\nTITLE: Define EnergyMetric Hypertable with TypeORM\nDESCRIPTION: This code defines the `EnergyMetric` entity as a hypertable in TimescaleDB using TypeORM. It includes columns for meter ID, timestamp, consumption, generation, voltage, and temperature. The hypertable is configured with compression settings including order and segment by specifications, and a compression policy to schedule compression.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/energy-data.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryColumn, Column } from 'typeorm';\nimport { Hypertable, TimeColumn } from '@timescaledb/typeorm';\n\n@Entity('energy_metrics')\n@Hypertable({\n  compression: {\n    compress: true,\n    compress_orderby: 'timestamp',\n    compress_segmentby: 'meter_id',\n    policy: {\n      schedule_interval: '7 days',\n    },\n  },\n})\nexport class EnergyMetric {\n  @PrimaryColumn({ type: 'varchar' })\n  meter_id!: string;\n\n  @TimeColumn()\n  timestamp!: Date;\n\n  @Column({ type: 'float' })\n  consumption_kwh!: number;\n\n  @Column({ type: 'float' })\n  generation_kwh!: number; // For solar/wind generation\n\n  @Column({ type: 'float' })\n  voltage!: number;\n\n  @Column({ type: 'float', nullable: true })\n  temperature!: number; // Ambient temperature for correlation\n}\n```\n\n----------------------------------------\n\nTITLE: Identify Peak Usage Periods using Time Bucketing\nDESCRIPTION: This code snippet uses the `getTimeBucket` method to identify peak consumption periods from the `EnergyMetric` hypertable. It queries for 15-minute intervals within a specified time range, calculates the sum of consumption and the average temperature, and filters results based on a high usage threshold (consumption > 10) and a specific meter ID ('building-a').\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/energy-data.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst peakUsagePeriods = await repository.getTimeBucket({\n  timeRange: {\n    start: new Date('2025-01-01'),\n    end: new Date('2025-01-02'),\n  },\n  bucket: {\n    interval: '15 minutes',\n    metrics: [\n      { type: 'sum', column: 'consumption_kwh', alias: 'usage' },\n      { type: 'avg', column: 'temperature', alias: 'avg_temp' },\n    ],\n  },\n  where: {\n    consumption_kwh: { '>': 10 }, // High usage threshold\n    meter_id: 'building-a',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying 1-Minute Candlesticks with TypeORM\nDESCRIPTION: This code demonstrates querying the 1-minute candlestick data (`StockPrice1M`) using TypeORM's query builder. It filters the data by bucket time range and symbol, orders the results by bucket time, and retrieves the results as an array of `StockPrice1M` entities.  It assumes `AppDataSource` is properly initialized elsewhere.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/candlesticks.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppDataSource } from './data-source';\nimport { StockPrice1M } from './models/StockPrice1M';\n\nasync function get1MinuteCandlesticks() {\n  const repository = AppDataSource.getRepository(StockPrice1M);\n\n  const candlesticks = await repository\n    .createQueryBuilder()\n    .where('bucket >= :start', { start: new Date('2025-01-01') })\n    .andWhere('bucket < :end', { end: new Date('2025-01-02') })\n    .andWhere('symbol = :symbol', { symbol: 'AAPL' })\n    .orderBy('bucket', 'ASC')\n    .getMany();\n\n  console.log(JSON.stringify(candlesticks, null, 2));\n  // Example output:\n  // [\n  //   {\n  //     \"bucket\": \"2025-01-01T00:00:00.000Z\",\n  //     \"symbol\": \"AAPL\",\n  //     \"candlestick\": {\n  //       \"open\": 150.25,\n  //       \"high\": 152.30,\n  //       \"low\": 149.80,\n  //       \"close\": 151.45,\n  //       \"volume\": 1250000,\n  //       \"open_time\": \"2025-01-01T00:00:15.000Z\",\n  //       \"close_time\": \"2025-01-01T00:59:45.000Z\"\n  //     }\n  //   },\n  //   ...\n  // ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Candlestick Entity with TimescaleDB TypeORM\nDESCRIPTION: This code defines a `StockPrice` entity as a hypertable to store stock price data. It includes columns for ticker symbol, timestamp, price, and volume.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from 'typeorm';\nimport { Hypertable, TimeColumn } from '@timescaledb/typeorm';\n\n@Entity('stock_prices')\n@Hypertable()\nexport class StockPrice {\n  @PrimaryColumn({ type: 'varchar' })\n  tickerSymbol: string;\n\n  @TimeColumn()\n  timestamp: Date;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price: number;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  volume: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Analyze Energy Usage with Time Bucketing\nDESCRIPTION: This TypeScript function `analyzeEnergyUsage` demonstrates how to perform time bucketing analysis on the `EnergyMetric` hypertable using TypeORM. It retrieves hourly energy usage data within a specified time range, calculating the sum of consumption and generation, the average voltage, and the peak consumption. The results are then logged to the console.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/energy-data.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function analyzeEnergyUsage() {\n  const repository = AppDataSource.getRepository(EnergyMetric);\n\n  const hourlyUsage = await repository.getTimeBucket({\n    timeRange: {\n      start: new Date('2025-01-01'),\n      end: new Date('2025-01-02'),\n    },\n    bucket: {\n      interval: '1 hour',\n      metrics: [\n        { type: 'sum', column: 'consumption_kwh', alias: 'total_consumption' },\n        { type: 'sum', column: 'generation_kwh', alias: 'total_generation' },\n        { type: 'avg', column: 'voltage', alias: 'avg_voltage' },\n        { type: 'max', column: 'consumption_kwh', alias: 'peak_consumption' },\n      ],\n    },\n  });\n\n  console.log('Hourly Energy Usage:', hourlyUsage);\n  // [\n  //   {\n  //     interval: '2025-01-01T00:00:00Z',\n  //     total_consumption: 245.6,    // kWh\n  //     total_generation: 12.8,      // kWh from solar\n  //     avg_voltage: 120.2,          // V\n  //     peak_consumption: 12.4       // kWh\n  //   },\n  //   ...\n  // ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Continuous Aggregate with TimescaleDB in Typescript\nDESCRIPTION: Demonstrates how to create a continuous aggregate using the @timescaledb/core package. It defines the aggregate with bucket intervals, time column, aggregates, and a refresh policy.  The code generates SQL for creating and dropping the continuous aggregate.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/core/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst aggregate = TimescaleDB.createContinuousAggregate('daily_summary', 'raw_data', {\n  bucket_interval: '1 day',\n  time_column: 'time',\n  aggregates: {\n    avg_temp: {\n      type: 'avg',\n      column: 'temperature',\n      column_alias: 'average_temperature',\n    },\n    max_temp: {\n      type: 'max',\n      column: 'temperature',\n      column_alias: 'max_temperature',\n    },\n  },\n  refresh_policy: {\n    start_offset: '3 days',\n    end_offset: '1 hour',\n    schedule_interval: '1 hour',\n  },\n});\n\n// Generate creation SQL\nconst createSql = aggregate.up().build();\n\n// Generate drop SQL\nconst dropSql = aggregate.down().build();\n```\n\n----------------------------------------\n\nTITLE: Defining Stock Price Entity with Hypertable\nDESCRIPTION: This code defines a `StockPrice` entity using TypeORM and the `@timescaledb/typeorm` package. It annotates the entity as a hypertable with compression settings. The `symbol` is the primary key, `timestamp` is the time column, and `price` and `volume` are decimal columns.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/candlesticks.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column } from 'typeorm';\nimport { Hypertable, TimeColumn } from '@timescaledb/typeorm';\n\n@Entity('stock_prices')\n@Hypertable({\n  compression: {\n    compress: true,\n    compress_orderby: 'timestamp',\n    compress_segmentby: 'symbol',\n    policy: {\n      schedule_interval: '7 days',\n    },\n  },\n})\nexport class StockPrice {\n  @PrimaryColumn({ type: 'varchar' })\n  symbol!: string;\n\n  @TimeColumn()\n  timestamp!: Date;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price!: number;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  volume!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TimescaleDB SQL from TypeORM Entity\nDESCRIPTION: This SQL code demonstrates the TimescaleDB SQL that is automatically generated from the TypeORM entity defined in the previous snippet. It creates a hypertable named `page_loads` partitioned by the `time` column and sets compression options. This highlights the automatic migration feature.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/design_decisions/auto-migrations.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT create_hypertable('page_loads', by_range('time'));\nALTER TABLE \"page_loads\" SET (timescaledb.compress, timescaledb.compress_orderby = \"time\");\n```\n\n----------------------------------------\n\nTITLE: Defining CryptoPrice Entity with TypeORM and TimescaleDB\nDESCRIPTION: This TypeScript code defines the `CryptoPrice` entity using TypeORM and TimescaleDB's TypeORM integration. It specifies the entity name, configures it as a hypertable with compression policies, and defines columns for symbol, timestamp, price, and volume. This entity represents the structure of the data stored in TimescaleDB.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryColumn, Column } from 'typeorm';\nimport { Hypertable, TimeColumn } from '@timescaledb/typeorm';\n\n@Entity('crypto_prices')\n@Hypertable({\n  compression: {\n    compress: true,\n    compress_orderby: 'timestamp',\n    compress_segmentby: 'symbol',\n    policy: {\n      schedule_interval: '7 days',\n    },\n  },\n})\nexport class CryptoPrice {\n  @PrimaryColumn({ type: 'varchar' })\n  symbol!: string;\n\n  @TimeColumn()\n  timestamp!: Date;\n\n  @Column({ type: 'decimal', precision: 18, scale: 8 })\n  price!: number;\n\n  @Column({ type: 'decimal', precision: 18, scale: 8 })\n  volume!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Rollup with TimescaleDB TypeORM\nDESCRIPTION: This code snippet demonstrates how to create a rollup (hierarchical continuous aggregate) using the `@Rollup` and `@RollupColumn` decorators. It aggregates hourly statistics from the `HourlyPageViews` continuous aggregate into daily summaries.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rollup, RollupColumn, BucketColumn } from '@timescaledb/typeorm';\n\n@Rollup(HourlyPageViews, {\n  name: 'daily_page_stats',\n  bucket_interval: '1 day',\n  refresh_policy: {\n    start_offset: '30 days',\n    end_offset: '1 day',\n    schedule_interval: '1 day',\n  },\n})\nexport class DailyPageStats {\n  @BucketColumn({\n    source_column: 'bucket',\n  })\n  bucket!: Date;\n\n  @RollupColumn({\n    type: 'sum',\n    source_column: 'total_views',\n  })\n  daily_total!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Hypertable Creation using the Builder API\nDESCRIPTION: This code shows how to manually create a hypertable using the TimescaleDB builder API. It allows for more fine-grained control over the hypertable creation process and can be used as a workaround for limitations in the automatic migration feature.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/design_decisions/auto-migrations.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst hypertable = TimescaleDB.createHypertable('my_table', {\n  by_range: { column_name: 'time' },\n});\nconst sql = hypertable.up().build();\nawait queryRunner.query(sql);\n```\n\n----------------------------------------\n\nTITLE: Creating a Hypertable with @timescaledb/core in Typescript\nDESCRIPTION: Demonstrates how to create a hypertable using the @timescaledb/core package in TypeScript. It imports the `TimescaleDB` class, defines a hypertable with a range partition, and generates the SQL statement to create it. The generated SQL is then printed as a comment.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/core/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TimescaleDB } from '@timescaledb/core';\n\n// Create a hypertable\nconst hypertable = TimescaleDB.createHypertable('measurements', {\n  by_range: { column_name: 'time' },\n});\n\n// Generate SQL to create the hypertable\nconst sql = hypertable.up().build();\n// SELECT create_hypertable('measurements', by_range('time'));\n```\n\n----------------------------------------\n\nTITLE: Migration Integration with @timescaledb/core in Typescript\nDESCRIPTION: Illustrates how to integrate @timescaledb/core with migration systems. It includes examples of creating and dropping TimescaleDB extensions and hypertables within migration files.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/core/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// In a migration file\nimport { TimescaleDB } from '@timescaledb/core';\n\nexport async function up(queryRunner) {\n  // Create extension\n  const extension = TimescaleDB.createExtension();\n  await queryRunner.query(extension.up().build());\n\n  // Create hypertable\n  const hypertable = TimescaleDB.createHypertable('measurements', {\n    by_range: { column_name: 'time' },\n  });\n  await queryRunner.query(hypertable.up().build());\n}\n\nexport async function down(queryRunner) {\n  // Drop hypertable\n  const hypertable = TimescaleDB.createHypertable('measurements', {\n    by_range: { column_name: 'time' },\n  });\n  await queryRunner.query(hypertable.down().build());\n\n  // Drop extension\n  const extension = TimescaleDB.createExtension();\n  await queryRunner.query(extension.down().build());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Hypertable Entity with TypeORM and TimescaleDB\nDESCRIPTION: This code snippet defines a TypeORM entity `PageLoad` and uses the `@Hypertable` decorator to define TimescaleDB hypertable properties, such as range partitioning by the `time` column and compression settings. This configuration triggers automatic generation of TimescaleDB SQL during migrations.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/design_decisions/auto-migrations.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity('page_loads')\n@Hypertable({\n  by_range: { column_name: 'time' },\n  compression: {\n    compress: true,\n    compress_orderby: 'time',\n  },\n})\nexport class PageLoad {\n  @PrimaryColumn({ type: 'timestamp' })\n  time!: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Compression Stats with TimescaleDB TypeORM\nDESCRIPTION: This code snippet shows how to retrieve compression statistics for a hypertable using the `getCompressionStats` method. It returns information about the total chunks, compressed chunks, and the number of compressed chunks.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppDataSource } from './data-source';\nimport { PageLoad } from './models/PageLoad';\n\nconst repository = AppDataSource.getRepository(PageLoad);\nconst stats = await repository.getCompressionStats();\n\nconsole.log(stats);\n// {\n//   total_chunks: 100,\n//   compressed_chunks: 50,\n//   number_compressed_chunks: 10,\n// }\n```\n\n----------------------------------------\n\nTITLE: Create Continuous Aggregate with TypeORM\nDESCRIPTION: This TypeScript code defines a continuous aggregate `DailyEnergyStats` for the `EnergyMetric` hypertable using TypeORM. It calculates daily energy statistics such as total consumption, total generation, peak consumption, and average temperature. The refresh policy is set to start 2 days in the past, end 1 hour in the past, and refresh every hour.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/energy-data.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ContinuousAggregate, AggregateColumn, BucketColumn } from '@timescaledb/typeorm';\n\n@ContinuousAggregate(EnergyMetric, {\n  name: 'daily_energy_stats',\n  bucket_interval: '1 day',\n  refresh_policy: {\n    start_offset: '2 days',\n    end_offset: '1 hour',\n    schedule_interval: '1 hour',\n  },\n})\nexport class DailyEnergyStats {\n  @BucketColumn({\n    source_column: 'timestamp',\n  })\n  bucket!: Date;\n\n  @AggregateColumn({\n    type: 'sum',\n    column: 'consumption_kwh',\n  })\n  total_consumption!: number;\n\n  @AggregateColumn({\n    type: 'sum',\n    column: 'generation_kwh',\n  })\n  total_generation!: number;\n\n  @AggregateColumn({\n    type: 'max',\n    column: 'consumption_kwh',\n  })\n  peak_consumption!: number;\n\n  @AggregateColumn({\n    type: 'avg',\n    column: 'temperature',\n  })\n  avg_temperature!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Running TypeORM Migrations with TimescaleDB\nDESCRIPTION: This command executes TypeORM migrations, which automatically create and update TimescaleDB-specific objects (hypertables, continuous aggregates, etc.) in the database.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm-ts-node-commonjs migration:run -d src/data-source.ts\n```\n\n----------------------------------------\n\nTITLE: Querying a Continuous Aggregate in TimescaleDB TypeORM\nDESCRIPTION: This code shows how to query a continuous aggregate (materialized view) like a regular entity using TypeORM's `createQueryBuilder`. It retrieves hourly statistics for a specified time range, ordered by bucket time.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst hourlyStats = await AppDataSource.getRepository(HourlyPageViews)\n  .createQueryBuilder()\n  .where('bucket >= :start', { start })\n  .andWhere('bucket <= :end', { end })\n  .orderBy('bucket', 'DESC')\n  .getMany();\n```\n\n----------------------------------------\n\nTITLE: Setup and Run Node.js TimescaleDB App\nDESCRIPTION: This snippet shows the commands needed to setup, build, migrate, run and test the Node.js TimescaleDB application. It involves copying environment variables, installing dependencies, building the application, running database migrations, and starting the server or executing tests.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/examples/node-sequelize/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Setup\ncp .env.example .env  # Update DATABASE_URL\npnpm install\npnpm build\npnpm migrate\n\n# Run\npnpm start\n\n# or\n\n# Test\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Generating 1-Minute Candlesticks with Continuous Aggregate\nDESCRIPTION: This code creates a continuous aggregate for 1-minute candlesticks based on the `StockPrice` entity. It uses `@timescaledb/typeorm` decorators to define the continuous aggregate, bucket interval, refresh policy, bucket column, and candlestick column. The `Candlestick` type is imported from `@timescaledb/schemas`.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/candlesticks.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ContinuousAggregate, BucketColumn, CandlestickColumn } from '@timescaledb/typeorm';\nimport { StockPrice } from './StockPrice';\nimport { Candlestick } from '@timescaledb/schemas';\n\n@ContinuousAggregate(StockPrice, {\n  name: 'stock_candlesticks_1m',\n  bucket_interval: '1 minute',\n  refresh_policy: {\n    start_offset: '1 day',\n    end_offset: '1 minute',\n    schedule_interval: '1 minute',\n  },\n})\nexport class StockPrice1M {\n  @BucketColumn({\n    source_column: 'timestamp',\n  })\n  bucket!: Date;\n\n  @PrimaryColumn()\n  symbol!: string;\n\n  @CandlestickColumn({\n    time_column: 'timestamp',\n    price_column: 'price',\n    volume_column: 'volume',\n  })\n  candlestick!: Candlestick;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Project with pnpm\nDESCRIPTION: These commands initialize a new TypeScript project using pnpm. They create a directory, initialize a pnpm project, and add necessary dependencies such as TypeScript, TypeORM, and TimescaleDB's TypeORM integration. These dependencies are required to interact with TimescaleDB.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir crypto-tracker\ncd crypto-tracker\npnpm init\npnpm add -D typescript @types/node ts-node\npnpm add typeorm @timescaledb/typeorm reflect-metadata pg dotenv\n```\n\n----------------------------------------\n\nTITLE: API Usage for Pageview and Stats\nDESCRIPTION: This snippet demonstrates the API endpoints for recording a page view and retrieving statistics within a specific time range. It outlines the use of POST for recording page views and GET for retrieving statistics using start and end parameters.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/examples/node-typeorm/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Record page view\nPOST /api/pageview\n\n# Get stats for time range\nGET /api/stats?start=2025-01-01&end=2025-01-02\n\n# Check compression status\nGET /api/compression\n```\n\n----------------------------------------\n\nTITLE: Creating the 'crypto' Database\nDESCRIPTION: SQL command to create a database named 'crypto' in PostgreSQL. This database will store cryptocurrency data managed by TimescaleDB and TypeORM.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE crypto;\n```\n\n----------------------------------------\n\nTITLE: Time Bucket Queries with @timescaledb/core in Typescript\nDESCRIPTION: Demonstrates how to perform time bucket queries using @timescaledb/core. It includes examples of basic time bucket queries and queries with where clause filtering. The code also shows how to define metrics and specify date ranges for the queries.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/core/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst hypertable = TimescaleDB.createHypertable('measurements', {\n  by_range: { column_name: 'time' },\n});\n\n// Basic time bucket query\nconst { sql, params } = hypertable\n  .timeBucket({\n    interval: '1 hour',\n    metrics: [\n      { type: 'count', alias: 'total' },\n      { type: 'distinct_count', column: 'device_id', alias: 'unique_devices' },\n    ],\n  })\n  .build({\n    range: {\n      start: new Date('2025-01-01'),\n      end: new Date('2025-02-01'),\n    },\n  });\n\n// With where clause filtering\nconst { sql: filteredSql, params: filteredParams } = hypertable\n  .timeBucket({\n    interval: '1 hour',\n    metrics: [\n      { type: 'count', alias: 'total' },\n      { type: 'distinct_count', column: 'device_id', alias: 'unique_devices' },\n    ],\n  })\n  .build({\n    range: {\n      start: new Date('2025-01-01'),\n      end: new Date('2025-02-01'),\n    },\n    where: {\n      device_id: 'sensor-123', // Simple equality\n      temperature: { '>': 25 }, // Comparison operator\n      status: { IN: ['active', 'warning'] }, // IN clause\n      location: { 'NOT IN': ['zone-a', 'zone-b'] }, // NOT IN clause\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL and Creating Database\nDESCRIPTION: These commands connect to the PostgreSQL server using psql and create a new database named 'crypto'. This database will be used to store the cryptocurrency price data managed by TimescaleDB and TypeORM.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npsql postgres://postgres:password@localhost:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Setting up TypeORM DataSource\nDESCRIPTION: This TypeScript code sets up the TypeORM DataSource. It imports necessary modules, specifies the database type, URL, synchronization settings, logging, entities, and migrations. This DataSource is used to establish a connection to the TimescaleDB database and manage entities.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'reflect-metadata';\nimport '@timescaledb/typeorm';\nimport { DataSource } from 'typeorm';\nimport { CryptoPrice } from './models/CryptoPrice';\n\nexport const AppDataSource = new DataSource({\n  type: 'postgres',\n  url: process.env.DATABASE_URL,\n  synchronize: false,\n  logging: true,\n  entities: [CryptoPrice],\n  migrations: ['migrations/*.ts'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring .env file for Database URL\nDESCRIPTION: This `.env` file defines the database connection URL. It specifies the database user, password, host, port, and database name. This URL is used by TypeORM to connect to the TimescaleDB database.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=postgres://postgres:password@localhost:5432/crypto\n```\n\n----------------------------------------\n\nTITLE: Querying Candlestick Data with TypeORM\nDESCRIPTION: This TypeScript code demonstrates querying candlestick data using TypeORM and TimescaleDB's extensions. It initializes the DataSource, inserts sample data, and uses `getCandlesticks` to query hourly candlestick data for a specific time range. The results are then logged to the console.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppDataSource } from './data-source';\nimport { CryptoPrice } from './models/CryptoPrice';\nimport { Between } from 'typeorm';\n\nasync function analyzeBTC() {\n  await AppDataSource.initialize();\n\n  const repository = AppDataSource.getRepository(CryptoPrice);\n\n  // First, let's insert some sample data\n  await repository.save([\n    { symbol: 'BTC', timestamp: new Date('2025-01-01T00:00:00Z'), price: 42000.0, volume: 1.5 },\n    { symbol: 'BTC', timestamp: new Date('2025-01-01T00:15:00Z'), price: 42100.0, volume: 2.0 },\n    { symbol: 'BTC', timestamp: new Date('2025-01-01T00:30:00Z'), price: 41900.0, volume: 1.8 },\n    { symbol: 'BTC', timestamp: new Date('2025-01-01T00:45:00Z'), price: 42200.0, volume: 2.2 },\n  ]);\n\n  // Query hourly candlesticks\n  const candlesticks = await repository.getCandlesticks({\n    timeRange: {\n      start: new Date('2025-01-01T00:00:00Z'),\n      end: new Date('2025-01-02T00:00:00Z'),\n    },\n    config: {\n      price_column: 'price',\n      volume_column: 'volume',\n      bucket_interval: '1 hour',\n    },\n    where: {\n      symbol: 'BTC',\n    },\n  });\n\n  console.log(JSON.stringify(candlesticks, null, 2));\n\n  await AppDataSource.destroy();\n}\n\nanalyzeBTC().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Installing TimescaleDB TypeORM package with npm\nDESCRIPTION: This command installs the TypeORM and @timescaledb/typeorm packages using npm. It allows to use TimescaleDB features with TypeORM.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install typeorm @timescaledb/typeorm\n```\n\n----------------------------------------\n\nTITLE: Querying with getTimeBucket in TimescaleDB TypeORM\nDESCRIPTION: This code demonstrates how to use the `getTimeBucket` method to perform time bucketing queries on a hypertable. It retrieves aggregated statistics (count and distinct user count) for a specified time range and user agent.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppDataSource } from './data-source';\nimport { PageLoad } from './models/PageLoad';\n\nconst repository = AppDataSource.getRepository(PageLoad);\n\nconst stats = await repository.getTimeBucket({\n  timeRange: {\n    start,\n    end,\n  },\n  bucket: {\n    interval: '1 hour',\n    metrics: [\n      { type: 'count', alias: 'count' },\n      { type: 'distinct_count', column: 'user_agent', alias: 'unique_users' },\n    ],\n  },\n  where: {\n    user_agent: 'Mozilla/5.0',\n  },\n});\n\nconsole.log(stats);\n// [\n//   { interval: '2021-01-01T00:00:00Z', count: 10, unique_users: 5 },\n//   { interval: '2021-01-01T01:00:00Z', count: 20, unique_users: 10 },\n//   { interval: '2021-01-01T02:00:00Z', count: 30, unique_users: 15 },\n//   ...\n// ]\n```\n\n----------------------------------------\n\nTITLE: Managing Compression with @timescaledb/core in Typescript\nDESCRIPTION: Shows how to manage compression settings for a hypertable using @timescaledb/core. It creates a hypertable with compression enabled and defines compression statistics.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/core/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst hypertable = TimescaleDB.createHypertable('measurements', {\n  by_range: { column_name: 'time' },\n  compression: {\n    compress: true,\n    compress_orderby: 'time',\n    compress_segmentby: 'device_id',\n  },\n});\n\n// Get compression statistics\nconst statsSql = hypertable\n  .compression()\n  .stats({\n    select: {\n      total_chunks: true,\n      compressed_chunks: true,\n    },\n  })\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Creating Candlestick Aggregates with TimescaleDB in Typescript\nDESCRIPTION: Demonstrates how to create candlestick aggregates using @timescaledb/core. It shows how to define the aggregate with time, price, and volume columns, and generate SQL for querying the aggregate with range and where clause filtering.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/core/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst candlestick = TimescaleDB.createCandlestickAggregate('stock_prices', {\n  time_column: 'timestamp',\n  price_column: 'price',\n  volume_column: 'volume', // optional\n  bucket_interval: '1 hour', // defaults to '1 hour'\n});\n\n// Basic candlestick query\nconst { sql, params } = candlestick.build({\n  range: {\n    start: new Date('2025-01-01'),\n    end: new Date('2025-01-02'),\n  },\n});\n\n// With where clause filtering\nconst { sql: filteredSql, params: filteredParams } = candlestick.build({\n  range: {\n    start: new Date('2025-01-01'),\n    end: new Date('2025-01-02'),\n  },\n  where: {\n    symbol: 'AAPL',\n    volume: { '>': 1000000 },\n    exchange: { IN: ['NYSE', 'NASDAQ'] },\n  },\n});\n\n// Returns candlestick data:\n// bucket_time, open, high, low, close, volume, vwap, etc.\nconst results = await query(sql, params);\n```\n\n----------------------------------------\n\nTITLE: TimescaleDB Docker Service Configuration\nDESCRIPTION: This YAML snippet configures a TimescaleDB service within a GitHub Actions workflow. It defines the image to use, sets the POSTGRES_PASSWORD environment variable, and maps port 5432. This ensures a consistent and isolated database environment for testing.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/TESTING.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  timescaledb:\n    image: timescale/timescaledb-ha:pg17\n    env:\n      POSTGRES_PASSWORD: password\n    ports:\n      - 5432:5432\n```\n\n----------------------------------------\n\nTITLE: Create Continuous Aggregate View\nDESCRIPTION: This TypeScript code snippet shows how to query data from a continuous aggregate view using TypeORM. It retrieves data within a specific time range. The `AppDataSource` is assumed to be initialized and connected to the database, and `HourlyMetrics` is an entity representing the continuous aggregate view.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/TESTING.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nit('should create continuous aggregate view', async () => {\n  await AppDataSource.getRepository(HourlyMetrics)\n    .createQueryBuilder()\n    .where('bucket >= :start', { start: startDate })\n    .andWhere('bucket < :end', { end: endDate })\n    .getMany();\n});\n```\n\n----------------------------------------\n\nTITLE: Run TypeScript Tests in Example Project\nDESCRIPTION: This command runs the test suite in the example project using pnpm. It assumes the migrations have been run and the environment variables are configured correctly.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/TESTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Querying 1-Hour Rollup Candlesticks with TypeORM\nDESCRIPTION: This code demonstrates querying the 1-hour rollup candlestick data (`StockPrice1H`) using TypeORM's query builder. It filters the data by bucket time range and symbol, orders the results by bucket time, and retrieves the results as an array of `StockPrice1H` entities. It depends on `AppDataSource` being initialized elsewhere.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/candlesticks.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppDataSource } from './data-source';\nimport { StockPrice1H } from './models/StockPrice1H';\n\nasync function get1HourCandlesticks() {\n  const repository = AppDataSource.getRepository(StockPrice1H);\n\n  const candlesticks = await repository\n    .createQueryBuilder()\n    .where('bucket >= :start', { start: new Date('2025-01-01') })\n    .andWhere('bucket < :end', { end: new Date('2025-02-01') })\n    .andWhere('symbol = :symbol', { symbol: 'AAPL' })\n    .orderBy('bucket', 'ASC')\n    .getMany();\n\n  console.log(JSON.stringify(candlesticks, null, 2));\n  // Example output:\n  // [\n  //   {\n  //     \"bucket\": \"2025-01-01T00:00:00.000Z\",\n  //     \"symbol\": \"AAPL\",\n  //     \"candlestick\": {\n  //       \"open\": 150.25,\n  //       \"high\": 155.60,\n  //       \"low\": 149.50,\n  //       \"close\": 153.20,\n  //       \"volume\": 8750000,\n  //       \"open_time\": \"2025-01-01T00:00:15.000Z\",\n  //       \"close_time\": \"2025-01-01T00:59:45.000Z\"\n  //     }\n  //   },\n  //   ...\n  // ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run TypeScript Tests with pnpm\nDESCRIPTION: This command executes the test suite for the TypeScript project using pnpm. It assumes pnpm is installed and configured in the project. The tests are defined in the package.json file.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/TESTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Setup and Run Node.js TypeORM TimescaleDB\nDESCRIPTION: This snippet provides the commands necessary to set up, build, migrate, and run the Node.js TypeORM TimescaleDB application. It includes copying the .env example, installing dependencies, building the project, running database migrations, and starting the application.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/examples/node-typeorm/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Setup\ncp .env.example .env  # Update DATABASE_URL\npnpm install\npnpm build\npnpm migrate\n\n# Run\npnpm start\n\n# or\n\n# Test\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Querying Candlesticks with Repository Method\nDESCRIPTION: This code demonstrates querying candlestick data directly using a custom `getCandlesticks` method on the `StockPrice` repository.  It configures the time range, price/volume columns and bucket interval for the candlestick aggregation.  Requires `AppDataSource` to be initialized and a custom method `getCandlesticks` to be defined on the `StockPrice` repository.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/candlesticks.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppDataSource } from './data-source';\nimport { StockPrice } from './models/StockPrice';\n\nasync function getCandlesticksDirectly() {\n  const repository = AppDataSource.getRepository(StockPrice);\n\n  const candlesticks = await repository.getCandlesticks({\n    timeRange: {\n      start: new Date('2025-01-01'),\n      end: new Date('2025-01-02'),\n    },\n    config: {\n      price_column: 'price',\n      volume_column: 'volume',\n      bucket_interval: '1 hour',\n    },\n    where: {\n      symbol: 'AAPL',\n    },\n  });\n\n  console.log(JSON.stringify(candlesticks, null, 2));\n  // Example output:\n  // [\n  //   {\n  //     \"bucket_time\": \"2025-01-01T00:00:00.000Z\",\n  //     \"open\": 150.25,\n  //     \"high\": 155.60,\n  //     \"low\": 149.50,\n  //     \"close\": 153.20,\n  //     \"volume\": 8750000,\n  //     \"vwap\": 152.75,\n  //     \"open_time\": \"2025-01-01T00:00:15.000Z\",\n  //     \"close_time\": \"2025-01-01T00:59:45.000Z\"\n  //   },\n  //   ...\n  // ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Time Bucket Query\nDESCRIPTION: This TypeScript code snippet generates a time bucket query using the TimescaleDB library. It defines a hypertable, specifies an interval, and includes an aggregation. The generated SQL and parameters are then compared against a snapshot. The query includes a date range.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/TESTING.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nit('should generate time bucket query', () => {\n  const hypertable = TimescaleDB.createHypertable('metrics', {\n    by_range: { column_name: 'time' },\n  });\n\n  const { sql, params } = hypertable\n    .timeBucket({\n      interval: '1 hour',\n      metrics: [{ type: 'avg', column: 'value', alias: 'avg_value' }],\n    })\n    .build({\n      range: {\n        start: new Date('2025-01-01'),\n        end: new Date('2025-01-02'),\n      },\n    });\n\n  expect({ sql, params }).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Query Daily Statistics from Continuous Aggregate\nDESCRIPTION: This code snippet queries the `DailyEnergyStats` continuous aggregate using TypeORM's query builder. It retrieves daily statistics for a specified date range (January 2025), orders the results by bucket (timestamp) in descending order, and logs the results to the console.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/energy-data.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst dailyStats = await AppDataSource.getRepository(DailyEnergyStats)\n  .createQueryBuilder()\n  .where('bucket >= :start', { start: new Date('2025-01-01') })\n  .andWhere('bucket < :end', { end: new Date('2025-01-31') })\n  .orderBy('bucket', 'DESC')\n  .getMany();\n\nconsole.log('Daily Energy Stats:', dailyStats);\n// [\n//   {\n//     bucket: '2025-01-01T00:00:00Z',\n//     total_consumption: 5840.5,    // kWh\n//     total_generation: 324.6,      // kWh\n//     peak_consumption: 12.4,       // kWh\n//     avg_temperature: 22.5         // °C\n//   },\n//   ...\n// ]\n```\n\n----------------------------------------\n\nTITLE: Querying a Rollup with TimescaleDB TypeORM\nDESCRIPTION: This code shows how to query a rollup (hierarchical continuous aggregate) using TypeORM's `createQueryBuilder`. It retrieves daily statistics for a specified time range.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst stats = await AppDataSource.getRepository(DailyPageStats)\n  .createQueryBuilder()\n  .where('bucket >= :start', { start })\n  .andWhere('bucket < :end', { end })\n  .getMany();\n```\n\n----------------------------------------\n\nTITLE: Generating TypeORM Migration\nDESCRIPTION: This command generates a new TypeORM migration file. It specifies the migration name and the DataSource file. This migration file will contain the necessary SQL to create the `crypto_prices` hypertable and other schema changes.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm migration:generate migrations/CreateCryptoPrice -d src/data-source.ts\n```\n\n----------------------------------------\n\nTITLE: Creating 1-Hour Rollups from 1-Minute Candlesticks\nDESCRIPTION: This code creates a rollup that aggregates the 1-minute candlesticks (`StockPrice1M`) into 1-hour candlesticks. It uses `@timescaledb/typeorm` decorators to define the rollup, bucket interval, refresh policy, bucket column, and candlestick column. The `Candlestick` type is imported from `@timescaledb/schemas`.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/candlesticks.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rollup, BucketColumn, CandlestickColumn } from '@timescaledb/typeorm';\nimport { StockPrice1M } from './StockPrice1M';\nimport { Candlestick } from '@timescaledb/schemas';\n\n@Rollup(StockPrice1M, {\n  name: 'stock_candlesticks_1h',\n  bucket_interval: '1 hour',\n  refresh_policy: {\n    start_offset: '7 days',\n    end_offset: '1 hour',\n    schedule_interval: '1 hour',\n  },\n})\nexport class StockPrice1H {\n  @BucketColumn({\n    source_column: 'bucket',\n  })\n  bucket!: Date;\n\n  @PrimaryColumn()\n  symbol!: string;\n\n  @CandlestickColumn({\n    source_column: 'candlestick',\n  })\n  candlestick!: Candlestick;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeORM Data Source Configuration\nDESCRIPTION: This is an example of configuring the TypeORM data source. It includes settings for database connection, synchronization, logging, entities, and migrations.  Make sure to add your entities to the `entities` array.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@timescaledb/typeorm'; // This should be the first import in your file to hook into the TypeORM migration process\n\nimport { DataSource } from 'typeorm';\nimport { PageLoad, HourlyPageViews } from './models';\n\nexport const AppDataSource = new DataSource({\n  type: 'postgres',\n  url: process.env.DATABASE_URL,\n  synchronize: false,\n  logging: process.env.NODE_ENV === 'development',\n  entities: [PageLoad, HourlyPageViews, StockPrice], // <-- Add your entities here\n  migrations: ['migrations/*.ts'],\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Hypertable with getTimeBucket in TypeORM\nDESCRIPTION: This code shows how to query a Hypertable using the getTimeBucket method in TypeORM with the @timescaledb/typeorm package. It retrieves time-bucketed data with a distinct count metric, filtering by time range and user agent.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppDataSource } from './data-source';\nimport { PageLoad } from './models/PageLoad';\n\nconst repository = AppDataSource.getRepository(PageLoad);\nconst stats = await repository.getTimeBucket({\n  timeRange: {\n    start: new Date('2025-01-01'),\n    end: new Date('2025-01-02'),\n  },\n  where: {\n    user_agent: 'Chrome',\n  },\n  bucket: {\n    interval: '1 hour',\n    metrics: [{ type: 'distinct_count', column: 'user_agent', alias: 'unique_users' }],\n  },\n});\n\nconsole.log(stats);\n// [\n//   { time: '2021-01-01T00:00:00.000Z', unique_users: 5 },\n//   { time: '2021-01-01T01:00:00.000Z', unique_users: 10 },\n//   { time: '2021-01-01T02:00:00.000Z', unique_users: 15 },\n//   ...\n// ]\n```\n\n----------------------------------------\n\nTITLE: Starting TimescaleDB Instance with Docker\nDESCRIPTION: This command starts a TimescaleDB instance using Docker. It maps port 5432, sets the Postgres password, and uses the timescale/timescaledb-ha:pg17 image. This setup is crucial for creating and managing time-series data related to cryptocurrency prices.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name timescaledb \\\n  -p 5432:5432 \\\n  -e POSTGRES_PASSWORD=password \\\n  timescale/timescaledb-ha:pg17\n```\n\n----------------------------------------\n\nTITLE: Internal SQL Generation and Execution\nDESCRIPTION: This snippet illustrates how the SQL for hypertable creation can be generated internally and executed using the `dataSource.query` method. This allows for updates and control over the SQL generation process without requiring user intervention.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/design_decisions/auto-migrations.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Internal SQL generation can be updated\nconst sql = hypertable.up().build();\nawait dataSource.query(sql);\n```\n\n----------------------------------------\n\nTITLE: Generate Hypertable Creation SQL\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the TimescaleDB library to generate SQL for creating a hypertable. It defines a hypertable named 'metrics' with a time-based partitioning on the 'time' column. The generated SQL is then compared against a snapshot.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/TESTING.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('Hypertable', () => {\n  it('should generate hypertable creation SQL', () => {\n    const hypertable = TimescaleDB.createHypertable('metrics', {\n      by_range: { column_name: 'time' },\n    });\n\n    const sql = hypertable.up().build();\n    expect(sql).toMatchSnapshot();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Source Continuous Aggregate\nDESCRIPTION: This defines a source continuous aggregate for use in rollups.  It calculates hourly page view statistics.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ContinuousAggregate, BucketColumn, AggregateColumn } from '@timescaledb/typeorm';\n\n@ContinuousAggregate(PageLoad, {\n  name: 'hourly_page_views',\n  bucket_interval: '1 hour',\n})\nexport class HourlyPageViews {\n  @BucketColumn({\n    source_column: 'time',\n  })\n  bucket!: Date;\n\n  @AggregateColumn({\n    type: 'count',\n  })\n  total_views!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Running TypeORM Migration\nDESCRIPTION: This command runs the generated TypeORM migration. It applies the SQL defined in the migration file to the database, creating the `crypto_prices` hypertable and other schema changes.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm migration:run\n```\n\n----------------------------------------\n\nTITLE: Sample Candlestick Data Output (JSON)\nDESCRIPTION: This is the expected JSON output from the `analyze.ts` script.  It shows the candlestick data retrieved from TimescaleDB, including the bucket time, open, high, low, close prices, volume, VWAP, and corresponding times. This data represents an hourly candlestick for BTC on 2025-01-01.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"bucket_time\": \"2025-01-01T00:00:00.000Z\",\n    \"open\": 42000,\n    \"high\": 42200,\n    \"low\": 41900,\n    \"close\": 42200,\n    \"volume\": 7.5,\n    \"vwap\": 42050,\n    \"open_time\": \"2025-01-01T00:00:00.000Z\",\n    \"high_time\": \"2025-01-01T00:45:00.000Z\",\n    \"low_time\": \"2025-01-01T00:30:00.000Z\",\n    \"close_time\": \"2025-01-01T00:45:00.000Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Scripts in package.json\nDESCRIPTION: This JSON configures scripts in `package.json` to use the TypeORM CLI. It defines scripts for generating and running migrations, specifying the use of `ts-node-commonjs` for TypeScript support and the DataSource file. These scripts facilitate database schema management.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"typeorm\": \"typeorm-ts-node-commonjs\",\n    \"migration:generate\": \"npm run typeorm migration:generate\",\n    \"migration:run\": \"npm run typeorm migration:run -- -d src/data-source.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Generation with @timescaledb/core in Typescript\nDESCRIPTION: Demonstrates custom SQL generation using @timescaledb/core. It shows how to generate hypertable creation SQL and compression statistics SQL separately.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/core/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst hypertable = TimescaleDB.createHypertable('measurements', {\n  by_range: { column_name: 'time' },\n});\n\n// Generate only the hypertable creation SQL\nconst createSql = hypertable.up().build();\n\n// Generate only the compression SQL\nconst compressionSql = hypertable\n  .compression()\n  .stats({ select: { total_chunks: true } })\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Running the Analysis Script\nDESCRIPTION: This command executes the `analyze.ts` script using `ts-node`. It compiles and runs the TypeScript code, which queries candlestick data from the TimescaleDB database and outputs the results to the console.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nts-node src/analyze.ts\n```\n\n----------------------------------------\n\nTITLE: Import TimescaleDB TypeORM for Migrations\nDESCRIPTION: This code shows the import statement needed in your `data-source` file to hook into the TypeORM migration process.  This import should be the first one in the file.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@timescaledb/typeorm'; // This should be the first import in your file to hook into the TypeORM migration process\n```\n\n----------------------------------------\n\nTITLE: Adding TypeORM CLI as a dev dependency\nDESCRIPTION: Installs the TypeORM CLI as a development dependency to allow for database migrations and other tasks.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D typeorm\n```\n\n----------------------------------------\n\nTITLE: Run TimescaleDB Instance with Docker\nDESCRIPTION: This command starts a TimescaleDB instance using Docker. It maps port 5432, sets the POSTGRES_PASSWORD environment variable, and uses the timescale/timescaledb-ha:pg17 image. This provides a pre-configured environment for testing.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/TESTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name timescaledb \\\n  -p 5432:5432 \\\n  -e POSTGRES_PASSWORD=password \\\n  timescale/timescaledb-ha:pg17\n```\n\n----------------------------------------\n\nTITLE: Installing @timescaledb/core package\nDESCRIPTION: Installs the @timescaledb/core package using npm. This package provides tools for working with TimescaleDB in TypeScript/JavaScript applications.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/core/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @timescaledb/core\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for TypeScript\nDESCRIPTION: This `tsconfig.json` configures the TypeScript compiler. It specifies the target ECMAScript version, module system, and enables strict type checking and experimental decorators, which are used by TypeORM. This configuration ensures that the TypeScript code compiles correctly for the project.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/guides/getting-started.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"es2020\"],\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"skipLibCheck\": true,\n    \"outDir\": \"./dist\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping Package Versions with pnpm\nDESCRIPTION: This command uses pnpm to bump the versions of all packages in the monorepo to the specified version. The START_PATH variable specifies the starting directory for the command, and the VERSION variable defines the new version number. It creates a commit and tag with the changes.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/RELEASE.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ VERSION=__VERSION__ START_PATH=. pnpm run release\n```\n\n----------------------------------------\n\nTITLE: Run Database Migrations with pnpm\nDESCRIPTION: This command runs the database migrations for the example project using pnpm. This ensures the database schema is up to date before running tests that interact with the database.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/TESTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm migrate\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes and Tags to GitHub\nDESCRIPTION: This command pushes the changes and tags to GitHub, which triggers a release pipeline on GitHub Actions to publish the packages to npm. This is the final step in the release process, after which the packages are available on npm.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/RELEASE.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git push && git push --tags\n```\n\n----------------------------------------\n\nTITLE: Checking Changes with git log\nDESCRIPTION: This command uses `git log` to output the contents of the last commit, allowing developers to verify that the changes are as expected before pushing them to GitHub. It shows the files that have been modified in the last commit, which should primarily be package version updates.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/RELEASE.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git log --name-status HEAD^..HEAD\n\n(HEAD -> main, tag: 0.0.0-alpha.53)\n\nM       packages/core\nM       packages/schemas\nM       packages/utils\nM       ...\n(END)\n```\n\n----------------------------------------\n\nTITLE: Update Jest Snapshots\nDESCRIPTION: This command updates the Jest snapshots. When SQL generation changes are intended, this command updates the snapshots in the `__snapshots__` directory to reflect the new SQL. Requires Jest to be configured.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/TESTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm test -u\n```\n\n----------------------------------------\n\nTITLE: Listing git Tags\nDESCRIPTION: This command lists all git tags to verify that the new tag was created successfully. This helps confirm that the version bumping process has completed correctly and that the release can proceed.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/RELEASE.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git tag\n\n0.0.0-alpha.38\n0.0.0-alpha.39\n0.0.0-alpha.4\n0.0.0-alpha.40\n0.0.0-alpha.41\n0.0.0-alpha.42\n0.0.0-alpha.43\n0.0.0-alpha.44\n0.0.0-alpha.45\n0.0.0-alpha.46\n0.0.0-alpha.47\n0.0.0-alpha.48\n0.0.0-alpha.53 <--- This is the new tag\n```\n\n----------------------------------------\n\nTITLE: Installing TimescaleDB TypeORM Plugin\nDESCRIPTION: This command installs the necessary packages for using the TimescaleDB plugin with TypeORM.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/packages/typeorm/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install typeorm @timescaledb/typeorm\n```\n\n----------------------------------------\n\nTITLE: Copy Environment File\nDESCRIPTION: This command copies the .env.example file to .env. This is necessary to configure the environment variables required for the example projects, such as database credentials.\nSOURCE: https://github.com/timescale/timescaledb-ts/blob/main/docs/TESTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/node-typeorm\ncp .env.example .env\n```"
  }
]