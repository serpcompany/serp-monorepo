[
  {
    "owner": "r-dbi",
    "repo": "dbi",
    "content": "TITLE: Using DBI with RSQLite in R\nDESCRIPTION: This example demonstrates basic DBI capabilities, including connecting to an in-memory SQLite database, writing and reading tables, and executing queries.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nlibrary(DBI)\n# Create an ephemeral in-memory RSQLite database\ncon <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")\n\ndbListTables(con)\n#> character(0)\ndbWriteTable(con, \"mtcars\", mtcars)\ndbListTables(con)\n#> [1] \"mtcars\"\n\ndbListFields(con, \"mtcars\")\n#>  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n#> [11] \"carb\"\ndbReadTable(con, \"mtcars\")\n#>    mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#> 1 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#> 2 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#> 3 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#> 4 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#> 5 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n#> 6 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n#> 7 14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n#> 8 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n#> 9 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n#>  [ reached 'max' / getOption(\"max.print\") -- omitted 23 rows ]\n\n# You can fetch all results:\nres <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\")\ndbFetch(res)\n#>    mpg cyl  disp hp drat    wt  qsec vs am gear carb\n#> 1 22.8   4 108.0 93 3.85 2.320 18.61  1  1    4    1\n#> 2 24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2\n#> 3 22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2\n#> 4 32.4   4  78.7 66 4.08 2.200 19.47  1  1    4    1\n#> 5 30.4   4  75.7 52 4.93 1.615 18.52  1  1    4    2\n#> 6 33.9   4  71.1 65 4.22 1.835 19.90  1  1    4    1\n#> 7 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1\n#> 8 27.3   4  79.0 66 4.08 1.935 18.90  1  1    4    1\n#> 9 26.0   4 120.3 91 4.43 2.140 16.70  0  1    5    2\n#>  [ reached 'max' / getOption(\"max.print\") -- omitted 2 rows ]\ndbClearResult(res)\n\n# Or a chunk at a time\nres <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\")\nwhile (!dbHasCompleted(res)) {\n  chunk <- dbFetch(res, n = 5)\n  print(nrow(chunk))\n}\n#> [1] 5\n#> [1] 5\n#> [1] 1\ndbClearResult(res)\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Fetching Query Results with dbGetQuery in DBI\nDESCRIPTION: Documentation for the dbGetQuery function which executes a SQL query and returns results as a data frame. It describes arguments, behavior, and includes examples of basic queries and parameterized queries.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_17\n\nLANGUAGE: r\nCODE:\n```\ndbGetQuery(conn, statement, ...)\n```\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"mtcars\", mtcars)\ndbGetQuery(con, \"SELECT * FROM mtcars\")\ndbGetQuery(con, \"SELECT * FROM mtcars\", n = 6)\n\n# Pass values using the param argument:\n# (This query runs eight times, once for each different\n# parameter. The resulting rows are combined into a single\n# data frame.)\ndbGetQuery(\n  con,\n  \"SELECT COUNT(*) FROM mtcars WHERE cyl = ?\",\n  params = list(1:8)\n)\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Fetching Query Results in R using DBI\nDESCRIPTION: Demonstrates how to connect to a SQLite database, write data, and fetch query results both in full and in chunks. It also shows how to clear the result set and disconnect from the database.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_10\n\nLANGUAGE: R\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"mtcars\", mtcars)\n\n# Fetch all results\nrs <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\")\ndbFetch(rs)\ndbClearResult(rs)\n\n# Fetch in chunks\nrs <- dbSendQuery(con, \"SELECT * FROM mtcars\")\nwhile (!dbHasCompleted(rs)) {\n  chunk <- dbFetch(rs, 10)\n  print(nrow(chunk))\n}\n\ndbClearResult(rs)\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Executing Parameterized Queries with DBI in R\nDESCRIPTION: This code snippet demonstrates how to use parameterized queries with DBI in R. It shows connecting to a SQLite database, writing data to a table, sending a parameterized query, binding different parameter values, fetching results, and clearing the result set.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_12\n\nLANGUAGE: R\nCODE:\n```\n# Data frame flow:\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"iris\", iris)\n\n# Using the same query for different values\niris_result <- dbSendQuery(con, \"SELECT * FROM iris WHERE [Petal.Width] > ?\")\ndbBind(iris_result, list(2.3))\ndbFetch(iris_result)\ndbBind(iris_result, list(3))\ndbFetch(iris_result)\ndbClearResult(iris_result)\n```\n\n----------------------------------------\n\nTITLE: Database Transaction Management Example in R\nDESCRIPTION: Demonstrates basic transaction operations including beginning a transaction, executing updates, and committing or rolling back changes based on conditions. Uses SQLite as the database engine.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_47\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"cash\", data.frame(amount = 100))\ndbWriteTable(con, \"account\", data.frame(amount = 2000))\n\n# All operations are carried out as logical unit:\ndbBegin(con)\nwithdrawal <- 300\ndbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(withdrawal))\ndbExecute(con, \"UPDATE account SET amount = amount - ?\", list(withdrawal))\ndbCommit(con)\n\ndbReadTable(con, \"cash\")\ndbReadTable(con, \"account\")\n\n# Rolling back after detecting negative value on account:\ndbBegin(con)\nwithdrawal <- 5000\ndbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(withdrawal))\ndbExecute(con, \"UPDATE account SET amount = amount - ?\", list(withdrawal))\nif (dbReadTable(con, \"account\")$amount >= 0) {\n  dbCommit(con)\n} else {\n  dbRollback(con)\n}\n\ndbReadTable(con, \"cash\")\ndbReadTable(con, \"account\")\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries and Fetching Results with DBI in R\nDESCRIPTION: This example demonstrates connecting to a SQLite database, writing data, executing a query, fetching results, and using parameterized queries. It showcases the usage of dbConnect(), dbWriteTable(), dbSendQuery(), dbFetch(), dbBind(), and dbClearResult().\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_8\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"mtcars\", mtcars)\nrs <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\")\ndbFetch(rs)\ndbClearResult(rs)\n\n# Pass one set of values with the param argument:\nrs <- dbSendQuery(\n  con,\n  \"SELECT * FROM mtcars WHERE cyl = ?\",\n  params = list(4L)\n)\ndbFetch(rs)\ndbClearResult(rs)\n\n# Pass multiple sets of values with dbBind():\nrs <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = ?\")\ndbBind(rs, list(6L))\ndbFetch(rs)\ndbBind(rs, list(8L))\ndbFetch(rs)\ndbClearResult(rs)\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Listing Database Table Fields with dbListFields in R\nDESCRIPTION: Example showing how to retrieve field names from a database table. The code connects to an in-memory SQLite database, creates a table from the mtcars dataset, and then lists all column names in that table.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_34\n\nLANGUAGE: r\nCODE:\n```\ndbListFields(conn, name, ...)\n```\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"mtcars\", mtcars)\ndbListFields(con, \"mtcars\")\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Creating a SQLite Database Connection in R\nDESCRIPTION: Example of creating a connection to an SQLite in-memory database using the RSQLite package, which is a DBI backend implementation.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nRSQLite::SQLite()\n```\n\n----------------------------------------\n\nTITLE: Removing a Database Table with dbRemoveTable in R\nDESCRIPTION: Example demonstrating how to check for a table's existence, create a table, and then remove it using DBI functions. This connects to an in-memory SQLite database, writes the iris dataset to a table, and then removes it.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_33\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbExistsTable(con, \"iris\")\ndbWriteTable(con, \"iris\", iris)\ndbExistsTable(con, \"iris\")\ndbRemoveTable(con, \"iris\")\ndbExistsTable(con, \"iris\")\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a Table with DBI in R\nDESCRIPTION: This snippet illustrates how to insert data into a database table using DBI. It uses dbAppendTable() to add rows from the mtcars dataset to the 'mtcars' table.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/revdep/new-problems.md#2025-04-21_snippet_3\n\nLANGUAGE: R\nCODE:\n```\ndbAppendTable(con, \"mtcars\", mtcars)\n```\n\n----------------------------------------\n\nTITLE: Database Connection and Data Loading with RSQLite\nDESCRIPTION: Creates an in-memory SQLite database connection and loads the iris dataset as a table for demonstration purposes.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_14\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"iris\", iris)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to a Database Table in R with DBI\nDESCRIPTION: Example of using dbWriteTable() to create and populate a table in an SQLite database. Demonstrates initial creation, appending data, and overwriting data with various row.names settings.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_29\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"mtcars\", mtcars[1:5, ])\ndbReadTable(con, \"mtcars\")\n\ndbWriteTable(con, \"mtcars\", mtcars[6:10, ], append = TRUE)\ndbReadTable(con, \"mtcars\")\n\ndbWriteTable(con, \"mtcars\", mtcars[1:10, ], overwrite = TRUE)\ndbReadTable(con, \"mtcars\")\n\n# No row names\ndbWriteTable(con, \"mtcars\", mtcars[1:10, ], overwrite = TRUE, row.names = FALSE)\ndbReadTable(con, \"mtcars\")\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in a Database Connection with DBI\nDESCRIPTION: Example showing how to use dbListTables() to retrieve all table names from a database connection. The example also shows how the list updates when a new table is added.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_30\n\nLANGUAGE: r\nCODE:\n```\ndbListTables(conn, ...)\n```\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbListTables(con)\ndbWriteTable(con, \"mtcars\", mtcars)\ndbListTables(con)\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Self-contained Transaction Example in R\nDESCRIPTION: Demonstrates using dbWithTransaction() for automatic transaction management and dbBreak() for early exit with rollback.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_49\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"cash\", data.frame(amount = 100))\ndbWriteTable(con, \"account\", data.frame(amount = 2000))\n\n# All operations are carried out as logical unit:\ndbWithTransaction(\n  con,\n  {\n    withdrawal <- 300\n    dbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(withdrawal))\n    dbExecute(con, \"UPDATE account SET amount = amount - ?\", list(withdrawal))\n  }\n)\n\n# The code is executed as if in the current environment:\nwithdrawal\n\n# The changes are committed to the database after successful execution:\ndbReadTable(con, \"cash\")\ndbReadTable(con, \"account\")\n\n# Rolling back with dbBreak():\ndbWithTransaction(\n  con,\n  {\n    withdrawal <- 5000\n    dbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(withdrawal))\n    dbExecute(con, \"UPDATE account SET amount = amount - ?\", list(withdrawal))\n    if (dbReadTable(con, \"account\")$amount < 0) {\n      dbBreak()\n    }\n  }\n)\n\n# These changes were not committed to the database:\ndbReadTable(con, \"cash\")\ndbReadTable(con, \"account\")\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with DBI in R\nDESCRIPTION: This code demonstrates how to create a table in a database using DBI. It uses dbCreateTable() to define a 'mtcars' table with specific column types.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/revdep/new-problems.md#2025-04-21_snippet_2\n\nLANGUAGE: R\nCODE:\n```\ndbCreateTable(con, \"mtcars\",\n  c(mpg = \"double\", cyl = \"integer\", disp = \"double\", hp = \"integer\",\n    drat = \"double\", wt = \"double\", qsec = \"double\", vs = \"integer\",\n    am = \"integer\", gear = \"integer\", carb = \"integer\")\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Database Tables in R DBI\nDESCRIPTION: Demonstrates usage of dbReadTable() to read a database table into an R data frame. Shows connection setup, table reading, and connection closing.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_26\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"mtcars\", mtcars[1:10, ])\ndbReadTable(con, \"mtcars\")\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: String Quoting Example in R\nDESCRIPTION: Example showing how to properly quote strings for SQL queries using dbQuoteString.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_23\n\nLANGUAGE: r\nCODE:\n```\n# Quoting ensures that arbitrary input is safe for use in a query\nname <- \"Robert'); DROP TABLE Students;--\"\ndbQuoteString(ANSI(), name)\n\n# NAs become NULL\ndbQuoteString(ANSI(), c(\"x\", NA))\n\n# SQL vectors are always passed through as is\nvar_name <- SQL(\"select\")\nvar_name\ndbQuoteString(ANSI(), var_name)\n\n# This mechanism is used to prevent double escaping\ndbQuoteString(ANSI(), dbQuoteString(ANSI(), name))\n```\n\n----------------------------------------\n\nTITLE: Executing Data Manipulation Statements with dbSendStatement\nDESCRIPTION: Documentation for the dbSendStatement function which executes SQL data manipulation statements. It covers submission of SQL statements to the database engine and how to handle the results with dbGetRowsAffected and dbClearResult.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_18\n\nLANGUAGE: r\nCODE:\n```\ndbSendStatement(conn, statement, ...)\n```\n\n----------------------------------------\n\nTITLE: dbWriteTable Function Signature in R DBI\nDESCRIPTION: Shows the function signature for dbWriteTable(), which writes a data frame to a database table.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_28\n\nLANGUAGE: r\nCODE:\n```\ndbWriteTable(conn, name, value, ...)\n```\n\n----------------------------------------\n\nTITLE: Database Execute Example in R\nDESCRIPTION: Example demonstrating the usage of dbExecute() with SQLite, including parameter binding and table operations.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_21\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"cars\", head(cars, 3))\ndbReadTable(con, \"cars\")   # there are 3 rows\ndbExecute(\n  con,\n  \"INSERT INTO cars (speed, dist) VALUES (1, 1), (2, 2), (3, 3)\"\n)\ndbReadTable(con, \"cars\")   # there are now 6 rows\n\n# Pass values using the param argument:\ndbExecute(\n  con,\n  \"INSERT INTO cars (speed, dist) VALUES (?, ?)\",\n  params = list(4:7, 5:8)\n)\ndbReadTable(con, \"cars\")   # there are now 10 rows\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: dbReadTable Function Signature in R DBI\nDESCRIPTION: Shows the function signature for dbReadTable(), which reads a database table to a data frame.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_27\n\nLANGUAGE: r\nCODE:\n```\ndbReadTable(conn, name, ...)\n```\n\n----------------------------------------\n\nTITLE: Checking if a Table Exists in a Database with DBI\nDESCRIPTION: Example of using dbExistsTable() to check whether a table exists in a database. The example creates a connection, checks for a table, creates it, and then checks again.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_31\n\nLANGUAGE: r\nCODE:\n```\ndbExistsTable(conn, name, ...)\n```\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbExistsTable(con, \"iris\")\ndbWriteTable(con, \"iris\", iris)\ndbExistsTable(con, \"iris\")\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Checking Query Completion Status with dbHasCompleted in R\nDESCRIPTION: Method for determining if a database operation has completed. For SELECT queries, it returns TRUE when all rows have been fetched, while for data manipulation statements it always returns TRUE.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_36\n\nLANGUAGE: r\nCODE:\n```\ndbHasCompleted(res, ...)\n```\n\n----------------------------------------\n\nTITLE: Executing a Parameterized Query with DBI in R\nDESCRIPTION: This code shows how to execute a parameterized query using DBI. It demonstrates using dbGetQuery() with a SQL query containing placeholders and providing values for those placeholders.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/revdep/new-problems.md#2025-04-21_snippet_4\n\nLANGUAGE: R\nCODE:\n```\ndbGetQuery(con, \"SELECT * FROM mtcars WHERE cyl = ? AND am = ?\", list(8, 0))\n```\n\n----------------------------------------\n\nTITLE: Column Information Example in R\nDESCRIPTION: Demonstrates retrieving column metadata from a result set.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_45\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\nrs <- dbSendQuery(con, \"SELECT 1 AS a, 2 AS b\")\ndbColumnInfo(rs)\ndbFetch(rs)\n\ndbClearResult(rs)\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Arrow Integration in DBI\nDESCRIPTION: Example of using dbSendQueryArrow and dbBindArrow to execute parameterized queries with Arrow integration. This demonstrates binding different parameter values to filter data based on Petal.Width.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_15\n\nLANGUAGE: r\nCODE:\n```\n# Using the same query for different values\niris_result <- dbSendQueryArrow(con, \"SELECT * FROM iris WHERE [Petal.Width] > ?\")\ndbBindArrow(\n  iris_result,\n  nanoarrow::as_nanoarrow_array_stream(data.frame(2.3, fix.empty.names = FALSE))\n)\nas.data.frame(dbFetchArrow(iris_result))\ndbBindArrow(\n  iris_result,\n  nanoarrow::as_nanoarrow_array_stream(data.frame(3, fix.empty.names = FALSE))\n)\nas.data.frame(dbFetchArrow(iris_result))\ndbClearResult(iris_result)\n```\n\n----------------------------------------\n\nTITLE: Statement Retrieval Example in R\nDESCRIPTION: Example showing how to retrieve the SQL statement from a query result set.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_39\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"mtcars\", mtcars)\nrs <- dbSendQuery(con, \"SELECT * FROM mtcars\")\ndbGetStatement(rs)\n\ndbClearResult(rs)\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Executing Parameterized DELETE Statements in R with DBI\nDESCRIPTION: Example showing how to execute a DELETE statement with multiple parameter values using dbBind. This demonstrates binding multiple species values at once to a parameterized query and checking affected rows.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_13\n\nLANGUAGE: r\nCODE:\n```\niris_result <- dbSendStatement(con, \"DELETE FROM iris WHERE [Species] = \\$species\")\ndbBind(iris_result, list(species = c(\"setosa\", \"versicolor\", \"unknown\")))\ndbGetRowsAffected(iris_result)\ndbClearResult(iris_result)\n\nnrow(dbReadTable(con, \"iris\"))\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Removing a Table from a Database with DBI\nDESCRIPTION: Method signature for dbRemoveTable() which removes a remote table from the database. This function is used to delete tables created with dbWriteTable().\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_32\n\nLANGUAGE: r\nCODE:\n```\ndbRemoveTable(conn, name, ...)\n```\n\n----------------------------------------\n\nTITLE: Transaction Methods in R\nDESCRIPTION: Method signatures for managing database transactions (begin, commit, rollback).\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_46\n\nLANGUAGE: r\nCODE:\n```\ndbBegin(conn, ...)\n\ndbCommit(conn, ...)\n\ndbRollback(conn, ...)\n```\n\n----------------------------------------\n\nTITLE: Defining the dbDisconnect Method Signature\nDESCRIPTION: Method signature for dbDisconnect which closes a database connection and frees associated resources.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_5\n\nLANGUAGE: r\nCODE:\n```\ndbDisconnect(conn, ...)\n```\n\n----------------------------------------\n\nTITLE: Creating and Disconnecting from a Database Connection\nDESCRIPTION: Example showing how to create a connection to an SQLite in-memory database and subsequently disconnect from it.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\n# SQLite only needs a path to the database. (Here, \":memory:\" is a special\n# path that creates an in-memory database.) Other database drivers\n# will require more details (like user, password, host, port, etc.)\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\ncon\n\ndbListTables(con)\n\ndbDisconnect(con)\n\n# Bad, for subtle reasons:\n# This code fails when RSQLite isn't loaded yet,\n# because dbConnect() doesn't know yet about RSQLite.\ndbListTables(con <- dbConnect(RSQLite::SQLite(), \":memory:\"))\n```\n\n----------------------------------------\n\nTITLE: Fixing dbDataType for AsIs objects in R\nDESCRIPTION: Bug fix for the dbDataType function to properly handle AsIs objects.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/NEWS.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nFix `dbDataType()` for `AsIs` object (#198, @yutannihilation).\n```\n\n----------------------------------------\n\nTITLE: Checking Database Object Validity with dbIsValid in R\nDESCRIPTION: Example demonstrating how to verify if a database object (driver, connection, or result) is still valid. The code shows the validity states of a SQLite driver, connection, and result object before and after closing/clearing them.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_35\n\nLANGUAGE: r\nCODE:\n```\ndbIsValid(dbObj, ...)\n```\n\nLANGUAGE: r\nCODE:\n```\ndbIsValid(RSQLite::SQLite())\n\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\ndbIsValid(con)\n\nrs <- dbSendQuery(con, \"SELECT 1\")\ndbIsValid(rs)\n\ndbClearResult(rs)\ndbIsValid(rs)\n\ndbDisconnect(con)\ndbIsValid(con)\n```\n\n----------------------------------------\n\nTITLE: Testing Id() Function Print Method with Multiple Identifiers in R\nDESCRIPTION: This test case demonstrates how the Id() function formats output when given multiple string arguments. It shows the print method produces a properly formatted SQL identifier.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/tests/testthat/_snaps/00-Id.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nId(\"a\", \"b\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Records from a Previously Executed Query with DBI in R\nDESCRIPTION: This snippet shows the function signature for dbFetch() and fetch(), which are used to retrieve records from a previously executed query. It explains the arguments and return value of these functions.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_9\n\nLANGUAGE: r\nCODE:\n```\ndbFetch(res, n = -1, ...)\n\nfetch(res, n = -1, ...)\n```\n\n----------------------------------------\n\nTITLE: Installing ROracle Package (Development Version)\nDESCRIPTION: Attempt to install the development version of the ROracle package. The installation fails due to missing OCI libraries.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/revdep/failures.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n* installing *source* package 'ROracle' ...\n** package 'ROracle' successfully unpacked and MD5 sums checked\n** using staged installation\nconfigure: error: OCI libraries not found\nERROR: configuration failed for package 'ROracle'\n* removing '/tmp/workdir/ROracle/new/ROracle.Rcheck/ROracle'\n```\n\n----------------------------------------\n\nTITLE: Clearing a Result Set in R using DBI\nDESCRIPTION: Shows how to connect to a SQLite database, execute a query, fetch the results, and properly clear the result set. This example emphasizes the importance of clearing the result set, even when an error occurs.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_11\n\nLANGUAGE: R\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\nrs <- dbSendQuery(con, \"SELECT 1\")\nprint(dbFetch(rs))\n\ndbClearResult(rs)\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Template for Employers\nDESCRIPTION: A sample template for a copyright disclaimer that employers or institutions should sign to disclaim copyright interest in a library created by their employee or student. This helps clarify ownership and licensing rights for the software.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/LICENSE.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in\nthe library `Frob' (a library for tweaking knobs) written\nby James Random Hacker.\n\nsignature of Ty Coon, 1 April 1990\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Self-contained Transaction Method Signatures in R\nDESCRIPTION: Defines the method signatures for self-contained transaction management functions in DBI.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_48\n\nLANGUAGE: r\nCODE:\n```\ndbWithTransaction(conn, code, ...)\n\ndbBreak()\n```\n\n----------------------------------------\n\nTITLE: Installing DBI Package in R\nDESCRIPTION: This snippet shows how to install the DBI package from CRAN and its development version from GitHub using R commands.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ninstall.packages(\"DBI\")\n```\n\nLANGUAGE: R\nCODE:\n```\n# install.packages(\"devtools\")\ndevtools::install_github(\"r-dbi/DBI\")\n```\n\n----------------------------------------\n\nTITLE: Query Completion Status Example in R\nDESCRIPTION: Demonstrates checking query completion status using dbHasCompleted() after fetching results from a SQLite database.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_37\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"mtcars\", mtcars)\nrs <- dbSendQuery(con, \"SELECT * FROM mtcars\")\n\ndbHasCompleted(rs)\nret1 <- dbFetch(rs, 10)\ndbHasCompleted(rs)\nret2 <- dbFetch(rs)\ndbHasCompleted(rs)\n\ndbClearResult(rs)\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Executing Parameterized DELETE Statements with Arrow Integration\nDESCRIPTION: Demonstrates using dbSendStatement with dbBindArrow to execute a parameterized DELETE statement using Arrow. This shows how to remove rows based on species values provided as an Arrow array stream.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_16\n\nLANGUAGE: r\nCODE:\n```\n# Executing the same statement with different values at once\niris_result <- dbSendStatement(con, \"DELETE FROM iris WHERE [Species] = \\$species\")\ndbBindArrow(iris_result, nanoarrow::as_nanoarrow_array_stream(data.frame(\n  species = c(\"setosa\", \"versicolor\", \"unknown\")\n)))\ndbGetRowsAffected(iris_result)\ndbClearResult(iris_result)\n\nnrow(dbReadTable(con, \"iris\"))\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Database Statement Execution Example in R\nDESCRIPTION: Example showing how to execute database statements using dbSendStatement() with SQLite, including parameter binding and result handling.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_19\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"cars\", head(cars, 3))\n\nrs <- dbSendStatement(\n  con,\n  \"INSERT INTO cars (speed, dist) VALUES (1, 1), (2, 2), (3, 3)\"\n)\ndbHasCompleted(rs)\ndbGetRowsAffected(rs)\ndbClearResult(rs)\ndbReadTable(con, \"cars\")   # there are now 6 rows\n\n# Pass one set of values directly using the param argument:\nrs <- dbSendStatement(\n  con,\n  \"INSERT INTO cars (speed, dist) VALUES (?, ?)\",\n  params = list(4L, 5L)\n)\ndbClearResult(rs)\n\n# Pass multiple sets of values using dbBind():\nrs <- dbSendStatement(\n  con,\n  \"INSERT INTO cars (speed, dist) VALUES (?, ?)\"\n)\ndbBind(rs, list(5:6, 6:7))\ndbBind(rs, list(7L, 8L))\ndbClearResult(rs)\ndbReadTable(con, \"cars\")   # there are now 10 rows\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Using dbDataType with Various R Data Types\nDESCRIPTION: Examples showing how dbDataType maps R data types to SQL data types using both the ANSI SQL implementation and a SQLite connection.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\ndbDataType(ANSI(), 1:5)\ndbDataType(ANSI(), 1)\ndbDataType(ANSI(), TRUE)\ndbDataType(ANSI(), Sys.Date())\ndbDataType(ANSI(), Sys.time())\ndbDataType(ANSI(), Sys.time() - as.POSIXct(Sys.Date()))\ndbDataType(ANSI(), c(\"x\", \"abc\"))\ndbDataType(ANSI(), list(raw(10), raw(20)))\ndbDataType(ANSI(), I(3))\n\ndbDataType(ANSI(), iris)\n\n\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbDataType(con, 1:5)\ndbDataType(con, 1)\ndbDataType(con, TRUE)\ndbDataType(con, Sys.Date())\ndbDataType(con, Sys.time())\ndbDataType(con, Sys.time() - as.POSIXct(Sys.Date()))\ndbDataType(con, c(\"x\", \"abc\"))\ndbDataType(con, list(raw(10), raw(20)))\ndbDataType(con, I(3))\n\ndbDataType(con, iris)\n\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Quoting Identifiers in R DBI\nDESCRIPTION: Demonstrates usage of dbQuoteIdentifier() to safely quote database identifiers. Shows handling of special characters, schema names, and SQL objects.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_25\n\nLANGUAGE: r\nCODE:\n```\n# Quoting ensures that arbitrary input is safe for use in a query\nname <- \"Robert'); DROP TABLE Students;--\"\ndbQuoteIdentifier(ANSI(), name)\n\n# Use Id() to specify other components such as the schema\nid_name <- Id(schema = \"schema_name\", table = \"table_name\")\nid_name\ndbQuoteIdentifier(ANSI(), id_name)\n\n# SQL vectors are always passed through as is\nvar_name <- SQL(\"select\")\nvar_name\ndbQuoteIdentifier(ANSI(), var_name)\n\n# This mechanism is used to prevent double escaping\ndbQuoteIdentifier(ANSI(), dbQuoteIdentifier(ANSI(), name))\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from a Database Connection\nDESCRIPTION: Simple example showing how to disconnect from an SQLite database connection.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_6\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: DBMS Metadata Retrieval Example in R\nDESCRIPTION: Shows how to retrieve metadata information from a SQLite database connection.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_51\n\nLANGUAGE: r\nCODE:\n```\ndbGetInfo(RSQLite::SQLite())\n```\n\n----------------------------------------\n\nTITLE: Row Count Example in R\nDESCRIPTION: Demonstrates tracking the number of rows fetched from a result set.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_41\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"mtcars\", mtcars)\nrs <- dbSendQuery(con, \"SELECT * FROM mtcars\")\n\ndbGetRowCount(rs)\nret1 <- dbFetch(rs, 10)\ndbGetRowCount(rs)\nret2 <- dbFetch(rs)\ndbGetRowCount(rs)\nnrow(ret1) + nrow(ret2)\n\ndbClearResult(rs)\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: Get Affected Rows Method in R\nDESCRIPTION: Method signature for retrieving the number of rows affected by a data manipulation statement.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_42\n\nLANGUAGE: r\nCODE:\n```\ndbGetRowsAffected(res, ...)\n```\n\n----------------------------------------\n\nTITLE: Affected Rows Example in R\nDESCRIPTION: Shows how to check the number of rows affected by a DELETE statement.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_43\n\nLANGUAGE: r\nCODE:\n```\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"mtcars\", mtcars)\nrs <- dbSendStatement(con, \"DELETE FROM mtcars\")\ndbGetRowsAffected(rs)\nnrow(mtcars)\n\ndbClearResult(rs)\ndbDisconnect(con)\n```\n\n----------------------------------------\n\nTITLE: DBI Execute Method Signature\nDESCRIPTION: Method signature for dbExecute showing the basic parameters required for execution.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_20\n\nLANGUAGE: r\nCODE:\n```\ndbExecute(conn, statement, ...)\n```\n\n----------------------------------------\n\nTITLE: Defining the dbConnect Method Signature\nDESCRIPTION: Method signature for dbConnect which creates a connection to a database management system.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\ndbConnect(drv, ...)\n```\n\n----------------------------------------\n\nTITLE: Defining the dbSendQuery Method Signature\nDESCRIPTION: Method signature for dbSendQuery which submits and executes an SQL query to the database engine without fetching results.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_7\n\nLANGUAGE: r\nCODE:\n```\ndbSendQuery(conn, statement, ...)\n```\n\n----------------------------------------\n\nTITLE: Column Information Method in R\nDESCRIPTION: Method signature for retrieving information about result set columns.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_44\n\nLANGUAGE: r\nCODE:\n```\ndbColumnInfo(res, ...)\n```\n\n----------------------------------------\n\nTITLE: Get Row Count Method in R\nDESCRIPTION: Method signature for retrieving the number of rows fetched from a result set.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_40\n\nLANGUAGE: r\nCODE:\n```\ndbGetRowCount(res, ...)\n```\n\n----------------------------------------\n\nTITLE: Get Statement from Result Set in R\nDESCRIPTION: Method signature for retrieving the SQL statement associated with a result set.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_38\n\nLANGUAGE: r\nCODE:\n```\ndbGetStatement(res, ...)\n```\n\n----------------------------------------\n\nTITLE: DBMS Metadata Retrieval Method Signature in R\nDESCRIPTION: Defines the method signature for retrieving database management system metadata.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_50\n\nLANGUAGE: r\nCODE:\n```\ndbGetInfo(dbObj, ...)\n```\n\n----------------------------------------\n\nTITLE: Defining the dbDataType Method Signature\nDESCRIPTION: Method signature for dbDataType which returns an SQL string describing the appropriate SQL data type for an R object.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ndbDataType(dbObj, obj, ...)\n```\n\n----------------------------------------\n\nTITLE: DBI Quote String Method Signature\nDESCRIPTION: Method signature for dbQuoteString showing the basic parameters for string quoting.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_22\n\nLANGUAGE: r\nCODE:\n```\ndbQuoteString(conn, x, ...)\n```\n\n----------------------------------------\n\nTITLE: DBI Quote Identifier Method Signature\nDESCRIPTION: Method signature for dbQuoteIdentifier showing the basic parameters for identifier quoting.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/vignettes/spec.md#2025-04-21_snippet_24\n\nLANGUAGE: r\nCODE:\n```\ndbQuoteIdentifier(conn, x, ...)\n```\n\n----------------------------------------\n\nTITLE: Enhancing sqlInterpolate in R\nDESCRIPTION: Update to sqlInterpolate function to support both named and positional variables.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/NEWS.md#2025-04-21_snippet_2\n\nLANGUAGE: R\nCODE:\n```\n`sqlInterpolate()` now supports both named and positional variables (#216, @hannesmuehleisen).\n```\n\n----------------------------------------\n\nTITLE: Updating dbQuoteString and dbQuoteIdentifier in R\nDESCRIPTION: Bug fix to ignore invalid UTF-8 strings in dbQuoteString and dbQuoteIdentifier functions.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/NEWS.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nFix `dbQuoteString()` and `dbQuoteIdentifier()` to ignore invalid UTF-8 strings (r-dbi/DBItest#156).\n```\n\n----------------------------------------\n\nTITLE: SQL Query Construction with glue_sql in R\nDESCRIPTION: This code snippet demonstrates using glue_sql to construct a SQL query with proper escaping, joining tables and selecting columns. The query selects columns from 'iris' and 'nicknames' tables with a join condition.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/revdep/problems.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nquery <- glue_sql(\"\n  SELECT {`cols`*}\n  FROM {`iris_db`}\n  JOIN {`nicknames_db`}\n  ON {`iris_species`}={`nicknames_species`}\", \n    .con = con)\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Database with DBI in R\nDESCRIPTION: This snippet demonstrates how to establish a connection to a database using the DBI package. It uses dbConnect() function with a driver-specific implementation.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/revdep/new-problems.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ncon <- dbConnect(RMySQL::MySQL(),\n  dbname = \"test\",\n  host = \"localhost\",\n  port = 3306,\n  user = \"root\",\n  password = \"root\"\n)\n```\n\n----------------------------------------\n\nTITLE: Executing a Query and Fetching Results with DBI in R\nDESCRIPTION: This snippet shows how to execute a SQL query using dbGetQuery() and fetch the results. It demonstrates querying a 'mtcars' table and retrieving specific columns.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/revdep/new-problems.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nres <- dbGetQuery(con, \"SELECT wt, gear, am FROM mtcars\")\n```\n\n----------------------------------------\n\nTITLE: Installing ROracle Package (CRAN Version)\nDESCRIPTION: Attempt to install the CRAN version of the ROracle package. The installation fails due to missing OCI libraries, similar to the development version.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/revdep/failures.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n* installing *source* package 'ROracle' ...\n** package 'ROracle' successfully unpacked and MD5 sums checked\n** using staged installation\nconfigure: error: OCI libraries not found\nERROR: configuration failed for package 'ROracle'\n* removing '/tmp/workdir/ROracle/old/ROracle.Rcheck/ROracle'\n```\n\n----------------------------------------\n\nTITLE: Testing Id() Function with Invalid Input in R\nDESCRIPTION: This test case verifies that the Id() function correctly rejects non-string inputs by throwing an error when a numeric value is provided.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/tests/testthat/_snaps/00-Id.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nId(1)\n```\n\n----------------------------------------\n\nTITLE: LGPL Copyright Notice Block\nDESCRIPTION: Standard copyright notice block for the GNU Lesser General Public License, containing FSF copyright information and basic permissions statement.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/LICENSE.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n```\n\n----------------------------------------\n\nTITLE: LGPL Copyright Notice Template for Source Files\nDESCRIPTION: A template for the copyright notice that should be attached to the beginning of each source file in a library licensed under the GNU LGPL. It includes the basic copyright declaration, license terms, warranty disclaimer, and information about obtaining the full license.\nSOURCE: https://github.com/r-dbi/dbi/blob/main/LICENSE.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\none line to give the library's name and an idea of what it does.\nCopyright (C) year  name of author\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n```"
  }
]