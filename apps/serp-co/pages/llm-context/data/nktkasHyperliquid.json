[
  {
    "owner": "nktkas",
    "repo": "hyperliquid",
    "content": "TITLE: Quick Start: Wallet Client Order Placement\nDESCRIPTION: This snippet demonstrates how to use the WalletClient to place an order on the Hyperliquid exchange. It uses viem to create an account from a private key, initializes the HTTP transport, and defines order parameters.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as hl from \"@nktkas/hyperliquid\";\nimport { privateKeyToAccount } from \"viem/accounts\";\n\nconst account = privateKeyToAccount(\"0x...\"); // Change to your private key\n\nconst transport = new hl.HttpTransport();\nconst walletClient = new hl.WalletClient({ wallet: account, transport });\n\nconst result = await walletClient.order({\n    orders: [{\n        a: 0, // Asset index\n        b: true, // Buy order\n        p: \"30000\", // Price\n        s: \"0.1\", // Size\n        r: false, // Not reduce-only\n        t: {\n            limit: {\n                tif: \"Gtc\", // Good-til-cancelled\n            },\n        },\n    }],\n    grouping: \"na\", // No grouping\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Client\nDESCRIPTION: This snippet demonstrates multiple ways to initialize a WalletClient, including using viem with a private key, ethers with a private key, an external wallet (MetaMask) via viem, and an external wallet directly via `window.ethereum`.  The WalletClient is used for signing and submitting transactions.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as hl from \"@nktkas/hyperliquid\"; // ESM & Common.js\nimport { createWalletClient, custom } from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { ethers } from \"ethers\";\n\nconst transport = new hl.HttpTransport(); // or WebSocketTransport\n\n// 1. Using Viem with private key\nconst viemAccount = privateKeyToAccount(\"0x...\");\nconst viemClient = new hl.WalletClient({ wallet: viemAccount, transport });\n\n// 2. Using Ethers (or Ethers V5) with private key\nconst ethersWallet = new ethers.Wallet(\"0x...\");\nconst ethersClient = new hl.WalletClient({ wallet: ethersWallet, transport });\n\n// 3. Using external wallet (e.g. MetaMask) via Viem\nconst [account] = await window.ethereum.request({ method: \"eth_requestAccounts\" });\nconst externalWallet = createWalletClient({ account, transport: custom(window.ethereum) });\nconst viemMetamaskClient = new hl.WalletClient({ wallet: externalWallet, transport });\n\n// 4. Using external wallet (e.g. MetaMask) via `window.ethereum` directly\nconst windowMetamaskClient = new hl.WalletClient({ wallet: window.ethereum, transport });\n```\n\n----------------------------------------\n\nTITLE: Wallet Client Usage Examples\nDESCRIPTION: This snippet demonstrates example usages of the WalletClient, placing an order, approving an agent, and withdrawing funds. It shows how to use the WalletClient for performing actions that require signing.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as hl from \"@nktkas/hyperliquid\";\nimport { privateKeyToAccount } from \"viem/accounts\";\n\nconst account = privateKeyToAccount(\"0x...\");\nconst transport = new hl.HttpTransport();\nconst client = new hl.WalletClient({ wallet: account, transport });\n\n// Place an orders\nconst result = await client.order({\n    orders: [{\n        a: 0, // Asset index\n        b: true, // Buy order\n        p: \"30000\", // Price\n        s: \"0.1\", // Size\n        r: false, // Not reduce-only\n        t: {\n            limit: {\n                tif: \"Gtc\", // Good-til-cancelled\n            },\n        },\n    }],\n    grouping: \"na\", // No grouping\n});\n\n// Approve an agent\nconst result = await client.approveAgent({\n    agentAddress: \"0x...\",\n    agentName: \"agentName\",\n});\n\n// Withdraw funds\nconst result = await client.withdraw3({\n    destination: account.address, // Withdraw funds to your address\n    amount: \"100\", // 100 USD\n});\n```\n\n----------------------------------------\n\nTITLE: Quick Start: Public Client Usage\nDESCRIPTION: This snippet demonstrates how to use the PublicClient to fetch open orders for a given user address. It initializes the HTTP transport and creates a PublicClient instance.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as hl from \"@nktkas/hyperliquid\";\n\nconst transport = new hl.HttpTransport();\nconst publicClient = new hl.PublicClient({ transport });\n\nconst openOrders = await publicClient.openOrders({ user: \"0x...\" });\n```\n\n----------------------------------------\n\nTITLE: Event Client Usage Examples\nDESCRIPTION: This snippet demonstrates example usages of the EventClient, subscribing to L2 book updates, user fills, and explorer block updates. It shows how to subscribe to events and unsubscribe when done.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as hl from \"@nktkas/hyperliquid\";\n\nconst transport = new hl.WebSocketTransport();\nconst client = new hl.EventClient({ transport });\n\n// L2 Book updates\nconst sub = await client.l2Book({ coin: \"BTC\" }, (data) => {\n    console.log(data);\n});\nawait sub.unsubscribe(); // Unsubscribe from the event\n\n// User fills\nconst sub = await client.userFills({ user: \"0x...\" }, (data) => {\n    console.log(data);\n});\nawait sub.unsubscribe(); // Unsubscribe from the event\n\n// Explorer block updates\nconst sub = await client.explorerBlock((data) => {\n    console.log(data);\n});\nawait sub.unsubscribe(); // Unsubscribe from the event\n```\n\n----------------------------------------\n\nTITLE: Cancel Order Example\nDESCRIPTION: Demonstrates how to cancel an order without using a client by directly signing the action and sending it to the exchange API.  This example uses `signL1Action` from `@nktkas/hyperliquid/signing` and `privateKeyToAccount` from `viem/accounts` to sign and send a cancellation request.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signL1Action } from \"@nktkas/hyperliquid/signing\";\nimport { privateKeyToAccount } from \"viem/accounts\";\n\nconst wallet = privateKeyToAccount(\"0x...\"); // Change to your private key\n\nconst action = {\n    type: \"cancel\",\n    cancels: [\n        { a: 0, o: 12345 }, // Asset index and order ID\n    ],\n};\nconst nonce = Date.now();\n\nconst signature = await signL1Action({\n    wallet,\n    action,\n    nonce,\n    isTestnet: true, // Change to false for mainnet\n});\n\nconst response = await fetch(\"https://api.hyperliquid-testnet.xyz/exchange\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ action, signature, nonce }),\n});\nconst body = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Approve Agent Example\nDESCRIPTION: Demonstrates how to approve an agent without using a client by directly signing the action and sending it to the exchange API. It utilizes `signUserSignedAction` from `@nktkas/hyperliquid/signing` and `privateKeyToAccount` from `viem/accounts` to sign and send an agent approval request.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signUserSignedAction } from \"@nktkas/hyperliquid/signing\";\nimport { privateKeyToAccount } from \"viem/accounts\";\n\nconst wallet = privateKeyToAccount(\"0x...\"); // Change to your private key\n\nconst action = {\n    type: \"approveAgent\",\n    hyperliquidChain: \"Testnet\", // \"Mainnet\" or \"Testnet\"\n    signatureChainId: \"0x66eee\",\n    nonce: Date.now(),\n    agentAddress: \"0x...\"; // Change to your agent address\n    agentName: \"Agent\",\n};\n\nconst signature = await signUserSignedAction({\n    wallet,\n    action,\n    types: {\n        \"HyperliquidTransaction:ApproveAgent\": [\n            { name: \"hyperliquidChain\", type: \"string\" },\n            { name: \"agentAddress\", type: \"address\" },\n            { name: \"agentName\", type: \"string\" },\n            { name: \"nonce\", type: \"uint64\" },\n        ],\n    },\n    chainId: parseInt(action.signatureChainId, 16),\n});\n\nconst response = await fetch(\"https://api.hyperliquid-testnet.xyz/exchange\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ action, signature, nonce: action.nonce }),\n});\nconst body = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Public Client Usage Examples\nDESCRIPTION: This snippet demonstrates example usages of the PublicClient, fetching L2 book data, clearinghouse state, and open orders. It shows how to call different methods of the PublicClient.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as hl from \"@nktkas/hyperliquid\";\n\nconst transport = new hl.HttpTransport();\nconst client = new hl.PublicClient({ transport });\n\n// L2 Book\nconst l2Book = await client.l2Book({ coin: \"BTC\" });\n\n// Account clearinghouse state\nconst clearinghouseState = await client.clearinghouseState({ user: \"0x...\" });\n\n// Open orders\nconst openOrders = await client.openOrders({ user: \"0x...\" });\n```\n\n----------------------------------------\n\nTITLE: Initializing Event Client\nDESCRIPTION: This snippet demonstrates how to initialize an EventClient using the WebSocket transport.  The EventClient is used for subscribing to real-time events.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as hl from \"@nktkas/hyperliquid\"; // ESM & Common.js\n\nconst transport = new hl.WebSocketTransport(); // Only WebSocketTransport\nconst client = new hl.EventClient({ transport });\n```\n\n----------------------------------------\n\nTITLE: Defining WalletClient Class in TypeScript\nDESCRIPTION: This code defines the `WalletClient` class, which provides methods for interacting with the Hyperliquid Exchange API. It allows users to place orders, manage their accounts, and transfer funds. The class requires a `Transport` instance (either `HttpTransport` or `WebSocketTransport`) and a wallet instance (viem, ethers.js, or other wallet libraries) during initialization.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass WalletClient {\n    constructor(args: {\n        transport: HttpTransport | WebSocketTransport;\n        wallet:\n            | AbstractViemWalletClient // viem\n            | AbstractEthersSigner // ethers\n            | AbstractEthersV5Signer // ethers v5\n            | AbstractExtendedViemWalletClient // privy\n            | AbstractWindowEthereum; // window.ethereum (EIP-1193) directly\n        isTestnet?: boolean; // Whether to use testnet (default: false)\n        defaultVaultAddress?: Hex; // Vault address used by default if not provided in method call\n        signatureChainId?: Hex | (() => MaybePromise<Hex>); // Chain ID used for signing (default: trying to guess based on wallet and isTestnet)\n        nonceManager?: () => MaybePromise<number>; // Function to get the next nonce (default: auto-incrementing Date.now())\n    });\n\n    // Order\n    batchModify(args: BatchModifyParameters): Promise<OrderResponseSuccess>;\n    cancel(args: CancelParameters): Promise<CancelResponseSuccess>;\n    cancelByCloid(args: CancelByCloidParameters): Promise<CancelResponseSuccess>;\n    modify(args: ModifyParameters): Promise<SuccessResponse>;\n    order(args: OrderParameters): Promise<OrderResponseSuccess>;\n    scheduleCancel(args: ScheduleCancelParameters): Promise<SuccessResponse>;\n    twapCancel(args: TwapCancelParameters): Promise<TwapCancelResponseSuccess>;\n    twapOrder(args: TwapOrderParameters): Promise<TwapOrderResponseSuccess>;\n    updateIsolatedMargin(args: UpdateIsolatedMarginParameters): Promise<SuccessResponse>;\n    updateLeverage(args: UpdateLeverageParameters): Promise<SuccessResponse>;\n\n    // Account\n    approveAgent(args: ApproveAgentParameters): Promise<SuccessResponse>;\n    approveBuilderFee(args: ApproveBuilderFeeParameters): Promise<SuccessResponse>;\n    claimRewards(): Promise<SuccessResponse>;\n    createSubAccount(args: CreateSubAccountParameters): Promise<CreateSubAccountResponse>;\n    evmUserModify(args: EvmUserModifyParameters): Promise<SuccessResponse>;\n    registerReferrer(args: RegisterReferrerParameters): Promise<SuccessResponse>;\n    reserveRequestWeight(args: ReserveRequestWeightParameters): Promise<SuccessResponse>;\n    setDisplayName(args: SetDisplayNameParameters): Promise<SuccessResponse>;\n    setReferrer(args: SetReferrerParameters): Promise<SuccessResponse>;\n    spotUser(args: SpotUserParameters): Promise<SuccessResponse>;\n\n    // Transfers & Withdrawals\n    spotSend(args: SpotSendParameters): Promise<SuccessResponse>;\n    subAccountSpotTransfer(args: SubAccountSpotTransferParameters): Promise<SuccessResponse>;\n    subAccountTransfer(args: SubAccountTransferParameters): Promise<SuccessResponse>;\n    usdClassTransfer(args: UsdClassTransferParameters): Promise<SuccessResponse>;\n    usdSend(args: UsdSendParameters): Promise<SuccessResponse>;\n    withdraw3(args: Withdraw3Parameters): Promise<SuccessResponse>;\n\n    // Staking\n    cDeposit(args: CDepositParameters): Promise<SuccessResponse>;\n    cWithdraw(args: CWithdrawParameters): Promise<SuccessResponse>;\n    tokenDelegate(args: TokenDelegateParameters): Promise<SuccessResponse>;\n\n    // Market\n    spotDeploy(args: SpotDeployParameters): Promise<BaseExchangeResponse>;\n\n    // Vault\n    createVault(args: CreateVaultParameters): Promise<CreateVaultResponse>;\n    vaultDistribute(args: VaultDistributeParameters): Promise<SuccessResponse>;\n    vaultModify(args: VaultModifyParameters): Promise<SuccessResponse>;\n    vaultTransfer(args: VaultTransferParameters): Promise<SuccessResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP and WebSocket Transports\nDESCRIPTION: This snippet shows how to initialize both the HTTP and WebSocket transports for interacting with the Hyperliquid API.  The transports handle communication with the API endpoints.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as hl from \"@nktkas/hyperliquid\"; // ESM & Common.js\n\n// HTTP Transport\nconst httpTransport = new hl.HttpTransport(); // Accepts optional parameters\n\n// WebSocket Transport\nconst wsTransport = new hl.WebSocketTransport(); // Accepts optional parameters\n```\n\n----------------------------------------\n\nTITLE: Initializing Public Client\nDESCRIPTION: This snippet demonstrates how to initialize a PublicClient using either HTTP or WebSocket transport.  The PublicClient is used for read-only operations.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as hl from \"@nktkas/hyperliquid\"; // ESM & Common.js\n\nconst transport = new hl.HttpTransport(); // or WebSocketTransport\nconst client = new hl.PublicClient({ transport });\n```\n\n----------------------------------------\n\nTITLE: Event Client Class Definition\nDESCRIPTION: Defines the `EventClient` class, which provides access to the Hyperliquid Subscriptions API for real-time updates. It uses a `WebSocketTransport` for communication and offers methods for subscribing to various market and account events. The class constructor takes a `WebSocketTransport` instance as an argument.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventClient {\n    constructor(args: {\n        transport: WebSocketTransport;\n    });\n\n    // Market\n    activeAssetCtx(args: EventActiveAssetCtxParameters, listener: (data: WsActiveAssetCtx | WsActiveSpotAssetCtx) => void): Promise<Subscription>;\n    activeAssetData(args: EventActiveAssetDataParameters, listener: (data: WsActiveAssetData) => void): Promise<Subscription>;\n    allMids(listener: (data: WsAllMids) => void): Promise<Subscription>;\n    bbo(args: EventBboParameters, listener: (data: WsBbo) => void): Promise<Subscription>;\n    candle(args: EventCandleParameters, listener: (data: Candle) => void): Promise<Subscription>;\n    l2Book(args: EventL2BookParameters, listener: (data: Book) => void): Promise<Subscription>;\n    trades(args: EventTradesParameters, listener: (data: WsTrade[]) => void): Promise<Subscription>;\n\n    // Account\n    notification(args: EventNotificationParameters, listener: (data: WsNotification) => void): Promise<Subscription>;\n    userEvents(args: EventUserEventsParameters, listener: (data: WsUserEvent) => void): Promise<Subscription>;\n    userFundings(args: EventUserFundingsParameters, listener: (data: WsUserFundings) => void): Promise<Subscription>;\n    userNonFundingLedgerUpdates(args: EventUserNonFundingLedgerUpdatesParameters, listener: (data: WsUserNonFundingLedgerUpdates) => void): Promise<Subscription>;\n    webData2(args: EventWebData2Parameters, listener: (data: WsWebData2) => void): Promise<Subscription>;\n\n    // Order\n    orderUpdates(args: EventOrderUpdatesParameters, listener: (data: OrderStatus<Order>[]) => void): Promise<Subscription>;\n    userFills(args: EventUserFillsParameters, listener: (data: WsUserFills) => void): Promise<Subscription>;\n    userTwapHistory(args: EventUserTwapHistory, listener: (data: WsUserTwapHistory) => void): Promise<Subscription>;\n    userTwapSliceFills(args: EventUserTwapSliceFills, listener: (data: WsUserTwapSliceFills) => void): Promise<Subscription>;\n\n    // Explorer\n    explorerBlock(listener: (data: WsBlockDetails[]) => void): Promise<Subscription>;\n    explorerTx(listener: (data: TxDetails[]) => void): Promise<Subscription>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PublicClient Class in TypeScript\nDESCRIPTION: This code defines the `PublicClient` class, which provides methods for accessing the Hyperliquid Info API and Explorer API. It allows users to retrieve market data, account information, and historical data. The class requires a `Transport` instance (either `HttpTransport` or `WebSocketTransport`) during initialization.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass PublicClient {\n    constructor(args: {\n        transport: HttpTransport | WebSocketTransport;\n    });\n\n    // Market\n    allMids(): Promise<AllMids>;\n    candleSnapshot(args: CandleSnapshotParameters): Promise<Candle[]>;\n    fundingHistory(args: FundingHistoryParameters): Promise<FundingHistory[]>;\n    l2Book(args: L2BookParameters): Promise<Book>;\n    meta(): Promise<PerpsMeta>;\n    metaAndAssetCtxs(): Promise<PerpsMetaAndAssetCtxs>;\n    perpsAtOpenInterestCap(): Promise<string[]>;\n    predictedFundings(): Promise<PredictedFunding[]>;\n    spotDeployState(args: SpotDeployStateParameters): Promise<SpotDeployState>;\n    spotMeta(): Promise<SpotMeta>;\n    spotMetaAndAssetCtxs(): Promise<SpotMetaAndAssetCtxs>;\n    tokenDetails(args: TokenDetailsParameters): Promise<TokenDetails>;\n\n    // Account\n    clearinghouseState(args: ClearinghouseStateParameters): Promise<PerpsClearinghouseState>;\n    extraAgents(args: ExtraAgentsParameters): Promise<ExtraAgent[]>;\n    isVip(args: IsVipParameters): Promise<boolean>;\n    legalCheck(args: LegalCheckParameters): Promise<LegalCheck>;\n    maxBuilderFee(args: MaxBuilderFeeParameters): Promise<number>;\n    portfolio(args: PortfolioParameters): Promise<PortfolioPeriods>;\n    preTransferCheck(args: PreTransferCheckParameters): Promise<PreTransferCheck>;\n    referral(args: ReferralParameters): Promise<Referral>;\n    spotClearinghouseState(args: SpotClearinghouseStateParameters): Promise<SpotClearinghouseState>;\n    subAccounts(args: SubAccountsParameters): Promise<SubAccount[] | null>;\n    userFees(args: UserFeesParameters): Promise<UserFees>;\n    userFunding(args: UserFundingParameters): Promise<UserFundingUpdate[]>;\n    userNonFundingLedgerUpdates(args: UserNonFundingLedgerUpdatesParameters): Promise<UserNonFundingLedgerUpdate[]>;\n    userRateLimit(args: UserRateLimitParameters): Promise<UserRateLimit>;\n    userRole(args: UserRoleParameters): Promise<UserRole>;\n    userToMultiSigSigners(args: UserToMultiSigSignersParameters): Promise<MultiSigSigners | null>;\n\n    // Order\n    frontendOpenOrders(args: FrontendOpenOrdersParameters): Promise<FrontendOrder[]>;\n    historicalOrders(args: HistoricalOrdersParameters): Promise<OrderStatus<FrontendOrder>[]>;\n    openOrders(args: OpenOrdersParameters): Promise<Order[]>;\n    orderStatus(args: OrderStatusParameters): Promise<OrderLookup>;\n    twapHistory(args: TwapHistoryParameters): Promise<TwapHistory[]>;\n    userFills(args: UserFillsParameters): Promise<Fill[]>;\n    userFillsByTime(args: UserFillsByTimeParameters): Promise<Fill[]>;\n    userTwapSliceFills(args: UserTwapSliceFillsParameters): Promise<TwapSliceFill[]>;\n    userTwapSliceFillsByTime(args: UserTwapSliceFillsByTimeParameters): Promise<TwapSliceFill[]>;\n\n    // Staking\n    delegations(args: DelegationsParameters): Promise<Delegation[]>;\n    delegatorHistory(args: DelegatorHistoryParameters): Promise<DelegatorUpdate[]>;\n    delegatorRewards(args: DelegatorRewardsParameters): Promise<DelegatorReward[]>;\n    delegatorSummary(args: DelegatorSummaryParameters): Promise<DelegatorSummary>;\n    validatorSummaries(): Promise<ValidatorSummary[]>;\n\n    // Vault\n    userVaultEquities(args: UserVaultEquitiesParameters): Promise<VaultEquity[]>;\n    vaultDetails(args: VaultDetailsParameters): Promise<VaultDetails | null>;\n    vaultSummaries(): Promise<VaultSummary[]>;\n\n    // Explorer\n    blockDetails(args: BlockDetailsParameters): Promise<BlockDetailsResponse>;\n    txDetails(args: TxDetailsParameters): Promise<TxDetailsResponse>;\n    userDetails(args: UserDetailsParameters): Promise<UserDetailsResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Transport Class Definition\nDESCRIPTION: Defines the `HttpTransport` class, which executes HTTP requests using the `fetch` API. It supports testnet/mainnet selection, request timeouts, custom fetch options, and request/response callbacks.  It takes optional configurations like `isTestnet`, `timeout`, `server`, `fetchOptions`, `onRequest`, and `onResponse`.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass HttpTransport {\n    constructor(options?: {\n        isTestnet?: boolean; // Whether to use testnet url (default: false)\n        timeout?: number; // Request timeout in ms (default: 10_000)\n        server?: \"api\" | \"api2\" | \"api-ui\"; // Server URL (default: \"api\" = \"https://api.hyperliquid.xyz\")\n        fetchOptions?: RequestInit; // A custom fetch options\n        onRequest?: (request: Request) => MaybePromise<Request | void | null | undefined>; // A callback before request is sent\n        onResponse?: (response: Response) => MaybePromise<Response | void | null | undefined>; // A callback after response is received\n    });\n\n    request(endpoint: \"info\" | \"exchange\" | \"explorer\", payload: unknown, signal?: AbortSignal): Promise<unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Transport Class Definition\nDESCRIPTION: Defines the `WebSocketTransport` class, which executes requests and subscribes to events via a WebSocket connection. It supports custom URLs, timeouts, keep-alive pings, and reconnection policies. The class constructor takes configuration options for URL, timeout, keepAlive, and reconnect parameters.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebSocketTransport {\n    constructor(options?: {\n        url?: string | URL; // WebSocket URL (default: \"wss://api.hyperliquid.xyz/ws\")\n        timeout?: number; // Request timeout in ms (default: 10_000)\n        keepAlive?: { // Keep-alive configuration\n            interval?: number; // Ping interval in ms (default: 20_000)\n        };\n        reconnect?: { // Reconnection policy configuration for closed connections\n            maxRetries?: number; // Maximum number of reconnection attempts (default: 3)\n            connectionTimeout?: number; // Connection timeout in ms (default: 10_000)\n            connectionDelay?: number | ((attempt: number) => number | Promise<number>); // Delay between reconnection (default: Exponential backoff (max 10s))\n            shouldReconnect?: (event: CloseEvent) => boolean | Promise<boolean>; // Custom reconnection logic (default: Always reconnect)\n            messageBuffer?: MessageBufferStrategy; // Message buffering strategy between reconnection (default: FIFO buffer)\n        };\n    });\n\n    request(endpoint: \"info\" | \"exchange\", payload: unknown, signal?: AbortSignal): Promise<unknown>;\n    subscribe(\n        channel: string,\n        payload: unknown,\n        listener: (data: CustomEvent) => void,\n        signal?: AbortSignal,\n    ): Promise<Subscription>;\n\n    ready(signal?: AbortSignal): Promise<void>;\n    close(signal?: AbortSignal): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperliquid SDK\nDESCRIPTION: These commands demonstrate how to install the Hyperliquid SDK using various package managers like npm, yarn, pnpm, bun and deno. It also shows importing directly from a CDN for web usage.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i @nktkas/hyperliquid\n\n# yarn\nyarn add @nktkas/hyperliquid\n\n# pnpm\npnpm add @nktkas/hyperliquid\n\n# bun\nbun i @nktkas/hyperliquid\n\n# deno\ndeno add jsr:@nktkas/hyperliquid\n\n# web (import directly)\nimport * as hl from \"https://esm.sh/jsr/@nktkas/hyperliquid\";\n```\n\n----------------------------------------\n\nTITLE: Running Basic Tests with Deno\nDESCRIPTION: This command executes most of the tests for the Hyperliquid library using Deno. It requires network and read permissions to access external resources and build type schemas dynamically.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/tests/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno test --allow-net --allow-read\n```\n\n----------------------------------------\n\nTITLE: Running Advanced Tests with Deno\nDESCRIPTION: This command executes all tests, including those requiring a testnet account. It requires network and read permissions, as well as environment variables for the private key, sub-account address, and vault address. Ensure the testnet account is funded.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/tests/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndeno test --allow-net --allow-read -- PRIVATE_KEY SUB_ACCOUNT_ADDRESS VAULT_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Git\nDESCRIPTION: Commits changes to the local Git repository. Requires a Git repository to be initialized and modified files to be staged. The command takes a commit message as an argument and creates a new commit with the staged changes.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am \"Add new feature or fix\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch with Git\nDESCRIPTION: Creates a new branch in the local Git repository. Requires the Git repository to be initialized. The command takes the branch name as an argument and creates a new branch based on the current HEAD.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository with Git\nDESCRIPTION: Clones a Git repository to a local machine. Requires Git to be installed. The command takes the repository URL as an argument and downloads the entire repository content to the current directory.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/hyperliquid.git\n```\n\n----------------------------------------\n\nTITLE: Pushing Git Branch to Remote Repository with Git\nDESCRIPTION: Pushes a local Git branch to a remote repository. Requires a Git repository to be initialized and a remote repository to be configured. The command takes the remote name and branch name as arguments and uploads the local branch to the remote repository.\nSOURCE: https://github.com/nktkas/hyperliquid/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```"
  }
]