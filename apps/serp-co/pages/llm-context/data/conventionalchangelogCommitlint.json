[
  {
    "owner": "conventional-changelog",
    "repo": "commitlint",
    "content": "TITLE: Install Husky and Configure Commitlint with npm\nDESCRIPTION: This snippet demonstrates how to install Husky as a dev dependency using npm, initialize it, and configure the commit-msg hook to run commitlint on each commit. It includes adding a script to package.json as an alternative to directly modifying the .husky/commit-msg file.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/local-setup.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev husky\n\nnpx husky install\n\n# Add commit message linting to commit-msg hook\necho \"npx --no -- commitlint --edit \\$1\" > .husky/commit-msg\n# Windows users should use ` to escape dollar signs\necho \"npx --no commitlint --edit `$1\" > .husky/commit-msg\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm pkg set scripts.commitlint=\"commitlint --edit\"\necho \"npm run commitlint \\${1}\" > .husky/commit-msg\n```\n\n----------------------------------------\n\nTITLE: Installing commitlint and convention config with npm\nDESCRIPTION: Installs commitlint CLI and the conventional configuration package as dev dependencies using npm. Ensures both packages are added to the project dependencies correctly.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/getting-started.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @commitlint/{cli,config-conventional}\n```\n\n----------------------------------------\n\nTITLE: Example commitlint configuration object in JavaScript\nDESCRIPTION: Provides an example of a JavaScript configuration object for commitlint, illustrating extension of shared configs, custom rules, ignore functions, and prompt settings. Dependencies such as '@commitlint/config-conventional' and '@commitlint/format' are referenced within, and the configuration can be exported as default or via module.exports.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/configuration.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Configuration = {\n  extends: [\"@commitlint/config-conventional\"],\n  parserPreset: \"conventional-changelog-atom\",\n  formatter: \"@commitlint/format\",\n  rules: {\n    \"type-enum\": [2, \"always\", [\"foo\"]],\n  },\n  ignores: [(commit) => commit === \"\"],\n  defaultIgnores: true,\n  helpUrl: \"https://github.com/conventional-changelog/commitlint/#what-is-commitlint\",\n  prompt: {\n    messages: {},\n    questions: {\n      type: {\n        description: \"please input type:\",\n      },\n    },\n  },\n};\n\nexport default Configuration;\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Workflow with GitHub Actions (YAML)\nDESCRIPTION: This YAML defines a GitHub Actions workflow triggered by push and pull request events. It checks out the code, installs necessary OS packages (git, curl, nodejs), sets up Node.js, installs commitlint and its conventionalcommits configuration, prints version information, and then conditionally validates either the last commit (on push) or commits within the PR range (on pull request) using npx commitlint. Fetching depth 0 is crucial for checking PR commits.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/ci-setup.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: CI\n\non: [push, pull_request]\n\njobs:\n  commitlint:\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install required dependencies\n        run: |\n          apt update\n          apt install -y sudo\n          sudo apt install -y git curl\n          curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\n          sudo DEBIAN_FRONTEND=noninteractive apt install -y nodejs\n      - name: Print versions\n        run: |\n          git --version\n          node --version\n          npm --version\n          npx commitlint --version\n      - name: Install commitlint\n        run: |\n          npm install conventional-changelog-conventionalcommits\n          npm install commitlint@latest\n\n      - name: Validate current commit (last commit) with commitlint\n        if: github.event_name == 'push'\n        run: npx commitlint --last --verbose\n\n      - name: Validate PR commits with commitlint\n        if: github.event_name == 'pull_request'\n        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring @commitlint/config-conventional With npm and JavaScript\nDESCRIPTION: Illustrates the installation of the @commitlint/config-conventional and @commitlint/cli packages using npm and the setup of a basic commitlint configuration file in JavaScript that extends the conventional config. Requires npm and Node.js environment.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @commitlint/config-conventional @commitlint/cli\necho \"export default {extends: ['@commitlint/config-conventional']};\" > commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Commitlint with JavaScript\nDESCRIPTION: This snippet demonstrates how to set up commitlint configuration in a JavaScript project to enforce commit message conventions. It defines rules for commit message formatting and dependencies required for validation. Expected inputs are commit messages, and the output is validation results that indicate compliance.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/rules/license.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// commitlint.config.js\nmodule.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [2, 'always', ['build', 'chore', 'ci', 'docs', 'feat', 'fix', 'perf', 'refactor', 'style', 'test']],\n    'subject-case': [2, 'never', ['sentence-case', 'start-case', 'pascal-case']]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading and using commitlint configuration with @commitlint/load\nDESCRIPTION: Example showing how to load commitlint configuration using @commitlint/load and then use it with the lint function. This demonstrates integration with conventional commit standards.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/lint.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport load from \"@commitlint/load\";\nimport lint from \"@commitlint/lint\";\n\nconst CONFIG = {\n  extends: [\"@commitlint/config-conventional\"],\n};\n\nconst opts = await load(CONFIG);\nconst report = await lint(\n  \"foo: bar\",\n  opts.rules,\n  opts.parserPreset ? { parserOpts: opts.parserPreset.parserOpts } : {},\n);\nconsole.log(report);\n/* => \n{ \n  valid: false,\n  errors: [ \n    { \n      level: 2,\n      valid: false,\n      name: 'type-enum',\n      message: 'type must be one of [build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test]' \n    } \n  ],\n  warnings: [] \n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing commitlint and config via deno\nDESCRIPTION: Adds commitlint CLI and conventional config as development dependencies in deno environment using deno add command. Facilitates usage in Deno projects.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/getting-started.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndeno add --dev npm:@commitlint/cli npm:@commitlint/config-conventional\n```\n\n----------------------------------------\n\nTITLE: Initializing Commitlint Configuration in JavaScript\nDESCRIPTION: This snippet sets up the commitlint configuration by exporting an object defining the rules for commit message validation. It requires the 'module.exports' syntax used in Node.js environments and customizes rules such as 'type-enum' to specify acceptable commit types. The purpose is to establish standards for commit messages used in the project.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-nx-scopes/license.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  rules: {\n    'type-enum': [2, 'always', ['feat', 'fix', 'docs', 'style', 'refactor', 'test', 'chore']],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Commitlint CLI and Config - Bash\nDESCRIPTION: Provides commands to install @commitlint/cli and @commitlint/config-conventional as development dependencies using npm or yarn. Both packages are required to enable commit message linting and enforce conventional commit standards.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/cz-commitlint/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @commitlint/config-conventional @commitlint/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @commitlint/config-conventional @commitlint/cli -D\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Commitlint\nDESCRIPTION: Installs necessary commitlint packages and creates a basic configuration file that extends the conventional commit format. This sets up the environment for commit message validation.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/use-prompt.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @commitlint/{cli,config-conventional,prompt-cli}\n\necho \"export default { extends: ['@commitlint/config-conventional'] };\" > commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Configuring commitlint to extend conventional config\nDESCRIPTION: Creates a commitlint configuration file that extends the '@commitlint/config-conventional' preset. Uses 'echo' to generate a configuration with the 'extends' property, enabling adherence to conventional commit standards.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/getting-started.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho \"export default { extends: ['@commitlint/config-conventional'] };\" > commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Extending Commitlint Configuration Using npm Packages in JavaScript\nDESCRIPTION: Shows how to extend commitlint configuration by referencing an npm package name as a string in the extends array of commitlint.config.js, which loads and merges rules from the named package. Requires installation of the referenced package as a dev dependency using npm. The configuration uses the UserConfig type from '@commitlint/types'.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/concepts/shareable-config.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @type {import('@commitlint/types').UserConfig}\n */\nexport default {\n  extends: [\"example\"], // => commitlint-config-example\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring commitlint to use Conventional Config - Bash\nDESCRIPTION: Demonstrates how to quickly set up commitlint with the conventional config by echoing a basic module.exports settings object to commitlint.config.js. This command ensures commitlint extends @commitlint/config-conventional and is required for proper linting of commit messages.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/cz-commitlint/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho \"module.exports = {extends: ['@commitlint/config-conventional']};\" > commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Checking Subject Case Formatting with subject-case Rule in Commitlint (Shell)\nDESCRIPTION: This code verifies that commit subject lines do not use 'sentence-case', 'start-case', 'pascal-case', or 'upper-case' using the subject-case rule. Only other cases are allowed, and the snippet demonstrates both passing and failing examples.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix(SCOPE): Some message\" # fails\necho \"fix(SCOPE): Some Message\" # fails\necho \"fix(SCOPE): SomeMessage\" # fails\necho \"fix(SCOPE): SOMEMESSAGE\" # fails\necho \"fix(scope): some message\" # passes\necho \"fix(scope): some Message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Configuring Commitizen Adapter in package.json - JSON\nDESCRIPTION: Shows the necessary package.json configuration to enable the Commitizen adapter with @commitlint/cz-commitlint. Specifies the 'commit' script for git-cz and commits, and designates '@commitlint/cz-commitlint' as the Commitizen path. package.json should be updated to include these fields for proper Commitizen and adapter linkage.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/cz-commitlint/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"commit\": \"git-cz\"\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"@commitlint/cz-commitlint\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example commitlint configuration in JavaScript using CommonJS\nDESCRIPTION: Shows how to export the configuration object with CommonJS syntax, compatible with Node.js environments that do not support ES modules. The object structure remains the same as the ESM version.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/configuration.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = Configuration;\n```\n\n----------------------------------------\n\nTITLE: Testing Commitlint Setup\nDESCRIPTION: This snippet demonstrates how to test the commitlint configuration by checking the last commit against the defined rules using the commitlint CLI. It verifies whether the commit message is valid based on the configured rules.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/local-setup.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx commitlint --from HEAD~1 --to HEAD --verbose\n```\n\n----------------------------------------\n\nTITLE: Installing Commitizen and Dependencies with npm or yarn - Bash\nDESCRIPTION: Demonstrates how to install @commitlint/cz-commitlint, commitizen, and inquirer@9 as development dependencies using either npm or yarn. inquirer@9 is required as a peer dependency. Suitable for projects intending to set up standardized commit messaging workflows with commitlint integration.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/cz-commitlint/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @commitlint/cz-commitlint commitizen inquirer@9  # inquirer is required as peer dependency\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @commitlint/cz-commitlint commitizen inquirer@9             # inquirer is required as peer dependency\n```\n\n----------------------------------------\n\nTITLE: Validating Maximum Header Length with header-max-length Rule in Commitlint (Shell)\nDESCRIPTION: This code checks whether the commit header (everything before the first linebreak) is equal to or shorter than 72 characters, enforcing the header-max-length rule. Commit messages that exceed the maximum are rejected, and the example illustrates both correct and incorrect uses.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix: some message that is way too long and breaks the line max-length by several characters\" # fails\necho \"fix: some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Install Husky and Configure Commitlint with yarn\nDESCRIPTION: This snippet shows how to install Husky as a dev dependency using yarn, initialize it, and configure the commit-msg hook to run commitlint. It also presents an alternative method of creating a script inside package.json to invoke commitlint.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/local-setup.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev husky\n\nyarn husky install\n\n# Add commit message linting to commit-msg hook\necho \"yarn commitlint --edit \\$1\" > .husky/commit-msg\n# Windows users should use ` to escape dollar signs\necho \"yarn commitlint --edit `$1\" > .husky/commit-msg\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm pkg set scripts.commitlint=\"commitlint --edit\"\necho \"yarn commitlint \\${1}\" > .husky/commit-msg\n```\n\n----------------------------------------\n\nTITLE: Validating Commit Type with type-enum Rule in Commitlint (Shell)\nDESCRIPTION: These commands show how the type-enum rule is enforced by commitlint, allowing only predefined types (e.g., 'fix') in the commit message. Dependencies include @commitlint/config-angular and a commitlint-configured repo. The input is a commit message, and the output is a pass or fail depending on whether the type matches allowed values.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho \"foo: some message\" # fails\necho \"fix: some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Linting commit messages with type-case rule - shell examples\nDESCRIPTION: Shows enforcement of the type-case rule requiring the 'type' in the commit message to be lowercase. Commit messages with uppercase types will fail linting. Used to ensure consistent casing style.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho \"FIX: some message\" # fails\necho \"fix: some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Installing commitlint and convention config with yarn\nDESCRIPTION: Installs commitlint CLI and the conventional config package as dev dependencies using yarn. Simplifies dependency management with yarn's add command.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/getting-started.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @commitlint/{cli,config-conventional}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plain Array Rule in Commitlint Configuration - JavaScript\nDESCRIPTION: This snippet demonstrates defining a Commitlint rule using a static array for the 'header-max-length' rule within the config object. No external dependencies are required beyond Commitlint. The rule array contains three elements: level (0 disables the rule), applicability (\"always\"), and the value (72). The input is the configuration object; the output is a disabled 'header-max-length' rule enforcing a maximum length of 72 characters. No dynamic resolution or asynchronous behavior is present.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/rules-configuration.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  // ...\n  rules: {\n    \"header-max-length\": [0, \"always\", 72], // [!code focus]\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using Commitizen with Configured Adapter - Bash\nDESCRIPTION: Shows how to stage changes and launch the commitizen interactive commit workflow using npm or yarn scripts after configuration. The process leverages custom scripts ('commit') to invoke git-cz, optimizing for consistent, linted commit formatting across contributors.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/cz-commitlint/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\nnpm run commit\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn commit\n```\n\n----------------------------------------\n\nTITLE: Using @commitlint/lint with custom parser options\nDESCRIPTION: Example demonstrating how to use custom parser options with the lint function. The custom parser extracts type and scope from a different commit message format.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/lint.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst opts = {\n  parserOpts: {\n    headerPattern: /^(\\w*)-(\\w*)/,\n    headerCorrespondence: [\"type\", \"scope\"],\n  },\n};\n\nconst report = await lint(\n  \"foo-bar\",\n  { \"type-enum\": [2, \"always\", [\"foo\"]] },\n  opts,\n);\nconsole.log(report);\n// => { valid: true, errors: [], warnings: [] }\n```\n\n----------------------------------------\n\nTITLE: Writing Custom Commitlint Rules in JavaScript\nDESCRIPTION: This snippet illustrates creating custom rules for commitlint by defining validation functions in JavaScript. Dependencies include commitlint API modules. Inputs are commit message objects, and outputs indicate rule compliance. Custom rules help maintain project-specific commit message formats.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/rules/license.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// custom-rules.js\nmodule.exports = {\n  rules: {\n    'body-max-line-length': ({ body }) => {\n      const maxLength = 72;\n      const violations = body.split('\\n').some(line => line.length > maxLength);\n      return [!violations, `Body lines should not exceed ${maxLength} characters.`];\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Conventional Commit Example\nDESCRIPTION: Demonstrates the general pattern of a conventional commit message, showing the structure of type, optional scope, and subject.  Multiple scopes are supported, delimited by \"/\", \"\\\" and \",\".\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntype(scope?): subject  #scope is optional; multiple scopes are supported (current delimiter options: \"/\", \"\\\" and \",\")\n```\n\n----------------------------------------\n\nTITLE: Commitlint CLI Help Output\nDESCRIPTION: This snippet displays the help message generated by the `commitlint --help` command. It details the usage of the command-line interface, including the various options available such as configuration, output formatting, and verbosity levels. The output provides a comprehensive guide to using the commitlint CLI for linting commit messages.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/cli.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n❯ npx commitlint --help\n\n@commitlint/cli@19.5.0 - Lint your commit messages\n\n[input] reads from stdin if --edit, --env, --from and --to are omitted\n\nOptions:\n  -c, --color          toggle colored output           [boolean] [default: true]\n  -g, --config         path to the config file; result code 9 if config is\n                       missing                                          [string]\n      --print-config   print resolved config\n                                          [string] [choices: \"\", \"text\", \"json\"]\n  -d, --cwd            directory to execute in\n                                         [string] [default: (Working Directory)]\n  -e, --edit           read last commit message from the specified file or\n                       fallbacks to ./.git/COMMIT_EDITMSG               [string]\n  -E, --env            check message in the file at path given by environment\n                       variable value                                   [string]\n  -x, --extends        array of shareable configurations to extend       [array]\n  -H, --help-url       help url in error message                        [string]\n  -f, --from           lower end of the commit range to lint; applies if\n                       edit=false                                       [string]\n      --from-last-tag  uses the last tag as the lower end of the commit range to\n                       lint; applies if edit=false and from is not set [boolean]\n      --git-log-args   additional git log arguments as space separated string,\n                       example '--first-parent --cherry-pick'           [string]\n  -l, --last           just analyze the last commit; applies if edit=false\n                                                                       [boolean]\n  -o, --format         output format of the results                     [string]\n  -p, --parser-preset  configuration preset to use for\n                       conventional-commits-parser                      [string]\n  -q, --quiet          toggle console output          [boolean] [default: false]\n  -t, --to             upper end of the commit range to lint; applies if\n                       edit=false                                       [string]\n  -V, --verbose        enable verbose output for reports without problems\n                                                                       [boolean]\n  -s, --strict         enable strict mode; result code 2 for warnings, 3 for\n                       errors                                          [boolean]\n      --options        path to a JSON file or Common.js module containing CLI\n                       options\n  -v, --version        display version information                     [boolean]\n  -h, --help           Show help                                       [boolean]\n```\n\n----------------------------------------\n\nTITLE: Configuring Commitlint - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure commitlint to use the `@commitlint/config-patternplate` configuration. It creates a `commitlint.config.js` file which exports an object with the `extends` property set to an array containing the `@commitlint/config-patternplate` configuration. This setup ensures that commit messages will be validated according to the patternplate style. Dependencies: @commitlint/config-patternplate.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-patternplate/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\necho \"module.exports = {extends: ['@commitlint/config-patternplate']};\" > commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Extending Commitlint Configuration Using Scoped npm Packages in JavaScript\nDESCRIPTION: Demonstrates two methods of extending commitlint configuration via scoped npm packages. The first example references the full scoped package name explicitly in extends. The second example shows specifying only the scope prefix; commitlint will automatically append '/commitlint-config' to load the config. This enables flexibility in managing scoped shareable configurations.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/concepts/shareable-config.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  extends: [\"@commitlint/config-conventional\"], // => @commitlint/config-conventional\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  extends: [\"@coolcompany\"], // => @coolcompany/commitlint-config\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring commitlint Script in package.json (Default)\nDESCRIPTION: Adds a `commitmsg` script to the `scripts` section of `package.json`. This script executes `commitlint` using the conventional configuration (`@commitlint/config-conventional`) specified by the `-x` flag and integrates with Git hooks via `-E GIT_PARAMS`.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/support/upgrade.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"commitmsg\": \"commitlint -x @commitlint/config-conventional -E GIT_PARAMS\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linting commit messages with subject-case rule - shell examples\nDESCRIPTION: The subject-case rule forbids the commit subject from using certain casing styles such as sentence-case, start-case, pascal-case, or upper-case. Commit messages violating this casing constraint produce an error. This enforces a consistent stylistic subject.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix(SCOPE): Some message\" # fails\necho \"fix(SCOPE): Some Message\" # fails\necho \"fix(SCOPE): SomeMessage\" # fails\necho \"fix(SCOPE): SOMEMESSAGE\" # fails\necho \"fix(scope): some message\" # passes\necho \"fix(scope): some Message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Linting commit messages with footer-max-line-length rule - shell examples\nDESCRIPTION: Limits each line in the footer section to no more than 100 characters. Lines exceeding this limit will error, ensuring footer readability and adherence to line length norms.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix: some message\n\nBREAKING CHANGE: footer with multiple lines\nhas a message that is way too long and will break the line rule 'line-max-length' by several characters\" # fails\n\necho \"fix: some message\n\nBREAKING CHANGE: footer with multiple lines\nbut still no line is too long\" # passes\n```\n\n----------------------------------------\n\nTITLE: Installing a Commitlint Shareable Config Package Using npm in Shell\nDESCRIPTION: Provides the shell command needed to install the shareable commitlint configuration package 'commitlint-config-example' as a development dependency in an npm project. This enables commitlint to resolve and merge the rules from this package when specified in extends.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/concepts/shareable-config.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev commitlint-config-example\n```\n\n----------------------------------------\n\nTITLE: Using @commitlint/load with Inline Rules\nDESCRIPTION: Example showing how to use the load function with inline commitlint rules in JavaScript.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/load.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst config = await load({\n  rules: {\n    \"body-leading-blank\": [2, \"always\"],\n  },\n});\nconsole.log(config);\n// => { extends: [], rules: { 'body-leading-blank': [ 2, 'always' ] } }\n```\n\n----------------------------------------\n\nTITLE: Linting commit messages with type-enum rule - shell examples\nDESCRIPTION: Demonstrates how the type-enum rule enforces that the commit message's 'type' must be one of the allowed values, producing an error if not. Requires using commitlint with conventional commits. Valid types include build, chore, ci, docs, feat, fix, perf, refactor, revert, style, and test.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho \"foo: some message\" # fails\necho \"fix: some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Linting commit messages with header-max-length rule - shell examples\nDESCRIPTION: Ensures the entire commit message header does not exceed 100 characters. Messages longer than this limit are rejected to maintain readability and standardization.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix: some message that is way too long and breaks the line max-length by several characters\" # fails\necho \"fix: some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Configuring commitlint Rules for Issue Prefix Enforcement in JSON\nDESCRIPTION: This snippet demonstrates how to configure commitlint within a package.json file to enforce the presence of references (such as issue tickets) in commit messages using a required prefix (e.g., 'PROJ-'). It sets up the 'references-empty' rule and customizes the parser to recognize issues prefixed accordingly. Dependencies include the 'commitlint' tool and its configuration support in JavaScript projects. The configuration expects commit messages to include references matching the specified prefix and denies empty references, ensuring traceability between commits and issue tracking systems.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/examples.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n  // ...\n  commitlint: {\n    \"rules\": {\n      \"references-empty\": [2, \"never\"]\n    },\n    \"parserPreset\": {\n      \"parserOpts\": {\n        \"issuePrefixes\": [\"PROJ-\"]\n      }\n    }\n  }\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Validating commit message with type-enum rule (invalid case)\nDESCRIPTION: Example showing validation of a commit message that fails the type-enum rule, resulting in a warning. The message type 'foo' is not in the allowed list ['bar'].\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/lint.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst report = await lint(\"foo: bar\", { \"type-enum\": [1, \"always\", [\"bar\"]] });\nconsole.log(report);\n/* => \n{ \n  valid: false,\n  errors: [],\n  warnings: [ \n    { \n      level: 1,\n      valid: false,\n      name: 'type-enum',\n      message: 'type must be one of [bar]' \n    } \n  ]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Chore Commit Example\nDESCRIPTION: Illustrates a real-world example of a chore commit message, indicating a task such as running tests on Travis CI. No specific dependencies are required.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nchore: run tests on travis ci\n```\n\n----------------------------------------\n\nTITLE: Fix Commit Example\nDESCRIPTION: Provides a practical example of a fix commit message, specifying the scope as 'server' and the subject as 'send cors headers'.  This indicates a bug fix related to CORS headers on the server.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nfix(server): send cors headers\n```\n\n----------------------------------------\n\nTITLE: Importing @commitlint/lint in JavaScript\nDESCRIPTION: Example showing how to import the lint function from the @commitlint/lint package in a JavaScript file.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/lint.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport lint from \"@commitlint/lint\";\n```\n\n----------------------------------------\n\nTITLE: Installing @commitlint/format using npm\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to install the `@commitlint/format` package. The `--save` flag (often default in newer npm versions but shown for clarity) adds the package as a runtime dependency in the project's `package.json` file. This package is required to format reports generated by commitlint.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/format/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @commitlint/format\n```\n\n----------------------------------------\n\nTITLE: Defining Commitlint Report and Formatting Types in TypeScript\nDESCRIPTION: This TypeScript snippet defines essential types used by the @commitlint/format package, including Problem, Report, ReportResult, and formatOptions. It models lint message severity levels, categorizes issues into warnings and errors within reports, and specifies customizable formatting options such as color usage, severity signs, color schemes, verbosity, and help URLs. These types provide a foundation for implementing and consuming the formatter's functionality.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/format.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Problem = {\n  /*\n   * Level of the problem hint | warning | error\n   */\n  level: 0 | 1 | 2;\n  /*\n   * Name of the problem to annotate the message with\n   */\n  name: string;\n  /*\n   * Message to print\n   */\n  message: string;\n}\n\ntype Report = {\n  results: ReportResult[];\n}\n\ntype ReportResult = {\n  errors: Problem[];\n  warnings: Problem[];\n}\n\ntype formatOptions = {\n  /**\n   * Color the output\n   **/\n  color: boolean = true;\n\n  /**\n   * Signs to use as decoration for messages with severity 0, 1, 2\n   **/\n  signs: readonly [string; string; string] = [' ', '⚠', '✖'];\n\n  /**\n   * Colors to use for messages with severity 0, 1, 2\n   **/\n  colors: readonly [string; string; string] = ['white', 'yellow', 'red'];\n\n  /**\n   * Print summary and inputs for reports without problems\n   **/\n  verbose: boolean = false;\n\n  /**\n   * URL to print as help for reports with problems\n   **/\n  helpUrl: string;\n}\n\nformat(report?: Report = {}, options?: formatOptions = {}) => string[];\n```\n\n----------------------------------------\n\nTITLE: Install Husky and Configure Commitlint with pnpm\nDESCRIPTION: This code snippet details the installation of Husky as a dev dependency with pnpm, its initialization, and the configuration of the commit-msg hook. The hook is set up to execute commitlint. An alternative to directly modifying the hook file is shown by adding a script to the package.json.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/local-setup.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev husky\n\npnpm husky install\n\n# Add commit message linting to commit-msg hook\necho \"pnpm dlx commitlint --edit \\$1\" > .husky/commit-msg\n# Windows users should use ` to escape dollar signs\necho \"pnpm dlx commitlint --edit `$1\" > .husky/commit-msg\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm pkg set scripts.commitlint=\"commitlint --edit\"\necho \"pnpm commitlint \\${1}\" > .husky/commit-msg\n```\n\n----------------------------------------\n\nTITLE: Install Husky and Configure Commitlint with deno\nDESCRIPTION: This snippet outlines how to install Husky as a dev dependency using deno, initialize it, and configure the commit-msg hook to use commitlint. It focuses on utilizing deno tasks for executing the commitlint command.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/local-setup.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndeno add --dev husky\n\ndeno task --eval husky install\n\n# Add commit message linting to commit-msg hook\necho \"deno task --eval commitlint --edit \\$1\" > .husky/commit-msg\n# Windows users should use ` to escape dollar signs\necho \"deno task --eval commitlint --edit `$1\" > .husky/commit-msg\n```\n\n----------------------------------------\n\nTITLE: Configuring Commitlint on Azure Pipelines (YAML)\nDESCRIPTION: This Azure Pipelines YAML sets up Node.js, installs commitlint dependencies, and conditionally runs linting based on the build reason. For pushes, it validates the last commit (--last). For pull requests, it uses the Azure DevOps API via curl and jq to find the number of commits in the PR and constructs the commit range using variables like System.PullRequest.SourceCommitId.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/ci-setup.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  - checkout: self\n    fetchDepth: 0\n\n  - task: NodeTool@0\n    inputs:\n      versionSpec: \"20.x\"\n      checkLatest: true\n\n  - script: |\n      git --version\n      node --version\n      npm --version\n      npx commitlint --version\n    displayName: Print versions\n\n  - script: |\n      npm install conventional-changelog-conventionalcommits\n      npm install commitlint@latest\n    displayName: Install commitlint\n\n  - script: npx commitlint --last --verbose\n    condition: ne(variables['Build.Reason'], 'PullRequest')\n    displayName: Validate current commit (last commit) with commitlint\n\n  - script: |\n      echo \"Accessing Azure DevOps API...\"\n\n      response=$(curl -s -X GET -H \"Cache-Control: no-cache\" -H \"Authorization: Bearer $(System.AccessToken)\" $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullRequests/$(System.PullRequest.PullRequestId)/commits?api-version=6.0)\n      numberOfCommits=$(echo \"$response\" | jq -r '.count')\n\n      echo \"$numberOfCommits commits to check\"\n\n      npx commitlint --from $(System.PullRequest.SourceCommitId)~${numberOfCommits} --to $(System.PullRequest.SourceCommitId) --verbose\n    condition: eq(variables['Build.Reason'], 'PullRequest')\n    displayName: Validate PR commits with commitlint\n```\n\n----------------------------------------\n\nTITLE: TypeScript commitlint configuration with types\nDESCRIPTION: Demonstrates enhancing the JavaScript configuration with TypeScript by importing types and enums from '@commitlint/types'. The configuration object is typed with 'UserConfig' and utilizes 'RuleConfigSeverity' for rule severity levels.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/configuration.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { UserConfig } from \"@commitlint/types\";\nimport { RuleConfigSeverity } from \"@commitlint/types\";\n\nconst Configuration: UserConfig = {\n  extends: [\"@commitlint/config-conventional\"],\n  parserPreset: \"conventional-changelog-atom\",\n  formatter: \"@commitlint/format\",\n  rules: {\n    \"type-enum\": [RuleConfigSeverity.Error, \"always\", [\"foo\"]],\n  },\n  // ... additional config\n};\n\nexport default Configuration;\n```\n\n----------------------------------------\n\nTITLE: Filtering Projects by Tags in commitlint config\nDESCRIPTION: This JavaScript code shows how to filter Nx projects in commitlint configuration based on project tags. It imports `getProjects` and uses it to populate the `scope-enum` rule, excluding projects tagged with 'stage:end-of-life'.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-nx-scopes/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function getConfig() {\n  const {\n    default: {\n      utils: { getProjects },\n    },\n  } = await import(\"@commitlint/config-nx-scopes\");\n\n  return {\n    rules: {\n      \"scope-enum\": async (ctx) => [\n        2,\n        \"always\",\n        [\n          ...(await getProjects(\n            ctx,\n            ({ tags }) => !tags.includes(\"stage:end-of-life\"),\n          )),\n        ],\n      ],\n    },\n    // . . .\n  };\n}\n\nmodule.exports = getConfig();\n```\n\n----------------------------------------\n\nTITLE: Example file tree of rush packages\nDESCRIPTION: This shows a basic tree structure of a Rush monorepo project with packages located under the `packages` directory.  This provides context for the commitlint examples, as the package names (api, app, web) are used as valid scopes.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-rush-scopes/readme.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npackages\n├── api\n├── app\n└── web\n```\n\n----------------------------------------\n\nTITLE: Creating package.json File\nDESCRIPTION: Initializes a new Node.js project by creating a package.json file. This step is required if you don't already have a Node.js project setup.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/use-prompt.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Usage Example of @commitlint/config-lerna-scopes\nDESCRIPTION: Example demonstrating how the config works with a monorepo structure containing 'api', 'app', and 'web' packages. Shows valid and invalid commit messages and how commitlint validates them against package names.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-lerna-scopes/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n❯ cat commitlint.config.js\n{\n  extends: ['@commitlint/config-lerna-scopes']\n}\n\n❯ tree packages\n\npackages\n├── api\n├── app\n└── web\n\n❯ echo \"build(api): change something in api's build\" | commitlint\n⧗   input: build(api): change something in api's build\n✔   found 0 problems, 0 warnings\n\n❯ echo \"test(foo): this won't pass\" | commitlint\n⧗   input: test(foo): this won't pass\n✖   scope must be one of [api, app, web] [scope-enum]\n✖   found 1 problems, 0 warnings\n\n❯ echo \"ci: do some general maintenance\" | commitlint\n⧗   input: ci: do some general maintenance\n✔   found 0 problems, 0 warnings\n```\n\n----------------------------------------\n\nTITLE: Installing commitlint and convention config on Windows with npm\nDESCRIPTION: Installs commitlint CLI and the conventional config package on Windows using npm, explicitly specifying both packages as dev dependencies. Ensures compatibility with Windows environments.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/getting-started.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @commitlint/config-conventional @commitlint/cli\n```\n\n----------------------------------------\n\nTITLE: Filtering Projects in commitlint config\nDESCRIPTION: This JavaScript code demonstrates how to filter Nx projects in commitlint configuration based on project name and project type.  It imports the `getProjects` utility and uses it to build the scope-enum rule for commitlint, excluding e2e applications.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-nx-scopes/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function getConfig() {\n  const {\n    default: {\n      utils: { getProjects },\n    },\n  } = await import(\"@commitlint/config-nx-scopes\");\n\n  return {\n    rules: {\n      \"scope-enum\": async (ctx) => [\n        2,\n        \"always\",\n        [\n          ...(await getProjects(\n            ctx,\n            ({ name, projectType }) =>\n              !name.includes(\"e2e\") && projectType == \"application\",\n          )),\n        ],\n      ],\n    },\n    // . . .\n  };\n}\n\nmodule.exports = getConfig();\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Commitizen Adapter - JSON\nDESCRIPTION: Configures the project's package.json file to integrate commitizen with the @commitlint/prompt adapter. It defines a 'commit' script alias for 'git-cz' and specifies the path to the commitizen adapter in the 'config' section, enabling guided commit message creation using the adapter.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/prompt/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"commit\": \"git-cz\"\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"@commitlint/prompt\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing commitlint load module with npm\nDESCRIPTION: This snippet shows how to install the '@commitlint/load' package as a dev dependency using npm, enabling the loading of shared commitlint configurations for project setup.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @commitlint/load\n```\n\n----------------------------------------\n\nTITLE: Installing commitlint and convention config with pnpm\nDESCRIPTION: Uses pnpm to add commitlint CLI and the conventional config as dev dependencies, providing an efficient package management process.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/getting-started.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @commitlint/{cli,config-conventional}\n```\n\n----------------------------------------\n\nTITLE: Upgrading commitlint (v4 to v5) - Switching Configuration (Bash)\nDESCRIPTION: Performs the upgrade from commitlint v4 to v5. It removes the deprecated `@commitlint/config-angular`, installs `@commitlint/cli` and `@commitlint/config-conventional`, and creates a new `commitlint.config.js` file extending the conventional config to address breaking changes.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/support/upgrade.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm remove --save-dev @commitlint/config-angular\nnpm install --save @commitlint/cli @commitlint/config-conventional\necho 'module.exports = {extends: [\"@commitlint/config-conventional\"]};';\n```\n\n----------------------------------------\n\nTITLE: Basic commitlint config\nDESCRIPTION: A basic `commitlint.config.js` file extending the `@commitlint/config-nx-scopes` preset. This configuration enables commitlint to enforce the scope rules defined by the preset for Nx projects.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-nx-scopes/readme.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  extends: ['@commitlint/config-nx-scopes']\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @commitlint/read package - Shell\nDESCRIPTION: This snippet provides the command to install the `@commitlint/read` package as a production dependency using the npm package manager. The `--save` flag ensures that the package is added to the `dependencies` list within your project's `package.json` file.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/read/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @commitlint/read\n```\n\n----------------------------------------\n\nTITLE: Defining a Commitlint Rule in a Plugin (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to define a rule within a Commitlint plugin. The plugin exports a `rules` object, where each key-value pair represents a rule ID and its corresponding implementation. The rule implementation is a function that receives parsed commit message data and returns a boolean indicating whether the commit message adheres to the rule.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/plugins.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  rules: {\n    \"dollar-sign\": function (parsed, when, value) {\n      // rule implementation ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing the Commit Prompt\nDESCRIPTION: Demonstrates how to stage files and then use the npm commit script to create a standardized commit message. This shows the complete workflow for creating commits using the prompt.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/use-prompt.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\nnpm run commit\n```\n\n----------------------------------------\n\nTITLE: Installing @commitlint/read via npm Shell Command\nDESCRIPTION: Installs the @commitlint/read package using npm with the --save flag to add it as a dependency in the project. This snippet assumes the user has npm installed and is working in a Node.js environment.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/read.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @commitlint/read\n```\n\n----------------------------------------\n\nTITLE: Reading Commit Messages Within a Specified Range in JavaScript\nDESCRIPTION: Reads commit messages between two Git references, 'from' and 'to', using the read function. This example fetches commits from 'HEAD~2' up to 'HEAD~1', returning commit messages within that range as an array.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/read.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await read({ from: \"HEAD~2\", to: \"HEAD~1\" });\nconsole.info(result);\n// => ['Initial commit\\n\\n']\n```\n\n----------------------------------------\n\nTITLE: Linting commit messages with footer-leading-blank rule - shell examples\nDESCRIPTION: Requires a blank line preceding the footer section of commit messages. Lack of a leading blank line produces a warning, helping separate footer content visually.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix: some message\nBREAKING CHANGE: It will be significant\" # warning\n\necho \"fix: some message\n\nBREAKING CHANGE: It will be significant\" # passes\n```\n\n----------------------------------------\n\nTITLE: Configuring commitlint Script in package.json (Custom)\nDESCRIPTION: Adds a `commitmsg` script to `package.json` for custom configurations. This script executes `commitlint`, relying on a separate configuration file (e.g., `commitlint.config.js`) for rules, and integrates with Git hooks via `-E GIT_PARAMS`.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/support/upgrade.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"commitmsg\": \"commitlint -E GIT_PARAMS\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @commitlint/format Using npm Shell Command\nDESCRIPTION: This shell snippet shows the npm command required to install the @commitlint/format package as a project dependency. It installs the package with the --save flag to update the project's package.json. This prerequisite step is necessary before importing and using the package's formatting functions in JavaScript or TypeScript projects.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/format.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save @commitlint/format\n```\n\n----------------------------------------\n\nTITLE: Adding Main and Types Keys in Package.json for commitlint\nDESCRIPTION: This snippet adds the `main` and `types` keys to the package.json file. Adding these keys clarifies the entry point and type definitions for the package, improving usability. This resolves issue #3953 in commitlint.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/prompt-cli/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd `main` and `types` keys in package.json ([#3953](https://github.com/conventional-changelog/commitlint/issues/3953)) ([7ddaad4](https://github.com/conventional-changelog/commitlint/commit/7ddaad4bc4e71afe89f25cc02d3e19beba1ce6cd))\n```\n\n----------------------------------------\n\nTITLE: Installing husky for Git Hooks using npm (Bash)\nDESCRIPTION: Installs the `husky` package as a development dependency using npm. Husky is used to manage Git hooks, enabling the automatic execution of the `commitlint` script during the commit process.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/support/upgrade.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev husky\n```\n\n----------------------------------------\n\nTITLE: Validating Commit Messages with config-angular-type-enum (Shell)\nDESCRIPTION: Demonstrates basic usage of commitlint with the configured angular-type-enum rules. An invalid commit message ('foo: bar') fails validation, while a message with a valid type ('build: bar') passes.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular-type-enum/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\necho \"foo: bar\" | commitlint # fails\necho \"build: bar\" | commitlint # passes\n```\n\n----------------------------------------\n\nTITLE: Feature: Support mjs config and bump cosmiconfig version (JavaScript)\nDESCRIPTION: This feature updates the cosmiconfig version and adds conditional support for .mjs configuration files. This enhancement allows commitlint to load configurations from modern JavaScript modules.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nbump cosmiconfig version and conditionally support mjs config ([#3747](https://github.com/conventional-changelog/commitlint/issues/3747)) ([a2b65fc](https://github.com/conventional-changelog/commitlint/commit/a2b65fc0cfee2259e197c291ea40ef2d076ab837))\n```\n\n----------------------------------------\n\nTITLE: Customizing Rule Severity in commitlint.config.js (JavaScript)\nDESCRIPTION: Illustrates how to use the exported types from @commitlint/config-angular-type-enum within a custom commitlint.config.js file. It shows applying the default rules directly or customizing the 'type-enum' rule to issue warnings (severity level 1) instead of errors for non-allowed types, using the types.values() function to get the list of allowed types.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular-type-enum/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// commitlint.config.js\nconst types = require(\"@commitlint/config-angular-type-enum\");\n\n// Use as rule creating errors for non-allowed types\nmodule.exports = {\n  rules: {\n    ...types.rules,\n  },\n};\n\n// Warn for non-allowed types\nmodule.exports = {\n  rules: {\n    \"type-enum\": [1, \"always\", types.values()],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Local Commitlint Plugin (JavaScript)\nDESCRIPTION: This snippet shows an example of how to declare a local plugin within a Commitlint configuration file (`commitlint.config.js`).  The configuration defines a rule and then specifies a plugin containing a matching rule implementation. The rule is then used to validate commit messages.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/plugins.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  rules: {\n    \"hello-world-rule\": [2, \"always\"],\n  },\n  plugins: [\n    {\n      rules: {\n        \"hello-world-rule\": ({ subject }) => {\n          const HELLO_WORLD = \"Hello World\";\n          return [\n            subject.includes(HELLO_WORLD),\n            `Your subject should contain ${HELLO_WORLD} message`,\n          ];\n        },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing format Function from @commitlint/format in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import the default export 'format' from the @commitlint/format package. This import is necessary to use the formatting functionality that converts commitlint reports into human-readable strings according to specified options.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/format.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport format from \"@commitlint/format\";\n```\n\n----------------------------------------\n\nTITLE: Replacing validate-commit-msg with commitlint for Custom Setup (Bash)\nDESCRIPTION: Removes the deprecated `validate-commit-msg` package and installs the necessary commitlint packages (`@commitlint/cli` and `@commitlint/config-conventional`) as development dependencies using npm. This step is required when migrating with custom settings.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/support/upgrade.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm remove validate-commit-msg --save-dev\nnpm install --save-dev @commitlint/cli @commitlint/config-conventional\n```\n\n----------------------------------------\n\nTITLE: Loading Commitlint Config from a File\nDESCRIPTION: Example showing how to use the load function to reference and load commitlint configuration from an external file.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/load.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst config = await load({ extends: [\"./package\"] });\nconsole.log(config);\n// => { extends: ['./package', './package-b'], rules: {} }\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Removing Node 10 Support - JavaScript\nDESCRIPTION: This commit introduces a breaking change by removing support for Node.js version 10.  This change requires users to upgrade to Node.js version 12 or higher to continue using this version of the package. It closes issue #2596.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n- chore!: remove node 10 support (#2596) ([4db4ba1](https://github.com/conventional-changelog/commitlint/commit/4db4ba1b0b312410a0f62100a93a80c246a6c410)), closes [#2596](https://github.com/conventional-changelog/commitlint/issues/2596)\n\n### BREAKING CHANGES\n\n- minimum node version is 12\n```\n\n----------------------------------------\n\nTITLE: Setting Up Parser Preset in Commitlint Config\nDESCRIPTION: Example showing how to specify a parser preset file path when loading commitlint configuration.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/load.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst config = await load({ parserPreset: \"./parser-preset.js\" });\nconsole.log(config);\n/* => \n{ \n  extends: [], \n  rules: {}, \n  parserPreset: {\n    name: './parser-preset.js', \n    path: './parser-preset.js', \n    opts: {}\n  }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Update cosmiconfig to specific version (JavaScript)\nDESCRIPTION: This bug fix updates the cosmiconfig dependency to a specific version. This likely addresses an issue introduced by a more recent cosmiconfig version and ensures stability of the configuration loading process.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate cosmiconfig to specific version ([#3755](https://github.com/conventional-changelog/commitlint/issues/3755)) ([636b8b1](https://github.com/conventional-changelog/commitlint/commit/636b8b1338835b239ab0585e062bfe305fca4424))\n```\n\n----------------------------------------\n\nTITLE: Linting Merge Request Commits on GitLab CI (YAML)\nDESCRIPTION: This GitLab CI job uses a Node.js Alpine image and sets GIT_DEPTH: 0 to fetch full history. In the before_script, it installs git and commitlint dependencies. The script executes npx commitlint using built-in GitLab CI variables CI_MERGE_REQUEST_DIFF_BASE_SHA and CI_COMMIT_SHA to define the commit range for linting merge requests.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/ci-setup.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nlint:commit:\n  image: registry.hub.docker.com/library/node:alpine\n  variables:\n    GIT_DEPTH: 0\n  before_script:\n    - apk add --no-cache git\n    - npm install --save-dev @commitlint/config-conventional @commitlint/cli\n  script:\n    - npx commitlint --from ${CI_MERGE_REQUEST_DIFF_BASE_SHA} --to ${CI_COMMIT_SHA}\n```\n\n----------------------------------------\n\nTITLE: Importing @commitlint/parse in Node.js\nDESCRIPTION: Demonstrates how to import the primary `parse` function from the @commitlint/parse module in a Node.js environment using the `require` syntax.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/parse/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst parse = require(\"@commitlint/parse\");\n```\n\n----------------------------------------\n\nTITLE: Creating a simplified last-commit validator\nDESCRIPTION: Example showing a simplified workflow for checking only the last commit. It loads configuration, reads the last commit message, and validates it against the loaded rules.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/lint.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport load from \"@commitlint/load\";\nimport read from \"@commitlint/read\";\nimport lint from \"@commitlint/lint\";\n\nconst { rules, parserPreset } = load();\nconst [commit] = await read({ from: \"HEAD~1\" });\n\nconst report = await lint(\n  commit,\n  rules,\n  parserPreset ? { parserOpts: parserPreset.parserOpts } : {},\n);\n\nconsole.log(JSON.stringify(result.valid));\n```\n\n----------------------------------------\n\nTITLE: Feature: Support TypeScript 5.0 (TypeScript)\nDESCRIPTION: This feature adds support for TypeScript 5.0. This ensures that commitlint is compatible with the latest TypeScript version and can leverage its new features and improvements.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nsupport typescript 5.0 ([#3566](https://github.com/conventional-changelog/commitlint/issues/3566)) ([c0a27ff](https://github.com/conventional-changelog/commitlint/commit/c0a27ffa3dcaef296ef58ce37bd8ca0a9d315d6e))\n```\n\n----------------------------------------\n\nTITLE: Defining Rule as Function Returning Array in Commitlint Configuration - JavaScript\nDESCRIPTION: This snippet shows the 'header-max-length' rule defined as a function that returns a configuration array, enabling dynamic rule composition if necessary. The function approach allows future expansion, such as computing rule parameters based on environment or other inputs. The config object input sets 'header-max-length' to return [0, \"always\", 72] when called. No external dependencies beyond Commitlint are needed.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/rules-configuration.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  // ...\n  rules: {\n    \"header-max-length\": () => [0, \"always\", 72], // [!code focus]\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Commitlint Configuration Using a Relative File Path in JavaScript\nDESCRIPTION: Illustrates how to extend commitlint configuration by specifying a relative path to a local configuration file in the extends array. The relative path must always start with a dot (.) to correctly resolve local files. This approach allows loading custom or local shareable configurations.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/concepts/shareable-config.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  extends: [\"./example\"], // => ./example.js\n};\n```\n\n----------------------------------------\n\nTITLE: Fix: Updating Semver Dependency - JavaScript\nDESCRIPTION: This commit updates the semver dependency to v7.3.5 in the @commitlint/is-ignored package.  The update is intended to incorporate bug fixes and improvements in the semver library. It addresses issue #2519.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n- update dependency semver to v7.3.5 ([#2519](https://github.com/conventional-changelog/commitlint/issues/2519)) ([5113f22](https://github.com/conventional-changelog/commitlint/commit/5113f22c620e7b187fd558e5befa541b448ea18b))\n```\n\n----------------------------------------\n\nTITLE: Linting Commit Messages in Jenkins X PipelineRun (YAML)\nDESCRIPTION: This Tekton PipelineRun defines a task and step to lint commit messages in a pull request context. It uses the commitlint/commitlint Docker image and executes the commitlint command with a specific configuration extends option and uses Jenkins X variables sourced from .jx/variables.sh to define the commit range.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/ci-setup.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  name: pullrequest\nspec:\n  pipelineSpec:\n    tasks:\n      - name: conventional-commits\n        taskSpec:\n          steps:\n            - name: lint-commit-messages\n              image: commitlint/commitlint\n              script: |\n                #!/usr/bin/env sh\n                . .jx/variables.sh\n                commitlint --extends '@commitlint/config-conventional' --from $PR_BASE_SHA --to $PR_HEAD_SHA\n  serviceAccountName: tekton-bot\n  timeout: 15m\n```\n\n----------------------------------------\n\nTITLE: Example of Range error in commitlint after update\nDESCRIPTION: Shows the error message that appears when commitlint detects invalid rule names due to package version mismatches. This typically happens after updating some but not all commitlint-related packages.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/support/troubleshooting.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFound invalid rule names: header-trim.\nSupported rule names are: body-case, body-empty, ...\n```\n\n----------------------------------------\n\nTITLE: Adding formatter option with default value\nDESCRIPTION: This feature allows users to define a formatter option with a default value, adding more control over the project's output format. The default value provides consistent behavior. The functionality provides users with additional options for formatting the commit messages.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n- **load:** add formatter option with default value ([b0e63d9](https://github.com/conventional-changelog/commitlint/commit/b0e63d9))\n```\n\n----------------------------------------\n\nTITLE: Commitlint Usage Examples (Bash)\nDESCRIPTION: This snippet provides examples of using the `commitlint` command with different commit messages. It demonstrates how a commit message is validated against the configured rules, showing both a failing and a passing case.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/plugins.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> echo \"feat: random subject\" | commitlint # fails\n> echo \"feat: Hello World\" | commitlint # passes\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Commitlint with Angular Convention in Shell\nDESCRIPTION: This code demonstrates how to install @commitlint/config-angular and @commitlint/cli as development dependencies using npm. It also shows how to create a commitlint.config.js configuration file to extend the Angular configuration. Prerequisites include Node.js, npm, and project write access. The installation command is 'npm install --save-dev @commitlint/config-angular @commitlint/cli', and the configuration is established by outputting a JS configuration file.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @commitlint/config-angular @commitlint/cli\necho \"export default {extends: ['@commitlint/config-angular']};\" > commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Linting Last Commit Message on Codemagic (YAML)\nDESCRIPTION: This Codemagic workflow configuration defines a simple script step to lint the last commit message. It executes npx commitlint --from=HEAD~1, assuming commitlint and its necessary dependencies are available in the build environment.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/ci-setup.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n#codemagic.yaml\nworkflows:\n  commitlint:\n    name: Lint commit message\n    scripts:\n      - npx commitlint --from=HEAD~1\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Update @types/node dependency (JavaScript)\nDESCRIPTION: This bug fix updates the `@types/node` dependency to v20.5.1.  This ensures compatibility with newer Node.js versions and addresses any potential type-related issues.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency @types/node to v20.5.1 ([#3653](https://github.com/conventional-changelog/commitlint/issues/3653)) ([cd8b775](https://github.com/conventional-changelog/commitlint/commit/cd8b7750d3a15fbfd96e20196d53df064df6e138))\n```\n\n----------------------------------------\n\nTITLE: Linting commit messages with subject-empty rule - shell examples\nDESCRIPTION: Enforces that the subject part of the commit message must not be empty. Messages lacking a subject trigger an error to ensure meaningful commit explanations.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix:\" # fails\necho \"fix: some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Linting commit messages with subject-full-stop rule - shell examples\nDESCRIPTION: Prevents the commit message subject from ending with a period. Commit messages ending with a '.' will fail linting to promote consistency in punctuation style.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix: some message.\" # fails\necho \"fix: some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Linting commit messages with body-max-line-length rule - shell examples\nDESCRIPTION: Enforces a maximum line length of 100 characters for each line in the commit message body. Lines exceeding this length cause an error to ensure commit message readability.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/README.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix: some message\n\nbody with multiple lines\nhas a message that is way too long and will break the line rule 'line-max-length' by several characters\" # fails\n\necho \"fix: some message\n\nbody with multiple lines\nbut still no line is too long\" # passes\n```\n\n----------------------------------------\n\nTITLE: Fix: Replacing Repository References - JavaScript\nDESCRIPTION: This commit fixes the issue of incorrect repository references within the project by replacing them with the correct 'conventional changelog' references. This ensures that links to the repository and related resources are accurate. It addresses issue #561.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n- replace all repository references with conventional changelog ([#561](https://github.com/conventional-changelog/commitlint/issues/561)) ([6c3afcd](https://github.com/conventional-changelog/commitlint/commit/6c3afcd))\n```\n\n----------------------------------------\n\nTITLE: Using Commitlint CLI in package.json scripts\nDESCRIPTION: This code snippet integrates commitlint into project scripts for automatic validation of commit messages during development. It relies on node scripts and the commitlint CLI package, accepting commit messages as inputs and returning validation outputs. This enforces commit standards before code integration.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/rules/license.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// package.json script entry\n\"scripts\": {\n  \"commitlint\": \"commitlint -E HUSKY_GIT_PARAMS\"\n}\n\n// Usage: npm run commitlint -- --from=HEAD~1\n```\n\n----------------------------------------\n\nTITLE: Adding local plugins support\nDESCRIPTION: This feature provides support for local plugins, which allows developers to use custom plugins located within the project, as opposed to relying solely on globally installed or published plugins. This enhancement provides more flexibility in extending and tailoring the commitlint functionality.  It enables developers to manage plugins within the scope of the project and use custom rule sets.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n- add local plugins support ([#1692](https://github.com/conventional-changelog/commitlint/issues/1692)) ([7b29c48](https://github.com/conventional-changelog/commitlint/commit/7b29c48321b513e091849fbb2cc2bf0e6ebb94a6))\n```\n\n----------------------------------------\n\nTITLE: Configuring Commitlint on CircleCI (YAML)\nDESCRIPTION: This CircleCI configuration defines a workflow with jobs for setup and linting. The setup job installs Node.js dependencies, and the lint job extracts the last commit message using git log, sets it as an environment variable, and pipes it to npx commitlint for validation. It assumes a Node.js Docker image is used.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/ci-setup.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nversion: 2.1\n\nexecutors:\n  my-executor:\n    docker:\n      - image: cimg/node:current\n    working_directory: ~/project\n\njobs:\n  setup:\n    executor: my-executor\n    steps:\n      - checkout\n      - restore_cache:\n          key: lock-{{ checksum \"package-lock.json\" }}\n      - run:\n          name: Install dependencies\n          command: npm install\n      - save_cache:\n          key: lock-{{ checksum \"package-lock.json\" }}\n          paths:\n            - node_modules\n      - persist_to_workspace:\n          root: ~/project\n          paths:\n            - node_modules\n\n  lint_commit_message:\n    executor: my-executor\n    steps:\n      - checkout\n      - attach_workspace:\n          at: ~/project\n      - run:\n          name: Define environment variable with latest commit's message\n          command: |\n            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:\"%s\")' >> $BASH_ENV\n            source $BASH_ENV\n      - run:\n          name: Lint commit message\n          command: echo \"$COMMIT_MESSAGE\" | npx commitlint\n\nworkflows:\n  version: 2.1\n  commit:\n    jobs:\n      - setup\n      - lint_commit_message:\n          requires:\n            - setup\n```\n\n----------------------------------------\n\nTITLE: Disallowing Empty Commit Types with type-empty Rule in Commitlint (Shell)\nDESCRIPTION: This code tests that commit messages cannot omit a type before the colon, using the type-empty rule. If the type is missing, commitlint will fail the commit. This snippet can be used to validate correct input formatting for developer workflows.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho \": some message\" # fails\necho \"fix: some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Enforcing Lowercase Commit Types with type-case Rule in Commitlint (Shell)\nDESCRIPTION: This snippet illustrates the requirement that the commit type be in lowerCase, as enforced by commitlint's type-case rule configured via the Angular convention. No additional dependencies beyond commitlint and config-angular are required. The input is a commit message, and cases that do not match lowercase will fail.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho \"FIX: some message\" # fails\necho \"fix: some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Preventing Full Stop at End of Subject with subject-full-stop Rule in Commitlint (Shell)\nDESCRIPTION: Demonstrates how commitlint can enforce that commit subjects should not end with a period ('.') via subject-full-stop. Messages ending with a full stop character will be marked as invalid according to Angular's style. This helps ensure concise commit subject formatting.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix: some message.\" # fails\necho \"fix: some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Adding config based is-ignored overrides\nDESCRIPTION: This feature adds support for overrides based on configuration files. This allows certain commits to be ignored based on pre-defined configuration rules. The functionality enables flexibility by permitting developers to selectively bypass the rules of commitlint.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n- config based is-ignored overrides ([#595](https://github.com/conventional-changelog/commitlint/issues/595)) ([2434d71](https://github.com/conventional-changelog/commitlint/commit/2434d71))\n```\n\n----------------------------------------\n\nTITLE: Dropping node 8 support\nDESCRIPTION: This change involved dropping support for Node.js version 8, removing it from the CircleCI checks, and updating the documentation to reflect the latest LTS version of Node.js. This reduces the supported Node.js versions and reduces the build and test matrix. This enables the project to leverage more recent Node.js features and ensures compatibility with the latest ecosystem tooling.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n- refactor!: drop support for node 8 (#1999) ([751f39f](https://github.com/conventional-changelog/commitlint/commit/751f39f284ef232574a176c3c11b1982ee544166)), closes [#1999](https://github.com/conventional-changelog/commitlint/issues/1999)\n```\n\n----------------------------------------\n\nTITLE: Installing Commitlint Packages - Shell\nDESCRIPTION: This snippet demonstrates the installation of the necessary npm packages to use `@commitlint/config-patternplate`. It includes installing `@commitlint/config-patternplate` and `@commitlint/cli` as development dependencies.  Dependencies: Node.js and npm.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-patternplate/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @commitlint/config-patternplate @commitlint/cli\n```\n\n----------------------------------------\n\nTITLE: Fix: Ignoring Azure DevOps Messages - JavaScript\nDESCRIPTION: This commit fixes a bug in the @commitlint/is-ignored package to correctly ignore commit messages generated by Azure DevOps.  This prevents these automatically generated messages from triggering commitlint errors. It addresses issue #2230.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n- **is-ignored:** ignore azure devops messages ([#2230](https://github.com/conventional-changelog/commitlint/issues/2230)) ([fe29ce7](https://github.com/conventional-changelog/commit/fe29ce76bd87d5b42048228fbf0f47cc8d5411ec))\n```\n\n----------------------------------------\n\nTITLE: Fixing Dependencies in commitlint\nDESCRIPTION: This snippet addresses a bug by removing unnecessary `utils` dependencies from the production build of the @commitlint/top-level package. This optimization reduces the package size and avoids potential issues caused by extraneous dependencies.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/top-level/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n### Bug Fixes\n\n- remove utils from prod dependencies ([4fb858a](https://github.com/conventional-changelog/commitlint/commit/4fb858a))\n```\n\n----------------------------------------\n\nTITLE: Replacing validate-commit-msg with commitlint using npm (Bash)\nDESCRIPTION: Removes the deprecated `validate-commit-msg` package and installs the necessary commitlint packages (`@commitlint/cli` and `@commitlint/config-conventional`) as development dependencies using npm. This is the initial step for migrating to commitlint with default settings.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/support/upgrade.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm remove validate-commit-msg --save-dev\nnpm install --save-dev @commitlint/cli @commitlint/config-conventional\n```\n\n----------------------------------------\n\nTITLE: Installing @commitlint/config-rush-scopes with npm\nDESCRIPTION: This command installs @commitlint/config-rush-scopes and @commitlint/cli as development dependencies using npm.  This allows commitlint to be used for linting commit messages. The cli tool is necessary to run commitlint.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-rush-scopes/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @commitlint/config-rush-scopes @commitlint/cli\n```\n\n----------------------------------------\n\nTITLE: Testing the commit-msg Hook\nDESCRIPTION: This example simulates a failing commit message and shows the expected output from Husky and commitlint when the commit message violates the configured rules. This validates that the hook is correctly configured and triggers commitlint on commit attempts.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/local-setup.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"foo: this will fail\"\n#  husky > commit-msg\nNo staged files match any of provided globs.\n⧗   input: foo: this will fail\n✖   type must be one of [build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test] [type-enum]\n\n✖   found 1 problems, 0 warnings\nⓘ   Get help: https://github.com/conventional-changelog/commitlint/#what-is-commitlint\n\nhusky - commit-msg script failed (code 1)\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"chore: lint on commitmsg\"\n# husky > pre-commit\nNo staged files match any of provided globs.\n# husky > commit-msg\n```\n\n----------------------------------------\n\nTITLE: Feature: Adding New Wildcard Patterns - JavaScript\nDESCRIPTION: This commit introduces a feature to add new wildcard patterns for ignoring commit messages.  This enables more flexible and configurable filtering of commit messages based on patterns. It addresses issue #315.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n- **wildcards:** add new wildcard patterns [#315](https://github.com/conventional-changelog/commitlint/issues/315) ([e9ea17f](https://github.com/conventional-changelog/commitlint/commit/e9ea17f))\n```\n\n----------------------------------------\n\nTITLE: Removing Node.js 10 support\nDESCRIPTION: This change removes support for Node.js version 10. This could be due to the end of life of Node.js 10 or the adoption of newer language features.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/top-level/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Installing @commitlint/lint Module with npm (Shell)\nDESCRIPTION: Installs the @commitlint/lint module and adds it as a production dependency to your project using the npm package manager. This command is the standard way to include the module in your Node.js project.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/lint/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @commitlint/lint\n```\n\n----------------------------------------\n\nTITLE: Feature Commit Example\nDESCRIPTION: Presents an example of a feature commit message, denoting the scope as 'blog' and the subject as 'add comment section'. This highlights the addition of a comment section feature to a blog.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/README.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nfeat(blog): add comment section\n```\n\n----------------------------------------\n\nTITLE: Adding helpUrl via config\nDESCRIPTION: This feature allows specifying a 'helpUrl' through the configuration file. This configuration provides a link to a help resource which assists users with configuration and resolving any related issues.  The intended use is to make it easier for developers to find information and support related to configuring and using commitlint.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- **load:** allow specifying helpUrl via config ([#2180](https://github.com/conventional-changelog/commitlint/issues/2180)) ([d6795a3](https://github.com/conventional-changelog/commitlint/commit/d6795a3c4633ba6efd7a0fcff48339dc291cd832))\n```\n\n----------------------------------------\n\nTITLE: TypeScript interface definitions for @commitlint/lint\nDESCRIPTION: TypeScript type definitions for the lint function, describing rules, problem reports, and options. These types define the structure of rules, validation problems, and function parameters.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/lint.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype RuleLevel = 0 | 1 | 2;\ntype RuleCondition = 'always' | 'never';\ntype RuleOption = any;\ntype PrimitiveRule = [RuleLevel, RuleCondition, RuleOption?];\ntype AsyncRule = Promise<PrimitiveRule>;\ntype FunctionRule = () => PrimitiveRule;\ntype AsyncFunctionRule = () => Promise<PrimitiveRule>;\ntype Rule = PrimitiveRule | FunctionRule | AsyncFunctionRule;\n\ntype Problem = {\n  level: number;\n  valid: boolean;\n  name: string;\n  message: string;\n}\n\ntype Report = {\n  valid: boolean;\n  errors: Problem[];\n  warnings: Problem[];\n}\n\ntype Options = {\n  parserOpts?: any;\n};\n\nlint(message: string, rules: {[ruleName: string]: Rule}, opts?: Options) => Promise<Report>;\n```\n\n----------------------------------------\n\nTITLE: Installing @commitlint/prompt and Dependencies - Bash\nDESCRIPTION: Installs the @commitlint/prompt library, commitizen, and the conventional commit configuration as development dependencies. It also creates a basic commitlint.config.js file to extend the conventional configuration, setting up the environment for guided commits.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/prompt/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @commitlint/prompt @commitlint/config-conventional commitizen\necho \"module.exports = {extends: ['@commitlint/config-conventional']};\" > commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Creating a Commitlint CLI Entry Point in JavaScript\nDESCRIPTION: This code snippet defines a CLI entry point for Commitlint, enabling command-line validation of commit messages. It imports the Commitlint library and executes it with provided arguments, facilitating integration into build or CI pipelines.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/license.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n#!/usr/bin/env node\nconst commitlint = require('@commitlint/cli');\n\ncommitlint.process(process.argv.slice(2)).then(report => {\n  if (report.errorCount > 0) {\n    process.exit(1);\n  } else {\n    process.exit(0);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using @commitlint/lint without configuration\nDESCRIPTION: Example of using the lint function without any rules configuration. This validates a commit message against default behavior and returns a report object.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/lint.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst report = await lint(\"foo: bar\");\nconsole.log(report);\n// => { valid: true, errors: [], warnings: [] }\n```\n\n----------------------------------------\n\nTITLE: Fixing Broken Website References\nDESCRIPTION: This commit addresses and resolves broken website references. It improves the overall integrity and accessibility of the project documentation and resources.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- all broken website references ([#564](https://github.com/conventional-changelog/commitlint/issues/564)) ([82eeb5a](https://github.com/conventional-changelog/commitlint/commit/82eeb5a))\n- replace all repository references with conventional changelog ([#561](https://github.com/conventional-changelog/commitlint/issues/561)) ([6c3afcd](https://github.com/conventional-changelog/commitlint/commit/6c3afcd))\n- replace all website references with conventional changelog ([#563](https://github.com/conventional-changelog/commitlint/issues/563)) ([6b86fb1](https://github.com/conventional-changelog/commitlint/commit/6b86fb1))\n```\n\n----------------------------------------\n\nTITLE: Formatting Commitlint Report Without Colors Showing Warnings and Errors in JavaScript\nDESCRIPTION: This example invokes the format function with a structured report containing warnings and errors of varying severity levels, and with the color option disabled. It demonstrates how messages of level 0 are omitted, while level 1 and 2 issues are included with corresponding signs ('⚠', '✖') and annotations. The output is a list of formatted strings summarizing the problems detected, useful in plain-text environments.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/format.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nformat(\n  {\n    results: [\n      {\n        warnings: [\n          {\n            level: 0,\n            name: \"some-hint\",\n            message: \"This will not show up as it has level 0\",\n          },\n          {\n            level: 1,\n            name: \"some-warning\",\n            message: \"This will show up yellow as it has level 1\",\n          },\n        ],\n        errors: [\n          {\n            level: 2,\n            name: \"some-error\",\n            message: \"This will show up red as it has level 2\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    color: false,\n  },\n);\n/* => \n[\n  '✖   This will show up red as it has level 2 [some-error]',\n  '    This will not show up as it has level 0 [some-hint]',\n  '⚠   This will show up yellow as it has level 1 [some-warning]',\n  '✖   found 1 problems, 2 warnings'\n] \n*/\n```\n\n----------------------------------------\n\nTITLE: Feature: Lazy load cosmiconfig-typescript-loader (JavaScript)\nDESCRIPTION: This feature implements lazy loading for the cosmiconfig-typescript-loader. This improves performance by only loading the typescript-loader when it is actually needed, reducing startup time when not using Typescript configs.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nlazy load cosmiconfig-typescript-loader ([#3694](https://github.com/conventional-changelog/commitlint/issues/3694)) ([b058c7c](https://github.com/conventional-changelog/commitlint/commit/b058c7cc49333e7898402fa55467ec097801ce25))\n```\n\n----------------------------------------\n\nTITLE: Reading and validating Git commit history with @commitlint/read\nDESCRIPTION: Example demonstrating how to read Git commit history using @commitlint/read and validate multiple commits with @commitlint/lint. This checks the last two commits against custom rules.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/lint.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport lint from \"@commitlint/lint\";\nimport read from \"@commitlint/read\";\n\nconst RULES = {\n  \"type-enum\": [2, \"always\", [\"foo\"]],\n};\n\nconst commits = await read({ to: \"HEAD\", from: \"HEAD~2\" });\n\nconsole.info(commits.map((commit) => lint(commit, RULES)));\n```\n\n----------------------------------------\n\nTITLE: Declaring Peer Dependency in package.json (JSON)\nDESCRIPTION: This JSON snippet illustrates how to declare Commitlint as a peer dependency in a plugin's `package.json` file. This ensures that the plugin requires Commitlint to function correctly.  The `peerDependencies` field specifies the required version of `@commitlint/lint` (version 7.6.0 or later).\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/plugins.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"@commitlint/lint\": \">=7.6.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Staging Changes and Running Commitizen - Bash\nDESCRIPTION: Stages all modified and new files using the 'git add .' command. It then executes the 'npm run commit' script defined in package.json, which initiates the commit process using commitizen and the configured @commitlint/prompt adapter to guide the user.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/prompt/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\nnpm run commit\n```\n\n----------------------------------------\n\nTITLE: Feature: Updating cosmiconfig to v9 for package.yaml support (JavaScript)\nDESCRIPTION: This feature updates the cosmiconfig dependency to version 9 within the @commitlint/load package.  This update adds support for loading configuration files named `package.yaml`. No specific code is provided, but the context implies modification to the configuration loading mechanism.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **load:** update cosmiconfig to v9 to add support for `package.yaml` config ([#3976](https://github.com/conventional-changelog/commitlint/issues/3976)) ([94eab40](https://github.com/conventional-changelog/commitlint/commit/94eab40798e0c8d3945aa2b1e629669b231d8468))\n```\n\n----------------------------------------\n\nTITLE: Configuring Commitlint Prompt - JavaScript\nDESCRIPTION: This JavaScript code defines the configuration for the commitlint prompt, which is used by `@commitlint/cz-commitlint`. It specifies the parser preset, rules, settings, messages, and questions to guide the user in creating conventional commit messages.  The configuration includes settings, messages for different scenarios (e.g., skipping, character limits, and empty fields), and a set of interactive questions to gather necessary information for the commit message.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/prompt.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parserPreset: 'conventional-changelog-conventionalcommits',\n  rules: {\n    ...\n  },\n  prompt: {\n    settings: {},\n    messages: {\n      skip: ':skip',\n      max: 'upper %d chars',\n      min: '%d chars at least',\n      emptyWarning: 'can not be empty',\n      upperLimitWarning: 'over limit',\n      lowerLimitWarning: 'below limit'\n    },\n    questions: {\n      type: {\n        description: \"Select the type of change that you're committing:\",\n        enum: {\n          feat: {\n            description: 'A new feature',\n            title: 'Features',\n            emoji: '✨',\n          },\n          fix: {\n            description: 'A bug fix',\n            title: 'Bug Fixes',\n            emoji: '🐛',\n          },\n          docs: {\n            description: 'Documentation only changes',\n            title: 'Documentation',\n            emoji: '📚',\n          },\n          style: {\n            description: 'Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)',\n            title: 'Styles',\n            emoji: '💎',\n          },\n          refactor: {\n            description: 'A code change that neither fixes a bug nor adds a feature',\n            title: 'Code Refactoring',\n            emoji: '📦',\n          },\n          perf: {\n            description: 'A code change that improves performance',\n            title: 'Performance Improvements',\n            emoji: '🚀',\n          },\n          test: {\n            description: 'Adding missing tests or correcting existing tests',\n            title: 'Tests',\n            emoji: '🚨',\n          },\n          build: {\n            description: 'Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)',\n            title: 'Builds',\n            emoji: '🛠',\n          },\n          ci: {\n            description: 'Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)',\n            title: 'Continuous Integrations',\n            emoji: '⚙️',\n          },\n          chore: {\n            description: \"Other changes that don't modify src or test files\",\n            title: 'Chores',\n            emoji: '♻️',\n          },\n          revert: {\n            description: 'Reverts a previous commit',\n            title: 'Reverts',\n            emoji: '🗑',\n          },\n        },\n      },\n      scope: {\n        description:\n          'What is the scope of this change (e.g. component or file name)',\n      },\n      subject: {\n        description: 'Write a short, imperative tense description of the change',\n      },\n      body: {\n        description: 'Provide a longer description of the change',\n      },\n      isBreaking: {\n        description: 'Are there any breaking changes?',\n      },\n      breakingBody: {\n        description:\n          'A BREAKING CHANGE commit requires a body. Please enter a longer description of the commit itself',\n      },\n      breaking: {\n        description: 'Describe the breaking changes',\n      },\n      isIssueAffected: {\n        description: 'Does this change affect any open issues?',\n      },\n      issuesBody: {\n        description:\n          'If issues are closed, the commit requires a body. Please enter a longer description of the commit itself',\n      },\n      issues: {\n        description: 'Add issue references (e.g. \"fix #123\", \"re #123\".)',\n      },\n    },\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Mapping validate-commit-msg Options to commitlint Rules (JavaScript)\nDESCRIPTION: Illustrates the mapping between configuration options in the deprecated `validate-commit-msg` format and their corresponding rule configurations in `commitlint`. Comments provide the equivalent commitlint rule syntax or indicate where no direct equivalent exists.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/support/upgrade.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"types\": [\"a\", \"b\"],              // 'type-enum': [2, 'always', ['a', 'b']]\n  \"scope\": {\n    \"required\": true,               // 'scope-empty': [2, 'never']\n    \"allowed\": [\"a\", \"b\"],          // 'scope-enum': [2, 'always', ['a', 'b']]; specify [0] for allowed: [\"*\"]\n    \"validate\": false,              // 'scope-enum': [0], 'scope-empty': [0]\n    \"multiple\": false               //  multiple scopes are not supported in commitlint\n  },\n  \"warnOnFail\": false,              // no equivalent setting in commitlint\n  \"maxSubjectLength\": 100,          // 'header-max-length': [2, 'always', 100]\n  \"subjectPattern\": \".+\",           // may be configured via `parser-preset`, contact us\n  \"subjectPatternErrorMsg\": \"msg\",  // no equivalent setting in commitlint\n  \"helpMessage\": \"\",                // no equivalent setting in commitlint\n  \"autoFix\": false                  // no equivalent setting in commitlint\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating NLP Rules\nDESCRIPTION: Deprecates natural language processing (NLP) rules within commitlint's core functionality. This decision indicates a change in direction or priority regarding NLP-based linting.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **core:** deprecate nlp rules ([bbab1d8](https://github.com/conventional-changelog/commitlint/commit/bbab1d8)), closes [#54](https://github.com/conventional-changelog/commitlint/issues/54)\n```\n\n----------------------------------------\n\nTITLE: Feature: Adding Config Based is-ignored Overrides - JavaScript\nDESCRIPTION: This commit introduces a new feature that allows users to configure overrides for the is-ignored functionality via configuration files. This enables more flexible control over which commit messages are ignored by commitlint. It addresses issue #595.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n- config based is-ignored overrides ([#595](https://github.com/conventional-changelog/commitlint/issues/595)) ([2434d71](https://github.com/conventional-changelog/commitlint/commit/2434d71))\n```\n\n----------------------------------------\n\nTITLE: Linting commit messages with body-leading-blank rule - shell examples\nDESCRIPTION: Requires a blank line before the body section of the commit message. Missing this blank line triggers a warning to encourage clear separation between header and body.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix: some message\nbody\" # warning\n\necho \"fix: some message\n\nbody\" # passes\n```\n\n----------------------------------------\n\nTITLE: Resolving plugins from extended configs\nDESCRIPTION: This bug fix addresses an issue where plugins were not resolved correctly from extended configurations. This means that commitlint was not correctly loading plugins from configurations that extended other configurations. This resolves an issue related to correct plugin loading when using extended configurations, enabling more flexible and reusable configurations.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n- **load:** resolve plugins from extended configs ([#1976](https://github.com/conventional-changelog/commitlint/issues/1976)) ([d0f0eb9](https://github.com/conventional-changelog/commitlint/commit/d0f0eb9fde7efc2dff7a3aad190ded14303d3079))\n```\n\n----------------------------------------\n\nTITLE: Triggering commit prompt CLI with Git sh\nDESCRIPTION: These commands stage all pending changes in the current git repository and then execute the globally installed `commit` command. This launches the interactive prompt provided by @commitlint/prompt-cli to guide the user in creating a conventional commit message.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/prompt-cli/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\ncommit\n```\n\n----------------------------------------\n\nTITLE: Resolving nested parser preset factories\nDESCRIPTION: This bug fix ensures that nested parser preset factories are correctly resolved. This improves parsing configuration and ensures that commitlint correctly interprets nested parser configurations in the configuration files. This fix makes the usage of nested configurations more robust.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n- **load:** resolve nested parser preset factories ([#831](https://github.com/conventional-changelog/commitlint/issues/831)) ([73a7df7](https://github.com/conventional-changelog/commitlint/commit/73a7df7))\n```\n\n----------------------------------------\n\nTITLE: Linting Merge Request Commits with Pre-built Image on GitLab CI (YAML)\nDESCRIPTION: This GitLab CI job uses a pre-built commitlint Docker image. The script directly executes the commitlint command using GitLab CI variables CI_MERGE_REQUEST_DIFF_BASE_SHA and CI_COMMIT_SHA for the commit range. This approach simplifies the CI configuration by leveraging a ready-to-use image.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/ci-setup.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nstages: [\"lint\", \"build\", \"test\"]\nlint:commit:\n  image:\n    name: registry.hub.docker.com/commitlint/commitlint:latest\n    entrypoint: [\"\"]\n  stage: lint\n  script:\n    # Uncomment the next line if you are extending the @commitlint/config-nx-scopes in your commitlint configuration\n    #- npm i -g nx@$(node -pe \"require('./package.json').devDependencies.nx\")\n    - commitlint --from ${CI_MERGE_REQUEST_DIFF_BASE_SHA} --to ${CI_COMMIT_SHA}\n```\n\n----------------------------------------\n\nTITLE: Using parser with breaking change support\nDESCRIPTION: This feature incorporates a parser with breaking change support into the 'config-conventional' module. This update allows commitlint to better handle and parse commits that include breaking changes. This integration streamlines the parsing of commit messages, helping to ensure compliance with the conventional commit format and improving overall commit message validation.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n- **config-conventional:** use parser with short breaking change support ([#821](https://github.com/conventional-changelog/commitlint/issues/821)) ([4b5300a](https://github.com/conventional-changelog/commitlint/commit/4b5300a))\n```\n\n----------------------------------------\n\nTITLE: Replacing repository references\nDESCRIPTION: This commit replaces all repository references with the conventional changelog organization. This is likely a cleanup task related to the project's structure or ownership.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/top-level/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Fix: Ignoring Merge Tag Commit Messages - JavaScript\nDESCRIPTION: This commit fixes a bug in the @commitlint/is-ignored package that prevented the tool from properly ignoring merge tag commit messages. The fix ensures that these messages are correctly identified and excluded from commitlint checks.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n- **is-ignored:** ignore merge tag commit messages ([#2920](https://github.com/conventional-changelog/commitlint/issues/2920)) ([914782a](https://github.com/conventional-changelog/commitlint/commit/914782aad70d353baf4d9fbbf9824c0211241484))\n```\n\n----------------------------------------\n\nTITLE: Adding caret to lodash versions\nDESCRIPTION: This bug fix adds a caret (^) to the 'lodash' dependency versions.  The caret indicates that the project can accept any future minor or patch versions without breaking. This ensures the project can automatically take advantage of bug fixes and potentially performance improvements in the lodash libraries. This change addresses a potential vulnerability by making the project more resilient to future lodash releases.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n- [#840](https://github.com/conventional-changelog/commitlint/issues/840) add caret to lodash versions ([#843](https://github.com/conventional-changelog/commitlint/issues/843)) ([ffc0bac](https://github.com/conventional-changelog/commitlint/commit/ffc0bac26993acb2ab6a8fa51065f93c92b0d644))\n```\n\n----------------------------------------\n\nTITLE: Installing @commitlint/config-nx-scopes\nDESCRIPTION: Installs @commitlint/config-nx-scopes and @commitlint/cli as dev dependencies, then creates a basic commitlint configuration file.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-nx-scopes/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @commitlint/config-nx-scopes @commitlint/cli\necho \"module.exports = {extends: ['@commitlint/config-nx-scopes']};\" > commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Fix: Ignoring Bitbucket Automatic Merge - JavaScript\nDESCRIPTION: This commit fixes a bug where automatic merge commit messages generated by Bitbucket were not being ignored.  The fix adds logic to correctly identify and ignore these messages. It addresses issue #573.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n- **is-ignored:** ignore bitbuckets automatic merge ([#573](https://github.com/conventional-changelog/commitlint/issues/573)) ([e5bdc5c](https://github.com/conventional-changelog/commitlint/commit/e5bdc5c))\n```\n\n----------------------------------------\n\nTITLE: Adding Commit Script to package.json\nDESCRIPTION: Adds a shortcut script to package.json that makes it easier to use the commitlint prompt CLI. This allows users to run 'npm run commit' instead of typing the full command.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/use-prompt.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"commit\": \"commit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Ignoring Merge Messages with Newlines - JavaScript\nDESCRIPTION: This commit fixes a bug where merge messages containing text after a newline character were not being correctly ignored. The fix ensures that commitlint ignores such merge commit messages. It addresses commit b32bc93.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n- ignore merge messages with text after newline ([b32bc93](https://github.com/conventional-changelog/commitlint/commit/b32bc93))\n```\n\n----------------------------------------\n\nTITLE: Linting commit messages with type-empty rule - shell examples\nDESCRIPTION: Enforces that the commit message must include a non-empty 'type' element. Messages with an empty type will fail. This ensures every commit explicitly declares its type.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho \": some message\" # fails\necho \"fix: some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Fix: Using Grouped Regex to Ignore Merges - JavaScript\nDESCRIPTION: This commit improves the logic for ignoring merge commits by using grouped regular expressions. This change likely makes the regex more robust and accurate in identifying merge commits. It addresses issue #439.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n- use grouped regex to ignore merge commits ([#439](https://github.com/conventional-changelog/commitlint/issues/439)) ([905e9d5](https://github.com/conventional-changelog/commitlint/commit/905e9d5))\n```\n\n----------------------------------------\n\nTITLE: Linting Pull Request Commits on BitBucket Pipelines (YAML)\nDESCRIPTION: This BitBucket Pipelines configuration defines a pipeline for pull requests using a node:18 image. It installs commitlint dependencies and then executes npx commitlint using BitBucket's default variables and git rev-list to dynamically determine the commit range between the PR source and destination branches for linting.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/ci-setup.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nimage: node:18\n\npipelines:\n  pull-requests:\n    default:\n      - step:\n        name: Lint commit messages\n        script:\n          - npm install --save-dev @commitlint/config-conventional @commitlint/cli\n          - npx commitlint --from $BITBUCKET_COMMIT~$(git rev-list --count $BITBUCKET_BRANCH ^origin/$BITBUCKET_PR_DESTINATION_BRANCH) --to $BITBUCKET_COMMIT --verbose\n```\n\n----------------------------------------\n\nTITLE: Removing Node 10 Support\nDESCRIPTION: Removes support for Node.js version 10. This is a breaking change that requires users to upgrade to a newer version of Node.js to use the latest version of commitlint.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- chore!: remove node 10 support (#2596) ([4db4ba1](https://github.com/conventional-changelog/commitlint/commit/4db4ba1b0b312410a0f62100a93a80c246a6c410)), closes [#2596](https://github.com/conventional-changelog/commitlint/issues/2596)\n\n### BREAKING CHANGES\n\n- minimum node version is 12\n```\n\n----------------------------------------\n\nTITLE: Fix: Updating Semver Dependency to v7.3.2 - JavaScript\nDESCRIPTION: This commit updates the dependency semver to version 7.3.2. This update likely includes bug fixes or improvements in the semver library itself. It addresses issue #1369.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n- update dependency semver to v7.3.2 ([#1369](https://github.com/conventional-changelog/commitlint/issues/1369)) ([3c09722](https://github.com/conventional-changelog/commitlint/commit/3c09722d2db85a94cd1f4bf25c6b4251b2c41bbb))\n```\n\n----------------------------------------\n\nTITLE: Validating Lowercase Scope with scope-case Rule in Commitlint (Shell)\nDESCRIPTION: This example demonstrates enforcing lowercase formatting of the scope field in commit messages through the scope-case rule. The shell command checks commit messages, failing those where the scope (inside parentheses) is uppercase.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix(SCOPE): some message\" # fails\necho \"fix(scope): some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Upgrading conventional-changelog-lint (v1 to v2) using npm (Bash)\nDESCRIPTION: Updates the `conventional-changelog-lint` package (the predecessor to `@commitlint/cli` v2) to its latest version using npm. This command facilitates the upgrade from version 1 to version 2.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/support/upgrade.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev conventional-changelog-lint@latest\n```\n\n----------------------------------------\n\nTITLE: Running Commitlint on Travis CI (YAML)\nDESCRIPTION: This Travis CI configuration defines a Node.js environment and specifies the script to run as commitlint-travis. This command, provided by the @commitlint/travis-cli package, executes commitlint with arguments appropriate for the Travis CI environment. It assumes the commitlint-travis-cli package has been installed in a previous step.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/ci-setup.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# travis.yml\nlanguage: node_js\nnode_js:\n  - node\nscript:\n  - commitlint-travis\n```\n\n----------------------------------------\n\nTITLE: Upgrading commitlint (v2 to v3) using npm and mv (Bash)\nDESCRIPTION: Handles the upgrade from commitlint v2 to v3 by removing the old package name (`conventional-changelog-lint`), installing the new package (`commitlint`), and renaming the configuration file from `.conventional-changelog-lintrc` to `commitlint.config.js`.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/support/upgrade.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm remove --save-dev conventional-changelog-lint\nnpm install --save commitlint\nmv .conventional-changelog-lintrc commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Updating dependency find-up\nDESCRIPTION: This change updates the dependency `find-up` to version 5.  `find-up` is used to find a file by walking up parent directories.  The update may contain bug fixes or new features.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/top-level/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Loading Commitlint Config from a Specific File\nDESCRIPTION: Example showing how to load commitlint configuration from a specific file path with a custom working directory.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/load.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst config = await load(\n  {},\n  { file: \".commitlintrc.yml\", cwd: process.cwd() },\n);\nconsole.log(config);\n/* => \n{ \n  extends: [], \n  rules: { \n    'body-leading-blank': [ 1, 'always' ] \n  },\n  formatter: '@commitlint/format', \n  plugins: {} \n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Adding explicit dependency on chalk\nDESCRIPTION: This fix adds an explicit dependency on 'chalk' to ensure it is installed properly. The explicit dependency ensures 'chalk' is correctly installed and available. This resolves potential issues related to missing dependencies and enhances the stability of the project, guaranteeing that the necessary libraries are available during the build process.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n- add explicit dependency on chalk ([#687](https://github.com/conventional-changelog/commitlint/issues/687)) ([9075844](https://github.com/conventional-changelog/commitlint/commit/9075844))\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring config-angular-type-enum (Shell)\nDESCRIPTION: Installs the necessary commitlint packages (@commitlint/config-angular-type-enum and @commitlint/cli) using npm and creates a basic commitlint.config.js file that extends the angular-type-enum configuration.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular-type-enum/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @commitlint/config-angular-type-enum @commitlint/cli\necho \"module.exports = {extends: ['@commitlint/config-angular-type-enum']};\" > commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Dropping Node v14 and v16 support in commitlint (JavaScript)\nDESCRIPTION: This entry documents the removal of support for Node.js versions 14 and 16 from the commitlint project. This involves updating dependencies, adjusting build configurations, and potentially modifying code to ensure compatibility with newer Node.js versions. This allows the project to leverage newer language features and performance improvements in later Node.js releases.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@alias/commitlint/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n* chore!: minimum node version v18 (#3644) ([5b4aeaf](https://github.com/conventional-changelog/commitlint/commit/5b4aeaf4f01c2726a7bc8631a23bb34c849baad2)), closes [#3644](https://github.com/conventional-changelog/commitlint/issues/3644)\n```\n\n----------------------------------------\n\nTITLE: Removing unneeded dev dependency\nDESCRIPTION: This change removes an unnecessary development dependency from the project. Removing unneeded dependencies reduces the project's overall size. It also helps to streamline the build process and minimizes potential vulnerabilities associated with unused dependencies, contributing to the maintainability of the project.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n- remove unneeded dev dependency ([6ccaf79](https://github.com/conventional-changelog/commitlint/commit/6ccaf79))\n```\n\n----------------------------------------\n\nTITLE: Importing the read Function from @commitlint/read in JavaScript\nDESCRIPTION: Imports the default exported function 'read' from the '@commitlint/read' package for use in JavaScript files. This function reads commit messages from a specified range or edit source asynchronously.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/read.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport read from \"@commitlint/read\";\n```\n\n----------------------------------------\n\nTITLE: Updating cosmiconfig to safe version\nDESCRIPTION: This is a bug fix that upgrades the cosmiconfig dependency to a safe version (>=5). This ensures that the project is utilizing a version of cosmiconfig that has had known security vulnerabilities resolved. This mitigates potential security risks by keeping dependencies up to date and secure, while also providing a reliable configuration loading experience.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n- update cosmiconfig to safe >=5 [#599](https://github.com/conventional-changelog/commitlint/issues/599) ([f186fcb](https://github.com/conventional-changelog/commitlint/commit/f186fcb))\n```\n\n----------------------------------------\n\nTITLE: Example commitlint.config.js\nDESCRIPTION: This Javascript configuration file extends the `@commitlint/config-rush-scopes` configuration, enabling Rush project scope validation rules in commitlint. This is the standard way to set up a commitlint config.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-rush-scopes/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  extends: ['@commitlint/config-rush-scopes']\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing website references with conventional changelog\nDESCRIPTION: This change replaces references to the project's website with references to the conventional changelog. This keeps the documentation consistent and makes sure all references are up to date with the proper hosting.  This helps maintain accuracy by updating all website references.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n- replace all website references with conventional changelog ([#563](https://github.com/conventional-changelog/commitlint/issues/563)) ([6b86fb1](https://github.com/conventional-changelog/commitlint/commit/6b86fb1))\n```\n\n----------------------------------------\n\nTITLE: Installing @commitlint/config-lerna-scopes\nDESCRIPTION: Commands to install the package and create a basic configuration file. This installs both the config package and the commitlint CLI, then creates a simple configuration file that extends the lerna scopes config.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-lerna-scopes/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @commitlint/config-lerna-scopes @commitlint/cli\necho \"export default {extends: ['@commitlint/config-lerna-scopes']};\" > commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Checking stage before entering prompt\nDESCRIPTION: This feature adds a stage check before entering the prompt functionality. This reduces unnecessary prompting and improves the user experience. The change is designed to optimize the user workflow by confirming the stage before initiating the commit message prompting sequence.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n- check stage before entering prompt ([#495](https://github.com/conventional-changelog/commitlint/issues/495)) ([3b3667a](https://github.com/conventional-changelog/commitlint/commit/3b3667a)), closes [#51](https://github.com/conventional-changelog/commitlint/issues/51) [#51](https://github.com/conventional-changelog/commitlint/issues/51)\n```\n\n----------------------------------------\n\nTITLE: Installing Travis CLI Dependency with npm (Bash)\nDESCRIPTION: This Bash command installs the @commitlint/travis-cli package as a development dependency using npm install --save-dev. This package provides a utility specifically designed for integrating commitlint with Travis CI. It assumes Node.js and npm are available.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/ci-setup.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# Install and configure if needed\nnpm install --save-dev @commitlint/travis-cli\n```\n\n----------------------------------------\n\nTITLE: Fix: Updating Semver Dependency to v7.1.3 - JavaScript\nDESCRIPTION: This commit updates the semver dependency to version 7.1.3 within the @commitlint/is-ignored package. The semver update probably brings bug fixes or improvements in semver version comparison functionality. It addresses issue #995.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n- update dependency semver to v7.1.3 ([#995](https://github.com/conventional-changelog/commitlint/issues/995)) ([4ee307a](https://github.com/conventional-changelog/commitlint/commit/4ee307a1f8c861ae5d8a038560d166c5d00ea8ba))\n```\n\n----------------------------------------\n\nTITLE: Fix: Updating Semver Dependency to v5.5.0 - JavaScript\nDESCRIPTION: This commit updates the semver dependency to version 5.5.0.  This update incorporates bug fixes or enhancements provided by the semver library. It addresses issue #236.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n- update dependency semver to v5.5.0 ([#236](https://github.com/conventional-changelog/commitlint/issues/236)) ([6c52bd9](https://github.com/conventional-changelog/commitlint/commit/6c52bd9))\n```\n\n----------------------------------------\n\nTITLE: Migrating commitlint to pure ESM (JavaScript)\nDESCRIPTION: This entry documents the migration of the commitlint project to pure ECMAScript Modules (ESM). This change involves refactoring the codebase to use ESM syntax, updating dependencies, and adjusting the build process to support ESM. This migration also involves test updates using vitest and other related changes.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@alias/commitlint/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n* feat!: migrate to pure ESM (#3850) ([3423735](https://github.com/conventional-changelog/commitlint/commit/342373559bdf7c783c4ef37ff05dc38a5f681159)), closes [#3850](https://github.com/conventional-changelog/commitlint/issues/3850)\n```\n\n----------------------------------------\n\nTITLE: Installing @commitlint/lint package\nDESCRIPTION: Command to install the @commitlint/lint package using npm. This package is required to validate commit messages against commitlint rules.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/lint.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @commitlint/lint\n```\n\n----------------------------------------\n\nTITLE: Reverting Node Version Update in commitlint (JavaScript)\nDESCRIPTION: This entry documents the reversion of a previous change that updated the minimum supported Node.js version. The revert restores compatibility with older Node.js versions, potentially due to unforeseen issues or compatibility concerns introduced by the update.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@alias/commitlint/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n* Revert \"chore!: minimum node version v20\" ([2816783](https://github.com/conventional-changelog/commitlint/commit/2816783d00e7eb967de3ac9347c2fc43dc8b94fa))\n```\n\n----------------------------------------\n\nTITLE: Reading Package Information in Commitlint\nDESCRIPTION: Fixed a bug in commitlint package by updating to use new read package syntax. This change was implemented in version 8.3.4 to address issue #888.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@alias/commitlint/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **commitlint:** use new read pkg syntax ([#888](https://github.com/conventional-changelog/commitlint/issues/888)) ([6b3b9a9](https://github.com/conventional-changelog/commitlint/commit/6b3b9a9))\n```\n\n----------------------------------------\n\nTITLE: commitlint example usage\nDESCRIPTION: Example showing the usage of commitlint with different commit messages and project scopes. It demonstrates both passing and failing commit messages based on the configured scopes.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-nx-scopes/readme.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncat commitlint.config.js\n{\n  extends: ['@commitlint/config-nx-scopes']\n}\n\ntree packages\n\npackages\n├── api\n├── app\n└── web\n\necho \"build(api): change something in api's build\" | commitlint\n⌧   input: build(api): change something in api's build\n✔   found 0 problems, 0 warnings\n\necho \"test(foo): this won't pass\" | commitlint\n⌧   input: test(foo): this won't pass\n✖   scope must be one of [api, app, web] [scope-enum]\n✖   found 1 problems, 0 warnings\n\necho \"ci: do some general maintenance\" | commitlint\n⌧   input: ci: do some general maintenance\n✔   found 0 problems, 0 warnings\n```\n\n----------------------------------------\n\nTITLE: Migrating to Pure ESM in commitlint\nDESCRIPTION: This snippet illustrates the migration of commitlint to a pure ECMAScript Module (ESM) format. This change involves updating module imports and exports to ESM syntax. This resolves issue #3850 in commitlint.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/prompt-cli/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n* feat!: migrate to pure ESM (#3850) ([3423735](https://github.com/conventional-changelog/commitlint/commit/342373559bdf7c783c4ef37ff05dc38a5f681159)), closes [#3850](https://github.com/conventional-changelog/commitlint/issues/3850)\n```\n\n----------------------------------------\n\nTITLE: Reading Commit Message from Current Git Commit Edit in JavaScript\nDESCRIPTION: Demonstrates how to read the current commit message being edited by passing 'edit: true' to the read function. The function returns a promise that resolves to an array containing the commit message string read from the default Git commit edit file.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/read.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await read({ edit: true });\nconsole.info(result);\n// => ['I did something\\n\\n']\n```\n\n----------------------------------------\n\nTITLE: Reverting minimum Node version\nDESCRIPTION: This change reverts a previous update to the minimum Node.js version. This could be done to maintain compatibility with older environments or to address issues introduced by the newer Node.js version.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/top-level/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Async Rule Configuration Function in Commitlint Configuration - JavaScript\nDESCRIPTION: This snippet configures the 'header-max-length' Commitlint rule as an async function returning a configuration array, accommodating asynchronous logic or dependencies for rule setup. Any asynchronous prerequisites (e.g., API calls) could be included before returning [0, \"always\", 72]. Requires Commitlint; input is the config object, output is the promise-resolved array used by Commitlint. Note: The use of async may introduce delays or require Commitlint v11+ for proper async support.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/reference/rules-configuration.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  // ...\n  rules: {\n    \"header-max-length\": async () => [0, \"always\", 72], // [!code focus]\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Dropping Node.js v14 and v16 support\nDESCRIPTION: This change removes support for Node.js versions 14 and 16.  This could be to align with supported Node.js versions or to take advantage of features in newer versions.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/top-level/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Reading Last Two Git Commits Using HEAD Reference in JavaScript\nDESCRIPTION: Shows usage of the read function to retrieve the last two commits by specifying 'from' as 'HEAD~2'. It asynchronously returns commit messages in descending order from the range specified up to HEAD.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/read.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await read({ from: \"HEAD~2\" });\nconsole.info(result);\n// => ['I did something\\n\\n', 'Initial commit\\n\\n']\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Migrate to pure ESM (JavaScript)\nDESCRIPTION: This breaking change migrates the project to pure ESM (ECMAScript Modules). It fundamentally alters the module loading system, requiring changes in how the code is imported and exported. This affects all parts of the codebase but specifically mentions changes to the resolve logic and loading of parser presets.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n* feat!: migrate to pure ESM (#3850) ([3423735](https://github.com/conventional-changelog/commitlint/commit/342373559bdf7c783c4ef37ff05dc38a5f681159)), closes [#3850](https://github.com/conventional-changelog/commitlint/issues/3850)\n```\n\n----------------------------------------\n\nTITLE: Disallowing Empty Subject with subject-empty Rule in Commitlint (Shell)\nDESCRIPTION: This snippet ensures that the commit subject must not be empty, as enforced by the subject-empty rule. If the commit subject is omitted, commitlint will reject the message, helping maintain meaningful commit logs.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\necho \"fix:\" # fails\necho \"fix: some message\" # passes\n```\n\n----------------------------------------\n\nTITLE: Installing @commitlint/parse via npm\nDESCRIPTION: This command installs the @commitlint/parse package as a project dependency using the Node Package Manager (npm). The `--save` flag adds it to the project's `package.json` dependencies.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/parse/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save @commitlint/parse\n```\n\n----------------------------------------\n\nTITLE: Reading Commit Message from a Git GUI Edit File in JavaScript\nDESCRIPTION: Illustrates reading a commit message from a Git GUI edit file by specifying the 'edit' parameter as a relative file path. The read function returns an array with the commit message read from the specified file path.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/read.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await read({ edit: \"./git/GITGUI_EDITMESSAGE\" });\nconsole.info(result);\n// => ['I did something via git gui\\n\\n']\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI using YAML\nDESCRIPTION: This snippet shows the configuration of a `.travis.yml` file to integrate `@commitlint/travis-cli` into a Travis CI build process.  The `script` section defines the commands to be executed. The `commitlint-travis` command is run to lint the commit messages. Requires `.travis.yml` to be present in the project root and `@commitlint/travis-cli` to be installed.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/travis-cli/README.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nscript\n- commitlint-travis\n```\n\n----------------------------------------\n\nTITLE: Validating commit message with type-enum rule (valid case)\nDESCRIPTION: Example of validating a commit message against a custom type-enum rule where the message passes validation. The rule checks if the commit type is in the allowed list.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/lint.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst report = await lint(\"foo: bar\", { \"type-enum\": [1, \"always\", [\"foo\"]] });\nconsole.log(report);\n// => { valid: true, errors: [], warnings: [] }\n```\n\n----------------------------------------\n\nTITLE: Installing @commitlint/travis-cli using npm\nDESCRIPTION: This snippet demonstrates the installation of the `@commitlint/travis-cli` package as a development dependency.  It uses the npm package manager to install the package, which is required for linting commit messages in a Travis CI environment.  This command adds the package to the project's `devDependencies`.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/travis-cli/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm install --save-dev @commitlint/travis-cli\n```\n\n----------------------------------------\n\nTITLE: Creating commitlint.config.js to extend config\nDESCRIPTION: This command creates a `commitlint.config.js` file that extends the `@commitlint/config-rush-scopes` configuration. This configures commitlint to use the Rush-specific scope validation rules.  The file should be placed in the root directory of the project.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-rush-scopes/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\necho \"export default {extends: ['@commitlint/config-rush-scopes']};\" > commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Formatting Empty Commitlint Report with Colors Enabled in JavaScript\nDESCRIPTION: This snippet shows calling the format function without arguments, resulting in an empty report with zero problems found. The output is colorized, using ANSI escape codes to produce a green check mark and a summary string indicating no problems or warnings. This usage demonstrates the default behavior of the format function when no report data is provided.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/format.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nformat();\n/* => \n[ \n  '\\u001b[1m\\u001b[32m\\u2714\\u001b[39m   found 0 problems, 0 warnings\\u001b[22m' \n] \n*/\n```\n\n----------------------------------------\n\nTITLE: Example parserOpts for @commitlint/parse\nDESCRIPTION: Provides an example structure for the `parserOpts` object, which can be passed to the `parse` function to customize the parsing behavior. It shows default settings for `commentChar` (used to identify comment lines) and `issuePrefixes` (used to identify issue references).\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/parse/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  commentChar: null, // character indicating comment lines\n  issuePrefixes: ['#'] // prefix characters for issue references\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Rules in commitlint.config.js (JavaScript)\nDESCRIPTION: Provides an example `commitlint.config.js` file structure. It demonstrates extending a base configuration (`@commitlint/config-conventional`) and defining custom rules, such as enforcing a specific list of allowed scopes using `scope-enum`.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/support/upgrade.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: [\"@commitlint/config-conventional\"],\n  rules: {\n    // Place your rules here\n    \"scope-enum\": [2, \"always\", [\"a\", \"b\"]], // error if scope is given but not in provided list\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing @commitlint/load\nDESCRIPTION: How to import the load function from the @commitlint/load package in JavaScript.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/load.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport load from \"@commitlint/load\";\n```\n\n----------------------------------------\n\nTITLE: Installing commitlint prompt CLI and config sh\nDESCRIPTION: This command installs the @commitlint/prompt-cli and @commitlint/config-angular packages globally using npm. It then creates a commitlint.config.js file with a basic configuration extending the angular preset, enabling commit message linting.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/prompt-cli/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @commitlint/prompt-cli @commitlint/config-angular\necho \"export default {extends: ['@commitlint/config-angular']};\" > commitlint.config.js\n```\n\n----------------------------------------\n\nTITLE: Replacing repository references with conventional changelog\nDESCRIPTION: This change replaces all repository references within the codebase with references to conventional changelog. The change standardizes the repository references and ensures the projects are using the official URLs. This change improves consistency and makes the projects easier to maintain.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n- replace all repository references with conventional changelog ([#561](https://github.com/conventional-changelog/commitlint/issues/561)) ([6c3afcd](https://github.com/conventional-changelog/commitlint/commit/6c3afcd))\n```\n\n----------------------------------------\n\nTITLE: Feature: Remove ts-node dependency using cosmiconfig-typescript-loader (JavaScript)\nDESCRIPTION: This feature replaces ts-node with cosmiconfig-typescript-loader v5 to remove the hard dependency on ts-node for @commitlint/load. This allows commitlint to load TypeScript configuration files without requiring ts-node to be installed.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n**load:** use cosmiconfig-typescript-loader v5 to remove ts-node dependency for @commitlint/load ([#3722](https://github.com/conventional-changelog/commitlint/issues/3722)) ([1ff49ea](https://github.com/conventional-changelog/commitlint/commit/1ff49ea14adb180eb54ec3d7479990b66ba26720))\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type Signature for Commit Range\nDESCRIPTION: Declares a TypeScript type Range representing the parameters to specify the commit range for reading messages. Includes fields 'from', 'to', and optional 'edit' which control where commits are read from, supporting both commit references and file-based editing. It also shows the signature for the read function which returns a promise resolving to an array of commit message strings.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/read.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Range = {\n  /* Lower end of the commit range to read */\n  from: string;\n  /* Upper end of the commit range to read */\n  to: string;\n  /* Whether (boolean) to read from ./.git/COMMIT_EDITMSG or where to read from (string) */\n  edit?: boolean | string;\n};\n\nread(range: Range) => Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Updating dependency execa to v4\nDESCRIPTION: This snippet reflects a bug fix where the 'execa' dependency was updated to version 4.  This action ensures compatibility with newer versions of execa, which provides a more robust and up-to-date execution environment. This update is essential for resolving potential vulnerabilities and taking advantage of the latest features and performance improvements within 'execa'.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- update dependency execa to v4.1.0 ([#2251](https://github.com/conventional-changelog/commitlint/issues/2251)) ([b5743dd](https://github.com/conventional-changelog/commitlint/commit/b5743dd1e49bbe7eac03f34bc38c59df5fbaf2a0))\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- update dependency execa to v5 ([#2341](https://github.com/conventional-changelog/commitlint/issues/2341)) ([f349df9](https://github.com/conventional-changelog/commitlint/commit/f349df90f08096a9bcad46b5e55b411aac327a24))\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- update dependency execa to v4 ([#1936](https://github.com/conventional-changelog/commitlint/issues/1936)) ([8efb441](https://github.com/conventional-changelog/commitlint/commit/8efb44193058d286f7325327a6d33936b273ec91))\n```\n\n----------------------------------------\n\nTITLE: Initializing Commitlint Configuration in JavaScript\nDESCRIPTION: This snippet initializes and exports a Commitlint configuration object, specifying rules for commit message validation. It sets core rules to enforce conventional commit standards, including scope and type constraints, within a Node.js environment.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/license.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  rules: {\n    'type-enum': [2, 'always', ['build', 'chore', 'ci', 'docs', 'feat', 'fix', 'perf', 'refactor', 'style', 'test']],\n    'scope-case': [0],\n    'subject-full-stop': [0],\n    'header-max-length': [2, 'always', 72]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @commitlint/load\nDESCRIPTION: Command to install the @commitlint/load package as a dependency in your project using npm.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/load.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @commitlint/load\n```\n\n----------------------------------------\n\nTITLE: Migrate to pure ESM\nDESCRIPTION: This change migrates the project to pure ECMAScript Modules (ESM). This involves updating the project structure, dependencies, and build process to fully support ESM syntax and module resolution.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/top-level/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Dropping Node.js v12 support\nDESCRIPTION: This change removes support for Node.js version 12. This may be done to align with the project's support matrix or to adopt features available in newer Node.js versions.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/top-level/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Bug Fix: Correctly resolve global packages (JavaScript)\nDESCRIPTION: This bug fix addresses issues in resolving global packages by dropping dependencies like `resolve-from`, `resolve-global`, and `import-fresh`. It aims to correctly resolve global packages. The impact affects the package loading and resolution mechanism, specifically within @commitlint/load.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndrop `resolve-from`, `resolve-global` and `import-fresh`, resolve global packages correctly ([#3939](https://github.com/conventional-changelog/commitlint/issues/3939)) ([8793c63](https://github.com/conventional-changelog/commitlint/commit/8793c639c083c33714da0a29429b338776813d0c)), closes [#3938](https://github.com/conventional-changelog/commitlint/issues/3938)\n```\n\n----------------------------------------\n\nTITLE: Using `node:` prefix for builtins\nDESCRIPTION: This performance improvement uses the `node:` prefix to bypass the `require.cache` call for built-in modules. This can lead to faster module loading and improved application performance.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/top-level/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Fixing broken website references\nDESCRIPTION: This bug fix corrects all broken references to the website used in documentation and other relevant areas. These updates resolve any issues that would prevent access to the website's content, and instead point to working locations. The goal is to ensure that documentation links are functional and reliable.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n- all broken website references ([#564](https://github.com/conventional-changelog/commitlint/issues/564)) ([82eeb5a](https://github.com/conventional-changelog/commitlint/commit/82eeb5a))\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Removing Node 10 Support\nDESCRIPTION: A breaking change that removes support for Node.js v10, making Node.js v12 the minimum required version. This change was implemented in version 13.0.0.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@alias/commitlint/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n- chore!: remove node 10 support (#2596) ([4db4ba1](https://github.com/conventional-changelog/commitlint/commit/4db4ba1b0b312410a0f62100a93a80c246a6c410)), closes [#2596](https://github.com/conventional-changelog/commitlint/issues/2596)\n\n### BREAKING CHANGES\n\n- minimum node version is 12\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for @commitlint/load\nDESCRIPTION: TypeScript type definitions for the @commitlint/load package including rule types, configuration objects, and function signature.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/api/load.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * How to handle violation of rule\n * 0 - ignore\n * 1 - warn\n * 2 - throw\n */\ntype RuleLevel = 0 | 1 | 2;\n\n/*\n * Application of rule\n * always - positive\n * never - negative\n */\ntype RuleCondition = 'always' | 'never';\n\n/*\n * Additional, optional options to pass to rule\n */\ntype RuleOption = any;\n\n/**\n * Basic complete rule definition\n */\ntype PrimitiveRule = [RuleLevel, RuleCondition, RuleOption?];\n\n/*\n * Async rules are resolved during config lookup.\n * They can be used to set up linting rules based on e.g. the project fs\n */\ntype AsyncRule = Promise<PrimitiveRule>;\n\n/*\n * Function rules are executed during config lookup.\n * They can be used to set up linting rules based on e.g. the project fs\n */\ntype FunctionRule = () => PrimitiveRule;\n\n/*\n * Async function rules are executed and awaited during config lookup.\n * They can be used to set up linting rules based on e.g. the project fs\n */\ntype AsyncFunctionRule () => Promise<PrimitiveRule>;\n\n/*\n * Polymorphic rule struct\n */\ntype Rule = PrimitiveRule | FunctionRule | AsyncFunctionRule;\n\n/*\n * Parser preset for conventional commits\n */\ntype ParserPreset = {\n  name: string;\n  path: string;\n  opts: any;\n};\n\ntype Seed = {\n  /*\n   * ids resolvable from cwd or configuration file.\n   * Imported and merged into configuration\n   * with increasing precedence, with top level config taking the highest.\n   */\n  extends?: string[];\n  /*\n   * id resolvable from cwd or configuration file.\n   * Imported and expanded to {ParserPreset}.\n   * Top level parserPresets override presets in extended configuration.\n   */\n  parserPreset?: string;\n  /**\n   * Initial map of rules to check against\n   */\n  rules?: {[ruleName: string]: Rule};\n  /**\n   * URL to print as help for reports with problems\n   */\n  helpUrl?: string;\n};\n\ntype Config = {\n  /*\n   * Relatives path to all extended configurations.\n   */\n  extends: string[];\n  /*\n   * Expanded parser preset, if any\n   */\n  parserPreset?: ParserPreset;\n  /*\n   * Merged map of rules to check against\n   */\n  rules: {[ruleName: string]: Rule};\n  /**\n   * URL to print as help for reports with problems\n   */\n  helpUrl?: string;\n};\n\ntype LoadOptions = {\n  /*\n   * Path to the config file to load.\n   */\n  file?: string;\n  /*\n   * The cwd to use when loading config from file parameter.\n   */\n  cwd: string;\n};\n\nload(seed: Seed = {}, options?: LoadOptions = {cwd: process.cwd()}) => Promise<Config>;\n```\n\n----------------------------------------\n\nTITLE: Adding subject-exclamation-mark rule\nDESCRIPTION: Adds a rule to improve error messages related to subject exclamation marks in commit messages. This feature enhances the clarity and guidance provided by commitlint.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- add subject-exclamation-mark rule to improve error messages ([#2593](https://github.com/conventional-changelog/commitlint/issues/2593)) ([be701bd](https://github.com/conventional-changelog/commitlint/commit/be701bdb1de4e667b7a872767244285c4fa4fda4))\n```\n\n----------------------------------------\n\nTITLE: Creating a Commit Message Validator Function in JavaScript\nDESCRIPTION: This code defines an asynchronous function to validate commit messages against specified rules using commitlint. It utilizes the '@commitlint/core' library for validation, accepting a message string parameter. The function returns validation results indicating whether the message complies with the rules, essential for automated commit message checks.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-nx-scopes/license.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { lint } = require('@commitlint/core');\n\nasync function validateCommitMessage(message) {\n  const result = await lint(message, {\n    rules: {\n      'type-enum': [2, 'always', ['feat', 'fix']] // example rules\n    }\n  });\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Development Installation and Run\nDESCRIPTION: Shows the commands needed to clone, install dependencies, build, start, and run the commitlint CLI within the development environment. Requires git, yarn, and node.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:conventional-changelog/commitlint.git\ncd commitlint\nyarn\nyarn run build # run build tasks\nyarn start # run tests, again on change\nyarn run commitlint # run CLI\n```\n\n----------------------------------------\n\nTITLE: Updating commitlint configuration packages using npm\nDESCRIPTION: Command to update the @commitlint/config-conventional package to ensure compatibility with other commitlint packages. This helps resolve version mismatch issues causing invalid rule errors.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/support/troubleshooting.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm update @commitlint/config-conventional\n```\n\n----------------------------------------\n\nTITLE: Handling absolute config paths correctly\nDESCRIPTION: This bug fix ensures that absolute paths for the configuration files are correctly handled by the system. When an absolute path is used, the resolver should correctly identify and load the file. This enables users to use config files from any location on the filesystem. This fixes a common issue with using custom configuration locations.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n- handle absolute config paths correctly [#647](https://github.com/conventional-changelog/commitlint/issues/647) ([49b3a77](https://github.com/conventional-changelog/commitlint/commit/49b3a77))\n```\n\n----------------------------------------\n\nTITLE: Adding plugins support\nDESCRIPTION: This feature adds support for plugins. This allows customization and extension of the commitlint functionality by loading and running plugins.  The intended functionality provides greater flexibility in tailoring commitlint to specific project needs.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n- adds support for plugins ([#228](https://github.com/conventional-changelog/commitlint/issues/228)) ([#588](https://github.com/conventional-changelog/commitlint/issues/588)) ([cea4564](https://github.com/conventional-changelog/commitlint/commit/cea4564))\n```\n\n----------------------------------------\n\nTITLE: Fix: Moving Types to Dev Dependencies - JavaScript\nDESCRIPTION: This commit addresses a bug by moving type definitions for the @commitlint/is-ignored package to the dev dependencies. This change improves the package's install size for consumers who don't need the type definitions in production. It addresses issue #897.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n- **is-ignored:** move types to dev dependencies ([#897](https://github.com/conventional-changelog/commitlint/issues/897)) ([aabc549](https://github.com/conventional-changelog/commitlint/commit/aabc549))\n```\n\n----------------------------------------\n\nTITLE: Using Node.js Prefix for Built-ins in commitlint\nDESCRIPTION: This snippet shows the usage of the `node:` prefix when requiring built-in modules. Using `node:` ensures that the require.cache is bypassed, resulting in improved performance. This resolves issue #4302 in commitlint.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/prompt-cli/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nuse `node:` prefix to bypass require.cache call for builtins ([#4302](https://github.com/conventional-changelog/commitlint/issues/4302)) ([0cd8f41](https://github.com/conventional-changelog/commitlint/commit/0cd8f410573fe11383f788b1ceb7e0946143591d))\n```\n\n----------------------------------------\n\nTITLE: Bypassing require.cache with node: prefix in commitlint (JavaScript)\nDESCRIPTION: This snippet optimizes performance by using the `node:` prefix to bypass `require.cache` calls for built-in modules. This approach reduces overhead by directly accessing built-in modules without checking the cache, resulting in faster module loading and execution.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@alias/commitlint/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nuse `node:` prefix to bypass require.cache call for builtins ([#4302](https://github.com/conventional-changelog/commitlint/issues/4302)) ([0cd8f41](https://github.com/conventional-changelog/commitlint/commit/0cd8f410573fe11383f788b1ceb7e0946143591d))\n```\n\n----------------------------------------\n\nTITLE: Performance Improvement: Built-in Module Resolution (Node.js)\nDESCRIPTION: This snippet represents a performance improvement in commitlint where the `node:` prefix is used to bypass the `require.cache` call for built-in modules. This optimization avoids unnecessary cache lookups, improving module resolution speed.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nuse `node:` prefix to bypass require.cache call for builtins ([#4302](https://github.com/conventional-changelog/commitlint/issues/4302)) ([0cd8f41](https://github.com/conventional-changelog/commitlint/commit/0cd8f410573fe11383f788b1ceb7e0946143591d))\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Minimum Node Version Requirement v14\nDESCRIPTION: A breaking change that updates the minimum required Node.js version to v14, dropping support for Node.js v12. This change was implemented in version 17.0.0.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@alias/commitlint/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n- chore!: minimum node version v14 (#3128) ([ac5f9b4](https://github.com/conventional-changelog/commitlint/commit/ac5f9b47a9e3cd5c9d58b14da0feb426f06b1ef9)), closes [#3128](https://github.com/conventional-changelog/commitlint/issues/3128)\n\n### BREAKING CHANGES\n\n- drop node v12 support\n\n- chore: rename circleci windows job\n\nnode version is not defned by the name anyways (i think)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Dropping Node 8 Support - JavaScript\nDESCRIPTION: This commit removes support for Node.js version 8, marking it as a breaking change. Users need to upgrade to a newer Node.js version (>=10) to use this version. It addresses issue #1999.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n- refactor!: drop support for node 8 (#1999) ([751f39f](https://github.com/conventional-changelog/commitlint/commit/751f39f284ef232574a176c3c11b1982ee544166)), closes [#1999](https://github.com/conventional-changelog/commitlint/issues/1999)\n\n### BREAKING CHANGES\n\n- remove node 8 from circle-ci checks\n\nalso remove node 13 because we do not support experimental versions\n```\n\n----------------------------------------\n\nTITLE: Dropping Node 8 Support\nDESCRIPTION: Removes support for Node.js version 8. This is a breaking change that necessitates an upgrade to a more recent Node.js version. Also removes support for experimental versions of node.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- refactor!: drop support for node 8 (#1999) ([751f39f](https://github.com/conventional-changelog/commitlint/commit/751f39f284ef232574a176c3c11b1982ee544166)), closes [#1999](https://github.com/conventional-changelog/commitlint/issues/1999)\n\n### BREAKING CHANGES\n\n- remove node 8 from circle-ci checks\n\nalso remove node 13 because we do not support experimental versions\n```\n\n----------------------------------------\n\nTITLE: Dropping support for Node.js 8\nDESCRIPTION: This change removes support for Node.js version 8.  This likely involves removing Node.js 8 from CI checks and potentially updating code to use features not available in Node.js 8.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/top-level/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Breaking Change: Dropping Node 8 Support\nDESCRIPTION: A breaking change that removes support for Node.js v8, also removing Node.js v13 as experimental versions are not supported. This change was implemented in version 10.0.0.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@alias/commitlint/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n- refactor!: drop support for node 8 (#1999) ([751f39f](https://github.com/conventional-changelog/commitlint/commit/751f39f284ef232574a176c3c11b1982ee544166)), closes [#1999](https://github.com/conventional-changelog/commitlint/issues/1999)\n\n### BREAKING CHANGES\n\n- remove node 8 from circle-ci checks\n\nalso remove node 13 because we do not support experimental versions\n\n- docs: update node v10 to latest LTS 10 version\n\nCo-authored-by: Cedric van Putten <me@bycedric.com>\n\nCo-authored-by: Cedric van Putten <me@bycedric.com>\n```\n\n----------------------------------------\n\nTITLE: Fix: Ignoring Branch Merges with Newlines - JavaScript\nDESCRIPTION: This commit fixes a bug where branch merges with multiple newlines in the commit message were not being ignored properly. The fix addresses this by ensuring that commitlint correctly ignores these types of merge commits. It addresses issue #227.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/is-ignored/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n- ignore branch merges with multiple newlines ([#227](https://github.com/conventional-changelog/commitlint/issues/227)) ([1f0c5ca](https://github.com/conventional-changelog/commitlint/commit/1f0c5ca))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Remove unused @types/node dependency (JavaScript)\nDESCRIPTION: This bug fix removes the unused `@types/node` dependency from the `@commitlint/load` package.  This removes an unnecessary dependency, reducing package size and potential conflicts.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **@commitlint/load:** Remove unused `@types/node` dependency ([#3801](https://github.com/conventional-changelog/commitlint/issues/3801)) ([7b3f8b3](https://github.com/conventional-changelog/commitlint/commit/7b3f8b3fe106311682a2e8ad281dd9a4e42443c6))\n```\n\n----------------------------------------\n\nTITLE: Adding Travis CLI\nDESCRIPTION: Adds a reusable Travis command line interface for commitlint. This aims to streamline and standardize Travis CI integration for the project.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-angular/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **travis-cli:** add reusable travis command line interface ([3e6e6a8](https://github.com/conventional-changelog/commitlint/commit/3e6e6a8))\n```\n\n----------------------------------------\n\nTITLE: Updating security-patched dependency versions\nDESCRIPTION: This bug fix involves updating the project to security-patched versions of its dependencies.  This critical step ensures that any known vulnerabilities present in older versions are addressed through the use of secure dependency versions.  The primary goal of this update is to mitigate security risks and protect the project.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n- update to security-patched dependency versions ([97c033b](https://github.com/conventional-changelog/commitlint/commit/97c033b))\n```\n\n----------------------------------------\n\nTITLE: Updating dependency cosmiconfig to v7\nDESCRIPTION: This is a bug fix addressing the update of the 'cosmiconfig' dependency to version 7.  'Cosmiconfig' is a tool used for discovering and loading configuration files. The update to v7 likely includes important security patches, improvements, or new functionality and ensures better configuration management within the project.  The update is crucial to avoid potential vulnerabilities and take advantage of the latest features in cosmiconfig.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n- update dependency cosmiconfig to v7 ([#2044](https://github.com/conventional-changelog/commitlint/issues/2044)) ([f4db933](https://github.com/conventional-changelog/commitlint/commit/f4db93324698ea39528be0d2692151546c2b5517))\n```\n\n----------------------------------------\n\nTITLE: Updating dependency chalk to v4\nDESCRIPTION: This commit updates the 'chalk' dependency to version 4. 'Chalk' is a library used for styling terminal output.  Updating 'chalk' ensures the project uses the latest security patches, feature enhancements, and bug fixes, improving the project's overall resilience and robustness.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/load/CHANGELOG.md#_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n- update dependency chalk to v4 ([#1275](https://github.com/conventional-changelog/commitlint/issues/1275)) ([a5d8fa1](https://github.com/conventional-changelog/commitlint/commit/a5d8fa118e8221361f14f5fd2b21d7aaad008a27))\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Creates a new Git repository in the current directory. This is a prerequisite step if you don't already have a repository initialized.\nSOURCE: https://github.com/conventional-changelog/commitlint/blob/master/docs/guides/use-prompt.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit init\n```"
  }
]