[
  {
    "owner": "django-extensions",
    "repo": "django-extensions",
    "content": "TITLE: Excluding Models from Django shell_plus\nDESCRIPTION: This configuration prevents the 'sites' app and the 'pictures' model within the 'blog' app from being loaded into the Django shell_plus environment. This can improve performance by reducing the number of models loaded or prevent conflicts with other models. This setting only applies to shell_plus and does not affect the Django application itself.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Dont load the 'sites' app, and skip the model 'pictures' in the app 'blog'\nSHELL_PLUS_DONT_LOAD = ['sites', 'blog.pictures']\n```\n\n----------------------------------------\n\nTITLE: Installing Django Extensions with pip\nDESCRIPTION: This snippet demonstrates how to install the django-extensions package using pip, the Python package installer. It fetches and installs the latest version of the package from the Python Package Index (PyPI).\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/index.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install django-extensions\n```\n\n----------------------------------------\n\nTITLE: Enabling SQL query printing in shell_plus\nDESCRIPTION: This snippet shows how to enable SQL query printing in shell_plus.  Setting `SHELL_PLUS_PRINT_SQL` to `True` will print SQL queries as they're executed during shell_plus sessions.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# print SQL queries in shell_plus\nSHELL_PLUS_PRINT_SQL = True\n```\n\n----------------------------------------\n\nTITLE: Print DSN for all databases using sqldsn in Django\nDESCRIPTION: This example shows how to print the Data Source Names (DSNs) for all databases defined in your Django settings. It uses the --all flag with the sqldsn management command. This assumes that you have multiple databases configured in your Django settings.py file.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/sqldsn.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./manage.py sqldsn --all\n```\n\n----------------------------------------\n\nTITLE: Installing Django Extensions with Pip\nDESCRIPTION: This command installs the django-extensions package using pip, the Python package installer. This installs the latest stable release from PyPI, making the extensions available for use in a Django project.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/installation_instructions.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install django-extensions\n```\n\n----------------------------------------\n\nTITLE: Dumping Data from a Single Model in a Django App\nDESCRIPTION: This command-line instruction shows how to use the `dumpscript` management command in Django to generate a script containing data for a specific model in a Django app. It redirects the output to a file named `testdata.py` within a `scripts` directory.  `manage.py` must be in your path for the command to work.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/dumpscript.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py dumpscript appname.ModelName > scripts/testdata.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Imports for Django shell_plus\nDESCRIPTION: This snippet demonstrates how to configure additional imports for shell_plus using the `SHELL_PLUS_IMPORTS` setting. This allows pre-loading specific modules, classes, or functions into the shell's global namespace, making them readily available.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nSHELL_PLUS_IMPORTS = [\n    'from module.submodule1 import class1, function2',\n    'from module.submodule2 import function3 as another1',\n    'from module.submodule3 import *',\n    'import module.submodule4',\n]\n```\n\n----------------------------------------\n\nTITLE: Reset DB with no input example\nDESCRIPTION: Example demonstrating how to reset the database without prompting for confirmation. This is useful for automated scripts or environments where user input is not available.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/reset_db.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Don't ask for a confirmation before doing the reset\n$ ./manage.py reset_db --noinput\n```\n\n----------------------------------------\n\nTITLE: Enabling Django Extensions in settings.py\nDESCRIPTION: This code snippet shows how to enable Django Extensions in a Django project by adding 'django_extensions' to the INSTALLED_APPS list in the project's settings.py file.  This makes the extensions available for use in the project.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    ...\n    'django_extensions',\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling SQL Printing in Django shell_plus\nDESCRIPTION: This configuration enables the printing of SQL queries executed during Django shell_plus sessions. This allows developers to inspect the generated SQL and optimize database interactions. Setting SHELL_PLUS_PRINT_SQL to True will output SQL queries to the console.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nSHELL_PLUS_PRINT_SQL = True\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Extensions in INSTALLED_APPS\nDESCRIPTION: This code snippet demonstrates how to add 'django_extensions' to the INSTALLED_APPS setting in the Django project's settings.py file. This step is necessary to make Django aware of the additional management commands provided by django-extensions.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/installation_instructions.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    ...\n    'django_extensions',\n)\n```\n\n----------------------------------------\n\nTITLE: Development Setup Instructions (Bash)\nDESCRIPTION: This snippet guides users through setting up a development environment for Django Extensions. It includes cloning the repository, creating and activating a virtual environment, installing dependencies, setting up environment variables for the database, running migrations, and starting the development server.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# clone the forked repository\n$ git clone YOUR_FORKED_REPO_URL\n\n# create a virtual environment\n$ python3 -m venv venv\n# activate the virtual environment\n$ source venv/bin/activate\n# install django-extensions in development mode\n(venv) $ pip install -e .\n# install dependencies\n(venv) $ pip install Django -r requirements-dev.txt\n\n# for accessing the GUI portion of the test application\n(venv) $ export DJANGO_EXTENSIONS_DATABASE_NAME=\"db.sqlite3\"    # you may change if you want to use any other database\n# run migrations\n(venv) $ python manage.py migrate\n# start the development server\n(venv) $ python manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Running RunServerPlus Command\nDESCRIPTION: This command starts the Django development server with the Werkzeug debugger enabled. It replaces the standard `runserver` command and provides enhanced traceback information and an interactive debugging console.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runserver_plus.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n$ python manage.py runserver_plus\n```\n\n----------------------------------------\n\nTITLE: Prefixing Models in Django shell_plus\nDESCRIPTION: This configuration prefixes all automatically loaded models in the 'blog' app with 'myblog' within the Django shell_plus environment. This is useful for avoiding naming collisions or for providing a clear namespace for models from a specific app. The prefix only applies within the shell_plus environment.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Prefix all automatically loaded models in the app blog with myblog.\nSHELL_PLUS_APP_PREFIXES = {'blog': 'myblog',}\n```\n\n----------------------------------------\n\nTITLE: Resetting and Reloading Data in a Django App Using Dumpscript\nDESCRIPTION: This command sequence resets a specified Django app and then reloads it with data from a previously generated script. The script is executed using the `runscript` management command, assuming the script is located within a directory named `scripts` which functions as a Python module (i.e., contains an `__init__.py` file). `manage.py` must be in your path for the command to work.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/dumpscript.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py reset appname\n$ ./manage.py runscript testdata\n```\n\n----------------------------------------\n\nTITLE: Configuring IPython Notebook Arguments\nDESCRIPTION: This snippet shows how to configure IPython Notebook arguments using the `NOTEBOOK_ARGUMENTS` and `IPYTHON_ARGUMENTS` settings. `NOTEBOOK_ARGUMENTS` are for options available via `ipython notebook -h`, while `IPYTHON_ARGUMENTS` are for options available via `ipython -h`.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nNOTEBOOK_ARGUMENTS = [\n    '--ip', 'x.x.x.x',\n    '--port', 'xx',\n]\n```\n\n----------------------------------------\n\nTITLE: Connecting to pre/post command signals in Django\nDESCRIPTION: This code snippet demonstrates how to connect receiver functions to the pre_command and post_command signals provided by django-extensions. The pre_receiver function is executed before the specified management command, and the post_receiver function is executed after the command completes. It requires importing pre_command, post_command, and the target Command class from django_extensions.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/command_signals.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django_extensions.management.signals import pre_command, post_command\nfrom django_extensions.management.commands.show_template_tags import Command\n\ndef pre_receiver(sender, args, kwargs):\n  # I'm executed prior to the management command\n\ndef post_receiver(sender, args, kwargs, outcome):\n  # I'm executed after the management command\n\npre_command.connect(pre_receiver, Command)\npost_command.connect(post_receiver, Command)\n```\n\n----------------------------------------\n\nTITLE: Specifying IPython for Django shell_plus\nDESCRIPTION: This configuration explicitly sets IPython as the Python shell to use with the Django shell_plus command. This overrides the default resolution order (ptpython, bpython, ipython, python) and ensures that IPython is always used. The shell_plus command will then leverage IPython's features and functionality.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Always use IPython for shell_plus\nSHELL_PLUS = \"ipython\"\n```\n\n----------------------------------------\n\nTITLE: Setting IPython Arguments in Django shell_plus\nDESCRIPTION: This configuration allows passing additional arguments to the underlying IPython shell when using Django shell_plus.  This can be used to customize the IPython environment.  For example, you could pass `--profile=foo` to load a specific IPython profile.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Additional IPython arguments to use\nIPYTHON_ARGUMENTS = []\n```\n\n----------------------------------------\n\nTITLE: Running RunServerPlus with --reloader-interval\nDESCRIPTION: This command starts the Django development server with a specified reloader interval.  This will decrease the CPU load at the expense of file edits taking longer to pick up.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runserver_plus.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n$ python manage.py runserver_plus --reloader-interval 5\n```\n\n----------------------------------------\n\nTITLE: Running RunServerPlus with SSL\nDESCRIPTION: This command starts the Django development server with SSL enabled, generating a certificate and key file. It allows for debugging issues that arise specifically with HTTPS.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runserver_plus.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n$ python manage.py runserver_plus --cert-file cert.crt\n```\n\n----------------------------------------\n\nTITLE: ForeignKeyAutocompleteAdmin Example\nDESCRIPTION: This code snippet demonstrates how to use ForeignKeyAutocompleteAdmin to enable autocompletion for a ForeignKey field ('user') in a Django admin model (Permission). It specifies the fields to search for within the related model ('first_name', 'email') and registers the model with the admin site.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/admin_extensions.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom foo.models import Permission\nfrom django_extensions.admin import ForeignKeyAutocompleteAdmin\n\n\nclass PermissionAdmin(ForeignKeyAutocompleteAdmin):\n    # User is your FK attribute in your model\n    # first_name and email are attributes to search for in the FK model\n    related_search_fields = {\n       'user': ('first_name', 'email'),\n    }\n\n    fields = ('user', 'avatar', 'is_active')\n\n    ...\n\nadmin.site.register(Permission, PermissionAdmin)\n```\n\n----------------------------------------\n\nTITLE: Start mail_debug mail server\nDESCRIPTION: Starts the mail_debug command which creates a local SMTP server that captures and prints email content to the console. By default, it listens on port 1025 of the localhost IP address. Use Ctrl+C to stop the server.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/mail_debug.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py mail_debug\n```\n\n----------------------------------------\n\nTITLE: Model Definition with User Foreign Key - Django\nDESCRIPTION: Defines a Django model with a ForeignKey relationship to the user model. The 'author' field represents the owner of the model instance and is linked to the AUTH_USER_MODEL setting. The on_delete=models.CASCADE ensures that related model instances are deleted when the user is deleted.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/permissions.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.conf import settings\n\nclass MyModel(models.Model):\n   author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete = models.CASCADE)\n   content = models.TextField()\n```\n\n----------------------------------------\n\nTITLE: ForeignKeyAutocompleteAdmin with django-reversion\nDESCRIPTION: This code snippet shows how to integrate ForeignKeyAutocompleteAdmin with django-reversion's VersionAdmin class. It creates a custom admin class (MyVersionModelAdmin) that inherits from both VersionAdmin and ForeignKeyAutocompleteAdmin, enabling versioning and autocompletion for the model.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/admin_extensions.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom foo.models import MyVersionModel\nfrom reversion.admin import VersionAdmin\nfrom django_extensions.admin import ForeignKeyAutocompleteAdmin\n\n\nclass MyVersionModelAdmin(VersionAdmin, ForeignKeyAutocompleteAdmin):\n    ...\n\nadmin.site.register(MyVersionModel, MyVersionModelAdmin)\n```\n\n----------------------------------------\n\nTITLE: Using AutoSlugField with custom slugify function\nDESCRIPTION: Demonstrates how to use AutoSlugField with a custom slugify function passed as an argument. The `my_slugify_function` replaces underscores with hyphens and converts the string to lowercase before creating the slug.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/field_extensions.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# models.py\n\nfrom django.db import models\n\nfrom django_extensions.db.fields import AutoSlugField\n\n\ndef my_slugify_function(content):\n    return content.replace('_', '-').lower()\n\n\nclass MyModel(models.Model):\n\n    title = models.CharField(max_length=42)\n    slug = AutoSlugField(populate_from='title', slugify_function=my_slugify_function)\n```\n\n----------------------------------------\n\nTITLE: Send email via Django\nDESCRIPTION: Sends a simple email using Django's send_mail function. This example shows how to send a test email that will be captured and displayed by the mail_debug server if the email settings (EMAIL_HOST and EMAIL_PORT) are configured to point to the mail_debug server's address and port.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/mail_debug.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import send_mail\n\nsend_mail(\n    \"Subject here\",\n    \"Here is the message.\",\n    \"from@example.com\",\n    [\"to@example.com\"],\n    fail_silently=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Model Aliases in Django shell_plus\nDESCRIPTION: This configuration renames the automatically loaded 'Messages' model from the 'blog' app to 'blog_messages' within the Django shell_plus environment. This resolves potential naming conflicts or provides a more descriptive alias for the model. This setting only affects the shell_plus environment and does not alter the model's name within the application.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Rename the automatic loaded module Messages in the app blog to blog_messages.\nSHELL_PLUS_MODEL_ALIASES = {'blog': {'Messages': 'blog_messages'},}\n```\n\n----------------------------------------\n\nTITLE: Settings Configuration for AWS and S3 in Django\nDESCRIPTION: This snippet shows how to configure the AWS access key ID, secret access key, and bucket name in your Django settings.py file. These settings are required for the sync_s3 command to authenticate with AWS and access the specified S3 bucket. Ensure your AWS credentials have the necessary permissions to read and write to the bucket.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/sync_s3.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\nAWS_ACCESS_KEY_ID = ''\nAWS_SECRET_ACCESS_KEY = ''\nAWS_BUCKET_NAME = 'bucket'\n```\n\n----------------------------------------\n\nTITLE: Generating Password using Django Extensions (command line)\nDESCRIPTION: This command generates a new password using Django Extensions. The `--length` option specifies the password length, and `--complex` adds punctuation characters to the character set used for password generation. If `--length` is not specified, the password length defaults to 16.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/generate_password.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n$ python manage.py generate_password [--length=<length>] [--complex]\n```\n\n----------------------------------------\n\nTITLE: Running validate_templates command\nDESCRIPTION: This example shows how to run the `validate_templates` command from the command line. This will check all Django templates in the project for syntax errors.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/validate_templates.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py validate_templates\n```\n\n----------------------------------------\n\nTITLE: Installing pydot\nDESCRIPTION: Command to install the pydot library along with pyparsing, which are needed for generating model graphs. pyparsing version should be exact to avoid issues.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install pyparsing pydot\n```\n\n----------------------------------------\n\nTITLE: Dumping Data from All Models in a Django App\nDESCRIPTION: This command-line instruction shows how to use the `dumpscript` management command in Django to generate a script containing data for all models in a specified app.  It redirects the output to a file named `testdata.py` within a `scripts` directory.  `manage.py` must be in your path for the command to work.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/dumpscript.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py dumpscript appname > scripts/testdata.py\n```\n\n----------------------------------------\n\nTITLE: Right Dumpscript Naming Example for all models\nDESCRIPTION: This command-line example shows a correct way to name the output file for a `dumpscript` command in Django when dumping all models from an app.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/dumpscript.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Right\n$ ./manage.py dumpscript appname > dumps/appname_all.py\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data with Loops in Django Dumpscript\nDESCRIPTION: This Python code snippet demonstrates how to generate test data for a Django model using a loop. It iterates 2000 times, creating a Poll object in each iteration, setting the question and publication date, and saving the object to the database.  This is designed to be used inside a dumpscript generated file to populate your database.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/dumpscript.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor i in xrange(2000):\n    poll = Poll()\n    poll.question = \"Question #%d\" % i\n    poll.pub_date = date(2001,01,01) + timedelta(days=i)\n    poll.save()\n```\n\n----------------------------------------\n\nTITLE: Reset DB command usage example\nDESCRIPTION: Example showing how to reset the Django database so that it contains no data and migrations can be run again. This will prompt for confirmation unless the `--noinput` flag is used.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/reset_db.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Reset the DB so that it contains no data and migrations can be run again\n$ ./manage.py reset_db mybucket\n```\n\n----------------------------------------\n\nTITLE: Reset DB with custom user/password example\nDESCRIPTION: Example showing how to reset the database using a different user and password than the one specified in settings.py.  This allows overriding the default database credentials for the reset operation.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/reset_db.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Use a different user and password than the one from settings.py\n$ ./manage.py reset_db --user db_root --password H4rd2Guess\n```\n\n----------------------------------------\n\nTITLE: Custom IPython arguments with django_extensions\nDESCRIPTION: This snippet demonstrates overriding the default IPython arguments, including specifying a custom notebook extension.  It's important to include the default django-extensions notebook extension to ensure auto-loading functionality works correctly.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nIPYTHON_ARGUMENTS = [\n    '--ext', 'django_extensions.management.notebook_extension',\n    '--ext', 'myproject.notebook_extension',\n    '--debug',\n]\n```\n\n----------------------------------------\n\nTITLE: Create Scripts Directory\nDESCRIPTION: Creates a 'scripts' directory in the project root next to manage.py. Also, create an __init__.py file so that the folder is picked up as a python package.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir scripts\n$ touch scripts/__init__.py\n```\n\n----------------------------------------\n\nTITLE: Generating a graph of app models (graph_models)\nDESCRIPTION: This code snippet demonstrates how to use the graph_models command from Django Extensions to generate a visual representation of the Django models in an application. The command generates a graphviz graph of the app models and saves it to myapp_models.png.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/README.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py graph_models -a -o myapp_models.png\n```\n\n----------------------------------------\n\nTITLE: Run Script with Arguments\nDESCRIPTION: Executes the specified python script with command-line arguments passed to the run() function. The --script-args argument is used to pass space-separated values.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py runscript delete_all_questions --script-args staleonly\n```\n\n----------------------------------------\n\nTITLE: Using HexValidator in Django Model (Python)\nDESCRIPTION: This code demonstrates how to use the HexValidator from django-extensions in a Django model. It validates that the public_key and private_key fields are valid hexadecimal strings with specified lengths.  The HexValidator ensures that the field contains only hexadecimal characters and meets the length criteria. Requires django and django-extensions.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/validators.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django_extensions.validators import HexValidator\nfrom django.conf import settings\nfrom django.db import models\n\nclass UserKeys(models.Model):\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n\n    public_key = models.CharField(max_length=64, validators=[HexValidator(length=64)])\n    private_key = models.CharField(max_length=128, validators=[HexValidator(length=128)])\n```\n\n----------------------------------------\n\nTITLE: Running print_settings with no arguments (Python)\nDESCRIPTION: Executes the `print_settings` command without any specific settings, displaying all active Django settings. This command is equivalent to running the command directly using `python manage.py print_settings`. No dependencies are explicitly required beyond a functional Django project setup.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/print_settings.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py print_settings\n```\n\n----------------------------------------\n\nTITLE: Print default database DSN using sqldsn in Django\nDESCRIPTION: This example demonstrates how to print the Data Source Name (DSN) for the default database configured in your Django settings. It utilizes the sqldsn management command provided by django-extensions. It assumes that Django and django-extensions are correctly installed and configured.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/sqldsn.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./manage.py sqldsn\n```\n\n----------------------------------------\n\nTITLE: Using AutoSlugField with custom slugify method in model\nDESCRIPTION: Demonstrates how to use AutoSlugField with a custom slugify function defined as a method within the model class. The `slugify_function` method replaces underscores with hyphens and converts the string to lowercase before creating the slug.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/field_extensions.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# models.py\n\nfrom django.db import models\n\nfrom django_extensions.db.fields import AutoSlugField\n\n\nclass MyModel(models.Model):\n\n    title = models.CharField(max_length=42)\n    slug = AutoSlugField(populate_from='title')\n\n    def slugify_function(self, content):\n        return content.replace('_', '-').lower()\n```\n\n----------------------------------------\n\nTITLE: Sync Data with Fixture\nDESCRIPTION: This command synchronizes the database with the data from the specified fixture file.  It adds missing data, updates different data, and deletes extra data from the database to match the fixture.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/syncdata.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py syncdata sample.json\n```\n\n----------------------------------------\n\nTITLE: Default Graph Models Settings\nDESCRIPTION: Defines default options for graph_models command in Django settings. Allows setting global configurations like including all applications or grouping models.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nGRAPH_MODELS = {\n  'all_applications': True,\n  'group_models': True,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Jobs Directory Structure (Django)\nDESCRIPTION: This command creates the directory structure for Django-extensions jobs inside a specified Django application. The directory structure includes folders for hourly, daily, weekly, monthly, and yearly scheduled jobs. This command needs the name of your Django application as an argument.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/jobs_scheduling.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ python manage.py create_jobs <django_application>\n```\n\n----------------------------------------\n\nTITLE: Adding custom permissions via signals in Django\nDESCRIPTION: This code snippet demonstrates how to hook into the update_permissions command using the post_command signal to add custom permissions (view and list) to all content types. It iterates through all content types and creates the specified permissions if they don't already exist. It imports necessary modules from django.db, django.contrib, and django_extensions.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/command_signals.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models.signals import post_syncdb\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.auth.models import Permission\nfrom django_extensions.management.signals import post_command\nfrom django_extensions.management.commands.update_permissions import Command as UpdatePermissionsCommand\n\ndef add_permissions(sender, **kwargs):\n  \"\"\"\n  Add view and list permissions to all content types.\n  \"\"\"\n  # for each of our content types\n  for content_type in ContentType.objects.all():\n\n    for action in ['view', 'list']:\n      # build our permission slug\n      codename = \"%s_%s\" % (action, content_type.model)\n\n      try:\n        Permission.objects.get(content_type=content_type, codename=codename)\n        # Already exists, ignore\n      except Permission.DoesNotExist:\n        # Doesn't exist, add it\n        Permission.objects.create(content_type=content_type,\n                      codename=codename,\n                      name=\"Can %s %s\" % (action, content_type.name))\n        print \"Added %s permission for %s\" % (action, content_type.name)\npost_command.connect(add_permissions, UpdatePermissionsCommand)\n```\n\n----------------------------------------\n\nTITLE: Run Script\nDESCRIPTION: Executes the specified python script using the django manage.py runscript command.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py runscript delete_all_questions\n```\n\n----------------------------------------\n\nTITLE: Limiting Autocomplete Search with get_related_filter\nDESCRIPTION: This code snippet demonstrates how to override the `get_related_filter` method in ForeignKeyAutocompleteAdmin to limit the autocomplete search results based on user permissions.  In this example, it restricts non-superusers from attaching attachments only to articles they own. It also warns about potential security vulnerabilities.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/admin_extensions.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass AttachmentAdmin(ForeignKeyAutocompleteAdmin):\n\n    ...\n\n    def get_related_filter(self, model, request):\n        user = request.user\n        if not issubclass(model, Article) or user.is_superuser():\n            return super(AttachmentAdmin, self).get_related_filter(\n                model, request\n            )\n        return Q(owner=user)\n```\n\n----------------------------------------\n\nTITLE: Custom Slugify Function in Django Model\nDESCRIPTION: This code snippet demonstrates how to customize the slugify function within a Django model that inherits from TitleSlugDescriptionModel.  It replaces underscores with hyphens and converts the title to lowercase. This requires importing models from django.db and TitleSlugDescriptionModel from django_extensions.db.models.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/model_extensions.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# models.py\n\nfrom django.db import models\n\nfrom django_extensions.db.models import TitleSlugDescriptionModel\n\n\nclass MyModel(TitleSlugDescriptionModel, models.Model):\n\n    def slugify_function(self, content):\n        \"\"\"\n        This function will be used to slugify\n        the title (default `populate_from` field)\n        \"\"\"\n        return content.replace('_', '-').lower()\n```\n\n----------------------------------------\n\nTITLE: Print DSN for a specific database in Django\nDESCRIPTION: This example illustrates how to print the Data Source Name (DSN) for a specific database, identified by its name. It utilizes the --database parameter in the sqldsn management command. You need to replace 'slave' with the actual name of the database you wish to target.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/sqldsn.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./manage.py sqldsn --database=slave\n```\n\n----------------------------------------\n\nTITLE: Saving Feature Database State - Django\nDESCRIPTION: Saves the database migration state after feature development. This is typically done before a code review to preserve the feature's specific migration state.  No dependencies beyond Django and django-extensions are required. The command uses the database connection defined in settings.py.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/managestate.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py managestate dump super-feature\n```\n\n----------------------------------------\n\nTITLE: Truncating SQL queries in shell_plus\nDESCRIPTION: This snippet demonstrates how to configure truncation of SQL queries printed by shell_plus. `SHELL_PLUS_PRINT_SQL_TRUNCATE` specifies the maximum number of characters to display, with `None` disabling truncation.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# print SQL queries in shell_plus\nSHELL_PLUS_PRINT_SQL_TRUNCATE = None\n```\n\n----------------------------------------\n\nTITLE: Show Field Class with list_model_info (Shell)\nDESCRIPTION: This command shows the class of each field in Django models using the `list_model_info` management command. It requires the `django-extensions` package to be installed. The output will list each model's fields along with their respective classes.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/list_model_info.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./manage.py list_model_info --field-class\n```\n\n----------------------------------------\n\nTITLE: Show Database Type with list_model_info (Shell)\nDESCRIPTION: This command displays the database type representation of each field in Django models using the `list_model_info` management command. It needs the `django-extensions` package. The output includes the database type for each field in the models.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/list_model_info.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./manage.py list_model_info --db-type\n```\n\n----------------------------------------\n\nTITLE: Configuring Pygments Formatter for Django shell_plus\nDESCRIPTION: This configuration specifies the Pygments formatter and its configuration options for printing SQL queries to the console during Django shell_plus sessions. This enables syntax highlighting and customization of the SQL output using Pygments. This is typically used to improve readability when outputting to a terminal.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Specify Pygments formatter and configuration options when printing sql queries to the console\nimport pygments.formatters\nSHELL_PLUS_PYGMENTS_FORMATTER = pygments.formatters.TerminalFormatter\nSHELL_PLUS_PYGMENTS_FORMATTER_KWARGS = {}\n```\n\n----------------------------------------\n\nTITLE: Configure Method Signatures in settings.py (Python)\nDESCRIPTION: This setting in `settings.py` configures the `list_model_info` command to show each method's signature by default. This eliminates the need to pass the `--signature` argument when running the command. Useful for making method signatures always visible.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/list_model_info.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nMODEL_INFO_SIGNATURE = True\n```\n\n----------------------------------------\n\nTITLE: Using signalcommand decorator in Django\nDESCRIPTION: This code snippet demonstrates how to use the signalcommand decorator provided by django-extensions to enable pre/post command signals for your own management commands.  It imports signalcommand from django_extensions.management.utils and applies it as a decorator to the handle method.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/command_signals.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django_extensions.management.utils import signalcommand\n\n  class Command(BaseCommand):\n\n    @signalcommand\n    def handle(self, *args, **kwargs):\n      ...\n      ...\n```\n\n----------------------------------------\n\nTITLE: Show Permissions (Basic)\nDESCRIPTION: This command lists all permissions for models in installed apps, excluding built-in Django apps. It requires a Django project to be configured.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/show_permissions.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py show_permissions\n```\n\n----------------------------------------\n\nTITLE: Preserving ModificationDateTimeField timestamp\nDESCRIPTION: Shows how to preserve the existing timestamp of a ModificationDateTimeField when saving a model instance by setting `update_modified=False`. This is useful when you want to prevent the field from being automatically updated on every save operation.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/field_extensions.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> example = MyTimeStampedModel.objects.get(pk=1)\n\n>>> print example.modified\ndatetime.datetime(2016, 3, 18, 10, 3, 39, 740349, tzinfo=<UTC>)\n\n>>> example.save(update_modified=False)\n\n>>> print example.modified\ndatetime.datetime(2016, 3, 18, 10, 3, 39, 740349, tzinfo=<UTC>)\n\n>>> example.save()\n\n>>> print example.modified\ndatetime.datetime(2016, 4, 8, 14, 25, 43, 123456, tzinfo=<UTC>)\n```\n\n----------------------------------------\n\nTITLE: Configure All Methods in settings.py (Python)\nDESCRIPTION: This setting configures the `list_model_info` command to show all model methods (including private methods and Django's default methods) by default. This eliminates the need to include the `--all-methods` argument when running the command. Add this to your `settings.py` file.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/list_model_info.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nMODEL_INFO_ALL_METHODS = True\n```\n\n----------------------------------------\n\nTITLE: Truncating SQL Queries in Django shell_plus\nDESCRIPTION: This configuration sets the maximum length of SQL queries printed to the console during Django shell_plus sessions. This prevents excessively long queries from cluttering the output. The default truncation length is 1000 characters.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Truncate sql queries to this number of characters (this is the default)\nSHELL_PLUS_PRINT_SQL_TRUNCATE = 1000\n```\n\n----------------------------------------\n\nTITLE: Show All Methods with list_model_info (Shell)\nDESCRIPTION: This command displays all methods, including private and default Django methods, for Django models using the `list_model_info` command. The `django-extensions` package is required. The output will include all methods defined on each model, even those that are normally hidden.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/list_model_info.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./manage.py list_model_info --all-methods\n```\n\n----------------------------------------\n\nTITLE: Run Django development server with cProfile and custom prof-path\nDESCRIPTION: This command starts the Django development server with cProfile enabled. The profiling data will be saved in the specified directory, allowing for organized profiling data management. `--use-cprofile` specifies the use of cProfile instead of the default hotshot profiler, and `--prof-path` specifies the directory to store profile data.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runprofileserver.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir /tmp/my-profile-data\n$ ./manage.py runprofileserver --use-cprofile --prof-path=/tmp/my-profile-data\n```\n\n----------------------------------------\n\nTITLE: Running print_settings with format option (Python)\nDESCRIPTION: Executes the `print_settings` command and specifies an output format (e.g., JSON). This requires having the appropriate libraries installed (e.g., PyYAML for YAML format). The output format is controlled using the `--format` option. Possible formats include json, yaml, pprint, text, and value.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/print_settings.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py print_settings --format=json\n$ python manage.py print_settings --format=yaml    # Requires PyYAML\n$ python manage.py print_settings --format=pprint\n$ python manage.py print_settings --format=text\n$ python manage.py print_settings --format=value\n```\n\n----------------------------------------\n\nTITLE: Running RunServerPlus with Specific SSL Certificate\nDESCRIPTION: This command starts the Django development server with SSL enabled, using a specific certificate file. It allows you to use existing certificates for HTTPS debugging.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runserver_plus.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n$ python manage.py runserver_plus --cert-file /tmp/cert.crt\n```\n\n----------------------------------------\n\nTITLE: Example Django Models\nDESCRIPTION: Defines example Django models (Author, Tag, Book, Borrow) with fields, verbose names, and meta options. These models demonstrate the structure for which the admin_generator will create admin interfaces.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/admin_generator.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.auth.models import User\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\nfrom isbn_field import ISBNField\n\n\nclass Author(models.Model):\n    first_name = models.CharField(max_length=30, verbose_name=_('First name'))\n    last_name = models.CharField(max_length=40, verbose_name=_('Last name'))\n\n    def __str__(self):\n        return '{} {}'.format(self.first_name, self.last_name)\n\n    class Meta:\n        verbose_name = _('Author')\n        verbose_name_plural = _('Authors')\n\n\nclass Tag(models.Model):\n    word = models.CharField(max_length=35, verbose_name=_('Word'))\n    slug = models.CharField(max_length=50, verbose_name=_('Slug'))\n\n    def __str__(self):\n        return self.word\n\n    class Meta:\n        verbose_name = _('Tag')\n        verbose_name_plural = _('Tags')\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=40, verbose_name=_('Title'))\n    cover = models.ImageField(upload_to='book-covers', verbose_name=_('Cover'), blank=True)\n    tags = models.ManyToManyField(Tag, verbose_name=_('Tags'), related_name='books')\n    authors = models.ManyToManyField(Author, verbose_name=_('Authors'), related_name='books')\n    publication_date = models.DateField(verbose_name=_('Publication date'))\n    isbn = ISBNField(verbose_name=_('ISBN code'))\n\n    def __str__(self):\n        return self.title\n\n    class Meta:\n        verbose_name = _('Book')\n        verbose_name_plural = _('Books')\n\n\nclass Borrow(models.Model):\n    user = models.OneToOneField(get_user_model(), verbose_name=_('Usuario'), on_delete=models.PROTECT)\n    borrow_date = models.DateField(verbose_name=_('Borrow date'))\n    returned_date = models.DateField(verbose_name=_('Returned date'), blank=True, null=True)\n    book = models.ForeignKey(Book, verbose_name=_('Book'), on_delete=models.PROTECT)\n\n    class Meta:\n        verbose_name = _('Borrow')\n        verbose_name_plural = _('Borrows')\n\n    def __str__(self):\n        return '{}_{}'.format(self.user, self.borrow_date)\n```\n\n----------------------------------------\n\nTITLE: Combined Options with list_model_info (Shell)\nDESCRIPTION: This command demonstrates combining multiple options with `list_model_info`. It displays all methods and their signatures for a specific model (`users.User`). Requires `django-extensions`. The command shows how to use multiple command line arguments at once.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/list_model_info.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./manage.py list_model_info --all --signature --model users.User\n```\n\n----------------------------------------\n\nTITLE: Start mail_debug with custom host and port\nDESCRIPTION: Starts the mail_debug server on a specified host and port. This overrides the default host and port, allowing the server to listen on a specific network address and port. Ensure that the Django settings EMAIL_HOST and EMAIL_PORT are updated accordingly.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/mail_debug.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py mail_debug 192.168.1.1:1234\n```\n\n----------------------------------------\n\nTITLE: Crontab Hourly Job Execution (Django)\nDESCRIPTION: This crontab entry schedules the execution of hourly jobs using the Django management command `runjobs`. It specifies the path to the Django project's `manage.py` file.  The `hourly` argument tells `runjobs` to only execute jobs within the hourly directory.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/jobs_scheduling.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n@hourly /path/to/my/project/manage.py runjobs hourly\n```\n\n----------------------------------------\n\nTITLE: Right Dumpscript Naming Example for single model\nDESCRIPTION: This command-line example shows a correct way to name the output file for a `dumpscript` command in Django when dumping a single model from an app.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/dumpscript.rst#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Right\n$ ./manage.py dumpscript appname.Somemodel > dumps/appname_somemodel.py\n```\n\n----------------------------------------\n\nTITLE: Show Permissions (Specific Apps/Models)\nDESCRIPTION: These commands show permissions for specific apps or models. The first command shows permissions for the 'blog' app, and the second for the 'Post' model within the 'blog' app. Requires a Django project with the specified apps and models.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/show_permissions.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py show_permissions blog\n```\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py show_permissions blog.Post\n```\n\n----------------------------------------\n\nTITLE: Create a PNG image with grouping\nDESCRIPTION: Command to create a PNG image file from Django models with application grouping enabled. Uses -g option to group by application.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models -a -g -o my_project_visualized.png\n```\n\n----------------------------------------\n\nTITLE: Print URI for the default database in Django\nDESCRIPTION: This example shows how to print the database connection URI for the default database. The -q option suppresses extra output, and the --style=uri option specifies the desired output style. This is useful when you need the connection string in URI format for other tools or configurations.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/sqldsn.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./manage.py sqldsn -q --style=uri\n```\n\n----------------------------------------\n\nTITLE: Crontab Weekly Job Execution (Django)\nDESCRIPTION: This crontab entry schedules the execution of weekly jobs using the Django management command `runjobs`. It specifies the path to the Django project's `manage.py` file. The `weekly` argument tells `runjobs` to only execute jobs within the weekly directory.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/jobs_scheduling.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n@weekly /path/to/my/project/manage.py runjobs weekly\n```\n\n----------------------------------------\n\nTITLE: Specifying App Labels in Settings\nDESCRIPTION: Example of how to specify a list of applications to be included in the graph using the `app_labels` key in the Django settings file.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nGRAPH_MODELS = {\n  'app_labels': [\"myapp1\", \"myapp2\", \"auth\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Create a graph for certain models\nDESCRIPTION: Command to create a graph including only certain models ('Foo' and 'Bar'). Uses -I option to include specific models.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models -a -I Foo,Bar -o my_project_subsystem.png\n```\n\n----------------------------------------\n\nTITLE: Running print_settings with specific settings (Python)\nDESCRIPTION: Executes the `print_settings` command, but only prints the values of the specified settings.  This allows for filtering of the output and only viewing specific settings. The settings are passed as arguments to the command.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/print_settings.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py print_settings DEBUG INSTALLED_APPS\n$ python manage.py print_settings DEBUG INSTALLED_APPS --format=pprint\n$ python manage.py print_settings INSTALLED_APPS --format=value\n```\n\n----------------------------------------\n\nTITLE: Delete All Questions Script\nDESCRIPTION: Python script to delete all questions from the polls.models.Question model. This script defines a `run()` function which fetches all Question objects and then deletes them.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# scripts/delete_all_questions.py\n\nfrom polls.models import Question\n\ndef run():\n    # Fetch all questions\n    questions = Question.objects.all()\n    # Delete questions\n    questions.delete()\n```\n\n----------------------------------------\n\nTITLE: Start mail_debug with custom port\nDESCRIPTION: Starts the mail_debug server on a specified port. This overrides the default port 1025, allowing the server to listen on a different port. Ensure that the Django settings EMAIL_PORT is updated accordingly.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/mail_debug.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py mail_debug 1026\n```\n\n----------------------------------------\n\nTITLE: Analyze KCacheGrind output\nDESCRIPTION: This command opens the generated profile data using the KCacheGrind tool for analysis. KCacheGrind provides a graphical interface to explore the profiling data, allowing developers to identify performance bottlenecks and optimize their code. The path to the profile data file (e.g., `root.12574391.592.prof`) is passed as an argument to `kcachegrind`.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runprofileserver.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kcachegrind /tmp/my-profile-data/root.12574391.592.prof\n```\n\n----------------------------------------\n\nTITLE: Filter by Model with list_model_info (Shell)\nDESCRIPTION: This command filters the output of `list_model_info` to only display information for a specific model, identified by its app label and model name (e.g., `users.User`). `django-extensions` must be installed. The command-line argument `--model` is used to specify the target model.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/list_model_info.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./manage.py list_model_info --model users.User\n```\n\n----------------------------------------\n\nTITLE: Deleting leftover migrations using django-extensions command\nDESCRIPTION: This command deletes leftover migrations from the first squashed migration found in the specified Django app. It requires django-extensions to be installed. It takes the app label as an argument.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/delete_squashed_migrations.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./manage.py delete_squashed_migrations myapp\n```\n\n----------------------------------------\n\nTITLE: Crontab Daily Job Execution (Django)\nDESCRIPTION: This crontab entry schedules the execution of daily jobs using the Django management command `runjobs`. It specifies the path to the Django project's `manage.py` file. The `daily` argument tells `runjobs` to only execute jobs within the daily directory.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/jobs_scheduling.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n@daily /path/to/my/project/manage.py runjobs daily\n```\n\n----------------------------------------\n\nTITLE: Dumping Migrations State to File - Django\nDESCRIPTION: Saves the current applied migrations from the database to a JSON file (default: managestate.json).  The state is saved under the 'default' key unless another key is provided as a positional argument. No dependencies beyond Django and django-extensions are required.  The command uses the database connection defined in settings.py.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/managestate.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py managestate dump\n```\n\n----------------------------------------\n\nTITLE: Running admin_generator command in Django\nDESCRIPTION: This command generates the Django admin classes for a specified app. Replace <your_app_name> with the actual name of your Django application. The generated code will be printed to standard output.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/admin_generator.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py admin_generator <your_app_name>\n```\n\n----------------------------------------\n\nTITLE: Disabling Model Loading in Django shell_plus\nDESCRIPTION: This configuration disables the loading of all models into the Django shell_plus environment. This is useful when you want to start with a clean environment and only load specific models as needed. Setting SHELL_PLUS_DONT_LOAD to ['*'] effectively prevents any automatic model loading.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Dont load any models\nSHELL_PLUS_DONT_LOAD = ['*']\n```\n\n----------------------------------------\n\nTITLE: Delete Stale Questions Script\nDESCRIPTION: Python script that deletes questions older than 100 days from the polls.models.Question model, optionally filtering by staleonly argument. The run() function receives command-line arguments via *args.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# scripts/delete_all_questions.py\nfrom datetime import timedelta\n\nfrom django.utils import timezone\n\nfrom polls.models import Question\n\ndef run(*args):\n    # Get all questions\n    questions = Question.objects.all()\n    if 'staleonly' in args:\n        # Only get questions more than 100 days old\n        questions = questions.filter(pub_date__lt=timezone.now() - timedelta(days=100))\n    # Delete questions\n    questions.delete()\n```\n\n----------------------------------------\n\nTITLE: Integrating validate_templates with tests\nDESCRIPTION: This example shows how to integrate the `validate_templates` command into a Django test case. It imports the necessary modules and calls the command within a test method. If the command fails to validate the templates, it will raise an exception, causing the test to fail.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/validate_templates.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom django.core.management import call_command\n\nclass MyTests(unittest.TestCase):\n    def test_validate_templates(self):\n        call_command(\"validate_templates\")\n        # This throws an error if it fails to validate\n```\n\n----------------------------------------\n\nTITLE: Importing Subclasses in Django shell_plus\nDESCRIPTION: This snippet demonstrates how to configure `shell_plus` to automatically import subclasses of a base class. The `SHELL_PLUS_SUBCLASSES_IMPORT` setting specifies the base class(es) to search for subclasses, while `SHELL_PLUS_SUBCLASSES_IMPORT_MODULES_BLACKLIST` allows excluding specific modules from the search.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Manager\nSHELL_PLUS_SUBCLASSES_IMPORT = [Manager]\n```\n\n----------------------------------------\n\nTITLE: Export Group Emails in LinkedIn Format - Command Line\nDESCRIPTION: Exports email addresses of users belonging to the 'Attendees' group in the 'linkedin' CSV format, which is suitable for pre-approving group members. The output is saved to 'pycon08.csv'.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/export_emails.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./manage.py export_emails -g Attendees -f linkedin pycon08.csv\n```\n\n----------------------------------------\n\nTITLE: Executing list_signals Command in Django\nDESCRIPTION: Executes the list_signals management command in a Django project to display all signals. This command provides a non-interactive view of all defined signals, grouped by model and signal type. It requires django-extensions to be installed.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/list_signals.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py list_signals\n```\n\n----------------------------------------\n\nTITLE: Show Permissions (Including Built-in Apps)\nDESCRIPTION: This command shows permissions for all models, including those in Django's built-in apps like 'admin' and 'auth'. Requires a Django project.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/show_permissions.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py show_permissions --all\n```\n\n----------------------------------------\n\nTITLE: Create .pgpass file for PostgreSQL in Django\nDESCRIPTION: This example demonstrates how to create a .pgpass file for PostgreSQL authentication. The -q option suppresses extra output, and the --style=pgpass option specifies the pgpass format. The output is redirected to a file named .pgpass, which PostgreSQL uses for passwordless authentication.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/sqldsn.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./manage.py sqldsn -q --style=pgpass > .pgpass\n```\n\n----------------------------------------\n\nTITLE: Run Script Continue on Error\nDESCRIPTION: Runs the specified python script and continues executing subsequent scripts even if errors occur, using the `-c` or `--continue-on-error` option.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py runscript delete_all_questions another_script --continue-on-error\n```\n\n----------------------------------------\n\nTITLE: Defining and Sorting Internal IPs in Django settings.py\nDESCRIPTION: This code snippet demonstrates how to define and sort internal IPs by subnet size in Django's settings.py file using the `InternalIPS` class from `django_extensions.utils.internal_ips`. The `sort_by_size=True` argument sorts the lookups to search the largest subnet first.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/utilities.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django_extensions.utils.internal_ips import InternalIPS\n\nINTERNAL_IPS = InternalIPS([\n    \"127.0.0.1\",\n    \"172.16.0.0/16\",\n], sort_by_size=True)\n```\n\n----------------------------------------\n\nTITLE: Running print_settings with wildcards (Python)\nDESCRIPTION: Executes the `print_settings` command, using shell-style wildcards to specify the settings to be printed. This enables the selection of settings based on patterns.  The wildcards are expanded by the shell before being passed to the command.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/print_settings.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py print_settings TIME*\n$ python manage.py print_settings *_DIRS STATIC*\n$ python manage.py print_settings INSTALLED_????\n```\n\n----------------------------------------\n\nTITLE: Saving Initial Database State - Django\nDESCRIPTION: Saves the initial database migration state of a branch, useful before starting new feature development. This allows you to quickly revert to the initial state of the branch. No dependencies beyond Django and django-extensions are required. The command uses the database connection defined in settings.py.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/managestate.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py managestate dump master\n```\n\n----------------------------------------\n\nTITLE: Verifying Django Extensions Installation\nDESCRIPTION: This snippet verifies that the django_extensions package is correctly installed and accessible in the Python environment. It imports the django_extensions module and prints its version. Success indicates that the package is installed correctly and available in the Python path.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/installation_instructions.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import django_extensions\n>>> django_extensions.VERSION\n(0, 8)\n```\n\n----------------------------------------\n\nTITLE: Using ipdb filter in Django Template\nDESCRIPTION: This code snippet demonstrates how to use the `ipdb` filter within a Django template. When the template is rendered, this filter will initiate an ipdb debugging session, allowing developers to inspect the context and variables at that point in the template rendering process.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/debugger_tags.rst#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% for object in object_list %}\n    {{ object|ipdb }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Listing URL patterns (show_urls)\nDESCRIPTION: This command produces a tab-separated list of `(url_pattern, view_function, name)` tuples for a project.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/README.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py show_urls\n```\n\n----------------------------------------\n\nTITLE: Loading Saved Database State - Django\nDESCRIPTION: Loads a previously saved database migration state.  This is useful for reverting migrations to a known state. No dependencies beyond Django and django-extensions are required.  The command uses the database connection defined in settings.py.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/managestate.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py managestate load master\n```\n\n----------------------------------------\n\nTITLE: Blacklisting Modules from shell_plus Subclass Import\nDESCRIPTION: This snippet shows how to blacklist certain modules from subclass imports in shell_plus using the `SHELL_PLUS_SUBCLASSES_IMPORT_MODULES_BLACKLIST` setting. Modules specified in this list will be excluded from the subclass search, preventing potential errors or unwanted imports.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nSHELL_PLUS_SUBCLASSES_IMPORT_MODULES_BLACKLIST = ['utils', 'somewhere.else']\n```\n\n----------------------------------------\n\nTITLE: Default Address Format Example\nDESCRIPTION: Shows the default format for the 'address' output format. Each email is on a new line with name and email.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/export_emails.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"First Last\" <user@host.com>;\n```\n\n----------------------------------------\n\nTITLE: Show Method Signatures with list_model_info (Shell)\nDESCRIPTION: This command shows the signatures of methods in Django models using `list_model_info`. Requires `django-extensions`. The output displays each model's methods along with their corresponding signatures, detailing the expected arguments and return types.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/list_model_info.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./manage.py list_model_info --signature\n```\n\n----------------------------------------\n\nTITLE: SQLite Engine List Declaration in Python\nDESCRIPTION: This code snippet defines a tuple containing the default SQLite database engines supported by the reset_db command.  This allows the command to correctly identify and reset SQLite databases. If a custom SQLite engine is used, it can be added via Django settings.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/reset_db.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_SQLITE_ENGINES = (\n    'django.db.backends.sqlite3',\n    'django.db.backends.spatialite',\n)\n```\n\n----------------------------------------\n\nTITLE: Create a graph with different layout direction\nDESCRIPTION: Command to create a graph with different layout direction. Uses --rankdir option, supported directions: \"TB\", \"LR\", \"BT\", \"RL\".\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models -a --rankdir BT -o my_project_sans_foo_bar.png\n```\n\n----------------------------------------\n\nTITLE: Run Script with Traceback\nDESCRIPTION: Runs the specified python script with traceback, using the `--traceback` option. This will print a traceback if an exception occurs.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py runscript delete_all_questions --traceback\n```\n\n----------------------------------------\n\nTITLE: Export All Emails - Command Line\nDESCRIPTION: Exports all user email addresses in the default 'address' format (e.g., \"First Last\" <my@addr.com>;). The output is redirected to a file named 'addresses.txt'.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/export_emails.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./manage.py export_emails > addresses.txt\n```\n\n----------------------------------------\n\nTITLE: Non-interactive deletion of squashed migrations\nDESCRIPTION: This command performs the same action as the previous one, but in non-interactive mode. This avoids prompts and assumes defaults for any questions that would normally be asked.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/delete_squashed_migrations.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./manage.py --noinput delete_squashed_migrations myapp\n```\n\n----------------------------------------\n\nTITLE: Update View with ModelUserFieldPermissionMixin - Django\nDESCRIPTION: Implements a Django UpdateView that incorporates the ModelUserFieldPermissionMixin. This mixin restricts access to the view to only users who are the 'author' of the MyModel instance. The model_permission_user_field attribute is set to 'author' to specify the field that represents the owner.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/permissions.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import UpdateView\n\nfrom django_extensions.auth.mixins import ModelUserFieldPermissionMixin\n\nfrom .models import MyModel\n\nclass MyModelUpdateView(ModelUserFieldPermissionMixin, UpdateView):\n   model = MyModel\n   template_name = 'mymodels/update.html'\n   model_permission_user_field = 'author'\n```\n\n----------------------------------------\n\nTITLE: Running print_settings and handling non-existent settings (Python)\nDESCRIPTION: Demonstrates the command's behavior when attempting to print a setting that does not exist. This involves using the `-f` option (or `--fail`), which causes the command to exit with an error if an invalid setting name is given.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/print_settings.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./manage.py print_settings -f INSTALLED_APPZ\n```\n\n----------------------------------------\n\nTITLE: Configure Field Class in settings.py (Python)\nDESCRIPTION: This setting configures the `list_model_info` command to show each field's class by default. This eliminates the need to specify `--field-class` on the command line each time. Setting must be defined in Django's `settings.py` file.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/list_model_info.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nMODEL_INFO_FIELD_CLASS = True\n```\n\n----------------------------------------\n\nTITLE: Installing pygraphviz\nDESCRIPTION: Command to install the pygraphviz library, which is needed for generating model graphs. Pygraphviz may require C extensions to be built.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install pygraphviz\n```\n\n----------------------------------------\n\nTITLE: Print all DSN styles for default database in Django\nDESCRIPTION: This snippet demonstrates how to output all supported DSN styles (e.g., uri, keyvalue) for the default database. The --style=all option tells the sqldsn command to print all available styles. It expects that the default database is configured in your Django project's settings.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/sqldsn.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./manage.py sqldsn --style=all\n```\n\n----------------------------------------\n\nTITLE: Crontab Monthly Job Execution (Django)\nDESCRIPTION: This crontab entry schedules the execution of monthly jobs using the Django management command `runjobs`. It specifies the path to the Django project's `manage.py` file. The `monthly` argument tells `runjobs` to only execute jobs within the monthly directory.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/jobs_scheduling.rst#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n@monthly /path/to/my/project/manage.py runjobs monthly\n```\n\n----------------------------------------\n\nTITLE: Dumping Migrations State to File with Custom Name - Django\nDESCRIPTION: Saves the current migrations state to a file under a specific key.  This allows for multiple migration states to be stored in the same file, keyed by name (e.g., feature branch name). No dependencies beyond Django and django-extensions are required.  The command uses the database connection defined in settings.py.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/managestate.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py managestate dump my_feature_branch\n```\n\n----------------------------------------\n\nTITLE: Configure DB Type in settings.py (Python)\nDESCRIPTION: This setting configures the `list_model_info` command to display each field's database type representation by default. This setting eliminates the need to use the `--db-type` argument each time the command is run. The configuration should be set within your project's `settings.py` file.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/list_model_info.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nMODEL_INFO_DB_TYPE = True\n```\n\n----------------------------------------\n\nTITLE: Sync Data, Skip Remove\nDESCRIPTION: This command synchronizes the database with the specified fixture, but it skips the removal of old records that are not present in the fixture. This is useful when you want to add or update data without deleting existing data.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/syncdata.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage syncdata sample.xml --skip-remove\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration for Werkzeug\nDESCRIPTION: This logging configuration enables Werkzeug to log to the console, which can be helpful for debugging.  It defines a console handler and configures the Werkzeug logger to use it.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runserver_plus.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nLOGGING = {\n    ...\n    'handlers': {\n        ...\n        'console': {\n            'level': 'DEBUG',\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n        ...\n        'werkzeug': {\n            'handlers': ['console'],\n            'level': 'DEBUG',\n            'propagate': True,\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Django Extensions from Git\nDESCRIPTION: This command installs django-extensions directly from the Git repository. The -e flag allows for editable installs, and the git+https URL specifies the repository location. This method is useful for tracking the development version and getting the latest fixes and features.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/installation_instructions.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -e git+https://github.com/django-extensions/django-extensions.git#egg=django-extensions\n```\n\n----------------------------------------\n\nTITLE: Django Settings: EXPORT_EMAILS_FULL_NAME_FUNC\nDESCRIPTION: Specifies a custom function to generate the full name of the user. It allows customization of how the full name is displayed in the output.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/export_emails.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nEXPORT_EMAILS_FULL_NAME_FUNC = None\n```\n\n----------------------------------------\n\nTITLE: Setting Notebook Arguments in Django shell_plus\nDESCRIPTION: This configuration allows passing additional arguments to the underlying Jupyter Notebook when using Django shell_plus.  This can be used to customize the Jupyter Notebook environment.  These are passed directly to the notebook application.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Additional Notebook arguments to use\nNOTEBOOK_ARGUMENTS = []\nNOTEBOOK_KERNEL_SPEC_NAMES = [\"python3\", \"python\"]\n```\n\n----------------------------------------\n\nTITLE: Show Permissions (Specific App Label)\nDESCRIPTION: This command shows permissions for only the app specified by the `--app-label` option. It expects a valid app label to be provided. Requires a Django project with the specified app.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/show_permissions.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py show_permissions --app-label blog\n```\n\n----------------------------------------\n\nTITLE: Create a dot file\nDESCRIPTION: Command to create a dot file containing the graph representation of Django models. This command includes all applications.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models -a > my_project.dot\n```\n\n----------------------------------------\n\nTITLE: Run Script without Traceback\nDESCRIPTION: Runs the specified python script without traceback, using the `--no-traceback` option. This will suppress tracebacks if an exception occurs.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py runscript delete_all_questions --no-traceback\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Parsing in Django shell_plus\nDESCRIPTION: This configuration specifies the `sqlparse` formatting options used when printing SQL queries to the console during Django shell_plus sessions. This allows developers to customize the appearance of the printed SQL, such as reindenting and truncating strings within the query.  These kwargs are passed directly to sqlparse.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Specify sqlparse configuration options when printing sql queries to the console\nSHELL_PLUS_SQLPARSE_FORMAT_KWARGS = dict(\n  reindent_aligned=True,\n  truncate_strings=500,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Django Extensions from source\nDESCRIPTION: This code snippet shows how to install Django Extensions from the source code, typically after cloning the git repository. It involves cloning the repository, navigating to the directory, and then installing using pip.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/README.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone git://github.com/django-extensions/django-extensions.git\n$ cd django-extensions\n$ pip install .\n```\n\n----------------------------------------\n\nTITLE: Installing Django Extensions from source\nDESCRIPTION: This snippet shows the steps to install Django Extensions directly from the source code repository. It clones the repository from GitHub, navigates into the cloned directory, and then installs the package using pip.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/index.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git://github.com/django-extensions/django-extensions.git\n$ cd django-extensions\n$ pip install .\n```\n\n----------------------------------------\n\nTITLE: Setting IPython Kernel Display Name in Django shell_plus\nDESCRIPTION: This configuration sets the display name for the IPython kernel when using Django shell_plus, typically in a Jupyter Notebook environment. This allows for easy identification of the kernel. The display name will appear in the Jupyter interface.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nIPYTHON_KERNEL_DISPLAY_NAME = \"Django Shell-Plus\"\n```\n\n----------------------------------------\n\nTITLE: Installing Django Extensions using pip\nDESCRIPTION: This code snippet shows how to install Django Extensions using pip, the Python package installer.  This command retrieves and installs the latest version of django-extensions from the Python Package Index (PyPI).\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/README.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install django-extensions\n```\n\n----------------------------------------\n\nTITLE: Running Tests (Bash)\nDESCRIPTION: This snippet demonstrates how to run tests using pytest, manage.py, or make, targeting a specific Python and Django version installed in the virtual environment.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(venv) $ pytest # `python manage.py test` or `make test` also work\n```\n\n----------------------------------------\n\nTITLE: Wrong Dumpscript Naming Example\nDESCRIPTION: This command-line example shows an incorrect way to name the output file for a `dumpscript` command in Django. Naming the output file the same as the appname can lead to import errors.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/dumpscript.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Wrong\n$ ./manage.py dumpscript appname > dumps/appname.py\n```\n\n----------------------------------------\n\nTITLE: Optional Settings Configuration for sync_s3 in Django\nDESCRIPTION: This snippet shows optional configurations for sync_s3 directly from django settings file. These settings configure the S3 host, default ACL, a prefix for the S3 path, a list of files or directories to filter, the CloudFront distribution, and a custom extension for gzipped files. It is helpful for customizing how files are uploaded and served from S3 or a compatible provider.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/sync_s3.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\nAWS_S3_HOST = 'cs.example.com'\nAWS_DEFAULT_ACL = 'private'\nSYNC_S3_PREFIX = 'some_prefix'\nFILTER_LIST = 'dir1, dir2'\nAWS_CLOUDFRONT_DISTRIBUTION = 'E27LVI50CSW06W'\nSYNC_S3_RENAME_GZIP_EXT = '.gz'\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: This snippet executes tests using ruff and tox to ensure code quality and compatibility. The --recreate flag in tox ensures a clean testing environment.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/creating_release.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ruff check\n$ ruff format --check\n$ tox --recreate\n```\n\n----------------------------------------\n\nTITLE: App-Based Styling JSON Example\nDESCRIPTION: Example JSON configuration file for styling models based on their app.  Uses the `bg` property to set background colors. Wildcards allowed for app labels (e.g., `django.*`).\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app1\": {\"bg\": \"#341b56\"},\n  \"app2\": {\"bg\": \"#1b3956\"},\n  \"django.*\": {\"bg\": \"#561b4c\"},\n  \"django.contrib.auth\": {\"bg\": \"#c41e3a\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Create a PNG with per-app styling\nDESCRIPTION: Command to generate a PNG image with per-app styling defined in a JSON file.  Uses the --app-style argument.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models -a --app-style path/to/style.json -o my_styled_project.png\n```\n\n----------------------------------------\n\nTITLE: Setting update_modified attribute directly\nDESCRIPTION: Demonstrates setting the `update_modified` attribute directly on the model instance before saving. This approach is helpful if you're not using TimeStampedModel or are within a migration context where direct field updates are needed.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/field_extensions.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> example = MyCustomModel.objects.get(pk=1)\n\n>>> print example.modified\ndatetime.datetime(2016, 3, 18, 10, 3, 39, 740349, tzinfo=<UTC>)\n\n>>> example.update_modified=False\n\n>>> example.save()\n\n>>> print example.modified\ndatetime.datetime(2016, 3, 18, 10, 3, 39, 740349, tzinfo=<UTC>)\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependency\nDESCRIPTION: This snippet installs the 'build' package using pip. This package is required to build the distribution packages.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/creating_release.txt#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install build\n```\n\n----------------------------------------\n\nTITLE: Editing Version Numbers\nDESCRIPTION: This snippet shows how to open the __init__.py file and the conf.py file to update the version numbers. This is a crucial step to ensure the release reflects the correct version.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/creating_release.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vi django_extensions/__init__.py              (1 occurance)\n```\n\n----------------------------------------\n\nTITLE: Create a dot file for specific apps\nDESCRIPTION: Command to create a dot file for specific applications ('foo' and 'bar') in the Django project.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models foo bar > my_project.dot\n```\n\n----------------------------------------\n\nTITLE: Configure Model in settings.py (Python)\nDESCRIPTION: This setting configures the `list_model_info` command to only output information for a single model, specified by its app label and model name (e.g., 'users.User'). This eliminates the need to pass the `--model` argument when running the command. Should be placed in the `settings.py` file.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/list_model_info.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nMODEL_INFO_MODEL = 'users.User'\n```\n\n----------------------------------------\n\nTITLE: Preparing Release Tarballs\nDESCRIPTION: This snippet uses the 'build' package to create the distribution packages (tarballs) for the release.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/creating_release.txt#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m build\n```\n\n----------------------------------------\n\nTITLE: Django Settings for Custom DB Engines\nDESCRIPTION: These examples demonstrate how to override the default database engines used by `reset_db`. This allows the command to work with custom or non-standard database engine configurations. You need to specify the full engine path as a string in the list.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/reset_db.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\nDJANGO_EXTENSIONS_RESET_DB_SQLITE_ENGINES = ['your_custom_sqlite_engine']\nDJANGO_EXTENSIONS_RESET_DB_MYSQL_ENGINES = ['your_custom_mysql_engine']\nDJANGO_EXTENSIONS_RESET_DB_POSTGRESQL_ENGINES = ['your_custom_postgres_engine']\n```\n\n----------------------------------------\n\nTITLE: Defining Internal IPs in Django settings.py\nDESCRIPTION: This code snippet demonstrates how to define internal IPs in Django's settings.py file using the `InternalIPS` class from `django_extensions.utils`.  It initializes `INTERNAL_IPS` with a list of IP addresses and a CIDR block.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/utilities.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django_extensions.utils import InternalIPS\n\nINTERNAL_IPS = InternalIPS([\n    \"127.0.0.1\",\n    \"172.16.0.0/16\",\n])\n```\n\n----------------------------------------\n\nTITLE: Setting SHELL_PLUS_MODEL_IMPORTS_RESOLVER in Django\nDESCRIPTION: This configuration is used to prevent inaccessibility of models with conflicting names.  It specifies the collision resolver class, with a full path to the class. For example, setting SHELL_PLUS_MODEL_IMPORTS_RESOLVER to 'django_extensions.collision_resolvers.FullPathCR' uses the FullPathCR collision resolver.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nSHELL_PLUS_MODEL_IMPORTS_RESOLVER = 'django_extensions.collision_resolvers.FullPathCR'\n```\n\n----------------------------------------\n\nTITLE: Install pyOpenSSL\nDESCRIPTION: This command installs the pyOpenSSL library, which is required to use SSL with runserver_plus.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runserver_plus.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n$ pip install pyOpenSSL\n```\n\n----------------------------------------\n\nTITLE: Uploading Release to PyPI\nDESCRIPTION: This snippet uploads the distribution packages to PyPI using twine.  The -i and -s flags specify the key-identity and signature respectively.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/creating_release.txt#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ twine upload -i key-identity -s dist/*\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Migration State - Django\nDESCRIPTION: Example of the JSON structure used to store migration states.  It contains a dictionary where keys represent the app name, and values are the latest applied migration. It also includes an 'updated_at' timestamp.  This snippet shows the typical structure of the `managestate.json` file after a `dump` operation.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/managestate.rst#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default\": {\n    \"admin\": \"0003_logentry_add_action_flag_choices\",\n    \"auth\": \"0012_alter_user_first_name_max_length\",\n    \"contenttypes\": \"0002_remove_content_type_name\",\n    \"sessions\": \"0001_initial\",\n    \"sites\": \"0002_alter_domain_unique\",\n    \"myapp\": \"zero\"\n  },\n  \"updated_at\": \"2021-06-27 10:42:50.364070\"\n}\n```\n\n----------------------------------------\n\nTITLE: Export Emails in Google CSV Format - Command Line\nDESCRIPTION: Exports email addresses in the 'google' CSV format, which is compatible with Google services like Gmail and Google Docs.  The output is saved to 'google.csv'.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/export_emails.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./manage.py export_emails --format=google google.csv\n```\n\n----------------------------------------\n\nTITLE: Bumping Version Number\nDESCRIPTION: This snippet shows how to bump the version number in the __init__.py file to a new in-development pre-release version. This prepares the repository for future development.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/creating_release.txt#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ vi django_extensions/__init__.py\n$ git commit -m 'bumped version number' django_extensions/__init__.py\n```\n\n----------------------------------------\n\nTITLE: Run Script with NONE Directory Policy\nDESCRIPTION: Runs the specified python script with the NONE directory policy using the --dir-policy option.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ python ../manage.py runscript first_script second_script --dir-policy none\n```\n\n----------------------------------------\n\nTITLE: Create a graph with colored edges\nDESCRIPTION: Command to create a graph with colored edges for relations with on_delete settings. Uses --color-code-deletions option.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models -a --color-code-deletions -o my_project_colored.png\n```\n\n----------------------------------------\n\nTITLE: Validating Templates (validate_templates)\nDESCRIPTION: This command checks templates for rendering errors.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/README.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py validate_templates\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub\nDESCRIPTION: This snippet pushes the changes, including the tag, to the GitHub repository.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/creating_release.txt#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ git push --tags\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Run Script with EACH Directory Policy\nDESCRIPTION: Runs the specified python script with the EACH directory policy using the --dir-policy option.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ python ../manage.py runscript first_script second_script --dir-policy each\n```\n\n----------------------------------------\n\nTITLE: Create a graph with different edges ordering\nDESCRIPTION: Command to create a graph with different edges ordering. Uses --ordering option, supported orders: \"in\", \"out\".\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models -a --ordering in -o my_project_sans_foo_bar.png\n```\n\n----------------------------------------\n\nTITLE: Setting RUNSERVERPLUS_POLLER_RELOADER_INTERVAL\nDESCRIPTION: This setting allows you to increase the poll interval for auto-reloading when using stat polling. This reduces CPU load at the cost of slower file change detection.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runserver_plus.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nRUNSERVERPLUS_POLLER_RELOADER_INTERVAL = 5\n```\n\n----------------------------------------\n\nTITLE: Cloning Django Extensions Repository\nDESCRIPTION: This snippet clones the django-extensions repository from GitHub and navigates into the newly created directory. It is the first step in creating a new release.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/creating_release.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:django-extensions/django-extensions.git\n$ cd django-extensions\n```\n\n----------------------------------------\n\nTITLE: Invalid Django Template Syntax Example\nDESCRIPTION: This example demonstrates invalid Django template syntax that will be caught by the `validate_templates` command.  It attempts to use a non-existent tag `foobar`.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/validate_templates.rst#_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% foobar %}\n\n{% comment %}\nThis throws this error:\nTemplateSyntaxError Invalid block tag on line 1: 'foobar'. Did you forget to register or load this tag?\n{% endcomment %}\n```\n\n----------------------------------------\n\nTITLE: MySQL Engine List Declaration in Python\nDESCRIPTION: This snippet defines a tuple containing the default MySQL database engines supported by the reset_db command. This is used to determine how to connect to and reset MySQL databases.  Custom MySQL engines can be added via Django settings.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/reset_db.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_MYSQL_ENGINES = (\n    'django.db.backends.mysql',\n    'django.contrib.gis.db.backends.mysql',\n    'mysql.connector.django',\n)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Engine List Declaration in Python\nDESCRIPTION: This code snippet defines a tuple containing the default PostgreSQL database engines supported by the reset_db command. This allows the command to correctly identify and reset PostgreSQL databases. If using a custom PostgreSQL engine, it can be specified via Django settings.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/reset_db.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_POSTGRESQL_ENGINES = (\n    'django.db.backends.postgresql',\n    'django.db.backends.postgresql_psycopg2',\n    'django.db.backends.postgis',\n    'django.contrib.gis.db.backends.postgis',\n    'psqlextra.backend',\n    'django_zero_downtime_migrations.backends.postgres',\n    'django_zero_downtime_migrations.backends.postgis',\n)\n```\n\n----------------------------------------\n\nTITLE: Committing Version Changes\nDESCRIPTION: This snippet commits the changes made to the version numbers in the __init__.py and conf.py files. The commit message indicates the version being released.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/creating_release.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -m v0.4.1 django_extensions/__init__.py docs/conf.py\n```\n\n----------------------------------------\n\nTITLE: Removing Build Directory\nDESCRIPTION: This snippet removes the build and dist directories, if they exist, to ensure a clean build process.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/creating_release.txt#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -r build dist\n```\n\n----------------------------------------\n\nTITLE: Disabling SQL Query Truncation in Django shell_plus\nDESCRIPTION: This configuration disables the truncation of SQL queries printed to the console during Django shell_plus sessions. This allows developers to view the full SQL queries without any limitations. Setting SHELL_PLUS_PRINT_SQL_TRUNCATE to None will prevent truncation.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# To disable truncation of sql queries use\nSHELL_PLUS_PRINT_SQL_TRUNCATE = None\n```\n\n----------------------------------------\n\nTITLE: Django Settings: EXPORT_EMAILS_FIELDS\nDESCRIPTION: Specifies which fields are selected from the database when querying users for export. Useful in conjunction with `EXPORT_EMAILS_FULL_NAME_FUNC`.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/export_emails.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nEXPORT_EMAILS_FIELDS = ['last_name', 'first_name', 'username', 'email']\n```\n\n----------------------------------------\n\nTITLE: Tagging the Release\nDESCRIPTION: This snippet creates a git tag for the release. The tag name should match the version number being released.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/creating_release.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git tag 0.4.1\n```\n\n----------------------------------------\n\nTITLE: Explicit library selection\nDESCRIPTION: Commands to generate a PNG image with explicit selection of pygraphviz or pydot library. Uses --pygraphviz or --pydot argument.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models --pygraphviz -a -g -o my_project_visualized.png\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models --pydot -a -g -o my_project_visualized.png\n```\n\n----------------------------------------\n\nTITLE: Loading Feature Database State for Improvements - Django\nDESCRIPTION: Loads a feature's database state, allowing continued development or bug fixing on a specific feature branch's migration state.  No dependencies beyond Django and django-extensions are required. The command uses the database connection defined in settings.py.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/managestate.rst#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py managestate load super-feature\n```\n\n----------------------------------------\n\nTITLE: Django Settings: EXPORT_EMAILS_ORDER_BY\nDESCRIPTION: Specifies the fields used to order the user query.  This affects the order in which emails are exported.  The default values are shown.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/export_emails.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nEXPORT_EMAILS_ORDER_BY = ['last_name', 'first_name', 'username', 'email']\n```\n\n----------------------------------------\n\nTITLE: Loading debugger_tags in Django Template\nDESCRIPTION: This code snippet shows how to load the `debugger_tags` templatetags in a Django template. This is a prerequisite for using the debugger filters within the template.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/debugger_tags.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% load debugger_tags %}\n```\n\n----------------------------------------\n\nTITLE: Install aiosmtpd for mail_debug\nDESCRIPTION: Installs the aiosmtpd package, which is required for the mail_debug command to function. This package provides the necessary components for running a local SMTP server that echoes email contents.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/mail_debug.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install aiosmtpd\n```\n\n----------------------------------------\n\nTITLE: Run Script with ROOT Directory Policy\nDESCRIPTION: Runs the specified python script with the ROOT directory policy using the --dir-policy option.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ python ../manage.py runscript first_script second_script --dir-policy root\n```\n\n----------------------------------------\n\nTITLE: Displaying help for print_settings (Python)\nDESCRIPTION: Displays the built-in help message for the `print_settings` command. The help message provides information about the available command-line options and arguments.  This command outputs usage instructions to the console.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/print_settings.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py print_settings --help\n```\n\n----------------------------------------\n\nTITLE: Running the enhanced Django shell (shell_plus)\nDESCRIPTION: This command runs the enhanced django shell.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/README.rst#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py shell_plus\n```\n\n----------------------------------------\n\nTITLE: Running the enhanced Django runserver (runserver_plus)\nDESCRIPTION: This command runs the enhanced django runserver, requires Werkzeug install.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/README.rst#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py runserver_plus\n```\n\n----------------------------------------\n\nTITLE: Run Script Setting Execution Directory\nDESCRIPTION: Runs the specified python script setting the execution directory using the --chdir option.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ python ../manage.py runscript first_script second_script --chdir /django_project_dir/second_app\n```\n\n----------------------------------------\n\nTITLE: Create a graph with normal arrow shape\nDESCRIPTION: Command to create a graph with 'normal' arrow shape for relations. Uses --arrow-shape option.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models -a --arrow-shape normal -o my_project_sans_foo_bar.png\n```\n\n----------------------------------------\n\nTITLE: Deleting specific squashed migration\nDESCRIPTION: This command allows specifying the exact squashed migration file to clean up. It requires knowing the name of the squashed migration file.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/delete_squashed_migrations.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./manage.py delete_squashed_migrations myapp 0001_squashed\n```\n\n----------------------------------------\n\nTITLE: Sync Data with Full Path\nDESCRIPTION: This command synchronizes the database with a fixture file specified by its full path. This allows you to load data from fixtures located outside of the default fixture directories.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/syncdata.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage syncdata /var/fixtures/sample.json\n```\n\n----------------------------------------\n\nTITLE: Create a graph excluding models\nDESCRIPTION: Command to create a graph excluding certain models ('Foo' and 'Bar'). Uses -X option to exclude specific models.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models -a -X Foo,Bar -o my_project_sans_foo_bar.png\n```\n\n----------------------------------------\n\nTITLE: Generated Django Admin Classes\nDESCRIPTION: Example of generated Django admin classes for models (Author, Tag, Book, Borrow). Each class inherits from admin.ModelAdmin and defines list_display, list_filter, and raw_id_fields to customize the admin interface.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/admin_generator.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding: utf-8 -*-\nfrom django.contrib import admin\nfrom .models import Author, Tag, Book, Borrow\n\n\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    list_display = ('id', 'first_name', 'last_name')\n\n\n@admin.register(Tag)\nclass TagAdmin(admin.ModelAdmin):\n    list_display = ('id', 'word', 'slug')\n    search_fields = ('slug',)\n\n\n@admin.register(Book)\nclass BookAdmin(admin.ModelAdmin):\n    list_display = ('id', 'title', 'cover', 'publication_date', 'isbn')\n    list_filter = ('publication_date',)\n    raw_id_fields = ('tags', 'authors')\n\n\n@admin.register(Borrow)\nclass BorrowAdmin(admin.ModelAdmin):\n    list_display = ('id', 'user', 'borrow_date', 'returned_date', 'book')\n    list_filter = ('user', 'borrow_date', 'returned_date', 'book')\n```\n\n----------------------------------------\n\nTITLE: Run Django development server and generate KCacheGrind compatible output\nDESCRIPTION: This command runs the Django development server and configures it to save profiling data in a format compatible with KCacheGrind. The `--kcachegrind` flag ensures the output is in the correct format for analysis using KCacheGrind, a visualization tool for profiling data. `--prof-path` specifies the directory to store the generated profile data.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runprofileserver.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir /tmp/my-profile-data\n$ ./manage.py runprofileserver --kcachegrind --prof-path=/tmp/my-profile-data\n```\n\n----------------------------------------\n\nTITLE: Create a graph with pattern matching\nDESCRIPTION: Command to create a graph including models matching a given pattern and excluding some of them.  Uses -I for inclusion and -X for exclusion.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models -a -I Product* -X *Meta -o my_project_products_sans_meta.png\n```\n\n----------------------------------------\n\nTITLE: Create Script File\nDESCRIPTION: Creates a python file within the scripts directory which implements a run() function.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runscript.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ touch scripts/delete_all_questions.py\n```\n\n----------------------------------------\n\nTITLE: Running Tests Against All Versions (Bash)\nDESCRIPTION: This snippet shows how to run tests against all supported Python and Django versions using tox. It includes installing tox and running the tox command.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# install dependency\n(venv) $ pip install tox\n# run tests\n(venv) $ tox\n```\n\n----------------------------------------\n\nTITLE: Running admin_generator command with an app name\nDESCRIPTION: An example of running the admin_generator command with the app name 'brody'. This will generate the admin classes for the 'brody' application based on its models.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/admin_generator.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py admin_generator brody\n```\n\n----------------------------------------\n\nTITLE: Create a graph hiding edge labels\nDESCRIPTION: Command to create a graph without showing its edges' labels. Uses --hide-edge-labels option.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/graph_models.rst#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py graph_models -a --hide-edge-labels -o my_project_sans_foo_bar.png\n```\n\n----------------------------------------\n\nTITLE: Example subclasses loaded by shell_plus\nDESCRIPTION: This snippet shows an example of subclasses that are automatically imported by shell_plus when the `SHELL_PLUS_SUBCLASSES_IMPORT` setting is configured.  Note that `django.db.models.Manager` itself is not loaded.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/shell_plus.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Shell Plus Subclasses Imports\nfrom utils.managers import AbstractManager\nfrom myapp.managers import MyCustomManager\nfrom somewhere.else import MyOtherManager\n# django.db.models.Manager is not loaded because only project classes are.\n```\n\n----------------------------------------\n\nTITLE: Setting RUNSERVERPLUS_SERVER_ADDRESS_PORT\nDESCRIPTION: This setting allows you to configure the address and port the development server binds to.  It's useful for defaulting to a specific address and port without needing to specify it on the command line each time.\nSOURCE: https://github.com/django-extensions/django-extensions/blob/main/docs/runserver_plus.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nRUNSERVERPLUS_SERVER_ADDRESS_PORT = '0.0.0.0:8000'\n```"
  }
]