[
  {
    "owner": "twelve-factor",
    "repo": "twelve-factor",
    "content": "TITLE: RabbitMQ NACK Example in Graceful Process Shutdown\nDESCRIPTION: An example showing how to return a job to the queue using NACK in RabbitMQ during graceful process shutdown.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/content/disposability.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nNACK\n```\n\n----------------------------------------\n\nTITLE: Stdout Event Stream Example\nDESCRIPTION: Example showing how processes should write event streams to stdout without buffering. This is a fundamental concept in twelve-factor app logging where each process generates its own unbuffered event stream.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/content/logs.md#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nstdout\n```\n\n----------------------------------------\n\nTITLE: Executing Build Commands for Dependency Management in Various Languages\nDESCRIPTION: Examples of build commands used to manage dependencies in different programming languages. Ruby/Bundler uses 'bundle install', while Clojure/Leiningen uses 'lein deps'.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/content/dependencies.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Dependency Isolation in Ruby using Bundler\nDESCRIPTION: Example of using Bundle Exec for dependency isolation in Ruby applications, ensuring that the execution environment uses only the declared dependencies.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/content/dependencies.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbundle exec\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Django and Rails\nDESCRIPTION: Examples of running database migrations in Django and Rails frameworks. These are typical administrative tasks that should be executed in the same environment as the application's regular processes.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/content/admin-processes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmanage.py migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\nrake db:migrate\n```\n\n----------------------------------------\n\nTITLE: Executing Python Admin Tasks with Virtualenv\nDESCRIPTION: Example showing how to invoke Python admin tasks using the vendored Python interpreter from Virtualenv. This ensures the same environment is used for both web processes and administrative tasks.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/content/admin-processes.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/python\n```\n\n----------------------------------------\n\nTITLE: Executing a Python Script as a Process\nDESCRIPTION: An example of running a simple Python script as a process from the command line, which represents the simplest case of the processes factor.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/content/processes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython my_script.py\n```\n\n----------------------------------------\n\nTITLE: Starting Web Processes with Dependency Isolation in Ruby\nDESCRIPTION: Example of starting a Ruby web process with proper dependency isolation using Bundler. Administrative tasks should use the same isolation technique for consistency.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/content/admin-processes.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec thin start\n```\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec rake db:migrate\n```\n\n----------------------------------------\n\nTITLE: Executing One-Time Scripts in PHP Applications\nDESCRIPTION: Example of running a one-time PHP script for administrative purposes. This represents a maintenance task that should be executed with the same environment configuration as the main application.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/content/admin-processes.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp scripts/fix_bad_records.php\n```\n\n----------------------------------------\n\nTITLE: System Tool Examples to Avoid Direct Reliance On\nDESCRIPTION: Examples of system tools that twelve-factor apps should not directly rely on but should vendor into the application if needed.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/content/dependencies.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nImageMagick\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Tool Example to Avoid Direct Reliance On\nDESCRIPTION: Example of a common HTTP request tool that should be vendored into the application rather than relying on its system-wide installation.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/content/dependencies.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Twelve-Factor Governance\nDESCRIPTION: Defines the complete governance structure including roles, responsibilities, and processes for managing the twelve-factor manifesto project. Includes sections on membership types, change management, major releases, brand management, and code of conduct implementation.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/GOVERNANCE.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Twelve-Factor Governance\n\nThis document defines the governance structure for the twelve-factor manifesto\nmaintained at [https://12factor.net](https://12factor.net). This project is\ncommitted to building an open, inclusive, productive and self-governing open\nsource community. The guidelines herein describe how the twelve-factor\ncommunity should work together to achieve this goal.\n\n## Membership\n\nA member of the project is a person who has contributed to twelve-factor via\nsource code, documentation, pull requests, issues, or discussions. A member may\nadditionally have one of the roles listed below. Roles are tied to individuals,\nnot companies. Therefore a person leaving a role from a company cannot transfer\nthe role to someone else in that company.\n```\n\n----------------------------------------\n\nTITLE: Cloning Twelve-Factor Repository\nDESCRIPTION: Commands for cloning the twelve-factor repository from GitHub and navigating to the project directory. Specifically targets the 'next' branch for development.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone -b next https://github.com/your-username/twelve-factor.git\ncd twelve-factor\n```\n\n----------------------------------------\n\nTITLE: Creating Development Branch\nDESCRIPTION: Command for creating a new branch for development work in the twelve-factor project repository.\nSOURCE: https://github.com/twelve-factor/twelve-factor/blob/next/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b your-branch-name\n```"
  }
]