[
  {
    "owner": "pymodaq",
    "repo": "pymodaq.git",
    "content": "TITLE: Checking Value Reached with Units in DAQ_Move (Python)\nDESCRIPTION: Enhanced version of the value reached check that includes unit compatibility, available in PyMoDAQ >= 4.4.0. This version supports different units for current value, target value, and epsilon.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif not (self._current_value - self._target_value).abs().value(self.axis_unit) < self.epsilon:\n    # keep trying to reach the value\n```\n\n----------------------------------------\n\nTITLE: Defining Hardware Settings for PyMoDAQ Plugin (Python)\nDESCRIPTION: Example of defining hardware settings as a list of dictionaries, which will be displayed as a tree structure in the PyMoDAQ UI. This snippet shows settings for an Andor CCD camera plugin.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[{'title': 'Dll library:', 'name': 'andor_lib', 'type': 'browsepath', 'value': libpath},\n {'title': 'Camera Settings:', 'name': 'camera_settings', 'type': 'group', 'expanded': True, 'children': [\n     {'title': 'Camera SN:', 'name': 'camera_serialnumber', 'type': 'int', 'value': 0, 'readonly': True},\n     {'title': 'Camera Model:', 'name': 'camera_model', 'type': 'str', 'value': '', 'readonly': True},\n     {'title': 'Readout Modes:', 'name': 'readout', 'type': 'list', 'values': ['FullVertBinning','Imaging'], 'value': 'FullVertBinning'},\n     {'title': 'Readout Settings:', 'name': 'readout_settings', 'type': 'group', 'children':[\n         {'title': 'single Track Settings:', 'name': 'st_settings', 'type': 'group', 'visible': False, 'children':[\n             {'title': 'Center pixel:', 'name': 'st_center', 'type': 'int', 'value': 1 , 'default':1, 'min':1},\n             {'title': 'Height:', 'name': 'st_height', 'type': 'int', 'value': 1 , 'default':1, 'min':1},\n             ]},]}]}]\n```\n\n----------------------------------------\n\nTITLE: Modifying UI Settings from PyMoDAQ Plugin\nDESCRIPTION: Code examples showing how to modify the settings tree of the UI from within a PyMoDAQ plugin class. Demonstrates updating both main settings and hardware-specific settings.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nself.emit_status(ThreadCommand('update_main_settings', [['wait_time'], 10, 'value']))\n```\n\nLANGUAGE: python\nCODE:\n```\nself.emit_status(ThreadCommand('update_settings', [['wait_time'], 10, 'value']))\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Axis Objects in Python\nDESCRIPTION: Shows how to create an Axis object, which represents a data axis with units and scaling information. Demonstrates key properties and methods of the Axis object.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/data_objects.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq_data.data import Axis\naxis = Axis('myaxis', units='seconds', data=np.array([3,7,11,15]), index=0)\nprint(axis)\n\nprint(axis.data)\nprint(axis.offset)\nprint(axis.scaling)\nprint(axis.size)\n\nprint(axis.get_data())\nprint(axis.mean())\nprint(axis.find_index(11.0))\nprint(axis.iaxis[2:].get_data())\n```\n\n----------------------------------------\n\nTITLE: Implementing commit_settings Method for PyMoDAQ Plugin (Python)\nDESCRIPTION: Example implementation of the commit_settings method in a PyMoDAQ plugin class. This method handles parameter changes made in the UI and applies them to the hardware.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef commit_settings(self,param):\n    \"\"\"\n        | Activate parameters changes on the hardware from parameter's name.\n    \"\"\"\n    try:\n        if param.name()=='set_point':\n            self.controller.SetTemperature(param.value())\n\n        elif param.name() == 'readout' or param.name() in custom_parameter_tree.iter_children(self.settings.child('camera_settings', 'readout_settings')):\n            self.update_read_mode()\n\n        elif param.name()=='exposure':\n```\n\n----------------------------------------\n\nTITLE: Creating and Using DataBase Objects in Python\nDESCRIPTION: Demonstrates how to create a DataBase object with multiple channels of data, and shows basic properties and operations that can be performed on it.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/data_objects.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom pymodaq_data.data import DataBase, DataSource, DataDim, DataDistribution\ndata = DataBase('mydata', units= 'ms', source=DataSource['raw'],\\\ndistribution=DataDistribution['uniform'], data=[np.array([1,2,3]), np.array([4,5,6])],\\\nlabels=['channel1', 'channel2'], origin=\"documentation's code\")\n\nprint(data.dim)\nprint(data.source)\nprint(data.shape)\nprint(data.length)\nprint(data.size)\n\nfor subdata in data:\n  print(subdata)\n  print(subdata.shape)\n```\n\n----------------------------------------\n\nTITLE: Setting Parameter Values in PyMoDAQ Plugin\nDESCRIPTION: Code snippet demonstrating how to modify a parameter value in the parameter tree of a PyMoDAQ plugin. This snippet accesses a nested parameter named 'axis' within the 'multiaxes' group and sets its value to 2.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_development.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nself.settings.child('multiaxes', 'axis').setValue(2)\n```\n\n----------------------------------------\n\nTITLE: Using ViewerDispatcher to Plot Multiple Data Objects in PyMoDAQ\nDESCRIPTION: Demonstrates how to use the DataToExport (dte) class and ViewerDispatcher to display multiple data objects of different types simultaneously. This approach is commonly used when processing data with ROIs to display both 1D and 0D data together.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq_data.data import DataToExport\n\ndte = DataToExport('MyDte', data=[dwa1D, dwa3D])\ndte.plot('qt')\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomApp Subclass for PyMoDAQ Application\nDESCRIPTION: This code snippet demonstrates how to create a custom application by subclassing PyMoDAQ's CustomApp. It includes methods for setting up actions, docks, connections, and menus, as well as handling parameter value changes.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/custom_app.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CustomAppExample(gutils.CustomApp):\n\n    # list of dicts enabling a settings tree on the user interface\n    params = [\n        {'title': 'Main settings:', 'name': 'main_settings', 'type': 'group', 'children': [\n            {'title': 'Save base path:', 'name': 'base_path', 'type': 'browsepath',\n             'value': config['data_saving']['h5file']['save_path']},\n            {'title': 'File name:', 'name': 'target_filename', 'type': 'str', 'value': \"\", 'readonly': True},\n            {'title': 'Date:', 'name': 'date', 'type': 'date', 'value': QDate.currentDate()},\n            {'title': 'Do something, such as showing data:', 'name': 'do_something', 'type': 'bool', 'value': False},\n        ]},\n    ]\n\n    def __init__(self, dockarea, dashboard=None):\n        super().__init__(dockarea)\n        # init the App specific attributes\n        self.raw_data = []\n\n    def setup_actions(self):\n        '''\n        subclass method from ActionManager\n        '''\n        logger.debug('setting actions')\n        self.add_action('quit', 'Quit', 'close2', \"Quit program\", toolbar=self.toolbar)\n        self.add_action('grab', 'Grab', 'camera', \"Grab from camera\", checkable=True, toolbar=self.toolbar)\n        logger.debug('actions set')\n\n    def setup_docks(self):\n        '''\n        subclass method from CustomApp\n        '''\n        logger.debug('setting docks')\n        self.dock_settings = gutils.Dock('Settings', size=(350, 350))\n        self.dockarea.addDock(self.dock_settings, 'left')\n        self.dock_settings.addWidget(self.settings_tree, 10)\n        logger.debug('docks are set')\n\n    def connect_things(self):\n        '''\n        subclass method from CustomApp\n        '''\n        logger.debug('connecting things')\n        self.actions['quit'].connect(self.quit_function)\n        self.actions['grab'].connect(self.detector.grab)\n        logger.debug('connecting done')\n\n    def setup_menu(self):\n        '''\n        subclass method from CustomApp\n        '''\n        logger.debug('settings menu')\n        file_menu = self.mainwindow.menuBar().addMenu('File')\n        self.affect_to('quit', file_menu)\n        file_menu.addSeparator()\n         logger.debug('menu set')\n\n    def value_changed(self, param):\n        logger.debug(f'calling value_changed with param {param.name()}')\n        if param.name() == 'do_something':\n            if param.value():\n                self.settings.child('main_settings', 'something_done').setValue(True)\n            else:\n                self.settings.child('main_settings', 'something_done').setValue(False)\n\n        logger.debug(f'Value change applied')\n\n\"\"\"\nAll other methods required by your Application class\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Fitting Electron Lifetime Data in Python with PyMoDAQ\nDESCRIPTION: This snippet fits electron lifetime data using a custom function and initial guess parameters. It then plots the fitted data alongside the original.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/data_analysis_tutorial.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntime_axis = dwa_electrons.axes[0].get_data()\ninitial_guess = (2e-7, 10e-12, 7e-6, 3e-11)\n\ndwa_electrons_fitted = dwa_electrons.fit(my_lifetime, initial_guess=initial_guess)\ndwa_electrons_fitted.append(dwa_electrons)\ndwa_electrons_fitted.plot('qt')\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing Python Objects in PyMoDAQ\nDESCRIPTION: Examples of using the Serializer and DeSerializer classes to convert Python objects to bytes and back for TCP/IP transmission. Shows basic string serialization, handling of complex types, and the generic type-and-object serialization method.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/tcpip.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq_data.serialize.serializer_legacy import Serializer, DeSerializer\n    >>> string = 'Hello'\n    >>> ser = Serializer(string)\n    >>> print(ser.string_serialization(string))\n    b'\\x00\\x00\\x00\\x05Hello'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> string = 'Hello'\n>>> ser = Serializer(string)\n>>> print(ser.string_serialization(string))\nb'\\x00\\x00\\x00\\x05Hello'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Serializer(['Hello', 'World']).to_bytes()\nb'\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x06string\\x00\\x00\\x00\\x05Hello\\x00\\x00\\x00\\x06string\\x00\\x00\\x00\\x05World'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> DeSerializer(b'\\x00\\x00\\x00\\x05Hello').string_deserialization()\nHello\n>>> DeSerializer(b'\\x00\\x00\\x00\\x03<f8\\x00\\x00\\x00\\x08fffffF_@').scalar_deserialization()\n125.1\n```\n\nLANGUAGE: python\nCODE:\n```\nserialized = Serializer().type_and_object_serialization(obj)\n```\n\nLANGUAGE: python\nCODE:\n```\nobj_back = DeSerializer(serialized).type_and_object_deserialization()\n```\n\n----------------------------------------\n\nTITLE: Working with Signal and Navigation Axes in DataWithAxes\nDESCRIPTION: Demonstrates the use of signal and navigation axes in DataWithAxes objects, including how to specify and manipulate these axes for multidimensional data.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/data_objects.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata = DataWithAxes('mydata', source=DataSource['raw'], dim=DataDim['Data2D'], \\\ndistribution=DataDistribution['uniform'], data=[np.array([[1,2,3], [4,5,6]])],\\\naxes=[Axis('vaxis', index=0, data=np.array([-1, 1])),\nAxis('haxis', index=1, data=np.array([10, 11, 12]))],\nnav_indexes = (1,))\n\nprint(data.dim)\nprint(data)\n\ndata.nav_indexes = (0,)\nprint(data)\nprint(data.sig_indexes)\n\ndata.nav_indexes = (0, 1)\nprint(data)\nprint(data.sig_indexes)\n\ndata.nav_indexes = ()\nprint(data)\nprint(data.dim)\nprint(data.sig_indexes)\n\ndata.nav_indexes = (0, 1)\nsub_data = data.inav[1:, 1:]\nprint(sub_data)\nprint(sub_data.data[0])\n```\n\n----------------------------------------\n\nTITLE: Implementing a PyMoDAQ Dashboard Extension Class in Python\nDESCRIPTION: Example code showing how to create a PyMoDAQ dashboard extension module with the required attributes EXTENSION_NAME and CLASS_NAME, along with a sample MyExtension class that derives from CustomApp. The class includes parameter definitions for settings and a basic initialization method.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/extension_plugins.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEXTENSION_NAME = 'MY_EXTENSION_NAME'\nCLASS_NAME = 'MyExtension'\n\nclass MyExtension(gutils.CustomApp):\n    # list of dicts enabling the settings tree on the user interface\n    params = [\n        {'title': 'Main settings:', 'name': 'main_settings', 'type': 'group', 'children': [\n            {'title': 'Save base path:', 'name': 'base_path', 'type': 'browsepath',\n             'value': config['data_saving']['h5file']['save_path']},\n            {'title': 'File name:', 'name': 'target_filename', 'type': 'str', 'value': \"\", 'readonly': True},\n            {'title': 'Date:', 'name': 'date', 'type': 'date', 'value': QtCore.QDate.currentDate()},\n            {'title': 'Do something, such as showing data:', 'name': 'do_something', 'type': 'bool', 'value': False},\n            {'title': 'Something done:', 'name': 'something_done', 'type': 'led', 'value': False, 'readonly': True},\n            {'title': 'Infos:', 'name': 'info', 'type': 'text', 'value': \"\"},\n            {'title': 'push:', 'name': 'push', 'type': 'bool_push', 'value': False}\n        ]},\n        {'title': 'Other settings:', 'name': 'other_settings', 'type': 'group', 'children': [\n            {'title': 'List of stuffs:', 'name': 'list_stuff', 'type': 'list', 'value': 'first',\n             'limits': ['first', 'second', 'third'], 'tip': 'choose a stuff from the list'},\n            {'title': 'List of integers:', 'name': 'list_int', 'type': 'list', 'value': 0,\n             'limits': [0, 256, 512], 'tip': 'choose a stuff from this int list'},\n            {'title': 'one integer:', 'name': 'an_integer', 'type': 'int', 'value': 500, },\n            {'title': 'one float:', 'name': 'a_float', 'type': 'float', 'value': 2.7, },\n        ]},\n    ]\n\n    def __init__(self, dockarea, dashboard):\n        super().__init__(dockarea, dashboard)\n        self.setup_ui()\n```\n\n----------------------------------------\n\nTITLE: Checking Value Reached in DAQ_Move (Python)\nDESCRIPTION: Code snippet showing how PyMoDAQ checks if a target value has been reached within a specified tolerance (epsilon) in a DAQ_Move object.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif not abs(self._current_value - self._target_value) < self.epsilon:\n    # keep trying to reach the value\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Axes in PyMoDAQ Actuator Plugin\nDESCRIPTION: Example of defining axis names for a multi-axis actuator controller in PyMoDAQ. Shows both list and dictionary approaches for configuring multiple axes.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass DAQ_Move_MockNamedAxes(DAQ_Move_base):\n    _axis_names = ['Xaxis', 'Yaxis', 'Zaxis']\n    # or:\n    _axis_names = {'Xaxis': 0, 'Yaxis': 1, 'Zaxis': 2}\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing DataToExport Objects in Python\nDESCRIPTION: Demonstrates how to create a DataToExport object containing multiple DataWithAxes objects. This is useful for handling collections of dissimilar data types that need to be exported or saved together.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/data_objects.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from pymodaq_data.data import DataToExport, DataRaw\n>>> dwa0D = DataRaw('dwa0D', data=[np.array([1]), np.array([2]) , np.array([3])])\n>>> dwa1D = DataRaw('dwa1D', data=[np.array([1, 2 , 3])])\n>>> dte = DataToExport(name='a_lot_of_different_data', data=[dwa0D, dwa1D])\n>>> dte\nDataToExport: a_lot_of_different_data <len:2>\n```\n\n----------------------------------------\n\nTITLE: Synchronous Data Polling in PyMoDAQ Plugin\nDESCRIPTION: This function implements a synchronous polling method to check if data is ready from the controller. It uses a loop with a sleep interval and processes Qt events to prevent freezing the UI.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef poll_data(self):\n    \"\"\"\n    Poll the current data state\n    \"\"\"\n    sleep_ms=50\n    ind=0\n    data_ready = False\n    while not self.controller.is_ready():\n        QThread.msleep(sleep_ms)\n\n        ind+=1\n\n        if ind*sleep_ms>=self.settings.child(('timeout')).value():\n\n            self.emit_status(ThreadCommand('raise_timeout'))\n            break\n\n        QtWidgets.QApplication.processEvents()\n    self.emit_data()\n```\n\n----------------------------------------\n\nTITLE: Setting Spread Order for Data Axes in Python\nDESCRIPTION: Shows how to set the spread_order attribute for axes in non-uniform data, which is important for maintaining the correct ordering when plotting spread data distributions.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/data_objects.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> xaxis = Axis(name=xaxis, index=0, spread_order=0, data=...)\n>>> yaxis = Axis(name=yaxis, index=0, spread_order=1, data=...)\n```\n\n----------------------------------------\n\nTITLE: Defining Exponential Decay Function for Data Fitting\nDESCRIPTION: Defines a mathematical function for fitting lifetime data with exponential decay. Takes amplitude, offset, time shift, and decay time constant as parameters.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/data_analysis_tutorial.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef my_lifetime(x, A, B, C, tau):\n    return A + C * np.exp(-(x - B)/tau)\n```\n\n----------------------------------------\n\nTITLE: Creating and Visualizing 4D Uniform Data in PyMoDAQ\nDESCRIPTION: Generates a complex 4D dataset with multiple axes and visualizes it using PyMoDAQ's ViewerND. The code creates synthetic data with Gaussian distributions along with random noise and demonstrates how to define axes and navigation indexes for proper visualization.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nx = mutils.linspace_step(-10, 10, 0.2)\ny = mutils.linspace_step(-30, 30, 1)\nt = mutils.linspace_step(-100, 100, 2)\nz = mutils.linspace_step(0, 50, 0.5)\n\ndata = np.zeros((len(y), len(x), len(t), len(z)))\namp = np.ones((len(y), len(x), len(t), len(z)))\nfor indx in range(len(x)):\n    for indy in range(len(y)):\n        data[indy, indx, :, :] = amp[indy, indx] * (\n                mutils.gauss2D(z, 0 + indx * 1, 20,\n                               t, 0 + 2 * indy, 30)\n                + np.random.rand(len(t), len(z)) / 5)\n\ndwa = DataRaw('NDdata', data=data, dim='DataND', nav_indexes=(0, 1),\n              axes=[Axis(data=y, index=0, label='y_axis', units='yunits'),\n                    Axis(data=x, index=1, label='x_axis', units='xunits'),\n                    Axis(data=t, index=2, label='t_axis', units='tunits'),\n                    Axis(data=z, index=3, label='z_axis', units='zunits')])\n\ndwa.plot('qt')\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Data Acquisition in PyMoDAQ Plugin\nDESCRIPTION: Code snippet showing the implementation of a live data acquisition mode with averaging functionality in a PyMoDAQ plugin. The code runs in a loop while live mode is active, averages data and emits signals.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nif 'live' in kwargs:\n    if kwargs['live']:\n        self.live = True\n        # self.live = False  # don't want to use that for the moment\n\nif self.live:\n    while self.live:\n        data = self.average_data(Naverage)\n        QThread.msleep(kwargs.get('wait_time', 100))\n        self.dte_signal.emit(data)\n        QtWidgets.QApplication.processEvents()\n```\n\n----------------------------------------\n\nTITLE: Detector Saver Configuration in DAQ_Scan\nDESCRIPTION: Code snippet demonstrating how to configure detector savers in the DAQ_Scan module. It shows how to set up DetectorExtendedSaver objects for each detector and update their h5saver properties.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/modules/DAQ_Viewer.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor det in self.modules_manager.detectors:\n    det.module_and_data_saver = module_saving.DetectorExtendedSaver(det, self.scan_shape)\nself.module_and_data_saver.h5saver = self.h5saver  # will update its h5saver and all submodules's h5saver\n```\n\n----------------------------------------\n\nTITLE: Generating and Plotting 2D Uniform Gaussian Data in Python\nDESCRIPTION: This snippet shows how to create 2D uniform Gaussian data and plot it using PyMoDAQ's Viewer2D. It demonstrates the creation of 2D axes and multiple data arrays for RGB visualization.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nNX = 100\nNY = 50\nx_axis = Axis('xaxis', 'xunits', data=np.linspace(-20, 20, NX), index=1)\ny_axis = Axis('yaxis', 'yunits', data=np.linspace(20, 40, NY), index=0)\n\ndata_arrays_2D = [mutils.gauss2D(x_axis.get_data(), -5, 10, y_axis.get_data(), 25, 2) +\n                  mutils.gauss2D(x_axis.get_data(), -5, 5, y_axis.get_data(), 35, 2) * 0.01,\n                 mutils.gauss2D(x_axis.get_data(), 5, 5, y_axis.get_data(), 30, 8)]\ndata2D = DataRaw('data2DUniform', data=data_arrays_2D, axes=[x_axis, y_axis],\n                labels=['red gaussian', 'green gaussian'])\ndata2D.plot('qt')\n```\n\n----------------------------------------\n\nTITLE: Using OSM Command to Move Actuator\nDESCRIPTION: Python script that uses the OSM command to make a relative movement of the actuator. OSM takes two parameters: the axis number and the number of steps to move. This demonstrates basic control of the first axis of the E870 controller.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_development.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Script content not fully visible in the image but described as using OSM command to move the actuator\n```\n\n----------------------------------------\n\nTITLE: Initializing Dependencies for PyMoDAQ Data Analysis\nDESCRIPTION: Sets up the Python environment by importing required modules and constants for data analysis. Includes PyMoDAQ specific imports, scientific computing libraries, and defines the speed of light constant.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/data_analysis_tutorial.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%gui qt5\n\nfrom pathlib import Path\nimport sys\nimport scipy as sc\nimport scipy.optimize as opt\nimport scipy.constants as cst\nimport numpy as np\n\nfrom pymodaq_data.h5modules.saving import H5SaverLowLevel\nfrom pymodaq_data.h5modules.data_saving import DataLoader\nfrom pymodaq_data.data import DataRaw, DataToExport\n\nfrom pymodaq import __version__\nprint(__version__)\n\nLIGHT_SPEED = 3e8\n```\n\n----------------------------------------\n\nTITLE: Finding Peaks in FFT Data using PyMoDAQ in Python\nDESCRIPTION: This code uses PyMoDAQ's built-in peak finding method to identify significant peaks in the FFT amplitude data, then plots the results using matplotlib.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/data_analysis_tutorial.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndte_peaks = dwa_fft.abs().find_peaks(height=1e-6)\nprint(dte_peaks[0].axes[0].get_data() / (2*np.pi))\n\ndte_peaks[0].axes[0].as_dwa().plot('matplotlib', 'o-r')  # transforms an Axis object to dwa for quick plotting\n\ndte_peaks[0].get_data_as_dwa(0).plot('matplotlib', 'o-b')  # select part of the data object for \"selected\" plotting\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting 1D Gaussian Data with Viewer1D in Python\nDESCRIPTION: This snippet demonstrates how to create 1D Gaussian data with an axis, errors, and labels, and then plot it using PyMoDAQ's Viewer1D. It showcases the creation of a DataRaw object with rich metadata.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq_utils.utils import math_utils as mutils\nfrom pymodaq_data.data import Axis\n\naxis = Axis('my axis', units='my units', data=np.linspace(-10000, 10000, 100))\n\ndwa1D = DataRaw('my_1D_data', data=[mutils.gauss1D(axis.get_data(), 3300, 2500),\n                                    mutils.gauss1D(axis.get_data(), -4000, 1500) * 0.5],\n                labels=['a gaussian', 'another gaussian'],\n                axes=[axis],\n                errors=[0.1* np.random.random_sample((axis.size,)) for _ in range(2)])\ndwa.plot('qt')\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating DataWithAxes Objects in Python\nDESCRIPTION: Illustrates the creation of a DataWithAxes object, which extends DataBase to include axis information. Shows how to access and manipulate the data using slicing operations.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/data_objects.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq_data.data import DataWithAxes, Axis\ndata = DataWithAxes('mydata', source=DataSource['raw'], dim=DataDim['Data2D'], \\\ndistribution=DataDistribution['uniform'], data=[np.array([[1,2,3], [4,5,6]])],\\\naxes=[Axis('vaxis', index=0, data=np.array([-1, 1])),\nAxis('haxis', index=1, data=np.array([10, 11, 12]))])\n\nprint(data)\nprint(data.axes)\n\nsub_data = data.isig[1:, 1:]\nprint(sub_data.data[0])\n\nsub_data = data.isig[:, 1:]\nprint(sub_data.data[0])\n```\n\n----------------------------------------\n\nTITLE: Calculating New Position with Scaling in Python\nDESCRIPTION: This snippet demonstrates how position scaling works in the DAQ Move module. It applies a linear transformation to convert between raw controller values and scaled values, useful for converting between different units of measurement.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/modules/DAQ_Move.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nnew_position=scaling*old_position+offset\n```\n\n----------------------------------------\n\nTITLE: Saving DataToExport Objects in Python\nDESCRIPTION: This snippet demonstrates creating a DataToExport object containing multiple DataWithAxes objects and saving it using DataToExportSaver.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/saving_loading_data.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndte = DataToExport(name='mybigdata', data=[data2D, data0D, data1D, data0Dbis])\nfrom pymodaq_data.h5modules.data_saving import DataToExportSaver\ndte_saver = DataToExportSaver(h5saver)\n\nh5saver.add_det_group('/RawData', 'Example dte')\n\ndte_saver.add_data('/RawData/Detector001', dte)\n\nfor node in h5saver.walk_nodes('/RawData/Detector001'):\n    print(node)\n```\n\n----------------------------------------\n\nTITLE: Working with Non-Uniform Spread Data in Python\nDESCRIPTION: Shows how to handle non-uniformly distributed data in PyMoDAQ. Demonstrates setting up data shape, navigation indexes, and axes for spread data distribution, which is used for data collected at specific non-uniform points.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/data_objects.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> data.shape = (150, 20, 30)\n>>> data.nav_indexes = (0,)\n```\n\n----------------------------------------\n\nTITLE: Modifying Navigation Indexes for 4D Data Visualization\nDESCRIPTION: Shows how to change the navigation indexes of a 4D dataset to alter its visualization in ViewerND. This simple code changes from a 2D+2D representation to a 3D+1D representation by changing which dimensions are considered navigation axes.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndwa.nav_indexes = (0, 1, 2) \ndwa.plot('qt')\n```\n\n----------------------------------------\n\nTITLE: Initializing PyMoDAQ's ViewerND Component\nDESCRIPTION: Creates an instance of the ViewerND class, which is PyMoDAQ's viewer for complex N-dimensional data. ViewerND combines multiple viewers to display data with navigation and signal dimensions.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq_gui.plotting.data_viewers.viewerND import ViewerND\nviewerND = ViewerND()\n```\n\n----------------------------------------\n\nTITLE: DataWithAxes Deserialization Method in PyMoDAQ\nDESCRIPTION: Implementation of the deserialization method for DataWithAxes objects, converting the transmitted bytes back into a DataWithAxes object with all its components and metadata.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/tcpip.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef dwa_deserialization(self) -> DataWithAxes:\n    \"\"\"Convert bytes into a DataWithAxes object\n\n    Convert the first bytes into a DataWithAxes reading first information about the underlying data\n\n    Returns\n    -------\n    DataWithAxes: the decoded DataWithAxes\n    \"\"\"\n    class_name = self.string_deserialization()\n    if class_name not in DwaType.names():\n        raise TypeError(f'Attempting to deserialize a DataWithAxes flavor but got the bytes for a {class_name}')\n    timestamp = self.scalar_deserialization()\n    dwa = getattr(data_mod, class_name)(self.string_deserialization(),\n                                        source=self.string_deserialization(),\n                                        dim=self.string_deserialization(),\n```\n\n----------------------------------------\n\nTITLE: Defining Axes for Spread Data in Python\nDESCRIPTION: Demonstrates how to define and configure axes for spread (non-uniform) data distribution. Shows how to set axis names, indexes, and spread order which is important for plotting data collected at non-uniform points.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/data_objects.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> xaxis = Axis(name=xaxis, index=0, data=...)\n>>> yaxis = Axis(name=yaxis, index=0, data=...)\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting 2D Spread Data in PyMoDAQ\nDESCRIPTION: Demonstrates how to create a 2D dataset with spread distribution using DataRaw and plot it with PyMoDAQ. This code constructs a collection of points with x and y coordinates and visualizes them using the spread distribution type.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndata_list.append(mutils.gauss2D(x_axis.get_data()[ind], 10, 15,\n                                        y_axis.get_data()[ind], 30, 5))\ndata_array = np.squeeze(np.array(data_list))\n\ndata2D_spread = DataRaw('data2DSpread', data=[data_array],\n                         axes=[x_axis, y_axis],\n                         distribution='spread',\n                         nav_indexes=(0,))\ndata2D_spread.plot('qt')\n```\n\n----------------------------------------\n\nTITLE: Navigating DataWithAxes Objects in Python\nDESCRIPTION: Demonstrates accessing and navigating through a DataWithAxes object using navigation and signal indexing. Shows how to select specific dimensions and elements from the data structure.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/data_objects.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> data.nav_indexes = (0,)\n>>> data\n<DataWithAxes, mydata, (2|3)>\n>>> data.inav[0]\n<DataWithAxes, mydata, (|3)>\n>>> data.inav[0].isig[2]\n<DataWithAxes, mydata, (|1)>\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Math Processors on FFT Data in Python\nDESCRIPTION: This snippet demonstrates the use of PyMoDAQ's advanced math processors to extract data from the FFT results, specifically finding the maximum argument.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/data_analysis_tutorial.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq_data.post_treatment.process_to_scalar import DataProcessorFactory\ndata_processors = DataProcessorFactory()\nprint('Implemented possible processing methods, can be applied to any data type and dimensionality')\nprint(data_processors.keys)\ndwa_processed = data_processors.get('argmax').process(dwa_fft.abs())\nprint(dwa_processed[0])\n```\n\n----------------------------------------\n\nTITLE: Managing Units in PyMoDAQ Data Objects\nDESCRIPTION: Demonstrates unit management in PyMoDAQ data objects, including unit conversion during operations and changing units of existing data objects.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/data_objects.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom pymodaq_data.data import DataRaw\narray = np.array([0, 1, 2])\ndwa_s = data_mod.DataRaw('data', units='s', data=[array])\ndwa_ms = data_mod.DataRaw('data', units='ms', data=[array])\nprint((dwa_s + dwa_ms)[0])\n\ndwa_ms = dwa_s.units_as('ms')\n# or in place\ndwa_s.units = 'ms'\n```\n\n----------------------------------------\n\nTITLE: Performing FFT on Resampled Phonon Data in Python\nDESCRIPTION: This code performs a Fourier transform on the resampled phonon data and plots the original data alongside the FFT amplitude, with a zoom on the first two harmonics.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/data_analysis_tutorial.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndwa_fft = dwa_phonons_interp.ft()\n\ndwa_phonons_fft = DataToExport('FFT', data=[\n    dwa_phonons_interp,\n    dwa_fft.abs(),\n    dwa_fft.abs(),\n    dwa_fft.abs()])\ndwa_phonons_fft.plot('qt')\n```\n\n----------------------------------------\n\nTITLE: Initializing H5Saver and Creating Axis Object in Python\nDESCRIPTION: This snippet demonstrates how to create an HDF5 file using H5SaverLowLevel, create an Axis object, and initialize an AxisSaverLoader for saving and loading axis data.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/saving_loading_data.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nfrom pathlib import Path\nfrom pymodaq_data.data import Axis\nfrom pymodaq_data.h5modules.saving import H5SaverLowLevel\nh5saver = H5SaverLowLevel()\nh5saver.init_file(Path('atemporaryfile.h5'))\n\nfrom pymodaq_data.h5modules.data_saving import AxisSaverLoader\naxis = Axis('myaxis', units='seconds', data=np.array([3,7,11,15]), index=0)\naxis_saver = AxisSaverLoader(h5saver)\n```\n\n----------------------------------------\n\nTITLE: Calculating Gold Film Thickness from Phonon Period in Python\nDESCRIPTION: This code calculates the gold film thickness using the phonon oscillation period and the speed of sound in gold.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/data_analysis_tutorial.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nthickness = T_phonons / 2 * SOUND_SPEED_GOLD\nprint(f\"Gold Thickness: {thickness * 1e9} nm\")\n```\n\n----------------------------------------\n\nTITLE: Handling Uncertainty and Error Bars in PyMoDAQ\nDESCRIPTION: Shows how to include error information in DataWithAxes objects, representing measurement uncertainty or standard deviation.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/data_objects.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = DataWithAxes('mydata', source=DataSource['raw'], dim=DataDim['Data1D'],\n                    data=[np.array([1,2,3])],\n                    axes=[Axis('axis', index=0, data=np.array([-1, 0, 1])),\n                    errors=[np.array([0.01, 0.03, 0,1])])\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting Spread Data in PyMoDAQ\nDESCRIPTION: Creates a spread data structure where multiple navigation axes (x, y, z) have the same length and are plotted in the same Viewer1D. This example generates synthetic data with sine waves and Gaussian distributions to demonstrate how spread data visualization works in PyMoDAQ.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nN = 100\n\nx = np.sin(np.linspace(0, 4 * np.pi, N))\ny = np.sin(np.linspace(0, 4 * np.pi, N) + np.pi/6)\nz = np.sin(np.linspace(0, 4 * np.pi, N) + np.pi/3)\n\nNsig = 200\naxis = Axis('signal axis', 'signal units', data=np.linspace(-10, 10, Nsig), index=1)\ndata = np.zeros((N, Nsig))\nfor ind in range(N):\n     data[ind,:] = mutils.gauss1D(axis.get_data(), 5 * np.sqrt(x[ind]**2 + y[ind]**2 + z[ind]**2) -5 , 2) + 0.2 * np.random.rand(Nsig)\n\ndwa = DataRaw('NDdata', data=data, distribution='spread', dim='DataND', nav_indexes=(0,),\n              axes=[Axis(data=x, index=0, label='x_axis', units='xunits', spread_order=0),\n                    Axis(data=y, index=0, label='y_axis', units='yunits', spread_order=0),\n                    Axis(data=z, index=0, label='z_axis', units='zunits', spread_order=0),\n                   axis])\n\ndwa.plot('qt')\n```\n\n----------------------------------------\n\nTITLE: Adding Data to HDF5 File with DetectorSaver in PyMoDAQ\nDESCRIPTION: Code that demonstrates how to add data to an HDF5 file using the DetectorSaver. It retrieves or creates a detector node in the file structure and then adds data (a DataToExport object) to this node with optional kwargs.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/saving_loading_data.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndetector_node = self.module_and_data_saver.get_set_node(where)\nself.module_and_data_saver.add_data(detector_node, data, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Calculating Phonon Period from FFT Peak in Python\nDESCRIPTION: This snippet calculates the phonon oscillation period from the fundamental frequency identified in the FFT analysis.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/data_analysis_tutorial.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nT_phonons = 1/5.32e10\nprint(f'Period T = {T_phonons * 1e12} ps')\n```\n\n----------------------------------------\n\nTITLE: Displaying Evolving Scalar Data with Viewer0D in Python\nDESCRIPTION: This code shows how to display evolving scalar data using Viewer0D. It generates sinusoidal data and updates the viewer in a loop to show the history of scalar values over time.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor ind in range(100):\n    dwa = DataRaw('my_scalar', data=[np.sin([ind / 100 * 2*np.pi]),\n                                     np.sin([ind / 100 * 2*np.pi + np.pi/4])],\n                 labels=['mysinus', 'my_dephased_sinus'])\n    viewer0D.show_data(dwa)\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting Shuffled 1D Data in Python\nDESCRIPTION: This code creates a 1D dataset with a shuffled axis to demonstrate how non-monotonous data is displayed in Viewer1D. It shows how to create and plot DataRaw objects with scrambled axes.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\naxis_shuffled_array = axis.get_data() \nnp.random.shuffle(axis_shuffled_array)\naxis_shuffled = Axis('my axis', units='my units', data=axis_shuffled_array)\n\ndwa = DataRaw('my_1D_data', data=[mutils.gauss1D(axis_shuffled.get_data(), 3300, 2500),\n                                  mutils.gauss1D(axis_shuffled.get_data(), -4000, 1500) * 0.5],\n              labels=['a gaussian', 'another gaussian'],\n              axes=[axis_shuffled])\ndwa.plot('qt')\n```\n\n----------------------------------------\n\nTITLE: Loading and Visualizing 3D Brain Data in PyMoDAQ\nDESCRIPTION: Retrieves 3D tomographic brain data from the Statistical Parametric Mapping website, processes it, and displays it using PyMoDAQ's ViewerND. The code handles downloading, extracting, and converting the data to a PyMoDAQ-compatible format.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport tempfile\nfrom pathlib import Path\nimport zipfile\nfrom urllib.request import urlretrieve\nimport nibabel\n\n# Create a temporary directory\nwith tempfile.TemporaryDirectory() as directory_name:\n    directory = Path(directory_name)\n    # Define URL\n    url = 'http://www.fil.ion.ucl.ac.uk/spm/download/data/attention/attention.zip'\n\n    # Retrieve the data, it takes some time\n    fn, info = urlretrieve(url, directory.joinpath('attention.zip'))\n\n    # Extract the contents into the temporary directory we created earlier\n    zipfile.ZipFile(fn).extractall(path=directory)\n\n    # Read the image\n    struct = nibabel.load(directory.joinpath('attention/structural/nsM00587_0002.hdr'))\n\n    # Get a plain NumPy array, without all the metadata\n    array_3D = struct.get_fdata()\n\ndwa3D = DataRaw('my brain', data=array_3D, nav_indexes=(2,))\ndwa3D.create_missing_axes()\n\nviewerND.show_data(dwa3D)  # or just do dwa3D.plot('qt')\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Axis Data in Python\nDESCRIPTION: This code shows how to save an Axis object to an HDF5 file, check the file contents, and load the axis data back into a new object.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/saving_loading_data.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\naxis_saver.add_axis('/RawData', axis)\n\nfor node in h5saver.walk_nodes('/'):\n    print(node)\n\nloaded_axis = axis_saver.load_axis('/RawData/Axis00')\nprint(loaded_axis)\nprint(loaded_axis == axis)\nprint(loaded_axis is axis)\n```\n\n----------------------------------------\n\nTITLE: Loading Data from PyMoDAQ H5 File\nDESCRIPTION: Demonstrates loading data from a PyMoDAQ H5 file and walking through its node structure. Shows how to access specific scan data nodes.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/data_analysis_tutorial.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndwa_loader = DataLoader('Dataset_20240206_000.h5')\n\nfor node in dwa_loader.walk_nodes():\n    if 'Scan012' in str(node):\n        print(node)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Displaying Scalar Data with Viewer0D in Python\nDESCRIPTION: This snippet demonstrates how to create a Viewer0D object and display scalar data using PyMoDAQ. It creates a DataRaw object with two scalar values and shows it in the viewer.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%gui qt\nimport numpy as np\n\nfrom pymodaq_gui.plotting.data_viewers.viewer0D import Viewer0D\nfrom pymodaq_data.data import DataRaw\n\ndwa = DataRaw('my_scalar', data=[np.array([10.6]), np.array([-4.6])],\n              labels=['scalar1', 'scalar2'])\nviewer0D = Viewer0D()\n\nviewer0D.show_data(dwa)\n```\n\n----------------------------------------\n\nTITLE: Generating Spread 2D Data in Python\nDESCRIPTION: This code snippet demonstrates how to generate spread 2D data, which is typically obtained from a Spread or Tabular 2D scan. It creates random x and y axis data and prepares for further processing.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nN = 100\nx_axis_array = np.random.randint(-20, 50, size=N)\ny_axis_array = np.random.randint(20, 40, size=N)\n\nx_axis = Axis('xaxis', 'xunits', data=x_axis_array, index=0, spread_order=0)\ny_axis = Axis('yaxis', 'yunits', data=y_axis_array, index=0, spread_order=1)\n\ndata_list = []\nfor ind in range(N):\n```\n\n----------------------------------------\n\nTITLE: Loading DataWithAxes with Background in Python\nDESCRIPTION: This code shows how to load DataWithAxes objects with and without background data included.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/saving_loading_data.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nloaded_data_bkg = datasaver.load_data('/RawData/Detector000/Data00', with_bkg=True)\nprint(loaded_data_bkg)\nprint(loaded_data_bkg == loaded_data)\nprint(loaded_data_bkg.data[0])\nprint(loaded_data.data[0])\n```\n\n----------------------------------------\n\nTITLE: Adding Background Data to HDF5 File in PyMoDAQ\nDESCRIPTION: Code example showing how to add background data to an HDF5 file using the DetectorSaver's add_bkg method. The background data is stored as a DataToExport object similar to the main data but containing background information.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/saving_loading_data.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nself.module_and_data_saver.add_bkg(detector_node, self._bkg)\n```\n\n----------------------------------------\n\nTITLE: Updating Imports for PyMoDAQ 4 Plugin\nDESCRIPTION: Example of updated imports in the DAQ_Move_template plugin to reflect the new package layout in PyMoDAQ 4.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_update_to_v4.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq.control_modules.move_utility_classes import DAQ_Move_base\nfrom pymodaq.utils.daq_utils import ThreadCommand\nfrom pymodaq.utils.parameter import Parameter\n```\n\n----------------------------------------\n\nTITLE: Emitting Data from Detector Plugins in PyMoDAQ\nDESCRIPTION: Code snippet showing how to emit data from a detector plugin to trigger multiple data viewers. This example emits two different data types (0D and 2D) that will be displayed in separate viewers.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/modules/DAQ_Viewer.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.data_grabed_signal.emit([\n    DataFromPlugins(name='Mock1', data=data1, dim='Data0D'),\n    DataFromPlugins(name='Mock2', data=data2, dim='Data2D')])\n```\n\n----------------------------------------\n\nTITLE: Accessing Data from DataToExport Objects in Python\nDESCRIPTION: Shows how to access the contained DataWithAxes objects from a DataToExport object using indexing, dimensionality, or names. This allows for flexible retrieval of data from collections.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/data_objects.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> dte[0]\n<DataRaw, dwa0D, (|1)>\n>>> dte.get_data_from_dim('Data1D').data[0]\n<DataRaw, dwa1D, (|3)>\n>>> dte.get_names()\n['dwa0D', 'dwa1D']\n>>> dte.get_data_from_name('dwa0D')\n<DataRaw, dwa0D, (|1)>\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving DataWithAxes Objects in Python\nDESCRIPTION: This snippet demonstrates creating DataWithAxes objects for data and background, and saving them using DataSaverLoader and BkgSaver.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/saving_loading_data.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom pymodaq_data.data import DataWithAxes, DataSource, DataDim, DataDistribution\ndata = DataWithAxes('mydata', source=DataSource['raw'], dim=DataDim['Data2D'], \\\ndistribution=DataDistribution['uniform'], data=[np.array([[1,2,3], [4,5,6]])],\\\naxes=[Axis('vaxis', index=0, data=np.array([-1, 1])),\nAxis('haxis', index=1, data=np.array([10, 11, 12]))])\nbkg = data.deepcopy()\n\nh5saver.add_det_group('/RawData', 'Example')\n\nfrom pymodaq_data.h5modules.data_saving import DataSaverLoader\ndatasaver = DataSaverLoader(h5saver)\ndatasaver.add_data('/RawData/Detector000', data)\n\nfrom pymodaq_data.h5modules.data_saving import BkgSaver\nbkgsaver = BkgSaver(h5saver)\nbkgsaver.add_data('/RawData/Detector000', data, save_axes=False)\n```\n\n----------------------------------------\n\nTITLE: Emitting Data in PyMoDAQ Plugin\nDESCRIPTION: This code demonstrates how to emit data from a PyMoDAQ plugin using the dte_signal. It creates Axis objects for x and y axes, and emits DataToExport containing multiple DataFromPlugins objects for different data types.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq_data.data import Axis, DataToExport\nfrom pymodaq.utils.data import DataFromPlugins\nx_axis = Axis(label='Wavelength', units= \"nm\", data = vector_X)\ny_axis = Axis(data=vector_Y)\nself.dte_signal.emit(DataToExport('mydata', data=[\n    DataFromPlugins(name='Camera',data=[data2D_0, data2D_1,...],\n                    dim='Data2D', x_axis=x_axis,y_axis=y_axis),\n    DataFromPlugins(name='Spectrum',data=[data1D_0, data1D_1,...],\n                    dim='Data1D', x_axis=x_axis, labels=['label0', 'label1', ...]),\n    DataFromPlugins(name='Current',data=[data0D_0, data0D_1,...],\n                    dim='Data0D'),\n    DataFromPlugins(name='Datacube',data=[dataND_0, dataND_1,...],\n                    dim='DataND', nav_indexes=(0,2),\n                    axes=[Axis(data=.., label='Xaxis', units= \"µm\", index=0)]))\n```\n\n----------------------------------------\n\nTITLE: UI Interaction with Splash Screen in PyMoDAQ Plugin\nDESCRIPTION: Code example showing how to display initialization information on a splash screen from within a PyMoDAQ plugin class. The code sequences initialization steps with visual feedback.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nself.emit_status(ThreadCommand('show_splash', 'Starting initialization'))\nQtCore.QThread.msleep(500)\nself.ini_detector_init(old_controller=controller,\n                   new_controller='Mock controller')\nself.emit_status(ThreadCommand('show_splash', 'generating Mock Data'))\nQtCore.QThread.msleep(500)\nself.set_Mock_data()\nself.emit_status(ThreadCommand('update_main_settings', [['wait_time'],\n                             self.settings['wait_time'], 'value']))\nself.emit_status(ThreadCommand('show_splash', 'Displaying initial data'))\nQtCore.QThread.msleep(500)\n# initialize viewers with the future type of data\nself.dte_signal_temp.emit(DataToExport('Mock0D', data=[\n    DataFromPlugins(name='Mock1', data=[np.array([0])],\n                  dim='Data0D', labels=['Mock1', 'label2'])]))\nself.emit_status(ThreadCommand('close_splash'))\n```\n\n----------------------------------------\n\nTITLE: Resampling Phonon Data on Regular Time Grid in Python\nDESCRIPTION: This snippet resamples sparse phonon data onto a regular time grid for subsequent Fourier analysis. It uses PyMoDAQ utility functions for linear interpolation.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/data_analysis_tutorial.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq_utils import math_utils as mutils\nfrom pymodaq_data.data import Axis\nphonon_axis_array = dwa_phonons.get_axis_from_index(0)[0].get_data()\nphonon_axis_array -= phonon_axis_array[0]\ntime_step = phonon_axis_array[-1] - phonon_axis_array[-2]\ntime_array_linear = mutils.linspace_step(0, phonon_axis_array[-1], time_step)\ndwa_phonons_interp = dwa_phonons.interp(time_array_linear)\n\ndwa_phonons_interp.plot('qt')\n```\n\n----------------------------------------\n\nTITLE: Importing ViewerDispatcher in PyMoDAQ\nDESCRIPTION: Shows how to import the ViewerDispatcher class directly from PyMoDAQ utilities. The ViewerDispatcher is responsible for generating docks containing data viewers adapted to particular data types.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/plotting_data_objects.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq.utils.plotting.data_viewers.viewer import ViewerDispatcher\n```\n\n----------------------------------------\n\nTITLE: Emitting Actuator Value in PyMoDAQ DAQ_Move\nDESCRIPTION: Demonstrates how to directly modify the printed current actuator's value using the emit_value method or emit_status with a ThreadCommand.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nemit_value(DataActuator(data=12.4, units='m'))\n```\n\nLANGUAGE: python\nCODE:\n```\nemit_status(ThreadCommand('get_actuator_value', DataActuator(data=12.4, units='m')))\n```\n\n----------------------------------------\n\nTITLE: Importing Hardware Modules in PyMoDAQ Plugins\nDESCRIPTION: Example of importing a controller wrapper from a hardware folder within a plugin package. This approach is used when custom Python wrappers or DLLs are needed for hardware interaction.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n#import controller wrapper\nfrom pymodaq_plugins.hardware.andor import daq_AndorSDK2 #this import the module DAQ_AndorSDK2 containing classes, methods...\n#and then use it as you see fit in your module\n```\n\n----------------------------------------\n\nTITLE: Initializing H5Saver and DetectorSaver in PyMoDAQ\nDESCRIPTION: Code that initializes an H5Saver object with a detector save type and configures a file path. Then it creates a DetectorSaver instance and associates it with the H5Saver. This setup is used when saving snapshots from the DAQ_Viewer module.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/saving_loading_data.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npath = 'a/custom/path/for/a/hdf5/file.h5'\n\nh5saver = H5Saver(save_type='detector')\nh5saver.init_file(update_h5=True, custom_naming=False, addhoc_file_path=path)\n\nself.module_and_data_saver = module_saving.DetectorSaver(self)\nself.module_and_data_saver.h5saver = h5saver\n```\n\n----------------------------------------\n\nTITLE: Initializing and Updating LCD in PyMoDAQ DAQ_Viewer\nDESCRIPTION: Shows how to initialize an LCD widget and update its values in a 0D Mock viewer plugin. This code first initializes the LCD screen with specific parameters and then sends data to be displayed.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nif not self.lcd_init:\n    self.emit_status(ThreadCommand('init_lcd', dict(labels=['dat0', 'data1'], Nvals=2, digits=6)))\n    QtWidgets.QApplication.processEvents()\n    self.lcd_init = True\nself.emit_status(ThreadCommand('lcd', data_tot))\n```\n\n----------------------------------------\n\nTITLE: Importing Parameter Utility Functions in PyMoDAQ\nDESCRIPTION: This code snippet demonstrates how to import the utility functions for parameter management in PyMoDAQ. It includes functions for getting parameter paths, iterating through child parameters, and retrieving parameters by name.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/api/utility_api/parameter/param_manage.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pymodaq_gui.parameter.utils import get_param_path, iter_children, iter_children_params, get_param_from_name\n```\n\n----------------------------------------\n\nTITLE: Installing PyMoDAQ Development Environment with Mamba\nDESCRIPTION: Commands for setting up a development environment using Mamba package manager and installing PyMoDAQ in development mode with test tools.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/contributing.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmamba create -n dev_env\nmamba activate dev_env\npip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Data Acquisition in PyMoDAQ Andor SDK2 Plugin\nDESCRIPTION: This code shows how to implement asynchronous data acquisition using a callback mechanism in a PyMoDAQ plugin for Andor SDK2. It creates a separate thread for the callback and connects signals for data emission.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass DAQ_AndorSDK2(DAQ_Viewer_base):\n\n    callback_signal = QtCore.Signal() #used to talk with the callback object\n    ...\n\n    def ini_camera(self):\n        ...\n        callback = AndorCallback(self.controller.WaitForAcquisition) # the callback is linked to the controller WaitForAcquisition method\n        self.callback_thread = QtCore.QThread() #creation of a Qt5 thread\n        callback.moveToThread(self.callback_thread) #callback object will live within this thread\n        callback.data_sig.connect(self.emit_data)  # when the wait for acquisition returns (with data taken), emit_data will be fired\n\n        self.callback_signal.connect(callback.wait_for_acquisition) #\n        self.callback_thread.callback = callback\n        self.callback_thread.start()\n\n    def grab(self,Naverage=1,**kwargs):\n        ...\n        self.callback_signal.emit()  #trigger the wait_for_acquisition method\n\ndef emit_data(self):\n    \"\"\"\n        Function used to emit data obtained by callback.\n    \"\"\"\n    ...\n    self.dte_signal.emit(\n        DataToExport('mydata',\n                     data=[DataFromPlugins('Camera',\n                                           data=[np.squeeze(self.data.reshape((sizey, sizex)).astype(np.float))]])\n\n\nclass AndorCallback(QtCore.QObject):\n\n    data_sig=QtCore.Signal()\n    def __init__(self,wait_fn):\n        super(AndorCallback, self).__init__()\n        self.wait_fn = wait_fn\n\n    def wait_for_acquisition(self):\n        err = self.wait_fn()\n\n        if err != 'DRV_NO_NEW_DATA': #will be returned if the main thread called CancelWait\n            self.data_sig.emit()\n```\n\n----------------------------------------\n\nTITLE: Converting detector input for PID filter\nDESCRIPTION: Method to convert camera acquisition data into PID filter input by calculating center of mass coordinates after background threshold removal\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/extensions_folder/pid_module.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef convert_input(self, measurements):\n    data_cam = measurements[0] - self.settings.child('main_settings', 'threshold').value()\n    data_cam[data_cam < 0] = 0\n    x, y = ndimage.center_of_mass(data_cam)\n    return [x, y]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HDF5 File Path Structure in PyMoDAQ\nDESCRIPTION: This snippet shows the general structure of the saved HDF5 file path in PyMoDAQ's continuous saving feature. It includes the base path, year and day subfolders, and the filename format with date and time.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/modules/DAQ_Viewer.rst#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nD:\\\\Data\\\\2018\\\\20181220\\\\Data_20181220_16_58_48.h5\n```\n\n----------------------------------------\n\nTITLE: Defining Group Types for HDF5 Structure in PyMoDAQ\nDESCRIPTION: Definition of the GroupType enumeration that specifies different types of group nodes in the HDF5 file structure. Each module has its own specific group type, such as detector, actuator, scan, and data_logger.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/data_management/saving_loading_data.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass GroupType(BaseEnum):\n    detector = 0\n    actuator = 1\n    data = 2\n    ch = 3\n    scan = 4\n    external_h5 = 5\n    data_dim = 6\n    data_logger = 7\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter Values in PyMoDAQ Plugin\nDESCRIPTION: Code snippet showing how to retrieve a parameter value from the parameter tree of a PyMoDAQ plugin. This accesses the value of the 'axis' parameter within the 'multiaxes' group.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_development.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nself.settings['multiaxes', 'axis']\n```\n\n----------------------------------------\n\nTITLE: Importing Scanner Module Classes in Python\nDESCRIPTION: This snippet shows how to import the main classes from the PyMoDAQ scanner module. It includes ScanType and ScanInfo from utils, and Scanner from the scanner submodule.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/api/api_utility_modules/api_scanner_module.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pymodaq.utils.scanner.utils import ScanType, ScanInfo\nfrom pymodaq.utils.scanner.scanner import Scanner\n```\n\n----------------------------------------\n\nTITLE: DataWithAxes Serialization Method in PyMoDAQ\nDESCRIPTION: Implementation of the serialization method for DataWithAxes objects. This method converts the complex data structure with its associated metadata into a sequence of bytes for transmission over TCP/IP.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/tcpip.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef dwa_serialization(self, dwa: DataWithAxes) -> bytes:\n    \"\"\" Convert a DataWithAxes into a bytes string\n\n    Parameters\n    ----------\n    dwa: DataWithAxes\n\n    Returns\n    -------\n    bytes: the total bytes message to serialize the DataWithAxes\n\n    Notes\n    -----\n    The bytes sequence is constructed as:\n\n    * serialize the string type: 'DataWithAxes'\n    * serialize the timestamp: float\n    * serialize the name\n    * serialize the source enum as a string\n    * serialize the dim enum as a string\n    * serialize the distribution enum as a string\n    * serialize the list of numpy arrays\n    * serialize the list of labels\n    * serialize the origin\n    * serialize the nav_index tuple as a list of int\n    * serialize the list of axis\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Base Classes for TCP Server and Client in PyMoDAQ\nDESCRIPTION: This module provides base classes for implementing TCP servers and clients in PyMoDAQ. It includes core functionality for network communication within the project.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/api/utility_api/tcp_ip.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: pymodaq.utils.tcp_ip.tcp_server_client\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Updating Hidden Imports in __init__.py for PyMoDAQ 4 Plugin\nDESCRIPTION: Example of updated imports in the __init__.py file of a plugin, which includes initialization code specific to plugins.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_update_to_v4.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq.utils.parameter import Parameter\nfrom pymodaq.utils.managers.instrument_manager import initialize_device_module\nfrom . import daq_move_XXX\n\nconfig = {\n    'name': 'Template',\n    'version': '1.0.0'\n}\n\nclass DAQ_Move_Template:\n    controller = Parameter()\ninitialize_device_module(controller=DAQ_Move_Template, module=daq_move_XXX)\n```\n\n----------------------------------------\n\nTITLE: Handling TCP/IP Message Transmission in PyMoDAQ\nDESCRIPTION: Functions to ensure complete transmission and reception of data over TCP/IP connections. These functions handle message chunking, ensuring the entire message is received or sent regardless of socket buffer sizes.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/tcpip.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef check_received_length(sock,length):\n    l=0\n    data_bytes=b''\n    while l<length:\n        if l<length-4096:\n            data_bytes_tmp=sock.recv(4096)\n        else:\n            data_bytes_tmp=sock.recv(length-l)\n        l+=len(data_bytes_tmp)\n        data_bytes+=data_bytes_tmp\n    #print(data_bytes)\n    return data_bytes\n\ndef check_sended(socket, data_bytes):\n    sended = 0\n    while sended < len(data_bytes):\n        sended += socket.send(data_bytes[sended:])\n```\n\n----------------------------------------\n\nTITLE: Serializing Objects to Bytes in PyMoDAQ\nDESCRIPTION: This module provides methods for serializing objects to bytes and deserializing bytes back to objects in PyMoDAQ. It is part of the TCP/IP utilities.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/api/utility_api/tcp_ip.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: pymodaq.utils.tcp_ip.serializer\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Extracting Fitted Lifetime Parameter in Python\nDESCRIPTION: This code extracts the fitted lifetime parameter from the previous fit and formats it for display in picoseconds.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/data_analysis_tutorial.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nf'Life time: {dwa_electrons_fitted.fit_coeffs[0][3] *1e12} ps'\n```\n\n----------------------------------------\n\nTITLE: Setting USB Port Permissions for Arduino in Ubuntu\nDESCRIPTION: Command to give read and write permissions to all users for the Arduino USB port. This is necessary to allow the Arduino IDE to communicate with the board.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/lab_story_folder/arduino_ubuntu.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod a+rw /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Exposure and Grating in PyMoDAQ Plugin\nDESCRIPTION: This snippet shows how to set the camera exposure time and grating in a PyMoDAQ plugin. It converts the exposure time from milliseconds to seconds, updates the settings, and sets the spectrometer wavelength.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.controller.SetExposureTime(self.settings.child('camera_settings','exposure').value()/1000) #temp should be in s\n(err, timings) = self.controller.GetAcquisitionTimings()\nself.settings.child('camera_settings','exposure').setValue(timings['exposure']*1000)\nelif param.name() == 'grating':\n    index_grating = self.grating_list.index(param.value())\n    self.get_set_grating(index_grating)\n    self.emit_status(ThreadCommand('show_splash', [\"Setting wavelength\"]))\n    err = self.controller.SetWavelengthSR(0, self.settings.child('spectro_settings','spectro_wl').value())\n    self.emit_status(ThreadCommand('close_splash'))\n```\n\n----------------------------------------\n\nTITLE: Selecting Files in PyMoDAQ GUI\nDESCRIPTION: This module provides file selection functionality for the PyMoDAQ GUI. It includes a 'select_file' function that allows users to choose files within the application.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/api/utility_api/file_management.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: pymodaq_gui.utils.file_io\n   :members: select_file\n```\n\n----------------------------------------\n\nTITLE: File Structure and Organization - PyMoDAQ PID Module\nDESCRIPTION: Overview of the main file components in the PyMoDAQ PID module located in /src/pymodaq/pid/. Lists core files including utils.py, daq_move_PID.py, and pid_controller.py along with their purposes.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/extensions_folder/pid_module.rst#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n/src/pymodaq/pid/\n* utils.py - defines utility classes and PIDModelGeneric\n* daq_move_PID.py - defines virtual actuator for PID setpoint control\n* pid_controller.py - core file defining DAQ_PID and PIDRunner classes\n```\n\n----------------------------------------\n\nTITLE: Enabling Live Mode in PyMoDAQ Plugin\nDESCRIPTION: This code demonstrates how to enable live mode in a PyMoDAQ plugin by setting the live_mode_available class attribute to True and handling the 'live' parameter in the grab_data method.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass DAQ_2DViewer_MockCamera(DAQ_Viewer_base):\n\n    live_mode_available = True\n\ndef grab_data(self, Naverage=1, **kwargs):\n    \"\"\"Start a grab from the detector\n\n    Parameters\n    ----------\n    Naverage: int\n        Number of hardware averaging (if hardware averaging is possible, self.hardware_averaging should be set to\n```\n\n----------------------------------------\n\nTITLE: Importing Bayesian Optimization Classes in Python\nDESCRIPTION: This snippet shows how to import the main classes for the Bayesian Optimization extension from the pymodaq.extensions module. These classes are essential for implementing Bayesian optimization in PyMoDAQ projects.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/api/api_extensions/api_bayesian.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq.extensions import BayesianOptimisation, BayesianModelGeneric, BayesianModelDefault\n```\n\n----------------------------------------\n\nTITLE: Data Deserialization in PyMoDAQ\nDESCRIPTION: Code snippet showing the structure of data deserialization for distributions, data, labels, origin, navigation indexes, and axes in PyMoDAQ.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/tcpip.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndistribution=self.string_deserialization(),\ndata=self.list_deserialization(),\nlabels=self.list_deserialization(),\norigin=self.string_deserialization(),\nnav_indexes=tuple(self.list_deserialization()),\naxes=self.list_deserialization(),\n```\n\n----------------------------------------\n\nTITLE: Enabling Hardware Averaging in PyMoDAQ Plugin\nDESCRIPTION: This code snippet shows how to enable hardware averaging in a PyMoDAQ plugin by setting the hardware_averaging class attribute to True.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer_folder/instrument_plugins.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass DAQ_NDViewer_Template(DAQ_Viewer_base):\n\"\"\"\n Template to be used in order to write your own viewer modules\n\"\"\"\n    hardware_averaging = True #will use the accumulate acquisition mode if averaging\n    #is True else averaging is done software wise\n```\n\n----------------------------------------\n\nTITLE: Documenting ThreadCommand Class in PyMoDAQ Utils Module\nDESCRIPTION: This snippet uses Sphinx autodoc to generate documentation for the ThreadCommand class from the pymodaq_utils.utils module. It includes all members of the class in the documentation.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/api/utility_api/utility_classes.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: pymodaq_utils.utils\n   :members: ThreadCommand\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sockets for PyMoDAQ Protocol\nDESCRIPTION: This module contains custom socket implementations to support the PyMoDAQ protocol. It extends the standard socket functionality to meet specific project requirements.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/api/utility_api/tcp_ip.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: pymodaq.utils.tcp_ip.mysocket\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Creating Batch File for H5 File Association on Windows\nDESCRIPTION: This batch script creates a file association for .h5 files with the H5Browser on Windows. It activates a conda environment and launches the H5Browser with the selected file as input.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/extensions_folder/h5browser.rst#2025-04-22_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n@ECHO OFF\ncall C:\\Miniconda3\\condabin\\conda.bat activate my_env\nh5browser --input %1\n```\n\n----------------------------------------\n\nTITLE: Installing External Libraries in PyMoDAQ Environment\nDESCRIPTION: Command for installing external libraries in the PyMoDAQ development environment using pip. This approach applies to PyLabLib, Instrumental, PyMeasure, and other similar packages.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_development.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n(pmd_dev) >pip install <library name>\n```\n\n----------------------------------------\n\nTITLE: Opening H5Browser with Command Line Argument in Python\nDESCRIPTION: This snippet demonstrates how to open the H5Browser with a specific .h5 file using a command line argument. It allows direct opening of a file without manual selection.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/extensions_folder/h5browser.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nh5browser --input my_h5_file.h5\n```\n\n----------------------------------------\n\nTITLE: Running PyMoDAQ Scripts\nDESCRIPTION: Commands to execute various PyMoDAQ modules and utilities.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/installation_tips.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndashboard\ndaq_scan\ndaq_logger\ndaq_viewer\ndaq_move\nh5browser\nplugin_manager\n```\n\n----------------------------------------\n\nTITLE: Arduino Sketch for TMP36 Temperature Sensor Reading\nDESCRIPTION: Arduino sketch that reads analog values from a TMP36 temperature sensor connected to the A0 pin and displays the temperature in the Serial Monitor.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/lab_story_folder/arduino_ubuntu.rst#2025-04-22_snippet_3\n\nLANGUAGE: arduino\nCODE:\n```\n// No actual code is shown in the image, just a screenshot reference\n```\n\n----------------------------------------\n\nTITLE: Launching the PyMoDAQ Plugin Manager from Command Line\nDESCRIPTION: Commands to open the Plugin Manager either using a Python module call or a direct command. The Plugin Manager allows users to install, update, or remove instrument plugins for PyMoDAQ.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/plugin_manager.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pymodaq_plugin_manager.manager\n```\n\nLANGUAGE: bash\nCODE:\n```\nplugin_manager\n```\n\n----------------------------------------\n\nTITLE: Converting PID output for actuators\nDESCRIPTION: Method to convert PID filter output into actuator commands for beam steering\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/extensions_folder/pid_module.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef convert_output(self, output, dt):\n    # Apply PID output directly to actuators\n    return output\n```\n\n----------------------------------------\n\nTITLE: Modifying Python Telemetrix Script for Temperature Reading\nDESCRIPTION: Key modifications to the analog_input_scan_interval.py example script to properly read temperature from the TMP36 sensor through the Arduino's analog input.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/lab_story_folder/arduino_ubuntu.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nANALOG_PIN = 0  # Reading from A0 analog input pin\n\n# In the setup function:\nmy_board.set_pin_mode_analog_input(pin, 0, the_callback)  # Regular output in time\nmy_board.set_analog_scan_interval(255)  # Decreases the output frequency\n\n# In the callback function, replace:\n# print(f'Value: {data[CB_VALUE]}')\n# with:\nprint(f'Value: {500*data[CB_VALUE]/1023 - 50}')  # Convert to Celsius\n```\n\n----------------------------------------\n\nTITLE: Installing PyMoDAQ and Required Dependencies\nDESCRIPTION: Commands to install PyMoDAQ version 3.6.8, PyQt5, and the mock plugins package for testing the PID module.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/extensions_folder/pid_module.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pymodaq==3.6.8\npip install pyqt5\npip install git+https://github.com/PyMoDAQ/pymodaq_plugins_pid.git\n```\n\n----------------------------------------\n\nTITLE: Documenting CustomApp Class using reStructuredText\nDESCRIPTION: This reStructuredText code creates documentation for the CustomApp base class from the pymodaq_gui.utils.custom_app module. It uses directives for module reference, autosummary, and autoclass to generate comprehensive API documentation.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/api/api_extensions/api_custom_app.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nThe CustomApp base class\n========================\n\n.. currentmodule:: pymodaq_gui.utils.custom_app\n\n.. autosummary::\n   CustomApp\n\n.. autoclass:: CustomApp\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Running PyMoDAQ Modules Directly\nDESCRIPTION: Commands to run specific PyMoDAQ Python modules using the python -m option.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/installation_tips.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m pymodaq.dashboard\npython -m pymodaq.extensions.daq_scan\npython -m pymodaq.extensions.daq_logger\npython -m pymodaq.control_modules.daq_viewer\npython -m pymodaq.control_modules.daq_move\npython -m pymodaq.extensions.h5browser\npython -m pymodaq_plugin_manager.manager\n```\n\n----------------------------------------\n\nTITLE: Configuring Demultiplexer to Control Different Axis\nDESCRIPTION: Python script that properly configures the E870 controller's demultiplexer to switch between different axes. This is necessary before sending movement commands to a different axis due to the controller's design.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_development.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Script that configures the demultiplexer to change the controlled axis\n```\n\n----------------------------------------\n\nTITLE: Installing Jupyter Lab with Pip\nDESCRIPTION: Command to install Jupyter Lab and Node.js using pip in an environment named 'jupyter'.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/jupyter_lab.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(jupyter) pip install jupyterlab nodejs\n```\n\n----------------------------------------\n\nTITLE: Specifying PyMoDAQ 4 Dependency in Plugin Requirements\nDESCRIPTION: Example of adding a dependency to PyMoDAQ 4 in the plugin's requirements file to ensure compatibility.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_update_to_v4.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pymodaq.utils.plugins import get_plugin_module\nimport toml\n\nconfig = toml.load(get_plugin_module().config_path)\nPACKAGE_NAME = 'pymodaq_plugins_XXXX'\n\nrequirements = [\n    'pymodaq>=4.0.0'\n]\n```\n\n----------------------------------------\n\nTITLE: Testing OSM Command on Second Axis\nDESCRIPTION: Modified script that attempts to control the second axis by changing the first parameter of the OSM command to 2, which results in an error because the E870 controller requires configuring the demultiplexer first.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_development.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Script with OSM command modified to target channel 2, which results in an error\n```\n\n----------------------------------------\n\nTITLE: Launching PyMoDAQ Viewer\nDESCRIPTION: This command launches the PyMoDAQ viewer application for data acquisition and visualization.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/lab_story_folder/arduino_ubuntu.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n(arduino_ubuntu) $ daq_viewer\n```\n\n----------------------------------------\n\nTITLE: Configuring PyMoDAQ Environment Backups in TOML\nDESCRIPTION: Configuration settings for controlling PyMoDAQ's environment backup functionality. Defines whether to keep backups, where to store them, and how many to retain.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/backup_environments.rst#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[backup]\nkeep_backup = true        # should PyMoDAQ keep backups of environments' installed packages?\nfolder = \"environments\"   # where to keep the backup (relative to local config path)\nlimit = 25                # how many to keep (maximum)\n```\n\n----------------------------------------\n\nTITLE: Installing Qt Backends\nDESCRIPTION: Commands for installing different Qt backend options for PyMoDAQ.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/installation_tips.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install pyqt5\npip install pyside2\npip install pyqt6\npip install pyside6\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Scanner Documentation\nDESCRIPTION: Full documentation of the Scanner module using reStructuredText format, covering scan types, configurations, and settings with references to figures and external documentation.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/extensions_folder/daq_scan/scanner.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _scanner_paragraph:\\n\\nScanner\\n-------\\n\\nThe *Scanner* module is an object dealing with configuration of scan modes and is mainly used by the DAQ_Scan extension.\\nIt features a graphical interface, see :numref:`scan2D_fig`, allowing the configuration of the scan type and all its\\nparticular settings.\n```\n\n----------------------------------------\n\nTITLE: Installing Modified Arduino Plugin from GitHub\nDESCRIPTION: This command installs a modified version of the PyMoDAQ Arduino plugin directly from a GitHub repository. Replace placeholders with actual GitHub account, repository, and branch names.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/lab_story_folder/arduino_ubuntu.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n(any environment) $ pip install git+https://github.com/<GitHub account>/<repository name>.git@<branch name>\n```\n\n----------------------------------------\n\nTITLE: Cloning a Remote Git Repository\nDESCRIPTION: This command creates a local copy of a remote Git repository, including all branches and commit history.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone <the Git address of our remote repository>\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies for PyMoDAQ\nDESCRIPTION: Command to install required QT environment dependencies on Ubuntu Linux systems.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/installation_tips.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 x11-utils  libgl1 libegl1\n```\n\n----------------------------------------\n\nTITLE: DAQ Move Configuration Settings in TOML\nDESCRIPTION: Configuration settings for the DAQ Move module defined in a TOML file. These settings control the module's behavior including precision, polling intervals, timeouts, and display preferences.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/modules/DAQ_Move.rst#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[actuator]\nepsilon_default = 1\npolling_interval_ms = 100\npolling_timeout_s = 20  # s\nrefresh_timeout_ms = 500  # ms\nsiprefix = true\ndisplay_units = true\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with a Message in Git\nDESCRIPTION: This command commits all tracked changes with a descriptive message. The -am flag combines the add and commit operations, staging all modified tracked files and creating a commit with the specified message.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -am \"The funny monkey has been added.\"\n```\n\n----------------------------------------\n\nTITLE: Launching PyMoDAQ Dashboard\nDESCRIPTION: Command to launch the PyMoDAQ dashboard for configuring and using the PID module.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/extensions_folder/pid_module.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndashboard\n```\n\n----------------------------------------\n\nTITLE: Setting Up PyMoDAQ System Folders\nDESCRIPTION: Commands to create and set permissions for PyMoDAQ system configuration folder.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/installation_tips.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir /etc/.pymodaq/\nsudo chmod uo+rw /etc/.pymodaq\n```\n\n----------------------------------------\n\nTITLE: Example of PyMoDAQ Environment Backup File Structure\nDESCRIPTION: Shows the format of a PyMoDAQ backup file with metadata comments indicating the Python executable path and version, followed by a list of packages with their versions.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/backup_environments.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# executable: /home/mairain/.virtualenvs/pymodaq-dev/bin/python\n# version: 3.12.3 (main, Jan 17 2025, 18:03:48) [GCC 13.3.0]\n\nPySide6==6.8.1\nPySide6_Addons==6.8.1\nPySide6_Essentials==6.8.1\n...\n```\n\n----------------------------------------\n\nTITLE: Switching Back to the Main Branch in Git\nDESCRIPTION: This command switches from the current branch back to the main branch. It's typically used when preparing to merge changes from a development branch into the main branch.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ git switch main\n```\n\n----------------------------------------\n\nTITLE: Specifying Documentation Dependencies for PyMoDAQ\nDESCRIPTION: This code snippet lists the required Python packages and their versions for building PyMoDAQ documentation. It includes Sphinx and related packages for documentation generation, as well as PyMoDAQ-specific dependencies from GitHub repositories.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsphinx<7  # constraint from readthedocs\nsphinx_rtd_theme>=1.2.2\ndocutils==0.18.1\nreleases\nsphinx-csv-filter\npillow\ntoml\npyqt6\nnumpydoc\nsphinx-datatables\npymodaq_gui @ git+https://github.com/PyMoDAQ/pymodaq_gui.git@5.0.x_dev\npymodaq_utils @ git+https://github.com/PyMoDAQ/pymodaq_utils.git@0.0.x_dev\npymodaq_data @ git+https://github.com/PyMoDAQ/pymodaq_data.git@5.0.x_dev\nimportlib\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair in Bash\nDESCRIPTION: This command generates an SSH key pair using the Ed25519 algorithm. The user should replace 'your_email@example.com' with their GitHub-associated email address.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/connect_github_with_ssh.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh-keygen -t ed25519 -C \"your_email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Remote Repository Connection in Git\nDESCRIPTION: This command displays information about the configured remote repositories, showing fetch and push URLs.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote -v\n```\n\n----------------------------------------\n\nTITLE: Installing Jupyter Lab with Conda\nDESCRIPTION: Command to install Jupyter Lab and Node.js in a conda environment named 'jupyter'.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/jupyter_lab.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n(jupyter) conda install jupyterlab nodejs\n```\n\n----------------------------------------\n\nTITLE: Installing PyMoDAQ Arduino Plugin\nDESCRIPTION: This command installs the PyMoDAQ Arduino plugin using pip in the Arduino Ubuntu environment.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/lab_story_folder/arduino_ubuntu.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n(arduino_ubuntu) $ pip install pymodaq_plugins_arduino\n```\n\n----------------------------------------\n\nTITLE: Adding Private SSH Key to ssh-agent in Bash\nDESCRIPTION: This command adds the generated private SSH key to the ssh-agent, allowing SSH to manage and use this key for authentication.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/connect_github_with_ssh.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh-add ~/.ssh/id_ed25519\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for Viewing Commit History\nDESCRIPTION: Command to display the commit history of the Git repository, showing authors, dates, and commit messages in chronological order.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_development.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit log\n```\n\n----------------------------------------\n\nTITLE: Installing PyMoDAQ and PyQt5 in Arduino Ubuntu Environment\nDESCRIPTION: This command installs PyMoDAQ and PyQt5 in the Arduino Ubuntu environment using pip.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/lab_story_folder/arduino_ubuntu.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n(arduino_ubuntu) $ pip install pymodaq pyqt5\n```\n\n----------------------------------------\n\nTITLE: Copying Public SSH Key to Clipboard in Bash\nDESCRIPTION: This command copies the content of the public SSH key file to the clipboard, preparing it for addition to the GitHub account settings.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/connect_github_with_ssh.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ clip < ~/.ssh/id_ed25519.pub\n```\n\n----------------------------------------\n\nTITLE: Git Diff Command for Checking Repository Changes\nDESCRIPTION: Command to display the differences between the working directory and the last commit, useful for reviewing changes before committing them.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_development.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Installing pyleco Package for LECO Communication in Python\nDESCRIPTION: Command to install the pyleco package using pip, which is required for LECO communication in PyMoDAQ.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/leco.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyleco\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a Git Repository\nDESCRIPTION: Commands to create a new directory and initialize it as a Git repository.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir MyLocalRepository\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd MyLocalRepository\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git init\n```\n\n----------------------------------------\n\nTITLE: Git Push Command for Uploading to Remote Repository\nDESCRIPTION: Command to upload local commits to the remote Git repository, making your changes available to others and providing a backup of your work.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_development.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Installing IPyKernel in PyMoDAQ Environment\nDESCRIPTION: Command to install the IPython kernel package in the 'form_pymodaq' environment. This is required to make this environment available to Jupyter.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/jupyter_lab.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(form_pymodaq) pip install ipykernel\n```\n\n----------------------------------------\n\nTITLE: Adding Files to Git Tracking\nDESCRIPTION: Command to begin tracking a new file with Git, moving it from untracked to staged status.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git add my_first_amazing_file.txt\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Packages in Conda Environment\nDESCRIPTION: Command to verify installed packages in the conda environment after installing PIPython. This helps confirm that required dependencies like pyusb, pysocket, and pyserial were properly installed.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_development.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(pmd_dev) >conda list\n```\n\n----------------------------------------\n\nTITLE: Registering PyMoDAQ Environment as Jupyter Kernel\nDESCRIPTION: Command to register the 'form_pymodaq' environment as a kernel in Jupyter with the display name 'pymodaq'. This allows notebooks to use this specific Python environment.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/jupyter_lab.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n(form_pymodaq) python -m ipykernel install --user --name form_pymodaq --display-name pymodaq\n```\n\n----------------------------------------\n\nTITLE: Checking File Differences with Git Diff Command\nDESCRIPTION: The git diff command shows changes made to files since the last commit. It displays added content in green and removed content in red, allowing users to review modifications before committing.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git diff\n```\n\n----------------------------------------\n\nTITLE: Installing PIPython Package for PI Controllers\nDESCRIPTION: Command for installing the PIPython package in the PyMoDAQ development environment. This package is used to communicate with PI controllers like the E870.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_development.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(pmd_dev) >pip install pipython\n```\n\n----------------------------------------\n\nTITLE: Running USB Device List Command in Ubuntu Terminal\nDESCRIPTION: The 'lsusb' command displays all USB devices connected to the computer, which helps verify the Arduino board is properly recognized by the system.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/lab_story_folder/arduino_ubuntu.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlsusb\n```\n\n----------------------------------------\n\nTITLE: Reverting to a Previous Commit in Git\nDESCRIPTION: The git revert command undoes changes from a specific commit. It creates a new commit that reverses the changes made in the specified commit, identified by its hash (6045fb4 in this example).\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git revert 6045fb4\n```\n\n----------------------------------------\n\nTITLE: Publishing to TestPyPI using Twine\nDESCRIPTION: Command to upload package distribution files to TestPyPI using Twine\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/new_plugin.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntwine upload -r testpypi dist/*\n```\n\n----------------------------------------\n\nTITLE: Git Repository Setup Commands\nDESCRIPTION: Series of Git commands for setting up a local development environment for PyMoDAQ documentation\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch pymodaq-dev https://github.com/PyMoDAQ/PyMoDAQ.git pmd4_write_doc_tutorial\ncd pmd4_write_doc_tutorial\ngit remote set-url origin https://github.com/<your GitHub name>/PyMoDAQ.git\ngit remote -v\ngit checkout -b write-doc-tutorial\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch in Git\nDESCRIPTION: This command creates a new branch called 'develop' based on the current branch. The new branch is a separate line of development that allows for isolated changes without affecting the main branch.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ git branch develop\n```\n\n----------------------------------------\n\nTITLE: Publishing to TestPyPI using Hatch\nDESCRIPTION: Alternative command to publish package to TestPyPI using Hatch build tool\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/new_plugin.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhatch publish -r test\n```\n\n----------------------------------------\n\nTITLE: Checking Git Repository Status\nDESCRIPTION: Command to view the current status of files in a Git repository, showing tracked, untracked, and modified files.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git status\n```\n\n----------------------------------------\n\nTITLE: Merging a Development Branch into Main\nDESCRIPTION: The git merge command incorporates changes from the specified branch (develop) into the current branch (main). This is used to integrate completed features or fixes from development branches into the main codebase.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ git merge develop\n```\n\n----------------------------------------\n\nTITLE: Installing the Telemetrix Python Package\nDESCRIPTION: Command to install the Telemetrix Python package using pip in a virtual environment. This package enables Python communication with the Arduino board.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/lab_story_folder/arduino_ubuntu.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(arduino_ubuntu) pip install telemetrix\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Commit History\nDESCRIPTION: Commands to view the commit history of a Git repository, with the standard format and a more compact one-line format.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git log\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git log --oneline\n```\n\n----------------------------------------\n\nTITLE: Adding a Remote Repository in Git\nDESCRIPTION: This command connects a local Git repository to a remote repository on GitHub, typically named 'origin'.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add origin <the Git address of our remote repository>\n```\n\n----------------------------------------\n\nTITLE: Starting LECO Coordinator in Terminal\nDESCRIPTION: Command to start the LECO Coordinator, which is the necessary infrastructure for the LECO network.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/leco.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncoordinator\n```\n\n----------------------------------------\n\nTITLE: Git Commit Command with Message\nDESCRIPTION: Command to commit changes to the local Git repository with a descriptive commit message, preserving the current state of the code for future reference.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/plugin_development.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am \"First working version of the E870 controller plugin.\"\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository with Custom Local Folder Name\nDESCRIPTION: This variation of the clone command allows specifying a custom name for the local repository folder.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone <repository url> <your folder name>\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Conda Environment for PyMoDAQ PID Module\nDESCRIPTION: Commands to create a new conda environment named 'mock_beam_steering' with Python 3.8 and activate it for use with PyMoDAQ PID module.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/extensions_folder/pid_module.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n mock_beam_steering python=3.8\nconda activate mock_beam_steering\n```\n\n----------------------------------------\n\nTITLE: Committing Documentation Changes with Git\nDESCRIPTION: Command to commit documentation changes to a local Git repository with a descriptive commit message.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am \"Tutorial: How to contribute to PyMoDAQ documentation. Initial commit.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Toctree Structure for PyMoDAQ Library Reference in reStructuredText\nDESCRIPTION: This snippet defines the toctree structure for the PyMoDAQ library reference documentation. It specifies the maximum depth of 5 and includes links to various API modules and utility components.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/api/api_doc.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 5\n\n   /api/API_control_modules\n   /api/api_extensions\n   /api/API_Utility_Modules\n   /api/pymodaq_utils/pymodaq_utils\n   /api/pymodaq_gui/pymodaq_gui\n   /api/pymodaq_data/pymodaq_data\n   /api/api_callable_v4to5\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Page Structure in RST\nDESCRIPTION: Demonstrates how to create a document structure with title, section, and subsection in RST. Shows the proper heading underline characters for different heading levels.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\nTitle\n=====\n\nSection\n-------\n\nLorem ipsum lorem ipsum.\n\nSubsection\n++++++++++\n\nLorem ipsum lorem ipsum. Lorem ipsum lorem ipsum.\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Git Repository\nDESCRIPTION: Simple Git command to push committed changes to the remote repository before submitting a pull request.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Dashboard Extensions in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the Dashboard extensions documentation using reStructuredText syntax. It specifies the maximum depth of the table and lists the extension modules to be included.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/extensions.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   /extensions_folder/daq_scan/daq_scan\n   /extensions_folder/daq_logger\n   /extensions_folder/pid_module\n   /extensions_folder/bayesian\n   /extensions_folder/h5browser\n   /extensions_folder/console\n```\n\n----------------------------------------\n\nTITLE: Integrating Images in RST\nDESCRIPTION: Shows how to include an image with a caption, label for referencing, and custom width in RST. The images are stored in the /src/image directory.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. _fig_label\n.. figure:: /image/write_documentation/my_image.svg\n\t:width: 600\n\nCaption of the figure.\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information Globally\nDESCRIPTION: Commands to set up Git with your email and name globally for all repositories.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global user.email \"david.bresteau@cea.fr\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global user.name \"David Bresteau\"\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for PyMoDAQ Documentation in reStructuredText\nDESCRIPTION: This snippet creates a table of contents for documenting PyMoDAQ's DashBoard and Control Modules. It sets the maximum depth to 5 levels and includes paths to two module documentation files.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user_folder/dashboard_control_modules.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 5\n   :caption: Contents:\n\n   /modules/DashBoard\n   /modules/Control_Modules\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Lab Stories in reStructuredText\nDESCRIPTION: Configures a table of contents directive for the Lab Stories section of documentation, with a maximum depth of 2 levels and a caption of 'Contents:'. It includes a reference to an Arduino on Ubuntu guide.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/lab_story.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   lab_story_folder/arduino_ubuntu\n```\n\n----------------------------------------\n\nTITLE: Creating Basic RST Documentation File\nDESCRIPTION: Example of creating a basic reStructuredText file with a label and title for PyMoDAQ documentation\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _write_documentation:\n\nHow to contribute to PyMoDAQ's documentation?\n=============================================\n```\n\n----------------------------------------\n\nTITLE: Creating External Links in RST\nDESCRIPTION: Demonstrates how to create an external hyperlink in RST using the indirect hyperlink target approach with a standalone URL.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n`PyMoDAQ repository`__\n\n__ https://github.com/PyMoDAQ/PyMoDAQ\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents Structure\nDESCRIPTION: RestructuredText directive defining a table of contents tree with maximum depth of 2 levels, including links to developer documentation sections like contributing guides, plugin docs, custom app creation, managers, and version changelogs.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/developer.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   /developer_folder/contributing\n   /developer_folder/plugins\n   /developer_folder/custom_app\n   /developer_folder/managers\n   /developer_folder/whats_new34\n   /developer_folder/whats_new45\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Git Repository\nDESCRIPTION: Command to create a snapshot (commit) of the current state of tracked files with a descriptive message.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -am \"Initial commit of my amazing project. Add my first amazing file and say Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Cross-referencing Figures in RST\nDESCRIPTION: Demonstrates how to reference a figure using the numref directive in RST. Note that the referenced label doesn't include the underscore prefix.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n:numref:`fig_label`\n```\n\n----------------------------------------\n\nTITLE: Referencing Glossary Terms in RST\nDESCRIPTION: Shows how to reference a term defined in the glossary section of the documentation using the term directive.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n:term:`the glossary term`\n```\n\n----------------------------------------\n\nTITLE: Switching to a Different Branch in Git\nDESCRIPTION: The git switch command changes the active branch to the specified one (develop). This allows the user to work on a different version of the project without affecting other branches.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ git switch develop\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Branch to Remote Repository in Git\nDESCRIPTION: This command pushes the local 'main' branch to the remote repository named 'origin', setting up tracking.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ git push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Deleting a Branch After Merging in Git\nDESCRIPTION: This command removes the specified branch (develop) after its changes have been merged into another branch. The -d flag ensures that the branch is only deleted if it has been fully merged.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_tutorial.rst#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ git branch -d develop\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for PyMoDAQ Tutorials in reStructuredText\nDESCRIPTION: This RST code snippet creates a table of contents for PyMoDAQ tutorials using the toctree directive. It sets the maximum depth to 2 and includes a caption. The toctree links to various tutorial pages covering topics from Git usage to plugin development and data analysis.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _tutorials:\n\nTutorials\n=========\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   tutorials/git_github\n   tutorials/contribute_to_pymodaq_code\n   tutorials/new_plugin\n   tutorials/plugin_development\n   tutorials/write_documentation\n   tutorials/plugin_update_to_v4\n   tutorials/data_analysis_tutorial\n   tutorials/jupyter_lab\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for PyMoDAQ User's Guide in reStructuredText\nDESCRIPTION: This code snippet defines the structure of the PyMoDAQ User's Guide using reStructuredText. It sets up a table of contents with various sections covering installation, modules, extensions, configuration, and other important topics for users.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/user.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _user_guide:\n\nUser's Guide\n============\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   user_folder/installation_tips\n   user_folder/dashboard_control_modules\n   user_folder/extensions\n   user_folder/configuration\n   user_folder/useful_modules\n   user_folder/tcpip\n   user_folder/leco\n   user_folder/plugin_manager\n   user_folder/backup_environments\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure for PyMoDAQ Extensions using reStructuredText\nDESCRIPTION: This snippet sets up a table of contents for PyMoDAQ extension documentation. It includes sections for DAQ scan modules, Bayesian methods, and custom applications.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/api/api_extensions.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 5\n\n   api_extensions/api_DAQ_scan_Module\n   api_extensions/api_bayesian\n   api_extensions/api_custom_app\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Git/GitHub Documentation\nDESCRIPTION: This snippet defines a table of contents in reStructuredText format. It sets a maximum depth of 3 levels, includes a caption labeled 'Contents:', and lists three documentation files related to Git and GitHub usage.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/git_github.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n   :caption: Contents:\n\n   create_github_account\n   git_tutorial\n   connect_github_with_ssh\n```\n\n----------------------------------------\n\nTITLE: Python Module Entry Point Protection Example\nDESCRIPTION: Example showing how to protect code execution when importing a module using the main guard pattern. This prevents code from being executed when the module is imported, only running it when the script is run directly.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/glossary.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n```\n\n----------------------------------------\n\nTITLE: Updating Tutorial Table of Contents\nDESCRIPTION: Example of updating the toctree in tutorials.rst to include a new documentation entry\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\nTutorials\n=========\n\n.. toctree::\n    :maxdepth: 5\n    :caption: Contents:\n\n   tutorials/plugin_development\n   tutorials/write_documentation\n```\n\n----------------------------------------\n\nTITLE: Cross-referencing Other Pages in RST\nDESCRIPTION: Shows how to create a reference to another page in the documentation using the ref directive with custom display text.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n:ref:`text to display <label at the begining of the page>`\n```\n\n----------------------------------------\n\nTITLE: Example of Page Reference in RST\nDESCRIPTION: A concrete example of referencing the installation page in the documentation using the ref directive with a section label.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n:ref:`install PyMoDAQ <section_installation>`\n```\n\n----------------------------------------\n\nTITLE: Creating Lists in RST\nDESCRIPTION: Shows how to create a bulleted list with nested items in RST. Demonstrates proper indentation for nested list items.\nSOURCE: https://github.com/pymodaq/pymodaq.git/blob/5.0.x/docs/src/tutorials/write_documentation.rst#2025-04-22_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n* First item\n\n\t* First item of nested list\n\t* Second item of nested list\n\n* Second item\n```"
  }
]