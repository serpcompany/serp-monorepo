[
  {
    "owner": "openzeppelin",
    "repo": "openzeppelin-contracts",
    "content": "TITLE: Updating ERC20 Token Transfer Hook Implementation\nDESCRIPTION: Example showing how to migrate from _beforeTokenTransfer to the new _update function in ERC20 contracts. The new implementation consolidates transfer hooks into a single _update function.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-function _beforeTokenTransfer(\n+function _update(\n   address from,\n   address to,\n   uint256 amount\n ) internal virtual override {\n-  super._beforeTokenTransfer(from, to, amount);\n   require(!condition(), \"ERC20: wrong condition\");\n+  super._update(from, to, amount);\n }\n```\n\n----------------------------------------\n\nTITLE: Updating initializer pattern for reentrancy protection in Solidity\nDESCRIPTION: A code example showing how to update existing initializer pattern to use the new onlyInitializing modifier to prevent reentrancy risks. This demonstrates the recommended pattern for contract initialization in inheritance scenarios.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\ncontract A {\n-    function initialize() public   initializer { ... }\n+    function initialize() internal onlyInitializing { ... }\n}\ncontract B is A {\n    function initialize() public initializer {\n        A.initialize();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ERC721 Hook Signature in Solidity\nDESCRIPTION: This code snippet shows the breaking change in the ERC721 internal hook '_beforeTokenTransfer', which now includes an additional 'batchSize' parameter. This change is necessary to support batch minting via ERC721Consecutive.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId,\n+    uint256 batchSize\n) internal virtual override\n```\n\n----------------------------------------\n\nTITLE: Initializing ERC4626 Decimals in Solidity\nDESCRIPTION: This code snippet demonstrates how to initialize the new decimals variable in existing ERC4626 contracts when upgrading to version 4.8. It uses a reinitializer function to set up the vault token decimals.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#2025-04-16_snippet_9\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction migrateToV48() public reinitializer(2) {\n  __ERC4626_init(IERC20Upgradeable(asset()));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC165 Interface Support\nDESCRIPTION: Shows how to register EIP-165 interfaces by overriding the supportsInterface function instead of using _registerInterface from ERC165Storage.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n  return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ECDSA and MessageHashUtils Usage\nDESCRIPTION: Demonstrates how to adapt code to use the new MessageHashUtils library for digest creation while keeping ECDSA for signer recovery functionality.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n import {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n+import {MessageHashUtils} from \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\n\n contract Verifier {\n   using ECDSA for bytes32;\n+  using MessageHashUtils for bytes32;\n\n   function _verify(bytes32 data, bytes memory signature, address account) internal pure returns (bool) {\n     return data\n       .toEthSignedMessageHash()\n       .recover(signature) == account;\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Upgradeable Contract Imports\nDESCRIPTION: Shows how to update library and interface imports in upgradeable contracts by removing the Upgradeable suffix for libraries and interfaces.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n // Libraries\n-import {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\n+import {Address} from '@openzeppelin/contracts/utils/Address.sol';\n\n // Interfaces\n-import {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/interfaces/IERC20.sol';\n+import {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';\n```\n\n----------------------------------------\n\nTITLE: Migrating SafeMath to Math Utils\nDESCRIPTION: Example of updating SafeMath usage to the new Math utility contract, which contains the remaining methods after removing those superseded by native Solidity 0.8.0 overflow checks.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n+ import \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n function tryOperations(uint256 x, uint256 y) external view {\n-  (bool overflowsAdd, uint256 resultAdd) = SafeMath.tryAdd(x, y);\n+  (bool overflowsAdd, uint256 resultAdd) = Math.tryAdd(x, y);\n-  (bool overflowsSub, uint256 resultSub) = SafeMath.trySub(x, y);\n+  (bool overflowsSub, uint256 resultSub) = Math.trySub(x, y);\n-  (bool overflowsMul, uint256 resultMul) = SafeMath.tryMul(x, y);\n+  (bool overflowsMul, uint256 resultMul) = Math.tryMul(x, y);\n-  (bool overflowsDiv, uint256 resultDiv) = SafeMath.tryDiv(x, y);\n+  (bool overflowsDiv, uint256 resultDiv) = Math.tryDiv(x, y);\n   // ...\n }\n```\n\n----------------------------------------\n\nTITLE: Updating EIP712 Import in Solidity\nDESCRIPTION: This code snippet demonstrates how to update the import statement for EIP712, which is no longer a draft. Developers should update their imports to use the new file location.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: Solidity\nCODE:\n```\n-import \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\n+import \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\n```\n\n----------------------------------------\n\nTITLE: Updating ERC721Votes Import in Solidity\nDESCRIPTION: This code snippet shows how to update the import statement for ERC721Votes, which is no longer a draft. Developers should update their imports to use the new file location.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#2025-04-16_snippet_8\n\nLANGUAGE: Solidity\nCODE:\n```\n-import \"@openzeppelin/contracts/token/ERC721/extensions/draft-ERC721Votes.sol\";\n+import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Votes.sol\";\n```\n\n----------------------------------------\n\nTITLE: AccessControl Error Handling Pattern\nDESCRIPTION: Example regex pattern for catching AccessControl revert reasons in previous versions, which needs to be updated to handle custom errors in v5.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n/^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n```\n\n----------------------------------------\n\nTITLE: Updating GSN Recipient Contract Inheritance in Solidity\nDESCRIPTION: Example of how to update the inheritance for a contract using GSN (Gas Station Network) functionality from version 2.4.0-beta to 2.4.0. The change simplifies the inheritance structure by merging multiple GSN-related contracts.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#2025-04-16_snippet_11\n\nLANGUAGE: Solidity\nCODE:\n```\n-contract MyDapp is GSNRecipient, GSNBouncerSignature {\n+contract MyDapp is GSNRecipientSignature {\n```"
  }
]