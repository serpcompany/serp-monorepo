[
  {
    "owner": "anyproto",
    "repo": "docs.git",
    "content": "TITLE: Cloning Anytype Documentation Repository - Shell\nDESCRIPTION: Provides shell commands for cloning the Anytype documentation repository using SSH, HTTPS, and GitHub CLI. Dependencies include Git or GitHub CLI installed locally. Commands utilize `git clone` with the `--filter=tree:0` option for sparse cloning, or `gh repo clone` for GitHub CLI, accepting repository URLs as parameters. Inputs are the desired clone method; outputs are a local copy of the repository. Limitations: requires proper authentication for SSH, and GitHub CLI must be preconfigured.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone --filter=tree:0 git@github.com:anytypeio/community.git\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone --filter=tree:0 https://github.com/anytypeio/community.git\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh repo clone anytypeio/community -- --filter=tree:0\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks and Quotes - Markdown\nDESCRIPTION: Illustrates how to construct generic and language-specific code blocks (triple backticks, with or without a language designator) and block quotes prefixed with `>`. No dependencies. Parameters: code content and, optionally, the language identifier for syntax highlighting. Output is a specially rendered code box or indentation. Limitation: Code and quotes should not be mixed.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n``` creates a new code block.\n```py creates a new code block with Python syntax highlighting.\n```\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nUse > to start a quote block.\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Hint Blocks (Info, Warning, Success, Danger) in GitBook - Markdown\nDESCRIPTION: Demonstrates the use of custom hint/info/warning/success/danger blocks using the GitBook hint syntax. Dependencies: GitBook or compatible Markdown processor that supports hint blocks. Key parameter is the hint style. Inputs are the content within hint tags; outputs are visually distinct callout boxes. Limitation: This syntax may not be supported by all Markdown viewers.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n{% hint style=\"info\" %} Information Hint Block {% endhint %}\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n{% hint style=\"warning\" %} Warning Hint Block {% endhint %}\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n{% hint style=\"success\" %} Success Hint Block {% endhint %}\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n{% hint style=\"danger\" %} Success Hint Block {% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Formatting Headings in Markdown - Markdown\nDESCRIPTION: Shows how to create first, second, and third level headings in Markdown with hash (`#`) symbols. No dependencies beyond a Markdown processor. Parameters are heading text following the appropriate number of hashes. Input is a heading line; output in rendered Markdown is a heading of corresponding size. Constraints: Each heading must be on its own line.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n# Heading 1\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n## Heading 2\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n### Heading 3\n```\n\n----------------------------------------\n\nTITLE: Creating Un-Ordered and Ordered Lists - Markdown\nDESCRIPTION: Provides examples for both unordered (using asterisks or dashes) and ordered lists (numbers followed by periods) in Markdown. Dependencies: none. Parameters are the list marker and item text. Inputs are the itemized lines; outputs are bulleted or numbered lists after rendering. Indentation controls nesting.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n* Item 1\n* Item 2\n* Item 3\n    or\n- Item 1\n- Item 2\n- Item 3\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n1. Item 1\n2. Item 2\n3. Item 3\n```\n\n----------------------------------------\n\nTITLE: Bold, Italics, and Strikethrough Formatting - Markdown\nDESCRIPTION: Presents methods to format text as bold, italics, and strikethrough in Markdown using asterisks, underscores, and tildes. Dependencies: none. Key parameters are the markers and the text enclosed. Input is formatted text; output is stylized text in Markdown. Limitation: Strict syntax adherence required.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n**Bold Text**\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n_Italics Text_\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n~Strikethrough Text~\n```\n\n----------------------------------------\n\nTITLE: URL and Image Embedding Syntax - Markdown\nDESCRIPTION: Demonstrates Markdown syntax for embedding URLs and images with alternate text and URLs provided as parameters. No dependencies. Expects correct URLs; renders as clickable links or images. Limitation: Images must use proper pathing, and double parentheses needed for images using angle brackets in GitBook.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n[URL Name](https://example.com)\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](http://url/a.png)\n```\n\n----------------------------------------\n\nTITLE: Embedding Images and Media Files in Markdown - Markdown\nDESCRIPTION: Shows the syntax for embedding media using the Markdown image format, including the use of angle brackets for GitBook file paths. Dependencies: image files must exist in the specified '.gitbook/assets' folder. Input parameters are the caption and the file path. Output is an embedded image or media file in the rendered document. Constraint: Uses angle brackets to support file paths with spaces.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n![Media Caption](<.gitbook/assets/file-name>)\n\nE.g.:\n\n![Home page](<.gitbook/assets/Screenshot 2021-11-05 at 18.45.31.png>)\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Page Links - Markdown\nDESCRIPTION: Demonstrates the syntax for linking to other pages using Markdown style links. No additional dependencies required; can be used in any Markdown file. Main parameter is the link text and the target URL. Input is the link definition; output is a clickable link in rendered Markdown. Constraint: URL must be valid, intended for use within the documentation’s SUMMARY.md for navigation.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[Navigation](https://github.com/anytypeio/docs/blob/main/features/navigation.md)\n```\n\n----------------------------------------\n\nTITLE: Installing AnySync Netcheck Tool via Go Install - Go\nDESCRIPTION: This snippet shows the command to install the AnySync Netcheck tool directly from its repository using Go modules. The command fetches and installs the latest release of the tool. It requires Go to be installed and set up on your system. This should be run in a terminal, and it will produce an executable named 'any-sync-netcheck' in your Go bin directory.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/advanced/help/troubleshooting/anysync-netcheck-tool.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/anyproto/any-sync-tools/any-sync-netcheck@latest\n```\n\n----------------------------------------\n\nTITLE: Running AnySync Netcheck Tool - Go\nDESCRIPTION: This snippet demonstrates how to execute the AnySync Netcheck tool to check connectivity to Anytype nodes. The first command runs the tool with default output, while the second command adds the '-v' flag for verbose output, providing additional network diagnostics. The tool must be installed or downloaded prior to execution, and it should be run from a terminal or command prompt.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/advanced/help/troubleshooting/anysync-netcheck-tool.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nany-sync-netcheck\n```\n\nLANGUAGE: bash\nCODE:\n```\nany-sync-netcheck -v\n```\n\n----------------------------------------\n\nTITLE: Horizontal Rule and Inline Code Formatting - Markdown\nDESCRIPTION: Shows how to create a horizontal rule with hyphens and inline code using backticks. No dependencies. Key parameters: three consecutive hyphens or backtick characters enclosing code. Inputs are the Markdown syntax; outputs are a rendered line break or code font inline. Limitation: Must be placed on a separate line for the horizontal rule.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n---\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`Inline Code`\n```\n\n----------------------------------------\n\nTITLE: Defining Task Lists in Markdown - Markdown\nDESCRIPTION: Shows syntax for creating interactive checkboxes (task lists) in Markdown using [ ] and [x]. No dependencies. Main parameter is the position of the item in the list and checked status. Inputs are the item lines; output is a rendered checklist. Limitation: Some Markdown processors may not render checkboxes.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n* [ ] Un-checked Task\n* [x] Checked Task\n```\n\n----------------------------------------\n\nTITLE: Naming Media Files for Documentation Consistency - Markdown\nDESCRIPTION: Provides a naming convention for media files uploaded to the documentation repository, including examples of correct and incorrect file names. No dependencies; applies to file management discipline. Parameter is the hyphenated description, target page, and file extension. Input: file to upload; output: improved repository organization. Limitation: Enforced by convention, not technology.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n<image-caption>-<page>.<file-format>\n\nE.g:\n✔️ loadingscreen-intro.png\n❌ Screenshot 2021-11-05 at 18.45.31.png\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Table of Contents - Markdown\nDESCRIPTION: Creates a table of contents for the documentation using Markdown syntax. This code snippet provides a single navigational bullet point linking to the README.md file, which is commonly used as the project's main documentation entry. No dependencies are required; it can be used directly in any Markdown parser or viewer. The input is static, and the output is a rendered Markdown link, facilitating user navigation.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/fr-FR/SUMMARY.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Table of contents\n\n* [Documentation](README.md)\n```\n\n----------------------------------------\n\nTITLE: Navigating Deletion and Reset Options in Anytype App (Plaintext)\nDESCRIPTION: This snippet presents sequential navigation commands for users to delete their vault or log out within the Anytype application. The instructions detail the paths users should follow through the top menu to reset or recreate a new vault. Inputs are performed via the application's graphical interface, and there are no programming dependencies. Outputs result in changes to the user's account or vault state, and users must ensure correct sequence for intended results.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/advanced/data-and-security/delete-or-reset-your-account.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAnytype > Settings > Vault > Data management > Delete vault\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nAnytype > Settings > Vault > Log Out\n```\n\n----------------------------------------\n\nTITLE: Navigating to Debug > Reconcile in Anytype - Markdown\nDESCRIPTION: This snippet provides an instruction for users to access the 'Debug > Reconcile' function through the application's menu bar. The use of backticks highlights the navigation path for clarity within documentation. It assumes familiarity with Anytype's UI and that the user has access to the desktop application. No code is executed; this is intended as a user guidance pattern for in-app navigation.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/advanced/help/troubleshooting/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDebug > Reconcile\n```\n\n----------------------------------------\n\nTITLE: Presenting Static Discount Codes in Anytype Memberships Documentation - Markdown\nDESCRIPTION: This snippet presents static discount code strings to users wishing to obtain Builder or Co-Creator memberships at pre-order discounted rates. The discount codes are shown in Markdown using inline code formatting to emphasize their significance for copying and pasting at checkout. No programming dependencies are required, and the strings do not accept parameters or inputs; they are static and intended to be manually applied by users.\nSOURCE: https://github.com/anyproto/docs.git/blob/main/advanced/monetization.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`BetaBuilderPreOrder2024`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`BetaCoCreatorPreOrder2024`\n```\n\n----------------------------------------\n\nTITLE: Embedding URLs in Markdown\nDESCRIPTION: Markdown syntax for embedding external URLs to Anytype blog articles and GitHub project board\nSOURCE: https://github.com/anyproto/docs.git/blob/main/advanced/feature-list-by-platform/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% embed url=\"https://blog.anytype.io/notion-alternative/\" %}\n\n{% embed url=\"https://blog.anytype.io/evernote-alternative/\" %}\n\n{% embed url=\"https://github.com/orgs/anyproto/projects/1/views/1\" %}\n```"
  }
]