[
  {
    "owner": "w3cj",
    "repo": "stoker",
    "content": "TITLE: Implementing Error Handling Middleware in Hono\nDESCRIPTION: Example of using Stoker's onError middleware with Hono for standardized error handling. This middleware formats errors as JSON responses and includes stack traces in non-production environments.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\n\nimport onError from \"stoker/middlewares/on-error\";\n\nconst app = new Hono();\n\napp.onError(onError);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Implementing 404 Not Found Middleware in Hono\nDESCRIPTION: Example of using Stoker's notFound middleware with Hono to handle routes that don't exist. This provides a standardized JSON response with the appropriate 404 status code.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\n\nimport notFound from \"stoker/middlewares/not-found\";\n\nconst app = new Hono();\n\napp.notFound(notFound);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Status Codes with Hono and OpenAPI\nDESCRIPTION: Example showing how to use the HTTP status code constants from Stoker with Hono and OpenAPI for route definitions and error handling. The constants provide type-safe alternatives to raw status code numbers.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoute, OpenAPIHono, z } from \"@hono/zod-openapi\";\n\nimport * as HttpStatusCodes from \"stoker/http-status-codes\";\n\nconst app = new OpenAPIHono();\n\napp.notFound((c) => {\n  return c.json({\n    message: `Not Found - ${c.req.path}`,\n  }, HttpStatusCodes.NOT_FOUND);\n});\n\napp.onError((err, c) => {\n  return c.json(\n    {\n      message: err.message,\n    },\n    HttpStatusCodes.INTERNAL_SERVER_ERROR,\n  );\n});\n\napp.openapi(\n  createRoute({\n    path: \"/\",\n    tags: [\"Index\"],\n    description: \"Index route\",\n    method: \"get\",\n    responses: {\n      [HttpStatusCodes.OK]: {\n        content: {\n          \"application/json\": {\n            schema: z.object({\n              message: z.string(),\n            }),\n          },\n        },\n        description: \"Index route\",\n      },\n    },\n  }),\n  (c) => {\n    return c.json({ message: \"Hello World\" }, HttpStatusCodes.OK);\n  },\n);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Using Default OpenAPI Hook with Hono\nDESCRIPTION: Example of using Stoker's default OpenAPI hook with Hono for handling validation errors. This hook provides standardized error responses for Zod validation failures with a 422 status code.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAPIHono } from \"@hono/zod-openapi\";\n\nimport defaultHook from \"stoker/openapi/default-hook\";\n\n/*\nAny validation errors will respond with status code 422 and body:\n{\n  success: false,\n  error: {}, // Full Zod Error\n}\n*/\nconst app = new OpenAPIHono({\n  defaultHook,\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Zod Error Schema Creation for Validation Errors\nDESCRIPTION: Implementation of error schema generation for Zod validation errors. Demonstrates creation of validation error messages for object schemas.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoute, z } from \"@hono/zod-openapi\";\n\nimport * as HttpStatusCodes from \"stoker/http-status-codes\";\nimport jsonContent from \"stoker/openapi/helpers/json-content\";\nimport createErrorSchema from \"stoker/openapi/schemas/create-error-schema\";\n\nconst TaskSchema = z.object({\n  name: z.string(),\n  completed: z.boolean().default(false),\n});\n\nexport const createTask = createRoute({\n  method: \"post\",\n  path: \"/task\",\n  request: {\n    body: jsonContent(TaskSchema, \"The Task\"),\n  },\n  responses: {\n    // ... OK response here\n    [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(\n      // Creates example schema with validation messages for name / completed\n      createErrorSchema(TaskSchema),\n      \"Invalid task\",\n    ),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Message Object Schema Creation for Error Handling\nDESCRIPTION: Utility for creating standardized error message schemas with Hono OpenAPI. Shows implementation of error response handling with status codes and phrases.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoute, OpenAPIHono, z } from \"@hono/zod-openapi\";\n\nimport * as HttpStatusCodes from \"stoker/http-status-codes\";\nimport * as HttpStatusPhrases from \"stoker/http-status-phrases\";\nimport jsonContent from \"stoker/openapi/helpers/json-content\";\nimport createMessageObjectSchema from \"stoker/openapi/schemas/create-message-object\";\nimport IdParamsSchema from \"stoker/openapi/schemas/id-params\";\n\nconst app = new OpenAPIHono();\n\napp.openapi(\n  createRoute({\n    method: \"get\",\n    path: \"/some-thing-that-might-not-be-found\",\n    responses: {\n      [HttpStatusCodes.NOT_FOUND]: jsonContent(\n        createMessageObjectSchema(HttpStatusPhrases.NOT_FOUND),\n        HttpStatusPhrases.NOT_FOUND,\n      ),\n    },\n  }),\n  (c) => {\n    return c.json({\n      message: HttpStatusPhrases.NOT_FOUND,\n    }, HttpStatusCodes.NOT_FOUND);\n  },\n);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Using ID Parameter Schema with Hono OpenAPI\nDESCRIPTION: Example of using Stoker's IdParamsSchema to validate numeric ID parameters in route paths. This ensures that the id parameter is a valid number before processing the request.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoute, OpenAPIHono, z } from \"@hono/zod-openapi\";\n\nimport * as HttpStatusCodes from \"stoker/http-status-codes\";\nimport jsonContent from \"stoker/openapi/helpers/json-content\";\nimport IdParamsSchema from \"stoker/openapi/schemas/id-params\";\n\nconst app = new OpenAPIHono();\n\napp.openapi(\n  createRoute({\n    method: \"get\",\n    path: \"/users/{id}\",\n    request: {\n      params: IdParamsSchema,\n    },\n    responses: {\n      [HttpStatusCodes.OK]: jsonContent(\n        z.object({\n          id: z.number(),\n        }),\n        \"Retrieve the user\",\n      ),\n    },\n  }),\n  (c) => {\n    // id is a valid number\n    const { id } = c.req.valid(\"param\");\n    return c.json({\n      id,\n    }, HttpStatusCodes.OK);\n  },\n);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Custom Path Parameter Validation with Hono OpenAPI\nDESCRIPTION: Example of custom path parameter validation using various string validators (UUID, NanoID, CUID, ULID). Demonstrates flexible parameter naming and validation type selection.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoute, OpenAPIHono, z } from \"@hono/zod-openapi\";\n\nimport * as HttpStatusCodes from \"stoker/http-status-codes\";\nimport jsonContent from \"stoker/openapi/helpers/json-content\";\nimport getParamsSchema from \"stoker/openapi/schemas/get-params-schema\";\n\nconst app = new OpenAPIHono();\n\napp.openapi(\n  createRoute({\n    method: \"get\",\n    path: \"/users/{userId}\",\n    request: {\n      params: getParamsSchema({\n        name: \"userId\",\n        validator: \"nanoid\",\n      }),\n    },\n    responses: {\n      [HttpStatusCodes.OK]: jsonContent(\n        z.object({\n          userId: z.nanoid(),\n        }),\n        \"Retrieve the user\",\n      ),\n    },\n  }),\n  (c) => {\n    // userId is a valid nanoid\n    const { userId } = c.req.valid(\"param\");\n    return c.json({\n      userId,\n    }, HttpStatusCodes.OK);\n  },\n);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: UUID Path Parameter Validation with Hono OpenAPI\nDESCRIPTION: Implementation of UUID validation for path parameters using Hono OpenAPI and Zod. Shows setup of a GET route with UUID validation and corresponding response schema.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoute, OpenAPIHono, z } from \"@hono/zod-openapi\";\n\nimport * as HttpStatusCodes from \"stoker/http-status-codes\";\nimport jsonContent from \"stoker/openapi/helpers/json-content\";\nimport IdUUIDParamsSchema from \"stoker/openapi/schemas/id-uuid-params\";\n\nconst app = new OpenAPIHono();\n\napp.openapi(\n  createRoute({\n    method: \"get\",\n    path: \"/users/{id}\",\n    request: {\n      params: IdUUIDParamsSchema,\n    },\n    responses: {\n      [HttpStatusCodes.OK]: jsonContent(\n        z.object({\n          id: z.uuid(),\n        }),\n        \"Retrieve the user\",\n      ),\n    },\n  }),\n  (c) => {\n    // id is a valid uuid\n    const { id } = c.req.valid(\"param\");\n    return c.json({\n      id,\n    }, HttpStatusCodes.OK);\n  },\n);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Validating Slug Path Parameters with Hono OpenAPI\nDESCRIPTION: Example showing how to validate a slug parameter in route path using Hono OpenAPI and Zod validation. The code demonstrates setting up a GET route with slug validation and response schema.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoute, OpenAPIHono, z } from \"@hono/zod-openapi\";\n\nimport * as HttpStatusCodes from \"stoker/http-status-codes\";\nimport jsonContent from \"stoker/openapi/helpers/json-content\";\nimport SlugParamsSchema from \"stoker/openapi/schemas/slug-params\";\n\nconst app = new OpenAPIHono();\n\napp.openapi(\n  createRoute({\n    method: \"get\",\n    path: \"/posts/{slug}\",\n    request: {\n      params: SlugParamsSchema,\n    },\n    responses: {\n      [HttpStatusCodes.OK]: jsonContent(\n        z.object({\n          slug: z.string(),\n        }),\n        \"Retrieve the post\",\n      ),\n    },\n  }),\n  (c) => {\n    // slug is a valid slug\n    const { slug } = c.req.valid(\"param\");\n    return c.json({\n      slug,\n    }, HttpStatusCodes.OK);\n  },\n);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Creating Required JSON Content Schema for OpenAPI\nDESCRIPTION: Example of using Stoker's jsonContentRequired helper for defining required JSON request bodies in OpenAPI documentation. This automatically sets the required flag to true for the schema.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"@hono/zod-openapi\";\n\nimport jsonContentRequired from \"stoker/openapi/helpers/json-content-required\";\n\nconst schema = z.object({\n  message: z.string(),\n});\n\n/*\n* Equivalent to:\n{\n  content: {\n    \"application/json\": {\n      schema,\n    },\n  },\n  description: \"Retrieve the user\",\n  required: true\n}\n*/\nconst response = jsonContentRequired(\n  schema,\n  \"Retrieve the message\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating oneOf JSON Content Schema for OpenAPI\nDESCRIPTION: Example using Stoker's jsonContentOneOf helper to create OpenAPI schemas with oneOf constraint. This allows defining responses that can match one of several possible schemas, useful for validation errors.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"@hono/zod-openapi\";\n\nimport jsonContentOneOf from \"stoker/openapi/helpers/json-content-one-of\";\nimport createErrorSchema from \"stoker/openapi/schemas/create-error-schema\";\nimport IdParamsSchema from \"stoker/openapi/schemas/id-params\";\n\nconst bodySchema = z.object({\n  name: z.string(),\n});\n\n/*\n* Equivalent to:\n{\n  content: {\n    \"application/json\": {\n      schema: {\n        oneOf: SchemaObject[]\n      },\n    },\n  },\n  description: \"Invalid Id params or Invalid Body\"\n}\n*/\nconst result = jsonContentOneOf(\n  [createErrorSchema(IdParamsSchema), createErrorSchema(bodySchema)],\n  \"Invalid Id params or Invalid Body\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Content Schema for OpenAPI\nDESCRIPTION: Example of using Stoker's jsonContent helper to create a content/schema description with application/json type for OpenAPI documentation. This simplifies defining JSON response schemas.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"@hono/zod-openapi\";\n\nimport jsonContent from \"stoker/openapi/helpers/json-content\";\n\nconst schema = z.object({\n  message: z.string(),\n});\n\n/*\n* Equivalent to:\n{\n  content: {\n    \"application/json\": {\n      schema,\n    },\n  },\n  description: \"Retrieve the user\",\n}\n*/\nconst response = jsonContent(\n  schema,\n  \"Retrieve the message\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating oneOf Schema Array for OpenAPI\nDESCRIPTION: Example of using Stoker's oneOf helper to generate schema objects for OpenAPI. This is used internally by jsonContentOneOf but can be used directly for custom schema definitions.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"@hono/zod-openapi\";\n\nimport oneOf from \"stoker/openapi/helpers/one-of\";\nimport createErrorSchema from \"stoker/openapi/schemas/create-error-schema\";\nimport IdParamsSchema from \"stoker/openapi/schemas/id-params\";\n\nconst bodySchema = z.object({\n  name: z.string(),\n});\n\n/*\n* Returns: SchemaObject[]\n*/\nconst result = oneOf([createErrorSchema(IdParamsSchema), createErrorSchema(bodySchema)]);\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Status Phrases with Stoker\nDESCRIPTION: Example demonstrating how to use HTTP status phrase constants from Stoker. These provide semantic text representations of HTTP status codes.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as HttpStatusPhrases from \"stoker/http-status-phrases\";\n\nconsole.log(HttpStatusPhrases.NOT_FOUND); // Not Found\n```\n\n----------------------------------------\n\nTITLE: Serving Emoji Favicon with Hono Middleware\nDESCRIPTION: Example showing how to use Stoker's serveEmojiFavicon middleware to serve an SVG emoji as a favicon from the /favicon.ico path. This provides a simple way to add a favicon without image files.\nSOURCE: https://github.com/w3cj/stoker/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\n\nimport serveEmojiFavicon from \"stoker/middlewares/serve-emoji-favicon\";\n\nconst app = new Hono();\n\napp.use(serveEmojiFavicon(\"🔥\"));\n\nexport default app;\n```"
  }
]