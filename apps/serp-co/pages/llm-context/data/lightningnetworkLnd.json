[
  {
    "owner": "lightningnetwork",
    "repo": "lnd",
    "content": "TITLE: Authenticating LND gRPC Calls with Macaroons in JavaScript\nDESCRIPTION: Complete example of setting up an LND client with macaroon authentication. Reads the macaroon from the file system, creates metadata credentials, and combines them with SSL credentials for secure authenticated requests.\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst grpc = require('@grpc/grpc-js');\nconst protoLoader = require('@grpc/proto-loader');\nconst loaderOptions = {\n  keepCase: true,\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: true\n};\nconst packageDefinition = protoLoader.loadSync('lightning.proto', loaderOptions);\n\nprocess.env.GRPC_SSL_CIPHER_SUITES = 'HIGH+ECDSA'\n\n// Lnd admin macaroon is at ~/.lnd/data/chain/bitcoin/simnet/admin.macaroon on Linux and\n// ~/Library/Application Support/Lnd/data/chain/bitcoin/simnet/admin.macaroon on Mac\nlet m = fs.readFileSync('~/.lnd/data/chain/bitcoin/simnet/admin.macaroon');\nlet macaroon = m.toString('hex');\n\n// build meta data credentials\nlet metadata = new grpc.Metadata()\nmetadata.add('macaroon', macaroon)\nlet macaroonCreds = grpc.credentials.createFromMetadataGenerator((_args, callback) => {\n  callback(null, metadata);\n});\n\n// build ssl credentials using the cert the same as before\nlet lndCert = fs.readFileSync(\"~/.lnd/tls.cert\");\nlet sslCreds = grpc.credentials.createSsl(lndCert);\n\n// combine the cert credentials and the macaroon auth credentials\n// such that every call is properly encrypted and authenticated\nlet credentials = grpc.credentials.combineChannelCredentials(sslCreds, macaroonCreds);\n\n// Pass the crendentials when creating a channel\nlet lnrpcDescriptor = grpc.loadPackageDefinition(packageDefinition);\nlet lnrpc = lnrpcDescriptor.lnrpc;\nlet client = new lnrpc.Lightning('some.address:10009', credentials);\n\nclient.getInfo({}, (err, response) => {\n  if (err) {\n    console.log('Error: ' + err);\n  }\n  console.log('GetInfo:', response);\n});\n```\n\n----------------------------------------\n\nTITLE: Sending a Lightning Payment from Alice to Bob\nDESCRIPTION: Demonstrates the process of creating an invoice on Bob's node and then paying it from Alice's node. After payment, the command checks both channel balances to verify the transaction.\n\nLANGUAGE: shell\nCODE:\n```\n# Add invoice on \"Bob\" side:\nbob $  lncli --network=simnet addinvoice --amt=10000\n{\n        \"r_hash\": \"<your_random_rhash_here>\", \n        \"pay_req\": \"<encoded_invoice>\", \n}\n\n# Send payment from \"Alice\" to \"Bob\":\nalice $  lncli --network=simnet sendpayment --pay_req=<encoded_invoice>\n\n# Check \"Alice\"'s channel balance\nalice $  lncli --network=simnet channelbalance\n\n# Check \"Bob\"'s channel balance\nbob $  lncli --network=simnet channelbalance\n```\n\n----------------------------------------\n\nTITLE: Comparing Inadequate vs. Proper Function Documentation in Go\nDESCRIPTION: This example contrasts incorrect (incomplete) function documentation with proper documentation for a function that derives a revocation public key. The proper documentation explains the purpose, mathematical background, and implementation details.\n\nLANGUAGE: go\nCODE:\n```\n// generates a revocation key\nfunc DeriveRevocationPubkey(commitPubKey *btcec.PublicKey,\n\trevokePreimage []byte) *btcec.PublicKey {\n```\n\nLANGUAGE: go\nCODE:\n```\n// DeriveRevocationPubkey derives the revocation public key given the\n// counterparty's commitment key, and revocation preimage derived via a\n// pseudo-random-function. In the event that we (for some reason) broadcast a\n// revoked commitment transaction, then if the other party knows the revocation\n// preimage, then they'll be able to derive the corresponding private key to\n// this private key by exploiting the homomorphism in the elliptic curve group:\n//    * https://en.wikipedia.org/wiki/Group_homomorphism#Homomorphisms_of_abelian_groups\n//\n// The derivation is performed as follows:\n//\n//   revokeKey := commitKey + revokePoint\n//             := G*k + G*h\n//             := G * (k+h)\n//\n// Therefore, once we divulge the revocation preimage, the remote peer is able to\n// compute the proper private key for the revokeKey by computing:\n//   revokePriv := commitPriv + revokePreimge mod N\n//\n// Where N is the order of the sub-group.\nfunc DeriveRevocationPubkey(commitPubKey *btcec.PublicKey,\n\trevokePreimage []byte) *btcec.PublicKey {\n```\n\n----------------------------------------\n\nTITLE: Unlocking an Existing lnd Wallet\nDESCRIPTION: The command to unlock an existing wallet when lnd starts. This requires the user to enter the previously set wallet password.\n\nLANGUAGE: shell\nCODE:\n```\nlncli unlock\n```\n\n----------------------------------------\n\nTITLE: Setting up Python gRPC Connection to lnd Node\nDESCRIPTION: Code to import necessary modules and establish a secure gRPC connection to an lnd node.\n\nLANGUAGE: python\nCODE:\n```\nimport lightning_pb2 as ln\nimport lightning_pb2_grpc as lnrpc\nimport grpc\nimport os\n\n# Due to updated ECDSA generated tls.cert we need to let gprc know that\n# we need to use that cipher suite otherwise there will be a handshake\n# error when we communicate with the lnd rpc server.\nos.environ[\"GRPC_SSL_CIPHER_SUITES\"] = 'HIGH+ECDSA'\n\n# Lnd cert is at ~/.lnd/tls.cert on Linux and\n# ~/Library/Application Support/Lnd/tls.cert on Mac\ncert = open(os.path.expanduser('~/.lnd/tls.cert'), 'rb').read()\ncreds = grpc.ssl_channel_credentials(cert)\nchannel = grpc.secure_channel('localhost:10009', creds)\nstub = lnrpc.LightningStub(channel)\n```\n\n----------------------------------------\n\nTITLE: Opening a Lightning Channel using PSBT with lncli\nDESCRIPTION: This command initiates the PSBT funding flow to open a Lightning Network channel with 1,234,567 satoshis. It provides instructions for creating the required PSBT and waits for user input. The command includes the funding address and amount information needed for the next steps.\n\nLANGUAGE: shell\nCODE:\n```\n$  lncli openchannel --node_key 03db1e56e5f76bc4018cf6f03d1bb98a7ae96e3f18535e929034f85e7f1ca2b8ac --local_amt 1234567 --psbt\n```\n\n----------------------------------------\n\nTITLE: Structured Logging Best Practices in Go\nDESCRIPTION: Examples of incorrect and correct approaches to structured logging in Go. The correct examples demonstrate using static messages with key-value attributes rather than formatted strings, and show proper line formatting for readability.\n\nLANGUAGE: go\nCODE:\n```\n// WRONG\nlog.DebugS(ctx, fmt.Sprintf(\"User %d just spent %.8f to open a channel\", userID, 0.0154))\n```\n\nLANGUAGE: go\nCODE:\n```\n// RIGHT\nlog.InfoS(ctx, \"Channel open performed\",\n        slog.Int(\"user_id\", userID),\n        btclog.Fmt(\"amount\", \"%.8f\", 0.00154))\n```\n\nLANGUAGE: go\nCODE:\n```\n// Simple key-value example\nlog.InfoS(ctx, \"Channel open performed\", \"user_id\", userID, \"amount\", 0.00154)\n```\n\nLANGUAGE: go\nCODE:\n```\n// WRONG Example 1.\nlog.InfoS(ctx, \"User connected\", \n        \"user_id\", userID)\n\n// Example 2.\nlog.InfoS(ctx, \"Channel open performed\", \"user_id\", userID,\n        btclog.Fmt(\"amount\", \"%.8f\", 0.00154), \"channel_id\", channelID)\n\n// Example 3.\nlog.InfoS(ctx, \"Bytes received\", \n        \"user_id\", userID, \n        btclog.Hex(\"peer_id\", peerID.SerializeCompressed()),\n        btclog.Hex(\"message\", []bytes{\n                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,\n        })))\n```\n\nLANGUAGE: go\nCODE:\n```\n// RIGHT Example 1.\nlog.InfoS(ctx, \"User connected\", \"user_id\", userID)\n\n// Example 2.\nlog.InfoS(ctx, \"Channel open performed\",\n        slog.Int(\"user_id\", userID),\n        btclog.Fmt(\"amount\", \"%.8f\", 0.00154),\n        slog.String(\"channel_id\", channelID))\n\n// Example 3.\nlog.InfoS(ctx, \"Bytes received\", \n        \"user_id\", userID,\n        btclog.Hex(\"peer_id\", peerID.SerializeCompressed()),\n        btclog.Hex(\"message\", []bytes{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08})))\n```\n\n----------------------------------------\n\nTITLE: Setting up gRPC Connection to LND Node in JavaScript\nDESCRIPTION: Code to import required modules, load the LND lightning.proto file, and establish a connection to the LND node. Includes environment configuration for ECDSA support and gRPC loader options.\n\nLANGUAGE: javascript\nCODE:\n```\nconst grpc = require('@grpc/grpc-js');\nconst protoLoader = require('@grpc/proto-loader');\nconst fs = require(\"fs\");\n\n// Due to updated ECDSA generated tls.cert we need to let gRPC know that\n// we need to use that cipher suite otherwise there will be a handshake\n// error when we communicate with the lnd rpc server.\nprocess.env.GRPC_SSL_CIPHER_SUITES = 'HIGH+ECDSA'\n\n// We need to give the proto loader some extra options, otherwise the code won't\n// fully work with lnd.\nconst loaderOptions = {\n  keepCase: true,\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: true\n};\nconst packageDefinition = protoLoader.loadSync('lightning.proto', loaderOptions);\n\n//  Lnd cert is at ~/.lnd/tls.cert on Linux and\n//  ~/Library/Application Support/Lnd/tls.cert on Mac\nlet lndCert = fs.readFileSync(\"~/.lnd/tls.cert\");\nlet credentials = grpc.credentials.createSsl(lndCert);\nlet lnrpcDescriptor = grpc.loadPackageDefinition(packageDefinition);\nlet lnrpc = lnrpcDescriptor.lnrpc;\nlet lightning = new lnrpc.Lightning('localhost:10009', credentials);\n```\n\n----------------------------------------\n\nTITLE: Starting On-Chain Fund Recovery with lncli\nDESCRIPTION: Command to initiate the on-chain fund recovery process in lnd using the lncli tool. This is the first step to recovering funds using your cipher seed.\n\nLANGUAGE: shell\nCODE:\n```\nlncli create\n```\n\n----------------------------------------\n\nTITLE: Comparing Inadequate vs. Proper Code Comments in Go\nDESCRIPTION: This example compares an inadequate code comment that merely restates the code with a proper comment that explains the intention and reasoning behind the code check for minimum transaction amounts.\n\nLANGUAGE: go\nCODE:\n```\n// return err if amt is less than 546\nif amt < 546 {\n\treturn err\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// Treat transactions with amounts less than the amount which is considered dust\n// as non-standard.\nif amt < 546 {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Using BatchOpenChannel RPC for Safe Batch Channel Funding\nDESCRIPTION: Example of LND's BatchOpenChannel command that safely opens multiple channels in a single transaction. This command handles all channel negotiations atomically and aborts the entire batch if any single negotiation fails.\n\nLANGUAGE: shell\nCODE:\n```\n$  lncli batchopenchannel --sat_per_vbyte=5 '[{\n    \"node_pubkey\": \"02c95fd94d2a40e483e8a14be1625ad8a82263b37b6a32162170d8d4c13080bedb\",\n    \"local_funding_amount\": 500000,\n    \"private\": true,\n    \"close_address\": \"2NCJnjD4CZ5JvmkEo1D3QfDM57GX62LUbep\"\n  }, {\n    \"node_pubkey\": \"032d57116b92b5f64f022271ebd5e9e23826c0f34ff5ae3e742ad329e0dc5ddff8\",\n    \"local_funding_amount\": 600000,\n    \"remote_csv_delay\": 288\n  }, {\n    \"node_pubkey\": \"03475f7b07f79672b9a1fd2a3a2350bc444980fe06eb3ae38b132c6f43f958947b\",\n    \"local_funding_amount\": 700000\n  }, {\n    \"node_pubkey\": \"027f013b5cf6b7035744fd8d7d756e05675bf6e829bb75a80be5b9e8e641d20562\",\n    \"local_funding_amount\": 800000\n  }]'\n```\n\n----------------------------------------\n\nTITLE: Implementing Java gRPC Client for Lightning Network Daemon\nDESCRIPTION: A complete implementation of a Java gRPC client that connects to the Lightning Network Daemon, authenticates using macaroons, and makes a simple getInfo request to retrieve the node's identity public key.\n\nLANGUAGE: java\nCODE:\n```\nimport io.grpc.Attributes;\nimport io.grpc.CallCredentials;\nimport io.grpc.ManagedChannel;\nimport io.grpc.Metadata;\nimport io.grpc.MethodDescriptor;\nimport io.grpc.Status;\nimport io.grpc.netty.GrpcSslContexts;\nimport io.grpc.netty.NettyChannelBuilder;\nimport io.netty.handler.ssl.SslContext;\nimport lnrpc.LightningGrpc;\nimport lnrpc.LightningGrpc.LightningBlockingStub;\nimport lnrpc.Rpc.GetInfoRequest;\nimport lnrpc.Rpc.GetInfoResponse;\nimport org.apache.commons.codec.binary.Hex;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.concurrent.Executor;\n\npublic class Main {\n  static class MacaroonCallCredential extends CallCredentials {\n    private final String macaroon;\n\n    MacaroonCallCredential(String macaroon) {\n      this.macaroon = macaroon;\n    }\n\n    @Override\n    public void applyRequestMetadata(RequestInfo requestInfo, Executor executor, MetadataApplier metadataApplier) {\n      executor.execute(() -> {\n        try {\n          Metadata headers = new Metadata();\n          Metadata.Key<String> macaroonKey = Metadata.Key.of(\"macaroon\", Metadata.ASCII_STRING_MARSHALLER);\n          headers.put(macaroonKey, macaroon);\n          metadataApplier.apply(headers);\n        } catch (Throwable e) {\n          metadataApplier.fail(Status.UNAUTHENTICATED.withCause(e));\n        }\n      });\n    }\n\n    @Override\n    public void thisUsesUnstableApi() {\n    }\n  }\n\n  private static final String CERT_PATH = \"/Users/<username>/Library/Application Support/Lnd/tls.cert\";\n  private static final String MACAROON_PATH = \"/Users/<username>/Library/Application Support/Lnd/data/chain/bitcoin/simnet/admin.macaroon\";\n  private static final String HOST = \"localhost\";\n  private static final int PORT = 10009;\n\n  public static void main(String...args) throws IOException {\n    SslContext sslContext = GrpcSslContexts.forClient().trustManager(new File(CERT_PATH)).build();\n    NettyChannelBuilder channelBuilder = NettyChannelBuilder.forAddress(HOST, PORT);\n    ManagedChannel channel = channelBuilder.sslContext(sslContext).build();\n\n    String macaroon =\n        Hex.encodeHexString(\n            Files.readAllBytes(Paths.get(MACAROON_PATH))\n        );\n\n    LightningBlockingStub stub = LightningGrpc\n        .newBlockingStub(channel)\n        .withCallCredentials(new MacaroonCallCredential(macaroon));\n\n\n    GetInfoResponse response = stub.getInfo(GetInfoRequest.getDefaultInstance());\n    System.out.println(response.getIdentityPubkey());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bob's Lightning Node and Connecting to Alice\nDESCRIPTION: Creates Bob's lightning node container, retrieves his identity pubkey, and establishes a connection between the two nodes. This is the prerequisite for opening a payment channel.\n\nLANGUAGE: shell\nCODE:\n```\n# Run \"Bob\" node and log into it:\n$  docker-compose run -d --name bob --volume simnet_lnd_bob:/root/.lnd lnd\n$  docker exec -i -t bob bash\n\n# Get the identity pubkey of \"Bob\" node:\nbob $  lncli --network=simnet getinfo\n{\n    ----->\"identity_pubkey\": \"0343bc80b914aebf8e50eb0b8e445fc79b9e6e8e5e018fa8c5f85c7d429c117b38\",\n    \"alias\": \"\",\n    \"num_pending_channels\": 0,\n    \"num_active_channels\": 0,\n    \"num_inactive_channels\": 0,\n    \"num_peers\": 0,\n    \"block_height\": 1215,\n    \"block_hash\": \"7d0bc86ea4151ed3b5be908ea883d2ac3073263537bcf8ca2dca4bec22e79d50\",\n    \"synced_to_chain\": true,\n    \"testnet\": false\n    \"chains\": [\n        \"bitcoin\"\n    ]\n}\n\n# Get the IP address of \"Bob\" node:\n$  docker inspect bob | grep IPAddress\n\n# Connect \"Alice\" to the \"Bob\" node:\nalice $  lncli --network=simnet connect <bob_pubkey>@<bob_host>\n\n# Check list of peers on \"Alice\" side:\nalice $  lncli --network=simnet listpeers\n{\n    \"peers\": [\n        {\n            \"pub_key\": \"0343bc80b914aebf8e50eb0b8e445fc79b9e6e8e5e018fa8c5f85c7d429c117b38\",\n            \"address\": \"172.19.0.4:9735\",\n            \"bytes_sent\": \"357\",\n            \"bytes_recv\": \"357\",\n            \"sat_sent\": \"0\",\n            \"sat_recv\": \"0\",\n            \"inbound\": true,\n            \"ping_time\": \"0\"\n        }\n    ]\n}\n\n# Check list of peers on \"Bob\" side:\nbob $  lncli --network=simnet listpeers\n{\n    \"peers\": [\n        {\n            \"pub_key\": \"03d0cd35b761f789983f3cfe82c68170cd1c3266b39220c24f7dd72ef4be0883eb\",\n            \"address\": \"172.19.0.3:51932\",\n            \"bytes_sent\": \"357\",\n            \"bytes_recv\": \"357\",\n            \"sat_sent\": \"0\",\n            \"sat_recv\": \"0\",\n            \"inbound\": false,\n            \"ping_time\": \"0\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional-streaming RPC for Payments with LND in JavaScript\nDESCRIPTION: Example of a bidirectional streaming RPC to send multiple payments. Sets up a streaming connection with event handlers and demonstrates both individual and batch payment sending.\n\nLANGUAGE: javascript\nCODE:\n```\n// Load some libraries specific to this example\nconst async = require('async');\nconst _ = require('lodash');\n\nlet dest_pubkey = <RECEIVER_ID_PUBKEY>;\nlet dest_pubkey_bytes = new Buffer(dest_pubkey, \"hex\");\n\n// Set a listener on the bidirectional stream\nlet call = lightning.sendPayment();\ncall.on('data', function(payment) {\n  console.log(\"Payment sent:\");\n  console.log(payment);\n});\ncall.on('end', function() {\n  // The server has finished\n  console.log(\"END\");\n});\n\n// You can send single payments like this\ncall.write({ dest: dest_pubkey_bytes, amt: 6969 });\n\n// Or send a bunch of them like this\nfunction paymentSender(destination, amount) {\n  return function(callback) {\n    console.log(\"Sending \" + amount + \" satoshis\");\n    console.log(\"To: \" + destination);\n    call.write({\n      dest: destination,\n      amt: amount\n    });\n    _.delay(callback, 2000);\n  };\n}\nlet payment_senders = [];\nfor (let i = 0; i < 10; i++) {\n  payment_senders[i] = paymentSender(dest_pubkey_bytes, 100);\n}\nasync.series(payment_senders, function() {\n  call.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Public Keys (xpubs) for LND in JavaScript\nDESCRIPTION: This code represents a callback function handling the configuration of extended public keys (xpubs) for the Lightning Network Daemon. Each xpub is configured with a purpose of 1017, coin_type of 1 (testnet), and sequential account numbers. The callback processes and logs the response or any errors encountered.\n\nLANGUAGE: javascript\nCODE:\n```\n            'xpub': 'tpubDDXFHr67Ro34zT9WWchEKynCFp3CReVzTMJEbUvYvmVPRuukE8xTMYuu17vVbG9YqdgJvvxY2xiS92uWNMqrF2HwYfq4iaid9CjXq9wmtsL',\n            purpose: 1017,\n            coin_type: 1,\n            account: 244\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro3524SeKRX1BZxfeQ6XRLRGpU7XbG8EPituJWLBokB2Nfu7PNhYRgasmpdUo18Xk7HJUfyAmswVFc7X9iX4iK7oiwbPBAyBmur',\n            purpose: 1017,\n            coin_type: 1,\n            account: 245\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro354TFu2nPSvHTvvKax5DgU2F2NfsE1xTtRwjWdnDFoDJgDfHNGTTapc9CahmyLNEWSNstXYQH1raXY8t6yvcHdbvibSgpNTNo',\n            purpose: 1017,\n            coin_type: 1,\n            account: 246\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro357fEnfJNDCMdY85pKkpLLY8xCHZDqWwp6WBNbGTfwyfx29SGaMXDJTZoy7Lwe6y6d2TEEVxBFqH7QrJ9YMEwEkMvYscbPNLs',\n            purpose: 1017,\n            coin_type: 1,\n            account: 247\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro35ABam1ByNf5SBXzEz64d1MMoJNBCQADyufg9CosbZSRB3fQr3LDk34fqpUB2y6zTfWrggwpX1ftcACZu77eEA6kgMwKS3igA',\n            purpose: 1017,\n            coin_type: 1,\n            account: 248\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro35DFsfmeP81rSTbxD7aDWiNriAoDAW9cWioGCcpHYxJAvDfZpdyVjEcenv59L2fW9WqwabovTw6KnUh3WX9aj2iqpt7RmUGwq',\n            purpose: 1017,\n            coin_type: 1,\n            account: 249\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro35EuKH5UitanyS6cTtFzZgAK7uQmneL4T1nioGkbFDJFkAKhVmauk4RGr7izSShLRcXGAXH18ScLEMwX1HdjMSux7R9Z4gPYj',\n            purpose: 1017,\n            coin_type: 1,\n            account: 250\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro35JCs8nryccZz9LVyZCU4SCkCmWJ6XY7bF2BdFYsD3Ci8qmFAxF6di92bbNZD2FmTacs24BLE73Kt4cnqqseA2ggijBbsLRFh',\n            purpose: 1017,\n            coin_type: 1,\n            account: 251\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro35MjA69YB1uGwYsmERfLiWcxWhhTYoCSiuZTjMwDC5rVEbbxLKeWitFwmyGV7y7JuQxECc4bC7NVUEW89gUCspJyPAhhYpvtH',\n            purpose: 1017,\n            coin_type: 1,\n            account: 252\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro35P4hj6ZMgyMk2fjcHsW9JJKNFb9jzaUHrg8xJtUtnV7kEJUs3f13xk71DBHWVYBGKQWfFvhpsLUnn1wa5NUYFDoXMshsgHJY',\n            purpose: 1017,\n            coin_type: 1,\n            account: 253\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro35QdUpjbZ5Edscp8pi9c7yj2gA12a5oCyhDEqgrA9tRYVscJeuvuHFjg7ToBbTfs6ak72zvpgZfiMs5qfaLwu3p1hon4VVa4E',\n            purpose: 1017,\n            coin_type: 1,\n            account: 254\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro35UhpiZuSHTrhd6ZxiSHRQnvrRuJUawJTNWFF8aJFncm1PKULy3D34MUgaRP9iaUFAjESSdDoC8qqrxaaDWG9XZSXWctfghqq',\n            purpose: 1017,\n            coin_type: 1,\n            account: 255\n        },\n        ]\n    }\n}, (err, res) => {\n    if (err != null) {\n        console.log(err);\n    }\n    console.log(res);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Combined Batch PSBT for Multiple Lightning Channels\nDESCRIPTION: Example command that combines multiple channel outputs into a single PSBT transaction, demonstrating how to batch fund multiple Lightning channels in one transaction.\n\nLANGUAGE: shell\nCODE:\n```\n$  bitcoin-cli walletcreatefundedpsbt [] '[{\"tb1q53626fcwwtcdc942zaf4laqnr3vg5gv4g0hakd2h7fw2pmz6428sk3ezcx\":0.01000000},{\"tb1qywvazres587w9wyy8uw03q8j9ek6gc9crwx4jvhqcmew4xzsvqcq3jjdja\":0.01000000}]'\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Lightning Network Channels using PSBT API in Node.js\nDESCRIPTION: This script demonstrates how to open multiple Lightning Network channels in a single funded transaction using the PSBT API in LND. It establishes gRPC connection to an LND node, creates channel opening requests with PSBT funding shims, collects funding addresses, and guides the user through creating and verifying a funded PSBT transaction without automatically publishing it.\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst grpc = require('@grpc/grpc-js');\nconst protoLoader = require('@grpc/proto-loader');\nconst Buffer = require('safe-buffer').Buffer;\nconst randomBytes = require('random-bytes').sync;\nconst prompt = require('prompt');\n\nconst LND_DIR = '/home/myuser/.lnd';\nconst LND_HOST = 'localhost:10009';\nconst NETWORK = 'regtest';\nconst LNRPC_PROTO_DIR = '/home/myuser/projects/go/lnd/lnrpc';\n\nconst grpcOptions = {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n    includeDirs: [LNRPC_PROTO_DIR],\n};\n\nconst packageDefinition = protoLoader.loadSync(`${LNRPC_PROTO_DIR}/rpc.proto`, grpcOptions);\nconst lnrpc = grpc.loadPackageDefinition(packageDefinition).lnrpc;\n\nprocess.env.GRPC_SSL_CIPHER_SUITES = 'HIGH+ECDSA';\n\nconst adminMac = fs.readFileSync(`${LND_DIR}/data/chain/bitcoin/${NETWORK}/admin.macaroon`);\nconst metadata = new grpc.Metadata();\nmetadata.add('macaroon', adminMac.toString('hex'));\nconst macaroonCreds = grpc.credentials.createFromMetadataGenerator((_args, callback) => {\n    callback(null, metadata);\n});\n\nconst lndCert = fs.readFileSync(`${LND_DIR}/tls.cert`);\nconst sslCreds = grpc.credentials.createSsl(lndCert);\nconst credentials = grpc.credentials.combineChannelCredentials(sslCreds, macaroonCreds);\n\nconst client = new lnrpc.Lightning(LND_HOST, credentials);\n\nconst params = process.argv.slice(2);\n\nif (params.length % 2 !== 0) {\n    console.log('Usage: node multi-channel-funding.js pubkey amount [pubkey amount]...')\n}\n\nconst channels = [];\nfor (let i = 0; i < params.length; i += 2) {\n    channels.push({\n        pubKey: Buffer.from(params[i], 'hex'),\n        amount: parseInt(params[i + 1], 10),\n        pendingChanID: randomBytes(32),\n        outputAddr: '',\n        finalized: false,\n        chanPending: null,\n        cleanedUp: false,\n    });\n}\n\nchannels.forEach(c => {\n    const openChannelMsg = {\n        node_pubkey: c.pubKey,\n        local_funding_amount: c.amount,\n        funding_shim: {\n            psbt_shim: {\n                pending_chan_id: c.pendingChanID,\n                no_publish: true,\n            }\n        }\n    };\n    const openChannelCall = client.OpenChannel(openChannelMsg);\n    openChannelCall.on('data', function (update) {\n        if (update.psbt_fund && update.psbt_fund.funding_address) {\n            console.log('Got funding addr for PSBT: ' + update.psbt_fund.funding_address);\n            c.outputAddr = update.psbt_fund.funding_address;\n            maybeFundPSBT();\n        }\n        if (update.chan_pending) {\n            c.chanPending = update.chan_pending;\n            const txidStr = update.chan_pending.txid.reverse().toString('hex');\n            console.log(`\nChannels are now pending!\nExpected TXID of published final transaction: ${txidStr}\n`);\n            process.exit(0);\n        }\n    });\n    openChannelCall.on('error', function (e) {\n        console.log('Error on open channel call: ' + e);\n        tryCleanup();\n    });\n});\n\nfunction tryCleanup() {\n    function maybeExit() {\n        for (let i = 0; i < channels.length; i++) {\n            if (!channels[i].cleanedUp) {\n                // Not all channels are cleaned up yet.\n                return;\n            }\n        }\n    }\n    channels.forEach(c => {\n        if (c.cleanedUp) {\n            return;\n        }\n        if (c.chanPending === null) {\n            console.log(\"Cleaning up channel, shim cancel\")\n            // The channel never made it into the pending state, let's try to\n            // remove the funding shim. This is best effort. Depending on the\n            // state of the channel this might fail so we don't log any errors\n            // here.\n            client.FundingStateStep({\n                shim_cancel: {\n                    pending_chan_id: c.pendingChanID,\n                }\n            }, () => {\n                c.cleanedUp = true;\n                maybeExit();\n            });\n        } else {\n            // The channel is pending but since we aborted will never make it\n            // to be confirmed. We need to tell lnd to abandon this channel\n            // otherwise it will show in the pending channels for forever.\n            console.log(\"Cleaning up channel, abandon channel\")\n            client.AbandonChannel({\n                channel_point: {\n                    funding_txid: {\n                        funding_txid_bytes: c.chanPending.txid,\n                    },\n                    output_index: c.chanPending.output_index,\n                },\n                i_know_what_i_am_doing: true,\n            }, () => {\n                c.cleanedUp = true;\n                maybeExit();\n            });\n        }\n    });\n}\n\nfunction maybeFundPSBT() {\n    const outputsBitcoind = [];\n    const outputsLnd = {};\n    for (let i = 0; i < channels.length; i++) {\n        const c = channels[i];\n        if (c.outputAddr === '') {\n            // Not all channels did get a funding address yet.\n            return;\n        }\n\n        outputsBitcoind.push({\n            [c.outputAddr]: c.amount / 100000000,\n        });\n        outputsLnd[c.outputAddr] = c.amount;\n    }\n\n    console.log(`\nChannels ready for funding transaction.\nPlease create a funded PSBT now.\nExamples:\n\nbitcoind:\n    bitcoin-cli walletcreatefundedpsbt '[]' '${JSON.stringify(outputsBitcoind)}' 0 '{\"fee_rate\": 15}'\n\nlnd:\n    lncli wallet psbt fund --outputs='${JSON.stringify(outputsLnd)}' --sat_per_vbyte=15\n`);\n\n    prompt.get([{name: 'funded_psbt'}], (err, result) => {\n        if (err) {\n            console.log(err);\n\n            tryCleanup();\n            return;\n        }\n        channels.forEach(c => {\n            const verifyMsg = {\n                psbt_verify: {\n                    funded_psbt: Buffer.from(result.funded_psbt, 'base64'),\n                    pending_chan_id: c.pendingChanID,\n                    skip_finalize: true\n                }\n            };\n            client.FundingStateStep(verifyMsg, (err, res) => {\n                if (err) {\n                    console.log(err);\n\n                    tryCleanup();\n                    return;\n                }\n                if (res) {\n                    c.finalized = true;\n                    maybePublishPSBT();\n                }\n            });\n        });\n    });\n}\n\nfunction maybePublishPSBT() {\n    for (let i = 0; i < channels.length; i++) {\n        const c = channels[i];\n        if (!channels[i].finalized) {\n            // Not all channels are verified/finalized yet.\n            return;\n        }\n    }\n\n    console.log(`\nPSBT verification successful!\nYou can now sign and publish the transaction.\nMake sure the TXID does not change!\n`);\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to lnd Invoices with Python gRPC\nDESCRIPTION: Response-streaming RPC example that subscribes to invoice updates from an lnd node.\n\nLANGUAGE: python\nCODE:\n```\nrequest = ln.InvoiceSubscription()\nfor invoice in stub.SubscribeInvoices(request):\n    print(invoice)\n```\n\n----------------------------------------\n\nTITLE: Creating a Lightning Wallet\nDESCRIPTION: Command to create a new wallet in lnd, which will prompt for a password and optionally a cipher seed passphrase, then generate a 24-word recovery seed.\n\nLANGUAGE: shell\nCODE:\n```\n lncli create\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Connection for lnd Block Notifications in Node.js\nDESCRIPTION: This Node.js example demonstrates how to connect to lnd's block notification RPC using WebSockets. It shows how to read a macaroon file from disk, set up the WebSocket connection with proper headers, send the initial request, and handle incoming messages.\n\nLANGUAGE: javascript\nCODE:\n```\n// --------------------------\n// Example with websockets:\n// --------------------------\nconst WebSocket = require('ws');\nconst fs = require('fs');\nconst macaroon = fs.readFileSync('LND_DIR/data/chain/bitcoin/simnet/admin.macaroon').toString('hex');\nlet ws = new WebSocket('wss://localhost:8080/v2/chainnotifier/register/blocks?method=POST', {\n  // Work-around for self-signed certificates.\n  rejectUnauthorized: false,\n  headers: {\n    'Grpc-Metadata-Macaroon': macaroon,\n  },\n});\nlet requestBody = { \n  hash: \"<byte>\",\n  height: \"<int64>\",\n}\nws.on('open', function() {\n    ws.send(JSON.stringify(requestBody));\n});\nws.on('error', function(err) {\n    console.log('Error: ' + err);\n});\nws.on('message', function(body) {\n    console.log(body);\n});\n// Console output (repeated for every message in the stream):\n//  { \n//      \"hash\": <byte>, \n//      \"height\": <int64>, \n//  }\n```\n\n----------------------------------------\n\nTITLE: Finalizing a PSBT Transaction with lncli\nDESCRIPTION: This command uses the lncli wallet psbt finalize subcommand to sign and finalize a previously created PSBT. The response includes both the signed PSBT and the final transaction that could be broadcast to the network.\n\nLANGUAGE: shell\nCODE:\n```\n$  lncli wallet psbt finalize cHNidP8BAJoCAAAAAkiMdlxF3M20VpdnCMK0NOkEoETG6Aa4HpC8Vv9RtJc1AQAAAAAAAAAA4lBjZUtG260qBBgVRqMQqmMV+XRTKubrHbc66YOl7/gBAAAAAAAAAAACgPD6AgAAAAAWABSQ2zhVNBOsxRfzPoPwCg8qiNolGtIkCAcAAAAAFgAUuvRP5r7qAvj0egDxyX9/FH+vukgAAAAAAAEA3gIAAAAAAQEr9IZcho/gV/6fH8C8P+yhNRZP+l3YuxsyatdYcS0S6AEAAAAA/v///wLI/8+yAAAAABYAFDXoRFwgXNO5VVtVq2WpaENh6blAAOH1BQAAAAAWABTcAR0NeNdDHb96kMnH5EVUcr1YwwJHMEQCIDqugtYLp4ebJAZvOdieshLi1lLuPl2tHQG4jM4ybwEGAiBeMpCkbHBmzYvljxb1JBQyVAMuoco0xIfi+5OQdHuXaAEhAnH96NhTW09X0npE983YBsHUoMPI4U4xBtHenpZVTEqpVwAAAAEBHwDh9QUAAAAAFgAU3AEdDXjXQx2/epDJx+RFVHK9WMMBAwQBAAAAAAEA6wIAAAAAAQFvGpeAR/0OXNyqo0zrXSzmkvVfbnytrr4onbZ61vscBwEAAAAAAAAAAAIAJPQAAAAAACIAILtTVbSIkaFDqjsJ7EOHmTfpXq/fbnrGkD3/GYHYHJtMVl0NBAAAAAAWABQqnZOHOGzDIzZAeXK+YwHq1AHtXQJIMEUCIQDgx3xEhlioV1Q+yAPKiaXMwkv1snoejbckZOKFe0R6WAIgB41dEvK3zxI665YVWfcih0IThTkPoOiMgd6xGaKQXbwBIQMdgXMwQDF+Z+r3x5JKdm1TBvXDuYC0cbrnLyqJEU2ciQAAAAABAR9WXQ0EAAAAABYAFCqdk4c4bMMjNkB5cr5jAerUAe1dAQMEAQAAAAAAAA==\n```\n\n----------------------------------------\n\nTITLE: Response-Streaming RPC for Invoice Subscription in C#\nDESCRIPTION: C# code illustrating a response-streaming RPC that subscribes to invoice events from lnd and processes them as they arrive.\n\nLANGUAGE: C#\nCODE:\n```\nvar request = new InvoiceSubscription();\nusing (var call = client.SubscribeInvoices(request))\n{\n    while (await call.ResponseStream.MoveNext())\n    {\n        var invoice = call.ResponseStream.Current;\n        Console.WriteLine(invoice.ToString());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Watch-Only Wallet with NodeJS in LND\nDESCRIPTION: NodeJS script that connects to a watch-only LND node and initializes its wallet with multiple extended public keys (xpubs) for various purposes and accounts. The script uses gRPC to communicate with the LND wallet unlocker service.\n\nLANGUAGE: javascript\nCODE:\n```\n// EDIT ME:\nconst WATCH_ONLY_LND_DIR = '/home/watch-only/.lnd';\nconst WATCH_ONLY_RPC_HOSTPORT = 'localhost:10018';\nconst WATCH_ONLY_WALLET_PASSWORD = 'testnet3';\nconst LND_SOURCE_DIR = '.';\n\nconst fs = require('fs');\nconst grpc = require('@grpc/grpc-js');\nconst protoLoader = require('@grpc/proto-loader');\nconst loaderOptions = {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true\n};\nconst packageDefinition = protoLoader.loadSync([\n    LND_SOURCE_DIR + '/lnrpc/walletunlocker.proto',\n], loaderOptions);\n\nprocess.env.GRPC_SSL_CIPHER_SUITES = 'HIGH+ECDSA'\n\n// build ssl credentials using the cert the same as before\nlet lndCert = fs.readFileSync(WATCH_ONLY_LND_DIR + '/tls.cert');\nlet sslCreds = grpc.credentials.createSsl(lndCert);\n\nlet lnrpcDescriptor = grpc.loadPackageDefinition(packageDefinition);\nlet lnrpc = lnrpcDescriptor.lnrpc;\nvar client = new lnrpc.WalletUnlocker(WATCH_ONLY_RPC_HOSTPORT, sslCreds);\n\nclient.initWallet({\n    wallet_password: Buffer.from(WATCH_ONLY_WALLET_PASSWORD, 'utf-8'),\n    recovery_window: 2500,\n    watch_only: {\n        accounts: [\n        {\n            'xpub': 'upub5Eep7H5q39PzQZLVEYLBytDyBNeV74E8mQsyeL6UozFq9Y3MsZ52G7YGuqrJPgoyAqF7TBeJdnkrHrVrB5pkWkPJ9cJGAePMU6F1Gyw6aFH',\n            purpose: 49,\n            coin_type: 0,\n            account: 0\n        },\n        {\n            'xpub': 'vpub5ZU1PHGpQoDSHckYico4nsvwsD3mTh6UjqL5zyGWXZXzBjTYMNKot7t9eRPQY71hJcnNN9r1ss25g3xA9rmoJ5nWPg8jEWavrttnsVa1qw1',\n            purpose: 84,\n            coin_type: 0,\n            account: 0\n        },\n        {\n            'xpub': 'tpubDDtdXpdJFU2zFKWHJwe5M2WtYtcV7qSWtKohT9VP9zarNSwKnmkwDQawsu1vUf9xwXhUDYXbdUqpcrRTn9bLyW4BAVRimZ4K7r5o1JS924u',\n            purpose: 86,\n            coin_type: 0,\n            account: 0\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tHKVWG2gNjjijKUH1Lyv5NKFYdJnuaLGVNBVwyV5AbykhR43iy8wYozEMbw2QfmAqZhb8gnuL5mm9sZh8YsR6FjGAbew1xoT',\n            purpose: 1017,\n            coin_type: 1,\n            account: 0\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tKkccDqNfDqZpd5wCs2n6XRV2Uh185DzCTbkDaEd9v7P837zZTYBNVfaRriuxgGVgxbGjDui4CKxyzBzwz4aAZxjn2PhNcQy',\n            purpose: 1017,\n            coin_type: 1,\n            account: 1\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tNH4KH41i4oTsWfRjFigoH1Ee7urvHow51opH9xJ7mu1qSPMPVtkVqQZ5tE4NTuFJPrbDqno7TQietyUDmPTwyVviJbGCwXk',\n            purpose: 1017,\n            coin_type: 1,\n            account: 2\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tQj5Zvav2ALhkU6dRQAhEtNPnYJVBC8hs2U1A9ecqxRY3XTiJKBDD7e8tudhmTRs8aGWJAiAXJN5kXy3Hi6cmiwGWjXK5Cv5',\n            purpose: 1017,\n            coin_type: 1,\n            account: 3\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tSSR2LLBJtotxx2U45cuESLWKA72YT9td3SzVKHAptzDEx5chsUNZ4WRMY5h6HJxRSebjRatxQKX1uUsux1LvKS1wsfNJ2PH',\n            purpose: 1017,\n            coin_type: 1,\n            account: 4\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tTwzfWvNoMoPpZbxdMEfe1WhbXJxvXikGixPa4ggSRZeGx6T5yxVHTVT3rjVh35Veqsowj7emX8SZfXKDKDKcLduXCeWPUU3',\n            purpose: 1017,\n            coin_type: 1,\n            account: 5\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tYEDS2EByRedfsUoEwBtrzVbS1qdPrX6sAkUYGLrZWvMmQv8KZDZ4zd9r8WzM9bJ2nGp7XuNVC4w2EBtWg7i76gbrmuEWjQh',\n            purpose: 1017,\n            coin_type: 1,\n            account: 6\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tYpwnFJEQaM8eAPM2UV5uY6gFgXeSzS5aC5T9TfzXuawYKBbQMZJn8qHXLafY4tAutoda1aKP5h6Nbgy3swPbnhWbFjS5wnX',\n            purpose: 1017,\n            coin_type: 1,\n            account: 7\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tddKpAjUegXqt7EGxRXnHkeLbUkfuFMGbLJYgRpG4ew5pMmGg2nmcGmHFQ29w3juNhd8N5ZZ8HwJdymC4f5ukQLJ4yg9rEr3',\n            purpose: 1017,\n            coin_type: 1,\n            account: 8\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tgE89V8ZdgMytC2Jq1iT9ttGhdzR1X7haQJNBmXt8kau6taC6DGASYzbrjmo9z9w6JQFcaLNqbhS2h2PVSzKf79j265Zi8hF',\n            purpose: 1017,\n            coin_type: 1,\n            account: 9\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tiy9Bo8pRekXBPjExSDcHC4iSvvjABx4dzf63p8sYi2AcVbhc23EeWXhTJdXcKViDV1UDgq5P47223xXATrAzj6PuRmZuRA2',\n            purpose: 1017,\n            coin_type: 1,\n            account: 10\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tkpAhiNWAnWkyLVGqKF8bRDvHWRuh4HC59wCLhmsqERQnS8eui3ruaAxiVadVhSBmMifUUXuAFwZY913YJiatyKr7yVQzVxD',\n            purpose: 1017,\n            coin_type: 1,\n            account: 11\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tnkmbEykpik5uxUagGD7SShtx27gtS1Wtnzc8swgTRyWbkUwTXtoWBxD6FfTgPvjRo1rHaKGj69Cyt49yibhHCrenqvYUgfN',\n            purpose: 1017,\n            coin_type: 1,\n            account: 12\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tqf1e7Dhuz7E3r2qeBFKuPT5YahwZ5AzxxbnA45etKbjRcDuFbf9GJNQjX7h3xACrEK4JfJ3WPFSBivG5FeDMhPZMSKPnkgc',\n            purpose: 1017,\n            coin_type: 1,\n            account: 13\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tu1D4jVkj1HEFcEvZAqEswwTHK4pVhwjBDcJ4qAVsP4axBL3R5fvncHVDgV97hDLxbzPzodiRxjm6pqePGNeWxM4h7RsgeZ3',\n            purpose: 1017,\n            coin_type: 1,\n            account: 14\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2twNzeuJXUbig9ycVL36jhsCP8LrXVTxVPRAuvREUEbnqDgnETqG1ddZbpssWKXbA6CDDt5hmiDKrWxWxHmS39aFfPZP35hyH',\n            purpose: 1017,\n            coin_type: 1,\n            account: 15\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tyCbhCZk83MYGKuf6C8AW27biNGfKKj4t5vVQd26sPgA6q7W13rRAJMWzjEUPZhXsUDPUDeFyXncGgyqhxgWs3ufyeVkksdV',\n            purpose: 1017,\n            coin_type: 1,\n            account: 16\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2tzp72ceFoNJUExE84Utx8CCVV83yZkeKuvUqLJJFhWCbky1WkzywhAP1TjKBH3ow7UvHfoUtebMPTU4sMrph7oAQy9qrkww3',\n            purpose: 1017,\n            coin_type: 1,\n            account: 17\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2u4VuTDC6eXAn5B3MAR7tPg1L7fG79tXXqznAr2uWqe5Pda5nZYhJfWEqLhyM6WojqLXZbyavMowycPUztMHf3etdmWYaoDhw',\n            purpose: 1017,\n            coin_type: 1,\n            account: 18\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2u7bARnVKUS2SBGQaPhS9APS5e3M5qDiweGJYGUTSCuzNGdFYAgMMPngHacRBHaUDn8eoPMopxMTXA2h7V4g3xxYjQU9srtR8',\n            purpose: 1017,\n            coin_type: 1,\n            account: 19\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2u9xKbNpneHc7GSiHhoMHooxz9q8UWDrs77rMUgKbVZYnrSKdGP4EofiAYFZaUbd7vF1aaj3Du7skajn3dXRTHrLGrcPeSLEd',\n            purpose: 1017,\n            coin_type: 1,\n            account: 20\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2uCpznqbSss6zBW2oiDzur73yWyZBvGfPEbZ2p9EjQTrjy5mtk4S6v5y1yZcyw5XbMYQUQfitEuKKmjMKsXnE5ymqcsQbNs1b',\n            purpose: 1017,\n            coin_type: 1,\n            account: 21\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2uEJnZ35CgF9rnF2apyScr5CYcq1HGdWq8xvNxy8zoEAPXaD2SXwCpsvP1mpfqoginZQq4SJmMC7Cg7zkB3B4Dsp4E629izgM',\n            purpose: 1017,\n            coin_type: 1,\n            account: 22\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2uHeSSGySJu1V4xBTDV5skCJWkSUcxvg92vtKioYmERyn93TFSZdM2XDPQgiF1XSjTq28RhUhGvZSzVU9HY9fXGxkDxjDYA92',\n            purpose: 1017,\n            coin_type: 1,\n            account: 23\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2uKDhTSg2sz7YCtefjghZtbCraGMuU2c15PY58XmpJ3b9vypLXWEQx5js811jnxMnZ5FDwg347asddNnNySmhppnAxz6eS7rH',\n            purpose: 1017,\n            coin_type: 1,\n            account: 24\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2uLkyeZuKJMjLd9dgcissTrAUknhNumcFjkqVcNQKh1K1vu8JPMswx1qCU5tvQPv26jhgbZEpdpfL8LNV666NsoXfsTvorVdq',\n            purpose: 1017,\n            coin_type: 1,\n            account: 25\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2uPLRv1HJeudx6wcrAZYSVe1YfZrW4MTHFMobxSzmQCi93hC2HLC6vzdYy36GFEM3mZTSPahuhqfgvpEq8i5USgcer2ziQeoV',\n            purpose: 1017,\n            coin_type: 1,\n            account: 26\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2uTwg5aKW4bBAYsSWxyvPSatMQhH85FnUzDEhkTZGhSPUXT7qSUS8SFCpKXXhNvC5ZVirERav4An4dGWCGGYsz7VcmAn63etY',\n            purpose: 1017,\n            coin_type: 1,\n            account: 27\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2uVbv7bCGqmLL9CaBczbY2jxA34YB4u7NRugb8aro1eGNUyHXZJwhkWZDDBRgb6X4LH4G4xjd87xTpEEDi2Cmtab4xT3R8SJT',\n            purpose: 1017,\n            coin_type: 1,\n            account: 28\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2uZKmEbXNJB8LLYseLDvaAL7xxfcXutjPyT1BQ1fDPef1VMnaYp6Q3cbtAaDt7NvhCoqvoZieAfV7RYs8M2j2LEeiPgxpSHzj',\n            purpose: 1017,\n            coin_type: 1,\n            account: 29\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2uZo7V7m8cKKbeDCTJ2LgWPCqPy8iFU7YzbPCoCB8kZQa2ZQp2V26Ra4sUzLg2Piw9Rtn5d5P5bSyJ9xWycRe155VfGfHA8kq',\n            purpose: 1017,\n            coin_type: 1,\n            account: 30\n        },\n        {\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Signer Node Settings in lnd.conf\nDESCRIPTION: Configuration settings for the signer node which contains private keys. These settings apply hardening parameters to isolate the node from the internet and disable chain backend connections.\n\nLANGUAGE: text\nCODE:\n```\n# We apply some basic \"hardening\" parameters to make sure no connections to the\n# internet are opened.\n\n[Application Options]\n# Don't listen on the p2p port.\nnolisten=true\n\n# Don't reach out to the bootstrap nodes, we don't need a synced graph.\nnobootstrap=true\n\n# Just an example, this is the port that needs to be opened in the firewall and\n# reachable from the node \"watch-only\".\nrpclisten=10019\n\n# The signer node will not look at the chain at all, it only needs to sign\n# things with the keys contained in its wallet. So we don't need to hook it up\n# to any chain backend.\n[bitcoin]\n# We still need to signal that we're using the Bitcoin chain.\nbitcoin.active=true\n\n# And we're making sure mainnet parameters are used.\nbitcoin.mainnet=true\n\n# But we aren't using a \"real\" chain backed but a mocked one.\nbitcoin.node=nochainbackend\n```\n\n----------------------------------------\n\nTITLE: Opening a Lightning Channel Between Alice and Bob\nDESCRIPTION: Creates a payment channel from Alice to Bob with an initial local amount of 1,000,000 satoshis. This involves opening the channel and confirming the funding transaction with mining.\n\nLANGUAGE: shell\nCODE:\n```\n# Open the channel with \"Bob\":\nalice $  lncli --network=simnet openchannel --node_key=<bob_identity_pubkey> --local_amt=1000000\n\n# Include funding transaction in block thereby opening the channel:\n$  docker exec -it btcd /start-btcctl.sh generate 3\n\n# Check that channel with \"Bob\" was opened:\nalice $  lncli --network=simnet listchannels\n{\n    \"channels\": [\n        {\n            \"active\": true,\n            \"remote_pubkey\": \"0343bc80b914aebf8e50eb0b8e445fc79b9e6e8e5e018fa8c5f85c7d429c117b38\",\n            \"channel_point\": \"3511ae8a52c97d957eaf65f828504e68d0991f0276adff94c6ba91c7f6cd4275:0\",\n            \"chan_id\": \"1337006139441152\",\n            \"capacity\": \"1005000\",\n            \"local_balance\": \"1000000\",\n            \"remote_balance\": \"0\",\n            \"commit_fee\": \"8688\",\n            \"commit_weight\": \"600\",\n            \"fee_per_kw\": \"12000\",\n            \"unsettled_balance\": \"0\",\n            \"total_satoshis_sent\": \"0\",\n            \"total_satoshis_received\": \"0\",\n            \"num_updates\": \"0\",\n             \"pending_htlcs\": [\n            ],\n            \"csv_delay\": 4\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running LND with etcd via Command Line\nDESCRIPTION: Command example for running LND with etcd as the backend database, specifying connection parameters and TLS certificate information.\n\nLANGUAGE: shell\nCODE:\n```\n./lnd-debug \\\n    --db.backend=etcd \\\n    --db.etcd.host=127.0.0.1:2379 \\\n    --db.etcd.certfile=/home/user/etcd/bin/default.etcd/fixtures/client/cert.pem \\\n    --db.etcd.keyfile=/home/user/etcd/bin/default.etcd/fixtures/client/key.pem \\\n    --db.etcd.insecure_skip_verify\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Macaroon Authentication for All gRPC Requests\nDESCRIPTION: C# code to set up automatic macaroon authentication for all gRPC requests to Lightning Network Daemon using interceptors.\n\nLANGUAGE: C#\nCODE:\n```\n// add the macaroon auth credentials using an interceptor\n// so every call is properly authenticated\nTask AddMacaroon(AuthInterceptorContext context, Metadata metadata)\n{\n    metadata.Add(new Metadata.Entry(\"macaroon\", macaroon));\n    return Task.CompletedTask;\n}\nvar credentials = ChannelCredentials.Create(new SslCredentials(), CallCredentials.FromInterceptor(AddMacaroon));\n\n// finally pass in the credentials and handler when creating a channel\nvar channel = GrpcChannel.ForAddress(\n    \"localhost:10009\",\n    new GrpcChannelOptions\n    {\n        // Add the HttpClientHandler same as before\n        HttpHandler = httpClientHandler,\n        Credentials = credentials\n    });\nvar client = new Lnrpc.Lightning.LightningClient(channel);\n\n// now every call will be made with the macaroon already included\nclient.GetInfo(new GetInfoRequest());\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch-Only Node Settings in lnd.conf\nDESCRIPTION: Configuration settings for the watch-only node which enables remote signing and specifies connection details to the signer node including TLS certificate and macaroon paths.\n\nLANGUAGE: text\nCODE:\n```\n[remotesigner]\nremotesigner.enable=true\nremotesigner.rpchost=zane.example.internal:10019\nremotesigner.tlscertpath=/home/watch-only/example/signer.tls.cert\nremotesigner.macaroonpath=/home/watch-only/example/signer.custom.macaroon\n```\n\n----------------------------------------\n\nTITLE: Funding PSBT with Specific Output Address using lncli wallet psbt fund\nDESCRIPTION: This example demonstrates using lncli to create a PSBT that sends 50000000 satoshis (0.5 BTC) to a specific address. The command automatically selects inputs, creates a change output, and locks the selected UTXOs to prevent double-spending.\n\nLANGUAGE: shell\nCODE:\n```\nlncli wallet psbt fund --outputs='{\"bcrt1qjrdns4f5zwkv29ln86plqzs092yd5fg6nsz8re\":50000000}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Channel Acceptor RPC with WebSockets in Node.js\nDESCRIPTION: This code demonstrates how to use a bidirectional streaming RPC with lnd's channel acceptor API. It establishes a WebSocket connection that allows programmatic decision-making for accepting or rejecting incoming channel requests, showing how to handle both incoming messages and send responses back on the same WebSocket connection.\n\nLANGUAGE: javascript\nCODE:\n```\n// --------------------------\n// Example with websockets:\n// --------------------------\nconst WebSocket = require('ws');\nconst fs = require('fs');\nconst macaroon = fs.readFileSync('LND_DIR/data/chain/bitcoin/simnet/admin.macaroon').toString('hex');\nlet ws = new WebSocket('wss://localhost:8080/v1/channels/acceptor?method=POST', {\n  // Work-around for self-signed certificates.\n  rejectUnauthorized: false,\n  headers: {\n    'Grpc-Metadata-Macaroon': macaroon,\n  },\n});\nws.on('open', function() {\n    // We always _need_ to send an initial message to kickstart the request.\n    // This empty message will be ignored by the channel acceptor though, this\n    // is just for telling the grpc-gateway library that it can forward the\n    // request to the gRPC interface now. If this were an RPC where the client\n    // always sends the first message (for example the streaming payment RPC\n    // /v1/channels/transaction-stream), we'd simply send the first \"real\"\n    // message here when needed.\n    ws.send('{}');\n});\nws.on('error', function(err) {\n    console.log('Error: ' + err);\n});\nws.on('ping', function ping(event) {\n   console.log('Received ping from server: ' + JSON.stringify(event)); \n});\nws.on('message', function incoming(event) {\n    console.log('New channel accept message: ' + event);\n    const result = JSON.parse(event).result;\n    \n    // Accept the channel after inspecting it.\n    ws.send(JSON.stringify({accept: true, pending_chan_id: result.pending_chan_id}));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Node with Existing Channel Backups in LND\nDESCRIPTION: Command to create a new LND node from scratch while restoring channels from an existing multi-channel backup file, allowing recovery of channels during initial node setup.\n\nLANGUAGE: shell\nCODE:\n```\nlncli create -multi_file=channel.backup\n```\n\n----------------------------------------\n\nTITLE: Deleting a Macaroon Root Key\nDESCRIPTION: Shell command to delete a specific macaroon root key by its ID, which invalidates all macaroons created with that key.\n\nLANGUAGE: shell\nCODE:\n```\n$  lncli deletemacaroonid root_key_id\n```\n\n----------------------------------------\n\nTITLE: Configuring LND for PostgreSQL\nDESCRIPTION: Sample configuration for setting up LND to use PostgreSQL as its backend. This includes selecting the Postgres backend, setting the database connection string, and configuring the connection timeout.\n\nLANGUAGE: ini\nCODE:\n```\n[db]\ndb.backend=postgres\ndb.postgres.dsn=postgresql://dbuser:dbpass@127.0.0.1:5432/dbname\ndb.postgres.timeout=0\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitcoin Node with Mining Address\nDESCRIPTION: Sets up the btcd node to use Alice's address for mining rewards and generates initial blocks. This process activates segwit and provides Alice with initial funds.\n\nLANGUAGE: shell\nCODE:\n```\n# Recreate \"btcd\" node and set Alice's address as mining address:\n$  export MINING_ADDRESS=<alice_address>\n$  docker-compose up -d btcd\n\n# Generate 400 blocks (we need at least \"100 >=\" blocks because of coinbase \n# block maturity and \"300 ~=\" in order to activate segwit):\n$  docker exec -it btcd /start-btcctl.sh generate 400\n\n# Check that segwit is active:\n$  docker exec -it btcd /start-btcctl.sh getblockchaininfo | grep -A 1 segwit\n```\n\n----------------------------------------\n\nTITLE: Secure Auto-Unlock with Password Manager and Named Pipe\nDESCRIPTION: A more secure example of auto-unlocking an lnd wallet using the 'pass' password manager and a named pipe. This prevents the password from being stored in a plaintext file.\n\nLANGUAGE: shell\nCODE:\n```\nlnd --bitcoin.active --bitcoin.xxxx .....\n```\n\nLANGUAGE: shell\nCODE:\n```\nlncli create\n```\n\nLANGUAGE: shell\nCODE:\n```\nlncli stop\n```\n\nLANGUAGE: shell\nCODE:\n```\npass insert lnd/my-wallet-password\n```\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\n\n# Create a named pipe. As the name suggests, this is a FIFO (first in first\n# out) pipe. Everything sent in can be read out again without the content\n# actually being written to a disk.\nmkfifo /tmp/wallet-password-pipe\n\n# Read the password from the manager and attempt to write it to the pipe. Any\n# write to a pipe will only be accepted once there is a process that reads\n# from the pipe at the same time. That's why we need to run this process in\n# the background (the ampersand & at the end) because it would block our\n# script from continuing otherwise.\npass lnd/my-wallet-password > /tmp/wallet-password-pipe &\n\n# Now we can start lnd.\nlnd --bitcoin.active --bitcoin.xxxx ..... \\\n  --wallet-unlock-password-file=/tmp/wallet-password-pipe\n```\n\nLANGUAGE: shell\nCODE:\n```\n./run-lnd.sh\n```\n\n----------------------------------------\n\nTITLE: Building LND with Docker for a Tagged Release\nDESCRIPTION: Instructions for building a specific tagged version of LND using Docker, which creates a directory with release binaries for all supported operating systems and architectures.\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/lightningnetwork/lnd\ncd lnd\ngit checkout v0.x.y-beta\nmake docker-release tag=v0.x.y-beta\n```\n\n----------------------------------------\n\nTITLE: New HTLC Modifier RPC for Invoice Validation\nDESCRIPTION: New invoicesrpc.HtlcModifier RPC that allows modification of incoming HTLCs attempting to satisfy an invoice before validation, enabling custom channels to determine the actual value of an HTLC even if it doesn't match the BTC amount being transferred.\n\nLANGUAGE: Markdown\nCODE:\n```\ninvoicesrpc.HtlcModifier\n```\n\n----------------------------------------\n\nTITLE: Running lnd with bitcoind Backend\nDESCRIPTION: Command line example for launching lnd with bitcoind as the backend, specifying necessary connection parameters, ZeroMQ addresses, and external IP configuration.\n\nLANGUAGE: shell\nCODE:\n```\n lnd --bitcoin.active --bitcoin.testnet --debuglevel=debug \\\n       --bitcoin.node=bitcoind --bitcoind.rpcuser=REPLACEME \\\n       --bitcoind.rpcpass=REPLACEME \\\n       --bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 \\\n       --bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333 \\\n       --externalip=X.X.X.X\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional-streaming RPC with Python and lnd\nDESCRIPTION: Example of a bidirectional-streaming RPC that continuously sends payments every 2 seconds.\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\nimport codecs\n\ndef request_generator(dest, amt):\n      # Initialization code here\n      counter = 0\n      print(\"Starting up\")\n      while True:\n          request = ln.SendRequest(\n              dest=dest,\n              amt=amt,\n          )\n          yield request\n          # Alter parameters here\n          counter += 1\n          sleep(2)\n\n# Outputs from lncli are hex-encoded\ndest_hex = <RECEIVER_ID_PUBKEY>\ndest_bytes = codecs.decode(dest_hex, 'hex')\n\nrequest_iterable = request_generator(dest=dest_bytes, amt=100)\n\nfor payment in stub.SendPayment(request_iterable):\n    print(payment)\n```\n\n----------------------------------------\n\nTITLE: First Hop Custom Records Field in SendPaymentV2 RPC\nDESCRIPTION: New field added to routerrpc.SendPaymentV2 RPC that allows users to send custom p2p wire message TLV types to the first hop of a payment, which can also be read by external software via the HtlcInterceptor.\n\nLANGUAGE: Markdown\nCODE:\n```\nfirst_hop_custom_records\n```\n\n----------------------------------------\n\nTITLE: Proper Error and Log Message Formatting in Go\nDESCRIPTION: Exception to the function call wrapping rules specifically for log and error messages. These should be formatted to minimize line count while still adhering to the 80-character limit.\n\nLANGUAGE: go\nCODE:\n```\n// WRONG\nreturn fmt.Errorf(\n\t\"this is a long error message with a couple (%d) place holders\",\n\tlen(things),\n)\n\nlog.Debugf(\n\t\"Something happened here that we need to log: %v\",\n\tlongVariableNameHere,\n)\n```\n\nLANGUAGE: go\nCODE:\n```\n// RIGHT\nreturn fmt.Errorf(\"this is a long error message with a couple (%d) place \"+\n\t\"holders\", len(things))\n\nlog.Debugf(\"Something happened here that we need to log: %v\",\n\tlongVariableNameHere)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Node.js Project for LND Client\nDESCRIPTION: Commands to initialize a Node.js project and install required gRPC dependencies for connecting to an LND node.\n\nLANGUAGE: shell\nCODE:\n```\nnpm init (or npm init -f if you want to use the default values without prompt)\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @grpc/grpc-js @grpc/proto-loader --save\n```\n\n----------------------------------------\n\nTITLE: Streaming Client for Invoice Payment Updates\nDESCRIPTION: Ruby script that subscribes to invoice updates from lnd and streams them as they occur. Uses gRPC streaming capabilities to receive real-time updates.\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\n\n$:.unshift(File.dirname(__FILE__))\n\nrequire 'grpc'\nrequire 'lightning_services_pb'\n\nENV['GRPC_SSL_CIPHER_SUITES'] = \"HIGH+ECDSA\"\n\ncertificate = File.read(File.expand_path(\"~/.lnd/tls.cert\"))\ncredentials = GRPC::Core::ChannelCredentials.new(certificate)\nstub = Lnrpc::Lightning::Stub.new('127.0.0.1:10009', credentials)\n\nstub.subscribe_invoices(Lnrpc::InvoiceSubscription.new) do |invoice|\n  puts invoice.inspect\nend\n```\n\n----------------------------------------\n\nTITLE: Simple RPC Call to Lightning Network Daemon in C#\nDESCRIPTION: C# code demonstrating a simple synchronous RPC call to retrieve and display wallet balance from lnd.\n\nLANGUAGE: C#\nCODE:\n```\n// Retrieve and display the wallet balance\n// Use \"WalletBalanceAsync\" if in async context\nvar response = client.WalletBalance(new WalletBalanceRequest());\nConsole.WriteLine(response);\n```\n\n----------------------------------------\n\nTITLE: Executing Batched Channel Opening Command in LND CLI\nDESCRIPTION: This command allows users to open multiple channels in a single transaction using the new batched channel funding feature. It references the lncli batchopenchannel command with more detailed information available in the PSBT documentation.\n\nLANGUAGE: markdown\nCODE:\n```\nlncli batchopenchannel\n```\n\n----------------------------------------\n\nTITLE: Downloading and Compiling lnd Proto Files in Python\nDESCRIPTION: Steps to download the Lightning Network protocol buffer definition and compile it for Python use.\n\nLANGUAGE: shell\nCODE:\n```\nlnd $  curl -o lightning.proto -s https://raw.githubusercontent.com/lightningnetwork/lnd/master/lnrpc/lightning.proto\n```\n\nLANGUAGE: shell\nCODE:\n```\nlnd $  python -m grpc_tools.protoc --proto_path=.  --python_out=. --grpc_python_out=. lightning.proto\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Connection for lnd Block Notifications in Browser Environment\nDESCRIPTION: This JavaScript code demonstrates how to establish a WebSocket connection to lnd's block notification RPC in a browser environment. It shows how to handle macaroon authentication as a protocol parameter (workaround for browser security limitations), send the initial request, and process incoming messages.\n\nLANGUAGE: javascript\nCODE:\n```\nconst host = 'localhost:8080'; // The default REST port of lnd, can be overwritten with --restlisten=ip:port\nconst macaroon = '0201036c6e6402eb01030a10625e7e60fd00f5a6f9cd53f33fc82a...'; // The hex encoded macaroon to send\nconst initialRequest = { // The initial request to send (see API docs for each RPC).\n    hash: \"xlkMdV382uNPskw6eEjDGFMQHxHNnZZgL47aVDSwiRQ=\", // Just some example to show that all `byte` fields always have to be base64 encoded in the REST API.\n    height: 144,\n}\n\n// The protocol is our workaround for sending the macaroon because custom header\n// fields aren't allowed to be sent by the browser when opening a WebSocket.\nconst protocolString = 'Grpc-Metadata-Macaroon+' + macaroon;\n\n// Let's now connect the web socket. Notice that all WebSocket open calls are\n// always GET requests. If the RPC expects a call to be POST or DELETE (see API\n// docs to find out), the query parameter \"method\" can be set to overwrite.\nconst wsUrl = 'wss://' + host + '/v2/chainnotifier/register/blocks?method=POST';\nlet ws = new WebSocket(wsUrl, protocolString);\nws.onopen = function (event) {\n    // After the WS connection is establishes, lnd expects the client to send the\n    // initial message. If an RPC doesn't have any request parameters, an empty\n    // JSON object has to be sent as a string, for example: ws.send('{}')\n    ws.send(JSON.stringify(initialRequest));\n}\nws.onmessage = function (event) {\n    // We received a new message.\n    console.log(event);\n\n    // The data we're really interested in is in data and is always a string\n    // that needs to be parsed as JSON and always contains a \"result\" field:\n    console.log(\"Payload: \");\n    console.log(JSON.parse(event.data).result);\n}\nws.onerror = function (event) {\n    // An error occurred, let's log it to the console.\n    console.log(event);\n}\n```\n\n----------------------------------------\n\nTITLE: Command-Line Usage for Creating Private Invoices\nDESCRIPTION: Shows the new explicit way to create private invoices with hop hints by using the --private flag with addinvoice.\n\nLANGUAGE: bash\nCODE:\n```\nlncli addinvoice --private\n```\n\n----------------------------------------\n\nTITLE: Using the restorechanbackup Command Help in LND\nDESCRIPTION: Command to display the help information for the restorechanbackup command, which shows all available options for restoring Static Channel Backups in an existing LND node.\n\nLANGUAGE: shell\nCODE:\n```\nlncli restorechanbackup -h\n```\n\n----------------------------------------\n\nTITLE: Reading and Encoding Macaroons for lnd Authentication\nDESCRIPTION: Code to read and encode the macaroon for authentication with lnd.\n\nLANGUAGE: python\nCODE:\n```\nimport codecs\n\n# Lnd admin macaroon is at ~/.lnd/data/chain/bitcoin/simnet/admin.macaroon on Linux and\n# ~/Library/Application Support/Lnd/data/chain/bitcoin/simnet/admin.macaroon on Mac\nwith open(os.path.expanduser('~/.lnd/data/chain/bitcoin/simnet/admin.macaroon'), 'rb') as f:\n    macaroon_bytes = f.read()\n    macaroon = codecs.encode(macaroon_bytes, 'hex')\n```\n\n----------------------------------------\n\nTITLE: Installing Go for Linux ARMv6\nDESCRIPTION: Commands to download, verify, and install Go 1.23.6 on Linux ARMv6 systems, including SHA256 checksum verification for security.\n\nLANGUAGE: shell\nCODE:\n```\nwget https://dl.google.com/go/go1.23.6.linux-armv6l.tar.gz\nsha256sum go1.23.6.linux-armv6l.tar.gz | awk -F \" \" '{ print $1 }'\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo rm -rf /usr/local/go && tar -C /usr/local -xzf go1.23.6.linux-armv6l.tar.gz\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n----------------------------------------\n\nTITLE: Creating Admin-Like Custom Macaroon\nDESCRIPTION: Shell command for creating a custom macaroon with extensive permissions similar to admin.macaroon but for a specific use case.\n\nLANGUAGE: shell\nCODE:\n```\n$  lncli bakemacaroon --save_to lnbits.macaroon \\\n   address:read address:write \\\n   info:read info:write \\\n   invoices:read invoices:write \\\n   macaroon:generate macaroon:read macaroon:write \\\n   message:read message:write \\\n   offchain:read offchain:write \\\n   onchain:read onchain:write \\\n   peers:read peers:write \\\n   signer:generate signer:read\n```\n\n----------------------------------------\n\nTITLE: Viewing decoded PSBT transaction details in JSON format\nDESCRIPTION: The decoded PSBT transaction details showing the transaction ID, inputs, outputs, fee, and other PSBT-specific data. The output shows both the change address (at index 0) and the payment address (at index 1).\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tx\": {\n    \"txid\": \"33a316d62ddf74656967754d26ea83a3cb89e03ae44578d965156d4b71b1fce7\",\n    \"hash\": \"33a316d62ddf74656967754d26ea83a3cb89e03ae44578d965156d4b71b1fce7\",\n    \"version\": 2,\n    \"size\": 113,\n    \"vsize\": 113,\n    \"weight\": 452,\n    \"locktime\": 0,\n    \"vin\": [\n      {\n        \"txid\": \"f8efa583e93ab71debe62a5374f91563aa10a3461518042aaddb464b656350e2\",\n        \"vout\": 1,\n        \"scriptSig\": {\n          \"asm\": \"\",\n          \"hex\": \"\"\n        },\n        \"sequence\": 4294967295\n      }\n    ],\n    \"vout\": [\n      {\n        \"value\": 0.17977676,\n        \"n\": 0,\n        \"scriptPubKey\": {\n          \"asm\": \"0 bfaa5381b28737ad0267e4509f9c8eb87e9cd968\",\n          \"hex\": \"0014bfaa5381b28737ad0267e4509f9c8eb87e9cd968\",\n          \"reqSigs\": 1,\n          \"type\": \"witness_v0_keyhash\",\n          \"addresses\": [\n            \"bcrt1qh7498qdjsum66qn8u3gfl8ywhplfektg6mutfs\"\n          ]\n        }\n      },\n      {\n        \"value\": 0.50000000,\n        \"n\": 1,\n        \"scriptPubKey\": {\n          \"asm\": \"0 90db38553413acc517f33e83f00a0f2a88da251a\",\n          \"hex\": \"001490db38553413acc517f33e83f00a0f2a88da251a\",\n          \"reqSigs\": 1,\n          \"type\": \"witness_v0_keyhash\",\n          \"addresses\": [\n            \"bcrt1qjrdns4f5zwkv29ln86plqzs092yd5fg6nsz8re\"\n          ]\n        }\n      }\n    ]\n  },\n  \"unknown\": {\n  },\n  \"inputs\": [\n    {\n      \"witness_utxo\": {\n...\n      },\n      \"non_witness_utxo\": {\n        ...\n      },\n      \"sighash\": \"ALL\"\n    }\n  ],\n  \"outputs\": [\n...\n  ],\n  \"fee\": 0.00007050\n}\n```\n\n----------------------------------------\n\nTITLE: Sample bitcoin.conf Configuration for lnd\nDESCRIPTION: A configuration example for bitcoin.conf that enables testnet, server mode, daemon mode, and sets up ZeroMQ notification interfaces needed by lnd.\n\nLANGUAGE: text\nCODE:\n```\ntestnet=1\nserver=1\ndaemon=1\nzmqpubrawblock=tcp://127.0.0.1:28332\nzmqpubrawtx=tcp://127.0.0.1:28333\n```\n\n----------------------------------------\n\nTITLE: Using LNCLI sendcoins with Specific UTXOs\nDESCRIPTION: Command line example for sending specific wallet UTXOs to an address with a specific amount using the new --utxo flag.\n\nLANGUAGE: bash\nCODE:\n```\nsendcoins --addr YOUR_ADDR --amt YOUR_AMT --utxo selected_wallet_utxo1 --utxo selected_wallet_utxo2\n```\n\n----------------------------------------\n\nTITLE: Configuring Subsystem-Specific Logging Levels in LND\nDESCRIPTION: Commands to set different logging levels for specific subsystems in LND, allowing for targeted debugging without excessive output.\n\nLANGUAGE: shell\nCODE:\n```\n$  lnd --debuglevel=<subsystem>=<level>,<subsystem2>=<level>,...\n$  lncli debuglevel --level=<subsystem>=<level>,<subsystem2>=<level>,...\n```\n\n----------------------------------------\n\nTITLE: Command-Line Usage for Constraining Macaroons\nDESCRIPTION: Shows how to use the new constrainmacaroon command to add caveats/restrictions to an existing macaroon without needing to create a new one.\n\nLANGUAGE: bash\nCODE:\n```\nconstrainmacaroon\n```\n\n----------------------------------------\n\nTITLE: Installing lnd from Source with Git\nDESCRIPTION: Commands to clone the lnd repository from GitHub and install it from source. This installs the current master branch of lnd which includes lnd, lncli, and all related dependencies.\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/lightningnetwork/lnd\ncd lnd\nmake install\n```\n\n----------------------------------------\n\nTITLE: Using SendPaymentRequest with cancelable flag in Go\nDESCRIPTION: Example of using the SendPaymentRequest with the new 'cancelable' flag which allows payment cancellation either manually through context cancellation or automatically at timeout.\n\nLANGUAGE: go\nCODE:\n```\nreq := &lnrpc.SendPaymentRequest{\n    // other fields\n    cancelable: true,\n    timeout_seconds: 60,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Account into LND\nDESCRIPTION: Command to import an extended public key into an LND node, creating a watch-only account that can be managed without having the private keys.\n\nLANGUAGE: shell\nCODE:\n```\n$ lncli-bob wallet accounts import vpub5Z9beF6NYCrHeDmKC38tM3xXMDFFSARa9sdHRPChEMGqtxiELfZB8hm6FwBpBvfPpX2HGG8edYVV9Wupe43PEJJhhfnz1egtQNNaDXyYExn alice\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Dependencies for Python lnd Client\nDESCRIPTION: Installing the necessary gRPC tools for communicating with lnd.\n\nLANGUAGE: shell\nCODE:\n```\nlnd $  pip install  grpcio-tools \n```\n\n----------------------------------------\n\nTITLE: Creating PSBT for Second Lightning Channel with bitcoin-cli\nDESCRIPTION: Example command using bitcoin-cli to create a funded PSBT for the second Lightning Network channel with an output of 0.01 BTC to a different address.\n\nLANGUAGE: shell\nCODE:\n```\n$  bitcoin-cli walletcreatefundedpsbt [] '[{\"tb1q53626fcwwtcdc942zaf4laqnr3vg5gv4g0hakd2h7fw2pmz6428sk3ezcx\":0.01000000}]'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Macaroon Interceptor for gRPC\nDESCRIPTION: Ruby class implementation of a gRPC client interceptor that automatically adds macaroon authentication to all requests, avoiding the need to specify it for each call.\n\nLANGUAGE: ruby\nCODE:\n```\nclass MacaroonInterceptor < GRPC::ClientInterceptor\n  attr_reader :macaroon\n\n  def initialize(macaroon)\n    @macaroon = macaroon\n    super\n  end\n\n  def request_response(request:, call:, method:, metadata:)\n    metadata['macaroon'] = macaroon\n    yield\n  end\n\n  def server_streamer(request:, call:, method:, metadata:)\n    metadata['macaroon'] = macaroon\n    yield\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing lnd with Custom Tags\nDESCRIPTION: Command to install lnd with a custom set of tags to include only specific functionality. This example includes signrpc, walletrpc, routerrpc, and invoicesrpc tags.\n\nLANGUAGE: shell\nCODE:\n```\nmake install tags=\"signrpc walletrpc routerrpc invoicesrpc\"\n```\n\n----------------------------------------\n\nTITLE: Registering Logger Subsystem in LND\nDESCRIPTION: Code snippet showing how a new sublogger is registered in LND's logging system, in this case for the HSWC (htlcswitch) subsystem.\n\nLANGUAGE: go\nCODE:\n```\n AddSubLogger(root, \"HSWC\", interceptor, htlcswitch.UseLogger)\n```\n\n----------------------------------------\n\nTITLE: Creating a Funding PSBT with lnd\nDESCRIPTION: Uses lncli's wallet psbt fund command to create a PSBT for a Lightning channel. This approach is suitable for a two-node setup where one node is in watch-only mode and another handles signing.\n\nLANGUAGE: shell\nCODE:\n```\nlncli wallet psbt fund --outputs='{\"bcrt1qh33ghvgjj3ef625nl9jxz6nnrz2z9e65vsdey7w5msrklgr6rc0sv0s08q\":1234567}'\n```\n\n----------------------------------------\n\nTITLE: LND Configuration File with etcd Settings\nDESCRIPTION: Example lnd.conf configuration file showing the necessary settings to use etcd as the backend database, including connection and certificate parameters.\n\nLANGUAGE: text\nCODE:\n```\n[db]\ndb.backend=etcd\ndb.etcd.host=127.0.0.1:2379\ndb.etcd.cerfile=/home/user/etcd/bin/default.etcd/fixtures/client/cert.pem\ndb.etcd.keyfile=/home/user/etcd/bin/default.etcd/fixtures/client/key.pem\ndb.etcd.insecure_skip_verify=true\n```\n\n----------------------------------------\n\nTITLE: Initializing gRPC Channel and Client for Lightning Network in C#\nDESCRIPTION: C# code to set up a secure gRPC channel and Lightning client for connecting to an lnd node, including TLS certificate handling for secure communication.\n\nLANGUAGE: C#\nCODE:\n```\nusing System.IO;\nusing System.Net.Http;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Threading.Tasks;\nusing Grpc.Net.Client;\n...\n\n// Due to updated ECDSA generated tls.cert we need to let gprc know that\n// we need to use that cipher suite otherwise there will be a handshake\n// error when we communicate with the lnd rpc server.\nSystem.Environment.SetEnvironmentVariable(\"GRPC_SSL_CIPHER_SUITES\", \"HIGH+ECDSA\");\n            \n// Lnd cert is at AppData/Local/Lnd/tls.cert on Windows\n// ~/.lnd/tls.cert on Linux and ~/Library/Application Support/Lnd/tls.cert on Mac\nvar rawCert = File.ReadAllBytes(<Tls_Cert_Location>);\nvar x509Cert = new X509Certificate2(rawCert);\nvar httpClientHandler = new HttpClientHandler\n{\n    // HttpClientHandler will validate certificate chain trust by default. This won't work for a self-signed cert.\n    // Therefore validate the certificate directly\n    ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) \n        => x509Cert.Equals(cert)\n};\n\nvar channel = GrpcChannel.ForAddress(\n    \"localhost:10009\",\n    new GrpcChannelOptions\n    {\n        HttpHandler = httpClientHandler,\n    });\nvar client = new Lnrpc.Lightning.LightningClient(channel);\n```\n\n----------------------------------------\n\nTITLE: Checking the Assertion in Alloy\nDESCRIPTION: This command instructs the Alloy Analyzer to check the max_fee_rate_before_deadline assertion, which will find counterexamples if the model contains bugs.\n\nLANGUAGE: alloy\nCODE:\n```\ncheck max_fee_rate_before_deadline\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Balance with Python gRPC and lnd\nDESCRIPTION: Simple RPC example that retrieves and displays the wallet balance from an lnd node.\n\nLANGUAGE: python\nCODE:\n```\n# Retrieve and display the wallet balance\nresponse = stub.WalletBalance(ln.WalletBalanceRequest())\nprint(response.total_balance)\n```\n\n----------------------------------------\n\nTITLE: Using Macaroon Authentication in Individual gRPC Requests to lnd\nDESCRIPTION: C# code showing how to include macaroon authentication in individual gRPC requests to Lightning Network Daemon.\n\nLANGUAGE: C#\nCODE:\n```\nclient.GetInfo(new GetInfoRequest(), new Metadata() { new Metadata.Entry(\"macaroon\", macaroon) });\n```\n\n----------------------------------------\n\nTITLE: Implementing Response-streaming RPC with LND in JavaScript\nDESCRIPTION: Code to subscribe to invoice events using the subscribeInvoices method. Sets up event handlers for data, end, and status events to process incoming invoice updates.\n\nLANGUAGE: javascript\nCODE:\n```\nlet call = lightning.subscribeInvoices({});\ncall.on('data', function(invoice) {\n    console.log(invoice);\n})\n.on('end', function() {\n  // The server has finished sending\n})\n.on('status', function(status) {\n  // Process status\n  console.log(\"Current status\" + status);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for gRPC in .NET\nDESCRIPTION: Shell commands to add the necessary NuGet packages (Grpc.Tools, Google.Protobuf, and Grpc.Net.Client) to the .NET project.\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Grpc.Tools\ndotnet add package Google.Protobuf\ndotnet add package Grpc.Net.Client\n```\n\n----------------------------------------\n\nTITLE: Running lnd with btcd Backend\nDESCRIPTION: Command to run lnd using btcd as the backend on the Bitcoin testnet. This configures lnd to use an active Bitcoin connection, debug logging, and RPC authentication for connecting to btcd.\n\nLANGUAGE: shell\nCODE:\n```\nlnd --bitcoin.active --bitcoin.testnet --debuglevel=debug \\\n       --btcd.rpcuser=kek --btcd.rpcpass=kek --externalip=X.X.X.X\n```\n\n----------------------------------------\n\nTITLE: Basic Ruby Client for Displaying Wallet Balance\nDESCRIPTION: Simple Ruby script that connects to lnd and retrieves the wallet balance. Assumes lnd is running on localhost:10009 with no macaroons enabled.\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\n\n$:.unshift(File.dirname(__FILE__))\n\nrequire 'grpc'\nrequire 'lightning_services_pb'\n\n# Due to updated ECDSA generated tls.cert we need to let grpc know that\n# we need to use that cipher suite otherwise there will be a handshake\n# error when we communicate with the lnd rpc server.\nENV['GRPC_SSL_CIPHER_SUITES'] = \"HIGH+ECDSA\"\n\ncertificate = File.read(File.expand_path(\"~/.lnd/tls.cert\"))\ncredentials = GRPC::Core::ChannelCredentials.new(certificate)\nstub = Lnrpc::Lightning::Stub.new('127.0.0.1:10009', credentials)\n\nresponse = stub.wallet_balance(Lnrpc::WalletBalanceRequest.new())\nputs \"Total balance: #{response.total_balance}\"\n```\n\n----------------------------------------\n\nTITLE: Building LND with PostgreSQL Support\nDESCRIPTION: Command to build LND from source with PostgreSQL support enabled. Since v0.14.1-beta, the necessary build tags are included by default.\n\nLANGUAGE: shell\nCODE:\n```\n$  make install\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Stub with Macaroon Interceptor\nDESCRIPTION: Ruby code to create a gRPC stub for lnd with an attached MacaroonInterceptor, allowing all requests to be automatically authenticated without explicitly providing metadata.\n\nLANGUAGE: ruby\nCODE:\n```\ncertificate = File.read(File.expand_path(\"~/.lnd/tls.cert\"))\ncredentials = GRPC::Core::ChannelCredentials.new(certificate)\nmacaroon_binary = File.read(File.expand_path(\"~/.lnd/data/chain/bitcoin/simnet/admin.macaroon\"))\nmacaroon = macaroon_binary.each_byte.map { |b| b.to_s(16).rjust(2,'0') }.join\n\nstub = Lnrpc::Lightning::Stub.new(\n\t'localhost:10009',\n\tcredentials,\n\tinterceptors: [MacaroonInterceptor.new(macaroon)]\n)\n\n# Now we don't need to pass the metadata on a request level\np stub.get_info(Lnrpc::GetInfoRequest.new)\n```\n\n----------------------------------------\n\nTITLE: Setting Simple Taproot Overlay Channels Configuration Flag\nDESCRIPTION: A new configuration item/CLI flag for enabling custom channel functionality in LND. This flag is used to turn on functionality related to Taproot custom channels.\n\nLANGUAGE: Markdown\nCODE:\n```\nprotocol.simple-taproot-overlay-chans\n```\n\n----------------------------------------\n\nTITLE: Setting Go Environment Variables\nDESCRIPTION: Commands to set the GOPATH environment variable and add the Go binary directory to the PATH. This enables proper workspace configuration and allows executing installed Go binaries.\n\nLANGUAGE: shell\nCODE:\n```\nexport GOPATH=~/go\nexport PATH=$PATH:$GOPATH/bin\n```\n\n----------------------------------------\n\nTITLE: Accessing lnd Container for Lightning Operations\nDESCRIPTION: Command to access the lnd Docker container shell for executing lightning network operations and commands.\n\nLANGUAGE: shell\nCODE:\n```\n$  docker exec -it lnd bash\n```\n\n----------------------------------------\n\nTITLE: Using LNCLI sendcoins to Sweep All Coins from Specific UTXOs\nDESCRIPTION: Command line example for sending all funds from specific wallet UTXOs to an address without generating a change output.\n\nLANGUAGE: bash\nCODE:\n```\nsendcoins --addr YOUR_ADDR --utxo selected_wallet_utxo1 --utxo selected_wallet_utxo2 --sweepall\n```\n\n----------------------------------------\n\nTITLE: Setting Mixed Logging Levels in LND\nDESCRIPTION: Example of setting a global critical logging level while enabling debug logging for a specific subsystem (HSWC - htlcswitch) in LND.\n\nLANGUAGE: shell\nCODE:\n```\n$ lnd --debuglevel=critical,HSWC=debug\n$ lncli debuglevel --level=critical,HSWC=debug\n```\n\n----------------------------------------\n\nTITLE: Performing Dry Run Account Import to Verify Addresses\nDESCRIPTION: Performs a dry run when importing an account to verify the derivation scheme by showing the first 5 external and internal addresses without actually importing the account.\n\nLANGUAGE: shell\nCODE:\n```\n$ lncli-bob wallet accounts import vpub5Z9beF6NYCrHeDmKC38tM3xXMDFFSARa9sdHRPChEMGqtxiELfZB8hm6FwBpBvfPpX2HGG8edYVV9Wupe43PEJJhhfnz1egtQNNaDXyYExn alice --dry_run\n```\n\n----------------------------------------\n\nTITLE: Listing UTXOs for Manual Coin Selection in LND\nDESCRIPTION: This command lists all available unspent transaction outputs (UTXOs) in the LND wallet, showing details such as address, amount, outpoint, and confirmations.\n\nLANGUAGE: shell\nCODE:\n```\n$  lncli listunspent\n{\n        \"utxos\": [\n                {\n                        \"address_type\": 0,\n                        \"address\": \"bcrt1qmsq36rtc6ap3m0m6jryu0ez923et6kxrv46t4w\",\n                        \"amount_sat\": 100000000,\n                        \"pk_script\": \"0014dc011d0d78d7431dbf7a90c9c7e4455472bd58c3\",\n                        \"outpoint\": \"3597b451ff56bc901eb806e8c644a004e934b4c208679756b4cddc455c768c48:1\",\n                        \"confirmations\": 6\n                },\n                {\n                        \"address_type\": 0,\n                        \"address\": \"bcrt1q92we8pecdnpjxdjq09etuccpat2qrm2acu4256\",\n                        \"amount_sat\": 67984726,\n                        \"pk_script\": \"00142a9d9387386cc32336407972be6301ead401ed5d\",\n                        \"outpoint\": \"f8efa583e93ab71debe62a5374f91563aa10a3461518042aaddb464b656350e2:1\",\n                        \"confirmations\": 24\n                },\n...\n        ]\n}\n```\n\n----------------------------------------\n\nTITLE: Function Definition Wrapping in Go\nDESCRIPTION: Guidelines for wrapping function definitions that exceed the 80-character limit. Proper examples show maintaining indentation on wrapped lines and leaving an empty line after the function declaration.\n\nLANGUAGE: go\nCODE:\n```\n// WRONG\nfunc foo(a, b, c,\n) (d, error) {\n\nfunc bar(a, b, c) (\n\td, error,\n) {\n\nfunc baz(a, b, c) (\n\td, error) {\n```\n\nLANGUAGE: go\nCODE:\n```\n// RIGHT\nfunc foo(a, b,\n\tc) (d, error) {\n\nfunc baz(a, b, c) (d,\n\terror) {\n\nfunc longFunctionName(\n\ta, b, c) (d, error) {\n```\n\nLANGUAGE: go\nCODE:\n```\n// WRONG\nfunc foo(a, b, c,\n\td, e) error {\n\tvar a int\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// RIGHT\nfunc foo(a, b, c,\n\td, e) error {\n\n\tvar a int\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Channel Backup for a Specific Channel in LND\nDESCRIPTION: Command to export a Static Channel Backup for a specific channel using the lncli exportchanbackup command with a specific channel point. This outputs the backup data in JSON format.\n\nLANGUAGE: shell\nCODE:\n```\nlncli --network=simnet exportchanbackup --chan_point=29be6d259dc71ebdf0a3a0e83b240eda78f9023d8aeaae13c89250c7e59467d5:0\n```\n\n----------------------------------------\n\nTITLE: Capturing Heap Profile from LND\nDESCRIPTION: Command to obtain a heap profile from LND's profiler, useful for analyzing memory allocations and potential memory leaks.\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://localhost:9736/debug/pprof/heap > heap.prof\n```\n\n----------------------------------------\n\nTITLE: btcd Backend Configuration Options\nDESCRIPTION: Available configuration options when using btcd as the backend for lnd. These parameters control the connection to a btcd node, including directory location, RPC credentials, and certificate settings.\n\nLANGUAGE: text\nCODE:\n```\nbtcd:\n      --btcd.dir=                                             The base directory that contains the node's data, logs, configuration file, etc. (default: /Users/<username>/Library/Application Support/Btcd)\n      --btcd.rpchost=                                         The daemon's rpc listening address. If a port is omitted, then the default port for the selected chain parameters will be used. (default: localhost)\n      --btcd.rpcuser=                                         Username for RPC connections\n      --btcd.rpcpass=                                         Password for RPC connections\n      --btcd.rpccert=                                         File containing the daemon's certificate file (default: /Users/<username>/Library/Application Support/Btcd/rpc.cert)\n      --btcd.rawrpccert=                                      The raw bytes of the daemon's PEM-encoded certificate chain which will be used to authenticate the RPC connection.\n```\n\n----------------------------------------\n\nTITLE: LND JSON Flag for Tracking Payments\nDESCRIPTION: A CLI flag to output payment tracking information in JSON format, making it easier to parse programmatically.\n\nLANGUAGE: markdown\nCODE:\n```\n--json\n```\n\n----------------------------------------\n\nTITLE: Performing a Simple RPC Call to LND in JavaScript\nDESCRIPTION: Example of a simple RPC call to fetch node information from LND. Uses the getInfo method and logs the response data.\n\nLANGUAGE: javascript\nCODE:\n```\nlightning.getInfo({}, function(err, response) {\n  if (err) {\n    console.log('Error: ' + err);\n  }\n  console.log('GetInfo:', response);\n});\n```\n\n----------------------------------------\n\nTITLE: Tor Bootstrap Process Output\nDESCRIPTION: Example output showing Tor's bootstrap process from initialization to successful circuit establishment.\n\nLANGUAGE: text\nCODE:\n```\nFeb 05 17:02:06.000 [notice] Bootstrapped 0%: Starting\nFeb 05 17:02:07.000 [notice] Starting with guard context \"default\"\nFeb 05 17:02:07.000 [notice] Bootstrapped 80%: Connecting to the Tor network\nFeb 05 17:02:07.000 [notice] Bootstrapped 85%: Finishing handshake with first hop\nFeb 05 17:02:08.000 [notice] Bootstrapped 90%: Establishing a Tor circuit\nFeb 05 17:02:11.000 [notice] Tor has successfully opened a circuit. Looks like client functionality is working.\nFeb 05 17:02:11.000 [notice] Bootstrapped 100%: Done\n```\n\n----------------------------------------\n\nTITLE: Changing an lnd Wallet Password\nDESCRIPTION: The command to change the password of an lnd wallet. This requires the wallet to be locked, asks for the existing password, and then prompts for a new one.\n\nLANGUAGE: shell\nCODE:\n```\nlncli changepassword\n```\n\n----------------------------------------\n\nTITLE: Proper Function Call Wrapping in Go\nDESCRIPTION: Guidelines for wrapping function calls that exceed the 80-character limit. The proper format places arguments on new lines after the opening parenthesis and the closing parenthesis on its own line.\n\nLANGUAGE: go\nCODE:\n```\n// WRONG\nvalue, err := bar(a,\n\ta, b, c)\n```\n\nLANGUAGE: go\nCODE:\n```\n// RIGHT\nvalue, err := bar(\n\ta, a, b, c,\n)\n```\n\n----------------------------------------\n\nTITLE: Running lnd in Neutrino Light Client Mode\nDESCRIPTION: Command to run lnd in Neutrino light client mode on the Bitcoin testnet. This configures lnd to use the neutrino backend and connect to a specified node that supports BIP 157/158 light client mode.\n\nLANGUAGE: shell\nCODE:\n```\nlnd --bitcoin.active --bitcoin.testnet --debuglevel=debug \\\n       --bitcoin.node=neutrino --neutrino.connect=faucet.lightning.community\n```\n\n----------------------------------------\n\nTITLE: Publishing Transactions through LND CLI Interface\nDESCRIPTION: Command reference for publishing transactions through the LND command line interface, which was made accessible in this release. This allows users to broadcast transactions directly through the lncli tool.\n\nLANGUAGE: markdown\nCODE:\n```\nlncli deletepayments\n```\n\n----------------------------------------\n\nTITLE: Finalizing a PSBT with lnd\nDESCRIPTION: Uses lncli's wallet psbt finalize command to finalize a PSBT in a two-node setup. This produces both the signed PSBT and the final transaction that will be broadcast.\n\nLANGUAGE: shell\nCODE:\n```\nlncli wallet psbt finalize cHNidP8BAH0CAAAAAUiMdlxF3M20VpdnCMK0NOkEoETG6Aa4HpC8Vv9RtJc1AQAAAAD/////AofWEgAAAAAAIgAgvGKLsRKUcp0qk/lkYWpzGJQi51RkG5J51NwHb6B6Hh+X7OIFAAAAABYAFNigOB6EbCLRi+Evlv4r2yJx63NxAAAAAAABAN4CAAAAAAEBK/SGXIaP4Ff+nx/AvD/soTUWT/pd2LsbMmrXWHEtEugBAAAAAP7///8CyP/PsgAAAAAWABQ16ERcIFzTuVVbVatlqWhDYem5QADh9QUAAAAAFgAU3AEdDXjXQx2/epDJx+RFVHK9WMMCRzBEAiA6roLWC6eHmyQGbznYnrIS4tZS7j5drR0BuIzOMm8BBgIgXjKQpGxwZs2L5Y8W9SQUMlQDLqHKNMSH4vuTkHR7l2gBIQJx/ejYU1tPV9J6RPfN2AbB1KDDyOFOMQbR3p6WVUxKqVcAAAABAR8A4fUFAAAAABYAFNwBHQ1410Mdv3qQycfkRVRyvVjDAQMEAQAAAAAAAA==\n```\n\n----------------------------------------\n\nTITLE: Setting up Lightning Network Topology Diagram\nDESCRIPTION: A network diagram showing the topology of the four Lightning nodes (Alice, Bob, Charlie, and Dave) used in the test, connected in a linear chain.\n\nLANGUAGE: text\nCODE:\n```\nAlice <---> Bob <---> Charlie <---> Dave\n```\n\n----------------------------------------\n\nTITLE: Fetching LND Startup Command Line Information\nDESCRIPTION: Command to retrieve the full program command line used to start LND, showing all flags and parameters for debugging purposes.\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://localhost:9736/debug/pprof/cmdline > cmdline.prof\n```\n\n----------------------------------------\n\nTITLE: New SCID Alias Management RPCs\nDESCRIPTION: Experimental RPCs for managing SCID aliases added to the routerrpc package. These methods allow manual addition and deletion of SCID aliases locally on a node.\n\nLANGUAGE: Markdown\nCODE:\n```\nXAddLocalChanAliases & XDeleteLocalChanAliases\n```\n\n----------------------------------------\n\nTITLE: Initializing Signer Wallet with CLI in LND\nDESCRIPTION: Command line interaction for initializing the signer wallet using lncli create command with the 'x' option to use an extended master root key.\n\nLANGUAGE: bash\nCODE:\n```\nsigner>  $ lncli create\nInput wallet password: \nConfirm password:\n\nDo you have an existing cipher seed mnemonic or extended master root key you want to use?\nEnter 'y' to use an existing cipher seed mnemonic, 'x' to use an extended master root key \nor 'n' to create a new seed (Enter y/x/n):\n```\n\n----------------------------------------\n\nTITLE: Running Test Components Using Execute Script\nDESCRIPTION: Examples of using the execute.sh script to run individual components of the test, which is useful for debugging or manual testing. Shows how to start containers, query nodes, set up channels, and send payments.\n\nLANGUAGE: bash\nCODE:\n```\n# Spin up the docker containers.\n./execute.sh compose_up\n\n# Wait for the nodes to start.\n./execute.sh wait_for_nodes alice bob charlie dave\n\n# Query various nodes.\n./execute.sh alice getinfo\n\n# Set-up a basic channel network.\n./execute.sh setup-network\n\n# Wait for bob to see all the channels in the network.\n./execute.sh wait_graph_sync bob 3\n\n# Open a channel between Bob and Charlie.\n./execute.sh open_channel bob charlie\n\n# Send a payment from Alice to Dave.\n./execute.sh send_payment alice dave\n\n# Take down a single node. \n./execute.sh compose_stop dave\n\n# Start a single node.\n./execute.sh compose_start dave\n```\n\n----------------------------------------\n\nTITLE: Running Fuzz Tests as Normal Tests\nDESCRIPTION: Commands to run fuzz tests as standard tests, which only executes the seed corpus without generating new inputs. This is useful for validation and regression testing.\n\nLANGUAGE: shell\nCODE:\n```\ncd lnwire\ngo test -run=FuzzAcceptChannel -parallel=4\n```\n\n----------------------------------------\n\nTITLE: Improper vs. Proper Code Spacing Example in Go\nDESCRIPTION: Comparison showing incorrect (minimal spacing) and correct (logical stanza separation) approaches to spacing in Go code. The proper example includes descriptive comments and visual separation between logical blocks of code to improve readability.\n\nLANGUAGE: go\nCODE:\n```\n// WRONG\nwitness := make([][]byte, 4)\nwitness[0] = nil\nif bytes.Compare(pubA, pubB) == -1 {\n\twitness[1] = sigB\n\twitness[2] = sigA\n} else {\n\twitness[1] = sigA\n\twitness[2] = sigB\n}\nwitness[3] = witnessScript\nreturn witness\n```\n\nLANGUAGE: go\nCODE:\n```\n// RIGHT\nwitness := make([][]byte, 4)\n\n// When spending a p2wsh multi-sig script, rather than an OP_0, we add\n// a nil stack element to eat the extra pop.\nwitness[0] = nil\n\n// When initially generating the witnessScript, we sorted the serialized\n// public keys in descending order. So we do a quick comparison in order\n// to ensure the signatures appear on the Script Virtual Machine stack in\n// the correct order.\nif bytes.Compare(pubA, pubB) == -1 {\n\twitness[1] = sigB\n\twitness[2] = sigA\n} else {\n\twitness[1] = sigA\n\twitness[2] = sigB\n}\n\n// Finally, add the preimage as the last witness element.\nwitness[3] = witnessScript\n\nreturn witness\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Basic Integration Test for lnd\nDESCRIPTION: Example of setting up a harness test for lnd integration tests. It demonstrates how to initialize the test environment, set up standby nodes (Alice and Bob), and run multiple test cases while properly managing resources.\n\nLANGUAGE: go\nCODE:\n```\nfunc TestFoo(t *testing.T) {\n\t// Get the binary path and setup the harness test.\n\t//\n\t// TODO: define the binary path to lnd and the name of the database\n\t// backend.\n\tharnessTest := lntemp.SetupHarness(t, binary, *dbBackendFlag)\n\tdefer harnessTest.Stop()\n\n\t// Setup standby nodes, Alice and Bob, which will be alive and shared\n\t// among all the test cases.\n\tharnessTest.SetupStandbyNodes()\n\n\t// Run the subset of the test cases selected in this tranche.\n\t//\n\t// TODO: define your own testCases.\n\tfor _, tc := range testCases {\n\t\ttc := tc\n\n\t\tt.Run(tc.Name, func(st *testing.T) {\n\t\t\t// Create a separate harness test for the testcase to\n\t\t\t// avoid overwriting the external harness test that is\n\t\t\t// tied to the parent test.\n\t\t\tht := harnessTest.Subtest(st)\n\n\t\t\t// Run the test cases.\n\t\t\tht.RunTestCase(tc)\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Goroutine Profile from LND\nDESCRIPTION: Command to obtain a detailed goroutine profile with debug information, useful for analyzing deadlocks and lock contention in LND.\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://localhost:9736/debug/pprof/goroutine?debug=2 > goroutine.prof\n```\n\n----------------------------------------\n\nTITLE: Running and Configuring Alice's Lightning Node\nDESCRIPTION: Runs the Alice container with a mounted volume and generates a new address for receiving funds. This setup uses Docker Compose to manage the container and configures a nested p2wkh address.\n\nLANGUAGE: shell\nCODE:\n```\n# Run the \"Alice\" container and log into it:\n$  docker-compose run -d --name alice --volume simnet_lnd_alice:/root/.lnd lnd\n$  docker exec -i -t alice bash\n\n# Generate a new backward compatible nested p2sh address for Alice:\nalice $  lncli --network=simnet newaddress np2wkh\n```\n\n----------------------------------------\n\nTITLE: Building LND Release on macOS using Docker\nDESCRIPTION: Commands to clone the LND repository, checkout a specific release tag, and build the release using Docker. This requires Docker and make to be installed locally.\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/lightningnetwork/lnd.git\ncd lnd\ngit checkout <TAG> # <TAG> is the name of the next release/tag\nmake docker-release tag=<TAG>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Automatic Commit Signing\nDESCRIPTION: Configuration settings for ~/.gitconfig that enable automatic signing of all git commits, eliminating the need to manually add the -S flag to each commit command.\n\nLANGUAGE: text\nCODE:\n```\n[commit]\n        gpgsign = true\n```\n\n----------------------------------------\n\nTITLE: Starting Tor Daemon\nDESCRIPTION: Command to start the Tor daemon with example output showing successful initialization.\n\nLANGUAGE: shell\nCODE:\n```\n$  tor\nFeb 05 17:02:06.501 [notice] Tor 0.3.1.8 (git-ad5027f7dc790624) running on Darwin with Libevent 2.1.8-stable, OpenSSL 1.0.2l, Zlib 1.2.8, Liblzma N/A, and Libzstd N/A.\nFeb 05 17:02:06.502 [notice] Tor can't help you if you use it wrong! Learn how to be safe at https://www.torproject.org/download/download#warning\nFeb 05 17:02:06.502 [notice] Read configuration file \"/usr/local/etc/tor/torrc\".\nFeb 05 17:02:06.506 [notice] Opening Socks listener on 127.0.0.1:9050\nFeb 05 17:02:06.506 [notice] Opening Control listener on 127.0.0.1:9051\n```\n\n----------------------------------------\n\nTITLE: Recovery Info Output\nDESCRIPTION: Example JSON output from the getrecoveryinfo command showing a completed recovery process with 100% progress.\n\nLANGUAGE: text\nCODE:\n```\n{\n    \"recovery_mode\": true,\n    \"recovery_finished\": true,\n    \"progress\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing LND CPU Profile with Go Tool\nDESCRIPTION: Command to generate an SVG visualization from a CPU profile dump collected from LND, making it easier to interpret the performance data.\n\nLANGUAGE: shell\nCODE:\n```\n$ go tool pprof -svg cpu.prof > cpu.svg\n```\n\n----------------------------------------\n\nTITLE: Baking Custom Peer Management Macaroon\nDESCRIPTION: Shell command demonstrating how to create a custom macaroon with peer management permissions using the bakery functionality.\n\nLANGUAGE: shell\nCODE:\n```\n$  lncli bakemacaroon peers:read peers:write\n```\n\n----------------------------------------\n\nTITLE: Mining Bitcoin Blocks in Regtest Mode\nDESCRIPTION: Command to generate 101 blocks in regtest mode using bitcoin-cli, which is necessary to mature coinbase transactions and make funds available for use.\n\nLANGUAGE: shell\nCODE:\n```\n# Note: We need at least \"100 >=\" blocks because of coinbase block maturity.\nbitcoind$  bitcoin-cli -chain=regtest -rpcuser=devuser -rpcpassword=devpass generatetoaddress 101 2N1NQzFjCy1NnpAH3cT4h4GoByrAAkiH7zu\n```\n\n----------------------------------------\n\nTITLE: Installing and Updating Brontide Package in Go\nDESCRIPTION: Command to install or update the brontide package using Go's package manager. This fetches the latest version of the package from the Lightning Network Daemon repository.\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/lightningnetwork/lnd/brontide\n```\n\n----------------------------------------\n\nTITLE: Compiling Protocol Buffer Files for Ruby\nDESCRIPTION: Command to generate Ruby files from the protocol buffer definition using grpc_tools_ruby_protoc.\n\nLANGUAGE: shell\nCODE:\n```\ngrpc_tools_ruby_protoc --ruby_out=. --grpc_out=. lightning.proto\n```\n\n----------------------------------------\n\nTITLE: Installing lnd Using Go Commands\nDESCRIPTION: Alternative installation method using go commands directly instead of make. This command installs all packages in the lnd repository.\n\nLANGUAGE: shell\nCODE:\n```\ngo install -v ./...\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Integration Tests with Pattern Matching\nDESCRIPTION: Commands to run multiple test cases either by using a pattern with parentheses or by using simple regex matching. These examples show different ways to run multiple related test cases.\n\nLANGUAGE: shell\nCODE:\n```\n# Run `testListChannels` and `testListAddresses` together.\nmake itest icase='(list_channels|list_addresses)'\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Run `testListChannels`, `testListAddresses`, and `testListPayments` together.\nmake itest icase=list\n```\n\n----------------------------------------\n\nTITLE: Forcing In-Place Chain Rescan\nDESCRIPTION: Command to start lnd with a flag that forces a rescan of the blockchain for wallet transactions. This resets the wallet's synced height back to its birthday for existing nodes that need to manually rescan.\n\nLANGUAGE: shell\nCODE:\n```\nlnd --reset-wallet-transactions\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Proto Files with References in .NET Project\nDESCRIPTION: XML configuration to add multiple proto files with proper references to the .csproj file, enabling cross-file proto references.\n\nLANGUAGE: XML\nCODE:\n```\n<ItemGroup>\n   <Protobuf Include=\"Grpc\\lightning.proto\" GrpcServices=\"Client\" />\n   <Protobuf Include=\"Grpc\\router.proto\" GrpcServices=\"Client\" protoRoot=\"Grpc\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Macaroon for Watch-Only Node Access\nDESCRIPTION: Command to bake a custom macaroon with minimal required permissions that the watch-only node will use to authenticate with the signer node for remote signing operations.\n\nLANGUAGE: shell\nCODE:\n```\nsigner>  $ lncli bakemacaroon --save_to signer.custom.macaroon \\\n                message:write signer:generate address:read onchain:write\n```\n\n----------------------------------------\n\nTITLE: Installing Go for macOS\nDESCRIPTION: Command to install Go on macOS using Homebrew package manager.\n\nLANGUAGE: shell\nCODE:\n```\nbrew install go\n```\n\n----------------------------------------\n\nTITLE: Unlocking Wallet with Recovery Window\nDESCRIPTION: Command to unlock the wallet and continue a previously interrupted recovery scan, specifying the recovery window to ensure all potential addresses are checked.\n\nLANGUAGE: shell\nCODE:\n```\nlncli unlock --recovery_window=2500\n```\n\n----------------------------------------\n\nTITLE: Running Local etcd Instance for Testing\nDESCRIPTION: Command to start a local etcd instance with appropriate configuration for LND testing, including TLS settings and increased transaction operation limits.\n\nLANGUAGE: shell\nCODE:\n```\n./etcd \\\n    --auto-tls \\\n    --advertise-client-urls=https://127.0.0.1:2379 \\\n    --listen-client-urls=https://0.0.0.0:2379 \\\n    --max-txn-ops=16384 \\\n    --max-request-bytes=104857600\n```\n\n----------------------------------------\n\nTITLE: Visualizing Sweeper Flow with Mermaid Diagram\nDESCRIPTION: A mermaid flowchart diagram showing the process flow of the sweeper subsystem. It illustrates how UTXOs are offered to the sweeper, clustered into input sets, sent to a Bumper, and how fee rates are increased when new blocks arrive.\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n        subgraph SweepInput\n        UTXO1-->sweeper\n      UTXO2-->sweeper\n        UTXO3-->sweeper\n        UTXO[\"...\"]-->sweeper\n        sweeper\n    end\n\n    subgraph ClusterInputs\n        sweeper-->UtxoAggregator\n      UtxoAggregator-->InputSet1\n        UtxoAggregator-->InputSet2\n        UtxoAggregator-->InputSet[\"...\"]\n    end\n\n    subgraph Broadcast\n            InputSet1-->Bumper\n            InputSet2-->Bumper\n            InputSet-->Bumper\n    end\n\n    subgraph IncreaseFeeRate\n        FeeFunction-->Bumper\n    end\n\n        block[\"new block\"] ==> ClusterInputs\n```\n\n----------------------------------------\n\nTITLE: Configuring Tor Health Check Parameters in LND\nDESCRIPTION: Command-line flags for configuring the new Tor connection health check in LND. These parameters control the health check's retry attempts, timeout duration, backoff strategy, and check interval.\n\nLANGUAGE: bash\nCODE:\n```\nhealthcheck.torconnection.attempts=xxx\nhealthcheck.torconnection.timeout=xxx\nhealthcheck.torconnection.backoff=xxx\nhealthcheck.torconnection.internal=xxx\n```\n\n----------------------------------------\n\nTITLE: Creating Watch-Only Wallet with lncli\nDESCRIPTION: Interactive command to create a watch-only wallet using the exported public keys from the signer node. This initializes the wallet with public keys only, requiring remote signing for operations involving private keys.\n\nLANGUAGE: shell\nCODE:\n```\nwatch-only>  $  lncli createwatchonly accounts-signer.json\n\nInput wallet password: \nConfirm password: \n\nInput an optional wallet birthday unix timestamp of first block to start scanning from (default 0): \n\n\nInput an optional address look-ahead used to scan for used keys (default 2500):\n```\n\n----------------------------------------\n\nTITLE: Running Targeted Fuzz Tests with Custom Parameters\nDESCRIPTION: Command to run fuzz tests only in the lnwire package with custom time limit and parallel processes. This approach allows for more focused and efficient fuzzing.\n\nLANGUAGE: shell\nCODE:\n```\nmake fuzz pkg=lnwire fuzztime=1m parallel=4\n```\n\n----------------------------------------\n\nTITLE: Installing and Updating the lnwire Package with Go Get\nDESCRIPTION: Command to install or update the lnwire package using Go's package manager. This fetches the latest version of the package from the lightningnetwork/lnd GitHub repository.\n\nLANGUAGE: shell\nCODE:\n```\n$  go get -u github.com/lightningnetwork/lnd/lnwire\n```\n\n----------------------------------------\n\nTITLE: Running a Local etcd Instance for Testing\nDESCRIPTION: Command to start a local etcd instance configured for testing with LND. Includes TLS auto-configuration and increased transaction operation limits required for LND's operations.\n\nLANGUAGE: shell\nCODE:\n```\n./etcd \\\n    --auto-tls \\\n    --advertise-client-urls=https://127.0.0.1:2379 \\\n    --listen-client-urls=https://0.0.0.0:2379 \\\n    --max-txn-ops=16384 \\\n    --max-request-bytes=104857600\n```\n\n----------------------------------------\n\nTITLE: Enabling Tor Stream Isolation in lnd\nDESCRIPTION: Command to start lnd with Tor stream isolation enabled, forcing new Tor circuits for each connection to enhance privacy.\n\nLANGUAGE: shell\nCODE:\n```\n$  ./lnd --tor.active --tor.streamisolation\n```\n\n----------------------------------------\n\nTITLE: Building iOS Library in Shell\nDESCRIPTION: Command to build the lnd mobile library for iOS using make.\n\nLANGUAGE: shell\nCODE:\n```\nmake ios\n```\n\n----------------------------------------\n\nTITLE: Setting up Automatic Macaroon Authentication for lnd gRPC Calls\nDESCRIPTION: Advanced approach to automatically include macaroon authentication in all gRPC requests to lnd.\n\nLANGUAGE: python\nCODE:\n```\ndef metadata_callback(context, callback):\n    # for more info see grpc docs\n    callback([('macaroon', macaroon)], None)\n\n\n# build ssl credentials using the cert the same as before\ncert_creds = grpc.ssl_channel_credentials(cert)\n\n# now build meta data credentials\nauth_creds = grpc.metadata_call_credentials(metadata_callback)\n\n# combine the cert credentials and the macaroon auth credentials\n# such that every call is properly encrypted and authenticated\ncombined_creds = grpc.composite_channel_credentials(cert_creds, auth_creds)\n\n# finally pass in the combined credentials when creating a channel\nchannel = grpc.secure_channel('localhost:10009', combined_creds)\nstub = lnrpc.LightningStub(channel)\n\n# now every call will be made with the macaroon already included\nstub.GetInfo(ln.GetInfoRequest())\n```\n\n----------------------------------------\n\nTITLE: Sample Log Message When Wallet Needs Unlocking\nDESCRIPTION: An example log entry from lnd indicating that the wallet needs to be unlocked. It shows available commands for creating, unlocking, or changing the password of a wallet.\n\nLANGUAGE: text\nCODE:\n```\n2021-05-06 11:36:11.445 [INF] LTND: Waiting for wallet encryption password. Use `lncli create` to create a wallet, `lncli unlock` to unlock an existing wallet, or `lncli changepassword` to change the password of an existing wallet and unlock it.\n```\n\n----------------------------------------\n\nTITLE: Example of Replacing a Go Module Dependency with a Fork\nDESCRIPTION: Specific example of replacing the lightning-onion module with a version from a developer's fork, demonstrating how to test changes to dependencies of the lnd project.\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -replace=github.com/lightningnetwork/lightning-onion@v0.0.0-20180605012408-ac4d9da8f1d6=github.com/roasbeef/lightning-onion@2e5ae87696046298365ab43bcd1cf3a7a1d69695\n```\n\n----------------------------------------\n\nTITLE: New Testing Method for Mempool Transaction Verification\nDESCRIPTION: New method added to the lntest package to allow for batch checking that transactions are not in the mempool during integration testing, improving test efficiency.\n\nLANGUAGE: Markdown\nCODE:\n```\nAssertTxnsNotInMempool\n```\n\n----------------------------------------\n\nTITLE: Listing Account Information in LND with lncli\nDESCRIPTION: This command queries an LND node to list account information for a specific address type, showing the extended public key and other account details.\n\nLANGUAGE: shell\nCODE:\n```\n$ lncli-alice wallet accounts list --name=default --address_type=p2wkh\n```\n\n----------------------------------------\n\nTITLE: Installing and Updating the lnrpc Package with Go\nDESCRIPTION: Command for installing or updating the lnrpc Go package using go get. This fetches the latest version of the Lightning Network Daemon's RPC code.\n\nLANGUAGE: Shell\nCODE:\n```\n$  go get -u github.com/lightningnetwork/lnd/lnrpc\n```\n\n----------------------------------------\n\nTITLE: Examining PSBT Output with lncli wallet psbt fund command\nDESCRIPTION: The JSON response from the PSBT funding command showing the generated PSBT in base64 format, the change output index, and locked outpoints. Each locked UTXO has an ID, outpoint reference, and expiration timestamp.\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"psbt\": \"cHNidP8BAHECAAAAAeJQY2VLRtutKgQYFUajEKpjFfl0Uyrm6x23OumDpe/4AQAAAAD/////AkxREgEAAAAAFgAUv6pTgbKHN60CZ+RQn5yOuH6c2WiA8PoCAAAAABYAFJDbOFU0E6zFF/M+g/AKDyqI2iUaAAAAAAABAOsCAAAAAAEBbxqXgEf9DlzcqqNM610s5pL1X258ra6+KJ22etb7HAcBAAAAAAAAAAACACT0AAAAAAAiACC7U1W0iJGhQ6o7CexDh5k36V6v3256xpA9/xmB2BybTFZdDQQAAAAAFgAUKp2ThzhswyM2QHlyvmMB6tQB7V0CSDBFAiEA4Md8RIZYqFdUPsgDyomlzMJL9bJ6Ho23JGTihXtEelgCIAeNXRLyt88SOuuWFVn3IodCE4U5D6DojIHesRmikF28ASEDHYFzMEAxfmfq98eSSnZtUwb1w7mAtHG65y8qiRFNnIkAAAAAAQEfVl0NBAAAAAAWABQqnZOHOGzDIzZAeXK+YwHq1AHtXQEDBAEAAAAAAAA=\",\n        \"change_output_index\": 0,\n        \"locks\": [\n                {\n                        \"id\": \"ede19a92ed321a4705f8a1cccc1d4f6182545d4bb4fae08bd5937831b7e38f98\",\n                        \"outpoint\": \"f8efa583e93ab71debe62a5374f91563aa10a3461518042aaddb464b656350e2:1\",\n                        \"expiration\": 1601553408\n                }\n        ]\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Mutex and Block Profiles from LND\nDESCRIPTION: Commands to obtain mutex and block profiles from LND, which provide insights into contention and bottlenecks in the application.\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://localhost:9736/debug/pprof/mutex?debug=2\n\n$ curl http://localhost:9736/debug/pprof/block?debug=2\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Integration Tests\nDESCRIPTION: Command to run tests in parallel with options to specify the number of tranches (parts) and parallel threads. This example splits tests into 4 parts and runs them using 2 threads.\n\nLANGUAGE: shell\nCODE:\n```\n# Split the tests into 4 parts, and run them using 2 threads.\nmake itest-parallel tranches=4 parallel=2\n```\n\n----------------------------------------\n\nTITLE: Accessing bitcoind Container for Bitcoin Operations\nDESCRIPTION: Command to access the bitcoind Docker container shell for executing Bitcoin operations and commands.\n\nLANGUAGE: shell\nCODE:\n```\n$  docker exec -it bitcoind bash\n```\n\n----------------------------------------\n\nTITLE: Default SQLite Pragma Options in LND\nDESCRIPTION: The core pragma options that are always set when using the SQLite backend in LND. These settings ensure proper foreign key support, use the Write-Ahead Logging journal mode, and set a default busy timeout of 5000ms.\n\nLANGUAGE: sql\nCODE:\n```\nforeign_keys=on\njournal_mode=wal\nbusy_timeout=5000 // Overried with the db.sqlite.busytimeout option.\n```\n\n----------------------------------------\n\nTITLE: Moving Swift Files to Output Directory in Shell\nDESCRIPTION: Command to find and move all generated Swift files to the iOS build directory for inclusion in an Xcode project.\n\nLANGUAGE: shell\nCODE:\n```\nfind . -name \"*.swift\" -print0 | xargs -0 -I {} mv {} mobile/build/ios\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Container Logs\nDESCRIPTION: Command to view logs for specific containers in the lightning network setup, useful for debugging and monitoring the behavior of different components.\n\nLANGUAGE: shell\nCODE:\n```\n$  docker-compose logs <alice|bob|btcd|lnd|bitcoind>\n```\n\n----------------------------------------\n\nTITLE: Proper Line Wrapping for Long Strings in Go\nDESCRIPTION: Demonstration of correctly wrapping long string literals to adhere to the 80-character line length requirement. String concatenation with the + operator is used at the end of each line.\n\nLANGUAGE: go\nCODE:\n```\n// WRONG\nmyKey := \"0214cd678a565041d00e6cf8d62ef8add33b4af4786fb2beb87b366a2e151fcee7\"\n```\n\nLANGUAGE: go\nCODE:\n```\n// RIGHT\nmyKey := \"0214cd678a565041d00e6cf8d62ef8add33b4af4786fb2beb87b366a2e1\" +\n\t\"51fcee7\"\n```\n\n----------------------------------------\n\nTITLE: Retroactively Signing the Previous Git Commit\nDESCRIPTION: Command for adding a GPG signature to the most recent commit that was previously unsigned, allowing developers to sign commits they forgot to sign initially.\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -S --amend\n```\n\n----------------------------------------\n\nTITLE: Command-Line Usage for Channel Closing with Channel Point\nDESCRIPTION: Shows how to close a channel using the channel point flag with the closechannel command.\n\nLANGUAGE: bash\nCODE:\n```\nclosechannel --chan_point\n```\n\n----------------------------------------\n\nTITLE: Building LND with etcd Support\nDESCRIPTION: Command to compile LND with support for using etcd as a key-value database backend. The kvdb_etcd tag enables the necessary code for etcd integration.\n\nLANGUAGE: shell\nCODE:\n```\nmake tags=\"kvdb_etcd\"\n```\n\n----------------------------------------\n\nTITLE: Blockbeat Flow Sequence Diagram in Mermaid\nDESCRIPTION: Mermaid diagram illustrating the sequential flow of blockbeats through subsystems including ChainArbitrator, UtxoSweeper, and TxPublisher, showing the synchronization process for block processing.\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\t\tautonumber\n\t\tparticipant bb as BlockBeat\n\t\tparticipant cc as ChainArb\n\t\tparticipant us as UtxoSweeper\n\t\tparticipant tp as TxPublisher\n\t\t\n\t\tnote left of bb: 0. received block x,<br>dispatching...\n\t\t\n    note over bb,cc: 1. send block x to ChainArb,<br>wait for its done signal\n\t\tbb->>cc: block x\n\t\trect rgba(165, 0, 85, 0.8)\n      critical signal processed\n        cc->>bb: processed block\n      option Process error or timeout\n        bb->>bb: error and exit\n      end\n    end\n\n    note over bb,us: 2. send block x to UtxoSweeper, wait for its done signal\n\t\tbb->>us: block x\n\t\trect rgba(165, 0, 85, 0.8)\n      critical signal processed\n        us->>bb: processed block\n      option Process error or timeout\n        bb->>bb: error and exit\n      end\n    end\n\n    note over bb,tp: 3. send block x to TxPublisher, wait for its done signal\n\t\tbb->>tp: block x\n\t\trect rgba(165, 0, 85, 0.8)\n      critical signal processed\n        tp->>bb: processed block\n      option Process error or timeout\n        bb->>bb: error and exit\n      end\n    end\n```\n\n----------------------------------------\n\nTITLE: Custom Channel Data Field in Channel RPCs\nDESCRIPTION: New field added to the responses of ListChannels, PendingChannels, and ChannelBalance RPCs that is specifically set for custom channels to provide additional channel information.\n\nLANGUAGE: Markdown\nCODE:\n```\ncustom_channel_data\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Public Keys (xpubs) for LND Testnet Implementation\nDESCRIPTION: A structured list of extended public keys (xpubs) for the Lightning Network Daemon (LND) testnet implementation. Each configuration entry contains the xpub string, purpose value (1017), coin type (1 for testnet), and a sequential account number. These keys are likely used for hierarchical deterministic wallet functionality within LND.\n\nLANGUAGE: javascript\nCODE:\n```\n{\n            'xpub': 'tpubDDXFHr67Ro2udnWeGsXdHH3uH1fMN7Xv8dC2eMbKgB7NCih9bCkA9VB8YsP6m4mMsvNt8uRTXvByQ8X7GaT1EmmT4WzFCqhd9HNMwB7mDuV',\n            purpose: 1017,\n            coin_type: 1,\n            account: 31\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2ueXxcqy92aAniwc5iVAa6v7srbCJZU9jwQhidU9xj8hVBrjn7xZBkQzSnwaytxEDQVYqiM2XJzrufAqCbcJWPFEbjnorYRy8',\n            purpose: 1017,\n            coin_type: 1,\n            account: 32\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2ujH6fgVmdgXYhd562RzRe9NCDfds8MnknSRwDSGvczM2aJghyvWpnzZ74MmzFwVweKMWQyYEagnyCPMxrzAzycHLFy6sH63c',\n            purpose: 1017,\n            coin_type: 1,\n            account: 33\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2um39QyoXXjH7zERxrBVvvBTMKhKoHNkLrwmVzyNqbh68TXWkYw3MMNpmVQwwAWwXNBnTf7egN16v6aHncjwgaMj7WbdmtCpd',\n            purpose: 1017,\n            coin_type: 1,\n            account: 34\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2unk1rHaZ3rqMSzWd16AB4nzNdWhHHaUCZhCi5KtwKg3GXXKVhZjUmAkd6xb6Hp3n2FJKu2tyDEmQw3B8RCaeA1XJ8k6cUkAR',\n            purpose: 1017,\n            coin_type: 1,\n            account: 35\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2urkvuAfRw8rbNTbLUq4QPfnAkoju8maxZAsVJPFe6EMT5d5uFMyTGiYyKRsNpa73q1FZms87FQYEY4a2DBLADy9PkUH1Cw2T',\n            purpose: 1017,\n            coin_type: 1,\n            account: 36\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2usWLg54YrtkgasYc6XFi7ygibwHWGuP1QwByzSqC9KYJaHM4rr3Ffs8NEBbw2z9UyhKQ1rxnKakbDKuhoh6R2xvSVva25DAh',\n            purpose: 1017,\n            coin_type: 1,\n            account: 37\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2uw8Syhc4sBzd597XrdQ6LMXf5FCUUsNzvw8UkDuuM7VMVC7i8pKDnWhkdC38fLeoQuzDUrspvZQwqEpZZmLbXGL7yxQmZYJx',\n            purpose: 1017,\n            coin_type: 1,\n            account: 38\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2uyN1ZF1LAkoy3KbHR8qV3CCDJzbpQMZ4D5NKJSprcRec4aQLC5YXgG9dJ4hi7JY8aEex2fjdHzUmnkfEi1MGuqirN2zLXsC2',\n            purpose: 1017,\n            coin_type: 1,\n            account: 39\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2v1KND6xi4oXVwozuu9XdFKkeGpGC9p6YzTJkBMUZSZy4ykn9WCv1eGCxgqtFkEVzm3wcxsU9w5zxVHdQ71mrz9Sp1dBQ5L6p',\n            purpose: 1017,\n            coin_type: 1,\n            account: 40\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2v43ZVFUHQarNeSSMvxvXdrTepsbZFFMEHmyb2PCBHquLSmBFMu6RajiEVvvRQJbgLpfEQVoJEoqwzK6YugVQUbwSarVtni84',\n            purpose: 1017,\n            coin_type: 1,\n            account: 41\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2v7WezyGPdm4VLqCbJPEgYVv5t4SVUprVGM3NFZ6sYkLWjPqHd4FXWGQeHGx5n6i9h5bSBNm2xr6kbCW1BD4JS5iPbeqVREK6',\n            purpose: 1017,\n            coin_type: 1,\n            account: 42\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vAvr36C7WbtP3NMrVMz96GUca2f59HknDq3jKuGBFrG8Z2NE4sPL5J6hyQjo6nYjo3chGBCzpBtUCutZZJW6JEVFVYQMnod6',\n            purpose: 1017,\n            coin_type: 1,\n            account: 43\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vDSPNxb4yuBsg9oRzLeovAqDN45peDiUrjBS8gNgKVVP6VU9MQWP1jWKqV77gf5BpVSwCMdDiSkqWpt4npqPVGZVaZUERi97',\n            purpose: 1017,\n            coin_type: 1,\n            account: 44\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vEemgjz5FDHVDKLSpZ9yrL5m1CPA87CxekC1UFbQCCd3DAR8vpGeqMdG8XAKS1KDryL8nLG2tYkUj3Zuoa6Wuoppd7HmR9Jo',\n            purpose: 1017,\n            coin_type: 1,\n            account: 45\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vH6JH5gg8Gmd4sKENGFaXF9razdT3BC4N56AU6SKxaaYNfxsbsr9yJuxf7h5p79Gy8ZFRFHCLu22c1XkLYTjRBGgTXsPVRZw',\n            purpose: 1017,\n            coin_type: 1,\n            account: 46\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vKKuUWDAHVV8GaG1tZnUR7DNvxZhDZ84EoYoRmmNeXsbNoRvHxB75bw9C3STEGAWgPvZ17m6J6TawpjTo1Aihb6R2jVQb3Ne',\n            purpose: 1017,\n            coin_type: 1,\n            account: 47\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vMam7HYsizXvwurmKUT6jyp4ViQKZcJMsV89JqSCjHjdjCY2fHbRohRZPpNgigFQNyJmyjznxQp1vbDbfF2yexrHkE2UrSoy',\n            purpose: 1017,\n            coin_type: 1,\n            account: 48\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vRVVwzPtU9KKPoMeP1kL7Y7zYfE3PJ7dLLgxrY5h5Qo8a8MrfMNB56frwDxSQf3tPsq37HSd4WHjWphxrHJd1P8jU7euD8Ns',\n            purpose: 1017,\n            coin_type: 1,\n            account: 49\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vSvwFym89gBQgssveDrAMcEPnkdwRJghApVu43teKyxRoqJ4LtzNk5P1jpYexjQx4m4e1ZydjhmAsoTCfWLUfdKxtvHd9c7F',\n            purpose: 1017,\n            coin_type: 1,\n            account: 50\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vWsDxLyngF4z58EnLH2KxhgLSH3yt8E2XvJf7EC8RUzRMNaWLZSEn2TG5Srd6wzkJ11WdtPXEDcasZhwwidR1SfQDNW2okjv',\n            purpose: 1017,\n            coin_type: 1,\n            account: 51\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vZrr4hcZGdsGj9BxZJjSrVB2wA3mhiAuSq6WvHHTzQREhpEjdZNA2WYM6AT3B1YzszZXJd67avUBteAuzxj347xe93WPGETK',\n            purpose: 1017,\n            coin_type: 1,\n            account: 52\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vbSaXqtmna7bytw8JFxEaP38uYtbA72koESM2rKqmdaqycJyFmbuNitV3hHjTFhJctfEjqjoYzDwUWM4DUHdtpNtRqNdaFoU',\n            purpose: 1017,\n            coin_type: 1,\n            account: 53\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2ve14VxhkxLLkmZebJ5LPniyHcfsrD4NjRM7JgWckdp7i4mu9irwoz96q6iG8qjCShLLYa6y9sNnPwvnWaei2BdHWmJ8TwVTr',\n            purpose: 1017,\n            coin_type: 1,\n            account: 54\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vgFwNbWNCQwwXYUie961M2ShSadKoF5Sn5LKMq2uQ1Arrj6dwu9rK9JpRf8pvAmLE6RzfQQUcSZHGpx7UUC9QSQVLhHGEUvE',\n            purpose: 1017,\n            coin_type: 1,\n            account: 55\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vjNbtsDvdXMySq1e3fqqDkD47TEgosdztYNrAu6xnAuaEhE7zbwaYLUcSEh69ii9dF4TfF2DsSPH7T2MBZGFAvh6S1fTyKz3',\n            purpose: 1017,\n            coin_type: 1,\n            account: 56\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vkQqfXbzDqUBHgKPKi45cqnFSXexuzgfSQS2HtGMj4NLMDHeRiZGYuT1mhKwzd54LSnZxaiEdGxXG4iUsfYUi556JDwjrbWa',\n            purpose: 1017,\n            coin_type: 1,\n            account: 57\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2voHYM9JnW58T6Mn5FJUoLNVSgaMfQbKVJGJ2foTrL4MqQEKMf3j2kb87oLAd1SV1CsZFNgS8W7M5EFWVqtYav55uC4Syqgyv',\n            purpose: 1017,\n            coin_type: 1,\n            account: 58\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vqq3RkKSyPbBNoLyT4UBVRo1WqXKzvNZD5Z8kifWwHpVyfCuyjxLhBfu9UrCmNV2TjSJkEqkweMpRZ3gexf44NsvYaFqE52t',\n            purpose: 1017,\n            coin_type: 1,\n            account: 59\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vuMxsyU2UUwwH4V7sRzAY86AouqgRwdkeaKW4MWgLBsMc4xtVZDksiu3cejaDeRsQvGM2ZkbVxmHRZzAzYhd38TkAzDo58t1',\n            purpose: 1017,\n            coin_type: 1,\n            account: 60\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vwhVfj4oGk5gB6q9ovv6rirGvBH6FzHtv8vndkRttuMen3pxQzh7dMdKDAftdgb4E3b3Y4hiaLP4F4DKYu4WnqUp5GwvnqxZ',\n            purpose: 1017,\n            coin_type: 1,\n            account: 61\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2vz4UWzvnuVz6x5EnSxJihj2367gHB8zRgqEnEFtkzAtkcPutnL6z9n8xadjSmyj4PRWSsVmspzsoGDwq8jdAu3TQE8EBLBjC',\n            purpose: 1017,\n            coin_type: 1,\n            account: 62\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2w1motx23pqfaodr3qsefr1BwDg3aUVxNJnkWBFGGKwgmtfzxesyCvRjNexZFze5FNpUC3WebYbnMwqJaftDmByP1XrjKytyT',\n            purpose: 1017,\n            coin_type: 1,\n            account: 63\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2w57nkdAJ9nF6MhgVjbFxLrwFZhCLmtUBZ4E6pJ67yo3J6AsHnKHQFi19fpYFiLzzwmGE6nR6L1rPVHd2GGjfQmDtKisfMW1C',\n            purpose: 1017,\n            coin_type: 1,\n            account: 64\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2w86P63HJcRrgSLYe9EfRwHbRXWHxq7vG1pEuhbDP8aHgHe9pjRGtxe4nadccek6JNXKyQiXsRgSrfe7QKxRTrkwnC4bYH79P',\n            purpose: 1017,\n            coin_type: 1,\n            account: 65\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2w9ddZ5oeJR4Jd9HXRwa3GBA85UKxuLvqaBQokKdkVd7BGfghHT4dr3Wc9ZcpqTkEfsQXCTAmK5AaoQ23KmQeU2gaGkhuxtnn',\n            purpose: 1017,\n            coin_type: 1,\n            account: 66\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2wE4nnScPMrNdGWcPDUEerDt1rvwzRNyhY2PJXpFM78Dr2AxxNKXeG9c4xPy4xYWJjE8CFpj3AL4Cr3JQetqLpw29kp99cHYT',\n            purpose: 1017,\n            coin_type: 1,\n            account: 67\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2wGWALa9rpuHe6BuzxgjtSfKCUZrgkPM6a95bUopD5iDKFs6G8HsPjqniqFpafEmzHhZFBcnUAJJSA2PvGoQw9eqFQrm32Rm5',\n            purpose: 1017,\n            coin_type: 1,\n            account: 68\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2wJZi3q7V2q96TUCUsdXGGoVx8Z5i5K8Txsv2hvxY3zuBBfpjjbxQR5pMLfjntCByPoZiodfv5eviNvSLHEp6PwRJaKxvfH26',\n            purpose: 1017,\n            coin_type: 1,\n            account: 69\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2wKTZ4BJvq9AN6i37n1Uo4DhnL5tmxfCTbarZcYnDmxpARZVKP6J7ix3Urx3A5aRgPEGaHR6JtjKWK484cZqMQCgm6p2fh8TY',\n            purpose: 1017,\n            coin_type: 1,\n            account: 70\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2wPP5a34KbN8DsDSKeTLW4q1BeMK9GDfcDHVpEfXmZL7vvY2Ymez6NBzUdW6Soc5TELxsNhpRaWLPMufGvZgKhTk4yKdHbYgn',\n            purpose: 1017,\n            coin_type: 1,\n            account: 71\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2wSoQ8iYy3PFA3mMVfcNbzYPQBLK4QLyejsFMqG2nD74JMxevYBpVHjqCjzn2n8qBfBXZMQxNVVhRiLyLHDmKpvGiC28rVU3b',\n            purpose: 1017,\n            coin_type: 1,\n            account: 72\n        },\n        {\n            'xpub': 'tpubDDXFHr67Ro2wV8MPATtRKyb422QZt5DGdBgoHeEtM65CEtcCLUNCHVFex15ePqroZtYsPn759Sueo2YgVa7uRLPk9T4hpLULsLxeSGzLFKW',\n            purpose: 1017,\n            coin_type: 1,\n            account: 73\n        }\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Table Structure for LND\nDESCRIPTION: The schema structure shows the tables created by LND in PostgreSQL. Each table functions as a key-value store with a simple schema including key, value, parent_id, id, and sequence columns.\n\nLANGUAGE: sql\nCODE:\n```\n              List of relations\n Schema |       Name       | Type  |  Owner   \n--------+------------------+-------+----------\n public | channeldb_kv     | table | lndadmin\n public | decayedlogdb_kv  | table | lndadmin\n public | macaroondb_kv    | table | lndadmin\n public | towerclientdb_kv | table | lndadmin\n public | towerserverdb_kv | table | lndadmin\n public | walletdb_kv      | table | lndadmin\n```\n\n----------------------------------------\n\nTITLE: LND Payment API Methods for Setting Fee Limits\nDESCRIPTION: The gRPC and REST API methods where fee limits should be explicitly set when making payments to avoid using default values.\n\nLANGUAGE: markdown\nCODE:\n```\nSendPayment, SendPaymentSync, QueryRoutes\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Running the lnd gRPC Client\nDESCRIPTION: Shows the expected console output when successfully executing the Java gRPC client, including Maven build logs and the node's identity public key.\n\nLANGUAGE: text\nCODE:\n```\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Detecting the operating system and CPU architecture\n[INFO] ------------------------------------------------------------------------\n[INFO] os.detected.name: osx\n[INFO] os.detected.arch: x86_64\n[INFO] os.detected.version: 10.15\n[INFO] os.detected.version.major: 10\n[INFO] os.detected.version.minor: 15\n[INFO] os.detected.classifier: osx-x86_64\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building lightning-client 0.0.1-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- protobuf-maven-plugin:0.6.1:compile (default) @ lightning-client ---\n[INFO] Compiling 3 proto file(s) to /Users/<username>/Documents/Projects/lightningclient/target/generated-sources/protobuf/java\n[INFO]\n[INFO] --- protobuf-maven-plugin:0.6.1:compile-custom (default) @ lightning-client ---\n[INFO] Compiling 3 proto file(s) to /Users/<username>/Documents/Projects/lightningclient/target/generated-sources/protobuf/grpc-java\n[INFO]\n[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ lightning-client ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] Copying 0 resource\n[INFO] Copying 3 resources\n[INFO] Copying 3 resources\n[INFO]\n[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ lightning-client ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 12 source files to /Users/<username>/Documents/Projects/lightningclient/target/classes\n[INFO]\n[INFO] --- exec-maven-plugin:1.6.0:java (default-cli) @ lightning-client ---\n032562215c38dede6f1f2f262ff4c8db58a38ecf889e8e907eee8e4c320e0b5e81\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 7.408 s\n[INFO] Finished at: 2018-01-13T19:05:49+01:00\n[INFO] Final Memory: 30M/589M\n[INFO] ------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Public Keys for LND on Testnet\nDESCRIPTION: This code snippet defines a list of extended public key configuration objects for LND. Each object includes an 'xpub' string (testnet public key), purpose value (1017), coin_type (1 for testnet), and sequential account number. These configurations are used for key derivation in the Lightning Network.\n\nLANGUAGE: json\nCODE:\n```\n{\n    'xpub': 'tpubDDXFHr67Ro339jd73E9yhqj2AXhMycz3JbsTEZMJ6W9Q1BEEncXZCTYWQ4zrjxbMS3V2vg1sj7rro33L5D53ZPB1BkojZWeANvMgcaFob15',\n    purpose: 1017,\n    coin_type: 1,\n    account: 202\n},\n{\n    'xpub': 'tpubDDXFHr67Ro33AaMn41PV4K4XELUPVrMWXEzKYVDLTWMZA9srRh6UaMytoavas8FRUJfJJhEd9gzpc4zHXJz12YgUPy634JRGhshG1zBycvC',\n    purpose: 1017,\n    coin_type: 1,\n    account: 203\n}\n```\n\n----------------------------------------\n\nTITLE: Using Execute Script for Manual Testing\nDESCRIPTION: Example showing how to use the execute.sh script to manually perform operations like starting containers and querying nodes, which is useful for debugging during test development.\n\nLANGUAGE: bash\nCODE:\n```\n# Spin up the docker containers.\n./execute.sh compose_up\n\n# Query various nodes.\n./execute.sh alice getinfo\n```\n\n----------------------------------------\n\nTITLE: Command-Line Usage for SOCKS Proxy with RPC\nDESCRIPTION: Shows how to use the --socksproxy flag to route RPC calls through Tor.\n\nLANGUAGE: bash\nCODE:\n```\n--socksproxy\n```\n\n----------------------------------------\n\nTITLE: Executing the Java lnd gRPC Client with Maven\nDESCRIPTION: The Maven command to compile and run the Java gRPC client application, specifying the main class and disabling daemon thread cleanup.\n\nLANGUAGE: shell\nCODE:\n```\n$  mvn compile exec:java -Dexec.mainClass=\"Main\" -Dexec.cleanupDaemonThreads=false\n```\n\n----------------------------------------\n\nTITLE: Signing a Release Manifest with GPG in Bash\nDESCRIPTION: A GPG command for creating a detached signature file for the release manifest. This command uses the developer's PGP key to generate a signature file that will be uploaded to the GitHub release page.\n\nLANGUAGE: bash\nCODE:\n```\ngpg --local-user $KEYID  --detach-sig --output manifest-$USERNAME-v0.18.3-beta.sig manifest-v0.18.3-beta.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Bidirectional-streaming RPC Example\nDESCRIPTION: Shell command to install async and lodash libraries needed for the bidirectional streaming payment example.\n\nLANGUAGE: shell\nCODE:\n```\n$  npm install --save async lodash\n```\n\n----------------------------------------\n\nTITLE: Cloning lnd Repository to GOPATH in Shell\nDESCRIPTION: Command to clone the Lightning Network Daemon repository to the proper location in GOPATH for gomobile compatibility.\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/lightningnetwork/lnd.git $GOPATH/src/github.com/lightningnetwork/lnd\n```\n\n----------------------------------------\n\nTITLE: Continuing Git Rebase After Signing Commits\nDESCRIPTION: Command to resume the rebase operation after amending a commit to add a signature during an interactive rebase session.\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase --continue\n```\n\n----------------------------------------\n\nTITLE: Installing and Updating zpay32 Go Package\nDESCRIPTION: Command to install or update the zpay32 package using Go's package manager. This fetches the latest version of the package from the Lightning Network's lnd repository.\n\nLANGUAGE: shell\nCODE:\n```\n$  go get -u github.com/lightningnetwork/lnd/zpay32\n```\n\n----------------------------------------\n\nTITLE: Updating lnd to the Latest Version\nDESCRIPTION: Commands to update an existing lnd installation to the latest version. This pulls the latest changes, cleans the build environment, and reinstalls lnd.\n\nLANGUAGE: shell\nCODE:\n```\ncd $GOPATH/src/github.com/lightningnetwork/lnd\ngit pull\nmake clean && make && make install\n```\n\n----------------------------------------\n\nTITLE: Creating and Paying an Invoice with LND CLI\nDESCRIPTION: CLI commands to create an invoice on one LND node and pay it from another node. Used in conjunction with the subscription example to demonstrate invoice events.\n\nLANGUAGE: bash\nCODE:\n```\n$ lncli addinvoice --amt=100\n{\n\t\"r_hash\": <RHASH>,\n\t\"pay_req\": <PAYMENT_REQUEST>\n}\n$ lncli sendpayment --pay_req=<PAYMENT_REQUEST>\n```\n\n----------------------------------------\n\nTITLE: lnd Configuration File with Auto-Unlock Option\nDESCRIPTION: An example of how to add the wallet auto-unlock configuration to the lnd configuration file rather than using command line parameters.\n\nLANGUAGE: text\nCODE:\n```\n[Application Options]\ndebuglevel=debug\nwallet-unlock-password-file=/some/safe/location/password.txt\n\n[Bitcoin]\nbitcoin.active=1\n...\n```\n\n----------------------------------------\n\nTITLE: Creating PSBT with Manual Coin Selection in LND\nDESCRIPTION: This command creates a PSBT with specific manually selected inputs. It specifies an output address to receive 50M satoshis and selects two specific UTXOs as inputs. LND automatically calculates the change output.\n\nLANGUAGE: shell\nCODE:\n```\n$  lncli wallet psbt fund --outputs='{\"bcrt1qjrdns4f5zwkv29ln86plqzs092yd5fg6nsz8re\":50000000}' \\\n    --inputs='[\"3597b451ff56bc901eb806e8c644a004e934b4c208679756b4cddc455c768c48:1\",\"f8efa583e93ab71debe62a5374f91563aa10a3461518042aaddb464b656350e2:1\"]'\n{\n        \"psbt\": \"cHNidP8BAJoCAAAAAkiMdlxF3M20VpdnCMK0NOkEoETG6Aa4HpC8Vv9RtJc1AQAAAAAAAAAA4lBjZUtG260qBBgVRqMQqmMV+XRTKubrHbc66YOl7/gBAAAAAAAAAAACgPD6AgAAAAAWABSQ2zhVNBOsxRfzPoPwCg8qiNolGtIkCAcAAAAAFgAUuvRP5r7qAvj0egDxyX9/FH+vukgAAAAAAAEA3gIAAAAAAQEr9IZcho/gV/6fH8C8P+yhNRZP+l3YuxsyatdYcS0S6AEAAAAA/v///wLI/8+yAAAAABYAFDXoRFwgXNO5VVtVq2WpaENh6blAAOH1BQAAAAAWABTcAR0NeNdDHb96kMnH5EVUcr1YwwJHMEQCIDqugtYLp4ebJAZvOdieshLi1lLuPl2tHQG4jM4ybwEGAiBeMpCkbHBmzYvljxb1JBQyVAMuoco0xIfi+5OQdHuXaAEhAnH96NhTW09X0npE983YBsHUoMPI4U4xBtHenpZVTEqpVwAAAAEBHwDh9QUAAAAAFgAU3AEdDXjXQx2/epDJx+RFVHK9WMMBAwQBAAAAAAEA6wIAAAAAAQFvGpeAR/0OXNyqo0zrXSzmkvVfbnytrr4onbZ61vscBwEAAAAAAAAAAAIAJPQAAAAAACIAILtTVbSIkaFDqjsJ7EOHmTfpXq/fbnrGkD3/GYHYHJtMVl0NBAAAAAAWABQqnZOHOGzDIzZAeXK+YwHq1AHtXQJIMEUCIQDgx3xEhlioV1Q+yAPKiaXMwkv1snoejbckZOKFe0R6WAIgB41dEvK3zxI665YVWfcih0IThTkPoOiMgd6xGaKQXbwBIQMdgXMwQDF+Z+r3x5JKdm1TBvXDuYC0cbrnLyqJEU2ciQAAAAABAR9WXQ0EAAAAABYAFCqdk4c4bMMjNkB5cr5jAerUAe1dAQMEAQAAAAAAAA==\",\n        \"change_output_index\": 1,\n        \"locks\": [\n                {\n                        \"id\": \"ede19a92ed321a4705f8a1cccc1d4f6182545d4bb4fae08bd5937831b7e38f98\",\n                        \"outpoint\": \"3597b451ff56bc901eb806e8c644a004e934b4c208679756b4cddc455c768c48:1\",\n                        \"expiration\": 1601560626\n                },\n                {\n                        \"id\": \"ede19a92ed321a4705f8a1cccc1d4f6182545d4bb4fae08bd5937831b7e38f98\",\n                        \"outpoint\": \"f8efa583e93ab71debe62a5374f91563aa10a3461518042aaddb464b656350e2:1\",\n                        \"expiration\": 1601560626\n                }\n        ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running lnd with Tor v3 Onion Service\nDESCRIPTION: Command to start lnd with Tor integration using v3 onion services for enhanced privacy and security.\n\nLANGUAGE: shell\nCODE:\n```\n$  ./lnd --tor.active --tor.v3\n```\n\n----------------------------------------\n\nTITLE: Running lnd with Tor v3 Onion Service\nDESCRIPTION: Command to start lnd with Tor integration using v3 onion services for enhanced privacy and security.\n\nLANGUAGE: shell\nCODE:\n```\n$  ./lnd --tor.active --tor.v3\n```\n\n----------------------------------------\n\nTITLE: Alternative Make Commands for Windows WSL\nDESCRIPTION: Special make commands for Windows Subsystem for Linux (WSL) users. These commands reference make directly via its path or wrapped in quotation marks to ensure proper execution in WSL.\n\nLANGUAGE: shell\nCODE:\n```\n/usr/bin/make && /usr/bin/make install\n\n\"make\" && \"make\" install\n```\n\n----------------------------------------\n\nTITLE: Creating PSBT with Partial Coin Selection Using fundtemplate in LND\nDESCRIPTION: This example demonstrates the newer fundtemplate command (v0.18.0-beta+) that allows specifying only some inputs while letting LND select additional inputs if needed. It also leases the specific outpoint to prevent it from being spent elsewhere.\n\nLANGUAGE: shell\nCODE:\n```\n$  LOCK_ID=$(cat /dev/urandom | head -c32 | xxd -p -c999)\n$  lncli wallet leaseoutput --outpoint 3597b451ff56bc901eb806e8c644a004e934b4c208679756b4cddc455c768c48:1 \\\n    --lockid $LOCK_ID --expiry 600\n$  lncli wallet psbt fundtemplate --outputs='[\"bcrt1qjrdns4f5zwkv29ln86plqzs092yd5fg6nsz8re:50000000\"]' \\\n    --inputs='[\"3597b451ff56bc901eb806e8c644a004e934b4c208679756b4cddc455c768c48:1\"]'\n{\n        \"psbt\": \"cHNidP8BAJoCAAAAAkiMdlxF3M20VpdnCMK0NOkEoETG6Aa4HpC8Vv9RtJc1AQAAAAAAAAAA4lBjZUtG260qBBgVRqMQqmMV+XRTKubrHbc66YOl7/gBAAAAAAAAAAACgPD6AgAAAAAWABSQ2zhVNBOsxRfzPoPwCg8qiNolGtIkCAcAAAAAFgAUuvRP5r7qAvj0egDxyX9/FH+vukgAAAAAAAEA3gIAAAAAAQEr9IZcho/gV/6fH8C8P+yhNRZP+l3YuxsyatdYcS0S6AEAAAAA/v///wLI/8+yAAAAABYAFDXoRFwgXNO5VVtVq2WpaENh6blAAOH1BQAAAAAWABTcAR0NeNdDHb96kMnH5EVUcr1YwwJHMEQCIDqugtYLp4ebJAZvOdieshLi1lLuPl2tHQG4jM4ybwEGAiBeMpCkbHBmzYvljxb1JBQyVAMuoco0xIfi+5OQdHuXaAEhAnH96NhTW09X0npE983YBsHUoMPI4U4xBtHenpZVTEqpVwAAAAEBHwDh9QUAAAAAFgAU3AEdDXjXQx2/epDJx+RFVHK9WMMBAwQBAAAAAAEA6wIAAAAAAQFvGpeAR/0OXNyqo0zrXSzmkvVfbnytrr4onbZ61vscBwEAAAAAAAAAAAIAJPQAAAAAACIAILtTVbSIkaFDqjsJ7EOHmTfpXq/fbnrGkD3/GYHYHJtMVl0NBAAAAAAWABQqnZOHOGzDIzZAeXK+YwHq1AHtXQJIMEUCIQDgx3xEhlioV1Q+yAPKiaXMwkv1snoejbckZOKFe0R6WAIgB41dEvK3zxI665YVWfcih0IThTkPoOiMgd6xGaKQXbwBIQMdgXMwQDF+Z+r3x5JKdm1TBvXDuYC0cbrnLyqJEU2ciQAAAAABAR9WXQ0EAAAAABYAFCqdk4c4bMMjNkB5cr5jAerUAe1dAQMEAQAAAAAAAA==\",\n        \"change_output_index\": 1,\n        \"locks\": [\n                {\n                        \"id\": \"ede19a92ed321a4705f8a1cccc1d4f6182545d4bb4fae08bd5937831b7e38f98\",\n                        \"outpoint\": \"f8efa583e93ab71debe62a5374f91563aa10a3461518042aaddb464b656350e2:1\",\n                        \"expiration\": 1601560626\n                }\n        ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Concurrent Consumers in Go\nDESCRIPTION: Example showing how to register consumers to be notified concurrently by placing them in different queues. Each consumer will receive block updates independently.\n\nLANGUAGE: go\nCODE:\n```\n// consumer1 and consumer2 will be notified concurrently.\nqueue1 := []chainio.Consumer{consumer1}\nblockbeatDispatcher.RegisterQueue(consumer1)\n\nqueue2 := []chainio.Consumer{consumer2}\nblockbeatDispatcher.RegisterQueue(consumer2)\n```\n\n----------------------------------------\n\nTITLE: Exporting All Channel Backups in LND\nDESCRIPTION: Command to export Static Channel Backups for all currently open channels using the lncli exportchanbackup command with the --all flag. This outputs the backup data for multiple channels in JSON format.\n\nLANGUAGE: shell\nCODE:\n```\nlncli --network=simnet exportchanbackup --all\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Public Keys for LND Testnet\nDESCRIPTION: This snippet shows the configuration of multiple extended public key (xpub) entries for LND's testnet environment. Each object contains the xpub value, purpose code 1017, coin_type value of 1 (indicating testnet), and sequential account numbers. This configuration is used for hierarchical deterministic wallet key derivation.\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'xpub': 'tpubDDXFHr67Ro2yPfE3VNq2QUbYSp6omHAjMTFdgQVPkdgemrLGX8MJrwZbLBW1gXmvc2RhnYgqax9kxcCvs1MYTf8GcGjG1uXSjVMzsy5Rn1r',\n    purpose: 1017,\n    coin_type: 1,\n    account: 117\n},\n{\n    'xpub': 'tpubDDXFHr67Ro2yTz25YQuP3PdUxnvMLbfdrxRtndHW6k2nMF4A99PQLk1Jr1v9zqzp5Vurun8MhsSBqwyzaemHHimtV3kt4fHCz2W5xrxAhSA',\n    purpose: 1017,\n    coin_type: 1,\n    account: 118\n},\n{\n    'xpub': 'tpubDDXFHr67Ro2yUV3yiSAUCvoVoVN7mRTSVLr9aGrKuTefyZH1VzzFpqUw3L4xQCMxkyUV8h55AT2JVhegPgXkmz1Kx5HbryCxcA8EYUdGzxq',\n    purpose: 1017,\n    coin_type: 1,\n    account: 119\n}\n```\n\n----------------------------------------\n\nTITLE: Review Bot Mute Command\nDESCRIPTION: Command to mute the review bot completely on a pull request. This prevents the bot from sending any reminders on the specific PR.\n\nLANGUAGE: markdown\nCODE:\n```\n!lightninglabs-deploy mute\n```\n\n----------------------------------------\n\nTITLE: Exporting All Channel Backups to File in LND\nDESCRIPTION: Command to export Static Channel Backups for all currently open channels directly to a file called channel.backup, combining the --all and --output_file flags.\n\nLANGUAGE: shell\nCODE:\n```\nlncli --network=simnet exportchanbackup --all --output_file=channel.backup\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Public Keys (xpubs) for LND Testnet Accounts\nDESCRIPTION: This code snippet contains JSON configuration for extended public keys used in LND wallet structure. Each object defines an xpub key with BIP parameters including purpose 1017, coin type 1 (Bitcoin testnet), and sequential account numbers. These entries are used for hierarchical deterministic (HD) wallet management in the Lightning Network Daemon.\n\nLANGUAGE: json\nCODE:\n```\n{\n    'xpub': 'tpubDDXFHr67Ro31Ec4LvQpP5G1M2tAskAr2RT9zmaz5oLa3UW4TJjJknUMtAbPWFmLHZSUhrmf3qtWvhRHJCT1qGsw7c2vw71sCmsSdqCUTa8n',\n    purpose: 1017,\n    coin_type: 1,\n    account: 159\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer Interface Structure in Go\nDESCRIPTION: Example showing how to implement the Consumer interface by embedding the BeatConsumer struct, which provides partial implementation of the required methods.\n\nLANGUAGE: go\nCODE:\n```\ntype TxPublisher struct {\n   started atomic.Bool\n   stopped atomic.Bool\n\n   chainio.BeatConsumer\n\n   ...\n```\n\n----------------------------------------\n\nTITLE: Command-Line Usage for Node Announcement Updates\nDESCRIPTION: Shows how to update and propagate node information using the update node announcement command.\n\nLANGUAGE: bash\nCODE:\n```\nupdate node announcement\n```\n\n----------------------------------------\n\nTITLE: Testing the lnd Installation\nDESCRIPTION: Command to verify that lnd was installed properly. This runs tests that require bitcoind to be available in the system's PATH variable.\n\nLANGUAGE: shell\nCODE:\n```\nmake check\n```\n\n----------------------------------------\n\nTITLE: Starting LND with Profiling Server Enabled\nDESCRIPTION: Command to start LND with the built-in profiling server enabled on a specified port, allowing runtime performance analysis with minimal overhead.\n\nLANGUAGE: shell\nCODE:\n```\n$  lnd --profile=9736\n```\n\n----------------------------------------\n\nTITLE: Extracting Taproot Extended Public Key for Migration\nDESCRIPTION: Command to extract the Taproot account extended public key from the signer node, needed when upgrading from lnd v0.14.x to v0.15.x which introduces Taproot support.\n\nLANGUAGE: shell\nCODE:\n```\nlncli wallet accounts list | grep -A5 TAPROOT\n```\n\n----------------------------------------\n\nTITLE: Processing Blockbeats in Consumer Main Loop in Go\nDESCRIPTION: Example showing how to receive and process blockbeats in a consumer's main event loop, ensuring proper notification back to the dispatcher when processing is complete.\n\nLANGUAGE: go\nCODE:\n```\nfor {\n      select {\n      case beat := <-tp.BlockbeatChan:\n         // Consume this blockbeat, usually it means updating the subsystem\n         // using the new block data.\n\n         // Notify we've processed the block.\n         tp.NotifyBlockProcessed(beat, nil)\n\n      ...\n```\n\n----------------------------------------\n\nTITLE: Sample lnd.conf Configuration\nDESCRIPTION: An example lnd.conf file showing basic configuration options including debug level and Bitcoin chain settings, useful for persistent configuration between lnd launches.\n\nLANGUAGE: text\nCODE:\n```\n[Application Options]\ndebuglevel=trace\nmaxpendingchannels=10\n\n[Bitcoin]\nbitcoin.active=1\n```\n\n----------------------------------------\n\nTITLE: Importing Taproot Account to Watch-Only Node\nDESCRIPTION: Command to import the Taproot extended public key into the watch-only wallet. This is necessary when upgrading from lnd v0.14.x to v0.15.x to ensure compatibility with Taproot addresses.\n\nLANGUAGE: shell\nCODE:\n```\nlncli wallet accounts import --address_type p2tr <xpub...> default\n```\n\n----------------------------------------\n\nTITLE: Starting Bitcoin Node with bitcoind in Docker\nDESCRIPTION: Command to launch a Bitcoin node using bitcoind in regtest mode via Docker Compose, as an alternative to the btcd setup.\n\nLANGUAGE: shell\nCODE:\n```\n$  NETWORK=\"regtest\" docker-compose -f docker-compose-bitcoind.yml up\n```\n\n----------------------------------------\n\nTITLE: Generating a Lightning Network Address with lncli\nDESCRIPTION: Command to generate a new backward compatible nested p2sh address using lncli in the regtest network, which can be used for receiving funds.\n\nLANGUAGE: shell\nCODE:\n```\nlnd$  lncli --network=regtest newaddress np2wkh\n```\n\n----------------------------------------\n\nTITLE: Updating lnd Using Go Commands\nDESCRIPTION: Alternative update method using go commands directly instead of make. This pulls the latest changes and reinstalls all packages in the repository.\n\nLANGUAGE: shell\nCODE:\n```\ncd $GOPATH/src/github.com/lightningnetwork/lnd\ngit pull\ngo install -v ./...\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC for Large Response Handling\nDESCRIPTION: Ruby code showing how to configure the gRPC client to handle large responses by increasing the maximum message size limit, essential for operations like DescribeGraph on mainnet.\n\nLANGUAGE: ruby\nCODE:\n```\nstub = Lnrpc::Lightning::Stub.new(\n  'localhost:10009',\n  credentials,\n  channel_args: {\"grpc.max_receive_message_length\" => 1024 * 1024 * 50}\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Alice's Wallet Balance\nDESCRIPTION: Verifies Alice's wallet balance after mining blocks with her address as the mining reward recipient.\n\nLANGUAGE: shell\nCODE:\n```\nalice $  lncli --network=simnet walletbalance\n```\n\n----------------------------------------\n\nTITLE: Installing and Updating the LND Routing Package via Go\nDESCRIPTION: This command fetches and installs the latest version of the routing package from the Lightning Network Daemon (lnd) repository using the Go package manager. The -u flag ensures the package is updated to the latest version if it already exists.\n\nLANGUAGE: shell\nCODE:\n```\n$  go get -u github.com/lightningnetwork/lnd/routing\n```\n\n----------------------------------------\n\nTITLE: Bidirectional-Streaming RPC for Payment Sending in C#\nDESCRIPTION: C# code demonstrating a bidirectional streaming RPC to continuously send and receive payment information with lnd.\n\nLANGUAGE: C#\nCODE:\n```\nusing (var call = client.SendPayment())\n{\n    var responseReaderTask = Task.Run(async () =>\n    {\n        while (await call.ResponseStream.MoveNext())\n        {\n            var payment = call.ResponseStream.Current;\n            Console.WriteLine(payment.ToString());\n        }\n    });\n\n    foreach (SendRequest sendRequest in SendPayment())\n    {\n        await call.RequestStream.WriteAsync(sendRequest);\n    }\n    await call.RequestStream.CompleteAsync();\n    await responseReaderTask;\n}\n\n\nIEnumerable<SendRequest> SendPayment()\n{\n    while (true)\n    {\n        SendRequest req = new SendRequest() {\n            DestString = <DEST_PUB_KEY>,\n            Amt = 100,\n            PaymentHashString = <R_HASH>,\n            FinalCltvDelta = 144\n        };\n        yield return req;\n        System.Threading.Thread.Sleep(2000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command-Line Usage for Taproot Address Creation\nDESCRIPTION: Shows how to create a new BIP-0086 keyspend only Taproot (SegWit v1) address using the lncli command-line tool.\n\nLANGUAGE: bash\nCODE:\n```\nlncli newaddress p2tr\n```\n\n----------------------------------------\n\nTITLE: Exporting Public Keys from Signer Node using lncli\nDESCRIPTION: Command to export the extended public keys (xpubs) from the signer node wallet. These keys will be used to create the watch-only wallet on the public-facing node.\n\nLANGUAGE: shell\nCODE:\n```\nsigner>  $  lncli wallet accounts list > accounts-signer.json\n```\n\n----------------------------------------\n\nTITLE: Anonymizing Error Messages and Transaction Details in lnd Logs\nDESCRIPTION: Regular expressions to sanitize error messages and transaction-related details by replacing specific numeric values with generic placeholders.\n\nLANGUAGE: regex\nCODE:\n```\ns/funder balance too small \\(\\-?[[:digit:]]+\\)/funder balance too small (<amt>)/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/HTLC ID = [[:digit:]]+/HTLC ID = <id>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/height=[[:digit:]]+/height=<height>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/collecting result for shard [[:digit:]]+/collecting result for shard <number>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/sending attempt [[:digit:]]+/sending attempt <number>/g\n```\n\n----------------------------------------\n\nTITLE: Batch Signing Multiple Commits During Rebase\nDESCRIPTION: Command to apply a GPG signature to multiple commits at once using git rebase with the --exec option, which runs the specified command for each commit being rebased.\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase --exec 'git commit --amend --no-edit -n -S' -i HEAD~3\n```\n\n----------------------------------------\n\nTITLE: Capturing CPU Profile from LND's Profiler\nDESCRIPTION: Command to capture a 10-second CPU profile from a running LND instance via the profiler HTTP endpoint for later analysis.\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://localhost:9736/debug/pprof/profile?seconds=10 > cpu.prof\n```\n\n----------------------------------------\n\nTITLE: Creating MuSig2 Session with BIP-0086 Taproot Key Spend Only Tweak in Go\nDESCRIPTION: Initializes a MuSig2 session with a Taproot tweak that only allows for key path spending according to BIP-0086. The tweak is specified with KeySpendOnly set to true, which creates a Taproot output without script path commitment.\n\nLANGUAGE: go\nCODE:\n```\ntaprootTweak := &signrpc.TaprootTweakDesc{\n        KeySpendOnly: true,\n}\n\nsessResp1, err := node.SignerClient.MuSig2CreateSession(\n\tctx, &signrpc.MuSig2SessionRequest{\n\t\tKeyLoc:           keyDesc1.KeyLoc,\n\t\tAllSignerPubkeys: allPubKeys,\n\t\tTaprootTweak:     taprootTweak,\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Running lnd with Tor v2 Onion Service\nDESCRIPTION: Command to start lnd with Tor integration using v2 onion services for both outbound and inbound connections.\n\nLANGUAGE: shell\nCODE:\n```\n$  ./lnd --tor.active --tor.v2\n```\n\n----------------------------------------\n\nTITLE: Listing Available Fuzz Tests\nDESCRIPTION: Commands to display all available fuzz tests in the current directory. This helps identify what fuzz tests are available for execution.\n\nLANGUAGE: shell\nCODE:\n```\ncd lnwire\ngo test -list=Fuzz.*\n```\n\n----------------------------------------\n\nTITLE: Starting Bitcoin Node with btcd in Docker\nDESCRIPTION: Command to initialize and run a Bitcoin node using btcd in testnet mode via Docker Compose, which serves as the blockchain backend for the lightning network.\n\nLANGUAGE: shell\nCODE:\n```\n# Init bitcoin network env variable:\n$  NETWORK=\"testnet\" docker-compose up\n```\n\n----------------------------------------\n\nTITLE: Sending Coins with Specific Outpoints in Go\nDESCRIPTION: Example of using SendCoinsRequest with the new 'Outpoints' parameter to specify which wallet UTXOs to spend when sending to a given address.\n\nLANGUAGE: go\nCODE:\n```\nreq := &lnrpc.SendCoinsRequest{\n    Addr: ...,\n    Amount: ...,\n    Outpoints: []*lnrpc.OutPoint{\n        selected_wallet_utxo_1,\n        selected_wallet_utxo_2,\n    },\n}\n\nSendCoins(req)\n```\n\n----------------------------------------\n\nTITLE: Review Bot Date-Based Mute Command\nDESCRIPTION: Command to mute the review bot until a specific date. The date must be in the YYYY-MMM-DD format as specified.\n\nLANGUAGE: markdown\nCODE:\n```\n!lightninglabs-deploy mute 2022-Feb-02\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lightning Network Protocol Files with Shell Commands\nDESCRIPTION: Shell commands to create a directory structure and download the Lightning Network protocol definition file from GitHub.\n\nLANGUAGE: shell\nCODE:\n```\nmkdir Grpc\ncurl -o Grpc/lightning.proto -s https://raw.githubusercontent.com/lightningnetwork/lnd/master/lnrpc/lightning.proto\n```\n\n----------------------------------------\n\nTITLE: Finalizing PSBT with Account Owner Signature\nDESCRIPTION: This command allows the owner of the private keys to sign the PSBT that was created for the imported account, producing a finalized transaction ready for broadcast.\n\nLANGUAGE: shell\nCODE:\n```\n$ lncli-alice wallet psbt finalize --funded_psbt=\"cHNidP8BAHECAAAAAYDHzEGcDW4Qf+gVbIgWpG2PVSUY6aZ3xUGk/3Ia/XnJAAAAAAD/////AiChBwAAAAAAFgAUDIA9aisn8WgSHa89ozB53nJbH6lWNf4pAQAAABYAFPwW6584J6Aku9bQ//xXsrI0VSjSAAAAAAABAKgCAAAAAAEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////A1oBAf////8CAPIFKgEAAAAWABQ4myEoBVZv6Ti9vHgUq4WlIqVpAAAAAAAAAAAAJmokqiGp7eL2HD9x0d79P6mZ36NpU3VcaQaJeZlitIvr2DaXToz5ASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAR8A8gUqAQAAABYAFDibISgFVm/pOL28eBSrhaUipWkAAQMEAQAAACIGArbCQ3C0eTrSeuEokWjN7ty25lSzNxiClZL3tnbmlDG6GAAAAABUAACAAAAAgAAAAIAAAAAAAAAAAAAAAA==\"\n```\n\n----------------------------------------\n\nTITLE: Review Bot Unmute Command\nDESCRIPTION: Command to unmute the review bot, re-enabling its reminder functionality for a PR that was previously muted.\n\nLANGUAGE: markdown\nCODE:\n```\n!lightninglabs-deploy unmute\n```\n\n----------------------------------------\n\nTITLE: Running Complete Test Using test.sh\nDESCRIPTION: Command to run the complete backwards compatibility test using the test.sh script.\n\nLANGUAGE: bash\nCODE:\n```\n./test.sh\n```\n\n----------------------------------------\n\nTITLE: Corrected Fee Rate Calculation in Alloy\nDESCRIPTION: This code snippet shows the fixed version of the fee rate calculation that resolves the off-by-one error. It correctly checks if the position is greater than or equal to width-1 before returning the ending fee rate.\n\nLANGUAGE: alloy\nCODE:\n```\np >= f.width.sub[1] => f.endingFeeRate\n```\n\n----------------------------------------\n\nTITLE: Review Bot PR-Based Mute Command\nDESCRIPTION: Command to mute the review bot until a specific PR (referenced by number) has been merged. This is useful when work is blocked by another PR.\n\nLANGUAGE: markdown\nCODE:\n```\n!lightninglabs-deploy mute #4\n```\n\n----------------------------------------\n\nTITLE: Basic Macaroon Authentication in gRPC Request\nDESCRIPTION: Simple approach to include macaroon authentication in a single gRPC request to lnd using the metadata parameter.\n\nLANGUAGE: ruby\nCODE:\n```\nstub.get_info(Lnrpc::GetInfoRequest.new, metadata: {macaroon: macaroon})\n```\n\n----------------------------------------\n\nTITLE: Configuration for HTLC Notifier Event in LND\nDESCRIPTION: Code snippet showing how to enable the HTLC notifier event feature in LND through a configuration flag. This feature allows applications to track the final settlement status of incoming HTLCs.\n\nLANGUAGE: markdown\nCODE:\n```\nThis feature is [opt-in](https://github.com/lightningnetwork/lnd/pull/7341)\nvia a config flag. The status of the flag is\n[exposed](https://github.com/lightningnetwork/lnd/pull/7402) at run-time\nthrough GetInfo.\n```\n\n----------------------------------------\n\nTITLE: Review Bot Timed Mute Command\nDESCRIPTION: Command to mute the review bot for a specific duration (hours and minutes). This temporarily disables reminders for the specified timeframe.\n\nLANGUAGE: markdown\nCODE:\n```\n!lightninglabs-deploy mute 72h30m\n```\n\n----------------------------------------\n\nTITLE: Running Complete Backwards Compatibility Test\nDESCRIPTION: Command to execute the full backwards compatibility test which upgrades Bob's node and verifies continued functionality.\n\nLANGUAGE: bash\nCODE:\n```\n./test.sh\n```\n\n----------------------------------------\n\nTITLE: Creating and Paying an Invoice with Lightning CLI\nDESCRIPTION: Shell commands for creating an invoice and sending a payment using the lncli command-line tool.\n\nLANGUAGE: shell\nCODE:\n```\n$  lncli addinvoice --amt=100\n{\n    \"r_hash\": <R_HASH>,\n    \"pay_req\": <PAY_REQ>\n}\n$  lncli sendpayment --pay_req=<PAY_REQ>\n```\n\n----------------------------------------\n\nTITLE: Reading and Formatting Macaroon for Authentication in C#\nDESCRIPTION: C# code to read a macaroon file and convert it to the hex format required for Lightning Network Daemon authentication.\n\nLANGUAGE: C#\nCODE:\n```\n// Lnd admin macaroon is at <LND_DIR>/data/chain/bitcoin/simnet/admin.macaroon on Windows\n// ~/.lnd/data/chain/bitcoin/simnet/admin.macaroon on Linux and ~/Library/Application Support/Lnd/data/chain/bitcoin/simnet/admin.macaroon on Mac\nbyte[] macaroonBytes = File.ReadAllBytes(\"<LND_DIR>/data/chain/bitcoin/simnet/admin.macaroon\");\nvar macaroon = BitConverter.ToString(macaroonBytes).Replace(\"-\", \"\"); // hex format stripped of \"-\" chars\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Logging Subsystems in LND\nDESCRIPTION: Commands to display all available logging subsystems in LND using either the startup flag or the lncli utility.\n\nLANGUAGE: shell\nCODE:\n```\n$  lnd --debuglevel=show\n$  lncli debuglevel --show\n```\n\n----------------------------------------\n\nTITLE: Configuring Protobuf in Android Module's Gradle\nDESCRIPTION: Gradle configuration for setting up protobuf compilation in an Android module, including dependencies and task configuration.\n\nLANGUAGE: shell\nCODE:\n```\nplugins {\n    id \"com.google.protobuf\"\n}\n\nandroid {\n    sourceSets {\n        main {\n            proto {\n\n            }\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n    implementation \"com.google.protobuf:protobuf-javalite:${rootProject.ext.javalite_version}\"\n}\n\nprotobuf {\n    protoc {\n        artifact = \"com.google.protobuf:protoc:${rootProject.ext.protoc_version}\"\n    }\n    generateProtoTasks {\n        all().each { task ->\n            task.builtins {\n                java {\n                    option \"lite\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Go Module Dependencies to Point to a Development Fork\nDESCRIPTION: Generic command for replacing an imported Go module with a specific fork and version, useful for testing changes in dependent projects without testing infrastructure.\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -replace=IMPORT-PATH-IN-LND@LND-VERSION=DEV-FORK-IMPORT-PATH@DEV-FORK-VERSION\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Logging Level Configuration\nDESCRIPTION: Example output from an lncli command showing all subsystems and their current logging levels after setting customized levels.\n\nLANGUAGE: shell\nCODE:\n```\n$ lncli debuglevel --level=critical,HSWC=debug\n{\n    \"sub_systems\": \"ARPC=INF, ATPL=INF, BLPT=INF, BRAR=INF, BTCN=INF, BTWL=INF, CHAC=INF, CHBU=INF, CHCL=INF, CHDB=INF, CHFD=INF, CHFT=INF, CHNF=INF, CHRE=INF, CLUS=INF, CMGR=INF, CNCT=INF, CNFG=INF, CRTR=INF, DISC=INF, DRPC=INF, FNDG=INF, GRPH=INF, HLCK=INF, HSWC=DBG, INVC=INF, IRPC=INF, LNWL=INF, LTND=INF, NANN=INF, NRPC=INF, NTFN=INF, NTFR=INF, PEER=INF, PRNF=INF, PROM=INF, PRPC=INF, RPCP=INF, RPCS=INF, RPWL=INF, RRPC=INF, SGNR=INF, SPHX=INF, SRVR=INF, SWPR=INF, TORC=INF, UTXN=INF, VRPC=INF, WLKT=INF, WTCL=INF, WTWR=INF\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Taproot Address Generation\nDESCRIPTION: Command to generate a new Taproot address on the watch-only node to verify that the Taproot account was successfully imported and the remote signing setup is working properly.\n\nLANGUAGE: shell\nCODE:\n```\nlncli newaddress p2tr\n```\n\n----------------------------------------\n\nTITLE: Running All Fuzz Tests in LND\nDESCRIPTION: Basic command to run all fuzz tests with default settings in the LND project.\n\nLANGUAGE: shell\nCODE:\n```\nmake fuzz\n```\n\n----------------------------------------\n\nTITLE: Managing LND with systemd commands\nDESCRIPTION: Set of bash commands for managing the LND service through systemd, including enabling auto-start on boot, starting, restarting, and stopping the service.\n\nLANGUAGE: bash\nCODE:\n```\n# Enable lnd to automatically start on system boot\nsystemctl enable lnd\n\n# Start lnd\nsystemctl start lnd\n\n# Restart lnd\nsystemctl restart lnd\n\n# Stop lnd\nsystemctl stop lnd\n```\n\n----------------------------------------\n\nTITLE: Checking Recovery Status with lncli\nDESCRIPTION: Command to check the current status of a recovery operation in lnd. The output shows recovery mode status, whether recovery is finished, and progress percentage.\n\nLANGUAGE: shell\nCODE:\n```\nlncli getrecoveryinfo\n```\n\n----------------------------------------\n\nTITLE: Building and Installing LND from Source\nDESCRIPTION: Basic commands to build, verify, and install LND from source. The 'make check' command requires bitcoind to be available in the system's PATH variable.\n\nLANGUAGE: shell\nCODE:\n```\n$  make\n$  make check\n$  make install\n```\n\n----------------------------------------\n\nTITLE: Generating Python RPC Modules for lnd Subservers\nDESCRIPTION: Additional steps to generate Python modules for lnd subservers like the Router.\n\nLANGUAGE: shell\nCODE:\n```\nlnd $  curl -o router.proto -s https://raw.githubusercontent.com/lightningnetwork/lnd/master/lnrpc/routerrpc/router.proto\n```\n\nLANGUAGE: shell\nCODE:\n```\nlnd $  python -m grpc_tools.protoc --proto_path=.  --python_out=. --grpc_python_out=. router.proto\n```\n\n----------------------------------------\n\nTITLE: Plaintext aezeed Structure Format\nDESCRIPTION: The structure of the plaintext aezeed before encryption, consisting of a 1-byte internal version, 2-byte timestamp (in Bitcoin Days Genesis), and 16 bytes of entropy used to derive the wallet's HD root.\n\nLANGUAGE: text\nCODE:\n```\n1 byte internal version || 2 byte timestamp || 16 bytes of entropy\n```\n\n----------------------------------------\n\nTITLE: Sending All Coins from Specific Outpoints in Go\nDESCRIPTION: Example of using SendCoinsRequest with SendAll flag to send all funds from specific UTXOs without generating a change output.\n\nLANGUAGE: go\nCODE:\n```\nreq := &lnrpc.SendCoinsRequest{\n  Addr: ...,\n  SendAll: true,\n  Outpoints: []*lnrpc.OutPoint{\n      selected_wallet_utxo_1,\n      selected_wallet_utxo_2,\n  },\n}\n\nSendCoins(req)\n```\n\n----------------------------------------\n\nTITLE: Basic systemd service file reference for LND\nDESCRIPTION: Reference to a systemd service file that should be added to the /etc/systemd/system/ directory and modified according to the user's system configuration.\n\nLANGUAGE: text\nCODE:\n```\nsystemd: lnd.service\n```\n\n----------------------------------------\n\nTITLE: Review Bot Cadence Adjustment Command\nDESCRIPTION: Command to change the frequency (cadence) of reminders from the review bot. This example changes it from the default 3 days to 60 hours.\n\nLANGUAGE: markdown\nCODE:\n```\n!lightninglabs-deploy cadence 60h\n```\n\n----------------------------------------\n\nTITLE: Setting up a Python Virtual Environment for lnd Client\nDESCRIPTION: Steps to create and activate a virtual environment for your lnd Python client project.\n\nLANGUAGE: shell\nCODE:\n```\n$  virtualenv lnd\n```\n\nLANGUAGE: shell\nCODE:\n```\n$  source lnd/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running lnd with Outbound-Only Tor Support\nDESCRIPTION: Command to start lnd with Tor integration for outbound connections only, preventing inbound connections to minimize privacy leaks.\n\nLANGUAGE: shell\nCODE:\n```\n$  ./lnd --tor.active\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Volumes and Environment for Lightning Network Nodes\nDESCRIPTION: Sets up the initial environment by creating Docker volumes for Alice and Bob's lnd nodes and configuring the network type to simnet.\n\nLANGUAGE: shell\nCODE:\n```\n# Init bitcoin network env variable:\n$  export NETWORK=\"simnet\" \n\n# Create persistent volumes for alice and bob.\n$  docker volume create simnet_lnd_alice\n$  docker volume create simnet_lnd_bob\n```\n\n----------------------------------------\n\nTITLE: Basic Auto-Unlock Setup for lnd Wallet\nDESCRIPTION: A series of commands demonstrating how to set up basic auto-unlocking for an lnd wallet. This includes creating a wallet, storing the password in a file, and configuring lnd to use that file for auto-unlocking.\n\nLANGUAGE: shell\nCODE:\n```\nlnd --bitcoin.active --bitcoin.xxxx .....\n```\n\nLANGUAGE: shell\nCODE:\n```\nlncli create\n```\n\nLANGUAGE: shell\nCODE:\n```\nlncli stop\n```\n\nLANGUAGE: shell\nCODE:\n```\necho 'my-$up3r-Secret-Passw0rd' > /some/safe/location/password.txt\n```\n\nLANGUAGE: shell\nCODE:\n```\nchmod 0400 /some/safe/location/password.txt\n```\n\nLANGUAGE: shell\nCODE:\n```\nlnd --bitcoin.active --bitcoin.xxxx ..... \\\n     --wallet-unlock-password-file=/some/safe/location/password.txt\n```\n\n----------------------------------------\n\nTITLE: Generating Address from an Imported Account\nDESCRIPTION: Demonstrates how to generate a new receiving address from an imported watch-only account using the newaddress command with the account parameter.\n\nLANGUAGE: shell\nCODE:\n```\n$ lncli-bob newaddress p2wkh --account=alice\n```\n\n----------------------------------------\n\nTITLE: Running lnd with v3 Onion Service and Local Listening\nDESCRIPTION: Command to start lnd with v3 onion services and local listening to prevent unintentional leaking of identifying information.\n\nLANGUAGE: shell\nCODE:\n```\n$  ./lnd --tor.active --tor.v3 --listen=localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Proto File References in .NET Project File\nDESCRIPTION: XML configuration to add the lightning.proto file to the .csproj project file to enable gRPC code generation.\n\nLANGUAGE: XML\nCODE:\n```\n<ItemGroup>\n   <Protobuf Include=\"Grpc\\lightning.proto\" GrpcServices=\"Client\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Listing wallet accounts in LND using lncli\nDESCRIPTION: Demonstrates how to retrieve details of wallet accounts using the lncli wallet accounts list command, showing the default BIP-0049 and BIP-0084 accounts with their extended public keys, address types, derivation paths, and other properties.\n\nLANGUAGE: shell\nCODE:\n```\n$ lncli wallet accounts list\n{\n    \"accounts\": [\n        {\n            \"name\": \"default\",\n            \"address_type\": \"HYBRID_NESTED_WITNESS_PUBKEY_HASH\",\n            \"extended_public_key\": \"upub5EbJZz2tYCpPFgDAMDnXpTeLs5EMNJAfyzRKQuUiTugSaJDjnDdk9vNcENzpw1FnxkerNW7jLuBeoxmcGMtopGExmaWqrMB7wRgU8tExTMz\",\n            \"master_key_fingerprint\": null,\n            \"derivation_path\": \"m/49'/0'/0'\",\n            \"external_key_count\": 0,\n            \"internal_key_count\": 0,\n            \"watch_only\": false\n        },\n        {\n            \"name\": \"default\",\n            \"address_type\": \"WITNESS_PUBKEY_HASH\",\n            \"extended_public_key\": \"vpub5Z9beF6NYCrHeDmKC38tM3xXMDFFSARa9sdHRPChEMGqtxiELfZB8hm6FwBpBvfPpX2HGG8edYVV9Wupe43PEJJhhfnz1egtQNNaDXyYExn\",\n            \"master_key_fingerprint\": null,\n            \"derivation_path\": \"m/84'/0'/0'\",\n            \"external_key_count\": 0,\n            \"internal_key_count\": 0,\n            \"watch_only\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: lntest Package Architecture Diagram\nDESCRIPTION: ASCII diagram showing the architecture of lntest package with its four major components: HarnessTest, HarnessMiner, HarnessNode, and HarnessRPC. The diagram illustrates their hierarchical relationships.\n\nLANGUAGE: text\nCODE:\n```\n+----------------------------------------------------------+\n|                                                          |\n|                        HarnessTest                       |\n|                                                          |\n| +----------------+  +----------------+  +--------------+ |\n| |   HarnessNode  |  |   HarnessNode  |  | HarnessMiner | |\n| |                |  |                |  +--------------+ |\n| | +------------+ |  | +------------+ |                   |\n| | | HarnessRPC | |  | | HarnessRPC | |  +--------------+ |\n| | +------------+ |  | +------------+ |  | HarnessMiner | |\n| +----------------+  +----------------+  +--------------+ |\n+----------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Bitcoind Backend Configuration Options\nDESCRIPTION: Available configuration options when using bitcoind as the backend for lnd. These parameters control the connection to a bitcoind node, including directory location, RPC credentials, ZMQ notification addresses, and fee estimation mode.\n\nLANGUAGE: text\nCODE:\n```\nbitcoind:\n      --bitcoind.dir=                                         The base directory that contains the node's data, logs, configuration file, etc. (default: /Users/<username>/Library/Application Support/Bitcoin)\n      --bitcoind.rpchost=                                     The daemon's rpc listening address. If a port is omitted, then the default port for the selected chain parameters will be used. (default: localhost)\n      --bitcoind.rpcuser=                                     Username for RPC connections\n      --bitcoind.rpcpass=                                     Password for RPC connections\n      --bitcoind.zmqpubrawblock=                              The address listening for ZMQ connections to deliver raw block notifications\n      --bitcoind.zmqpubrawtx=                                 The address listening for ZMQ connections to deliver raw transaction notifications\n      --bitcoind.estimatemode=                                The fee estimate mode. Must be either \"ECONOMICAL\" or \"CONSERVATIVE\". (default: CONSERVATIVE)\n```\n\n----------------------------------------\n\nTITLE: Signing a PSBT with bitcoind\nDESCRIPTION: Uses walletprocesspsbt command to sign a PSBT with the keys available in the bitcoind wallet. In a real-world scenario, this step might be performed on a hardware wallet.\n\nLANGUAGE: shell\nCODE:\n```\nbitcoin-cli walletprocesspsbt cHNidP8BAH0CAAAAAbxLLf9+AYfqfF69QAQuETnL6cas7GDiWBZF+3xxc/Y/AAAAAAD+////AofWEgAAAAAAIgAgvGKLsRKUcp0qk/lkYWpzGJQi51RkG5J51NwHb6B6Hh+1If0jAQAAABYAFL+6THEGhybJnOkFGSRFbtCcPOG8AAAAAAABAR8wBBAkAQAAABYAFHemJ11XF7CU7WXBIJLD/qZF+6jrAAAA\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Additional Arguments\nDESCRIPTION: Examples showing how to run tests with additional arguments like timeout, database backend, and chain backend configurations. These commands demonstrate using different backends and settings for test execution.\n\nLANGUAGE: shell\nCODE:\n```\n# Run a single test case using bitcoind as the chain backend and etcd as the\n# database backend, with a timeout of 5 minutes.\nmake itest icase=list_channels backend=bitcoind dbbackend=etcd timeout=5m\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Run all test cases in parallel, using bitcoind notxindex as the chain backend\n# and etcd as the database backend, with a timeout of 60 minutes for each\n# parallel.\nmake itest-parallel backend=\"bitcoind notxindex\" dbbackend=etcd timeout=60m\n```\n\n----------------------------------------\n\nTITLE: Neutrino Backend Configuration Options\nDESCRIPTION: Available configuration options when using Neutrino as the light client backend for lnd. These parameters control peer connections, banning behavior, and user agent information.\n\nLANGUAGE: text\nCODE:\n```\nneutrino:\n  -a, --neutrino.addpeer=                                     Add a peer to connect with at startup\n      --neutrino.connect=                                     Connect only to the specified peers at startup\n      --neutrino.maxpeers=                                    Max number of inbound and outbound peers\n      --neutrino.banduration=                                 How long to ban misbehaving peers.  Valid time units are {s, m, h}.  Minimum 1 second\n      --neutrino.banthreshold=                                Maximum allowed ban score before disconnecting and banning misbehaving peers.\n      --neutrino.useragentname=                               Used to help identify ourselves to other bitcoin peers.\n      --neutrino.useragentversion=                            Used to help identify ourselves to other bitcoin peers.\n```\n\n----------------------------------------\n\nTITLE: Viewing the LND Cipher Seed Format\nDESCRIPTION: Example of the 24-word cipher seed format used by lnd that must be saved to recover funds. This seed format is a ciphertext that differs from standard BIP39 seeds, though it uses the same English wordlist.\n\nLANGUAGE: text\nCODE:\n```\n!!!YOU MUST WRITE DOWN THIS SEED TO BE ABLE TO RESTORE THE WALLET!!!\n\n---------------BEGIN LND CIPHER SEED---------------\n 1. ability   2. noise   3. lift     4. document\n 5. certain   6. month   7. shoot    8. perfect\n 9. matrix   10. mango  11. excess  12. turkey\n13. river    14. pitch  15. fluid   16. rack\n17. drill    18. text   19. buddy   20. pool\n21. soul     22. fatal  23. ship    24. jelly\n---------------END LND CIPHER SEED-----------------\n\n!!!YOU MUST WRITE DOWN THIS SEED TO BE ABLE TO RESTORE THE WALLET!!!\n```\n\n----------------------------------------\n\nTITLE: Visualizing RBF Co-op Close State Machine with Mermaid\nDESCRIPTION: A mermaid diagram illustrating the state transitions in the cooperative closing process, from active channel to final closure. It shows how nodes negotiate closing transactions, handle protocol violations, and implement Replace-By-Fee (RBF) for fee adjustments while waiting for on-chain confirmation.\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Co-Op Close V2\n---\nstateDiagram-v2\n    state CoopCloseV2 {\n    [*] --> ChannelActive\n    ChannelActive --> ShutdownPending: send_shutdown\n    ChannelActive --> ShutdownPending: shutdown_received\n    ShutdownPending --> ChannelFlushing: shutdown_received\n    ShutdownPending --> ChannelFlushing: shutdown_complete\n    \n    ChannelFlushing --> ClosingNegotiation: channel_flushed\n    \n    state ClosingNegotiation {\n        \n        state LocalSide {\n            [*] --> LocalCloseStart\n            LocalCloseStart --> LocalOfferSent: send_offer\n            LocalOfferSent --> ClosePending: local_sig_received\n        }\n        \n        state RemoteSide {\n            [*] --> RemoteCloseStart\n            RemoteCloseStart --> ClosePending: offer_received\n        }\n        \n        CloseErr --> LocalCloseStart: send_offer_rbf\n        CloseErr --> RemoteCloseStart: offer_received_rbf\n        LocalCloseStart --> CloseErr: protocol_violation\n        RemoteCloseStart --> CloseErr: protocol_violation\n        \n        ClosePending --> LocalCloseStart: send_offer_rbf\n        ClosePending --> RemoteCloseStart: offer_received_rbf\n    }\n    \n    ClosingNegotiation --> CloseFin: txn_confirmation\n    }\n```\n\n----------------------------------------\n\nTITLE: Connecting Alice to Faucet Node in Lightning Network\nDESCRIPTION: Commands to run the Alice container and connect it to the Faucet lightning node using lncli. This establishes the connection needed to create payment channels.\n\nLANGUAGE: shell\nCODE:\n```\n# Run \"Alice\" container and log into it:\n$  docker-compose run -d --name alice lnd_btc; docker exec -i -t \"alice\" bash\n\n# Connect \"Alice\" to the \"Faucet\" node:\nalice $  lncli --network=testnet connect <faucet_identity_address>@<faucet_host>\n```\n\n----------------------------------------\n\nTITLE: Using Macaroons with Individual gRPC Requests in Python\nDESCRIPTION: Simple approach to include macaroon authentication in each gRPC request to lnd.\n\nLANGUAGE: python\nCODE:\n```\nstub.GetInfo(ln.GetInfoRequest(), metadata=[('macaroon', macaroon)])\n```\n\n----------------------------------------\n\nTITLE: Installing the chainntnfs package via Go\nDESCRIPTION: Command to install or update the chainntnfs package using Go's package manager. This fetches the latest version from the lightningnetwork/lnd GitHub repository.\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/lightningnetwork/lnd/chainntnfs\n```\n\n----------------------------------------\n\nTITLE: Running a Single Integration Test Using Make\nDESCRIPTION: Command to run a specific test case using the make itest command with the icase parameter. This example shows how to run the testListChannels test case.\n\nLANGUAGE: shell\nCODE:\n```\n# Run `testListChannels`.\nmake itest icase=list_channels\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific lnd Release Version\nDESCRIPTION: Commands to install a specific tagged release version of lnd instead of the master branch. This allows installing a stable, released version rather than the potentially unstable master branch.\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/lightningnetwork/lnd\ncd lnd\ngit checkout v0.x.x\nmake install\n```\n\n----------------------------------------\n\nTITLE: Installing Go for Linux x86-64\nDESCRIPTION: Commands to download, verify, and install Go 1.23.6 on Linux x86-64 systems, including SHA256 checksum verification for security.\n\nLANGUAGE: shell\nCODE:\n```\nwget https://dl.google.com/go/go1.23.6.linux-amd64.tar.gz\nsha256sum go1.23.6.linux-amd64.tar.gz | awk -F \" \" '{ print $1 }'\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.23.6.linux-amd64.tar.gz\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n----------------------------------------\n\nTITLE: Adding a Test Case Example in Go\nDESCRIPTION: Shows how to add a new test case to the integration test suite by creating a TestFunc and adding it to list_on_test.go. The example demonstrates adding a test for lnd's channel backup export functionality.\n\nLANGUAGE: go\nCODE:\n```\n{\n\t\tName:     \"export channel backup\",\n\t\tTestFunc: testExportChannelBackup,\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tor Configuration File Example\nDESCRIPTION: Sample torrc configuration file with essential settings for use with lnd, including SOCKS port, logging, control port, and cookie authentication.\n\nLANGUAGE: text\nCODE:\n```\nSOCKSPort 9050\nLog notice stdout\nControlPort 9051\nCookieAuthentication 1\n```\n\n----------------------------------------\n\nTITLE: Installing and updating the lnwallet package with Go\nDESCRIPTION: Command to install or update the lnwallet package using Go's package manager. This downloads the latest version of the package from the Lightning Network's GitHub repository.\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/lightningnetwork/lnd/lnwallet\n```\n\n----------------------------------------\n\nTITLE: Reading Macaroon Authentication Data\nDESCRIPTION: Ruby code snippet for reading and formatting an lnd macaroon authentication token for use in gRPC requests.\n\nLANGUAGE: ruby\nCODE:\n```\n# Lnd admin macaroon is at ~/.lnd/data/chain/bitcoin/simnet/admin.macaroon on Linux and\n# ~/Library/Application Support/Lnd/data/chain/bitcoin/simnet/admin.macaroon on Mac\nmacaroon_binary = File.read(File.expand_path(\"~/.lnd/data/chain/bitcoin/simnet/admin.macaroon\"))\nmacaroon = macaroon_binary.each_byte.map { |b| b.to_s(16).rjust(2,'0') }.join\n```\n\n----------------------------------------\n\nTITLE: Benchmarking aezeed Cipher Seed Operations in Go\nDESCRIPTION: Benchmark results showing the performance of aezeed operations (converting to and from mnemonic format) with modern scrypt parameters (n=32768, r=8, p=1), which takes about 100ms per attempt on the author's laptop.\n\nLANGUAGE: shell\nCODE:\n```\n$  go test -run=XXX -bench=.\n\ngoos: linux\ngoarch: amd64\npkg: github.com/lightningnetwork/lnd/aezeed\nBenchmarkTomnemonic-4                 20          93280730 ns/op        33559670 B/op         36 allocs/op\nBenchmarkToCipherSeed-4               10         102323892 ns/op        36915684 B/op         41 allocs/op\nPASS\nok      github.com/lightningnetwork/lnd/aezeed  4.168s\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Public Keys (xpubs) for LND Testnet Accounts\nDESCRIPTION: This code snippet shows the structure for configuring extended public keys for LND in a testnet environment. Each object contains the extended public key, purpose code (1017), coin type (1 for testnet), and sequential account numbers. These are used for hierarchical deterministic wallet derivation in the Lightning Network.\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'xpub': 'tpubDDXFHr67Ro2wWBKDJWj8Ae1RbuZRzFAGfqt3oFMeK7rUz4BTT1FbgTTMidC2cWmPMtapyaWL2jXtjic9wU9RS1g7Fb4U8Uz1o27istfGFFC',\n    purpose: 1017,\n    coin_type: 1,\n    account: 74\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Release Manifests with diff Command in Bash\nDESCRIPTION: A command to compare locally generated manifest files with official release manifests to ensure hash consistency before signing. This verification step is critical to confirm that the binary hashes match exactly.\n\nLANGUAGE: bash\nCODE:\n```\ndiff lnd-v0.18.3-beta/manifest-v0.18.3-beta.txt ~/Downloads/manifest-v0.18.3-beta.txt\n```\n\n----------------------------------------\n\nTITLE: Verifying Signed Git Commits\nDESCRIPTION: Command to display commit history with signature information, allowing verification that commits have been properly signed with GPG.\n\nLANGUAGE: shell\nCODE:\n```\ngit log --show-signature\n```\n\n----------------------------------------\n\nTITLE: Running Individual Fuzz Test Manually\nDESCRIPTION: Commands to change directory and run a specific fuzz test with custom parameters. This demonstrates how to execute a single fuzz test for a specific component.\n\nLANGUAGE: shell\nCODE:\n```\ncd lnwire\ngo test -fuzz=FuzzAcceptChannel -fuzztime=1m -parallel=4\n```\n\n----------------------------------------\n\nTITLE: Using lncli wallet accounts command in LND\nDESCRIPTION: Shows the usage of the lncli wallet accounts command which allows users to interact with wallet accounts, including listing accounts, importing accounts through extended public keys, and importing public keys as watch-only.\n\nLANGUAGE: shell\nCODE:\n```\n$ lncli wallet accounts\nNAME:\n   lncli wallet accounts - Interact with wallet accounts.\n\nUSAGE:\n   lncli wallet accounts command [command options] [arguments...]\n\nCOMMANDS:\n     list           Retrieve information of existing on-chain wallet accounts.\n     import         Import an on-chain account into the wallet through its extended public key.\n     import-pubkey  Import a public key as watch-only into the wallet.\n\nOPTIONS:\n   --help, -h  show help\n```\n\n----------------------------------------\n\nTITLE: Installing and Updating the channeldb Package with Go\nDESCRIPTION: Command to install or update the channeldb package using Go's package manager. The -u flag ensures the latest version is installed.\n\nLANGUAGE: shell\nCODE:\n```\n$  go get -u github.com/lightningnetwork/lnd/channeldb\n```\n\n----------------------------------------\n\nTITLE: Creating a New lnd Wallet with Command Line Interface\nDESCRIPTION: The command to create a new wallet in lnd. This prompts for a wallet password and optionally a cipher seed passphrase, then generates a 24-word mnemonic for wallet recovery.\n\nLANGUAGE: shell\nCODE:\n```\nlncli create\n```\n\n----------------------------------------\n\nTITLE: Baking URI-Specific Macaroon\nDESCRIPTION: Shell command showing how to create a macaroon with access to specific RPC methods only, allowing for fine-grained permission control.\n\nLANGUAGE: shell\nCODE:\n```\n$  lncli bakemacaroon uri:/lnrpc.Lightning/GetInfo uri:/verrpc.Versioner/GetVersion\n```\n\n----------------------------------------\n\nTITLE: Registering Sequential Consumers in Go\nDESCRIPTION: Example showing how to register consumers to be notified sequentially by placing them in the same queue. Consumers will receive block updates in the specified order.\n\nLANGUAGE: go\nCODE:\n```\n// consumers will be notified sequentially via,\n// consumer1 -> consumer2 -> consumer3\nqueue := []chainio.Consumer{\n   consumer1,\n   consumer2,\n   consumer3,\n}\nblockbeatDispatcher.RegisterQueue(queue)\n```\n\n----------------------------------------\n\nTITLE: Crafting PSBT for an Imported Account\nDESCRIPTION: Creates a Partially Signed Bitcoin Transaction (PSBT) for an imported watch-only account, specifying outputs and fee rate. This PSBT will need to be signed by the account owner.\n\nLANGUAGE: shell\nCODE:\n```\n$ lncli-bob wallet psbt fund --account=alice --outputs=\"{\\\"bcrt1qpjqr663tylcksysa4u76xvremee9k8af3pqd5h\\\": 500000}\" --sat_per_vbyte=1\n```\n\n----------------------------------------\n\nTITLE: Installing btcd for lnd\nDESCRIPTION: Command to install btcd, which is needed when using btcd as the backend for lnd. btcd version v0.23.5 or later is required to utilize the latest Taproot features.\n\nLANGUAGE: shell\nCODE:\n```\nmake btcd\n```\n\n----------------------------------------\n\nTITLE: Fee Limit Commands for LND Payment Operations\nDESCRIPTION: CLI commands showing how to set fee limits when making payments with LND. Users should set their own fee limits using these flags to avoid falling back to default values.\n\nLANGUAGE: markdown\nCODE:\n```\n--fee_limit or --fee_limit_percent\n```\n\n----------------------------------------\n\nTITLE: Checking btcd Sync Status\nDESCRIPTION: Command to check the sync status of btcd using the getinfo RPC command. This shows information about the node, including the current block height, connections, and testnet status.\n\nLANGUAGE: shell\nCODE:\n```\nbtcctl --testnet --rpcuser=REPLACEME --rpcpass=REPLACEME getinfo\n```\n\n----------------------------------------\n\nTITLE: Fetching Lightning Protocol Definition\nDESCRIPTION: Shell command to download the lightning.proto file from the lnd GitHub repository.\n\nLANGUAGE: shell\nCODE:\n```\ncurl -o lightning.proto -s https://raw.githubusercontent.com/lightningnetwork/lnd/master/lnrpc/lightning.proto\n```\n\n----------------------------------------\n\nTITLE: Example LND Configuration for SQLite Backend\nDESCRIPTION: A complete example showing how to configure LND to use the SQLite backend with specific timeout settings and pragma options including memory-based temporary storage and incremental vacuum for automatic compaction.\n\nLANGUAGE: bash\nCODE:\n```\n[db]\ndb.backend=sqlite\ndb.sqlite.timeout=0\ndb.sqlite.busytimeout=10s\ndb.sqlite.pragmaoptions=temp_store=memory\ndb.sqlite.pragmaoptions=incremental_vacuum\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Auto-Compaction in LND\nDESCRIPTION: Pragma options for enabling automatic compaction of the SQLite database on LND startup. This can be configured to vacuum the entire freelist or to limit the number of pages removed during compaction.\n\nLANGUAGE: sql\nCODE:\n```\n// Use N to restrict the maximum number of pages to be removed from the \n// freelist.\ndb.sqlite.pragmaoptions=incremental_vacuum(N) \n\n// Omit N if the entire freelist should be cleared.\ndb.sqlite.pragmaoptions=incremental_vacuum\n```\n\n----------------------------------------\n\nTITLE: Including AAR Module in Android Dependencies\nDESCRIPTION: Gradle dependency configuration to include the lndmobile module instead of referencing the libs folder directly.\n\nLANGUAGE: shell\nCODE:\n```\nimplementation project(\":lndmobile\", { \"default\" })\n```\n\n----------------------------------------\n\nTITLE: Creating and Paying an Invoice via Command Line\nDESCRIPTION: Shell commands to create an invoice using lncli and then pay it from another node, which would trigger the streaming client above.\n\nLANGUAGE: shell\nCODE:\n```\nlncli addinvoice --amt=590\n{\n\t\"r_hash\": <R_HASH>,\n\t\"pay_req\": <PAY_REQ>\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\nlncli sendpayment --pay_req=<PAY_REQ>\n```\n\n----------------------------------------\n\nTITLE: Sample aezeed Mnemonic\nDESCRIPTION: An example of a 24-word mnemonic representing an aezeed cipher seed. This encoded format is the result of the aezeed enciphering process and is used for wallet recovery.\n\nLANGUAGE: text\nCODE:\n```\nability dance scatter raw fly dentist bar nominee exhaust wine snap super cost case coconut ticket spread funny grain chimney aspect business quiz ginger\n```\n\n----------------------------------------\n\nTITLE: Running Database Migration Benchmark Test for Revocation Log Pruning\nDESCRIPTION: Command to run a benchmark test for the database migration that prunes old revocation logs. This helps users estimate the time needed for the migration when using the new db.prune-revocation flag.\n\nLANGUAGE: bash\nCODE:\n```\ncd ./channeldb/migration30\ngo test -bench=. -run=TestMigrateRevocationLogMemCap -benchtime=1000000x -timeout=10m -benchmem\n```\n\n----------------------------------------\n\nTITLE: PGP Key for Secure Communication in LND Project\nDESCRIPTION: This is the PGP key to be used when communicating sensitive security information to the LND team. The key should be used to encrypt vulnerability reports or other sensitive security-related communications sent to the security email address.\n\nLANGUAGE: text\nCODE:\n```\n91FE 464C D751 01DA 6B6B  AB60 555C 6465 E5BC B3AF\n```\n\n----------------------------------------\n\nTITLE: Signing Git Commits with gpg\nDESCRIPTION: Command for signing a git commit with the -S flag to ensure the integrity of contributions to the lnd project. The signature can be verified later using git log.\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"Commit message\" -S\n```\n\n----------------------------------------\n\nTITLE: Running All Integration Tests\nDESCRIPTION: Command to run all available integration tests by invoking make itest without any case specification.\n\nLANGUAGE: shell\nCODE:\n```\n# Run all test cases.\nmake itest\n```\n\n----------------------------------------\n\nTITLE: Enabling NAT Traversal in lnd via Command Line\nDESCRIPTION: Command to start lnd with NAT traversal enabled using the --nat flag. This allows lnd to automatically configure port forwarding on compatible routers.\n\nLANGUAGE: shell\nCODE:\n```\n$  lnd ... --nat\n```\n\n----------------------------------------\n\nTITLE: Decoding PSBT with bitcoin-cli to inspect transaction details\nDESCRIPTION: Using the bitcoin-cli command to decode the base64-encoded PSBT, showing the transaction details including inputs, outputs, fee, and other metadata. This helps verify the PSBT was constructed correctly with proper change output.\n\nLANGUAGE: shell\nCODE:\n```\nbitcoin-cli decodepsbt cHNidP8BAHECAAAAAeJQY2VLRtutKgQYFUajEKpjFfl0Uyrm6x23OumDpe/4AQAAAAD/////AkxREgEAAAAAFgAUv6pTgbKHN60CZ+RQn5yOuH6c2WiA8PoCAAAAABYAFJDbOFU0E6zFF/M+g/AKDyqI2iUaAAAAAAABAOsCAAAAAAEBbxqXgEf9DlzcqqNM610s5pL1X258ra6+KJ22etb7HAcBAAAAAAAAAAACACT0AAAAAAAiACC7U1W0iJGhQ6o7CexDh5k36V6v3256xpA9/xmB2BybTFZdDQQAAAAAFgAUKp2ThzhswyM2QHlyvmMB6tQB7V0CSDBFAiEA4Md8RIZYqFdUPsgDyomlzMJL9bJ6Ho23JGTihXtEelgCIAeNXRLyt88SOuuWFVn3IodCE4U5D6DojIHesRmikF28ASEDHYFzMEAxfmfq98eSSnZtUwb1w7mAtHG65y8qiRFNnIkAAAAAAQEfVl0NBAAAAAAWABQqnZOHOGzDIzZAeXK+YwHq1AHtXQEDBAEAAAAAAAA=\n```\n\n----------------------------------------\n\nTITLE: Including Protobuf Plugin in Android Gradle\nDESCRIPTION: Gradle configuration for adding the protobuf plugin to an Android project's build.gradle file.\n\nLANGUAGE: shell\nCODE:\n```\nclasspath \"com.google.protobuf:protobuf-gradle-plugin:0.8.17\"\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Version Properties in Maven\nDESCRIPTION: Defines the gRPC version to be used throughout the Maven project configuration using a property.\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <grpc.version>1.36.0</grpc.version>\n</properties>    \n```\n\n----------------------------------------\n\nTITLE: Checking Out Latest Release Tag in Shell\nDESCRIPTION: Command to checkout the latest tagged release version of lnd instead of using master branch for stability.\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout $(git describe --match \"v[0-9]*\" --abbrev=0)\n```\n\n----------------------------------------\n\nTITLE: Creating a Funding PSBT with bitcoind\nDESCRIPTION: Uses bitcoind's walletcreatefundedpsbt command to create a PSBT that sends funds to a Lightning Network channel address. The command creates a transaction with appropriate inputs, the channel output, and a change address.\n\nLANGUAGE: shell\nCODE:\n```\nbitcoin-cli walletcreatefundedpsbt [] '[{\"bcrt1qh33ghvgjj3ef625nl9jxz6nnrz2z9e65vsdey7w5msrklgr6rc0sv0s08q\":0.01234567}]'\n```\n\n----------------------------------------\n\nTITLE: Creating PSBT for First Lightning Channel with bitcoin-cli\nDESCRIPTION: Example command using bitcoin-cli to create a funded PSBT for the first Lightning Network channel with an output of 0.01 BTC to a specific address.\n\nLANGUAGE: shell\nCODE:\n```\n$  bitcoin-cli walletcreatefundedpsbt [] '[{\"tb1qywvazres587w9wyy8uw03q8j9ek6gc9crwx4jvhqcmew4xzsvqcq3jjdja\":0.01000000}]'\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing Go Mobile in Shell\nDESCRIPTION: Commands to install the Go mobile package and initialize it for mobile library development.\n\nLANGUAGE: shell\nCODE:\n```\ngo install golang.org/x/mobile/cmd/gomobile\ngomobile init\n```\n\n----------------------------------------\n\nTITLE: Starting btcd on Testnet\nDESCRIPTION: Command to start btcd on the Bitcoin testnet with RPC authentication credentials. This will create rpc.cert and default btcd.conf files.\n\nLANGUAGE: shell\nCODE:\n```\nbtcd --testnet --rpcuser=REPLACEME --rpcpass=REPLACEME\n```\n\n----------------------------------------\n\nTITLE: Setting Bitcoin Node to No Chain Backend for Remote Signing in LND\nDESCRIPTION: A configuration option to specify a mock chain backend that allows a wallet to be created with signing RPCs working without requiring chain data. This enables fully offline operation except for a gRPC connection from the watch-only node.\n\nLANGUAGE: markdown\nCODE:\n```\n--bitcoin.node=nochainbackend\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Permissions in Go\nDESCRIPTION: Code snippet defining the permissions for invoice.macaroon, which allows access to invoice-related operations, streaming RPCs, and address generation.\n\nLANGUAGE: go\nCODE:\n```\n// invoicePermissions is a slice of all the entities that allows a user\n// to only access calls that are related to invoices, so: streaming\n// RPCs, generating, and listening invoices.\ninvoicePermissions = []bakery.Op{\n\t{\n\t\tEntity: \"invoices\",\n\t\tAction: \"read\",\n\t},\n\t{\n\t\tEntity: \"invoices\",\n\t\tAction: \"write\",\n\t},\n\t{\n\t\tEntity: \"address\",\n\t\tAction: \"read\",\n\t},\n\t{\n\t\tEntity: \"address\",\n\t\tAction: \"write\",\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Python Reserved Words in lnd gRPC API Calls\nDESCRIPTION: Special example showing how to use Python's keyword arguments to handle reserved words like 'global' in lnd API calls.\n\nLANGUAGE: python\nCODE:\n```\nargs = {'global': True, 'base_fee_msat': 1000, 'fee_rate': 0.000001, 'time_lock_delta': 40}\nstub.UpdateChannelPolicy(ln.PolicyUpdateRequest(**args))\n```\n\n----------------------------------------\n\nTITLE: Initializing BeatConsumer in Go\nDESCRIPTION: Example showing how to initialize the BeatConsumer component, providing it with a quit channel and a name for the consumer.\n\nLANGUAGE: go\nCODE:\n```\n...\n// Mount the block consumer.\ntp.BeatConsumer = chainio.NewBeatConsumer(tp.quit, tp.Name())\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Ruby Dependencies\nDESCRIPTION: Commands to install the required Ruby gems for gRPC communication with lnd.\n\nLANGUAGE: shell\nCODE:\n```\ngem install grpc\ngem install grpc-tools\n```\n\n----------------------------------------\n\nTITLE: Creating MuSig2 Session with Taproot Script Root Commitment in Go\nDESCRIPTION: Initializes a MuSig2 session with a Taproot tweak that includes a script root hash commitment. This allows the output to be spent via either the key path or through the script path defined by the provided root hash.\n\nLANGUAGE: go\nCODE:\n```\ntaprootTweak := &signrpc.TaprootTweakDesc{\n    ScriptRoot: rootHash[:],\n}\n\nsessResp1, err := node.SignerClient.MuSig2CreateSession(\n\tctx, &signrpc.MuSig2SessionRequest{\n\t\tKeyLoc:           keyDesc1.KeyLoc,\n\t\tAllSignerPubkeys: allPubKeys,\n\t\tTaprootTweak:     taprootTweak,\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Modifiable HTLC Fields in HtlcInterceptor\nDESCRIPTION: Enhanced routerrpc.HtlcInterceptor to allow modification of HTLC values before validation by the state machine, specifically outgoing_amount_msat and outgoing_htlc_wire_custom_records fields.\n\nLANGUAGE: Markdown\nCODE:\n```\noutgoing_amount_msat\noutgoing_htlc_wire_custom_records\n```\n\n----------------------------------------\n\nTITLE: Running Flake Hunter for Integration Tests\nDESCRIPTION: Example of using the flakehunter-parallel command to repeatedly run specific integration tests to find flaky tests. This runs data_loss_protection and channel_backup tests with the neutrino backend.\n\nLANGUAGE: shell\nCODE:\n```\n$  make flakehunter-parallel icase='(data_loss_protection|channel_backup)' backend=neutrino\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for lnd gRPC Client\nDESCRIPTION: Lists all required dependencies for the Java gRPC client, including gRPC libraries, protocol buffers, and SSL support libraries.\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.grpc</groupId>\n        <artifactId>grpc-netty</artifactId>\n        <version>${grpc.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>io.grpc</groupId>\n        <artifactId>grpc-protobuf</artifactId>\n        <version>${grpc.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>io.grpc</groupId>\n        <artifactId>grpc-stub</artifactId>\n        <version>${grpc.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>io.netty</groupId>\n        <artifactId>netty-tcnative-boringssl-static</artifactId>\n        <version>2.0.28.Final</version>\n    </dependency>\n    <dependency>\n        <groupId>commons-codec</groupId>\n        <artifactId>commons-codec</artifactId>\n        <version>1.11</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Closing a Lightning Channel Between Alice and Bob\nDESCRIPTION: Demonstrates the process of closing a payment channel, identifying the channel point, and verifying the on-chain balances after settlement. This shows how funds are settled back to on-chain balances.\n\nLANGUAGE: shell\nCODE:\n```\n# List the \"Alice\" channel and retrieve \"channel_point\" which represents\n# the opened channel:\nalice $  lncli --network=simnet listchannels\n{\n    \"channels\": [\n        {\n            \"active\": true,\n            \"remote_pubkey\": \"0343bc80b914aebf8e50eb0b8e445fc79b9e6e8e5e018fa8c5f85c7d429c117b38\",\n       ---->\"channel_point\": \"3511ae8a52c97d957eaf65f828504e68d0991f0276adff94c6ba91c7f6cd4275:0\",\n            \"chan_id\": \"1337006139441152\",\n            \"capacity\": \"1005000\",\n            \"local_balance\": \"990000\",\n            \"remote_balance\": \"10000\",\n            \"commit_fee\": \"8688\",\n            \"commit_weight\": \"724\",\n            \"fee_per_kw\": \"12000\",\n            \"unsettled_balance\": \"0\",\n            \"total_satoshis_sent\": \"10000\",\n            \"total_satoshis_received\": \"0\",\n            \"num_updates\": \"2\",\n            \"pending_htlcs\": [\n            ],\n            \"csv_delay\": 4\n        }\n    ]\n}\n\n# Channel point consists of two numbers separated by a colon. The first one \n# is \"funding_txid\" and the second one is \"output_index\":\nalice $  lncli --network=simnet closechannel --funding_txid=<funding_txid> --output_index=<output_index>\n\n# Include close transaction in a block thereby closing the channel:\n$  docker exec -it btcd /start-btcctl.sh generate 3\n\n# Check \"Alice\" on-chain balance was credited by her settled amount in the channel:\nalice $  lncli --network=simnet walletbalance\n\n# Check \"Bob\" on-chain balance was credited with the funds he received in the\n# channel:\nbob $  lncli --network=simnet walletbalance\n{\n    \"total_balance\": \"10000\",\n    \"confirmed_balance\": \"10000\",\n    \"unconfirmed_balance\": \"0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Overridable SQLite Pragma Options in LND\nDESCRIPTION: These SQLite pragma options are set by default but can be overridden using the db.sqlite.pragmaoptions configuration. They control synchronization behavior, auto-vacuum settings, and fullfsync which is only meaningful on Mac systems.\n\nLANGUAGE: sql\nCODE:\n```\nsynchronous=full\nauto_vacuum=incremental\nfullfsync=true // Only meaningful on a Mac. \n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Build for Protocol Buffer Compilation\nDESCRIPTION: Sets up the Maven build configuration to compile protocol buffer files into Java classes, including the necessary plugins and extensions for cross-platform compatibility.\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <extensions>\n        <extension>\n            <groupId>kr.motd.maven</groupId>\n            <artifactId>os-maven-plugin</artifactId>\n            <version>1.6.2.Final</version>\n        </extension>\n    </extensions>\n    <plugins>\n        <plugin>\n            <groupId>org.xolstice.maven.plugins</groupId>\n            <artifactId>protobuf-maven-plugin</artifactId>\n            <version>0.6.1</version>\n            <configuration>\n                <protocArtifact>com.google.protobuf:protoc:3.12.0:exe:${os.detected.classifier}</protocArtifact>\n                <pluginId>grpc-java</pluginId>\n                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>\n            </configuration>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>compile</goal>\n                        <goal>compile-custom</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Testing btcd Node Connectivity\nDESCRIPTION: Command to test the connectivity of a btcd node by retrieving information about connected peers. This is useful to verify that the btcd node is properly connected to the Bitcoin network.\n\nLANGUAGE: shell\nCODE:\n```\nbtcctl --testnet --rpcuser=REPLACEME --rpcpass=REPLACEME getpeerinfo | more\n```\n\n----------------------------------------\n\nTITLE: Visualizing Lightning Network Cluster Topology with Text Diagram\nDESCRIPTION: A text diagram illustrating the relationship between Alice, Faucet, and Bob nodes in a lightning network setup, showing channel connections and the underlying Bitcoin network.\n\nLANGUAGE: text\nCODE:\n```\n+ ----- +                   + ------ +         (1)        + --- +\n| Alice | <--- channel ---> | Faucet |  <--- channel ---> | Bob |    \n+ ----- +                   + ------ +                    + --- +        \n    |                            |                           |           \n    |                            |                           |      <---  (2)         \n    + - - - -  - - - - - - - - - + - - - - - - - - - - - - - +            \n                                 |\n                       + --------------- +\n                       | Bitcoin network |  <---  (3)   \n                       + --------------- +        \n        \n        \n (1) You may connect an additional node \"Bob\" and make the multihop\n payment Alice->Faucet->Bob\n  \n (2) \"Faucet\", \"Alice\" and \"Bob\" are the lightning network daemons which \n create channels to interact with each other using the Bitcoin network \n as source of truth.\n \n (3) In current scenario \"Alice\" and \"Faucet\" lightning network nodes \n connect to different Bitcoin nodes. If you decide to connect \"Bob\"\n to \"Faucet\" then the already created \"btcd\" node would be sufficient.\n```\n\n----------------------------------------\n\nTITLE: Anonymizing Chain-Related Error Messages in lnd Logs\nDESCRIPTION: Regular expressions to anonymize blockchain-related error messages by replacing height values and other sensitive data with generic placeholders.\n\nLANGUAGE: regex\nCODE:\n```\ns/Unable to rewind chain from height [[:digit:]]+ to height -?[[:digit:]]+/Unable to rewind chain from height <height> to height <height>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/NTFN: unable to get missed blocks: starting height [[:digit:]]+ is greater than ending height [[:digit:]]+/NTFN: unable to get missed blocks: starting height <height> is greater than ending height <height>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/BTCN: Broadcast attempt failed: rejected by <ip>: replacement transaction <hex> has an insufficient fee rate: needs more than [[:digit:]]+, has [[:digit:]]+/BTCN: Broadcast attempt failed: rejected by <ip>: replacement transaction <hex> has an insufficient fee rate: needs more than <amt>, has <amt>/g\n```\n\n----------------------------------------\n\nTITLE: Configuring LND with etcd Backend and Leader Election\nDESCRIPTION: Complete command line configuration for running LND with etcd as the database backend and leader election enabled. Includes database connection parameters, TLS certificate paths, and cluster identification settings.\n\nLANGUAGE: shell\nCODE:\n```\n./lnd-debug \\\n    --db.backend=etcd \\\n    --db.etcd.host=127.0.0.1:2379 \\\n    --db.etcd.certfile=/home/user/etcd/bin/default.etcd/fixtures/client/cert.pem \\\n    --db.etcd.keyfile=/home/user/etcd/bin/default.etcd/fixtures/client/key.pem \\\n    --db.etcd.insecure_skip_verify \\\n    --cluster.enable-leader-election \\\n    --cluster.leader-elector=etcd \\\n    --cluster.etcd-election-prefix=cluster-leader \\\n    --cluster.id=lnd-1\n```\n\n----------------------------------------\n\nTITLE: Anonymizing Channel References and Amounts in lnd Logs\nDESCRIPTION: Regular expressions to sanitize channel references and monetary amounts in various formats, replacing them with generic placeholders.\n\nLANGUAGE: regex\nCODE:\n```\ns/[[:digit:]]+\\:[[:digit:]]+\\:[[:digit:]]+/<chan>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/[[:digit:]]+ mSAT/<amt>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/\\-?[[:digit:]]+(\\.[[\\:digit:]]{0,8})? BTC/<amt>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/([fee|minimum])=[[:digit:]]+/\\1=<amt>/g\n```\n\n----------------------------------------\n\nTITLE: Illustrating Network Architecture for Remote Signing Setup in lnd\nDESCRIPTION: ASCII diagram showing the network architecture of a remote signing setup with a watch-only lnd node connected to the Lightning Network and a full seed lnd node in a firewalled/offline network zone.\n\nLANGUAGE: text\nCODE:\n```\n         xxxxxxxxx\n  xxxxxxxxx      xxxx\nxxx                 xx\nx   LN p2p network  xx\nx                   x\nxxx               xx\n   xxxxx   xxxxxxxx\n        xxx\n          ^                       +----------------------------------+\n          | p2p traffic           | firewalled/offline network zone  |\n          |                       |                                  |\n          v                       |                                  |\n  +----------------+     gRPC     |   +----------------+             |\n  | watch-only lnd +--------------+-->| full seed lnd  |             |\n  +-------+--------+              |   +----------------+             |\n          |                       |                                  |\n  +-------v--------+              +----------------------------------+\n  | bitcoind/btcd  |  \n  +----------------+ \n```\n\n----------------------------------------\n\nTITLE: External Fee Estimation API JSON Response Format\nDESCRIPTION: New JSON format for external fee estimation API which now includes min_relay_feerate field. All fee rates are in sats/kvB.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"fee_by_block_target\": {\n        \"2\": 5076,\n        \"3\": 4228,\n        \"26\": 4200\n    },\n    \"min_relay_feerate\": 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymizing Network Addresses and Timestamps in lnd Logs\nDESCRIPTION: Regular expressions to replace IP addresses and different timestamp formats with generic placeholders for privacy protection.\n\nLANGUAGE: regex\nCODE:\n```\ns/[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\\:[[:digit:]]+/<ip>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2} [[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}\\.[[:digit:]]{3}/<time>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}T[[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}\\.[[:digit:]]{1,18}Z/<time>/g\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Readiness Probe for LND Leader Detection\nDESCRIPTION: Kubernetes configuration snippet for a readiness probe that detects when an LND node is the active leader. The probe uses the LND state API to check if the node is in an active state rather than waiting to start.\n\nLANGUAGE: shell\nCODE:\n```\nreadinessProbe:\n    exec:\n      command: [\n        \"/bin/sh\",\n        \"-c\",\n        \"set -e; set -o pipefail; curl -s -k -o - https://localhost:8080/v1/state | jq .'State' | grep -E 'NON_EXISTING|LOCKED|UNLOCKED|RPC_ACTIVE|SERVER_ACTIVE'\",\n      ]\n    periodSeconds: 1\n```\n\n----------------------------------------\n\nTITLE: Anonymizing Connection and Process IDs in lnd Logs\nDESCRIPTION: Regular expressions to replace process IDs and connection IDs with generic placeholders for enhanced privacy in logs.\n\nLANGUAGE: regex\nCODE:\n```\ns/pid=[[:digit:]]+/pid=<pid>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/connid=[[:digit:]]+/connid=<id>/g\n```\n\n----------------------------------------\n\nTITLE: Listing Macaroon Root Key IDs\nDESCRIPTION: Shell command to list all macaroon root key IDs that are currently in use in the system.\n\nLANGUAGE: shell\nCODE:\n```\n$  lncli listmacaroonids\n```\n\n----------------------------------------\n\nTITLE: Building LND Release on Linux/Windows (WSL)\nDESCRIPTION: Commands to clone the LND repository, checkout a specific release tag, and build the release binaries on Linux or Windows Subsystem for Linux (WSL). No prior setup is needed on Linux or macOS.\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/lightningnetwork/lnd.git\ncd lnd\ngit checkout <TAG> # <TAG> is the name of the next release/tag\nmake release tag=<TAG>\n```\n\n----------------------------------------\n\nTITLE: Decoding a PSBT with bitcoind\nDESCRIPTION: Uses the decodepsbt command to inspect the contents of a PSBT. This reveals the transaction structure including inputs, outputs, and fee calculations before signing.\n\nLANGUAGE: shell\nCODE:\n```\nbitcoin-cli decodepsbt cHNidP8BAH0CAAAAAbxLLf9+AYfqfF69QAQuETnL6cas7GDiWBZF+3xxc/Y/AAAAAAD+////AofWEgAAAAAAIgAgvGKLsRKUcp0qk/lkYWpzGJQi51RkG5J51NwHb6B6Hh+1If0jAQAAABYAFL+6THEGhybJnOkFGSRFbtCcPOG8AAAAAAABAR8wBBAkAQAAABYAFHemJ11XF7CU7WXBIJLD/qZF+6jrAAAA\n```\n\n----------------------------------------\n\nTITLE: Anonymizing Transaction and Block-Related Messages in lnd Logs\nDESCRIPTION: Regular expressions to anonymize transaction fee information and block-related messages by replacing specific values with generic placeholders.\n\nLANGUAGE: regex\nCODE:\n```\ns/replacement transaction <hex> has an insufficient absolute fee: needs [[:digit:]]+, has [[:digit:]]+/replacement transaction <hex> has an insufficient absolute fee: needs <amt>, has <amt>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/Rescan for [[:digit:]]+ addresses/Rescan for <num> addresses/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/unable to get hash from block with height [[:digit:]]+/unable to get hash from block with height <height>/g\n```\n\n----------------------------------------\n\nTITLE: Signing LND Release Manifest File\nDESCRIPTION: Command for developers to sign the manifest file of an LND release. This creates a detached signature that can be verified by the verification script, with the filename formatted according to the developer's username and release tag.\n\nLANGUAGE: shell\nCODE:\n```\ngpg --detach-sig --output manifest-USERNAME-TAG.sig manifest-TAG.txt\n```\n\n----------------------------------------\n\nTITLE: Anonymizing Channel Points and IDs in lnd Logs\nDESCRIPTION: Regular expressions to replace channel points, IDs, and hexadecimal identifiers with placeholders for anonymization in logs.\n\nLANGUAGE: regex\nCODE:\n```\ns/[0-9a-f]{64}\\:[[:digit:]]+/<chan_point>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/short_chan_id=[[:digit:]]+/short_chan_id=<cid>/g\n```\n\nLANGUAGE: regex\nCODE:\n```\ns/[0-9a-f]{16,}/<hex>/g\n```\n\n----------------------------------------\n\nTITLE: Building LND with etcd Support using Make\nDESCRIPTION: Command to compile LND with etcd database backend support by using the kvdb_etcd tag during the build process.\n\nLANGUAGE: shell\nCODE:\n```\nmake tags=\"kvdb_etcd\"\n```\n\n----------------------------------------\n\nTITLE: Buggy Fee Rate Calculation in Alloy\nDESCRIPTION: This code snippet shows the buggy version of the fee rate calculation where an off-by-one error occurs. When position is equal to width (rather than width-1), the function should return the ending fee rate.\n\nLANGUAGE: alloy\nCODE:\n```\np >= f.width => f.endingFeeRate // -- NOTE: Uncomment this to re-introduce the original bug.\n```\n\n----------------------------------------\n\nTITLE: Package Description in Markdown\nDESCRIPTION: A simple markdown description of the lnutils package, explaining its purpose as a fundamental utility package for the lnd project.\n\nLANGUAGE: markdown\nCODE:\n```\n# `lnutils`\n\nThis package provides fundamental types and utility functions that can be used\nby all other packages.\n```\n\n----------------------------------------\n\nTITLE: Checking Make Version in Shell\nDESCRIPTION: Command to verify make is installed by displaying its version information.\n\nLANGUAGE: shell\nCODE:\n```\nmake --version\n```\n\n----------------------------------------\n\nTITLE: Installing Tor Package for LND using Go\nDESCRIPTION: Command to install or update the tor package for LND using Go's package management. This fetches the latest version from the Lightning Network Daemon GitHub repository.\n\nLANGUAGE: shell\nCODE:\n```\n$  go get -u github.com/lightningnetwork/lnd/tor\n```"
  }
]