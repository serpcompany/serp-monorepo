[
  {
    "owner": "tanstack",
    "repo": "ranger",
    "content": "TITLE: Initializing TanStack Ranger with React\nDESCRIPTION: This code snippet demonstrates the basic setup of TanStack Ranger within a React component. It utilizes the `useRanger` hook to manage the slider's state and behavior, including setting minimum and maximum values, step size, and handling value changes. It also shows how to render the slider and its handles using React components.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/quick-start.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { useRanger, Ranger } from '@tanstack/react-ranger'\n\nfunction App() {\n  const rangerRef = React.useRef<HTMLDivElement>(null)\n  const [values, setValues] = React.useState<ReadonlyArray<number>>([\n    10, 15, 50,\n  ])\n\n  const rangerInstance = useRanger<HTMLDivElement>({ getRangerElement: () => rangerRef.current, values, min: 0, max: 100, stepSize: 5, onChange: (instance: Ranger<HTMLDivElement>) =>\n      setValues(instance.sortedValues),\n  })\n\n  return (\n    <div className=\"App\" style={{ padding: 10 }}>\n      <h1>Basic Range</h1>\n      <span>Active Index: {rangerInstance.activeHandleIndex}</span>\n      <br />\n      <br />\n      <div\n        ref={rangerRef}\n        style={{\n          position: 'relative',\n          userSelect: 'none',\n          height: '4px',\n          background: '#ddd',\n          boxShadow: 'inset 0 1px 2px rgba(0,0,0,.6)',\n          borderRadius: '2px',\n        }}\n      >\n        {rangerInstance\n          .handles()\n          .map(\n            (\n              {\n                value,\n                onKeyDownHandler,\n                onMouseDownHandler,\n                onTouchStart,\n                isActive,\n              },\n              i,\n            ) => (\n              <button\n                key={i}\n                onKeyDown={onKeyDownHandler}\n                onMouseDown={onMouseDownHandler}\n                onTouchStart={onTouchStart}\n                role=\"slider\"\n                aria-valuemin={rangerInstance.options.min}\n                aria-valuemax={rangerInstance.options.max}\n                aria-valuenow={value}\n                style={{\n                  position: 'absolute',\n                  top: '50%',\n                  left: `${rangerInstance.getPercentageForValue(value)}%`,\n                  zIndex: isActive ? '1' : '0',\n                  transform: 'translate(-50%, -50%)',\n                  width: '14px',\n                  height: '14px',\n                  outline: 'none',\n                  borderRadius: '100%',\n                  background: 'linear-gradient(to bottom, #eee 45%, #ddd 55%)',\n                  border: 'solid 1px #888',\n                }}\n              />\n            ),\n          )}\n      </div>\n      <br />\n      <br />\n      <br />\n      <pre\n        style={{\n          display: 'inline-block',\n          textAlign: 'left',\n        }}\n      >\n        <code>\n          {JSON.stringify({\n            values,\n          })}\n        </code>\n      </pre>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n```\n\n----------------------------------------\n\nTITLE: Interpolator Interface in react-ranger (TSX)\nDESCRIPTION: Defines the interface for a custom interpolator used in `react-ranger`. It includes two methods: `getPercentageForValue` to calculate the percentage of a value within a range, and `getValueForClientX` to transform a pixel coordinate back into a value based on the track dimensions and range settings.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/logarithmic-interpolator.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ninterpolator: {\n    getPercentageForValue: (val: number, min: number, max: number): number;\n    getValueForClientX: (clientX: number, trackDims: object, min: number, max: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Ticks Function in TSX\nDESCRIPTION: Defines a function `getTicks` that returns a readonly array of tick objects. Each tick object contains a value, a key, and a percentage representing its position on the Ranger component. This is used for rendering custom ticks.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/custom-steps.md#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\ngetTicks: () => ReadonlyArray<{value: number; key: number; percentage: number}>\n```\n\n----------------------------------------\n\nTITLE: Define Custom Steps Array in TypeScript\nDESCRIPTION: Defines an array of numbers to be used as custom steps for the Ranger component. This overrides the default `stepSize` configuration option, allowing for granular control over step values.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/custom-steps.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nsteps: Array<number>\n```\n\n----------------------------------------\n\nTITLE: Get Segments API Definition in TypeScript\nDESCRIPTION: This snippet defines the `getSegments` function, which returns a readonly array of segment objects. Each segment object defines the `left` and `width` properties as numbers, representing percentage values for the segment's position and size within the Ranger component. The `ReadonlyArray` ensures the returned array cannot be mutated.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/custom-styles.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetSegments: () => ReadonlyArray<{left: number; width: number}>\n```\n\n----------------------------------------\n\nTITLE: Define Custom Ticks Array in TypeScript\nDESCRIPTION: Defines an array of numbers to be used as custom ticks for the Ranger component. This overrides the default `tickSize` configuration option, allowing for precise placement of ticks.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/custom-steps.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nticks: Array<number>\n```\n\n----------------------------------------\n\nTITLE: Values Type Definition\nDESCRIPTION: Defines the type for the `values` property, which is a read-only array of numbers representing the current value(s) of the range. This property is required for the Ranger component to function correctly.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/basic.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nvalues: ReadonlyArray<number>\n```\n\n----------------------------------------\n\nTITLE: OnChange Type Definition\nDESCRIPTION: Defines the type for the `onChange` property, which is a function that is called when the handle is released.  It receives an instance of the Ranger component as an argument.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/basic.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nonChange: (instance: Ranger<TTrackElement>) => void\n```\n\n----------------------------------------\n\nTITLE: onDrag Function Definition in Ranger\nDESCRIPTION: Defines the `onDrag` function which is called when a handler is dragged within the Ranger component. It receives an instance of `Ranger` with a generic type `TTrackElement`.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/update-on-drag.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nonDrag: (instance: Ranger<TTrackElement>) => void\n```\n\n----------------------------------------\n\nTITLE: Handles Type Definition\nDESCRIPTION: Defines the type for the `handles` property, which is a read-only array of objects representing the handles to be rendered. Each handle has properties such as value, isActive, and event handlers.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/basic.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nhandles: ReadonlyArray<{value: number; isActive: boolean; onKeyDownHandler(event): function; onMouseDownHandler(event): function; onTouchStart(event): function}>\n```\n\n----------------------------------------\n\nTITLE: Min Type Definition\nDESCRIPTION: Defines the type for the `min` property, which is a number representing the minimum limit for the range. This property is required for the Ranger component to function correctly.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/basic.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nmin: number\n```\n\n----------------------------------------\n\nTITLE: Max Type Definition\nDESCRIPTION: Defines the type for the `max` property, which is a number representing the maximum limit for the range. This property is required for the Ranger component to function correctly.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/basic.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nmax: number\n```\n\n----------------------------------------\n\nTITLE: StepSize Type Definition\nDESCRIPTION: Defines the type for the `stepSize` property, which is a number representing the distance between selectable steps. This property is required for the Ranger component to function correctly.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/basic.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nstepSize: number\n```\n\n----------------------------------------\n\nTITLE: ActiveHandleIndex Type Definition\nDESCRIPTION: Defines the type for the `activeHandleIndex` property, which is either a number (the zero-based index of the currently dragged handle) or null if no handle is being dragged.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/api/basic.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nactiveHandleIndex: null | number\n```\n\n----------------------------------------\n\nTITLE: Installing React Ranger via NPM\nDESCRIPTION: This snippet shows how to install the @tanstack/react-ranger package using NPM. This command adds the library as a dependency to your project, allowing you to use its components and functions.\nSOURCE: https://github.com/tanstack/ranger/blob/main/docs/framework/react/react-ranger.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tanstack/react-ranger\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm\nDESCRIPTION: This command installs all dependencies for the packages and examples within the monorepo using pnpm. Dependencies are automatically linked as local/dynamic dependencies.\nSOURCE: https://github.com/tanstack/ranger/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Watcher with pnpm\nDESCRIPTION: This command starts the development watcher, which automatically rebuilds the code when changes are made.\nSOURCE: https://github.com/tanstack/ranger/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running an Example with pnpm\nDESCRIPTION: This command navigates to a specific example directory (e.g., basic React example) and starts the example using pnpm.\nSOURCE: https://github.com/tanstack/ranger/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/react/basic\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Building the Project with pnpm\nDESCRIPTION: This command builds the project using pnpm. Alternatively, a dev watcher can be run.\nSOURCE: https://github.com/tanstack/ranger/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Cloning the Ranger Repository\nDESCRIPTION: This command clones the Ranger repository from GitHub using the GitHub CLI.\nSOURCE: https://github.com/tanstack/ranger/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone TanStack/ranger\n```"
  }
]