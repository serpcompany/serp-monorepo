[
  {
    "owner": "securingsincity",
    "repo": "react-ace",
    "content": "TITLE: Initializing React-Ace Basic Editor Component\nDESCRIPTION: Basic setup example for integrating the Ace editor in a React application. Shows how to import required dependencies, configure the editor with a specific mode and theme, and handle onChange events.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\n\nfunction onChange(newValue) {\n  console.log(\"change\", newValue);\n}\n\n// Render editor\nrender(\n  <AceEditor\n    mode=\"java\"\n    theme=\"github\"\n    onChange={onChange}\n    name=\"UNIQUE_ID_OF_DIV\"\n    editorProps={{ $blockScrolling: true }}\n  />,\n  document.getElementById(\"example\")\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Ace Editor in React with Syntax Highlighting and Autocompletion\nDESCRIPTION: This example demonstrates how to set up and render the AceEditor component in a React application with Java syntax highlighting, GitHub theme, and various editor options including autocompletion. It shows the basic configuration pattern with mode, theme, change handler, and advanced settings.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/Ace.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/src-noconflict/ext-language_tools\"\n\nfunction onChange(newValue) {\n  console.log(\"change\", newValue);\n}\n\n// Render editor\nrender(\n  <AceEditor\n    mode=\"java\"\n    theme=\"github\"\n    onChange={onChange}\n    name=\"UNIQUE_ID_OF_DIV\"\n    editorProps={{ $blockScrolling: true }}\n    setOptions={{\n      enableBasicAutocompletion: true,\n      enableLiveAutocompletion: true,\n      enableSnippets: true\n    }}\n  />,\n  document.getElementById(\"example\")\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Split Editor with React-Ace in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up a split editor using React-Ace. It imports necessary components and modules, then renders a SplitEditor component with specific props such as mode, theme, number of splits, orientation, and initial values.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/Split.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { render } from \"react-dom\";\n\nimport { split as SplitEditor } from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/theme-github\";\n\n// Render editor\nrender(\n  <SplitEditor\n    mode=\"java\"\n    theme=\"github\"\n    splits={2}\n    orientation=\"below\"\n    value={[\"hi\", \"hello\"]}\n    name=\"UNIQUE_ID_OF_DIV\"\n    editorProps={{ $blockScrolling: true }}\n  />,\n  document.getElementById(\"example\")\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing React-Ace Diff Editor in TypeScript\nDESCRIPTION: Basic implementation example of the React-Ace Diff Editor component. Shows how to import and render a diff editor with basic configuration including dimensions, mode, and content comparison.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/Diff.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport { diff as DiffEditor } from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/theme-github\";\n\nrender(\n  <DiffEditor\n    value={[\"Test code differences\", \"Test code difference\"]}\n    height=\"1000px\"\n    width=\"1000px\"\n    mode=\"text\"\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Editor Methods in React-Ace\nDESCRIPTION: Demonstrates how to access the underlying Ace editor instance through refs to call editor methods like find, undo, and redo.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/FAQ.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst reactAceComponent = this.refs.reactAceComponent;\nconst editor = reactAceComponent.editor;\neditor.find(searchRegex, {\n  backwards: false,\n  wrap: true,\n  caseSensitive: false,\n  wholeWord: false,\n  regExp: true\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<button onClick={()=> {this.refs.editor.editor.undo()}}>Undo</button>\n<button onClick={()=> {this.refs.editor.editor.redo()}}>Redo</button>\n```\n\n----------------------------------------\n\nTITLE: Adding Language Snippets to React-Ace\nDESCRIPTION: Example of importing and configuring language snippets, mode, and language tools for Python in React-Ace.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/FAQ.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/snippets/python\";\nimport \"ace-builds/src-noconflict/theme-github\";\n\nfunction onChange(newValue) {\n  console.log(\"change\", newValue);\n}\n\nrender(\n  <AceEditor\n    mode=\"python\"\n    theme=\"github\"\n    onChange={onChange}\n    name=\"UNIQUE_ID_OF_DIV\"\n    editorProps={{ $blockScrolling: true }}\n    enableBasicAutocompletion={true}\n    enableLiveAutocompletion={true}\n    enableSnippets={true}\n  />,\n  document.getElementById(\"example\")\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Markers and Annotations in React-Ace\nDESCRIPTION: Examples of adding markers and annotations to the editor for highlighting and error indication.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/FAQ.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst markers = [\n  {\n    startRow: 3,\n    type: \"text\",\n    className: \"test-marker\"\n  }\n];\nconst wrapper = <AceEditor markers={markers} />;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst annotations = [\n  {\n    row: 3, // must be 0 based\n    column: 4, // must be 0 based\n    text: \"error.message\", // text to show in tooltip\n    type: \"error\"\n  }\n];\nconst editor = <AceEditor annotations={annotations} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Key Bindings in React-Ace\nDESCRIPTION: Examples of adding new key bindings and modifying existing ones in the editor.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/FAQ.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return <div>\n    <AceEditor\n      ref=\"aceEditor\"\n      mode=\"sql\"     // Default value since this props must be set.\n      theme=\"chrome\" // Default value since this props must be set.\n      commands={[{   // commands is array of key bindings.\n        name: 'commandName', //name for the key binding.\n        bindKey: {win: 'Ctrl-Alt-h', mac: 'Command-Alt-h'}, //key combination used for the command.\n        exec: () => { console.log('key-binding used')}  //function to execute when keys are pressed.\n      }]}\n    />\n  </div>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return <div>\n    <AceEditor\n      ref=\"aceEditor\"\n      mode=\"sql\"     // Default value since this props must be set.\n      theme=\"chrome\" // Default value since this props must be set.\n      commands={[{   // commands is array of key bindings.\n        name: 'removeline', //name for the key binding.\n        bindKey: {win: 'Ctrl-X', mac: 'Command-X'}, //key combination used for the command.\n        exec: 'removeline'  // name of the command to rebind\n      }]}\n    />\n  </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mode in React-Ace\nDESCRIPTION: Demonstrates how to create and implement a custom syntax highlighting mode with custom rules.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/FAQ.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"ace-builds/src-noconflict/mode-java\";\n\nexport class CustomHighlightRules extends window.ace.acequire(\n  \"ace/mode/text_highlight_rules\"\n).TextHighlightRules {\n  constructor() {\n    super();\n    this.$rules = {\n      start: [\n        {\n          token: \"comment\",\n          regex: \"#.*$\"\n        },\n        {\n          token: \"string\",\n          regex: '\".*?\"'\n        }\n      ]\n    };\n  }\n}\n\nexport default class CustomSqlMode extends window.ace.acequire(\"ace/mode/java\")\n  .Mode {\n  constructor() {\n    super();\n    this.HighlightRules = CustomHighlightRules;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from \"react\";\n\nimport AceEditor from \"react-ace\";\nimport CustomSqlMode from \"./CustomSqlMode.js\";\n\nimport \"ace-builds/src-noconflict/theme-github\";\n\nclass App extends Component {\n  componentDidMount() {\n    const customMode = new CustomSqlMode();\n    this.refs.aceEditor.editor.getSession().setMode(customMode);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AceEditor\n          ref=\"aceEditor\"\n          mode=\"text\"\n          theme=\"github\"\n          name=\"UNIQUE_ID_OF_DIV\"\n          editorProps={{ $blockScrolling: true }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Handling Text Selection in React-Ace\nDESCRIPTION: Methods to extract selected text from the editor using both onSelectionChange and direct selection access.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/FAQ.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nonSelectionChange(selection) {\n  const content = this.refs.aceEditor.editor.session.getTextRange(selection.getRange());\n  // use content\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  const selectedText = this.refs.aceEditor.editor.getSelectedText();\n  // selectedText contains the selected text.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Editor Options in React-Ace\nDESCRIPTION: Shows how to set editor properties like block scrolling using the editorProps prop.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/FAQ.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ReactAce\n  editorProps={{\n    $blockScrolling: Infinity\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updated ace-builds import statements\nDESCRIPTION: Example of the new import syntax using 'ace-builds' package for importing editor modes, themes, and code snippets that replace the brace imports.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/Migrate-v7-to-v8.md#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport 'ace-builds/src-noconflict/mode-html'\nimport 'ace-builds/src-noconflict/theme-monokai'\nimport 'ace-builds/src-noconflict/snippets/html'\n```\n\n----------------------------------------\n\nTITLE: Uninstalling brace and installing ace-builds packages\nDESCRIPTION: Command line instructions for removing the deprecated 'brace' package and installing 'react-ace' version 8.0.0 along with 'ace-builds' as its replacement.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/Migrate-v7-to-v8.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm uninstall brace\nnpm install react-ace@8.0.0 ace-builds\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for react-ace\nDESCRIPTION: Commands for installing the necessary dependencies to work with react-ace project. This includes installing React, React-DOM, and the project's own dependencies.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react\nnpm install react-dom\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Legacy brace import statements\nDESCRIPTION: Example of the old import syntax using 'brace' package for importing editor modes, themes, and code snippets that need to be updated.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/docs/Migrate-v7-to-v8.md#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport 'brace/mode/html'\nimport 'brace/theme/monokai'\nimport 'brace/snippets/html'\n```\n\n----------------------------------------\n\nTITLE: Pull Request Template Structure in Markdown\nDESCRIPTION: A structured markdown template for documenting pull request changes, including sections for listing changes, providing reasoning, and tracking related issues.\nSOURCE: https://github.com/securingsincity/react-ace/blob/main/PULL_REQUEST_TEMPLATE.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# What's in this PR?\n\n## List the changes you made and your reasons for them.\n\nMake sure any changes to code include changes to documentation.\n\n## References\n\n### Fixes #\n\n### Progress on: #\n```"
  }
]