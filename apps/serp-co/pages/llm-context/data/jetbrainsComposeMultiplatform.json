[
  {
    "owner": "jetbrains",
    "repo": "compose-multiplatform",
    "content": "TITLE: Configuring Gradle Build for Compose HTML Library\nDESCRIPTION: Updates the build.gradle.kts file to add the Compose plugin, configure repositories, and set up Kotlin JS with necessary Compose HTML dependencies.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Getting_Started/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Add compose gradle plugin\nplugins {\n    kotlin(\"multiplatform\") version \"2.1.0\"\n    id(\"org.jetbrains.compose\") version \"1.7.3\"\n}\n\n// Add maven repositories\nrepositories {\n    mavenCentral()\n    maven(\"https://maven.pkg.jetbrains.space/public/p/compose/dev\")\n    google()\n}\n\n// Enable JS(IR) target and add dependencies\nkotlin {\n    js(IR) {\n        browser()\n        binaries.executable()\n    }\n    sourceSets {\n        val jsMain by getting {\n            dependencies {\n                implementation(compose.html.core)\n                implementation(compose.runtime)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Compose Effects with Non-Composable Components\nDESCRIPTION: A comprehensive example showing how to wrap a non-Composable 3rd-party library with Compose, using DomSideEffect and DisposableRefEffect to control element lifecycle and updates based on state changes.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Using_Effects/README.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.setValue\nimport androidx.compose.runtime.Composable\nimport kotlinx.browser.document\nimport org.jetbrains.compose.web.css.*\nimport org.jetbrains.compose.web.dom.*\nimport org.jetbrains.compose.web.renderComposable\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.HTMLParagraphElement\n\n\n// Here we pretend that `RedBoldTextNotComposableRenderer`\n// wraps a UI logic provided by 3rd party library that doesn't use Compose\n\nobject RedBoldTextNotComposableRenderer {\n    fun unmountFrom(root: HTMLElement) {\n        root.removeChild(root.firstChild!!)\n    }\n\n    fun mountIn(root: HTMLElement) {\n        val pElement = document.createElement(\"p\") as HTMLParagraphElement\n        pElement.setAttribute(\"style\", \"color: red; font-weight: bold;\")\n        root.appendChild(pElement)\n    }\n\n    fun renderIn(root: HTMLElement, text: String) {\n        (root.firstChild as HTMLParagraphElement).innerText = text\n    }\n}\n\n// Here we define a Composable wrapper for the above code. Here we use DomSideEffect and DisposableRefEffect. \n@Composable // @param `show: Boolean` was left here intentionally for the sake of the example\nfun ComposableWrapperForRedBoldTextFrom3rdPartyLib(state: Int, show: Boolean) {\n    Div(attrs = {\n        style {\n            backgroundColor(Color.lightgray)\n            width(100.px)\n            minHeight(40.px)\n            padding(30.px)\n        }\n    }) {\n        if (!show) {\n            Text(\"No content rendered by the 3rd party library\")\n        }\n\n        Div {\n            if (show) {\n                // Update the content rendered by \"non-compose library\" according to the `state`\n                DomSideEffect(state) { div ->\n                    RedBoldTextNotComposableRenderer.renderIn(div, \"Value = $state\")\n                }\n            }\n\n            DisposableRefEffect(show) { div ->\n                if (show) {\n                    // Let \"non-compose library\" control the part of the page.\n                    // The content of this div is independent of Compose. \n                    // It will be managed by RedBoldTextNotComposableRenderer \n                    RedBoldTextNotComposableRenderer.mountIn(div)\n                }\n                onDispose {\n                    if (show) {\n                        // Clean up the html created/managed by \"non-compose library\"\n                        RedBoldTextNotComposableRenderer.unmountFrom(div)\n                    }\n                }\n            }\n        }\n    }\n}\n\nfun main() {\n    var state by mutableStateOf(0)\n    var showUncontrolledElements by mutableStateOf(false)\n\n    renderComposable(rootElementId = \"root\") {\n\n        ComposableWrapperForRedBoldTextFrom3rdPartyLib(state = state, show = showUncontrolledElements)\n\n        Div {\n            Label(forId = \"checkbox\") {\n                Text(\"Show/hide text rendered by 3rd party library\")\n            }\n\n            CheckboxInput(checked = showUncontrolledElements) {\n                id(\"checkbox\")\n                onInput {\n                    showUncontrolledElements = it.value\n                }\n            }\n        }\n\n        Button(attrs = {\n            onClick { state += 1 }\n        }) {\n            Text(\"Incr. count ($state)\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handlers in Compose HTML\nDESCRIPTION: Demonstrates how to add event handlers to elements in Compose HTML. Event handler functions like onClick are available in the attrs block and accept lambdas that are executed when the corresponding event occurs.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nButton(\n    attrs = { \n        onClick { println(\"Button clicked\") }\n    }\n) { Text(\"Button\") }\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependencies Configuration for Compose Multiplatform\nDESCRIPTION: Core dependencies required for Compose Multiplatform project including the Gradle plugin, lifecycle libraries, and navigation components.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: gradle\nCODE:\n```\norg.jetbrains.compose:1.6.10-beta03\norg.jetbrains.androidx.lifecycle:lifecycle-*:2.8.0-beta02\norg.jetbrains.androidx.navigation:navigation-*:2.7.0-alpha03\n```\n\n----------------------------------------\n\nTITLE: Complete Runnable Example of Event Handling in Compose Multiplatform\nDESCRIPTION: A comprehensive example that demonstrates onClick and onInput event handling in a single composable. It shows how to update and display state based on user interactions.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Events_Handling/README.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.runtime.*\nimport org.jetbrains.compose.web.css.*\nimport org.jetbrains.compose.web.dom.*\nimport org.jetbrains.compose.web.renderComposable\n\nfun main() {\n    renderComposable(rootElementId = \"root\") {\n        Button(\n            attrs = {\n                onClick { event ->\n                    println(\"button clicked at ${event.movementX}, ${event.movementY}\")\n                }\n            }\n        ) {\n            Text(\"Button\")\n        }\n\n        val text = remember { mutableStateOf(\"\") }\n\n        TextArea(\n            value = text.value,\n            attrs = {\n                onInput {\n                    text.value = it.value\n                }\n            }\n        )\n\n        Span {\n            Text(\"Typed text = ${text.value}\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Compose HTML Application Example\nDESCRIPTION: A comprehensive example showcasing various aspects of Compose HTML, including element creation, attribute setting, styling, and event handling. The example demonstrates how to build a complete UI with multiple composable elements.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.runtime.Composable\nimport org.jetbrains.compose.web.attributes.*\nimport org.jetbrains.compose.web.css.*\nimport org.jetbrains.compose.web.dom.*\nimport org.jetbrains.compose.web.renderComposable\n\nfun main() {\n    renderComposable(rootElementId = \"root\") {\n        Div(\n            attrs = {\n                // specify attributes here\n                style {\n                    // specify inline style here\n                }\n            }\n        ) {\n            Text(\"A text in <div>\")\n        }\n\n        Input(\n            type = InputType.Text, // All InputTypes supported\n            attrs = {}\n        )\n\n        Text(\"Arbitrary text\")\n\n        Span({\n            style { color(Color.red) } // inline style\n        }) {\n            Text(\"Red text\")\n        }\n\n        Div(\n            attrs = {\n                id(\"elementId\")\n                classes(\"cl1\", \"cl2\")\n                hidden()\n                title(\"title\")\n                draggable(Draggable.Auto)\n                dir(DirType.Auto)\n                lang(\"en\")\n                contentEditable(true)\n\n                // custom attr\n                attr(attr = \"custom_attr\", value = \"its_value\")\n            }\n        ) { /* content */ }\n\n        A(\n            attrs = {\n                href(\"https://localhost:8080/page2\")\n                target(ATarget.Blank)\n                hreflang(\"en\")\n                download(\"https://...\")\n            }\n        ) { Text(\"Link\") }\n\n        Button(\n            attrs = {\n                onClick { println(\"Button clicked\") }\n            }\n        ) { Text(\"Button\") }\n\n        Div({\n            style {\n                display(DisplayStyle.Flex)\n                padding(20.px)\n\n                // custom property\n                property(\"font-family\", \"Arial, Helvetica, sans-serif\")\n            }\n        }) { Text(\"Text in Div with inline style\") }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CoroutineScope with Compose Desktop Application\nDESCRIPTION: Shows how to properly obtain and use a CoroutineScope in a Compose Desktop application to avoid race conditions with the UI, using rememberCoroutineScope.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.runtime.DisposableEffect\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.window.application\n\n@OptIn(ExperimentalComposeUiApi::class, androidx.compose.foundation.ExperimentalFoundationApi::class)\nfun main() = application {\n    val scope = rememberCoroutineScope()\n    val someApplicationObject = remember(scope) { SomeApplicationObject(scope) }\n    \n    DisposableEffect(Unit) {\n        SomeGlobalObject.init(scope)\n        onDispose {  }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Styles with Style DSL in Kotlin\nDESCRIPTION: Shows how to apply inline styles to a Div component using Style DSL. Demonstrates setting display, padding and custom properties.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Style_Dsl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nDiv({\n    style {\n        display(DisplayStyle.Flex)\n        padding(20.px)\n        \n        // custom property (or not supported out of a box)\n        property(\"font-family\", \"Arial, Helvetica, sans-serif\")\n    }\n}) { /* content goes here */ }\n```\n\n----------------------------------------\n\nTITLE: Initializing Compose HTML Rendering in Kotlin\nDESCRIPTION: Sets up the entry point for a Compose HTML application by defining the root element where the composition will be rendered. The renderComposable function takes a root element ID and a content lambda where composable elements are defined.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrenderComposable(rootElementId = \"root\") {\n    // content goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing System Tray with Window in Compose Desktop\nDESCRIPTION: Creates a desktop application with system tray integration, notifications, and a main window. Features include a counter display, notification sending capability, and custom tray icon implementation.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Tray_Notifications_MenuBar_new/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.drawscope.DrawScope\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.window.Tray\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\nimport androidx.compose.ui.window.rememberNotification\nimport androidx.compose.ui.window.rememberTrayState\n\nfun main() = application {\n    var count by remember { mutableStateOf(0) }\n    var isOpen by remember { mutableStateOf(true) }\n\n    if (isOpen) {\n        val trayState = rememberTrayState()\n        val notification = rememberNotification(\"Notification\", \"Message from MyApp!\")\n\n        Tray(\n            state = trayState,\n            icon = TrayIcon,\n            menu = {\n                Item(\n                    \"Increment value\",\n                    onClick = {\n                        count++\n                    }\n                )\n                Item(\n                    \"Send notification\",\n                    onClick = {\n                        trayState.sendNotification(notification)\n                    }\n                )\n                Item(\n                    \"Exit\",\n                    onClick = {\n                        isOpen = false\n                    }\n                )\n            }\n        )\n\n        Window(\n            onCloseRequest = {\n                isOpen = false\n            },\n            icon = MyAppIcon\n        ) {\n            // content\n            Box(\n                modifier = Modifier.fillMaxSize(),\n                contentAlignment = Alignment.Center\n            ) {\n                Text(text = \"Value: $count\")\n            }\n        }\n    }\n}\n\nobject MyAppIcon : Painter() {\n    override val intrinsicSize = Size(256f, 256f)\n\n    override fun DrawScope.onDraw() {\n        drawOval(Color.Green, Offset(size.width / 4, 0f), Size(size.width / 2f, size.height))\n        drawOval(Color.Blue, Offset(0f, size.height / 4), Size(size.width, size.height / 2f))\n        drawOval(Color.Red, Offset(size.width / 4, size.height / 4), Size(size.width / 2f, size.height / 2f))\n    }\n}\n\nobject TrayIcon : Painter() {\n    override val intrinsicSize = Size(256f, 256f)\n\n    override fun DrawScope.onDraw() {\n        drawOval(Color(0xFFFFA500))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching Focus with FocusRequester in Jetpack Compose\nDESCRIPTION: This snippet shows how to use FocusRequester and Modifier.focusRequester to manage focus for UI components in a Jetpack Compose application. It initializes a window with buttons and text fields that can switch focus between them when clicked. Dependencies include Jetpack Compose libraries.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Tab_Navigation/README.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.ui.window.application\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.WindowState\nimport androidx.compose.ui.window.WindowSize\nimport androidx.compose.foundation.focusable\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.material.Button\nimport androidx.compose.material.OutlinedTextField\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.focus.FocusRequester\nimport androidx.compose.ui.focus.focusRequester\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\n\nfun main() = application {\n    Window(\n        state = WindowState(size = WindowSize(350.dp, 450.dp)),\n        onCloseRequest = ::exitApplication\n    ) {\n        val buttonFocusRequester = remember { FocusRequester() }\n        val textFieldFocusRequester = remember { FocusRequester() }\n        val focusState = remember { mutableStateOf(false) }\n        val text = remember { mutableStateOf(\"\") }\n        Box(\n            modifier = Modifier.fillMaxSize(),\n            contentAlignment = Alignment.Center\n        ) {\n            Column(\n                modifier = Modifier.padding(50.dp)\n            ) {\n                Button(\n                    onClick = {\n                        focusState.value = !focusState.value\n                        if (focusState.value) {\n                            textFieldFocusRequester.requestFocus()\n                        } else {\n                            buttonFocusRequester.requestFocus()\n                        }\n                    },\n                    modifier = Modifier.fillMaxWidth()\n                        .focusRequester(buttonFocusRequester)\n                        .focusable()\n                ) {\n                    Text(text = \"Focus switcher\")\n                }\n                Spacer(modifier = Modifier.height(20.dp))\n                OutlinedTextField(\n                    value = text.value,\n                    singleLine = true,\n                    onValueChange = { text.value = it },\n                    modifier = Modifier\n                        .focusRequester(textFieldFocusRequester)\n                )\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Key Navigation in Multiline TextField\nDESCRIPTION: This snippet illustrates a known problem where Tab key navigation does not work as expected in a multiline OutlinedTextField in Jetpack Compose. The provided solution is to implement a custom Modifier that changes focus on pressing the Tab key. Dependencies include Jetpack Compose libraries.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Tab_Navigation/README.md#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nColumn {\n    repeat(5) {\n        var text by remember { mutableStateOf(\"Hello, World!\") }\n\n        OutlinedTextField(\n            value = text,\n            singleLine = false, // Pay attention here! Also, by default, singleLine is false.\n            onValueChange = { text = it },\n            modifier = Modifier.padding(8.dp)\n        )\n    }\n}\n\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.OutlinedTextField\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.focus.FocusDirection\nimport androidx.compose.ui.input.key.*\nimport androidx.compose.ui.platform.LocalFocusManager\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.singleWindowApplication\n\nfun main() = singleWindowApplication {\n    Column {\n        repeat(5) {\n            var text by remember { mutableStateOf(\"Hello, World!\") }\n\n            OutlinedTextField(\n                value = text,\n                singleLine = false, // Pay attention here! Also, by default, singleLine is false.\n                onValueChange = { text = it },\n                modifier = Modifier.padding(8.dp).moveFocusOnTab()\n            )\n        }\n    }\n}\n\n@OptIn(ExperimentalComposeUiApi::class)\nfun Modifier.moveFocusOnTab() = composed {\n    val focusManager = LocalFocusManager.current\n    onPreviewKeyEvent {\n        if (it.type == KeyEventType.KeyDown && it.key == Key.Tab) {\n            focusManager.moveFocus(\n                if (it.isShiftPressed) FocusDirection.Previous else FocusDirection.Next\n            )\n            true\n        } else {\n            false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Material3 Adaptive Dependencies in Gradle\nDESCRIPTION: This Kotlin snippet provides the necessary dependencies for using Material3 Adaptive in a JetBrains Compose Multiplatform project. By including these dependencies, developers can utilize adaptive components that adjust to different layouts based on screen size and device orientation.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\ndependencies {\n  implementation(\"org.jetbrains.compose.material3.adaptive:adaptive:1.0.0-alpha01\")\n  implementation(\"org.jetbrains.compose.material3.adaptive:adaptive-layout:1.0.0-alpha01\")\n  implementation(\"org.jetbrains.compose.material3.adaptive:adaptive-navigation:1.0.0-alpha01\")\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Styles in Compose HTML\nDESCRIPTION: Shows how to apply inline styles to elements using the style block within attrs. This approach allows for detailed control of CSS properties including display, padding, and custom properties using a type-safe DSL.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nDiv(\n    attrs = {\n        style {\n            display(DisplayStyle.Flex)\n            padding(20.px)\n            \n            // custom property\n            property(\"font-family\", \"Arial, Helvetica, sans-serif\")\n        }\n    }\n) { /* content goes here */ }\n```\n\n----------------------------------------\n\nTITLE: Kotlin ViewModel Usage in Compose Multiplatform\nDESCRIPTION: Example of ViewModel usage pattern showing both reified and non-reified approaches for cross-platform compatibility.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\n// Reified approach (not available in common code due to compiler bug)\ninline fun <reified VM> viewModel(...)\n\n// Non-reified approach\nfun <VM> viewModel(KClass, ...)\n```\n\n----------------------------------------\n\nTITLE: Handling onClick Events in Compose Multiplatform\nDESCRIPTION: Example of handling click events on a Button component. The event parameter provides information about the mouse movement and access to the native DOM event object.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Events_Handling/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nButton(\n    attrs = {\n        onClick { event -> \n            // event is of `SyntheticMouseEvent` type    \n            println(\"button clicked at ${event.movementX}, ${event.movementY}\")\n            \n            val nativeEvent = event.nativeEvent // [MouseEvent](https://developer.mozilla.org/en/docs/Web/API/MouseEvent)\n        }\n    }\n) {\n    Text(\"Button\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using MutableState with Controlled Input in Kotlin Compose\nDESCRIPTION: Shows how to implement a controlled input using MutableState for state management. This example demonstrates the pattern without state updates in the onInput handler.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Controlled_Uncontrolled_Inputs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval inputState = remember { mutableStateOf(\"Some Text\") }\n\nInput(type = InputType.Text) {\n    value(inputState.value)\n    onInput { event -> println(event.value) }\n}\n```\n\n----------------------------------------\n\nTITLE: Using addEventListener for Custom Events in Compose Multiplatform\nDESCRIPTION: Example of using addEventListener to handle events that don't have dedicated functions in the attrs block. This shows how to manage a form submission event and prevent its default behavior.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Events_Handling/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nForm(attrs = {\n    this.addEventListener(\"submit\") {\n        console.log(\"Hello, Submit!\")\n        it.preventDefault()\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Input Element with Type Parameter in Compose HTML\nDESCRIPTION: Shows how to create an Input element in Compose HTML with a specific input type. The Input composable provides a dedicated type parameter for convenient input type specification alongside the attrs parameter.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nInput(\n    type = InputType.Text, // All InputTypes supported\n    attrs = {}\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Counter UI with Compose HTML\nDESCRIPTION: Main Kotlin file that implements a simple counter UI using Compose HTML. It demonstrates state management and basic UI components like buttons and text elements.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Getting_Started/README.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.setValue\nimport androidx.compose.runtime.Composable\nimport org.jetbrains.compose.web.attributes.*\nimport org.jetbrains.compose.web.css.*\nimport org.jetbrains.compose.web.dom.*\nimport org.jetbrains.compose.web.renderComposable\n\nfun main() {\n    var count: Int by mutableStateOf(0)\n\n    renderComposable(rootElementId = \"root\") {\n        Div({ style { padding(25.px) } }) {\n            Button(attrs = {\n                onClick { count -= 1 }\n            }) {\n                Text(\"-\")\n            }\n\n            Span({ style { padding(15.px) } }) {\n                Text(\"$count\")\n            }\n\n            Button(attrs = {\n                onClick { count += 1 }\n            }) {\n                Text(\"+\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DisposableRefEffect in Compose HTML\nDESCRIPTION: Demonstrates two ways of using the DisposableRefEffect - without a key (called once when element enters composition) and with a key (resets when key value changes). Provides access to the HTML element reference.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Using_Effects/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nDiv {\n    // without a key\n    DisposableRefEffect { htmlDivElement ->\n        // htmlDivElement is a reference to the HTMLDivElement\n        onDispose {\n            // add clean up code here\n        }\n    }\n}\n\n\nvar state by remember { mutableStateOf(1) }\n\nDiv {\n    // with a key. \n    // The effect will be called for every new state's value\n    DisposableRefEffect(state) { htmlDivElement ->\n        // htmlDivElement is a reference to the HTMLDivElement\n        onDispose {\n            // add clean up code here\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled vs Uncontrolled Inputs in Kotlin Compose\nDESCRIPTION: Demonstrates the basic implementation of controlled and uncontrolled input components. The uncontrolled input manages its own state, while the controlled input requires external state management.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Controlled_Uncontrolled_Inputs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Uncontrolled\nInput(type = InputType.Text) {\n    defaultValue(\"Initial Value\") // optional\n    onInput { event -> println(event.value) }\n}\n\n// Controlled\nInput(type = InputType.Text) {\n    value(\"Some value\") // calling value(...) is necessary to make input \"Controlled\"\n    onInput { event -> println(event.value) }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ref in AttrsBuilder with Compose HTML\nDESCRIPTION: Demonstrates how to use the ref effect to retrieve a reference to an HTML element in Compose HTML. The effect is called once when an element is added to the composition and provides a clean-up mechanism with onDispose.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Using_Effects/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nDiv(attrs = {\n    ref { htmlDivElement ->\n       // htmlDivElement is a reference to the HTMLDivElement\n       onDispose {\n          // add clean up code here\n       }\n    }\n}) {\n    // Content()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Focus Order with FocusRequester in Compose Multiplatform\nDESCRIPTION: Demonstrates how to implement a custom focus traversal order using FocusRequester and Modifier.focusOrder. This example creates text fields that navigate in reverse order when pressing tab and shift+tab, rather than following the default composition order.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Tab_Navigation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.ui.window.application\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.WindowState\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.material.OutlinedTextField\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.focus.FocusRequester\nimport androidx.compose.ui.focus.focusOrder\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.DpSize\nimport androidx.compose.ui.unit.dp\n\nfun main() = application {\n    Window(\n        state = WindowState(size = DpSize(350.dp, 500.dp)),\n        onCloseRequest = ::exitApplication\n    ) {\n        val itemsList = remember { List(5) { FocusRequester() } }\n        Box(\n            modifier = Modifier.fillMaxSize(),\n            contentAlignment = Alignment.Center\n        ) {\n            Column(\n                modifier = Modifier.padding(50.dp)\n            ) {\n                itemsList.forEachIndexed { index, item ->\n                    val text = remember { mutableStateOf(\"\") }\n                    OutlinedTextField(\n                        value = text.value,\n                        singleLine = true,\n                        onValueChange = { text.value = it },\n                        modifier = Modifier.focusOrder(item) {\n                            // reverse order\n                            next = if (index - 1 < 0) itemsList.last() else itemsList[index - 1]\n                            previous = if (index + 1 == itemsList.size) itemsList.first() else itemsList[index + 1]\n                        }\n                    )\n                    Spacer(modifier = Modifier.height(20.dp))\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Material3 Dependency Replacement (Kotlin DSL)\nDESCRIPTION: This code snippet shows how to replace the standard Material3 dependency with a specific version to work around a prerelease issue.  It explicitly defines the Material3 version to use a specific older alpha release, until a stable version is available. This is a temporary fix before a later merge.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(compose.material3)\n```\n\n----------------------------------------\n\nTITLE: CSS Variables Implementation in Style DSL\nDESCRIPTION: Shows how to declare and use CSS variables in Style DSL, including setting values and providing default values.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Style_Dsl/README.md#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyVariables {\n    // declare a variable\n    val contentBackgroundColor by variable<CSSColorValue>()\n}\n\nobject MyStyleSheet: StyleSheet() {\n    \n    val container by style {\n        //set variable's value for the `container` scope\n        MyVariables.contentBackgroundColor(Color(\"blue\"))\n    }\n    \n    val content by style {\n        // get the value\n        backgroundColor(MyVariables.contentBackgroundColor.value())\n    }\n\n    val contentWithDefaultBgColor by style {\n        // default value can be provided as well\n        // default value is used when the value is not previously set\n        backgroundColor(MyVariables.contentBackgroundColor.value(Color(\"#333\")))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Focusable Components in Compose Multiplatform\nDESCRIPTION: Shows how to make custom components focusable using Modifier.focusable() and MutableInteractionSource. The example creates interactive boxes that respond to both mouse clicks and keyboard navigation with Enter/Space keys. It includes visual feedback through background color changes based on focus state.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Tab_Navigation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.background\nimport androidx.compose.ui.window.application\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.WindowState\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.focusable\nimport androidx.compose.foundation.interaction.collectIsFocusedAsState\nimport androidx.compose.foundation.interaction.MutableInteractionSource\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.lerp\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.input.key.*\nimport androidx.compose.ui.input.pointer.PointerEventType\nimport androidx.compose.ui.input.pointer.onPointerEvent\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.IntSize\nimport androidx.compose.ui.unit.DpSize\n\nfun main() = application {\n    Window(\n        state = WindowState(size = DpSize(350.dp, 450.dp)),\n        onCloseRequest = ::exitApplication\n    ) {\n        MaterialTheme(\n            colors = MaterialTheme.colors.copy(\n                primary = Color(10, 132, 232),\n                secondary = Color(150, 232, 150)\n            )\n        ) {\n            val clicks = remember { mutableStateOf(0) }\n            Box(\n                modifier = Modifier.fillMaxSize(),\n                contentAlignment = Alignment.Center\n            ) {\n                Column(\n                    modifier = Modifier.padding(40.dp)\n                ) {\n                    Text(text = \"Clicks: ${clicks.value}\")\n                    Spacer(modifier = Modifier.height(20.dp))\n                    for (x in 1..5) {\n                        FocusableBox(\"Button $x\", { clicks.value++ })\n                        Spacer(modifier = Modifier.height(20.dp))\n                    }\n                }\n            }\n        }\n    }\n}\n\n@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun FocusableBox(\n    text: String = \"\",\n    onClick: () -> Unit = {},\n    size: IntSize = IntSize(200, 35)\n) {\n    val keyPressedState = remember { mutableStateOf(false) }\n    val interactionSource = remember { MutableInteractionSource() }\n    val backgroundColor = if (interactionSource.collectIsFocusedAsState().value) {\n        if (keyPressedState.value)\n            lerp(MaterialTheme.colors.secondary, Color(64, 64, 64), 0.3f)\n        else\n            MaterialTheme.colors.secondary\n    } else {\n        MaterialTheme.colors.primary\n    }\n    Box(\n        modifier = Modifier\n            .clip(RoundedCornerShape(4.dp))\n            .background(backgroundColor)\n            .size(size.width.dp, size.height.dp)\n            .onPointerEvent(PointerEventType.Press) { onClick() }\n            .onPreviewKeyEvent {\n                if (\n                    it.key == Key.Enter ||\n                    it.key == Key.Spacebar\n                ) {\n                    when (it.type) {\n                        KeyEventType.KeyDown -> {\n                            keyPressedState.value = true\n                        }\n                        KeyEventType.KeyUp -> {\n                            keyPressedState.value = false\n                            onClick.invoke()\n                        }\n                    }\n                }\n                false\n            }\n            .focusable(interactionSource = interactionSource),\n        contentAlignment = Alignment.Center\n    ) {\n        Text(text = text, color = Color.White)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Text with a Span Element in Compose HTML\nDESCRIPTION: Demonstrates how to apply styles to text by wrapping it in a Span element. Since Text doesn't accept style parameters directly, styling is applied to container elements like Span or P that wrap the Text element.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nSpan(\n    attrs = { style { color(Color.red) } } // inline style\n) {\n    Text(\"Red text\")\n}\n```\n\n----------------------------------------\n\nTITLE: Media Query Implementation in Style DSL\nDESCRIPTION: Demonstrates how to implement media queries using Style DSL to create responsive styles.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Style_Dsl/README.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject AppStylesheet : StyleSheet() {\n    val container by style {\n        padding(48.px)\n\n        media(mediaMaxWidth(640.px)) {\n            self style {\n                padding(12.px)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Images Asynchronously from Storage or Network in Compose\nDESCRIPTION: Shows how to load images from device storage or network asynchronously using various loaders (loadImageBitmap, loadSvgPainter, loadXmlImageVector) with helper functions for different sources.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Image_And_Icons_Manipulations/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.produceState\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.ImageBitmap\nimport androidx.compose.ui.graphics.painter.BitmapPainter\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.graphics.vector.rememberVectorPainter\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.res.loadImageBitmap\nimport androidx.compose.ui.res.loadSvgPainter\nimport androidx.compose.ui.res.loadXmlImageVector\nimport androidx.compose.ui.unit.Density\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.singleWindowApplication\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext\nimport org.xml.sax.InputSource\nimport java.io.File\nimport java.io.IOException\nimport java.net.URL\n\nfun main() = singleWindowApplication {\n    val density = LocalDensity.current\n    Column {\n        AsyncImage(\n            load = { loadImageBitmap(File(\"sample.png\")) },\n            painterFor = { remember { BitmapPainter(it) } },\n            contentDescription = \"Sample\",\n            modifier = Modifier.width(200.dp)\n        )\n        AsyncImage(\n            load = { loadSvgPainter(\"https://github.com/JetBrains/compose-multiplatform/raw/master/artwork/idea-logo.svg\", density) },\n            painterFor = { it },\n            contentDescription = \"Idea logo\",\n            contentScale = ContentScale.FillWidth,\n            modifier = Modifier.width(200.dp)\n        )\n        AsyncImage(\n            load = { loadXmlImageVector(File(\"compose-logo.xml\"), density) },\n            painterFor = { rememberVectorPainter(it) },\n            contentDescription = \"Compose logo\",\n            contentScale = ContentScale.FillWidth,\n            modifier = Modifier.width(200.dp)\n        )\n    }\n}\n\n@Composable\nfun <T> AsyncImage(\n    load: suspend () -> T,\n    painterFor: @Composable (T) -> Painter,\n    contentDescription: String,\n    modifier: Modifier = Modifier,\n    contentScale: ContentScale = ContentScale.Fit,\n) {\n    val image: T? by produceState<T?>(null) {\n        value = withContext(Dispatchers.IO) {\n            try {\n                load()\n            } catch (e: IOException) {\n                // instead of printing to console, you can also write this to log,\n                // or show some error placeholder\n                e.printStackTrace()\n                null\n            }\n        }\n    }\n\n    if (image != null) {\n        Image(\n            painter = painterFor(image!!),\n            contentDescription = contentDescription,\n            contentScale = contentScale,\n            modifier = modifier\n        )\n    }\n}\n\n/* Loading from file with java.io API */\n\nfun loadImageBitmap(file: File): ImageBitmap =\n    file.inputStream().buffered().use(::loadImageBitmap)\n\nfun loadSvgPainter(file: File, density: Density): Painter =\n    file.inputStream().buffered().use { loadSvgPainter(it, density) }\n\nfun loadXmlImageVector(file: File, density: Density): ImageVector =\n    file.inputStream().buffered().use { loadXmlImageVector(InputSource(it), density) }\n\n/* Loading from network with java.net API */\n\nfun loadImageBitmap(url: String): ImageBitmap =\n    URL(url).openStream().buffered().use(::loadImageBitmap)\n\nfun loadSvgPainter(url: String, density: Density): Painter =\n    URL(url).openStream().buffered().use { loadSvgPainter(it, density) }\n\nfun loadXmlImageVector(url: String, density: Density): ImageVector =\n    URL(url).openStream().buffered().use { loadXmlImageVector(InputSource(it), density) }\n\n/* Loading from network with Ktor client API (https://ktor.io/docs/client.html). */\n\n/*\n\nsuspend fun loadImageBitmap(url: String): ImageBitmap =\n    urlStream(url).use(::loadImageBitmap)\n\nsuspend fun loadSvgPainter(url: String, density: Density): Painter =\n    urlStream(url).use { loadSvgPainter(it, density) }\n\nsuspend fun loadXmlImageVector(url: String, density: Density): ImageVector =\n    urlStream(url).use { loadXmlImageVector(InputSource(it), density) }\n\n@OptIn(KtorExperimentalAPI::class)\nprivate suspend fun urlStream(url: String) = HttpClient(CIO).use {\n    ByteArrayInputStream(it.get(url))\n}\n\n */\n```\n\n----------------------------------------\n\nTITLE: Adding Text Content in Compose HTML\nDESCRIPTION: Shows how to add simple text content using the Text composable. The Text function takes a string parameter representing the text content to be displayed.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nText(\"Arbitrary text\")\n```\n\n----------------------------------------\n\nTITLE: Preloading Fallback Fonts for Emojis in Web\nDESCRIPTION: This feature allows preloading of fallback fonts, enabling the usage of emojis and unicode characters within the Text component.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Allow preloading the fallback fonts. This enables the usage of emojis and other unicode characters without manually composing the Text with AnnotatedString\n\n```\n\n----------------------------------------\n\nTITLE: Complete Style DSL Implementation Example\nDESCRIPTION: A comprehensive example showing all Style DSL concepts together including variables, stylesheets, and composable functions.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Style_Dsl/README.md#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.runtime.Composable\nimport org.jetbrains.compose.web.css.*\nimport org.jetbrains.compose.web.dom.*\nimport org.jetbrains.compose.web.renderComposable\n\nobject MyVariables {\n    // declare a variable\n    val contentBackgroundColor by variable<CSSColorValue>()\n}\n\nobject MyStyleSheet: StyleSheet() {\n\n    val container by style {\n        //set variable's value for the `container` scope\n        MyVariables.contentBackgroundColor(Color(\"blue\"))\n    }\n\n    val content by style {\n        // get the value\n        backgroundColor(MyVariables.contentBackgroundColor.value())\n    }\n\n    val contentWithDefaultBgColor by style {\n        // default value can be provided as well\n        // default value is used when the value is not previously set\n        backgroundColor(MyVariables.contentBackgroundColor.value(Color(\"#333\")))\n    }\n}\n\nobject AppStylesheet : StyleSheet() {\n    val container by style { // container is a class\n        display(DisplayStyle.Flex)\n        padding(20.px)\n\n        // custom property (or not supported out of a box)\n        property(\"font-family\", \"Arial, Helvetica, sans-serif\")\n    }\n}\n\n@Composable\nfun Container(content: @Composable () -> Unit) {\n    Div(\n        attrs = { classes(AppStylesheet.container) }\n    ) {\n        content()\n    }\n}\n\nfun main() {\n    renderComposable(rootElementId = \"root\") {\n        Div({\n            style {\n                display(DisplayStyle.Flex)\n                padding(20.px)\n\n                // custom property (or not supported out of a box)\n                property(\"font-family\", \"Arial, Helvetica, sans-serif\")\n            }\n        }) { /* content goes here */ }\n\n\n        Style(AppStylesheet)\n\n        Container {\n            Text(\"Content\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Common HTML Attributes in Compose HTML\nDESCRIPTION: Demonstrates how to set common HTML attributes using the DSL's helper functions. These functions provide type safety and validation for standard HTML attributes applicable to most elements.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nattrs = {\n    id(\"elementId\")\n    classes(\"cl1\", \"cl2\")\n    hidden(false)\n    title(\"title\")\n    draggable(Draggable.Auto)\n    dir(DirType.Auto)\n    lang(\"en\")\n    contentEditable(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for macOS Application Signing and Distribution\nDESCRIPTION: Kotlin DSL configuration for Gradle to set up macOS application packaging, including bundle ID and signing settings for Compose Multiplatform applications.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.compose.compose\nimport org.jetbrains.compose.desktop.application.dsl.TargetFormat\n\nplugins {\n    kotlin(\"jvm\")\n    id(\"org.jetbrains.compose\")\n}\n\ndependencies {\n    implementation(compose.desktop.currentOS)\n}\n\ncompose.desktop {\n    application {\n        mainClass = \"example.MainKt\"\n\n        nativeDistributions {\n            targetFormats(TargetFormat.Dmg)\n\n            macOS {\n                // macOS DSL settings\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for IntelliJ Plugin with Compose\nDESCRIPTION: This code snippet shows the Gradle configuration needed to use Compose in an IntelliJ plugin. It includes the required plugins, repositories, dependencies, and IntelliJ plugin configuration settings.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tooling/compose-intellij-platform/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\n\nimport org.jetbrains.compose.compose\n\nplugins {\n    id(\"org.jetbrains.intellij\") version \"1.3.0\"\n    id(\"org.jetbrains.kotlin.jvm\") version \"1.6.10\"\n    id(\"org.jetbrains.compose\") version \"1.0.1\"\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compileOnly(compose.desktop.currentOs)\n}\n\n// See https://github.com/JetBrains/gradle-intellij-plugin/\nintellij {\n    pluginName.set(\"Example plugin name\")\n    version.set(\"2021.3\")\n    plugins.set(listOf(\"org.jetbrains.compose.intellij.platform:0.1.0\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Using DisposableEffect with scopeElement in Compose HTML\nDESCRIPTION: Shows the recommended replacement for DisposableRefEffect using DisposableEffect, which provides a scopeElement reference to the underlying HTML element.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Using_Effects/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nDisposableEffect(key) {\n    scopeElement.innerText = key\n    onDispose { scopeElement.innerText = \"\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Attributes in Compose HTML\nDESCRIPTION: Shows how to set custom attributes for HTML elements using the attr function. This flexible approach allows setting any attribute by providing its name and value, even if not specifically supported by the DSL.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nDiv(\n    attrs = {\n        attr(attr = \"custom_attr\", value = \"its_value\")\n    }\n) { /* content */ }\n```\n\n----------------------------------------\n\nTITLE: Creating a Div Element with Compose HTML in Kotlin\nDESCRIPTION: Demonstrates how to create a basic Div element with Compose HTML. The Div composable function accepts an attrs parameter for defining attributes and styles, and a content lambda for defining child elements.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nDiv(\n    attrs = {\n        // specify attributes here\n        style {\n            // specify inline style here\n        }\n    }\n) {\n    // div content goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Compose Effect in React - Kotlin\nDESCRIPTION: Defines a custom React effect `useCompose(...)` that allows rendering content using Compose within a React application. This is not part of a library and requires specific implementation details.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/html/with-react/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"useCompose(...) { \\n    // implementation details here \\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Notarization Settings via Gradle DSL\nDESCRIPTION: This code snippet demonstrates configuring notarization settings within the Gradle DSL, specifically for a Compose Multiplatform desktop application. It retrieves Apple ID, password, and team ID from environment variables. It uses the `project.providers.environmentVariable` function to access environment variables within the `build.gradle.kts` file.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop.application {\n    nativeDistributions {\n        macOS {\n            notarization {\n                val providers = project.providers\n                appleID.set(providers.environmentVariable(\"NOTARIZATION_APPLE_ID\"))\n                password.set(providers.environmentVariable(\"NOTARIZATION_PASSWORD\"))\n                teamId.set(providers.environmentVariable(\"NOTARIZATION_TEAM_ID\"))\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling onInput Events in Compose Multiplatform\nDESCRIPTION: Example of handling input events on a TextArea component. This demonstrates updating a mutable state when the user enters text in the field.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Events_Handling/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval text = remember { mutableStateOf(\"\") }\n\nTextArea(\n    value = text.value,\n    attrs = {\n        onInput {\n            text.value = it.value\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing State Updates in Controlled Input with Kotlin Compose\nDESCRIPTION: Demonstrates how to properly implement state updates in a controlled input component using MutableState and the onInput event handler.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Controlled_Uncontrolled_Inputs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval inputState = remember { mutableStateOf(\"Some Text\") }\n\nInput(type = InputType.Text) {\n    value(inputState.value)\n    onInput { event -> inputState.value = event.value }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Composable with Test-Utils\nDESCRIPTION: Demonstrates a complete unit test for the TestButton composable using test-utils. The test verifies that the button displays the correct text and that clicking the button triggers the callback function as expected.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Using_Test_Utils/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.compose.web.testutils.ComposeWebExperimentalTestsApi\nimport org.jetbrains.compose.web.testutils.runTest\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport org.w3c.dom.HTMLButtonElement\nimport kotlin.test.Test\nimport kotlin.test.assertEquals\n\n@OptIn(ComposeWebExperimentalTestsApi::class)\nclass TestsForButton {\n\n    @Test\n    fun testButton() = runTest {\n        var counter by mutableStateOf(1)\n        \n        composition {\n            TestButton(text = \"$counter\") {\n                counter++\n            }\n        }\n\n        assertEquals(\"<button>1</button>\", root.innerHTML)\n\n        (root.firstChild!! as HTMLButtonElement).click()\n        waitForRecompositionComplete()\n        assertEquals(\"<button>2</button>\", root.innerHTML)\n\n        counter = 10\n        waitForRecompositionComplete()\n        assertEquals(\"<button>10</button>\", root.innerHTML)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SwiftUI ContentView Entry Point\nDESCRIPTION: The ContentView struct serves as the main entry point for the SwiftUI-based iOS application. It's located in the ContentView.swift file.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/interop/ios-compose-in-swiftui/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nstruct ContentView\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Signing for macOS Application in Gradle\nDESCRIPTION: Kotlin DSL configuration for enabling code signing for macOS applications, including identity specification and optional keychain path.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nmacOS {\n    signing { \n         sign.set(true)\n         identity.set(\"John Doe\")\n         // keychain.set(\"/path/to/keychain\") \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stylesheet Class in Kotlin\nDESCRIPTION: Demonstrates creating a StyleSheet class with reusable styles and mounting it in a composable function.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Style_Dsl/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject AppStylesheet : StyleSheet() {\n    val container by style { // container is a class\n        display(DisplayStyle.Flex)\n        padding(20.px)\n\n        // custom property (or not supported out of a box)\n        property(\"font-family\", \"Arial, Helvetica, sans-serif\")\n    }\n}\n\n// Stylesheet needs to be mounted:\nrenderComposable(\"root\") {\n    Style(AppStylesheet)\n    \n    Container {\n        Text(\"Content\")\n    }\n}\n\n@Composable\nfun Container(content: @Composable () -> Unit) {\n    Div(\n        attrs = { classes(AppStylesheet.container) }\n    ) {\n        content()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Selectors Implementation in Style DSL\nDESCRIPTION: Shows various ways to create and combine CSS selectors using Style DSL, including universal selectors, raw selectors, and combined selectors.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Style_Dsl/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject AppStylesheet : StyleSheet() {\n    \n    init {\n        // `universal` can be used instead of \"*\": `universal style {}`\n        \"*\" style { \n            fontSize(15.px)\n            padding(0.px)\n        }\n        \n        // raw selector\n        \"h1, h2, h3, h4, h5, h6\" style {\n            property(\"font-family\", \"Arial, Helvetica, sans-serif\")\n            \n        }\n\n        // combined selector\n        type(\"A\") + attr( // selects all tags <a> with href containing 'jetbrains'\n            name = \"href\",\n            value = \"jetbrains\",\n            operator = CSSSelector.Attribute.Operator.Equals\n        ) style {\n            fontSize(25.px)\n        }\n    }\n    \n    // A convenient way to create a class selector\n    // AppStylesheet.container can be used as a class in component attrs\n    val container by style {\n        color(Color.red)\n        \n        // hover selector for a class\n        self + hover() style { // self is a selector for `container`\n            color(Color.green)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Focus Assignment in ComposePanel on Desktop\nDESCRIPTION: This fix ensures that the focus is correctly assigned to the first focusable child in the `ComposePanel` during desktop application usage.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Fixed `ComposePanel.requestFocus()`, making it correctly assign focus to the first focusable child\n\n```\n\n----------------------------------------\n\nTITLE: Running the Compose HTML Application with Gradle\nDESCRIPTION: Shell commands for running the Compose HTML application. Includes both standard and continuous compilation modes.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Getting_Started/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew jsBrowserRun\n```\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew jsBrowserRun --continuous\n```\n\n----------------------------------------\n\nTITLE: VoiceOver & Accessibility Focus in ComposePanel on macOS\nDESCRIPTION: This enhancement ensures that the macOS VoiceOver feature correctly recognizes the `ComposePanel`, improving accessibility.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\n// When using `ComposePanel` inside a Swing application on macOS, VoiceOver will now correctly go into the `ComposePanel` when traversing accessible elements\n\n```\n\n----------------------------------------\n\nTITLE: Implementing MenuBar in Compose Desktop Window\nDESCRIPTION: Creates a window with a customized menu bar including submenus, checkboxes, shortcuts, and mnemonics. Features dynamic menu updates and action tracking.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Tray_Notifications_MenuBar_new/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.drawscope.DrawScope\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.input.key.Key\nimport androidx.compose.ui.input.key.KeyShortcut\nimport androidx.compose.ui.window.MenuBar\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\n\n@OptIn(ExperimentalComposeUiApi::class)\nfun main() = application {\n    var action by remember { mutableStateOf(\"Last action: None\") }\n    var isOpen by remember { mutableStateOf(true) }\n\n    if (isOpen) {\n        var isSubmenuShowing by remember { mutableStateOf(false) }\n\n        Window(onCloseRequest = { isOpen = false }) {\n            MenuBar {\n                Menu(\"File\", mnemonic = 'F') {\n                    Item(\"Copy\", onClick = { action = \"Last action: Copy\" }, shortcut = KeyShortcut(Key.C, ctrl = true))\n                    Item(\"Paste\", onClick = { action = \"Last action: Paste\" }, shortcut = KeyShortcut(Key.V, ctrl = true))\n                }\n                Menu(\"Actions\", mnemonic = 'A') {\n                    CheckboxItem(\n                        \"Advanced settings\",\n                        checked = isSubmenuShowing,\n                        onCheckedChange = {\n                            isSubmenuShowing = !isSubmenuShowing\n                        }\n                    )\n                    if (isSubmenuShowing) {\n                        Menu(\"Settings\") {\n                            Item(\"Setting 1\", onClick = { action = \"Last action: Setting 1\" })\n                            Item(\"Setting 2\", onClick = { action = \"Last action: Setting 2\" })\n                        }\n                    }\n                    Separator()\n                    Item(\"About\", icon = AboutIcon, onClick = { action = \"Last action: About\" })\n                    Item(\"Exit\", onClick = { isOpen = false }, shortcut = KeyShortcut(Key.Escape), mnemonic = 'E')\n                }\n            }\n\n            Box(\n                modifier = Modifier.fillMaxSize(),\n                contentAlignment = Alignment.Center\n            ) {\n                Text(text = action)\n            }\n        }\n    }\n}\n\nobject AboutIcon : Painter() {\n    override val intrinsicSize = Size(256f, 256f)\n\n    override fun DrawScope.onDraw() {\n        drawOval(Color(0xFFFFA500))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Images Using Canvas in Compose for Desktop\nDESCRIPTION: Demonstrates how to draw images (bitmap, SVG, and vector drawable) directly on a Canvas composable, providing lower-level control over image rendering.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Image_And_Icons_Manipulations/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.Paint\nimport androidx.compose.ui.graphics.drawscope.drawIntoCanvas\nimport androidx.compose.ui.graphics.vector.rememberVectorPainter\nimport androidx.compose.ui.graphics.withSave\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.res.loadImageBitmap\nimport androidx.compose.ui.res.loadSvgPainter\nimport androidx.compose.ui.res.loadXmlImageVector\nimport androidx.compose.ui.res.useResource\nimport androidx.compose.ui.window.singleWindowApplication\nimport org.xml.sax.InputSource\n\nfun main() = singleWindowApplication {\n    val density = LocalDensity.current // to calculate the intrinsic size of vector images (SVG, XML)\n\n    val sample = remember {\n        useResource(\"sample.png\", ::loadImageBitmap)\n    }\n    val ideaLogo = remember {\n        useResource(\"idea-logo.svg\") { loadSvgPainter(it, density) }\n    }\n    val composeLogo = rememberVectorPainter(\n        remember {\n            useResource(\"compose-logo.xml\") { loadXmlImageVector(InputSource(it), density) }\n        }\n    )\n\n    Canvas(\n        modifier = Modifier.fillMaxSize()\n    ) {\n        drawIntoCanvas { canvas ->\n            canvas.withSave {\n                canvas.drawImage(sample, Offset.Zero, Paint())\n                canvas.translate(sample.width.toFloat(), 0f)\n                with(ideaLogo) {\n                    draw(ideaLogo.intrinsicSize)\n                }\n                canvas.translate(ideaLogo.intrinsicSize.width, 0f)\n                with(composeLogo) {\n                    draw(Size(100f, 100f))\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Compose Multiplatform Project\nDESCRIPTION: This bash script executes the test suite for the Compose Multiplatform project.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/components/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./test.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Dependencies for Compose HTML Testing\nDESCRIPTION: Shows how to add the necessary compose.html.testUtils dependency to the jsTest sourceSet in a Compose Multiplatform project build file.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Using_Test_Utils/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nsourceSets {\n    val jsMain by getting {\n        dependencies {\n            implementation(compose.html.core)\n            implementation(compose.runtime)\n            //....\n        }\n    }\n    val jsTest by getting {\n        implementation(kotlin(\"test-js\"))\n        implementation(compose.html.testUtils)\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compose Multiplatform Desktop Dependencies in Gradle (Groovy)\nDESCRIPTION: This snippet demonstrates how to set up the required dependencies for a Compose Multiplatform desktop project using Groovy DSL in Gradle. It includes the compose.desktop.currentOs dependency and configures the application plugin.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/components/resources/demo/shared/src/desktopMain/composeResources/files/platform-text.txt#2025-04-21_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.jvm'\n    id 'org.jetbrains.compose'\n}\n\ndependencies {\n    implementation compose.desktop.currentOs\n}\n\ncompose.desktop {\n    application {\n        mainClass = \"MainKt\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Desktop Application Tray Icon in Kotlin\nDESCRIPTION: Configures a system tray icon with a quit menu option and associates the same icon with the application window. Uses Compose Multiplatform UI framework for desktop application development.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Image_And_Icons_Manipulations/README.md#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.window.Tray\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\n\nfun main() = application {\n    val icon = painterResource(\"sample.png\")\n\n    Tray(\n        icon = icon,\n        menu = {\n            Item(\"Quit App\", onClick = ::exitApplication)\n        }\n    )\n\n    Window(onCloseRequest = ::exitApplication, icon = icon) {\n        Image(\n            painter = icon,\n            contentDescription = \"Icon\",\n            modifier = Modifier.fillMaxSize()\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Entry Point for Web Application\nDESCRIPTION: HTML file that serves as the entry point for the web application. It includes a root div for rendering the Compose UI and links to the compiled JavaScript.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Getting_Started/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sample</title>\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"REPLACE_WITH_YOUR_MODULE_NAME.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Example entitlements.plist file\nDESCRIPTION: This is an example of the `entitlements.plist` file, which configures entitlements for macOS applications.  It defines various security settings, including app sandbox, JIT allowance, and device audio input.  `TEAMID` and `APPID` need to be replaced with your actual Team ID and App Bundle ID.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>com.apple.security.app-sandbox</key>\n    <true/>\n    <key>com.apple.security.cs.allow-jit</key>\n    <true/>\n    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>\n    <true/>\n    <key>com.apple.security.cs.disable-library-validation</key>\n    <true/>\n    <key>com.apple.security.cs.allow-dyld-environment-variables</key>\n    <true/>\n    <key>com.apple.security.cs.debugger</key>\n    <true/>\n    <key>com.apple.security.device.audio-input</key>\n    <true/>\n    <key>com.apple.application-identifier</key>\n    <string>TEAMID.APPID</string>\n    <key>com.apple.developer.team-identifier</key>\n    <string>TEAMID</string>\n    <!-- Add additional entitlements here, for example for network or hardware access. -->\n</dict>\n</plist>\n\n```\n\n----------------------------------------\n\nTITLE: Building Jetpack Compose Desktop Distribution\nDESCRIPTION: This command packages the application for the current operating system using Gradle. It is necessary to have correctly set up the project and ensured all dependencies are installed. The output binaries are stored in a specified build directory.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/issues/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew :desktop:packageDistributionForCurrentOS\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Colors in Kotlin (Web)\nDESCRIPTION: New syntax for defining CSS colors using top-level functions instead of Color object methods. This change improves readability and consistency.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nrgb(...)\nhsl(...)\n```\n\n----------------------------------------\n\nTITLE: Loading Images from Resources in Compose for Desktop\nDESCRIPTION: Demonstrates how to load and display images from application resources using painterResource which supports raster and vector formats.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Image_And_Icons_Manipulations/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.window.singleWindowApplication\n\nfun main() = singleWindowApplication {\n    Image(\n        painter = painterResource(\"sample.png\"),\n        contentDescription = \"Sample\",\n        modifier = Modifier.fillMaxSize()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: External Declarations for React Components - Kotlin\nDESCRIPTION: Illustrates how to declare external React components to be used within Kotlin applications, emphasizing the necessity of these declarations for functionality.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/html/with-react/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n\"external object ReactYoutubePlayer { \\n    // declarations here \\n}\"\n```\n\n----------------------------------------\n\nTITLE: Example runtime-entitlements.plist file\nDESCRIPTION: This is an example of the `runtime-entitlements.plist` file for configuring entitlements specifically for the JVM runtime.  It includes settings for the app sandbox, JIT allowance, and other security-related configurations. These entitlements are distinct from the main application entitlements.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>com.apple.security.app-sandbox</key>\n    <true/>\n    <key>com.apple.security.cs.allow-jit</key>\n    <true/>\n    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>\n    <true/>\n    <key>com.apple.security.cs.disable-library-validation</key>\n    <true/>\n    <key>com.apple.security.cs.allow-dyld-environment-variables</key>\n    <true/>\n    <key>com.apple.security.cs.debugger</key>\n    <true/>\n    <key>com.apple.security.device.audio-input</key>\n    <true/>\n</dict>\n</plist>\n\n```\n\n----------------------------------------\n\nTITLE: Running Jetpack Compose Desktop Application\nDESCRIPTION: This command runs the desktop application for the Github Issues viewer using Gradle. It assumes Gradle is properly configured in your environment. The application can also be run directly through the IDE using the desktop configuration. Outputs may vary based on project setup.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/issues/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew :desktop:run\n```\n\n----------------------------------------\n\nTITLE: Loading Resources in Kotlin (Desktop)\nDESCRIPTION: Updated resource loading functions for images and vectors. The old functions have been replaced with a unified painterResource function.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\npainterResource\n```\n\n----------------------------------------\n\nTITLE: Implementing Windowless System Tray in Compose Desktop\nDESCRIPTION: Creates a minimal system tray application without a window interface. Demonstrates how to create a tray icon with a simple exit menu option.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Tray_Notifications_MenuBar_new/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.drawscope.DrawScope\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.window.Tray\nimport androidx.compose.ui.window.application\n\nfun main() = application {\n    Tray(\n        icon = TrayIcon,\n        menu = {\n            Item(\n                \"Exit\",\n                onClick = ::exitApplication\n            )\n        }\n    )\n}\n\nobject TrayIcon : Painter() {\n    override val intrinsicSize = Size(256f, 256f)\n\n    override fun DrawScope.onDraw() {\n        drawOval(Color(0xFFFFA500))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Desktop Application via Gradle Command\nDESCRIPTION: Command to run the desktop version of the Code Viewer application using Gradle.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/codeviewer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew desktopApp:run\n```\n\n----------------------------------------\n\nTITLE: Setting Provisioning Profiles via Gradle DSL\nDESCRIPTION: This code shows how to configure provisioning profiles for macOS applications in Gradle, which is necessary for testing on TestFlight. It specifies the file paths for both the main provisioning profile and the runtime provisioning profile. This requires JDK 18 or higher.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nmacOS {\n    provisioningProfile.set(project.file(\"embedded.provisionprofile\"))\n    runtimeProvisioningProfile.set(project.file(\"runtime.provisionprofile\"))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Desktop Application via Gradle\nDESCRIPTION: Command to run the desktop version of the widgets gallery application using Gradle\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/widgets-gallery/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew desktopApp:run\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Tab Navigation with OutlinedTextField in Compose Multiplatform\nDESCRIPTION: Demonstrates the default tab navigation behavior in Compose Multiplatform using OutlinedTextField components. The focus moves in composition order (order of appearance) when pressing tab or shift+tab. This example creates 5 text fields arranged vertically with spacers between them.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Tab_Navigation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.ui.window.application\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.WindowState\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.material.OutlinedTextField\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.DpSize\nimport androidx.compose.ui.unit.dp\n\nfun main() = application {\n    Window(\n        state = WindowState(size = DpSize(350.dp, 500.dp)),\n        onCloseRequest = ::exitApplication\n    ) {\n        Box(\n            modifier = Modifier.fillMaxSize(),\n            contentAlignment = Alignment.Center\n        ) {\n            Column(\n                modifier = Modifier.padding(50.dp)\n            ) {\n                for (x in 1..5) {\n                    val text = remember { mutableStateOf(\"\") }\n                    OutlinedTextField(\n                        value = text.value,\n                        singleLine = true,\n                        onValueChange = { text.value = it }\n                    )\n                    Spacer(modifier = Modifier.height(20.dp))\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convenient Controlled Input Components in Kotlin Compose\nDESCRIPTION: Shows how to use the pre-built controlled input components with proper state management and event handling.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Controlled_Uncontrolled_Inputs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval inputState = remember { mutableStateOf(\"Some Text\") }\n\nTextInput(value = inputState.value) {\n    onInput { event -> inputState.value = event.value }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Desktop Version of Jetsnack\nDESCRIPTION: This snippet provides the Gradle command to run the desktop version of the Jetsnack application. It is meant to be executed in the terminal after opening the project in IntelliJ IDEA. This command allows users to test the application in a desktop environment.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/jetsnack/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :desktop:run\n```\n\n----------------------------------------\n\nTITLE: Initializing Window with Icon in Kotlin (Desktop)\nDESCRIPTION: Example of initializing a Window with an icon using the new API. The old BufferedImage parameter has been replaced with a Painter.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nWindow(icon: Painter)\n```\n\n----------------------------------------\n\nTITLE: Running Desktop App via Gradle Command\nDESCRIPTION: Gradle command to run the desktop application version of the Graphics2D example. This command executes the desktop application target using Gradle.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/graphics-2d/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew desktopApp:run\n```\n\n----------------------------------------\n\nTITLE: Negating CSS Numeric Values in Kotlin (Web)\nDESCRIPTION: Simplified syntax for negating CSS numeric values directly, improving code readability and reducing verbosity.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\n-cssNumericValue\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Plugin Management for Compose Multiplatform\nDESCRIPTION: Updates the settings.gradle.kts file to include the necessary repositories for the Compose Gradle plugin, particularly the JetBrains Space repository.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Getting_Started/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npluginManagement {\n    repositories {\n        gradlePluginPortal()\n        maven(\"https://maven.pkg.jetbrains.space/public/p/compose/dev\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Native Desktop Distribution with Gradle\nDESCRIPTION: Command for packaging the Notepad application as a native desktop distribution for the current operating system. The output binaries will be generated in the 'build/compose/binaries' directory.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/notepad/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew packageDistributionForCurrentOS\n# outputs are written to build/compose/binaries\n```\n\n----------------------------------------\n\nTITLE: Creating Compose Multiplatform Entry Point for iOS\nDESCRIPTION: The ComposeEntryPoint function is the Kotlin entry point for Compose Multiplatform, returning a UIViewController. It's defined in the main.ios.kt file.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/interop/ios-compose-in-swiftui/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun ComposeEntryPoint(): UIViewController\n```\n\n----------------------------------------\n\nTITLE: Building Native Desktop Distribution\nDESCRIPTION: Command sequence to package the application for distribution on the current operating system. The output is written to the desktop/build/compose/binaries directory.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/codeviewer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :desktop:packageDistributionForCurrentOS\n# outputs are written to desktop/build/compose/binaries\n```\n\n----------------------------------------\n\nTITLE: Testing Coroutine Timing in JetBrains Compose UI\nDESCRIPTION: This Kotlin snippet illustrates a change in testing methodology from JetBrains Compose 1.8.0-alpha01, whereby manual advancement of test time using `mainClock.advanceTimeBy` is necessary instead of relying on `waitForIdle()`. The test structure involves updating state with a delay and validating the result post-idle wait, necessitating clock manipulation to account for coroutine delays.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nvar updateText by mutableStateOf(false)\nvar text by mutableStateOf(\"0\")\nsetContent {\n    LaunchedEffect(updateText) {\n        if (updateText) {\n            delay(1000)\n            text = \"1\"\n        }\n    }\n}\nupdateText = true\nwaitForIdle()\nassertEquals(\"1\", text)\n```\n\n----------------------------------------\n\nTITLE: Setting Application Window Icon in Compose for Desktop\nDESCRIPTION: Illustrates how to set a custom window icon for a Compose for Desktop application by passing an icon parameter to the Window or singleWindowApplication functions.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Image_And_Icons_Manipulations/README.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.paint\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\n\nfun main() = application {\n    val icon = painterResource(\"sample.png\")\n    Window(\n        onCloseRequest = ::exitApplication,\n        icon = icon\n    ) {\n        Box(Modifier.paint(icon).fillMaxSize())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Native Desktop Distribution\nDESCRIPTION: Command to package a native desktop distribution of the application for the current operating system. Output files are written to the desktop/build/compose/binaries directory.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/widgets-gallery/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :desktop:packageDistributionForCurrentOS\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Platform Layers\nDESCRIPTION: Code example showing how to disable the new platform layers feature in iOS for backwards compatibility with shadow rendering.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: Kotlin\nCODE:\n```\nComposeUIViewController(configure = {\n    platformLayers = false\n}) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring First Frame Render Time in Compose Desktop\nDESCRIPTION: A snippet for measuring the first frame render time in a Compose Desktop application, useful for performance optimization after the change where the first frame draws offscreen.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.window.singleWindowApplication\n\nprivate var time by mutableStateOf(System.nanoTime())\nprivate var frame by mutableStateOf(0)\n\nfun main() = singleWindowApplication {\n    if (frame == 0) {\n        frame++\n    } else if (frame == 1) {\n        val duration = ((System.nanoTime() - time) / 1E6).toLong()\n        println(\"First frame millis: $duration\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Desktop Compilation Target in Compose Multiplatform\nDESCRIPTION: This snippet shows how to update the desktop compilation target configuration in the Gradle build script when migrating to Compose Multiplatform.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/gradle-plugins/compose/src/test/test-projects/misc/commonResources/src/commonMain/composeResources/files/file.txt#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Before\ncompose.desktop {\n    application {\n        mainClass = \"MainKt\"\n    }\n}\n\n// After\ncompose.desktop {\n    application {\n        mainClass = \"MainKt\"\n        nativeDistributions {\n            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Web Application Command - Kotlin\nDESCRIPTION: Instructions on how to execute the web application using gradle commands or IDE configurations, vital for local development and testing.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/html/with-react/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"./gradlew :jsBrowserRun\"\n```\n\n----------------------------------------\n\nTITLE: Fixing UninitializedPropertyAccessException in Desktop\nDESCRIPTION: This code patch addresses potential uninitialized property access exceptions that may arise during desktop testing.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Fix possible `UninitializedPropertyAccessException` in `desktopTest`\n\n```\n\n----------------------------------------\n\nTITLE: Distributing Compose Bird Game with Gradle\nDESCRIPTION: Command to build a distribution version of the Compose Bird game that can be opened in a browser. This creates the necessary files in the build/distributions directory including an index.html file.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/html/compose-bird/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew jsBrowserDistribution // and then open index.html (build/distributions)\n```\n\n----------------------------------------\n\nTITLE: Using React Effect in Compose - Kotlin\nDESCRIPTION: Defines a custom Compose effect `UseReactEffect(...)` that allows rendering content using React within a Compose application. Similar to the previous snippet, this is not part of a library and has specific usage requirements.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/html/with-react/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"UseReactEffect(...) { \\n    // implementation details here \\n}\"\n```\n\n----------------------------------------\n\nTITLE: Accessibility Focus Handling in ComposePanel on Windows\nDESCRIPTION: This fix ensures that focus transitions correctly to the `ComposePanel` when using NVDA on Windows, addressing accessibility concerns.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\n// When using `ComposePanel` inside a Swing application on Windows with NVDA turned on, focus will now correctly go into the `ComposePanel` when traversing with (ctrl)-shift-tab\n\n```\n\n----------------------------------------\n\nTITLE: Building Production Web Bundle\nDESCRIPTION: Gradle command to create a production-ready web bundle in the build/distributions directory\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/templates/html-library-template/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew jsBrowserProductionWebpack\n```\n\n----------------------------------------\n\nTITLE: Saving WindowState Without Crash\nDESCRIPTION: This fix allows the system to save `WindowState` even if the size is unspecified, preventing crashes.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Correctly save `WindowState` with unspecified `size` instead of crashing\n\n```\n\n----------------------------------------\n\nTITLE: Gradle Plugin Dependencies Configuration\nDESCRIPTION: Configures Jetbrains Compose Multiplatform dependencies across various Jetpack Compose libraries and versions\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: Gradle\nCODE:\n```\norg.jetbrains.compose:1.6.10\norg.jetbrains.androidx.lifecycle:lifecycle-*:2.8.0\norg.jetbrains.androidx.navigation:navigation-*:2.7.0-alpha07\n```\n\n----------------------------------------\n\nTITLE: Reading Exact Count of Bytes from InputStream on JVM\nDESCRIPTION: This implementation ensures that the system reads exactly the requested count of bytes from an InputStream, enhancing file handling reliability.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Read exactly requested count of bytes from InputStream on jvm platforms\n\n```\n\n----------------------------------------\n\nTITLE: Gradle Property for Disabling Compose Resources\nDESCRIPTION: Configuration to disable Compose Resources publication and multimodule support in case of problems\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: Gradle\nCODE:\n```\norg.jetbrains.compose.resources.multimodule.disable=true\n```\n\n----------------------------------------\n\nTITLE: Preventing Duplicate skiko.wasm in Web Distribution\nDESCRIPTION: This fix ensures that the web application distribution does not contain duplicate instances of skiko.wasm, avoiding potential conflicts.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Make sure the web app distribution doesn't contain a duplicate `skiko.wasm`\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Compose Multiplatform Desktop Dependencies in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to configure the necessary dependencies for a Compose Multiplatform desktop project using Kotlin DSL in Gradle. It includes the compose.desktop.currentOs() dependency and sets up the application plugin.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/components/resources/demo/shared/src/desktopMain/composeResources/files/platform-text.txt#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\")\n    id(\"org.jetbrains.compose\")\n}\n\ndependencies {\n    implementation(compose.desktop.currentOs)\n}\n\ncompose.desktop {\n    application {\n        mainClass = \"MainKt\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CursorDropdownMenu in Kotlin (Desktop)\nDESCRIPTION: Example of using the renamed CursorDropdownMenu, which was previously called ContextMenu.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nCursorDropdownMenu\n```\n\n----------------------------------------\n\nTITLE: Publishing Gradle Plugin for Compose Multiplatform\nDESCRIPTION: This command publishes the Gradle plugin for Compose Multiplatform to the local Maven repository.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/compose/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/publishGradlePluginToMavenLocal\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlinx Coroutines Swing Dependency in Gradle\nDESCRIPTION: Demonstrates how to add the kotlinx-coroutines-swing dependency in a Gradle build file to replace the previously bundled dependency in Compose Multiplatform 1.1.1.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-swing:$coroutinesVersion\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Compose HTML Application with Gradle\nDESCRIPTION: Command to launch a Compose HTML application in a web browser using Gradle. This runs the jsBrowserRun task which compiles the application and starts a development server.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/html/landing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :jsBrowserRun\n```\n\n----------------------------------------\n\nTITLE: Material3 Dependency Replacement (Kotlin DSL)\nDESCRIPTION: This code snippet shows how to replace the standard Material3 dependency with a specific version to work around a prerelease issue. It explicitly defines the Material3 version to use a specific older alpha release, until a stable version is available. This is a temporary fix before a later merge.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"org.jetbrains.compose.material3:material3:1.8.0-alpha03\")\n```\n\n----------------------------------------\n\nTITLE: Setting Bundle ID for macOS Application in Gradle\nDESCRIPTION: Kotlin DSL snippet showing how to configure the bundle ID for a macOS application, which uniquely identifies the app in Apple's ecosystem.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nmacOS {\n    bundleID = \"com.example-company.example-app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Google Maven Repository Configuration in Gradle\nDESCRIPTION: Gradle configuration to add the required Google Maven repository for Compose Multiplatform dependencies.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nrepositories {\n    ...\n    google()\n}\n```\n\n----------------------------------------\n\nTITLE: Building Native Desktop Distribution for Compose Multiplatform\nDESCRIPTION: This Gradle command packages the desktop application for the current operating system. The output binaries are written to the 'desktopApp/build/compose/binaries' directory.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/todoapp-lite/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew :desktopApp:packageDistributionForCurrentOS\n# outputs are written to desktopApp/build/compose/binaries\n```\n\n----------------------------------------\n\nTITLE: Installing the Android Version of Jetsnack\nDESCRIPTION: This snippet shows the command needed to install the debug version of the Jetsnack application on an Android device. Executing this command from the terminal while in the project folder will deploy the application to a connected Android device for testing purposes.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/jetsnack/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :android:installDebug\n```\n\n----------------------------------------\n\nTITLE: Installing Web Drivers for Selenium Tests in Kotlin\nDESCRIPTION: This command uses Gradle to install the necessary web drivers for running Selenium tests. It specifically installs the chromedriver, which is required for automating Chrome browser interactions in the tests.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/html/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n./gradlew installWebDrivers\n```\n\n----------------------------------------\n\nTITLE: Running MacOS application via Gradle for different CPU architectures\nDESCRIPTION: Commands to run the MacOS version of the chat application using Gradle, with different commands for Intel and Apple Silicon CPUs.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/chat/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n- on Intel CPU: `./gradlew :shared:runDebugExecutableMacosX64`\n- on Apple Silicon: `./gradlew :shared:runDebugExecutableMacosArm64`\n```\n\n----------------------------------------\n\nTITLE: Building Kotlin/Wasm Jetsnack Application\nDESCRIPTION: This snippet provides the Gradle command to build and run the web version of the Jetsnack application using Kotlin/Wasm. It requires you to run the command in IntelliJ IDEA terminal after opening the project repository. The command executes the web target for Kotlin/Wasm, enabling users to view the application in their browser.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/jetsnack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :web:wasmJsRun\n```\n\n----------------------------------------\n\nTITLE: Running Desktop Application via Gradle - Kotlin\nDESCRIPTION: This command runs the desktop application for the image gallery using the Gradle build system. It is intended to be executed in the terminal and assumes that Gradle is properly set up in the project.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/imageviewer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew desktopApp:run\n```\n\n----------------------------------------\n\nTITLE: Running Desktop Jetpack Compose Application with CEF Integration\nDESCRIPTION: Command for running the application using Gradle. This executes the main application with CEF integration.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/experimental/cef/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew run\n```\n\n----------------------------------------\n\nTITLE: Running desktop application via Gradle\nDESCRIPTION: Command to run the desktop version of the chat application using Gradle.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/chat/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew desktopApp:run\n```\n\n----------------------------------------\n\nTITLE: Running Native MacOS Build for ARM Processors\nDESCRIPTION: Gradle command to run the experimental native build of the Graphics2D example on MacOS with ARM (Apple Silicon) processors. This executes the debug build of the application.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/graphics-2d/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew runDebugExecutableMacosArm64\n```\n\n----------------------------------------\n\nTITLE: Running Desktop App via Gradle in Compose Multiplatform\nDESCRIPTION: This command uses Gradle to run the desktop version of the TodoApp. It executes the 'run' task in the 'desktopApp' module.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/todoapp-lite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew desktopApp:run\n```\n\n----------------------------------------\n\nTITLE: Running Desktop Jetpack Compose Application in Browser Sliced Mode\nDESCRIPTION: Command for running the application in browser sliced mode using Gradle with additional arguments.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/experimental/cef/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew run --args=\"slices\"\n```\n\n----------------------------------------\n\nTITLE: Running Native MacOS Build for Intel Processors\nDESCRIPTION: Gradle command to run the experimental native build of the Graphics2D example on MacOS with Intel (x64) processors. This executes the debug build of the application.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/graphics-2d/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew runDebugExecutableMacosX64\n```\n\n----------------------------------------\n\nTITLE: Running Desktop Demo via Gradle for Compose Multiplatform Resources\nDESCRIPTION: This command runs the desktop demo application for the resources library using Gradle.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/components/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :resources:demo:desktopApp:run\n```\n\n----------------------------------------\n\nTITLE: Building Native Desktop Distribution - Kotlin\nDESCRIPTION: This command builds the native distribution for the desktop application. The output binaries are located in the specified build directory. Ensure that the environment is set up correctly to execute this command.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/imageviewer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :desktop:packageDistributionForCurrentOS\n# outputs are written to desktopApp/build/compose/binaries\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests with Gradle in Compose Multiplatform\nDESCRIPTION: Command to start the performance tests by executing the runIde Gradle task. This launches the IDE with performance testing configurations enabled.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/benchmarks/intellij/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew runIde\n```\n\n----------------------------------------\n\nTITLE: Running Web Application via Gradle - Kotlin\nDESCRIPTION: This command runs the web application for the image gallery using Gradle. Note that web support is currently in alpha, and functionality may change. Feedback is encouraged.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/imageviewer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :webApp:wasmJsRun\n```\n\n----------------------------------------\n\nTITLE: Notarizing macOS App via Gradle Task\nDESCRIPTION: This command shows how to notarize a DMG package using a Gradle task.  It requires providing Apple ID, app-specific password, and team ID as parameters.  The task builds, signs, and uploads the .dmg installer for notarization by Apple.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_7\n\nLANGUAGE: gradle\nCODE:\n```\n\n./gradlew notarizeDmg \\\n          -Pcompose.desktop.mac.notarization.appleID=<APPLE_ID> \\\n          -Pcompose.desktop.mac.notarization.password=<PASSWORD> \\\n          -Pcompose.desktop.mac.notarization.teamID=<TEAM_ID>\n\n```\n\n----------------------------------------\n\nTITLE: Running the iOS Application of Jetsnack\nDESCRIPTION: This snippet outlines the instruction to set up and run the iOS version of the Jetsnack application. While the detailed command is not provided directly, it indicates that users should refer to the setup instructions for the correct procedures for running the iOS application.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/jetsnack/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nTo setup the environment, please consult these [instructions](https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-setup.html).\n```\n\n----------------------------------------\n\nTITLE: Running Compose Multiplatform Resolvability Check with Shell Script\nDESCRIPTION: Shell command to execute a check script that verifies Compose Multiplatform's resolvability with specific Kotlin and Compose versions. The command passes Kotlin version 2.1.0 and Compose version 1.8.0-alpha02 as system properties.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/templates/maven-test-project/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./check.sh -Dkotlin.version=2.1.0 -Dcompose.version=1.8.0-alpha02\n```\n\n----------------------------------------\n\nTITLE: Running Compose Web Application in Browser\nDESCRIPTION: Gradle command to run the Compose Web application in a development browser environment\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/templates/html-library-template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew jsBrowserRun\n```\n\n----------------------------------------\n\nTITLE: Setting Entitlement Files via Gradle DSL\nDESCRIPTION: This code snippet demonstrates how to set the paths to the entitlements files (`entitlements.plist` and `runtime-entitlements.plist`) within the Gradle configuration for macOS applications.  This allows the application and its runtime environment to be configured with the specified entitlements during the build process.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nmacOS {\n    entitlementsFile.set(project.file(\"entitlements.plist\"))\n    runtimeEntitlementsFile.set(project.file(\"runtime-entitlements.plist\"))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Version for Compose Multiplatform Publishing\nDESCRIPTION: This command sets an environment variable for a custom version of Compose Multiplatform, which is used in the publishing process.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/compose/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport COMPOSE_CUSTOM_VERSION=0.0.0-custom-version\n```\n\n----------------------------------------\n\nTITLE: Copying local properties template for Space Maven configuration\nDESCRIPTION: Creates a local.properties file from a template file to store Space Maven repository configuration details.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/delete-packages-from-space/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp template.local.properties local.properties\n```\n\n----------------------------------------\n\nTITLE: Running Compose Multiplatform Sample IntelliJ Plugins\nDESCRIPTION: Command to run the sample IntelliJ plugins from the tooling directory. This launches an instance of IntelliJ with the sample plugins loaded.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tooling/compose-intellij-platform/sample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :compose-intellij-platform:sample:all-plugins:runIde\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with Gradle for Jetpack Compose Desktop\nDESCRIPTION: This command executes all benchmarks in the project using the Gradle build tool. It relies on the kotlinx.benchmark library to perform the benchmark measurements.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/benchmarks/desktop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew mainBenchmar\n```\n\n----------------------------------------\n\nTITLE: Publishing Compose HTML Library\nDESCRIPTION: This command publishes the Compose HTML library to the local Maven repository.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/compose/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/publishHtmlLibraryToMavenLocal\n```\n\n----------------------------------------\n\nTITLE: Generating list of Space packages to delete with version pattern\nDESCRIPTION: Runs a Gradle task to generate a list of packages matching a specific version pattern (0.4.0-preview-*) that can be deleted from the Space Maven repository.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/delete-packages-from-space/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew generateListOfPackagesToDelete -Pspace.package.version=0.4.0-preview-*\n```\n\n----------------------------------------\n\nTITLE: Running Compose Multiplatform IDE Plugin with Gradle\nDESCRIPTION: This command launches a test IDE instance with the plugin loaded. It should be executed from the 'idea-plugin' directory to properly initialize the development environment.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/idea-plugin/examples/simple-preview-example/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew runIde\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Compose Integration Tests\nDESCRIPTION: Command to run only specific compose compiler integration tests by filtering based on the case name included in the file path.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/html/compose-compiler-integration/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :compose-compiler-integration:checkComposeCases -PFILTER_CASES=CaseName\n```\n\n----------------------------------------\n\nTITLE: Publishing Additional Components for Compose Multiplatform\nDESCRIPTION: This command publishes additional components of Compose Multiplatform to the local Maven repository.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/compose/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/publishComponentsToMavenLocal\n```\n\n----------------------------------------\n\nTITLE: Listing Space projects and package repositories\nDESCRIPTION: Executes a Gradle task to list available projects and package repositories in JetBrains Space, helping identify the correct project and repository IDs.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/delete-packages-from-space/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew listProjectsAndPackageRepositories\n```\n\n----------------------------------------\n\nTITLE: Listing Team IDs using xcrun altool\nDESCRIPTION: This command uses the `xcrun altool` to list the team IDs associated with a given Apple ID and notarization password. This is helpful to retrieve the correct TEAM_ID to pass into the notarization task. Replace `<Apple ID>` and `<Notarization password>` with your actual credentials.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nxcrun altool --list-providers -u <Apple ID> -p <Notarization password>\"\n\n```\n\n----------------------------------------\n\nTITLE: Fixing IndexOutOfBoundsException on Windows\nDESCRIPTION: This fix resolves an IndexOutOfBoundsException that occurs on Windows when traversing accessibility elements.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Fix `IndexOutOfBoundsException` crash on Windows when traversing a11y elements\n\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome with Manual GC for Web Benchmarks\nDESCRIPTION: Command to launch Google Chrome with manual garbage collection enabled for web benchmarks\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/benchmarks/multiplatform/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopen -a Google\\ Chrome --args --js-flags=\"--expose-gc\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Skiko Docker Image to JetBrains Compose Repository\nDESCRIPTION: Series of commands to login to JetBrains Space registry, tag the local Skiko image, and push it to the Compose Docker repository.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/docker/windows/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker login public.registry.jetbrains.space\ndocker tag skiko-build-windows-ltsc2019-amd64:latest public.registry.jetbrains.space/p/compose/docker/skiko-build-windows-ltsc2019-amd64:latest\ndocker push public.registry.jetbrains.space/p/compose/docker/skiko-build-windows-ltsc2019-amd64:latest\n```\n\n----------------------------------------\n\nTITLE: Storing App-Specific Password in Keychain for Notarization\nDESCRIPTION: Terminal command to store an app-specific password in the keychain for use during the notarization process, eliminating the need to include the password in scripts.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Any name can be used instead of NOTARIZATION_PASSWORD\n\nxcrun altool --store-password-in-keychain-item \"NOTARIZATION_PASSWORD\"\n             --username <apple_id>\n             --password <password>\n```\n\n----------------------------------------\n\nTITLE: Processing Key Events for Virtual Keyboard in Web\nDESCRIPTION: This enhancement processes keydown and keyup events for virtual keyboard interactions, improving user experience.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Process `keydown` and `keyup` keys for identified keys from virtual keyboard\n\n```\n\n----------------------------------------\n\nTITLE: Running MacOS Native Benchmark Commands\nDESCRIPTION: Gradle commands to run benchmarks natively on MacOS for different processor architectures - Arm64 and Intel\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/benchmarks/multiplatform/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :benchmarks:runReleaseExecutableMacosArm64\n```\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :benchmarks:runReleaseExecutableMacosX64\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Skiko Windows\nDESCRIPTION: Command to build a Docker image for Skiko with Windows LTSC 2019 on AMD64 architecture with 2GB memory limit.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/docker/windows/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t skiko-build-windows-ltsc2019-amd64:latest -m 2G .\n```\n\n----------------------------------------\n\nTITLE: Downloading Skiko Maven Artifacts for Compose Integration\nDESCRIPTION: Script commands to download Skiko Maven artifacts using the import_maven_artifacts.py script for integration with Compose. Sets the Skiko version as an environment variable and imports the needed JVM artifacts for multiple platforms.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/release.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# you may need to add `maven(\"https://packages.jetbrains.team/maven/p/ui/dev\")` \n# the repository section of corresponding build.gradle.kts\nexport SKIKO_VERSION=\"0.1.6\"\nimport_maven_artifacts.py --name \"org.jetbrains.skiko:skiko-jvm:$SKIKO_VERSION\"\nimport_maven_artifacts.py --name \"org.jetbrains.skiko:skiko-jvm-runtime-linux:$SKIKO_VERSION\"\nimport_maven_artifacts.py --name \"org.jetbrains.skiko:skiko-jvm-runtime-windows:$SKIKO_VERSION\"\nimport_maven_artifacts.py --name \"org.jetbrains.skiko:skiko-jvm-runtime-macos:$SKIKO_VERSION\"\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Resource Directory with podspec Task\nDESCRIPTION: This feature allows the creation of an empty resource directory using the 'podspec' task instead of the generic 'podInstall' command.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Create an empty resource dir with \"podspec\" task instead \"podInstall\"\n\n```\n\n----------------------------------------\n\nTITLE: Running Web Browser Benchmark Command\nDESCRIPTION: Gradle command to run benchmarks in web browser using WebAssembly\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/benchmarks/multiplatform/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :benchmarks:wasmJsBrowserProductionRun\n```\n\n----------------------------------------\n\nTITLE: Publishing Skiko Docker Image to Compose Repository\nDESCRIPTION: Series of commands to log into the Compose Docker registry, tag the local image, and push it to the remote repository.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/docker/linux/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker login public.registry.jetbrains.space\ndocker tag skiko-build-ubuntu-1404-amd64:latest public.registry.jetbrains.space/p/compose/docker/skiko-build-ubuntu-1404-amd64:latest \ndocker push public.registry.jetbrains.space/p/compose/docker/skiko-build-ubuntu-1404-amd64:latest\n```\n\n----------------------------------------\n\nTITLE: HTML Equivalent of Styled Text in Compose HTML\nDESCRIPTION: Shows the HTML equivalent of styling text with Compose HTML. This demonstrates how the Compose HTML DSL translates to standard HTML with inline CSS styles.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<span style=\"color: red;\">Red text</span>\n```\n\n----------------------------------------\n\nTITLE: Running JS Demo in Browser with WebAssembly Skia via Gradle for Compose Multiplatform\nDESCRIPTION: This command runs the JavaScript demo in a browser environment using WebAssembly Skia, executed through Gradle.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/components/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :resources:demo:shared:jsBrowserDevelopmentRun\n```\n\n----------------------------------------\n\nTITLE: Release Notes Subsections\nDESCRIPTION: List of possible subsections for categorizing changes by platform or module\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tools/changelog/PR_FORMAT.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Multiple Platforms     # any module, 2 or more platform changes\n- iOS                    # any module, iOS-only changes\n- Desktop                # any module, Desktop-only changes\n- Web                    # any module, Web-only changes\n- Android                # any module, Android-only changes\n- Resources              # specific module, prefer it over the platform ones\n- Gradle Plugin          # specific module, prefer it over the platform ones\n- Lifecycle              # specific module, prefer it over the platform ones\n- Navigation             # specific module, prefer it over the platform ones\n```\n\n----------------------------------------\n\nTITLE: Publishing Compose Uber Jar to Repository\nDESCRIPTION: These commands set the necessary environment variables for authentication and then publish the Compose Uber Jar to the Compose repository using Gradle.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/compose-uber-jar/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport COMPOSE_REPO_USERNAME=<COMPOSE_REPO_USERNAME>\nexport COMPOSE_REPO_KEY=<COMPOSE_REPO_KEY>\n./gradlew publishToComposeRepo\n```\n\n----------------------------------------\n\nTITLE: Setting Hyperlink-Specific Attributes for A Elements in Compose HTML\nDESCRIPTION: Shows how to set attributes specific to the A (anchor) element in Compose HTML. These specialized functions provide type-safe access to hyperlink-specific attributes like href, target, and rel.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nA(\n    attrs = {\n        href(\"https://localhost:8080/page2\")\n        target(ATarget.Blank)\n        rel(ARel.Next)\n        hreflang(\"en\")\n        download(\"https://...\")\n    }\n) {}\n```\n\n----------------------------------------\n\nTITLE: Running Compose Integration Tests from Project Root\nDESCRIPTION: Basic command to run all compose compiler integration tests from the project root directory.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/html/compose-compiler-integration/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :compose-compiler-integration:checkComposeCases\n```\n\n----------------------------------------\n\nTITLE: Prerelease Fix Release Notes\nDESCRIPTION: Example of release notes for a prerelease fix that will be included in alpha/beta/rc changelog but excluded from stable\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tools/changelog/PR_FORMAT.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## Release Notes\n### Fixes - Multiple Platforms\n- _(prerelease fix)_ Fixed CPU overheating on pressing Shift appeared in 1.8.0-alpha02\n```\n\n----------------------------------------\n\nTITLE: Building Compose Uber Jar with Gradle\nDESCRIPTION: This command builds the Compose Uber Jar locally using Gradle. The resulting jar file will be available at build/libs/compose-full.jar.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/compose-uber-jar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew shadowJar\n```\n\n----------------------------------------\n\nTITLE: Multiple Platform Changes Release Notes\nDESCRIPTION: Example of release notes containing multiple changes across different platforms and categories\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tools/changelog/PR_FORMAT.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## Release Notes\n### Features - Desktop\n- Describe change 1\n  - Describe details\n- Describe change 2\n\n### Fixes - Web\n- Describe change 3\n```\n\n----------------------------------------\n\nTITLE: Running Compose Integration Tests with Specific Version\nDESCRIPTION: Command to run compose compiler integration tests with a specific Compose version specified as a parameter.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/html/compose-compiler-integration/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :compose-compiler-integration:checkComposeCases -Pcompose.version=1.2.0-beta03\n```\n\n----------------------------------------\n\nTITLE: Listing ProGuard Keep Rules for Compose Multiplatform\nDESCRIPTION: A list of identifier names that are marked to be kept (not obfuscated) by ProGuard rules in a Compose Multiplatform project. These include the main entry point, shape functions, and lambda expressions needed for proper functioning.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/gradle-plugins/compose/src/test/test-projects/application/proguard/main-methods.expected.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nkeptByKeepRule\nkeptByKeepRule$lambda$5\nmain\nmainShape\nmainShape$lambda$2\n```\n\n----------------------------------------\n\nTITLE: Executing package deletion from Space Maven repository\nDESCRIPTION: Runs the Gradle task to delete packages from the Space Maven repository based on the edited list in the build/packages-to-delete.txt file.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/delete-packages-from-space/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew deletePackages\n```\n\n----------------------------------------\n\nTITLE: Running Image Download Script\nDESCRIPTION: A shell script command to download 999 different images from Picsum Photos with 512x512 resolution, which must be executed before building the project.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/benchmarks/showcases/LazyGridImageView/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./download_images.sh\n```\n\n----------------------------------------\n\nTITLE: Finding Mac App Store Developer Certificates in Keychain\nDESCRIPTION: Terminal commands to locate Mac App Store developer certificates, used when publishing applications through the App Store.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/security find-certificate -c \"3rd Party Mac Developer Application\"\n/usr/bin/security find-certificate -c \"3rd Party Mac Developer Installer\"\n```\n\n----------------------------------------\n\nTITLE: Running Desktop Benchmark Command\nDESCRIPTION: Gradle command to execute benchmarks on desktop platform\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/benchmarks/multiplatform/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :benchmarks:run\n```\n\n----------------------------------------\n\nTITLE: Finding Developer ID Application Certificates in Keychain\nDESCRIPTION: Terminal command to locate all installed Developer ID Application certificates in the keychain, used for signing applications distributed outside the App Store.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/security find-certificate -c \"Developer ID Application\"\n```\n\n----------------------------------------\n\nTITLE: Running Skiko Docker Container\nDESCRIPTION: Command to run the Skiko Docker container interactively. Includes notes on customizing memory and CPU allocation using Docker run arguments.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/docker/linux/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it skiko-build-ubuntu-1404-amd64:latest\n```\n\n----------------------------------------\n\nTITLE: Compose Web Dependencies in web-dev-13\nDESCRIPTION: Shows the updated dependency configuration for Compose Web in version 0.0.0-web-dev-13, where the web dependency was split into widgets and core components.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/html/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n   val jsMain by getting {\n            dependencies {\n                // add this dependency if you want to use the common API widgets\n                // full example here - https://github.com/JetBrains/compose-jb/tree/1f43be9c912a681a05008117574ecc1473226ffe/examples/falling_balls_with_web\n                implementation(compose.web.widgets)\n\n                // add this dependency if you want to use the DOM API\n                // full example here - https://github.com/JetBrains/compose-jb/tree/1f43be9c912a681a05008117574ecc1473226ffe/examples/web_landing\n                implementation(compose.web.core)\n                implementation(compose.runtime)\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Opening Certificate Assistant in macOS Keychain Access\nDESCRIPTION: Terminal command path to open the Certificate Assistant dialog in Keychain Access for creating a certificate signing request.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKeychain Access > Certificate Assistant > Request a Certificate from a Certificate Authority\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Skiko on Ubuntu 14.04\nDESCRIPTION: Command to build a Docker image named 'skiko-build-ubuntu-1404-amd64' using the current directory's Dockerfile.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/docker/linux/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t skiko-build-ubuntu-1404-amd64:latest .\n```\n\n----------------------------------------\n\nTITLE: Compose Web Dependencies in web-dev-12\nDESCRIPTION: Shows the dependency configuration for Compose Web in version 0.0.0-web-dev-12, where a single web dependency was used alongside the runtime.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/html/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n   val jsMain by getting {\n            dependencies {\n                implementation(compose.web.web)\n                implementation(compose.runtime)\n            }\n        }\n\n```\n\n----------------------------------------\n\nTITLE: Running Skiko Docker Container\nDESCRIPTION: Command to run the Skiko Windows Docker container interactively with a terminal.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/ci/docker/windows/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it skiko-build-windows-ltsc2019-amd64:latest \n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for JetBrains Compose Gradle Plugin\nDESCRIPTION: Defines two key environment variables used to configure the JetBrains Compose Gradle plugin. COMPOSE_GRADLE_PLUGIN_VERSION specifies the plugin version, while COMPOSE_GRADLE_PLUGIN_COMPOSE_VERSION determines the JetBrains Compose version used by the plugin.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/gradle-plugins/README.md#2025-04-21_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nCOMPOSE_GRADLE_PLUGIN_VERSION=<version>\nCOMPOSE_GRADLE_PLUGIN_COMPOSE_VERSION=<version>\n```\n\n----------------------------------------\n\nTITLE: Release Notes Sections\nDESCRIPTION: List of possible main sections for release notes\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tools/changelog/PR_FORMAT.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Highlights             # major features, performance improvements\n- Known Issues           # issues planned to be fixed, with possible workarounds\n- Breaking Changes       # incompatible changes without deprecation cycle\n- Migration Notes        # deprecations, removals, minimal version increases, defined behavior changes\n- Features               # minor features, performance improvements\n- Fixes                  # bug fixes, undefined behavior changes\n```\n\n----------------------------------------\n\nTITLE: Updating Package Imports for Compose Multiplatform\nDESCRIPTION: This code snippet demonstrates how to update import statements when migrating from Compose Desktop to Compose Multiplatform, showing both the old and new package paths.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/gradle-plugins/compose/src/test/test-projects/misc/commonResources/src/commonMain/composeResources/files/file.txt#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Before\nimport androidx.compose.ui.awt.ComposePanel\nimport androidx.compose.ui.awt.ComposeWindow\nimport androidx.compose.ui.platform.DesktopPlatform\n\n// After\nimport androidx.compose.ui.platform.ComposePanel\nimport androidx.compose.ui.window.ComposeWindow\n// DesktopPlatform was removed\n```\n\n----------------------------------------\n\nTITLE: Detailed iOS Change Release Notes\nDESCRIPTION: Example of release notes with a single iOS change and multiple detail points\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tools/changelog/PR_FORMAT.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Release Notes\n### Highlights - iOS\n- Describe a change\n  - Describe details 1\n  - Describe details 2\n```\n\n----------------------------------------\n\nTITLE: Creating a Composable Button for Testing\nDESCRIPTION: Defines a simple composable TestButton function that will be the subject of unit testing. It renders a button with the given text and handles clicks through a callback.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Using_Test_Utils/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// This is a function that we want to test\n@Composable\nfun TestButton(text: String, onButtonClick: () -> Unit) {\n    Button(attrs = {\n        onClick { onButtonClick() }\n    }) {\n        Text(text)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring plugin.xml for IntelliJ Plugin with Compose\nDESCRIPTION: This XML configuration in plugin.xml declares the plugin metadata and dependencies. It includes the required dependency on the Compose platform plugin needed for IntelliJ plugin development with Compose.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tooling/compose-intellij-platform/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- src/main/resources/META-INF/plugin.xml -->\n<idea-plugin>\n    <id>com.jetbrains.ComposeDemoPlugin</id>\n    <name>Jetpack Compose for Desktop Demo</name>\n    <vendor>Demo Vendor</vendor>\n\n    <description>...</description>\n\n    <depends>com.intellij.modules.platform</depends>\n    <depends>org.jetbrains.compose.intellij.platform</depends>\n</idea-plugin>\n```\n\n----------------------------------------\n\nTITLE: Adding Google Maven Repository - Gradle\nDESCRIPTION: Configuration to add Google's Maven repository to resolve androidx.annotation and collection dependencies.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: gradle\nCODE:\n```\nrepositories {\n    ...\n    google()\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Webpack CLI Issues in Compose HTML Projects\nDESCRIPTION: Workaround for a common issue with webpack-cli in Compose HTML projects. This Gradle configuration fixes the compatibility problem with webpack components.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Getting_Started/README.md#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// a temporary workaround for a bug in jsRun invocation - see https://youtrack.jetbrains.com/issue/KT-48273\nafterEvaluate {\n    rootProject.extensions.configure<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootExtension> {\n        versions.webpackDevServer.version = \"4.0.0\"\n        versions.webpackCli.version = \"4.9.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Resource Accessors Escaping\nDESCRIPTION: This fix provides correct escaping for resource accessors, enabling the use of special characters in resource names.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Fix resource accessors escaping. Now it is possible to use resources with names: \"package\", \"is\", \"item_$xxx\" etc\n\n```\n\n----------------------------------------\n\nTITLE: Executing XCTest Cases on iOS Simulator with xcodebuild\nDESCRIPTION: Command for running the instrumented UI tests on an iOS Simulator. This command navigates to the launcher directory and executes the test suite using xcodebuild, targeting the iPhone 16 Pro simulator.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/instrumented-test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd launcher \nxcodebuild test -scheme Launcher -destination \"platform=iOS Simulator,name=iPhone 16 Pro\"\n```\n\n----------------------------------------\n\nTITLE: Removing contextClassLoader Usage in Resources on JVM\nDESCRIPTION: This change removes the usage of contextClassLoader on JVM targets to streamline resource handling.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Delete `contextClassLoader` usage on JVM targets\n\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Copyright Notice Template\nDESCRIPTION: A boilerplate copyright notice template to be included in project files when applying the Apache License 2.0. The template includes placeholders for year and copyright owner information, along with standard license text.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/html/landing/license/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright {yyyy} {name of copyright owner}\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Highlighting Library Dependency for Web Landing\nDESCRIPTION: Third-party library highlight.js version 10.7.2 used in the web landing project with BSD 3-Clause License\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/examples/html/landing/license/third_party/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* highlight.js@10.7.2:\n    * BSD 3-Clause License: [highlight.js](highlightjs.txt)\n    * https://github.com/highlightjs/highlight.js/blob/main/LICENSE\n```\n\n----------------------------------------\n\nTITLE: Ensuring Task Execution in Gradle Plugin\nDESCRIPTION: This Gradle plugin fix ensures that the method tryGetSkikoRuntimeIfNeeded is only executed during actual task execution, improving performance and reducing overhead.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Make sure tryGetSkikoRuntimeIfNeeded is executed only during the task execution\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Compose Desktop Dependencies with Compose Multiplatform\nDESCRIPTION: This code snippet shows how to replace JetBrains Compose Desktop dependencies with the new Compose Multiplatform dependencies in your Gradle build script.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/gradle-plugins/compose/src/test/test-projects/misc/commonResources/src/commonMain/composeResources/files/file.txt#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Before\nimplementation(compose.desktop.currentOs)\n\n// After\nimplementation(compose.desktop.common)\nimplementation(compose.uiTooling)\nimplementation(compose.preview)\n```\n\n----------------------------------------\n\nTITLE: Updating Resource Import Statement - Kotlin\nDESCRIPTION: Shows the change in resource import statements from single class import to wildcard or explicit imports.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nimport <modulePackage>.generated.resources.Res\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport <modulePackage>.generated.resources.*\n```\n\n----------------------------------------\n\nTITLE: CSS Classes Behavior Example in Compose Web\nDESCRIPTION: Demonstrates the difference in how multiple 'classes' calls behave between web-dev-12 and web-dev-13 versions, with the newer version accumulating class names instead of replacing them.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/html/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nDiv(attrs = {\n    classes(\"a\", \"b\")\n    classes(\"c\", \"d\")\n}) {}\n```\n\n----------------------------------------\n\nTITLE: Basic Release Notes - No Changes\nDESCRIPTION: Example of release notes when there are no notable changes to report\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tools/changelog/PR_FORMAT.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Release Notes\nN/A\n```\n\n----------------------------------------\n\nTITLE: Simple iOS Change Release Notes\nDESCRIPTION: Example of release notes with a single iOS-specific change\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tools/changelog/PR_FORMAT.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Release Notes\n### Highlights - iOS\n- Describe a change\n```\n\n----------------------------------------\n\nTITLE: Setting Input Type via Attributes in Compose HTML\nDESCRIPTION: Demonstrates an alternative way to specify the input type for an Input element using the attrs block instead of the dedicated type parameter. This approach uses the type() function within the attrs block.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/HTML/Building_UI/README.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nInput(attrs = { type(InputType.Text) })\n```\n\n----------------------------------------\n\nTITLE: Setting Window Icon with singleWindowApplication in Compose for Desktop\nDESCRIPTION: Shows an alternative approach to set a window icon when using the singleWindowApplication helper function.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/tutorials/Image_And_Icons_Manipulations/README.md#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.Text\nimport androidx.compose.ui.graphics.painter.BitmapPainter\nimport androidx.compose.ui.res.loadImageBitmap\nimport androidx.compose.ui.res.useResource\nimport androidx.compose.ui.window.singleWindowApplication\n\nfun main() {\n    val icon = BitmapPainter(useResource(\"sample.png\", ::loadImageBitmap))\n    singleWindowApplication(icon = icon) {\n        Text(\"Hello World!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Package for MacOS in Compose Multiplatform\nDESCRIPTION: This snippet shows how to configure MacOS-specific packaging options in the Compose Multiplatform build script, including bundle ID and signing options.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/gradle-plugins/compose/src/test/test-projects/misc/commonResources/src/commonMain/composeResources/files/file.txt#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        nativeDistributions {\n            macOS {\n                bundleID = \"com.myapp\"\n                signing {\n                    sign.set(true)\n                    identity.set(\"Developer ID Application: ...\")\n                }\n                notarization {\n                    appleID.set(\"...\")\n                    password.set(\"...\")\n                    teamID.set(\"...\")\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Outdated Build Services in Gradle Plugin\nDESCRIPTION: This fix removes deprecated build services from the Gradle plugin, ensuring that the build process remains clean and efficient.\nSOURCE: https://github.com/jetbrains/compose-multiplatform/blob/master/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Delete outdated build services\n\n```"
  }
]