[
  {
    "owner": "neo4j",
    "repo": "python-graph-visualization",
    "content": "TITLE: Creating Basic Graph Visualization with Neo4j-viz\nDESCRIPTION: Example demonstrating how to create a basic graph visualization using Node and Relationship objects. Shows creation of nodes with custom properties like size and caption, defining relationships between nodes, and rendering the visualization graph.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom neo4j_viz import Node, Relationship, VisualizationGraph\n\nnodes = [\n    Node(id=0, size=10, caption=\"Person\"),\n    Node(id=1, size=10, caption=\"Product\"),\n    Node(id=2, size=20, caption=\"Product\"),\n    Node(id=3, size=10, caption=\"Person\"),\n    Node(id=4, size=10, caption=\"Product\"),\n]\nrelationships = [\n    Relationship(\n        source=0,\n        target=1,\n        caption=\"BUYS\",\n    ),\n    Relationship(\n        source=0,\n        target=2,\n        caption=\"BUYS\",\n    ),\n    Relationship(\n        source=3,\n        target=2,\n        caption=\"BUYS\",\n    ),\n]\n\nVG = VisualizationGraph(nodes=nodes, relationships=relationships)\n\nVG.render()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Graph Visualization with Neo4j-viz\nDESCRIPTION: Example demonstrating how to create a basic graph visualization using Neo4j-viz. Shows creation of nodes and relationships with custom properties like size and captions, then rendering the visualization graph.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/python-wrapper/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom neo4j_viz import Node, Relationship, VisualizationGraph\n\nnodes = [\n    Node(id=0, size=10, caption=\"Person\"),\n    Node(id=1, size=10, caption=\"Product\"),\n    Node(id=2, size=20, caption=\"Product\"),\n    Node(id=3, size=10, caption=\"Person\"),\n    Node(id=4, size=10, caption=\"Product\"),\n]\nrelationships = [\n    Relationship(\n        source=0,\n        target=1,\n        caption=\"BUYS\",\n    ),\n    Relationship(\n        source=0,\n        target=2,\n        caption=\"BUYS\",\n    ),\n    Relationship(\n        source=3,\n        target=2,\n        caption=\"BUYS\",\n    ),\n]\n\nVG = VisualizationGraph(nodes=nodes, relationships=relationships)\n\nVG.render()\n```\n\n----------------------------------------\n\nTITLE: Directly Modifying Nodes and Relationships in Neo4j Visualization (Python)\nDESCRIPTION: This snippet demonstrates how to directly modify properties of nodes and relationships in a VisualizationGraph object by accessing and changing their attributes.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/customizing.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# VG is a VisualizationGraph object\nVG.nodes[0].size = 10\nVG.nodes[0].properties[\"height\"] = 170\nVG.relationships[4].caption = \"BUYS\"\n```\n\n----------------------------------------\n\nTITLE: Coloring Nodes with Custom Colors in Neo4j Visualization (Python)\nDESCRIPTION: This snippet demonstrates how to color nodes in a VisualizationGraph object based on a discrete node field 'caption' using custom colors. It shows both manual color definition and using a color palette from the palettable library.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/customizing.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom neo4j_viz.colors import ColorSpace\n\n# VG is a VisualizationGraph object\nVG.color_nodes(\n    field=\"caption\",\n    [\"red\", \"#7fffd4\", (255, 255, 255, 0.5), \"hsl(270, 60%, 70%)\"],\n    color_space=ColorSpace.DISCRETE\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom palettable.wesanderson import Moonrise1_5\n\n# VG is a VisualizationGraph object\nVG.color_nodes(field=\"caption\", Moonrise1_5.colors)  # PropertyType.DISCRETE is default\n```\n\n----------------------------------------\n\nTITLE: Coloring Nodes with Continuous Color Space in Neo4j Visualization (Python)\nDESCRIPTION: This example shows how to color nodes in a VisualizationGraph object based on a continuous property 'centrality_score' using a custom color gradient from red to green.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/customizing.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom neo4j_viz.colors import PropertyType\n\n# VG is a VisualizationGraph object\nVG.color_nodes(\n    property=\"centrality_score\",\n    [(255, 0, 0), (191, 64, 0), (128, 128, 0), (64, 191, 0), (0, 255, 0)]  # From red to green\n    color_space=ColorSpace.CONTINUOUS\n)\n```\n\n----------------------------------------\n\nTITLE: Resizing Nodes in Neo4j Visualization (Python)\nDESCRIPTION: This snippet demonstrates how to resize nodes in a VisualizationGraph object by providing a dictionary of node sizes and a range for scaling. It resizes a specific node and then scales all nodes to a specified range.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/customizing.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# VG is a VisualizationGraph object\nVG.resize_nodes(sizes={42: 88}, node_radius_min_max=(5, 20))\n```\n\n----------------------------------------\n\nTITLE: Pinning Nodes in Neo4j Visualization (Python)\nDESCRIPTION: This example shows how to pin or unpin specific nodes in a VisualizationGraph object using the toggle_nodes_pinned method. It pins one node and unpins another.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/customizing.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# VG is a VisualizationGraph object\nVG.toggle_nodes_pinned({1337: True, 42: False})\n```\n\n----------------------------------------\n\nTITLE: Importing Neo4j Database query results into neo4j-viz\nDESCRIPTION: Example of using the from_neo4j method to import query results from a Neo4j Database into a VisualizationGraph object.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/integration.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom neo4j import GraphDataScience\nfrom neo4j_viz.gds import from_gds\n\n# Modify this to match your Neo4j instance's URI and credentials\nURI = \"neo4j://localhost:7687\"\nauth = (\"neo4j\", \"password\")\n\nwith GraphDatabase.driver(URI, auth=auth) as driver:\n    driver.verify_connectivity()\n\n    result = driver.execute_query(\n        \"MATCH (n)-[r]->(m) RETURN n,r,m\",\n        database_=\"neo4j\",\n        result_transformer_=Result.graph,\n    )\n\nVG = from_neo4j(result)\n```\n\n----------------------------------------\n\nTITLE: Importing Pandas DataFrames into neo4j-viz\nDESCRIPTION: Example of using the from_dfs method to import node and relationship data from Pandas DataFrames into a VisualizationGraph object.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/integration.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pandas import DataFrame\nfrom neo4j_viz.pandas import from_dfs\n\nnodes = DataFrame({\n    \"id\": [1, 2, 3],\n    \"caption\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"size\": [20, 10, 10],\n})\nrelationships = DataFrame({\n    \"source\": [1, 2],\n    \"target\": [2, 3],\n    \"caption\": [\"LIKES\", \"KNOWS\"],\n})\n\nVG = from_dfs(nodes, relationships)\n```\n\n----------------------------------------\n\nTITLE: Importing Neo4j Graph Data Science projection into neo4j-viz\nDESCRIPTION: Example of using the from_gds method to import a GDS graph projection, including PageRank and Weakly Connected Components properties, into a VisualizationGraph object.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/integration.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom graphdatascience import GraphDataScience\nfrom neo4j_viz.gds import from_gds\n\ngds = GraphDataScience(...)\nG = gds.graph.project(...)\n\n# Compute the PageRank and Weakly Connected Components\ngds.pageRank.mutate(G, mutateProperty=\"pagerank\")\ngds.wcc.mutate(G, mutateProperty=\"componentId\")\n\n# Import the projection into a `VisualizationGraph`\n# Make sure to include `pagerank` and `componentId`\nVG = from_gds(\n    gds,\n    G,\n    size_property=\"pagerank\",\n    additional_node_properties=[\"componentId\"],\n)\n\n# Color the nodes by the `componentId` property, so that the nodes are\n# colored by the connected component they belong to\nVG.color_nodes(property=\"componentId\")\n```\n\n----------------------------------------\n\nTITLE: Installing Neo4j Visualization Package using pip\nDESCRIPTION: Command to install the neo4j-viz package using pip package manager\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install neo4j-viz\n```\n\n----------------------------------------\n\nTITLE: Installing Neo4j Visualization Package with pip\nDESCRIPTION: Command to install the neo4j-viz package using pip package manager.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/python-wrapper/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install neo4j-viz\n```\n\n----------------------------------------\n\nTITLE: Installing Neo4j-Viz Base Package with pip\nDESCRIPTION: Command to install the latest version of the neo4j-viz library using pip package manager.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/installation.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install neo4j-viz\n```\n\n----------------------------------------\n\nTITLE: Installing neo4j-viz with Pandas support\nDESCRIPTION: Command to install neo4j-viz with additional Pandas support using pip.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/integration.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install neo4j-viz[pandas]\n```\n\n----------------------------------------\n\nTITLE: Installing Neo4j-Viz with Pandas Support\nDESCRIPTION: Command to install neo4j-viz with additional dependencies required for the Pandas DataFrames importer functionality (from_dfs).\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/installation.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install neo4j-viz[pandas]\n```\n\n----------------------------------------\n\nTITLE: Installing neo4j-viz with Neo4j Database support\nDESCRIPTION: Command to install neo4j-viz with additional Neo4j Database support using pip.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/integration.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install neo4j-viz[neo4j]\n```\n\n----------------------------------------\n\nTITLE: Installing Neo4j-Viz with Neo4j Database Support\nDESCRIPTION: Command to install neo4j-viz with additional dependencies required for the Neo4j database importer functionality (from_neo4j).\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/installation.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install neo4j-viz[neo4j]\n```\n\n----------------------------------------\n\nTITLE: Installing neo4j-viz with Graph Data Science support\nDESCRIPTION: Command to install neo4j-viz with additional Graph Data Science (GDS) support using pip.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/integration.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install neo4j-viz[gds]\n```\n\n----------------------------------------\n\nTITLE: Installing Neo4j-Viz with Graph Data Science Support\nDESCRIPTION: Command to install neo4j-viz with additional dependencies required for the Neo4j Graph Data Science importer functionality (from_gds).\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/installation.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install neo4j-viz[gds]\n```\n\n----------------------------------------\n\nTITLE: Installing Neo4j-Viz with Notebook Tutorial Dependencies\nDESCRIPTION: Command to install neo4j-viz with all additional dependencies required for running the notebook examples and tutorials.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/installation.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install neo4j-viz[notebook]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Package Locally for Development\nDESCRIPTION: Instructions for installing the Python wrapper locally using pip, with an option for development mode that allows changes to take effect without reinstallation.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install . # run with --editable for development mode\n```\n\n----------------------------------------\n\nTITLE: Building JavaScript Applet for Graph Visualization\nDESCRIPTION: Commands to install JavaScript dependencies and build the JavaScript visualization applet that will be used by the Python wrapper.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn          # Install JavaScript dependencies\nyarn build    # Build JavaScript resources to be used by Python code\n```\n\n----------------------------------------\n\nTITLE: Installing Python Development Dependencies\nDESCRIPTION: Commands to install the project's Python package in development mode along with additional development dependencies.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\npip install \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for Neo4j Node Class in Python\nDESCRIPTION: This directive configures Sphinx to automatically generate documentation for the Node class from the neo4j_viz module. It includes all members of the class except for model_config.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/api-reference/node.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: neo4j_viz.Node\n    :members:\n    :exclude-members: model_config\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for Neo4j Relationship Class in reStructuredText\nDESCRIPTION: This directive configures automatic documentation generation for the Relationship class from the neo4j_viz module. It includes all class members but explicitly excludes the model_config attribute, which is likely an internal configuration detail not relevant for users.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/api-reference/relationship.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: neo4j_viz.Relationship\n    :members:\n    :exclude-members: model_config\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Directive for Neo4j VisualizationGraph Class\nDESCRIPTION: This reStructuredText (RST) directive tells Sphinx to automatically generate documentation for the VisualizationGraph class from the neo4j_viz module, including all of its members (methods and attributes).\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/api-reference/visualization-graph.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: neo4j_viz.VisualizationGraph\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting CaptionAlignment Enumeration for Neo4j Python Visualization\nDESCRIPTION: Auto-generates documentation for the CaptionAlignment enumeration class. This enum likely defines possible alignment options for captions in graph visualizations.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/api-reference/render_options.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoenum:: neo4j_viz.CaptionAlignment\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Layout Enumeration for Neo4j Python Visualization\nDESCRIPTION: Auto-generates documentation for the Layout enumeration class. This enum probably defines different layout algorithms or styles for arranging nodes and edges in the graph visualization.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/api-reference/render_options.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoenum:: neo4j_viz.Layout\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Renderer Enumeration for Neo4j Python Visualization\nDESCRIPTION: Auto-generates documentation for the Renderer enumeration class. This enum likely specifies different rendering options or engines for displaying the graph visualization.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/api-reference/render_options.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoenum:: neo4j_viz.Renderer\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Autodocumenting ColorSpace Enum in Python for Neo4j Visualization\nDESCRIPTION: This code snippet uses Sphinx's autoenum directive to automatically generate documentation for the ColorSpace enum defined in the neo4j_viz.colors module. It includes all members of the enum in the documentation.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/api-reference/colors.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoenum:: neo4j_viz.colors.ColorSpace\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for Neo4j Visualization Module\nDESCRIPTION: Sphinx documentation directive to automatically generate API documentation from the neo4j_viz.neo4j module. Uses the autodoc extension to include all members of the module.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/api-reference/from_neo4j.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: neo4j_viz.neo4j\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Importing Neo4j Graph Data Science Library Documentation\nDESCRIPTION: Sphinx documentation directive that automatically imports and documents all members from the neo4j_viz.gds module using reStructuredText format.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/api-reference/from_gds.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: neo4j_viz.gds\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Importing Neo4j Pandas Module Documentation\nDESCRIPTION: RestructuredText directive to automatically generate documentation for the neo4j_viz.pandas module and all its members.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/api-reference/from_pandas.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: neo4j_viz.pandas\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Running Python Unit Tests\nDESCRIPTION: Command to execute the Python unit tests for the wrapper using pytest.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npytest python-wrapper/tests\n```\n\n----------------------------------------\n\nTITLE: Setting Up Neo4j with GDS for Integration Testing\nDESCRIPTION: Commands to start a Docker container with Neo4j and the Graph Data Science (GDS) library for integration testing.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd test-envs/neo4j-gds\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running Neo4j GDS Integration Tests\nDESCRIPTION: Commands to set environment variables and run tests that require a Neo4j database with Graph Data Science (GDS) installed.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexport NEO4J_URI=localhost:7687 # or credentials for Aura API\ncd python-wrapper/\npytest tests --include-neo4j-and-gds\n```\n\n----------------------------------------\n\nTITLE: Running Snowflake Integration Tests\nDESCRIPTION: Commands to run tests that require a Snowflake connection.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd python-wrapper/\npytest tests/ --include-snowflake\n```\n\n----------------------------------------\n\nTITLE: Running Code Style Formatting and Checking Scripts\nDESCRIPTION: Commands to run the provided scripts for fixing code style issues and checking for linting, formatting, or typing problems.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n./scripts/makestyle.sh # try to fix linting violations and format code\n./scripts/checkstyle.sh # check for linting, format or typing issues\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Root for Neo4j-viz\nDESCRIPTION: This is a Sphinx documentation configuration for the root toctree directive that controls the structure of the documentation. It includes all files in the directory with a maxdepth of 1 and adds a 'Contents:' caption.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/api-reference/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 1\n   :caption: Contents:\n\n   *\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure for Neo4j Python Graph Visualization\nDESCRIPTION: This reStructuredText snippet sets up the structure for Sphinx documentation, including the root toctree directive. It specifies the creation date and provides a placeholder for tutorials related to the neo4j-viz package.\nSOURCE: https://github.com/neo4j/python-graph-visualization/blob/main/docs/source/tutorials/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. Graph Visualization for Python by Neo4j documentation master file, created by\n   sphinx-quickstart on Fri Jan 10 13:54:11 2025.\n   You can adapt this file completely to your liking, but it should at least\n   contain the root `toctree` directive.\n\nTutorials\n=====================================================\n\nThis chapter contains Jupyter notebook tutorials for the `neo4j-viz` package.\n\n\n.. toctree::\n   :glob:\n   :maxdepth: 1\n   :caption: Contents:\n\n   *\n```"
  }
]