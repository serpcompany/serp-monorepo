[
  {
    "owner": "rpldy",
    "repo": "react-uploady",
    "content": "TITLE: Setting up Uploady Provider Component in React\nDESCRIPTION: Basic example of using the Uploady component as a provider to enable file upload functionality in a React application. It demonstrates configuring upload options like method, destination URL, and other settings.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Uploady from \"@rpldy/uploady\";\n\nconst App = () => (<Uploady\n    multiple\n    grouped\n    maxGroupSize={2}\n    method=\"PUT\"\n    destination={{url: \"https://my-server\", headers: {\"x-custom\": \"123\"}}}>\n\n    <RestOfMyApp/>\n</Uploady>)\n```\n\n----------------------------------------\n\nTITLE: Implementing Chunked Uploads\nDESCRIPTION: Example showing how to implement chunked file uploads for servers that support this functionality.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport ChunkedUploady from \"@rpldy/chunked-uploady\";\nimport UploadButton from \"@rpldy/upload-button\";\n\nconst App = () => (<ChunkedUploady\n    destination={{ url: \"https://my-server/upload\" }}\n    chunkSize={5242880}>\n       \n    <UploadButton/>\n</ChunkedUploady>);\n```\n\n----------------------------------------\n\nTITLE: React Native File Upload Implementation with Native Uploady\nDESCRIPTION: Example showing how to implement file uploads in React Native using the NativeUploady provider and document picker. Demonstrates the basic pattern of using a document picker and initiating uploads with the uploady context.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/native/native-uploady/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useCallback } from \"react\";\nimport { View, Button } from \"react-native\";\nimport DocumentPicker from \"react-native-document-picker/index\";\nimport NativeUploady from \"@rpldy/native-uploady\";\n\nconst Upload = () => {\n\n  const pickFile = useCallback(async () => {\n      const res = await DocumentPicker.pick({\n        type: [DocumentPicker.types.images],\n      });\n\n      uploadyContext.upload(res);\n  }, [uploadyContext]);\n\n    return <View>\n               <Button title=\"Upload File\" onPress={pickFile} />\n          </View>;\n};\n\nconst App = () => (<NativeUploady    \n    grouped\n    maxGroupSize={2}\n    method=\"PUT\"\n    destination={{url: \"https://my-server\", headers: {\"x-custom\": \"123\"}}}>\n    \n    <Upload/>\n    <RestOfMyApp/>\n</NativeUploady>)\n```\n\n----------------------------------------\n\nTITLE: Implementing TUS Resumable Uploads\nDESCRIPTION: Example demonstrating how to add support for TUS resumable uploads protocol.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport TusUploady from \"@rpldy/tus-uploady\";\nimport UploadButton from \"@rpldy/upload-button\";\n\nconst App = () => (<TusUploady\n    destination={{ url: \"https://my-tus-server/upload\" }}\n    chunkSize={2142880}\n    sendDataOnCreate>\n    <UploadButton/>\n</TusUploady>);\n```\n\n----------------------------------------\n\nTITLE: Using useChunkFinishListener Hook with ChunkedUploady\nDESCRIPTION: Example of using the useChunkFinishListener hook to monitor when chunks finish uploading. This allows tracking of upload progress and handling completion of individual chunk uploads.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/chunked-uploady/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useChunkFinishListener } from \"@rpldy/chunked-uploady\";\n\nconst MyComponent = () => {\n    useChunkFinishListener(({ chunk }) => {\n        console.log(`Chunk Finished - ${chunk.id} - attempt: ${chunk.attempt}`);\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Using UploadyContext with Custom Components\nDESCRIPTION: Demonstrates how to access the UploadyContext API through the useUploady hook to trigger file uploads programmatically. The example shows creating a custom upload button that opens the file selection dialog.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Uploady, { useUploady } from \"@rpldy/uploady\";\n\nconst MyComponent = () => { \n    const uploady = useUploady();\n\n    const onClick = ()=> {\n            uploady.showFileUpload();\n        };\n\n    return <button onClick={onClick}>Custom Upload Button</button>\n};\n\nconst App = () => (<Uploady>\n    <MyComponent/>\n</Uploady>);\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Cropping with withRequestPreSendUpdate HOC in React\nDESCRIPTION: This snippet demonstrates how to use the withRequestPreSendUpdate HOC to implement image cropping functionality before upload. It uses react-easy-crop for cropping and updates the file data with the cropped image before sending the request.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useCallback } from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport Uploady, { withRequestPreSendUpdate } from \"@rpldy/uploady\";\nimport UploadButton from \"@rpldy/upload-button\";\nimport cropImage from \"./my-image-crop-code\";\n\nconst ItemCrop = withRequestPreSendUpdate((props) => {\n    const [crop, setCrop] = useState({ x: 0, y: 0 });\n    const [cropPixels, setCropPixels] = useState(null);\n    \n    const { url, updateRequest, requestData } = props;\n     \n    const onUploadCrop = useCallback(async() => {\n        if (updateRequest && cropPixels) {\n            //replace the file data with the cropped result\n            requestData.items[0].file = await cropImage(url, requestData.items[0].file, cropPixels);\n            //resume the upload flow with the updated file data\t\t\t    \n            updateRequest({ items: requestData.items });\n        }\n    }, [url, requestData, updateRequest, cropPixels]);\n\n    const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n        setCropPixels(croppedAreaPixels);\n    }, []);\n\n    return <>            \n        <Cropper\n            image={url}\n            crop={crop}\n            onCropChange={setCrop}\n            onCropComplete={onCropComplete}\n        />           \n        <button style={{ display: updateRequest && cropPixels ? \"block\" : \"none\" }}\n                onClick={onUploadCrop}>\n            Upload Cropped\n        </button>\n    </>;\n});\n\nconst MyApp = () => {\n    return <Uploady destination={{ url: \"my-server.com/upload\" }}>\n        <UploadButton />\n        <ItemCrop id=\"batch-item-1\" />\n    </Uploady>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Hook\nDESCRIPTION: Example showing how to use the progress hook to track file upload progress.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Uploady, { useItemProgressListener } from \"@rpldy/uploady\";\nimport UploadButton from \"@rpldy/upload-button\";\n\n//must be rendered inside <Uploady>\nconst LogProgress = () => {\n    useItemProgressListener((item) => {\n        console.log(`>>>>> (hook) File ${item.file.name} completed: ${item.completed}`);\n    });\n\n    return null;\n}\n\nconst App = () => (<Uploady\n    destination={{ url: \"https://my-server/upload\" }}>\n    <LogProgress/>   \n    <UploadButton/>\n</Uploady>);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Preview Renderer with getPreviewsLoaderHook in React-Uploady\nDESCRIPTION: This code shows how to create a custom previews renderer using getPreviewsLoaderHook with useBatchAddListener. This approach gives complete control over the preview UI by providing direct access to the preview data.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-preview/README.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBatchAddListener } from \"@rpldy/uploady\";\nimport { getPreviewsLoaderHook } from \"@rpldy/upload-preview\";\n\nconst useBatchAddPreviewsData = getPreviewsLoaderHook(useBatchAddListener);\n\nconst PreviewDataCustomerViewer = () => {\n    const { previews } = useBatchAddPreviewsData({ rememberPreviousBatches: true });\n\n    return previews.map((p) =>\n        <div key={p.id}>\n            {p.name}\n            <img src={p.url}/>\n        </div>);\n};\n```\n\n----------------------------------------\n\nTITLE: Basic TUS-Uploady Implementation\nDESCRIPTION: Example showing basic implementation of TusUploady component with upload button and custom configuration.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/tus-uploady/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport TusUploady from \"@rpldy/tus-uploady\";\nimport UploadButton from \"@rpldy/upload-button\";\n\nconst App = () => (<TusUploady\n    destination={{ url: \"https://my-tus-server/upload\" }}\n    chunkSize={2142880}\n    sendDataOnCreate>\n    <UploadButton/>\n</TusUploady>);\n```\n\n----------------------------------------\n\nTITLE: Advanced React-Uploady Preview with Queue Management\nDESCRIPTION: More complex example demonstrating how to implement a visual queue of uploads with the ability to clear previews and remove individual items using the previewMethodsRef.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-preview/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Uploady, { useAbortItem } from \"@rpldy/uploady\";\nimport UploadPreview from \"@rpldy/upload-preview\";\nimport UploadButton from \"@rpldy/upload-button\";\n\nconst PreviewsWithClear = () => {\n\tconst abortItem = useAbortItem();\n\tconst previewMethodsRef = useRef();\n\tconst [previews, setPreviews] = useState([]);\n\n\tconst onPreviewsChanged = useCallback((previews) => {\n\t\tsetPreviews(previews);\n\t}, []);\n\n\tconst onClear = useCallback(() => {\n\t\tif (previewMethodsRef.current?.clear) {\n\t\t\tpreviewMethodsRef.current.clear();\n\t\t}\n\t}, [previewMethodsRef]);\n\n\tconst onRemoveItem = useCallback(() => {\n\t\tif (previewMethodsRef.current?.removePreview) {\n\t\t\tabortItem(\"item-123\"); //cancel the upload for the item\n            previewMethodsRef.current.removePreview(\"item-123\") //need the item id to remove the preview\n        }\n    }, [previewMethodsRef]);\n\t\n\treturn <>\n\t\t<button onClick={onClear}>\n            Clear {previews.length} previews\n        </button>\n\t\t<br/>\t\t\n        <UploadPreview\n            rememberPreviousBatches            \n            previewMethodsRef={previewMethodsRef}\n            onPreviewsChanged={onPreviewsChanged}\n        />            \t\t\n\t</>;\n};\n\nexport const App = () => {\t\n\treturn <Uploady destination={{ url: \"my-server.com/upload\" }}>\n\t\t<UploadButton />\n\t\t<PreviewsWithClear />\n\t</Uploady>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing TUS Uploads with React and React-Uploady\nDESCRIPTION: Example of creating a React component that uses the TUS Sender to enable resumable file uploads. It shows how to configure the TUS enhancer with parallel uploads and apply it to the uploader instance.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/tus-sender/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport createUploader from \"@rpldy/uploader\";\nimport getTusEnhancer from \"@rpldy/tus-sender\";\n\nexport const App = () => {\n\tconst inputRef = useRef(null);\n\tconst uploaderRef = useRef(null);\n\n\tuseEffect(() => {\n\t\tconst tusEnhancer = getTusEnhancer({\n            parallel: 2,                \n\t\t});\n\n\t\tuploaderRef.current = createUploader({\n\t\t\tenhancer: tusEnhancer,\n\t\t\tdestination: {url: \"my-tus-server.com\"},\n\t\t\tparams: {\n\t\t\t\tsource: \"rpldy\",\t\t\n\t\t\t}\n\t\t});\n\t}, []);\n\n\tconst onClick = useCallback(() => {\n\t\tconst input = inputRef.current;\n\t\tif (input) {\n\t\t\tinput.value = \"\";\n\t\t\tinput.click();\n\t\t}\n\t}, []);\n\n\tconst onInputChange = useCallback(() => {\n\t\tuploaderRef.current?.add(inputRef.current?.files);\n\t}, []);\n\n\treturn <div>\n\t\t<input type=\"file\" ref={inputRef} style={{ display: \"none\" }} onChange={onInputChange}/>\n\t\t<button id=\"upload-button\" onClick={onClick}>Upload with TUS</button>\n\t</div>\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Upload Component in React\nDESCRIPTION: Example of how to use the UploadUrlInput component within a React application. It demonstrates setting up Uploady, using the UploadUrlInput with a placeholder, and triggering the upload via a button click.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-url-input/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useRef } from \"react\";\nimport Uploady from \"@rpldy/uploady\";\nimport UploadUrlInput from \"@rpldy/upload-url-input\";\n\nconst MyUrlUpload = () => {\n    const uploadRef = useRef(null);\n\n    const onClick = () => {\n        if (uploadRef && uploadRef.current) {\n            uploadRef.current(); //initiate upload\n        }\n    };\n    \n    return <Uploady>\n        <UploadUrlInput placeholder=\"URL to upload\"\n            uploadRef={uploadRef} />\n        \n        <button onClick={onClick}>Upload</button>\n    </Uploady>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Upload Button\nDESCRIPTION: Basic example showing how to add Uploady and UploadButton components to create a file upload interface.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Uploady from \"@rpldy/uploady\";\nimport UploadButton from \"@rpldy/upload-button\";\n\nconst App = () => (<Uploady\n    destination={{ url: \"https://my-server/upload\" }}>\n    <UploadButton/>\n</Uploady>);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Upload Button\nDESCRIPTION: Example demonstrating how to create a custom upload button using the asUploadButton HOC.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Uploady from \"@rpldy/uploady\";\nimport { asUploadButton } from \"@rpldy/upload-button\";\n\nconst DivUploadButton = asUploadButton((props) => {\n    return <div {...props} style={{ cursor: \"pointer\" }}>\n        DIV Upload Button\n    </div>\n});\n\nconst App = () => (<Uploady\n    destination={{ url: \"https://my-server/upload\" }}>\n    <DivUploadButton/>\n</Uploady>);\n```\n\n----------------------------------------\n\nTITLE: Customizing Upload Preview with useBatchAddListener in React-Uploady\nDESCRIPTION: This code demonstrates how to use getUploadPreviewForBatchItemsMethod with useBatchAddListener to create a custom UploadPreview component that shows previews even for batches that haven't started uploading yet.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-preview/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Uploady, { useBatchAddListener } from \"@rpldy/uploady\";\nimport { getUploadPreviewForBatchItemsMethod } from \"@rpldy/upload-preview\";\nimport UploadButton from \"@rpldy/upload-button\";\n\nconst MyUploadPreview = getUploadPreviewForBatchItemsMethod(useBatchAddListener);\n\nexport const App = () => {\n    return (\n        <Uploady\n            destination={{ url: \"[upload-url]\" }}\n        >\n            <div className=\"App\">\n                <UploadButton>Upload Files</UploadButton>\n                <br />\n  \n                <MyUploadPreview\n                    maxPreviewVideoSize={2}\n                    fallbackUrl=\"https://icon-library.net/images/image-placeholder-icon/image-placeholder-icon-6.jpg\"\n                />\n            </div>\n        </Uploady>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Upload Button using asUploadButton HOC\nDESCRIPTION: Example showing how to create a custom upload button using the asUploadButton Higher Order Component. This approach allows using any component as an upload trigger while maintaining the upload functionality.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-button/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { forwardRef } from \"react\";\nimport Uploady from \"@rpldy/uploady\";\nimport { asUploadButton } from \"@rpldy/upload-button\";\n\nconst DivUploadButton = asUploadButton(forwardRef(\n    (props, ref) =>\n        <div {...props} style={{ cursor: \"pointer\" }}>\n            DIV Upload Button\n        </div>\n));\n\nconst App = () => (<Uploady\n    destination={{ url: \"https://my-server/upload\" }}>\n    <DivUploadButton/>\n</Uploady>);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Image Cropping with withBatchStartUpdate HOC in React\nDESCRIPTION: This snippet shows how to use the withBatchStartUpdate HOC to implement multi-image cropping functionality before upload. It allows users to crop multiple images in a batch before sending the upload request, using react-easy-crop for cropping.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useCallback } from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport Uploady, { withBatchStartUpdate } from \"@rpldy/uploady\";\nimport UploadButton from \"@rpldy/upload-button\";\nimport UploadPreview from \"@rpldy/upload-preview\";\nimport cropImage from \"./my-image-crop-code\";\n\nconst CropperForMultiCrop = ({ item, url, setCropForItem }) => {\n    const [crop, setCrop] = useState({ x: 0, y: 0 });\n    const [cropPixels, setCropPixels] = useState(null);\n\t\n    const onSaveCrop = async () => {\n        const cropped = await cropImage(url, item.file, cropPixels);\n        setCropForItem(item.id, cropped);\n    };\n\n    const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n        setCropPixels(croppedAreaPixels);\n    }, []);\n\t\n    return (<div>\n        <Cropper\n            image={url}\n            crop={crop}\n            onCropChange={setCrop}\n            onCropComplete={onCropComplete}\n        />\n        {cropPixels && \n            <Button onClick={onSaveCrop} id=\"save-crop-btn\">Save Crop</Button>}\n    </div>);\n};\n\nconst BatchCrop = withBatchStartUpdate((props) => {\n    const { id, updateRequest, requestData } = props;\n    const [cropped, setCropped] = useState({});\n    const hasData = !!(id && requestData);\n\t\n    const setCropForItem = (id, data) => {\n        setCropped((cropped) => ({ ...cropped, [id]: data }));\n    };\n\t\n    const onUploadAll = () => {\n        if (updateRequest) {\n            const readyItems = requestData.items\n                .map((item) => {\n                    item.file = cropped[item.id] || item.file;\n                    return item;\n                });\n\n\t\t\t\t//update the items in the batch with the cropped files\n            updateRequest({ items: readyItems });\n        }\n    };\n\n    const getPreviewCompProps = useCallback((item) => {\n        return ({\n            onPreviewSelected: setSelected,\n            isCroppedSet: cropped[item.id],\n        });\n    }, [cropped, setSelected]);\n\n    return (<div>\n        {hasData &&\n            <button onClick={onUploadAll}>Upload All</button>}\n\n        <UploadPreview\n            rememberPreviousBatches\n            PreviewComponent={ItemPreviewThumb}\n            fallbackUrl=\"https://icon-library.net/images/image-placeholder-icon/image-placeholder-icon-6.jpg\"\n            previewComponentProps={getPreviewCompProps}\n        />\n\n        {selectedItem && hasData &&\n            <CropperForMultiCrop\n                {...selected}\n                item={selectedItem}\n                setCropForItem={setCropForItem}\n            />}\n    </div>);\n});\n\nconst MultiCropQueue = () => {\n    const [currentBatch, setCurrentBatch] = useState(null);\n\n    useBatchAddListener((batch) => setCurrentBatch(batch.id));\n\n    return <BatchCrop id={currentBatch} />;\n};\n\nexport const MyApp = () => {\n    return <Uploady destination={{ url: \"my-server.com/upload\" }}>\n        <UploadButton />\n        <MultiCropQueue  />\n    </Uploady>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Item Finish Listener in React-Uploady\nDESCRIPTION: Hook that listens for item completion events, triggered when an item has finished uploading. Provides access to the upload response and status. Can be scoped to a specific item ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useItemFinishListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useItemFinishListener((item) => {\n        console.log(`item ${item.id} finished uploading, response was: `, item.uploadResponse, item.uploadStatus);  \n    });\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Cancellable Event Handler in React-Uploady\nDESCRIPTION: Example showing how to implement a cancellable event handler that prevents uploading of XML files. The handler cancels the upload by returning false when the file extension is .xml.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/uploader/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nuploader.on(UPLOADER_EVENTS.ITEM_START, (item) => {\n    let result;\n    \n    if (item.file.name.endsWith(\".xml\")) {\n        result = false; //only false will cause a cancel.\n    }\n\n    return result;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Request Pre-Send Hook in React-Uploady\nDESCRIPTION: Hook called before items are uploaded, allowing modification of upload options and items. This is a cancellable event that receives items and upload options and can return modified data.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRequestPreSend } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useRequestPreSend(({ items, options }) => {        \t\n        let method = options.method;\n\n        if (options.destination.url.startsWith(\"https://put-server\")) {\n            method = \"PUT\";\n        }            \n\n        return {\n            options: { method } //will be merged with the rest of the options \n        };  \n    });\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useBatchProgressListener Hook\nDESCRIPTION: Example of using the useBatchProgressListener hook to track upload progress. Shows how to access the batch completion percentage and loaded bytes count, with both unscoped and batch-id scoped approaches.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBatchProgressListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    const batch = useBatchProgressListener((batch) => {});\n\n    console.log(`batch ${batch.id} is ${batch.completed}% done and ${batch.loaded} bytes uploaded`)\n\n   //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useBatchStartListener Hook\nDESCRIPTION: Shows how to use the useBatchStartListener hook to detect when batch items start uploading. The example demonstrates both unscoped and batch-id scoped listeners, with support for async callback functions.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBatchStartListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useBatchStartListener((batch) => {\n        console.log(`batch ${batch.id} started uploading`);  \n    });\n\n    //or scoped:\n    useBatchStartListener((batch) => {\n        console.log(`batch ${batch.id} started uploading`);  \n    }, \"b-123\");\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Scoped useBatchProgressListener Implementation\nDESCRIPTION: Demonstrates how to scope the useBatchProgressListener hook to a specific batch by its ID, extracting the completion percentage with a default value for safety.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst { completed: batchCompleted } = useBatchProgressListener(\"batch-id\") || { completed: 0 };\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing useBatchAddListener Hook\nDESCRIPTION: Example of using the useBatchAddListener hook to capture when new batches are added to the upload queue. This event is cancellable and provides access to batch information and options.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBatchAddListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useBatchAddListener((batch, options) => {\n        console.log(`batch ${batch.id} was just added with ${batch.items.length} items`);  \n    });\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useBatchFinishListener Hook\nDESCRIPTION: Shows how to use the useBatchFinishListener hook to detect when batch items have finished uploading. This event can be scoped to a specific batch ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBatchFinishListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useBatchFinishListener((batch) => {\n        console.log(`batch ${batch.id} finished uploading`);  \n    });\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Sender with React-Uploady\nDESCRIPTION: Example showing how to use the mock sender enhancer with React-Uploady components. The example demonstrates configuring the mock sender with custom delay and progress intervals.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/mock-sender/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Uploady from \"@rpldy/uploady\";\nimport UploadButton from \"@rpldy/upload-button\";\nimport { getMockSenderEnhancer } from \"@rpldy/mock-sender\";\n\nconst mockSenderEnhancer = getMockSenderEnhancer({\n   delay: 1500, \n   progressIntervals: [20, 40, 75, 80, 90, 99]               \n});\n\nconst App = () => (\n    <Uploady\n        enhancer={mockSenderEnhancer}\n    >\n        <UploadButton />\n    </Uploady>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing useBatchErrorListener Hook\nDESCRIPTION: Example of using the useBatchErrorListener hook to catch batch-level errors, particularly those caused by invalid event handling. Can be scoped to a specific batch ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBatchErrorListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useBatchErrorListener((batch) => {\n        console.log(`batch ${batch.id} had an error: ${batch.additionalInfo}`);  \n    });\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Registering and Unregistering Event Handlers in React-Uploady\nDESCRIPTION: Demonstrates how to register an event handler for the BATCH_ADD event using on() and how to unregister it. The example shows both methods of unregistering: using the return value from on() or using the off() method directly.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/uploader/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst batchAddHandler = (batch, options) => {};\n\nconst unregister = uploader.on(UPLOADER_EVENTS.BATCH_ADD, batchAddHandler);\n\nunregister(); //is equivalent to the line below\nuploader.off(UPLOADER_EVENTS.BATCH_ADD, batchAddHandler);\n```\n\n----------------------------------------\n\nTITLE: Basic React-Uploady Preview Implementation\nDESCRIPTION: Simple example showing how to implement the UploadPreview component with a fallback URL for images that cannot be previewed.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-preview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Uploady from \"@rpldy/uploady\";\nimport UploadPreview from \"@rpldy/upload-preview\";\n\nexport const App = () => (\n     <Uploady destination={{ url: \"my-server.com/upload\" }}>     \n        <UploadPreview\n            fallbackUrl=\"https://icon-library.net/images/image-placeholder-icon/image-placeholder-icon-6.jpg\"/>\n    </Uploady>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Item Progress Listener in React-Uploady\nDESCRIPTION: Hook that receives progress updates during file upload. Returns the item object with progress information like percentage completed and bytes loaded. Can be scoped to a specific item ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useItemProgressListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    const item = useItemProgressListener((item) => {\n    \t//callback is optional for this hook\n    });\n\t\n    console.log(`item ${item.id} is ${item.completed}% done and ${item.loaded} bytes uploaded`)\n\n   //...    \n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst { completed: itemCompleted } = useItemProgressListener(\"item-id\") || { completed: 0 };\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing Upload Drop Zone Component\nDESCRIPTION: Example showing basic implementation of the UploadDropZone component within a React application. Demonstrates configuration of drag-over styling and upload grouping options.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-drop-zone/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Uploady from \"@rpldy/uploady\";\nimport UploadDropZone from \"@rpldy/upload-drop-zone\";\n\nconst App = () => (\n    <Uploady destination={destination}>\n        <UploadDropZone onDragOverClassName=\"drag-over\"\n                        grouped\n                        maxGroupSize={3}\n        >\n            <span>Drag&Drop File(s) Here</span>            \n        </UploadDropZone>\n    </Uploady>);\n```\n\n----------------------------------------\n\nTITLE: Using Item Error Listener in React-Uploady\nDESCRIPTION: Hook that listens for item upload failure events. Provides access to the error response. Can be scoped to a specific item ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useItemErrorListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useItemErrorListener((item) => {\n        console.log(`item ${item.id} failed - `, item.uploadResponse);  \n    });\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Upload Button with React-Uploady\nDESCRIPTION: A basic example demonstrating how to add Uploady and UploadButton components to a React application. This minimal implementation enables file uploading functionality to a specified destination URL.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-button/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Uploady from \"@rpldy/uploady\";\nimport UploadButton from \"@rpldy/upload-button\";\n\nconst App = () => (<Uploady\n    destination={{ url: \"https://my-server/upload\" }}>\n    <UploadButton/>\n</Uploady>);\n```\n\n----------------------------------------\n\nTITLE: Implementing useBatchCancelledListener Hook\nDESCRIPTION: Example of using the useBatchCancelledListener hook to detect when a batch has been cancelled during the BATCH_START event. Supports scoping to a specific batch ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBatchCancelledListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useBatchCancelledListener((batch) => {\n        console.log(`batch ${batch.id} was cancelled`);  \n    });\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Using useChunkStartListener Hook with ChunkedUploady\nDESCRIPTION: Example of using the useChunkStartListener hook to modify the upload URL for each chunk. This event is cancellable and allows customizing chunk upload behavior.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/chunked-uploady/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useChunkStartListener } from \"@rpldy/chunked-uploady\";\n\nconst MyComponent = () => {\n    useChunkStartListener((data) => {\n        return {\n            url: `${data.url}/${data.chunk.index}`\n        };  \n    });   \n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Retry with React-Uploady\nDESCRIPTION: Example of how to enable retry functionality in a React application using the retryEnhancer with Uploady component.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/retry-hooks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Uploady from \"@rpldy/uploady\";\nimport retryEnhancer from \"@rpldy/retry-hooks\";\nimport UploadButton from \"@rpldy/upload-button\";\n\nconst App = () => {\n    return <Uploady \n              destination={{ url: \"my-server.com/upload\" }}\n              enhancer={retryEnhancer}\n           >\n              <UploadButton/>\n           </Uploady>;               \n};\n```\n\n----------------------------------------\n\nTITLE: Using ClearResumableStore Hook\nDESCRIPTION: Example demonstrating the usage of useClearResumableStore hook to clear persisted TUS upload URLs from local storage.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/tus-uploady/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useCallback } from \"react\";\nimport { useClearResumableStore } from \"@rpldy/tus-uploady\"; \n\nconst MyComponent = () => {\n\tconst clearResumables = useClearResumableStore();\n    \n    const onClear = useCallback(() => {\n      clearResumables();\n    }, [clearResumables]);\n\n    return <button onClick={onClear}>Clear Store</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using useRetry Hook in React-Uploady\nDESCRIPTION: Demonstrates how to use the useRetry hook to implement retry functionality for individual upload items.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/retry-hooks/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { useRetry } from \"@rpldy/retry-hooks\";\n\nconst MyComponent = ( ) => {\n    const retry = useRetry();\n\n    const onClick = () => {\n        retry(\"i-123\");\n    };\n\n    return <button onClick={onClick}>retry item</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using TusResumeStartListener Hook\nDESCRIPTION: Example showing how to use the useTusResumeStartListener hook to handle resume events before TUS HEAD requests are made.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/tus-uploady/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { useTusResumeStartListener } from \"@rpldy/tus-uploady\";\n\nconst MyComponent = () => {\n    useTusResumeStartListener(({ url, item, resumeHeaders }) => {\n        return cancelResume ? false : {\n            resumeHeaders: {\n                \"x-another-header\": \"foo\",\n                \"x-test-override\": \"def\"\n            }\n        }\n    });\n\n\t//...\n};\n```\n\n----------------------------------------\n\nTITLE: Using useBatchRetry Hook in React-Uploady\nDESCRIPTION: Shows how to use the useBatchRetry hook to retry all failed items in a specific batch.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/retry-hooks/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { useBatchRetry } from \"@rpldy/retry-hooks\";\n\nconst MyComponent = ( ) => {\n    const retryBatch = useBatchRetry();\n\n    const onClick = () => {\n        retryBatch(\"b-123\");\n    };\n\n    return <button onClick={onClick}>retry batch</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Item Finalize Listener in React-Uploady\nDESCRIPTION: Hook that listens for item finalization events, triggered when an item upload is complete due to finish, error, cancel, or abort. Can be scoped to a specific item ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useItemFinalizeListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useItemFinalizeListener((item) => {\n        console.log(`item ${item.id} is done with state: ${item.state}`);  \n    });\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Using Batch Finalize Listener in React-Uploady\nDESCRIPTION: Hook that listens for batch completion events, triggered when all items in a batch have finished uploading or when a batch was cancelled/aborted. Can be scoped to a specific batch ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBatchFinalizeListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useBatchFinalizeListener((batch) => {\n        console.log(`batch ${batch.id} finished uploading with status: ${batch.state}`);  \n    });\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Using useRetryListener Hook in React-Uploady\nDESCRIPTION: Illustrates how to use the useRetryListener hook to handle retry events and log retried items.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/retry-hooks/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { useRetryListener } from \"@rpldy/retry-hooks\";\n\nconst MyComponent = ( ) => {\n    \n    useRetryListener(({ items }) => {\n        console.log(\"##### RETRY EVENT - retrying items: \", items);\n    });\n\n    return <div/>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Item Cancel Listener in React-Uploady\nDESCRIPTION: Hook that listens for item cancellation events, triggered when an item upload is cancelled from an ITEM_START event handler. Can be scoped to a specific item ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useItemCancelListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useItemCancelListener((item) => {\n        console.log(`item ${item.id} was cancelled`);  \n    });\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Using usePasteUpload Hook\nDESCRIPTION: Example demonstrating the use of usePasteUpload hook for element-specific paste upload functionality with toggle control.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-paste/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Uploady from \"@rpldy/uploady\";\nimport { usePasteUpload } from \"@rpldy/upload-paste\";\n\nconst ElementPaste = (props) => {\n    const containerRef = useRef(null);\n\n    const onPasteUpload = useCallback(({ count }) => {\n        console.log(\"ELEMENT PASTE-TO-UPLOAD files: \", count);\n    }, []);\n\n    const { toggle, getIsEnabled } = usePasteUpload(props, containerRef, onPasteUpload);\n\n    //toggle can be used in a button click handler to turn paste listening on/off\n    \n    return <>\n        <div ref={containerRef}>\n            Click here & Paste a file\n            Paste is: {getIsEnabled() ? \"enabled\" : \"disabled\"}\n        </div>\n    </>;\n};\n\n\nconst MyApp = () => {\n    return <Uploady destination={{ url: \"my-server.com/upload\" }}>\n        <ElementPaste autoUpload={false} params={{ test: \"paste\" }}/>\n    </Uploady>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Item Abort Listener in React-Uploady\nDESCRIPTION: Hook that listens for item abort events, triggered when abort is called for an item. Can be scoped to a specific item ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useItemAbortListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useItemAbortListener((item) => {\n        console.log(`item ${item.id} was aborted`);  \n    });\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Error Handling with useItemErrorListener Hook\nDESCRIPTION: Example showing how to use the useItemErrorListener hook to handle chunk upload errors and access error information from the server response.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/chunked-sender/README.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useItemErrorListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useItemErrorListener((item) => {\n        console.log(`item ${item.id} failed -  status code:`, item.uploadResponse.chunkUploadResponse.status); //the status code returned by the server on the failed chunk\n        console.log(`item ${item.id} failed -  msg:`, item.uploadResponse.chunkUploadResponse.response); //the response data (if) sent by the server on the failed chunk\n    });\n\n    //...\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useBatchAbortListener Hook\nDESCRIPTION: Shows how to use the useBatchAbortListener hook to detect when a batch has been aborted using the abortBatch method. Can be scoped to a specific batch ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBatchAbortListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useBatchAbortListener((batch) => {\n        console.log(`batch ${batch.id} was aborted`);  \n    });\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Using Uploady Context in React Components\nDESCRIPTION: Hook that provides access to the Uploady Context instance, allowing interaction with Uploady methods like showFileUpload. Will throw if used outside the Uploady component tree.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useUploady } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    const uploady = useUploady();\n    \n    const onClick = () => {\n        uploady.showFileUpload();\n    }\n\n    //...       \n};\n\nconst App = () => (\n    <Uploady destination={{...}}>\n        <MyComponent/>\n    </Uploady>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Item Start Listener in React-Uploady\nDESCRIPTION: Hook that listens for item upload start events. This is a cancellable event that triggers just before an item starts uploading and can be scoped to a specific item ID. The callback can be async or return a promise.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useItemStartListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useItemStartListener((item) => {\n        console.log(`item ${item.id} started uploading`);  \n    });\n\n    //or scoped:\n    useItemStartListener((item) => {\n        console.log(`item ${item.id} started uploading`);  \n    }, \"i-123\");\n\n    //...    \n};\n```\n\n----------------------------------------\n\nTITLE: Using Abort Batch Hook in React-Uploady\nDESCRIPTION: Hook that returns a method to abort an entire batch of uploads by batch ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAbortBatch } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    const abortBatch = useAbortBatch();\n    \n    return <button onClick={() => abortBatch(\"b-123\")}>Abort Batch</button>       \n};\n```\n\n----------------------------------------\n\nTITLE: Using Upload Options Hook in React-Uploady\nDESCRIPTION: Hook to set and get upload options for Uploady. Allows setting configuration parameters that will apply to uploads.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useUploadOptions } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    const options = useUploadOptions({ grouped: true, maxGroupSize: 3 });\n    \n    //...       \n};\n```\n\n----------------------------------------\n\nTITLE: Using Abort Item Hook in React-Uploady\nDESCRIPTION: Hook that returns a method to abort a specific upload item by its ID.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAbortItem } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    const abortItem = useAbortItem();\n    \n    return <button onClick={() => abortItem(\"i-123\")}>Abort Item</button>       \n};\n```\n\n----------------------------------------\n\nTITLE: Using Abort All Hook in React-Uploady\nDESCRIPTION: Hook that returns a method to abort all ongoing uploads.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAbortAll } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    const abortAll = useAbortAll();\n    \n    return <button onClick={() => abortAll()}>Abort All</button>       \n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom File Input with React-Uploady\nDESCRIPTION: Hook for providing a custom file input to Uploady when customInput prop is set to true. Can also be used to access Uploady's internal file input reference.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport Uploady, { useFileInput } from \"@rpldy/uploady\";\nimport UploadButton from \"@rpldy/upload-button\";\n\nconst MyForm = () => {\n    const inputRef = useRef();\n    useFileInput(inputRef);\n\n    return <form action=\"/upload\" method=\"POST\">\n        <input type=\"file\" name=\"testFile\" style={{ display: \"none\" }} ref={inputRef}/>\n    </form>;\n};\n\nexport const WithCustomFileInputAndForm = () => {\n    return <section>\n        <Uploady\n            debug\n            customInput\n        >\n            <MyForm />\n            <UploadButton/>\n        </Uploady>\n    </section>\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst inputRef = useFileInput();\n\nif (inputRef.current) {\n    inputRef.current.setAttribute(\"webkitdirectory\", \"true\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using All Abort Listener in React-Uploady\nDESCRIPTION: Hook that listens for global abort events, triggered when abort is called for all running uploads.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAllAbortListener } from \"@rpldy/uploady\";\n\nconst MyComponent = () => {\n    useAllAbortListener(() => {\n        console.log(\"abort all was called\");\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Paste Upload with HOC\nDESCRIPTION: Example showing how to use withPasteUpload HOC to create a paste-enabled upload area with styled-components.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-paste/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Uploady from \"@rpldy/uploady\";\nimport withPasteUpload from \"@rpldy/upload-paste\";\n\nconst SimpleContainer = styled.div`   \n    width: 400px;\n    height: 400px;   \n`;\n\nconst PasteArea = withPasteUpload(SimpleContainer);\n\nconst MyApp = () => {\n    const onPasteUpload = useCallback(({ count }) => {\n        console.log(\"PASTE-TO-UPLOAD file count: \", count);\n    }, []);\n    \n\treturn <Uploady destination={{ url: \"my-server.com/upload\" }}>\n        <PasteArea onPasteUpload={onPasteUpload} autoUpload={false}>\n            Paste file here to upload\n        </PasteArea>\n    </Uploady>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Simple State in JavaScript for Controlled Object Updates\nDESCRIPTION: Demonstrates the usage of the createState function from @rpldy/simple-state. It shows how to create a state object, attempt direct modification (which fails), and then successfully update the state using the provided update function.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/simple-state/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport createState from \"@rpldy/simple-state\"\n\nconst { state, update } = createState({\n    arr: [1,2,3]\n});\n\nstate.arr.push(4);\nconsole.log(state.arr); // print [1,2,3]\n\nupdate((state) => {\n    state.arr.push(4);\n});\n\nconsole.log(state.arr); // print [1,2,3,4]\n```\n\n----------------------------------------\n\nTITLE: Initializing Uploader Instance with Event Handling\nDESCRIPTION: Example showing how to create an uploader instance, configure options, register event listeners, and add files for upload. Demonstrates basic usage outside of React context.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/uploader/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport createUploader, { UPLOADER_EVENTS } from \"@rpldy/uploader\";\n\nconst uploader = createUploader({ \n    autoUpload: false,\n    grouped: true,\n    //...\n});\n\nuploader.on(UPLOADER_EVENTS.ITEM_START, (item) => {\n     console.log(`item ${item.id} started uploading`);  \n});\n\nuploader.add(myFile);\n```\n\n----------------------------------------\n\nTITLE: Installing @rpldy/uploady Package with Yarn and NPM\nDESCRIPTION: Commands to install the @rpldy/uploady package using either Yarn or NPM package managers.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn: \n   $ yarn add @rpldy/uploady\n\n#NPM:\n   $ npm i @rpldy/uploady\n```\n\n----------------------------------------\n\nTITLE: Using Safe Storage API\nDESCRIPTION: Example demonstrating how to use the safeLocalStorage API for setting, getting, and removing items, which provides the same interface as the standard localStorage but with added safety.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/safe-storage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { safeLocalStorage } from \"@rpldy/safe-storage\";\n\nsafeLocalStorage.setItem(\"test\", \"value\");\n\nconst stored = safeLocalStorage.getItem(\"test\");\n\nsafeLocalStorage.removeItem(\"test\");\n```\n\n----------------------------------------\n\nTITLE: Installing Chunked Uploady in React Project\nDESCRIPTION: Instructions for installing the ChunkedUploady package using either Yarn or NPM. This package includes the base @rpldy/uploady dependency.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/chunked-uploady/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn: \n   $ yarn add @rpldy/chunked-uploady\n\n#NPM:\n   $ npm i @rpldy/chunked-uploady\n```\n\n----------------------------------------\n\nTITLE: Implementing Uploader Enhancer Function in JavaScript\nDESCRIPTION: Function signature for enhancers that can modify uploader instance behavior. Enhancers receive the uploader instance and trigger as parameters and must return the modified uploader instance. They are applied during uploader instance creation to customize functionality.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n(uploader: UploaderType, trigger: Trigger<mixed>) => UploaderType\n```\n\n----------------------------------------\n\nTITLE: PreviewProps TypeScript Interface Definition\nDESCRIPTION: TypeScript definition for the props that are passed to a custom preview component, including the preview URL, file information, and removal function.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-preview/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype PreviewProps = {\n\tid: string;\n\turl: string;\n\tname: string;\n\ttype: PreviewType;\n\tisFallback: boolean;\n    removePreview: () => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Upload Preview Package with NPM and Yarn\nDESCRIPTION: Commands for installing the Upload Preview component along with its required dependency (Uploady) using either Yarn or NPM package managers.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-preview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn: \n   $ yarn add @rpldy/uploady @rpldy/upload-preview \n\n#NPM:\n   $ npm i @rpldy/uploady @rpldy/upload-preview\n```\n\n----------------------------------------\n\nTITLE: PreviewMethods TypeScript Interface Definition\nDESCRIPTION: TypeScript definition for the previewMethodsRef which provides access to methods for clearing all previews or removing specific preview items.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-preview/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype PreviewMethods = {\n    clear: () => void;\n    removePreview: (id: string) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Uploader Package with Package Managers\nDESCRIPTION: Commands to install the @rpldy/uploader package using either Yarn or NPM package managers.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/uploader/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn:\n  $ yarn add @rpldy/uploader\n\n#NPM:\n  $ npm i @rpldy/uploader\n```\n\n----------------------------------------\n\nTITLE: Chunk Start Event Response Type Definition\nDESCRIPTION: TypeScript-style definition showing the structure of the response object that can be returned from a chunk start event handler.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/chunked-sender/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntype StartEventResponse = {\n\turl: string,\n    sendOptions: SendOptions\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sender Package for React-Uploady\nDESCRIPTION: Commands to install the @rpldy/sender package using either Yarn or NPM package managers. This package is the default XHR sender for the uploader in React-Uploady.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/sender/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn:\n  $ yarn add @rpldy/sender\n\n#NPM:\n  $ npm i @rpldy/sender\n```\n\n----------------------------------------\n\nTITLE: Installing React-Uploady Core Packages\nDESCRIPTION: Shell commands to install the core Uploady provider and uploader packages using yarn or npm.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn: \n   $ yarn add @rpldy/uploady\n\n#NPM:\n   $ npm i @rpldy/uploady\n```\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn:\n  $ yarn add @rpldy/uploader\n\n#NPM:\n  $ npm i @rpldy/uploader\n```\n\n----------------------------------------\n\nTITLE: Installing Chunked Sender Package\nDESCRIPTION: Commands to install the @rpldy/chunked-sender package using either Yarn or NPM package managers.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/chunked-sender/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn:\n  $ yarn add @rpldy/chunked-sender\n\n#NPM:\n  $ npm i @rpldy/chunked-sender\n```\n\n----------------------------------------\n\nTITLE: Installing React-Uploady Upload Button with Package Managers\nDESCRIPTION: Commands for installing the required packages (@rpldy/uploady and @rpldy/upload-button) using either Yarn or NPM package managers.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-button/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn: \n   $ yarn add @rpldy/uploady @rpldy/upload-button \n\n#NPM:\n   $ npm i @rpldy/uploady @rpldy/upload-button\n```\n\n----------------------------------------\n\nTITLE: Installing Life Events Package using Yarn or NPM\nDESCRIPTION: Commands to install the @rpldy/life-events package using either Yarn or NPM package managers. This package is an internal component of React-Uploady for event management.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/life-events/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn:\n  $ yarn add @rpldy/life-events\n\n#NPM:\n  $ npm i @rpldy/life-events\n```\n\n----------------------------------------\n\nTITLE: Installing Upload Drop Zone Package\nDESCRIPTION: Commands to install the required packages using Yarn or NPM package managers. Requires both @rpldy/uploady and @rpldy/upload-drop-zone packages.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-drop-zone/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn: \n   $ yarn add @rpldy/uploady @rpldy/upload-drop-zone \n\n#NPM:\n   $ npm i @rpldy/uploady @rpldy/upload-drop-zone\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Storage Package\nDESCRIPTION: Commands to install the @rpldy/safe-storage package using either Yarn or NPM package managers.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/safe-storage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn: \n   $ yarn add @rpldy/safe-storage\n\n#NPM:\n   $ npm i @rpldy/safe-storage\n```\n\n----------------------------------------\n\nTITLE: Installing TUS-Uploady Package\nDESCRIPTION: Commands to install the @rpldy/tus-uploady package using either Yarn or NPM package managers.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/tus-uploady/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn:\n  $ yarn add @rpldy/tus-uploady\n\n#NPM:\n  $ npm i @rpldy/tus-uploady\n```\n\n----------------------------------------\n\nTITLE: Installing Upload Paste Module\nDESCRIPTION: Commands to install the required packages using either Yarn or NPM package managers.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-paste/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn: \n   $ yarn add @rpldy/uploady @rpldy/upload-paste \n\n#NPM:\n   $ npm i @rpldy/uploady @rpldy/upload-paste\n```\n\n----------------------------------------\n\nTITLE: Installing React-Uploady and Upload URL Input Component\nDESCRIPTION: Commands for installing the required packages using Yarn or NPM. This snippet shows how to add @rpldy/uploady and @rpldy/upload-url-input to your project.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-url-input/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn: \n   $ yarn add @rpldy/uploady @rpldy/upload-url-input\n\n#NPM:\n   $ npm i @rpldy/uploady @rpldy/upload-url-input\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React-Uploady\nDESCRIPTION: Command to install all necessary dependencies for the React-Uploady project using Yarn package manager.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Retry Hooks for React-Uploady\nDESCRIPTION: Commands for installing the @rpldy/uploady and @rpldy/retry-hooks packages using Yarn or NPM.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/retry-hooks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn: \n   $ yarn add @rpldy/uploady @rpldy/retry-hooks\n\n#NPM:\n   $ npm i @rpldy/uploady @rpldy/retry-hooks\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook for React-Uploady\nDESCRIPTION: Command to run Storybook locally for React-Uploady. This allows developers to interact with and test UI components in isolation.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Installing the @rpldy/retry Package\nDESCRIPTION: Commands to install the @rpldy/retry package using either Yarn or NPM package managers. This package is required to add retry capabilities to failed uploads in React-Uploady.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/retry/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn:\n  $ yarn add @rpldy/retry\n\n#NPM:\n  $ npm i @rpldy/retry\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for React-Uploady\nDESCRIPTION: Command to run end-to-end tests for React-Uploady using the existing test suite on top of Storybook. This verifies the functionality of the entire application.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn e2e\n```\n\n----------------------------------------\n\nTITLE: Installing @rpldy/abort Package Using Yarn and NPM\nDESCRIPTION: Commands to install the @rpldy/abort package using either Yarn or NPM package managers. This package adds the capability to abort/cancel running and pending uploads in React-Uploady.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/abort/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn:\n  $ yarn add @rpldy/abort\n\n#NPM:\n  $ npm i @rpldy/abort\n```\n\n----------------------------------------\n\nTITLE: Cloning the React-Uploady Repository\nDESCRIPTION: Command to clone the forked React-Uploady repository to the local machine. This is the first step in setting up the development environment.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/react-uploady.git\n```\n\n----------------------------------------\n\nTITLE: Installing Simple State Package for React-Uploady\nDESCRIPTION: Commands for installing the @rpldy/simple-state package using Yarn or NPM package managers. This snippet shows how to add the package to a project's dependencies.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/simple-state/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn: \n   $ yarn add @rpldy/simple-state \n\n#NPM:\n   $ npm i @rpldy/simple-state\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Markdown README in Storybook\nDESCRIPTION: This code snippet imports the Markdown component from Storybook and a raw README file. It then uses JSX to render the README content within the Markdown component.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/uploady/Uploady.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Running Tests for React-Uploady\nDESCRIPTION: Command to run all tests for the React-Uploady project, including flow, lint, and jest. This ensures all changes meet the project's quality standards.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering README in Storybook using JavaScript\nDESCRIPTION: This snippet imports a README markdown file and renders it using Storybook's Markdown component. It uses ES6 import syntax and JSX to achieve this.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/uploader/Uploader.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Building React-Uploady Project\nDESCRIPTION: Command to build the React-Uploady project after installing dependencies. This compiles the source code and prepares it for use.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering README in Storybook with React\nDESCRIPTION: This code imports Storybook's Markdown component and the project's README file as raw text, then renders it inside the Markdown component. This pattern is commonly used in Storybook to display project documentation.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-url-input/UploadUrlInput.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Installing @rpldy/shared Package for React-Uploady\nDESCRIPTION: Commands to install the @rpldy/shared package using either Yarn or NPM package managers. This package contains internal utilities and types used by all React-Uploady packages.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/shared/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn:\n  $ yarn add @rpldy/shared\n\n#NPM:\n  $ npm i @rpldy/shared\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Markdown in React/Storybook\nDESCRIPTION: Imports the Markdown component from Storybook blocks and a raw README file content, then renders it within the Markdown component.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-drop-zone/UploadDropZone.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Installing @rpldy/shared-ui Package with Yarn and NPM\nDESCRIPTION: Commands to install the @rpldy/shared-ui package using either Yarn or NPM package managers. This internal package provides utils and types for UI packages in the react-uploady project.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/shared/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn:\n  $ yarn add @rpldy/shared-ui\n\n#NPM:\n  $ npm i @rpldy/shared-ui\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Markdown in React with Storybook\nDESCRIPTION: Imports a README markdown file and renders it using Storybook's Markdown component. Uses the raw loader to import the markdown content as a string.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-paste/UploadPaste.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Markdown Content in React\nDESCRIPTION: This snippet imports the Markdown component from Storybook and a README file as raw content. It then renders the Markdown content using the imported component.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/tus-uploady/TusUploady.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying README in Storybook\nDESCRIPTION: This code imports the Markdown component from Storybook's blocks and displays the project's README file. The file is imported with a raw loader to get the markdown content as a string.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/chunked-sender/ChunkedSender.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Rendering README Content with Storybook Markdown Component in JSX\nDESCRIPTION: Imports the Markdown component from Storybook blocks and the raw README.md content, then renders the README content inside the Markdown component. This allows for displaying formatted documentation within Storybook.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/retry-hooks/RetryHooks.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying README Markdown in Storybook\nDESCRIPTION: Imports a README.md file as raw content and renders it using Storybook's Markdown component. This pattern is commonly used in Storybook to display project documentation within the Storybook interface.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/native/native-uploady/NativeUploady.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering README in Storybook with JavaScript\nDESCRIPTION: This snippet imports the README.md file content and renders it using Storybook's Markdown component. It uses ES6 import syntax and JSX to render the component.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/mock-sender/MockSender.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Markdown in Storybook\nDESCRIPTION: Imports a README.md file as raw content and renders it using Storybook's Markdown component. Uses ES6 import syntax with the ?raw query parameter to load the markdown file content directly.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/chunked-uploady/ChunkedUploady.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Markdown in Storybook\nDESCRIPTION: Imports a README.md file as raw content and renders it using Storybook's Markdown component. Uses ES6 import syntax with the ?raw query parameter to import the raw markdown content.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/tus-sender/TusSender.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Markdown in Storybook\nDESCRIPTION: Code that imports the Storybook Markdown component and a raw markdown file, then renders it as a React component.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-button/UploadButton.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Structured changelog entries showing versioning, features, bug fixes, and internal changes for React-Uploady library. Includes links to GitHub issues and contributor acknowledgments.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## 1.10.0 (2025-04-18)\n\n### Features\n\n- `[upload-drop-zone]` - feat: allow full control over drag handling\n\n### Bug fixes\n\n- `[uploader]` - fix: get batchOptions from itemBatchOptions in processFinishedRequest\n- `[tus-sender]` - fix: pass destination headers in tus finalize request\n\n### Internal\n\n- `all` - upgrade several dev deps\n```\n\n----------------------------------------\n\nTITLE: Markdown Version Entry Block\nDESCRIPTION: Standard markdown formatting used for version entries in the changelog, showing version number, date and categorized changes.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.4.0-rc.1 (2023-02-16)\n\n_PRE-RELEASE_\n\n### Bug fixes\n\n- `[uploader]` - fix bug with cancel from BATCH_ADD doesnt clean batch from state. Fix for [#472]\n\n### Internal\n\n- `all` - misc upgrade dev deps\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying README in React\nDESCRIPTION: This code snippet imports the README.md file as raw content and renders it using Storybook's Markdown component. It's likely part of a documentation or storybook setup for the React Uploady project.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/ui/upload-preview/UploadPreview.storydoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Markdown } from \"@storybook/blocks\";\nimport readme from \"./README.md?raw\";\n\n<Markdown>{readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Installing Native Uploady Package with Yarn and NPM\nDESCRIPTION: Shell commands to install the @rpldy/native-uploady package using either Yarn or NPM package managers.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/native/native-uploady/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn: \n   $ yarn add @rpldy/native-uploady\n\n#NPM:\n   $ npm i @rpldy/native-uploady\n```\n\n----------------------------------------\n\nTITLE: Installing Mock Sender Package\nDESCRIPTION: Commands to install the @rpldy/mock-sender package using either Yarn or NPM package managers.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/mock-sender/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn:\n  $ yarn add @rpldy/mock-sender\n\n#NPM:\n  $ npm i @rpldy/mock-sender\n```\n\n----------------------------------------\n\nTITLE: Installing TUS Sender with Package Managers\nDESCRIPTION: Installation commands for adding the TUS Sender package to your project using either Yarn or NPM package managers.\nSOURCE: https://github.com/rpldy/react-uploady/blob/master/packages/core/tus-sender/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#Yarn:\n  $ yarn add @rpldy/tus-sender\n\n#NPM:\n  $ npm i @rpldy/tus-sender\n```"
  }
]