[
  {
    "owner": "grpc",
    "repo": "grpc-dotnet",
    "content": "TITLE: Initializing gRPC-Web Channel and Client in C#\nDESCRIPTION: Demonstrates how to configure a gRPC channel to use gRPC-Web handler and create a client for making API calls. The example shows channel configuration with GrpcWebHandler and making an asynchronous call using the generated client.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.Net.Client.Web/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar channel = GrpcChannel.ForAddress(\"https://localhost:5001\", new GrpcChannelOptions\n    {\n        HttpHandler = new GrpcWebHandler(new HttpClientHandler())\n    });\n\nvar client = new Greeter.GreeterClient(channel);\nvar response = await client.SayHelloAsync(new HelloRequest { Name = \".NET\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Services in ASP.NET Core Program.cs\nDESCRIPTION: Demonstrates the basic setup of gRPC services in an ASP.NET Core application. Shows how to add gRPC services to the dependency injection container and map gRPC services to the routing pipeline. The code enables parallel operation with other ASP.NET Core features like MVC controllers.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.AspNetCore/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing GrpcGreeter.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddGrpc();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\napp.MapGrpcService<GreeterService>();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Bi-directional Streaming gRPC Calls in C#\nDESCRIPTION: Shows a complete bi-directional streaming implementation where both client and server can send messages independently.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.Net.Client/README.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new Echo.EchoClient(channel);\nusing var call = client.Echo();\n\nConsole.WriteLine(\"Starting background task to receive messages\");\nvar readTask = Task.Run(async () =>\n{\n    await foreach (var response in call.ResponseStream.ReadAllAsync())\n    {\n        Console.WriteLine(response.Message);\n        // Echo messages sent to the service\n    }\n});\n\nConsole.WriteLine(\"Starting to send messages\");\nConsole.WriteLine(\"Type a message to echo then press enter.\");\nwhile (true)\n{\n    var result = Console.ReadLine();\n    if (string.IsNullOrEmpty(result))\n    {\n        break;\n    }\n\n    await call.RequestStream.WriteAsync(new EchoMessage { Message = result });\n}\n\nConsole.WriteLine(\"Disconnecting\");\nawait call.RequestStream.CompleteAsync();\nawait readTask;\n```\n\n----------------------------------------\n\nTITLE: Server-Side Error Handling Implementation in C#\nDESCRIPTION: Demonstrates how to create and throw an RpcException with detailed error information using Google.Rpc.Status and field violations. Shows proper error handling pattern for parameter validation.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.StatusProto/README.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate static void ArgumentNotNullOrEmpty(string value, string paramName)\n{\n    if (string.IsNullOrEmpty(value))\n    {\n        throw new Google.Rpc.Status\n        {\n            Code = (int)Code.InvalidArgument,\n            Message = \"Bad request\",\n            Details =\n            {\n                Any.Pack(new BadRequest\n                {\n                    FieldViolations =\n                    {\n                        new BadRequest.Types.FieldViolation\n                        {\n                            Field = paramName,\n                            Description = \"Value is null or empty\"\n                        }\n                    }\n                })\n            }\n        }.ToRpcException();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing gRPC Channel and Client in C#\nDESCRIPTION: Creates a gRPC channel and client for making service calls. Shows basic channel creation and multiple client instantiation from the same channel.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.Net.Client/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar channel = GrpcChannel.ForAddress(\"https://localhost:5001\");\nvar client = new Greet.GreeterClient(channel);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar channel = GrpcChannel.ForAddress(\"https://localhost:5001\");\n\nvar greeterClient = new Greet.GreeterClient(channel);\nvar counterClient = new Count.CounterClient(channel);\n\n// Use clients to call gRPC services\n```\n\n----------------------------------------\n\nTITLE: Registering gRPC Client with HttpClientFactory in .NET\nDESCRIPTION: Demonstrates how to register a gRPC client using the AddGrpcClient extension method in Startup.ConfigureServices. This sets up the client with a specific service address and registers it for dependency injection.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.Net.ClientFactory/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGrpcClient<Greeter.GreeterClient>(o =>\n{\n    o.Address = new Uri(\"https://localhost:5001\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global gRPC-Web Middleware in ASP.NET Core\nDESCRIPTION: Demonstrates how to set up gRPC-Web middleware in an ASP.NET Core application with global configuration. The code shows the complete setup including service registration, middleware configuration, and service mapping.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.AspNetCore.Web/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing GrpcGreeter.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddGrpc();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\napp.UseRouting();\napp.UseGrpcWeb(new GrpcWebOptions { DefaultEnabled = true });\napp.MapGrpcService<GreeterService>();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Error Handling in gRPC Stream\nDESCRIPTION: C# client implementation demonstrating how to handle both successful responses and error statuses from a gRPC stream. Uses parallel tasks for reading responses and sending requests.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.StatusProto/README.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// reading the responses\nvar responseReaderTask = Task.Run(async () =>\n{\n    await foreach (var rsp in call.ResponseStream.ReadAllAsync())\n    {\n        switch (rsp.MessageCase)\n        {\n            case WidgetRsp.MessageOneofCase.WidgetDetails:\n                // ... processes the details ...\n                break;\n            case WidgetRsp.MessageOneofCase.Status:\n                // ... handle the error ...\n                break;\n        }\n    }\n});\n\n// sending the requests\nforeach (var request in requests)\n{\n    await call.RequestStream.WriteAsync(request);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC-Web Client and Messages using protoc in PowerShell\nDESCRIPTION: This PowerShell command uses protoc with the gRPC-Web plugin to generate JavaScript client and message files from a .proto file. It specifies import style, output mode, and file paths for the generated output.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Browser/Server/wwwroot/Scripts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nprotoc greet.proto --js_out=import_style=commonjs:CHANGE_TO_SCRIPTS_DIRECTORY --grpc-web_out=import_style=commonjs,mode=grpcwebtext:CHANGE_TO_SCRIPTS_DIRECTORY --plugin=protoc-gen-grpc-web=CHANGE_TO_PROTOC_GEN_GRPC_WEB_EXE_PATH\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Error Handling in gRPC Stream\nDESCRIPTION: C# server implementation showing how to process stream requests and return either success response with widget details or error status using the Google.Rpc.Status object.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.StatusProto/README.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait foreach (var request in requestStream.ReadAllAsync())\n{\n    var response = new WidgetRsp();\n\n    // ... process the request ...\n\n    // to return an error\n    if (error)\n    {\n        response.Status = new Google.Rpc.Status { /* ... */ };\n    }\n    else\n    {\n        response.WidgetDetails = \"the details\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Unary gRPC Calls in C#\nDESCRIPTION: Demonstrates making a unary gRPC call where the client sends a single request and receives a single response.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.Net.Client/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new Greet.GreeterClient(channel);\nvar response = await client.SayHelloAsync(new HelloRequest { Name = \"World\" });\n\nConsole.WriteLine(\"Greeting: \" + response.Message);\n// Greeting: Hello World\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Streaming gRPC Calls in C#\nDESCRIPTION: Shows two approaches to handle server streaming: using MoveNext() and using C# 8's await foreach syntax with ReadAllAsync().\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.Net.Client/README.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new Greet.GreeterClient(channel);\nusing var call = client.SayHellos(new HelloRequest { Name = \"World\" });\n\nwhile (await call.ResponseStream.MoveNext())\n{\n    Console.WriteLine(\"Greeting: \" + call.ResponseStream.Current.Message);\n    // \"Greeting: Hello World\" is written multiple times\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new Greet.GreeterClient(channel);\nusing var call = client.SayHellos(new HelloRequest { Name = \"World\" });\n\nawait foreach (var response in call.ResponseStream.ReadAllAsync())\n{\n    Console.WriteLine(\"Greeting: \" + response.Message);\n    // \"Greeting: Hello World\" is written multiple times\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Streaming gRPC Calls in C#\nDESCRIPTION: Demonstrates client streaming where multiple messages are sent to the server before receiving a single response.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.Net.Client/README.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new Counter.CounterClient(channel);\nusing var call = client.AccumulateCount();\n\nfor (var i = 0; i < 3; i++)\n{\n    await call.RequestStream.WriteAsync(new CounterRequest { Count = 1 });\n}\nawait call.RequestStream.CompleteAsync();\n\nvar response = await call;\nConsole.WriteLine($\"Count: {response.Count}\");\n// Count: 3\n```\n\n----------------------------------------\n\nTITLE: Client-Side Error Detail Iteration Implementation\nDESCRIPTION: Demonstrates how to iterate through all error details in an RpcStatus using pattern matching. Handles multiple error detail types including ErrorInfo and BadRequest.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.StatusProto/README.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvoid PrintStatusDetails(RpcException ex)\n{\n    Google.Rpc.Status? rpcStatus = ex.GetRpcStatus();\n\n    if (rpcStatus != null)\n    {\n        foreach (var msg in rpcStatus.UnpackDetailMessages())\n        {\n            switch (msg)\n            {\n                case ErrorInfo errorInfo:\n                    Console.WriteLine($\"ErrorInfo: Reason: {errorInfo.Reason}, Domain: {errorInfo.Domain}\");\n                    foreach (var md in errorInfo.Metadata)\n                    {\n                        Console.WriteLine($\"\\tKey: {md.Key}, Value: {md.Value}\");\n                    }\n                    break;\n\n                case BadRequest badRequest:\n                    Console.WriteLine(\"BadRequest:\");\n                    foreach (BadRequest.Types.FieldViolation fv in badRequest.FieldViolations)\n                    {\n                        Console.WriteLine($\"\\tField: {fv.Field}, Description: {fv.Description}\");\n                    }\n                    break;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry-enabled Aggregator\nDESCRIPTION: Command to run the aggregator server with OpenTelemetry tracing enabled. This configuration allows sending trace data to Zipkin for distributed tracing visualization.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run --EnableOpenTelemetry=true\n```\n\n----------------------------------------\n\nTITLE: Enabling gRPC-Web for Individual Services\nDESCRIPTION: Shows how to enable gRPC-Web for specific services using the EnableGrpcWeb() extension method instead of global configuration.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.AspNetCore.Web/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapGrpcService<GreeterService>().EnableGrpcWeb();\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Service with Injected Client in .NET\nDESCRIPTION: Shows how to implement a gRPC service that uses an injected gRPC client. The example demonstrates streaming functionality where requests are forwarded from one service to another using the injected client.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.Net.ClientFactory/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AggregatorService : Aggregator.AggregatorBase\n{\n    private readonly Greeter.GreeterClient _client;\n\n    public AggregatorService(Greeter.GreeterClient client)\n    {\n        _client = client;\n    }\n\n    public override async Task SayHellos(HelloRequest request,\n        IServerStreamWriter<HelloReply> responseStream, ServerCallContext context)\n    {\n        // Forward the call on to the greeter service\n        using (var call = _client.SayHellos(request))\n        {\n            await foreach (var response in call.ResponseStream.ReadAllAsync())\n            {\n                await responseStream.WriteAsync(response);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Services in ASP.NET Core Program.cs\nDESCRIPTION: This code snippet shows how to set up gRPC services in an ASP.NET Core application. It demonstrates adding gRPC services to the dependency injection container, configuring the HTTP request pipeline, and mapping a gRPC service. The example uses a GreeterService.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.AspNetCore.Server/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing GrpcGreeter.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddGrpc();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\napp.MapGrpcService<GreeterService>();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with Error Status in Protobuf\nDESCRIPTION: Protobuf service definition that includes error handling capability through google.rpc.Status in the response message. The WidgetRsp message uses a oneof field to either return widget details or an error status.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.StatusProto/README.md#2025-04-16_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nservice WidgetLookupProvider {\n    rpc streamingLookup(stream WidgetReq) returns (stream WidgetRsp) {}\n}\n\nmessage WidgetReq {\n    string widget_name = 1;\n}\n\nmessage WidgetRsp {\n    oneof message{\n        // details when ok\n        string widget_details = 1;\n        // or error details\n        google.rpc.Status status = 2;\n   }   \n}\n```\n\n----------------------------------------\n\nTITLE: Automated Documentation Generation for gRPC .NET Release Process\nDESCRIPTION: Steps for using the automated script to regenerate gRPC C# API documentation during the release process. Uses a dockerized DocFX installation to generate docs and prepare them for a PR to update grpc.io site.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/docfx/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 1. Run the script on Linux with docker installed\n$ ./generate_reference_docs.sh\n\n# 2. Enter the git repo with updated \"gh-pages\" branch\n$ cd grpc-gh-pages\n\n# 3. Review the changes and create a pull request\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC-Web Client with Protoc in PowerShell\nDESCRIPTION: Command to generate JavaScript client and message files from greet.proto using protoc with the gRPC-Web plugin. Generates greet_grpc_web_pb.js for the client and greet_pb.js for messages. Uses CommonJS import style and grpcwebtext mode.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Spar/Server/ClientApp/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nprotoc greet.proto --js_out=import_style=commonjs:CHANGE_TO_SCRIPTS_DIRECTORY --grpc-web_out=import_style=commonjs,mode=grpcwebtext:CHANGE_TO_SCRIPTS_DIRECTORY --plugin=protoc-gen-grpc-web=CHANGE_TO_PROTOC_GEN_GRPC_WEB_EXE_PATH\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC .NET Documentation Manually on Windows using DocFX\nDESCRIPTION: Commands for generating and viewing C# API documentation locally using DocFX on Windows. Requires DocFX to be installed according to the linked GitHub instructions.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/docfx/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# generate docfx documentation into ./html directory\n$ docfx\n\n# view the resulting docs\n$ docfx server html\n```\n\n----------------------------------------\n\nTITLE: Running QpsWorker for gRPC Benchmarking\nDESCRIPTION: Command to run the QpsWorker in the gRPC benchmark environment. The worker hosts gRPC services used to start benchmark servers or clients. It accepts parameters for driver_port (required) and LogLevel (optional, defaults to no logging).\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/perf/benchmarkapps/README.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\ndotnet run -c Release -- --LogLevel Warning --driver_port 5000\n```\n\n----------------------------------------\n\nTITLE: Installing .NET Core SDK Script\nDESCRIPTION: Command to run the setup script for installing .NET Core SDK before building the project. Provides options for both Unix/Linux (sh) and Windows (ps1) environments.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run this script before building the project.\n./build/get-dotnet.sh or ./build/get-dotnet.ps1\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet Repository for gRPC Packages\nDESCRIPTION: XML configuration for adding the gRPC repository to NuGet package sources. This enables access to nightly builds and development versions of gRPC packages.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <packageSources>\n        <!-- Add this repository to the list of available repositories -->\n        <add key=\"gRPC repository\" value=\"https://grpc.jfrog.io/grpc/api/nuget/v3/grpc-nuget-dev\" />\n    </packageSources>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Core gRPC Types List for API Package\nDESCRIPTION: Comprehensive list of types that will be included in the Grpc.Core.Api package. These types are extracted from Grpc.Core to create a purely managed implementation without native dependencies.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/doc/packages.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGrpc.Core.AuthContext\nGrpc.Core.AuthProperty\nGrpc.Core.ClientStreamingServerMethod`2\nGrpc.Core.ContextPropagationFlags\nGrpc.Core.ContextPropagationOptions\nGrpc.Core.ContextPropagationToken\nGrpc.Core.DeserializationContext\nGrpc.Core.DuplexStreamingServerMethod`2\nGrpc.Core.IAsyncStreamReader`1\nGrpc.Core.IAsyncStreamWriter`1\nGrpc.Core.IHasWriteOptions\nGrpc.Core.IMethod\nGrpc.Core.Internal.IServerCallHandler\nGrpc.Core.Internal.MarshalUtils\nGrpc.Core.IServerStreamWriter`1\nGrpc.Core.Logging.ILogger\nGrpc.Core.Logging.LogLevel\nGrpc.Core.Marshaller`1\nGrpc.Core.Metadata\nGrpc.Core.Metadata+Entry\nGrpc.Core.Method`2\nGrpc.Core.MethodType\nGrpc.Core.RpcException\nGrpc.Core.SerializationContext\nGrpc.Core.ServerCallContext\nGrpc.Core.ServerServiceDefinition\nGrpc.Core.ServerStreamingServerMethod`2\nGrpc.Core.ServiceBinderBase\nGrpc.Core.Status\nGrpc.Core.StatusCode\nGrpc.Core.UnaryServerMethod`2\nGrpc.Core.Utils.GrpcPreconditions\nGrpc.Core.WriteFlags\nGrpc.Core.WriteOptions\n```\n\n----------------------------------------\n\nTITLE: Starting gRPC-Web Interop Client with Docker\nDESCRIPTION: This Docker command builds and starts the gRPC-Web interop client container. It uses docker-compose to manage the container and exposes the client at http://localhost:8081.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/testassets/README.md#2025-04-16_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker compose -f docker-compose.yml build grpcweb-client\ndocker compose -f docker-compose.yml up grpcweb-client\n```\n\n----------------------------------------\n\nTITLE: Starting gRPC Interop Server with Docker\nDESCRIPTION: This Docker command builds and starts the gRPC interop server container. It uses docker-compose to manage the container and exposes the interop services at http://localhost:8080.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/testassets/README.md#2025-04-16_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\ndocker compose -f docker-compose.yml build grpcweb-server\ndocker compose -f docker-compose.yml up grpcweb-server\n```\n\n----------------------------------------\n\nTITLE: Building gRPC C# Debug Version\nDESCRIPTION: Python command to build the C# version of gRPC in debug mode without running tests.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/testassets/InteropTestsWebsite/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython tools/run_tests/run_tests.py -l csharp -c dbg --build_only\n```\n\n----------------------------------------\n\nTITLE: Starting AspNetCore Interop Test Server\nDESCRIPTION: Commands to start the InteropTestsWebsite server on localhost port 50052.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/testassets/InteropTestsWebsite/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# From this directory\n$ dotnet run\nNow listening on: http://localhost:50052\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Interop Client Tests\nDESCRIPTION: Commands to navigate to the client directory and execute the interop test client using mono, targeting a local server and running the large_unary test case.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/testassets/InteropTestsWebsite/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd src/csharp/Grpc.IntegrationTesting.Client/bin/Debug/net45\n\nmono Grpc.IntegrationTesting.Client.exe --server_host=localhost --server_port=50052 --test_case=large_unary\n```\n\n----------------------------------------\n\nTITLE: Converting PEM to PFX Certificate Format for gRPC Server\nDESCRIPTION: OpenSSL command to combine server1.pem certificate, server1.key private key, and ca.pem certificate authority file into a single server1.pfx file with password '1111'. This is used for testing purposes only and should not be used in production environments.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/perf/benchmarkapps/Shared/Certs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -out server1.pfx -inkey server1.key -in server1.pem -certfile ca.pem\n```\n\n----------------------------------------\n\nTITLE: Setting Up .NET Core Development Environment\nDESCRIPTION: Command to activate the installed .NET Core SDK in the development environment. Supports both Unix/Linux and Windows PowerShell environments.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Source this script to use the installed .NET Core SDK.\nsource ./activate.sh or . ./activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Building gRPC Project\nDESCRIPTION: Command line instruction for building the gRPC.DotNet solution using the dotnet CLI.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build Grpc.DotNet.sln\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Tests\nDESCRIPTION: Command line instruction for running tests in the gRPC.DotNet solution using the dotnet CLI.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test Grpc.DotNet.sln\n```\n\n----------------------------------------\n\nTITLE: Launching Visual Studio with SDK\nDESCRIPTION: Command to launch Visual Studio with the installed .NET Core SDK. Requires prior activation of the development environment.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\n# activate.sh or activate.ps1 must be sourced first, see previous step\nstartvs.cmd\n```\n\n----------------------------------------\n\nTITLE: Markdown Planning Document\nDESCRIPTION: Detailed roadmap document structured in markdown format outlining various development goals including runtime improvements, tooling enhancements, ecosystem integration, and documentation plans for gRPC-dotnet implementation targeting ASP.NET Core 5.0.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/doc/planning.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# gRPC-dotnet future planning (for ASP.NET Core 5.0)\n\n## Schedule and versioning\n\nThe work described here targets the ASP.NET Core 5.0 release which is currently scheduled for November 2020: https://github.com/dotnet/core/blob/master/roadmap.md. The version of the gRPC-dotnet release will follow the rules laid out in https://github.com/grpc/grpc-dotnet/blob/master/doc/versioning.md.\n\n## Runtime\n\n- Linker-friendly gRPC\n  - As part of positioning .NET as a viable technology for cloud native, we should ensure we are linker-friendly and audit any possible future usage of reflection/ref-emit\n  - Optimize for working-set memory/published output size\n    - See https://github.com/rynowak/link-a-thon/blob/master/Findings.md for comparison\n\n  - Additional Server\n    - HttpSysServer\n    - IIS In-proc\n\n- Introduce additional transports on the server\n  - Unix-domain sockets\n  - Named pipes (on Windows)\n  - [Stretch] QUIC\n\n- Introduce additional transports on the client\n  - Unix-domain sockets\n  - Named pipes (on Windows)\n  - [Stretch] QUIC\n\n- Serializer/de-serializer performance improvements\n  - https://github.com/protocolbuffers/protobuf/pull/5888\n\n- HTTP/2 performance on the server\n  - HPACK Static dictionary\n  - HPACK Dynamic dictionary\n  - Pooling of HTTP/2 Streams\n  - [Stretch] Window update tuning\n\n - Ensure code-first gRPC is successful\n  - Marc Gravell is using protobuf.net to build a code-first gRPC experience on grpc-dotnet. Ensure our abstractions allow him to be successful.\n\n - Ensure WCF to gRPC ebook is successful\n  - Provide SME guidance where applicable\n\n- Testing existing client libraries on both implementations\n    - There are APIs and SDKs to share between the implementations\n    - https://github.com/grpc/grpc-dotnet/blob/master/doc/implementation_comparison.md\n    - Here is the list of client libraries that grpc-dotnet should work with\n        - https://github.com/googleapis/google-cloud-dotnet\n        - there's an add-on library https://github.com/GoogleCloudPlatform/grpc-gcp-csharp that is used to provide some of the functionality (like channel affinity) for some of the APIs.\n\nIt would also be useful to help with figuring out a way to make the client libraries not depend on Grpc.Core directly (which is currently the case).\n\n- Load balancing\n    -\tIntegration with XDS load balancing APIs\n    -\tMay need Connectivity APIs work in HttpClient\n    - We should start with supporting round_robin loadbalancing as a first step. The features needed for that are very likely to be needed for XDS loadbalancing as well.\n\n\n- Connection Features\n    -\tKeep alive, without keepalive support it can be difficult to have long-lived streaming call that only rarely sends messages (e.g. \"client subscribes for receiving updates from server \" scenario)\n    -\tConnection idle: https://github.com/grpc/grpc/blob/master/doc/connection-backoff.md\n    -\tWait for ready\n    -\tThese features are often needed for production ready services\n\n- Support status.proto\n    - Trailing rich metadata for error details\n    - Works across different implementation\n    - For details, see \"Richer error model\" here: https://grpc.io/docs/guides/error/ and also https://cloud.google.com/apis/design/errors#error_model\nexample what we've done for e.g. python: https://github.com/grpc/proposal/blob/master/L44-python-rich-status.md\nthe expectation is that we'll ship this as a separate nuget (e.g. \"Grpc.StatusProto\")\n\n\n- Channelz support\n    -\tObservability of server status\n\n- gRPC web\n\n## Tooling\n\n- [Stretch] Build a LSP for protobuf\n- [Stretch] VS Code extension to consume LSP\n  - [More Info Needed] Possibly partner with VS Code team here\n- [Stretch] VS Extension to consume LSP\n\n- Tooling for working with gRPC services without building a client project\n  - Integration with HttpREPL or something like WCFTestClient?\n\n- Generating and working with client certificates\n\n- Publishing to AKS\n\n## Ecosystem\n\n- Envoy integration\n  - [Stretch] Integration with Envoy XDS APIs for client-side load balancing\n- Kubernetes/AKS\n  - [More Info Needed] Helm charts for CLI publish\n- Xamarin apps support\n\n## Documentation/Samples\n\n- OAuth E2E\n- More AuthN/AuthZ coverage\n- gRPC specific features\n  - Deadlines\n  - Cancellation\n- Distributed Tracing\n  - OpenCenus/Open Telemetry\n- Interceptors\n\n## Intentional cuts/omissions\n\n- gRPC with JSON (as opposed to protobuf)\n```\n\n----------------------------------------\n\nTITLE: Listing Supported gRPC-dotnet Packages in Markdown\nDESCRIPTION: This code snippet enumerates the gRPC-dotnet packages that are officially supported by Microsoft. It includes core packages for ASP.NET Core integration, client libraries, and tools.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/microsoft-support.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Grpc.AspNetCore\n* Grpc.AspNetCore.Server\n* Grpc.AspNetCore.Web\n* Grpc.AspNetCore.Healthchecks\n* Grpc.AspNetCore.Server.ClientFactory\n* Grpc.AspNetCore.Server.Reflection\n* Grpc.Net.Client\n* Grpc.Net.ClientFactory\n* Grpc.Net.Client.Web\n* Grpc.Net.Common\n* dotnet-grpc\n```\n\n----------------------------------------\n\nTITLE: Package Name Declaration in Markdown\nDESCRIPTION: Simple code block showing the Grpc.Core.Api package name that serves as the shared API between gRPC C# and gRPC for .NET implementations.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.Core.Api/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGrpc.Core.Api\n```\n\n----------------------------------------\n\nTITLE: Grpc.Auth Package Reference\nDESCRIPTION: Package name and dependency reference for the gRPC authentication library that integrates with Google.Apis.Auth.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.Auth/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGrpc.Auth\n```\n\n----------------------------------------\n\nTITLE: Describing Grpc.HealthCheck Package in Markdown\nDESCRIPTION: This markdown snippet introduces the Grpc.HealthCheck package, explaining that it contains the reference implementation of the gRPC health check service. It's a concise description meant to provide developers with a quick understanding of the package's purpose.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.HealthCheck/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Grpc.HealthCheck\n\n`Grpc.HealthCheck` contains the reference implementation of gRPC health check service.\n```\n\n----------------------------------------\n\nTITLE: Package List in Markdown\nDESCRIPTION: List of gRPC .NET packages covered by the versioning policy\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/doc/versioning.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Grpc.AspNetCore\n- Grpc.AspNetCore.Server\n- Grpc.AspNetCore.Server.ClientFactory\n- Grpc.Net.Client\n- Grpc.Net.ClientFactory\n- Grpc.Net.Common\n- dotnet-grpc\n```\n\n----------------------------------------\n\nTITLE: Converting SSL Certificates to PFX Format using OpenSSL\nDESCRIPTION: OpenSSL command to combine server1.pem and server1.key into server1.pfx file with password '1111'. Creates PFX certificate bundle compatible with .NET gRPC interop server testing.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/testassets/Certs/InteropTests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -out server1.pfx -inkey server1.key -in server1.pem -certfile ca.pem\n```\n\n----------------------------------------\n\nTITLE: Displaying Contribution Instructions in Markdown\nDESCRIPTION: This Markdown snippet outlines the initial steps for contributing to the grpc-dotnet project. It emphasizes the importance of reading the gRPC organization's governance rules and contribution guidelines before making contributions.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# How to contribute\n\nWe definitely welcome patches and contributions to grpc-dotnet! Please read the gRPC\norganization's [governance rules](https://github.com/grpc/grpc-community/blob/master/governance.md)\nand [contribution guidelines](https://github.com/grpc/grpc-community/blob/master/CONTRIBUTING.md) before proceeding.\n```\n\n----------------------------------------\n\nTITLE: Markdown Links and References\nDESCRIPTION: Markdown formatted links to external resources for gRPC troubleshooting documentation and StackOverflow references.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/TROUBLESHOOTING.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Troubleshooting gRPC for .NET\n\nThis guide is for troubleshooting gRPC for .NET (grpc-dotnet). For issues specific to Grpc.Core (C-core server and client), or code generation with Grpc.Tools, please refer to [TROUBLESHOOTING.md](https://github.com/grpc/grpc/blob/master/TROUBLESHOOTING.md) in `grpc/grpc` repository.\n```\n\n----------------------------------------\n\nTITLE: Client-Side Error Detail Extraction Using GetDetail<T>()\nDESCRIPTION: Shows how to extract and process specific error details from an RpcException using the GetDetail<T>() method. Demonstrates error handling for ErrorInfo type.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.StatusProto/README.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvoid PrintError(RpcException ex)\n{\n    Google.Rpc.Status? rpcStatus = ex.GetRpcStatus();\n\n    if (rpcStatus != null)\n    {\n        Console.WriteLine($\"Google.Rpc Status: Code: {rpcStatus.Code}, Message: {rpcStatus.Message}\");\n\n        ErrorInfo? errorInfo = rpcStatus.GetDetail<ErrorInfo>();\n        if (errorInfo != null)\n        {\n            Console.WriteLine($\"ErrorInfo: Reason: {errorInfo.Reason}, Domain: {errorInfo.Domain}\");\n            foreach (var md in errorInfo.Metadata)\n            {\n                Console.WriteLine($\"\\tKey: {md.Key}, Value: {md.Value}\");\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Icon Font in HTML\nDESCRIPTION: HTML markup for displaying an icon using the default Open Iconic classes and data attributes.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Container/Frontend/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Icon Direct Usage in HTML\nDESCRIPTION: Shows how to directly embed an SVG icon as an image element with proper alt text for accessibility.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Container/Frontend/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Sprite Icon Usage in HTML\nDESCRIPTION: Demonstrates how to use icons from an SVG sprite sheet using SVG and use tags for better performance.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Container/Frontend/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using SVG Icons\nDESCRIPTION: Basic implementation of Open Iconic SVG icons as image elements.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Blazor/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Sprite Icons\nDESCRIPTION: Example of using Open Iconic's SVG sprite system for efficient icon loading.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Blazor/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Loading Default Icon Font Stylesheet\nDESCRIPTION: HTML link tag for including the default Open Iconic stylesheet without framework integration.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Container/Frontend/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icon Dimensions\nDESCRIPTION: CSS rules for setting icon dimensions in the SVG sprite system.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Blazor/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icon Color with CSS\nDESCRIPTION: CSS rule for setting the color of an SVG icon using the fill property.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Container/Frontend/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Coloring SVG Icons\nDESCRIPTION: CSS rules for setting icon colors in the SVG sprite system.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Blazor/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Integration\nDESCRIPTION: Example of including and using Open Iconic with Bootstrap styling.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Blazor/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Loading Bootstrap Icon Font Stylesheet\nDESCRIPTION: HTML link tag for including the Bootstrap-specific Open Iconic stylesheet.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Container/Frontend/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icon Size with CSS\nDESCRIPTION: CSS rules for setting consistent icon dimensions when using SVG sprites.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Container/Frontend/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bootstrap Icon Font in HTML\nDESCRIPTION: HTML markup for displaying an icon using the Bootstrap-specific icon font classes.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Container/Frontend/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Loading Foundation Icon Font Stylesheet\nDESCRIPTION: HTML link tag for including the Foundation-specific Open Iconic stylesheet.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Container/Frontend/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Using Foundation Icon Font in HTML\nDESCRIPTION: HTML markup for displaying an icon using the Foundation-specific icon font classes.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Container/Frontend/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Standalone Implementation\nDESCRIPTION: Example of including and using Open Iconic without a framework.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Blazor/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Package Name Declaration in Markdown\nDESCRIPTION: Specifies the package name for gRPC reflection implementation in .NET\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/src/Grpc.Reflection/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Grpc.Reflection\n```\n\n----------------------------------------\n\nTITLE: Foundation Integration\nDESCRIPTION: Example of including and using Open Iconic with Foundation styling.\nSOURCE: https://github.com/grpc/grpc-dotnet/blob/master/examples/Blazor/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```"
  }
]