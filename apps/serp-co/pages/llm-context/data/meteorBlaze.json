[
  {
    "owner": "meteor",
    "repo": "blaze",
    "content": "TITLE: Cleaning Up Template Instance Using onDestroyed Callback in Meteor Blaze with JavaScript\nDESCRIPTION: Defines cleanup logic to run when a template instance is removed from the DOM and destroyed. The callback receives the template instance through 'this', allowing deregistration or undoing side effects from creation or rendering. This callback is executed once and is the last lifecycle method for the instance. It is crucial for preventing memory leaks and maintaining application state consistency.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/templates.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.myPictures.onDestroyed(function () {\n  // deregister from some central store\n  GalleryTemplates = _.without(GalleryTemplates, this);\n});\n```\n\n----------------------------------------\n\nTITLE: Composing Components in Blaze HTML\nDESCRIPTION: Illustrates how to include and reuse a smaller, self-contained Blaze component (`blurringInput`) within a larger parent template (`autocompleteInput`). It shows how attributes like `name`, `value`, and callback functions (`onChange`) are passed down to the child component, enabling data flow and interaction.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusing-code.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"autocompleteInput\">\n  {{> blurringInput name=name value=currentValue onChange=onChange}}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Applying DOM Manipulations Using Template onRendered Callback in Meteor Blaze with JavaScript\nDESCRIPTION: Defines a callback to run when a template instance is rendered into the DOM for the first time. 'this' refers to the unique template instance, which allows for DOM querying and manipulation through jQuery. This example demonstrates integrating the Packery jQuery plugin to arrange elements after rendering. Requires Packery jQuery plugin and Blaze's template instance context. Useful for post-render DOM operations dependent on template content.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/templates.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.myPictures.onRendered(function () {\n  // Use the Packery jQuery plugin\n  this.$('.container').packery({\n    itemSelector: '.item',\n    gutter: 10\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Template.subscriptionsReady Helper in Blaze HTML Templates\nDESCRIPTION: This HTML snippet shows how to use the built-in helper 'Template.subscriptionsReady' in Blaze templates to conditionally render content based on the readiness of data subscriptions. It uses an {{#if}} block to display either the actual content when data is ready or a loading indicator while waiting. It expects the corresponding subscription to be initiated in the associated JavaScript code.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/templates.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<template name=\"notifications\">\n  {{#if Template.subscriptionsReady}}\n    <!-- This is displayed when all data is ready. -->\n    {{#each notifications}}\n      {{> notification}}\n    {{/each}}\n  {{else}}\n    Loading...\n  {{/if}}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Reactive Subscription Dependent on Template Data Context in Blaze Using JavaScript\nDESCRIPTION: This code snippet illustrates how to create a reactive subscription inside a Blaze template's onCreated callback using 'this.autorun'. It uses 'Template.currentData()' to access the reactive data context, allowing the subscription parameters to update reactively when the data context changes. This pattern is useful when subscriptions depend on dynamic data passed into the template.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/templates.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.comments.onCreated(function () {\n  // Use this.subscribe with the data context reactively\n  this.autorun(() => {\n    var dataContext = Template.currentData();\n    this.subscribe(\"comments\", dataContext.postId);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Todos_item Template HTML\nDESCRIPTION: Defines the `Todos_item` template using HTML and Spacebars syntax. It displays properties of a `todo` object from the data context (`{{todo.text}}`, `{{todo.checked}}`) and calls the `checkedClass` helper (`{{checkedClass todo}}`) to apply CSS classes based on the todo's state. It includes input elements for interaction.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<template name=\"Todos_item\">\n  <div class=\"list-item {{checkedClass todo}} {{editingClass editing}}\">\n    <label class=\"checkbox\">\n      <input type=\"checkbox\" checked={{todo.checked}} name=\"checked\">\n      <span class=\"checkbox-custom\"></span>\n    </label>\n\n    <input type=\"text\" value=\"{{todo.text}}\" placeholder=\"Task name\">\n    <a class=\"js-delete-item delete-item\" href=\"#\">\n      <span class=\"icon-trash\"></span>\n    </a>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Iterating List with Each Block Helper HTML\nDESCRIPTION: Demonstrates the `{{#each .. in}}` block helper to iterate over a list of `todos` provided in the data context. For each `todo` item, it includes the `Todos_item` template (`{{> Todos_item}}`), explicitly setting its data context using the output of the `todoArgs` helper. It also includes an `{{else}}` block to render alternative content when the `todos` list is empty.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n  {{#each todo in todos}}\n    {{> Todos_item (todoArgs todo)}}\n  {{else}}\n    <div class=\"wrapper-message\">\n      <div class=\"title-message\">No tasks here</div>\n      <div class=\"subtitle-message\">Add new tasks using the field above</div>\n    </div>\n  {{/each}}\n```\n\n----------------------------------------\n\nTITLE: Using Block Tags in Attribute Values\nDESCRIPTION: Shows how to use block tags like conditional statements inside attribute values to dynamically set attributes based on conditions.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"{{#if done}}done{{else}}notdone{{/if}}\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering Global Helper in Blaze JS\nDESCRIPTION: Registers a global Spacebars helper named `shortDate` using `Template.registerHelper`. This helper is designed for simple, reusable view logic, specifically formatting a date object into a short string representation. Dependencies: Requires the `moment.js` library to be installed and available.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusing-code.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.registerHelper('shortDate', (date) => {\n  return moment(date).format(\"MMM do YY\");\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes Helper JavaScript\nDESCRIPTION: Defines the `attributes` helper for a template named `foo`. This helper is designed to be used as an attribute helper in Spacebars templates. It returns a JavaScript object containing key-value pairs (e.g., `{ class: 'A class', style: {background: 'blue'} }`) which Spacebars then applies as attributes to the target HTML element.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.foo.helpers({\n  attributes() {\n    return {\n      class: 'A class',\n      style: {background: 'blue'}\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Global Helper in Blaze HTML\nDESCRIPTION: Demonstrates how to invoke the globally registered `shortDate` helper within a specific Blaze template (`myBike`). It shows the helper call syntax `{{helperName argument}}`, passing the `bike.registeredAt` property as input to the helper to display a formatted date. Dependencies: Relies on the `shortDate` global helper being registered prior to template rendering.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusing-code.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"myBike\">\n  <dl>\n   <dt>Date registered</dt>\n   <dd>{{shortDate bike.registeredAt}}</dd>\n </dl>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Triple-braced Tags for Raw HTML Insertion\nDESCRIPTION: Demonstrates how to use triple-braced tags to insert raw HTML content into a template. The inserted HTML must consist of balanced tags.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"snippet\">\n  {{{snippetBody}}}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining checkedClass Helper with Keyword Arguments JavaScript\nDESCRIPTION: Demonstrates how to define a Spacebars helper (`checkedClass` for `Todos_item`) that accepts keyword arguments in addition to positional arguments. Keyword arguments passed from the template are accessed through the `options.hash` property of the final argument. The helper uses these arguments (`classname`, `noClass`) to modify the resulting CSS class string.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.Todos_item.helpers({\n  checkedClass(todo, options) {\n    const classname = options.hash.classname || 'checked';\n    if (todo.checked) {\n      return classname;\n    } else if (options.hash.noClass) {\n      return `no-${classname}`;\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Nested Each-in Block Helper HTML\nDESCRIPTION: Demonstrates nested usage of the `{{#each .. in}}` block helper. The outer loop iterates through a list of `todos`, and the inner loop iterates through the `tags` property of each `todo`. The example highlights that variables introduced by the `in` keyword (`todo`, `tag`) are correctly scoped and accessible within their respective blocks and nested blocks.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n{{#each todo in todos}}\n  {{#each tag in todo.tags}}\n    <!-- in here, both todo and tag are in scope -->\n  {{/each}}\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Using Blaze.renderWithData method in JavaScript\nDESCRIPTION: The Blaze.renderWithData method renders a template with data context and inserts it into the DOM. It's equivalent to using Blaze.render with Blaze.With.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/blaze.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBlaze.renderWithData(templateOrView, data, parentNode, [nextNode], [parentView])\n```\n\n----------------------------------------\n\nTITLE: Invoking Instance Functions from Events - Blaze - JavaScript\nDESCRIPTION: Shows how to call a function (`saveList`) that has been previously attached to the template instance from within an event handler (`submit .js-edit-form`). This pattern promotes code reuse and helps keep event handlers concise by delegating complex logic.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusable-components.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.Lists_show.events({\n  'submit .js-edit-form'(event, instance) {\n    event.preventDefault();\n    instance.saveList();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using With Blocks for Data Context\nDESCRIPTION: Shows how to use #with blocks to establish a new data context for the contained template content, accessing properties from that context.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{{#with employee}}\n  <div>Name: {{name}}</div>\n  <div>Age: {{age}}</div>\n{{/with}}\n```\n\n----------------------------------------\n\nTITLE: Chaining Block Helpers in Spacebars HTML Templates\nDESCRIPTION: Demonstrates how to chain block helpers in Spacebars templates using conditional input field rendering. The example shows how to create radio, checkbox, or text inputs based on different conditions.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n{{#input isRadio}}\n  <input type=\"radio\" />\n{{else input isCheckbox}}\n  <input type=\"checkbox\" />\n{{else}}\n  <input type=\"text\" />\n{{/foo}}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Dynamic Attributes\nDESCRIPTION: Shows how to combine multiple dynamic attribute tags with regular attributes in an HTML element. Attributes are combined from left to right with later values overwriting earlier ones.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=foo class={{myClass}} {{attrs1}} {{attrs2}}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Defining myHtml Helper for Raw Rendering JavaScript\nDESCRIPTION: Defines the `myHtml` helper for a template named `foo`. This helper returns a simple HTML string ('<h1>This H1 will render</h1>'). This helper is intended to be used with the Spacebars triple-mustache syntax (`{{{myHtml}}}`) to demonstrate how to include raw HTML output directly within a template.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.foo.helpers({\n  myHtml() {\n    return '<h1>This H1 will render</h1>';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Scoping DOM Lookups to Template Instance - Blaze - JavaScript\nDESCRIPTION: Performs a DOM lookup using `instance.$()` within an event handler. This ensures the selection is scoped only to elements within the current template instance, preventing unintended interactions with elements outside the component and improving reusability. Useful for tasks like focusing input fields.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusable-components.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.Lists_show.events({\n  'click .js-todo-add'(event, instance) {\n    instance.$('.js-todo-new input').focus();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Blaze.toHTML method in JavaScript\nDESCRIPTION: The Blaze.toHTML method renders a template or View to HTML string. This is useful for server-side rendering but loses all reactivity.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/blaze.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBlaze.toHTML(templateOrView)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Meteor Publications in Blaze Templates Using JavaScript\nDESCRIPTION: This snippet demonstrates how to subscribe to a Meteor publication inside the onCreated lifecycle callback of a Blaze template. The subscription ensures reactive data loading tied to the template instance and is automatically stopped when the template is destroyed. The example uses the template instance's 'subscribe' method and is intended to be used with Meteor's publish-subscribe data system.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/templates.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.notifications.onCreated(function () {\n  // Use this.subscribe inside onCreated callback\n  this.subscribe(\"notifications\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using Blaze.remove method in JavaScript\nDESCRIPTION: The Blaze.remove method removes a rendered View from the DOM and stops all reactive updates and behaviors attached to it. It cleans up all associated resources.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/blaze.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBlaze.remove(renderedView)\n```\n\n----------------------------------------\n\nTITLE: Creating Object Context with With Block\nDESCRIPTION: Demonstrates how to create an object with named properties using the #with block tag and reference it with 'this'.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{{#with x=1 y=2}}\n  {{{getHTMLForPoint this}}}\n{{/with}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Blaze.View in JavaScript\nDESCRIPTION: The Blaze.View constructor creates a new View object with a rendering function. Views are the building blocks of reactive templates in Blaze.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/blaze.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew Blaze.View(name, renderFunction)\n```\n\n----------------------------------------\n\nTITLE: Accessing Subscription Data in Helpers\nDESCRIPTION: Helper function that creates an array containing the current list ID for use in the template. This ensures proper animation when changing lists by removing and adding a new copy of the list template.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/smart-components.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nTemplate.Lists_show_page.helpers({\n  // We use #each on an array of one item so that the \"list\" template is\n  // removed and a new copy is added when changing lists, which is\n  // important for animation purposes.\n  listIdArray() {\n    const instance = Template.instance();\n    const listId = instance.getListId();\n    return Lists.findOne(listId) ? [listId] : [];\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Blaze UI Templates using Spacebars (HTML)\nDESCRIPTION: Example Spacebars templates defining the HTML structure for a leaderboard UI in Meteor Blaze. Includes `leaderboard`, `player`, and `no_players` templates demonstrating iteration (`#each`), template inclusion (`> player`), and dynamic attributes (`{{selected}}`).\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/index.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"leaderboard\">\n  <ol class=\"leaderboard\">\n    {{#each players}}\n      {{> player}}\n    {{else}}\n      {{> no_players}}\n    {{/each}}\n  </ol>\n</template>\n\n<template name=\"player\">\n  <li class=\"player {{selected}}\">\n    <span class=\"name\">{{name}}</span>\n    <span class=\"score\">{{score}}</span>\n  </li>\n</template>\n\n<template name=\"no_players\">\n  <li class=\"no-players\">\n    No players available\n  </li>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Scanning HTML for Template Tags with Meteor Templating Tools - JavaScript\nDESCRIPTION: This snippet utilizes the scanHtmlForTags function from Meteor's templating-tools package to parse an HTML file for specified top-level tags such as 'body', 'head', and 'template'. The function takes an options object with 'sourceName' (filename for error reporting), 'contents' (the HTML source), and 'tagNames' (an array of tag names to find). The result is an array of Tag objects, which encapsulate tag name, attributes, content, and positional metadata. Requires the meteor-templating-tools package.\nSOURCE: https://github.com/meteor/blaze/blob/master/packages/templating-tools/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tags = scanHtmlForTags({\n  sourceName: inputPath,\n  contents: contents,\n  tagNames: [\"body\", \"head\", \"template\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Spacebars Comment Tag Usage in Templates (HTML)\nDESCRIPTION: Shows both single-line and block comment syntax for Spacebars templates. Comments are stripped during compilation and not output to HTML. No dependencies, inputs, or outputs—used only for code/documentation clarity.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n{{! Start of a section}}\n<div class=\"section\">\n  ...\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n{{!-- This is a block comment.\nWe can write {{foo}} and it doesn't matter.\n{{#with x}}This code is commented out.{{/with}}\n--}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Template Instance State Using onCreated Callback in Meteor Blaze with JavaScript\nDESCRIPTION: Sets up initial state for a template instance before it is rendered. The 'this' context is the template instance object where reactive variables and properties can be defined for use in helpers and event handlers. The example initializes a ReactiveVar and registers the template instance in a central store. This callback runs once at instance creation and is ideal for setup and initialization logic dependent on reactive data sources.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/templates.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.myPictures.onCreated(function () {\n  // set up local reactive variables\n  this.highlightedPicture = new ReactiveVar(null);\n  \n  // register this template within some central store\n  GalleryTemplates.push(this);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Unsynchronized Async Binding with #let and Template Helpers (HTML)\nDESCRIPTION: Illustrates how #let block bindings in Spacebars do not synchronize their resolved values to latest promise invocations, potentially leading to UI desynchronization when helpers are triggered multiple times or data is fetched repeatedly. Inputs are defined via asynchronous helper functions, outputting possibly outdated data depending on resolution timing. Used in cases where strict ordering or synchronization is not guaranteed; external mechanisms like a queue are recommended otherwise.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"example\">\n  {{#let name=getName}}\n    Hi, {{name}}!\n  {{/let}}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Invoking a Custom Block Helper in a Template (HTML)\nDESCRIPTION: Shows how to use a custom block helper by invoking the 'note' template as a block, passing content that will be inserted into the block’s output. Inputs are custom block content, outputs are the content wrapped by the custom block helper. No dependencies beyond templates defined per Meteor convention.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n{{#note}}\n  Any content here\n{{/note}}\n```\n\n----------------------------------------\n\nTITLE: Using View.autorun method in JavaScript\nDESCRIPTION: The View.autorun method creates a reactive computation that automatically stops when the View is destroyed. It's similar to Tracker.autorun but with View context.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/blaze.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nview.autorun(runFunc)\n```\n\n----------------------------------------\n\nTITLE: Attaching Functions to Template Instance - Blaze - JavaScript\nDESCRIPTION: Attaches a reusable helper function (`saveList`) directly to the template instance in the `onCreated` callback. This function encapsulates complex logic, such as calling a Meteor method, and can be easily invoked from multiple event handlers using `instance.saveList()`. Requires importing necessary methods.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusable-components.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  updateName,\n} from '../../api/lists/methods.js';\n\nTemplate.Lists_show.onCreated(function() {\n  this.saveList = () => {\n    this.state.set('editing', false);\n\n    updateName.call({\n      listId: this.data.list._id,\n      newName: this.$('[name=name]').val()\n    }, (err) => {\n      err && alert(err.error);\n    });\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching jQuery plugin in onRendered Callback using autorun (Blaze, JS)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `onRendered` callback in a Blaze template to ensure that a subscription is ready before executing code. It uses `this.autorun` to reactively check if `this.subscriptionsReady()` returns true, indicating that the data from the subscription is available. When the subscription is ready, it releases the launch screen.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusable-components.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.Lists_show_page.onRendered(function() {\n  this.autorun(() => {\n    if (this.subscriptionsReady()) {\n      // Handle for launch screen defined in app-body.js\n      AppLaunchScreen.listRender.release();\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Attribute Helpers in Blaze Templates\nDESCRIPTION: This HTML snippet shows how to use multiple attribute helpers on a single element. The example combines a custom classes helper with a backgroundImageStyle helper to apply classes and styling to a div element.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/understanding-blaze.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"myTemplate\">\n  <div id=\"my-div\" {{classes 'foo' 'bar'}} {{backgroundImageStyle 'my-image.jpg'}}>My div</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing npm-installed jQuery in Meteor Client JS\nDESCRIPTION: JavaScript import statement for including the npm-installed jQuery library in a client-side Meteor file (e.g., `client/main.js`). This makes the `$` variable globally available for use in Blaze templates or other client logic.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport $ from 'jquery';\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handlers in Blaze JavaScript\nDESCRIPTION: This snippet demonstrates how to define event handlers within a Blaze event map. It shows the basic structure using a JavaScript object where keys are event specifications (e.g., 'click', 'click .accept') and values are the corresponding handler functions. The handler function receives the `event` object as an argument.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/templates.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n{\n  // Fires when any element is clicked\n  'click'(event) { ... },\n  \n  // Fires when any element with the 'accept' class is clicked\n  'click .accept'(event) { ... },\n  \n  // Fires when 'accept' is clicked or focused\n  'click .accept, focus .accept'(event) { ... }\n  'click/focus .accept'(event) { ... }\n  \n  // Fires when 'accept' is clicked or focused, or a key is pressed\n  'click .accept, focus .accept, keypress'(event) { ... }\n  'click/focus .accept, keypress'(event) { ... }\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Using Let Block Helper for Template Variables HTML\nDESCRIPTION: Demonstrates the built-in `{{#let}}` block helper, which assigns values from data context properties (`person.bio.firstName`) or helper outputs (`generateColor`) to temporary variables (`name`, `color`) that are scoped locally within the block. These variables can then be easily accessed within the block's HTML markup, providing readable aliases.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n{{#let name=person.bio.firstName color=generateColor}}\n  <div>{{name}} gets a {{color}} card!</div>\n{{/let}}\n```\n\n----------------------------------------\n\nTITLE: Tracing Reactive Invalidations in Blaze Helpers\nDESCRIPTION: This snippet demonstrates how to debug reactive re-renders by adding a trace to see the source of invalidations. It uses Tracker.onInvalidate to log a stack trace whenever a helper is scheduled to re-run.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/understanding-blaze.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nTemplate.myTemplate.helpers({\n  helper() {\n    // When this helper is scheduled to re-run, the `console.trace` will log a stack trace of where\n    // the invalidation has come from (typically a `changed` message from some reactive variable).\n    Tracker.onInvalidate(() => console.trace());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Helpers for Blaze Templates\nDESCRIPTION: This JavaScript snippet shows how to implement attribute helpers that return objects to be used in templates. It includes a classes helper for adding CSS classes and a backgroundImageStyle helper for setting the background image.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/understanding-blaze.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nTemplate.myTemplate.helpers({\n  classes(names) {\n    return {class: names.map(n => `my-template-${n}`)};\n  },\n  backgroundImageStyle(imageUrl) {\n    return {\n      style: {\n        backgroundImage: `url(${imageUrl})`\n      }\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Spacebars 'unless' Helper using #if and Block Context (HTML)\nDESCRIPTION: Provides an example of implementing the #unless helper as a template using #if logic and the Template.elseBlock/contentBlock conventions. Demonstrates how block and context passing works, with the condition supplied as template data context ('this'). Only valid for Spacebars templates in the Meteor environment. Inputs: block and else block content, plus condition value; outputs either contentBlock or elseBlock depending on the conditional evaluation.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"unless\">\n  {{#if this}}\n    {{> Template.elseBlock}}\n  {{else}}\n    {{> Template.contentBlock}}\n  {{/if}}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining checkedClass Helper JavaScript\nDESCRIPTION: Defines the `checkedClass` helper for the `Todos_item` template in JavaScript. This basic version of the helper receives a `todo` object as an argument and returns the string 'checked' if the `todo.checked` property is true. This returned string is then used in the template to dynamically add a CSS class.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.Todos_item.helpers({\n  checkedClass(todo) {\n    return todo.checked && 'checked';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Equivalent Nested Block Tags\nDESCRIPTION: Shows the equivalent nested structure for chained block tags, demonstrating how else clauses with tags are processed.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{{#foo}}\n  <p>Foo</p>\n{{else}}\n  {{#bar}}\n    <p>Bar</p>\n  {{else}}\n    <p></p>\n  {{/bar}}\n{{/foo}}\n```\n\n----------------------------------------\n\nTITLE: Adding Iron Router Package in Meteor - Shell\nDESCRIPTION: This snippet demonstrates how to install the Iron Router package for Meteor by running the 'meteor add iron:router' command in the terminal. Iron Router provides client and server-side routing tailored for Meteor applications that utilize Blaze templates. There are no additional parameters required, and the command should be run from the root directory of your Meteor project. An internet connection is needed to fetch the package, and the user must have Meteor CLI installed.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/routing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add iron:router\n```\n\n----------------------------------------\n\nTITLE: Passing Callbacks to Child Components - Blaze - JavaScript\nDESCRIPTION: Illustrates how a parent template's helper (`todoArgs`) can define and pass a callback function (`onEditingChange`) to a child component via its data context. The child template's event handler (`Todos_item.events`) can then invoke this callback (`this.onEditingChange`) to effectively communicate state changes or actions back up to the parent component.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusable-components.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.Lists_show.helpers({\n  todoArgs(todo) {\n    const instance = Template.instance();\n    return {\n      todo,\n      editing: instance.state.equals('editingTodo', todo._id),\n      onEditingChange(editing) {\n        instance.state.set('editingTodo', editing ? todo._id : false);\n      }\n    };\n  }\n});\n\nTemplate.Todos_item.events({\n  'focus input[type=text]'() {\n    this.onEditingChange(true);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Flow Router Package in Meteor - Shell\nDESCRIPTION: This snippet demonstrates the installation of Flow Router, a client-side routing solution for Blaze in Meteor, using the 'meteor add kadira:flow-router' command. This command should be executed in the Meteor project directory via the command line. Prerequisites include Meteor CLI and internet access; no additional parameters are required. The command integrates Flow Router for managing in-app navigation and URL state.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/routing.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add kadira:flow-router\n```\n\n----------------------------------------\n\nTITLE: Template Compilation Result Object from compileTagsWithSpacebars - JavaScript\nDESCRIPTION: This snippet defines the structure of the result object returned by compileTagsWithSpacebars from templating-tools. The object contains fields for the compiled JavaScript ('js'), concatenated head content ('head'), an (unused) body string, and an object with body tag attributes ('bodyAttrs'). The body and template tags are compiled using 'spacebars-compiler', head tags are concatenated, and body tag attributes are aggregated. All template tags must have only a name attribute, and head tags cannot have attributes. Requires the meteor-templating-tools and spacebars-compiler packages.\nSOURCE: https://github.com/meteor/blaze/blob/master/packages/templating-tools/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  js: String,\n  body: \"\",\n  head: String,\n  bodyAttrs: {\n    [attrName]: String\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Template Helpers in Meteor Blaze with JavaScript\nDESCRIPTION: Defines reactive helper functions for a template in Meteor Blaze, allowing template variables to be dynamically computed and used in templates. Each helper runs within Tracker.autorun to reactively update with changes. Helpers can take positional and keyword arguments to customize output. Dependencies include Meteor's Session and Tracker. Inputs are template data context and arguments; output is returned values available in template HTML via Spacebars syntax.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/templates.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.myTemplate.helpers({\n  foo() {\n    return Session.get(\"foo\");\n  }\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.myTemplate.helpers({\n  displayName(firstName, lastName, keyword) {\n    var prefix = keyword.hash.title ? keyword.hash.title + \" \" : \"\";\n    return prefix + firstName + \" \" + lastName;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Converting HTMLjs Content to HTML in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to convert HTMLjs content to an HTML string using the `HTML.toHTML()` function. It takes any HTMLjs content as input and returns a string representation of the HTML. Foreign objects are not allowed, requiring a custom subclass of `HTML.ToHTMLVisitor` and overriding `visitObject` for use with such content.\nSOURCE: https://github.com/meteor/blaze/blob/master/packages/htmljs/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nHTML.toHTML(HTML.HR()) // => \"<hr>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Changelog Content in Markdown/HTML\nDESCRIPTION: Uses a custom changelog template tag to include and render the contents of the HISTORY.md file from the parent directory. Includes an HTML comment used as a deployment trigger mechanism.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/changelog.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{%- changelog '../HISTORY.md' %}\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Change this to force a deployment 03 -->\n```\n\n----------------------------------------\n\nTITLE: Escaping Curly Braces in Spacebars HTML Templates\nDESCRIPTION: Shows how to escape curly braces in Spacebars templates using the pipe character. This technique allows rendering literal curly braces as content rather than treating them as template syntax.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<!-- will render as <h1>All about {{</h1> -->\n<h1>All about {{|</h1>\n\n<!-- will render as <h1>All about {{{</h1> -->\n<h1>All about {{{|</h1>\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Instance State and DOM - Blaze - JavaScript\nDESCRIPTION: Demonstrates how to access the template instance (`instance` parameter) within Blaze helpers and event handlers. Shows reading reactive state (`instance.state`) in a helper to derive arguments for a child component and using `instance.$()` within an event handler for scoped DOM lookups.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusable-components.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.Lists_show.helpers({\n  todoArgs(todo) {\n    const instance = Template.instance();\n    return {\n      todo,\n      editing: instance.state.equals('editingTodo', todo._id),\n      onEditingChange(editing) {\n        instance.state.set('editingTodo', editing ? todo._id : false);\n      }\n    };\n  }\n});\n\nTemplate.Lists_show.events({\n  'click .js-cancel'(event, instance) {\n    instance.state.set('editingTodo', false);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Blaze Template Helpers and Events (JavaScript)\nDESCRIPTION: JavaScript code defining reactive helpers and event handlers for the example Blaze templates. The `players` helper fetches data reactively from the `Players` Minimongo collection, the `click` event handler updates the reactive `Session` variable, and the `selected` helper reactively determines a CSS class based on the `Session` state.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/index.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.leaderboard.helpers({\n  players: function () {\n    // Perform a reactive database query against minimongo\n    return Players.find({}, { sort: { score: -1, name: 1 } });\n  }\n});\n\nTemplate.player.events({\n  'click': function () {\n    // click on a player to select it\n    Session.set(\"selectedPlayer\", this._id);\n  }\n});\n\nTemplate.player.helpers({\n  selected: function () {\n    return Session.equals(\"selectedPlayer\", this._id) ? \"selected\" : '';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching and Passing Data to Child Components\nDESCRIPTION: Helper function that prepares data for a child component, controlling reactivity to prevent unnecessary re-renders. It passes subscription readiness state, the list object as a function to isolate reactivity, and todos associated with the list.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/smart-components.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nTemplate.Lists_show_page.helpers({\n  listArgs(listId) {\n    const instance = Template.instance();\n    return {\n      todosReady: instance.subscriptionsReady(),\n      // We pass `list` (which contains the full list, with all fields, as a function\n      // because we want to control reactivity. When you check a todo item, the\n      // `list.incompleteCount` changes. If we didn't do this the entire list would\n      // re-render whenever you checked an item. By isolating the reactiviy on the list\n      // to the area that cares about it, we stop it from happening.\n      list() {\n        return Lists.findOne(listId);\n      },\n      // By finding the list with only the `_id` field set, we don't create a dependency on the\n      // `list.incompleteCount`, and avoid re-rendering the todos when it changes\n      todos: Lists.findOne(listId, {fields: {_id: true}}).todos()\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing/Updating Git Submodules via Parent Directory\nDESCRIPTION: This shell command sequence first changes the current directory to the parent directory (`cd ..`) and then initializes and updates any Git submodules defined in that parent directory's repository configuration. It's intended to be run after cloning the main Blaze documentation repository or pulling updates, potentially from within a submodule directory, to ensure all necessary submodules like the theme and test runner are correctly fetched and checked out.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd .. && git submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Helper for use in Spacebars Templates (JavaScript)\nDESCRIPTION: Defines a Meteor template helper that fetches user profile information asynchronously using the current userId and an asynchronous fetch call. This helper supports use in Spacebars templates where promises are handled by #let binding. Inputs are reactive data sources (e.g., userId), and outputs are the resolved profile name. Dependencies include the Meteor platform and fetch(), and care should be taken as multiple calls may result in out-of-order resolutions if not externally synchronized.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.example.helpers({\n  async getName() {\n    const userId = Meteor.userId(); // Reactive data source.\n    const profile = await fetch(/* ... */); // Async operation.\n    return profile.name;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using #let Block with Aliased Variables in Spacebars (HTML)\nDESCRIPTION: Demonstrates how to use the #let template tag to alias expressions within a Spacebars HTML template. Uses named arguments (e.g., name and color), which take precedence over template names or global helpers. No dependencies beyond running within Meteor's template system; parameters are alias bindings and support both synchronous and promise-returning values. The snippet outputs aliased variable values within the template and handles name collisions by prioritizing the innermost alias.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n{{#let name=person.bio.firstName color=generateColor}}\n  <div>{{name}} gets a {{color}} card!</div>\n{{/let}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Raw HTML with Triple Mustache HTML\nDESCRIPTION: Shows the `{{{ }}` triple-mustache syntax in Spacebars for rendering raw HTML. Unlike the standard double-mustache (`{{ }}`), this syntax does not escape HTML characters, allowing HTML strings returned from a helper or present in the data context (`myHtml`) to be rendered directly into the template. This should be used with extreme caution to prevent Cross-Site Scripting (XSS) vulnerabilities, especially with user-provided content.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n{{{myHtml}}}\n```\n\n----------------------------------------\n\nTITLE: Iterating with Each Block\nDESCRIPTION: Shows how to use the #each block to iterate over a sequence and render content for each item, setting the data context to the current item.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n{{#each people}}\n  <li>{{name}}</li>\n{{/each}}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Helpers for Composed Component in Blaze JS\nDESCRIPTION: Provides JavaScript helpers for the `autocompleteInput` template. The `currentValue` helper would supply the dynamic data to the composed input. The `onChange` helper demonstrates how to receive and process a callback function provided by the child `blurringInput`, allowing the parent template to react to events originating from the sub-component. Dependencies: Assumes the existence of a `blurringInput` template and its corresponding JavaScript logic.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusing-code.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.autocompleteInput.helpers({\n  currentValue() {\n    // perform complex logic to determine the auto-complete's current text value\n  },\n  onChange() {\n    // This is the `autocompleteInput`'s template instance\n    const instance = Template.instance();\n    // The second argument to this function is the template instance of the `blurringInput`.\n    return (event) => {\n      // read the current value out of the input, potentially change the value\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Publications in onCreated Callback\nDESCRIPTION: Sets up a reactive subscription to the 'todos.inList' publication based on the current FlowRouter parameter. Uses Template.instance().subscribe() to allow tracking of subscription readiness state.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/smart-components.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nTemplate.Lists_show_page.onCreated(function() {\n  this.getListId = () => FlowRouter.getParam('_id');\n\n  this.autorun(() => {\n    this.subscribe('todos.inList', this.getListId());\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsor Logos - HTML\nDESCRIPTION: This HTML code displays sponsor logos fetched from OpenCollective.  Each `<a>` tag creates a hyperlink to the sponsor's website, with the image inside displaying their logo. The `target=\"_blank\"` attribute ensures the link opens in a new tab. The `src` attribute of the `<img>` tag points to an SVG image of the sponsor's logo.\nSOURCE: https://github.com/meteor/blaze/blob/master/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/blaze/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/blaze/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/blaze/sponsor/29/avatar.svg\"></a>\n```\n\n----------------------------------------\n\nTITLE: Using If/Unless Conditional Blocks\nDESCRIPTION: Demonstrates how to use #if and #unless conditional blocks to render content based on a condition's truthiness or falsiness.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{{#if something}}\n  <p>It's true</p>\n{{else}}\n  <p>It's false</p>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Validating Data Context - Blaze - JavaScript\nDESCRIPTION: Validates the expected data context provided to a Blaze template (`Lists_show`) within the `onCreated` callback using `SimpleSchema` inside a reactive `autorun` block. This ensures the data shape is correct and reactive to changes, promoting data integrity. Requires the `simple-schema` package.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusable-components.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.Lists_show.onCreated(function() {\n  this.autorun(() => {\n    new SimpleSchema({\n      list: {type: Function},\n      todosReady: {type: Boolean},\n      todos: {type: Mongo.Cursor}\n    }).validate(Template.currentData());\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Built-in If/Else If Block Helper HTML\nDESCRIPTION: Illustrates how to chain conditional checks using the built-in Spacebars `{{#if}}` and `{{else if}}` block helpers. It evaluates `condition1`. If false, it evaluates `condition2`, and so on. The content within the first block whose condition evaluates to truthy is rendered; otherwise, the content within the final `{{else}}` block (if present) is rendered.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n{{#if condition1}}\n  <p>It's condition1 true</p>\n{{else if condition2}}\n  <p>It's condition2 true</p>\n{{else}}\n  <p>It's false</p>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Using Blaze.render method in JavaScript\nDESCRIPTION: The Blaze.render method renders a template or View and inserts it into the DOM. It returns the rendered View object which updates reactively in response to data changes.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/blaze.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBlaze.render(templateOrView, parentNode, [nextNode], [parentView])\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Templates - Blaze - HTML\nDESCRIPTION: Demonstrates using the `{{> Template.dynamic}}` helper in a Spacebars template to render a template whose name is determined dynamically by a variable (`templateName`). It also allows passing a specific `dataContext`, enabling flexible component rendering based on data or state. Requires the `dynamic-template` package (often built-in).\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusable-components.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n{{> Template.dynamic templateName dataContext}}\n```\n\n----------------------------------------\n\nTITLE: Using Blaze.toHTMLWithData method in JavaScript\nDESCRIPTION: The Blaze.toHTMLWithData method renders a template with data context to HTML string. It's equivalent to using Blaze.toHTML with Blaze.With.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/blaze.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBlaze.toHTMLWithData(templateOrView, data)\n```\n\n----------------------------------------\n\nTITLE: Using Nested Sub-expressions with Parentheses in Spacebars (HTML)\nDESCRIPTION: Demonstrates nested helper calls in Spacebars using parentheses to explicitly dictate evaluation order. Here, getSummary is evaluated and its result passed to capitalize. No special dependencies except registered helpers; expected input is a 'post' object, output is the capitalized summary string. Useful for composing transformation chains.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n{{capitalize (getSummary post)}}\n```\n\n----------------------------------------\n\nTITLE: Nested #let Blocks and Combined Async State Checks (HTML)\nDESCRIPTION: Demonstrates how to nest #let blocks and combine async state checks for multiple bindings. This example evaluates the async states (pending, rejected, resolved) across both inner and outer #let bindings, enabling granular state-dependent UI updates. Assumes helper functions return promises and require the presence of getNameAsynchronously and getColorAsynchronously helpers. Input consists of async functions, and outputs are conditional template content blocks contingent on each binding's state.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n{{#let name=getNameAsynchronously}}\n  {{#let color=getColorAsynchronously}}\n    {{#if @pending}}\n      We are fetching your color...\n    {{/if}}\n    {{#if @rejected 'name'}}\n      Sorry, an error occurred while fetching your name!\n    {{/if}}\n    {{#if @resolved 'color' 'name'}}\n      {{name}} gets a {{color}} card!\n    {{/if}}\n  {{/let}}\n{{/let}}\n```\n\n----------------------------------------\n\nTITLE: Chaining Block Tags with Else Clauses\nDESCRIPTION: Demonstrates how to chain block tags with multiple else clauses, providing alternative content for different conditions.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n{{#foo}}\n  <p>Foo</p>\n{{else bar}}\n  <p>Bar</p>\n{{else}}\n  <p></p>\n{{/foo}}\n```\n\n----------------------------------------\n\nTITLE: Using Blaze.getData method in JavaScript\nDESCRIPTION: The Blaze.getData method returns the data context of a given DOM element. It traverses up the element's ancestors until it finds one with a data context.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/blaze.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBlaze.getData([elementOrView])\n```\n\n----------------------------------------\n\nTITLE: Including Child Component with Data in Blaze Template\nDESCRIPTION: An HTML template snippet showing how to include a child component (Lists_show_page) with data passed from the listArgs helper.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/smart-components.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{{> Lists_show_page (listArgs listId)}}\n```\n\n----------------------------------------\n\nTITLE: Querying Async States with @pending, @rejected, @resolved Helpers (HTML)\nDESCRIPTION: Shows how to interactively check the promise state of variables defined by #let binding using global helpers like @pending, @rejected, and @resolved. These helpers determine and render content based on the resolution, rejection, or pending state of async data sources. Requires promise-returning helpers or data sources registered with Meteor and works within a #let block, checking individual or all bindings as arguments. Outputs context-sensitive messages according to the current promise status of each binding.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n{{#let name=getNameAsynchronously}}\n  {{#if @pending 'name'}}\n    We are fetching your name...\n  {{/if}}\n  {{#if @rejected 'name'}}\n    Sorry, an error occured!\n  {{/if}}\n  {{#if @resolved 'name'}}\n    Hi, {{name}}!\n  {{/if}}\n{{/let}}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in If Block Helper HTML\nDESCRIPTION: Demonstrates the basic usage of the built-in Spacebars `{{#if}}` block helper for conditional rendering. It evaluates the truthiness of a value (`something`). If the value is truthy, the content within the `{{#if}}` block is rendered; otherwise, the content within the optional `{{else}}` block is rendered.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n{{#if something}}\n  <p>It's true</p>\n{{else}}\n  <p>It's false</p>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Basic Block Tag Structure\nDESCRIPTION: Demonstrates the basic structure of a block tag in Blaze templates. Block tags can contain HTML content with balanced tags.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{{#block}}\n  <p>Hello</p>\n{{/block}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Plugin After Subscription Cleanup and Template Rendered in Blaze Using JavaScript\nDESCRIPTION: This snippet depicts how to wait for a subscription to be ready in the 'onRendered' callback of a Blaze template, then use 'Tracker.afterFlush' to ensure the DOM is fully updated before running a jQuery plugin or other UI logic. This approach facilitates integration with third-party libraries that depend on updated content after reactive data loads, such as code syntax highlighters.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/templates.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.listing.onRendered(function () {\n  var template = this;\n  \n  template.subscribe('listOfThings', () => {\n    // Wait for the data to load using the callback\n    Tracker.afterFlush(() => {\n      // Use Tracker.afterFlush to wait for the UI to re-render\n      // then use highlight.js to highlight a code snippet\n      highlightBlock(template.find('.code'));\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Atmosphere-installed jQuery in Meteor Client JS\nDESCRIPTION: JavaScript import statement for including the Atmospherejs-installed jQuery library from the `meteor/jquery` package in a client-side file. This makes the exported `$` object available for use.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/index.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {$} from 'meteor/jquery';\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery via Atmospherejs for Meteor Blaze\nDESCRIPTION: Shell command to add the official Meteor jQuery package (version 3.0.0 specified) using Atmospherejs, Meteor's traditional package manager. This provides an alternative method for adding jQuery.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add jquery@3.0.0\n```\n\n----------------------------------------\n\nTITLE: Adding Flow Router Extra Package in Meteor - Shell\nDESCRIPTION: This code snippet shows the terminal command needed to install Flow Router Extra ('ostrio:flow-router-extra'), which is an enhanced version of Flow Router including additional features like waitOn and template context. The command 'meteor add ostrio:flow-router-extra' is executed within the Meteor project folder. Dependencies include a working Meteor installation and access to the internet. The snippet does not require any arguments or parameters beyond the specified package name.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/routing.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add ostrio:flow-router-extra\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery via npm for Meteor Blaze\nDESCRIPTION: Shell command to install the latest version of jQuery using npm within a Meteor project directory. This adds jQuery as a project dependency, resolving potential 'jQuery not found' errors.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install jquery@latest --save\n```\n\n----------------------------------------\n\nTITLE: Defining Custom If Block Helper Template HTML\nDESCRIPTION: Defines a template named `myIf` that is structured to function as a custom block helper. It uses the standard `{{#if}}` helper internally to check a `condition` passed to it. Based on the condition's truthiness, it conditionally renders either the content block provided by the caller (`{{> Template.contentBlock}}`) or the `{{else}}` block (`{{> Template.elseBlock}}`).\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<template name=\"myIf\">\n  {{#if condition}}\n    {{> Template.contentBlock}}\n  {{else}}\n    {{> Template.elseBlock}}\n  {{/if}}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Elements with HTMLjs\nDESCRIPTION: This snippet demonstrates how to create HTML elements using the HTMLjs library. It utilizes constructors like `UL`, `LI`, and `B` to build an HTML structure.  The `HTML.toHTML` function is then used to convert the structure into an HTML string for rendering in Blaze. This example showcases nested elements and the basic syntax for defining HTML content using JavaScript.\nSOURCE: https://github.com/meteor/blaze/blob/master/packages/htmljs/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar UL = HTML.UL, LI = HTML.LI, B = HTML.B;\n\nHTML.toHTML(\n  UL({id: 'mylist'},\n     LI({'class': 'item'}, \"Hello \", B(\"world\"), \"!\"),\n     LI({'class': 'item'}, \"Goodbye, world\")))\n```\n\n----------------------------------------\n\nTITLE: Tag Object Structure Used by Meteor Templating Tools - JavaScript\nDESCRIPTION: This code illustrates the structure of a Tag object as produced by scanHtmlForTags and consumed by compileTagsWithSpacebars in the templating-tools package. Each Tag object stores metadata such as tag name, attributes (attribs), tag contents, start indices for the tag and its contents in the source file, the full file contents, and the source filename. This structure aids in precise error reporting and template transformations. No dependencies required for this structure definition.\nSOURCE: https://github.com/meteor/blaze/blob/master/packages/templating-tools/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  tagName: String,\n  attribs: { [attrName]: String },\n  contents: String,\n  tagStartIndex: Number,\n  contentsStartIndex: Number,\n  fileContents: String,\n  sourceName: String\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ReactiveDict State - Blaze - JavaScript\nDESCRIPTION: Initializes a `ReactiveDict` instance on the template instance (`this.state`) within the `onCreated` callback. Sets default values for component-specific internal state variables, providing a reactive way to manage UI state without polluting the global namespace. Requires the `reactive-dict` package.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/reusable-components.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.Lists_show.onCreated(function() {\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    editing: false,\n    editingTodo: false\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies for Hexo\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the project dependencies defined in the `package.json` file. This step is required before starting the Hexo development server to ensure all necessary packages for building the Blaze JS documentation site are available. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning Blaze Repository (bash)\nDESCRIPTION: This command clones the Blaze repository from GitHub, including all its submodules using the --recursive flag. This is the initial step required to obtain the local source code for development or testing purposes.\nSOURCE: https://github.com/meteor/blaze/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://github.com/meteor/blaze.git\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML Fragment with parseFragment\nDESCRIPTION: This snippet demonstrates how to use `HTMLTools.parseFragment` to parse an HTML fragment string. The input string is parsed and converted into an HTMLjs object representation.\nSOURCE: https://github.com/meteor/blaze/blob/master/packages/html-tools/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nHTMLTools.parseFragment(\"<div class=greeting>Hello<br>World</div>\")\n\n=> HTML.DIV({'class':'greeting'}, \"Hello\", HTML.BR(), \"World\")\n```\n\n----------------------------------------\n\nTITLE: Sub-expression Keyword Argument Usage in Template Inclusion (HTML)\nDESCRIPTION: Shows how to pass the result of a helper function as a keyword argument to another template in Spacebars using parentheses. Inputs include 'post' and registered helper; output is the rendering of tmpl with 'arg' set to the result of helper(post). Requires prior definition of the helper and tmpl.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n{{> tmpl arg=(helper post)}}\n```\n\n----------------------------------------\n\nTITLE: Starting the Hexo Development Server for Blaze Docs\nDESCRIPTION: This command executes the 'start' script defined in the project's `package.json` file, typically used to launch the Hexo development server. Running this command will build the Blaze JS documentation site, generate the `data/data.js` API file from source code comments, and serve the site locally for preview. Requires Node.js, npm, and prior execution of `npm install`.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Custom Block Helper Template Wrapping Content with div (HTML)\nDESCRIPTION: Implements a custom block helper named 'note' as a template that wraps any supplied content in a div with a specific class. Utilizes {{> Template.contentBlock }} for slot-like behavior. No special dependencies besides the template system; input is arbitrary block content. Outputs the wrapped HTML content within a styled container.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"note\">\n  <div class=\"note\">\n    {{> Template.contentBlock}}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Attributes with Helper HTML\nDESCRIPTION: Illustrates the use of an attribute helper (`attributes`) within an HTML element's attribute list using Spacebars syntax (`{{attributes}}`). The helper is expected to return a JavaScript object where keys represent HTML attribute names (e.g., `class`, `style`) and values are their corresponding values, allowing dynamic application of multiple attributes at once.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<a {{attributes}}>My Link</a>\n```\n\n----------------------------------------\n\nTITLE: Publishing Individual Meteor Packages Manually using Bash\nDESCRIPTION: Demonstrates the commands to navigate into a specific package's directory (`cd packages/<package-name>`) and then use the `meteor publish` command to publish only that individual package. This is an alternative to the automated script if only specific packages need publishing. Requires Meteor to be installed and the user logged in.\nSOURCE: https://github.com/meteor/blaze/blob/master/DEPLOYMENT.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/<package-name>\nmeteor publish\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Test Environment (bash)\nDESCRIPTION: Navigates into the 'test-app' directory, installs its Node.js dependencies using 'meteor npm install', and then runs a setup script ('meteor npm run setup') to establish necessary links to the local Blaze packages. This sequence prepares the test project for executing local tests and lint checks.\nSOURCE: https://github.com/meteor/blaze/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd test-app\n$ meteor npm install   # install dependencies\n$ meteor npm run setup # create link to packages\n```\n\n----------------------------------------\n\nTITLE: Running Meteor with Temporary Local Packages (bash)\nDESCRIPTION: This command starts your Meteor application using packages located in the specified local directory (/home/user/projects/blaze/packages) by setting the METEOR_PACKAGE_DIRS environment variable. This is a temporary way to test local changes in Blaze without modifying your app's permanent package dependencies.\nSOURCE: https://github.com/meteor/blaze/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMETEOR_PACKAGE_DIRS=/home/user/projects/blaze/packages meteor\n```\n\n----------------------------------------\n\nTITLE: Defining Meteor Blaze Template in HTML with Spacebars Syntax\nDESCRIPTION: Specifies a Blaze template named 'myPictures' using the `<template>` HTML tag. The template uses Spacebars to dynamically iterate over 'pictures', rendering an image tag for each item. This template forms the basis for interaction in corresponding JavaScript helpers and lifecycle callbacks. The naming convention avoids special characters. The template content provides the DOM structure accessible in lifecycle methods and event handlers.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/templates.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<template name=\"myPictures\">\n  <div class=\"container\">\n    {{#each pictures}}\n      <img class=\"item\" src=\"/{{.}}\"/>\n    {{/each}}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Constructed Object Detection in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to detect \"constructed objects\" within the context of the HTML framework. It distinguishes between objects created with `new Foo` (constructed objects) and vanilla objects ({...}) which are used as attribute dictionaries.  The test checks if an object is an object and if its constructor is set on a prototype.\nSOURCE: https://github.com/meteor/blaze/blob/master/packages/htmljs/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Foo = function () {};\nvar x = new Foo; // x is a constructed object\n```\n\n----------------------------------------\n\nTITLE: Creating Symlinks for Local Packages (bash)\nDESCRIPTION: These commands demonstrate how to create symbolic links from specific package directories within your local Blaze repository clone to a 'packages' directory inside your application. This method makes your app use the local versions of these packages until the links are removed, providing a more persistent setup than using METEOR_PACKAGE_DIRS.\nSOURCE: https://github.com/meteor/blaze/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nln -s /home/user/projects/blaze/packages/blaze packages/\nln -s /home/user/projects/blaze/packages/blaze-html-templates packages/\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Properties in JavaScript\nDESCRIPTION: This code demonstrates how to access the `currentTarget` and `target` properties of the event object within a click handler.  It shows how to use the properties to identify the element that triggered the event (target) and the element the event handler is attached to (currentTarget). This applies to event bubbling.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/templates.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n{\n  'click p'(event) {\n    var paragraph = event.currentTarget; // always a P\n    var clickedElement = event.target; // could be the P or a child element\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Linter Check for Package (bash)\nDESCRIPTION: Navigates to the 'test-app' directory and executes the 'lint:check' npm script for a specified local package, such as './packages/templating-compiler'. This command performs static code analysis based on the project's eslint configuration to identify code style and quality issues in the target package.\nSOURCE: https://github.com/meteor/blaze/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd test-app\n$ meteor npm run lint:check -- ./packages/templating-compiler\n```\n\n----------------------------------------\n\nTITLE: Using Custom If Block Helper Template HTML\nDESCRIPTION: Defines a template named `caller` that demonstrates how to utilize the previously defined `myIf` template as a custom block helper. It passes a `condition` argument using keyword syntax (`condition=true`) and provides the HTML content within the block and within the `{{else}}` block, which will be conditionally rendered by the `myIf` template.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<template name=\"caller\">\n  {{#myIf condition=true}}\n    <h1>I'll be rendered!</h1>\n  {{else}}\n    <h1>I won't be rendered</h1>\n{{/myIf}}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running Local Blaze Tests (bash)\nDESCRIPTION: Executes the 'test:watch' npm script within the 'test-app' directory. This command runs the test suite for the local Blaze packages, typically in a mode that watches for file changes and automatically re-runs relevant tests upon modification, facilitating rapid testing during development.\nSOURCE: https://github.com/meteor/blaze/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ meteor npm run test:watch\n```\n\n----------------------------------------\n\nTITLE: Equivalent Nested Block Helpers in Spacebars HTML Templates\nDESCRIPTION: Shows the equivalent nested structure of chained block helpers. This example demonstrates how chained block helpers are processed as nested blocks with the same conditional logic for input field rendering.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/guide/spacebars.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n{{#input isRadio}}\n  <input type=\"radio\" />\n{{else}}\n  {{#input isCheckbox}}\n    <input type=\"checkbox\" />\n  {{else}}\n    <input type=\"text\" />\n  {{/input}}\n{{/input}}\n```\n\n----------------------------------------\n\nTITLE: Running Linter Check Example 2 (bash)\nDESCRIPTION: Another example demonstrating how to run the 'lint:check' npm script from the 'test-app' directory on a specific local package directory like './packages/templating-compiler'. This command checks the code in the designated package for compliance with the project's linting rules.\nSOURCE: https://github.com/meteor/blaze/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd test-app\n$ meteor npm run lint:check -- ./packages/templating-compiler\n```\n\n----------------------------------------\n\nTITLE: Each Block with Named Item Variable\nDESCRIPTION: Demonstrates the newer variant of #each that introduces a named variable for the current item without changing the data context.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n{{#each person in people}}\n  <li>{{person.name}}</li>\n{{/each}}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Identifying Missing jQuery Error in Blaze\nDESCRIPTION: Displays the common 'jQuery not found' runtime error message that can occur in Meteor Blaze applications, particularly with older packages, if jQuery is not available. This indicates a missing dependency.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nUncaught Error: jQuery not found\n```\n\n----------------------------------------\n\nTITLE: Template Inclusion with Data Context\nDESCRIPTION: Shows the equivalent code for template inclusion with a data context. The data object becomes the context for the included template.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{{#with dataObj}}\n  {{> templateName}}\n{{/with}}\n```\n\n----------------------------------------\n\nTITLE: Registering HTML Compiler with CachingHtmlCompiler in Meteor JS\nDESCRIPTION: Demonstrates how to register a Meteor build compiler for `.html` files using `Plugin.registerCompiler`. It shows the instantiation of `CachingHtmlCompiler` with specific parameters, including a name and references to scanner and handler functions from `TemplatingTools`, enabling the processing of HTML templates with caching.\nSOURCE: https://github.com/meteor/blaze/blob/master/packages/caching-html-compiler/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nPlugin.registerCompiler({\n  extensions: ['html'],\n  archMatching: 'web',\n  isTemplate: true\n}, () => new CachingHtmlCompiler(\n  \"templating\",\n  TemplatingTools.scanHtmlForTags,\n  TemplatingTools.compileTagsWithSpacebars\n));\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Attributes in HTML Elements\nDESCRIPTION: Demonstrates how to use double-braced tags to specify arbitrary attributes in HTML elements. Dynamic attributes are combined from left to right with later values overwriting previous ones.\nSOURCE: https://github.com/meteor/blaze/blob/master/site/source/api/spacebars.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div {{attrs}}>...</div>\n\n<input type=checkbox {{isChecked}}>\n```\n\n----------------------------------------\n\nTITLE: Publishing All Packages Automatically using Bash Script\nDESCRIPTION: Executes the `publish-all.sh` script located in the project's root directory to automatically publish all Meteor Blaze packages according to the defined dependency order. Requires Meteor to be installed, the user logged in, and version numbers in package.js files updated.\nSOURCE: https://github.com/meteor/blaze/blob/master/DEPLOYMENT.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./publish-all.sh\n```"
  }
]